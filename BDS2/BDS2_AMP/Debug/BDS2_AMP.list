
BDS2_AMP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a7e0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018b4  0800a968  0800a968  0001a968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c21c  0800c21c  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c21c  0800c21c  0001c21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c224  0800c224  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c224  0800c224  0001c224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c228  0800c228  0001c228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800c22c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  200000b0  0800c2dc  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000290  0800c2dc  00020290  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151e1  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035cc  00000000  00000000  000352c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00038890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  000398d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025508  00000000  00000000  0003a778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000166cc  00000000  00000000  0005fc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000da6ff  00000000  00000000  0007634c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150a4b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000441c  00000000  00000000  00150aa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b0 	.word	0x200000b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a950 	.word	0x0800a950

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b4 	.word	0x200000b4
 80001c4:	0800a950 	.word	0x0800a950

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295
 8000af4:	f000 b96e 	b.w	8000dd4 <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9d08      	ldr	r5, [sp, #32]
 8000b16:	4604      	mov	r4, r0
 8000b18:	468c      	mov	ip, r1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f040 8083 	bne.w	8000c26 <__udivmoddi4+0x116>
 8000b20:	428a      	cmp	r2, r1
 8000b22:	4617      	mov	r7, r2
 8000b24:	d947      	bls.n	8000bb6 <__udivmoddi4+0xa6>
 8000b26:	fab2 f282 	clz	r2, r2
 8000b2a:	b142      	cbz	r2, 8000b3e <__udivmoddi4+0x2e>
 8000b2c:	f1c2 0020 	rsb	r0, r2, #32
 8000b30:	fa24 f000 	lsr.w	r0, r4, r0
 8000b34:	4091      	lsls	r1, r2
 8000b36:	4097      	lsls	r7, r2
 8000b38:	ea40 0c01 	orr.w	ip, r0, r1
 8000b3c:	4094      	lsls	r4, r2
 8000b3e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b42:	0c23      	lsrs	r3, r4, #16
 8000b44:	fbbc f6f8 	udiv	r6, ip, r8
 8000b48:	fa1f fe87 	uxth.w	lr, r7
 8000b4c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b54:	fb06 f10e 	mul.w	r1, r6, lr
 8000b58:	4299      	cmp	r1, r3
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x60>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b62:	f080 8119 	bcs.w	8000d98 <__udivmoddi4+0x288>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 8116 	bls.w	8000d98 <__udivmoddi4+0x288>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b78:	fb08 3310 	mls	r3, r8, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x8c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	f080 8105 	bcs.w	8000d9c <__udivmoddi4+0x28c>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f240 8102 	bls.w	8000d9c <__udivmoddi4+0x28c>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	443c      	add	r4, r7
 8000b9c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba0:	eba4 040e 	sub.w	r4, r4, lr
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	b11d      	cbz	r5, 8000bb0 <__udivmoddi4+0xa0>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	b902      	cbnz	r2, 8000bba <__udivmoddi4+0xaa>
 8000bb8:	deff      	udf	#255	; 0xff
 8000bba:	fab2 f282 	clz	r2, r2
 8000bbe:	2a00      	cmp	r2, #0
 8000bc0:	d150      	bne.n	8000c64 <__udivmoddi4+0x154>
 8000bc2:	1bcb      	subs	r3, r1, r7
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f f887 	uxth.w	r8, r7
 8000bcc:	2601      	movs	r6, #1
 8000bce:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bd2:	0c21      	lsrs	r1, r4, #16
 8000bd4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bdc:	fb08 f30c 	mul.w	r3, r8, ip
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d907      	bls.n	8000bf4 <__udivmoddi4+0xe4>
 8000be4:	1879      	adds	r1, r7, r1
 8000be6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0xe2>
 8000bec:	428b      	cmp	r3, r1
 8000bee:	f200 80e9 	bhi.w	8000dc4 <__udivmoddi4+0x2b4>
 8000bf2:	4684      	mov	ip, r0
 8000bf4:	1ac9      	subs	r1, r1, r3
 8000bf6:	b2a3      	uxth	r3, r4
 8000bf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c00:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c04:	fb08 f800 	mul.w	r8, r8, r0
 8000c08:	45a0      	cmp	r8, r4
 8000c0a:	d907      	bls.n	8000c1c <__udivmoddi4+0x10c>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x10a>
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	f200 80d9 	bhi.w	8000dcc <__udivmoddi4+0x2bc>
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	eba4 0408 	sub.w	r4, r4, r8
 8000c20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c24:	e7bf      	b.n	8000ba6 <__udivmoddi4+0x96>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0x12e>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	f000 80b1 	beq.w	8000d92 <__udivmoddi4+0x282>
 8000c30:	2600      	movs	r6, #0
 8000c32:	e9c5 0100 	strd	r0, r1, [r5]
 8000c36:	4630      	mov	r0, r6
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	fab3 f683 	clz	r6, r3
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d14a      	bne.n	8000cdc <__udivmoddi4+0x1cc>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0x140>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 80b8 	bhi.w	8000dc0 <__udivmoddi4+0x2b0>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb61 0103 	sbc.w	r1, r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	468c      	mov	ip, r1
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0a8      	beq.n	8000bb0 <__udivmoddi4+0xa0>
 8000c5e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c62:	e7a5      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000c64:	f1c2 0320 	rsb	r3, r2, #32
 8000c68:	fa20 f603 	lsr.w	r6, r0, r3
 8000c6c:	4097      	lsls	r7, r2
 8000c6e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c72:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c76:	40d9      	lsrs	r1, r3
 8000c78:	4330      	orrs	r0, r6
 8000c7a:	0c03      	lsrs	r3, r0, #16
 8000c7c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8c:	fb06 f108 	mul.w	r1, r6, r8
 8000c90:	4299      	cmp	r1, r3
 8000c92:	fa04 f402 	lsl.w	r4, r4, r2
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x19c>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c9e:	f080 808d 	bcs.w	8000dbc <__udivmoddi4+0x2ac>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 808a 	bls.w	8000dbc <__udivmoddi4+0x2ac>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b281      	uxth	r1, r0
 8000cb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbc:	fb00 f308 	mul.w	r3, r0, r8
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x1c4>
 8000cc4:	1879      	adds	r1, r7, r1
 8000cc6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cca:	d273      	bcs.n	8000db4 <__udivmoddi4+0x2a4>
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d971      	bls.n	8000db4 <__udivmoddi4+0x2a4>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4439      	add	r1, r7
 8000cd4:	1acb      	subs	r3, r1, r3
 8000cd6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cda:	e778      	b.n	8000bce <__udivmoddi4+0xbe>
 8000cdc:	f1c6 0c20 	rsb	ip, r6, #32
 8000ce0:	fa03 f406 	lsl.w	r4, r3, r6
 8000ce4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ce8:	431c      	orrs	r4, r3
 8000cea:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cee:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cf6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cfa:	431f      	orrs	r7, r3
 8000cfc:	0c3b      	lsrs	r3, r7, #16
 8000cfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d02:	fa1f f884 	uxth.w	r8, r4
 8000d06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d0a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d0e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d12:	458a      	cmp	sl, r1
 8000d14:	fa02 f206 	lsl.w	r2, r2, r6
 8000d18:	fa00 f306 	lsl.w	r3, r0, r6
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x220>
 8000d1e:	1861      	adds	r1, r4, r1
 8000d20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d24:	d248      	bcs.n	8000db8 <__udivmoddi4+0x2a8>
 8000d26:	458a      	cmp	sl, r1
 8000d28:	d946      	bls.n	8000db8 <__udivmoddi4+0x2a8>
 8000d2a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d2e:	4421      	add	r1, r4
 8000d30:	eba1 010a 	sub.w	r1, r1, sl
 8000d34:	b2bf      	uxth	r7, r7
 8000d36:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d42:	fb00 f808 	mul.w	r8, r0, r8
 8000d46:	45b8      	cmp	r8, r7
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x24a>
 8000d4a:	19e7      	adds	r7, r4, r7
 8000d4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d50:	d22e      	bcs.n	8000db0 <__udivmoddi4+0x2a0>
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d92c      	bls.n	8000db0 <__udivmoddi4+0x2a0>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4427      	add	r7, r4
 8000d5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d5e:	eba7 0708 	sub.w	r7, r7, r8
 8000d62:	fba0 8902 	umull	r8, r9, r0, r2
 8000d66:	454f      	cmp	r7, r9
 8000d68:	46c6      	mov	lr, r8
 8000d6a:	4649      	mov	r1, r9
 8000d6c:	d31a      	bcc.n	8000da4 <__udivmoddi4+0x294>
 8000d6e:	d017      	beq.n	8000da0 <__udivmoddi4+0x290>
 8000d70:	b15d      	cbz	r5, 8000d8a <__udivmoddi4+0x27a>
 8000d72:	ebb3 020e 	subs.w	r2, r3, lr
 8000d76:	eb67 0701 	sbc.w	r7, r7, r1
 8000d7a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d7e:	40f2      	lsrs	r2, r6
 8000d80:	ea4c 0202 	orr.w	r2, ip, r2
 8000d84:	40f7      	lsrs	r7, r6
 8000d86:	e9c5 2700 	strd	r2, r7, [r5]
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	462e      	mov	r6, r5
 8000d94:	4628      	mov	r0, r5
 8000d96:	e70b      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	e6e9      	b.n	8000b70 <__udivmoddi4+0x60>
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	e6fd      	b.n	8000b9c <__udivmoddi4+0x8c>
 8000da0:	4543      	cmp	r3, r8
 8000da2:	d2e5      	bcs.n	8000d70 <__udivmoddi4+0x260>
 8000da4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000da8:	eb69 0104 	sbc.w	r1, r9, r4
 8000dac:	3801      	subs	r0, #1
 8000dae:	e7df      	b.n	8000d70 <__udivmoddi4+0x260>
 8000db0:	4608      	mov	r0, r1
 8000db2:	e7d2      	b.n	8000d5a <__udivmoddi4+0x24a>
 8000db4:	4660      	mov	r0, ip
 8000db6:	e78d      	b.n	8000cd4 <__udivmoddi4+0x1c4>
 8000db8:	4681      	mov	r9, r0
 8000dba:	e7b9      	b.n	8000d30 <__udivmoddi4+0x220>
 8000dbc:	4666      	mov	r6, ip
 8000dbe:	e775      	b.n	8000cac <__udivmoddi4+0x19c>
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	e74a      	b.n	8000c5a <__udivmoddi4+0x14a>
 8000dc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dc8:	4439      	add	r1, r7
 8000dca:	e713      	b.n	8000bf4 <__udivmoddi4+0xe4>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	e724      	b.n	8000c1c <__udivmoddi4+0x10c>
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <AT24CXX_Init>:
//All rights reserved
//////////////////////////////////////////////////////////////////////////////////

//初始化IIC接口
void AT24CXX_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	IIC_Init();//IIC初始化
 8000ddc:	f005 fda0 	bl	8006920 <IIC_Init>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <AT24CXX_ReadOneByte>:
//在AT24CXX指定地址读出一个数据
//ReadAddr:开始读数的地址
//返回值  :读到的数据
u8 AT24CXX_ReadOneByte(u16 ReadAddr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
	u8 temp=0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	73fb      	strb	r3, [r7, #15]
    IIC_Start();
 8000df2:	f005 fda7 	bl	8006944 <IIC_Start>
	if(EE_TYPE>AT24C16)
	{
		IIC_Send_Byte(0XA0);	   //发送写命令
		IIC_Wait_Ack();
		IIC_Send_Byte(ReadAddr>>8);//发送高地址
	}else IIC_Send_Byte(0XA0+((ReadAddr/256)<<1));   //发送器件地址0XA0,写数据
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	3b60      	subs	r3, #96	; 0x60
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f005 fe76 	bl	8006af8 <IIC_Send_Byte>
	IIC_Wait_Ack();
 8000e0c:	f005 fdea 	bl	80069e4 <IIC_Wait_Ack>
    IIC_Send_Byte(ReadAddr%256);   //发送低地址
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4618      	mov	r0, r3
 8000e16:	f005 fe6f 	bl	8006af8 <IIC_Send_Byte>
	IIC_Wait_Ack();
 8000e1a:	f005 fde3 	bl	80069e4 <IIC_Wait_Ack>
	IIC_Start();
 8000e1e:	f005 fd91 	bl	8006944 <IIC_Start>
	IIC_Send_Byte(0XA1);           //进入接收模式
 8000e22:	20a1      	movs	r0, #161	; 0xa1
 8000e24:	f005 fe68 	bl	8006af8 <IIC_Send_Byte>
	IIC_Wait_Ack();
 8000e28:	f005 fddc 	bl	80069e4 <IIC_Wait_Ack>
    temp=IIC_Read_Byte(0);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f005 fea3 	bl	8006b78 <IIC_Read_Byte>
 8000e32:	4603      	mov	r3, r0
 8000e34:	73fb      	strb	r3, [r7, #15]
    IIC_Stop();//产生一个停止条件
 8000e36:	f005 fdad 	bl	8006994 <IIC_Stop>
	return temp;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <AT24CXX_WriteOneByte>:
//在AT24CXX指定地址写入一个数据
//WriteAddr  :写入数据的目的地址
//DataToWrite:要写入的数据
void AT24CXX_WriteOneByte(u16 WriteAddr,u8 DataToWrite)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	460a      	mov	r2, r1
 8000e4e:	80fb      	strh	r3, [r7, #6]
 8000e50:	4613      	mov	r3, r2
 8000e52:	717b      	strb	r3, [r7, #5]
    IIC_Start();
 8000e54:	f005 fd76 	bl	8006944 <IIC_Start>
	if(EE_TYPE>AT24C16)
	{
		IIC_Send_Byte(0XA0);	    //发送写命令
		IIC_Wait_Ack();
		IIC_Send_Byte(WriteAddr>>8);//发送高地址
	}else IIC_Send_Byte(0XA0+((WriteAddr/256)<<1));   //发送器件地址0XA0,写数据
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	0a1b      	lsrs	r3, r3, #8
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	3b60      	subs	r3, #96	; 0x60
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f005 fe45 	bl	8006af8 <IIC_Send_Byte>
	IIC_Wait_Ack();
 8000e6e:	f005 fdb9 	bl	80069e4 <IIC_Wait_Ack>
    IIC_Send_Byte(WriteAddr%256);   //发送低地址
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f005 fe3e 	bl	8006af8 <IIC_Send_Byte>
	IIC_Wait_Ack();
 8000e7c:	f005 fdb2 	bl	80069e4 <IIC_Wait_Ack>
	IIC_Send_Byte(DataToWrite);     //发送字节
 8000e80:	797b      	ldrb	r3, [r7, #5]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f005 fe38 	bl	8006af8 <IIC_Send_Byte>
	IIC_Wait_Ack();
 8000e88:	f005 fdac 	bl	80069e4 <IIC_Wait_Ack>
    IIC_Stop();//产生一个停止条件
 8000e8c:	f005 fd82 	bl	8006994 <IIC_Stop>
	delay_ms(10);
 8000e90:	200a      	movs	r0, #10
 8000e92:	f000 f975 	bl	8001180 <delay_ms>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <AT24CXX_WriteLenByte>:
//该函数用于写入16bit或者32bit的数据.
//WriteAddr  :开始写入的地址
//DataToWrite:数据数组首地址
//Len        :要写入数据的长度2,4
void AT24CXX_WriteLenByte(u16 WriteAddr,u32 DataToWrite,u8 Len)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	6039      	str	r1, [r7, #0]
 8000ea8:	80fb      	strh	r3, [r7, #6]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	717b      	strb	r3, [r7, #5]
	u8 t;
	for(t=0;t<Len;t++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	73fb      	strb	r3, [r7, #15]
 8000eb2:	e010      	b.n	8000ed6 <AT24CXX_WriteLenByte+0x38>
	{
		AT24CXX_WriteOneByte(WriteAddr+t,(DataToWrite>>(8*t))&0xff);
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	4413      	add	r3, r2
 8000ebc:	b298      	uxth	r0, r3
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f7ff ffba 	bl	8000e44 <AT24CXX_WriteOneByte>
	for(t=0;t<Len;t++)
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	7bfa      	ldrb	r2, [r7, #15]
 8000ed8:	797b      	ldrb	r3, [r7, #5]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d3ea      	bcc.n	8000eb4 <AT24CXX_WriteLenByte+0x16>
	}
}
 8000ede:	bf00      	nop
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <AT24CXX_ReadLenByte>:
//该函数用于读出16bit或者32bit的数据.
//ReadAddr   :开始读出的地址
//返回值     :数据
//Len        :要读出数据的长度2,4
u32 AT24CXX_ReadLenByte(u16 ReadAddr,u8 Len)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	80fb      	strh	r3, [r7, #6]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	717b      	strb	r3, [r7, #5]
	u8 t;
	u32 temp=0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
	for(t=0;t<Len;t++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	e018      	b.n	8000f34 <AT24CXX_ReadLenByte+0x4c>
	{
		temp<<=8;
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	60bb      	str	r3, [r7, #8]
		temp+=AT24CXX_ReadOneByte(ReadAddr+Len-t-1);
 8000f08:	797b      	ldrb	r3, [r7, #5]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	4413      	add	r3, r2
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff60 	bl	8000de4 <AT24CXX_ReadOneByte>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<Len;t++)
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	3301      	adds	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	797b      	ldrb	r3, [r7, #5]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d3e2      	bcc.n	8000f02 <AT24CXX_ReadLenByte+0x1a>
	}
	return temp;
 8000f3c:	68bb      	ldr	r3, [r7, #8]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f5a:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f5c:	4a21      	ldr	r2, [pc, #132]	; (8000fe4 <MX_ADC1_Init+0x9c>)
 8000f5e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f60:	4b1f      	ldr	r3, [pc, #124]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f66:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f68:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f6e:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f8a:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <MX_ADC1_Init+0xa0>)
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa8:	480d      	ldr	r0, [pc, #52]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000faa:	f007 f867 	bl	800807c <HAL_ADC_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fb4:	f005 fcae 	bl	8006914 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fb8:	2306      	movs	r3, #6
 8000fba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_ADC1_Init+0x98>)
 8000fca:	f007 f9c9 	bl	8008360 <HAL_ADC_ConfigChannel>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fd4:	f005 fc9e 	bl	8006914 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	200000e0 	.word	0x200000e0
 8000fe4:	40012000 	.word	0x40012000
 8000fe8:	0f000001 	.word	0x0f000001

08000fec <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a2f      	ldr	r2, [pc, #188]	; (80010c8 <HAL_ADC_MspInit+0xdc>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d158      	bne.n	80010c0 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <HAL_ADC_MspInit+0xe0>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	4a2d      	ldr	r2, [pc, #180]	; (80010cc <HAL_ADC_MspInit+0xe0>)
 8001018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101c:	6453      	str	r3, [r2, #68]	; 0x44
 800101e:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <HAL_ADC_MspInit+0xe0>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b27      	ldr	r3, [pc, #156]	; (80010cc <HAL_ADC_MspInit+0xe0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a26      	ldr	r2, [pc, #152]	; (80010cc <HAL_ADC_MspInit+0xe0>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b24      	ldr	r3, [pc, #144]	; (80010cc <HAL_ADC_MspInit+0xe0>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0301 	and.w	r3, r3, #1
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001046:	2340      	movs	r3, #64	; 0x40
 8001048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800104a:	2303      	movs	r3, #3
 800104c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	481d      	ldr	r0, [pc, #116]	; (80010d0 <HAL_ADC_MspInit+0xe4>)
 800105a:	f007 fff9 	bl	8009050 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800105e:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <HAL_ADC_MspInit+0xe8>)
 8001060:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <HAL_ADC_MspInit+0xec>)
 8001062:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001064:	4b1b      	ldr	r3, [pc, #108]	; (80010d4 <HAL_ADC_MspInit+0xe8>)
 8001066:	2200      	movs	r2, #0
 8001068:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <HAL_ADC_MspInit+0xe8>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001070:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <HAL_ADC_MspInit+0xe8>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001076:	4b17      	ldr	r3, [pc, #92]	; (80010d4 <HAL_ADC_MspInit+0xe8>)
 8001078:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800107c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <HAL_ADC_MspInit+0xe8>)
 8001080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001084:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001086:	4b13      	ldr	r3, [pc, #76]	; (80010d4 <HAL_ADC_MspInit+0xe8>)
 8001088:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800108c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <HAL_ADC_MspInit+0xe8>)
 8001090:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001094:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001096:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <HAL_ADC_MspInit+0xe8>)
 8001098:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800109c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_ADC_MspInit+0xe8>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <HAL_ADC_MspInit+0xe8>)
 80010a6:	f007 fded 	bl	8008c84 <HAL_DMA_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80010b0:	f005 fc30 	bl	8006914 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <HAL_ADC_MspInit+0xe8>)
 80010b8:	639a      	str	r2, [r3, #56]	; 0x38
 80010ba:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <HAL_ADC_MspInit+0xe8>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	; 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40012000 	.word	0x40012000
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40020000 	.word	0x40020000
 80010d4:	20000128 	.word	0x20000128
 80010d8:	40026410 	.word	0x40026410

080010dc <delay_init>:
static u8 fac_us = 0; //us延时倍乘数
//初始化延迟函数
//SYSTICK的时钟固定为HCLK时钟的1/8
//SYSCLK:系统时钟
void delay_init(u8 SYSCLK)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK); //SysTick频率为HCLK
 80010e6:	2004      	movs	r0, #4
 80010e8:	f007 fcec 	bl	8008ac4 <HAL_SYSTICK_CLKSourceConfig>
    fac_us = SYSCLK;
 80010ec:	4a03      	ldr	r2, [pc, #12]	; (80010fc <delay_init+0x20>)
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	7013      	strb	r3, [r2, #0]
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200000cc 	.word	0x200000cc

08001100 <delay_us>:
    {
        ;
    } while (--t);
}
void delay_us(u32 nus)
{
 8001100:	b480      	push	{r7}
 8001102:	b089      	sub	sp, #36	; 0x24
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    u32 ticks;
    u32 told, tnow, tcnt = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	61bb      	str	r3, [r7, #24]
    u32 reload = SysTick->LOAD; //LOAD的值
 800110c:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <delay_us+0x78>)
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	617b      	str	r3, [r7, #20]
    ticks = nus * fac_us;       //需要的节拍数
 8001112:	4b1a      	ldr	r3, [pc, #104]	; (800117c <delay_us+0x7c>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	fb02 f303 	mul.w	r3, r2, r3
 800111e:	613b      	str	r3, [r7, #16]
    told = SysTick->VAL;        //刚进⼊时的计数器值
 8001120:	4b15      	ldr	r3, [pc, #84]	; (8001178 <delay_us+0x78>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <delay_us+0x78>)
 8001128:	689b      	ldr	r3, [r3, #8]
 800112a:	60fb      	str	r3, [r7, #12]
        if (tnow != told)
 800112c:	68fa      	ldr	r2, [r7, #12]
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	429a      	cmp	r2, r3
 8001132:	d0f8      	beq.n	8001126 <delay_us+0x26>
        {
            if (tnow < told)
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	429a      	cmp	r2, r3
 800113a:	d206      	bcs.n	800114a <delay_us+0x4a>
                tcnt += told - tnow; //这⾥注意⼀下SYSTICK是⼀个递减的计数器就可以了.
 800113c:	69fa      	ldr	r2, [r7, #28]
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	69ba      	ldr	r2, [r7, #24]
 8001144:	4413      	add	r3, r2
 8001146:	61bb      	str	r3, [r7, #24]
 8001148:	e007      	b.n	800115a <delay_us+0x5a>
            else
                tcnt += reload - tnow + told;
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	1ad2      	subs	r2, r2, r3
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	4413      	add	r3, r2
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	4413      	add	r3, r2
 8001158:	61bb      	str	r3, [r7, #24]
            told = tnow;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	429a      	cmp	r2, r3
 8001164:	d200      	bcs.n	8001168 <delay_us+0x68>
        tnow = SysTick->VAL;
 8001166:	e7de      	b.n	8001126 <delay_us+0x26>
                break; //时间超过/等于要延迟的时间,则退出.
 8001168:	bf00      	nop
        }
    };
}
 800116a:	bf00      	nop
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	e000e010 	.word	0xe000e010
 800117c:	200000cc 	.word	0x200000cc

08001180 <delay_ms>:
//延时nms
//nms:要延时的ms数
void delay_ms(u16 nms)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	80fb      	strh	r3, [r7, #6]
    u32 i;
    for (i = 0; i < nms; i++)
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	e006      	b.n	800119e <delay_ms+0x1e>
        delay_us(1000);
 8001190:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001194:	f7ff ffb4 	bl	8001100 <delay_us>
    for (i = 0; i < nms; i++)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	3301      	adds	r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	88fb      	ldrh	r3, [r7, #6]
 80011a0:	68fa      	ldr	r2, [r7, #12]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d3f4      	bcc.n	8001190 <delay_ms+0x10>
}
 80011a6:	bf00      	nop
 80011a8:	bf00      	nop
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_DAC_Init+0x4c>)
 80011c0:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <MX_DAC_Init+0x50>)
 80011c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <MX_DAC_Init+0x4c>)
 80011c6:	f007 fc99 	bl	8008afc <HAL_DAC_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011d0:	f005 fba0 	bl	8006914 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80011dc:	463b      	mov	r3, r7
 80011de:	2210      	movs	r2, #16
 80011e0:	4619      	mov	r1, r3
 80011e2:	4806      	ldr	r0, [pc, #24]	; (80011fc <MX_DAC_Init+0x4c>)
 80011e4:	f007 fcfe 	bl	8008be4 <HAL_DAC_ConfigChannel>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ee:	f005 fb91 	bl	8006914 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000188 	.word	0x20000188
 8001200:	40007400 	.word	0x40007400

08001204 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	; 0x28
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120c:	f107 0314 	add.w	r3, r7, #20
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a17      	ldr	r2, [pc, #92]	; (8001280 <HAL_DAC_MspInit+0x7c>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d127      	bne.n	8001276 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <HAL_DAC_MspInit+0x80>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	4a15      	ldr	r2, [pc, #84]	; (8001284 <HAL_DAC_MspInit+0x80>)
 8001230:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001234:	6413      	str	r3, [r2, #64]	; 0x40
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_DAC_MspInit+0x80>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <HAL_DAC_MspInit+0x80>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <HAL_DAC_MspInit+0x80>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <HAL_DAC_MspInit+0x80>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800125e:	2320      	movs	r3, #32
 8001260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001262:	2303      	movs	r3, #3
 8001264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	4805      	ldr	r0, [pc, #20]	; (8001288 <HAL_DAC_MspInit+0x84>)
 8001272:	f007 feed 	bl	8009050 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001276:	bf00      	nop
 8001278:	3728      	adds	r7, #40	; 0x28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	40007400 	.word	0x40007400
 8001284:	40023800 	.word	0x40023800
 8001288:	40020000 	.word	0x40020000

0800128c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_DMA_Init+0x30>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <MX_DMA_Init+0x30>)
 800129c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_DMA_Init+0x30>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800

080012c0 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08e      	sub	sp, #56	; 0x38
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
 80012d4:	611a      	str	r2, [r3, #16]
 80012d6:	615a      	str	r2, [r3, #20]
 80012d8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80012da:	463b      	mov	r3, r7
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80012ec:	4b2f      	ldr	r3, [pc, #188]	; (80013ac <MX_FSMC_Init+0xec>)
 80012ee:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80012f2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <MX_FSMC_Init+0xec>)
 80012f6:	4a2e      	ldr	r2, [pc, #184]	; (80013b0 <MX_FSMC_Init+0xf0>)
 80012f8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 80012fa:	4b2c      	ldr	r3, [pc, #176]	; (80013ac <MX_FSMC_Init+0xec>)
 80012fc:	2206      	movs	r2, #6
 80012fe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <MX_FSMC_Init+0xec>)
 8001302:	2200      	movs	r2, #0
 8001304:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001306:	4b29      	ldr	r3, [pc, #164]	; (80013ac <MX_FSMC_Init+0xec>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800130c:	4b27      	ldr	r3, [pc, #156]	; (80013ac <MX_FSMC_Init+0xec>)
 800130e:	2210      	movs	r2, #16
 8001310:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001312:	4b26      	ldr	r3, [pc, #152]	; (80013ac <MX_FSMC_Init+0xec>)
 8001314:	2200      	movs	r2, #0
 8001316:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001318:	4b24      	ldr	r3, [pc, #144]	; (80013ac <MX_FSMC_Init+0xec>)
 800131a:	2200      	movs	r2, #0
 800131c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <MX_FSMC_Init+0xec>)
 8001320:	2200      	movs	r2, #0
 8001322:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <MX_FSMC_Init+0xec>)
 8001326:	2200      	movs	r2, #0
 8001328:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <MX_FSMC_Init+0xec>)
 800132c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001330:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001332:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <MX_FSMC_Init+0xec>)
 8001334:	2200      	movs	r2, #0
 8001336:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_FSMC_Init+0xec>)
 800133a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001340:	4b1a      	ldr	r3, [pc, #104]	; (80013ac <MX_FSMC_Init+0xec>)
 8001342:	2200      	movs	r2, #0
 8001344:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001346:	4b19      	ldr	r3, [pc, #100]	; (80013ac <MX_FSMC_Init+0xec>)
 8001348:	2200      	movs	r2, #0
 800134a:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <MX_FSMC_Init+0xec>)
 800134e:	2200      	movs	r2, #0
 8001350:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0x0f;
 8001352:	230f      	movs	r3, #15
 8001354:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001356:	230f      	movs	r3, #15
 8001358:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800135a:	233c      	movs	r3, #60	; 0x3c
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8001362:	2310      	movs	r3, #16
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001366:	2311      	movs	r3, #17
 8001368:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800136a:	2300      	movs	r3, #0
 800136c:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 800136e:	2309      	movs	r3, #9
 8001370:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8001372:	230f      	movs	r3, #15
 8001374:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 8;
 8001376:	2308      	movs	r3, #8
 8001378:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800137e:	2310      	movs	r3, #16
 8001380:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8001382:	2311      	movs	r3, #17
 8001384:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 800138a:	463a      	mov	r2, r7
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	4806      	ldr	r0, [pc, #24]	; (80013ac <MX_FSMC_Init+0xec>)
 8001394:	f008 fc26 	bl	8009be4 <HAL_SRAM_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800139e:	f005 fab9 	bl	8006914 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80013a2:	bf00      	nop
 80013a4:	3738      	adds	r7, #56	; 0x38
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	2000019c 	.word	0x2000019c
 80013b0:	a0000104 	.word	0xa0000104

080013b4 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80013c8:	4b2c      	ldr	r3, [pc, #176]	; (800147c <HAL_FSMC_MspInit+0xc8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d151      	bne.n	8001474 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80013d0:	4b2a      	ldr	r3, [pc, #168]	; (800147c <HAL_FSMC_MspInit+0xc8>)
 80013d2:	2201      	movs	r2, #1
 80013d4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	4b29      	ldr	r3, [pc, #164]	; (8001480 <HAL_FSMC_MspInit+0xcc>)
 80013dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013de:	4a28      	ldr	r2, [pc, #160]	; (8001480 <HAL_FSMC_MspInit+0xcc>)
 80013e0:	f043 0301 	orr.w	r3, r3, #1
 80013e4:	6393      	str	r3, [r2, #56]	; 0x38
 80013e6:	4b26      	ldr	r3, [pc, #152]	; (8001480 <HAL_FSMC_MspInit+0xcc>)
 80013e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f8:	2302      	movs	r3, #2
 80013fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013fc:	2301      	movs	r3, #1
 80013fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001400:	2303      	movs	r3, #3
 8001402:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001404:	230c      	movs	r3, #12
 8001406:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	4619      	mov	r1, r3
 800140c:	481d      	ldr	r0, [pc, #116]	; (8001484 <HAL_FSMC_MspInit+0xd0>)
 800140e:	f007 fe1f 	bl	8009050 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001412:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001416:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001418:	2302      	movs	r3, #2
 800141a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800141c:	2301      	movs	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001420:	2303      	movs	r3, #3
 8001422:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001424:	230c      	movs	r3, #12
 8001426:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4816      	ldr	r0, [pc, #88]	; (8001488 <HAL_FSMC_MspInit+0xd4>)
 800142e:	f007 fe0f 	bl	8009050 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001432:	f24c 7333 	movw	r3, #50995	; 0xc733
 8001436:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2302      	movs	r3, #2
 800143a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143c:	2301      	movs	r3, #1
 800143e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001440:	2303      	movs	r3, #3
 8001442:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001444:	230c      	movs	r3, #12
 8001446:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	4619      	mov	r1, r3
 800144c:	480f      	ldr	r0, [pc, #60]	; (800148c <HAL_FSMC_MspInit+0xd8>)
 800144e:	f007 fdff 	bl	8009050 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001456:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800145c:	2301      	movs	r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001460:	2303      	movs	r3, #3
 8001462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001464:	230c      	movs	r3, #12
 8001466:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4619      	mov	r1, r3
 800146c:	4808      	ldr	r0, [pc, #32]	; (8001490 <HAL_FSMC_MspInit+0xdc>)
 800146e:	f007 fdef 	bl	8009050 <HAL_GPIO_Init>
 8001472:	e000      	b.n	8001476 <HAL_FSMC_MspInit+0xc2>
    return;
 8001474:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	200000d0 	.word	0x200000d0
 8001480:	40023800 	.word	0x40023800
 8001484:	40021400 	.word	0x40021400
 8001488:	40021000 	.word	0x40021000
 800148c:	40020c00 	.word	0x40020c00
 8001490:	40021800 	.word	0x40021800

08001494 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800149c:	f7ff ff8a 	bl	80013b4 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80014a0:	bf00      	nop
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	; 0x38
 80014ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
 80014bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	623b      	str	r3, [r7, #32]
 80014c2:	4b76      	ldr	r3, [pc, #472]	; (800169c <MX_GPIO_Init+0x1f4>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a75      	ldr	r2, [pc, #468]	; (800169c <MX_GPIO_Init+0x1f4>)
 80014c8:	f043 0310 	orr.w	r3, r3, #16
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b73      	ldr	r3, [pc, #460]	; (800169c <MX_GPIO_Init+0x1f4>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0310 	and.w	r3, r3, #16
 80014d6:	623b      	str	r3, [r7, #32]
 80014d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014da:	2300      	movs	r3, #0
 80014dc:	61fb      	str	r3, [r7, #28]
 80014de:	4b6f      	ldr	r3, [pc, #444]	; (800169c <MX_GPIO_Init+0x1f4>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	4a6e      	ldr	r2, [pc, #440]	; (800169c <MX_GPIO_Init+0x1f4>)
 80014e4:	f043 0304 	orr.w	r3, r3, #4
 80014e8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ea:	4b6c      	ldr	r3, [pc, #432]	; (800169c <MX_GPIO_Init+0x1f4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	f003 0304 	and.w	r3, r3, #4
 80014f2:	61fb      	str	r3, [r7, #28]
 80014f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	4b68      	ldr	r3, [pc, #416]	; (800169c <MX_GPIO_Init+0x1f4>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a67      	ldr	r2, [pc, #412]	; (800169c <MX_GPIO_Init+0x1f4>)
 8001500:	f043 0320 	orr.w	r3, r3, #32
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b65      	ldr	r3, [pc, #404]	; (800169c <MX_GPIO_Init+0x1f4>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0320 	and.w	r3, r3, #32
 800150e:	61bb      	str	r3, [r7, #24]
 8001510:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	4b61      	ldr	r3, [pc, #388]	; (800169c <MX_GPIO_Init+0x1f4>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a60      	ldr	r2, [pc, #384]	; (800169c <MX_GPIO_Init+0x1f4>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b5e      	ldr	r3, [pc, #376]	; (800169c <MX_GPIO_Init+0x1f4>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b5a      	ldr	r3, [pc, #360]	; (800169c <MX_GPIO_Init+0x1f4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a59      	ldr	r2, [pc, #356]	; (800169c <MX_GPIO_Init+0x1f4>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b57      	ldr	r3, [pc, #348]	; (800169c <MX_GPIO_Init+0x1f4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
 800154e:	4b53      	ldr	r3, [pc, #332]	; (800169c <MX_GPIO_Init+0x1f4>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a52      	ldr	r2, [pc, #328]	; (800169c <MX_GPIO_Init+0x1f4>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b50      	ldr	r3, [pc, #320]	; (800169c <MX_GPIO_Init+0x1f4>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	60fb      	str	r3, [r7, #12]
 8001564:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	4b4c      	ldr	r3, [pc, #304]	; (800169c <MX_GPIO_Init+0x1f4>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a4b      	ldr	r2, [pc, #300]	; (800169c <MX_GPIO_Init+0x1f4>)
 8001570:	f043 0308 	orr.w	r3, r3, #8
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b49      	ldr	r3, [pc, #292]	; (800169c <MX_GPIO_Init+0x1f4>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	607b      	str	r3, [r7, #4]
 8001586:	4b45      	ldr	r3, [pc, #276]	; (800169c <MX_GPIO_Init+0x1f4>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	4a44      	ldr	r2, [pc, #272]	; (800169c <MX_GPIO_Init+0x1f4>)
 800158c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001590:	6313      	str	r3, [r2, #48]	; 0x30
 8001592:	4b42      	ldr	r3, [pc, #264]	; (800169c <MX_GPIO_Init+0x1f4>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TCS_GPIO_Port, TCS_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015a4:	483e      	ldr	r0, [pc, #248]	; (80016a0 <MX_GPIO_Init+0x1f8>)
 80015a6:	f007 feef 	bl	8009388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80015b0:	483c      	ldr	r0, [pc, #240]	; (80016a4 <MX_GPIO_Init+0x1fc>)
 80015b2:	f007 fee9 	bl	8009388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TCLK_Pin|LCD_BL_Pin|IIC_SCL_Pin|IIC_SDA_Pin, GPIO_PIN_RESET);
 80015b6:	2200      	movs	r2, #0
 80015b8:	f248 3101 	movw	r1, #33537	; 0x8301
 80015bc:	483a      	ldr	r0, [pc, #232]	; (80016a8 <MX_GPIO_Init+0x200>)
 80015be:	f007 fee3 	bl	8009388 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TDIN_GPIO_Port, TDIN_Pin, GPIO_PIN_RESET);
 80015c2:	2200      	movs	r2, #0
 80015c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c8:	4836      	ldr	r0, [pc, #216]	; (80016a4 <MX_GPIO_Init+0x1fc>)
 80015ca:	f007 fedd 	bl	8009388 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin|KEY2_Pin;
 80015ce:	231c      	movs	r3, #28
 80015d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015de:	4619      	mov	r1, r3
 80015e0:	4832      	ldr	r0, [pc, #200]	; (80016ac <MX_GPIO_Init+0x204>)
 80015e2:	f007 fd35 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TCS_Pin;
 80015e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ec:	2301      	movs	r3, #1
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f4:	2300      	movs	r3, #0
 80015f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TCS_GPIO_Port, &GPIO_InitStruct);
 80015f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015fc:	4619      	mov	r1, r3
 80015fe:	4828      	ldr	r0, [pc, #160]	; (80016a0 <MX_GPIO_Init+0x1f8>)
 8001600:	f007 fd26 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 8001604:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160a:	2301      	movs	r3, #1
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800160e:	2301      	movs	r3, #1
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161a:	4619      	mov	r1, r3
 800161c:	4821      	ldr	r0, [pc, #132]	; (80016a4 <MX_GPIO_Init+0x1fc>)
 800161e:	f007 fd17 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TCLK_Pin|IIC_SCL_Pin|IIC_SDA_Pin;
 8001622:	f240 3301 	movw	r3, #769	; 0x301
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001628:	2301      	movs	r3, #1
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800162c:	2301      	movs	r3, #1
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001638:	4619      	mov	r1, r3
 800163a:	481b      	ldr	r0, [pc, #108]	; (80016a8 <MX_GPIO_Init+0x200>)
 800163c:	f007 fd08 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PEN_Pin|DOUT_Pin;
 8001640:	2306      	movs	r3, #6
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001644:	2300      	movs	r3, #0
 8001646:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001648:	2301      	movs	r3, #1
 800164a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001650:	4619      	mov	r1, r3
 8001652:	4815      	ldr	r0, [pc, #84]	; (80016a8 <MX_GPIO_Init+0x200>)
 8001654:	f007 fcfc 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TDIN_Pin;
 8001658:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165e:	2301      	movs	r3, #1
 8001660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TDIN_GPIO_Port, &GPIO_InitStruct);
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	4619      	mov	r1, r3
 8001670:	480c      	ldr	r0, [pc, #48]	; (80016a4 <MX_GPIO_Init+0x1fc>)
 8001672:	f007 fced 	bl	8009050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001676:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800167c:	2301      	movs	r3, #1
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001680:	2301      	movs	r3, #1
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001684:	2301      	movs	r3, #1
 8001686:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800168c:	4619      	mov	r1, r3
 800168e:	4806      	ldr	r0, [pc, #24]	; (80016a8 <MX_GPIO_Init+0x200>)
 8001690:	f007 fcde 	bl	8009050 <HAL_GPIO_Init>

}
 8001694:	bf00      	nop
 8001696:	3738      	adds	r7, #56	; 0x38
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40023800 	.word	0x40023800
 80016a0:	40020800 	.word	0x40020800
 80016a4:	40021400 	.word	0x40021400
 80016a8:	40020400 	.word	0x40020400
 80016ac:	40021000 	.word	0x40021000

080016b0 <LCD_WR_REG>:
_lcd_dev lcddev;

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(__IO uint16_t regval)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	80fb      	strh	r3, [r7, #6]
	regval=regval;		//使用-O2优化的时候,必须插入的延时
 80016ba:	88fb      	ldrh	r3, [r7, #6]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=regval;//写入要写的寄存器序号
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <LCD_WR_REG+0x24>)
 80016c2:	88fa      	ldrh	r2, [r7, #6]
 80016c4:	b292      	uxth	r2, r2
 80016c6:	801a      	strh	r2, [r3, #0]
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	6c00007e 	.word	0x6c00007e

080016d8 <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(__IO uint16_t data)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	80fb      	strh	r3, [r7, #6]
	data=data;			//使用-O2优化的时候,必须插入的延时
 80016e2:	88fb      	ldrh	r3, [r7, #6]
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <LCD_WR_DATA+0x24>)
 80016ea:	88fa      	ldrh	r2, [r7, #6]
 80016ec:	b292      	uxth	r2, r2
 80016ee:	805a      	strh	r2, [r3, #2]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	6c00007e 	.word	0x6c00007e

08001700 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//防止被优化
	ram=LCD->LCD_RAM;
 8001706:	4b06      	ldr	r3, [pc, #24]	; (8001720 <LCD_RD_DATA+0x20>)
 8001708:	885b      	ldrh	r3, [r3, #2]
 800170a:	b29b      	uxth	r3, r3
 800170c:	80fb      	strh	r3, [r7, #6]
	return ram;
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	b29b      	uxth	r3, r3
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	6c00007e 	.word	0x6c00007e

08001724 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	460a      	mov	r2, r1
 800172e:	80fb      	strh	r3, [r7, #6]
 8001730:	4613      	mov	r3, r2
 8001732:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 8001734:	4a05      	ldr	r2, [pc, #20]	; (800174c <LCD_WriteReg+0x28>)
 8001736:	88fb      	ldrh	r3, [r7, #6]
 8001738:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = LCD_RegValue;//写入数据
 800173a:	4a04      	ldr	r2, [pc, #16]	; (800174c <LCD_WriteReg+0x28>)
 800173c:	88bb      	ldrh	r3, [r7, #4]
 800173e:	8053      	strh	r3, [r2, #2]
}
 8001740:	bf00      	nop
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	6c00007e 	.word	0x6c00007e

08001750 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器地址
//返回值:读到的数据
uint16_t LCD_ReadReg(uint16_t LCD_Reg)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);		//写入要读的寄存器序号
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ffa7 	bl	80016b0 <LCD_WR_REG>
	delay_us(5);
 8001762:	2005      	movs	r0, #5
 8001764:	f7ff fccc 	bl	8001100 <delay_us>
	return LCD_RD_DATA();		//返回读到的值
 8001768:	f7ff ffca 	bl	8001700 <LCD_RD_DATA>
 800176c:	4603      	mov	r3, r0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
 	LCD->LCD_REG=lcddev.wramcmd;
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <LCD_WriteRAM_Prepare+0x18>)
 800177e:	4a05      	ldr	r2, [pc, #20]	; (8001794 <LCD_WriteRAM_Prepare+0x1c>)
 8001780:	8912      	ldrh	r2, [r2, #8]
 8001782:	801a      	strh	r2, [r3, #0]
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	6c00007e 	.word	0x6c00007e
 8001794:	200001ec 	.word	0x200001ec

08001798 <LCD_SetCursor>:
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 80017a8:	4b92      	ldr	r3, [pc, #584]	; (80019f4 <LCD_SetCursor+0x25c>)
 80017aa:	889b      	ldrh	r3, [r3, #4]
 80017ac:	f249 3241 	movw	r2, #37697	; 0x9341
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d005      	beq.n	80017c0 <LCD_SetCursor+0x28>
 80017b4:	4b8f      	ldr	r3, [pc, #572]	; (80019f4 <LCD_SetCursor+0x25c>)
 80017b6:	889b      	ldrh	r3, [r3, #4]
 80017b8:	f245 3210 	movw	r2, #21264	; 0x5310
 80017bc:	4293      	cmp	r3, r2
 80017be:	d122      	bne.n	8001806 <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 80017c0:	4b8c      	ldr	r3, [pc, #560]	; (80019f4 <LCD_SetCursor+0x25c>)
 80017c2:	895b      	ldrh	r3, [r3, #10]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff73 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff ff81 	bl	80016d8 <LCD_WR_DATA>
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	b29b      	uxth	r3, r3
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff7b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80017e2:	4b84      	ldr	r3, [pc, #528]	; (80019f4 <LCD_SetCursor+0x25c>)
 80017e4:	899b      	ldrh	r3, [r3, #12]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ff62 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 80017ec:	88bb      	ldrh	r3, [r7, #4]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff ff70 	bl	80016d8 <LCD_WR_DATA>
 80017f8:	88bb      	ldrh	r3, [r7, #4]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff ff6a 	bl	80016d8 <LCD_WR_DATA>
	{
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8001804:	e0f1      	b.n	80019ea <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X6804)
 8001806:	4b7b      	ldr	r3, [pc, #492]	; (80019f4 <LCD_SetCursor+0x25c>)
 8001808:	889b      	ldrh	r3, [r3, #4]
 800180a:	f646 0204 	movw	r2, #26628	; 0x6804
 800180e:	4293      	cmp	r3, r2
 8001810:	d12d      	bne.n	800186e <LCD_SetCursor+0xd6>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏时处理
 8001812:	4b78      	ldr	r3, [pc, #480]	; (80019f4 <LCD_SetCursor+0x25c>)
 8001814:	799b      	ldrb	r3, [r3, #6]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d106      	bne.n	8001828 <LCD_SetCursor+0x90>
 800181a:	4b76      	ldr	r3, [pc, #472]	; (80019f4 <LCD_SetCursor+0x25c>)
 800181c:	881a      	ldrh	r2, [r3, #0]
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	b29b      	uxth	r3, r3
 8001824:	3b01      	subs	r3, #1
 8001826:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001828:	4b72      	ldr	r3, [pc, #456]	; (80019f4 <LCD_SetCursor+0x25c>)
 800182a:	895b      	ldrh	r3, [r3, #10]
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ff3f 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	0a1b      	lsrs	r3, r3, #8
 8001836:	b29b      	uxth	r3, r3
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff ff4d 	bl	80016d8 <LCD_WR_DATA>
 800183e:	88fb      	ldrh	r3, [r7, #6]
 8001840:	b2db      	uxtb	r3, r3
 8001842:	b29b      	uxth	r3, r3
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff ff47 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800184a:	4b6a      	ldr	r3, [pc, #424]	; (80019f4 <LCD_SetCursor+0x25c>)
 800184c:	899b      	ldrh	r3, [r3, #12]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ff2e 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8001854:	88bb      	ldrh	r3, [r7, #4]
 8001856:	0a1b      	lsrs	r3, r3, #8
 8001858:	b29b      	uxth	r3, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff ff3c 	bl	80016d8 <LCD_WR_DATA>
 8001860:	88bb      	ldrh	r3, [r7, #4]
 8001862:	b2db      	uxtb	r3, r3
 8001864:	b29b      	uxth	r3, r3
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff36 	bl	80016d8 <LCD_WR_DATA>
}
 800186c:	e0bd      	b.n	80019ea <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X1963)
 800186e:	4b61      	ldr	r3, [pc, #388]	; (80019f4 <LCD_SetCursor+0x25c>)
 8001870:	889b      	ldrh	r3, [r3, #4]
 8001872:	f641 1263 	movw	r2, #6499	; 0x1963
 8001876:	4293      	cmp	r3, r2
 8001878:	d167      	bne.n	800194a <LCD_SetCursor+0x1b2>
		if(lcddev.dir==0)//x坐标需要变换
 800187a:	4b5e      	ldr	r3, [pc, #376]	; (80019f4 <LCD_SetCursor+0x25c>)
 800187c:	799b      	ldrb	r3, [r3, #6]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d11e      	bne.n	80018c0 <LCD_SetCursor+0x128>
			Xpos=lcddev.width-1-Xpos;
 8001882:	4b5c      	ldr	r3, [pc, #368]	; (80019f4 <LCD_SetCursor+0x25c>)
 8001884:	881a      	ldrh	r2, [r3, #0]
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	b29b      	uxth	r3, r3
 800188c:	3b01      	subs	r3, #1
 800188e:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8001890:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <LCD_SetCursor+0x25c>)
 8001892:	895b      	ldrh	r3, [r3, #10]
 8001894:	4618      	mov	r0, r3
 8001896:	f7ff ff0b 	bl	80016b0 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 800189a:	2000      	movs	r0, #0
 800189c:	f7ff ff1c 	bl	80016d8 <LCD_WR_DATA>
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff ff19 	bl	80016d8 <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80018a6:	88fb      	ldrh	r3, [r7, #6]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff13 	bl	80016d8 <LCD_WR_DATA>
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ff0d 	bl	80016d8 <LCD_WR_DATA>
 80018be:	e021      	b.n	8001904 <LCD_SetCursor+0x16c>
			LCD_WR_REG(lcddev.setxcmd);
 80018c0:	4b4c      	ldr	r3, [pc, #304]	; (80019f4 <LCD_SetCursor+0x25c>)
 80018c2:	895b      	ldrh	r3, [r3, #10]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fef3 	bl	80016b0 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80018ca:	88fb      	ldrh	r3, [r7, #6]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff01 	bl	80016d8 <LCD_WR_DATA>
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	b29b      	uxth	r3, r3
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff fefb 	bl	80016d8 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 80018e2:	4b44      	ldr	r3, [pc, #272]	; (80019f4 <LCD_SetCursor+0x25c>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	121b      	asrs	r3, r3, #8
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff fef3 	bl	80016d8 <LCD_WR_DATA>
 80018f2:	4b40      	ldr	r3, [pc, #256]	; (80019f4 <LCD_SetCursor+0x25c>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff feea 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001904:	4b3b      	ldr	r3, [pc, #236]	; (80019f4 <LCD_SetCursor+0x25c>)
 8001906:	899b      	ldrh	r3, [r3, #12]
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fed1 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 800190e:	88bb      	ldrh	r3, [r7, #4]
 8001910:	0a1b      	lsrs	r3, r3, #8
 8001912:	b29b      	uxth	r3, r3
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fedf 	bl	80016d8 <LCD_WR_DATA>
 800191a:	88bb      	ldrh	r3, [r7, #4]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	b29b      	uxth	r3, r3
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fed9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001926:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <LCD_SetCursor+0x25c>)
 8001928:	885b      	ldrh	r3, [r3, #2]
 800192a:	3b01      	subs	r3, #1
 800192c:	121b      	asrs	r3, r3, #8
 800192e:	b29b      	uxth	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fed1 	bl	80016d8 <LCD_WR_DATA>
 8001936:	4b2f      	ldr	r3, [pc, #188]	; (80019f4 <LCD_SetCursor+0x25c>)
 8001938:	885b      	ldrh	r3, [r3, #2]
 800193a:	3b01      	subs	r3, #1
 800193c:	b29b      	uxth	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	b29b      	uxth	r3, r3
 8001942:	4618      	mov	r0, r3
 8001944:	f7ff fec8 	bl	80016d8 <LCD_WR_DATA>
}
 8001948:	e04f      	b.n	80019ea <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X5510)
 800194a:	4b2a      	ldr	r3, [pc, #168]	; (80019f4 <LCD_SetCursor+0x25c>)
 800194c:	889b      	ldrh	r3, [r3, #4]
 800194e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001952:	4293      	cmp	r3, r2
 8001954:	d130      	bne.n	80019b8 <LCD_SetCursor+0x220>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 8001956:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <LCD_SetCursor+0x25c>)
 8001958:	895b      	ldrh	r3, [r3, #10]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fea8 	bl	80016b0 <LCD_WR_REG>
 8001960:	88fb      	ldrh	r3, [r7, #6]
 8001962:	0a1b      	lsrs	r3, r3, #8
 8001964:	b29b      	uxth	r3, r3
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff feb6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 800196c:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <LCD_SetCursor+0x25c>)
 800196e:	895b      	ldrh	r3, [r3, #10]
 8001970:	3301      	adds	r3, #1
 8001972:	b29b      	uxth	r3, r3
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff fe9b 	bl	80016b0 <LCD_WR_REG>
 800197a:	88fb      	ldrh	r3, [r7, #6]
 800197c:	b2db      	uxtb	r3, r3
 800197e:	b29b      	uxth	r3, r3
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff fea9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 8001986:	4b1b      	ldr	r3, [pc, #108]	; (80019f4 <LCD_SetCursor+0x25c>)
 8001988:	899b      	ldrh	r3, [r3, #12]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff fe90 	bl	80016b0 <LCD_WR_REG>
 8001990:	88bb      	ldrh	r3, [r7, #4]
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	b29b      	uxth	r3, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fe9e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 800199c:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <LCD_SetCursor+0x25c>)
 800199e:	899b      	ldrh	r3, [r3, #12]
 80019a0:	3301      	adds	r3, #1
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fe83 	bl	80016b0 <LCD_WR_REG>
 80019aa:	88bb      	ldrh	r3, [r7, #4]
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fe91 	bl	80016d8 <LCD_WR_DATA>
}
 80019b6:	e018      	b.n	80019ea <LCD_SetCursor+0x252>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <LCD_SetCursor+0x25c>)
 80019ba:	799b      	ldrb	r3, [r3, #6]
 80019bc:	2b01      	cmp	r3, #1
 80019be:	d106      	bne.n	80019ce <LCD_SetCursor+0x236>
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <LCD_SetCursor+0x25c>)
 80019c2:	881a      	ldrh	r2, [r3, #0]
 80019c4:	88fb      	ldrh	r3, [r7, #6]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3b01      	subs	r3, #1
 80019cc:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <LCD_SetCursor+0x25c>)
 80019d0:	895b      	ldrh	r3, [r3, #10]
 80019d2:	88fa      	ldrh	r2, [r7, #6]
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fea4 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 80019dc:	4b05      	ldr	r3, [pc, #20]	; (80019f4 <LCD_SetCursor+0x25c>)
 80019de:	899b      	ldrh	r3, [r3, #12]
 80019e0:	88ba      	ldrh	r2, [r7, #4]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fe9d 	bl	8001724 <LCD_WriteReg>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	200001ec 	.word	0x200001ec

080019f8 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X6804&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8001a0a:	4b78      	ldr	r3, [pc, #480]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001a0c:	799b      	ldrb	r3, [r3, #6]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d10b      	bne.n	8001a2a <LCD_Scan_Dir+0x32>
 8001a12:	4b76      	ldr	r3, [pc, #472]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001a14:	889b      	ldrh	r3, [r3, #4]
 8001a16:	f646 0204 	movw	r2, #26628	; 0x6804
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d005      	beq.n	8001a2a <LCD_Scan_Dir+0x32>
 8001a1e:	4b73      	ldr	r3, [pc, #460]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001a20:	889b      	ldrh	r3, [r3, #4]
 8001a22:	f641 1263 	movw	r2, #6499	; 0x1963
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d109      	bne.n	8001a3e <LCD_Scan_Dir+0x46>
 8001a2a:	4b70      	ldr	r3, [pc, #448]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001a2c:	799b      	ldrb	r3, [r3, #6]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d134      	bne.n	8001a9c <LCD_Scan_Dir+0xa4>
 8001a32:	4b6e      	ldr	r3, [pc, #440]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001a34:	889b      	ldrh	r3, [r3, #4]
 8001a36:	f641 1263 	movw	r2, #6499	; 0x1963
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d12e      	bne.n	8001a9c <LCD_Scan_Dir+0xa4>
	{
		switch(dir)//方向转换
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2b07      	cmp	r3, #7
 8001a42:	d82c      	bhi.n	8001a9e <LCD_Scan_Dir+0xa6>
 8001a44:	a201      	add	r2, pc, #4	; (adr r2, 8001a4c <LCD_Scan_Dir+0x54>)
 8001a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4a:	bf00      	nop
 8001a4c:	08001a6d 	.word	0x08001a6d
 8001a50:	08001a73 	.word	0x08001a73
 8001a54:	08001a79 	.word	0x08001a79
 8001a58:	08001a7f 	.word	0x08001a7f
 8001a5c:	08001a85 	.word	0x08001a85
 8001a60:	08001a8b 	.word	0x08001a8b
 8001a64:	08001a91 	.word	0x08001a91
 8001a68:	08001a97 	.word	0x08001a97
		{
			case 0:dir=6;break;
 8001a6c:	2306      	movs	r3, #6
 8001a6e:	71fb      	strb	r3, [r7, #7]
 8001a70:	e015      	b.n	8001a9e <LCD_Scan_Dir+0xa6>
			case 1:dir=7;break;
 8001a72:	2307      	movs	r3, #7
 8001a74:	71fb      	strb	r3, [r7, #7]
 8001a76:	e012      	b.n	8001a9e <LCD_Scan_Dir+0xa6>
			case 2:dir=4;break;
 8001a78:	2304      	movs	r3, #4
 8001a7a:	71fb      	strb	r3, [r7, #7]
 8001a7c:	e00f      	b.n	8001a9e <LCD_Scan_Dir+0xa6>
			case 3:dir=5;break;
 8001a7e:	2305      	movs	r3, #5
 8001a80:	71fb      	strb	r3, [r7, #7]
 8001a82:	e00c      	b.n	8001a9e <LCD_Scan_Dir+0xa6>
			case 4:dir=1;break;
 8001a84:	2301      	movs	r3, #1
 8001a86:	71fb      	strb	r3, [r7, #7]
 8001a88:	e009      	b.n	8001a9e <LCD_Scan_Dir+0xa6>
			case 5:dir=0;break;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	71fb      	strb	r3, [r7, #7]
 8001a8e:	e006      	b.n	8001a9e <LCD_Scan_Dir+0xa6>
			case 6:dir=3;break;
 8001a90:	2303      	movs	r3, #3
 8001a92:	71fb      	strb	r3, [r7, #7]
 8001a94:	e003      	b.n	8001a9e <LCD_Scan_Dir+0xa6>
			case 7:dir=2;break;
 8001a96:	2302      	movs	r3, #2
 8001a98:	71fb      	strb	r3, [r7, #7]
 8001a9a:	e000      	b.n	8001a9e <LCD_Scan_Dir+0xa6>
		}
	}
 8001a9c:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X6804||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/6804/5310/5510/1963,特殊处理
 8001a9e:	4b53      	ldr	r3, [pc, #332]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001aa0:	889b      	ldrh	r3, [r3, #4]
 8001aa2:	f249 3241 	movw	r2, #37697	; 0x9341
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d018      	beq.n	8001adc <LCD_Scan_Dir+0xe4>
 8001aaa:	4b50      	ldr	r3, [pc, #320]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001aac:	889b      	ldrh	r3, [r3, #4]
 8001aae:	f646 0204 	movw	r2, #26628	; 0x6804
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d012      	beq.n	8001adc <LCD_Scan_Dir+0xe4>
 8001ab6:	4b4d      	ldr	r3, [pc, #308]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001ab8:	889b      	ldrh	r3, [r3, #4]
 8001aba:	f245 3210 	movw	r2, #21264	; 0x5310
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d00c      	beq.n	8001adc <LCD_Scan_Dir+0xe4>
 8001ac2:	4b4a      	ldr	r3, [pc, #296]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001ac4:	889b      	ldrh	r3, [r3, #4]
 8001ac6:	f245 5210 	movw	r2, #21776	; 0x5510
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d006      	beq.n	8001adc <LCD_Scan_Dir+0xe4>
 8001ace:	4b47      	ldr	r3, [pc, #284]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001ad0:	889b      	ldrh	r3, [r3, #4]
 8001ad2:	f641 1263 	movw	r2, #6499	; 0x1963
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	f040 813c 	bne.w	8001d54 <LCD_Scan_Dir+0x35c>
	{
		switch(dir)
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b07      	cmp	r3, #7
 8001ae0:	d835      	bhi.n	8001b4e <LCD_Scan_Dir+0x156>
 8001ae2:	a201      	add	r2, pc, #4	; (adr r2, 8001ae8 <LCD_Scan_Dir+0xf0>)
 8001ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ae8:	08001b4f 	.word	0x08001b4f
 8001aec:	08001b09 	.word	0x08001b09
 8001af0:	08001b13 	.word	0x08001b13
 8001af4:	08001b1d 	.word	0x08001b1d
 8001af8:	08001b27 	.word	0x08001b27
 8001afc:	08001b31 	.word	0x08001b31
 8001b00:	08001b3b 	.word	0x08001b3b
 8001b04:	08001b45 	.word	0x08001b45
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 8001b08:	89fb      	ldrh	r3, [r7, #14]
 8001b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b0e:	81fb      	strh	r3, [r7, #14]
				break;
 8001b10:	e01d      	b.n	8001b4e <LCD_Scan_Dir+0x156>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 8001b12:	89fb      	ldrh	r3, [r7, #14]
 8001b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b18:	81fb      	strh	r3, [r7, #14]
				break;
 8001b1a:	e018      	b.n	8001b4e <LCD_Scan_Dir+0x156>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 8001b1c:	89fb      	ldrh	r3, [r7, #14]
 8001b1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b22:	81fb      	strh	r3, [r7, #14]
				break;
 8001b24:	e013      	b.n	8001b4e <LCD_Scan_Dir+0x156>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 8001b26:	89fb      	ldrh	r3, [r7, #14]
 8001b28:	f043 0320 	orr.w	r3, r3, #32
 8001b2c:	81fb      	strh	r3, [r7, #14]
				break;
 8001b2e:	e00e      	b.n	8001b4e <LCD_Scan_Dir+0x156>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 8001b30:	89fb      	ldrh	r3, [r7, #14]
 8001b32:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b36:	81fb      	strh	r3, [r7, #14]
				break;
 8001b38:	e009      	b.n	8001b4e <LCD_Scan_Dir+0x156>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 8001b3a:	89fb      	ldrh	r3, [r7, #14]
 8001b3c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001b40:	81fb      	strh	r3, [r7, #14]
				break;
 8001b42:	e004      	b.n	8001b4e <LCD_Scan_Dir+0x156>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 8001b44:	89fb      	ldrh	r3, [r7, #14]
 8001b46:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001b4a:	81fb      	strh	r3, [r7, #14]
				break;
 8001b4c:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 8001b4e:	4b27      	ldr	r3, [pc, #156]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001b50:	889b      	ldrh	r3, [r3, #4]
 8001b52:	f245 5210 	movw	r2, #21776	; 0x5510
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d103      	bne.n	8001b62 <LCD_Scan_Dir+0x16a>
 8001b5a:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001b5e:	81bb      	strh	r3, [r7, #12]
 8001b60:	e001      	b.n	8001b66 <LCD_Scan_Dir+0x16e>
		else dirreg=0X36;
 8001b62:	2336      	movs	r3, #54	; 0x36
 8001b64:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001b68:	889b      	ldrh	r3, [r3, #4]
 8001b6a:	f245 3210 	movw	r2, #21264	; 0x5310
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d00f      	beq.n	8001b92 <LCD_Scan_Dir+0x19a>
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001b74:	889b      	ldrh	r3, [r3, #4]
 8001b76:	f245 5210 	movw	r2, #21776	; 0x5510
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d009      	beq.n	8001b92 <LCD_Scan_Dir+0x19a>
 8001b7e:	4b1b      	ldr	r3, [pc, #108]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001b80:	889b      	ldrh	r3, [r3, #4]
 8001b82:	f641 1263 	movw	r2, #6499	; 0x1963
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d003      	beq.n	8001b92 <LCD_Scan_Dir+0x19a>
 8001b8a:	89fb      	ldrh	r3, [r7, #14]
 8001b8c:	f043 0308 	orr.w	r3, r3, #8
 8001b90:	81fb      	strh	r3, [r7, #14]
		if(lcddev.id==0X6804)regval|=0x02;//6804的BIT6和9341的反了
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001b94:	889b      	ldrh	r3, [r3, #4]
 8001b96:	f646 0204 	movw	r2, #26628	; 0x6804
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d103      	bne.n	8001ba6 <LCD_Scan_Dir+0x1ae>
 8001b9e:	89fb      	ldrh	r3, [r7, #14]
 8001ba0:	f043 0302 	orr.w	r3, r3, #2
 8001ba4:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8001ba6:	89fa      	ldrh	r2, [r7, #14]
 8001ba8:	89bb      	ldrh	r3, [r7, #12]
 8001baa:	4611      	mov	r1, r2
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff fdb9 	bl	8001724 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001bb4:	889b      	ldrh	r3, [r3, #4]
 8001bb6:	f641 1263 	movw	r2, #6499	; 0x1963
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d028      	beq.n	8001c10 <LCD_Scan_Dir+0x218>
		{
			if(regval&0X20)
 8001bbe:	89fb      	ldrh	r3, [r7, #14]
 8001bc0:	f003 0320 	and.w	r3, r3, #32
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d013      	beq.n	8001bf0 <LCD_Scan_Dir+0x1f8>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 8001bc8:	4b08      	ldr	r3, [pc, #32]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001bca:	881a      	ldrh	r2, [r3, #0]
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001bce:	885b      	ldrh	r3, [r3, #2]
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d21d      	bcs.n	8001c10 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001bdc:	885a      	ldrh	r2, [r3, #2]
 8001bde:	4b03      	ldr	r3, [pc, #12]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001be0:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8001be2:	4a02      	ldr	r2, [pc, #8]	; (8001bec <LCD_Scan_Dir+0x1f4>)
 8001be4:	897b      	ldrh	r3, [r7, #10]
 8001be6:	8053      	strh	r3, [r2, #2]
 8001be8:	e012      	b.n	8001c10 <LCD_Scan_Dir+0x218>
 8001bea:	bf00      	nop
 8001bec:	200001ec 	.word	0x200001ec
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 8001bf0:	4b7d      	ldr	r3, [pc, #500]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001bf2:	881a      	ldrh	r2, [r3, #0]
 8001bf4:	4b7c      	ldr	r3, [pc, #496]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001bf6:	885b      	ldrh	r3, [r3, #2]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d909      	bls.n	8001c10 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8001bfc:	4b7a      	ldr	r3, [pc, #488]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8001c02:	4b79      	ldr	r3, [pc, #484]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001c04:	885a      	ldrh	r2, [r3, #2]
 8001c06:	4b78      	ldr	r3, [pc, #480]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001c08:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8001c0a:	4a77      	ldr	r2, [pc, #476]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001c0c:	897b      	ldrh	r3, [r7, #10]
 8001c0e:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 8001c10:	4b75      	ldr	r3, [pc, #468]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001c12:	889b      	ldrh	r3, [r3, #4]
 8001c14:	f245 5210 	movw	r2, #21776	; 0x5510
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d162      	bne.n	8001ce2 <LCD_Scan_Dir+0x2ea>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 8001c1c:	4b72      	ldr	r3, [pc, #456]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001c1e:	895b      	ldrh	r3, [r3, #10]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fd45 	bl	80016b0 <LCD_WR_REG>
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fd56 	bl	80016d8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 8001c2c:	4b6e      	ldr	r3, [pc, #440]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001c2e:	895b      	ldrh	r3, [r3, #10]
 8001c30:	3301      	adds	r3, #1
 8001c32:	b29b      	uxth	r3, r3
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fd3b 	bl	80016b0 <LCD_WR_REG>
 8001c3a:	2000      	movs	r0, #0
 8001c3c:	f7ff fd4c 	bl	80016d8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 8001c40:	4b69      	ldr	r3, [pc, #420]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001c42:	895b      	ldrh	r3, [r3, #10]
 8001c44:	3302      	adds	r3, #2
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fd31 	bl	80016b0 <LCD_WR_REG>
 8001c4e:	4b66      	ldr	r3, [pc, #408]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	121b      	asrs	r3, r3, #8
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fd3d 	bl	80016d8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001c5e:	4b62      	ldr	r3, [pc, #392]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001c60:	895b      	ldrh	r3, [r3, #10]
 8001c62:	3303      	adds	r3, #3
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fd22 	bl	80016b0 <LCD_WR_REG>
 8001c6c:	4b5e      	ldr	r3, [pc, #376]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001c6e:	881b      	ldrh	r3, [r3, #0]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff fd2d 	bl	80016d8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 8001c7e:	4b5a      	ldr	r3, [pc, #360]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001c80:	899b      	ldrh	r3, [r3, #12]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff fd14 	bl	80016b0 <LCD_WR_REG>
 8001c88:	2000      	movs	r0, #0
 8001c8a:	f7ff fd25 	bl	80016d8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 8001c8e:	4b56      	ldr	r3, [pc, #344]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001c90:	899b      	ldrh	r3, [r3, #12]
 8001c92:	3301      	adds	r3, #1
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fd0a 	bl	80016b0 <LCD_WR_REG>
 8001c9c:	2000      	movs	r0, #0
 8001c9e:	f7ff fd1b 	bl	80016d8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 8001ca2:	4b51      	ldr	r3, [pc, #324]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001ca4:	899b      	ldrh	r3, [r3, #12]
 8001ca6:	3302      	adds	r3, #2
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fd00 	bl	80016b0 <LCD_WR_REG>
 8001cb0:	4b4d      	ldr	r3, [pc, #308]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001cb2:	885b      	ldrh	r3, [r3, #2]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	121b      	asrs	r3, r3, #8
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fd0c 	bl	80016d8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001cc0:	4b49      	ldr	r3, [pc, #292]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001cc2:	899b      	ldrh	r3, [r3, #12]
 8001cc4:	3303      	adds	r3, #3
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fcf1 	bl	80016b0 <LCD_WR_REG>
 8001cce:	4b46      	ldr	r3, [pc, #280]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001cd0:	885b      	ldrh	r3, [r3, #2]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	b29b      	uxth	r3, r3
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fcfc 	bl	80016d8 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8001ce0:	e07e      	b.n	8001de0 <LCD_Scan_Dir+0x3e8>
		}else
		{
			LCD_WR_REG(lcddev.setxcmd);
 8001ce2:	4b41      	ldr	r3, [pc, #260]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001ce4:	895b      	ldrh	r3, [r3, #10]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fce2 	bl	80016b0 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001cec:	2000      	movs	r0, #0
 8001cee:	f7ff fcf3 	bl	80016d8 <LCD_WR_DATA>
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f7ff fcf0 	bl	80016d8 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001cf8:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	121b      	asrs	r3, r3, #8
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fce8 	bl	80016d8 <LCD_WR_DATA>
 8001d08:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001d0a:	881b      	ldrh	r3, [r3, #0]
 8001d0c:	3b01      	subs	r3, #1
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fcdf 	bl	80016d8 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001d1c:	899b      	ldrh	r3, [r3, #12]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fcc6 	bl	80016b0 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7ff fcd7 	bl	80016d8 <LCD_WR_DATA>
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff fcd4 	bl	80016d8 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001d30:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001d32:	885b      	ldrh	r3, [r3, #2]
 8001d34:	3b01      	subs	r3, #1
 8001d36:	121b      	asrs	r3, r3, #8
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fccc 	bl	80016d8 <LCD_WR_DATA>
 8001d40:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <LCD_Scan_Dir+0x3f0>)
 8001d42:	885b      	ldrh	r3, [r3, #2]
 8001d44:	3b01      	subs	r3, #1
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff fcc3 	bl	80016d8 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8001d52:	e045      	b.n	8001de0 <LCD_Scan_Dir+0x3e8>
		}
  	}else
	{
		switch(dir)
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	2b07      	cmp	r3, #7
 8001d58:	d835      	bhi.n	8001dc6 <LCD_Scan_Dir+0x3ce>
 8001d5a:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <LCD_Scan_Dir+0x368>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001d81 	.word	0x08001d81
 8001d64:	08001d8b 	.word	0x08001d8b
 8001d68:	08001d95 	.word	0x08001d95
 8001d6c:	08001dc7 	.word	0x08001dc7
 8001d70:	08001d9f 	.word	0x08001d9f
 8001d74:	08001da9 	.word	0x08001da9
 8001d78:	08001db3 	.word	0x08001db3
 8001d7c:	08001dbd 	.word	0x08001dbd
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(1<<5)|(1<<4)|(0<<3);
 8001d80:	89fb      	ldrh	r3, [r7, #14]
 8001d82:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001d86:	81fb      	strh	r3, [r7, #14]
				break;
 8001d88:	e01d      	b.n	8001dc6 <LCD_Scan_Dir+0x3ce>
			case L2R_D2U://从左到右,从下到上
				regval|=(0<<5)|(1<<4)|(0<<3);
 8001d8a:	89fb      	ldrh	r3, [r7, #14]
 8001d8c:	f043 0310 	orr.w	r3, r3, #16
 8001d90:	81fb      	strh	r3, [r7, #14]
				break;
 8001d92:	e018      	b.n	8001dc6 <LCD_Scan_Dir+0x3ce>
			case R2L_U2D://从右到左,从上到下
				regval|=(1<<5)|(0<<4)|(0<<3);
 8001d94:	89fb      	ldrh	r3, [r7, #14]
 8001d96:	f043 0320 	orr.w	r3, r3, #32
 8001d9a:	81fb      	strh	r3, [r7, #14]
				break;
 8001d9c:	e013      	b.n	8001dc6 <LCD_Scan_Dir+0x3ce>
			case R2L_D2U://从右到左,从下到上
				regval|=(0<<5)|(0<<4)|(0<<3);
				break;
			case U2D_L2R://从上到下,从左到右
				regval|=(1<<5)|(1<<4)|(1<<3);
 8001d9e:	89fb      	ldrh	r3, [r7, #14]
 8001da0:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001da4:	81fb      	strh	r3, [r7, #14]
				break;
 8001da6:	e00e      	b.n	8001dc6 <LCD_Scan_Dir+0x3ce>
			case U2D_R2L://从上到下,从右到左
				regval|=(1<<5)|(0<<4)|(1<<3);
 8001da8:	89fb      	ldrh	r3, [r7, #14]
 8001daa:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001dae:	81fb      	strh	r3, [r7, #14]
				break;
 8001db0:	e009      	b.n	8001dc6 <LCD_Scan_Dir+0x3ce>
			case D2U_L2R://从下到上,从左到右
				regval|=(0<<5)|(1<<4)|(1<<3);
 8001db2:	89fb      	ldrh	r3, [r7, #14]
 8001db4:	f043 0318 	orr.w	r3, r3, #24
 8001db8:	81fb      	strh	r3, [r7, #14]
				break;
 8001dba:	e004      	b.n	8001dc6 <LCD_Scan_Dir+0x3ce>
			case D2U_R2L://从下到上,从右到左
				regval|=(0<<5)|(0<<4)|(1<<3);
 8001dbc:	89fb      	ldrh	r3, [r7, #14]
 8001dbe:	f043 0308 	orr.w	r3, r3, #8
 8001dc2:	81fb      	strh	r3, [r7, #14]
				break;
 8001dc4:	bf00      	nop
		}
		dirreg=0X03;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	81bb      	strh	r3, [r7, #12]
		regval|=1<<12;
 8001dca:	89fb      	ldrh	r3, [r7, #14]
 8001dcc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001dd0:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8001dd2:	89fa      	ldrh	r2, [r7, #14]
 8001dd4:	89bb      	ldrh	r3, [r7, #12]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fca3 	bl	8001724 <LCD_WriteReg>
	}
}
 8001dde:	bf00      	nop
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200001ec 	.word	0x200001ec

08001dec <LCD_DrawPoint>:
//画点
//x,y:坐标
//POINT_COLOR:此点的颜色
void LCD_DrawPoint(uint16_t x,uint16_t y)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	460a      	mov	r2, r1
 8001df6:	80fb      	strh	r3, [r7, #6]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);		//设置光标位置
 8001dfc:	88ba      	ldrh	r2, [r7, #4]
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	4611      	mov	r1, r2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fcc8 	bl	8001798 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();	//开始写入GRAM
 8001e08:	f7ff fcb6 	bl	8001778 <LCD_WriteRAM_Prepare>
	LCD->LCD_RAM=POINT_COLOR;
 8001e0c:	4b03      	ldr	r3, [pc, #12]	; (8001e1c <LCD_DrawPoint+0x30>)
 8001e0e:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <LCD_DrawPoint+0x34>)
 8001e10:	8812      	ldrh	r2, [r2, #0]
 8001e12:	805a      	strh	r2, [r3, #2]
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	6c00007e 	.word	0x6c00007e
 8001e20:	200000d4 	.word	0x200000d4

08001e24 <LCD_Fast_DrawPoint>:
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	80fb      	strh	r3, [r7, #6]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	80bb      	strh	r3, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	807b      	strh	r3, [r7, #2]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001e36:	4b85      	ldr	r3, [pc, #532]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001e38:	889b      	ldrh	r3, [r3, #4]
 8001e3a:	f249 3241 	movw	r2, #37697	; 0x9341
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d005      	beq.n	8001e4e <LCD_Fast_DrawPoint+0x2a>
 8001e42:	4b82      	ldr	r3, [pc, #520]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001e44:	889b      	ldrh	r3, [r3, #4]
 8001e46:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d122      	bne.n	8001e94 <LCD_Fast_DrawPoint+0x70>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8001e4e:	4b7f      	ldr	r3, [pc, #508]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001e50:	895b      	ldrh	r3, [r3, #10]
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fc2c 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001e58:	88fb      	ldrh	r3, [r7, #6]
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fc3a 	bl	80016d8 <LCD_WR_DATA>
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fc34 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001e70:	4b76      	ldr	r3, [pc, #472]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001e72:	899b      	ldrh	r3, [r3, #12]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fc1b 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001e7a:	88bb      	ldrh	r3, [r7, #4]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff fc29 	bl	80016d8 <LCD_WR_DATA>
 8001e86:	88bb      	ldrh	r3, [r7, #4]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fc23 	bl	80016d8 <LCD_WR_DATA>
 8001e92:	e0cf      	b.n	8002034 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X5510)
 8001e94:	4b6d      	ldr	r3, [pc, #436]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001e96:	889b      	ldrh	r3, [r3, #4]
 8001e98:	f245 5210 	movw	r2, #21776	; 0x5510
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d130      	bne.n	8001f02 <LCD_Fast_DrawPoint+0xde>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 8001ea0:	4b6a      	ldr	r3, [pc, #424]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001ea2:	895b      	ldrh	r3, [r3, #10]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff fc03 	bl	80016b0 <LCD_WR_REG>
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	0a1b      	lsrs	r3, r3, #8
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff fc11 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 8001eb6:	4b65      	ldr	r3, [pc, #404]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001eb8:	895b      	ldrh	r3, [r3, #10]
 8001eba:	3301      	adds	r3, #1
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fbf6 	bl	80016b0 <LCD_WR_REG>
 8001ec4:	88fb      	ldrh	r3, [r7, #6]
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fc04 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 8001ed0:	4b5e      	ldr	r3, [pc, #376]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001ed2:	899b      	ldrh	r3, [r3, #12]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fbeb 	bl	80016b0 <LCD_WR_REG>
 8001eda:	88bb      	ldrh	r3, [r7, #4]
 8001edc:	0a1b      	lsrs	r3, r3, #8
 8001ede:	b29b      	uxth	r3, r3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fbf9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 8001ee6:	4b59      	ldr	r3, [pc, #356]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001ee8:	899b      	ldrh	r3, [r3, #12]
 8001eea:	3301      	adds	r3, #1
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fbde 	bl	80016b0 <LCD_WR_REG>
 8001ef4:	88bb      	ldrh	r3, [r7, #4]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fbec 	bl	80016d8 <LCD_WR_DATA>
 8001f00:	e098      	b.n	8002034 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X1963)
 8001f02:	4b52      	ldr	r3, [pc, #328]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001f04:	889b      	ldrh	r3, [r3, #4]
 8001f06:	f641 1263 	movw	r2, #6499	; 0x1963
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d145      	bne.n	8001f9a <LCD_Fast_DrawPoint+0x176>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 8001f0e:	4b4f      	ldr	r3, [pc, #316]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001f10:	799b      	ldrb	r3, [r3, #6]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d106      	bne.n	8001f24 <LCD_Fast_DrawPoint+0x100>
 8001f16:	4b4d      	ldr	r3, [pc, #308]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001f18:	881a      	ldrh	r2, [r3, #0]
 8001f1a:	88fb      	ldrh	r3, [r7, #6]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	3b01      	subs	r3, #1
 8001f22:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001f24:	4b49      	ldr	r3, [pc, #292]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001f26:	895b      	ldrh	r3, [r3, #10]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fbc1 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	0a1b      	lsrs	r3, r3, #8
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fbcf 	bl	80016d8 <LCD_WR_DATA>
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fbc9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fbc3 	bl	80016d8 <LCD_WR_DATA>
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff fbbd 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001f60:	899b      	ldrh	r3, [r3, #12]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fba4 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001f68:	88bb      	ldrh	r3, [r7, #4]
 8001f6a:	0a1b      	lsrs	r3, r3, #8
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fbb2 	bl	80016d8 <LCD_WR_DATA>
 8001f74:	88bb      	ldrh	r3, [r7, #4]
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fbac 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001f80:	88bb      	ldrh	r3, [r7, #4]
 8001f82:	0a1b      	lsrs	r3, r3, #8
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fba6 	bl	80016d8 <LCD_WR_DATA>
 8001f8c:	88bb      	ldrh	r3, [r7, #4]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fba0 	bl	80016d8 <LCD_WR_DATA>
 8001f98:	e04c      	b.n	8002034 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X6804)
 8001f9a:	4b2c      	ldr	r3, [pc, #176]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001f9c:	889b      	ldrh	r3, [r3, #4]
 8001f9e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d12d      	bne.n	8002002 <LCD_Fast_DrawPoint+0x1de>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 8001fa6:	4b29      	ldr	r3, [pc, #164]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001fa8:	799b      	ldrb	r3, [r3, #6]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d106      	bne.n	8001fbc <LCD_Fast_DrawPoint+0x198>
 8001fae:	4b27      	ldr	r3, [pc, #156]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001fb0:	881a      	ldrh	r2, [r3, #0]
 8001fb2:	88fb      	ldrh	r3, [r7, #6]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001fbc:	4b23      	ldr	r3, [pc, #140]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001fbe:	895b      	ldrh	r3, [r3, #10]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fb75 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	b29b      	uxth	r3, r3
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fb83 	bl	80016d8 <LCD_WR_DATA>
 8001fd2:	88fb      	ldrh	r3, [r7, #6]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fb7d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001fde:	4b1b      	ldr	r3, [pc, #108]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8001fe0:	899b      	ldrh	r3, [r3, #12]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff fb64 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001fe8:	88bb      	ldrh	r3, [r7, #4]
 8001fea:	0a1b      	lsrs	r3, r3, #8
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fb72 	bl	80016d8 <LCD_WR_DATA>
 8001ff4:	88bb      	ldrh	r3, [r7, #4]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7ff fb6c 	bl	80016d8 <LCD_WR_DATA>
 8002000:	e018      	b.n	8002034 <LCD_Fast_DrawPoint+0x210>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 8002002:	4b12      	ldr	r3, [pc, #72]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8002004:	799b      	ldrb	r3, [r3, #6]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d106      	bne.n	8002018 <LCD_Fast_DrawPoint+0x1f4>
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 800200c:	881a      	ldrh	r2, [r3, #0]
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	b29b      	uxth	r3, r3
 8002014:	3b01      	subs	r3, #1
 8002016:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 800201a:	895b      	ldrh	r3, [r3, #10]
 800201c:	88fa      	ldrh	r2, [r7, #6]
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fb7f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 8002026:	4b09      	ldr	r3, [pc, #36]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8002028:	899b      	ldrh	r3, [r3, #12]
 800202a:	88ba      	ldrh	r2, [r7, #4]
 800202c:	4611      	mov	r1, r2
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fb78 	bl	8001724 <LCD_WriteReg>
	}
	LCD->LCD_REG=lcddev.wramcmd;
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <LCD_Fast_DrawPoint+0x22c>)
 8002036:	4a05      	ldr	r2, [pc, #20]	; (800204c <LCD_Fast_DrawPoint+0x228>)
 8002038:	8912      	ldrh	r2, [r2, #8]
 800203a:	801a      	strh	r2, [r3, #0]
	LCD->LCD_RAM=color;
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <LCD_Fast_DrawPoint+0x22c>)
 800203e:	887b      	ldrh	r3, [r7, #2]
 8002040:	8053      	strh	r3, [r2, #2]
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200001ec 	.word	0x200001ec
 8002050:	6c00007e 	.word	0x6c00007e
 8002054:	00000000 	.word	0x00000000

08002058 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8002062:	20be      	movs	r0, #190	; 0xbe
 8002064:	f7ff fb24 	bl	80016b0 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8002068:	2005      	movs	r0, #5
 800206a:	f7ff fb35 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe f9fb 	bl	800046c <__aeabi_i2d>
 8002076:	a310      	add	r3, pc, #64	; (adr r3, 80020b8 <LCD_SSD_BackLightSet+0x60>)
 8002078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800207c:	f7fe fa60 	bl	8000540 <__aeabi_dmul>
 8002080:	4602      	mov	r2, r0
 8002082:	460b      	mov	r3, r1
 8002084:	4610      	mov	r0, r2
 8002086:	4619      	mov	r1, r3
 8002088:	f7fe fd0a 	bl	8000aa0 <__aeabi_d2uiz>
 800208c:	4603      	mov	r3, r0
 800208e:	b29b      	uxth	r3, r3
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fb21 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 8002096:	2001      	movs	r0, #1
 8002098:	f7ff fb1e 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 800209c:	20ff      	movs	r0, #255	; 0xff
 800209e:	f7ff fb1b 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 80020a2:	2000      	movs	r0, #0
 80020a4:	f7ff fb18 	bl	80016d8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 80020a8:	2000      	movs	r0, #0
 80020aa:	f7ff fb15 	bl	80016d8 <LCD_WR_DATA>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	66666666 	.word	0x66666666
 80020bc:	40046666 	.word	0x40046666

080020c0 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
	if(dir==0)			//竖屏
 80020ca:	79fb      	ldrb	r3, [r7, #7]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d177      	bne.n	80021c0 <LCD_Display_Dir+0x100>
	{
		lcddev.dir=0;	//竖屏
 80020d0:	4b80      	ldr	r3, [pc, #512]	; (80022d4 <LCD_Display_Dir+0x214>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	719a      	strb	r2, [r3, #6]
		lcddev.width=240;
 80020d6:	4b7f      	ldr	r3, [pc, #508]	; (80022d4 <LCD_Display_Dir+0x214>)
 80020d8:	22f0      	movs	r2, #240	; 0xf0
 80020da:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80020dc:	4b7d      	ldr	r3, [pc, #500]	; (80022d4 <LCD_Display_Dir+0x214>)
 80020de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020e2:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X6804||lcddev.id==0X5310)
 80020e4:	4b7b      	ldr	r3, [pc, #492]	; (80022d4 <LCD_Display_Dir+0x214>)
 80020e6:	889b      	ldrh	r3, [r3, #4]
 80020e8:	f249 3241 	movw	r2, #37697	; 0x9341
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d00b      	beq.n	8002108 <LCD_Display_Dir+0x48>
 80020f0:	4b78      	ldr	r3, [pc, #480]	; (80022d4 <LCD_Display_Dir+0x214>)
 80020f2:	889b      	ldrh	r3, [r3, #4]
 80020f4:	f646 0204 	movw	r2, #26628	; 0x6804
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d005      	beq.n	8002108 <LCD_Display_Dir+0x48>
 80020fc:	4b75      	ldr	r3, [pc, #468]	; (80022d4 <LCD_Display_Dir+0x214>)
 80020fe:	889b      	ldrh	r3, [r3, #4]
 8002100:	f245 3210 	movw	r2, #21264	; 0x5310
 8002104:	4293      	cmp	r3, r2
 8002106:	d11e      	bne.n	8002146 <LCD_Display_Dir+0x86>
		{
			lcddev.wramcmd=0X2C;
 8002108:	4b72      	ldr	r3, [pc, #456]	; (80022d4 <LCD_Display_Dir+0x214>)
 800210a:	222c      	movs	r2, #44	; 0x2c
 800210c:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 800210e:	4b71      	ldr	r3, [pc, #452]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002110:	222a      	movs	r2, #42	; 0x2a
 8002112:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8002114:	4b6f      	ldr	r3, [pc, #444]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002116:	222b      	movs	r2, #43	; 0x2b
 8002118:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 800211a:	4b6e      	ldr	r3, [pc, #440]	; (80022d4 <LCD_Display_Dir+0x214>)
 800211c:	889b      	ldrh	r3, [r3, #4]
 800211e:	f646 0204 	movw	r2, #26628	; 0x6804
 8002122:	4293      	cmp	r3, r2
 8002124:	d006      	beq.n	8002134 <LCD_Display_Dir+0x74>
 8002126:	4b6b      	ldr	r3, [pc, #428]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002128:	889b      	ldrh	r3, [r3, #4]
 800212a:	f245 3210 	movw	r2, #21264	; 0x5310
 800212e:	4293      	cmp	r3, r2
 8002130:	f040 80c7 	bne.w	80022c2 <LCD_Display_Dir+0x202>
			{
				lcddev.width=320;
 8002134:	4b67      	ldr	r3, [pc, #412]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002136:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800213a:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 800213c:	4b65      	ldr	r3, [pc, #404]	; (80022d4 <LCD_Display_Dir+0x214>)
 800213e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002142:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8002144:	e0bd      	b.n	80022c2 <LCD_Display_Dir+0x202>
			}
		}else if(lcddev.id==0x5510)
 8002146:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002148:	889b      	ldrh	r3, [r3, #4]
 800214a:	f245 5210 	movw	r2, #21776	; 0x5510
 800214e:	4293      	cmp	r3, r2
 8002150:	d114      	bne.n	800217c <LCD_Display_Dir+0xbc>
		{
			lcddev.wramcmd=0X2C00;
 8002152:	4b60      	ldr	r3, [pc, #384]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002154:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002158:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 800215a:	4b5e      	ldr	r3, [pc, #376]	; (80022d4 <LCD_Display_Dir+0x214>)
 800215c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8002160:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8002162:	4b5c      	ldr	r3, [pc, #368]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002164:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002168:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 800216a:	4b5a      	ldr	r3, [pc, #360]	; (80022d4 <LCD_Display_Dir+0x214>)
 800216c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002170:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 8002172:	4b58      	ldr	r3, [pc, #352]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002174:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002178:	805a      	strh	r2, [r3, #2]
 800217a:	e0a3      	b.n	80022c4 <LCD_Display_Dir+0x204>
		}else if(lcddev.id==0X1963)
 800217c:	4b55      	ldr	r3, [pc, #340]	; (80022d4 <LCD_Display_Dir+0x214>)
 800217e:	889b      	ldrh	r3, [r3, #4]
 8002180:	f641 1263 	movw	r2, #6499	; 0x1963
 8002184:	4293      	cmp	r3, r2
 8002186:	d111      	bne.n	80021ac <LCD_Display_Dir+0xec>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8002188:	4b52      	ldr	r3, [pc, #328]	; (80022d4 <LCD_Display_Dir+0x214>)
 800218a:	222c      	movs	r2, #44	; 0x2c
 800218c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 800218e:	4b51      	ldr	r3, [pc, #324]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002190:	222b      	movs	r2, #43	; 0x2b
 8002192:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 8002194:	4b4f      	ldr	r3, [pc, #316]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002196:	222a      	movs	r2, #42	; 0x2a
 8002198:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 800219a:	4b4e      	ldr	r3, [pc, #312]	; (80022d4 <LCD_Display_Dir+0x214>)
 800219c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80021a0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 80021a2:	4b4c      	ldr	r3, [pc, #304]	; (80022d4 <LCD_Display_Dir+0x214>)
 80021a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80021a8:	805a      	strh	r2, [r3, #2]
 80021aa:	e08b      	b.n	80022c4 <LCD_Display_Dir+0x204>
		}else
		{
			lcddev.wramcmd=0X22;
 80021ac:	4b49      	ldr	r3, [pc, #292]	; (80022d4 <LCD_Display_Dir+0x214>)
 80021ae:	2222      	movs	r2, #34	; 0x22
 80021b0:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X20;
 80021b2:	4b48      	ldr	r3, [pc, #288]	; (80022d4 <LCD_Display_Dir+0x214>)
 80021b4:	2220      	movs	r2, #32
 80021b6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X21;
 80021b8:	4b46      	ldr	r3, [pc, #280]	; (80022d4 <LCD_Display_Dir+0x214>)
 80021ba:	2221      	movs	r2, #33	; 0x21
 80021bc:	819a      	strh	r2, [r3, #12]
 80021be:	e081      	b.n	80022c4 <LCD_Display_Dir+0x204>
		}
	}else 				//横屏
	{
		lcddev.dir=1;	//横屏
 80021c0:	4b44      	ldr	r3, [pc, #272]	; (80022d4 <LCD_Display_Dir+0x214>)
 80021c2:	2201      	movs	r2, #1
 80021c4:	719a      	strb	r2, [r3, #6]
		lcddev.width=320;
 80021c6:	4b43      	ldr	r3, [pc, #268]	; (80022d4 <LCD_Display_Dir+0x214>)
 80021c8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80021cc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80021ce:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <LCD_Display_Dir+0x214>)
 80021d0:	22f0      	movs	r2, #240	; 0xf0
 80021d2:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 80021d4:	4b3f      	ldr	r3, [pc, #252]	; (80022d4 <LCD_Display_Dir+0x214>)
 80021d6:	889b      	ldrh	r3, [r3, #4]
 80021d8:	f249 3241 	movw	r2, #37697	; 0x9341
 80021dc:	4293      	cmp	r3, r2
 80021de:	d005      	beq.n	80021ec <LCD_Display_Dir+0x12c>
 80021e0:	4b3c      	ldr	r3, [pc, #240]	; (80022d4 <LCD_Display_Dir+0x214>)
 80021e2:	889b      	ldrh	r3, [r3, #4]
 80021e4:	f245 3210 	movw	r2, #21264	; 0x5310
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d109      	bne.n	8002200 <LCD_Display_Dir+0x140>
		{
			lcddev.wramcmd=0X2C;
 80021ec:	4b39      	ldr	r3, [pc, #228]	; (80022d4 <LCD_Display_Dir+0x214>)
 80021ee:	222c      	movs	r2, #44	; 0x2c
 80021f0:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 80021f2:	4b38      	ldr	r3, [pc, #224]	; (80022d4 <LCD_Display_Dir+0x214>)
 80021f4:	222a      	movs	r2, #42	; 0x2a
 80021f6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 80021f8:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <LCD_Display_Dir+0x214>)
 80021fa:	222b      	movs	r2, #43	; 0x2b
 80021fc:	819a      	strh	r2, [r3, #12]
 80021fe:	e04b      	b.n	8002298 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X6804)
 8002200:	4b34      	ldr	r3, [pc, #208]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002202:	889b      	ldrh	r3, [r3, #4]
 8002204:	f646 0204 	movw	r2, #26628	; 0x6804
 8002208:	4293      	cmp	r3, r2
 800220a:	d109      	bne.n	8002220 <LCD_Display_Dir+0x160>
		{
 			lcddev.wramcmd=0X2C;
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <LCD_Display_Dir+0x214>)
 800220e:	222c      	movs	r2, #44	; 0x2c
 8002210:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2B;
 8002212:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002214:	222b      	movs	r2, #43	; 0x2b
 8002216:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;
 8002218:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <LCD_Display_Dir+0x214>)
 800221a:	222a      	movs	r2, #42	; 0x2a
 800221c:	819a      	strh	r2, [r3, #12]
 800221e:	e03b      	b.n	8002298 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0x5510)
 8002220:	4b2c      	ldr	r3, [pc, #176]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002222:	889b      	ldrh	r3, [r3, #4]
 8002224:	f245 5210 	movw	r2, #21776	; 0x5510
 8002228:	4293      	cmp	r3, r2
 800222a:	d114      	bne.n	8002256 <LCD_Display_Dir+0x196>
		{
			lcddev.wramcmd=0X2C00;
 800222c:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <LCD_Display_Dir+0x214>)
 800222e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002232:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8002234:	4b27      	ldr	r3, [pc, #156]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002236:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800223a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 800223c:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <LCD_Display_Dir+0x214>)
 800223e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002242:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 8002244:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002246:	f44f 7248 	mov.w	r2, #800	; 0x320
 800224a:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 800224c:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <LCD_Display_Dir+0x214>)
 800224e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002252:	805a      	strh	r2, [r3, #2]
 8002254:	e020      	b.n	8002298 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X1963)
 8002256:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002258:	889b      	ldrh	r3, [r3, #4]
 800225a:	f641 1263 	movw	r2, #6499	; 0x1963
 800225e:	4293      	cmp	r3, r2
 8002260:	d111      	bne.n	8002286 <LCD_Display_Dir+0x1c6>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8002262:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002264:	222c      	movs	r2, #44	; 0x2c
 8002266:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 8002268:	4b1a      	ldr	r3, [pc, #104]	; (80022d4 <LCD_Display_Dir+0x214>)
 800226a:	222a      	movs	r2, #42	; 0x2a
 800226c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 800226e:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002270:	222b      	movs	r2, #43	; 0x2b
 8002272:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 8002274:	4b17      	ldr	r3, [pc, #92]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002276:	f44f 7248 	mov.w	r2, #800	; 0x320
 800227a:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 800227c:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <LCD_Display_Dir+0x214>)
 800227e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002282:	805a      	strh	r2, [r3, #2]
 8002284:	e008      	b.n	8002298 <LCD_Display_Dir+0x1d8>
		}else
		{
			lcddev.wramcmd=0X22;
 8002286:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002288:	2222      	movs	r2, #34	; 0x22
 800228a:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X21;
 800228c:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <LCD_Display_Dir+0x214>)
 800228e:	2221      	movs	r2, #33	; 0x21
 8002290:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X20;
 8002292:	4b10      	ldr	r3, [pc, #64]	; (80022d4 <LCD_Display_Dir+0x214>)
 8002294:	2220      	movs	r2, #32
 8002296:	819a      	strh	r2, [r3, #12]
		}
		if(lcddev.id==0X6804||lcddev.id==0X5310)
 8002298:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <LCD_Display_Dir+0x214>)
 800229a:	889b      	ldrh	r3, [r3, #4]
 800229c:	f646 0204 	movw	r2, #26628	; 0x6804
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d005      	beq.n	80022b0 <LCD_Display_Dir+0x1f0>
 80022a4:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <LCD_Display_Dir+0x214>)
 80022a6:	889b      	ldrh	r3, [r3, #4]
 80022a8:	f245 3210 	movw	r2, #21264	; 0x5310
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d109      	bne.n	80022c4 <LCD_Display_Dir+0x204>
		{
			lcddev.width=480;
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <LCD_Display_Dir+0x214>)
 80022b2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80022b6:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <LCD_Display_Dir+0x214>)
 80022ba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80022be:	805a      	strh	r2, [r3, #2]
 80022c0:	e000      	b.n	80022c4 <LCD_Display_Dir+0x204>
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 80022c2:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7ff fb97 	bl	80019f8 <LCD_Scan_Dir>
}
 80022ca:	bf00      	nop
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200001ec 	.word	0x200001ec

080022d8 <LCD_Init>:
}
//初始化lcd
//该初始化函数可以初始化各种ILI93XX液晶,但是其他函数是基于ILI9320的!!!
//在其他型号的驱动芯片上没有测试!
void LCD_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
	__IO uint32_t i =0;
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]

//  FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);  //初始化FSMC配置

//  FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM4, ENABLE);  // 使能BANK1

 	HAL_Delay(50); // delay 50 ms
 80022e2:	2032      	movs	r0, #50	; 0x32
 80022e4:	f005 fea6 	bl	8008034 <HAL_Delay>
 	LCD_WriteReg(0x0000,0x0001);
 80022e8:	2101      	movs	r1, #1
 80022ea:	2000      	movs	r0, #0
 80022ec:	f7ff fa1a 	bl	8001724 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 80022f0:	2032      	movs	r0, #50	; 0x32
 80022f2:	f005 fe9f 	bl	8008034 <HAL_Delay>
  	lcddev.id = LCD_ReadReg(0x0000);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f7ff fa2a 	bl	8001750 <LCD_ReadReg>
 80022fc:	4603      	mov	r3, r0
 80022fe:	461a      	mov	r2, r3
 8002300:	4b95      	ldr	r3, [pc, #596]	; (8002558 <LCD_Init+0x280>)
 8002302:	809a      	strh	r2, [r3, #4]
   	if(lcddev.id<0XFF||lcddev.id==0XFFFF||lcddev.id==0X9300)//读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 8002304:	4b94      	ldr	r3, [pc, #592]	; (8002558 <LCD_Init+0x280>)
 8002306:	889b      	ldrh	r3, [r3, #4]
 8002308:	2bfe      	cmp	r3, #254	; 0xfe
 800230a:	d90b      	bls.n	8002324 <LCD_Init+0x4c>
 800230c:	4b92      	ldr	r3, [pc, #584]	; (8002558 <LCD_Init+0x280>)
 800230e:	889b      	ldrh	r3, [r3, #4]
 8002310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002314:	4293      	cmp	r3, r2
 8002316:	d005      	beq.n	8002324 <LCD_Init+0x4c>
 8002318:	4b8f      	ldr	r3, [pc, #572]	; (8002558 <LCD_Init+0x280>)
 800231a:	889b      	ldrh	r3, [r3, #4]
 800231c:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8002320:	f040 80e9 	bne.w	80024f6 <LCD_Init+0x21e>
	{
 		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 8002324:	20d3      	movs	r0, #211	; 0xd3
 8002326:	f7ff f9c3 	bl	80016b0 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();	//dummy read
 800232a:	f7ff f9e9 	bl	8001700 <LCD_RD_DATA>
 800232e:	4603      	mov	r3, r0
 8002330:	461a      	mov	r2, r3
 8002332:	4b89      	ldr	r3, [pc, #548]	; (8002558 <LCD_Init+0x280>)
 8002334:	809a      	strh	r2, [r3, #4]
 		lcddev.id=LCD_RD_DATA();	//读到0X00
 8002336:	f7ff f9e3 	bl	8001700 <LCD_RD_DATA>
 800233a:	4603      	mov	r3, r0
 800233c:	461a      	mov	r2, r3
 800233e:	4b86      	ldr	r3, [pc, #536]	; (8002558 <LCD_Init+0x280>)
 8002340:	809a      	strh	r2, [r3, #4]
  		lcddev.id=LCD_RD_DATA();   	//读取93
 8002342:	f7ff f9dd 	bl	8001700 <LCD_RD_DATA>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	4b83      	ldr	r3, [pc, #524]	; (8002558 <LCD_Init+0x280>)
 800234c:	809a      	strh	r2, [r3, #4]
 		lcddev.id<<=8;
 800234e:	4b82      	ldr	r3, [pc, #520]	; (8002558 <LCD_Init+0x280>)
 8002350:	889b      	ldrh	r3, [r3, #4]
 8002352:	021b      	lsls	r3, r3, #8
 8002354:	b29a      	uxth	r2, r3
 8002356:	4b80      	ldr	r3, [pc, #512]	; (8002558 <LCD_Init+0x280>)
 8002358:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();  	//读取41
 800235a:	f7ff f9d1 	bl	8001700 <LCD_RD_DATA>
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	4b7d      	ldr	r3, [pc, #500]	; (8002558 <LCD_Init+0x280>)
 8002364:	889b      	ldrh	r3, [r3, #4]
 8002366:	4313      	orrs	r3, r2
 8002368:	b29a      	uxth	r2, r3
 800236a:	4b7b      	ldr	r3, [pc, #492]	; (8002558 <LCD_Init+0x280>)
 800236c:	809a      	strh	r2, [r3, #4]
 		if(lcddev.id!=0X9341)		//非9341,尝试是不是6804
 800236e:	4b7a      	ldr	r3, [pc, #488]	; (8002558 <LCD_Init+0x280>)
 8002370:	889b      	ldrh	r3, [r3, #4]
 8002372:	f249 3241 	movw	r2, #37697	; 0x9341
 8002376:	4293      	cmp	r3, r2
 8002378:	f000 80bd 	beq.w	80024f6 <LCD_Init+0x21e>
		{
 			LCD_WR_REG(0XBF);
 800237c:	20bf      	movs	r0, #191	; 0xbf
 800237e:	f7ff f997 	bl	80016b0 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA(); 	//dummy read
 8002382:	f7ff f9bd 	bl	8001700 <LCD_RD_DATA>
 8002386:	4603      	mov	r3, r0
 8002388:	461a      	mov	r2, r3
 800238a:	4b73      	ldr	r3, [pc, #460]	; (8002558 <LCD_Init+0x280>)
 800238c:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA();   	//读回0X01
 800238e:	f7ff f9b7 	bl	8001700 <LCD_RD_DATA>
 8002392:	4603      	mov	r3, r0
 8002394:	461a      	mov	r2, r3
 8002396:	4b70      	ldr	r3, [pc, #448]	; (8002558 <LCD_Init+0x280>)
 8002398:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA(); 	//读回0XD0
 800239a:	f7ff f9b1 	bl	8001700 <LCD_RD_DATA>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b6d      	ldr	r3, [pc, #436]	; (8002558 <LCD_Init+0x280>)
 80023a4:	809a      	strh	r2, [r3, #4]
	  		lcddev.id=LCD_RD_DATA();	//这里读回0X68
 80023a6:	f7ff f9ab 	bl	8001700 <LCD_RD_DATA>
 80023aa:	4603      	mov	r3, r0
 80023ac:	461a      	mov	r2, r3
 80023ae:	4b6a      	ldr	r3, [pc, #424]	; (8002558 <LCD_Init+0x280>)
 80023b0:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 80023b2:	4b69      	ldr	r3, [pc, #420]	; (8002558 <LCD_Init+0x280>)
 80023b4:	889b      	ldrh	r3, [r3, #4]
 80023b6:	021b      	lsls	r3, r3, #8
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	4b67      	ldr	r3, [pc, #412]	; (8002558 <LCD_Init+0x280>)
 80023bc:	809a      	strh	r2, [r3, #4]
	  		lcddev.id|=LCD_RD_DATA();	//这里读回0X04
 80023be:	f7ff f99f 	bl	8001700 <LCD_RD_DATA>
 80023c2:	4603      	mov	r3, r0
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b64      	ldr	r3, [pc, #400]	; (8002558 <LCD_Init+0x280>)
 80023c8:	889b      	ldrh	r3, [r3, #4]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	4b62      	ldr	r3, [pc, #392]	; (8002558 <LCD_Init+0x280>)
 80023d0:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X6804)		//也不是6804,尝试看看是不是NT35310
 80023d2:	4b61      	ldr	r3, [pc, #388]	; (8002558 <LCD_Init+0x280>)
 80023d4:	889b      	ldrh	r3, [r3, #4]
 80023d6:	f646 0204 	movw	r2, #26628	; 0x6804
 80023da:	4293      	cmp	r3, r2
 80023dc:	f000 808b 	beq.w	80024f6 <LCD_Init+0x21e>
			{
				LCD_WR_REG(0XD4);
 80023e0:	20d4      	movs	r0, #212	; 0xd4
 80023e2:	f7ff f965 	bl	80016b0 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();//dummy read
 80023e6:	f7ff f98b 	bl	8001700 <LCD_RD_DATA>
 80023ea:	4603      	mov	r3, r0
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b5a      	ldr	r3, [pc, #360]	; (8002558 <LCD_Init+0x280>)
 80023f0:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X01
 80023f2:	f7ff f985 	bl	8001700 <LCD_RD_DATA>
 80023f6:	4603      	mov	r3, r0
 80023f8:	461a      	mov	r2, r3
 80023fa:	4b57      	ldr	r3, [pc, #348]	; (8002558 <LCD_Init+0x280>)
 80023fc:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X53
 80023fe:	f7ff f97f 	bl	8001700 <LCD_RD_DATA>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	4b54      	ldr	r3, [pc, #336]	; (8002558 <LCD_Init+0x280>)
 8002408:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 800240a:	4b53      	ldr	r3, [pc, #332]	; (8002558 <LCD_Init+0x280>)
 800240c:	889b      	ldrh	r3, [r3, #4]
 800240e:	021b      	lsls	r3, r3, #8
 8002410:	b29a      	uxth	r2, r3
 8002412:	4b51      	ldr	r3, [pc, #324]	; (8002558 <LCD_Init+0x280>)
 8002414:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 8002416:	f7ff f973 	bl	8001700 <LCD_RD_DATA>
 800241a:	4603      	mov	r3, r0
 800241c:	461a      	mov	r2, r3
 800241e:	4b4e      	ldr	r3, [pc, #312]	; (8002558 <LCD_Init+0x280>)
 8002420:	889b      	ldrh	r3, [r3, #4]
 8002422:	4313      	orrs	r3, r2
 8002424:	b29a      	uxth	r2, r3
 8002426:	4b4c      	ldr	r3, [pc, #304]	; (8002558 <LCD_Init+0x280>)
 8002428:	809a      	strh	r2, [r3, #4]
				if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 800242a:	4b4b      	ldr	r3, [pc, #300]	; (8002558 <LCD_Init+0x280>)
 800242c:	889b      	ldrh	r3, [r3, #4]
 800242e:	f245 3210 	movw	r2, #21264	; 0x5310
 8002432:	4293      	cmp	r3, r2
 8002434:	d05f      	beq.n	80024f6 <LCD_Init+0x21e>
				{
					LCD_WR_REG(0XDA00);
 8002436:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 800243a:	f7ff f939 	bl	80016b0 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X00
 800243e:	f7ff f95f 	bl	8001700 <LCD_RD_DATA>
 8002442:	4603      	mov	r3, r0
 8002444:	461a      	mov	r2, r3
 8002446:	4b44      	ldr	r3, [pc, #272]	; (8002558 <LCD_Init+0x280>)
 8002448:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDB00);
 800244a:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 800244e:	f7ff f92f 	bl	80016b0 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X80
 8002452:	f7ff f955 	bl	8001700 <LCD_RD_DATA>
 8002456:	4603      	mov	r3, r0
 8002458:	461a      	mov	r2, r3
 800245a:	4b3f      	ldr	r3, [pc, #252]	; (8002558 <LCD_Init+0x280>)
 800245c:	809a      	strh	r2, [r3, #4]
					lcddev.id<<=8;
 800245e:	4b3e      	ldr	r3, [pc, #248]	; (8002558 <LCD_Init+0x280>)
 8002460:	889b      	ldrh	r3, [r3, #4]
 8002462:	021b      	lsls	r3, r3, #8
 8002464:	b29a      	uxth	r2, r3
 8002466:	4b3c      	ldr	r3, [pc, #240]	; (8002558 <LCD_Init+0x280>)
 8002468:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 800246a:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 800246e:	f7ff f91f 	bl	80016b0 <LCD_WR_REG>
					lcddev.id|=LCD_RD_DATA();		//读回0X00
 8002472:	f7ff f945 	bl	8001700 <LCD_RD_DATA>
 8002476:	4603      	mov	r3, r0
 8002478:	461a      	mov	r2, r3
 800247a:	4b37      	ldr	r3, [pc, #220]	; (8002558 <LCD_Init+0x280>)
 800247c:	889b      	ldrh	r3, [r3, #4]
 800247e:	4313      	orrs	r3, r2
 8002480:	b29a      	uxth	r2, r3
 8002482:	4b35      	ldr	r3, [pc, #212]	; (8002558 <LCD_Init+0x280>)
 8002484:	809a      	strh	r2, [r3, #4]
					if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8002486:	4b34      	ldr	r3, [pc, #208]	; (8002558 <LCD_Init+0x280>)
 8002488:	889b      	ldrh	r3, [r3, #4]
 800248a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800248e:	d103      	bne.n	8002498 <LCD_Init+0x1c0>
 8002490:	4b31      	ldr	r3, [pc, #196]	; (8002558 <LCD_Init+0x280>)
 8002492:	f245 5210 	movw	r2, #21776	; 0x5510
 8002496:	809a      	strh	r2, [r3, #4]
					if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8002498:	4b2f      	ldr	r3, [pc, #188]	; (8002558 <LCD_Init+0x280>)
 800249a:	889b      	ldrh	r3, [r3, #4]
 800249c:	f245 5210 	movw	r2, #21776	; 0x5510
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d028      	beq.n	80024f6 <LCD_Init+0x21e>
					{
						LCD_WR_REG(0XA1);
 80024a4:	20a1      	movs	r0, #161	; 0xa1
 80024a6:	f7ff f903 	bl	80016b0 <LCD_WR_REG>
						lcddev.id=LCD_RD_DATA();
 80024aa:	f7ff f929 	bl	8001700 <LCD_RD_DATA>
 80024ae:	4603      	mov	r3, r0
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b29      	ldr	r3, [pc, #164]	; (8002558 <LCD_Init+0x280>)
 80024b4:	809a      	strh	r2, [r3, #4]
						lcddev.id=LCD_RD_DATA();	//读回0X57
 80024b6:	f7ff f923 	bl	8001700 <LCD_RD_DATA>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461a      	mov	r2, r3
 80024be:	4b26      	ldr	r3, [pc, #152]	; (8002558 <LCD_Init+0x280>)
 80024c0:	809a      	strh	r2, [r3, #4]
						lcddev.id<<=8;
 80024c2:	4b25      	ldr	r3, [pc, #148]	; (8002558 <LCD_Init+0x280>)
 80024c4:	889b      	ldrh	r3, [r3, #4]
 80024c6:	021b      	lsls	r3, r3, #8
 80024c8:	b29a      	uxth	r2, r3
 80024ca:	4b23      	ldr	r3, [pc, #140]	; (8002558 <LCD_Init+0x280>)
 80024cc:	809a      	strh	r2, [r3, #4]
						lcddev.id|=LCD_RD_DATA();	//读回0X61
 80024ce:	f7ff f917 	bl	8001700 <LCD_RD_DATA>
 80024d2:	4603      	mov	r3, r0
 80024d4:	461a      	mov	r2, r3
 80024d6:	4b20      	ldr	r3, [pc, #128]	; (8002558 <LCD_Init+0x280>)
 80024d8:	889b      	ldrh	r3, [r3, #4]
 80024da:	4313      	orrs	r3, r2
 80024dc:	b29a      	uxth	r2, r3
 80024de:	4b1e      	ldr	r3, [pc, #120]	; (8002558 <LCD_Init+0x280>)
 80024e0:	809a      	strh	r2, [r3, #4]
						if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <LCD_Init+0x280>)
 80024e4:	889b      	ldrh	r3, [r3, #4]
 80024e6:	f245 7261 	movw	r2, #22369	; 0x5761
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d103      	bne.n	80024f6 <LCD_Init+0x21e>
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <LCD_Init+0x280>)
 80024f0:	f641 1263 	movw	r2, #6499	; 0x1963
 80024f4:	809a      	strh	r2, [r3, #4]
					}
				}
			}
 		}
	}
	if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//如果是这几个IC,则设置WR时序为最快
 80024f6:	4b18      	ldr	r3, [pc, #96]	; (8002558 <LCD_Init+0x280>)
 80024f8:	889b      	ldrh	r3, [r3, #4]
 80024fa:	f249 3241 	movw	r2, #37697	; 0x9341
 80024fe:	4293      	cmp	r3, r2
 8002500:	d011      	beq.n	8002526 <LCD_Init+0x24e>
 8002502:	4b15      	ldr	r3, [pc, #84]	; (8002558 <LCD_Init+0x280>)
 8002504:	889b      	ldrh	r3, [r3, #4]
 8002506:	f245 3210 	movw	r2, #21264	; 0x5310
 800250a:	4293      	cmp	r3, r2
 800250c:	d00b      	beq.n	8002526 <LCD_Init+0x24e>
 800250e:	4b12      	ldr	r3, [pc, #72]	; (8002558 <LCD_Init+0x280>)
 8002510:	889b      	ldrh	r3, [r3, #4]
 8002512:	f245 5210 	movw	r2, #21776	; 0x5510
 8002516:	4293      	cmp	r3, r2
 8002518:	d005      	beq.n	8002526 <LCD_Init+0x24e>
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <LCD_Init+0x280>)
 800251c:	889b      	ldrh	r3, [r3, #4]
 800251e:	f641 1263 	movw	r2, #6499	; 0x1963
 8002522:	4293      	cmp	r3, r2
 8002524:	d11c      	bne.n	8002560 <LCD_Init+0x288>
	{
		//重新配置写时序控制寄存器的时序
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//地址建立时间(ADDSET)清零
 8002526:	4b0d      	ldr	r3, [pc, #52]	; (800255c <LCD_Init+0x284>)
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	4a0c      	ldr	r2, [pc, #48]	; (800255c <LCD_Init+0x284>)
 800252c:	f023 030f 	bic.w	r3, r3, #15
 8002530:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//数据保存时间清零
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <LCD_Init+0x284>)
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	4a09      	ldr	r2, [pc, #36]	; (800255c <LCD_Init+0x284>)
 8002538:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800253c:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=3<<0;		//地址建立时间(ADDSET)为3个HCLK =18ns
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <LCD_Init+0x284>)
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	4a06      	ldr	r2, [pc, #24]	; (800255c <LCD_Init+0x284>)
 8002544:	f043 0303 	orr.w	r3, r3, #3
 8002548:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=2<<8; 	//数据保存时间(DATAST)为6ns*3个HCLK=18ns
 800254a:	4b04      	ldr	r3, [pc, #16]	; (800255c <LCD_Init+0x284>)
 800254c:	699b      	ldr	r3, [r3, #24]
 800254e:	4a03      	ldr	r2, [pc, #12]	; (800255c <LCD_Init+0x284>)
 8002550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002554:	6193      	str	r3, [r2, #24]
 8002556:	e027      	b.n	80025a8 <LCD_Init+0x2d0>
 8002558:	200001ec 	.word	0x200001ec
 800255c:	a0000104 	.word	0xa0000104
	}else if(lcddev.id==0X6804||lcddev.id==0XC505)	//6804/C505速度上不去,得降低
 8002560:	4ba0      	ldr	r3, [pc, #640]	; (80027e4 <LCD_Init+0x50c>)
 8002562:	889b      	ldrh	r3, [r3, #4]
 8002564:	f646 0204 	movw	r2, #26628	; 0x6804
 8002568:	4293      	cmp	r3, r2
 800256a:	d005      	beq.n	8002578 <LCD_Init+0x2a0>
 800256c:	4b9d      	ldr	r3, [pc, #628]	; (80027e4 <LCD_Init+0x50c>)
 800256e:	889b      	ldrh	r3, [r3, #4]
 8002570:	f24c 5205 	movw	r2, #50437	; 0xc505
 8002574:	4293      	cmp	r3, r2
 8002576:	d117      	bne.n	80025a8 <LCD_Init+0x2d0>
	{
		//重新配置写时序控制寄存器的时序
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//地址建立时间(ADDSET)清零
 8002578:	4b9b      	ldr	r3, [pc, #620]	; (80027e8 <LCD_Init+0x510>)
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	4a9a      	ldr	r2, [pc, #616]	; (80027e8 <LCD_Init+0x510>)
 800257e:	f023 030f 	bic.w	r3, r3, #15
 8002582:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//数据保存时间清零
 8002584:	4b98      	ldr	r3, [pc, #608]	; (80027e8 <LCD_Init+0x510>)
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	4a97      	ldr	r2, [pc, #604]	; (80027e8 <LCD_Init+0x510>)
 800258a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800258e:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=10<<0;	//地址建立时间(ADDSET)为10个HCLK =60ns
 8002590:	4b95      	ldr	r3, [pc, #596]	; (80027e8 <LCD_Init+0x510>)
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	4a94      	ldr	r2, [pc, #592]	; (80027e8 <LCD_Init+0x510>)
 8002596:	f043 030a 	orr.w	r3, r3, #10
 800259a:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=12<<8; 	//数据保存时间(DATAST)为6ns*13个HCLK=78ns
 800259c:	4b92      	ldr	r3, [pc, #584]	; (80027e8 <LCD_Init+0x510>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	4a91      	ldr	r2, [pc, #580]	; (80027e8 <LCD_Init+0x510>)
 80025a2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80025a6:	6193      	str	r3, [r2, #24]
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if(lcddev.id==0X9341)	//9341初始化
 80025a8:	4b8e      	ldr	r3, [pc, #568]	; (80027e4 <LCD_Init+0x50c>)
 80025aa:	889b      	ldrh	r3, [r3, #4]
 80025ac:	f249 3241 	movw	r2, #37697	; 0x9341
 80025b0:	4293      	cmp	r3, r2
 80025b2:	f040 811b 	bne.w	80027ec <LCD_Init+0x514>
	{
		LCD_WR_REG(0xCF);
 80025b6:	20cf      	movs	r0, #207	; 0xcf
 80025b8:	f7ff f87a 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80025bc:	2000      	movs	r0, #0
 80025be:	f7ff f88b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 80025c2:	20c1      	movs	r0, #193	; 0xc1
 80025c4:	f7ff f888 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 80025c8:	2030      	movs	r0, #48	; 0x30
 80025ca:	f7ff f885 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 80025ce:	20ed      	movs	r0, #237	; 0xed
 80025d0:	f7ff f86e 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 80025d4:	2064      	movs	r0, #100	; 0x64
 80025d6:	f7ff f87f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80025da:	2003      	movs	r0, #3
 80025dc:	f7ff f87c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 80025e0:	2012      	movs	r0, #18
 80025e2:	f7ff f879 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 80025e6:	2081      	movs	r0, #129	; 0x81
 80025e8:	f7ff f876 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 80025ec:	20e8      	movs	r0, #232	; 0xe8
 80025ee:	f7ff f85f 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 80025f2:	2085      	movs	r0, #133	; 0x85
 80025f4:	f7ff f870 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 80025f8:	2010      	movs	r0, #16
 80025fa:	f7ff f86d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 80025fe:	207a      	movs	r0, #122	; 0x7a
 8002600:	f7ff f86a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 8002604:	20cb      	movs	r0, #203	; 0xcb
 8002606:	f7ff f853 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 800260a:	2039      	movs	r0, #57	; 0x39
 800260c:	f7ff f864 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002610:	202c      	movs	r0, #44	; 0x2c
 8002612:	f7ff f861 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002616:	2000      	movs	r0, #0
 8002618:	f7ff f85e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 800261c:	2034      	movs	r0, #52	; 0x34
 800261e:	f7ff f85b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002622:	2002      	movs	r0, #2
 8002624:	f7ff f858 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8002628:	20f7      	movs	r0, #247	; 0xf7
 800262a:	f7ff f841 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 800262e:	2020      	movs	r0, #32
 8002630:	f7ff f852 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 8002634:	20ea      	movs	r0, #234	; 0xea
 8002636:	f7ff f83b 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800263a:	2000      	movs	r0, #0
 800263c:	f7ff f84c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002640:	2000      	movs	r0, #0
 8002642:	f7ff f849 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 8002646:	20c0      	movs	r0, #192	; 0xc0
 8002648:	f7ff f832 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 800264c:	201b      	movs	r0, #27
 800264e:	f7ff f843 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 8002652:	20c1      	movs	r0, #193	; 0xc1
 8002654:	f7ff f82c 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002658:	2001      	movs	r0, #1
 800265a:	f7ff f83d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 800265e:	20c5      	movs	r0, #197	; 0xc5
 8002660:	f7ff f826 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 8002664:	2030      	movs	r0, #48	; 0x30
 8002666:	f7ff f837 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 800266a:	2030      	movs	r0, #48	; 0x30
 800266c:	f7ff f834 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 8002670:	20c7      	movs	r0, #199	; 0xc7
 8002672:	f7ff f81d 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 8002676:	20b7      	movs	r0, #183	; 0xb7
 8002678:	f7ff f82e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 800267c:	2036      	movs	r0, #54	; 0x36
 800267e:	f7ff f817 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 8002682:	2048      	movs	r0, #72	; 0x48
 8002684:	f7ff f828 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 8002688:	203a      	movs	r0, #58	; 0x3a
 800268a:	f7ff f811 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 800268e:	2055      	movs	r0, #85	; 0x55
 8002690:	f7ff f822 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 8002694:	20b1      	movs	r0, #177	; 0xb1
 8002696:	f7ff f80b 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800269a:	2000      	movs	r0, #0
 800269c:	f7ff f81c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 80026a0:	201a      	movs	r0, #26
 80026a2:	f7ff f819 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 80026a6:	20b6      	movs	r0, #182	; 0xb6
 80026a8:	f7ff f802 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 80026ac:	200a      	movs	r0, #10
 80026ae:	f7ff f813 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80026b2:	20a2      	movs	r0, #162	; 0xa2
 80026b4:	f7ff f810 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80026b8:	20f2      	movs	r0, #242	; 0xf2
 80026ba:	f7fe fff9 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80026be:	2000      	movs	r0, #0
 80026c0:	f7ff f80a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 80026c4:	2026      	movs	r0, #38	; 0x26
 80026c6:	f7fe fff3 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80026ca:	2001      	movs	r0, #1
 80026cc:	f7ff f804 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 80026d0:	20e0      	movs	r0, #224	; 0xe0
 80026d2:	f7fe ffed 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 80026d6:	200f      	movs	r0, #15
 80026d8:	f7fe fffe 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 80026dc:	202a      	movs	r0, #42	; 0x2a
 80026de:	f7fe fffb 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 80026e2:	2028      	movs	r0, #40	; 0x28
 80026e4:	f7fe fff8 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 80026e8:	2008      	movs	r0, #8
 80026ea:	f7fe fff5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 80026ee:	200e      	movs	r0, #14
 80026f0:	f7fe fff2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 80026f4:	2008      	movs	r0, #8
 80026f6:	f7fe ffef 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 80026fa:	2054      	movs	r0, #84	; 0x54
 80026fc:	f7fe ffec 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 8002700:	20a9      	movs	r0, #169	; 0xa9
 8002702:	f7fe ffe9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8002706:	2043      	movs	r0, #67	; 0x43
 8002708:	f7fe ffe6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 800270c:	200a      	movs	r0, #10
 800270e:	f7fe ffe3 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8002712:	200f      	movs	r0, #15
 8002714:	f7fe ffe0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002718:	2000      	movs	r0, #0
 800271a:	f7fe ffdd 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800271e:	2000      	movs	r0, #0
 8002720:	f7fe ffda 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002724:	2000      	movs	r0, #0
 8002726:	f7fe ffd7 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800272a:	2000      	movs	r0, #0
 800272c:	f7fe ffd4 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 8002730:	20e1      	movs	r0, #225	; 0xe1
 8002732:	f7fe ffbd 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002736:	2000      	movs	r0, #0
 8002738:	f7fe ffce 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 800273c:	2015      	movs	r0, #21
 800273e:	f7fe ffcb 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8002742:	2017      	movs	r0, #23
 8002744:	f7fe ffc8 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 8002748:	2007      	movs	r0, #7
 800274a:	f7fe ffc5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 800274e:	2011      	movs	r0, #17
 8002750:	f7fe ffc2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 8002754:	2006      	movs	r0, #6
 8002756:	f7fe ffbf 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 800275a:	202b      	movs	r0, #43	; 0x2b
 800275c:	f7fe ffbc 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002760:	2056      	movs	r0, #86	; 0x56
 8002762:	f7fe ffb9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002766:	203c      	movs	r0, #60	; 0x3c
 8002768:	f7fe ffb6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 800276c:	2005      	movs	r0, #5
 800276e:	f7fe ffb3 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8002772:	2010      	movs	r0, #16
 8002774:	f7fe ffb0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8002778:	200f      	movs	r0, #15
 800277a:	f7fe ffad 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 800277e:	203f      	movs	r0, #63	; 0x3f
 8002780:	f7fe ffaa 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8002784:	203f      	movs	r0, #63	; 0x3f
 8002786:	f7fe ffa7 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 800278a:	200f      	movs	r0, #15
 800278c:	f7fe ffa4 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 8002790:	202b      	movs	r0, #43	; 0x2b
 8002792:	f7fe ff8d 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002796:	2000      	movs	r0, #0
 8002798:	f7fe ff9e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800279c:	2000      	movs	r0, #0
 800279e:	f7fe ff9b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 80027a2:	2001      	movs	r0, #1
 80027a4:	f7fe ff98 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 80027a8:	203f      	movs	r0, #63	; 0x3f
 80027aa:	f7fe ff95 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 80027ae:	202a      	movs	r0, #42	; 0x2a
 80027b0:	f7fe ff7e 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7fe ff8f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027ba:	2000      	movs	r0, #0
 80027bc:	f7fe ff8c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027c0:	2000      	movs	r0, #0
 80027c2:	f7fe ff89 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 80027c6:	20ef      	movs	r0, #239	; 0xef
 80027c8:	f7fe ff86 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 80027cc:	2011      	movs	r0, #17
 80027ce:	f7fe ff6f 	bl	80016b0 <LCD_WR_REG>
		HAL_Delay(120);
 80027d2:	2078      	movs	r0, #120	; 0x78
 80027d4:	f005 fc2e 	bl	8008034 <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 80027d8:	2029      	movs	r0, #41	; 0x29
 80027da:	f7fe ff69 	bl	80016b0 <LCD_WR_REG>
 80027de:	f003 b924 	b.w	8005a2a <LCD_Init+0x3752>
 80027e2:	bf00      	nop
 80027e4:	200001ec 	.word	0x200001ec
 80027e8:	a0000104 	.word	0xa0000104
	}else if(lcddev.id==0x6804) //6804初始化
 80027ec:	4b58      	ldr	r3, [pc, #352]	; (8002950 <LCD_Init+0x678>)
 80027ee:	889b      	ldrh	r3, [r3, #4]
 80027f0:	f646 0204 	movw	r2, #26628	; 0x6804
 80027f4:	4293      	cmp	r3, r2
 80027f6:	f040 80ad 	bne.w	8002954 <LCD_Init+0x67c>
	{
		LCD_WR_REG(0X11);
 80027fa:	2011      	movs	r0, #17
 80027fc:	f7fe ff58 	bl	80016b0 <LCD_WR_REG>
		HAL_Delay(20);
 8002800:	2014      	movs	r0, #20
 8002802:	f005 fc17 	bl	8008034 <HAL_Delay>
		LCD_WR_REG(0XD0);//VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8002806:	20d0      	movs	r0, #208	; 0xd0
 8002808:	f7fe ff52 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0X07);
 800280c:	2007      	movs	r0, #7
 800280e:	f7fe ff63 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X42);
 8002812:	2042      	movs	r0, #66	; 0x42
 8002814:	f7fe ff60 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X1D);
 8002818:	201d      	movs	r0, #29
 800281a:	f7fe ff5d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0XD1);//VCOMH VCOM_AC amplitude setting
 800281e:	20d1      	movs	r0, #209	; 0xd1
 8002820:	f7fe ff46 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002824:	2000      	movs	r0, #0
 8002826:	f7fe ff57 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X1a);
 800282a:	201a      	movs	r0, #26
 800282c:	f7fe ff54 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X09);
 8002830:	2009      	movs	r0, #9
 8002832:	f7fe ff51 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0XD2);//Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8002836:	20d2      	movs	r0, #210	; 0xd2
 8002838:	f7fe ff3a 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 800283c:	2001      	movs	r0, #1
 800283e:	f7fe ff4b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X22);
 8002842:	2022      	movs	r0, #34	; 0x22
 8002844:	f7fe ff48 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0XC0);//REV SM GS
 8002848:	20c0      	movs	r0, #192	; 0xc0
 800284a:	f7fe ff31 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0X10);
 800284e:	2010      	movs	r0, #16
 8002850:	f7fe ff42 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X3B);
 8002854:	203b      	movs	r0, #59	; 0x3b
 8002856:	f7fe ff3f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 800285a:	2000      	movs	r0, #0
 800285c:	f7fe ff3c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X02);
 8002860:	2002      	movs	r0, #2
 8002862:	f7fe ff39 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X11);
 8002866:	2011      	movs	r0, #17
 8002868:	f7fe ff36 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0XC5);// Frame rate setting = 72HZ  when setting 0x03
 800286c:	20c5      	movs	r0, #197	; 0xc5
 800286e:	f7fe ff1f 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0X03);
 8002872:	2003      	movs	r0, #3
 8002874:	f7fe ff30 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0XC8);//Gamma setting
 8002878:	20c8      	movs	r0, #200	; 0xc8
 800287a:	f7fe ff19 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe ff2a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 8002884:	2025      	movs	r0, #37	; 0x25
 8002886:	f7fe ff27 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X21);
 800288a:	2021      	movs	r0, #33	; 0x21
 800288c:	f7fe ff24 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X05);
 8002890:	2005      	movs	r0, #5
 8002892:	f7fe ff21 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002896:	2000      	movs	r0, #0
 8002898:	f7fe ff1e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X0a);
 800289c:	200a      	movs	r0, #10
 800289e:	f7fe ff1b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X65);
 80028a2:	2065      	movs	r0, #101	; 0x65
 80028a4:	f7fe ff18 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 80028a8:	2025      	movs	r0, #37	; 0x25
 80028aa:	f7fe ff15 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X77);
 80028ae:	2077      	movs	r0, #119	; 0x77
 80028b0:	f7fe ff12 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X50);
 80028b4:	2050      	movs	r0, #80	; 0x50
 80028b6:	f7fe ff0f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X0f);
 80028ba:	200f      	movs	r0, #15
 80028bc:	f7fe ff0c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 80028c0:	2000      	movs	r0, #0
 80028c2:	f7fe ff09 	bl	80016d8 <LCD_WR_DATA>

   		LCD_WR_REG(0XF8);
 80028c6:	20f8      	movs	r0, #248	; 0xf8
 80028c8:	f7fe fef2 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 80028cc:	2001      	movs	r0, #1
 80028ce:	f7fe ff03 	bl	80016d8 <LCD_WR_DATA>

 		LCD_WR_REG(0XFE);
 80028d2:	20fe      	movs	r0, #254	; 0xfe
 80028d4:	f7fe feec 	bl	80016b0 <LCD_WR_REG>
 		LCD_WR_DATA(0X00);
 80028d8:	2000      	movs	r0, #0
 80028da:	f7fe fefd 	bl	80016d8 <LCD_WR_DATA>
 		LCD_WR_DATA(0X02);
 80028de:	2002      	movs	r0, #2
 80028e0:	f7fe fefa 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0X20);//Exit invert mode
 80028e4:	2020      	movs	r0, #32
 80028e6:	f7fe fee3 	bl	80016b0 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 80028ea:	2036      	movs	r0, #54	; 0x36
 80028ec:	f7fe fee0 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0X08);//原来是a
 80028f0:	2008      	movs	r0, #8
 80028f2:	f7fe fef1 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0X3A);
 80028f6:	203a      	movs	r0, #58	; 0x3a
 80028f8:	f7fe feda 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0X55);//16位模式
 80028fc:	2055      	movs	r0, #85	; 0x55
 80028fe:	f7fe feeb 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0X2B);
 8002902:	202b      	movs	r0, #43	; 0x2b
 8002904:	f7fe fed4 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002908:	2000      	movs	r0, #0
 800290a:	f7fe fee5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe fee2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 8002914:	2001      	movs	r0, #1
 8002916:	f7fe fedf 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X3F);
 800291a:	203f      	movs	r0, #63	; 0x3f
 800291c:	f7fe fedc 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0X2A);
 8002920:	202a      	movs	r0, #42	; 0x2a
 8002922:	f7fe fec5 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002926:	2000      	movs	r0, #0
 8002928:	f7fe fed6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 800292c:	2000      	movs	r0, #0
 800292e:	f7fe fed3 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 8002932:	2001      	movs	r0, #1
 8002934:	f7fe fed0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0XDF);
 8002938:	20df      	movs	r0, #223	; 0xdf
 800293a:	f7fe fecd 	bl	80016d8 <LCD_WR_DATA>
		HAL_Delay(120);
 800293e:	2078      	movs	r0, #120	; 0x78
 8002940:	f005 fb78 	bl	8008034 <HAL_Delay>
		LCD_WR_REG(0X29);
 8002944:	2029      	movs	r0, #41	; 0x29
 8002946:	f7fe feb3 	bl	80016b0 <LCD_WR_REG>
 800294a:	f003 b86e 	b.w	8005a2a <LCD_Init+0x3752>
 800294e:	bf00      	nop
 8002950:	200001ec 	.word	0x200001ec
 	}else if(lcddev.id==0x5310)
 8002954:	4b03      	ldr	r3, [pc, #12]	; (8002964 <LCD_Init+0x68c>)
 8002956:	889b      	ldrh	r3, [r3, #4]
 8002958:	f245 3210 	movw	r2, #21264	; 0x5310
 800295c:	4293      	cmp	r3, r2
 800295e:	f040 877c 	bne.w	800385a <LCD_Init+0x1582>
 8002962:	e001      	b.n	8002968 <LCD_Init+0x690>
 8002964:	200001ec 	.word	0x200001ec
	{
		LCD_WR_REG(0xED);
 8002968:	20ed      	movs	r0, #237	; 0xed
 800296a:	f7fe fea1 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 800296e:	2001      	movs	r0, #1
 8002970:	f7fe feb2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 8002974:	20fe      	movs	r0, #254	; 0xfe
 8002976:	f7fe feaf 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 800297a:	20ee      	movs	r0, #238	; 0xee
 800297c:	f7fe fe98 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 8002980:	20de      	movs	r0, #222	; 0xde
 8002982:	f7fe fea9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8002986:	2021      	movs	r0, #33	; 0x21
 8002988:	f7fe fea6 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 800298c:	20f1      	movs	r0, #241	; 0xf1
 800298e:	f7fe fe8f 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002992:	2001      	movs	r0, #1
 8002994:	f7fe fea0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 8002998:	20df      	movs	r0, #223	; 0xdf
 800299a:	f7fe fe89 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 800299e:	2010      	movs	r0, #16
 80029a0:	f7fe fe9a 	bl	80016d8 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80029a4:	20c4      	movs	r0, #196	; 0xc4
 80029a6:	f7fe fe83 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 80029aa:	208f      	movs	r0, #143	; 0x8f
 80029ac:	f7fe fe94 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 80029b0:	20c6      	movs	r0, #198	; 0xc6
 80029b2:	f7fe fe7d 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80029b6:	2000      	movs	r0, #0
 80029b8:	f7fe fe8e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80029bc:	20e2      	movs	r0, #226	; 0xe2
 80029be:	f7fe fe8b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80029c2:	20e2      	movs	r0, #226	; 0xe2
 80029c4:	f7fe fe88 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80029c8:	20e2      	movs	r0, #226	; 0xe2
 80029ca:	f7fe fe85 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 80029ce:	20bf      	movs	r0, #191	; 0xbf
 80029d0:	f7fe fe6e 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 80029d4:	20aa      	movs	r0, #170	; 0xaa
 80029d6:	f7fe fe7f 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 80029da:	20b0      	movs	r0, #176	; 0xb0
 80029dc:	f7fe fe68 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 80029e0:	200d      	movs	r0, #13
 80029e2:	f7fe fe79 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029e6:	2000      	movs	r0, #0
 80029e8:	f7fe fe76 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 80029ec:	200d      	movs	r0, #13
 80029ee:	f7fe fe73 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029f2:	2000      	movs	r0, #0
 80029f4:	f7fe fe70 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 80029f8:	2011      	movs	r0, #17
 80029fa:	f7fe fe6d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029fe:	2000      	movs	r0, #0
 8002a00:	f7fe fe6a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 8002a04:	2019      	movs	r0, #25
 8002a06:	f7fe fe67 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a0a:	2000      	movs	r0, #0
 8002a0c:	f7fe fe64 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8002a10:	2021      	movs	r0, #33	; 0x21
 8002a12:	f7fe fe61 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a16:	2000      	movs	r0, #0
 8002a18:	f7fe fe5e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8002a1c:	202d      	movs	r0, #45	; 0x2d
 8002a1e:	f7fe fe5b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a22:	2000      	movs	r0, #0
 8002a24:	f7fe fe58 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 8002a28:	203d      	movs	r0, #61	; 0x3d
 8002a2a:	f7fe fe55 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7fe fe52 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002a34:	205d      	movs	r0, #93	; 0x5d
 8002a36:	f7fe fe4f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7fe fe4c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002a40:	205d      	movs	r0, #93	; 0x5d
 8002a42:	f7fe fe49 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a46:	2000      	movs	r0, #0
 8002a48:	f7fe fe46 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 8002a4c:	20b1      	movs	r0, #177	; 0xb1
 8002a4e:	f7fe fe2f 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 8002a52:	2080      	movs	r0, #128	; 0x80
 8002a54:	f7fe fe40 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7fe fe3d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8002a5e:	208b      	movs	r0, #139	; 0x8b
 8002a60:	f7fe fe3a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fe fe37 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8002a6a:	2096      	movs	r0, #150	; 0x96
 8002a6c:	f7fe fe34 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f7fe fe31 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 8002a76:	20b2      	movs	r0, #178	; 0xb2
 8002a78:	f7fe fe1a 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7fe fe2b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7fe fe28 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002a88:	2002      	movs	r0, #2
 8002a8a:	f7fe fe25 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7fe fe22 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8002a94:	2003      	movs	r0, #3
 8002a96:	f7fe fe1f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7fe fe1c 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 8002aa0:	20b3      	movs	r0, #179	; 0xb3
 8002aa2:	f7fe fe05 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7fe fe16 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7fe fe13 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7fe fe10 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ab8:	2000      	movs	r0, #0
 8002aba:	f7fe fe0d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7fe fe0a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	f7fe fe07 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fe fe04 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f7fe fe01 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7fe fdfe 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002adc:	2000      	movs	r0, #0
 8002ade:	f7fe fdfb 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f7fe fdf8 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7fe fdf5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aee:	2000      	movs	r0, #0
 8002af0:	f7fe fdf2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7fe fdef 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7fe fdec 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7fe fde9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7fe fde6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7fe fde3 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7fe fde0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7fe fddd 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f7fe fdda 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b24:	2000      	movs	r0, #0
 8002b26:	f7fe fdd7 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7fe fdd4 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b30:	2000      	movs	r0, #0
 8002b32:	f7fe fdd1 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 8002b36:	20b4      	movs	r0, #180	; 0xb4
 8002b38:	f7fe fdba 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 8002b3c:	208b      	movs	r0, #139	; 0x8b
 8002b3e:	f7fe fdcb 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7fe fdc8 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8002b48:	2096      	movs	r0, #150	; 0x96
 8002b4a:	f7fe fdc5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7fe fdc2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 8002b54:	20a1      	movs	r0, #161	; 0xa1
 8002b56:	f7fe fdbf 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f7fe fdbc 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 8002b60:	20b5      	movs	r0, #181	; 0xb5
 8002b62:	f7fe fda5 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 8002b66:	2002      	movs	r0, #2
 8002b68:	f7fe fdb6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7fe fdb3 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8002b72:	2003      	movs	r0, #3
 8002b74:	f7fe fdb0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7fe fdad 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8002b7e:	2004      	movs	r0, #4
 8002b80:	f7fe fdaa 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7fe fda7 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 8002b8a:	20b6      	movs	r0, #182	; 0xb6
 8002b8c:	f7fe fd90 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7fe fda1 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7fe fd9e 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 8002b9c:	20b7      	movs	r0, #183	; 0xb7
 8002b9e:	f7fe fd87 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f7fe fd98 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7fe fd95 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8002bae:	203f      	movs	r0, #63	; 0x3f
 8002bb0:	f7fe fd92 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fe fd8f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 8002bba:	205e      	movs	r0, #94	; 0x5e
 8002bbc:	f7fe fd8c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7fe fd89 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002bc6:	2064      	movs	r0, #100	; 0x64
 8002bc8:	f7fe fd86 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bcc:	2000      	movs	r0, #0
 8002bce:	f7fe fd83 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 8002bd2:	208c      	movs	r0, #140	; 0x8c
 8002bd4:	f7fe fd80 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7fe fd7d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 8002bde:	20ac      	movs	r0, #172	; 0xac
 8002be0:	f7fe fd7a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fe fd77 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002bea:	20dc      	movs	r0, #220	; 0xdc
 8002bec:	f7fe fd74 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f7fe fd71 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 8002bf6:	2070      	movs	r0, #112	; 0x70
 8002bf8:	f7fe fd6e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f7fe fd6b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 8002c02:	2090      	movs	r0, #144	; 0x90
 8002c04:	f7fe fd68 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7fe fd65 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 8002c0e:	20eb      	movs	r0, #235	; 0xeb
 8002c10:	f7fe fd62 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fe fd5f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002c1a:	20dc      	movs	r0, #220	; 0xdc
 8002c1c:	f7fe fd5c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c20:	2000      	movs	r0, #0
 8002c22:	f7fe fd59 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 8002c26:	20b8      	movs	r0, #184	; 0xb8
 8002c28:	f7fe fd42 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7fe fd53 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7fe fd50 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f7fe fd4d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f7fe fd4a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c44:	2000      	movs	r0, #0
 8002c46:	f7fe fd47 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f7fe fd44 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c50:	2000      	movs	r0, #0
 8002c52:	f7fe fd41 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c56:	2000      	movs	r0, #0
 8002c58:	f7fe fd3e 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 8002c5c:	20ba      	movs	r0, #186	; 0xba
 8002c5e:	f7fe fd27 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 8002c62:	2024      	movs	r0, #36	; 0x24
 8002c64:	f7fe fd38 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f7fe fd35 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f7fe fd32 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fe fd2f 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 8002c7a:	20c1      	movs	r0, #193	; 0xc1
 8002c7c:	f7fe fd18 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8002c80:	2020      	movs	r0, #32
 8002c82:	f7fe fd29 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f7fe fd26 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8002c8c:	2054      	movs	r0, #84	; 0x54
 8002c8e:	f7fe fd23 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f7fe fd20 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8002c98:	20ff      	movs	r0, #255	; 0xff
 8002c9a:	f7fe fd1d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c9e:	2000      	movs	r0, #0
 8002ca0:	f7fe fd1a 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 8002ca4:	20c2      	movs	r0, #194	; 0xc2
 8002ca6:	f7fe fd03 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8002caa:	200a      	movs	r0, #10
 8002cac:	f7fe fd14 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f7fe fd11 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8002cb6:	2004      	movs	r0, #4
 8002cb8:	f7fe fd0e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f7fe fd0b 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 8002cc2:	20c3      	movs	r0, #195	; 0xc3
 8002cc4:	f7fe fcf4 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 8002cc8:	203c      	movs	r0, #60	; 0x3c
 8002cca:	f7fe fd05 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7fe fd02 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 8002cd4:	203a      	movs	r0, #58	; 0x3a
 8002cd6:	f7fe fcff 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f7fe fcfc 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 8002ce0:	2039      	movs	r0, #57	; 0x39
 8002ce2:	f7fe fcf9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fe fcf6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 8002cec:	2037      	movs	r0, #55	; 0x37
 8002cee:	f7fe fcf3 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7fe fcf0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002cf8:	203c      	movs	r0, #60	; 0x3c
 8002cfa:	f7fe fced 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f7fe fcea 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002d04:	2036      	movs	r0, #54	; 0x36
 8002d06:	f7fe fce7 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	f7fe fce4 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8002d10:	2032      	movs	r0, #50	; 0x32
 8002d12:	f7fe fce1 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7fe fcde 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8002d1c:	202f      	movs	r0, #47	; 0x2f
 8002d1e:	f7fe fcdb 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d22:	2000      	movs	r0, #0
 8002d24:	f7fe fcd8 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002d28:	202c      	movs	r0, #44	; 0x2c
 8002d2a:	f7fe fcd5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d2e:	2000      	movs	r0, #0
 8002d30:	f7fe fcd2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002d34:	2029      	movs	r0, #41	; 0x29
 8002d36:	f7fe fccf 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f7fe fccc 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8002d40:	2026      	movs	r0, #38	; 0x26
 8002d42:	f7fe fcc9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d46:	2000      	movs	r0, #0
 8002d48:	f7fe fcc6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002d4c:	2024      	movs	r0, #36	; 0x24
 8002d4e:	f7fe fcc3 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7fe fcc0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002d58:	2024      	movs	r0, #36	; 0x24
 8002d5a:	f7fe fcbd 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7fe fcba 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002d64:	2023      	movs	r0, #35	; 0x23
 8002d66:	f7fe fcb7 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d6a:	2000      	movs	r0, #0
 8002d6c:	f7fe fcb4 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002d70:	203c      	movs	r0, #60	; 0x3c
 8002d72:	f7fe fcb1 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d76:	2000      	movs	r0, #0
 8002d78:	f7fe fcae 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002d7c:	2036      	movs	r0, #54	; 0x36
 8002d7e:	f7fe fcab 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d82:	2000      	movs	r0, #0
 8002d84:	f7fe fca8 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8002d88:	2032      	movs	r0, #50	; 0x32
 8002d8a:	f7fe fca5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d8e:	2000      	movs	r0, #0
 8002d90:	f7fe fca2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8002d94:	202f      	movs	r0, #47	; 0x2f
 8002d96:	f7fe fc9f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f7fe fc9c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002da0:	202c      	movs	r0, #44	; 0x2c
 8002da2:	f7fe fc99 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002da6:	2000      	movs	r0, #0
 8002da8:	f7fe fc96 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002dac:	2029      	movs	r0, #41	; 0x29
 8002dae:	f7fe fc93 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002db2:	2000      	movs	r0, #0
 8002db4:	f7fe fc90 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8002db8:	2026      	movs	r0, #38	; 0x26
 8002dba:	f7fe fc8d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f7fe fc8a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002dc4:	2024      	movs	r0, #36	; 0x24
 8002dc6:	f7fe fc87 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f7fe fc84 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002dd0:	2024      	movs	r0, #36	; 0x24
 8002dd2:	f7fe fc81 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f7fe fc7e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002ddc:	2023      	movs	r0, #35	; 0x23
 8002dde:	f7fe fc7b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002de2:	2000      	movs	r0, #0
 8002de4:	f7fe fc78 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 8002de8:	20c4      	movs	r0, #196	; 0xc4
 8002dea:	f7fe fc61 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 8002dee:	2062      	movs	r0, #98	; 0x62
 8002df0:	f7fe fc72 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7fe fc6f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8002dfa:	2005      	movs	r0, #5
 8002dfc:	f7fe fc6c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7fe fc69 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002e06:	2084      	movs	r0, #132	; 0x84
 8002e08:	f7fe fc66 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f7fe fc63 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 8002e12:	20f0      	movs	r0, #240	; 0xf0
 8002e14:	f7fe fc60 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7fe fc5d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8002e1e:	2018      	movs	r0, #24
 8002e20:	f7fe fc5a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e24:	2000      	movs	r0, #0
 8002e26:	f7fe fc57 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 8002e2a:	20a4      	movs	r0, #164	; 0xa4
 8002e2c:	f7fe fc54 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e30:	2000      	movs	r0, #0
 8002e32:	f7fe fc51 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8002e36:	2018      	movs	r0, #24
 8002e38:	f7fe fc4e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f7fe fc4b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002e42:	2050      	movs	r0, #80	; 0x50
 8002e44:	f7fe fc48 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f7fe fc45 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 8002e4e:	200c      	movs	r0, #12
 8002e50:	f7fe fc42 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7fe fc3f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8002e5a:	2017      	movs	r0, #23
 8002e5c:	f7fe fc3c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e60:	2000      	movs	r0, #0
 8002e62:	f7fe fc39 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 8002e66:	2095      	movs	r0, #149	; 0x95
 8002e68:	f7fe fc36 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f7fe fc33 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002e72:	20f3      	movs	r0, #243	; 0xf3
 8002e74:	f7fe fc30 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7fe fc2d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 8002e7e:	20e6      	movs	r0, #230	; 0xe6
 8002e80:	f7fe fc2a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fe fc27 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 8002e8a:	20c5      	movs	r0, #197	; 0xc5
 8002e8c:	f7fe fc10 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8002e90:	2032      	movs	r0, #50	; 0x32
 8002e92:	f7fe fc21 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e96:	2000      	movs	r0, #0
 8002e98:	f7fe fc1e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002e9c:	2044      	movs	r0, #68	; 0x44
 8002e9e:	f7fe fc1b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	f7fe fc18 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 8002ea8:	2065      	movs	r0, #101	; 0x65
 8002eaa:	f7fe fc15 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eae:	2000      	movs	r0, #0
 8002eb0:	f7fe fc12 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002eb4:	2076      	movs	r0, #118	; 0x76
 8002eb6:	f7fe fc0f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fe fc0c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002ec0:	2088      	movs	r0, #136	; 0x88
 8002ec2:	f7fe fc09 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f7fe fc06 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8002ecc:	20c6      	movs	r0, #198	; 0xc6
 8002ece:	f7fe fbef 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8002ed2:	2020      	movs	r0, #32
 8002ed4:	f7fe fc00 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ed8:	2000      	movs	r0, #0
 8002eda:	f7fe fbfd 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8002ede:	2017      	movs	r0, #23
 8002ee0:	f7fe fbfa 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f7fe fbf7 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002eea:	2001      	movs	r0, #1
 8002eec:	f7fe fbf4 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ef0:	2000      	movs	r0, #0
 8002ef2:	f7fe fbf1 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 8002ef6:	20c7      	movs	r0, #199	; 0xc7
 8002ef8:	f7fe fbda 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002efc:	2000      	movs	r0, #0
 8002efe:	f7fe fbeb 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f02:	2000      	movs	r0, #0
 8002f04:	f7fe fbe8 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f7fe fbe5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f7fe fbe2 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8002f14:	20c8      	movs	r0, #200	; 0xc8
 8002f16:	f7fe fbcb 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f7fe fbdc 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f20:	2000      	movs	r0, #0
 8002f22:	f7fe fbd9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f26:	2000      	movs	r0, #0
 8002f28:	f7fe fbd6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f7fe fbd3 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 8002f32:	20c9      	movs	r0, #201	; 0xc9
 8002f34:	f7fe fbbc 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002f38:	2000      	movs	r0, #0
 8002f3a:	f7fe fbcd 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f7fe fbca 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f44:	2000      	movs	r0, #0
 8002f46:	f7fe fbc7 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f7fe fbc4 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f50:	2000      	movs	r0, #0
 8002f52:	f7fe fbc1 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f56:	2000      	movs	r0, #0
 8002f58:	f7fe fbbe 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7fe fbbb 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f62:	2000      	movs	r0, #0
 8002f64:	f7fe fbb8 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f68:	2000      	movs	r0, #0
 8002f6a:	f7fe fbb5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f7fe fbb2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7fe fbaf 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f7fe fbac 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f80:	2000      	movs	r0, #0
 8002f82:	f7fe fba9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f86:	2000      	movs	r0, #0
 8002f88:	f7fe fba6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f7fe fba3 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f92:	2000      	movs	r0, #0
 8002f94:	f7fe fba0 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 8002f98:	20e0      	movs	r0, #224	; 0xe0
 8002f9a:	f7fe fb89 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8002f9e:	2016      	movs	r0, #22
 8002fa0:	f7fe fb9a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7fe fb97 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8002faa:	201c      	movs	r0, #28
 8002fac:	f7fe fb94 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f7fe fb91 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8002fb6:	2021      	movs	r0, #33	; 0x21
 8002fb8:	f7fe fb8e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7fe fb8b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002fc2:	2036      	movs	r0, #54	; 0x36
 8002fc4:	f7fe fb88 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f7fe fb85 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 8002fce:	2046      	movs	r0, #70	; 0x46
 8002fd0:	f7fe fb82 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7fe fb7f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 8002fda:	2052      	movs	r0, #82	; 0x52
 8002fdc:	f7fe fb7c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7fe fb79 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002fe6:	2064      	movs	r0, #100	; 0x64
 8002fe8:	f7fe fb76 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fec:	2000      	movs	r0, #0
 8002fee:	f7fe fb73 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8002ff2:	207a      	movs	r0, #122	; 0x7a
 8002ff4:	f7fe fb70 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f7fe fb6d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8002ffe:	208b      	movs	r0, #139	; 0x8b
 8003000:	f7fe fb6a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003004:	2000      	movs	r0, #0
 8003006:	f7fe fb67 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800300a:	2099      	movs	r0, #153	; 0x99
 800300c:	f7fe fb64 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003010:	2000      	movs	r0, #0
 8003012:	f7fe fb61 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8003016:	20a8      	movs	r0, #168	; 0xa8
 8003018:	f7fe fb5e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800301c:	2000      	movs	r0, #0
 800301e:	f7fe fb5b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8003022:	20b9      	movs	r0, #185	; 0xb9
 8003024:	f7fe fb58 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003028:	2000      	movs	r0, #0
 800302a:	f7fe fb55 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800302e:	20c4      	movs	r0, #196	; 0xc4
 8003030:	f7fe fb52 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003034:	2000      	movs	r0, #0
 8003036:	f7fe fb4f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 800303a:	20ca      	movs	r0, #202	; 0xca
 800303c:	f7fe fb4c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003040:	2000      	movs	r0, #0
 8003042:	f7fe fb49 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8003046:	20d2      	movs	r0, #210	; 0xd2
 8003048:	f7fe fb46 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800304c:	2000      	movs	r0, #0
 800304e:	f7fe fb43 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 8003052:	20d9      	movs	r0, #217	; 0xd9
 8003054:	f7fe fb40 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003058:	2000      	movs	r0, #0
 800305a:	f7fe fb3d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 800305e:	20e0      	movs	r0, #224	; 0xe0
 8003060:	f7fe fb3a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003064:	2000      	movs	r0, #0
 8003066:	f7fe fb37 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800306a:	20f3      	movs	r0, #243	; 0xf3
 800306c:	f7fe fb34 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003070:	2000      	movs	r0, #0
 8003072:	f7fe fb31 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 8003076:	20e1      	movs	r0, #225	; 0xe1
 8003078:	f7fe fb1a 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 800307c:	2016      	movs	r0, #22
 800307e:	f7fe fb2b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003082:	2000      	movs	r0, #0
 8003084:	f7fe fb28 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8003088:	201c      	movs	r0, #28
 800308a:	f7fe fb25 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800308e:	2000      	movs	r0, #0
 8003090:	f7fe fb22 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 8003094:	2022      	movs	r0, #34	; 0x22
 8003096:	f7fe fb1f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800309a:	2000      	movs	r0, #0
 800309c:	f7fe fb1c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80030a0:	2036      	movs	r0, #54	; 0x36
 80030a2:	f7fe fb19 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030a6:	2000      	movs	r0, #0
 80030a8:	f7fe fb16 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80030ac:	2045      	movs	r0, #69	; 0x45
 80030ae:	f7fe fb13 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030b2:	2000      	movs	r0, #0
 80030b4:	f7fe fb10 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80030b8:	2052      	movs	r0, #82	; 0x52
 80030ba:	f7fe fb0d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030be:	2000      	movs	r0, #0
 80030c0:	f7fe fb0a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80030c4:	2064      	movs	r0, #100	; 0x64
 80030c6:	f7fe fb07 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030ca:	2000      	movs	r0, #0
 80030cc:	f7fe fb04 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 80030d0:	207a      	movs	r0, #122	; 0x7a
 80030d2:	f7fe fb01 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030d6:	2000      	movs	r0, #0
 80030d8:	f7fe fafe 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 80030dc:	208b      	movs	r0, #139	; 0x8b
 80030de:	f7fe fafb 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030e2:	2000      	movs	r0, #0
 80030e4:	f7fe faf8 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80030e8:	2099      	movs	r0, #153	; 0x99
 80030ea:	f7fe faf5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7fe faf2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 80030f4:	20a8      	movs	r0, #168	; 0xa8
 80030f6:	f7fe faef 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030fa:	2000      	movs	r0, #0
 80030fc:	f7fe faec 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8003100:	20b9      	movs	r0, #185	; 0xb9
 8003102:	f7fe fae9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003106:	2000      	movs	r0, #0
 8003108:	f7fe fae6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800310c:	20c4      	movs	r0, #196	; 0xc4
 800310e:	f7fe fae3 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003112:	2000      	movs	r0, #0
 8003114:	f7fe fae0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8003118:	20ca      	movs	r0, #202	; 0xca
 800311a:	f7fe fadd 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800311e:	2000      	movs	r0, #0
 8003120:	f7fe fada 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8003124:	20d2      	movs	r0, #210	; 0xd2
 8003126:	f7fe fad7 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800312a:	2000      	movs	r0, #0
 800312c:	f7fe fad4 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 8003130:	20d8      	movs	r0, #216	; 0xd8
 8003132:	f7fe fad1 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003136:	2000      	movs	r0, #0
 8003138:	f7fe face 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 800313c:	20e0      	movs	r0, #224	; 0xe0
 800313e:	f7fe facb 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003142:	2000      	movs	r0, #0
 8003144:	f7fe fac8 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8003148:	20f3      	movs	r0, #243	; 0xf3
 800314a:	f7fe fac5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800314e:	2000      	movs	r0, #0
 8003150:	f7fe fac2 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 8003154:	20e2      	movs	r0, #226	; 0xe2
 8003156:	f7fe faab 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 800315a:	2005      	movs	r0, #5
 800315c:	f7fe fabc 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003160:	2000      	movs	r0, #0
 8003162:	f7fe fab9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 8003166:	200b      	movs	r0, #11
 8003168:	f7fe fab6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800316c:	2000      	movs	r0, #0
 800316e:	f7fe fab3 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 8003172:	201b      	movs	r0, #27
 8003174:	f7fe fab0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003178:	2000      	movs	r0, #0
 800317a:	f7fe faad 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 800317e:	2034      	movs	r0, #52	; 0x34
 8003180:	f7fe faaa 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003184:	2000      	movs	r0, #0
 8003186:	f7fe faa7 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800318a:	2044      	movs	r0, #68	; 0x44
 800318c:	f7fe faa4 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003190:	2000      	movs	r0, #0
 8003192:	f7fe faa1 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 8003196:	204f      	movs	r0, #79	; 0x4f
 8003198:	f7fe fa9e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800319c:	2000      	movs	r0, #0
 800319e:	f7fe fa9b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 80031a2:	2061      	movs	r0, #97	; 0x61
 80031a4:	f7fe fa98 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031a8:	2000      	movs	r0, #0
 80031aa:	f7fe fa95 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 80031ae:	2079      	movs	r0, #121	; 0x79
 80031b0:	f7fe fa92 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031b4:	2000      	movs	r0, #0
 80031b6:	f7fe fa8f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80031ba:	2088      	movs	r0, #136	; 0x88
 80031bc:	f7fe fa8c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031c0:	2000      	movs	r0, #0
 80031c2:	f7fe fa89 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80031c6:	2097      	movs	r0, #151	; 0x97
 80031c8:	f7fe fa86 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031cc:	2000      	movs	r0, #0
 80031ce:	f7fe fa83 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80031d2:	20a6      	movs	r0, #166	; 0xa6
 80031d4:	f7fe fa80 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031d8:	2000      	movs	r0, #0
 80031da:	f7fe fa7d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80031de:	20b7      	movs	r0, #183	; 0xb7
 80031e0:	f7fe fa7a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031e4:	2000      	movs	r0, #0
 80031e6:	f7fe fa77 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 80031ea:	20c2      	movs	r0, #194	; 0xc2
 80031ec:	f7fe fa74 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031f0:	2000      	movs	r0, #0
 80031f2:	f7fe fa71 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 80031f6:	20c7      	movs	r0, #199	; 0xc7
 80031f8:	f7fe fa6e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031fc:	2000      	movs	r0, #0
 80031fe:	f7fe fa6b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8003202:	20d1      	movs	r0, #209	; 0xd1
 8003204:	f7fe fa68 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003208:	2000      	movs	r0, #0
 800320a:	f7fe fa65 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 800320e:	20d6      	movs	r0, #214	; 0xd6
 8003210:	f7fe fa62 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003214:	2000      	movs	r0, #0
 8003216:	f7fe fa5f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 800321a:	20dd      	movs	r0, #221	; 0xdd
 800321c:	f7fe fa5c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003220:	2000      	movs	r0, #0
 8003222:	f7fe fa59 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8003226:	20f3      	movs	r0, #243	; 0xf3
 8003228:	f7fe fa56 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800322c:	2000      	movs	r0, #0
 800322e:	f7fe fa53 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 8003232:	20e3      	movs	r0, #227	; 0xe3
 8003234:	f7fe fa3c 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8003238:	2005      	movs	r0, #5
 800323a:	f7fe fa4d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800323e:	2000      	movs	r0, #0
 8003240:	f7fe fa4a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 8003244:	200a      	movs	r0, #10
 8003246:	f7fe fa47 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800324a:	2000      	movs	r0, #0
 800324c:	f7fe fa44 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8003250:	201c      	movs	r0, #28
 8003252:	f7fe fa41 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003256:	2000      	movs	r0, #0
 8003258:	f7fe fa3e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 800325c:	2033      	movs	r0, #51	; 0x33
 800325e:	f7fe fa3b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003262:	2000      	movs	r0, #0
 8003264:	f7fe fa38 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003268:	2044      	movs	r0, #68	; 0x44
 800326a:	f7fe fa35 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800326e:	2000      	movs	r0, #0
 8003270:	f7fe fa32 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8003274:	2050      	movs	r0, #80	; 0x50
 8003276:	f7fe fa2f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800327a:	2000      	movs	r0, #0
 800327c:	f7fe fa2c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 8003280:	2062      	movs	r0, #98	; 0x62
 8003282:	f7fe fa29 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003286:	2000      	movs	r0, #0
 8003288:	f7fe fa26 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 800328c:	2078      	movs	r0, #120	; 0x78
 800328e:	f7fe fa23 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003292:	2000      	movs	r0, #0
 8003294:	f7fe fa20 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8003298:	2088      	movs	r0, #136	; 0x88
 800329a:	f7fe fa1d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800329e:	2000      	movs	r0, #0
 80032a0:	f7fe fa1a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80032a4:	2097      	movs	r0, #151	; 0x97
 80032a6:	f7fe fa17 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032aa:	2000      	movs	r0, #0
 80032ac:	f7fe fa14 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80032b0:	20a6      	movs	r0, #166	; 0xa6
 80032b2:	f7fe fa11 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032b6:	2000      	movs	r0, #0
 80032b8:	f7fe fa0e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80032bc:	20b7      	movs	r0, #183	; 0xb7
 80032be:	f7fe fa0b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032c2:	2000      	movs	r0, #0
 80032c4:	f7fe fa08 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 80032c8:	20c2      	movs	r0, #194	; 0xc2
 80032ca:	f7fe fa05 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032ce:	2000      	movs	r0, #0
 80032d0:	f7fe fa02 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 80032d4:	20c7      	movs	r0, #199	; 0xc7
 80032d6:	f7fe f9ff 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032da:	2000      	movs	r0, #0
 80032dc:	f7fe f9fc 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 80032e0:	20d1      	movs	r0, #209	; 0xd1
 80032e2:	f7fe f9f9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032e6:	2000      	movs	r0, #0
 80032e8:	f7fe f9f6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 80032ec:	20d5      	movs	r0, #213	; 0xd5
 80032ee:	f7fe f9f3 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032f2:	2000      	movs	r0, #0
 80032f4:	f7fe f9f0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 80032f8:	20dd      	movs	r0, #221	; 0xdd
 80032fa:	f7fe f9ed 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032fe:	2000      	movs	r0, #0
 8003300:	f7fe f9ea 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8003304:	20f3      	movs	r0, #243	; 0xf3
 8003306:	f7fe f9e7 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800330a:	2000      	movs	r0, #0
 800330c:	f7fe f9e4 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 8003310:	20e4      	movs	r0, #228	; 0xe4
 8003312:	f7fe f9cd 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8003316:	2001      	movs	r0, #1
 8003318:	f7fe f9de 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800331c:	2000      	movs	r0, #0
 800331e:	f7fe f9db 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8003322:	2001      	movs	r0, #1
 8003324:	f7fe f9d8 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003328:	2000      	movs	r0, #0
 800332a:	f7fe f9d5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800332e:	2002      	movs	r0, #2
 8003330:	f7fe f9d2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003334:	2000      	movs	r0, #0
 8003336:	f7fe f9cf 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 800333a:	202a      	movs	r0, #42	; 0x2a
 800333c:	f7fe f9cc 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003340:	2000      	movs	r0, #0
 8003342:	f7fe f9c9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8003346:	203c      	movs	r0, #60	; 0x3c
 8003348:	f7fe f9c6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800334c:	2000      	movs	r0, #0
 800334e:	f7fe f9c3 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8003352:	204b      	movs	r0, #75	; 0x4b
 8003354:	f7fe f9c0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003358:	2000      	movs	r0, #0
 800335a:	f7fe f9bd 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 800335e:	205d      	movs	r0, #93	; 0x5d
 8003360:	f7fe f9ba 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003364:	2000      	movs	r0, #0
 8003366:	f7fe f9b7 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 800336a:	2074      	movs	r0, #116	; 0x74
 800336c:	f7fe f9b4 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003370:	2000      	movs	r0, #0
 8003372:	f7fe f9b1 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8003376:	2084      	movs	r0, #132	; 0x84
 8003378:	f7fe f9ae 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800337c:	2000      	movs	r0, #0
 800337e:	f7fe f9ab 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8003382:	2093      	movs	r0, #147	; 0x93
 8003384:	f7fe f9a8 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003388:	2000      	movs	r0, #0
 800338a:	f7fe f9a5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 800338e:	20a2      	movs	r0, #162	; 0xa2
 8003390:	f7fe f9a2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003394:	2000      	movs	r0, #0
 8003396:	f7fe f99f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 800339a:	20b3      	movs	r0, #179	; 0xb3
 800339c:	f7fe f99c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033a0:	2000      	movs	r0, #0
 80033a2:	f7fe f999 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 80033a6:	20be      	movs	r0, #190	; 0xbe
 80033a8:	f7fe f996 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033ac:	2000      	movs	r0, #0
 80033ae:	f7fe f993 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 80033b2:	20c4      	movs	r0, #196	; 0xc4
 80033b4:	f7fe f990 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033b8:	2000      	movs	r0, #0
 80033ba:	f7fe f98d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80033be:	20cd      	movs	r0, #205	; 0xcd
 80033c0:	f7fe f98a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7fe f987 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80033ca:	20d3      	movs	r0, #211	; 0xd3
 80033cc:	f7fe f984 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033d0:	2000      	movs	r0, #0
 80033d2:	f7fe f981 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 80033d6:	20dd      	movs	r0, #221	; 0xdd
 80033d8:	f7fe f97e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033dc:	2000      	movs	r0, #0
 80033de:	f7fe f97b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80033e2:	20f3      	movs	r0, #243	; 0xf3
 80033e4:	f7fe f978 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033e8:	2000      	movs	r0, #0
 80033ea:	f7fe f975 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 80033ee:	20e5      	movs	r0, #229	; 0xe5
 80033f0:	f7fe f95e 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80033f4:	2000      	movs	r0, #0
 80033f6:	f7fe f96f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033fa:	2000      	movs	r0, #0
 80033fc:	f7fe f96c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003400:	2000      	movs	r0, #0
 8003402:	f7fe f969 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003406:	2000      	movs	r0, #0
 8003408:	f7fe f966 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800340c:	2002      	movs	r0, #2
 800340e:	f7fe f963 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003412:	2000      	movs	r0, #0
 8003414:	f7fe f960 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8003418:	2029      	movs	r0, #41	; 0x29
 800341a:	f7fe f95d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800341e:	2000      	movs	r0, #0
 8003420:	f7fe f95a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8003424:	203c      	movs	r0, #60	; 0x3c
 8003426:	f7fe f957 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800342a:	2000      	movs	r0, #0
 800342c:	f7fe f954 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8003430:	204b      	movs	r0, #75	; 0x4b
 8003432:	f7fe f951 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003436:	2000      	movs	r0, #0
 8003438:	f7fe f94e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 800343c:	205d      	movs	r0, #93	; 0x5d
 800343e:	f7fe f94b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003442:	2000      	movs	r0, #0
 8003444:	f7fe f948 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8003448:	2074      	movs	r0, #116	; 0x74
 800344a:	f7fe f945 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800344e:	2000      	movs	r0, #0
 8003450:	f7fe f942 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8003454:	2084      	movs	r0, #132	; 0x84
 8003456:	f7fe f93f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800345a:	2000      	movs	r0, #0
 800345c:	f7fe f93c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8003460:	2093      	movs	r0, #147	; 0x93
 8003462:	f7fe f939 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003466:	2000      	movs	r0, #0
 8003468:	f7fe f936 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 800346c:	20a2      	movs	r0, #162	; 0xa2
 800346e:	f7fe f933 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003472:	2000      	movs	r0, #0
 8003474:	f7fe f930 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8003478:	20b3      	movs	r0, #179	; 0xb3
 800347a:	f7fe f92d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800347e:	2000      	movs	r0, #0
 8003480:	f7fe f92a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8003484:	20be      	movs	r0, #190	; 0xbe
 8003486:	f7fe f927 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800348a:	2000      	movs	r0, #0
 800348c:	f7fe f924 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8003490:	20c4      	movs	r0, #196	; 0xc4
 8003492:	f7fe f921 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003496:	2000      	movs	r0, #0
 8003498:	f7fe f91e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 800349c:	20cd      	movs	r0, #205	; 0xcd
 800349e:	f7fe f91b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034a2:	2000      	movs	r0, #0
 80034a4:	f7fe f918 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80034a8:	20d3      	movs	r0, #211	; 0xd3
 80034aa:	f7fe f915 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034ae:	2000      	movs	r0, #0
 80034b0:	f7fe f912 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 80034b4:	20dc      	movs	r0, #220	; 0xdc
 80034b6:	f7fe f90f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034ba:	2000      	movs	r0, #0
 80034bc:	f7fe f90c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80034c0:	20f3      	movs	r0, #243	; 0xf3
 80034c2:	f7fe f909 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034c6:	2000      	movs	r0, #0
 80034c8:	f7fe f906 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 80034cc:	20e6      	movs	r0, #230	; 0xe6
 80034ce:	f7fe f8ef 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 80034d2:	2011      	movs	r0, #17
 80034d4:	f7fe f900 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034d8:	2000      	movs	r0, #0
 80034da:	f7fe f8fd 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 80034de:	2034      	movs	r0, #52	; 0x34
 80034e0:	f7fe f8fa 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034e4:	2000      	movs	r0, #0
 80034e6:	f7fe f8f7 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 80034ea:	2056      	movs	r0, #86	; 0x56
 80034ec:	f7fe f8f4 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034f0:	2000      	movs	r0, #0
 80034f2:	f7fe f8f1 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80034f6:	2076      	movs	r0, #118	; 0x76
 80034f8:	f7fe f8ee 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034fc:	2000      	movs	r0, #0
 80034fe:	f7fe f8eb 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8003502:	2077      	movs	r0, #119	; 0x77
 8003504:	f7fe f8e8 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003508:	2000      	movs	r0, #0
 800350a:	f7fe f8e5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800350e:	2066      	movs	r0, #102	; 0x66
 8003510:	f7fe f8e2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003514:	2000      	movs	r0, #0
 8003516:	f7fe f8df 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 800351a:	2088      	movs	r0, #136	; 0x88
 800351c:	f7fe f8dc 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003520:	2000      	movs	r0, #0
 8003522:	f7fe f8d9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8003526:	2099      	movs	r0, #153	; 0x99
 8003528:	f7fe f8d6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800352c:	2000      	movs	r0, #0
 800352e:	f7fe f8d3 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8003532:	20bb      	movs	r0, #187	; 0xbb
 8003534:	f7fe f8d0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003538:	2000      	movs	r0, #0
 800353a:	f7fe f8cd 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800353e:	2099      	movs	r0, #153	; 0x99
 8003540:	f7fe f8ca 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003544:	2000      	movs	r0, #0
 8003546:	f7fe f8c7 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800354a:	2066      	movs	r0, #102	; 0x66
 800354c:	f7fe f8c4 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003550:	2000      	movs	r0, #0
 8003552:	f7fe f8c1 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8003556:	2055      	movs	r0, #85	; 0x55
 8003558:	f7fe f8be 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800355c:	2000      	movs	r0, #0
 800355e:	f7fe f8bb 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8003562:	2055      	movs	r0, #85	; 0x55
 8003564:	f7fe f8b8 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003568:	2000      	movs	r0, #0
 800356a:	f7fe f8b5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 800356e:	2045      	movs	r0, #69	; 0x45
 8003570:	f7fe f8b2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003574:	2000      	movs	r0, #0
 8003576:	f7fe f8af 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 800357a:	2043      	movs	r0, #67	; 0x43
 800357c:	f7fe f8ac 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003580:	2000      	movs	r0, #0
 8003582:	f7fe f8a9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003586:	2044      	movs	r0, #68	; 0x44
 8003588:	f7fe f8a6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800358c:	2000      	movs	r0, #0
 800358e:	f7fe f8a3 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 8003592:	20e7      	movs	r0, #231	; 0xe7
 8003594:	f7fe f88c 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8003598:	2032      	movs	r0, #50	; 0x32
 800359a:	f7fe f89d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800359e:	2000      	movs	r0, #0
 80035a0:	f7fe f89a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80035a4:	2055      	movs	r0, #85	; 0x55
 80035a6:	f7fe f897 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035aa:	2000      	movs	r0, #0
 80035ac:	f7fe f894 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80035b0:	2076      	movs	r0, #118	; 0x76
 80035b2:	f7fe f891 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035b6:	2000      	movs	r0, #0
 80035b8:	f7fe f88e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80035bc:	2066      	movs	r0, #102	; 0x66
 80035be:	f7fe f88b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035c2:	2000      	movs	r0, #0
 80035c4:	f7fe f888 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 80035c8:	2067      	movs	r0, #103	; 0x67
 80035ca:	f7fe f885 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035ce:	2000      	movs	r0, #0
 80035d0:	f7fe f882 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 80035d4:	2067      	movs	r0, #103	; 0x67
 80035d6:	f7fe f87f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035da:	2000      	movs	r0, #0
 80035dc:	f7fe f87c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 80035e0:	2087      	movs	r0, #135	; 0x87
 80035e2:	f7fe f879 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035e6:	2000      	movs	r0, #0
 80035e8:	f7fe f876 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80035ec:	2099      	movs	r0, #153	; 0x99
 80035ee:	f7fe f873 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035f2:	2000      	movs	r0, #0
 80035f4:	f7fe f870 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 80035f8:	20bb      	movs	r0, #187	; 0xbb
 80035fa:	f7fe f86d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035fe:	2000      	movs	r0, #0
 8003600:	f7fe f86a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8003604:	2099      	movs	r0, #153	; 0x99
 8003606:	f7fe f867 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800360a:	2000      	movs	r0, #0
 800360c:	f7fe f864 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8003610:	2077      	movs	r0, #119	; 0x77
 8003612:	f7fe f861 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003616:	2000      	movs	r0, #0
 8003618:	f7fe f85e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800361c:	2044      	movs	r0, #68	; 0x44
 800361e:	f7fe f85b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003622:	2000      	movs	r0, #0
 8003624:	f7fe f858 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8003628:	2056      	movs	r0, #86	; 0x56
 800362a:	f7fe f855 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800362e:	2000      	movs	r0, #0
 8003630:	f7fe f852 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8003634:	2023      	movs	r0, #35	; 0x23
 8003636:	f7fe f84f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800363a:	2000      	movs	r0, #0
 800363c:	f7fe f84c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8003640:	2033      	movs	r0, #51	; 0x33
 8003642:	f7fe f849 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003646:	2000      	movs	r0, #0
 8003648:	f7fe f846 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 800364c:	2045      	movs	r0, #69	; 0x45
 800364e:	f7fe f843 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003652:	2000      	movs	r0, #0
 8003654:	f7fe f840 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 8003658:	20e8      	movs	r0, #232	; 0xe8
 800365a:	f7fe f829 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800365e:	2000      	movs	r0, #0
 8003660:	f7fe f83a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003664:	2000      	movs	r0, #0
 8003666:	f7fe f837 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800366a:	2099      	movs	r0, #153	; 0x99
 800366c:	f7fe f834 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003670:	2000      	movs	r0, #0
 8003672:	f7fe f831 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8003676:	2087      	movs	r0, #135	; 0x87
 8003678:	f7fe f82e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800367c:	2000      	movs	r0, #0
 800367e:	f7fe f82b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8003682:	2088      	movs	r0, #136	; 0x88
 8003684:	f7fe f828 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003688:	2000      	movs	r0, #0
 800368a:	f7fe f825 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 800368e:	2077      	movs	r0, #119	; 0x77
 8003690:	f7fe f822 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003694:	2000      	movs	r0, #0
 8003696:	f7fe f81f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800369a:	2066      	movs	r0, #102	; 0x66
 800369c:	f7fe f81c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036a0:	2000      	movs	r0, #0
 80036a2:	f7fe f819 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80036a6:	2088      	movs	r0, #136	; 0x88
 80036a8:	f7fe f816 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036ac:	2000      	movs	r0, #0
 80036ae:	f7fe f813 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 80036b2:	20aa      	movs	r0, #170	; 0xaa
 80036b4:	f7fe f810 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036b8:	2000      	movs	r0, #0
 80036ba:	f7fe f80d 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 80036be:	20bb      	movs	r0, #187	; 0xbb
 80036c0:	f7fe f80a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036c4:	2000      	movs	r0, #0
 80036c6:	f7fe f807 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80036ca:	2099      	movs	r0, #153	; 0x99
 80036cc:	f7fe f804 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036d0:	2000      	movs	r0, #0
 80036d2:	f7fe f801 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80036d6:	2066      	movs	r0, #102	; 0x66
 80036d8:	f7fd fffe 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036dc:	2000      	movs	r0, #0
 80036de:	f7fd fffb 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80036e2:	2055      	movs	r0, #85	; 0x55
 80036e4:	f7fd fff8 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036e8:	2000      	movs	r0, #0
 80036ea:	f7fd fff5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80036ee:	2055      	movs	r0, #85	; 0x55
 80036f0:	f7fd fff2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80036f4:	2000      	movs	r0, #0
 80036f6:	f7fd ffef 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80036fa:	2044      	movs	r0, #68	; 0x44
 80036fc:	f7fd ffec 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003700:	2000      	movs	r0, #0
 8003702:	f7fd ffe9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003706:	2044      	movs	r0, #68	; 0x44
 8003708:	f7fd ffe6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800370c:	2000      	movs	r0, #0
 800370e:	f7fd ffe3 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8003712:	2055      	movs	r0, #85	; 0x55
 8003714:	f7fd ffe0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003718:	2000      	movs	r0, #0
 800371a:	f7fd ffdd 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 800371e:	20e9      	movs	r0, #233	; 0xe9
 8003720:	f7fd ffc6 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8003724:	20aa      	movs	r0, #170	; 0xaa
 8003726:	f7fd ffd7 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800372a:	2000      	movs	r0, #0
 800372c:	f7fd ffd4 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003730:	2000      	movs	r0, #0
 8003732:	f7fd ffd1 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003736:	2000      	movs	r0, #0
 8003738:	f7fd ffce 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 800373c:	2000      	movs	r0, #0
 800373e:	f7fd ffb7 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8003742:	20aa      	movs	r0, #170	; 0xaa
 8003744:	f7fd ffc8 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 8003748:	20cf      	movs	r0, #207	; 0xcf
 800374a:	f7fd ffb1 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800374e:	2000      	movs	r0, #0
 8003750:	f7fd ffc2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003754:	2000      	movs	r0, #0
 8003756:	f7fd ffbf 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800375a:	2000      	movs	r0, #0
 800375c:	f7fd ffbc 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003760:	2000      	movs	r0, #0
 8003762:	f7fd ffb9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003766:	2000      	movs	r0, #0
 8003768:	f7fd ffb6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800376c:	2000      	movs	r0, #0
 800376e:	f7fd ffb3 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003772:	2000      	movs	r0, #0
 8003774:	f7fd ffb0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003778:	2000      	movs	r0, #0
 800377a:	f7fd ffad 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800377e:	2000      	movs	r0, #0
 8003780:	f7fd ffaa 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003784:	2000      	movs	r0, #0
 8003786:	f7fd ffa7 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800378a:	2000      	movs	r0, #0
 800378c:	f7fd ffa4 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003790:	2000      	movs	r0, #0
 8003792:	f7fd ffa1 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003796:	2000      	movs	r0, #0
 8003798:	f7fd ff9e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800379c:	2000      	movs	r0, #0
 800379e:	f7fd ff9b 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037a2:	2000      	movs	r0, #0
 80037a4:	f7fd ff98 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037a8:	2000      	movs	r0, #0
 80037aa:	f7fd ff95 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037ae:	2000      	movs	r0, #0
 80037b0:	f7fd ff92 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 80037b4:	20f0      	movs	r0, #240	; 0xf0
 80037b6:	f7fd ff7b 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80037ba:	2000      	movs	r0, #0
 80037bc:	f7fd ff8c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 80037c0:	2050      	movs	r0, #80	; 0x50
 80037c2:	f7fd ff89 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037c6:	2000      	movs	r0, #0
 80037c8:	f7fd ff86 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037cc:	2000      	movs	r0, #0
 80037ce:	f7fd ff83 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037d2:	2000      	movs	r0, #0
 80037d4:	f7fd ff80 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 80037d8:	20f3      	movs	r0, #243	; 0xf3
 80037da:	f7fd ff69 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80037de:	2000      	movs	r0, #0
 80037e0:	f7fd ff7a 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 80037e4:	20f9      	movs	r0, #249	; 0xf9
 80037e6:	f7fd ff63 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 80037ea:	2006      	movs	r0, #6
 80037ec:	f7fd ff74 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 80037f0:	2010      	movs	r0, #16
 80037f2:	f7fd ff71 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 80037f6:	2029      	movs	r0, #41	; 0x29
 80037f8:	f7fd ff6e 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037fc:	2000      	movs	r0, #0
 80037fe:	f7fd ff6b 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 8003802:	203a      	movs	r0, #58	; 0x3a
 8003804:	f7fd ff54 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8003808:	2055      	movs	r0, #85	; 0x55
 800380a:	f7fd ff65 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 800380e:	2011      	movs	r0, #17
 8003810:	f7fd ff4e 	bl	80016b0 <LCD_WR_REG>
		HAL_Delay(100);
 8003814:	2064      	movs	r0, #100	; 0x64
 8003816:	f004 fc0d 	bl	8008034 <HAL_Delay>
		LCD_WR_REG(0x29);
 800381a:	2029      	movs	r0, #41	; 0x29
 800381c:	f7fd ff48 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003820:	2035      	movs	r0, #53	; 0x35
 8003822:	f7fd ff45 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003826:	2000      	movs	r0, #0
 8003828:	f7fd ff56 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 800382c:	2051      	movs	r0, #81	; 0x51
 800382e:	f7fd ff3f 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 8003832:	20ff      	movs	r0, #255	; 0xff
 8003834:	f7fd ff50 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8003838:	2053      	movs	r0, #83	; 0x53
 800383a:	f7fd ff39 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 800383e:	202c      	movs	r0, #44	; 0x2c
 8003840:	f7fd ff4a 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 8003844:	2055      	movs	r0, #85	; 0x55
 8003846:	f7fd ff33 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 800384a:	2082      	movs	r0, #130	; 0x82
 800384c:	f7fd ff44 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8003850:	202c      	movs	r0, #44	; 0x2c
 8003852:	f7fd ff2d 	bl	80016b0 <LCD_WR_REG>
 8003856:	f002 b8e8 	b.w	8005a2a <LCD_Init+0x3752>
	}else if(lcddev.id==0x5510)
 800385a:	4b04      	ldr	r3, [pc, #16]	; (800386c <LCD_Init+0x1594>)
 800385c:	889b      	ldrh	r3, [r3, #4]
 800385e:	f245 5210 	movw	r2, #21776	; 0x5510
 8003862:	4293      	cmp	r3, r2
 8003864:	f040 8782 	bne.w	800476c <LCD_Init+0x2494>
 8003868:	e002      	b.n	8003870 <LCD_Init+0x1598>
 800386a:	bf00      	nop
 800386c:	200001ec 	.word	0x200001ec
	{
		LCD_WriteReg(0xF000,0x55);
 8003870:	2155      	movs	r1, #85	; 0x55
 8003872:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003876:	f7fd ff55 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 800387a:	21aa      	movs	r1, #170	; 0xaa
 800387c:	f24f 0001 	movw	r0, #61441	; 0xf001
 8003880:	f7fd ff50 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8003884:	2152      	movs	r1, #82	; 0x52
 8003886:	f24f 0002 	movw	r0, #61442	; 0xf002
 800388a:	f7fd ff4b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 800388e:	2108      	movs	r1, #8
 8003890:	f24f 0003 	movw	r0, #61443	; 0xf003
 8003894:	f7fd ff46 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 8003898:	2101      	movs	r1, #1
 800389a:	f24f 0004 	movw	r0, #61444	; 0xf004
 800389e:	f7fd ff41 	bl	8001724 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 80038a2:	210d      	movs	r1, #13
 80038a4:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80038a8:	f7fd ff3c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 80038ac:	210d      	movs	r1, #13
 80038ae:	f24b 0001 	movw	r0, #45057	; 0xb001
 80038b2:	f7fd ff37 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 80038b6:	210d      	movs	r1, #13
 80038b8:	f24b 0002 	movw	r0, #45058	; 0xb002
 80038bc:	f7fd ff32 	bl	8001724 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 80038c0:	2134      	movs	r1, #52	; 0x34
 80038c2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80038c6:	f7fd ff2d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 80038ca:	2134      	movs	r1, #52	; 0x34
 80038cc:	f24b 6001 	movw	r0, #46593	; 0xb601
 80038d0:	f7fd ff28 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 80038d4:	2134      	movs	r1, #52	; 0x34
 80038d6:	f24b 6002 	movw	r0, #46594	; 0xb602
 80038da:	f7fd ff23 	bl	8001724 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 80038de:	210d      	movs	r1, #13
 80038e0:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80038e4:	f7fd ff1e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 80038e8:	210d      	movs	r1, #13
 80038ea:	f24b 1001 	movw	r0, #45313	; 0xb101
 80038ee:	f7fd ff19 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 80038f2:	210d      	movs	r1, #13
 80038f4:	f24b 1002 	movw	r0, #45314	; 0xb102
 80038f8:	f7fd ff14 	bl	8001724 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 80038fc:	2134      	movs	r1, #52	; 0x34
 80038fe:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003902:	f7fd ff0f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8003906:	2134      	movs	r1, #52	; 0x34
 8003908:	f24b 7001 	movw	r0, #46849	; 0xb701
 800390c:	f7fd ff0a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 8003910:	2134      	movs	r1, #52	; 0x34
 8003912:	f24b 7002 	movw	r0, #46850	; 0xb702
 8003916:	f7fd ff05 	bl	8001724 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 800391a:	2100      	movs	r1, #0
 800391c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003920:	f7fd ff00 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8003924:	2100      	movs	r1, #0
 8003926:	f24b 2001 	movw	r0, #45569	; 0xb201
 800392a:	f7fd fefb 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 800392e:	2100      	movs	r1, #0
 8003930:	f24b 2002 	movw	r0, #45570	; 0xb202
 8003934:	f7fd fef6 	bl	8001724 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8003938:	2124      	movs	r1, #36	; 0x24
 800393a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800393e:	f7fd fef1 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 8003942:	2124      	movs	r1, #36	; 0x24
 8003944:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003948:	f7fd feec 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 800394c:	2124      	movs	r1, #36	; 0x24
 800394e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003952:	f7fd fee7 	bl	8001724 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 8003956:	2101      	movs	r1, #1
 8003958:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 800395c:	f7fd fee2 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 8003960:	210f      	movs	r1, #15
 8003962:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8003966:	f7fd fedd 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 800396a:	210f      	movs	r1, #15
 800396c:	f24b 3001 	movw	r0, #45825	; 0xb301
 8003970:	f7fd fed8 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 8003974:	210f      	movs	r1, #15
 8003976:	f24b 3002 	movw	r0, #45826	; 0xb302
 800397a:	f7fd fed3 	bl	8001724 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 800397e:	2134      	movs	r1, #52	; 0x34
 8003980:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8003984:	f7fd fece 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 8003988:	2134      	movs	r1, #52	; 0x34
 800398a:	f64b 1001 	movw	r0, #47361	; 0xb901
 800398e:	f7fd fec9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 8003992:	2134      	movs	r1, #52	; 0x34
 8003994:	f64b 1002 	movw	r0, #47362	; 0xb902
 8003998:	f7fd fec4 	bl	8001724 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 800399c:	2108      	movs	r1, #8
 800399e:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80039a2:	f7fd febf 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 80039a6:	2108      	movs	r1, #8
 80039a8:	f24b 5001 	movw	r0, #46337	; 0xb501
 80039ac:	f7fd feba 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 80039b0:	2108      	movs	r1, #8
 80039b2:	f24b 5002 	movw	r0, #46338	; 0xb502
 80039b6:	f7fd feb5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 80039ba:	2103      	movs	r1, #3
 80039bc:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80039c0:	f7fd feb0 	bl	8001724 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 80039c4:	2124      	movs	r1, #36	; 0x24
 80039c6:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80039ca:	f7fd feab 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 80039ce:	2124      	movs	r1, #36	; 0x24
 80039d0:	f64b 2001 	movw	r0, #47617	; 0xba01
 80039d4:	f7fd fea6 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 80039d8:	2124      	movs	r1, #36	; 0x24
 80039da:	f64b 2002 	movw	r0, #47618	; 0xba02
 80039de:	f7fd fea1 	bl	8001724 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 80039e2:	2100      	movs	r1, #0
 80039e4:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80039e8:	f7fd fe9c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 80039ec:	2178      	movs	r1, #120	; 0x78
 80039ee:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80039f2:	f7fd fe97 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 80039f6:	2100      	movs	r1, #0
 80039f8:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80039fc:	f7fd fe92 	bl	8001724 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 8003a00:	2100      	movs	r1, #0
 8003a02:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8003a06:	f7fd fe8d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 8003a0a:	2178      	movs	r1, #120	; 0x78
 8003a0c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003a10:	f7fd fe88 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8003a14:	2100      	movs	r1, #0
 8003a16:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8003a1a:	f7fd fe83 	bl	8001724 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 8003a1e:	2100      	movs	r1, #0
 8003a20:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8003a24:	f7fd fe7e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 8003a28:	2164      	movs	r1, #100	; 0x64
 8003a2a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8003a2e:	f7fd fe79 	bl	8001724 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 8003a32:	2100      	movs	r1, #0
 8003a34:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003a38:	f7fd fe74 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8003a3c:	2133      	movs	r1, #51	; 0x33
 8003a3e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8003a42:	f7fd fe6f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 8003a46:	2100      	movs	r1, #0
 8003a48:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003a4c:	f7fd fe6a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 8003a50:	2134      	movs	r1, #52	; 0x34
 8003a52:	f24d 1003 	movw	r0, #53507	; 0xd103
 8003a56:	f7fd fe65 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003a60:	f7fd fe60 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 8003a64:	213a      	movs	r1, #58	; 0x3a
 8003a66:	f24d 1005 	movw	r0, #53509	; 0xd105
 8003a6a:	f7fd fe5b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 8003a6e:	2100      	movs	r1, #0
 8003a70:	f24d 1006 	movw	r0, #53510	; 0xd106
 8003a74:	f7fd fe56 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 8003a78:	214a      	movs	r1, #74	; 0x4a
 8003a7a:	f24d 1007 	movw	r0, #53511	; 0xd107
 8003a7e:	f7fd fe51 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 8003a82:	2100      	movs	r1, #0
 8003a84:	f24d 1008 	movw	r0, #53512	; 0xd108
 8003a88:	f7fd fe4c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 8003a8c:	215c      	movs	r1, #92	; 0x5c
 8003a8e:	f24d 1009 	movw	r0, #53513	; 0xd109
 8003a92:	f7fd fe47 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 8003a96:	2100      	movs	r1, #0
 8003a98:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8003a9c:	f7fd fe42 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 8003aa0:	2181      	movs	r1, #129	; 0x81
 8003aa2:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8003aa6:	f7fd fe3d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 8003aaa:	2100      	movs	r1, #0
 8003aac:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8003ab0:	f7fd fe38 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 8003ab4:	21a6      	movs	r1, #166	; 0xa6
 8003ab6:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8003aba:	f7fd fe33 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 8003abe:	2100      	movs	r1, #0
 8003ac0:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8003ac4:	f7fd fe2e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8003ac8:	21e5      	movs	r1, #229	; 0xe5
 8003aca:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8003ace:	f7fd fe29 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 8003ad2:	2101      	movs	r1, #1
 8003ad4:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003ad8:	f7fd fe24 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 8003adc:	2113      	movs	r1, #19
 8003ade:	f24d 1011 	movw	r0, #53521	; 0xd111
 8003ae2:	f7fd fe1f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003aec:	f7fd fe1a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 8003af0:	2154      	movs	r1, #84	; 0x54
 8003af2:	f24d 1013 	movw	r0, #53523	; 0xd113
 8003af6:	f7fd fe15 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 8003afa:	2101      	movs	r1, #1
 8003afc:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003b00:	f7fd fe10 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8003b04:	2182      	movs	r1, #130	; 0x82
 8003b06:	f24d 1015 	movw	r0, #53525	; 0xd115
 8003b0a:	f7fd fe0b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 8003b0e:	2101      	movs	r1, #1
 8003b10:	f24d 1016 	movw	r0, #53526	; 0xd116
 8003b14:	f7fd fe06 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8003b18:	21ca      	movs	r1, #202	; 0xca
 8003b1a:	f24d 1017 	movw	r0, #53527	; 0xd117
 8003b1e:	f7fd fe01 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 8003b22:	2102      	movs	r1, #2
 8003b24:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003b28:	f7fd fdfc 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8003b32:	f7fd fdf7 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 8003b36:	2102      	movs	r1, #2
 8003b38:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003b3c:	f7fd fdf2 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 8003b40:	2101      	movs	r1, #1
 8003b42:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8003b46:	f7fd fded 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003b50:	f7fd fde8 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 8003b54:	2134      	movs	r1, #52	; 0x34
 8003b56:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003b5a:	f7fd fde3 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 8003b5e:	2102      	movs	r1, #2
 8003b60:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8003b64:	f7fd fdde 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 8003b68:	2167      	movs	r1, #103	; 0x67
 8003b6a:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8003b6e:	f7fd fdd9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 8003b72:	2102      	movs	r1, #2
 8003b74:	f24d 1020 	movw	r0, #53536	; 0xd120
 8003b78:	f7fd fdd4 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 8003b7c:	2184      	movs	r1, #132	; 0x84
 8003b7e:	f24d 1021 	movw	r0, #53537	; 0xd121
 8003b82:	f7fd fdcf 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 8003b86:	2102      	movs	r1, #2
 8003b88:	f24d 1022 	movw	r0, #53538	; 0xd122
 8003b8c:	f7fd fdca 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 8003b90:	21a4      	movs	r1, #164	; 0xa4
 8003b92:	f24d 1023 	movw	r0, #53539	; 0xd123
 8003b96:	f7fd fdc5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	f24d 1024 	movw	r0, #53540	; 0xd124
 8003ba0:	f7fd fdc0 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 8003ba4:	21b7      	movs	r1, #183	; 0xb7
 8003ba6:	f24d 1025 	movw	r0, #53541	; 0xd125
 8003baa:	f7fd fdbb 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 8003bae:	2102      	movs	r1, #2
 8003bb0:	f24d 1026 	movw	r0, #53542	; 0xd126
 8003bb4:	f7fd fdb6 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 8003bb8:	21cf      	movs	r1, #207	; 0xcf
 8003bba:	f24d 1027 	movw	r0, #53543	; 0xd127
 8003bbe:	f7fd fdb1 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003bc8:	f7fd fdac 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 8003bcc:	21de      	movs	r1, #222	; 0xde
 8003bce:	f24d 1029 	movw	r0, #53545	; 0xd129
 8003bd2:	f7fd fda7 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8003bd6:	2102      	movs	r1, #2
 8003bd8:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003bdc:	f7fd fda2 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 8003be0:	21f2      	movs	r1, #242	; 0xf2
 8003be2:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003be6:	f7fd fd9d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 8003bea:	2102      	movs	r1, #2
 8003bec:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003bf0:	f7fd fd98 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8003bf4:	21fe      	movs	r1, #254	; 0xfe
 8003bf6:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8003bfa:	f7fd fd93 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 8003bfe:	2103      	movs	r1, #3
 8003c00:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003c04:	f7fd fd8e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8003c08:	2110      	movs	r1, #16
 8003c0a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8003c0e:	f7fd fd89 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 8003c12:	2103      	movs	r1, #3
 8003c14:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003c18:	f7fd fd84 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8003c1c:	2133      	movs	r1, #51	; 0x33
 8003c1e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003c22:	f7fd fd7f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 8003c26:	2103      	movs	r1, #3
 8003c28:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003c2c:	f7fd fd7a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 8003c30:	216d      	movs	r1, #109	; 0x6d
 8003c32:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003c36:	f7fd fd75 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003c40:	f7fd fd70 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8003c44:	2133      	movs	r1, #51	; 0x33
 8003c46:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003c4a:	f7fd fd6b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 8003c4e:	2100      	movs	r1, #0
 8003c50:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003c54:	f7fd fd66 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 8003c58:	2134      	movs	r1, #52	; 0x34
 8003c5a:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003c5e:	f7fd fd61 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 8003c62:	2100      	movs	r1, #0
 8003c64:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003c68:	f7fd fd5c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 8003c6c:	213a      	movs	r1, #58	; 0x3a
 8003c6e:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003c72:	f7fd fd57 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 8003c76:	2100      	movs	r1, #0
 8003c78:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003c7c:	f7fd fd52 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 8003c80:	214a      	movs	r1, #74	; 0x4a
 8003c82:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003c86:	f7fd fd4d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003c90:	f7fd fd48 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 8003c94:	215c      	movs	r1, #92	; 0x5c
 8003c96:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003c9a:	f7fd fd43 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003ca4:	f7fd fd3e 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 8003ca8:	2181      	movs	r1, #129	; 0x81
 8003caa:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003cae:	f7fd fd39 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003cb8:	f7fd fd34 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 8003cbc:	21a6      	movs	r1, #166	; 0xa6
 8003cbe:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003cc2:	f7fd fd2f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003ccc:	f7fd fd2a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 8003cd0:	21e5      	movs	r1, #229	; 0xe5
 8003cd2:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003cd6:	f7fd fd25 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 8003cda:	2101      	movs	r1, #1
 8003cdc:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003ce0:	f7fd fd20 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8003ce4:	2113      	movs	r1, #19
 8003ce6:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003cea:	f7fd fd1b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 8003cee:	2101      	movs	r1, #1
 8003cf0:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003cf4:	f7fd fd16 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8003cf8:	2154      	movs	r1, #84	; 0x54
 8003cfa:	f24d 2013 	movw	r0, #53779	; 0xd213
 8003cfe:	f7fd fd11 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 8003d02:	2101      	movs	r1, #1
 8003d04:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003d08:	f7fd fd0c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8003d0c:	2182      	movs	r1, #130	; 0x82
 8003d0e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003d12:	f7fd fd07 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8003d16:	2101      	movs	r1, #1
 8003d18:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003d1c:	f7fd fd02 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 8003d20:	21ca      	movs	r1, #202	; 0xca
 8003d22:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003d26:	f7fd fcfd 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003d30:	f7fd fcf8 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8003d34:	2100      	movs	r1, #0
 8003d36:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003d3a:	f7fd fcf3 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 8003d3e:	2102      	movs	r1, #2
 8003d40:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003d44:	f7fd fcee 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 8003d48:	2101      	movs	r1, #1
 8003d4a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003d4e:	f7fd fce9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 8003d52:	2102      	movs	r1, #2
 8003d54:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003d58:	f7fd fce4 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 8003d5c:	2134      	movs	r1, #52	; 0x34
 8003d5e:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003d62:	f7fd fcdf 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 8003d66:	2102      	movs	r1, #2
 8003d68:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003d6c:	f7fd fcda 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 8003d70:	2167      	movs	r1, #103	; 0x67
 8003d72:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003d76:	f7fd fcd5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003d80:	f7fd fcd0 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 8003d84:	2184      	movs	r1, #132	; 0x84
 8003d86:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003d8a:	f7fd fccb 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 8003d8e:	2102      	movs	r1, #2
 8003d90:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003d94:	f7fd fcc6 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 8003d98:	21a4      	movs	r1, #164	; 0xa4
 8003d9a:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003d9e:	f7fd fcc1 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 8003da2:	2102      	movs	r1, #2
 8003da4:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003da8:	f7fd fcbc 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 8003dac:	21b7      	movs	r1, #183	; 0xb7
 8003dae:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003db2:	f7fd fcb7 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 8003db6:	2102      	movs	r1, #2
 8003db8:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003dbc:	f7fd fcb2 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 8003dc0:	21cf      	movs	r1, #207	; 0xcf
 8003dc2:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003dc6:	f7fd fcad 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 8003dca:	2102      	movs	r1, #2
 8003dcc:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003dd0:	f7fd fca8 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8003dd4:	21de      	movs	r1, #222	; 0xde
 8003dd6:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003dda:	f7fd fca3 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 8003dde:	2102      	movs	r1, #2
 8003de0:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003de4:	f7fd fc9e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8003de8:	21f2      	movs	r1, #242	; 0xf2
 8003dea:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003dee:	f7fd fc99 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 8003df2:	2102      	movs	r1, #2
 8003df4:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003df8:	f7fd fc94 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 8003dfc:	21fe      	movs	r1, #254	; 0xfe
 8003dfe:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003e02:	f7fd fc8f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8003e06:	2103      	movs	r1, #3
 8003e08:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003e0c:	f7fd fc8a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 8003e10:	2110      	movs	r1, #16
 8003e12:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003e16:	f7fd fc85 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 8003e1a:	2103      	movs	r1, #3
 8003e1c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003e20:	f7fd fc80 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8003e24:	2133      	movs	r1, #51	; 0x33
 8003e26:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003e2a:	f7fd fc7b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 8003e2e:	2103      	movs	r1, #3
 8003e30:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003e34:	f7fd fc76 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 8003e38:	216d      	movs	r1, #109	; 0x6d
 8003e3a:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003e3e:	f7fd fc71 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 8003e42:	2100      	movs	r1, #0
 8003e44:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003e48:	f7fd fc6c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 8003e4c:	2133      	movs	r1, #51	; 0x33
 8003e4e:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003e52:	f7fd fc67 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 8003e56:	2100      	movs	r1, #0
 8003e58:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003e5c:	f7fd fc62 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 8003e60:	2134      	movs	r1, #52	; 0x34
 8003e62:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003e66:	f7fd fc5d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 8003e6a:	2100      	movs	r1, #0
 8003e6c:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003e70:	f7fd fc58 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 8003e74:	213a      	movs	r1, #58	; 0x3a
 8003e76:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003e7a:	f7fd fc53 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 8003e7e:	2100      	movs	r1, #0
 8003e80:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003e84:	f7fd fc4e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 8003e88:	214a      	movs	r1, #74	; 0x4a
 8003e8a:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003e8e:	f7fd fc49 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 8003e92:	2100      	movs	r1, #0
 8003e94:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003e98:	f7fd fc44 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 8003e9c:	215c      	movs	r1, #92	; 0x5c
 8003e9e:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003ea2:	f7fd fc3f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 8003ea6:	2100      	movs	r1, #0
 8003ea8:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003eac:	f7fd fc3a 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 8003eb0:	2181      	movs	r1, #129	; 0x81
 8003eb2:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003eb6:	f7fd fc35 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 8003eba:	2100      	movs	r1, #0
 8003ebc:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003ec0:	f7fd fc30 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 8003ec4:	21a6      	movs	r1, #166	; 0xa6
 8003ec6:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003eca:	f7fd fc2b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 8003ece:	2100      	movs	r1, #0
 8003ed0:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003ed4:	f7fd fc26 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 8003ed8:	21e5      	movs	r1, #229	; 0xe5
 8003eda:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003ede:	f7fd fc21 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003ee8:	f7fd fc1c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 8003eec:	2113      	movs	r1, #19
 8003eee:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003ef2:	f7fd fc17 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003efc:	f7fd fc12 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 8003f00:	2154      	movs	r1, #84	; 0x54
 8003f02:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003f06:	f7fd fc0d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 8003f0a:	2101      	movs	r1, #1
 8003f0c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003f10:	f7fd fc08 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8003f14:	2182      	movs	r1, #130	; 0x82
 8003f16:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003f1a:	f7fd fc03 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 8003f1e:	2101      	movs	r1, #1
 8003f20:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003f24:	f7fd fbfe 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 8003f28:	21ca      	movs	r1, #202	; 0xca
 8003f2a:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003f2e:	f7fd fbf9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 8003f32:	2102      	movs	r1, #2
 8003f34:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003f38:	f7fd fbf4 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003f42:	f7fd fbef 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 8003f46:	2102      	movs	r1, #2
 8003f48:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003f4c:	f7fd fbea 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 8003f50:	2101      	movs	r1, #1
 8003f52:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003f56:	f7fd fbe5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003f60:	f7fd fbe0 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 8003f64:	2134      	movs	r1, #52	; 0x34
 8003f66:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003f6a:	f7fd fbdb 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 8003f6e:	2102      	movs	r1, #2
 8003f70:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003f74:	f7fd fbd6 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 8003f78:	2167      	movs	r1, #103	; 0x67
 8003f7a:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003f7e:	f7fd fbd1 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 8003f82:	2102      	movs	r1, #2
 8003f84:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003f88:	f7fd fbcc 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 8003f8c:	2184      	movs	r1, #132	; 0x84
 8003f8e:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003f92:	f7fd fbc7 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 8003f96:	2102      	movs	r1, #2
 8003f98:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003f9c:	f7fd fbc2 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 8003fa0:	21a4      	movs	r1, #164	; 0xa4
 8003fa2:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003fa6:	f7fd fbbd 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 8003faa:	2102      	movs	r1, #2
 8003fac:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003fb0:	f7fd fbb8 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 8003fb4:	21b7      	movs	r1, #183	; 0xb7
 8003fb6:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003fba:	f7fd fbb3 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003fc4:	f7fd fbae 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 8003fc8:	21cf      	movs	r1, #207	; 0xcf
 8003fca:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003fce:	f7fd fba9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 8003fd2:	2102      	movs	r1, #2
 8003fd4:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003fd8:	f7fd fba4 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 8003fdc:	21de      	movs	r1, #222	; 0xde
 8003fde:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003fe2:	f7fd fb9f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 8003fe6:	2102      	movs	r1, #2
 8003fe8:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003fec:	f7fd fb9a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 8003ff0:	21f2      	movs	r1, #242	; 0xf2
 8003ff2:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003ff6:	f7fd fb95 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 8003ffa:	2102      	movs	r1, #2
 8003ffc:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8004000:	f7fd fb90 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8004004:	21fe      	movs	r1, #254	; 0xfe
 8004006:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800400a:	f7fd fb8b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 800400e:	2103      	movs	r1, #3
 8004010:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8004014:	f7fd fb86 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8004018:	2110      	movs	r1, #16
 800401a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800401e:	f7fd fb81 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 8004022:	2103      	movs	r1, #3
 8004024:	f24d 3030 	movw	r0, #54064	; 0xd330
 8004028:	f7fd fb7c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 800402c:	2133      	movs	r1, #51	; 0x33
 800402e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8004032:	f7fd fb77 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 8004036:	2103      	movs	r1, #3
 8004038:	f24d 3032 	movw	r0, #54066	; 0xd332
 800403c:	f7fd fb72 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 8004040:	216d      	movs	r1, #109	; 0x6d
 8004042:	f24d 3033 	movw	r0, #54067	; 0xd333
 8004046:	f7fd fb6d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 800404a:	2100      	movs	r1, #0
 800404c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8004050:	f7fd fb68 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 8004054:	2133      	movs	r1, #51	; 0x33
 8004056:	f24d 4001 	movw	r0, #54273	; 0xd401
 800405a:	f7fd fb63 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 800405e:	2100      	movs	r1, #0
 8004060:	f24d 4002 	movw	r0, #54274	; 0xd402
 8004064:	f7fd fb5e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 8004068:	2134      	movs	r1, #52	; 0x34
 800406a:	f24d 4003 	movw	r0, #54275	; 0xd403
 800406e:	f7fd fb59 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 8004072:	2100      	movs	r1, #0
 8004074:	f24d 4004 	movw	r0, #54276	; 0xd404
 8004078:	f7fd fb54 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 800407c:	213a      	movs	r1, #58	; 0x3a
 800407e:	f24d 4005 	movw	r0, #54277	; 0xd405
 8004082:	f7fd fb4f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 8004086:	2100      	movs	r1, #0
 8004088:	f24d 4006 	movw	r0, #54278	; 0xd406
 800408c:	f7fd fb4a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 8004090:	214a      	movs	r1, #74	; 0x4a
 8004092:	f24d 4007 	movw	r0, #54279	; 0xd407
 8004096:	f7fd fb45 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 800409a:	2100      	movs	r1, #0
 800409c:	f24d 4008 	movw	r0, #54280	; 0xd408
 80040a0:	f7fd fb40 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 80040a4:	215c      	movs	r1, #92	; 0x5c
 80040a6:	f24d 4009 	movw	r0, #54281	; 0xd409
 80040aa:	f7fd fb3b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 80040ae:	2100      	movs	r1, #0
 80040b0:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80040b4:	f7fd fb36 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 80040b8:	2181      	movs	r1, #129	; 0x81
 80040ba:	f24d 400b 	movw	r0, #54283	; 0xd40b
 80040be:	f7fd fb31 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 80040c2:	2100      	movs	r1, #0
 80040c4:	f24d 400c 	movw	r0, #54284	; 0xd40c
 80040c8:	f7fd fb2c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 80040cc:	21a6      	movs	r1, #166	; 0xa6
 80040ce:	f24d 400d 	movw	r0, #54285	; 0xd40d
 80040d2:	f7fd fb27 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 80040d6:	2100      	movs	r1, #0
 80040d8:	f24d 400e 	movw	r0, #54286	; 0xd40e
 80040dc:	f7fd fb22 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 80040e0:	21e5      	movs	r1, #229	; 0xe5
 80040e2:	f24d 400f 	movw	r0, #54287	; 0xd40f
 80040e6:	f7fd fb1d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 80040ea:	2101      	movs	r1, #1
 80040ec:	f24d 4010 	movw	r0, #54288	; 0xd410
 80040f0:	f7fd fb18 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 80040f4:	2113      	movs	r1, #19
 80040f6:	f24d 4011 	movw	r0, #54289	; 0xd411
 80040fa:	f7fd fb13 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 80040fe:	2101      	movs	r1, #1
 8004100:	f24d 4012 	movw	r0, #54290	; 0xd412
 8004104:	f7fd fb0e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 8004108:	2154      	movs	r1, #84	; 0x54
 800410a:	f24d 4013 	movw	r0, #54291	; 0xd413
 800410e:	f7fd fb09 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 8004112:	2101      	movs	r1, #1
 8004114:	f24d 4014 	movw	r0, #54292	; 0xd414
 8004118:	f7fd fb04 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 800411c:	2182      	movs	r1, #130	; 0x82
 800411e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8004122:	f7fd faff 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 8004126:	2101      	movs	r1, #1
 8004128:	f24d 4016 	movw	r0, #54294	; 0xd416
 800412c:	f7fd fafa 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 8004130:	21ca      	movs	r1, #202	; 0xca
 8004132:	f24d 4017 	movw	r0, #54295	; 0xd417
 8004136:	f7fd faf5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 800413a:	2102      	movs	r1, #2
 800413c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8004140:	f7fd faf0 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8004144:	2100      	movs	r1, #0
 8004146:	f24d 4019 	movw	r0, #54297	; 0xd419
 800414a:	f7fd faeb 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 800414e:	2102      	movs	r1, #2
 8004150:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8004154:	f7fd fae6 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 8004158:	2101      	movs	r1, #1
 800415a:	f24d 401b 	movw	r0, #54299	; 0xd41b
 800415e:	f7fd fae1 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 8004162:	2102      	movs	r1, #2
 8004164:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8004168:	f7fd fadc 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 800416c:	2134      	movs	r1, #52	; 0x34
 800416e:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8004172:	f7fd fad7 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 8004176:	2102      	movs	r1, #2
 8004178:	f24d 401e 	movw	r0, #54302	; 0xd41e
 800417c:	f7fd fad2 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 8004180:	2167      	movs	r1, #103	; 0x67
 8004182:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8004186:	f7fd facd 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 800418a:	2102      	movs	r1, #2
 800418c:	f24d 4020 	movw	r0, #54304	; 0xd420
 8004190:	f7fd fac8 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 8004194:	2184      	movs	r1, #132	; 0x84
 8004196:	f24d 4021 	movw	r0, #54305	; 0xd421
 800419a:	f7fd fac3 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 800419e:	2102      	movs	r1, #2
 80041a0:	f24d 4022 	movw	r0, #54306	; 0xd422
 80041a4:	f7fd fabe 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 80041a8:	21a4      	movs	r1, #164	; 0xa4
 80041aa:	f24d 4023 	movw	r0, #54307	; 0xd423
 80041ae:	f7fd fab9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 80041b2:	2102      	movs	r1, #2
 80041b4:	f24d 4024 	movw	r0, #54308	; 0xd424
 80041b8:	f7fd fab4 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 80041bc:	21b7      	movs	r1, #183	; 0xb7
 80041be:	f24d 4025 	movw	r0, #54309	; 0xd425
 80041c2:	f7fd faaf 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 80041c6:	2102      	movs	r1, #2
 80041c8:	f24d 4026 	movw	r0, #54310	; 0xd426
 80041cc:	f7fd faaa 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 80041d0:	21cf      	movs	r1, #207	; 0xcf
 80041d2:	f24d 4027 	movw	r0, #54311	; 0xd427
 80041d6:	f7fd faa5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 80041da:	2102      	movs	r1, #2
 80041dc:	f24d 4028 	movw	r0, #54312	; 0xd428
 80041e0:	f7fd faa0 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 80041e4:	21de      	movs	r1, #222	; 0xde
 80041e6:	f24d 4029 	movw	r0, #54313	; 0xd429
 80041ea:	f7fd fa9b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 80041ee:	2102      	movs	r1, #2
 80041f0:	f24d 402a 	movw	r0, #54314	; 0xd42a
 80041f4:	f7fd fa96 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 80041f8:	21f2      	movs	r1, #242	; 0xf2
 80041fa:	f24d 402b 	movw	r0, #54315	; 0xd42b
 80041fe:	f7fd fa91 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 8004202:	2102      	movs	r1, #2
 8004204:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8004208:	f7fd fa8c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 800420c:	21fe      	movs	r1, #254	; 0xfe
 800420e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8004212:	f7fd fa87 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 8004216:	2103      	movs	r1, #3
 8004218:	f24d 402e 	movw	r0, #54318	; 0xd42e
 800421c:	f7fd fa82 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8004220:	2110      	movs	r1, #16
 8004222:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8004226:	f7fd fa7d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 800422a:	2103      	movs	r1, #3
 800422c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8004230:	f7fd fa78 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 8004234:	2133      	movs	r1, #51	; 0x33
 8004236:	f24d 4031 	movw	r0, #54321	; 0xd431
 800423a:	f7fd fa73 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 800423e:	2103      	movs	r1, #3
 8004240:	f24d 4032 	movw	r0, #54322	; 0xd432
 8004244:	f7fd fa6e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 8004248:	216d      	movs	r1, #109	; 0x6d
 800424a:	f24d 4033 	movw	r0, #54323	; 0xd433
 800424e:	f7fd fa69 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 8004252:	2100      	movs	r1, #0
 8004254:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8004258:	f7fd fa64 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 800425c:	2133      	movs	r1, #51	; 0x33
 800425e:	f24d 5001 	movw	r0, #54529	; 0xd501
 8004262:	f7fd fa5f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 8004266:	2100      	movs	r1, #0
 8004268:	f24d 5002 	movw	r0, #54530	; 0xd502
 800426c:	f7fd fa5a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 8004270:	2134      	movs	r1, #52	; 0x34
 8004272:	f24d 5003 	movw	r0, #54531	; 0xd503
 8004276:	f7fd fa55 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 800427a:	2100      	movs	r1, #0
 800427c:	f24d 5004 	movw	r0, #54532	; 0xd504
 8004280:	f7fd fa50 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 8004284:	213a      	movs	r1, #58	; 0x3a
 8004286:	f24d 5005 	movw	r0, #54533	; 0xd505
 800428a:	f7fd fa4b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 800428e:	2100      	movs	r1, #0
 8004290:	f24d 5006 	movw	r0, #54534	; 0xd506
 8004294:	f7fd fa46 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 8004298:	214a      	movs	r1, #74	; 0x4a
 800429a:	f24d 5007 	movw	r0, #54535	; 0xd507
 800429e:	f7fd fa41 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 80042a2:	2100      	movs	r1, #0
 80042a4:	f24d 5008 	movw	r0, #54536	; 0xd508
 80042a8:	f7fd fa3c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 80042ac:	215c      	movs	r1, #92	; 0x5c
 80042ae:	f24d 5009 	movw	r0, #54537	; 0xd509
 80042b2:	f7fd fa37 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 80042b6:	2100      	movs	r1, #0
 80042b8:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80042bc:	f7fd fa32 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 80042c0:	2181      	movs	r1, #129	; 0x81
 80042c2:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80042c6:	f7fd fa2d 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 80042ca:	2100      	movs	r1, #0
 80042cc:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80042d0:	f7fd fa28 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 80042d4:	21a6      	movs	r1, #166	; 0xa6
 80042d6:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80042da:	f7fd fa23 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 80042de:	2100      	movs	r1, #0
 80042e0:	f24d 500e 	movw	r0, #54542	; 0xd50e
 80042e4:	f7fd fa1e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 80042e8:	21e5      	movs	r1, #229	; 0xe5
 80042ea:	f24d 500f 	movw	r0, #54543	; 0xd50f
 80042ee:	f7fd fa19 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 80042f2:	2101      	movs	r1, #1
 80042f4:	f24d 5010 	movw	r0, #54544	; 0xd510
 80042f8:	f7fd fa14 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 80042fc:	2113      	movs	r1, #19
 80042fe:	f24d 5011 	movw	r0, #54545	; 0xd511
 8004302:	f7fd fa0f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 8004306:	2101      	movs	r1, #1
 8004308:	f24d 5012 	movw	r0, #54546	; 0xd512
 800430c:	f7fd fa0a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 8004310:	2154      	movs	r1, #84	; 0x54
 8004312:	f24d 5013 	movw	r0, #54547	; 0xd513
 8004316:	f7fd fa05 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 800431a:	2101      	movs	r1, #1
 800431c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8004320:	f7fd fa00 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8004324:	2182      	movs	r1, #130	; 0x82
 8004326:	f24d 5015 	movw	r0, #54549	; 0xd515
 800432a:	f7fd f9fb 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 800432e:	2101      	movs	r1, #1
 8004330:	f24d 5016 	movw	r0, #54550	; 0xd516
 8004334:	f7fd f9f6 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 8004338:	21ca      	movs	r1, #202	; 0xca
 800433a:	f24d 5017 	movw	r0, #54551	; 0xd517
 800433e:	f7fd f9f1 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 8004342:	2102      	movs	r1, #2
 8004344:	f24d 5018 	movw	r0, #54552	; 0xd518
 8004348:	f7fd f9ec 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 800434c:	2100      	movs	r1, #0
 800434e:	f24d 5019 	movw	r0, #54553	; 0xd519
 8004352:	f7fd f9e7 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 8004356:	2102      	movs	r1, #2
 8004358:	f24d 501a 	movw	r0, #54554	; 0xd51a
 800435c:	f7fd f9e2 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 8004360:	2101      	movs	r1, #1
 8004362:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8004366:	f7fd f9dd 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 800436a:	2102      	movs	r1, #2
 800436c:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8004370:	f7fd f9d8 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 8004374:	2134      	movs	r1, #52	; 0x34
 8004376:	f24d 501d 	movw	r0, #54557	; 0xd51d
 800437a:	f7fd f9d3 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 800437e:	2102      	movs	r1, #2
 8004380:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8004384:	f7fd f9ce 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 8004388:	2167      	movs	r1, #103	; 0x67
 800438a:	f24d 501f 	movw	r0, #54559	; 0xd51f
 800438e:	f7fd f9c9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 8004392:	2102      	movs	r1, #2
 8004394:	f24d 5020 	movw	r0, #54560	; 0xd520
 8004398:	f7fd f9c4 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 800439c:	2184      	movs	r1, #132	; 0x84
 800439e:	f24d 5021 	movw	r0, #54561	; 0xd521
 80043a2:	f7fd f9bf 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 80043a6:	2102      	movs	r1, #2
 80043a8:	f24d 5022 	movw	r0, #54562	; 0xd522
 80043ac:	f7fd f9ba 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 80043b0:	21a4      	movs	r1, #164	; 0xa4
 80043b2:	f24d 5023 	movw	r0, #54563	; 0xd523
 80043b6:	f7fd f9b5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 80043ba:	2102      	movs	r1, #2
 80043bc:	f24d 5024 	movw	r0, #54564	; 0xd524
 80043c0:	f7fd f9b0 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 80043c4:	21b7      	movs	r1, #183	; 0xb7
 80043c6:	f24d 5025 	movw	r0, #54565	; 0xd525
 80043ca:	f7fd f9ab 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 80043ce:	2102      	movs	r1, #2
 80043d0:	f24d 5026 	movw	r0, #54566	; 0xd526
 80043d4:	f7fd f9a6 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 80043d8:	21cf      	movs	r1, #207	; 0xcf
 80043da:	f24d 5027 	movw	r0, #54567	; 0xd527
 80043de:	f7fd f9a1 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 80043e2:	2102      	movs	r1, #2
 80043e4:	f24d 5028 	movw	r0, #54568	; 0xd528
 80043e8:	f7fd f99c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 80043ec:	21de      	movs	r1, #222	; 0xde
 80043ee:	f24d 5029 	movw	r0, #54569	; 0xd529
 80043f2:	f7fd f997 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 80043f6:	2102      	movs	r1, #2
 80043f8:	f24d 502a 	movw	r0, #54570	; 0xd52a
 80043fc:	f7fd f992 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 8004400:	21f2      	movs	r1, #242	; 0xf2
 8004402:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8004406:	f7fd f98d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 800440a:	2102      	movs	r1, #2
 800440c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004410:	f7fd f988 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8004414:	21fe      	movs	r1, #254	; 0xfe
 8004416:	f24d 502d 	movw	r0, #54573	; 0xd52d
 800441a:	f7fd f983 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 800441e:	2103      	movs	r1, #3
 8004420:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8004424:	f7fd f97e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8004428:	2110      	movs	r1, #16
 800442a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800442e:	f7fd f979 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 8004432:	2103      	movs	r1, #3
 8004434:	f24d 5030 	movw	r0, #54576	; 0xd530
 8004438:	f7fd f974 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 800443c:	2133      	movs	r1, #51	; 0x33
 800443e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8004442:	f7fd f96f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 8004446:	2103      	movs	r1, #3
 8004448:	f24d 5032 	movw	r0, #54578	; 0xd532
 800444c:	f7fd f96a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 8004450:	216d      	movs	r1, #109	; 0x6d
 8004452:	f24d 5033 	movw	r0, #54579	; 0xd533
 8004456:	f7fd f965 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 800445a:	2100      	movs	r1, #0
 800445c:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8004460:	f7fd f960 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 8004464:	2133      	movs	r1, #51	; 0x33
 8004466:	f24d 6001 	movw	r0, #54785	; 0xd601
 800446a:	f7fd f95b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 800446e:	2100      	movs	r1, #0
 8004470:	f24d 6002 	movw	r0, #54786	; 0xd602
 8004474:	f7fd f956 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 8004478:	2134      	movs	r1, #52	; 0x34
 800447a:	f24d 6003 	movw	r0, #54787	; 0xd603
 800447e:	f7fd f951 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 8004482:	2100      	movs	r1, #0
 8004484:	f24d 6004 	movw	r0, #54788	; 0xd604
 8004488:	f7fd f94c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 800448c:	213a      	movs	r1, #58	; 0x3a
 800448e:	f24d 6005 	movw	r0, #54789	; 0xd605
 8004492:	f7fd f947 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 8004496:	2100      	movs	r1, #0
 8004498:	f24d 6006 	movw	r0, #54790	; 0xd606
 800449c:	f7fd f942 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 80044a0:	214a      	movs	r1, #74	; 0x4a
 80044a2:	f24d 6007 	movw	r0, #54791	; 0xd607
 80044a6:	f7fd f93d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 80044aa:	2100      	movs	r1, #0
 80044ac:	f24d 6008 	movw	r0, #54792	; 0xd608
 80044b0:	f7fd f938 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 80044b4:	215c      	movs	r1, #92	; 0x5c
 80044b6:	f24d 6009 	movw	r0, #54793	; 0xd609
 80044ba:	f7fd f933 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 80044be:	2100      	movs	r1, #0
 80044c0:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80044c4:	f7fd f92e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 80044c8:	2181      	movs	r1, #129	; 0x81
 80044ca:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80044ce:	f7fd f929 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 80044d2:	2100      	movs	r1, #0
 80044d4:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80044d8:	f7fd f924 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 80044dc:	21a6      	movs	r1, #166	; 0xa6
 80044de:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80044e2:	f7fd f91f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 80044e6:	2100      	movs	r1, #0
 80044e8:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80044ec:	f7fd f91a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 80044f0:	21e5      	movs	r1, #229	; 0xe5
 80044f2:	f24d 600f 	movw	r0, #54799	; 0xd60f
 80044f6:	f7fd f915 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 80044fa:	2101      	movs	r1, #1
 80044fc:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004500:	f7fd f910 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8004504:	2113      	movs	r1, #19
 8004506:	f24d 6011 	movw	r0, #54801	; 0xd611
 800450a:	f7fd f90b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 800450e:	2101      	movs	r1, #1
 8004510:	f24d 6012 	movw	r0, #54802	; 0xd612
 8004514:	f7fd f906 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8004518:	2154      	movs	r1, #84	; 0x54
 800451a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800451e:	f7fd f901 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 8004522:	2101      	movs	r1, #1
 8004524:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004528:	f7fd f8fc 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 800452c:	2182      	movs	r1, #130	; 0x82
 800452e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8004532:	f7fd f8f7 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 8004536:	2101      	movs	r1, #1
 8004538:	f24d 6016 	movw	r0, #54806	; 0xd616
 800453c:	f7fd f8f2 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 8004540:	21ca      	movs	r1, #202	; 0xca
 8004542:	f24d 6017 	movw	r0, #54807	; 0xd617
 8004546:	f7fd f8ed 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 800454a:	2102      	movs	r1, #2
 800454c:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004550:	f7fd f8e8 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 8004554:	2100      	movs	r1, #0
 8004556:	f24d 6019 	movw	r0, #54809	; 0xd619
 800455a:	f7fd f8e3 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 800455e:	2102      	movs	r1, #2
 8004560:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8004564:	f7fd f8de 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 8004568:	2101      	movs	r1, #1
 800456a:	f24d 601b 	movw	r0, #54811	; 0xd61b
 800456e:	f7fd f8d9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 8004572:	2102      	movs	r1, #2
 8004574:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8004578:	f7fd f8d4 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 800457c:	2134      	movs	r1, #52	; 0x34
 800457e:	f24d 601d 	movw	r0, #54813	; 0xd61d
 8004582:	f7fd f8cf 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 8004586:	2102      	movs	r1, #2
 8004588:	f24d 601e 	movw	r0, #54814	; 0xd61e
 800458c:	f7fd f8ca 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 8004590:	2167      	movs	r1, #103	; 0x67
 8004592:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8004596:	f7fd f8c5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 800459a:	2102      	movs	r1, #2
 800459c:	f24d 6020 	movw	r0, #54816	; 0xd620
 80045a0:	f7fd f8c0 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 80045a4:	2184      	movs	r1, #132	; 0x84
 80045a6:	f24d 6021 	movw	r0, #54817	; 0xd621
 80045aa:	f7fd f8bb 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 80045ae:	2102      	movs	r1, #2
 80045b0:	f24d 6022 	movw	r0, #54818	; 0xd622
 80045b4:	f7fd f8b6 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 80045b8:	21a4      	movs	r1, #164	; 0xa4
 80045ba:	f24d 6023 	movw	r0, #54819	; 0xd623
 80045be:	f7fd f8b1 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 80045c2:	2102      	movs	r1, #2
 80045c4:	f24d 6024 	movw	r0, #54820	; 0xd624
 80045c8:	f7fd f8ac 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 80045cc:	21b7      	movs	r1, #183	; 0xb7
 80045ce:	f24d 6025 	movw	r0, #54821	; 0xd625
 80045d2:	f7fd f8a7 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 80045d6:	2102      	movs	r1, #2
 80045d8:	f24d 6026 	movw	r0, #54822	; 0xd626
 80045dc:	f7fd f8a2 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 80045e0:	21cf      	movs	r1, #207	; 0xcf
 80045e2:	f24d 6027 	movw	r0, #54823	; 0xd627
 80045e6:	f7fd f89d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 80045ea:	2102      	movs	r1, #2
 80045ec:	f24d 6028 	movw	r0, #54824	; 0xd628
 80045f0:	f7fd f898 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 80045f4:	21de      	movs	r1, #222	; 0xde
 80045f6:	f24d 6029 	movw	r0, #54825	; 0xd629
 80045fa:	f7fd f893 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 80045fe:	2102      	movs	r1, #2
 8004600:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8004604:	f7fd f88e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8004608:	21f2      	movs	r1, #242	; 0xf2
 800460a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800460e:	f7fd f889 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 8004612:	2102      	movs	r1, #2
 8004614:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004618:	f7fd f884 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 800461c:	21fe      	movs	r1, #254	; 0xfe
 800461e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8004622:	f7fd f87f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 8004626:	2103      	movs	r1, #3
 8004628:	f24d 602e 	movw	r0, #54830	; 0xd62e
 800462c:	f7fd f87a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 8004630:	2110      	movs	r1, #16
 8004632:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8004636:	f7fd f875 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 800463a:	2103      	movs	r1, #3
 800463c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004640:	f7fd f870 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 8004644:	2133      	movs	r1, #51	; 0x33
 8004646:	f24d 6031 	movw	r0, #54833	; 0xd631
 800464a:	f7fd f86b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 800464e:	2103      	movs	r1, #3
 8004650:	f24d 6032 	movw	r0, #54834	; 0xd632
 8004654:	f7fd f866 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 8004658:	216d      	movs	r1, #109	; 0x6d
 800465a:	f24d 6033 	movw	r0, #54835	; 0xd633
 800465e:	f7fd f861 	bl	8001724 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 8004662:	2155      	movs	r1, #85	; 0x55
 8004664:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8004668:	f7fd f85c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 800466c:	21aa      	movs	r1, #170	; 0xaa
 800466e:	f24f 0001 	movw	r0, #61441	; 0xf001
 8004672:	f7fd f857 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8004676:	2152      	movs	r1, #82	; 0x52
 8004678:	f24f 0002 	movw	r0, #61442	; 0xf002
 800467c:	f7fd f852 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8004680:	2108      	movs	r1, #8
 8004682:	f24f 0003 	movw	r0, #61443	; 0xf003
 8004686:	f7fd f84d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 800468a:	2100      	movs	r1, #0
 800468c:	f24f 0004 	movw	r0, #61444	; 0xf004
 8004690:	f7fd f848 	bl	8001724 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8004694:	21cc      	movs	r1, #204	; 0xcc
 8004696:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800469a:	f7fd f843 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 800469e:	2100      	movs	r1, #0
 80046a0:	f24b 1001 	movw	r0, #45313	; 0xb101
 80046a4:	f7fd f83e 	bl	8001724 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 80046a8:	2105      	movs	r1, #5
 80046aa:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80046ae:	f7fd f839 	bl	8001724 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 80046b2:	2170      	movs	r1, #112	; 0x70
 80046b4:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80046b8:	f7fd f834 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 80046bc:	2170      	movs	r1, #112	; 0x70
 80046be:	f24b 7001 	movw	r0, #46849	; 0xb701
 80046c2:	f7fd f82f 	bl	8001724 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 80046c6:	2101      	movs	r1, #1
 80046c8:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80046cc:	f7fd f82a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 80046d0:	2103      	movs	r1, #3
 80046d2:	f64b 0001 	movw	r0, #47105	; 0xb801
 80046d6:	f7fd f825 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 80046da:	2103      	movs	r1, #3
 80046dc:	f64b 0002 	movw	r0, #47106	; 0xb802
 80046e0:	f7fd f820 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 80046e4:	2103      	movs	r1, #3
 80046e6:	f64b 0003 	movw	r0, #47107	; 0xb803
 80046ea:	f7fd f81b 	bl	8001724 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 80046ee:	2102      	movs	r1, #2
 80046f0:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80046f4:	f7fd f816 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 80046f8:	2100      	movs	r1, #0
 80046fa:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80046fe:	f7fd f811 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8004702:	2100      	movs	r1, #0
 8004704:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004708:	f7fd f80c 	bl	8001724 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 800470c:	21d0      	movs	r1, #208	; 0xd0
 800470e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8004712:	f7fd f807 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8004716:	2102      	movs	r1, #2
 8004718:	f64c 1001 	movw	r0, #51457	; 0xc901
 800471c:	f7fd f802 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8004720:	2150      	movs	r1, #80	; 0x50
 8004722:	f64c 1002 	movw	r0, #51458	; 0xc902
 8004726:	f7fc fffd 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 800472a:	2150      	movs	r1, #80	; 0x50
 800472c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004730:	f7fc fff8 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 8004734:	2150      	movs	r1, #80	; 0x50
 8004736:	f64c 1004 	movw	r0, #51460	; 0xc904
 800473a:	f7fc fff3 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 800473e:	2100      	movs	r1, #0
 8004740:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8004744:	f7fc ffee 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8004748:	2155      	movs	r1, #85	; 0x55
 800474a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 800474e:	f7fc ffe9 	bl	8001724 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8004752:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8004756:	f7fc ffab 	bl	80016b0 <LCD_WR_REG>
		delay_us(120);
 800475a:	2078      	movs	r0, #120	; 0x78
 800475c:	f7fc fcd0 	bl	8001100 <delay_us>
		LCD_WR_REG(0x2900);
 8004760:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8004764:	f7fc ffa4 	bl	80016b0 <LCD_WR_REG>
 8004768:	f001 b95f 	b.w	8005a2a <LCD_Init+0x3752>
	}else if(lcddev.id==0x9325)//9325
 800476c:	4bec      	ldr	r3, [pc, #944]	; (8004b20 <LCD_Init+0x2848>)
 800476e:	889b      	ldrh	r3, [r3, #4]
 8004770:	f249 3225 	movw	r2, #37669	; 0x9325
 8004774:	4293      	cmp	r3, r2
 8004776:	f040 80d7 	bne.w	8004928 <LCD_Init+0x2650>
	{
		LCD_WriteReg(0x00E5,0x78F0);
 800477a:	f647 01f0 	movw	r1, #30960	; 0x78f0
 800477e:	20e5      	movs	r0, #229	; 0xe5
 8004780:	f7fc ffd0 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0001,0x0100);
 8004784:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004788:	2001      	movs	r0, #1
 800478a:	f7fc ffcb 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 800478e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004792:	2002      	movs	r0, #2
 8004794:	f7fc ffc6 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0003,0x1030);
 8004798:	f241 0130 	movw	r1, #4144	; 0x1030
 800479c:	2003      	movs	r0, #3
 800479e:	f7fc ffc1 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0004,0x0000);
 80047a2:	2100      	movs	r1, #0
 80047a4:	2004      	movs	r0, #4
 80047a6:	f7fc ffbd 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 80047aa:	f240 2102 	movw	r1, #514	; 0x202
 80047ae:	2008      	movs	r0, #8
 80047b0:	f7fc ffb8 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0009,0x0000);
 80047b4:	2100      	movs	r1, #0
 80047b6:	2009      	movs	r0, #9
 80047b8:	f7fc ffb4 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x000A,0x0000);
 80047bc:	2100      	movs	r1, #0
 80047be:	200a      	movs	r0, #10
 80047c0:	f7fc ffb0 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x000C,0x0000);
 80047c4:	2100      	movs	r1, #0
 80047c6:	200c      	movs	r0, #12
 80047c8:	f7fc ffac 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x000D,0x0000);
 80047cc:	2100      	movs	r1, #0
 80047ce:	200d      	movs	r0, #13
 80047d0:	f7fc ffa8 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x000F,0x0000);
 80047d4:	2100      	movs	r1, #0
 80047d6:	200f      	movs	r0, #15
 80047d8:	f7fc ffa4 	bl	8001724 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010,0x0000);
 80047dc:	2100      	movs	r1, #0
 80047de:	2010      	movs	r0, #16
 80047e0:	f7fc ffa0 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 80047e4:	2107      	movs	r1, #7
 80047e6:	2011      	movs	r0, #17
 80047e8:	f7fc ff9c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 80047ec:	2100      	movs	r1, #0
 80047ee:	2012      	movs	r0, #18
 80047f0:	f7fc ff98 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 80047f4:	2100      	movs	r1, #0
 80047f6:	2013      	movs	r0, #19
 80047f8:	f7fc ff94 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0000);
 80047fc:	2100      	movs	r1, #0
 80047fe:	2007      	movs	r0, #7
 8004800:	f7fc ff90 	bl	8001724 <LCD_WriteReg>
		//vgh
		LCD_WriteReg(0x0010,0x1690);
 8004804:	f241 6190 	movw	r1, #5776	; 0x1690
 8004808:	2010      	movs	r0, #16
 800480a:	f7fc ff8b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0227);
 800480e:	f240 2127 	movw	r1, #551	; 0x227
 8004812:	2011      	movs	r0, #17
 8004814:	f7fc ff86 	bl	8001724 <LCD_WriteReg>
		//delayms(100);
		//vregiout
		LCD_WriteReg(0x0012,0x009D); //0x001b
 8004818:	219d      	movs	r1, #157	; 0x9d
 800481a:	2012      	movs	r0, #18
 800481c:	f7fc ff82 	bl	8001724 <LCD_WriteReg>
		//delayms(100);
		//vom amplitude
		LCD_WriteReg(0x0013,0x1900);
 8004820:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8004824:	2013      	movs	r0, #19
 8004826:	f7fc ff7d 	bl	8001724 <LCD_WriteReg>
		//delayms(100);
		//vom H
		LCD_WriteReg(0x0029,0x0025);
 800482a:	2125      	movs	r1, #37	; 0x25
 800482c:	2029      	movs	r0, #41	; 0x29
 800482e:	f7fc ff79 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x002B,0x000D);
 8004832:	210d      	movs	r1, #13
 8004834:	202b      	movs	r0, #43	; 0x2b
 8004836:	f7fc ff75 	bl	8001724 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030,0x0007);
 800483a:	2107      	movs	r1, #7
 800483c:	2030      	movs	r0, #48	; 0x30
 800483e:	f7fc ff71 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0303);
 8004842:	f240 3103 	movw	r1, #771	; 0x303
 8004846:	2031      	movs	r0, #49	; 0x31
 8004848:	f7fc ff6c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0003);// 0006
 800484c:	2103      	movs	r1, #3
 800484e:	2032      	movs	r0, #50	; 0x32
 8004850:	f7fc ff68 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0206);
 8004854:	f240 2106 	movw	r1, #518	; 0x206
 8004858:	2035      	movs	r0, #53	; 0x35
 800485a:	f7fc ff63 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x0008);
 800485e:	2108      	movs	r1, #8
 8004860:	2036      	movs	r0, #54	; 0x36
 8004862:	f7fc ff5f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0406);
 8004866:	f240 4106 	movw	r1, #1030	; 0x406
 800486a:	2037      	movs	r0, #55	; 0x37
 800486c:	f7fc ff5a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0304);//0200
 8004870:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004874:	2038      	movs	r0, #56	; 0x38
 8004876:	f7fc ff55 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0007);
 800487a:	2107      	movs	r1, #7
 800487c:	2039      	movs	r0, #57	; 0x39
 800487e:	f7fc ff51 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x003C,0x0602);// 0504
 8004882:	f240 6102 	movw	r1, #1538	; 0x602
 8004886:	203c      	movs	r0, #60	; 0x3c
 8004888:	f7fc ff4c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x003D,0x0008);
 800488c:	2108      	movs	r1, #8
 800488e:	203d      	movs	r0, #61	; 0x3d
 8004890:	f7fc ff48 	bl	8001724 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050,0x0000);
 8004894:	2100      	movs	r1, #0
 8004896:	2050      	movs	r0, #80	; 0x50
 8004898:	f7fc ff44 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00EF);
 800489c:	21ef      	movs	r1, #239	; 0xef
 800489e:	2051      	movs	r0, #81	; 0x51
 80048a0:	f7fc ff40 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 80048a4:	2100      	movs	r1, #0
 80048a6:	2052      	movs	r0, #82	; 0x52
 80048a8:	f7fc ff3c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013F);
 80048ac:	f240 113f 	movw	r1, #319	; 0x13f
 80048b0:	2053      	movs	r0, #83	; 0x53
 80048b2:	f7fc ff37 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0xA700);
 80048b6:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80048ba:	2060      	movs	r0, #96	; 0x60
 80048bc:	f7fc ff32 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 80048c0:	2101      	movs	r1, #1
 80048c2:	2061      	movs	r0, #97	; 0x61
 80048c4:	f7fc ff2e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x006A,0x0000);
 80048c8:	2100      	movs	r1, #0
 80048ca:	206a      	movs	r0, #106	; 0x6a
 80048cc:	f7fc ff2a 	bl	8001724 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080,0x0000);
 80048d0:	2100      	movs	r1, #0
 80048d2:	2080      	movs	r0, #128	; 0x80
 80048d4:	f7fc ff26 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0081,0x0000);
 80048d8:	2100      	movs	r1, #0
 80048da:	2081      	movs	r0, #129	; 0x81
 80048dc:	f7fc ff22 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0082,0x0000);
 80048e0:	2100      	movs	r1, #0
 80048e2:	2082      	movs	r0, #130	; 0x82
 80048e4:	f7fc ff1e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0083,0x0000);
 80048e8:	2100      	movs	r1, #0
 80048ea:	2083      	movs	r0, #131	; 0x83
 80048ec:	f7fc ff1a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0084,0x0000);
 80048f0:	2100      	movs	r1, #0
 80048f2:	2084      	movs	r0, #132	; 0x84
 80048f4:	f7fc ff16 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0085,0x0000);
 80048f8:	2100      	movs	r1, #0
 80048fa:	2085      	movs	r0, #133	; 0x85
 80048fc:	f7fc ff12 	bl	8001724 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090,0x0010);
 8004900:	2110      	movs	r1, #16
 8004902:	2090      	movs	r0, #144	; 0x90
 8004904:	f7fc ff0e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 8004908:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800490c:	2092      	movs	r0, #146	; 0x92
 800490e:	f7fc ff09 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0x0007,0x0133);
 8004912:	f240 1133 	movw	r1, #307	; 0x133
 8004916:	2007      	movs	r0, #7
 8004918:	f7fc ff04 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x0022);//
 800491c:	2122      	movs	r1, #34	; 0x22
 800491e:	2000      	movs	r0, #0
 8004920:	f7fc ff00 	bl	8001724 <LCD_WriteReg>
 8004924:	f001 b881 	b.w	8005a2a <LCD_Init+0x3752>
	}else if(lcddev.id==0x9328)//ILI9328   OK
 8004928:	4b7d      	ldr	r3, [pc, #500]	; (8004b20 <LCD_Init+0x2848>)
 800492a:	889b      	ldrh	r3, [r3, #4]
 800492c:	f249 3228 	movw	r2, #37672	; 0x9328
 8004930:	4293      	cmp	r3, r2
 8004932:	f040 80f7 	bne.w	8004b24 <LCD_Init+0x284c>
	{
  		LCD_WriteReg(0x00EC,0x108F);// internal timeing
 8004936:	f241 018f 	movw	r1, #4239	; 0x108f
 800493a:	20ec      	movs	r0, #236	; 0xec
 800493c:	f7fc fef2 	bl	8001724 <LCD_WriteReg>
 		LCD_WriteReg(0x00EF,0x1234);// ADD
 8004940:	f241 2134 	movw	r1, #4660	; 0x1234
 8004944:	20ef      	movs	r0, #239	; 0xef
 8004946:	f7fc feed 	bl	8001724 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);
        //LCD_WriteReg(0x0000,0x0001);//开启内部时钟
        LCD_WriteReg(0x0001,0x0100);
 800494a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800494e:	2001      	movs	r0, #1
 8004950:	f7fc fee8 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);//电源开启
 8004954:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004958:	2002      	movs	r0, #2
 800495a:	f7fc fee3 	bl	8001724 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(0<<3) );//65K
 800495e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004962:	2003      	movs	r0, #3
 8004964:	f7fc fede 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 8004968:	2100      	movs	r1, #0
 800496a:	2004      	movs	r0, #4
 800496c:	f7fc feda 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x0202);
 8004970:	f240 2102 	movw	r1, #514	; 0x202
 8004974:	2008      	movs	r0, #8
 8004976:	f7fc fed5 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0009,0x0000);
 800497a:	2100      	movs	r1, #0
 800497c:	2009      	movs	r0, #9
 800497e:	f7fc fed1 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x000a,0x0000);//display setting
 8004982:	2100      	movs	r1, #0
 8004984:	200a      	movs	r0, #10
 8004986:	f7fc fecd 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x000c,0x0001);//display setting
 800498a:	2101      	movs	r1, #1
 800498c:	200c      	movs	r0, #12
 800498e:	f7fc fec9 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x000d,0x0000);//0f3c
 8004992:	2100      	movs	r1, #0
 8004994:	200d      	movs	r0, #13
 8004996:	f7fc fec5 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x000f,0x0000);
 800499a:	2100      	movs	r1, #0
 800499c:	200f      	movs	r0, #15
 800499e:	f7fc fec1 	bl	8001724 <LCD_WriteReg>
		//电源配置
        LCD_WriteReg(0x0010,0x0000);
 80049a2:	2100      	movs	r1, #0
 80049a4:	2010      	movs	r0, #16
 80049a6:	f7fc febd 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0007);
 80049aa:	2107      	movs	r1, #7
 80049ac:	2011      	movs	r0, #17
 80049ae:	f7fc feb9 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x0000);
 80049b2:	2100      	movs	r1, #0
 80049b4:	2012      	movs	r0, #18
 80049b6:	f7fc feb5 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0000);
 80049ba:	2100      	movs	r1, #0
 80049bc:	2013      	movs	r0, #19
 80049be:	f7fc feb1 	bl	8001724 <LCD_WriteReg>
     	LCD_WriteReg(0x0007,0x0001);
 80049c2:	2101      	movs	r1, #1
 80049c4:	2007      	movs	r0, #7
 80049c6:	f7fc fead 	bl	8001724 <LCD_WriteReg>
       	HAL_Delay(50);
 80049ca:	2032      	movs	r0, #50	; 0x32
 80049cc:	f003 fb32 	bl	8008034 <HAL_Delay>
        LCD_WriteReg(0x0010,0x1490);
 80049d0:	f241 4190 	movw	r1, #5264	; 0x1490
 80049d4:	2010      	movs	r0, #16
 80049d6:	f7fc fea5 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0227);
 80049da:	f240 2127 	movw	r1, #551	; 0x227
 80049de:	2011      	movs	r0, #17
 80049e0:	f7fc fea0 	bl	8001724 <LCD_WriteReg>
        HAL_Delay(50);
 80049e4:	2032      	movs	r0, #50	; 0x32
 80049e6:	f003 fb25 	bl	8008034 <HAL_Delay>
        LCD_WriteReg(0x0012,0x008A);
 80049ea:	218a      	movs	r1, #138	; 0x8a
 80049ec:	2012      	movs	r0, #18
 80049ee:	f7fc fe99 	bl	8001724 <LCD_WriteReg>
        HAL_Delay(50);
 80049f2:	2032      	movs	r0, #50	; 0x32
 80049f4:	f003 fb1e 	bl	8008034 <HAL_Delay>
        LCD_WriteReg(0x0013,0x1a00);
 80049f8:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 80049fc:	2013      	movs	r0, #19
 80049fe:	f7fc fe91 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x0006);
 8004a02:	2106      	movs	r1, #6
 8004a04:	2029      	movs	r0, #41	; 0x29
 8004a06:	f7fc fe8d 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x002b,0x000d);
 8004a0a:	210d      	movs	r1, #13
 8004a0c:	202b      	movs	r0, #43	; 0x2b
 8004a0e:	f7fc fe89 	bl	8001724 <LCD_WriteReg>
        HAL_Delay(50);
 8004a12:	2032      	movs	r0, #50	; 0x32
 8004a14:	f003 fb0e 	bl	8008034 <HAL_Delay>
        LCD_WriteReg(0x0020,0x0000);
 8004a18:	2100      	movs	r1, #0
 8004a1a:	2020      	movs	r0, #32
 8004a1c:	f7fc fe82 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 8004a20:	2100      	movs	r1, #0
 8004a22:	2021      	movs	r0, #33	; 0x21
 8004a24:	f7fc fe7e 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(50);
 8004a28:	2032      	movs	r0, #50	; 0x32
 8004a2a:	f003 fb03 	bl	8008034 <HAL_Delay>
		//伽马校正
        LCD_WriteReg(0x0030,0x0000);
 8004a2e:	2100      	movs	r1, #0
 8004a30:	2030      	movs	r0, #48	; 0x30
 8004a32:	f7fc fe77 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0604);
 8004a36:	f240 6104 	movw	r1, #1540	; 0x604
 8004a3a:	2031      	movs	r0, #49	; 0x31
 8004a3c:	f7fc fe72 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0305);
 8004a40:	f240 3105 	movw	r1, #773	; 0x305
 8004a44:	2032      	movs	r0, #50	; 0x32
 8004a46:	f7fc fe6d 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0000);
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	2035      	movs	r0, #53	; 0x35
 8004a4e:	f7fc fe69 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x0C09);
 8004a52:	f640 4109 	movw	r1, #3081	; 0xc09
 8004a56:	2036      	movs	r0, #54	; 0x36
 8004a58:	f7fc fe64 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0204);
 8004a5c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004a60:	2037      	movs	r0, #55	; 0x37
 8004a62:	f7fc fe5f 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0301);
 8004a66:	f240 3101 	movw	r1, #769	; 0x301
 8004a6a:	2038      	movs	r0, #56	; 0x38
 8004a6c:	f7fc fe5a 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0707);
 8004a70:	f240 7107 	movw	r1, #1799	; 0x707
 8004a74:	2039      	movs	r0, #57	; 0x39
 8004a76:	f7fc fe55 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x003c,0x0000);
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	203c      	movs	r0, #60	; 0x3c
 8004a7e:	f7fc fe51 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x003d,0x0a0a);
 8004a82:	f640 210a 	movw	r1, #2570	; 0xa0a
 8004a86:	203d      	movs	r0, #61	; 0x3d
 8004a88:	f7fc fe4c 	bl	8001724 <LCD_WriteReg>
        HAL_Delay(50);
 8004a8c:	2032      	movs	r0, #50	; 0x32
 8004a8e:	f003 fad1 	bl	8008034 <HAL_Delay>
        LCD_WriteReg(0x0050,0x0000); //水平GRAM起始位置
 8004a92:	2100      	movs	r1, #0
 8004a94:	2050      	movs	r0, #80	; 0x50
 8004a96:	f7fc fe45 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00ef); //水平GRAM终止位置
 8004a9a:	21ef      	movs	r1, #239	; 0xef
 8004a9c:	2051      	movs	r0, #81	; 0x51
 8004a9e:	f7fc fe41 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000); //垂直GRAM起始位置
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	2052      	movs	r0, #82	; 0x52
 8004aa6:	f7fc fe3d 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013f); //垂直GRAM终止位置
 8004aaa:	f240 113f 	movw	r1, #319	; 0x13f
 8004aae:	2053      	movs	r0, #83	; 0x53
 8004ab0:	f7fc fe38 	bl	8001724 <LCD_WriteReg>

         LCD_WriteReg(0x0060,0xa700);
 8004ab4:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8004ab8:	2060      	movs	r0, #96	; 0x60
 8004aba:	f7fc fe33 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 8004abe:	2101      	movs	r1, #1
 8004ac0:	2061      	movs	r0, #97	; 0x61
 8004ac2:	f7fc fe2f 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x006a,0x0000);
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	206a      	movs	r0, #106	; 0x6a
 8004aca:	f7fc fe2b 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8004ace:	2100      	movs	r1, #0
 8004ad0:	2080      	movs	r0, #128	; 0x80
 8004ad2:	f7fc fe27 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0081,0x0000);
 8004ad6:	2100      	movs	r1, #0
 8004ad8:	2081      	movs	r0, #129	; 0x81
 8004ada:	f7fc fe23 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8004ade:	2100      	movs	r1, #0
 8004ae0:	2082      	movs	r0, #130	; 0x82
 8004ae2:	f7fc fe1f 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	2083      	movs	r0, #131	; 0x83
 8004aea:	f7fc fe1b 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8004aee:	2100      	movs	r1, #0
 8004af0:	2084      	movs	r0, #132	; 0x84
 8004af2:	f7fc fe17 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 8004af6:	2100      	movs	r1, #0
 8004af8:	2085      	movs	r0, #133	; 0x85
 8004afa:	f7fc fe13 	bl	8001724 <LCD_WriteReg>

        LCD_WriteReg(0x0090,0x0010);
 8004afe:	2110      	movs	r1, #16
 8004b00:	2090      	movs	r0, #144	; 0x90
 8004b02:	f7fc fe0f 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0600);
 8004b06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004b0a:	2092      	movs	r0, #146	; 0x92
 8004b0c:	f7fc fe0a 	bl	8001724 <LCD_WriteReg>
        //开启显示设置
        LCD_WriteReg(0x0007,0x0133);
 8004b10:	f240 1133 	movw	r1, #307	; 0x133
 8004b14:	2007      	movs	r0, #7
 8004b16:	f7fc fe05 	bl	8001724 <LCD_WriteReg>
 8004b1a:	f000 bf86 	b.w	8005a2a <LCD_Init+0x3752>
 8004b1e:	bf00      	nop
 8004b20:	200001ec 	.word	0x200001ec
	}else if(lcddev.id==0x9320)//测试OK.
 8004b24:	4bce      	ldr	r3, [pc, #824]	; (8004e60 <LCD_Init+0x2b88>)
 8004b26:	889b      	ldrh	r3, [r3, #4]
 8004b28:	f249 3220 	movw	r2, #37664	; 0x9320
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	f040 80ad 	bne.w	8004c8c <LCD_Init+0x29b4>
	{
		LCD_WriteReg(0x00,0x0000);
 8004b32:	2100      	movs	r1, #0
 8004b34:	2000      	movs	r0, #0
 8004b36:	f7fc fdf5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x01,0x0100);	//Driver Output Contral.
 8004b3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b3e:	2001      	movs	r0, #1
 8004b40:	f7fc fdf0 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);	//LCD Driver Waveform Contral.
 8004b44:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004b48:	2002      	movs	r0, #2
 8004b4a:	f7fc fdeb 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode Set.
 8004b4e:	f241 0130 	movw	r1, #4144	; 0x1030
 8004b52:	2003      	movs	r0, #3
 8004b54:	f7fc fde6 	bl	8001724 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04,0x0000);	//Scalling Contral.
 8004b58:	2100      	movs	r1, #0
 8004b5a:	2004      	movs	r0, #4
 8004b5c:	f7fc fde2 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0202);	//Display Contral 2.(0x0207)
 8004b60:	f240 2102 	movw	r1, #514	; 0x202
 8004b64:	2008      	movs	r0, #8
 8004b66:	f7fc fddd 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000);	//Display Contral 3.(0x0000)
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	2009      	movs	r0, #9
 8004b6e:	f7fc fdd9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0a,0x0000);	//Frame Cycle Contal.(0x0000)
 8004b72:	2100      	movs	r1, #0
 8004b74:	200a      	movs	r0, #10
 8004b76:	f7fc fdd5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0c,(1<<0));	//Extern Display Interface Contral 1.(0x0000)
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	200c      	movs	r0, #12
 8004b7e:	f7fc fdd1 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0d,0x0000);	//Frame Maker Position.
 8004b82:	2100      	movs	r1, #0
 8004b84:	200d      	movs	r0, #13
 8004b86:	f7fc fdcd 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0f,0x0000);	//Extern Display Interface Contral 2.
 8004b8a:	2100      	movs	r1, #0
 8004b8c:	200f      	movs	r0, #15
 8004b8e:	f7fc fdc9 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(50);
 8004b92:	2032      	movs	r0, #50	; 0x32
 8004b94:	f003 fa4e 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0x07,0x0101);	//Display Contral.
 8004b98:	f240 1101 	movw	r1, #257	; 0x101
 8004b9c:	2007      	movs	r0, #7
 8004b9e:	f7fc fdc1 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(50);
 8004ba2:	2032      	movs	r0, #50	; 0x32
 8004ba4:	f003 fa46 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	//Power Control 1.(0x16b0)
 8004ba8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8004bac:	2010      	movs	r0, #16
 8004bae:	f7fc fdb9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0007);								//Power Control 2.(0x0001)
 8004bb2:	2107      	movs	r1, #7
 8004bb4:	2011      	movs	r0, #17
 8004bb6:	f7fc fdb5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x12,(1<<8)|(1<<4)|(0<<0));				//Power Control 3.(0x0138)
 8004bba:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004bbe:	2012      	movs	r0, #18
 8004bc0:	f7fc fdb0 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0b00);								//Power Control 4.
 8004bc4:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004bc8:	2013      	movs	r0, #19
 8004bca:	f7fc fdab 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0000);								//Power Control 7.
 8004bce:	2100      	movs	r1, #0
 8004bd0:	2029      	movs	r0, #41	; 0x29
 8004bd2:	f7fc fda7 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0x2b,(1<<14)|(1<<4));
 8004bd6:	f244 0110 	movw	r1, #16400	; 0x4010
 8004bda:	202b      	movs	r0, #43	; 0x2b
 8004bdc:	f7fc fda2 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x50,0);	//Set X Star
 8004be0:	2100      	movs	r1, #0
 8004be2:	2050      	movs	r0, #80	; 0x50
 8004be4:	f7fc fd9e 	bl	8001724 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51,239);	//Set Y Star
 8004be8:	21ef      	movs	r1, #239	; 0xef
 8004bea:	2051      	movs	r0, #81	; 0x51
 8004bec:	f7fc fd9a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x52,0);	//Set Y End.t.
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	2052      	movs	r0, #82	; 0x52
 8004bf4:	f7fc fd96 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x53,319);	//
 8004bf8:	f240 113f 	movw	r1, #319	; 0x13f
 8004bfc:	2053      	movs	r0, #83	; 0x53
 8004bfe:	f7fc fd91 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0x60,0x2700);	//Driver Output Control.
 8004c02:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004c06:	2060      	movs	r0, #96	; 0x60
 8004c08:	f7fc fd8c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x61,0x0001);	//Driver Output Control.
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	2061      	movs	r0, #97	; 0x61
 8004c10:	f7fc fd88 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x6a,0x0000);	//Vertical Srcoll Control.
 8004c14:	2100      	movs	r1, #0
 8004c16:	206a      	movs	r0, #106	; 0x6a
 8004c18:	f7fc fd84 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0x80,0x0000);	//Display Position? Partial Display 1.
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	2080      	movs	r0, #128	; 0x80
 8004c20:	f7fc fd80 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000);	//RAM Address Start? Partial Display 1.
 8004c24:	2100      	movs	r1, #0
 8004c26:	2081      	movs	r0, #129	; 0x81
 8004c28:	f7fc fd7c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000);	//RAM Address End-Partial Display 1.
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	2082      	movs	r0, #130	; 0x82
 8004c30:	f7fc fd78 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000);	//Displsy Position? Partial Display 2.
 8004c34:	2100      	movs	r1, #0
 8004c36:	2083      	movs	r0, #131	; 0x83
 8004c38:	f7fc fd74 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000);	//RAM Address Start? Partial Display 2.
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	2084      	movs	r0, #132	; 0x84
 8004c40:	f7fc fd70 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000);	//RAM Address End? Partial Display 2.
 8004c44:	2100      	movs	r1, #0
 8004c46:	2085      	movs	r0, #133	; 0x85
 8004c48:	f7fc fd6c 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0x90,(0<<7)|(16<<0));	//Frame Cycle Contral.(0x0013)
 8004c4c:	2110      	movs	r1, #16
 8004c4e:	2090      	movs	r0, #144	; 0x90
 8004c50:	f7fc fd68 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);	//Panel Interface Contral 2.(0x0000)
 8004c54:	2100      	movs	r1, #0
 8004c56:	2092      	movs	r0, #146	; 0x92
 8004c58:	f7fc fd64 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0001);	//Panel Interface Contral 3.
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	2093      	movs	r0, #147	; 0x93
 8004c60:	f7fc fd60 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);	//Frame Cycle Contral.(0x0110)
 8004c64:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004c68:	2095      	movs	r0, #149	; 0x95
 8004c6a:	f7fc fd5b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x97,(0<<8));	//
 8004c6e:	2100      	movs	r1, #0
 8004c70:	2097      	movs	r0, #151	; 0x97
 8004c72:	f7fc fd57 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x98,0x0000);	//Frame Cycle Contral.
 8004c76:	2100      	movs	r1, #0
 8004c78:	2098      	movs	r0, #152	; 0x98
 8004c7a:	f7fc fd53 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);	//(0x0173)
 8004c7e:	f240 1173 	movw	r1, #371	; 0x173
 8004c82:	2007      	movs	r0, #7
 8004c84:	f7fc fd4e 	bl	8001724 <LCD_WriteReg>
 8004c88:	f000 becf 	b.w	8005a2a <LCD_Init+0x3752>
	}else if(lcddev.id==0X9331)//OK |/|/|
 8004c8c:	4b74      	ldr	r3, [pc, #464]	; (8004e60 <LCD_Init+0x2b88>)
 8004c8e:	889b      	ldrh	r3, [r3, #4]
 8004c90:	f249 3231 	movw	r2, #37681	; 0x9331
 8004c94:	4293      	cmp	r3, r2
 8004c96:	f040 80e5 	bne.w	8004e64 <LCD_Init+0x2b8c>
	{
		LCD_WriteReg(0x00E7, 0x1014);
 8004c9a:	f241 0114 	movw	r1, #4116	; 0x1014
 8004c9e:	20e7      	movs	r0, #231	; 0xe7
 8004ca0:	f7fc fd40 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004ca4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ca8:	2001      	movs	r0, #1
 8004caa:	f7fc fd3b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004cae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004cb2:	2002      	movs	r0, #2
 8004cb4:	f7fc fd36 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(1<<3));//65K
 8004cb8:	f241 0138 	movw	r1, #4152	; 0x1038
 8004cbc:	2003      	movs	r0, #3
 8004cbe:	f7fc fd31 	bl	8001724 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004cc2:	f240 2102 	movw	r1, #514	; 0x202
 8004cc6:	2008      	movs	r0, #8
 8004cc8:	f7fc fd2c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004ccc:	2100      	movs	r1, #0
 8004cce:	2009      	movs	r0, #9
 8004cd0:	f7fc fd28 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	200a      	movs	r0, #10
 8004cd8:	f7fc fd24 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004cdc:	2100      	movs	r1, #0
 8004cde:	200c      	movs	r0, #12
 8004ce0:	f7fc fd20 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	200d      	movs	r0, #13
 8004ce8:	f7fc fd1c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004cec:	2100      	movs	r1, #0
 8004cee:	200f      	movs	r0, #15
 8004cf0:	f7fc fd18 	bl	8001724 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	2010      	movs	r0, #16
 8004cf8:	f7fc fd14 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004cfc:	2107      	movs	r1, #7
 8004cfe:	2011      	movs	r0, #17
 8004d00:	f7fc fd10 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004d04:	2100      	movs	r1, #0
 8004d06:	2012      	movs	r0, #18
 8004d08:	f7fc fd0c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	2013      	movs	r0, #19
 8004d10:	f7fc fd08 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004d14:	20c8      	movs	r0, #200	; 0xc8
 8004d16:	f003 f98d 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004d1a:	f241 6190 	movw	r1, #5776	; 0x1690
 8004d1e:	2010      	movs	r0, #16
 8004d20:	f7fc fd00 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004d24:	f240 2127 	movw	r1, #551	; 0x227
 8004d28:	2011      	movs	r0, #17
 8004d2a:	f7fc fcfb 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004d2e:	2032      	movs	r0, #50	; 0x32
 8004d30:	f003 f980 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004d34:	210c      	movs	r1, #12
 8004d36:	2012      	movs	r0, #18
 8004d38:	f7fc fcf4 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004d3c:	2032      	movs	r0, #50	; 0x32
 8004d3e:	f003 f979 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004d42:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d46:	2013      	movs	r0, #19
 8004d48:	f7fc fcec 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004d4c:	2111      	movs	r1, #17
 8004d4e:	2029      	movs	r0, #41	; 0x29
 8004d50:	f7fc fce8 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004d54:	210b      	movs	r1, #11
 8004d56:	202b      	movs	r0, #43	; 0x2b
 8004d58:	f7fc fce4 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004d5c:	2032      	movs	r0, #50	; 0x32
 8004d5e:	f003 f969 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004d62:	2100      	movs	r1, #0
 8004d64:	2020      	movs	r0, #32
 8004d66:	f7fc fcdd 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004d6a:	f240 113f 	movw	r1, #319	; 0x13f
 8004d6e:	2021      	movs	r0, #33	; 0x21
 8004d70:	f7fc fcd8 	bl	8001724 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004d74:	2100      	movs	r1, #0
 8004d76:	2030      	movs	r0, #48	; 0x30
 8004d78:	f7fc fcd4 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004d7c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004d80:	2031      	movs	r0, #49	; 0x31
 8004d82:	f7fc fccf 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004d86:	2100      	movs	r1, #0
 8004d88:	2032      	movs	r0, #50	; 0x32
 8004d8a:	f7fc fccb 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004d8e:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004d92:	2035      	movs	r0, #53	; 0x35
 8004d94:	f7fc fcc6 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004d98:	f241 610a 	movw	r1, #5642	; 0x160a
 8004d9c:	2036      	movs	r0, #54	; 0x36
 8004d9e:	f7fc fcc1 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004da2:	f240 7107 	movw	r1, #1799	; 0x707
 8004da6:	2037      	movs	r0, #55	; 0x37
 8004da8:	f7fc fcbc 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004dac:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004db0:	2038      	movs	r0, #56	; 0x38
 8004db2:	f7fc fcb7 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004db6:	f240 7107 	movw	r1, #1799	; 0x707
 8004dba:	2039      	movs	r0, #57	; 0x39
 8004dbc:	f7fc fcb2 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004dc0:	f240 4102 	movw	r1, #1026	; 0x402
 8004dc4:	203c      	movs	r0, #60	; 0x3c
 8004dc6:	f7fc fcad 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004dca:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004dce:	203d      	movs	r0, #61	; 0x3d
 8004dd0:	f7fc fca8 	bl	8001724 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	2050      	movs	r0, #80	; 0x50
 8004dd8:	f7fc fca4 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004ddc:	21ef      	movs	r1, #239	; 0xef
 8004dde:	2051      	movs	r0, #81	; 0x51
 8004de0:	f7fc fca0 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004de4:	2100      	movs	r1, #0
 8004de6:	2052      	movs	r0, #82	; 0x52
 8004de8:	f7fc fc9c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004dec:	f240 113f 	movw	r1, #319	; 0x13f
 8004df0:	2053      	movs	r0, #83	; 0x53
 8004df2:	f7fc fc97 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004df6:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004dfa:	2060      	movs	r0, #96	; 0x60
 8004dfc:	f7fc fc92 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV
 8004e00:	2101      	movs	r1, #1
 8004e02:	2061      	movs	r0, #97	; 0x61
 8004e04:	f7fc fc8e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004e08:	2100      	movs	r1, #0
 8004e0a:	206a      	movs	r0, #106	; 0x6a
 8004e0c:	f7fc fc8a 	bl	8001724 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004e10:	2100      	movs	r1, #0
 8004e12:	2080      	movs	r0, #128	; 0x80
 8004e14:	f7fc fc86 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004e18:	2100      	movs	r1, #0
 8004e1a:	2081      	movs	r0, #129	; 0x81
 8004e1c:	f7fc fc82 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004e20:	2100      	movs	r1, #0
 8004e22:	2082      	movs	r0, #130	; 0x82
 8004e24:	f7fc fc7e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004e28:	2100      	movs	r1, #0
 8004e2a:	2083      	movs	r0, #131	; 0x83
 8004e2c:	f7fc fc7a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004e30:	2100      	movs	r1, #0
 8004e32:	2084      	movs	r0, #132	; 0x84
 8004e34:	f7fc fc76 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004e38:	2100      	movs	r1, #0
 8004e3a:	2085      	movs	r0, #133	; 0x85
 8004e3c:	f7fc fc72 	bl	8001724 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004e40:	2110      	movs	r1, #16
 8004e42:	2090      	movs	r0, #144	; 0x90
 8004e44:	f7fc fc6e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004e48:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004e4c:	2092      	movs	r0, #146	; 0x92
 8004e4e:	f7fc fc69 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004e52:	f240 1133 	movw	r1, #307	; 0x133
 8004e56:	2007      	movs	r0, #7
 8004e58:	f7fc fc64 	bl	8001724 <LCD_WriteReg>
 8004e5c:	f000 bde5 	b.w	8005a2a <LCD_Init+0x3752>
 8004e60:	200001ec 	.word	0x200001ec
	}else if(lcddev.id==0x5408)
 8004e64:	4be2      	ldr	r3, [pc, #904]	; (80051f0 <LCD_Init+0x2f18>)
 8004e66:	889b      	ldrh	r3, [r3, #4]
 8004e68:	f245 4208 	movw	r2, #21512	; 0x5408
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	f040 80a3 	bne.w	8004fb8 <LCD_Init+0x2ce0>
	{
		LCD_WriteReg(0x01,0x0100);
 8004e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e76:	2001      	movs	r0, #1
 8004e78:	f7fc fc54 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);//LCD Driving Waveform Contral
 8004e7c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004e80:	2002      	movs	r0, #2
 8004e82:	f7fc fc4f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode设置
 8004e86:	f241 0130 	movw	r1, #4144	; 0x1030
 8004e8a:	2003      	movs	r0, #3
 8004e8c:	f7fc fc4a 	bl	8001724 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04,0x0000); //Scalling Control register
 8004e90:	2100      	movs	r1, #0
 8004e92:	2004      	movs	r0, #4
 8004e94:	f7fc fc46 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0207); //Display Control 2
 8004e98:	f240 2107 	movw	r1, #519	; 0x207
 8004e9c:	2008      	movs	r0, #8
 8004e9e:	f7fc fc41 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000); //Display Control 3
 8004ea2:	2100      	movs	r1, #0
 8004ea4:	2009      	movs	r0, #9
 8004ea6:	f7fc fc3d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0A,0x0000); //Frame Cycle Control
 8004eaa:	2100      	movs	r1, #0
 8004eac:	200a      	movs	r0, #10
 8004eae:	f7fc fc39 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0C,0x0000); //External Display Interface Control 1
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	200c      	movs	r0, #12
 8004eb6:	f7fc fc35 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0D,0x0000); //Frame Maker Position
 8004eba:	2100      	movs	r1, #0
 8004ebc:	200d      	movs	r0, #13
 8004ebe:	f7fc fc31 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0F,0x0000); //External Display Interface Control 2
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	200f      	movs	r0, #15
 8004ec6:	f7fc fc2d 	bl	8001724 <LCD_WriteReg>
 		HAL_Delay(20);
 8004eca:	2014      	movs	r0, #20
 8004ecc:	f003 f8b2 	bl	8008034 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10,0x16B0); //0x14B0 //Power Control 1
 8004ed0:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004ed4:	2010      	movs	r0, #16
 8004ed6:	f7fc fc25 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0001); //0x0007 //Power Control 2
 8004eda:	2101      	movs	r1, #1
 8004edc:	2011      	movs	r0, #17
 8004ede:	f7fc fc21 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x17,0x0001); //0x0000 //Power Control 3
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	2017      	movs	r0, #23
 8004ee6:	f7fc fc1d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x12,0x0138); //0x013B //Power Control 4
 8004eea:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004eee:	2012      	movs	r0, #18
 8004ef0:	f7fc fc18 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0800); //0x0800 //Power Control 5
 8004ef4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ef8:	2013      	movs	r0, #19
 8004efa:	f7fc fc13 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0009); //NVM read data 2
 8004efe:	2109      	movs	r1, #9
 8004f00:	2029      	movs	r0, #41	; 0x29
 8004f02:	f7fc fc0f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x2a,0x0009); //NVM read data 3
 8004f06:	2109      	movs	r1, #9
 8004f08:	202a      	movs	r0, #42	; 0x2a
 8004f0a:	f7fc fc0b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0xa4,0x0000);
 8004f0e:	2100      	movs	r1, #0
 8004f10:	20a4      	movs	r0, #164	; 0xa4
 8004f12:	f7fc fc07 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x50,0x0000); //设置操作窗口的X轴开始列
 8004f16:	2100      	movs	r1, #0
 8004f18:	2050      	movs	r0, #80	; 0x50
 8004f1a:	f7fc fc03 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x51,0x00EF); //设置操作窗口的X轴结束列
 8004f1e:	21ef      	movs	r1, #239	; 0xef
 8004f20:	2051      	movs	r0, #81	; 0x51
 8004f22:	f7fc fbff 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x52,0x0000); //设置操作窗口的Y轴开始行
 8004f26:	2100      	movs	r1, #0
 8004f28:	2052      	movs	r0, #82	; 0x52
 8004f2a:	f7fc fbfb 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x53,0x013F); //设置操作窗口的Y轴结束行
 8004f2e:	f240 113f 	movw	r1, #319	; 0x13f
 8004f32:	2053      	movs	r0, #83	; 0x53
 8004f34:	f7fc fbf6 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x60,0x2700); //Driver Output Control
 8004f38:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f3c:	2060      	movs	r0, #96	; 0x60
 8004f3e:	f7fc fbf1 	bl	8001724 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61,0x0001); //Driver Output Control
 8004f42:	2101      	movs	r1, #1
 8004f44:	2061      	movs	r0, #97	; 0x61
 8004f46:	f7fc fbed 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x6A,0x0000); //Vertical Scroll Control
 8004f4a:	2100      	movs	r1, #0
 8004f4c:	206a      	movs	r0, #106	; 0x6a
 8004f4e:	f7fc fbe9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x80,0x0000); //Display Position – Partial Display 1
 8004f52:	2100      	movs	r1, #0
 8004f54:	2080      	movs	r0, #128	; 0x80
 8004f56:	f7fc fbe5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000); //RAM Address Start – Partial Display 1
 8004f5a:	2100      	movs	r1, #0
 8004f5c:	2081      	movs	r0, #129	; 0x81
 8004f5e:	f7fc fbe1 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000); //RAM address End - Partial Display 1
 8004f62:	2100      	movs	r1, #0
 8004f64:	2082      	movs	r0, #130	; 0x82
 8004f66:	f7fc fbdd 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000); //Display Position – Partial Display 2
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	2083      	movs	r0, #131	; 0x83
 8004f6e:	f7fc fbd9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000); //RAM Address Start – Partial Display 2
 8004f72:	2100      	movs	r1, #0
 8004f74:	2084      	movs	r0, #132	; 0x84
 8004f76:	f7fc fbd5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000); //RAM address End – Partail Display2
 8004f7a:	2100      	movs	r1, #0
 8004f7c:	2085      	movs	r0, #133	; 0x85
 8004f7e:	f7fc fbd1 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x90,0x0013); //Frame Cycle Control
 8004f82:	2113      	movs	r1, #19
 8004f84:	2090      	movs	r0, #144	; 0x90
 8004f86:	f7fc fbcd 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);  //Panel Interface Control 2
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	2092      	movs	r0, #146	; 0x92
 8004f8e:	f7fc fbc9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0003); //Panel Interface control 3
 8004f92:	2103      	movs	r1, #3
 8004f94:	2093      	movs	r0, #147	; 0x93
 8004f96:	f7fc fbc5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);  //Frame Cycle Control
 8004f9a:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004f9e:	2095      	movs	r0, #149	; 0x95
 8004fa0:	f7fc fbc0 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);
 8004fa4:	f240 1173 	movw	r1, #371	; 0x173
 8004fa8:	2007      	movs	r0, #7
 8004faa:	f7fc fbbb 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(50);
 8004fae:	2032      	movs	r0, #50	; 0x32
 8004fb0:	f003 f840 	bl	8008034 <HAL_Delay>
 8004fb4:	f000 bd39 	b.w	8005a2a <LCD_Init+0x3752>
	}
	else if(lcddev.id==0x1505)//OK
 8004fb8:	4b8d      	ldr	r3, [pc, #564]	; (80051f0 <LCD_Init+0x2f18>)
 8004fba:	889b      	ldrh	r3, [r3, #4]
 8004fbc:	f241 5205 	movw	r2, #5381	; 0x1505
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	f040 8117 	bne.w	80051f4 <LCD_Init+0x2f1c>
	{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
        LCD_WriteReg(0x0007,0x0000);
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	2007      	movs	r0, #7
 8004fca:	f7fc fbab 	bl	8001724 <LCD_WriteReg>
        HAL_Delay(50);
 8004fce:	2032      	movs	r0, #50	; 0x32
 8004fd0:	f003 f830 	bl	8008034 <HAL_Delay>
        LCD_WriteReg(0x0012,0x011C);//0x011A   why need to set several times?
 8004fd4:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004fd8:	2012      	movs	r0, #18
 8004fda:	f7fc fba3 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x00A4,0x0001);//NVM
 8004fde:	2101      	movs	r1, #1
 8004fe0:	20a4      	movs	r0, #164	; 0xa4
 8004fe2:	f7fc fb9f 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x000F);
 8004fe6:	210f      	movs	r1, #15
 8004fe8:	2008      	movs	r0, #8
 8004fea:	f7fc fb9b 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x000A,0x0008);
 8004fee:	2108      	movs	r1, #8
 8004ff0:	200a      	movs	r0, #10
 8004ff2:	f7fc fb97 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x000D,0x0008);
 8004ff6:	2108      	movs	r1, #8
 8004ff8:	200d      	movs	r0, #13
 8004ffa:	f7fc fb93 	bl	8001724 <LCD_WriteReg>
  		//伽马校正
        LCD_WriteReg(0x0030,0x0707);
 8004ffe:	f240 7107 	movw	r1, #1799	; 0x707
 8005002:	2030      	movs	r0, #48	; 0x30
 8005004:	f7fc fb8e 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0007); //0x0707
 8005008:	2107      	movs	r1, #7
 800500a:	2031      	movs	r0, #49	; 0x31
 800500c:	f7fc fb8a 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0603);
 8005010:	f240 6103 	movw	r1, #1539	; 0x603
 8005014:	2032      	movs	r0, #50	; 0x32
 8005016:	f7fc fb85 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0033,0x0700);
 800501a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800501e:	2033      	movs	r0, #51	; 0x33
 8005020:	f7fc fb80 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0034,0x0202);
 8005024:	f240 2102 	movw	r1, #514	; 0x202
 8005028:	2034      	movs	r0, #52	; 0x34
 800502a:	f7fc fb7b 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0002); //?0x0606
 800502e:	2102      	movs	r1, #2
 8005030:	2035      	movs	r0, #53	; 0x35
 8005032:	f7fc fb77 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x1F0F);
 8005036:	f641 710f 	movw	r1, #7951	; 0x1f0f
 800503a:	2036      	movs	r0, #54	; 0x36
 800503c:	f7fc fb72 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0707); //0x0f0f  0x0105
 8005040:	f240 7107 	movw	r1, #1799	; 0x707
 8005044:	2037      	movs	r0, #55	; 0x37
 8005046:	f7fc fb6d 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0000);
 800504a:	2100      	movs	r1, #0
 800504c:	2038      	movs	r0, #56	; 0x38
 800504e:	f7fc fb69 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0000);
 8005052:	2100      	movs	r1, #0
 8005054:	2039      	movs	r0, #57	; 0x39
 8005056:	f7fc fb65 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x003A,0x0707);
 800505a:	f240 7107 	movw	r1, #1799	; 0x707
 800505e:	203a      	movs	r0, #58	; 0x3a
 8005060:	f7fc fb60 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x003B,0x0000); //0x0303
 8005064:	2100      	movs	r1, #0
 8005066:	203b      	movs	r0, #59	; 0x3b
 8005068:	f7fc fb5c 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x003C,0x0007); //?0x0707
 800506c:	2107      	movs	r1, #7
 800506e:	203c      	movs	r0, #60	; 0x3c
 8005070:	f7fc fb58 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x003D,0x0000); //0x1313//0x1f08
 8005074:	2100      	movs	r1, #0
 8005076:	203d      	movs	r0, #61	; 0x3d
 8005078:	f7fc fb54 	bl	8001724 <LCD_WriteReg>
        HAL_Delay(50);
 800507c:	2032      	movs	r0, #50	; 0x32
 800507e:	f002 ffd9 	bl	8008034 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0001);
 8005082:	2101      	movs	r1, #1
 8005084:	2007      	movs	r0, #7
 8005086:	f7fc fb4d 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0017,0x0001);//开启电源
 800508a:	2101      	movs	r1, #1
 800508c:	2017      	movs	r0, #23
 800508e:	f7fc fb49 	bl	8001724 <LCD_WriteReg>
        HAL_Delay(50);
 8005092:	2032      	movs	r0, #50	; 0x32
 8005094:	f002 ffce 	bl	8008034 <HAL_Delay>
  		//电源配置
        LCD_WriteReg(0x0010,0x17A0);
 8005098:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 800509c:	2010      	movs	r0, #16
 800509e:	f7fc fb41 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0217);//reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 80050a2:	f240 2117 	movw	r1, #535	; 0x217
 80050a6:	2011      	movs	r0, #17
 80050a8:	f7fc fb3c 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x011E);//0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 80050ac:	f44f 718f 	mov.w	r1, #286	; 0x11e
 80050b0:	2012      	movs	r0, #18
 80050b2:	f7fc fb37 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0F00);//VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 80050b6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80050ba:	2013      	movs	r0, #19
 80050bc:	f7fc fb32 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x002A,0x0000);
 80050c0:	2100      	movs	r1, #0
 80050c2:	202a      	movs	r0, #42	; 0x2a
 80050c4:	f7fc fb2e 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x000A);//0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 80050c8:	210a      	movs	r1, #10
 80050ca:	2029      	movs	r0, #41	; 0x29
 80050cc:	f7fc fb2a 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x013E);// 0x013C  power supply on
 80050d0:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80050d4:	2012      	movs	r0, #18
 80050d6:	f7fc fb25 	bl	8001724 <LCD_WriteReg>
        //Coordinates Control//
        LCD_WriteReg(0x0050,0x0000);//0x0e00
 80050da:	2100      	movs	r1, #0
 80050dc:	2050      	movs	r0, #80	; 0x50
 80050de:	f7fc fb21 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00EF);
 80050e2:	21ef      	movs	r1, #239	; 0xef
 80050e4:	2051      	movs	r0, #81	; 0x51
 80050e6:	f7fc fb1d 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000);
 80050ea:	2100      	movs	r1, #0
 80050ec:	2052      	movs	r0, #82	; 0x52
 80050ee:	f7fc fb19 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013F);
 80050f2:	f240 113f 	movw	r1, #319	; 0x13f
 80050f6:	2053      	movs	r0, #83	; 0x53
 80050f8:	f7fc fb14 	bl	8001724 <LCD_WriteReg>
    	//Pannel Image Control//
        LCD_WriteReg(0x0060,0x2700);
 80050fc:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005100:	2060      	movs	r0, #96	; 0x60
 8005102:	f7fc fb0f 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 8005106:	2101      	movs	r1, #1
 8005108:	2061      	movs	r0, #97	; 0x61
 800510a:	f7fc fb0b 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x006A,0x0000);
 800510e:	2100      	movs	r1, #0
 8005110:	206a      	movs	r0, #106	; 0x6a
 8005112:	f7fc fb07 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8005116:	2100      	movs	r1, #0
 8005118:	2080      	movs	r0, #128	; 0x80
 800511a:	f7fc fb03 	bl	8001724 <LCD_WriteReg>
    	//Partial Image Control//
        LCD_WriteReg(0x0081,0x0000);
 800511e:	2100      	movs	r1, #0
 8005120:	2081      	movs	r0, #129	; 0x81
 8005122:	f7fc faff 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8005126:	2100      	movs	r1, #0
 8005128:	2082      	movs	r0, #130	; 0x82
 800512a:	f7fc fafb 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 800512e:	2100      	movs	r1, #0
 8005130:	2083      	movs	r0, #131	; 0x83
 8005132:	f7fc faf7 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8005136:	2100      	movs	r1, #0
 8005138:	2084      	movs	r0, #132	; 0x84
 800513a:	f7fc faf3 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 800513e:	2100      	movs	r1, #0
 8005140:	2085      	movs	r0, #133	; 0x85
 8005142:	f7fc faef 	bl	8001724 <LCD_WriteReg>
  		//Panel Interface Control//
        LCD_WriteReg(0x0090,0x0013);//0x0010 frenqucy
 8005146:	2113      	movs	r1, #19
 8005148:	2090      	movs	r0, #144	; 0x90
 800514a:	f7fc faeb 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0300);
 800514e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005152:	2092      	movs	r0, #146	; 0x92
 8005154:	f7fc fae6 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0093,0x0005);
 8005158:	2105      	movs	r1, #5
 800515a:	2093      	movs	r0, #147	; 0x93
 800515c:	f7fc fae2 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0095,0x0000);
 8005160:	2100      	movs	r1, #0
 8005162:	2095      	movs	r0, #149	; 0x95
 8005164:	f7fc fade 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0097,0x0000);
 8005168:	2100      	movs	r1, #0
 800516a:	2097      	movs	r0, #151	; 0x97
 800516c:	f7fc fada 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0098,0x0000);
 8005170:	2100      	movs	r1, #0
 8005172:	2098      	movs	r0, #152	; 0x98
 8005174:	f7fc fad6 	bl	8001724 <LCD_WriteReg>

        LCD_WriteReg(0x0001,0x0100);
 8005178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800517c:	2001      	movs	r0, #1
 800517e:	f7fc fad1 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);
 8005182:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005186:	2002      	movs	r0, #2
 8005188:	f7fc facc 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 800518c:	f241 0138 	movw	r1, #4152	; 0x1038
 8005190:	2003      	movs	r0, #3
 8005192:	f7fc fac7 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 8005196:	2100      	movs	r1, #0
 8005198:	2004      	movs	r0, #4
 800519a:	f7fc fac3 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x000C,0x0000);
 800519e:	2100      	movs	r1, #0
 80051a0:	200c      	movs	r0, #12
 80051a2:	f7fc fabf 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x000F,0x0000);
 80051a6:	2100      	movs	r1, #0
 80051a8:	200f      	movs	r0, #15
 80051aa:	f7fc fabb 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0020,0x0000);
 80051ae:	2100      	movs	r1, #0
 80051b0:	2020      	movs	r0, #32
 80051b2:	f7fc fab7 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 80051b6:	2100      	movs	r1, #0
 80051b8:	2021      	movs	r0, #33	; 0x21
 80051ba:	f7fc fab3 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0007,0x0021);
 80051be:	2121      	movs	r1, #33	; 0x21
 80051c0:	2007      	movs	r0, #7
 80051c2:	f7fc faaf 	bl	8001724 <LCD_WriteReg>
        HAL_Delay(20);
 80051c6:	2014      	movs	r0, #20
 80051c8:	f002 ff34 	bl	8008034 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0061);
 80051cc:	2161      	movs	r1, #97	; 0x61
 80051ce:	2007      	movs	r0, #7
 80051d0:	f7fc faa8 	bl	8001724 <LCD_WriteReg>
        HAL_Delay(20);
 80051d4:	2014      	movs	r0, #20
 80051d6:	f002 ff2d 	bl	8008034 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0173);
 80051da:	f240 1173 	movw	r1, #371	; 0x173
 80051de:	2007      	movs	r0, #7
 80051e0:	f7fc faa0 	bl	8001724 <LCD_WriteReg>
        HAL_Delay(20);
 80051e4:	2014      	movs	r0, #20
 80051e6:	f002 ff25 	bl	8008034 <HAL_Delay>
 80051ea:	f000 bc1e 	b.w	8005a2a <LCD_Init+0x3752>
 80051ee:	bf00      	nop
 80051f0:	200001ec 	.word	0x200001ec
	}else if(lcddev.id==0xB505)
 80051f4:	4bef      	ldr	r3, [pc, #956]	; (80055b4 <LCD_Init+0x32dc>)
 80051f6:	889b      	ldrh	r3, [r3, #4]
 80051f8:	f24b 5205 	movw	r2, #46341	; 0xb505
 80051fc:	4293      	cmp	r3, r2
 80051fe:	f040 8102 	bne.w	8005406 <LCD_Init+0x312e>
	{
		LCD_WriteReg(0x0000,0x0000);
 8005202:	2100      	movs	r1, #0
 8005204:	2000      	movs	r0, #0
 8005206:	f7fc fa8d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800520a:	2100      	movs	r1, #0
 800520c:	2000      	movs	r0, #0
 800520e:	f7fc fa89 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005212:	2100      	movs	r1, #0
 8005214:	2000      	movs	r0, #0
 8005216:	f7fc fa85 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800521a:	2100      	movs	r1, #0
 800521c:	2000      	movs	r0, #0
 800521e:	f7fc fa81 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0x00a4,0x0001);
 8005222:	2101      	movs	r1, #1
 8005224:	20a4      	movs	r0, #164	; 0xa4
 8005226:	f7fc fa7d 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(20);
 800522a:	2014      	movs	r0, #20
 800522c:	f002 ff02 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 8005230:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005234:	2060      	movs	r0, #96	; 0x60
 8005236:	f7fc fa75 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 800523a:	f240 2102 	movw	r1, #514	; 0x202
 800523e:	2008      	movs	r0, #8
 8005240:	f7fc fa70 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0214);
 8005244:	f44f 7105 	mov.w	r1, #532	; 0x214
 8005248:	2030      	movs	r0, #48	; 0x30
 800524a:	f7fc fa6b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x3715);
 800524e:	f243 7115 	movw	r1, #14101	; 0x3715
 8005252:	2031      	movs	r0, #49	; 0x31
 8005254:	f7fc fa66 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0604);
 8005258:	f240 6104 	movw	r1, #1540	; 0x604
 800525c:	2032      	movs	r0, #50	; 0x32
 800525e:	f7fc fa61 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0e16);
 8005262:	f640 6116 	movw	r1, #3606	; 0xe16
 8005266:	2033      	movs	r0, #51	; 0x33
 8005268:	f7fc fa5c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x2211);
 800526c:	f242 2111 	movw	r1, #8721	; 0x2211
 8005270:	2034      	movs	r0, #52	; 0x34
 8005272:	f7fc fa57 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x1500);
 8005276:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 800527a:	2035      	movs	r0, #53	; 0x35
 800527c:	f7fc fa52 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x8507);
 8005280:	f248 5107 	movw	r1, #34055	; 0x8507
 8005284:	2036      	movs	r0, #54	; 0x36
 8005286:	f7fc fa4d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x1407);
 800528a:	f241 4107 	movw	r1, #5127	; 0x1407
 800528e:	2037      	movs	r0, #55	; 0x37
 8005290:	f7fc fa48 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x1403);
 8005294:	f241 4103 	movw	r1, #5123	; 0x1403
 8005298:	2038      	movs	r0, #56	; 0x38
 800529a:	f7fc fa43 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0020);
 800529e:	2120      	movs	r1, #32
 80052a0:	2039      	movs	r0, #57	; 0x39
 80052a2:	f7fc fa3f 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0x0090,0x001a);
 80052a6:	211a      	movs	r1, #26
 80052a8:	2090      	movs	r0, #144	; 0x90
 80052aa:	f7fc fa3b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0010,0x0000);
 80052ae:	2100      	movs	r1, #0
 80052b0:	2010      	movs	r0, #16
 80052b2:	f7fc fa37 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 80052b6:	2107      	movs	r1, #7
 80052b8:	2011      	movs	r0, #17
 80052ba:	f7fc fa33 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 80052be:	2100      	movs	r1, #0
 80052c0:	2012      	movs	r0, #18
 80052c2:	f7fc fa2f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 80052c6:	2100      	movs	r1, #0
 80052c8:	2013      	movs	r0, #19
 80052ca:	f7fc fa2b 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(20);
 80052ce:	2014      	movs	r0, #20
 80052d0:	f002 feb0 	bl	8008034 <HAL_Delay>

		LCD_WriteReg(0x0010,0x0730);
 80052d4:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 80052d8:	2010      	movs	r0, #16
 80052da:	f7fc fa23 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0137);
 80052de:	f240 1137 	movw	r1, #311	; 0x137
 80052e2:	2011      	movs	r0, #17
 80052e4:	f7fc fa1e 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(20);
 80052e8:	2014      	movs	r0, #20
 80052ea:	f002 fea3 	bl	8008034 <HAL_Delay>

		LCD_WriteReg(0x0012,0x01b8);
 80052ee:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80052f2:	2012      	movs	r0, #18
 80052f4:	f7fc fa16 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(20);
 80052f8:	2014      	movs	r0, #20
 80052fa:	f002 fe9b 	bl	8008034 <HAL_Delay>

		LCD_WriteReg(0x0013,0x0f00);
 80052fe:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005302:	2013      	movs	r0, #19
 8005304:	f7fc fa0e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x002a,0x0080);
 8005308:	2180      	movs	r1, #128	; 0x80
 800530a:	202a      	movs	r0, #42	; 0x2a
 800530c:	f7fc fa0a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0029,0x0048);
 8005310:	2148      	movs	r1, #72	; 0x48
 8005312:	2029      	movs	r0, #41	; 0x29
 8005314:	f7fc fa06 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(20);
 8005318:	2014      	movs	r0, #20
 800531a:	f002 fe8b 	bl	8008034 <HAL_Delay>

		LCD_WriteReg(0x0001,0x0100);
 800531e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005322:	2001      	movs	r0, #1
 8005324:	f7fc f9fe 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 8005328:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800532c:	2002      	movs	r0, #2
 800532e:	f7fc f9f9 	bl	8001724 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 8005332:	f241 0138 	movw	r1, #4152	; 0x1038
 8005336:	2003      	movs	r0, #3
 8005338:	f7fc f9f4 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 800533c:	f240 2102 	movw	r1, #514	; 0x202
 8005340:	2008      	movs	r0, #8
 8005342:	f7fc f9ef 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x000a,0x0000);
 8005346:	2100      	movs	r1, #0
 8005348:	200a      	movs	r0, #10
 800534a:	f7fc f9eb 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x000c,0x0000);
 800534e:	2100      	movs	r1, #0
 8005350:	200c      	movs	r0, #12
 8005352:	f7fc f9e7 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x000d,0x0000);
 8005356:	2100      	movs	r1, #0
 8005358:	200d      	movs	r0, #13
 800535a:	f7fc f9e3 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x000e,0x0030);
 800535e:	2130      	movs	r1, #48	; 0x30
 8005360:	200e      	movs	r0, #14
 8005362:	f7fc f9df 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0050,0x0000);
 8005366:	2100      	movs	r1, #0
 8005368:	2050      	movs	r0, #80	; 0x50
 800536a:	f7fc f9db 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00ef);
 800536e:	21ef      	movs	r1, #239	; 0xef
 8005370:	2051      	movs	r0, #81	; 0x51
 8005372:	f7fc f9d7 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 8005376:	2100      	movs	r1, #0
 8005378:	2052      	movs	r0, #82	; 0x52
 800537a:	f7fc f9d3 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013f);
 800537e:	f240 113f 	movw	r1, #319	; 0x13f
 8005382:	2053      	movs	r0, #83	; 0x53
 8005384:	f7fc f9ce 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0x2700);
 8005388:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800538c:	2060      	movs	r0, #96	; 0x60
 800538e:	f7fc f9c9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 8005392:	2101      	movs	r1, #1
 8005394:	2061      	movs	r0, #97	; 0x61
 8005396:	f7fc f9c5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x006a,0x0000);
 800539a:	2100      	movs	r1, #0
 800539c:	206a      	movs	r0, #106	; 0x6a
 800539e:	f7fc f9c1 	bl	8001724 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090,0X0011);
 80053a2:	2111      	movs	r1, #17
 80053a4:	2090      	movs	r0, #144	; 0x90
 80053a6:	f7fc f9bd 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 80053aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80053ae:	2092      	movs	r0, #146	; 0x92
 80053b0:	f7fc f9b8 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0093,0x0402);
 80053b4:	f240 4102 	movw	r1, #1026	; 0x402
 80053b8:	2093      	movs	r0, #147	; 0x93
 80053ba:	f7fc f9b3 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0094,0x0002);
 80053be:	2102      	movs	r1, #2
 80053c0:	2094      	movs	r0, #148	; 0x94
 80053c2:	f7fc f9af 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(20);
 80053c6:	2014      	movs	r0, #20
 80053c8:	f002 fe34 	bl	8008034 <HAL_Delay>

		LCD_WriteReg(0x0007,0x0001);
 80053cc:	2101      	movs	r1, #1
 80053ce:	2007      	movs	r0, #7
 80053d0:	f7fc f9a8 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(20);
 80053d4:	2014      	movs	r0, #20
 80053d6:	f002 fe2d 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0x0007,0x0061);
 80053da:	2161      	movs	r1, #97	; 0x61
 80053dc:	2007      	movs	r0, #7
 80053de:	f7fc f9a1 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0173);
 80053e2:	f240 1173 	movw	r1, #371	; 0x173
 80053e6:	2007      	movs	r0, #7
 80053e8:	f7fc f99c 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0x0020,0x0000);
 80053ec:	2100      	movs	r1, #0
 80053ee:	2020      	movs	r0, #32
 80053f0:	f7fc f998 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0021,0x0000);
 80053f4:	2100      	movs	r1, #0
 80053f6:	2021      	movs	r0, #33	; 0x21
 80053f8:	f7fc f994 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x22);
 80053fc:	2122      	movs	r1, #34	; 0x22
 80053fe:	2000      	movs	r0, #0
 8005400:	f7fc f990 	bl	8001724 <LCD_WriteReg>
 8005404:	e311      	b.n	8005a2a <LCD_Init+0x3752>
	}else if(lcddev.id==0xC505)
 8005406:	4b6b      	ldr	r3, [pc, #428]	; (80055b4 <LCD_Init+0x32dc>)
 8005408:	889b      	ldrh	r3, [r3, #4]
 800540a:	f24c 5205 	movw	r2, #50437	; 0xc505
 800540e:	4293      	cmp	r3, r2
 8005410:	f040 80d2 	bne.w	80055b8 <LCD_Init+0x32e0>
	{
		LCD_WriteReg(0x0000,0x0000);
 8005414:	2100      	movs	r1, #0
 8005416:	2000      	movs	r0, #0
 8005418:	f7fc f984 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800541c:	2100      	movs	r1, #0
 800541e:	2000      	movs	r0, #0
 8005420:	f7fc f980 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(20);
 8005424:	2014      	movs	r0, #20
 8005426:	f002 fe05 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0x0000,0x0000);
 800542a:	2100      	movs	r1, #0
 800542c:	2000      	movs	r0, #0
 800542e:	f7fc f979 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005432:	2100      	movs	r1, #0
 8005434:	2000      	movs	r0, #0
 8005436:	f7fc f975 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800543a:	2100      	movs	r1, #0
 800543c:	2000      	movs	r0, #0
 800543e:	f7fc f971 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005442:	2100      	movs	r1, #0
 8005444:	2000      	movs	r0, #0
 8005446:	f7fc f96d 	bl	8001724 <LCD_WriteReg>
 		LCD_WriteReg(0x00a4,0x0001);
 800544a:	2101      	movs	r1, #1
 800544c:	20a4      	movs	r0, #164	; 0xa4
 800544e:	f7fc f969 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(20);
 8005452:	2014      	movs	r0, #20
 8005454:	f002 fdee 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 8005458:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800545c:	2060      	movs	r0, #96	; 0x60
 800545e:	f7fc f961 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0806);
 8005462:	f640 0106 	movw	r1, #2054	; 0x806
 8005466:	2008      	movs	r0, #8
 8005468:	f7fc f95c 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0703);//gamma setting
 800546c:	f240 7103 	movw	r1, #1795	; 0x703
 8005470:	2030      	movs	r0, #48	; 0x30
 8005472:	f7fc f957 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0001);
 8005476:	2101      	movs	r1, #1
 8005478:	2031      	movs	r0, #49	; 0x31
 800547a:	f7fc f953 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0004);
 800547e:	2104      	movs	r1, #4
 8005480:	2032      	movs	r0, #50	; 0x32
 8005482:	f7fc f94f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0102);
 8005486:	f44f 7181 	mov.w	r1, #258	; 0x102
 800548a:	2033      	movs	r0, #51	; 0x33
 800548c:	f7fc f94a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x0300);
 8005490:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005494:	2034      	movs	r0, #52	; 0x34
 8005496:	f7fc f945 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0103);
 800549a:	f240 1103 	movw	r1, #259	; 0x103
 800549e:	2035      	movs	r0, #53	; 0x35
 80054a0:	f7fc f940 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x001F);
 80054a4:	211f      	movs	r1, #31
 80054a6:	2036      	movs	r0, #54	; 0x36
 80054a8:	f7fc f93c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0703);
 80054ac:	f240 7103 	movw	r1, #1795	; 0x703
 80054b0:	2037      	movs	r0, #55	; 0x37
 80054b2:	f7fc f937 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0001);
 80054b6:	2101      	movs	r1, #1
 80054b8:	2038      	movs	r0, #56	; 0x38
 80054ba:	f7fc f933 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0004);
 80054be:	2104      	movs	r1, #4
 80054c0:	2039      	movs	r0, #57	; 0x39
 80054c2:	f7fc f92f 	bl	8001724 <LCD_WriteReg>



		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80054c6:	2115      	movs	r1, #21
 80054c8:	2090      	movs	r0, #144	; 0x90
 80054ca:	f7fc f92b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80054ce:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80054d2:	2010      	movs	r0, #16
 80054d4:	f7fc f926 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0247);	//DC1,DC0,VC
 80054d8:	f240 2147 	movw	r1, #583	; 0x247
 80054dc:	2011      	movs	r0, #17
 80054de:	f7fc f921 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80054e2:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80054e6:	2012      	movs	r0, #18
 80054e8:	f7fc f91c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80054ec:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80054f0:	2013      	movs	r0, #19
 80054f2:	f7fc f917 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(120);
 80054f6:	2078      	movs	r0, #120	; 0x78
 80054f8:	f002 fd9c 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 80054fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005500:	2001      	movs	r0, #1
 8005502:	f7fc f90f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8005506:	f44f 7100 	mov.w	r1, #512	; 0x200
 800550a:	2002      	movs	r0, #2
 800550c:	f7fc f90a 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005510:	f241 0130 	movw	r1, #4144	; 0x1030
 8005514:	2003      	movs	r0, #3
 8005516:	f7fc f905 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 800551a:	2108      	movs	r1, #8
 800551c:	200a      	movs	r0, #10
 800551e:	f7fc f901 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 8005522:	2100      	movs	r1, #0
 8005524:	200c      	movs	r0, #12
 8005526:	f7fc f8fd 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 800552a:	2120      	movs	r1, #32
 800552c:	200e      	movs	r0, #14
 800552e:	f7fc f8f9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 8005532:	2100      	movs	r1, #0
 8005534:	200f      	movs	r0, #15
 8005536:	f7fc f8f5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 800553a:	2100      	movs	r1, #0
 800553c:	2020      	movs	r0, #32
 800553e:	f7fc f8f1 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 8005542:	2100      	movs	r1, #0
 8005544:	2021      	movs	r0, #33	; 0x21
 8005546:	f7fc f8ed 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x002A,0x003D);	//vcom2
 800554a:	213d      	movs	r1, #61	; 0x3d
 800554c:	202a      	movs	r0, #42	; 0x2a
 800554e:	f7fc f8e9 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(20);
 8005552:	2014      	movs	r0, #20
 8005554:	f002 fd6e 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8005558:	212d      	movs	r1, #45	; 0x2d
 800555a:	2029      	movs	r0, #41	; 0x29
 800555c:	f7fc f8e2 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8005560:	2100      	movs	r1, #0
 8005562:	2050      	movs	r0, #80	; 0x50
 8005564:	f7fc f8de 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8005568:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 800556c:	2051      	movs	r0, #81	; 0x51
 800556e:	f7fc f8d9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 8005572:	2100      	movs	r1, #0
 8005574:	2052      	movs	r0, #82	; 0x52
 8005576:	f7fc f8d5 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 800557a:	f240 113f 	movw	r1, #319	; 0x13f
 800557e:	2053      	movs	r0, #83	; 0x53
 8005580:	f7fc f8d0 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8005584:	2100      	movs	r1, #0
 8005586:	2061      	movs	r0, #97	; 0x61
 8005588:	f7fc f8cc 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 800558c:	2100      	movs	r1, #0
 800558e:	206a      	movs	r0, #106	; 0x6a
 8005590:	f7fc f8c8 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0300);
 8005594:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005598:	2092      	movs	r0, #146	; 0x92
 800559a:	f7fc f8c3 	bl	8001724 <LCD_WriteReg>

 		LCD_WriteReg(0x0093, 0x0005);
 800559e:	2105      	movs	r1, #5
 80055a0:	2093      	movs	r0, #147	; 0x93
 80055a2:	f7fc f8bf 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80055a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80055aa:	2007      	movs	r0, #7
 80055ac:	f7fc f8ba 	bl	8001724 <LCD_WriteReg>
 80055b0:	e23b      	b.n	8005a2a <LCD_Init+0x3752>
 80055b2:	bf00      	nop
 80055b4:	200001ec 	.word	0x200001ec
	}else if(lcddev.id==0x4531)//OK |/|/|
 80055b8:	4bbb      	ldr	r3, [pc, #748]	; (80058a8 <LCD_Init+0x35d0>)
 80055ba:	889b      	ldrh	r3, [r3, #4]
 80055bc:	f244 5231 	movw	r2, #17713	; 0x4531
 80055c0:	4293      	cmp	r3, r2
 80055c2:	f040 80ba 	bne.w	800573a <LCD_Init+0x3462>
	{
		LCD_WriteReg(0X00,0X0001);
 80055c6:	2101      	movs	r1, #1
 80055c8:	2000      	movs	r0, #0
 80055ca:	f7fc f8ab 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(10);
 80055ce:	200a      	movs	r0, #10
 80055d0:	f002 fd30 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0X10,0X1628);
 80055d4:	f241 6128 	movw	r1, #5672	; 0x1628
 80055d8:	2010      	movs	r0, #16
 80055da:	f7fc f8a3 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X000e);//0x0006
 80055de:	210e      	movs	r1, #14
 80055e0:	2012      	movs	r0, #18
 80055e2:	f7fc f89f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X0A39);
 80055e6:	f640 2139 	movw	r1, #2617	; 0xa39
 80055ea:	2013      	movs	r0, #19
 80055ec:	f7fc f89a 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(10);
 80055f0:	200a      	movs	r0, #10
 80055f2:	f002 fd1f 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0X11,0X0040);
 80055f6:	2140      	movs	r1, #64	; 0x40
 80055f8:	2011      	movs	r0, #17
 80055fa:	f7fc f893 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X15,0X0050);
 80055fe:	2150      	movs	r1, #80	; 0x50
 8005600:	2015      	movs	r0, #21
 8005602:	f7fc f88f 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(10);
 8005606:	200a      	movs	r0, #10
 8005608:	f002 fd14 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0X12,0X001e);//16
 800560c:	211e      	movs	r1, #30
 800560e:	2012      	movs	r0, #18
 8005610:	f7fc f888 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(10);
 8005614:	200a      	movs	r0, #10
 8005616:	f002 fd0d 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0X10,0X1620);
 800561a:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 800561e:	2010      	movs	r0, #16
 8005620:	f7fc f880 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X2A39);
 8005624:	f642 2139 	movw	r1, #10809	; 0x2a39
 8005628:	2013      	movs	r0, #19
 800562a:	f7fc f87b 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(10);
 800562e:	200a      	movs	r0, #10
 8005630:	f002 fd00 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0X01,0X0100);
 8005634:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005638:	2001      	movs	r0, #1
 800563a:	f7fc f873 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 800563e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005642:	2002      	movs	r0, #2
 8005644:	f7fc f86e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1038);//改变方向的
 8005648:	f241 0138 	movw	r1, #4152	; 0x1038
 800564c:	2003      	movs	r0, #3
 800564e:	f7fc f869 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0202);
 8005652:	f240 2102 	movw	r1, #514	; 0x202
 8005656:	2008      	movs	r0, #8
 8005658:	f7fc f864 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 800565c:	2108      	movs	r1, #8
 800565e:	200a      	movs	r0, #10
 8005660:	f7fc f860 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X30,0X0000);
 8005664:	2100      	movs	r1, #0
 8005666:	2030      	movs	r0, #48	; 0x30
 8005668:	f7fc f85c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 800566c:	f240 4102 	movw	r1, #1026	; 0x402
 8005670:	2031      	movs	r0, #49	; 0x31
 8005672:	f7fc f857 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0106);
 8005676:	f44f 7183 	mov.w	r1, #262	; 0x106
 800567a:	2032      	movs	r0, #50	; 0x32
 800567c:	f7fc f852 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0503);
 8005680:	f240 5103 	movw	r1, #1283	; 0x503
 8005684:	2033      	movs	r0, #51	; 0x33
 8005686:	f7fc f84d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0104);
 800568a:	f44f 7182 	mov.w	r1, #260	; 0x104
 800568e:	2034      	movs	r0, #52	; 0x34
 8005690:	f7fc f848 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0301);
 8005694:	f240 3101 	movw	r1, #769	; 0x301
 8005698:	2035      	movs	r0, #53	; 0x35
 800569a:	f7fc f843 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 800569e:	f240 7107 	movw	r1, #1799	; 0x707
 80056a2:	2036      	movs	r0, #54	; 0x36
 80056a4:	f7fc f83e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 80056a8:	f240 3105 	movw	r1, #773	; 0x305
 80056ac:	2037      	movs	r0, #55	; 0x37
 80056ae:	f7fc f839 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0208);
 80056b2:	f44f 7102 	mov.w	r1, #520	; 0x208
 80056b6:	2038      	movs	r0, #56	; 0x38
 80056b8:	f7fc f834 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0F0B);
 80056bc:	f640 710b 	movw	r1, #3851	; 0xf0b
 80056c0:	2039      	movs	r0, #57	; 0x39
 80056c2:	f7fc f82f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X41,0X0002);
 80056c6:	2102      	movs	r1, #2
 80056c8:	2041      	movs	r0, #65	; 0x41
 80056ca:	f7fc f82b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X60,0X2700);
 80056ce:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80056d2:	2060      	movs	r0, #96	; 0x60
 80056d4:	f7fc f826 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 80056d8:	2101      	movs	r1, #1
 80056da:	2061      	movs	r0, #97	; 0x61
 80056dc:	f7fc f822 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X0210);
 80056e0:	f44f 7104 	mov.w	r1, #528	; 0x210
 80056e4:	2090      	movs	r0, #144	; 0x90
 80056e6:	f7fc f81d 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X010A);
 80056ea:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80056ee:	2092      	movs	r0, #146	; 0x92
 80056f0:	f7fc f818 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0004);
 80056f4:	2104      	movs	r1, #4
 80056f6:	2093      	movs	r0, #147	; 0x93
 80056f8:	f7fc f814 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0100);
 80056fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005700:	20a0      	movs	r0, #160	; 0xa0
 8005702:	f7fc f80f 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 8005706:	2101      	movs	r1, #1
 8005708:	2007      	movs	r0, #7
 800570a:	f7fc f80b 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 800570e:	2121      	movs	r1, #33	; 0x21
 8005710:	2007      	movs	r0, #7
 8005712:	f7fc f807 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 8005716:	2123      	movs	r1, #35	; 0x23
 8005718:	2007      	movs	r0, #7
 800571a:	f7fc f803 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 800571e:	2133      	movs	r1, #51	; 0x33
 8005720:	2007      	movs	r0, #7
 8005722:	f7fb ffff 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 8005726:	f240 1133 	movw	r1, #307	; 0x133
 800572a:	2007      	movs	r0, #7
 800572c:	f7fb fffa 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0000);
 8005730:	2100      	movs	r1, #0
 8005732:	20a0      	movs	r0, #160	; 0xa0
 8005734:	f7fb fff6 	bl	8001724 <LCD_WriteReg>
 8005738:	e177      	b.n	8005a2a <LCD_Init+0x3752>
	}else if(lcddev.id==0x4535)
 800573a:	4b5b      	ldr	r3, [pc, #364]	; (80058a8 <LCD_Init+0x35d0>)
 800573c:	889b      	ldrh	r3, [r3, #4]
 800573e:	f244 5235 	movw	r2, #17717	; 0x4535
 8005742:	4293      	cmp	r3, r2
 8005744:	f040 80b2 	bne.w	80058ac <LCD_Init+0x35d4>
	{
		LCD_WriteReg(0X15,0X0030);
 8005748:	2130      	movs	r1, #48	; 0x30
 800574a:	2015      	movs	r0, #21
 800574c:	f7fb ffea 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X9A,0X0010);
 8005750:	2110      	movs	r1, #16
 8005752:	209a      	movs	r0, #154	; 0x9a
 8005754:	f7fb ffe6 	bl	8001724 <LCD_WriteReg>
 		LCD_WriteReg(0X11,0X0020);
 8005758:	2120      	movs	r1, #32
 800575a:	2011      	movs	r0, #17
 800575c:	f7fb ffe2 	bl	8001724 <LCD_WriteReg>
 		LCD_WriteReg(0X10,0X3428);
 8005760:	f243 4128 	movw	r1, #13352	; 0x3428
 8005764:	2010      	movs	r0, #16
 8005766:	f7fb ffdd 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X0002);//16
 800576a:	2102      	movs	r1, #2
 800576c:	2012      	movs	r0, #18
 800576e:	f7fb ffd9 	bl	8001724 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X1038);
 8005772:	f241 0138 	movw	r1, #4152	; 0x1038
 8005776:	2013      	movs	r0, #19
 8005778:	f7fb ffd4 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(40);
 800577c:	2028      	movs	r0, #40	; 0x28
 800577e:	f002 fc59 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0X12,0X0012);//16
 8005782:	2112      	movs	r1, #18
 8005784:	2012      	movs	r0, #18
 8005786:	f7fb ffcd 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(40);
 800578a:	2028      	movs	r0, #40	; 0x28
 800578c:	f002 fc52 	bl	8008034 <HAL_Delay>
  		LCD_WriteReg(0X10,0X3420);
 8005790:	f243 4120 	movw	r1, #13344	; 0x3420
 8005794:	2010      	movs	r0, #16
 8005796:	f7fb ffc5 	bl	8001724 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X3038);
 800579a:	f243 0138 	movw	r1, #12344	; 0x3038
 800579e:	2013      	movs	r0, #19
 80057a0:	f7fb ffc0 	bl	8001724 <LCD_WriteReg>
		HAL_Delay(70);
 80057a4:	2046      	movs	r0, #70	; 0x46
 80057a6:	f002 fc45 	bl	8008034 <HAL_Delay>
		LCD_WriteReg(0X30,0X0000);
 80057aa:	2100      	movs	r1, #0
 80057ac:	2030      	movs	r0, #48	; 0x30
 80057ae:	f7fb ffb9 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 80057b2:	f240 4102 	movw	r1, #1026	; 0x402
 80057b6:	2031      	movs	r0, #49	; 0x31
 80057b8:	f7fb ffb4 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0307);
 80057bc:	f240 3107 	movw	r1, #775	; 0x307
 80057c0:	2032      	movs	r0, #50	; 0x32
 80057c2:	f7fb ffaf 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0304);
 80057c6:	f44f 7141 	mov.w	r1, #772	; 0x304
 80057ca:	2033      	movs	r0, #51	; 0x33
 80057cc:	f7fb ffaa 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0004);
 80057d0:	2104      	movs	r1, #4
 80057d2:	2034      	movs	r0, #52	; 0x34
 80057d4:	f7fb ffa6 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0401);
 80057d8:	f240 4101 	movw	r1, #1025	; 0x401
 80057dc:	2035      	movs	r0, #53	; 0x35
 80057de:	f7fb ffa1 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 80057e2:	f240 7107 	movw	r1, #1799	; 0x707
 80057e6:	2036      	movs	r0, #54	; 0x36
 80057e8:	f7fb ff9c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 80057ec:	f240 3105 	movw	r1, #773	; 0x305
 80057f0:	2037      	movs	r0, #55	; 0x37
 80057f2:	f7fb ff97 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0610);
 80057f6:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80057fa:	2038      	movs	r0, #56	; 0x38
 80057fc:	f7fb ff92 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0610);
 8005800:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005804:	2039      	movs	r0, #57	; 0x39
 8005806:	f7fb ff8d 	bl	8001724 <LCD_WriteReg>

		LCD_WriteReg(0X01,0X0100);
 800580a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800580e:	2001      	movs	r0, #1
 8005810:	f7fb ff88 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 8005814:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005818:	2002      	movs	r0, #2
 800581a:	f7fb ff83 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1030);//改变方向的
 800581e:	f241 0130 	movw	r1, #4144	; 0x1030
 8005822:	2003      	movs	r0, #3
 8005824:	f7fb ff7e 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0808);
 8005828:	f640 0108 	movw	r1, #2056	; 0x808
 800582c:	2008      	movs	r0, #8
 800582e:	f7fb ff79 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 8005832:	2108      	movs	r1, #8
 8005834:	200a      	movs	r0, #10
 8005836:	f7fb ff75 	bl	8001724 <LCD_WriteReg>
 		LCD_WriteReg(0X60,0X2700);
 800583a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800583e:	2060      	movs	r0, #96	; 0x60
 8005840:	f7fb ff70 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8005844:	2101      	movs	r1, #1
 8005846:	2061      	movs	r0, #97	; 0x61
 8005848:	f7fb ff6c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X013E);
 800584c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005850:	2090      	movs	r0, #144	; 0x90
 8005852:	f7fb ff67 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X0100);
 8005856:	f44f 7180 	mov.w	r1, #256	; 0x100
 800585a:	2092      	movs	r0, #146	; 0x92
 800585c:	f7fb ff62 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0100);
 8005860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005864:	2093      	movs	r0, #147	; 0x93
 8005866:	f7fb ff5d 	bl	8001724 <LCD_WriteReg>
 		LCD_WriteReg(0XA0,0X3000);
 800586a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800586e:	20a0      	movs	r0, #160	; 0xa0
 8005870:	f7fb ff58 	bl	8001724 <LCD_WriteReg>
 		LCD_WriteReg(0XA3,0X0010);
 8005874:	2110      	movs	r1, #16
 8005876:	20a3      	movs	r0, #163	; 0xa3
 8005878:	f7fb ff54 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 800587c:	2101      	movs	r1, #1
 800587e:	2007      	movs	r0, #7
 8005880:	f7fb ff50 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 8005884:	2121      	movs	r1, #33	; 0x21
 8005886:	2007      	movs	r0, #7
 8005888:	f7fb ff4c 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 800588c:	2123      	movs	r1, #35	; 0x23
 800588e:	2007      	movs	r0, #7
 8005890:	f7fb ff48 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 8005894:	2133      	movs	r1, #51	; 0x33
 8005896:	2007      	movs	r0, #7
 8005898:	f7fb ff44 	bl	8001724 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 800589c:	f240 1133 	movw	r1, #307	; 0x133
 80058a0:	2007      	movs	r0, #7
 80058a2:	f7fb ff3f 	bl	8001724 <LCD_WriteReg>
 80058a6:	e0c0      	b.n	8005a2a <LCD_Init+0x3752>
 80058a8:	200001ec 	.word	0x200001ec
	}else if(lcddev.id==0X1963)
 80058ac:	4b67      	ldr	r3, [pc, #412]	; (8005a4c <LCD_Init+0x3774>)
 80058ae:	889b      	ldrh	r3, [r3, #4]
 80058b0:	f641 1263 	movw	r2, #6499	; 0x1963
 80058b4:	4293      	cmp	r3, r2
 80058b6:	f040 80b8 	bne.w	8005a2a <LCD_Init+0x3752>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80058ba:	20e2      	movs	r0, #226	; 0xe2
 80058bc:	f7fb fef8 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 80058c0:	201d      	movs	r0, #29
 80058c2:	f7fb ff09 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80058c6:	2002      	movs	r0, #2
 80058c8:	f7fb ff06 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 80058cc:	2004      	movs	r0, #4
 80058ce:	f7fb ff03 	bl	80016d8 <LCD_WR_DATA>
		delay_us(100);
 80058d2:	2064      	movs	r0, #100	; 0x64
 80058d4:	f7fb fc14 	bl	8001100 <delay_us>
		LCD_WR_REG(0xE0);		// Start PLL command
 80058d8:	20e0      	movs	r0, #224	; 0xe0
 80058da:	f7fb fee9 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 80058de:	2001      	movs	r0, #1
 80058e0:	f7fb fefa 	bl	80016d8 <LCD_WR_DATA>
		HAL_Delay(10);
 80058e4:	200a      	movs	r0, #10
 80058e6:	f002 fba5 	bl	8008034 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 80058ea:	20e0      	movs	r0, #224	; 0xe0
 80058ec:	f7fb fee0 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 80058f0:	2003      	movs	r0, #3
 80058f2:	f7fb fef1 	bl	80016d8 <LCD_WR_DATA>
		HAL_Delay(12);
 80058f6:	200c      	movs	r0, #12
 80058f8:	f002 fb9c 	bl	8008034 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 80058fc:	2001      	movs	r0, #1
 80058fe:	f7fb fed7 	bl	80016b0 <LCD_WR_REG>
		HAL_Delay(10);
 8005902:	200a      	movs	r0, #10
 8005904:	f002 fb96 	bl	8008034 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005908:	20e6      	movs	r0, #230	; 0xe6
 800590a:	f7fb fed1 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 800590e:	202f      	movs	r0, #47	; 0x2f
 8005910:	f7fb fee2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8005914:	20ff      	movs	r0, #255	; 0xff
 8005916:	f7fb fedf 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 800591a:	20ff      	movs	r0, #255	; 0xff
 800591c:	f7fb fedc 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 8005920:	20b0      	movs	r0, #176	; 0xb0
 8005922:	f7fb fec5 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8005926:	2020      	movs	r0, #32
 8005928:	f7fb fed6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 800592c:	2000      	movs	r0, #0
 800592e:	f7fb fed3 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 8005932:	2003      	movs	r0, #3
 8005934:	f7fb fed0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005938:	f240 301f 	movw	r0, #799	; 0x31f
 800593c:	f7fb fecc 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 8005940:	2001      	movs	r0, #1
 8005942:	f7fb fec9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8005946:	f240 10df 	movw	r0, #479	; 0x1df
 800594a:	f7fb fec5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 800594e:	2000      	movs	r0, #0
 8005950:	f7fb fec2 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 8005954:	20b4      	movs	r0, #180	; 0xb4
 8005956:	f7fb feab 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 800595a:	2004      	movs	r0, #4
 800595c:	f7fb febc 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 8005960:	f240 401f 	movw	r0, #1055	; 0x41f
 8005964:	f7fb feb8 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 8005968:	2000      	movs	r0, #0
 800596a:	f7fb feb5 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 800596e:	202e      	movs	r0, #46	; 0x2e
 8005970:	f7fb feb2 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8005974:	2000      	movs	r0, #0
 8005976:	f7fb feaf 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800597a:	2000      	movs	r0, #0
 800597c:	f7fb feac 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005980:	2000      	movs	r0, #0
 8005982:	f7fb fea9 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005986:	2000      	movs	r0, #0
 8005988:	f7fb fea6 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 800598c:	20b6      	movs	r0, #182	; 0xb6
 800598e:	f7fb fe8f 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8005992:	2002      	movs	r0, #2
 8005994:	f7fb fea0 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 8005998:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800599c:	f7fb fe9c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 80059a0:	2000      	movs	r0, #0
 80059a2:	f7fb fe99 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 80059a6:	2017      	movs	r0, #23
 80059a8:	f7fb fe96 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 80059ac:	2015      	movs	r0, #21
 80059ae:	f7fb fe93 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80059b2:	2000      	movs	r0, #0
 80059b4:	f7fb fe90 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80059b8:	2000      	movs	r0, #0
 80059ba:	f7fb fe8d 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 80059be:	20f0      	movs	r0, #240	; 0xf0
 80059c0:	f7fb fe76 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 80059c4:	2003      	movs	r0, #3
 80059c6:	f7fb fe87 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 80059ca:	2029      	movs	r0, #41	; 0x29
 80059cc:	f7fb fe70 	bl	80016b0 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 80059d0:	20d0      	movs	r0, #208	; 0xd0
 80059d2:	f7fb fe6d 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 80059d6:	2000      	movs	r0, #0
 80059d8:	f7fb fe7e 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 80059dc:	20be      	movs	r0, #190	; 0xbe
 80059de:	f7fb fe67 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 80059e2:	2005      	movs	r0, #5
 80059e4:	f7fb fe78 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 80059e8:	20fe      	movs	r0, #254	; 0xfe
 80059ea:	f7fb fe75 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 80059ee:	2001      	movs	r0, #1
 80059f0:	f7fb fe72 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 80059f4:	2000      	movs	r0, #0
 80059f6:	f7fb fe6f 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 80059fa:	2000      	movs	r0, #0
 80059fc:	f7fb fe6c 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 8005a00:	2000      	movs	r0, #0
 8005a02:	f7fb fe69 	bl	80016d8 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8005a06:	20b8      	movs	r0, #184	; 0xb8
 8005a08:	f7fb fe52 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005a0c:	2003      	movs	r0, #3
 8005a0e:	f7fb fe63 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 8005a12:	2001      	movs	r0, #1
 8005a14:	f7fb fe60 	bl	80016d8 <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 8005a18:	20ba      	movs	r0, #186	; 0xba
 8005a1a:	f7fb fe49 	bl	80016b0 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005a1e:	2001      	movs	r0, #1
 8005a20:	f7fb fe5a 	bl	80016d8 <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 8005a24:	2064      	movs	r0, #100	; 0x64
 8005a26:	f7fc fb17 	bl	8002058 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		//默认为竖屏
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	f7fc fb48 	bl	80020c0 <LCD_Display_Dir>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);				//点亮背光
 8005a30:	2201      	movs	r2, #1
 8005a32:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a36:	4806      	ldr	r0, [pc, #24]	; (8005a50 <LCD_Init+0x3778>)
 8005a38:	f003 fca6 	bl	8009388 <HAL_GPIO_WritePin>
	LCD_Clear(WHITE);
 8005a3c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005a40:	f000 f808 	bl	8005a54 <LCD_Clear>
}
 8005a44:	bf00      	nop
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	200001ec 	.word	0x200001ec
 8005a50:	40020400 	.word	0x40020400

08005a54 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint16_t color)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	80fb      	strh	r3, [r7, #6]
	uint32_t index=0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 8005a62:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <LCD_Clear+0x94>)
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 8005a68:	4b1f      	ldr	r3, [pc, #124]	; (8005ae8 <LCD_Clear+0x94>)
 8005a6a:	885b      	ldrh	r3, [r3, #2]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	fb02 f303 	mul.w	r3, r2, r3
 8005a74:	60bb      	str	r3, [r7, #8]
	if((lcddev.id==0X6804)&&(lcddev.dir==1))//6804横屏的时候特殊处理
 8005a76:	4b1c      	ldr	r3, [pc, #112]	; (8005ae8 <LCD_Clear+0x94>)
 8005a78:	889b      	ldrh	r3, [r3, #4]
 8005a7a:	f646 0204 	movw	r2, #26628	; 0x6804
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d11a      	bne.n	8005ab8 <LCD_Clear+0x64>
 8005a82:	4b19      	ldr	r3, [pc, #100]	; (8005ae8 <LCD_Clear+0x94>)
 8005a84:	799b      	ldrb	r3, [r3, #6]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d116      	bne.n	8005ab8 <LCD_Clear+0x64>
	{
 		lcddev.dir=0;
 8005a8a:	4b17      	ldr	r3, [pc, #92]	; (8005ae8 <LCD_Clear+0x94>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 8005a90:	4b15      	ldr	r3, [pc, #84]	; (8005ae8 <LCD_Clear+0x94>)
 8005a92:	222a      	movs	r2, #42	; 0x2a
 8005a94:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 8005a96:	4b14      	ldr	r3, [pc, #80]	; (8005ae8 <LCD_Clear+0x94>)
 8005a98:	222b      	movs	r2, #43	; 0x2b
 8005a9a:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00,0x0000);		//设置光标位置
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	f7fb fe7a 	bl	8001798 <LCD_SetCursor>
 		lcddev.dir=1;
 8005aa4:	4b10      	ldr	r3, [pc, #64]	; (8005ae8 <LCD_Clear+0x94>)
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <LCD_Clear+0x94>)
 8005aac:	222b      	movs	r2, #43	; 0x2b
 8005aae:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 8005ab0:	4b0d      	ldr	r3, [pc, #52]	; (8005ae8 <LCD_Clear+0x94>)
 8005ab2:	222a      	movs	r2, #42	; 0x2a
 8005ab4:	819a      	strh	r2, [r3, #12]
 8005ab6:	e003      	b.n	8005ac0 <LCD_Clear+0x6c>
 	}else LCD_SetCursor(0x00,0x0000);	//设置光标位置
 8005ab8:	2100      	movs	r1, #0
 8005aba:	2000      	movs	r0, #0
 8005abc:	f7fb fe6c 	bl	8001798 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 8005ac0:	f7fb fe5a 	bl	8001778 <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	e005      	b.n	8005ad6 <LCD_Clear+0x82>
	{
		LCD->LCD_RAM=color;
 8005aca:	4a08      	ldr	r2, [pc, #32]	; (8005aec <LCD_Clear+0x98>)
 8005acc:	88fb      	ldrh	r3, [r7, #6]
 8005ace:	8053      	strh	r3, [r2, #2]
	for(index=0;index<totalpoint;index++)
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	60fb      	str	r3, [r7, #12]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d3f5      	bcc.n	8005aca <LCD_Clear+0x76>
	}
}
 8005ade:	bf00      	nop
 8005ae0:	bf00      	nop
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}
 8005ae8:	200001ec 	.word	0x200001ec
 8005aec:	6c00007e 	.word	0x6c00007e

08005af0 <LCD_Fill>:
//在指定区域内填充单个颜色
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
//color:要填充的颜色
void LCD_Fill(uint16_t sx,uint16_t sy,uint16_t ex,uint16_t ey,uint16_t color)
{
 8005af0:	b590      	push	{r4, r7, lr}
 8005af2:	b087      	sub	sp, #28
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	4604      	mov	r4, r0
 8005af8:	4608      	mov	r0, r1
 8005afa:	4611      	mov	r1, r2
 8005afc:	461a      	mov	r2, r3
 8005afe:	4623      	mov	r3, r4
 8005b00:	80fb      	strh	r3, [r7, #6]
 8005b02:	4603      	mov	r3, r0
 8005b04:	80bb      	strh	r3, [r7, #4]
 8005b06:	460b      	mov	r3, r1
 8005b08:	807b      	strh	r3, [r7, #2]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	uint16_t xlen=0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if((lcddev.id==0X6804)&&(lcddev.dir==1))	//6804横屏的时候特殊处理
 8005b12:	4b32      	ldr	r3, [pc, #200]	; (8005bdc <LCD_Fill+0xec>)
 8005b14:	889b      	ldrh	r3, [r3, #4]
 8005b16:	f646 0204 	movw	r2, #26628	; 0x6804
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d133      	bne.n	8005b86 <LCD_Fill+0x96>
 8005b1e:	4b2f      	ldr	r3, [pc, #188]	; (8005bdc <LCD_Fill+0xec>)
 8005b20:	799b      	ldrb	r3, [r3, #6]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d12f      	bne.n	8005b86 <LCD_Fill+0x96>
	{
		temp=sx;
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	813b      	strh	r3, [r7, #8]
		sx=sy;
 8005b2a:	88bb      	ldrh	r3, [r7, #4]
 8005b2c:	80fb      	strh	r3, [r7, #6]
		sy=lcddev.width-ex-1;
 8005b2e:	4b2b      	ldr	r3, [pc, #172]	; (8005bdc <LCD_Fill+0xec>)
 8005b30:	881a      	ldrh	r2, [r3, #0]
 8005b32:	887b      	ldrh	r3, [r7, #2]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	80bb      	strh	r3, [r7, #4]
		ex=ey;
 8005b3c:	883b      	ldrh	r3, [r7, #0]
 8005b3e:	807b      	strh	r3, [r7, #2]
		ey=lcddev.width-temp-1;
 8005b40:	4b26      	ldr	r3, [pc, #152]	; (8005bdc <LCD_Fill+0xec>)
 8005b42:	881a      	ldrh	r2, [r3, #0]
 8005b44:	893b      	ldrh	r3, [r7, #8]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	803b      	strh	r3, [r7, #0]
 		lcddev.dir=0;
 8005b4e:	4b23      	ldr	r3, [pc, #140]	; (8005bdc <LCD_Fill+0xec>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 8005b54:	4b21      	ldr	r3, [pc, #132]	; (8005bdc <LCD_Fill+0xec>)
 8005b56:	222a      	movs	r2, #42	; 0x2a
 8005b58:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 8005b5a:	4b20      	ldr	r3, [pc, #128]	; (8005bdc <LCD_Fill+0xec>)
 8005b5c:	222b      	movs	r2, #43	; 0x2b
 8005b5e:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx,sy,ex,ey,color);
 8005b60:	883c      	ldrh	r4, [r7, #0]
 8005b62:	887a      	ldrh	r2, [r7, #2]
 8005b64:	88b9      	ldrh	r1, [r7, #4]
 8005b66:	88f8      	ldrh	r0, [r7, #6]
 8005b68:	8c3b      	ldrh	r3, [r7, #32]
 8005b6a:	9300      	str	r3, [sp, #0]
 8005b6c:	4623      	mov	r3, r4
 8005b6e:	f7ff ffbf 	bl	8005af0 <LCD_Fill>
 		lcddev.dir=1;
 8005b72:	4b1a      	ldr	r3, [pc, #104]	; (8005bdc <LCD_Fill+0xec>)
 8005b74:	2201      	movs	r2, #1
 8005b76:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 8005b78:	4b18      	ldr	r3, [pc, #96]	; (8005bdc <LCD_Fill+0xec>)
 8005b7a:	222b      	movs	r2, #43	; 0x2b
 8005b7c:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 8005b7e:	4b17      	ldr	r3, [pc, #92]	; (8005bdc <LCD_Fill+0xec>)
 8005b80:	222a      	movs	r2, #42	; 0x2a
 8005b82:	819a      	strh	r2, [r3, #12]
 8005b84:	e025      	b.n	8005bd2 <LCD_Fill+0xe2>
 	}else
	{
		xlen=ex-sx+1;
 8005b86:	887a      	ldrh	r2, [r7, #2]
 8005b88:	88fb      	ldrh	r3, [r7, #6]
 8005b8a:	1ad3      	subs	r3, r2, r3
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	3301      	adds	r3, #1
 8005b90:	817b      	strh	r3, [r7, #10]
		for(i=sy;i<=ey;i++)
 8005b92:	88bb      	ldrh	r3, [r7, #4]
 8005b94:	81fb      	strh	r3, [r7, #14]
 8005b96:	e017      	b.n	8005bc8 <LCD_Fill+0xd8>
		{
		 	LCD_SetCursor(sx,i);      				//设置光标位置
 8005b98:	89fa      	ldrh	r2, [r7, #14]
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	4611      	mov	r1, r2
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fb fdfa 	bl	8001798 <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM
 8005ba4:	f7fb fde8 	bl	8001778 <LCD_WriteRAM_Prepare>
			for(j=0;j<xlen;j++)LCD->LCD_RAM=color;	//显示颜色
 8005ba8:	2300      	movs	r3, #0
 8005baa:	81bb      	strh	r3, [r7, #12]
 8005bac:	e005      	b.n	8005bba <LCD_Fill+0xca>
 8005bae:	4a0c      	ldr	r2, [pc, #48]	; (8005be0 <LCD_Fill+0xf0>)
 8005bb0:	8c3b      	ldrh	r3, [r7, #32]
 8005bb2:	8053      	strh	r3, [r2, #2]
 8005bb4:	89bb      	ldrh	r3, [r7, #12]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	81bb      	strh	r3, [r7, #12]
 8005bba:	89ba      	ldrh	r2, [r7, #12]
 8005bbc:	897b      	ldrh	r3, [r7, #10]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d3f5      	bcc.n	8005bae <LCD_Fill+0xbe>
		for(i=sy;i<=ey;i++)
 8005bc2:	89fb      	ldrh	r3, [r7, #14]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	81fb      	strh	r3, [r7, #14]
 8005bc8:	89fa      	ldrh	r2, [r7, #14]
 8005bca:	883b      	ldrh	r3, [r7, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d9e3      	bls.n	8005b98 <LCD_Fill+0xa8>
		}
	}
}
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd90      	pop	{r4, r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	200001ec 	.word	0x200001ec
 8005be0:	6c00007e 	.word	0x6c00007e

08005be4 <LCD_DrawLine>:
}
//画线
//x1,y1:起点坐标
//x2,y2:终点坐标
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8005be4:	b590      	push	{r4, r7, lr}
 8005be6:	b08d      	sub	sp, #52	; 0x34
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	4604      	mov	r4, r0
 8005bec:	4608      	mov	r0, r1
 8005bee:	4611      	mov	r1, r2
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4623      	mov	r3, r4
 8005bf4:	80fb      	strh	r3, [r7, #6]
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	80bb      	strh	r3, [r7, #4]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	807b      	strh	r3, [r7, #2]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8005c02:	2300      	movs	r3, #0
 8005c04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c06:	2300      	movs	r3, #0
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1; //计算坐标增量
 8005c0a:	887a      	ldrh	r2, [r7, #2]
 8005c0c:	88fb      	ldrh	r3, [r7, #6]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8005c12:	883a      	ldrh	r2, [r7, #0]
 8005c14:	88bb      	ldrh	r3, [r7, #4]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8005c1a:	88fb      	ldrh	r3, [r7, #6]
 8005c1c:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8005c1e:	88bb      	ldrh	r3, [r7, #4]
 8005c20:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //设置单步方向
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	dd02      	ble.n	8005c2e <LCD_DrawLine+0x4a>
 8005c28:	2301      	movs	r3, #1
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	e00b      	b.n	8005c46 <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;//垂直线
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d102      	bne.n	8005c3a <LCD_DrawLine+0x56>
 8005c34:	2300      	movs	r3, #0
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	e005      	b.n	8005c46 <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8005c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	425b      	negs	r3, r3
 8005c44:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	dd02      	ble.n	8005c52 <LCD_DrawLine+0x6e>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	613b      	str	r3, [r7, #16]
 8005c50:	e00b      	b.n	8005c6a <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;//水平线
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d102      	bne.n	8005c5e <LCD_DrawLine+0x7a>
 8005c58:	2300      	movs	r3, #0
 8005c5a:	613b      	str	r3, [r7, #16]
 8005c5c:	e005      	b.n	8005c6a <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;}
 8005c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	425b      	negs	r3, r3
 8005c68:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴
 8005c6a:	6a3a      	ldr	r2, [r7, #32]
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	dd02      	ble.n	8005c78 <LCD_DrawLine+0x94>
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	e001      	b.n	8005c7c <LCD_DrawLine+0x98>
	else distance=delta_y;
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )//画线输出
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005c80:	e02a      	b.n	8005cd8 <LCD_DrawLine+0xf4>
	{
		LCD_DrawPoint(uRow,uCol);//画点
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	b292      	uxth	r2, r2
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fc f8ad 	bl	8001dec <LCD_DrawPoint>
		xerr+=delta_x ;
 8005c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	4413      	add	r3, r2
 8005c98:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y ;
 8005c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8005ca2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	dd07      	ble.n	8005cba <LCD_DrawLine+0xd6>
		{
			xerr-=distance;
 8005caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8005cba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	dd07      	ble.n	8005cd2 <LCD_DrawLine+0xee>
		{
			yerr-=distance;
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	4413      	add	r3, r2
 8005cd0:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )//画线输出
 8005cd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005cd8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	3301      	adds	r3, #1
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	ddcf      	ble.n	8005c82 <LCD_DrawLine+0x9e>
		}
	}
}
 8005ce2:	bf00      	nop
 8005ce4:	bf00      	nop
 8005ce6:	3734      	adds	r7, #52	; 0x34
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd90      	pop	{r4, r7, pc}

08005cec <LCD_DrawRectangle>:
//画矩形
//(x1,y1),(x2,y2):矩形的对角坐标
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b083      	sub	sp, #12
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	4608      	mov	r0, r1
 8005cf6:	4611      	mov	r1, r2
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	4623      	mov	r3, r4
 8005cfc:	80fb      	strh	r3, [r7, #6]
 8005cfe:	4603      	mov	r3, r0
 8005d00:	80bb      	strh	r3, [r7, #4]
 8005d02:	460b      	mov	r3, r1
 8005d04:	807b      	strh	r3, [r7, #2]
 8005d06:	4613      	mov	r3, r2
 8005d08:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1,y1,x2,y1);
 8005d0a:	88bb      	ldrh	r3, [r7, #4]
 8005d0c:	887a      	ldrh	r2, [r7, #2]
 8005d0e:	88b9      	ldrh	r1, [r7, #4]
 8005d10:	88f8      	ldrh	r0, [r7, #6]
 8005d12:	f7ff ff67 	bl	8005be4 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x1,y2);
 8005d16:	883b      	ldrh	r3, [r7, #0]
 8005d18:	88fa      	ldrh	r2, [r7, #6]
 8005d1a:	88b9      	ldrh	r1, [r7, #4]
 8005d1c:	88f8      	ldrh	r0, [r7, #6]
 8005d1e:	f7ff ff61 	bl	8005be4 <LCD_DrawLine>
	LCD_DrawLine(x1,y2,x2,y2);
 8005d22:	883b      	ldrh	r3, [r7, #0]
 8005d24:	887a      	ldrh	r2, [r7, #2]
 8005d26:	8839      	ldrh	r1, [r7, #0]
 8005d28:	88f8      	ldrh	r0, [r7, #6]
 8005d2a:	f7ff ff5b 	bl	8005be4 <LCD_DrawLine>
	LCD_DrawLine(x2,y1,x2,y2);
 8005d2e:	883b      	ldrh	r3, [r7, #0]
 8005d30:	887a      	ldrh	r2, [r7, #2]
 8005d32:	88b9      	ldrh	r1, [r7, #4]
 8005d34:	8878      	ldrh	r0, [r7, #2]
 8005d36:	f7ff ff55 	bl	8005be4 <LCD_DrawLine>
}
 8005d3a:	bf00      	nop
 8005d3c:	370c      	adds	r7, #12
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd90      	pop	{r4, r7, pc}

08005d42 <LCD_Draw_Circle>:
//在指定位置画一个指定大小的圆
//(x,y):中心点
//r    :半径
void LCD_Draw_Circle(uint16_t x0,uint16_t y0,uint8_t r)
{
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b086      	sub	sp, #24
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	4603      	mov	r3, r0
 8005d4a:	80fb      	strh	r3, [r7, #6]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	80bb      	strh	r3, [r7, #4]
 8005d50:	4613      	mov	r3, r2
 8005d52:	70fb      	strb	r3, [r7, #3]
	int a,b;
	int di;
	a=0;b=r;
 8005d54:	2300      	movs	r3, #0
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	78fb      	ldrb	r3, [r7, #3]
 8005d5a:	613b      	str	r3, [r7, #16]
	di=3-(r<<1);             //判断下个点位置的标志
 8005d5c:	78fb      	ldrb	r3, [r7, #3]
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	f1c3 0303 	rsb	r3, r3, #3
 8005d64:	60fb      	str	r3, [r7, #12]
	while(a<=b)
 8005d66:	e07f      	b.n	8005e68 <LCD_Draw_Circle+0x126>
	{
		LCD_DrawPoint(x0+a,y0-b);             //5
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	88fb      	ldrh	r3, [r7, #6]
 8005d6e:	4413      	add	r3, r2
 8005d70:	b298      	uxth	r0, r3
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	88ba      	ldrh	r2, [r7, #4]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	f7fc f835 	bl	8001dec <LCD_DrawPoint>
 		LCD_DrawPoint(x0+b,y0-a);             //0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	88fb      	ldrh	r3, [r7, #6]
 8005d88:	4413      	add	r3, r2
 8005d8a:	b298      	uxth	r0, r3
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	88ba      	ldrh	r2, [r7, #4]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	4619      	mov	r1, r3
 8005d98:	f7fc f828 	bl	8001dec <LCD_DrawPoint>
		LCD_DrawPoint(x0+b,y0+a);             //4
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	b29a      	uxth	r2, r3
 8005da0:	88fb      	ldrh	r3, [r7, #6]
 8005da2:	4413      	add	r3, r2
 8005da4:	b298      	uxth	r0, r3
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	88bb      	ldrh	r3, [r7, #4]
 8005dac:	4413      	add	r3, r2
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	4619      	mov	r1, r3
 8005db2:	f7fc f81b 	bl	8001dec <LCD_DrawPoint>
		LCD_DrawPoint(x0+a,y0+b);             //6
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	b29a      	uxth	r2, r3
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	b298      	uxth	r0, r3
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	88bb      	ldrh	r3, [r7, #4]
 8005dc6:	4413      	add	r3, r2
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	4619      	mov	r1, r3
 8005dcc:	f7fc f80e 	bl	8001dec <LCD_DrawPoint>
		LCD_DrawPoint(x0-a,y0+b);             //1
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	88fa      	ldrh	r2, [r7, #6]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	b298      	uxth	r0, r3
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	b29a      	uxth	r2, r3
 8005dde:	88bb      	ldrh	r3, [r7, #4]
 8005de0:	4413      	add	r3, r2
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	4619      	mov	r1, r3
 8005de6:	f7fc f801 	bl	8001dec <LCD_DrawPoint>
 		LCD_DrawPoint(x0-b,y0+a);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	88fa      	ldrh	r2, [r7, #6]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	b298      	uxth	r0, r3
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	88bb      	ldrh	r3, [r7, #4]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	4619      	mov	r1, r3
 8005e00:	f7fb fff4 	bl	8001dec <LCD_DrawPoint>
		LCD_DrawPoint(x0-a,y0-b);             //2
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	88fa      	ldrh	r2, [r7, #6]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	b298      	uxth	r0, r3
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	88ba      	ldrh	r2, [r7, #4]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	4619      	mov	r1, r3
 8005e1a:	f7fb ffe7 	bl	8001dec <LCD_DrawPoint>
  		LCD_DrawPoint(x0-b,y0-a);             //7
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	88fa      	ldrh	r2, [r7, #6]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	b298      	uxth	r0, r3
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	88ba      	ldrh	r2, [r7, #4]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	4619      	mov	r1, r3
 8005e34:	f7fb ffda 	bl	8001dec <LCD_DrawPoint>
		a++;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	617b      	str	r3, [r7, #20]
		//使用Bresenham算法画圆
		if(di<0)di +=4*a+6;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	da06      	bge.n	8005e52 <LCD_Draw_Circle+0x110>
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	3306      	adds	r3, #6
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	60fb      	str	r3, [r7, #12]
 8005e50:	e00a      	b.n	8005e68 <LCD_Draw_Circle+0x126>
		else
		{
			di+=10+4*(a-b);
 8005e52:	697a      	ldr	r2, [r7, #20]
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	330a      	adds	r3, #10
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4413      	add	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]
			b--;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	613b      	str	r3, [r7, #16]
	while(a<=b)
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	f77f af7b 	ble.w	8005d68 <LCD_Draw_Circle+0x26>
		}
	}
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	3718      	adds	r7, #24
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 8005e7c:	b590      	push	{r4, r7, lr}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	4604      	mov	r4, r0
 8005e84:	4608      	mov	r0, r1
 8005e86:	4611      	mov	r1, r2
 8005e88:	461a      	mov	r2, r3
 8005e8a:	4623      	mov	r3, r4
 8005e8c:	80fb      	strh	r3, [r7, #6]
 8005e8e:	4603      	mov	r3, r0
 8005e90:	80bb      	strh	r3, [r7, #4]
 8005e92:	460b      	mov	r3, r1
 8005e94:	70fb      	strb	r3, [r7, #3]
 8005e96:	4613      	mov	r3, r2
 8005e98:	70bb      	strb	r3, [r7, #2]
    uint8_t temp,t1,t;
	uint16_t y0=y;
 8005e9a:	88bb      	ldrh	r3, [r7, #4]
 8005e9c:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 8005e9e:	78bb      	ldrb	r3, [r7, #2]
 8005ea0:	08db      	lsrs	r3, r3, #3
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	78bb      	ldrb	r3, [r7, #2]
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	bf14      	ite	ne
 8005eb2:	2301      	movne	r3, #1
 8005eb4:	2300      	moveq	r3, #0
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	4413      	add	r3, r2
 8005eba:	b2da      	uxtb	r2, r3
 8005ebc:	78bb      	ldrb	r3, [r7, #2]
 8005ebe:	085b      	lsrs	r3, r3, #1
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	fb12 f303 	smulbb	r3, r2, r3
 8005ec6:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8005ec8:	78fb      	ldrb	r3, [r7, #3]
 8005eca:	3b20      	subs	r3, #32
 8005ecc:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 8005ece:	2300      	movs	r3, #0
 8005ed0:	737b      	strb	r3, [r7, #13]
 8005ed2:	e069      	b.n	8005fa8 <LCD_ShowChar+0x12c>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 8005ed4:	78bb      	ldrb	r3, [r7, #2]
 8005ed6:	2b0c      	cmp	r3, #12
 8005ed8:	d10b      	bne.n	8005ef2 <LCD_ShowChar+0x76>
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	7b79      	ldrb	r1, [r7, #13]
 8005ede:	4838      	ldr	r0, [pc, #224]	; (8005fc0 <LCD_ShowChar+0x144>)
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4403      	add	r3, r0
 8005eea:	440b      	add	r3, r1
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	73fb      	strb	r3, [r7, #15]
 8005ef0:	e019      	b.n	8005f26 <LCD_ShowChar+0xaa>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 8005ef2:	78bb      	ldrb	r3, [r7, #2]
 8005ef4:	2b10      	cmp	r3, #16
 8005ef6:	d108      	bne.n	8005f0a <LCD_ShowChar+0x8e>
 8005ef8:	78fa      	ldrb	r2, [r7, #3]
 8005efa:	7b7b      	ldrb	r3, [r7, #13]
 8005efc:	4931      	ldr	r1, [pc, #196]	; (8005fc4 <LCD_ShowChar+0x148>)
 8005efe:	0112      	lsls	r2, r2, #4
 8005f00:	440a      	add	r2, r1
 8005f02:	4413      	add	r3, r2
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	73fb      	strb	r3, [r7, #15]
 8005f08:	e00d      	b.n	8005f26 <LCD_ShowChar+0xaa>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 8005f0a:	78bb      	ldrb	r3, [r7, #2]
 8005f0c:	2b18      	cmp	r3, #24
 8005f0e:	d150      	bne.n	8005fb2 <LCD_ShowChar+0x136>
 8005f10:	78fa      	ldrb	r2, [r7, #3]
 8005f12:	7b79      	ldrb	r1, [r7, #13]
 8005f14:	482c      	ldr	r0, [pc, #176]	; (8005fc8 <LCD_ShowChar+0x14c>)
 8005f16:	4613      	mov	r3, r2
 8005f18:	00db      	lsls	r3, r3, #3
 8005f1a:	4413      	add	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4403      	add	r3, r0
 8005f20:	440b      	add	r3, r1
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 8005f26:	2300      	movs	r3, #0
 8005f28:	73bb      	strb	r3, [r7, #14]
 8005f2a:	e035      	b.n	8005f98 <LCD_ShowChar+0x11c>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 8005f2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	da07      	bge.n	8005f44 <LCD_ShowChar+0xc8>
 8005f34:	4b25      	ldr	r3, [pc, #148]	; (8005fcc <LCD_ShowChar+0x150>)
 8005f36:	881a      	ldrh	r2, [r3, #0]
 8005f38:	88b9      	ldrh	r1, [r7, #4]
 8005f3a:	88fb      	ldrh	r3, [r7, #6]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fb ff71 	bl	8001e24 <LCD_Fast_DrawPoint>
 8005f42:	e00a      	b.n	8005f5a <LCD_ShowChar+0xde>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 8005f44:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d106      	bne.n	8005f5a <LCD_ShowChar+0xde>
 8005f4c:	4b20      	ldr	r3, [pc, #128]	; (8005fd0 <LCD_ShowChar+0x154>)
 8005f4e:	881a      	ldrh	r2, [r3, #0]
 8005f50:	88b9      	ldrh	r1, [r7, #4]
 8005f52:	88fb      	ldrh	r3, [r7, #6]
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7fb ff65 	bl	8001e24 <LCD_Fast_DrawPoint>
			temp<<=1;
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	73fb      	strb	r3, [r7, #15]
			y++;
 8005f60:	88bb      	ldrh	r3, [r7, #4]
 8005f62:	3301      	adds	r3, #1
 8005f64:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 8005f66:	4b1b      	ldr	r3, [pc, #108]	; (8005fd4 <LCD_ShowChar+0x158>)
 8005f68:	885b      	ldrh	r3, [r3, #2]
 8005f6a:	88ba      	ldrh	r2, [r7, #4]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d222      	bcs.n	8005fb6 <LCD_ShowChar+0x13a>
			if((y-y0)==size)
 8005f70:	88ba      	ldrh	r2, [r7, #4]
 8005f72:	897b      	ldrh	r3, [r7, #10]
 8005f74:	1ad2      	subs	r2, r2, r3
 8005f76:	78bb      	ldrb	r3, [r7, #2]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d10a      	bne.n	8005f92 <LCD_ShowChar+0x116>
			{
				y=y0;
 8005f7c:	897b      	ldrh	r3, [r7, #10]
 8005f7e:	80bb      	strh	r3, [r7, #4]
				x++;
 8005f80:	88fb      	ldrh	r3, [r7, #6]
 8005f82:	3301      	adds	r3, #1
 8005f84:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 8005f86:	4b13      	ldr	r3, [pc, #76]	; (8005fd4 <LCD_ShowChar+0x158>)
 8005f88:	881b      	ldrh	r3, [r3, #0]
 8005f8a:	88fa      	ldrh	r2, [r7, #6]
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d307      	bcc.n	8005fa0 <LCD_ShowChar+0x124>
 8005f90:	e012      	b.n	8005fb8 <LCD_ShowChar+0x13c>
		for(t1=0;t1<8;t1++)
 8005f92:	7bbb      	ldrb	r3, [r7, #14]
 8005f94:	3301      	adds	r3, #1
 8005f96:	73bb      	strb	r3, [r7, #14]
 8005f98:	7bbb      	ldrb	r3, [r7, #14]
 8005f9a:	2b07      	cmp	r3, #7
 8005f9c:	d9c6      	bls.n	8005f2c <LCD_ShowChar+0xb0>
 8005f9e:	e000      	b.n	8005fa2 <LCD_ShowChar+0x126>
				break;
 8005fa0:	bf00      	nop
	for(t=0;t<csize;t++)
 8005fa2:	7b7b      	ldrb	r3, [r7, #13]
 8005fa4:	3301      	adds	r3, #1
 8005fa6:	737b      	strb	r3, [r7, #13]
 8005fa8:	7b7a      	ldrb	r2, [r7, #13]
 8005faa:	7a7b      	ldrb	r3, [r7, #9]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d391      	bcc.n	8005ed4 <LCD_ShowChar+0x58>
 8005fb0:	e002      	b.n	8005fb8 <LCD_ShowChar+0x13c>
		else return;								//没有的字库
 8005fb2:	bf00      	nop
 8005fb4:	e000      	b.n	8005fb8 <LCD_ShowChar+0x13c>
			if(y>=lcddev.height)return;		//超区域了
 8005fb6:	bf00      	nop
			}
		}
	}
}
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd90      	pop	{r4, r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	0800aa44 	.word	0x0800aa44
 8005fc4:	0800aeb8 	.word	0x0800aeb8
 8005fc8:	0800b4a8 	.word	0x0800b4a8
 8005fcc:	200000d4 	.word	0x200000d4
 8005fd0:	20000000 	.word	0x20000000
 8005fd4:	200001ec 	.word	0x200001ec

08005fd8 <LCD_Pow>:
//m^n函数
//返回值:m^n次方.
uint32_t LCD_Pow(uint8_t m,uint8_t n)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	4603      	mov	r3, r0
 8005fe0:	460a      	mov	r2, r1
 8005fe2:	71fb      	strb	r3, [r7, #7]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8005fec:	e004      	b.n	8005ff8 <LCD_Pow+0x20>
 8005fee:	79fa      	ldrb	r2, [r7, #7]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	60fb      	str	r3, [r7, #12]
 8005ff8:	79bb      	ldrb	r3, [r7, #6]
 8005ffa:	1e5a      	subs	r2, r3, #1
 8005ffc:	71ba      	strb	r2, [r7, #6]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d1f5      	bne.n	8005fee <LCD_Pow+0x16>
	return result;
 8006002:	68fb      	ldr	r3, [r7, #12]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <LCD_ShowNum>:
//len :数字的位数
//size:字体大小
//color:颜色
//num:数值(0~4294967295);
void LCD_ShowNum(uint16_t x,uint16_t y,uint32_t num,uint8_t len,uint8_t size)
{
 8006010:	b590      	push	{r4, r7, lr}
 8006012:	b089      	sub	sp, #36	; 0x24
 8006014:	af02      	add	r7, sp, #8
 8006016:	60ba      	str	r2, [r7, #8]
 8006018:	461a      	mov	r2, r3
 800601a:	4603      	mov	r3, r0
 800601c:	81fb      	strh	r3, [r7, #14]
 800601e:	460b      	mov	r3, r1
 8006020:	81bb      	strh	r3, [r7, #12]
 8006022:	4613      	mov	r3, r2
 8006024:	71fb      	strb	r3, [r7, #7]
	uint8_t t,temp;
	uint8_t enshow=0;
 8006026:	2300      	movs	r3, #0
 8006028:	75bb      	strb	r3, [r7, #22]
	for(t=0;t<len;t++)
 800602a:	2300      	movs	r3, #0
 800602c:	75fb      	strb	r3, [r7, #23]
 800602e:	e055      	b.n	80060dc <LCD_ShowNum+0xcc>
	{
		temp=(num/LCD_Pow(10,len-t-1))%10;
 8006030:	79fa      	ldrb	r2, [r7, #7]
 8006032:	7dfb      	ldrb	r3, [r7, #23]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	b2db      	uxtb	r3, r3
 8006038:	3b01      	subs	r3, #1
 800603a:	b2db      	uxtb	r3, r3
 800603c:	4619      	mov	r1, r3
 800603e:	200a      	movs	r0, #10
 8006040:	f7ff ffca 	bl	8005fd8 <LCD_Pow>
 8006044:	4602      	mov	r2, r0
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	fbb3 f1f2 	udiv	r1, r3, r2
 800604c:	4b28      	ldr	r3, [pc, #160]	; (80060f0 <LCD_ShowNum+0xe0>)
 800604e:	fba3 2301 	umull	r2, r3, r3, r1
 8006052:	08da      	lsrs	r2, r3, #3
 8006054:	4613      	mov	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	1aca      	subs	r2, r1, r3
 800605e:	4613      	mov	r3, r2
 8006060:	757b      	strb	r3, [r7, #21]
		if(enshow==0&&t<(len-1))
 8006062:	7dbb      	ldrb	r3, [r7, #22]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d11f      	bne.n	80060a8 <LCD_ShowNum+0x98>
 8006068:	7dfa      	ldrb	r2, [r7, #23]
 800606a:	79fb      	ldrb	r3, [r7, #7]
 800606c:	3b01      	subs	r3, #1
 800606e:	429a      	cmp	r2, r3
 8006070:	da1a      	bge.n	80060a8 <LCD_ShowNum+0x98>
		{
			if(temp==0)
 8006072:	7d7b      	ldrb	r3, [r7, #21]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d115      	bne.n	80060a4 <LCD_ShowNum+0x94>
			{
				LCD_ShowChar(x+(size/2)*t,y,' ',size,0);
 8006078:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800607c:	085b      	lsrs	r3, r3, #1
 800607e:	b2db      	uxtb	r3, r3
 8006080:	b29a      	uxth	r2, r3
 8006082:	7dfb      	ldrb	r3, [r7, #23]
 8006084:	b29b      	uxth	r3, r3
 8006086:	fb12 f303 	smulbb	r3, r2, r3
 800608a:	b29a      	uxth	r2, r3
 800608c:	89fb      	ldrh	r3, [r7, #14]
 800608e:	4413      	add	r3, r2
 8006090:	b298      	uxth	r0, r3
 8006092:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006096:	89b9      	ldrh	r1, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	9200      	str	r2, [sp, #0]
 800609c:	2220      	movs	r2, #32
 800609e:	f7ff feed 	bl	8005e7c <LCD_ShowChar>
				continue;
 80060a2:	e018      	b.n	80060d6 <LCD_ShowNum+0xc6>
			}else enshow=1;
 80060a4:	2301      	movs	r3, #1
 80060a6:	75bb      	strb	r3, [r7, #22]

		}
	 	LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,0);
 80060a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060ac:	085b      	lsrs	r3, r3, #1
 80060ae:	b2db      	uxtb	r3, r3
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	7dfb      	ldrb	r3, [r7, #23]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	fb12 f303 	smulbb	r3, r2, r3
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	89fb      	ldrh	r3, [r7, #14]
 80060be:	4413      	add	r3, r2
 80060c0:	b298      	uxth	r0, r3
 80060c2:	7d7b      	ldrb	r3, [r7, #21]
 80060c4:	3330      	adds	r3, #48	; 0x30
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80060cc:	89b9      	ldrh	r1, [r7, #12]
 80060ce:	2400      	movs	r4, #0
 80060d0:	9400      	str	r4, [sp, #0]
 80060d2:	f7ff fed3 	bl	8005e7c <LCD_ShowChar>
	for(t=0;t<len;t++)
 80060d6:	7dfb      	ldrb	r3, [r7, #23]
 80060d8:	3301      	adds	r3, #1
 80060da:	75fb      	strb	r3, [r7, #23]
 80060dc:	7dfa      	ldrb	r2, [r7, #23]
 80060de:	79fb      	ldrb	r3, [r7, #7]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d3a5      	bcc.n	8006030 <LCD_ShowNum+0x20>
	}
}
 80060e4:	bf00      	nop
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd90      	pop	{r4, r7, pc}
 80060ee:	bf00      	nop
 80060f0:	cccccccd 	.word	0xcccccccd

080060f4 <LCD_ShowxNum>:
//mode:
//[7]:0,不填充;1,填充0.
//[6:1]:保留
//[0]:0,非叠加显示;1,叠加显示.
void LCD_ShowxNum(uint16_t x,uint16_t y,uint32_t num,uint8_t len,uint8_t size,uint8_t mode)
{
 80060f4:	b590      	push	{r4, r7, lr}
 80060f6:	b089      	sub	sp, #36	; 0x24
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	60ba      	str	r2, [r7, #8]
 80060fc:	461a      	mov	r2, r3
 80060fe:	4603      	mov	r3, r0
 8006100:	81fb      	strh	r3, [r7, #14]
 8006102:	460b      	mov	r3, r1
 8006104:	81bb      	strh	r3, [r7, #12]
 8006106:	4613      	mov	r3, r2
 8006108:	71fb      	strb	r3, [r7, #7]
	uint8_t t,temp;
	uint8_t enshow=0;
 800610a:	2300      	movs	r3, #0
 800610c:	75bb      	strb	r3, [r7, #22]
	for(t=0;t<len;t++)
 800610e:	2300      	movs	r3, #0
 8006110:	75fb      	strb	r3, [r7, #23]
 8006112:	e07e      	b.n	8006212 <LCD_ShowxNum+0x11e>
	{
		temp=(num/LCD_Pow(10,len-t-1))%10;
 8006114:	79fa      	ldrb	r2, [r7, #7]
 8006116:	7dfb      	ldrb	r3, [r7, #23]
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	b2db      	uxtb	r3, r3
 800611c:	3b01      	subs	r3, #1
 800611e:	b2db      	uxtb	r3, r3
 8006120:	4619      	mov	r1, r3
 8006122:	200a      	movs	r0, #10
 8006124:	f7ff ff58 	bl	8005fd8 <LCD_Pow>
 8006128:	4602      	mov	r2, r0
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006130:	4b3d      	ldr	r3, [pc, #244]	; (8006228 <LCD_ShowxNum+0x134>)
 8006132:	fba3 2301 	umull	r2, r3, r3, r1
 8006136:	08da      	lsrs	r2, r3, #3
 8006138:	4613      	mov	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	1aca      	subs	r2, r1, r3
 8006142:	4613      	mov	r3, r2
 8006144:	757b      	strb	r3, [r7, #21]
		if(enshow==0&&t<(len-1))
 8006146:	7dbb      	ldrb	r3, [r7, #22]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d143      	bne.n	80061d4 <LCD_ShowxNum+0xe0>
 800614c:	7dfa      	ldrb	r2, [r7, #23]
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	3b01      	subs	r3, #1
 8006152:	429a      	cmp	r2, r3
 8006154:	da3e      	bge.n	80061d4 <LCD_ShowxNum+0xe0>
		{
			if(temp==0)
 8006156:	7d7b      	ldrb	r3, [r7, #21]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d139      	bne.n	80061d0 <LCD_ShowxNum+0xdc>
			{
				if(mode&0X80)LCD_ShowChar(x+(size/2)*t,y,'0',size,mode&0X01);
 800615c:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8006160:	2b00      	cmp	r3, #0
 8006162:	da1a      	bge.n	800619a <LCD_ShowxNum+0xa6>
 8006164:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006168:	085b      	lsrs	r3, r3, #1
 800616a:	b2db      	uxtb	r3, r3
 800616c:	b29a      	uxth	r2, r3
 800616e:	7dfb      	ldrb	r3, [r7, #23]
 8006170:	b29b      	uxth	r3, r3
 8006172:	fb12 f303 	smulbb	r3, r2, r3
 8006176:	b29a      	uxth	r2, r3
 8006178:	89fb      	ldrh	r3, [r7, #14]
 800617a:	4413      	add	r3, r2
 800617c:	b298      	uxth	r0, r3
 800617e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	b2db      	uxtb	r3, r3
 8006188:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800618c:	89b9      	ldrh	r1, [r7, #12]
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	4613      	mov	r3, r2
 8006192:	2230      	movs	r2, #48	; 0x30
 8006194:	f7ff fe72 	bl	8005e7c <LCD_ShowChar>
				else LCD_ShowChar(x+(size/2)*t,y,' ',size,mode&0X01);
 				continue;
 8006198:	e038      	b.n	800620c <LCD_ShowxNum+0x118>
				else LCD_ShowChar(x+(size/2)*t,y,' ',size,mode&0X01);
 800619a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800619e:	085b      	lsrs	r3, r3, #1
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	7dfb      	ldrb	r3, [r7, #23]
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	fb12 f303 	smulbb	r3, r2, r3
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	89fb      	ldrh	r3, [r7, #14]
 80061b0:	4413      	add	r3, r2
 80061b2:	b298      	uxth	r0, r3
 80061b4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80061c2:	89b9      	ldrh	r1, [r7, #12]
 80061c4:	9300      	str	r3, [sp, #0]
 80061c6:	4613      	mov	r3, r2
 80061c8:	2220      	movs	r2, #32
 80061ca:	f7ff fe57 	bl	8005e7c <LCD_ShowChar>
 				continue;
 80061ce:	e01d      	b.n	800620c <LCD_ShowxNum+0x118>
			}else enshow=1;
 80061d0:	2301      	movs	r3, #1
 80061d2:	75bb      	strb	r3, [r7, #22]

		}
	 	LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,mode&0X01);
 80061d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061d8:	085b      	lsrs	r3, r3, #1
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	b29a      	uxth	r2, r3
 80061de:	7dfb      	ldrb	r3, [r7, #23]
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	fb12 f303 	smulbb	r3, r2, r3
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	89fb      	ldrh	r3, [r7, #14]
 80061ea:	4413      	add	r3, r2
 80061ec:	b298      	uxth	r0, r3
 80061ee:	7d7b      	ldrb	r3, [r7, #21]
 80061f0:	3330      	adds	r3, #48	; 0x30
 80061f2:	b2da      	uxtb	r2, r3
 80061f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80061f8:	f003 0301 	and.w	r3, r3, #1
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8006202:	89b9      	ldrh	r1, [r7, #12]
 8006204:	9300      	str	r3, [sp, #0]
 8006206:	4623      	mov	r3, r4
 8006208:	f7ff fe38 	bl	8005e7c <LCD_ShowChar>
	for(t=0;t<len;t++)
 800620c:	7dfb      	ldrb	r3, [r7, #23]
 800620e:	3301      	adds	r3, #1
 8006210:	75fb      	strb	r3, [r7, #23]
 8006212:	7dfa      	ldrb	r2, [r7, #23]
 8006214:	79fb      	ldrb	r3, [r7, #7]
 8006216:	429a      	cmp	r2, r3
 8006218:	f4ff af7c 	bcc.w	8006114 <LCD_ShowxNum+0x20>
	}
}
 800621c:	bf00      	nop
 800621e:	bf00      	nop
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	bd90      	pop	{r4, r7, pc}
 8006226:	bf00      	nop
 8006228:	cccccccd 	.word	0xcccccccd

0800622c <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 800622c:	b590      	push	{r4, r7, lr}
 800622e:	b087      	sub	sp, #28
 8006230:	af02      	add	r7, sp, #8
 8006232:	4604      	mov	r4, r0
 8006234:	4608      	mov	r0, r1
 8006236:	4611      	mov	r1, r2
 8006238:	461a      	mov	r2, r3
 800623a:	4623      	mov	r3, r4
 800623c:	80fb      	strh	r3, [r7, #6]
 800623e:	4603      	mov	r3, r0
 8006240:	80bb      	strh	r3, [r7, #4]
 8006242:	460b      	mov	r3, r1
 8006244:	807b      	strh	r3, [r7, #2]
 8006246:	4613      	mov	r3, r2
 8006248:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	73fb      	strb	r3, [r7, #15]
	width+=x;
 800624e:	887a      	ldrh	r2, [r7, #2]
 8006250:	88fb      	ldrh	r3, [r7, #6]
 8006252:	4413      	add	r3, r2
 8006254:	807b      	strh	r3, [r7, #2]
	height+=y;
 8006256:	883a      	ldrh	r2, [r7, #0]
 8006258:	88bb      	ldrh	r3, [r7, #4]
 800625a:	4413      	add	r3, r2
 800625c:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 800625e:	e024      	b.n	80062aa <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 8006260:	88fa      	ldrh	r2, [r7, #6]
 8006262:	887b      	ldrh	r3, [r7, #2]
 8006264:	429a      	cmp	r2, r3
 8006266:	d307      	bcc.n	8006278 <LCD_ShowString+0x4c>
 8006268:	7bfb      	ldrb	r3, [r7, #15]
 800626a:	80fb      	strh	r3, [r7, #6]
 800626c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006270:	b29a      	uxth	r2, r3
 8006272:	88bb      	ldrh	r3, [r7, #4]
 8006274:	4413      	add	r3, r2
 8006276:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 8006278:	88ba      	ldrh	r2, [r7, #4]
 800627a:	883b      	ldrh	r3, [r7, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d21d      	bcs.n	80062bc <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	781a      	ldrb	r2, [r3, #0]
 8006284:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006288:	88b9      	ldrh	r1, [r7, #4]
 800628a:	88f8      	ldrh	r0, [r7, #6]
 800628c:	2400      	movs	r4, #0
 800628e:	9400      	str	r4, [sp, #0]
 8006290:	f7ff fdf4 	bl	8005e7c <LCD_ShowChar>
        x+=size/2;
 8006294:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006298:	085b      	lsrs	r3, r3, #1
 800629a:	b2db      	uxtb	r3, r3
 800629c:	b29a      	uxth	r2, r3
 800629e:	88fb      	ldrh	r3, [r7, #6]
 80062a0:	4413      	add	r3, r2
 80062a2:	80fb      	strh	r3, [r7, #6]
        p++;
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	3301      	adds	r3, #1
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 80062aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ac:	781b      	ldrb	r3, [r3, #0]
 80062ae:	2b7e      	cmp	r3, #126	; 0x7e
 80062b0:	d805      	bhi.n	80062be <LCD_ShowString+0x92>
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2b1f      	cmp	r3, #31
 80062b8:	d8d2      	bhi.n	8006260 <LCD_ShowString+0x34>
    }
}
 80062ba:	e000      	b.n	80062be <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 80062bc:	bf00      	nop
}
 80062be:	bf00      	nop
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd90      	pop	{r4, r7, pc}
	...

080062c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80062ce:	f001 fe3f 	bl	8007f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80062d2:	f000 fa87 	bl	80067e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80062d6:	f7fb f8e7 	bl	80014a8 <MX_GPIO_Init>
  MX_DMA_Init();
 80062da:	f7fa ffd7 	bl	800128c <MX_DMA_Init>
  MX_DAC_Init();
 80062de:	f7fa ff67 	bl	80011b0 <MX_DAC_Init>
  MX_FSMC_Init();
 80062e2:	f7fa ffed 	bl	80012c0 <MX_FSMC_Init>
  MX_TIM3_Init();
 80062e6:	f000 fcf9 	bl	8006cdc <MX_TIM3_Init>
  MX_ADC1_Init();
 80062ea:	f7fa fe2d 	bl	8000f48 <MX_ADC1_Init>
  MX_TIM6_Init();
 80062ee:	f000 fd43 	bl	8006d78 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 80062f2:	48af      	ldr	r0, [pc, #700]	; (80065b0 <main+0x2e8>)
 80062f4:	f003 fd0a 	bl	8009d0c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *)&ADC_CAP,1);
 80062f8:	2201      	movs	r2, #1
 80062fa:	49ae      	ldr	r1, [pc, #696]	; (80065b4 <main+0x2ec>)
 80062fc:	48ae      	ldr	r0, [pc, #696]	; (80065b8 <main+0x2f0>)
 80062fe:	f001 ff01 	bl	8008104 <HAL_ADC_Start_DMA>
  HAL_DAC_Start(&hdac,DAC1_CHANNEL_2);
 8006302:	2110      	movs	r1, #16
 8006304:	48ad      	ldr	r0, [pc, #692]	; (80065bc <main+0x2f4>)
 8006306:	f002 fc1b 	bl	8008b40 <HAL_DAC_Start>
  delay_init(168);
 800630a:	20a8      	movs	r0, #168	; 0xa8
 800630c:	f7fa fee6 	bl	80010dc <delay_init>
  LCD_Init();
 8006310:	f7fb ffe2 	bl	80022d8 <LCD_Init>
	tp_dev.init();
 8006314:	4baa      	ldr	r3, [pc, #680]	; (80065c0 <main+0x2f8>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4798      	blx	r3

  POINT_COLOR = RED;
 800631a:	4baa      	ldr	r3, [pc, #680]	; (80065c4 <main+0x2fc>)
 800631c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006320:	801a      	strh	r2, [r3, #0]


  LCD_ShowString(72, 40, 96, 16, 16, (uint8_t *)"BOOST:   ");
 8006322:	4ba9      	ldr	r3, [pc, #676]	; (80065c8 <main+0x300>)
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	2310      	movs	r3, #16
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	2310      	movs	r3, #16
 800632c:	2260      	movs	r2, #96	; 0x60
 800632e:	2128      	movs	r1, #40	; 0x28
 8006330:	2048      	movs	r0, #72	; 0x48
 8006332:	f7ff ff7b 	bl	800622c <LCD_ShowString>
  LCD_Fill(192,40,212,56,GRAY);
  LCD_Fill(196,48,208,49,RED);
  LCD_Fill(202,44,203,52,RED);
	*/

	LCD_Fill(28,110,48,126,GRAY);
 8006336:	f248 4330 	movw	r3, #33840	; 0x8430
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	237e      	movs	r3, #126	; 0x7e
 800633e:	2230      	movs	r2, #48	; 0x30
 8006340:	216e      	movs	r1, #110	; 0x6e
 8006342:	201c      	movs	r0, #28
 8006344:	f7ff fbd4 	bl	8005af0 <LCD_Fill>
  LCD_Fill(32,118,44,119,GREEN);
 8006348:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	2377      	movs	r3, #119	; 0x77
 8006350:	222c      	movs	r2, #44	; 0x2c
 8006352:	2176      	movs	r1, #118	; 0x76
 8006354:	2020      	movs	r0, #32
 8006356:	f7ff fbcb 	bl	8005af0 <LCD_Fill>
  LCD_Fill(192,110,212,126,GRAY);
 800635a:	f248 4330 	movw	r3, #33840	; 0x8430
 800635e:	9300      	str	r3, [sp, #0]
 8006360:	237e      	movs	r3, #126	; 0x7e
 8006362:	22d4      	movs	r2, #212	; 0xd4
 8006364:	216e      	movs	r1, #110	; 0x6e
 8006366:	20c0      	movs	r0, #192	; 0xc0
 8006368:	f7ff fbc2 	bl	8005af0 <LCD_Fill>
  LCD_Fill(196,118,208,119,RED);
 800636c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006370:	9300      	str	r3, [sp, #0]
 8006372:	2377      	movs	r3, #119	; 0x77
 8006374:	22d0      	movs	r2, #208	; 0xd0
 8006376:	2176      	movs	r1, #118	; 0x76
 8006378:	20c4      	movs	r0, #196	; 0xc4
 800637a:	f7ff fbb9 	bl	8005af0 <LCD_Fill>
  LCD_Fill(202,114,203,122,RED);
 800637e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	237a      	movs	r3, #122	; 0x7a
 8006386:	22cb      	movs	r2, #203	; 0xcb
 8006388:	2172      	movs	r1, #114	; 0x72
 800638a:	20ca      	movs	r0, #202	; 0xca
 800638c:	f7ff fbb0 	bl	8005af0 <LCD_Fill>
  // LCD_ShowxNum(148,140,123,3,16,0);
  LCD_ShowxNum(148,40,BOOST,3,16,0);
 8006390:	4b8e      	ldr	r3, [pc, #568]	; (80065cc <main+0x304>)
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	461a      	mov	r2, r3
 8006396:	2300      	movs	r3, #0
 8006398:	9301      	str	r3, [sp, #4]
 800639a:	2310      	movs	r3, #16
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	2303      	movs	r3, #3
 80063a0:	2128      	movs	r1, #40	; 0x28
 80063a2:	2094      	movs	r0, #148	; 0x94
 80063a4:	f7ff fea6 	bl	80060f4 <LCD_ShowxNum>
  POINT_COLOR = GRAY;
 80063a8:	4b86      	ldr	r3, [pc, #536]	; (80065c4 <main+0x2fc>)
 80063aa:	f248 4230 	movw	r2, #33840	; 0x8430
 80063ae:	801a      	strh	r2, [r3, #0]
  LCD_DrawRectangle(48,110,192,126);
 80063b0:	237e      	movs	r3, #126	; 0x7e
 80063b2:	22c0      	movs	r2, #192	; 0xc0
 80063b4:	216e      	movs	r1, #110	; 0x6e
 80063b6:	2030      	movs	r0, #48	; 0x30
 80063b8:	f7ff fc98 	bl	8005cec <LCD_DrawRectangle>
	POINT_COLOR = RED;
 80063bc:	4b81      	ldr	r3, [pc, #516]	; (80065c4 <main+0x2fc>)
 80063be:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80063c2:	801a      	strh	r2, [r3, #0]
	LCD_Fill(48, 110,BOOST*144.0/100.0+49.0, 126,GRAY);
 80063c4:	4b81      	ldr	r3, [pc, #516]	; (80065cc <main+0x304>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fa f84f 	bl	800046c <__aeabi_i2d>
 80063ce:	f04f 0200 	mov.w	r2, #0
 80063d2:	4b7f      	ldr	r3, [pc, #508]	; (80065d0 <main+0x308>)
 80063d4:	f7fa f8b4 	bl	8000540 <__aeabi_dmul>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4610      	mov	r0, r2
 80063de:	4619      	mov	r1, r3
 80063e0:	f04f 0200 	mov.w	r2, #0
 80063e4:	4b7b      	ldr	r3, [pc, #492]	; (80065d4 <main+0x30c>)
 80063e6:	f7fa f9d5 	bl	8000794 <__aeabi_ddiv>
 80063ea:	4602      	mov	r2, r0
 80063ec:	460b      	mov	r3, r1
 80063ee:	4610      	mov	r0, r2
 80063f0:	4619      	mov	r1, r3
 80063f2:	f04f 0200 	mov.w	r2, #0
 80063f6:	4b78      	ldr	r3, [pc, #480]	; (80065d8 <main+0x310>)
 80063f8:	f7f9 feec 	bl	80001d4 <__adddf3>
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	4610      	mov	r0, r2
 8006402:	4619      	mov	r1, r3
 8006404:	f7fa fb4c 	bl	8000aa0 <__aeabi_d2uiz>
 8006408:	4603      	mov	r3, r0
 800640a:	b29a      	uxth	r2, r3
 800640c:	f248 4330 	movw	r3, #33840	; 0x8430
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	237e      	movs	r3, #126	; 0x7e
 8006414:	216e      	movs	r1, #110	; 0x6e
 8006416:	2030      	movs	r0, #48	; 0x30
 8006418:	f7ff fb6a 	bl	8005af0 <LCD_Fill>
	LCD_Fill(BOOST/100.0*144.0+49.0, 111,190, 125,WHITE);
 800641c:	4b6b      	ldr	r3, [pc, #428]	; (80065cc <main+0x304>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	4618      	mov	r0, r3
 8006422:	f7fa f823 	bl	800046c <__aeabi_i2d>
 8006426:	f04f 0200 	mov.w	r2, #0
 800642a:	4b6a      	ldr	r3, [pc, #424]	; (80065d4 <main+0x30c>)
 800642c:	f7fa f9b2 	bl	8000794 <__aeabi_ddiv>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	4610      	mov	r0, r2
 8006436:	4619      	mov	r1, r3
 8006438:	f04f 0200 	mov.w	r2, #0
 800643c:	4b64      	ldr	r3, [pc, #400]	; (80065d0 <main+0x308>)
 800643e:	f7fa f87f 	bl	8000540 <__aeabi_dmul>
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	4610      	mov	r0, r2
 8006448:	4619      	mov	r1, r3
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	4b62      	ldr	r3, [pc, #392]	; (80065d8 <main+0x310>)
 8006450:	f7f9 fec0 	bl	80001d4 <__adddf3>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4610      	mov	r0, r2
 800645a:	4619      	mov	r1, r3
 800645c:	f7fa fb20 	bl	8000aa0 <__aeabi_d2uiz>
 8006460:	4603      	mov	r3, r0
 8006462:	b298      	uxth	r0, r3
 8006464:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	237d      	movs	r3, #125	; 0x7d
 800646c:	22be      	movs	r2, #190	; 0xbe
 800646e:	216f      	movs	r1, #111	; 0x6f
 8006470:	f7ff fb3e 	bl	8005af0 <LCD_Fill>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	    tp_dev.scan(0);
 8006474:	4b52      	ldr	r3, [pc, #328]	; (80065c0 <main+0x2f8>)
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	2000      	movs	r0, #0
 800647a:	4798      	blx	r3
			DAC->DHR12R2 = ((int32_t) ADC_CAP - 2048)* BOOST / 10 + 2048;
 800647c:	4b4d      	ldr	r3, [pc, #308]	; (80065b4 <main+0x2ec>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8006484:	4a51      	ldr	r2, [pc, #324]	; (80065cc <main+0x304>)
 8006486:	7812      	ldrb	r2, [r2, #0]
 8006488:	fb02 f303 	mul.w	r3, r2, r3
 800648c:	4a53      	ldr	r2, [pc, #332]	; (80065dc <main+0x314>)
 800648e:	fb82 1203 	smull	r1, r2, r2, r3
 8006492:	1092      	asrs	r2, r2, #2
 8006494:	17db      	asrs	r3, r3, #31
 8006496:	1ad3      	subs	r3, r2, r3
 8006498:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 800649c:	4b50      	ldr	r3, [pc, #320]	; (80065e0 <main+0x318>)
 800649e:	615a      	str	r2, [r3, #20]
			// DAC->DHR12R2 = ADC_CAP;
	    if (tp_dev.sta & TP_PRES_DOWN)
 80064a0:	4b47      	ldr	r3, [pc, #284]	; (80065c0 <main+0x2f8>)
 80064a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064a6:	b25b      	sxtb	r3, r3
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f280 8185 	bge.w	80067b8 <main+0x4f0>
	    {
	      if (pressTime == 0 || ((pressTime > 100) && (pressTime%50 == 0)))
 80064ae:	4b4d      	ldr	r3, [pc, #308]	; (80065e4 <main+0x31c>)
 80064b0:	881b      	ldrh	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d010      	beq.n	80064d8 <main+0x210>
 80064b6:	4b4b      	ldr	r3, [pc, #300]	; (80065e4 <main+0x31c>)
 80064b8:	881b      	ldrh	r3, [r3, #0]
 80064ba:	2b64      	cmp	r3, #100	; 0x64
 80064bc:	d9da      	bls.n	8006474 <main+0x1ac>
 80064be:	4b49      	ldr	r3, [pc, #292]	; (80065e4 <main+0x31c>)
 80064c0:	881b      	ldrh	r3, [r3, #0]
 80064c2:	4a49      	ldr	r2, [pc, #292]	; (80065e8 <main+0x320>)
 80064c4:	fba2 1203 	umull	r1, r2, r2, r3
 80064c8:	0912      	lsrs	r2, r2, #4
 80064ca:	2132      	movs	r1, #50	; 0x32
 80064cc:	fb01 f202 	mul.w	r2, r1, r2
 80064d0:	1a9b      	subs	r3, r3, r2
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1cd      	bne.n	8006474 <main+0x1ac>
	      {
					pressTime++;
 80064d8:	4b42      	ldr	r3, [pc, #264]	; (80065e4 <main+0x31c>)
 80064da:	881b      	ldrh	r3, [r3, #0]
 80064dc:	3301      	adds	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	4b40      	ldr	r3, [pc, #256]	; (80065e4 <main+0x31c>)
 80064e2:	801a      	strh	r2, [r3, #0]
	        presStatus = 1;
 80064e4:	4b41      	ldr	r3, [pc, #260]	; (80065ec <main+0x324>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	701a      	strb	r2, [r3, #0]


					if(TP_CHECK(48,110,192,126))
 80064ea:	237e      	movs	r3, #126	; 0x7e
 80064ec:	22c0      	movs	r2, #192	; 0xc0
 80064ee:	216e      	movs	r1, #110	; 0x6e
 80064f0:	2030      	movs	r0, #48	; 0x30
 80064f2:	f000 f9e1 	bl	80068b8 <TP_CHECK>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d045      	beq.n	8006588 <main+0x2c0>
						{BOOST=100.0*((tp_dev.x[0]-48.0)/144.0);
 80064fc:	4b30      	ldr	r3, [pc, #192]	; (80065c0 <main+0x2f8>)
 80064fe:	899b      	ldrh	r3, [r3, #12]
 8006500:	4618      	mov	r0, r3
 8006502:	f7f9 ffb3 	bl	800046c <__aeabi_i2d>
 8006506:	f04f 0200 	mov.w	r2, #0
 800650a:	4b39      	ldr	r3, [pc, #228]	; (80065f0 <main+0x328>)
 800650c:	f7f9 fe60 	bl	80001d0 <__aeabi_dsub>
 8006510:	4602      	mov	r2, r0
 8006512:	460b      	mov	r3, r1
 8006514:	4610      	mov	r0, r2
 8006516:	4619      	mov	r1, r3
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	4b2c      	ldr	r3, [pc, #176]	; (80065d0 <main+0x308>)
 800651e:	f7fa f939 	bl	8000794 <__aeabi_ddiv>
 8006522:	4602      	mov	r2, r0
 8006524:	460b      	mov	r3, r1
 8006526:	4610      	mov	r0, r2
 8006528:	4619      	mov	r1, r3
 800652a:	f04f 0200 	mov.w	r2, #0
 800652e:	4b29      	ldr	r3, [pc, #164]	; (80065d4 <main+0x30c>)
 8006530:	f7fa f806 	bl	8000540 <__aeabi_dmul>
 8006534:	4602      	mov	r2, r0
 8006536:	460b      	mov	r3, r1
 8006538:	4610      	mov	r0, r2
 800653a:	4619      	mov	r1, r3
 800653c:	f7fa fab0 	bl	8000aa0 <__aeabi_d2uiz>
 8006540:	4603      	mov	r3, r0
 8006542:	b2da      	uxtb	r2, r3
 8006544:	4b21      	ldr	r3, [pc, #132]	; (80065cc <main+0x304>)
 8006546:	701a      	strb	r2, [r3, #0]
							LCD_ShowxNum(148,40,BOOST,3,16,0);
 8006548:	4b20      	ldr	r3, [pc, #128]	; (80065cc <main+0x304>)
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	461a      	mov	r2, r3
 800654e:	2300      	movs	r3, #0
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	2310      	movs	r3, #16
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	2303      	movs	r3, #3
 8006558:	2128      	movs	r1, #40	; 0x28
 800655a:	2094      	movs	r0, #148	; 0x94
 800655c:	f7ff fdca 	bl	80060f4 <LCD_ShowxNum>
						LCD_Fill(48, 110,tp_dev.x[0], 126,GRAY);
 8006560:	4b17      	ldr	r3, [pc, #92]	; (80065c0 <main+0x2f8>)
 8006562:	899a      	ldrh	r2, [r3, #12]
 8006564:	f248 4330 	movw	r3, #33840	; 0x8430
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	237e      	movs	r3, #126	; 0x7e
 800656c:	216e      	movs	r1, #110	; 0x6e
 800656e:	2030      	movs	r0, #48	; 0x30
 8006570:	f7ff fabe 	bl	8005af0 <LCD_Fill>
						LCD_Fill(tp_dev.x[0], 111,190, 125,WHITE);
 8006574:	4b12      	ldr	r3, [pc, #72]	; (80065c0 <main+0x2f8>)
 8006576:	8998      	ldrh	r0, [r3, #12]
 8006578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800657c:	9300      	str	r3, [sp, #0]
 800657e:	237d      	movs	r3, #125	; 0x7d
 8006580:	22be      	movs	r2, #190	; 0xbe
 8006582:	216f      	movs	r1, #111	; 0x6f
 8006584:	f7ff fab4 	bl	8005af0 <LCD_Fill>
						}

	        if(TP_CHECK(28,110,48,126)) {
 8006588:	237e      	movs	r3, #126	; 0x7e
 800658a:	2230      	movs	r2, #48	; 0x30
 800658c:	216e      	movs	r1, #110	; 0x6e
 800658e:	201c      	movs	r0, #28
 8006590:	f000 f992 	bl	80068b8 <TP_CHECK>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	f000 8093 	beq.w	80066c2 <main+0x3fa>
	          BOOST = BOOST==1?1:BOOST-1;
 800659c:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <main+0x304>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d027      	beq.n	80065f4 <main+0x32c>
 80065a4:	4b09      	ldr	r3, [pc, #36]	; (80065cc <main+0x304>)
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	3b01      	subs	r3, #1
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	e023      	b.n	80065f6 <main+0x32e>
 80065ae:	bf00      	nop
 80065b0:	200001fc 	.word	0x200001fc
 80065b4:	200000d8 	.word	0x200000d8
 80065b8:	200000e0 	.word	0x200000e0
 80065bc:	20000188 	.word	0x20000188
 80065c0:	20000008 	.word	0x20000008
 80065c4:	200000d4 	.word	0x200000d4
 80065c8:	0800a968 	.word	0x0800a968
 80065cc:	20000002 	.word	0x20000002
 80065d0:	40620000 	.word	0x40620000
 80065d4:	40590000 	.word	0x40590000
 80065d8:	40488000 	.word	0x40488000
 80065dc:	66666667 	.word	0x66666667
 80065e0:	40007400 	.word	0x40007400
 80065e4:	200000dc 	.word	0x200000dc
 80065e8:	51eb851f 	.word	0x51eb851f
 80065ec:	200000de 	.word	0x200000de
 80065f0:	40480000 	.word	0x40480000
 80065f4:	2301      	movs	r3, #1
 80065f6:	4a74      	ldr	r2, [pc, #464]	; (80067c8 <main+0x500>)
 80065f8:	7013      	strb	r3, [r2, #0]
	          LCD_ShowxNum(148,40,BOOST,3,16,0);
 80065fa:	4b73      	ldr	r3, [pc, #460]	; (80067c8 <main+0x500>)
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	2300      	movs	r3, #0
 8006602:	9301      	str	r3, [sp, #4]
 8006604:	2310      	movs	r3, #16
 8006606:	9300      	str	r3, [sp, #0]
 8006608:	2303      	movs	r3, #3
 800660a:	2128      	movs	r1, #40	; 0x28
 800660c:	2094      	movs	r0, #148	; 0x94
 800660e:	f7ff fd71 	bl	80060f4 <LCD_ShowxNum>
						LCD_Fill(48, 110,BOOST*144.0/100.0+49.0, 126,GRAY);
 8006612:	4b6d      	ldr	r3, [pc, #436]	; (80067c8 <main+0x500>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	4618      	mov	r0, r3
 8006618:	f7f9 ff28 	bl	800046c <__aeabi_i2d>
 800661c:	f04f 0200 	mov.w	r2, #0
 8006620:	4b6a      	ldr	r3, [pc, #424]	; (80067cc <main+0x504>)
 8006622:	f7f9 ff8d 	bl	8000540 <__aeabi_dmul>
 8006626:	4602      	mov	r2, r0
 8006628:	460b      	mov	r3, r1
 800662a:	4610      	mov	r0, r2
 800662c:	4619      	mov	r1, r3
 800662e:	f04f 0200 	mov.w	r2, #0
 8006632:	4b67      	ldr	r3, [pc, #412]	; (80067d0 <main+0x508>)
 8006634:	f7fa f8ae 	bl	8000794 <__aeabi_ddiv>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4610      	mov	r0, r2
 800663e:	4619      	mov	r1, r3
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	4b63      	ldr	r3, [pc, #396]	; (80067d4 <main+0x50c>)
 8006646:	f7f9 fdc5 	bl	80001d4 <__adddf3>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4610      	mov	r0, r2
 8006650:	4619      	mov	r1, r3
 8006652:	f7fa fa25 	bl	8000aa0 <__aeabi_d2uiz>
 8006656:	4603      	mov	r3, r0
 8006658:	b29a      	uxth	r2, r3
 800665a:	f248 4330 	movw	r3, #33840	; 0x8430
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	237e      	movs	r3, #126	; 0x7e
 8006662:	216e      	movs	r1, #110	; 0x6e
 8006664:	2030      	movs	r0, #48	; 0x30
 8006666:	f7ff fa43 	bl	8005af0 <LCD_Fill>
						LCD_Fill(BOOST/100.0*144.0+47.0, 111,190, 125,WHITE);
 800666a:	4b57      	ldr	r3, [pc, #348]	; (80067c8 <main+0x500>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	4618      	mov	r0, r3
 8006670:	f7f9 fefc 	bl	800046c <__aeabi_i2d>
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	4b55      	ldr	r3, [pc, #340]	; (80067d0 <main+0x508>)
 800667a:	f7fa f88b 	bl	8000794 <__aeabi_ddiv>
 800667e:	4602      	mov	r2, r0
 8006680:	460b      	mov	r3, r1
 8006682:	4610      	mov	r0, r2
 8006684:	4619      	mov	r1, r3
 8006686:	f04f 0200 	mov.w	r2, #0
 800668a:	4b50      	ldr	r3, [pc, #320]	; (80067cc <main+0x504>)
 800668c:	f7f9 ff58 	bl	8000540 <__aeabi_dmul>
 8006690:	4602      	mov	r2, r0
 8006692:	460b      	mov	r3, r1
 8006694:	4610      	mov	r0, r2
 8006696:	4619      	mov	r1, r3
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	4b4e      	ldr	r3, [pc, #312]	; (80067d8 <main+0x510>)
 800669e:	f7f9 fd99 	bl	80001d4 <__adddf3>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4610      	mov	r0, r2
 80066a8:	4619      	mov	r1, r3
 80066aa:	f7fa f9f9 	bl	8000aa0 <__aeabi_d2uiz>
 80066ae:	4603      	mov	r3, r0
 80066b0:	b298      	uxth	r0, r3
 80066b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80066b6:	9300      	str	r3, [sp, #0]
 80066b8:	237d      	movs	r3, #125	; 0x7d
 80066ba:	22be      	movs	r2, #190	; 0xbe
 80066bc:	216f      	movs	r1, #111	; 0x6f
 80066be:	f7ff fa17 	bl	8005af0 <LCD_Fill>
	        }
	        if(TP_CHECK(192,110,212,126)) {
 80066c2:	237e      	movs	r3, #126	; 0x7e
 80066c4:	22d4      	movs	r2, #212	; 0xd4
 80066c6:	216e      	movs	r1, #110	; 0x6e
 80066c8:	20c0      	movs	r0, #192	; 0xc0
 80066ca:	f000 f8f5 	bl	80068b8 <TP_CHECK>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f43f aecf 	beq.w	8006474 <main+0x1ac>
	          BOOST = BOOST==100?100:BOOST+1;
 80066d6:	4b3c      	ldr	r3, [pc, #240]	; (80067c8 <main+0x500>)
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b64      	cmp	r3, #100	; 0x64
 80066dc:	d004      	beq.n	80066e8 <main+0x420>
 80066de:	4b3a      	ldr	r3, [pc, #232]	; (80067c8 <main+0x500>)
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	3301      	adds	r3, #1
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	e000      	b.n	80066ea <main+0x422>
 80066e8:	2364      	movs	r3, #100	; 0x64
 80066ea:	4a37      	ldr	r2, [pc, #220]	; (80067c8 <main+0x500>)
 80066ec:	7013      	strb	r3, [r2, #0]
	          LCD_ShowxNum(148,40,BOOST,3,16,0);
 80066ee:	4b36      	ldr	r3, [pc, #216]	; (80067c8 <main+0x500>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	461a      	mov	r2, r3
 80066f4:	2300      	movs	r3, #0
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	2310      	movs	r3, #16
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	2303      	movs	r3, #3
 80066fe:	2128      	movs	r1, #40	; 0x28
 8006700:	2094      	movs	r0, #148	; 0x94
 8006702:	f7ff fcf7 	bl	80060f4 <LCD_ShowxNum>
						LCD_Fill(48, 110,BOOST*144.0/100.0+49.0, 126,GRAY);
 8006706:	4b30      	ldr	r3, [pc, #192]	; (80067c8 <main+0x500>)
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f7f9 feae 	bl	800046c <__aeabi_i2d>
 8006710:	f04f 0200 	mov.w	r2, #0
 8006714:	4b2d      	ldr	r3, [pc, #180]	; (80067cc <main+0x504>)
 8006716:	f7f9 ff13 	bl	8000540 <__aeabi_dmul>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	4610      	mov	r0, r2
 8006720:	4619      	mov	r1, r3
 8006722:	f04f 0200 	mov.w	r2, #0
 8006726:	4b2a      	ldr	r3, [pc, #168]	; (80067d0 <main+0x508>)
 8006728:	f7fa f834 	bl	8000794 <__aeabi_ddiv>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	4610      	mov	r0, r2
 8006732:	4619      	mov	r1, r3
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	4b26      	ldr	r3, [pc, #152]	; (80067d4 <main+0x50c>)
 800673a:	f7f9 fd4b 	bl	80001d4 <__adddf3>
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	4610      	mov	r0, r2
 8006744:	4619      	mov	r1, r3
 8006746:	f7fa f9ab 	bl	8000aa0 <__aeabi_d2uiz>
 800674a:	4603      	mov	r3, r0
 800674c:	b29a      	uxth	r2, r3
 800674e:	f248 4330 	movw	r3, #33840	; 0x8430
 8006752:	9300      	str	r3, [sp, #0]
 8006754:	237e      	movs	r3, #126	; 0x7e
 8006756:	216e      	movs	r1, #110	; 0x6e
 8006758:	2030      	movs	r0, #48	; 0x30
 800675a:	f7ff f9c9 	bl	8005af0 <LCD_Fill>
						LCD_Fill(BOOST/100.0*144.0+47.0, 111,190, 125,WHITE);
 800675e:	4b1a      	ldr	r3, [pc, #104]	; (80067c8 <main+0x500>)
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	4618      	mov	r0, r3
 8006764:	f7f9 fe82 	bl	800046c <__aeabi_i2d>
 8006768:	f04f 0200 	mov.w	r2, #0
 800676c:	4b18      	ldr	r3, [pc, #96]	; (80067d0 <main+0x508>)
 800676e:	f7fa f811 	bl	8000794 <__aeabi_ddiv>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	4610      	mov	r0, r2
 8006778:	4619      	mov	r1, r3
 800677a:	f04f 0200 	mov.w	r2, #0
 800677e:	4b13      	ldr	r3, [pc, #76]	; (80067cc <main+0x504>)
 8006780:	f7f9 fede 	bl	8000540 <__aeabi_dmul>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4610      	mov	r0, r2
 800678a:	4619      	mov	r1, r3
 800678c:	f04f 0200 	mov.w	r2, #0
 8006790:	4b11      	ldr	r3, [pc, #68]	; (80067d8 <main+0x510>)
 8006792:	f7f9 fd1f 	bl	80001d4 <__adddf3>
 8006796:	4602      	mov	r2, r0
 8006798:	460b      	mov	r3, r1
 800679a:	4610      	mov	r0, r2
 800679c:	4619      	mov	r1, r3
 800679e:	f7fa f97f 	bl	8000aa0 <__aeabi_d2uiz>
 80067a2:	4603      	mov	r3, r0
 80067a4:	b298      	uxth	r0, r3
 80067a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067aa:	9300      	str	r3, [sp, #0]
 80067ac:	237d      	movs	r3, #125	; 0x7d
 80067ae:	22be      	movs	r2, #190	; 0xbe
 80067b0:	216f      	movs	r1, #111	; 0x6f
 80067b2:	f7ff f99d 	bl	8005af0 <LCD_Fill>
 80067b6:	e65d      	b.n	8006474 <main+0x1ac>
	        }
	      }
	    }
	    else {
	      presStatus = 0;
 80067b8:	4b08      	ldr	r3, [pc, #32]	; (80067dc <main+0x514>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
	      pressTime = 0;
 80067be:	4b08      	ldr	r3, [pc, #32]	; (80067e0 <main+0x518>)
 80067c0:	2200      	movs	r2, #0
 80067c2:	801a      	strh	r2, [r3, #0]
	    tp_dev.scan(0);
 80067c4:	e656      	b.n	8006474 <main+0x1ac>
 80067c6:	bf00      	nop
 80067c8:	20000002 	.word	0x20000002
 80067cc:	40620000 	.word	0x40620000
 80067d0:	40590000 	.word	0x40590000
 80067d4:	40488000 	.word	0x40488000
 80067d8:	40478000 	.word	0x40478000
 80067dc:	200000de 	.word	0x200000de
 80067e0:	200000dc 	.word	0x200000dc

080067e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b094      	sub	sp, #80	; 0x50
 80067e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80067ea:	f107 0320 	add.w	r3, r7, #32
 80067ee:	2230      	movs	r2, #48	; 0x30
 80067f0:	2100      	movs	r1, #0
 80067f2:	4618      	mov	r0, r3
 80067f4:	f003 ffbc 	bl	800a770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80067f8:	f107 030c 	add.w	r3, r7, #12
 80067fc:	2200      	movs	r2, #0
 80067fe:	601a      	str	r2, [r3, #0]
 8006800:	605a      	str	r2, [r3, #4]
 8006802:	609a      	str	r2, [r3, #8]
 8006804:	60da      	str	r2, [r3, #12]
 8006806:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006808:	2300      	movs	r3, #0
 800680a:	60bb      	str	r3, [r7, #8]
 800680c:	4b28      	ldr	r3, [pc, #160]	; (80068b0 <SystemClock_Config+0xcc>)
 800680e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006810:	4a27      	ldr	r2, [pc, #156]	; (80068b0 <SystemClock_Config+0xcc>)
 8006812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006816:	6413      	str	r3, [r2, #64]	; 0x40
 8006818:	4b25      	ldr	r3, [pc, #148]	; (80068b0 <SystemClock_Config+0xcc>)
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006820:	60bb      	str	r3, [r7, #8]
 8006822:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006824:	2300      	movs	r3, #0
 8006826:	607b      	str	r3, [r7, #4]
 8006828:	4b22      	ldr	r3, [pc, #136]	; (80068b4 <SystemClock_Config+0xd0>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a21      	ldr	r2, [pc, #132]	; (80068b4 <SystemClock_Config+0xd0>)
 800682e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006832:	6013      	str	r3, [r2, #0]
 8006834:	4b1f      	ldr	r3, [pc, #124]	; (80068b4 <SystemClock_Config+0xd0>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800683c:	607b      	str	r3, [r7, #4]
 800683e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006840:	2302      	movs	r3, #2
 8006842:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006844:	2301      	movs	r3, #1
 8006846:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006848:	2310      	movs	r3, #16
 800684a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800684c:	2302      	movs	r3, #2
 800684e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006850:	2300      	movs	r3, #0
 8006852:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8006854:	2308      	movs	r3, #8
 8006856:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8006858:	23a8      	movs	r3, #168	; 0xa8
 800685a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800685c:	2302      	movs	r3, #2
 800685e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006860:	2304      	movs	r3, #4
 8006862:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006864:	f107 0320 	add.w	r3, r7, #32
 8006868:	4618      	mov	r0, r3
 800686a:	f002 fda7 	bl	80093bc <HAL_RCC_OscConfig>
 800686e:	4603      	mov	r3, r0
 8006870:	2b00      	cmp	r3, #0
 8006872:	d001      	beq.n	8006878 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8006874:	f000 f84e 	bl	8006914 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006878:	230f      	movs	r3, #15
 800687a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800687c:	2302      	movs	r3, #2
 800687e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006880:	2300      	movs	r3, #0
 8006882:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006884:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006888:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800688a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800688e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006890:	f107 030c 	add.w	r3, r7, #12
 8006894:	2105      	movs	r1, #5
 8006896:	4618      	mov	r0, r3
 8006898:	f003 f808 	bl	80098ac <HAL_RCC_ClockConfig>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80068a2:	f000 f837 	bl	8006914 <Error_Handler>
  }
}
 80068a6:	bf00      	nop
 80068a8:	3750      	adds	r7, #80	; 0x50
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	40023800 	.word	0x40023800
 80068b4:	40007000 	.word	0x40007000

080068b8 <TP_CHECK>:

/* USER CODE BEGIN 4 */
u8 TP_CHECK(u16 x0, u16 y0, u16 x1, u16 y1)
{
 80068b8:	b490      	push	{r4, r7}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	4604      	mov	r4, r0
 80068c0:	4608      	mov	r0, r1
 80068c2:	4611      	mov	r1, r2
 80068c4:	461a      	mov	r2, r3
 80068c6:	4623      	mov	r3, r4
 80068c8:	80fb      	strh	r3, [r7, #6]
 80068ca:	4603      	mov	r3, r0
 80068cc:	80bb      	strh	r3, [r7, #4]
 80068ce:	460b      	mov	r3, r1
 80068d0:	807b      	strh	r3, [r7, #2]
 80068d2:	4613      	mov	r3, r2
 80068d4:	803b      	strh	r3, [r7, #0]
	return (tp_dev.x[0] > x0 && tp_dev.y[0] > y0 && tp_dev.x[0] < x1 && tp_dev.y[0] < y1);
 80068d6:	4b0e      	ldr	r3, [pc, #56]	; (8006910 <TP_CHECK+0x58>)
 80068d8:	899b      	ldrh	r3, [r3, #12]
 80068da:	88fa      	ldrh	r2, [r7, #6]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d210      	bcs.n	8006902 <TP_CHECK+0x4a>
 80068e0:	4b0b      	ldr	r3, [pc, #44]	; (8006910 <TP_CHECK+0x58>)
 80068e2:	8adb      	ldrh	r3, [r3, #22]
 80068e4:	88ba      	ldrh	r2, [r7, #4]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d20b      	bcs.n	8006902 <TP_CHECK+0x4a>
 80068ea:	4b09      	ldr	r3, [pc, #36]	; (8006910 <TP_CHECK+0x58>)
 80068ec:	899b      	ldrh	r3, [r3, #12]
 80068ee:	887a      	ldrh	r2, [r7, #2]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d906      	bls.n	8006902 <TP_CHECK+0x4a>
 80068f4:	4b06      	ldr	r3, [pc, #24]	; (8006910 <TP_CHECK+0x58>)
 80068f6:	8adb      	ldrh	r3, [r3, #22]
 80068f8:	883a      	ldrh	r2, [r7, #0]
 80068fa:	429a      	cmp	r2, r3
 80068fc:	d901      	bls.n	8006902 <TP_CHECK+0x4a>
 80068fe:	2301      	movs	r3, #1
 8006900:	e000      	b.n	8006904 <TP_CHECK+0x4c>
 8006902:	2300      	movs	r3, #0
 8006904:	b2db      	uxtb	r3, r3
}
 8006906:	4618      	mov	r0, r3
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bc90      	pop	{r4, r7}
 800690e:	4770      	bx	lr
 8006910:	20000008 	.word	0x20000008

08006914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006918:	b672      	cpsid	i
}
 800691a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800691c:	e7fe      	b.n	800691c <Error_Handler+0x8>
	...

08006920 <IIC_Init>:
//All rights reserved
//////////////////////////////////////////////////////////////////////////////////

//初始化IIC
void IIC_Init(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
//   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//普通输出模式
//   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
//   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
//   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
//   GPIO_Init(GPIOB, &GPIO_InitStructure);//初始化
	IIC_SCL=1;
 8006924:	4b05      	ldr	r3, [pc, #20]	; (800693c <IIC_Init+0x1c>)
 8006926:	2201      	movs	r2, #1
 8006928:	601a      	str	r2, [r3, #0]
	IIC_SDA=1;
 800692a:	4b05      	ldr	r3, [pc, #20]	; (8006940 <IIC_Init+0x20>)
 800692c:	2201      	movs	r2, #1
 800692e:	601a      	str	r2, [r3, #0]
}
 8006930:	bf00      	nop
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	424082a0 	.word	0x424082a0
 8006940:	424082a4 	.word	0x424082a4

08006944 <IIC_Start>:
//产生IIC起始信号
void IIC_Start(void)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	af00      	add	r7, sp, #0
	SDA_OUT();     //sda线输出
 8006948:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <IIC_Start+0x44>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a0e      	ldr	r2, [pc, #56]	; (8006988 <IIC_Start+0x44>)
 800694e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <IIC_Start+0x44>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a0b      	ldr	r2, [pc, #44]	; (8006988 <IIC_Start+0x44>)
 800695a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800695e:	6013      	str	r3, [r2, #0]
	IIC_SDA=1;
 8006960:	4b0a      	ldr	r3, [pc, #40]	; (800698c <IIC_Start+0x48>)
 8006962:	2201      	movs	r2, #1
 8006964:	601a      	str	r2, [r3, #0]
	IIC_SCL=1;
 8006966:	4b0a      	ldr	r3, [pc, #40]	; (8006990 <IIC_Start+0x4c>)
 8006968:	2201      	movs	r2, #1
 800696a:	601a      	str	r2, [r3, #0]
	delay_us(4);
 800696c:	2004      	movs	r0, #4
 800696e:	f7fa fbc7 	bl	8001100 <delay_us>
 	IIC_SDA=0;//START:when CLK is high,DATA change form high to low
 8006972:	4b06      	ldr	r3, [pc, #24]	; (800698c <IIC_Start+0x48>)
 8006974:	2200      	movs	r2, #0
 8006976:	601a      	str	r2, [r3, #0]
	delay_us(4);
 8006978:	2004      	movs	r0, #4
 800697a:	f7fa fbc1 	bl	8001100 <delay_us>
	IIC_SCL=0;//钳住I2C总线，准备发送或接收数据
 800697e:	4b04      	ldr	r3, [pc, #16]	; (8006990 <IIC_Start+0x4c>)
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]
}
 8006984:	bf00      	nop
 8006986:	bd80      	pop	{r7, pc}
 8006988:	40020400 	.word	0x40020400
 800698c:	424082a4 	.word	0x424082a4
 8006990:	424082a0 	.word	0x424082a0

08006994 <IIC_Stop>:
//产生IIC停止信号
void IIC_Stop(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	af00      	add	r7, sp, #0
	SDA_OUT();//sda线输出
 8006998:	4b0f      	ldr	r3, [pc, #60]	; (80069d8 <IIC_Stop+0x44>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a0e      	ldr	r2, [pc, #56]	; (80069d8 <IIC_Stop+0x44>)
 800699e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	4b0c      	ldr	r3, [pc, #48]	; (80069d8 <IIC_Stop+0x44>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a0b      	ldr	r2, [pc, #44]	; (80069d8 <IIC_Stop+0x44>)
 80069aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069ae:	6013      	str	r3, [r2, #0]
	IIC_SCL=0;
 80069b0:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <IIC_Stop+0x48>)
 80069b2:	2200      	movs	r2, #0
 80069b4:	601a      	str	r2, [r3, #0]
	IIC_SDA=0;//STOP:when CLK is high DATA change form low to high
 80069b6:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <IIC_Stop+0x4c>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	601a      	str	r2, [r3, #0]
 	delay_us(4);
 80069bc:	2004      	movs	r0, #4
 80069be:	f7fa fb9f 	bl	8001100 <delay_us>
	IIC_SCL=1;
 80069c2:	4b06      	ldr	r3, [pc, #24]	; (80069dc <IIC_Stop+0x48>)
 80069c4:	2201      	movs	r2, #1
 80069c6:	601a      	str	r2, [r3, #0]
	IIC_SDA=1;//发送I2C总线结束信号
 80069c8:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <IIC_Stop+0x4c>)
 80069ca:	2201      	movs	r2, #1
 80069cc:	601a      	str	r2, [r3, #0]
	delay_us(4);
 80069ce:	2004      	movs	r0, #4
 80069d0:	f7fa fb96 	bl	8001100 <delay_us>
}
 80069d4:	bf00      	nop
 80069d6:	bd80      	pop	{r7, pc}
 80069d8:	40020400 	.word	0x40020400
 80069dc:	424082a0 	.word	0x424082a0
 80069e0:	424082a4 	.word	0x424082a4

080069e4 <IIC_Wait_Ack>:
//等待应答信号到来
//返回值：1，接收应答失败
//        0，接收应答成功
u8 IIC_Wait_Ack(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
	u8 ucErrTime=0;
 80069ea:	2300      	movs	r3, #0
 80069ec:	71fb      	strb	r3, [r7, #7]
	SDA_IN();      //SDA设置为输入
 80069ee:	4b16      	ldr	r3, [pc, #88]	; (8006a48 <IIC_Wait_Ack+0x64>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a15      	ldr	r2, [pc, #84]	; (8006a48 <IIC_Wait_Ack+0x64>)
 80069f4:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	4b13      	ldr	r3, [pc, #76]	; (8006a48 <IIC_Wait_Ack+0x64>)
 80069fc:	4a12      	ldr	r2, [pc, #72]	; (8006a48 <IIC_Wait_Ack+0x64>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6013      	str	r3, [r2, #0]
	IIC_SDA=1;delay_us(1);
 8006a02:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <IIC_Wait_Ack+0x68>)
 8006a04:	2201      	movs	r2, #1
 8006a06:	601a      	str	r2, [r3, #0]
 8006a08:	2001      	movs	r0, #1
 8006a0a:	f7fa fb79 	bl	8001100 <delay_us>
	IIC_SCL=1;delay_us(1);
 8006a0e:	4b10      	ldr	r3, [pc, #64]	; (8006a50 <IIC_Wait_Ack+0x6c>)
 8006a10:	2201      	movs	r2, #1
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	2001      	movs	r0, #1
 8006a16:	f7fa fb73 	bl	8001100 <delay_us>
	while(READ_SDA)
 8006a1a:	e009      	b.n	8006a30 <IIC_Wait_Ack+0x4c>
	{
		ucErrTime++;
 8006a1c:	79fb      	ldrb	r3, [r7, #7]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 8006a22:	79fb      	ldrb	r3, [r7, #7]
 8006a24:	2bfa      	cmp	r3, #250	; 0xfa
 8006a26:	d903      	bls.n	8006a30 <IIC_Wait_Ack+0x4c>
		{
			IIC_Stop();
 8006a28:	f7ff ffb4 	bl	8006994 <IIC_Stop>
			return 1;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e007      	b.n	8006a40 <IIC_Wait_Ack+0x5c>
	while(READ_SDA)
 8006a30:	4b08      	ldr	r3, [pc, #32]	; (8006a54 <IIC_Wait_Ack+0x70>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1f1      	bne.n	8006a1c <IIC_Wait_Ack+0x38>
		}
	}
	IIC_SCL=0;//时钟输出0
 8006a38:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <IIC_Wait_Ack+0x6c>)
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
	return 0;
 8006a3e:	2300      	movs	r3, #0
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	40020400 	.word	0x40020400
 8006a4c:	424082a4 	.word	0x424082a4
 8006a50:	424082a0 	.word	0x424082a0
 8006a54:	42408224 	.word	0x42408224

08006a58 <IIC_Ack>:
//产生ACK应答
void IIC_Ack(void)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	af00      	add	r7, sp, #0
	IIC_SCL=0;
 8006a5c:	4b0f      	ldr	r3, [pc, #60]	; (8006a9c <IIC_Ack+0x44>)
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]
	SDA_OUT();
 8006a62:	4b0f      	ldr	r3, [pc, #60]	; (8006aa0 <IIC_Ack+0x48>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a0e      	ldr	r2, [pc, #56]	; (8006aa0 <IIC_Ack+0x48>)
 8006a68:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8006a6c:	6013      	str	r3, [r2, #0]
 8006a6e:	4b0c      	ldr	r3, [pc, #48]	; (8006aa0 <IIC_Ack+0x48>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a0b      	ldr	r2, [pc, #44]	; (8006aa0 <IIC_Ack+0x48>)
 8006a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a78:	6013      	str	r3, [r2, #0]
	IIC_SDA=0;
 8006a7a:	4b0a      	ldr	r3, [pc, #40]	; (8006aa4 <IIC_Ack+0x4c>)
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	601a      	str	r2, [r3, #0]
	delay_us(2);
 8006a80:	2002      	movs	r0, #2
 8006a82:	f7fa fb3d 	bl	8001100 <delay_us>
	IIC_SCL=1;
 8006a86:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <IIC_Ack+0x44>)
 8006a88:	2201      	movs	r2, #1
 8006a8a:	601a      	str	r2, [r3, #0]
	delay_us(2);
 8006a8c:	2002      	movs	r0, #2
 8006a8e:	f7fa fb37 	bl	8001100 <delay_us>
	IIC_SCL=0;
 8006a92:	4b02      	ldr	r3, [pc, #8]	; (8006a9c <IIC_Ack+0x44>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]
}
 8006a98:	bf00      	nop
 8006a9a:	bd80      	pop	{r7, pc}
 8006a9c:	424082a0 	.word	0x424082a0
 8006aa0:	40020400 	.word	0x40020400
 8006aa4:	424082a4 	.word	0x424082a4

08006aa8 <IIC_NAck>:
//不产生ACK应答
void IIC_NAck(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
	IIC_SCL=0;
 8006aac:	4b0f      	ldr	r3, [pc, #60]	; (8006aec <IIC_NAck+0x44>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	601a      	str	r2, [r3, #0]
	SDA_OUT();
 8006ab2:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <IIC_NAck+0x48>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a0e      	ldr	r2, [pc, #56]	; (8006af0 <IIC_NAck+0x48>)
 8006ab8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8006abc:	6013      	str	r3, [r2, #0]
 8006abe:	4b0c      	ldr	r3, [pc, #48]	; (8006af0 <IIC_NAck+0x48>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a0b      	ldr	r2, [pc, #44]	; (8006af0 <IIC_NAck+0x48>)
 8006ac4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ac8:	6013      	str	r3, [r2, #0]
	IIC_SDA=1;
 8006aca:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <IIC_NAck+0x4c>)
 8006acc:	2201      	movs	r2, #1
 8006ace:	601a      	str	r2, [r3, #0]
	delay_us(2);
 8006ad0:	2002      	movs	r0, #2
 8006ad2:	f7fa fb15 	bl	8001100 <delay_us>
	IIC_SCL=1;
 8006ad6:	4b05      	ldr	r3, [pc, #20]	; (8006aec <IIC_NAck+0x44>)
 8006ad8:	2201      	movs	r2, #1
 8006ada:	601a      	str	r2, [r3, #0]
	delay_us(2);
 8006adc:	2002      	movs	r0, #2
 8006ade:	f7fa fb0f 	bl	8001100 <delay_us>
	IIC_SCL=0;
 8006ae2:	4b02      	ldr	r3, [pc, #8]	; (8006aec <IIC_NAck+0x44>)
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	601a      	str	r2, [r3, #0]
}
 8006ae8:	bf00      	nop
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	424082a0 	.word	0x424082a0
 8006af0:	40020400 	.word	0x40020400
 8006af4:	424082a4 	.word	0x424082a4

08006af8 <IIC_Send_Byte>:
//IIC发送一个字节
//返回从机有无应答
//1，有应答
//0，无应答
void IIC_Send_Byte(u8 txd)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	4603      	mov	r3, r0
 8006b00:	71fb      	strb	r3, [r7, #7]
    u8 t;
	SDA_OUT();
 8006b02:	4b1a      	ldr	r3, [pc, #104]	; (8006b6c <IIC_Send_Byte+0x74>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a19      	ldr	r2, [pc, #100]	; (8006b6c <IIC_Send_Byte+0x74>)
 8006b08:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	4b17      	ldr	r3, [pc, #92]	; (8006b6c <IIC_Send_Byte+0x74>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a16      	ldr	r2, [pc, #88]	; (8006b6c <IIC_Send_Byte+0x74>)
 8006b14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b18:	6013      	str	r3, [r2, #0]
    IIC_SCL=0;//拉低时钟开始数据传输
 8006b1a:	4b15      	ldr	r3, [pc, #84]	; (8006b70 <IIC_Send_Byte+0x78>)
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]
    for(t=0;t<8;t++)
 8006b20:	2300      	movs	r3, #0
 8006b22:	73fb      	strb	r3, [r7, #15]
 8006b24:	e019      	b.n	8006b5a <IIC_Send_Byte+0x62>
    {
        IIC_SDA=(txd&0x80)>>7;
 8006b26:	79fb      	ldrb	r3, [r7, #7]
 8006b28:	09db      	lsrs	r3, r3, #7
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	4b11      	ldr	r3, [pc, #68]	; (8006b74 <IIC_Send_Byte+0x7c>)
 8006b2e:	601a      	str	r2, [r3, #0]
        txd<<=1;
 8006b30:	79fb      	ldrb	r3, [r7, #7]
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	71fb      	strb	r3, [r7, #7]
		delay_us(2);   //对TEA5767这三个延时都是必须的
 8006b36:	2002      	movs	r0, #2
 8006b38:	f7fa fae2 	bl	8001100 <delay_us>
		IIC_SCL=1;
 8006b3c:	4b0c      	ldr	r3, [pc, #48]	; (8006b70 <IIC_Send_Byte+0x78>)
 8006b3e:	2201      	movs	r2, #1
 8006b40:	601a      	str	r2, [r3, #0]
		delay_us(2);
 8006b42:	2002      	movs	r0, #2
 8006b44:	f7fa fadc 	bl	8001100 <delay_us>
		IIC_SCL=0;
 8006b48:	4b09      	ldr	r3, [pc, #36]	; (8006b70 <IIC_Send_Byte+0x78>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	601a      	str	r2, [r3, #0]
		delay_us(2);
 8006b4e:	2002      	movs	r0, #2
 8006b50:	f7fa fad6 	bl	8001100 <delay_us>
    for(t=0;t<8;t++)
 8006b54:	7bfb      	ldrb	r3, [r7, #15]
 8006b56:	3301      	adds	r3, #1
 8006b58:	73fb      	strb	r3, [r7, #15]
 8006b5a:	7bfb      	ldrb	r3, [r7, #15]
 8006b5c:	2b07      	cmp	r3, #7
 8006b5e:	d9e2      	bls.n	8006b26 <IIC_Send_Byte+0x2e>
    }
}
 8006b60:	bf00      	nop
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	40020400 	.word	0x40020400
 8006b70:	424082a0 	.word	0x424082a0
 8006b74:	424082a4 	.word	0x424082a4

08006b78 <IIC_Read_Byte>:
//读1个字节，ack=1时，发送ACK，ack=0，发送nACK
u8 IIC_Read_Byte(unsigned char ack)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	71fb      	strb	r3, [r7, #7]
	unsigned char i,receive=0;
 8006b82:	2300      	movs	r3, #0
 8006b84:	73bb      	strb	r3, [r7, #14]
	SDA_IN();//SDA设置为输入
 8006b86:	4b1b      	ldr	r3, [pc, #108]	; (8006bf4 <IIC_Read_Byte+0x7c>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a1a      	ldr	r2, [pc, #104]	; (8006bf4 <IIC_Read_Byte+0x7c>)
 8006b8c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	4b18      	ldr	r3, [pc, #96]	; (8006bf4 <IIC_Read_Byte+0x7c>)
 8006b94:	4a17      	ldr	r2, [pc, #92]	; (8006bf4 <IIC_Read_Byte+0x7c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	6013      	str	r3, [r2, #0]
    for(i=0;i<8;i++ )
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	73fb      	strb	r3, [r7, #15]
 8006b9e:	e018      	b.n	8006bd2 <IIC_Read_Byte+0x5a>
	{
        IIC_SCL=0;
 8006ba0:	4b15      	ldr	r3, [pc, #84]	; (8006bf8 <IIC_Read_Byte+0x80>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	601a      	str	r2, [r3, #0]
        delay_us(2);
 8006ba6:	2002      	movs	r0, #2
 8006ba8:	f7fa faaa 	bl	8001100 <delay_us>
		IIC_SCL=1;
 8006bac:	4b12      	ldr	r3, [pc, #72]	; (8006bf8 <IIC_Read_Byte+0x80>)
 8006bae:	2201      	movs	r2, #1
 8006bb0:	601a      	str	r2, [r3, #0]
        receive<<=1;
 8006bb2:	7bbb      	ldrb	r3, [r7, #14]
 8006bb4:	005b      	lsls	r3, r3, #1
 8006bb6:	73bb      	strb	r3, [r7, #14]
        if(READ_SDA)receive++;
 8006bb8:	4b10      	ldr	r3, [pc, #64]	; (8006bfc <IIC_Read_Byte+0x84>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d002      	beq.n	8006bc6 <IIC_Read_Byte+0x4e>
 8006bc0:	7bbb      	ldrb	r3, [r7, #14]
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	73bb      	strb	r3, [r7, #14]
		delay_us(1);
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	f7fa fa9a 	bl	8001100 <delay_us>
    for(i=0;i<8;i++ )
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	73fb      	strb	r3, [r7, #15]
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2b07      	cmp	r3, #7
 8006bd6:	d9e3      	bls.n	8006ba0 <IIC_Read_Byte+0x28>
    }
    if (!ack)
 8006bd8:	79fb      	ldrb	r3, [r7, #7]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d102      	bne.n	8006be4 <IIC_Read_Byte+0x6c>
        IIC_NAck();//发送nACK
 8006bde:	f7ff ff63 	bl	8006aa8 <IIC_NAck>
 8006be2:	e001      	b.n	8006be8 <IIC_Read_Byte+0x70>
    else
        IIC_Ack(); //发送ACK
 8006be4:	f7ff ff38 	bl	8006a58 <IIC_Ack>
    return receive;
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	40020400 	.word	0x40020400
 8006bf8:	424082a0 	.word	0x424082a0
 8006bfc:	42408224 	.word	0x42408224

08006c00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c06:	2300      	movs	r3, #0
 8006c08:	607b      	str	r3, [r7, #4]
 8006c0a:	4b10      	ldr	r3, [pc, #64]	; (8006c4c <HAL_MspInit+0x4c>)
 8006c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c0e:	4a0f      	ldr	r2, [pc, #60]	; (8006c4c <HAL_MspInit+0x4c>)
 8006c10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c14:	6453      	str	r3, [r2, #68]	; 0x44
 8006c16:	4b0d      	ldr	r3, [pc, #52]	; (8006c4c <HAL_MspInit+0x4c>)
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c1e:	607b      	str	r3, [r7, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006c22:	2300      	movs	r3, #0
 8006c24:	603b      	str	r3, [r7, #0]
 8006c26:	4b09      	ldr	r3, [pc, #36]	; (8006c4c <HAL_MspInit+0x4c>)
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	4a08      	ldr	r2, [pc, #32]	; (8006c4c <HAL_MspInit+0x4c>)
 8006c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c30:	6413      	str	r3, [r2, #64]	; 0x40
 8006c32:	4b06      	ldr	r3, [pc, #24]	; (8006c4c <HAL_MspInit+0x4c>)
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c3a:	603b      	str	r3, [r7, #0]
 8006c3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8006c3e:	2005      	movs	r0, #5
 8006c40:	f001 fefe 	bl	8008a40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40023800 	.word	0x40023800

08006c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006c50:	b480      	push	{r7}
 8006c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006c54:	e7fe      	b.n	8006c54 <NMI_Handler+0x4>

08006c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006c56:	b480      	push	{r7}
 8006c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006c5a:	e7fe      	b.n	8006c5a <HardFault_Handler+0x4>

08006c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006c60:	e7fe      	b.n	8006c60 <MemManage_Handler+0x4>

08006c62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006c62:	b480      	push	{r7}
 8006c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006c66:	e7fe      	b.n	8006c66 <BusFault_Handler+0x4>

08006c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006c6c:	e7fe      	b.n	8006c6c <UsageFault_Handler+0x4>

08006c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006c72:	bf00      	nop
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006c80:	bf00      	nop
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006c8e:	bf00      	nop
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006c9c:	f001 f9aa 	bl	8007ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006ca0:	bf00      	nop
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006ca8:	4802      	ldr	r0, [pc, #8]	; (8006cb4 <TIM3_IRQHandler+0x10>)
 8006caa:	f003 f89f 	bl	8009dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006cae:	bf00      	nop
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	200001fc 	.word	0x200001fc

08006cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006cbc:	4b06      	ldr	r3, [pc, #24]	; (8006cd8 <SystemInit+0x20>)
 8006cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc2:	4a05      	ldr	r2, [pc, #20]	; (8006cd8 <SystemInit+0x20>)
 8006cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006ccc:	bf00      	nop
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr
 8006cd6:	bf00      	nop
 8006cd8:	e000ed00 	.word	0xe000ed00

08006cdc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006ce2:	f107 0308 	add.w	r3, r7, #8
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
 8006cea:	605a      	str	r2, [r3, #4]
 8006cec:	609a      	str	r2, [r3, #8]
 8006cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006cf0:	463b      	mov	r3, r7
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
 8006cf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006cf8:	4b1d      	ldr	r3, [pc, #116]	; (8006d70 <MX_TIM3_Init+0x94>)
 8006cfa:	4a1e      	ldr	r2, [pc, #120]	; (8006d74 <MX_TIM3_Init+0x98>)
 8006cfc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 840-1;
 8006cfe:	4b1c      	ldr	r3, [pc, #112]	; (8006d70 <MX_TIM3_Init+0x94>)
 8006d00:	f240 3247 	movw	r2, #839	; 0x347
 8006d04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d06:	4b1a      	ldr	r3, [pc, #104]	; (8006d70 <MX_TIM3_Init+0x94>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8006d0c:	4b18      	ldr	r3, [pc, #96]	; (8006d70 <MX_TIM3_Init+0x94>)
 8006d0e:	2263      	movs	r2, #99	; 0x63
 8006d10:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d12:	4b17      	ldr	r3, [pc, #92]	; (8006d70 <MX_TIM3_Init+0x94>)
 8006d14:	2200      	movs	r2, #0
 8006d16:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d18:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <MX_TIM3_Init+0x94>)
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006d1e:	4814      	ldr	r0, [pc, #80]	; (8006d70 <MX_TIM3_Init+0x94>)
 8006d20:	f002 ffa4 	bl	8009c6c <HAL_TIM_Base_Init>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8006d2a:	f7ff fdf3 	bl	8006914 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006d32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006d34:	f107 0308 	add.w	r3, r7, #8
 8006d38:	4619      	mov	r1, r3
 8006d3a:	480d      	ldr	r0, [pc, #52]	; (8006d70 <MX_TIM3_Init+0x94>)
 8006d3c:	f003 f95e 	bl	8009ffc <HAL_TIM_ConfigClockSource>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8006d46:	f7ff fde5 	bl	8006914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006d52:	463b      	mov	r3, r7
 8006d54:	4619      	mov	r1, r3
 8006d56:	4806      	ldr	r0, [pc, #24]	; (8006d70 <MX_TIM3_Init+0x94>)
 8006d58:	f003 fb80 	bl	800a45c <HAL_TIMEx_MasterConfigSynchronization>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8006d62:	f7ff fdd7 	bl	8006914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006d66:	bf00      	nop
 8006d68:	3718      	adds	r7, #24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	200001fc 	.word	0x200001fc
 8006d74:	40000400 	.word	0x40000400

08006d78 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d7e:	463b      	mov	r3, r7
 8006d80:	2200      	movs	r2, #0
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8006d86:	4b14      	ldr	r3, [pc, #80]	; (8006dd8 <MX_TIM6_Init+0x60>)
 8006d88:	4a14      	ldr	r2, [pc, #80]	; (8006ddc <MX_TIM6_Init+0x64>)
 8006d8a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 21-1;
 8006d8c:	4b12      	ldr	r3, [pc, #72]	; (8006dd8 <MX_TIM6_Init+0x60>)
 8006d8e:	2214      	movs	r2, #20
 8006d90:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d92:	4b11      	ldr	r3, [pc, #68]	; (8006dd8 <MX_TIM6_Init+0x60>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8-1;
 8006d98:	4b0f      	ldr	r3, [pc, #60]	; (8006dd8 <MX_TIM6_Init+0x60>)
 8006d9a:	2207      	movs	r2, #7
 8006d9c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d9e:	4b0e      	ldr	r3, [pc, #56]	; (8006dd8 <MX_TIM6_Init+0x60>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8006da4:	480c      	ldr	r0, [pc, #48]	; (8006dd8 <MX_TIM6_Init+0x60>)
 8006da6:	f002 ff61 	bl	8009c6c <HAL_TIM_Base_Init>
 8006daa:	4603      	mov	r3, r0
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d001      	beq.n	8006db4 <MX_TIM6_Init+0x3c>
  {
    Error_Handler();
 8006db0:	f7ff fdb0 	bl	8006914 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006db4:	2300      	movs	r3, #0
 8006db6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006db8:	2300      	movs	r3, #0
 8006dba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006dbc:	463b      	mov	r3, r7
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4805      	ldr	r0, [pc, #20]	; (8006dd8 <MX_TIM6_Init+0x60>)
 8006dc2:	f003 fb4b 	bl	800a45c <HAL_TIMEx_MasterConfigSynchronization>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <MX_TIM6_Init+0x58>
  {
    Error_Handler();
 8006dcc:	f7ff fda2 	bl	8006914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8006dd0:	bf00      	nop
 8006dd2:	3708      	adds	r7, #8
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	20000244 	.word	0x20000244
 8006ddc:	40001000 	.word	0x40001000

08006de0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b084      	sub	sp, #16
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a18      	ldr	r2, [pc, #96]	; (8006e50 <HAL_TIM_Base_MspInit+0x70>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d116      	bne.n	8006e20 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006df2:	2300      	movs	r3, #0
 8006df4:	60fb      	str	r3, [r7, #12]
 8006df6:	4b17      	ldr	r3, [pc, #92]	; (8006e54 <HAL_TIM_Base_MspInit+0x74>)
 8006df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dfa:	4a16      	ldr	r2, [pc, #88]	; (8006e54 <HAL_TIM_Base_MspInit+0x74>)
 8006dfc:	f043 0302 	orr.w	r3, r3, #2
 8006e00:	6413      	str	r3, [r2, #64]	; 0x40
 8006e02:	4b14      	ldr	r3, [pc, #80]	; (8006e54 <HAL_TIM_Base_MspInit+0x74>)
 8006e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e06:	f003 0302 	and.w	r3, r3, #2
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8006e0e:	2200      	movs	r2, #0
 8006e10:	2103      	movs	r1, #3
 8006e12:	201d      	movs	r0, #29
 8006e14:	f001 fe1f 	bl	8008a56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006e18:	201d      	movs	r0, #29
 8006e1a:	f001 fe38 	bl	8008a8e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8006e1e:	e012      	b.n	8006e46 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM6)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a0c      	ldr	r2, [pc, #48]	; (8006e58 <HAL_TIM_Base_MspInit+0x78>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d10d      	bne.n	8006e46 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	60bb      	str	r3, [r7, #8]
 8006e2e:	4b09      	ldr	r3, [pc, #36]	; (8006e54 <HAL_TIM_Base_MspInit+0x74>)
 8006e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e32:	4a08      	ldr	r2, [pc, #32]	; (8006e54 <HAL_TIM_Base_MspInit+0x74>)
 8006e34:	f043 0310 	orr.w	r3, r3, #16
 8006e38:	6413      	str	r3, [r2, #64]	; 0x40
 8006e3a:	4b06      	ldr	r3, [pc, #24]	; (8006e54 <HAL_TIM_Base_MspInit+0x74>)
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	f003 0310 	and.w	r3, r3, #16
 8006e42:	60bb      	str	r3, [r7, #8]
 8006e44:	68bb      	ldr	r3, [r7, #8]
}
 8006e46:	bf00      	nop
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	40000400 	.word	0x40000400
 8006e54:	40023800 	.word	0x40023800
 8006e58:	40001000 	.word	0x40001000

08006e5c <TP_Write_Byte>:

//SPI写数据
//向触摸屏IC写入1byte数据
//num:要写入的数据
void TP_Write_Byte(u8 num)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	71fb      	strb	r3, [r7, #7]
	u8 count = 0;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
	for (count = 0; count < 8; count++)
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73fb      	strb	r3, [r7, #15]
 8006e6e:	e019      	b.n	8006ea4 <TP_Write_Byte+0x48>
	{
		if (num & 0x80)
 8006e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	da03      	bge.n	8006e80 <TP_Write_Byte+0x24>
			TDIN = 1;
 8006e78:	4b0e      	ldr	r3, [pc, #56]	; (8006eb4 <TP_Write_Byte+0x58>)
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	601a      	str	r2, [r3, #0]
 8006e7e:	e002      	b.n	8006e86 <TP_Write_Byte+0x2a>
		else
			TDIN = 0;
 8006e80:	4b0c      	ldr	r3, [pc, #48]	; (8006eb4 <TP_Write_Byte+0x58>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]
		num <<= 1;
 8006e86:	79fb      	ldrb	r3, [r7, #7]
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	71fb      	strb	r3, [r7, #7]
		TCLK = 0;
 8006e8c:	4b0a      	ldr	r3, [pc, #40]	; (8006eb8 <TP_Write_Byte+0x5c>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	601a      	str	r2, [r3, #0]
		delay_us(1);
 8006e92:	2001      	movs	r0, #1
 8006e94:	f7fa f934 	bl	8001100 <delay_us>
		TCLK = 1; //上升沿有效
 8006e98:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <TP_Write_Byte+0x5c>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]
	for (count = 0; count < 8; count++)
 8006e9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	2b07      	cmp	r3, #7
 8006ea8:	d9e2      	bls.n	8006e70 <TP_Write_Byte+0x14>
	}
}
 8006eaa:	bf00      	nop
 8006eac:	bf00      	nop
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	424282ac 	.word	0x424282ac
 8006eb8:	42408280 	.word	0x42408280

08006ebc <TP_Read_AD>:
//SPI读数据
//从触摸屏IC读取adc值
//CMD:指令
//返回值:读到的数据
u16 TP_Read_AD(u8 CMD)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	71fb      	strb	r3, [r7, #7]
	u8 count = 0;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	73fb      	strb	r3, [r7, #15]
	u16 Num = 0;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	81bb      	strh	r3, [r7, #12]
	TCLK = 0;			//先拉低时钟
 8006ece:	4b23      	ldr	r3, [pc, #140]	; (8006f5c <TP_Read_AD+0xa0>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]
	TDIN = 0;			//拉低数据线
 8006ed4:	4b22      	ldr	r3, [pc, #136]	; (8006f60 <TP_Read_AD+0xa4>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	601a      	str	r2, [r3, #0]
	TCS = 0;			//选中触摸屏IC
 8006eda:	4b22      	ldr	r3, [pc, #136]	; (8006f64 <TP_Read_AD+0xa8>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]
	TP_Write_Byte(CMD); //发送命令字
 8006ee0:	79fb      	ldrb	r3, [r7, #7]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7ff ffba 	bl	8006e5c <TP_Write_Byte>
	delay_us(6);		//ADS7846的转换时间最长为6us
 8006ee8:	2006      	movs	r0, #6
 8006eea:	f7fa f909 	bl	8001100 <delay_us>
	TCLK = 0;
 8006eee:	4b1b      	ldr	r3, [pc, #108]	; (8006f5c <TP_Read_AD+0xa0>)
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	601a      	str	r2, [r3, #0]
	delay_us(1);
 8006ef4:	2001      	movs	r0, #1
 8006ef6:	f7fa f903 	bl	8001100 <delay_us>
	TCLK = 1; //给1个时钟，清除BUSY
 8006efa:	4b18      	ldr	r3, [pc, #96]	; (8006f5c <TP_Read_AD+0xa0>)
 8006efc:	2201      	movs	r2, #1
 8006efe:	601a      	str	r2, [r3, #0]
	delay_us(1);
 8006f00:	2001      	movs	r0, #1
 8006f02:	f7fa f8fd 	bl	8001100 <delay_us>
	TCLK = 0;
 8006f06:	4b15      	ldr	r3, [pc, #84]	; (8006f5c <TP_Read_AD+0xa0>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]
	for (count = 0; count < 16; count++) //读出16位数据,只有高12位有效
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	73fb      	strb	r3, [r7, #15]
 8006f10:	e015      	b.n	8006f3e <TP_Read_AD+0x82>
	{
		Num <<= 1;
 8006f12:	89bb      	ldrh	r3, [r7, #12]
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	81bb      	strh	r3, [r7, #12]
		TCLK = 0; //下降沿有效
 8006f18:	4b10      	ldr	r3, [pc, #64]	; (8006f5c <TP_Read_AD+0xa0>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
		delay_us(1);
 8006f1e:	2001      	movs	r0, #1
 8006f20:	f7fa f8ee 	bl	8001100 <delay_us>
		TCLK = 1;
 8006f24:	4b0d      	ldr	r3, [pc, #52]	; (8006f5c <TP_Read_AD+0xa0>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	601a      	str	r2, [r3, #0]
		if (DOUT)
 8006f2a:	4b0f      	ldr	r3, [pc, #60]	; (8006f68 <TP_Read_AD+0xac>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d002      	beq.n	8006f38 <TP_Read_AD+0x7c>
			Num++;
 8006f32:	89bb      	ldrh	r3, [r7, #12]
 8006f34:	3301      	adds	r3, #1
 8006f36:	81bb      	strh	r3, [r7, #12]
	for (count = 0; count < 16; count++) //读出16位数据,只有高12位有效
 8006f38:	7bfb      	ldrb	r3, [r7, #15]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	73fb      	strb	r3, [r7, #15]
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	2b0f      	cmp	r3, #15
 8006f42:	d9e6      	bls.n	8006f12 <TP_Read_AD+0x56>
	}
	Num >>= 4; //只有高12位有效.
 8006f44:	89bb      	ldrh	r3, [r7, #12]
 8006f46:	091b      	lsrs	r3, r3, #4
 8006f48:	81bb      	strh	r3, [r7, #12]
	TCS = 1;   //释放片选
 8006f4a:	4b06      	ldr	r3, [pc, #24]	; (8006f64 <TP_Read_AD+0xa8>)
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]
	return (Num);
 8006f50:	89bb      	ldrh	r3, [r7, #12]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	42408280 	.word	0x42408280
 8006f60:	424282ac 	.word	0x424282ac
 8006f64:	424102b4 	.word	0x424102b4
 8006f68:	42408208 	.word	0x42408208

08006f6c <TP_Read_XOY>:
//xy:指令（CMD_RDX/CMD_RDY）
//返回值:读到的数据
#define READ_TIMES 5 //读取次数
#define LOST_VAL 1	 //丢弃值
u16 TP_Read_XOY(u8 xy)
{
 8006f6c:	b590      	push	{r4, r7, lr}
 8006f6e:	b089      	sub	sp, #36	; 0x24
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	71fb      	strb	r3, [r7, #7]
	u16 i, j;
	u16 buf[READ_TIMES];
	u16 sum = 0;
 8006f76:	2300      	movs	r3, #0
 8006f78:	837b      	strh	r3, [r7, #26]
	u16 temp;
	for (i = 0; i < READ_TIMES; i++)
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	83fb      	strh	r3, [r7, #30]
 8006f7e:	e00f      	b.n	8006fa0 <TP_Read_XOY+0x34>
		buf[i] = TP_Read_AD(xy);
 8006f80:	8bfc      	ldrh	r4, [r7, #30]
 8006f82:	79fb      	ldrb	r3, [r7, #7]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff ff99 	bl	8006ebc <TP_Read_AD>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	0063      	lsls	r3, r4, #1
 8006f90:	f107 0120 	add.w	r1, r7, #32
 8006f94:	440b      	add	r3, r1
 8006f96:	f823 2c14 	strh.w	r2, [r3, #-20]
	for (i = 0; i < READ_TIMES; i++)
 8006f9a:	8bfb      	ldrh	r3, [r7, #30]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	83fb      	strh	r3, [r7, #30]
 8006fa0:	8bfb      	ldrh	r3, [r7, #30]
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	d9ec      	bls.n	8006f80 <TP_Read_XOY+0x14>
	for (i = 0; i < READ_TIMES - 1; i++) //排序
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	83fb      	strh	r3, [r7, #30]
 8006faa:	e03b      	b.n	8007024 <TP_Read_XOY+0xb8>
	{
		for (j = i + 1; j < READ_TIMES; j++)
 8006fac:	8bfb      	ldrh	r3, [r7, #30]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	83bb      	strh	r3, [r7, #28]
 8006fb2:	e031      	b.n	8007018 <TP_Read_XOY+0xac>
		{
			if (buf[i] > buf[j]) //升序排列
 8006fb4:	8bfb      	ldrh	r3, [r7, #30]
 8006fb6:	005b      	lsls	r3, r3, #1
 8006fb8:	f107 0220 	add.w	r2, r7, #32
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8006fc2:	8bbb      	ldrh	r3, [r7, #28]
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	f107 0120 	add.w	r1, r7, #32
 8006fca:	440b      	add	r3, r1
 8006fcc:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d91e      	bls.n	8007012 <TP_Read_XOY+0xa6>
			{
				temp = buf[i];
 8006fd4:	8bfb      	ldrh	r3, [r7, #30]
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	f107 0220 	add.w	r2, r7, #32
 8006fdc:	4413      	add	r3, r2
 8006fde:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8006fe2:	833b      	strh	r3, [r7, #24]
				buf[i] = buf[j];
 8006fe4:	8bbb      	ldrh	r3, [r7, #28]
 8006fe6:	8bfa      	ldrh	r2, [r7, #30]
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	f107 0120 	add.w	r1, r7, #32
 8006fee:	440b      	add	r3, r1
 8006ff0:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8006ff4:	0053      	lsls	r3, r2, #1
 8006ff6:	f107 0220 	add.w	r2, r7, #32
 8006ffa:	4413      	add	r3, r2
 8006ffc:	460a      	mov	r2, r1
 8006ffe:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j] = temp;
 8007002:	8bbb      	ldrh	r3, [r7, #28]
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	f107 0220 	add.w	r2, r7, #32
 800700a:	4413      	add	r3, r2
 800700c:	8b3a      	ldrh	r2, [r7, #24]
 800700e:	f823 2c14 	strh.w	r2, [r3, #-20]
		for (j = i + 1; j < READ_TIMES; j++)
 8007012:	8bbb      	ldrh	r3, [r7, #28]
 8007014:	3301      	adds	r3, #1
 8007016:	83bb      	strh	r3, [r7, #28]
 8007018:	8bbb      	ldrh	r3, [r7, #28]
 800701a:	2b04      	cmp	r3, #4
 800701c:	d9ca      	bls.n	8006fb4 <TP_Read_XOY+0x48>
	for (i = 0; i < READ_TIMES - 1; i++) //排序
 800701e:	8bfb      	ldrh	r3, [r7, #30]
 8007020:	3301      	adds	r3, #1
 8007022:	83fb      	strh	r3, [r7, #30]
 8007024:	8bfb      	ldrh	r3, [r7, #30]
 8007026:	2b03      	cmp	r3, #3
 8007028:	d9c0      	bls.n	8006fac <TP_Read_XOY+0x40>
			}
		}
	}
	sum = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	837b      	strh	r3, [r7, #26]
	for (i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++)
 800702e:	2301      	movs	r3, #1
 8007030:	83fb      	strh	r3, [r7, #30]
 8007032:	e00c      	b.n	800704e <TP_Read_XOY+0xe2>
		sum += buf[i];
 8007034:	8bfb      	ldrh	r3, [r7, #30]
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	f107 0220 	add.w	r2, r7, #32
 800703c:	4413      	add	r3, r2
 800703e:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8007042:	8b7b      	ldrh	r3, [r7, #26]
 8007044:	4413      	add	r3, r2
 8007046:	837b      	strh	r3, [r7, #26]
	for (i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++)
 8007048:	8bfb      	ldrh	r3, [r7, #30]
 800704a:	3301      	adds	r3, #1
 800704c:	83fb      	strh	r3, [r7, #30]
 800704e:	8bfb      	ldrh	r3, [r7, #30]
 8007050:	2b03      	cmp	r3, #3
 8007052:	d9ef      	bls.n	8007034 <TP_Read_XOY+0xc8>
	temp = sum / (READ_TIMES - 2 * LOST_VAL);
 8007054:	8b7b      	ldrh	r3, [r7, #26]
 8007056:	4a05      	ldr	r2, [pc, #20]	; (800706c <TP_Read_XOY+0x100>)
 8007058:	fba2 2303 	umull	r2, r3, r2, r3
 800705c:	085b      	lsrs	r3, r3, #1
 800705e:	833b      	strh	r3, [r7, #24]
	return temp;
 8007060:	8b3b      	ldrh	r3, [r7, #24]
}
 8007062:	4618      	mov	r0, r3
 8007064:	3724      	adds	r7, #36	; 0x24
 8007066:	46bd      	mov	sp, r7
 8007068:	bd90      	pop	{r4, r7, pc}
 800706a:	bf00      	nop
 800706c:	aaaaaaab 	.word	0xaaaaaaab

08007070 <TP_Read_XY>:
//读取x,y坐标
//最小值不能少于100.
//x,y:读取到的坐标值
//返回值:0,失败;1,成功。
u8 TP_Read_XY(u16 *x, u16 *y)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
	u16 xtemp, ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 800707a:	4b0c      	ldr	r3, [pc, #48]	; (80070ac <TP_Read_XY+0x3c>)
 800707c:	781b      	ldrb	r3, [r3, #0]
 800707e:	4618      	mov	r0, r3
 8007080:	f7ff ff74 	bl	8006f6c <TP_Read_XOY>
 8007084:	4603      	mov	r3, r0
 8007086:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 8007088:	4b09      	ldr	r3, [pc, #36]	; (80070b0 <TP_Read_XY+0x40>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	4618      	mov	r0, r3
 800708e:	f7ff ff6d 	bl	8006f6c <TP_Read_XOY>
 8007092:	4603      	mov	r3, r0
 8007094:	81bb      	strh	r3, [r7, #12]
	//if(xtemp<100||ytemp<100)return 0;//读数失败
	*x = xtemp;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	89fa      	ldrh	r2, [r7, #14]
 800709a:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	89ba      	ldrh	r2, [r7, #12]
 80070a0:	801a      	strh	r2, [r3, #0]
	return 1; //读数成功
 80070a2:	2301      	movs	r3, #1
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	2000003c 	.word	0x2000003c
 80070b0:	2000003d 	.word	0x2000003d

080070b4 <TP_Read_XY2>:
//该函数能大大提高准确度
//x,y:读取到的坐标值
//返回值:0,失败;1,成功。
#define ERR_RANGE 50 //误差范围
u8 TP_Read_XY2(u16 *x, u16 *y)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
	u16 x1, y1;
	u16 x2, y2;
	u8 flag;
	flag = TP_Read_XY(&x1, &y1);
 80070be:	f107 0212 	add.w	r2, r7, #18
 80070c2:	f107 0314 	add.w	r3, r7, #20
 80070c6:	4611      	mov	r1, r2
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff ffd1 	bl	8007070 <TP_Read_XY>
 80070ce:	4603      	mov	r3, r0
 80070d0:	75fb      	strb	r3, [r7, #23]
	if (flag == 0)
 80070d2:	7dfb      	ldrb	r3, [r7, #23]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d101      	bne.n	80070dc <TP_Read_XY2+0x28>
		return (0);
 80070d8:	2300      	movs	r3, #0
 80070da:	e049      	b.n	8007170 <TP_Read_XY2+0xbc>
	flag = TP_Read_XY(&x2, &y2);
 80070dc:	f107 020e 	add.w	r2, r7, #14
 80070e0:	f107 0310 	add.w	r3, r7, #16
 80070e4:	4611      	mov	r1, r2
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7ff ffc2 	bl	8007070 <TP_Read_XY>
 80070ec:	4603      	mov	r3, r0
 80070ee:	75fb      	strb	r3, [r7, #23]
	if (flag == 0)
 80070f0:	7dfb      	ldrb	r3, [r7, #23]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <TP_Read_XY2+0x46>
		return (0);
 80070f6:	2300      	movs	r3, #0
 80070f8:	e03a      	b.n	8007170 <TP_Read_XY2+0xbc>
	if (((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE)) //前后两次采样在+-50内
 80070fa:	8a3a      	ldrh	r2, [r7, #16]
 80070fc:	8abb      	ldrh	r3, [r7, #20]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d804      	bhi.n	800710c <TP_Read_XY2+0x58>
 8007102:	8a3b      	ldrh	r3, [r7, #16]
 8007104:	3331      	adds	r3, #49	; 0x31
 8007106:	8aba      	ldrh	r2, [r7, #20]
 8007108:	4293      	cmp	r3, r2
 800710a:	da08      	bge.n	800711e <TP_Read_XY2+0x6a>
 800710c:	8aba      	ldrh	r2, [r7, #20]
 800710e:	8a3b      	ldrh	r3, [r7, #16]
 8007110:	429a      	cmp	r2, r3
 8007112:	d82c      	bhi.n	800716e <TP_Read_XY2+0xba>
 8007114:	8abb      	ldrh	r3, [r7, #20]
 8007116:	3331      	adds	r3, #49	; 0x31
 8007118:	8a3a      	ldrh	r2, [r7, #16]
 800711a:	4293      	cmp	r3, r2
 800711c:	db27      	blt.n	800716e <TP_Read_XY2+0xba>
		&& ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 800711e:	89fa      	ldrh	r2, [r7, #14]
 8007120:	8a7b      	ldrh	r3, [r7, #18]
 8007122:	429a      	cmp	r2, r3
 8007124:	d804      	bhi.n	8007130 <TP_Read_XY2+0x7c>
 8007126:	89fb      	ldrh	r3, [r7, #14]
 8007128:	3331      	adds	r3, #49	; 0x31
 800712a:	8a7a      	ldrh	r2, [r7, #18]
 800712c:	4293      	cmp	r3, r2
 800712e:	da08      	bge.n	8007142 <TP_Read_XY2+0x8e>
 8007130:	8a7a      	ldrh	r2, [r7, #18]
 8007132:	89fb      	ldrh	r3, [r7, #14]
 8007134:	429a      	cmp	r2, r3
 8007136:	d81a      	bhi.n	800716e <TP_Read_XY2+0xba>
 8007138:	8a7b      	ldrh	r3, [r7, #18]
 800713a:	3331      	adds	r3, #49	; 0x31
 800713c:	89fa      	ldrh	r2, [r7, #14]
 800713e:	4293      	cmp	r3, r2
 8007140:	db15      	blt.n	800716e <TP_Read_XY2+0xba>
	{
		*x = (x1 + x2) / 2;
 8007142:	8abb      	ldrh	r3, [r7, #20]
 8007144:	461a      	mov	r2, r3
 8007146:	8a3b      	ldrh	r3, [r7, #16]
 8007148:	4413      	add	r3, r2
 800714a:	0fda      	lsrs	r2, r3, #31
 800714c:	4413      	add	r3, r2
 800714e:	105b      	asrs	r3, r3, #1
 8007150:	b29a      	uxth	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	801a      	strh	r2, [r3, #0]
		*y = (y1 + y2) / 2;
 8007156:	8a7b      	ldrh	r3, [r7, #18]
 8007158:	461a      	mov	r2, r3
 800715a:	89fb      	ldrh	r3, [r7, #14]
 800715c:	4413      	add	r3, r2
 800715e:	0fda      	lsrs	r2, r3, #31
 8007160:	4413      	add	r3, r2
 8007162:	105b      	asrs	r3, r3, #1
 8007164:	b29a      	uxth	r2, r3
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	801a      	strh	r2, [r3, #0]
		return 1;
 800716a:	2301      	movs	r3, #1
 800716c:	e000      	b.n	8007170 <TP_Read_XY2+0xbc>
	}
	else
		return 0;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3718      	adds	r7, #24
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <TP_Drow_Touch_Point>:
//画一个触摸点
//用来校准用的
//x,y:坐标
//color:颜色
void TP_Drow_Touch_Point(u16 x, u16 y, u16 color)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	4603      	mov	r3, r0
 8007180:	80fb      	strh	r3, [r7, #6]
 8007182:	460b      	mov	r3, r1
 8007184:	80bb      	strh	r3, [r7, #4]
 8007186:	4613      	mov	r3, r2
 8007188:	807b      	strh	r3, [r7, #2]
	POINT_COLOR = color;
 800718a:	4a24      	ldr	r2, [pc, #144]	; (800721c <TP_Drow_Touch_Point+0xa4>)
 800718c:	887b      	ldrh	r3, [r7, #2]
 800718e:	8013      	strh	r3, [r2, #0]
	LCD_DrawLine(x - 12, y, x + 13, y); //横线
 8007190:	88fb      	ldrh	r3, [r7, #6]
 8007192:	3b0c      	subs	r3, #12
 8007194:	b298      	uxth	r0, r3
 8007196:	88fb      	ldrh	r3, [r7, #6]
 8007198:	330d      	adds	r3, #13
 800719a:	b29a      	uxth	r2, r3
 800719c:	88bb      	ldrh	r3, [r7, #4]
 800719e:	88b9      	ldrh	r1, [r7, #4]
 80071a0:	f7fe fd20 	bl	8005be4 <LCD_DrawLine>
	LCD_DrawLine(x, y - 12, x, y + 13); //竖线
 80071a4:	88bb      	ldrh	r3, [r7, #4]
 80071a6:	3b0c      	subs	r3, #12
 80071a8:	b299      	uxth	r1, r3
 80071aa:	88bb      	ldrh	r3, [r7, #4]
 80071ac:	330d      	adds	r3, #13
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	88fa      	ldrh	r2, [r7, #6]
 80071b2:	88f8      	ldrh	r0, [r7, #6]
 80071b4:	f7fe fd16 	bl	8005be4 <LCD_DrawLine>
	LCD_DrawPoint(x + 1, y + 1);
 80071b8:	88fb      	ldrh	r3, [r7, #6]
 80071ba:	3301      	adds	r3, #1
 80071bc:	b29a      	uxth	r2, r3
 80071be:	88bb      	ldrh	r3, [r7, #4]
 80071c0:	3301      	adds	r3, #1
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	4619      	mov	r1, r3
 80071c6:	4610      	mov	r0, r2
 80071c8:	f7fa fe10 	bl	8001dec <LCD_DrawPoint>
	LCD_DrawPoint(x - 1, y + 1);
 80071cc:	88fb      	ldrh	r3, [r7, #6]
 80071ce:	3b01      	subs	r3, #1
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	88bb      	ldrh	r3, [r7, #4]
 80071d4:	3301      	adds	r3, #1
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	4619      	mov	r1, r3
 80071da:	4610      	mov	r0, r2
 80071dc:	f7fa fe06 	bl	8001dec <LCD_DrawPoint>
	LCD_DrawPoint(x + 1, y - 1);
 80071e0:	88fb      	ldrh	r3, [r7, #6]
 80071e2:	3301      	adds	r3, #1
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	88bb      	ldrh	r3, [r7, #4]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	4619      	mov	r1, r3
 80071ee:	4610      	mov	r0, r2
 80071f0:	f7fa fdfc 	bl	8001dec <LCD_DrawPoint>
	LCD_DrawPoint(x - 1, y - 1);
 80071f4:	88fb      	ldrh	r3, [r7, #6]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	b29a      	uxth	r2, r3
 80071fa:	88bb      	ldrh	r3, [r7, #4]
 80071fc:	3b01      	subs	r3, #1
 80071fe:	b29b      	uxth	r3, r3
 8007200:	4619      	mov	r1, r3
 8007202:	4610      	mov	r0, r2
 8007204:	f7fa fdf2 	bl	8001dec <LCD_DrawPoint>
	LCD_Draw_Circle(x, y, 6); //画中心圈
 8007208:	88b9      	ldrh	r1, [r7, #4]
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	2206      	movs	r2, #6
 800720e:	4618      	mov	r0, r3
 8007210:	f7fe fd97 	bl	8005d42 <LCD_Draw_Circle>
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	200000d4 	.word	0x200000d4

08007220 <TP_Scan>:
//触摸按键扫描
//tp:0,屏幕坐标;1,物理坐标(校准等特殊场合用)
//返回值:当前触屏状态.
//0,触屏无触摸;1,触屏有触摸
u8 TP_Scan(u8 tp)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	71fb      	strb	r3, [r7, #7]
	if (PEN == 0) //有按键按下
 800722a:	4b42      	ldr	r3, [pc, #264]	; (8007334 <TP_Scan+0x114>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d157      	bne.n	80072e2 <TP_Scan+0xc2>
	{
		if (tp)
 8007232:	79fb      	ldrb	r3, [r7, #7]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d004      	beq.n	8007242 <TP_Scan+0x22>
			TP_Read_XY2(&tp_dev.x[0], &tp_dev.y[0]);	  //读取物理坐标
 8007238:	493f      	ldr	r1, [pc, #252]	; (8007338 <TP_Scan+0x118>)
 800723a:	4840      	ldr	r0, [pc, #256]	; (800733c <TP_Scan+0x11c>)
 800723c:	f7ff ff3a 	bl	80070b4 <TP_Read_XY2>
 8007240:	e03c      	b.n	80072bc <TP_Scan+0x9c>
		else if (TP_Read_XY2(&tp_dev.x[0], &tp_dev.y[0])) //读取屏幕坐标
 8007242:	493d      	ldr	r1, [pc, #244]	; (8007338 <TP_Scan+0x118>)
 8007244:	483d      	ldr	r0, [pc, #244]	; (800733c <TP_Scan+0x11c>)
 8007246:	f7ff ff35 	bl	80070b4 <TP_Read_XY2>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d035      	beq.n	80072bc <TP_Scan+0x9c>
		{
			tp_dev.x[0] = tp_dev.xfac * tp_dev.x[0] + tp_dev.xoff; //将结果转换为屏幕坐标
 8007250:	4b3b      	ldr	r3, [pc, #236]	; (8007340 <TP_Scan+0x120>)
 8007252:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8007256:	4b3a      	ldr	r3, [pc, #232]	; (8007340 <TP_Scan+0x120>)
 8007258:	899b      	ldrh	r3, [r3, #12]
 800725a:	ee07 3a90 	vmov	s15, r3
 800725e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007262:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007266:	4b36      	ldr	r3, [pc, #216]	; (8007340 <TP_Scan+0x120>)
 8007268:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800726c:	ee07 3a90 	vmov	s15, r3
 8007270:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007274:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007278:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800727c:	ee17 3a90 	vmov	r3, s15
 8007280:	b29a      	uxth	r2, r3
 8007282:	4b2f      	ldr	r3, [pc, #188]	; (8007340 <TP_Scan+0x120>)
 8007284:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0] = tp_dev.yfac * tp_dev.y[0] + tp_dev.yoff;
 8007286:	4b2e      	ldr	r3, [pc, #184]	; (8007340 <TP_Scan+0x120>)
 8007288:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800728c:	4b2c      	ldr	r3, [pc, #176]	; (8007340 <TP_Scan+0x120>)
 800728e:	8adb      	ldrh	r3, [r3, #22]
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007298:	ee27 7a27 	vmul.f32	s14, s14, s15
 800729c:	4b28      	ldr	r3, [pc, #160]	; (8007340 <TP_Scan+0x120>)
 800729e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80072a2:	ee07 3a90 	vmov	s15, r3
 80072a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072b2:	ee17 3a90 	vmov	r3, s15
 80072b6:	b29a      	uxth	r2, r3
 80072b8:	4b21      	ldr	r3, [pc, #132]	; (8007340 <TP_Scan+0x120>)
 80072ba:	82da      	strh	r2, [r3, #22]
		}
		if ((tp_dev.sta & TP_PRES_DOWN) == 0) //之前没有被按下
 80072bc:	4b20      	ldr	r3, [pc, #128]	; (8007340 <TP_Scan+0x120>)
 80072be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072c2:	b25b      	sxtb	r3, r3
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	db2a      	blt.n	800731e <TP_Scan+0xfe>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES; //按键按下
 80072c8:	4b1d      	ldr	r3, [pc, #116]	; (8007340 <TP_Scan+0x120>)
 80072ca:	22c0      	movs	r2, #192	; 0xc0
 80072cc:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4] = tp_dev.x[0];				  //记录第一次按下时的坐标
 80072d0:	4b1b      	ldr	r3, [pc, #108]	; (8007340 <TP_Scan+0x120>)
 80072d2:	899a      	ldrh	r2, [r3, #12]
 80072d4:	4b1a      	ldr	r3, [pc, #104]	; (8007340 <TP_Scan+0x120>)
 80072d6:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4] = tp_dev.y[0];
 80072d8:	4b19      	ldr	r3, [pc, #100]	; (8007340 <TP_Scan+0x120>)
 80072da:	8ada      	ldrh	r2, [r3, #22]
 80072dc:	4b18      	ldr	r3, [pc, #96]	; (8007340 <TP_Scan+0x120>)
 80072de:	83da      	strh	r2, [r3, #30]
 80072e0:	e01d      	b.n	800731e <TP_Scan+0xfe>
		}
	}
	else
	{
		if (tp_dev.sta & TP_PRES_DOWN) //之前是被按下的
 80072e2:	4b17      	ldr	r3, [pc, #92]	; (8007340 <TP_Scan+0x120>)
 80072e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072e8:	b25b      	sxtb	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	da09      	bge.n	8007302 <TP_Scan+0xe2>
		{
			tp_dev.sta &= ~(1 << 7); //标记按键松开
 80072ee:	4b14      	ldr	r3, [pc, #80]	; (8007340 <TP_Scan+0x120>)
 80072f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	4b11      	ldr	r3, [pc, #68]	; (8007340 <TP_Scan+0x120>)
 80072fc:	f883 2020 	strb.w	r2, [r3, #32]
 8007300:	e00d      	b.n	800731e <TP_Scan+0xfe>
		}
		else //之前就没有被按下
		{
			tp_dev.x[4] = 0;
 8007302:	4b0f      	ldr	r3, [pc, #60]	; (8007340 <TP_Scan+0x120>)
 8007304:	2200      	movs	r2, #0
 8007306:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4] = 0;
 8007308:	4b0d      	ldr	r3, [pc, #52]	; (8007340 <TP_Scan+0x120>)
 800730a:	2200      	movs	r2, #0
 800730c:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0] = 0xffff;
 800730e:	4b0c      	ldr	r3, [pc, #48]	; (8007340 <TP_Scan+0x120>)
 8007310:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007314:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0] = 0xffff;
 8007316:	4b0a      	ldr	r3, [pc, #40]	; (8007340 <TP_Scan+0x120>)
 8007318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800731c:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN; //返回当前的触屏状态
 800731e:	4b08      	ldr	r3, [pc, #32]	; (8007340 <TP_Scan+0x120>)
 8007320:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007324:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007328:	b2db      	uxtb	r3, r3
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	42408204 	.word	0x42408204
 8007338:	2000001e 	.word	0x2000001e
 800733c:	20000014 	.word	0x20000014
 8007340:	20000008 	.word	0x20000008

08007344 <TP_Save_Adjdata>:
//////////////////////////////////////////////////////////////////////////
//保存在EEPROM里面的地址区间基址,占用13个字节(RANGE:SAVE_ADDR_BASE~SAVE_ADDR_BASE+12)
#define SAVE_ADDR_BASE 40
//保存校准参数
void TP_Save_Adjdata(void)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b082      	sub	sp, #8
 8007348:	af00      	add	r7, sp, #0
	s32 temp;
	//保存校正结果!
	temp = tp_dev.xfac * 100000000; //保存x校正因素
 800734a:	4b23      	ldr	r3, [pc, #140]	; (80073d8 <TP_Save_Adjdata+0x94>)
 800734c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007350:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80073dc <TP_Save_Adjdata+0x98>
 8007354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800735c:	ee17 3a90 	vmov	r3, s15
 8007360:	607b      	str	r3, [r7, #4]
	AT24CXX_WriteLenByte(SAVE_ADDR_BASE, temp, 4);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2204      	movs	r2, #4
 8007366:	4619      	mov	r1, r3
 8007368:	2028      	movs	r0, #40	; 0x28
 800736a:	f7f9 fd98 	bl	8000e9e <AT24CXX_WriteLenByte>
	temp = tp_dev.yfac * 100000000; //保存y校正因素
 800736e:	4b1a      	ldr	r3, [pc, #104]	; (80073d8 <TP_Save_Adjdata+0x94>)
 8007370:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007374:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80073dc <TP_Save_Adjdata+0x98>
 8007378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800737c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007380:	ee17 3a90 	vmov	r3, s15
 8007384:	607b      	str	r3, [r7, #4]
	AT24CXX_WriteLenByte(SAVE_ADDR_BASE + 4, temp, 4);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2204      	movs	r2, #4
 800738a:	4619      	mov	r1, r3
 800738c:	202c      	movs	r0, #44	; 0x2c
 800738e:	f7f9 fd86 	bl	8000e9e <AT24CXX_WriteLenByte>
	//保存x偏移量
	AT24CXX_WriteLenByte(SAVE_ADDR_BASE + 8, tp_dev.xoff, 2);
 8007392:	4b11      	ldr	r3, [pc, #68]	; (80073d8 <TP_Save_Adjdata+0x94>)
 8007394:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8007398:	2202      	movs	r2, #2
 800739a:	4619      	mov	r1, r3
 800739c:	2030      	movs	r0, #48	; 0x30
 800739e:	f7f9 fd7e 	bl	8000e9e <AT24CXX_WriteLenByte>
	//保存y偏移量
	AT24CXX_WriteLenByte(SAVE_ADDR_BASE + 10, tp_dev.yoff, 2);
 80073a2:	4b0d      	ldr	r3, [pc, #52]	; (80073d8 <TP_Save_Adjdata+0x94>)
 80073a4:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80073a8:	2202      	movs	r2, #2
 80073aa:	4619      	mov	r1, r3
 80073ac:	2032      	movs	r0, #50	; 0x32
 80073ae:	f7f9 fd76 	bl	8000e9e <AT24CXX_WriteLenByte>
	//保存触屏类型
	AT24CXX_WriteOneByte(SAVE_ADDR_BASE + 12, tp_dev.touchtype);
 80073b2:	4b09      	ldr	r3, [pc, #36]	; (80073d8 <TP_Save_Adjdata+0x94>)
 80073b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073b8:	4619      	mov	r1, r3
 80073ba:	2034      	movs	r0, #52	; 0x34
 80073bc:	f7f9 fd42 	bl	8000e44 <AT24CXX_WriteOneByte>
	temp = 0X0A; //标记校准过了
 80073c0:	230a      	movs	r3, #10
 80073c2:	607b      	str	r3, [r7, #4]
	AT24CXX_WriteOneByte(SAVE_ADDR_BASE + 13, temp);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	b2db      	uxtb	r3, r3
 80073c8:	4619      	mov	r1, r3
 80073ca:	2035      	movs	r0, #53	; 0x35
 80073cc:	f7f9 fd3a 	bl	8000e44 <AT24CXX_WriteOneByte>
}
 80073d0:	bf00      	nop
 80073d2:	3708      	adds	r7, #8
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	20000008 	.word	0x20000008
 80073dc:	4cbebc20 	.word	0x4cbebc20

080073e0 <TP_Get_Adjdata>:
//得到保存在EEPROM里面的校准值
//返回值：1，成功获取数据
//        0，获取失败，要重新校准
u8 TP_Get_Adjdata(void)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
	s32 tempfac;
	tempfac = AT24CXX_ReadOneByte(SAVE_ADDR_BASE + 13); //读取标记字,看是否校准过！
 80073e6:	2035      	movs	r0, #53	; 0x35
 80073e8:	f7f9 fcfc 	bl	8000de4 <AT24CXX_ReadOneByte>
 80073ec:	4603      	mov	r3, r0
 80073ee:	607b      	str	r3, [r7, #4]
	if (tempfac == 0X0A)								//触摸屏已经校准过了
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2b0a      	cmp	r3, #10
 80073f4:	d14f      	bne.n	8007496 <TP_Get_Adjdata+0xb6>
	{
		tempfac = AT24CXX_ReadLenByte(SAVE_ADDR_BASE, 4);
 80073f6:	2104      	movs	r1, #4
 80073f8:	2028      	movs	r0, #40	; 0x28
 80073fa:	f7f9 fd75 	bl	8000ee8 <AT24CXX_ReadLenByte>
 80073fe:	4603      	mov	r3, r0
 8007400:	607b      	str	r3, [r7, #4]
		tp_dev.xfac = (float)tempfac / 100000000; //得到x校准参数
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	ee07 3a90 	vmov	s15, r3
 8007408:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800740c:	eddf 6a24 	vldr	s13, [pc, #144]	; 80074a0 <TP_Get_Adjdata+0xc0>
 8007410:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007414:	4b23      	ldr	r3, [pc, #140]	; (80074a4 <TP_Get_Adjdata+0xc4>)
 8007416:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		tempfac = AT24CXX_ReadLenByte(SAVE_ADDR_BASE + 4, 4);
 800741a:	2104      	movs	r1, #4
 800741c:	202c      	movs	r0, #44	; 0x2c
 800741e:	f7f9 fd63 	bl	8000ee8 <AT24CXX_ReadLenByte>
 8007422:	4603      	mov	r3, r0
 8007424:	607b      	str	r3, [r7, #4]
		tp_dev.yfac = (float)tempfac / 100000000; //得到y校准参数
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	ee07 3a90 	vmov	s15, r3
 800742c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007430:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80074a0 <TP_Get_Adjdata+0xc0>
 8007434:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007438:	4b1a      	ldr	r3, [pc, #104]	; (80074a4 <TP_Get_Adjdata+0xc4>)
 800743a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
												  //得到x偏移量
		tp_dev.xoff = AT24CXX_ReadLenByte(SAVE_ADDR_BASE + 8, 2);
 800743e:	2102      	movs	r1, #2
 8007440:	2030      	movs	r0, #48	; 0x30
 8007442:	f7f9 fd51 	bl	8000ee8 <AT24CXX_ReadLenByte>
 8007446:	4603      	mov	r3, r0
 8007448:	b21a      	sxth	r2, r3
 800744a:	4b16      	ldr	r3, [pc, #88]	; (80074a4 <TP_Get_Adjdata+0xc4>)
 800744c:	859a      	strh	r2, [r3, #44]	; 0x2c
		//得到y偏移量
		tp_dev.yoff = AT24CXX_ReadLenByte(SAVE_ADDR_BASE + 10, 2);
 800744e:	2102      	movs	r1, #2
 8007450:	2032      	movs	r0, #50	; 0x32
 8007452:	f7f9 fd49 	bl	8000ee8 <AT24CXX_ReadLenByte>
 8007456:	4603      	mov	r3, r0
 8007458:	b21a      	sxth	r2, r3
 800745a:	4b12      	ldr	r3, [pc, #72]	; (80074a4 <TP_Get_Adjdata+0xc4>)
 800745c:	85da      	strh	r2, [r3, #46]	; 0x2e
		tp_dev.touchtype = AT24CXX_ReadOneByte(SAVE_ADDR_BASE + 12); //读取触屏类型标记
 800745e:	2034      	movs	r0, #52	; 0x34
 8007460:	f7f9 fcc0 	bl	8000de4 <AT24CXX_ReadOneByte>
 8007464:	4603      	mov	r3, r0
 8007466:	461a      	mov	r2, r3
 8007468:	4b0e      	ldr	r3, [pc, #56]	; (80074a4 <TP_Get_Adjdata+0xc4>)
 800746a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		if (tp_dev.touchtype)										 //X,Y方向与屏幕相反
 800746e:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <TP_Get_Adjdata+0xc4>)
 8007470:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007474:	2b00      	cmp	r3, #0
 8007476:	d006      	beq.n	8007486 <TP_Get_Adjdata+0xa6>
		{
			CMD_RDX = 0X90;
 8007478:	4b0b      	ldr	r3, [pc, #44]	; (80074a8 <TP_Get_Adjdata+0xc8>)
 800747a:	2290      	movs	r2, #144	; 0x90
 800747c:	701a      	strb	r2, [r3, #0]
			CMD_RDY = 0XD0;
 800747e:	4b0b      	ldr	r3, [pc, #44]	; (80074ac <TP_Get_Adjdata+0xcc>)
 8007480:	22d0      	movs	r2, #208	; 0xd0
 8007482:	701a      	strb	r2, [r3, #0]
 8007484:	e005      	b.n	8007492 <TP_Get_Adjdata+0xb2>
		}
		else //X,Y方向与屏幕相同
		{
			CMD_RDX = 0XD0;
 8007486:	4b08      	ldr	r3, [pc, #32]	; (80074a8 <TP_Get_Adjdata+0xc8>)
 8007488:	22d0      	movs	r2, #208	; 0xd0
 800748a:	701a      	strb	r2, [r3, #0]
			CMD_RDY = 0X90;
 800748c:	4b07      	ldr	r3, [pc, #28]	; (80074ac <TP_Get_Adjdata+0xcc>)
 800748e:	2290      	movs	r2, #144	; 0x90
 8007490:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8007492:	2301      	movs	r3, #1
 8007494:	e000      	b.n	8007498 <TP_Get_Adjdata+0xb8>
	}
	return 0;
 8007496:	2300      	movs	r3, #0
}
 8007498:	4618      	mov	r0, r3
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	4cbebc20 	.word	0x4cbebc20
 80074a4:	20000008 	.word	0x20000008
 80074a8:	2000003c 	.word	0x2000003c
 80074ac:	2000003d 	.word	0x2000003d

080074b0 <TP_Adj_Info_Show>:
//提示字符串
u8 *const TP_REMIND_MSG_TBL = "Please use the stylus click the cross on the screen.The cross will always move until the screen adjustment is completed.";

//提示校准结果(各个参数)
void TP_Adj_Info_Show(u16 x0, u16 y0, u16 x1, u16 y1, u16 x2, u16 y2, u16 x3, u16 y3, u16 fac)
{
 80074b0:	b590      	push	{r4, r7, lr}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af02      	add	r7, sp, #8
 80074b6:	4604      	mov	r4, r0
 80074b8:	4608      	mov	r0, r1
 80074ba:	4611      	mov	r1, r2
 80074bc:	461a      	mov	r2, r3
 80074be:	4623      	mov	r3, r4
 80074c0:	80fb      	strh	r3, [r7, #6]
 80074c2:	4603      	mov	r3, r0
 80074c4:	80bb      	strh	r3, [r7, #4]
 80074c6:	460b      	mov	r3, r1
 80074c8:	807b      	strh	r3, [r7, #2]
 80074ca:	4613      	mov	r3, r2
 80074cc:	803b      	strh	r3, [r7, #0]
	POINT_COLOR = RED;
 80074ce:	4b5e      	ldr	r3, [pc, #376]	; (8007648 <TP_Adj_Info_Show+0x198>)
 80074d0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80074d4:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(40, 160, lcddev.width, lcddev.height, 16, "x1:");
 80074d6:	4b5d      	ldr	r3, [pc, #372]	; (800764c <TP_Adj_Info_Show+0x19c>)
 80074d8:	881a      	ldrh	r2, [r3, #0]
 80074da:	4b5c      	ldr	r3, [pc, #368]	; (800764c <TP_Adj_Info_Show+0x19c>)
 80074dc:	885b      	ldrh	r3, [r3, #2]
 80074de:	495c      	ldr	r1, [pc, #368]	; (8007650 <TP_Adj_Info_Show+0x1a0>)
 80074e0:	9101      	str	r1, [sp, #4]
 80074e2:	2110      	movs	r1, #16
 80074e4:	9100      	str	r1, [sp, #0]
 80074e6:	21a0      	movs	r1, #160	; 0xa0
 80074e8:	2028      	movs	r0, #40	; 0x28
 80074ea:	f7fe fe9f 	bl	800622c <LCD_ShowString>
	LCD_ShowString(40 + 80, 160, lcddev.width, lcddev.height, 16, "y1:");
 80074ee:	4b57      	ldr	r3, [pc, #348]	; (800764c <TP_Adj_Info_Show+0x19c>)
 80074f0:	881a      	ldrh	r2, [r3, #0]
 80074f2:	4b56      	ldr	r3, [pc, #344]	; (800764c <TP_Adj_Info_Show+0x19c>)
 80074f4:	885b      	ldrh	r3, [r3, #2]
 80074f6:	4957      	ldr	r1, [pc, #348]	; (8007654 <TP_Adj_Info_Show+0x1a4>)
 80074f8:	9101      	str	r1, [sp, #4]
 80074fa:	2110      	movs	r1, #16
 80074fc:	9100      	str	r1, [sp, #0]
 80074fe:	21a0      	movs	r1, #160	; 0xa0
 8007500:	2078      	movs	r0, #120	; 0x78
 8007502:	f7fe fe93 	bl	800622c <LCD_ShowString>
	LCD_ShowString(40, 180, lcddev.width, lcddev.height, 16, "x2:");
 8007506:	4b51      	ldr	r3, [pc, #324]	; (800764c <TP_Adj_Info_Show+0x19c>)
 8007508:	881a      	ldrh	r2, [r3, #0]
 800750a:	4b50      	ldr	r3, [pc, #320]	; (800764c <TP_Adj_Info_Show+0x19c>)
 800750c:	885b      	ldrh	r3, [r3, #2]
 800750e:	4952      	ldr	r1, [pc, #328]	; (8007658 <TP_Adj_Info_Show+0x1a8>)
 8007510:	9101      	str	r1, [sp, #4]
 8007512:	2110      	movs	r1, #16
 8007514:	9100      	str	r1, [sp, #0]
 8007516:	21b4      	movs	r1, #180	; 0xb4
 8007518:	2028      	movs	r0, #40	; 0x28
 800751a:	f7fe fe87 	bl	800622c <LCD_ShowString>
	LCD_ShowString(40 + 80, 180, lcddev.width, lcddev.height, 16, "y2:");
 800751e:	4b4b      	ldr	r3, [pc, #300]	; (800764c <TP_Adj_Info_Show+0x19c>)
 8007520:	881a      	ldrh	r2, [r3, #0]
 8007522:	4b4a      	ldr	r3, [pc, #296]	; (800764c <TP_Adj_Info_Show+0x19c>)
 8007524:	885b      	ldrh	r3, [r3, #2]
 8007526:	494d      	ldr	r1, [pc, #308]	; (800765c <TP_Adj_Info_Show+0x1ac>)
 8007528:	9101      	str	r1, [sp, #4]
 800752a:	2110      	movs	r1, #16
 800752c:	9100      	str	r1, [sp, #0]
 800752e:	21b4      	movs	r1, #180	; 0xb4
 8007530:	2078      	movs	r0, #120	; 0x78
 8007532:	f7fe fe7b 	bl	800622c <LCD_ShowString>
	LCD_ShowString(40, 200, lcddev.width, lcddev.height, 16, "x3:");
 8007536:	4b45      	ldr	r3, [pc, #276]	; (800764c <TP_Adj_Info_Show+0x19c>)
 8007538:	881a      	ldrh	r2, [r3, #0]
 800753a:	4b44      	ldr	r3, [pc, #272]	; (800764c <TP_Adj_Info_Show+0x19c>)
 800753c:	885b      	ldrh	r3, [r3, #2]
 800753e:	4948      	ldr	r1, [pc, #288]	; (8007660 <TP_Adj_Info_Show+0x1b0>)
 8007540:	9101      	str	r1, [sp, #4]
 8007542:	2110      	movs	r1, #16
 8007544:	9100      	str	r1, [sp, #0]
 8007546:	21c8      	movs	r1, #200	; 0xc8
 8007548:	2028      	movs	r0, #40	; 0x28
 800754a:	f7fe fe6f 	bl	800622c <LCD_ShowString>
	LCD_ShowString(40 + 80, 200, lcddev.width, lcddev.height, 16, "y3:");
 800754e:	4b3f      	ldr	r3, [pc, #252]	; (800764c <TP_Adj_Info_Show+0x19c>)
 8007550:	881a      	ldrh	r2, [r3, #0]
 8007552:	4b3e      	ldr	r3, [pc, #248]	; (800764c <TP_Adj_Info_Show+0x19c>)
 8007554:	885b      	ldrh	r3, [r3, #2]
 8007556:	4943      	ldr	r1, [pc, #268]	; (8007664 <TP_Adj_Info_Show+0x1b4>)
 8007558:	9101      	str	r1, [sp, #4]
 800755a:	2110      	movs	r1, #16
 800755c:	9100      	str	r1, [sp, #0]
 800755e:	21c8      	movs	r1, #200	; 0xc8
 8007560:	2078      	movs	r0, #120	; 0x78
 8007562:	f7fe fe63 	bl	800622c <LCD_ShowString>
	LCD_ShowString(40, 220, lcddev.width, lcddev.height, 16, "x4:");
 8007566:	4b39      	ldr	r3, [pc, #228]	; (800764c <TP_Adj_Info_Show+0x19c>)
 8007568:	881a      	ldrh	r2, [r3, #0]
 800756a:	4b38      	ldr	r3, [pc, #224]	; (800764c <TP_Adj_Info_Show+0x19c>)
 800756c:	885b      	ldrh	r3, [r3, #2]
 800756e:	493e      	ldr	r1, [pc, #248]	; (8007668 <TP_Adj_Info_Show+0x1b8>)
 8007570:	9101      	str	r1, [sp, #4]
 8007572:	2110      	movs	r1, #16
 8007574:	9100      	str	r1, [sp, #0]
 8007576:	21dc      	movs	r1, #220	; 0xdc
 8007578:	2028      	movs	r0, #40	; 0x28
 800757a:	f7fe fe57 	bl	800622c <LCD_ShowString>
	LCD_ShowString(40 + 80, 220, lcddev.width, lcddev.height, 16, "y4:");
 800757e:	4b33      	ldr	r3, [pc, #204]	; (800764c <TP_Adj_Info_Show+0x19c>)
 8007580:	881a      	ldrh	r2, [r3, #0]
 8007582:	4b32      	ldr	r3, [pc, #200]	; (800764c <TP_Adj_Info_Show+0x19c>)
 8007584:	885b      	ldrh	r3, [r3, #2]
 8007586:	4939      	ldr	r1, [pc, #228]	; (800766c <TP_Adj_Info_Show+0x1bc>)
 8007588:	9101      	str	r1, [sp, #4]
 800758a:	2110      	movs	r1, #16
 800758c:	9100      	str	r1, [sp, #0]
 800758e:	21dc      	movs	r1, #220	; 0xdc
 8007590:	2078      	movs	r0, #120	; 0x78
 8007592:	f7fe fe4b 	bl	800622c <LCD_ShowString>
	LCD_ShowString(40, 240, lcddev.width, lcddev.height, 16, "fac is:");
 8007596:	4b2d      	ldr	r3, [pc, #180]	; (800764c <TP_Adj_Info_Show+0x19c>)
 8007598:	881a      	ldrh	r2, [r3, #0]
 800759a:	4b2c      	ldr	r3, [pc, #176]	; (800764c <TP_Adj_Info_Show+0x19c>)
 800759c:	885b      	ldrh	r3, [r3, #2]
 800759e:	4934      	ldr	r1, [pc, #208]	; (8007670 <TP_Adj_Info_Show+0x1c0>)
 80075a0:	9101      	str	r1, [sp, #4]
 80075a2:	2110      	movs	r1, #16
 80075a4:	9100      	str	r1, [sp, #0]
 80075a6:	21f0      	movs	r1, #240	; 0xf0
 80075a8:	2028      	movs	r0, #40	; 0x28
 80075aa:	f7fe fe3f 	bl	800622c <LCD_ShowString>
	LCD_ShowNum(40 + 24, 160, x0, 4, 16);	   //显示数值
 80075ae:	88fa      	ldrh	r2, [r7, #6]
 80075b0:	2310      	movs	r3, #16
 80075b2:	9300      	str	r3, [sp, #0]
 80075b4:	2304      	movs	r3, #4
 80075b6:	21a0      	movs	r1, #160	; 0xa0
 80075b8:	2040      	movs	r0, #64	; 0x40
 80075ba:	f7fe fd29 	bl	8006010 <LCD_ShowNum>
	LCD_ShowNum(40 + 24 + 80, 160, y0, 4, 16); //显示数值
 80075be:	88ba      	ldrh	r2, [r7, #4]
 80075c0:	2310      	movs	r3, #16
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	2304      	movs	r3, #4
 80075c6:	21a0      	movs	r1, #160	; 0xa0
 80075c8:	2090      	movs	r0, #144	; 0x90
 80075ca:	f7fe fd21 	bl	8006010 <LCD_ShowNum>
	LCD_ShowNum(40 + 24, 180, x1, 4, 16);	   //显示数值
 80075ce:	887a      	ldrh	r2, [r7, #2]
 80075d0:	2310      	movs	r3, #16
 80075d2:	9300      	str	r3, [sp, #0]
 80075d4:	2304      	movs	r3, #4
 80075d6:	21b4      	movs	r1, #180	; 0xb4
 80075d8:	2040      	movs	r0, #64	; 0x40
 80075da:	f7fe fd19 	bl	8006010 <LCD_ShowNum>
	LCD_ShowNum(40 + 24 + 80, 180, y1, 4, 16); //显示数值
 80075de:	883a      	ldrh	r2, [r7, #0]
 80075e0:	2310      	movs	r3, #16
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	2304      	movs	r3, #4
 80075e6:	21b4      	movs	r1, #180	; 0xb4
 80075e8:	2090      	movs	r0, #144	; 0x90
 80075ea:	f7fe fd11 	bl	8006010 <LCD_ShowNum>
	LCD_ShowNum(40 + 24, 200, x2, 4, 16);	   //显示数值
 80075ee:	8b3a      	ldrh	r2, [r7, #24]
 80075f0:	2310      	movs	r3, #16
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	2304      	movs	r3, #4
 80075f6:	21c8      	movs	r1, #200	; 0xc8
 80075f8:	2040      	movs	r0, #64	; 0x40
 80075fa:	f7fe fd09 	bl	8006010 <LCD_ShowNum>
	LCD_ShowNum(40 + 24 + 80, 200, y2, 4, 16); //显示数值
 80075fe:	8bba      	ldrh	r2, [r7, #28]
 8007600:	2310      	movs	r3, #16
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	2304      	movs	r3, #4
 8007606:	21c8      	movs	r1, #200	; 0xc8
 8007608:	2090      	movs	r0, #144	; 0x90
 800760a:	f7fe fd01 	bl	8006010 <LCD_ShowNum>
	LCD_ShowNum(40 + 24, 220, x3, 4, 16);	   //显示数值
 800760e:	8c3a      	ldrh	r2, [r7, #32]
 8007610:	2310      	movs	r3, #16
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	2304      	movs	r3, #4
 8007616:	21dc      	movs	r1, #220	; 0xdc
 8007618:	2040      	movs	r0, #64	; 0x40
 800761a:	f7fe fcf9 	bl	8006010 <LCD_ShowNum>
	LCD_ShowNum(40 + 24 + 80, 220, y3, 4, 16); //显示数值
 800761e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007620:	2310      	movs	r3, #16
 8007622:	9300      	str	r3, [sp, #0]
 8007624:	2304      	movs	r3, #4
 8007626:	21dc      	movs	r1, #220	; 0xdc
 8007628:	2090      	movs	r0, #144	; 0x90
 800762a:	f7fe fcf1 	bl	8006010 <LCD_ShowNum>
	LCD_ShowNum(40 + 56, 240, fac, 3, 16);	   //显示数值,该数值必须在95~105范围之内.
 800762e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8007630:	2310      	movs	r3, #16
 8007632:	9300      	str	r3, [sp, #0]
 8007634:	2303      	movs	r3, #3
 8007636:	21f0      	movs	r1, #240	; 0xf0
 8007638:	2060      	movs	r0, #96	; 0x60
 800763a:	f7fe fce9 	bl	8006010 <LCD_ShowNum>
}
 800763e:	bf00      	nop
 8007640:	370c      	adds	r7, #12
 8007642:	46bd      	mov	sp, r7
 8007644:	bd90      	pop	{r4, r7, pc}
 8007646:	bf00      	nop
 8007648:	200000d4 	.word	0x200000d4
 800764c:	200001ec 	.word	0x200001ec
 8007650:	0800a9f0 	.word	0x0800a9f0
 8007654:	0800a9f4 	.word	0x0800a9f4
 8007658:	0800a9f8 	.word	0x0800a9f8
 800765c:	0800a9fc 	.word	0x0800a9fc
 8007660:	0800aa00 	.word	0x0800aa00
 8007664:	0800aa04 	.word	0x0800aa04
 8007668:	0800aa08 	.word	0x0800aa08
 800766c:	0800aa0c 	.word	0x0800aa0c
 8007670:	0800aa10 	.word	0x0800aa10
 8007674:	00000000 	.word	0x00000000

08007678 <TP_Adjust>:

//触摸屏校准代码
//得到四个校准参数
void TP_Adjust(void)
{
 8007678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	b093      	sub	sp, #76	; 0x4c
 800767e:	af06      	add	r7, sp, #24
	u16 pos_temp[4][2]; //坐标缓存值
	u8 cnt = 0;
 8007680:	2300      	movs	r3, #0
 8007682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	u16 d1, d2;
	u32 tem1, tem2;
	double fac;
	u16 outtime = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	85bb      	strh	r3, [r7, #44]	; 0x2c
	cnt = 0;
 800768a:	2300      	movs	r3, #0
 800768c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	POINT_COLOR = BLUE;
 8007690:	4bbd      	ldr	r3, [pc, #756]	; (8007988 <TP_Adjust+0x310>)
 8007692:	221f      	movs	r2, #31
 8007694:	801a      	strh	r2, [r3, #0]
	BACK_COLOR = WHITE;
 8007696:	4bbd      	ldr	r3, [pc, #756]	; (800798c <TP_Adjust+0x314>)
 8007698:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800769c:	801a      	strh	r2, [r3, #0]
	LCD_Clear(WHITE);  //清屏
 800769e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80076a2:	f7fe f9d7 	bl	8005a54 <LCD_Clear>
	POINT_COLOR = RED; //红色
 80076a6:	4bb8      	ldr	r3, [pc, #736]	; (8007988 <TP_Adjust+0x310>)
 80076a8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80076ac:	801a      	strh	r2, [r3, #0]
	LCD_Clear(WHITE);  //清屏
 80076ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80076b2:	f7fe f9cf 	bl	8005a54 <LCD_Clear>
	POINT_COLOR = BLACK;
 80076b6:	4bb4      	ldr	r3, [pc, #720]	; (8007988 <TP_Adjust+0x310>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(40, 40, 160, 100, 16, (u8 *)TP_REMIND_MSG_TBL); //显示提示信息
 80076bc:	4bb4      	ldr	r3, [pc, #720]	; (8007990 <TP_Adjust+0x318>)
 80076be:	9301      	str	r3, [sp, #4]
 80076c0:	2310      	movs	r3, #16
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	2364      	movs	r3, #100	; 0x64
 80076c6:	22a0      	movs	r2, #160	; 0xa0
 80076c8:	2128      	movs	r1, #40	; 0x28
 80076ca:	2028      	movs	r0, #40	; 0x28
 80076cc:	f7fe fdae 	bl	800622c <LCD_ShowString>
	TP_Drow_Touch_Point(20, 20, RED);							   //画点1
 80076d0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80076d4:	2114      	movs	r1, #20
 80076d6:	2014      	movs	r0, #20
 80076d8:	f7ff fd4e 	bl	8007178 <TP_Drow_Touch_Point>
	tp_dev.sta = 0;												   //消除触发信号
 80076dc:	4bad      	ldr	r3, [pc, #692]	; (8007994 <TP_Adjust+0x31c>)
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac = 0;											   //xfac用来标记是否校准过,所以校准之前必须清掉!以免错误
 80076e4:	4bab      	ldr	r3, [pc, #684]	; (8007994 <TP_Adjust+0x31c>)
 80076e6:	f04f 0200 	mov.w	r2, #0
 80076ea:	625a      	str	r2, [r3, #36]	; 0x24
	while (1)													   //如果连续10秒钟没有按下,则自动退出
	{
		tp_dev.scan(1);							 //扫描物理坐标
 80076ec:	4ba9      	ldr	r3, [pc, #676]	; (8007994 <TP_Adjust+0x31c>)
 80076ee:	685b      	ldr	r3, [r3, #4]
 80076f0:	2001      	movs	r0, #1
 80076f2:	4798      	blx	r3
		if ((tp_dev.sta & 0xc0) == TP_CATH_PRES) //按键按下了一次(此时按键松开了.)
 80076f4:	4ba7      	ldr	r3, [pc, #668]	; (8007994 <TP_Adjust+0x31c>)
 80076f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80076fe:	2b40      	cmp	r3, #64	; 0x40
 8007700:	f040 83b9 	bne.w	8007e76 <TP_Adjust+0x7fe>
		{
			outtime = 0;
 8007704:	2300      	movs	r3, #0
 8007706:	85bb      	strh	r3, [r7, #44]	; 0x2c
			tp_dev.sta &= ~(1 << 6); //标记按键已经被处理过了.
 8007708:	4ba2      	ldr	r3, [pc, #648]	; (8007994 <TP_Adjust+0x31c>)
 800770a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800770e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007712:	b2da      	uxtb	r2, r3
 8007714:	4b9f      	ldr	r3, [pc, #636]	; (8007994 <TP_Adjust+0x31c>)
 8007716:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0] = tp_dev.x[0];
 800771a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800771e:	4a9d      	ldr	r2, [pc, #628]	; (8007994 <TP_Adjust+0x31c>)
 8007720:	8992      	ldrh	r2, [r2, #12]
 8007722:	009b      	lsls	r3, r3, #2
 8007724:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8007728:	440b      	add	r3, r1
 800772a:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1] = tp_dev.y[0];
 800772e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007732:	4a98      	ldr	r2, [pc, #608]	; (8007994 <TP_Adjust+0x31c>)
 8007734:	8ad2      	ldrh	r2, [r2, #22]
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800773c:	440b      	add	r3, r1
 800773e:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8007742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007746:	3301      	adds	r3, #1
 8007748:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch (cnt)
 800774c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007750:	3b01      	subs	r3, #1
 8007752:	2b03      	cmp	r3, #3
 8007754:	f200 8390 	bhi.w	8007e78 <TP_Adjust+0x800>
 8007758:	a201      	add	r2, pc, #4	; (adr r2, 8007760 <TP_Adjust+0xe8>)
 800775a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800775e:	bf00      	nop
 8007760:	08007771 	.word	0x08007771
 8007764:	08007793 	.word	0x08007793
 8007768:	080077bd 	.word	0x080077bd
 800776c:	080077ed 	.word	0x080077ed
			{
			case 1:
				TP_Drow_Touch_Point(20, 20, WHITE);				 //清除点1
 8007770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007774:	2114      	movs	r1, #20
 8007776:	2014      	movs	r0, #20
 8007778:	f7ff fcfe 	bl	8007178 <TP_Drow_Touch_Point>
				TP_Drow_Touch_Point(lcddev.width - 20, 20, RED); //画点2
 800777c:	4b86      	ldr	r3, [pc, #536]	; (8007998 <TP_Adjust+0x320>)
 800777e:	881b      	ldrh	r3, [r3, #0]
 8007780:	3b14      	subs	r3, #20
 8007782:	b29b      	uxth	r3, r3
 8007784:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8007788:	2114      	movs	r1, #20
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff fcf4 	bl	8007178 <TP_Drow_Touch_Point>
				break;
 8007790:	e372      	b.n	8007e78 <TP_Adjust+0x800>
			case 2:
				TP_Drow_Touch_Point(lcddev.width - 20, 20, WHITE); //清除点2
 8007792:	4b81      	ldr	r3, [pc, #516]	; (8007998 <TP_Adjust+0x320>)
 8007794:	881b      	ldrh	r3, [r3, #0]
 8007796:	3b14      	subs	r3, #20
 8007798:	b29b      	uxth	r3, r3
 800779a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800779e:	2114      	movs	r1, #20
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7ff fce9 	bl	8007178 <TP_Drow_Touch_Point>
				TP_Drow_Touch_Point(20, lcddev.height - 20, RED);  //画点3
 80077a6:	4b7c      	ldr	r3, [pc, #496]	; (8007998 <TP_Adjust+0x320>)
 80077a8:	885b      	ldrh	r3, [r3, #2]
 80077aa:	3b14      	subs	r3, #20
 80077ac:	b29b      	uxth	r3, r3
 80077ae:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80077b2:	4619      	mov	r1, r3
 80077b4:	2014      	movs	r0, #20
 80077b6:	f7ff fcdf 	bl	8007178 <TP_Drow_Touch_Point>
				break;
 80077ba:	e35d      	b.n	8007e78 <TP_Adjust+0x800>
			case 3:
				TP_Drow_Touch_Point(20, lcddev.height - 20, WHITE);				 //清除点3
 80077bc:	4b76      	ldr	r3, [pc, #472]	; (8007998 <TP_Adjust+0x320>)
 80077be:	885b      	ldrh	r3, [r3, #2]
 80077c0:	3b14      	subs	r3, #20
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077c8:	4619      	mov	r1, r3
 80077ca:	2014      	movs	r0, #20
 80077cc:	f7ff fcd4 	bl	8007178 <TP_Drow_Touch_Point>
				TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, RED); //画点4
 80077d0:	4b71      	ldr	r3, [pc, #452]	; (8007998 <TP_Adjust+0x320>)
 80077d2:	881b      	ldrh	r3, [r3, #0]
 80077d4:	3b14      	subs	r3, #20
 80077d6:	b298      	uxth	r0, r3
 80077d8:	4b6f      	ldr	r3, [pc, #444]	; (8007998 <TP_Adjust+0x320>)
 80077da:	885b      	ldrh	r3, [r3, #2]
 80077dc:	3b14      	subs	r3, #20
 80077de:	b29b      	uxth	r3, r3
 80077e0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80077e4:	4619      	mov	r1, r3
 80077e6:	f7ff fcc7 	bl	8007178 <TP_Drow_Touch_Point>
				break;
 80077ea:	e345      	b.n	8007e78 <TP_Adjust+0x800>
			case 4:											 //全部四个点已经得到
															 //对边相等
				tem1 = abs(pos_temp[0][0] - pos_temp[1][0]); //x1-x2
 80077ec:	893b      	ldrh	r3, [r7, #8]
 80077ee:	461a      	mov	r2, r3
 80077f0:	89bb      	ldrh	r3, [r7, #12]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	bfb8      	it	lt
 80077f8:	425b      	neglt	r3, r3
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[0][1] - pos_temp[1][1]); //y1-y2
 80077fc:	897b      	ldrh	r3, [r7, #10]
 80077fe:	461a      	mov	r2, r3
 8007800:	89fb      	ldrh	r3, [r7, #14]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	bfb8      	it	lt
 8007808:	425b      	neglt	r3, r3
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 800780c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780e:	fb03 f303 	mul.w	r3, r3, r3
 8007812:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 8007814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007816:	fb03 f303 	mul.w	r3, r3, r3
 800781a:	627b      	str	r3, [r7, #36]	; 0x24
				d1 = sqrt(tem1 + tem2); //得到1,2的距离
 800781c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800781e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007820:	4413      	add	r3, r2
 8007822:	4618      	mov	r0, r3
 8007824:	f7f8 fe12 	bl	800044c <__aeabi_ui2d>
 8007828:	4602      	mov	r2, r0
 800782a:	460b      	mov	r3, r1
 800782c:	ec43 2b10 	vmov	d0, r2, r3
 8007830:	f002 ffa6 	bl	800a780 <sqrt>
 8007834:	ec53 2b10 	vmov	r2, r3, d0
 8007838:	4610      	mov	r0, r2
 800783a:	4619      	mov	r1, r3
 800783c:	f7f9 f930 	bl	8000aa0 <__aeabi_d2uiz>
 8007840:	4603      	mov	r3, r0
 8007842:	847b      	strh	r3, [r7, #34]	; 0x22

				tem1 = abs(pos_temp[2][0] - pos_temp[3][0]); //x3-x4
 8007844:	8a3b      	ldrh	r3, [r7, #16]
 8007846:	461a      	mov	r2, r3
 8007848:	8abb      	ldrh	r3, [r7, #20]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	bfb8      	it	lt
 8007850:	425b      	neglt	r3, r3
 8007852:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[2][1] - pos_temp[3][1]); //y3-y4
 8007854:	8a7b      	ldrh	r3, [r7, #18]
 8007856:	461a      	mov	r2, r3
 8007858:	8afb      	ldrh	r3, [r7, #22]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	2b00      	cmp	r3, #0
 800785e:	bfb8      	it	lt
 8007860:	425b      	neglt	r3, r3
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 8007864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007866:	fb03 f303 	mul.w	r3, r3, r3
 800786a:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	fb03 f303 	mul.w	r3, r3, r3
 8007872:	627b      	str	r3, [r7, #36]	; 0x24
				d2 = sqrt(tem1 + tem2); //得到3,4的距离
 8007874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	4413      	add	r3, r2
 800787a:	4618      	mov	r0, r3
 800787c:	f7f8 fde6 	bl	800044c <__aeabi_ui2d>
 8007880:	4602      	mov	r2, r0
 8007882:	460b      	mov	r3, r1
 8007884:	ec43 2b10 	vmov	d0, r2, r3
 8007888:	f002 ff7a 	bl	800a780 <sqrt>
 800788c:	ec53 2b10 	vmov	r2, r3, d0
 8007890:	4610      	mov	r0, r2
 8007892:	4619      	mov	r1, r3
 8007894:	f7f9 f904 	bl	8000aa0 <__aeabi_d2uiz>
 8007898:	4603      	mov	r3, r0
 800789a:	843b      	strh	r3, [r7, #32]
				fac = (float)d1 / d2;
 800789c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800789e:	ee07 3a90 	vmov	s15, r3
 80078a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80078a6:	8c3b      	ldrh	r3, [r7, #32]
 80078a8:	ee07 3a90 	vmov	s15, r3
 80078ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80078b4:	ee16 0a90 	vmov	r0, s13
 80078b8:	f7f8 fdea 	bl	8000490 <__aeabi_f2d>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
				if (fac < 0.95 || fac > 1.05 || d1 == 0 || d2 == 0) //不合格
 80078c4:	a32c      	add	r3, pc, #176	; (adr r3, 8007978 <TP_Adjust+0x300>)
 80078c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80078ce:	f7f9 f8a9 	bl	8000a24 <__aeabi_dcmplt>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10f      	bne.n	80078f8 <TP_Adjust+0x280>
 80078d8:	a329      	add	r3, pc, #164	; (adr r3, 8007980 <TP_Adjust+0x308>)
 80078da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80078e2:	f7f9 f8bd 	bl	8000a60 <__aeabi_dcmpgt>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d105      	bne.n	80078f8 <TP_Adjust+0x280>
 80078ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d002      	beq.n	80078f8 <TP_Adjust+0x280>
 80078f2:	8c3b      	ldrh	r3, [r7, #32]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d153      	bne.n	80079a0 <TP_Adjust+0x328>
				{
					cnt = 0;
 80078f8:	2300      	movs	r3, #0
 80078fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE);																							 //清除点4
 80078fe:	4b26      	ldr	r3, [pc, #152]	; (8007998 <TP_Adjust+0x320>)
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	3b14      	subs	r3, #20
 8007904:	b298      	uxth	r0, r3
 8007906:	4b24      	ldr	r3, [pc, #144]	; (8007998 <TP_Adjust+0x320>)
 8007908:	885b      	ldrh	r3, [r3, #2]
 800790a:	3b14      	subs	r3, #20
 800790c:	b29b      	uxth	r3, r3
 800790e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007912:	4619      	mov	r1, r3
 8007914:	f7ff fc30 	bl	8007178 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20, 20, RED);																															 //画点1
 8007918:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800791c:	2114      	movs	r1, #20
 800791e:	2014      	movs	r0, #20
 8007920:	f7ff fc2a 	bl	8007178 <TP_Drow_Touch_Point>
					TP_Adj_Info_Show(pos_temp[0][0], pos_temp[0][1], pos_temp[1][0], pos_temp[1][1], pos_temp[2][0], pos_temp[2][1], pos_temp[3][0], pos_temp[3][1], fac * 100); //显示数据
 8007924:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 8007928:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 800792c:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 8007930:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 8007934:	8a3c      	ldrh	r4, [r7, #16]
 8007936:	8a7d      	ldrh	r5, [r7, #18]
 8007938:	8abe      	ldrh	r6, [r7, #20]
 800793a:	8afb      	ldrh	r3, [r7, #22]
 800793c:	607b      	str	r3, [r7, #4]
 800793e:	f04f 0200 	mov.w	r2, #0
 8007942:	4b16      	ldr	r3, [pc, #88]	; (800799c <TP_Adjust+0x324>)
 8007944:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007948:	f7f8 fdfa 	bl	8000540 <__aeabi_dmul>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	4610      	mov	r0, r2
 8007952:	4619      	mov	r1, r3
 8007954:	f7f9 f8a4 	bl	8000aa0 <__aeabi_d2uiz>
 8007958:	4603      	mov	r3, r0
 800795a:	b29b      	uxth	r3, r3
 800795c:	9304      	str	r3, [sp, #16]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	9303      	str	r3, [sp, #12]
 8007962:	9602      	str	r6, [sp, #8]
 8007964:	9501      	str	r5, [sp, #4]
 8007966:	9400      	str	r4, [sp, #0]
 8007968:	465b      	mov	r3, fp
 800796a:	4652      	mov	r2, sl
 800796c:	4649      	mov	r1, r9
 800796e:	4640      	mov	r0, r8
 8007970:	f7ff fd9e 	bl	80074b0 <TP_Adj_Info_Show>
					continue;
 8007974:	e28e      	b.n	8007e94 <TP_Adjust+0x81c>
 8007976:	bf00      	nop
 8007978:	66666666 	.word	0x66666666
 800797c:	3fee6666 	.word	0x3fee6666
 8007980:	cccccccd 	.word	0xcccccccd
 8007984:	3ff0cccc 	.word	0x3ff0cccc
 8007988:	200000d4 	.word	0x200000d4
 800798c:	20000000 	.word	0x20000000
 8007990:	0800a974 	.word	0x0800a974
 8007994:	20000008 	.word	0x20000008
 8007998:	200001ec 	.word	0x200001ec
 800799c:	40590000 	.word	0x40590000
				}
				tem1 = abs(pos_temp[0][0] - pos_temp[2][0]); //x1-x3
 80079a0:	893b      	ldrh	r3, [r7, #8]
 80079a2:	461a      	mov	r2, r3
 80079a4:	8a3b      	ldrh	r3, [r7, #16]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	bfb8      	it	lt
 80079ac:	425b      	neglt	r3, r3
 80079ae:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[0][1] - pos_temp[2][1]); //y1-y3
 80079b0:	897b      	ldrh	r3, [r7, #10]
 80079b2:	461a      	mov	r2, r3
 80079b4:	8a7b      	ldrh	r3, [r7, #18]
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	bfb8      	it	lt
 80079bc:	425b      	neglt	r3, r3
 80079be:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 80079c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c2:	fb03 f303 	mul.w	r3, r3, r3
 80079c6:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 80079c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ca:	fb03 f303 	mul.w	r3, r3, r3
 80079ce:	627b      	str	r3, [r7, #36]	; 0x24
				d1 = sqrt(tem1 + tem2); //得到1,3的距离
 80079d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	4413      	add	r3, r2
 80079d6:	4618      	mov	r0, r3
 80079d8:	f7f8 fd38 	bl	800044c <__aeabi_ui2d>
 80079dc:	4602      	mov	r2, r0
 80079de:	460b      	mov	r3, r1
 80079e0:	ec43 2b10 	vmov	d0, r2, r3
 80079e4:	f002 fecc 	bl	800a780 <sqrt>
 80079e8:	ec53 2b10 	vmov	r2, r3, d0
 80079ec:	4610      	mov	r0, r2
 80079ee:	4619      	mov	r1, r3
 80079f0:	f7f9 f856 	bl	8000aa0 <__aeabi_d2uiz>
 80079f4:	4603      	mov	r3, r0
 80079f6:	847b      	strh	r3, [r7, #34]	; 0x22

				tem1 = abs(pos_temp[1][0] - pos_temp[3][0]); //x2-x4
 80079f8:	89bb      	ldrh	r3, [r7, #12]
 80079fa:	461a      	mov	r2, r3
 80079fc:	8abb      	ldrh	r3, [r7, #20]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	bfb8      	it	lt
 8007a04:	425b      	neglt	r3, r3
 8007a06:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[1][1] - pos_temp[3][1]); //y2-y4
 8007a08:	89fb      	ldrh	r3, [r7, #14]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	8afb      	ldrh	r3, [r7, #22]
 8007a0e:	1ad3      	subs	r3, r2, r3
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bfb8      	it	lt
 8007a14:	425b      	neglt	r3, r3
 8007a16:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1a:	fb03 f303 	mul.w	r3, r3, r3
 8007a1e:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 8007a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a22:	fb03 f303 	mul.w	r3, r3, r3
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
				d2 = sqrt(tem1 + tem2); //得到2,4的距离
 8007a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2c:	4413      	add	r3, r2
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7f8 fd0c 	bl	800044c <__aeabi_ui2d>
 8007a34:	4602      	mov	r2, r0
 8007a36:	460b      	mov	r3, r1
 8007a38:	ec43 2b10 	vmov	d0, r2, r3
 8007a3c:	f002 fea0 	bl	800a780 <sqrt>
 8007a40:	ec53 2b10 	vmov	r2, r3, d0
 8007a44:	4610      	mov	r0, r2
 8007a46:	4619      	mov	r1, r3
 8007a48:	f7f9 f82a 	bl	8000aa0 <__aeabi_d2uiz>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	843b      	strh	r3, [r7, #32]
				fac = (float)d1 / d2;
 8007a50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007a52:	ee07 3a90 	vmov	s15, r3
 8007a56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a5a:	8c3b      	ldrh	r3, [r7, #32]
 8007a5c:	ee07 3a90 	vmov	s15, r3
 8007a60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a64:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007a68:	ee16 0a90 	vmov	r0, s13
 8007a6c:	f7f8 fd10 	bl	8000490 <__aeabi_f2d>
 8007a70:	4602      	mov	r2, r0
 8007a72:	460b      	mov	r3, r1
 8007a74:	e9c7 2306 	strd	r2, r3, [r7, #24]
				if (fac < 0.95 || fac > 1.05) //不合格
 8007a78:	a389      	add	r3, pc, #548	; (adr r3, 8007ca0 <TP_Adjust+0x628>)
 8007a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007a82:	f7f8 ffcf 	bl	8000a24 <__aeabi_dcmplt>
 8007a86:	4603      	mov	r3, r0
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d109      	bne.n	8007aa0 <TP_Adjust+0x428>
 8007a8c:	a386      	add	r3, pc, #536	; (adr r3, 8007ca8 <TP_Adjust+0x630>)
 8007a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007a96:	f7f8 ffe3 	bl	8000a60 <__aeabi_dcmpgt>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d03e      	beq.n	8007b1e <TP_Adjust+0x4a6>
				{
					cnt = 0;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE);																							 //清除点4
 8007aa6:	4b82      	ldr	r3, [pc, #520]	; (8007cb0 <TP_Adjust+0x638>)
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	3b14      	subs	r3, #20
 8007aac:	b298      	uxth	r0, r3
 8007aae:	4b80      	ldr	r3, [pc, #512]	; (8007cb0 <TP_Adjust+0x638>)
 8007ab0:	885b      	ldrh	r3, [r3, #2]
 8007ab2:	3b14      	subs	r3, #20
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007aba:	4619      	mov	r1, r3
 8007abc:	f7ff fb5c 	bl	8007178 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20, 20, RED);																															 //画点1
 8007ac0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8007ac4:	2114      	movs	r1, #20
 8007ac6:	2014      	movs	r0, #20
 8007ac8:	f7ff fb56 	bl	8007178 <TP_Drow_Touch_Point>
					TP_Adj_Info_Show(pos_temp[0][0], pos_temp[0][1], pos_temp[1][0], pos_temp[1][1], pos_temp[2][0], pos_temp[2][1], pos_temp[3][0], pos_temp[3][1], fac * 100); //显示数据
 8007acc:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 8007ad0:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 8007ad4:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 8007ad8:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 8007adc:	8a3c      	ldrh	r4, [r7, #16]
 8007ade:	8a7d      	ldrh	r5, [r7, #18]
 8007ae0:	8abe      	ldrh	r6, [r7, #20]
 8007ae2:	8afb      	ldrh	r3, [r7, #22]
 8007ae4:	607b      	str	r3, [r7, #4]
 8007ae6:	f04f 0200 	mov.w	r2, #0
 8007aea:	4b72      	ldr	r3, [pc, #456]	; (8007cb4 <TP_Adjust+0x63c>)
 8007aec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007af0:	f7f8 fd26 	bl	8000540 <__aeabi_dmul>
 8007af4:	4602      	mov	r2, r0
 8007af6:	460b      	mov	r3, r1
 8007af8:	4610      	mov	r0, r2
 8007afa:	4619      	mov	r1, r3
 8007afc:	f7f8 ffd0 	bl	8000aa0 <__aeabi_d2uiz>
 8007b00:	4603      	mov	r3, r0
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	9304      	str	r3, [sp, #16]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	9303      	str	r3, [sp, #12]
 8007b0a:	9602      	str	r6, [sp, #8]
 8007b0c:	9501      	str	r5, [sp, #4]
 8007b0e:	9400      	str	r4, [sp, #0]
 8007b10:	465b      	mov	r3, fp
 8007b12:	4652      	mov	r2, sl
 8007b14:	4649      	mov	r1, r9
 8007b16:	4640      	mov	r0, r8
 8007b18:	f7ff fcca 	bl	80074b0 <TP_Adj_Info_Show>
					continue;
 8007b1c:	e1ba      	b.n	8007e94 <TP_Adjust+0x81c>
				} //正确了

				//对角线相等
				tem1 = abs(pos_temp[1][0] - pos_temp[2][0]); //x1-x3
 8007b1e:	89bb      	ldrh	r3, [r7, #12]
 8007b20:	461a      	mov	r2, r3
 8007b22:	8a3b      	ldrh	r3, [r7, #16]
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	bfb8      	it	lt
 8007b2a:	425b      	neglt	r3, r3
 8007b2c:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[1][1] - pos_temp[2][1]); //y1-y3
 8007b2e:	89fb      	ldrh	r3, [r7, #14]
 8007b30:	461a      	mov	r2, r3
 8007b32:	8a7b      	ldrh	r3, [r7, #18]
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	bfb8      	it	lt
 8007b3a:	425b      	neglt	r3, r3
 8007b3c:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 8007b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b40:	fb03 f303 	mul.w	r3, r3, r3
 8007b44:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	fb03 f303 	mul.w	r3, r3, r3
 8007b4c:	627b      	str	r3, [r7, #36]	; 0x24
				d1 = sqrt(tem1 + tem2); //得到1,4的距离
 8007b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b52:	4413      	add	r3, r2
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7f8 fc79 	bl	800044c <__aeabi_ui2d>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	460b      	mov	r3, r1
 8007b5e:	ec43 2b10 	vmov	d0, r2, r3
 8007b62:	f002 fe0d 	bl	800a780 <sqrt>
 8007b66:	ec53 2b10 	vmov	r2, r3, d0
 8007b6a:	4610      	mov	r0, r2
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	f7f8 ff97 	bl	8000aa0 <__aeabi_d2uiz>
 8007b72:	4603      	mov	r3, r0
 8007b74:	847b      	strh	r3, [r7, #34]	; 0x22

				tem1 = abs(pos_temp[0][0] - pos_temp[3][0]); //x2-x4
 8007b76:	893b      	ldrh	r3, [r7, #8]
 8007b78:	461a      	mov	r2, r3
 8007b7a:	8abb      	ldrh	r3, [r7, #20]
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	bfb8      	it	lt
 8007b82:	425b      	neglt	r3, r3
 8007b84:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[0][1] - pos_temp[3][1]); //y2-y4
 8007b86:	897b      	ldrh	r3, [r7, #10]
 8007b88:	461a      	mov	r2, r3
 8007b8a:	8afb      	ldrh	r3, [r7, #22]
 8007b8c:	1ad3      	subs	r3, r2, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	bfb8      	it	lt
 8007b92:	425b      	neglt	r3, r3
 8007b94:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 8007b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b98:	fb03 f303 	mul.w	r3, r3, r3
 8007b9c:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 8007b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ba0:	fb03 f303 	mul.w	r3, r3, r3
 8007ba4:	627b      	str	r3, [r7, #36]	; 0x24
				d2 = sqrt(tem1 + tem2); //得到2,3的距离
 8007ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	4413      	add	r3, r2
 8007bac:	4618      	mov	r0, r3
 8007bae:	f7f8 fc4d 	bl	800044c <__aeabi_ui2d>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	ec43 2b10 	vmov	d0, r2, r3
 8007bba:	f002 fde1 	bl	800a780 <sqrt>
 8007bbe:	ec53 2b10 	vmov	r2, r3, d0
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	f7f8 ff6b 	bl	8000aa0 <__aeabi_d2uiz>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	843b      	strh	r3, [r7, #32]
				fac = (float)d1 / d2;
 8007bce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007bd0:	ee07 3a90 	vmov	s15, r3
 8007bd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007bd8:	8c3b      	ldrh	r3, [r7, #32]
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007be2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007be6:	ee16 0a90 	vmov	r0, s13
 8007bea:	f7f8 fc51 	bl	8000490 <__aeabi_f2d>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	e9c7 2306 	strd	r2, r3, [r7, #24]
				if (fac < 0.95 || fac > 1.05) //不合格
 8007bf6:	a32a      	add	r3, pc, #168	; (adr r3, 8007ca0 <TP_Adjust+0x628>)
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c00:	f7f8 ff10 	bl	8000a24 <__aeabi_dcmplt>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d109      	bne.n	8007c1e <TP_Adjust+0x5a6>
 8007c0a:	a327      	add	r3, pc, #156	; (adr r3, 8007ca8 <TP_Adjust+0x630>)
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c14:	f7f8 ff24 	bl	8000a60 <__aeabi_dcmpgt>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d04c      	beq.n	8007cb8 <TP_Adjust+0x640>
				{
					cnt = 0;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE);																							 //清除点4
 8007c24:	4b22      	ldr	r3, [pc, #136]	; (8007cb0 <TP_Adjust+0x638>)
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	3b14      	subs	r3, #20
 8007c2a:	b298      	uxth	r0, r3
 8007c2c:	4b20      	ldr	r3, [pc, #128]	; (8007cb0 <TP_Adjust+0x638>)
 8007c2e:	885b      	ldrh	r3, [r3, #2]
 8007c30:	3b14      	subs	r3, #20
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c38:	4619      	mov	r1, r3
 8007c3a:	f7ff fa9d 	bl	8007178 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20, 20, RED);																															 //画点1
 8007c3e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8007c42:	2114      	movs	r1, #20
 8007c44:	2014      	movs	r0, #20
 8007c46:	f7ff fa97 	bl	8007178 <TP_Drow_Touch_Point>
					TP_Adj_Info_Show(pos_temp[0][0], pos_temp[0][1], pos_temp[1][0], pos_temp[1][1], pos_temp[2][0], pos_temp[2][1], pos_temp[3][0], pos_temp[3][1], fac * 100); //显示数据
 8007c4a:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 8007c4e:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 8007c52:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 8007c56:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 8007c5a:	8a3c      	ldrh	r4, [r7, #16]
 8007c5c:	8a7d      	ldrh	r5, [r7, #18]
 8007c5e:	8abe      	ldrh	r6, [r7, #20]
 8007c60:	8afb      	ldrh	r3, [r7, #22]
 8007c62:	607b      	str	r3, [r7, #4]
 8007c64:	f04f 0200 	mov.w	r2, #0
 8007c68:	4b12      	ldr	r3, [pc, #72]	; (8007cb4 <TP_Adjust+0x63c>)
 8007c6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007c6e:	f7f8 fc67 	bl	8000540 <__aeabi_dmul>
 8007c72:	4602      	mov	r2, r0
 8007c74:	460b      	mov	r3, r1
 8007c76:	4610      	mov	r0, r2
 8007c78:	4619      	mov	r1, r3
 8007c7a:	f7f8 ff11 	bl	8000aa0 <__aeabi_d2uiz>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	9304      	str	r3, [sp, #16]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	9303      	str	r3, [sp, #12]
 8007c88:	9602      	str	r6, [sp, #8]
 8007c8a:	9501      	str	r5, [sp, #4]
 8007c8c:	9400      	str	r4, [sp, #0]
 8007c8e:	465b      	mov	r3, fp
 8007c90:	4652      	mov	r2, sl
 8007c92:	4649      	mov	r1, r9
 8007c94:	4640      	mov	r0, r8
 8007c96:	f7ff fc0b 	bl	80074b0 <TP_Adj_Info_Show>
					continue;
 8007c9a:	e0fb      	b.n	8007e94 <TP_Adjust+0x81c>
 8007c9c:	f3af 8000 	nop.w
 8007ca0:	66666666 	.word	0x66666666
 8007ca4:	3fee6666 	.word	0x3fee6666
 8007ca8:	cccccccd 	.word	0xcccccccd
 8007cac:	3ff0cccc 	.word	0x3ff0cccc
 8007cb0:	200001ec 	.word	0x200001ec
 8007cb4:	40590000 	.word	0x40590000
				} //正确了
				//计算结果
				tp_dev.xfac = (float)(lcddev.width - 40) / (pos_temp[1][0] - pos_temp[0][0]);		//得到xfac
 8007cb8:	4b79      	ldr	r3, [pc, #484]	; (8007ea0 <TP_Adjust+0x828>)
 8007cba:	881b      	ldrh	r3, [r3, #0]
 8007cbc:	3b28      	subs	r3, #40	; 0x28
 8007cbe:	ee07 3a90 	vmov	s15, r3
 8007cc2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007cc6:	89bb      	ldrh	r3, [r7, #12]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	893b      	ldrh	r3, [r7, #8]
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	ee07 3a90 	vmov	s15, r3
 8007cd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cda:	4b72      	ldr	r3, [pc, #456]	; (8007ea4 <TP_Adjust+0x82c>)
 8007cdc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				tp_dev.xoff = (lcddev.width - tp_dev.xfac * (pos_temp[1][0] + pos_temp[0][0])) / 2; //得到xoff
 8007ce0:	4b6f      	ldr	r3, [pc, #444]	; (8007ea0 <TP_Adjust+0x828>)
 8007ce2:	881b      	ldrh	r3, [r3, #0]
 8007ce4:	ee07 3a90 	vmov	s15, r3
 8007ce8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007cec:	4b6d      	ldr	r3, [pc, #436]	; (8007ea4 <TP_Adjust+0x82c>)
 8007cee:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8007cf2:	89bb      	ldrh	r3, [r7, #12]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	893b      	ldrh	r3, [r7, #8]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	ee07 3a90 	vmov	s15, r3
 8007cfe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d0a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007d0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007d12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d16:	ee17 3a90 	vmov	r3, s15
 8007d1a:	b21a      	sxth	r2, r3
 8007d1c:	4b61      	ldr	r3, [pc, #388]	; (8007ea4 <TP_Adjust+0x82c>)
 8007d1e:	859a      	strh	r2, [r3, #44]	; 0x2c

				tp_dev.yfac = (float)(lcddev.height - 40) / (pos_temp[2][1] - pos_temp[0][1]);		 //得到yfac
 8007d20:	4b5f      	ldr	r3, [pc, #380]	; (8007ea0 <TP_Adjust+0x828>)
 8007d22:	885b      	ldrh	r3, [r3, #2]
 8007d24:	3b28      	subs	r3, #40	; 0x28
 8007d26:	ee07 3a90 	vmov	s15, r3
 8007d2a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007d2e:	8a7b      	ldrh	r3, [r7, #18]
 8007d30:	461a      	mov	r2, r3
 8007d32:	897b      	ldrh	r3, [r7, #10]
 8007d34:	1ad3      	subs	r3, r2, r3
 8007d36:	ee07 3a90 	vmov	s15, r3
 8007d3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d42:	4b58      	ldr	r3, [pc, #352]	; (8007ea4 <TP_Adjust+0x82c>)
 8007d44:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				tp_dev.yoff = (lcddev.height - tp_dev.yfac * (pos_temp[2][1] + pos_temp[0][1])) / 2; //得到yoff
 8007d48:	4b55      	ldr	r3, [pc, #340]	; (8007ea0 <TP_Adjust+0x828>)
 8007d4a:	885b      	ldrh	r3, [r3, #2]
 8007d4c:	ee07 3a90 	vmov	s15, r3
 8007d50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007d54:	4b53      	ldr	r3, [pc, #332]	; (8007ea4 <TP_Adjust+0x82c>)
 8007d56:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8007d5a:	8a7b      	ldrh	r3, [r7, #18]
 8007d5c:	461a      	mov	r2, r3
 8007d5e:	897b      	ldrh	r3, [r7, #10]
 8007d60:	4413      	add	r3, r2
 8007d62:	ee07 3a90 	vmov	s15, r3
 8007d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007d6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007d72:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007d76:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007d7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d7e:	ee17 3a90 	vmov	r3, s15
 8007d82:	b21a      	sxth	r2, r3
 8007d84:	4b47      	ldr	r3, [pc, #284]	; (8007ea4 <TP_Adjust+0x82c>)
 8007d86:	85da      	strh	r2, [r3, #46]	; 0x2e
				if (abs(tp_dev.xfac) > 2 || abs(tp_dev.yfac) > 2)									 //触屏和预设的相反了.
 8007d88:	4b46      	ldr	r3, [pc, #280]	; (8007ea4 <TP_Adjust+0x82c>)
 8007d8a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8007d8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d92:	ee17 3a90 	vmov	r3, s15
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	bfb8      	it	lt
 8007d9a:	425b      	neglt	r3, r3
 8007d9c:	2b02      	cmp	r3, #2
 8007d9e:	dc0b      	bgt.n	8007db8 <TP_Adjust+0x740>
 8007da0:	4b40      	ldr	r3, [pc, #256]	; (8007ea4 <TP_Adjust+0x82c>)
 8007da2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007da6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007daa:	ee17 3a90 	vmov	r3, s15
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	bfb8      	it	lt
 8007db2:	425b      	neglt	r3, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	dd40      	ble.n	8007e3a <TP_Adjust+0x7c2>
				{
					cnt = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE); //清除点4
 8007dbe:	4b38      	ldr	r3, [pc, #224]	; (8007ea0 <TP_Adjust+0x828>)
 8007dc0:	881b      	ldrh	r3, [r3, #0]
 8007dc2:	3b14      	subs	r3, #20
 8007dc4:	b298      	uxth	r0, r3
 8007dc6:	4b36      	ldr	r3, [pc, #216]	; (8007ea0 <TP_Adjust+0x828>)
 8007dc8:	885b      	ldrh	r3, [r3, #2]
 8007dca:	3b14      	subs	r3, #20
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dd2:	4619      	mov	r1, r3
 8007dd4:	f7ff f9d0 	bl	8007178 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20, 20, RED);								   //画点1
 8007dd8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8007ddc:	2114      	movs	r1, #20
 8007dde:	2014      	movs	r0, #20
 8007de0:	f7ff f9ca 	bl	8007178 <TP_Drow_Touch_Point>
					LCD_ShowString(40, 26, lcddev.width, lcddev.height, 16, "TP Need readjust!");
 8007de4:	4b2e      	ldr	r3, [pc, #184]	; (8007ea0 <TP_Adjust+0x828>)
 8007de6:	881a      	ldrh	r2, [r3, #0]
 8007de8:	4b2d      	ldr	r3, [pc, #180]	; (8007ea0 <TP_Adjust+0x828>)
 8007dea:	885b      	ldrh	r3, [r3, #2]
 8007dec:	492e      	ldr	r1, [pc, #184]	; (8007ea8 <TP_Adjust+0x830>)
 8007dee:	9101      	str	r1, [sp, #4]
 8007df0:	2110      	movs	r1, #16
 8007df2:	9100      	str	r1, [sp, #0]
 8007df4:	211a      	movs	r1, #26
 8007df6:	2028      	movs	r0, #40	; 0x28
 8007df8:	f7fe fa18 	bl	800622c <LCD_ShowString>
					tp_dev.touchtype = !tp_dev.touchtype; //修改触屏类型.
 8007dfc:	4b29      	ldr	r3, [pc, #164]	; (8007ea4 <TP_Adjust+0x82c>)
 8007dfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	bf0c      	ite	eq
 8007e06:	2301      	moveq	r3, #1
 8007e08:	2300      	movne	r3, #0
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	4b25      	ldr	r3, [pc, #148]	; (8007ea4 <TP_Adjust+0x82c>)
 8007e10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					if (tp_dev.touchtype)				  //X,Y方向与屏幕相反
 8007e14:	4b23      	ldr	r3, [pc, #140]	; (8007ea4 <TP_Adjust+0x82c>)
 8007e16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d006      	beq.n	8007e2c <TP_Adjust+0x7b4>
					{
						CMD_RDX = 0X90;
 8007e1e:	4b23      	ldr	r3, [pc, #140]	; (8007eac <TP_Adjust+0x834>)
 8007e20:	2290      	movs	r2, #144	; 0x90
 8007e22:	701a      	strb	r2, [r3, #0]
						CMD_RDY = 0XD0;
 8007e24:	4b22      	ldr	r3, [pc, #136]	; (8007eb0 <TP_Adjust+0x838>)
 8007e26:	22d0      	movs	r2, #208	; 0xd0
 8007e28:	701a      	strb	r2, [r3, #0]
					else //X,Y方向与屏幕相同
					{
						CMD_RDX = 0XD0;
						CMD_RDY = 0X90;
					}
					continue;
 8007e2a:	e033      	b.n	8007e94 <TP_Adjust+0x81c>
						CMD_RDX = 0XD0;
 8007e2c:	4b1f      	ldr	r3, [pc, #124]	; (8007eac <TP_Adjust+0x834>)
 8007e2e:	22d0      	movs	r2, #208	; 0xd0
 8007e30:	701a      	strb	r2, [r3, #0]
						CMD_RDY = 0X90;
 8007e32:	4b1f      	ldr	r3, [pc, #124]	; (8007eb0 <TP_Adjust+0x838>)
 8007e34:	2290      	movs	r2, #144	; 0x90
 8007e36:	701a      	strb	r2, [r3, #0]
					continue;
 8007e38:	e02c      	b.n	8007e94 <TP_Adjust+0x81c>
				}
				POINT_COLOR = BLUE;
 8007e3a:	4b1e      	ldr	r3, [pc, #120]	; (8007eb4 <TP_Adjust+0x83c>)
 8007e3c:	221f      	movs	r2, #31
 8007e3e:	801a      	strh	r2, [r3, #0]
				LCD_Clear(WHITE);																	 //清屏
 8007e40:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007e44:	f7fd fe06 	bl	8005a54 <LCD_Clear>
				LCD_ShowString(35, 110, lcddev.width, lcddev.height, 16, "Touch Screen Adjust OK!"); //校正完成
 8007e48:	4b15      	ldr	r3, [pc, #84]	; (8007ea0 <TP_Adjust+0x828>)
 8007e4a:	881a      	ldrh	r2, [r3, #0]
 8007e4c:	4b14      	ldr	r3, [pc, #80]	; (8007ea0 <TP_Adjust+0x828>)
 8007e4e:	885b      	ldrh	r3, [r3, #2]
 8007e50:	4919      	ldr	r1, [pc, #100]	; (8007eb8 <TP_Adjust+0x840>)
 8007e52:	9101      	str	r1, [sp, #4]
 8007e54:	2110      	movs	r1, #16
 8007e56:	9100      	str	r1, [sp, #0]
 8007e58:	216e      	movs	r1, #110	; 0x6e
 8007e5a:	2023      	movs	r0, #35	; 0x23
 8007e5c:	f7fe f9e6 	bl	800622c <LCD_ShowString>
				delay_ms(1000);
 8007e60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007e64:	f7f9 f98c 	bl	8001180 <delay_ms>
				TP_Save_Adjdata();
 8007e68:	f7ff fa6c 	bl	8007344 <TP_Save_Adjdata>
				LCD_Clear(WHITE); //清屏
 8007e6c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007e70:	f7fd fdf0 	bl	8005a54 <LCD_Clear>
 8007e74:	e00f      	b.n	8007e96 <TP_Adjust+0x81e>
				return;			  //校正完成
			}
		}
 8007e76:	bf00      	nop
		delay_ms(10);
 8007e78:	200a      	movs	r0, #10
 8007e7a:	f7f9 f981 	bl	8001180 <delay_ms>
		outtime++;
 8007e7e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007e80:	3301      	adds	r3, #1
 8007e82:	85bb      	strh	r3, [r7, #44]	; 0x2c
		if (outtime > 1000)
 8007e84:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007e86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e8a:	f67f ac2f 	bls.w	80076ec <TP_Adjust+0x74>
		{
			TP_Get_Adjdata();
 8007e8e:	f7ff faa7 	bl	80073e0 <TP_Get_Adjdata>
			break;
 8007e92:	e000      	b.n	8007e96 <TP_Adjust+0x81e>
		tp_dev.scan(1);							 //扫描物理坐标
 8007e94:	e42a      	b.n	80076ec <TP_Adjust+0x74>
		}
	}
}
 8007e96:	3734      	adds	r7, #52	; 0x34
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e9e:	bf00      	nop
 8007ea0:	200001ec 	.word	0x200001ec
 8007ea4:	20000008 	.word	0x20000008
 8007ea8:	0800aa18 	.word	0x0800aa18
 8007eac:	2000003c 	.word	0x2000003c
 8007eb0:	2000003d 	.word	0x2000003d
 8007eb4:	200000d4 	.word	0x200000d4
 8007eb8:	0800aa2c 	.word	0x0800aa2c

08007ebc <TP_Init>:
//触摸屏初始化
//返回值:0,没有进行校准
//       1,进行过校准
u8 TP_Init(void)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	af00      	add	r7, sp, #0

	// GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;	  //PF11设置推挽输出
	// GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; //输出模式
	// GPIO_Init(GPIOF, &GPIO_InitStructure);		  //初始化

	TP_Read_XY(&tp_dev.x[0], &tp_dev.y[0]); //第一次读取初始化
 8007ec0:	490c      	ldr	r1, [pc, #48]	; (8007ef4 <TP_Init+0x38>)
 8007ec2:	480d      	ldr	r0, [pc, #52]	; (8007ef8 <TP_Init+0x3c>)
 8007ec4:	f7ff f8d4 	bl	8007070 <TP_Read_XY>
	AT24CXX_Init();							//初始化24CXX
 8007ec8:	f7f8 ff86 	bl	8000dd8 <AT24CXX_Init>
	if (TP_Get_Adjdata())
 8007ecc:	f7ff fa88 	bl	80073e0 <TP_Get_Adjdata>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d001      	beq.n	8007eda <TP_Init+0x1e>
		return 0; //已经校准
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e00a      	b.n	8007ef0 <TP_Init+0x34>
	else		  //未校准?
	{
		LCD_Clear(WHITE); //清屏
 8007eda:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007ede:	f7fd fdb9 	bl	8005a54 <LCD_Clear>
		TP_Adjust();	  //屏幕校准
 8007ee2:	f7ff fbc9 	bl	8007678 <TP_Adjust>
		TP_Save_Adjdata();
 8007ee6:	f7ff fa2d 	bl	8007344 <TP_Save_Adjdata>
	}
	TP_Get_Adjdata();
 8007eea:	f7ff fa79 	bl	80073e0 <TP_Get_Adjdata>
	// }
	return 1;
 8007eee:	2301      	movs	r3, #1
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	bd80      	pop	{r7, pc}
 8007ef4:	2000001e 	.word	0x2000001e
 8007ef8:	20000014 	.word	0x20000014

08007efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007f34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007f00:	480d      	ldr	r0, [pc, #52]	; (8007f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8007f02:	490e      	ldr	r1, [pc, #56]	; (8007f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8007f04:	4a0e      	ldr	r2, [pc, #56]	; (8007f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8007f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007f08:	e002      	b.n	8007f10 <LoopCopyDataInit>

08007f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007f0e:	3304      	adds	r3, #4

08007f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007f14:	d3f9      	bcc.n	8007f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007f16:	4a0b      	ldr	r2, [pc, #44]	; (8007f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8007f18:	4c0b      	ldr	r4, [pc, #44]	; (8007f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8007f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007f1c:	e001      	b.n	8007f22 <LoopFillZerobss>

08007f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007f20:	3204      	adds	r2, #4

08007f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007f24:	d3fb      	bcc.n	8007f1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007f26:	f7fe fec7 	bl	8006cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007f2a:	f002 fbfd 	bl	800a728 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007f2e:	f7fe f9cb 	bl	80062c8 <main>
  bx  lr    
 8007f32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8007f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007f3c:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 8007f40:	0800c22c 	.word	0x0800c22c
  ldr r2, =_sbss
 8007f44:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 8007f48:	20000290 	.word	0x20000290

08007f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007f4c:	e7fe      	b.n	8007f4c <ADC_IRQHandler>
	...

08007f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007f54:	4b0e      	ldr	r3, [pc, #56]	; (8007f90 <HAL_Init+0x40>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a0d      	ldr	r2, [pc, #52]	; (8007f90 <HAL_Init+0x40>)
 8007f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007f60:	4b0b      	ldr	r3, [pc, #44]	; (8007f90 <HAL_Init+0x40>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a0a      	ldr	r2, [pc, #40]	; (8007f90 <HAL_Init+0x40>)
 8007f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007f6c:	4b08      	ldr	r3, [pc, #32]	; (8007f90 <HAL_Init+0x40>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a07      	ldr	r2, [pc, #28]	; (8007f90 <HAL_Init+0x40>)
 8007f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007f78:	2003      	movs	r0, #3
 8007f7a:	f000 fd61 	bl	8008a40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007f7e:	2000      	movs	r0, #0
 8007f80:	f000 f808 	bl	8007f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007f84:	f7fe fe3c 	bl	8006c00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	40023c00 	.word	0x40023c00

08007f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007f9c:	4b12      	ldr	r3, [pc, #72]	; (8007fe8 <HAL_InitTick+0x54>)
 8007f9e:	681a      	ldr	r2, [r3, #0]
 8007fa0:	4b12      	ldr	r3, [pc, #72]	; (8007fec <HAL_InitTick+0x58>)
 8007fa2:	781b      	ldrb	r3, [r3, #0]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8007fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fd79 	bl	8008aaa <HAL_SYSTICK_Config>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e00e      	b.n	8007fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b0f      	cmp	r3, #15
 8007fc6:	d80a      	bhi.n	8007fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007fc8:	2200      	movs	r2, #0
 8007fca:	6879      	ldr	r1, [r7, #4]
 8007fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd0:	f000 fd41 	bl	8008a56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007fd4:	4a06      	ldr	r2, [pc, #24]	; (8007ff0 <HAL_InitTick+0x5c>)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	e000      	b.n	8007fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007fde:	2301      	movs	r3, #1
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	20000004 	.word	0x20000004
 8007fec:	20000044 	.word	0x20000044
 8007ff0:	20000040 	.word	0x20000040

08007ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007ff8:	4b06      	ldr	r3, [pc, #24]	; (8008014 <HAL_IncTick+0x20>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	4b06      	ldr	r3, [pc, #24]	; (8008018 <HAL_IncTick+0x24>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4413      	add	r3, r2
 8008004:	4a04      	ldr	r2, [pc, #16]	; (8008018 <HAL_IncTick+0x24>)
 8008006:	6013      	str	r3, [r2, #0]
}
 8008008:	bf00      	nop
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	20000044 	.word	0x20000044
 8008018:	2000028c 	.word	0x2000028c

0800801c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800801c:	b480      	push	{r7}
 800801e:	af00      	add	r7, sp, #0
  return uwTick;
 8008020:	4b03      	ldr	r3, [pc, #12]	; (8008030 <HAL_GetTick+0x14>)
 8008022:	681b      	ldr	r3, [r3, #0]
}
 8008024:	4618      	mov	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	2000028c 	.word	0x2000028c

08008034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800803c:	f7ff ffee 	bl	800801c <HAL_GetTick>
 8008040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800804c:	d005      	beq.n	800805a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800804e:	4b0a      	ldr	r3, [pc, #40]	; (8008078 <HAL_Delay+0x44>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	461a      	mov	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	4413      	add	r3, r2
 8008058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800805a:	bf00      	nop
 800805c:	f7ff ffde 	bl	800801c <HAL_GetTick>
 8008060:	4602      	mov	r2, r0
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	1ad3      	subs	r3, r2, r3
 8008066:	68fa      	ldr	r2, [r7, #12]
 8008068:	429a      	cmp	r2, r3
 800806a:	d8f7      	bhi.n	800805c <HAL_Delay+0x28>
  {
  }
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	20000044 	.word	0x20000044

0800807c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008084:	2300      	movs	r3, #0
 8008086:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e033      	b.n	80080fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	2b00      	cmp	r3, #0
 8008098:	d109      	bne.n	80080ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f7f8 ffa6 	bl	8000fec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b2:	f003 0310 	and.w	r3, r3, #16
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d118      	bne.n	80080ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80080c2:	f023 0302 	bic.w	r3, r3, #2
 80080c6:	f043 0202 	orr.w	r2, r3, #2
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fa68 	bl	80085a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080de:	f023 0303 	bic.w	r3, r3, #3
 80080e2:	f043 0201 	orr.w	r2, r3, #1
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	641a      	str	r2, [r3, #64]	; 0x40
 80080ea:	e001      	b.n	80080f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2200      	movs	r2, #0
 80080f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
	...

08008104 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008110:	2300      	movs	r3, #0
 8008112:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800811a:	2b01      	cmp	r3, #1
 800811c:	d101      	bne.n	8008122 <HAL_ADC_Start_DMA+0x1e>
 800811e:	2302      	movs	r3, #2
 8008120:	e0e9      	b.n	80082f6 <HAL_ADC_Start_DMA+0x1f2>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	689b      	ldr	r3, [r3, #8]
 8008130:	f003 0301 	and.w	r3, r3, #1
 8008134:	2b01      	cmp	r3, #1
 8008136:	d018      	beq.n	800816a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689a      	ldr	r2, [r3, #8]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f042 0201 	orr.w	r2, r2, #1
 8008146:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008148:	4b6d      	ldr	r3, [pc, #436]	; (8008300 <HAL_ADC_Start_DMA+0x1fc>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a6d      	ldr	r2, [pc, #436]	; (8008304 <HAL_ADC_Start_DMA+0x200>)
 800814e:	fba2 2303 	umull	r2, r3, r2, r3
 8008152:	0c9a      	lsrs	r2, r3, #18
 8008154:	4613      	mov	r3, r2
 8008156:	005b      	lsls	r3, r3, #1
 8008158:	4413      	add	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800815c:	e002      	b.n	8008164 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	3b01      	subs	r3, #1
 8008162:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1f9      	bne.n	800815e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008178:	d107      	bne.n	800818a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	689a      	ldr	r2, [r3, #8]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008188:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f003 0301 	and.w	r3, r3, #1
 8008194:	2b01      	cmp	r3, #1
 8008196:	f040 80a1 	bne.w	80082dc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80081a2:	f023 0301 	bic.w	r3, r3, #1
 80081a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d007      	beq.n	80081cc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80081c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80081d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d8:	d106      	bne.n	80081e8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081de:	f023 0206 	bic.w	r2, r3, #6
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	645a      	str	r2, [r3, #68]	; 0x44
 80081e6:	e002      	b.n	80081ee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	2200      	movs	r2, #0
 80081f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80081f6:	4b44      	ldr	r3, [pc, #272]	; (8008308 <HAL_ADC_Start_DMA+0x204>)
 80081f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fe:	4a43      	ldr	r2, [pc, #268]	; (800830c <HAL_ADC_Start_DMA+0x208>)
 8008200:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008206:	4a42      	ldr	r2, [pc, #264]	; (8008310 <HAL_ADC_Start_DMA+0x20c>)
 8008208:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820e:	4a41      	ldr	r2, [pc, #260]	; (8008314 <HAL_ADC_Start_DMA+0x210>)
 8008210:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800821a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800822a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	689a      	ldr	r2, [r3, #8]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800823a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	334c      	adds	r3, #76	; 0x4c
 8008246:	4619      	mov	r1, r3
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f000 fdc8 	bl	8008de0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	f003 031f 	and.w	r3, r3, #31
 8008258:	2b00      	cmp	r3, #0
 800825a:	d12a      	bne.n	80082b2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a2d      	ldr	r2, [pc, #180]	; (8008318 <HAL_ADC_Start_DMA+0x214>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d015      	beq.n	8008292 <HAL_ADC_Start_DMA+0x18e>
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a2c      	ldr	r2, [pc, #176]	; (800831c <HAL_ADC_Start_DMA+0x218>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d105      	bne.n	800827c <HAL_ADC_Start_DMA+0x178>
 8008270:	4b25      	ldr	r3, [pc, #148]	; (8008308 <HAL_ADC_Start_DMA+0x204>)
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f003 031f 	and.w	r3, r3, #31
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00a      	beq.n	8008292 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a27      	ldr	r2, [pc, #156]	; (8008320 <HAL_ADC_Start_DMA+0x21c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d136      	bne.n	80082f4 <HAL_ADC_Start_DMA+0x1f0>
 8008286:	4b20      	ldr	r3, [pc, #128]	; (8008308 <HAL_ADC_Start_DMA+0x204>)
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f003 0310 	and.w	r3, r3, #16
 800828e:	2b00      	cmp	r3, #0
 8008290:	d130      	bne.n	80082f4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	689b      	ldr	r3, [r3, #8]
 8008298:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d129      	bne.n	80082f4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	689a      	ldr	r2, [r3, #8]
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80082ae:	609a      	str	r2, [r3, #8]
 80082b0:	e020      	b.n	80082f4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4a18      	ldr	r2, [pc, #96]	; (8008318 <HAL_ADC_Start_DMA+0x214>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d11b      	bne.n	80082f4 <HAL_ADC_Start_DMA+0x1f0>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	689b      	ldr	r3, [r3, #8]
 80082c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d114      	bne.n	80082f4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	689a      	ldr	r2, [r3, #8]
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80082d8:	609a      	str	r2, [r3, #8]
 80082da:	e00b      	b.n	80082f4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e0:	f043 0210 	orr.w	r2, r3, #16
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ec:	f043 0201 	orr.w	r2, r3, #1
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3718      	adds	r7, #24
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	bf00      	nop
 8008300:	20000004 	.word	0x20000004
 8008304:	431bde83 	.word	0x431bde83
 8008308:	40012300 	.word	0x40012300
 800830c:	0800879d 	.word	0x0800879d
 8008310:	08008857 	.word	0x08008857
 8008314:	08008873 	.word	0x08008873
 8008318:	40012000 	.word	0x40012000
 800831c:	40012100 	.word	0x40012100
 8008320:	40012200 	.word	0x40012200

08008324 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008354:	bf00      	nop
 8008356:	370c      	adds	r7, #12
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr

08008360 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008360:	b480      	push	{r7}
 8008362:	b085      	sub	sp, #20
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800836a:	2300      	movs	r3, #0
 800836c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008374:	2b01      	cmp	r3, #1
 8008376:	d101      	bne.n	800837c <HAL_ADC_ConfigChannel+0x1c>
 8008378:	2302      	movs	r3, #2
 800837a:	e105      	b.n	8008588 <HAL_ADC_ConfigChannel+0x228>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b09      	cmp	r3, #9
 800838a:	d925      	bls.n	80083d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	68d9      	ldr	r1, [r3, #12]
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	b29b      	uxth	r3, r3
 8008398:	461a      	mov	r2, r3
 800839a:	4613      	mov	r3, r2
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	4413      	add	r3, r2
 80083a0:	3b1e      	subs	r3, #30
 80083a2:	2207      	movs	r2, #7
 80083a4:	fa02 f303 	lsl.w	r3, r2, r3
 80083a8:	43da      	mvns	r2, r3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	400a      	ands	r2, r1
 80083b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68d9      	ldr	r1, [r3, #12]
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	689a      	ldr	r2, [r3, #8]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	4618      	mov	r0, r3
 80083c4:	4603      	mov	r3, r0
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	4403      	add	r3, r0
 80083ca:	3b1e      	subs	r3, #30
 80083cc:	409a      	lsls	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	60da      	str	r2, [r3, #12]
 80083d6:	e022      	b.n	800841e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6919      	ldr	r1, [r3, #16]
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	b29b      	uxth	r3, r3
 80083e4:	461a      	mov	r2, r3
 80083e6:	4613      	mov	r3, r2
 80083e8:	005b      	lsls	r3, r3, #1
 80083ea:	4413      	add	r3, r2
 80083ec:	2207      	movs	r2, #7
 80083ee:	fa02 f303 	lsl.w	r3, r2, r3
 80083f2:	43da      	mvns	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	400a      	ands	r2, r1
 80083fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	6919      	ldr	r1, [r3, #16]
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	689a      	ldr	r2, [r3, #8]
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	b29b      	uxth	r3, r3
 800840c:	4618      	mov	r0, r3
 800840e:	4603      	mov	r3, r0
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	4403      	add	r3, r0
 8008414:	409a      	lsls	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	430a      	orrs	r2, r1
 800841c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	2b06      	cmp	r3, #6
 8008424:	d824      	bhi.n	8008470 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	685a      	ldr	r2, [r3, #4]
 8008430:	4613      	mov	r3, r2
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	3b05      	subs	r3, #5
 8008438:	221f      	movs	r2, #31
 800843a:	fa02 f303 	lsl.w	r3, r2, r3
 800843e:	43da      	mvns	r2, r3
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	400a      	ands	r2, r1
 8008446:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	b29b      	uxth	r3, r3
 8008454:	4618      	mov	r0, r3
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	4613      	mov	r3, r2
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	4413      	add	r3, r2
 8008460:	3b05      	subs	r3, #5
 8008462:	fa00 f203 	lsl.w	r2, r0, r3
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	430a      	orrs	r2, r1
 800846c:	635a      	str	r2, [r3, #52]	; 0x34
 800846e:	e04c      	b.n	800850a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	2b0c      	cmp	r3, #12
 8008476:	d824      	bhi.n	80084c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	4613      	mov	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4413      	add	r3, r2
 8008488:	3b23      	subs	r3, #35	; 0x23
 800848a:	221f      	movs	r2, #31
 800848c:	fa02 f303 	lsl.w	r3, r2, r3
 8008490:	43da      	mvns	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	400a      	ands	r2, r1
 8008498:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	4618      	mov	r0, r3
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	4613      	mov	r3, r2
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	4413      	add	r3, r2
 80084b2:	3b23      	subs	r3, #35	; 0x23
 80084b4:	fa00 f203 	lsl.w	r2, r0, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	430a      	orrs	r2, r1
 80084be:	631a      	str	r2, [r3, #48]	; 0x30
 80084c0:	e023      	b.n	800850a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	685a      	ldr	r2, [r3, #4]
 80084cc:	4613      	mov	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	3b41      	subs	r3, #65	; 0x41
 80084d4:	221f      	movs	r2, #31
 80084d6:	fa02 f303 	lsl.w	r3, r2, r3
 80084da:	43da      	mvns	r2, r3
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	400a      	ands	r2, r1
 80084e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	4618      	mov	r0, r3
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	685a      	ldr	r2, [r3, #4]
 80084f6:	4613      	mov	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	4413      	add	r3, r2
 80084fc:	3b41      	subs	r3, #65	; 0x41
 80084fe:	fa00 f203 	lsl.w	r2, r0, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	430a      	orrs	r2, r1
 8008508:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800850a:	4b22      	ldr	r3, [pc, #136]	; (8008594 <HAL_ADC_ConfigChannel+0x234>)
 800850c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a21      	ldr	r2, [pc, #132]	; (8008598 <HAL_ADC_ConfigChannel+0x238>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d109      	bne.n	800852c <HAL_ADC_ConfigChannel+0x1cc>
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	2b12      	cmp	r3, #18
 800851e:	d105      	bne.n	800852c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a19      	ldr	r2, [pc, #100]	; (8008598 <HAL_ADC_ConfigChannel+0x238>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d123      	bne.n	800857e <HAL_ADC_ConfigChannel+0x21e>
 8008536:	683b      	ldr	r3, [r7, #0]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	2b10      	cmp	r3, #16
 800853c:	d003      	beq.n	8008546 <HAL_ADC_ConfigChannel+0x1e6>
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b11      	cmp	r3, #17
 8008544:	d11b      	bne.n	800857e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b10      	cmp	r3, #16
 8008558:	d111      	bne.n	800857e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800855a:	4b10      	ldr	r3, [pc, #64]	; (800859c <HAL_ADC_ConfigChannel+0x23c>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a10      	ldr	r2, [pc, #64]	; (80085a0 <HAL_ADC_ConfigChannel+0x240>)
 8008560:	fba2 2303 	umull	r2, r3, r2, r3
 8008564:	0c9a      	lsrs	r2, r3, #18
 8008566:	4613      	mov	r3, r2
 8008568:	009b      	lsls	r3, r3, #2
 800856a:	4413      	add	r3, r2
 800856c:	005b      	lsls	r3, r3, #1
 800856e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008570:	e002      	b.n	8008578 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	3b01      	subs	r3, #1
 8008576:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1f9      	bne.n	8008572 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	40012300 	.word	0x40012300
 8008598:	40012000 	.word	0x40012000
 800859c:	20000004 	.word	0x20000004
 80085a0:	431bde83 	.word	0x431bde83

080085a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80085ac:	4b79      	ldr	r3, [pc, #484]	; (8008794 <ADC_Init+0x1f0>)
 80085ae:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	685a      	ldr	r2, [r3, #4]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	431a      	orrs	r2, r3
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80085d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	6859      	ldr	r1, [r3, #4]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	691b      	ldr	r3, [r3, #16]
 80085e4:	021a      	lsls	r2, r3, #8
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	685a      	ldr	r2, [r3, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80085fc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	6859      	ldr	r1, [r3, #4]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	689a      	ldr	r2, [r3, #8]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	430a      	orrs	r2, r1
 800860e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689a      	ldr	r2, [r3, #8]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800861e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6899      	ldr	r1, [r3, #8]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	68da      	ldr	r2, [r3, #12]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	430a      	orrs	r2, r1
 8008630:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008636:	4a58      	ldr	r2, [pc, #352]	; (8008798 <ADC_Init+0x1f4>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d022      	beq.n	8008682 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	689a      	ldr	r2, [r3, #8]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800864a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	6899      	ldr	r1, [r3, #8]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	430a      	orrs	r2, r1
 800865c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800866c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	6899      	ldr	r1, [r3, #8]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	430a      	orrs	r2, r1
 800867e:	609a      	str	r2, [r3, #8]
 8008680:	e00f      	b.n	80086a2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	689a      	ldr	r2, [r3, #8]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008690:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	689a      	ldr	r2, [r3, #8]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80086a0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	689a      	ldr	r2, [r3, #8]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 0202 	bic.w	r2, r2, #2
 80086b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6899      	ldr	r1, [r3, #8]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	7e1b      	ldrb	r3, [r3, #24]
 80086bc:	005a      	lsls	r2, r3, #1
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d01b      	beq.n	8008708 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086de:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685a      	ldr	r2, [r3, #4]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80086ee:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6859      	ldr	r1, [r3, #4]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fa:	3b01      	subs	r3, #1
 80086fc:	035a      	lsls	r2, r3, #13
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	430a      	orrs	r2, r1
 8008704:	605a      	str	r2, [r3, #4]
 8008706:	e007      	b.n	8008718 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008716:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008726:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	69db      	ldr	r3, [r3, #28]
 8008732:	3b01      	subs	r3, #1
 8008734:	051a      	lsls	r2, r3, #20
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	430a      	orrs	r2, r1
 800873c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	689a      	ldr	r2, [r3, #8]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800874c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	6899      	ldr	r1, [r3, #8]
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800875a:	025a      	lsls	r2, r3, #9
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	430a      	orrs	r2, r1
 8008762:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	689a      	ldr	r2, [r3, #8]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008772:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6899      	ldr	r1, [r3, #8]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	029a      	lsls	r2, r3, #10
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	430a      	orrs	r2, r1
 8008786:	609a      	str	r2, [r3, #8]
}
 8008788:	bf00      	nop
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	40012300 	.word	0x40012300
 8008798:	0f000001 	.word	0x0f000001

0800879c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b084      	sub	sp, #16
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087a8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d13c      	bne.n	8008830 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	689b      	ldr	r3, [r3, #8]
 80087c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d12b      	bne.n	8008828 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d127      	bne.n	8008828 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087de:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d006      	beq.n	80087f4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	689b      	ldr	r3, [r3, #8]
 80087ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d119      	bne.n	8008828 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685a      	ldr	r2, [r3, #4]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f022 0220 	bic.w	r2, r2, #32
 8008802:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008808:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008818:	2b00      	cmp	r3, #0
 800881a:	d105      	bne.n	8008828 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008820:	f043 0201 	orr.w	r2, r3, #1
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f7ff fd7b 	bl	8008324 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800882e:	e00e      	b.n	800884e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008834:	f003 0310 	and.w	r3, r3, #16
 8008838:	2b00      	cmp	r3, #0
 800883a:	d003      	beq.n	8008844 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f7ff fd85 	bl	800834c <HAL_ADC_ErrorCallback>
}
 8008842:	e004      	b.n	800884e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	4798      	blx	r3
}
 800884e:	bf00      	nop
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008862:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f7ff fd67 	bl	8008338 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800886a:	bf00      	nop
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}

08008872 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008872:	b580      	push	{r7, lr}
 8008874:	b084      	sub	sp, #16
 8008876:	af00      	add	r7, sp, #0
 8008878:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2240      	movs	r2, #64	; 0x40
 8008884:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888a:	f043 0204 	orr.w	r2, r3, #4
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f7ff fd5a 	bl	800834c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008898:	bf00      	nop
 800889a:	3710      	adds	r7, #16
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}

080088a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f003 0307 	and.w	r3, r3, #7
 80088ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80088b0:	4b0c      	ldr	r3, [pc, #48]	; (80088e4 <__NVIC_SetPriorityGrouping+0x44>)
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80088b6:	68ba      	ldr	r2, [r7, #8]
 80088b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80088bc:	4013      	ands	r3, r2
 80088be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80088c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80088cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80088d2:	4a04      	ldr	r2, [pc, #16]	; (80088e4 <__NVIC_SetPriorityGrouping+0x44>)
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	60d3      	str	r3, [r2, #12]
}
 80088d8:	bf00      	nop
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr
 80088e4:	e000ed00 	.word	0xe000ed00

080088e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80088e8:	b480      	push	{r7}
 80088ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80088ec:	4b04      	ldr	r3, [pc, #16]	; (8008900 <__NVIC_GetPriorityGrouping+0x18>)
 80088ee:	68db      	ldr	r3, [r3, #12]
 80088f0:	0a1b      	lsrs	r3, r3, #8
 80088f2:	f003 0307 	and.w	r3, r3, #7
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	e000ed00 	.word	0xe000ed00

08008904 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	4603      	mov	r3, r0
 800890c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800890e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008912:	2b00      	cmp	r3, #0
 8008914:	db0b      	blt.n	800892e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008916:	79fb      	ldrb	r3, [r7, #7]
 8008918:	f003 021f 	and.w	r2, r3, #31
 800891c:	4907      	ldr	r1, [pc, #28]	; (800893c <__NVIC_EnableIRQ+0x38>)
 800891e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008922:	095b      	lsrs	r3, r3, #5
 8008924:	2001      	movs	r0, #1
 8008926:	fa00 f202 	lsl.w	r2, r0, r2
 800892a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800892e:	bf00      	nop
 8008930:	370c      	adds	r7, #12
 8008932:	46bd      	mov	sp, r7
 8008934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	e000e100 	.word	0xe000e100

08008940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	4603      	mov	r3, r0
 8008948:	6039      	str	r1, [r7, #0]
 800894a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800894c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008950:	2b00      	cmp	r3, #0
 8008952:	db0a      	blt.n	800896a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	b2da      	uxtb	r2, r3
 8008958:	490c      	ldr	r1, [pc, #48]	; (800898c <__NVIC_SetPriority+0x4c>)
 800895a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800895e:	0112      	lsls	r2, r2, #4
 8008960:	b2d2      	uxtb	r2, r2
 8008962:	440b      	add	r3, r1
 8008964:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008968:	e00a      	b.n	8008980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	b2da      	uxtb	r2, r3
 800896e:	4908      	ldr	r1, [pc, #32]	; (8008990 <__NVIC_SetPriority+0x50>)
 8008970:	79fb      	ldrb	r3, [r7, #7]
 8008972:	f003 030f 	and.w	r3, r3, #15
 8008976:	3b04      	subs	r3, #4
 8008978:	0112      	lsls	r2, r2, #4
 800897a:	b2d2      	uxtb	r2, r2
 800897c:	440b      	add	r3, r1
 800897e:	761a      	strb	r2, [r3, #24]
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr
 800898c:	e000e100 	.word	0xe000e100
 8008990:	e000ed00 	.word	0xe000ed00

08008994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008994:	b480      	push	{r7}
 8008996:	b089      	sub	sp, #36	; 0x24
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f003 0307 	and.w	r3, r3, #7
 80089a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80089a8:	69fb      	ldr	r3, [r7, #28]
 80089aa:	f1c3 0307 	rsb	r3, r3, #7
 80089ae:	2b04      	cmp	r3, #4
 80089b0:	bf28      	it	cs
 80089b2:	2304      	movcs	r3, #4
 80089b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	3304      	adds	r3, #4
 80089ba:	2b06      	cmp	r3, #6
 80089bc:	d902      	bls.n	80089c4 <NVIC_EncodePriority+0x30>
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	3b03      	subs	r3, #3
 80089c2:	e000      	b.n	80089c6 <NVIC_EncodePriority+0x32>
 80089c4:	2300      	movs	r3, #0
 80089c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089c8:	f04f 32ff 	mov.w	r2, #4294967295
 80089cc:	69bb      	ldr	r3, [r7, #24]
 80089ce:	fa02 f303 	lsl.w	r3, r2, r3
 80089d2:	43da      	mvns	r2, r3
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	401a      	ands	r2, r3
 80089d8:	697b      	ldr	r3, [r7, #20]
 80089da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80089dc:	f04f 31ff 	mov.w	r1, #4294967295
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	fa01 f303 	lsl.w	r3, r1, r3
 80089e6:	43d9      	mvns	r1, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80089ec:	4313      	orrs	r3, r2
         );
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3724      	adds	r7, #36	; 0x24
 80089f2:	46bd      	mov	sp, r7
 80089f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f8:	4770      	bx	lr
	...

080089fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	3b01      	subs	r3, #1
 8008a08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008a0c:	d301      	bcc.n	8008a12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e00f      	b.n	8008a32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008a12:	4a0a      	ldr	r2, [pc, #40]	; (8008a3c <SysTick_Config+0x40>)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008a1a:	210f      	movs	r1, #15
 8008a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a20:	f7ff ff8e 	bl	8008940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008a24:	4b05      	ldr	r3, [pc, #20]	; (8008a3c <SysTick_Config+0x40>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008a2a:	4b04      	ldr	r3, [pc, #16]	; (8008a3c <SysTick_Config+0x40>)
 8008a2c:	2207      	movs	r2, #7
 8008a2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008a30:	2300      	movs	r3, #0
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3708      	adds	r7, #8
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	e000e010 	.word	0xe000e010

08008a40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7ff ff29 	bl	80088a0 <__NVIC_SetPriorityGrouping>
}
 8008a4e:	bf00      	nop
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}

08008a56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008a56:	b580      	push	{r7, lr}
 8008a58:	b086      	sub	sp, #24
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	60b9      	str	r1, [r7, #8]
 8008a60:	607a      	str	r2, [r7, #4]
 8008a62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008a68:	f7ff ff3e 	bl	80088e8 <__NVIC_GetPriorityGrouping>
 8008a6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	68b9      	ldr	r1, [r7, #8]
 8008a72:	6978      	ldr	r0, [r7, #20]
 8008a74:	f7ff ff8e 	bl	8008994 <NVIC_EncodePriority>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a7e:	4611      	mov	r1, r2
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7ff ff5d 	bl	8008940 <__NVIC_SetPriority>
}
 8008a86:	bf00      	nop
 8008a88:	3718      	adds	r7, #24
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}

08008a8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a8e:	b580      	push	{r7, lr}
 8008a90:	b082      	sub	sp, #8
 8008a92:	af00      	add	r7, sp, #0
 8008a94:	4603      	mov	r3, r0
 8008a96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f7ff ff31 	bl	8008904 <__NVIC_EnableIRQ>
}
 8008aa2:	bf00      	nop
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}

08008aaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008aaa:	b580      	push	{r7, lr}
 8008aac:	b082      	sub	sp, #8
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff ffa2 	bl	80089fc <SysTick_Config>
 8008ab8:	4603      	mov	r3, r0
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3708      	adds	r7, #8
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
	...

08008ac4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d106      	bne.n	8008ae0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8008ad2:	4b09      	ldr	r3, [pc, #36]	; (8008af8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	4a08      	ldr	r2, [pc, #32]	; (8008af8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8008ad8:	f043 0304 	orr.w	r3, r3, #4
 8008adc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8008ade:	e005      	b.n	8008aec <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8008ae0:	4b05      	ldr	r3, [pc, #20]	; (8008af8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a04      	ldr	r2, [pc, #16]	; (8008af8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8008ae6:	f023 0304 	bic.w	r3, r3, #4
 8008aea:	6013      	str	r3, [r2, #0]
}
 8008aec:	bf00      	nop
 8008aee:	370c      	adds	r7, #12
 8008af0:	46bd      	mov	sp, r7
 8008af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af6:	4770      	bx	lr
 8008af8:	e000e010 	.word	0xe000e010

08008afc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e014      	b.n	8008b38 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	791b      	ldrb	r3, [r3, #4]
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d105      	bne.n	8008b24 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f7f8 fb70 	bl	8001204 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3708      	adds	r7, #8
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	795b      	ldrb	r3, [r3, #5]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d101      	bne.n	8008b56 <HAL_DAC_Start+0x16>
 8008b52:	2302      	movs	r3, #2
 8008b54:	e040      	b.n	8008bd8 <HAL_DAC_Start+0x98>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2202      	movs	r2, #2
 8008b60:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6819      	ldr	r1, [r3, #0]
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	f003 0310 	and.w	r3, r3, #16
 8008b6e:	2201      	movs	r2, #1
 8008b70:	409a      	lsls	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	430a      	orrs	r2, r1
 8008b78:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d10f      	bne.n	8008ba0 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8008b8a:	2b3c      	cmp	r3, #60	; 0x3c
 8008b8c:	d11d      	bne.n	8008bca <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	685a      	ldr	r2, [r3, #4]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f042 0201 	orr.w	r2, r2, #1
 8008b9c:	605a      	str	r2, [r3, #4]
 8008b9e:	e014      	b.n	8008bca <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	f003 0310 	and.w	r3, r3, #16
 8008bb0:	213c      	movs	r1, #60	; 0x3c
 8008bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d107      	bne.n	8008bca <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	685a      	ldr	r2, [r3, #4]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f042 0202 	orr.w	r2, r2, #2
 8008bc8:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b087      	sub	sp, #28
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	795b      	ldrb	r3, [r3, #5]
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d101      	bne.n	8008bfc <HAL_DAC_ConfigChannel+0x18>
 8008bf8:	2302      	movs	r3, #2
 8008bfa:	e03c      	b.n	8008c76 <HAL_DAC_ConfigChannel+0x92>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2202      	movs	r2, #2
 8008c06:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f003 0310 	and.w	r3, r3, #16
 8008c16:	f640 72fe 	movw	r2, #4094	; 0xffe
 8008c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c1e:	43db      	mvns	r3, r3
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	4013      	ands	r3, r2
 8008c24:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f003 0310 	and.w	r3, r3, #16
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	6819      	ldr	r1, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f003 0310 	and.w	r3, r3, #16
 8008c58:	22c0      	movs	r2, #192	; 0xc0
 8008c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5e:	43da      	mvns	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	400a      	ands	r2, r1
 8008c66:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	371c      	adds	r7, #28
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
	...

08008c84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b086      	sub	sp, #24
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008c90:	f7ff f9c4 	bl	800801c <HAL_GetTick>
 8008c94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d101      	bne.n	8008ca0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e099      	b.n	8008dd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f022 0201 	bic.w	r2, r2, #1
 8008cbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008cc0:	e00f      	b.n	8008ce2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008cc2:	f7ff f9ab 	bl	800801c <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	2b05      	cmp	r3, #5
 8008cce:	d908      	bls.n	8008ce2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2220      	movs	r2, #32
 8008cd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2203      	movs	r2, #3
 8008cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	e078      	b.n	8008dd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1e8      	bne.n	8008cc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	4b38      	ldr	r3, [pc, #224]	; (8008ddc <HAL_DMA_Init+0x158>)
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685a      	ldr	r2, [r3, #4]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008d0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	691b      	ldr	r3, [r3, #16]
 8008d14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008d1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	699b      	ldr	r3, [r3, #24]
 8008d20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008d26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a1b      	ldr	r3, [r3, #32]
 8008d2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	2b04      	cmp	r3, #4
 8008d3a:	d107      	bne.n	8008d4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d44:	4313      	orrs	r3, r2
 8008d46:	697a      	ldr	r2, [r7, #20]
 8008d48:	4313      	orrs	r3, r2
 8008d4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	697a      	ldr	r2, [r7, #20]
 8008d52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	695b      	ldr	r3, [r3, #20]
 8008d5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	f023 0307 	bic.w	r3, r3, #7
 8008d62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d72:	2b04      	cmp	r3, #4
 8008d74:	d117      	bne.n	8008da6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00e      	beq.n	8008da6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f000 f8e5 	bl	8008f58 <DMA_CheckFifoParam>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d008      	beq.n	8008da6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2240      	movs	r2, #64	; 0x40
 8008d98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2201      	movs	r2, #1
 8008d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008da2:	2301      	movs	r3, #1
 8008da4:	e016      	b.n	8008dd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 f89c 	bl	8008eec <DMA_CalcBaseAndBitshift>
 8008db4:	4603      	mov	r3, r0
 8008db6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dbc:	223f      	movs	r2, #63	; 0x3f
 8008dbe:	409a      	lsls	r2, r3
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3718      	adds	r7, #24
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}
 8008ddc:	f010803f 	.word	0xf010803f

08008de0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
 8008dec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008dee:	2300      	movs	r3, #0
 8008df0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008df6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d101      	bne.n	8008e06 <HAL_DMA_Start_IT+0x26>
 8008e02:	2302      	movs	r3, #2
 8008e04:	e040      	b.n	8008e88 <HAL_DMA_Start_IT+0xa8>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	2b01      	cmp	r3, #1
 8008e18:	d12f      	bne.n	8008e7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f000 f82e 	bl	8008e90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e38:	223f      	movs	r2, #63	; 0x3f
 8008e3a:	409a      	lsls	r2, r3
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f042 0216 	orr.w	r2, r2, #22
 8008e4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d007      	beq.n	8008e68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f042 0208 	orr.w	r2, r2, #8
 8008e66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f042 0201 	orr.w	r2, r2, #1
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	e005      	b.n	8008e86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008e82:	2302      	movs	r3, #2
 8008e84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008e86:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	607a      	str	r2, [r7, #4]
 8008e9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008eac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	683a      	ldr	r2, [r7, #0]
 8008eb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	689b      	ldr	r3, [r3, #8]
 8008eba:	2b40      	cmp	r3, #64	; 0x40
 8008ebc:	d108      	bne.n	8008ed0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68ba      	ldr	r2, [r7, #8]
 8008ecc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008ece:	e007      	b.n	8008ee0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68ba      	ldr	r2, [r7, #8]
 8008ed6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	687a      	ldr	r2, [r7, #4]
 8008ede:	60da      	str	r2, [r3, #12]
}
 8008ee0:	bf00      	nop
 8008ee2:	3714      	adds	r7, #20
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b085      	sub	sp, #20
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	3b10      	subs	r3, #16
 8008efc:	4a14      	ldr	r2, [pc, #80]	; (8008f50 <DMA_CalcBaseAndBitshift+0x64>)
 8008efe:	fba2 2303 	umull	r2, r3, r2, r3
 8008f02:	091b      	lsrs	r3, r3, #4
 8008f04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008f06:	4a13      	ldr	r2, [pc, #76]	; (8008f54 <DMA_CalcBaseAndBitshift+0x68>)
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	781b      	ldrb	r3, [r3, #0]
 8008f0e:	461a      	mov	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b03      	cmp	r3, #3
 8008f18:	d909      	bls.n	8008f2e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008f22:	f023 0303 	bic.w	r3, r3, #3
 8008f26:	1d1a      	adds	r2, r3, #4
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	659a      	str	r2, [r3, #88]	; 0x58
 8008f2c:	e007      	b.n	8008f3e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008f36:	f023 0303 	bic.w	r3, r3, #3
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3714      	adds	r7, #20
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr
 8008f4e:	bf00      	nop
 8008f50:	aaaaaaab 	.word	0xaaaaaaab
 8008f54:	0800c214 	.word	0x0800c214

08008f58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b085      	sub	sp, #20
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f60:	2300      	movs	r3, #0
 8008f62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d11f      	bne.n	8008fb2 <DMA_CheckFifoParam+0x5a>
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d856      	bhi.n	8009026 <DMA_CheckFifoParam+0xce>
 8008f78:	a201      	add	r2, pc, #4	; (adr r2, 8008f80 <DMA_CheckFifoParam+0x28>)
 8008f7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f7e:	bf00      	nop
 8008f80:	08008f91 	.word	0x08008f91
 8008f84:	08008fa3 	.word	0x08008fa3
 8008f88:	08008f91 	.word	0x08008f91
 8008f8c:	08009027 	.word	0x08009027
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d046      	beq.n	800902a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008fa0:	e043      	b.n	800902a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fa6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008faa:	d140      	bne.n	800902e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008fac:	2301      	movs	r3, #1
 8008fae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008fb0:	e03d      	b.n	800902e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008fba:	d121      	bne.n	8009000 <DMA_CheckFifoParam+0xa8>
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d837      	bhi.n	8009032 <DMA_CheckFifoParam+0xda>
 8008fc2:	a201      	add	r2, pc, #4	; (adr r2, 8008fc8 <DMA_CheckFifoParam+0x70>)
 8008fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc8:	08008fd9 	.word	0x08008fd9
 8008fcc:	08008fdf 	.word	0x08008fdf
 8008fd0:	08008fd9 	.word	0x08008fd9
 8008fd4:	08008ff1 	.word	0x08008ff1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	73fb      	strb	r3, [r7, #15]
      break;
 8008fdc:	e030      	b.n	8009040 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d025      	beq.n	8009036 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008fee:	e022      	b.n	8009036 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ff4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008ff8:	d11f      	bne.n	800903a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008ffe:	e01c      	b.n	800903a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	2b02      	cmp	r3, #2
 8009004:	d903      	bls.n	800900e <DMA_CheckFifoParam+0xb6>
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2b03      	cmp	r3, #3
 800900a:	d003      	beq.n	8009014 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800900c:	e018      	b.n	8009040 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800900e:	2301      	movs	r3, #1
 8009010:	73fb      	strb	r3, [r7, #15]
      break;
 8009012:	e015      	b.n	8009040 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00e      	beq.n	800903e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	73fb      	strb	r3, [r7, #15]
      break;
 8009024:	e00b      	b.n	800903e <DMA_CheckFifoParam+0xe6>
      break;
 8009026:	bf00      	nop
 8009028:	e00a      	b.n	8009040 <DMA_CheckFifoParam+0xe8>
      break;
 800902a:	bf00      	nop
 800902c:	e008      	b.n	8009040 <DMA_CheckFifoParam+0xe8>
      break;
 800902e:	bf00      	nop
 8009030:	e006      	b.n	8009040 <DMA_CheckFifoParam+0xe8>
      break;
 8009032:	bf00      	nop
 8009034:	e004      	b.n	8009040 <DMA_CheckFifoParam+0xe8>
      break;
 8009036:	bf00      	nop
 8009038:	e002      	b.n	8009040 <DMA_CheckFifoParam+0xe8>
      break;   
 800903a:	bf00      	nop
 800903c:	e000      	b.n	8009040 <DMA_CheckFifoParam+0xe8>
      break;
 800903e:	bf00      	nop
    }
  } 
  
  return status; 
 8009040:	7bfb      	ldrb	r3, [r7, #15]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3714      	adds	r7, #20
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop

08009050 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009050:	b480      	push	{r7}
 8009052:	b089      	sub	sp, #36	; 0x24
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800905a:	2300      	movs	r3, #0
 800905c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800905e:	2300      	movs	r3, #0
 8009060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009062:	2300      	movs	r3, #0
 8009064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009066:	2300      	movs	r3, #0
 8009068:	61fb      	str	r3, [r7, #28]
 800906a:	e16b      	b.n	8009344 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800906c:	2201      	movs	r2, #1
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	fa02 f303 	lsl.w	r3, r2, r3
 8009074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	4013      	ands	r3, r2
 800907e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009080:	693a      	ldr	r2, [r7, #16]
 8009082:	697b      	ldr	r3, [r7, #20]
 8009084:	429a      	cmp	r2, r3
 8009086:	f040 815a 	bne.w	800933e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	685b      	ldr	r3, [r3, #4]
 800908e:	f003 0303 	and.w	r3, r3, #3
 8009092:	2b01      	cmp	r3, #1
 8009094:	d005      	beq.n	80090a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d130      	bne.n	8009104 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	005b      	lsls	r3, r3, #1
 80090ac:	2203      	movs	r2, #3
 80090ae:	fa02 f303 	lsl.w	r3, r2, r3
 80090b2:	43db      	mvns	r3, r3
 80090b4:	69ba      	ldr	r2, [r7, #24]
 80090b6:	4013      	ands	r3, r2
 80090b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	005b      	lsls	r3, r3, #1
 80090c2:	fa02 f303 	lsl.w	r3, r2, r3
 80090c6:	69ba      	ldr	r2, [r7, #24]
 80090c8:	4313      	orrs	r3, r2
 80090ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	69ba      	ldr	r2, [r7, #24]
 80090d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80090d8:	2201      	movs	r2, #1
 80090da:	69fb      	ldr	r3, [r7, #28]
 80090dc:	fa02 f303 	lsl.w	r3, r2, r3
 80090e0:	43db      	mvns	r3, r3
 80090e2:	69ba      	ldr	r2, [r7, #24]
 80090e4:	4013      	ands	r3, r2
 80090e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	091b      	lsrs	r3, r3, #4
 80090ee:	f003 0201 	and.w	r2, r3, #1
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	fa02 f303 	lsl.w	r3, r2, r3
 80090f8:	69ba      	ldr	r2, [r7, #24]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	69ba      	ldr	r2, [r7, #24]
 8009102:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f003 0303 	and.w	r3, r3, #3
 800910c:	2b03      	cmp	r3, #3
 800910e:	d017      	beq.n	8009140 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	68db      	ldr	r3, [r3, #12]
 8009114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	005b      	lsls	r3, r3, #1
 800911a:	2203      	movs	r2, #3
 800911c:	fa02 f303 	lsl.w	r3, r2, r3
 8009120:	43db      	mvns	r3, r3
 8009122:	69ba      	ldr	r2, [r7, #24]
 8009124:	4013      	ands	r3, r2
 8009126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	689a      	ldr	r2, [r3, #8]
 800912c:	69fb      	ldr	r3, [r7, #28]
 800912e:	005b      	lsls	r3, r3, #1
 8009130:	fa02 f303 	lsl.w	r3, r2, r3
 8009134:	69ba      	ldr	r2, [r7, #24]
 8009136:	4313      	orrs	r3, r2
 8009138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	69ba      	ldr	r2, [r7, #24]
 800913e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	f003 0303 	and.w	r3, r3, #3
 8009148:	2b02      	cmp	r3, #2
 800914a:	d123      	bne.n	8009194 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800914c:	69fb      	ldr	r3, [r7, #28]
 800914e:	08da      	lsrs	r2, r3, #3
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	3208      	adds	r2, #8
 8009154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009158:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	f003 0307 	and.w	r3, r3, #7
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	220f      	movs	r2, #15
 8009164:	fa02 f303 	lsl.w	r3, r2, r3
 8009168:	43db      	mvns	r3, r3
 800916a:	69ba      	ldr	r2, [r7, #24]
 800916c:	4013      	ands	r3, r2
 800916e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	691a      	ldr	r2, [r3, #16]
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	f003 0307 	and.w	r3, r3, #7
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	fa02 f303 	lsl.w	r3, r2, r3
 8009180:	69ba      	ldr	r2, [r7, #24]
 8009182:	4313      	orrs	r3, r2
 8009184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	08da      	lsrs	r2, r3, #3
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	3208      	adds	r2, #8
 800918e:	69b9      	ldr	r1, [r7, #24]
 8009190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800919a:	69fb      	ldr	r3, [r7, #28]
 800919c:	005b      	lsls	r3, r3, #1
 800919e:	2203      	movs	r2, #3
 80091a0:	fa02 f303 	lsl.w	r3, r2, r3
 80091a4:	43db      	mvns	r3, r3
 80091a6:	69ba      	ldr	r2, [r7, #24]
 80091a8:	4013      	ands	r3, r2
 80091aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	f003 0203 	and.w	r2, r3, #3
 80091b4:	69fb      	ldr	r3, [r7, #28]
 80091b6:	005b      	lsls	r3, r3, #1
 80091b8:	fa02 f303 	lsl.w	r3, r2, r3
 80091bc:	69ba      	ldr	r2, [r7, #24]
 80091be:	4313      	orrs	r3, r2
 80091c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	69ba      	ldr	r2, [r7, #24]
 80091c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 80b4 	beq.w	800933e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80091d6:	2300      	movs	r3, #0
 80091d8:	60fb      	str	r3, [r7, #12]
 80091da:	4b60      	ldr	r3, [pc, #384]	; (800935c <HAL_GPIO_Init+0x30c>)
 80091dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091de:	4a5f      	ldr	r2, [pc, #380]	; (800935c <HAL_GPIO_Init+0x30c>)
 80091e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80091e4:	6453      	str	r3, [r2, #68]	; 0x44
 80091e6:	4b5d      	ldr	r3, [pc, #372]	; (800935c <HAL_GPIO_Init+0x30c>)
 80091e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091ee:	60fb      	str	r3, [r7, #12]
 80091f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80091f2:	4a5b      	ldr	r2, [pc, #364]	; (8009360 <HAL_GPIO_Init+0x310>)
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	089b      	lsrs	r3, r3, #2
 80091f8:	3302      	adds	r3, #2
 80091fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009200:	69fb      	ldr	r3, [r7, #28]
 8009202:	f003 0303 	and.w	r3, r3, #3
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	220f      	movs	r2, #15
 800920a:	fa02 f303 	lsl.w	r3, r2, r3
 800920e:	43db      	mvns	r3, r3
 8009210:	69ba      	ldr	r2, [r7, #24]
 8009212:	4013      	ands	r3, r2
 8009214:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	4a52      	ldr	r2, [pc, #328]	; (8009364 <HAL_GPIO_Init+0x314>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d02b      	beq.n	8009276 <HAL_GPIO_Init+0x226>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a51      	ldr	r2, [pc, #324]	; (8009368 <HAL_GPIO_Init+0x318>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d025      	beq.n	8009272 <HAL_GPIO_Init+0x222>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	4a50      	ldr	r2, [pc, #320]	; (800936c <HAL_GPIO_Init+0x31c>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d01f      	beq.n	800926e <HAL_GPIO_Init+0x21e>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a4f      	ldr	r2, [pc, #316]	; (8009370 <HAL_GPIO_Init+0x320>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d019      	beq.n	800926a <HAL_GPIO_Init+0x21a>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a4e      	ldr	r2, [pc, #312]	; (8009374 <HAL_GPIO_Init+0x324>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d013      	beq.n	8009266 <HAL_GPIO_Init+0x216>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a4d      	ldr	r2, [pc, #308]	; (8009378 <HAL_GPIO_Init+0x328>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d00d      	beq.n	8009262 <HAL_GPIO_Init+0x212>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a4c      	ldr	r2, [pc, #304]	; (800937c <HAL_GPIO_Init+0x32c>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d007      	beq.n	800925e <HAL_GPIO_Init+0x20e>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a4b      	ldr	r2, [pc, #300]	; (8009380 <HAL_GPIO_Init+0x330>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d101      	bne.n	800925a <HAL_GPIO_Init+0x20a>
 8009256:	2307      	movs	r3, #7
 8009258:	e00e      	b.n	8009278 <HAL_GPIO_Init+0x228>
 800925a:	2308      	movs	r3, #8
 800925c:	e00c      	b.n	8009278 <HAL_GPIO_Init+0x228>
 800925e:	2306      	movs	r3, #6
 8009260:	e00a      	b.n	8009278 <HAL_GPIO_Init+0x228>
 8009262:	2305      	movs	r3, #5
 8009264:	e008      	b.n	8009278 <HAL_GPIO_Init+0x228>
 8009266:	2304      	movs	r3, #4
 8009268:	e006      	b.n	8009278 <HAL_GPIO_Init+0x228>
 800926a:	2303      	movs	r3, #3
 800926c:	e004      	b.n	8009278 <HAL_GPIO_Init+0x228>
 800926e:	2302      	movs	r3, #2
 8009270:	e002      	b.n	8009278 <HAL_GPIO_Init+0x228>
 8009272:	2301      	movs	r3, #1
 8009274:	e000      	b.n	8009278 <HAL_GPIO_Init+0x228>
 8009276:	2300      	movs	r3, #0
 8009278:	69fa      	ldr	r2, [r7, #28]
 800927a:	f002 0203 	and.w	r2, r2, #3
 800927e:	0092      	lsls	r2, r2, #2
 8009280:	4093      	lsls	r3, r2
 8009282:	69ba      	ldr	r2, [r7, #24]
 8009284:	4313      	orrs	r3, r2
 8009286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009288:	4935      	ldr	r1, [pc, #212]	; (8009360 <HAL_GPIO_Init+0x310>)
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	089b      	lsrs	r3, r3, #2
 800928e:	3302      	adds	r3, #2
 8009290:	69ba      	ldr	r2, [r7, #24]
 8009292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009296:	4b3b      	ldr	r3, [pc, #236]	; (8009384 <HAL_GPIO_Init+0x334>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800929c:	693b      	ldr	r3, [r7, #16]
 800929e:	43db      	mvns	r3, r3
 80092a0:	69ba      	ldr	r2, [r7, #24]
 80092a2:	4013      	ands	r3, r2
 80092a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d003      	beq.n	80092ba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80092b2:	69ba      	ldr	r2, [r7, #24]
 80092b4:	693b      	ldr	r3, [r7, #16]
 80092b6:	4313      	orrs	r3, r2
 80092b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80092ba:	4a32      	ldr	r2, [pc, #200]	; (8009384 <HAL_GPIO_Init+0x334>)
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80092c0:	4b30      	ldr	r3, [pc, #192]	; (8009384 <HAL_GPIO_Init+0x334>)
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	43db      	mvns	r3, r3
 80092ca:	69ba      	ldr	r2, [r7, #24]
 80092cc:	4013      	ands	r3, r2
 80092ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d003      	beq.n	80092e4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80092dc:	69ba      	ldr	r2, [r7, #24]
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	4313      	orrs	r3, r2
 80092e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80092e4:	4a27      	ldr	r2, [pc, #156]	; (8009384 <HAL_GPIO_Init+0x334>)
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80092ea:	4b26      	ldr	r3, [pc, #152]	; (8009384 <HAL_GPIO_Init+0x334>)
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	43db      	mvns	r3, r3
 80092f4:	69ba      	ldr	r2, [r7, #24]
 80092f6:	4013      	ands	r3, r2
 80092f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	685b      	ldr	r3, [r3, #4]
 80092fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d003      	beq.n	800930e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	4313      	orrs	r3, r2
 800930c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800930e:	4a1d      	ldr	r2, [pc, #116]	; (8009384 <HAL_GPIO_Init+0x334>)
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009314:	4b1b      	ldr	r3, [pc, #108]	; (8009384 <HAL_GPIO_Init+0x334>)
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	43db      	mvns	r3, r3
 800931e:	69ba      	ldr	r2, [r7, #24]
 8009320:	4013      	ands	r3, r2
 8009322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	685b      	ldr	r3, [r3, #4]
 8009328:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d003      	beq.n	8009338 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009330:	69ba      	ldr	r2, [r7, #24]
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	4313      	orrs	r3, r2
 8009336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009338:	4a12      	ldr	r2, [pc, #72]	; (8009384 <HAL_GPIO_Init+0x334>)
 800933a:	69bb      	ldr	r3, [r7, #24]
 800933c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	3301      	adds	r3, #1
 8009342:	61fb      	str	r3, [r7, #28]
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	2b0f      	cmp	r3, #15
 8009348:	f67f ae90 	bls.w	800906c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800934c:	bf00      	nop
 800934e:	bf00      	nop
 8009350:	3724      	adds	r7, #36	; 0x24
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	40023800 	.word	0x40023800
 8009360:	40013800 	.word	0x40013800
 8009364:	40020000 	.word	0x40020000
 8009368:	40020400 	.word	0x40020400
 800936c:	40020800 	.word	0x40020800
 8009370:	40020c00 	.word	0x40020c00
 8009374:	40021000 	.word	0x40021000
 8009378:	40021400 	.word	0x40021400
 800937c:	40021800 	.word	0x40021800
 8009380:	40021c00 	.word	0x40021c00
 8009384:	40013c00 	.word	0x40013c00

08009388 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	807b      	strh	r3, [r7, #2]
 8009394:	4613      	mov	r3, r2
 8009396:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009398:	787b      	ldrb	r3, [r7, #1]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d003      	beq.n	80093a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800939e:	887a      	ldrh	r2, [r7, #2]
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80093a4:	e003      	b.n	80093ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80093a6:	887b      	ldrh	r3, [r7, #2]
 80093a8:	041a      	lsls	r2, r3, #16
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	619a      	str	r2, [r3, #24]
}
 80093ae:	bf00      	nop
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
	...

080093bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b086      	sub	sp, #24
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80093ca:	2301      	movs	r3, #1
 80093cc:	e264      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 0301 	and.w	r3, r3, #1
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d075      	beq.n	80094c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80093da:	4ba3      	ldr	r3, [pc, #652]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	f003 030c 	and.w	r3, r3, #12
 80093e2:	2b04      	cmp	r3, #4
 80093e4:	d00c      	beq.n	8009400 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80093e6:	4ba0      	ldr	r3, [pc, #640]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 80093e8:	689b      	ldr	r3, [r3, #8]
 80093ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80093ee:	2b08      	cmp	r3, #8
 80093f0:	d112      	bne.n	8009418 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80093f2:	4b9d      	ldr	r3, [pc, #628]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80093fe:	d10b      	bne.n	8009418 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009400:	4b99      	ldr	r3, [pc, #612]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009408:	2b00      	cmp	r3, #0
 800940a:	d05b      	beq.n	80094c4 <HAL_RCC_OscConfig+0x108>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d157      	bne.n	80094c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009414:	2301      	movs	r3, #1
 8009416:	e23f      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009420:	d106      	bne.n	8009430 <HAL_RCC_OscConfig+0x74>
 8009422:	4b91      	ldr	r3, [pc, #580]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	4a90      	ldr	r2, [pc, #576]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 8009428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800942c:	6013      	str	r3, [r2, #0]
 800942e:	e01d      	b.n	800946c <HAL_RCC_OscConfig+0xb0>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009438:	d10c      	bne.n	8009454 <HAL_RCC_OscConfig+0x98>
 800943a:	4b8b      	ldr	r3, [pc, #556]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a8a      	ldr	r2, [pc, #552]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 8009440:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	4b88      	ldr	r3, [pc, #544]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a87      	ldr	r2, [pc, #540]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 800944c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009450:	6013      	str	r3, [r2, #0]
 8009452:	e00b      	b.n	800946c <HAL_RCC_OscConfig+0xb0>
 8009454:	4b84      	ldr	r3, [pc, #528]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a83      	ldr	r2, [pc, #524]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 800945a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	4b81      	ldr	r3, [pc, #516]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a80      	ldr	r2, [pc, #512]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 8009466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800946a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	685b      	ldr	r3, [r3, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d013      	beq.n	800949c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009474:	f7fe fdd2 	bl	800801c <HAL_GetTick>
 8009478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800947a:	e008      	b.n	800948e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800947c:	f7fe fdce 	bl	800801c <HAL_GetTick>
 8009480:	4602      	mov	r2, r0
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	1ad3      	subs	r3, r2, r3
 8009486:	2b64      	cmp	r3, #100	; 0x64
 8009488:	d901      	bls.n	800948e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e204      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800948e:	4b76      	ldr	r3, [pc, #472]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009496:	2b00      	cmp	r3, #0
 8009498:	d0f0      	beq.n	800947c <HAL_RCC_OscConfig+0xc0>
 800949a:	e014      	b.n	80094c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800949c:	f7fe fdbe 	bl	800801c <HAL_GetTick>
 80094a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094a2:	e008      	b.n	80094b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80094a4:	f7fe fdba 	bl	800801c <HAL_GetTick>
 80094a8:	4602      	mov	r2, r0
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	1ad3      	subs	r3, r2, r3
 80094ae:	2b64      	cmp	r3, #100	; 0x64
 80094b0:	d901      	bls.n	80094b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80094b2:	2303      	movs	r3, #3
 80094b4:	e1f0      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80094b6:	4b6c      	ldr	r3, [pc, #432]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d1f0      	bne.n	80094a4 <HAL_RCC_OscConfig+0xe8>
 80094c2:	e000      	b.n	80094c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80094c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f003 0302 	and.w	r3, r3, #2
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d063      	beq.n	800959a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80094d2:	4b65      	ldr	r3, [pc, #404]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	f003 030c 	and.w	r3, r3, #12
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d00b      	beq.n	80094f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80094de:	4b62      	ldr	r3, [pc, #392]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80094e6:	2b08      	cmp	r3, #8
 80094e8:	d11c      	bne.n	8009524 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80094ea:	4b5f      	ldr	r3, [pc, #380]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d116      	bne.n	8009524 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80094f6:	4b5c      	ldr	r3, [pc, #368]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f003 0302 	and.w	r3, r3, #2
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d005      	beq.n	800950e <HAL_RCC_OscConfig+0x152>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	68db      	ldr	r3, [r3, #12]
 8009506:	2b01      	cmp	r3, #1
 8009508:	d001      	beq.n	800950e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800950a:	2301      	movs	r3, #1
 800950c:	e1c4      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800950e:	4b56      	ldr	r3, [pc, #344]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	00db      	lsls	r3, r3, #3
 800951c:	4952      	ldr	r1, [pc, #328]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 800951e:	4313      	orrs	r3, r2
 8009520:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009522:	e03a      	b.n	800959a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d020      	beq.n	800956e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800952c:	4b4f      	ldr	r3, [pc, #316]	; (800966c <HAL_RCC_OscConfig+0x2b0>)
 800952e:	2201      	movs	r2, #1
 8009530:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009532:	f7fe fd73 	bl	800801c <HAL_GetTick>
 8009536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009538:	e008      	b.n	800954c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800953a:	f7fe fd6f 	bl	800801c <HAL_GetTick>
 800953e:	4602      	mov	r2, r0
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	1ad3      	subs	r3, r2, r3
 8009544:	2b02      	cmp	r3, #2
 8009546:	d901      	bls.n	800954c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009548:	2303      	movs	r3, #3
 800954a:	e1a5      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800954c:	4b46      	ldr	r3, [pc, #280]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b00      	cmp	r3, #0
 8009556:	d0f0      	beq.n	800953a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009558:	4b43      	ldr	r3, [pc, #268]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	00db      	lsls	r3, r3, #3
 8009566:	4940      	ldr	r1, [pc, #256]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 8009568:	4313      	orrs	r3, r2
 800956a:	600b      	str	r3, [r1, #0]
 800956c:	e015      	b.n	800959a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800956e:	4b3f      	ldr	r3, [pc, #252]	; (800966c <HAL_RCC_OscConfig+0x2b0>)
 8009570:	2200      	movs	r2, #0
 8009572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009574:	f7fe fd52 	bl	800801c <HAL_GetTick>
 8009578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800957a:	e008      	b.n	800958e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800957c:	f7fe fd4e 	bl	800801c <HAL_GetTick>
 8009580:	4602      	mov	r2, r0
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	2b02      	cmp	r3, #2
 8009588:	d901      	bls.n	800958e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800958a:	2303      	movs	r3, #3
 800958c:	e184      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800958e:	4b36      	ldr	r3, [pc, #216]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f003 0302 	and.w	r3, r3, #2
 8009596:	2b00      	cmp	r3, #0
 8009598:	d1f0      	bne.n	800957c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f003 0308 	and.w	r3, r3, #8
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d030      	beq.n	8009608 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d016      	beq.n	80095dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80095ae:	4b30      	ldr	r3, [pc, #192]	; (8009670 <HAL_RCC_OscConfig+0x2b4>)
 80095b0:	2201      	movs	r2, #1
 80095b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80095b4:	f7fe fd32 	bl	800801c <HAL_GetTick>
 80095b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095ba:	e008      	b.n	80095ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095bc:	f7fe fd2e 	bl	800801c <HAL_GetTick>
 80095c0:	4602      	mov	r2, r0
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	2b02      	cmp	r3, #2
 80095c8:	d901      	bls.n	80095ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80095ca:	2303      	movs	r3, #3
 80095cc:	e164      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80095ce:	4b26      	ldr	r3, [pc, #152]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 80095d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095d2:	f003 0302 	and.w	r3, r3, #2
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0f0      	beq.n	80095bc <HAL_RCC_OscConfig+0x200>
 80095da:	e015      	b.n	8009608 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80095dc:	4b24      	ldr	r3, [pc, #144]	; (8009670 <HAL_RCC_OscConfig+0x2b4>)
 80095de:	2200      	movs	r2, #0
 80095e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80095e2:	f7fe fd1b 	bl	800801c <HAL_GetTick>
 80095e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095e8:	e008      	b.n	80095fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80095ea:	f7fe fd17 	bl	800801c <HAL_GetTick>
 80095ee:	4602      	mov	r2, r0
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	1ad3      	subs	r3, r2, r3
 80095f4:	2b02      	cmp	r3, #2
 80095f6:	d901      	bls.n	80095fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80095f8:	2303      	movs	r3, #3
 80095fa:	e14d      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80095fc:	4b1a      	ldr	r3, [pc, #104]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 80095fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009600:	f003 0302 	and.w	r3, r3, #2
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1f0      	bne.n	80095ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0304 	and.w	r3, r3, #4
 8009610:	2b00      	cmp	r3, #0
 8009612:	f000 80a0 	beq.w	8009756 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009616:	2300      	movs	r3, #0
 8009618:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800961a:	4b13      	ldr	r3, [pc, #76]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 800961c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d10f      	bne.n	8009646 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009626:	2300      	movs	r3, #0
 8009628:	60bb      	str	r3, [r7, #8]
 800962a:	4b0f      	ldr	r3, [pc, #60]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 800962c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962e:	4a0e      	ldr	r2, [pc, #56]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 8009630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009634:	6413      	str	r3, [r2, #64]	; 0x40
 8009636:	4b0c      	ldr	r3, [pc, #48]	; (8009668 <HAL_RCC_OscConfig+0x2ac>)
 8009638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800963a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800963e:	60bb      	str	r3, [r7, #8]
 8009640:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009642:	2301      	movs	r3, #1
 8009644:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009646:	4b0b      	ldr	r3, [pc, #44]	; (8009674 <HAL_RCC_OscConfig+0x2b8>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800964e:	2b00      	cmp	r3, #0
 8009650:	d121      	bne.n	8009696 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009652:	4b08      	ldr	r3, [pc, #32]	; (8009674 <HAL_RCC_OscConfig+0x2b8>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a07      	ldr	r2, [pc, #28]	; (8009674 <HAL_RCC_OscConfig+0x2b8>)
 8009658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800965c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800965e:	f7fe fcdd 	bl	800801c <HAL_GetTick>
 8009662:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009664:	e011      	b.n	800968a <HAL_RCC_OscConfig+0x2ce>
 8009666:	bf00      	nop
 8009668:	40023800 	.word	0x40023800
 800966c:	42470000 	.word	0x42470000
 8009670:	42470e80 	.word	0x42470e80
 8009674:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009678:	f7fe fcd0 	bl	800801c <HAL_GetTick>
 800967c:	4602      	mov	r2, r0
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	2b02      	cmp	r3, #2
 8009684:	d901      	bls.n	800968a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009686:	2303      	movs	r3, #3
 8009688:	e106      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800968a:	4b85      	ldr	r3, [pc, #532]	; (80098a0 <HAL_RCC_OscConfig+0x4e4>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009692:	2b00      	cmp	r3, #0
 8009694:	d0f0      	beq.n	8009678 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	2b01      	cmp	r3, #1
 800969c:	d106      	bne.n	80096ac <HAL_RCC_OscConfig+0x2f0>
 800969e:	4b81      	ldr	r3, [pc, #516]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 80096a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a2:	4a80      	ldr	r2, [pc, #512]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 80096a4:	f043 0301 	orr.w	r3, r3, #1
 80096a8:	6713      	str	r3, [r2, #112]	; 0x70
 80096aa:	e01c      	b.n	80096e6 <HAL_RCC_OscConfig+0x32a>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	689b      	ldr	r3, [r3, #8]
 80096b0:	2b05      	cmp	r3, #5
 80096b2:	d10c      	bne.n	80096ce <HAL_RCC_OscConfig+0x312>
 80096b4:	4b7b      	ldr	r3, [pc, #492]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 80096b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096b8:	4a7a      	ldr	r2, [pc, #488]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 80096ba:	f043 0304 	orr.w	r3, r3, #4
 80096be:	6713      	str	r3, [r2, #112]	; 0x70
 80096c0:	4b78      	ldr	r3, [pc, #480]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 80096c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c4:	4a77      	ldr	r2, [pc, #476]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 80096c6:	f043 0301 	orr.w	r3, r3, #1
 80096ca:	6713      	str	r3, [r2, #112]	; 0x70
 80096cc:	e00b      	b.n	80096e6 <HAL_RCC_OscConfig+0x32a>
 80096ce:	4b75      	ldr	r3, [pc, #468]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 80096d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096d2:	4a74      	ldr	r2, [pc, #464]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 80096d4:	f023 0301 	bic.w	r3, r3, #1
 80096d8:	6713      	str	r3, [r2, #112]	; 0x70
 80096da:	4b72      	ldr	r3, [pc, #456]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 80096dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096de:	4a71      	ldr	r2, [pc, #452]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 80096e0:	f023 0304 	bic.w	r3, r3, #4
 80096e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d015      	beq.n	800971a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80096ee:	f7fe fc95 	bl	800801c <HAL_GetTick>
 80096f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80096f4:	e00a      	b.n	800970c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80096f6:	f7fe fc91 	bl	800801c <HAL_GetTick>
 80096fa:	4602      	mov	r2, r0
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	f241 3288 	movw	r2, #5000	; 0x1388
 8009704:	4293      	cmp	r3, r2
 8009706:	d901      	bls.n	800970c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009708:	2303      	movs	r3, #3
 800970a:	e0c5      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800970c:	4b65      	ldr	r3, [pc, #404]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 800970e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009710:	f003 0302 	and.w	r3, r3, #2
 8009714:	2b00      	cmp	r3, #0
 8009716:	d0ee      	beq.n	80096f6 <HAL_RCC_OscConfig+0x33a>
 8009718:	e014      	b.n	8009744 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800971a:	f7fe fc7f 	bl	800801c <HAL_GetTick>
 800971e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009720:	e00a      	b.n	8009738 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009722:	f7fe fc7b 	bl	800801c <HAL_GetTick>
 8009726:	4602      	mov	r2, r0
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009730:	4293      	cmp	r3, r2
 8009732:	d901      	bls.n	8009738 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009734:	2303      	movs	r3, #3
 8009736:	e0af      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009738:	4b5a      	ldr	r3, [pc, #360]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 800973a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973c:	f003 0302 	and.w	r3, r3, #2
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1ee      	bne.n	8009722 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009744:	7dfb      	ldrb	r3, [r7, #23]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d105      	bne.n	8009756 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800974a:	4b56      	ldr	r3, [pc, #344]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 800974c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800974e:	4a55      	ldr	r2, [pc, #340]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 8009750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009754:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	699b      	ldr	r3, [r3, #24]
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 809b 	beq.w	8009896 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009760:	4b50      	ldr	r3, [pc, #320]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	f003 030c 	and.w	r3, r3, #12
 8009768:	2b08      	cmp	r3, #8
 800976a:	d05c      	beq.n	8009826 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	699b      	ldr	r3, [r3, #24]
 8009770:	2b02      	cmp	r3, #2
 8009772:	d141      	bne.n	80097f8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009774:	4b4c      	ldr	r3, [pc, #304]	; (80098a8 <HAL_RCC_OscConfig+0x4ec>)
 8009776:	2200      	movs	r2, #0
 8009778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800977a:	f7fe fc4f 	bl	800801c <HAL_GetTick>
 800977e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009780:	e008      	b.n	8009794 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009782:	f7fe fc4b 	bl	800801c <HAL_GetTick>
 8009786:	4602      	mov	r2, r0
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	1ad3      	subs	r3, r2, r3
 800978c:	2b02      	cmp	r3, #2
 800978e:	d901      	bls.n	8009794 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009790:	2303      	movs	r3, #3
 8009792:	e081      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009794:	4b43      	ldr	r3, [pc, #268]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800979c:	2b00      	cmp	r3, #0
 800979e:	d1f0      	bne.n	8009782 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	69da      	ldr	r2, [r3, #28]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6a1b      	ldr	r3, [r3, #32]
 80097a8:	431a      	orrs	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ae:	019b      	lsls	r3, r3, #6
 80097b0:	431a      	orrs	r2, r3
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b6:	085b      	lsrs	r3, r3, #1
 80097b8:	3b01      	subs	r3, #1
 80097ba:	041b      	lsls	r3, r3, #16
 80097bc:	431a      	orrs	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097c2:	061b      	lsls	r3, r3, #24
 80097c4:	4937      	ldr	r1, [pc, #220]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80097ca:	4b37      	ldr	r3, [pc, #220]	; (80098a8 <HAL_RCC_OscConfig+0x4ec>)
 80097cc:	2201      	movs	r2, #1
 80097ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097d0:	f7fe fc24 	bl	800801c <HAL_GetTick>
 80097d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097d6:	e008      	b.n	80097ea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80097d8:	f7fe fc20 	bl	800801c <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	2b02      	cmp	r3, #2
 80097e4:	d901      	bls.n	80097ea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e056      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80097ea:	4b2e      	ldr	r3, [pc, #184]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d0f0      	beq.n	80097d8 <HAL_RCC_OscConfig+0x41c>
 80097f6:	e04e      	b.n	8009896 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80097f8:	4b2b      	ldr	r3, [pc, #172]	; (80098a8 <HAL_RCC_OscConfig+0x4ec>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097fe:	f7fe fc0d 	bl	800801c <HAL_GetTick>
 8009802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009804:	e008      	b.n	8009818 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009806:	f7fe fc09 	bl	800801c <HAL_GetTick>
 800980a:	4602      	mov	r2, r0
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	1ad3      	subs	r3, r2, r3
 8009810:	2b02      	cmp	r3, #2
 8009812:	d901      	bls.n	8009818 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e03f      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009818:	4b22      	ldr	r3, [pc, #136]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009820:	2b00      	cmp	r3, #0
 8009822:	d1f0      	bne.n	8009806 <HAL_RCC_OscConfig+0x44a>
 8009824:	e037      	b.n	8009896 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	2b01      	cmp	r3, #1
 800982c:	d101      	bne.n	8009832 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	e032      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009832:	4b1c      	ldr	r3, [pc, #112]	; (80098a4 <HAL_RCC_OscConfig+0x4e8>)
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	2b01      	cmp	r3, #1
 800983e:	d028      	beq.n	8009892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800984a:	429a      	cmp	r2, r3
 800984c:	d121      	bne.n	8009892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009858:	429a      	cmp	r2, r3
 800985a:	d11a      	bne.n	8009892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009862:	4013      	ands	r3, r2
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009868:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800986a:	4293      	cmp	r3, r2
 800986c:	d111      	bne.n	8009892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009878:	085b      	lsrs	r3, r3, #1
 800987a:	3b01      	subs	r3, #1
 800987c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800987e:	429a      	cmp	r2, r3
 8009880:	d107      	bne.n	8009892 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800988e:	429a      	cmp	r2, r3
 8009890:	d001      	beq.n	8009896 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009892:	2301      	movs	r3, #1
 8009894:	e000      	b.n	8009898 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009896:	2300      	movs	r3, #0
}
 8009898:	4618      	mov	r0, r3
 800989a:	3718      	adds	r7, #24
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	40007000 	.word	0x40007000
 80098a4:	40023800 	.word	0x40023800
 80098a8:	42470060 	.word	0x42470060

080098ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d101      	bne.n	80098c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	e0cc      	b.n	8009a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80098c0:	4b68      	ldr	r3, [pc, #416]	; (8009a64 <HAL_RCC_ClockConfig+0x1b8>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f003 0307 	and.w	r3, r3, #7
 80098c8:	683a      	ldr	r2, [r7, #0]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d90c      	bls.n	80098e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80098ce:	4b65      	ldr	r3, [pc, #404]	; (8009a64 <HAL_RCC_ClockConfig+0x1b8>)
 80098d0:	683a      	ldr	r2, [r7, #0]
 80098d2:	b2d2      	uxtb	r2, r2
 80098d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80098d6:	4b63      	ldr	r3, [pc, #396]	; (8009a64 <HAL_RCC_ClockConfig+0x1b8>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0307 	and.w	r3, r3, #7
 80098de:	683a      	ldr	r2, [r7, #0]
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d001      	beq.n	80098e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	e0b8      	b.n	8009a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0302 	and.w	r3, r3, #2
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d020      	beq.n	8009936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f003 0304 	and.w	r3, r3, #4
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d005      	beq.n	800990c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009900:	4b59      	ldr	r3, [pc, #356]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009902:	689b      	ldr	r3, [r3, #8]
 8009904:	4a58      	ldr	r2, [pc, #352]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800990a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	f003 0308 	and.w	r3, r3, #8
 8009914:	2b00      	cmp	r3, #0
 8009916:	d005      	beq.n	8009924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009918:	4b53      	ldr	r3, [pc, #332]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	4a52      	ldr	r2, [pc, #328]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 800991e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009924:	4b50      	ldr	r3, [pc, #320]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009926:	689b      	ldr	r3, [r3, #8]
 8009928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	689b      	ldr	r3, [r3, #8]
 8009930:	494d      	ldr	r1, [pc, #308]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009932:	4313      	orrs	r3, r2
 8009934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 0301 	and.w	r3, r3, #1
 800993e:	2b00      	cmp	r3, #0
 8009940:	d044      	beq.n	80099cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	2b01      	cmp	r3, #1
 8009948:	d107      	bne.n	800995a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800994a:	4b47      	ldr	r3, [pc, #284]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009952:	2b00      	cmp	r3, #0
 8009954:	d119      	bne.n	800998a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e07f      	b.n	8009a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	2b02      	cmp	r3, #2
 8009960:	d003      	beq.n	800996a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009966:	2b03      	cmp	r3, #3
 8009968:	d107      	bne.n	800997a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800996a:	4b3f      	ldr	r3, [pc, #252]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d109      	bne.n	800998a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e06f      	b.n	8009a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800997a:	4b3b      	ldr	r3, [pc, #236]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f003 0302 	and.w	r3, r3, #2
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e067      	b.n	8009a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800998a:	4b37      	ldr	r3, [pc, #220]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f023 0203 	bic.w	r2, r3, #3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	685b      	ldr	r3, [r3, #4]
 8009996:	4934      	ldr	r1, [pc, #208]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009998:	4313      	orrs	r3, r2
 800999a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800999c:	f7fe fb3e 	bl	800801c <HAL_GetTick>
 80099a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099a2:	e00a      	b.n	80099ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80099a4:	f7fe fb3a 	bl	800801c <HAL_GetTick>
 80099a8:	4602      	mov	r2, r0
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d901      	bls.n	80099ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80099b6:	2303      	movs	r3, #3
 80099b8:	e04f      	b.n	8009a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80099ba:	4b2b      	ldr	r3, [pc, #172]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 80099bc:	689b      	ldr	r3, [r3, #8]
 80099be:	f003 020c 	and.w	r2, r3, #12
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d1eb      	bne.n	80099a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80099cc:	4b25      	ldr	r3, [pc, #148]	; (8009a64 <HAL_RCC_ClockConfig+0x1b8>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f003 0307 	and.w	r3, r3, #7
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d20c      	bcs.n	80099f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80099da:	4b22      	ldr	r3, [pc, #136]	; (8009a64 <HAL_RCC_ClockConfig+0x1b8>)
 80099dc:	683a      	ldr	r2, [r7, #0]
 80099de:	b2d2      	uxtb	r2, r2
 80099e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80099e2:	4b20      	ldr	r3, [pc, #128]	; (8009a64 <HAL_RCC_ClockConfig+0x1b8>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f003 0307 	and.w	r3, r3, #7
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	429a      	cmp	r2, r3
 80099ee:	d001      	beq.n	80099f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e032      	b.n	8009a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f003 0304 	and.w	r3, r3, #4
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d008      	beq.n	8009a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009a00:	4b19      	ldr	r3, [pc, #100]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	4916      	ldr	r1, [pc, #88]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f003 0308 	and.w	r3, r3, #8
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d009      	beq.n	8009a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009a1e:	4b12      	ldr	r3, [pc, #72]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009a20:	689b      	ldr	r3, [r3, #8]
 8009a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	00db      	lsls	r3, r3, #3
 8009a2c:	490e      	ldr	r1, [pc, #56]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009a32:	f000 f821 	bl	8009a78 <HAL_RCC_GetSysClockFreq>
 8009a36:	4602      	mov	r2, r0
 8009a38:	4b0b      	ldr	r3, [pc, #44]	; (8009a68 <HAL_RCC_ClockConfig+0x1bc>)
 8009a3a:	689b      	ldr	r3, [r3, #8]
 8009a3c:	091b      	lsrs	r3, r3, #4
 8009a3e:	f003 030f 	and.w	r3, r3, #15
 8009a42:	490a      	ldr	r1, [pc, #40]	; (8009a6c <HAL_RCC_ClockConfig+0x1c0>)
 8009a44:	5ccb      	ldrb	r3, [r1, r3]
 8009a46:	fa22 f303 	lsr.w	r3, r2, r3
 8009a4a:	4a09      	ldr	r2, [pc, #36]	; (8009a70 <HAL_RCC_ClockConfig+0x1c4>)
 8009a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009a4e:	4b09      	ldr	r3, [pc, #36]	; (8009a74 <HAL_RCC_ClockConfig+0x1c8>)
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f7fe fa9e 	bl	8007f94 <HAL_InitTick>

  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3710      	adds	r7, #16
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	40023c00 	.word	0x40023c00
 8009a68:	40023800 	.word	0x40023800
 8009a6c:	0800c204 	.word	0x0800c204
 8009a70:	20000004 	.word	0x20000004
 8009a74:	20000040 	.word	0x20000040

08009a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009a78:	b5b0      	push	{r4, r5, r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009a7e:	2100      	movs	r1, #0
 8009a80:	6079      	str	r1, [r7, #4]
 8009a82:	2100      	movs	r1, #0
 8009a84:	60f9      	str	r1, [r7, #12]
 8009a86:	2100      	movs	r1, #0
 8009a88:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009a8e:	4952      	ldr	r1, [pc, #328]	; (8009bd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009a90:	6889      	ldr	r1, [r1, #8]
 8009a92:	f001 010c 	and.w	r1, r1, #12
 8009a96:	2908      	cmp	r1, #8
 8009a98:	d00d      	beq.n	8009ab6 <HAL_RCC_GetSysClockFreq+0x3e>
 8009a9a:	2908      	cmp	r1, #8
 8009a9c:	f200 8094 	bhi.w	8009bc8 <HAL_RCC_GetSysClockFreq+0x150>
 8009aa0:	2900      	cmp	r1, #0
 8009aa2:	d002      	beq.n	8009aaa <HAL_RCC_GetSysClockFreq+0x32>
 8009aa4:	2904      	cmp	r1, #4
 8009aa6:	d003      	beq.n	8009ab0 <HAL_RCC_GetSysClockFreq+0x38>
 8009aa8:	e08e      	b.n	8009bc8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009aaa:	4b4c      	ldr	r3, [pc, #304]	; (8009bdc <HAL_RCC_GetSysClockFreq+0x164>)
 8009aac:	60bb      	str	r3, [r7, #8]
       break;
 8009aae:	e08e      	b.n	8009bce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009ab0:	4b4b      	ldr	r3, [pc, #300]	; (8009be0 <HAL_RCC_GetSysClockFreq+0x168>)
 8009ab2:	60bb      	str	r3, [r7, #8]
      break;
 8009ab4:	e08b      	b.n	8009bce <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009ab6:	4948      	ldr	r1, [pc, #288]	; (8009bd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009ab8:	6849      	ldr	r1, [r1, #4]
 8009aba:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8009abe:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009ac0:	4945      	ldr	r1, [pc, #276]	; (8009bd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009ac2:	6849      	ldr	r1, [r1, #4]
 8009ac4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8009ac8:	2900      	cmp	r1, #0
 8009aca:	d024      	beq.n	8009b16 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009acc:	4942      	ldr	r1, [pc, #264]	; (8009bd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009ace:	6849      	ldr	r1, [r1, #4]
 8009ad0:	0989      	lsrs	r1, r1, #6
 8009ad2:	4608      	mov	r0, r1
 8009ad4:	f04f 0100 	mov.w	r1, #0
 8009ad8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009adc:	f04f 0500 	mov.w	r5, #0
 8009ae0:	ea00 0204 	and.w	r2, r0, r4
 8009ae4:	ea01 0305 	and.w	r3, r1, r5
 8009ae8:	493d      	ldr	r1, [pc, #244]	; (8009be0 <HAL_RCC_GetSysClockFreq+0x168>)
 8009aea:	fb01 f003 	mul.w	r0, r1, r3
 8009aee:	2100      	movs	r1, #0
 8009af0:	fb01 f102 	mul.w	r1, r1, r2
 8009af4:	1844      	adds	r4, r0, r1
 8009af6:	493a      	ldr	r1, [pc, #232]	; (8009be0 <HAL_RCC_GetSysClockFreq+0x168>)
 8009af8:	fba2 0101 	umull	r0, r1, r2, r1
 8009afc:	1863      	adds	r3, r4, r1
 8009afe:	4619      	mov	r1, r3
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	461a      	mov	r2, r3
 8009b04:	f04f 0300 	mov.w	r3, #0
 8009b08:	f7f6 ffea 	bl	8000ae0 <__aeabi_uldivmod>
 8009b0c:	4602      	mov	r2, r0
 8009b0e:	460b      	mov	r3, r1
 8009b10:	4613      	mov	r3, r2
 8009b12:	60fb      	str	r3, [r7, #12]
 8009b14:	e04a      	b.n	8009bac <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009b16:	4b30      	ldr	r3, [pc, #192]	; (8009bd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009b18:	685b      	ldr	r3, [r3, #4]
 8009b1a:	099b      	lsrs	r3, r3, #6
 8009b1c:	461a      	mov	r2, r3
 8009b1e:	f04f 0300 	mov.w	r3, #0
 8009b22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009b26:	f04f 0100 	mov.w	r1, #0
 8009b2a:	ea02 0400 	and.w	r4, r2, r0
 8009b2e:	ea03 0501 	and.w	r5, r3, r1
 8009b32:	4620      	mov	r0, r4
 8009b34:	4629      	mov	r1, r5
 8009b36:	f04f 0200 	mov.w	r2, #0
 8009b3a:	f04f 0300 	mov.w	r3, #0
 8009b3e:	014b      	lsls	r3, r1, #5
 8009b40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009b44:	0142      	lsls	r2, r0, #5
 8009b46:	4610      	mov	r0, r2
 8009b48:	4619      	mov	r1, r3
 8009b4a:	1b00      	subs	r0, r0, r4
 8009b4c:	eb61 0105 	sbc.w	r1, r1, r5
 8009b50:	f04f 0200 	mov.w	r2, #0
 8009b54:	f04f 0300 	mov.w	r3, #0
 8009b58:	018b      	lsls	r3, r1, #6
 8009b5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009b5e:	0182      	lsls	r2, r0, #6
 8009b60:	1a12      	subs	r2, r2, r0
 8009b62:	eb63 0301 	sbc.w	r3, r3, r1
 8009b66:	f04f 0000 	mov.w	r0, #0
 8009b6a:	f04f 0100 	mov.w	r1, #0
 8009b6e:	00d9      	lsls	r1, r3, #3
 8009b70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009b74:	00d0      	lsls	r0, r2, #3
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	1912      	adds	r2, r2, r4
 8009b7c:	eb45 0303 	adc.w	r3, r5, r3
 8009b80:	f04f 0000 	mov.w	r0, #0
 8009b84:	f04f 0100 	mov.w	r1, #0
 8009b88:	0299      	lsls	r1, r3, #10
 8009b8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009b8e:	0290      	lsls	r0, r2, #10
 8009b90:	4602      	mov	r2, r0
 8009b92:	460b      	mov	r3, r1
 8009b94:	4610      	mov	r0, r2
 8009b96:	4619      	mov	r1, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	f04f 0300 	mov.w	r3, #0
 8009ba0:	f7f6 ff9e 	bl	8000ae0 <__aeabi_uldivmod>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	4613      	mov	r3, r2
 8009baa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009bac:	4b0a      	ldr	r3, [pc, #40]	; (8009bd8 <HAL_RCC_GetSysClockFreq+0x160>)
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	0c1b      	lsrs	r3, r3, #16
 8009bb2:	f003 0303 	and.w	r3, r3, #3
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	005b      	lsls	r3, r3, #1
 8009bba:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009bbc:	68fa      	ldr	r2, [r7, #12]
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bc4:	60bb      	str	r3, [r7, #8]
      break;
 8009bc6:	e002      	b.n	8009bce <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009bc8:	4b04      	ldr	r3, [pc, #16]	; (8009bdc <HAL_RCC_GetSysClockFreq+0x164>)
 8009bca:	60bb      	str	r3, [r7, #8]
      break;
 8009bcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009bce:	68bb      	ldr	r3, [r7, #8]
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8009bd8:	40023800 	.word	0x40023800
 8009bdc:	00f42400 	.word	0x00f42400
 8009be0:	017d7840 	.word	0x017d7840

08009be4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b084      	sub	sp, #16
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	60f8      	str	r0, [r7, #12]
 8009bec:	60b9      	str	r1, [r7, #8]
 8009bee:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d101      	bne.n	8009bfa <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e034      	b.n	8009c64 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8009c00:	b2db      	uxtb	r3, r3
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d106      	bne.n	8009c14 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2200      	movs	r2, #0
 8009c0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f7f7 fc40 	bl	8001494 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	3308      	adds	r3, #8
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	4610      	mov	r0, r2
 8009c20:	f000 fcac 	bl	800a57c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	6818      	ldr	r0, [r3, #0]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	68b9      	ldr	r1, [r7, #8]
 8009c30:	f000 fcf6 	bl	800a620 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	6858      	ldr	r0, [r3, #4]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	689a      	ldr	r2, [r3, #8]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c40:	6879      	ldr	r1, [r7, #4]
 8009c42:	f000 fd2b 	bl	800a69c <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	6892      	ldr	r2, [r2, #8]
 8009c4e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68fa      	ldr	r2, [r7, #12]
 8009c58:	6892      	ldr	r2, [r2, #8]
 8009c5a:	f041 0101 	orr.w	r1, r1, #1
 8009c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d101      	bne.n	8009c7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009c7a:	2301      	movs	r3, #1
 8009c7c:	e041      	b.n	8009d02 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d106      	bne.n	8009c98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f7fd f8a4 	bl	8006de0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2202      	movs	r2, #2
 8009c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	4619      	mov	r1, r3
 8009caa:	4610      	mov	r0, r2
 8009cac:	f000 fa9c 	bl	800a1e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
	...

08009d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2b01      	cmp	r3, #1
 8009d1e:	d001      	beq.n	8009d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009d20:	2301      	movs	r3, #1
 8009d22:	e04e      	b.n	8009dc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2202      	movs	r2, #2
 8009d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	68da      	ldr	r2, [r3, #12]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f042 0201 	orr.w	r2, r2, #1
 8009d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a23      	ldr	r2, [pc, #140]	; (8009dd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d022      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0x80>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d4e:	d01d      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0x80>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a1f      	ldr	r2, [pc, #124]	; (8009dd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d018      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0x80>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a1e      	ldr	r2, [pc, #120]	; (8009dd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d013      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0x80>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a1c      	ldr	r2, [pc, #112]	; (8009ddc <HAL_TIM_Base_Start_IT+0xd0>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d00e      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0x80>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4a1b      	ldr	r2, [pc, #108]	; (8009de0 <HAL_TIM_Base_Start_IT+0xd4>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d009      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0x80>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a19      	ldr	r2, [pc, #100]	; (8009de4 <HAL_TIM_Base_Start_IT+0xd8>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d004      	beq.n	8009d8c <HAL_TIM_Base_Start_IT+0x80>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	4a18      	ldr	r2, [pc, #96]	; (8009de8 <HAL_TIM_Base_Start_IT+0xdc>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d111      	bne.n	8009db0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	f003 0307 	and.w	r3, r3, #7
 8009d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b06      	cmp	r3, #6
 8009d9c:	d010      	beq.n	8009dc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f042 0201 	orr.w	r2, r2, #1
 8009dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dae:	e007      	b.n	8009dc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f042 0201 	orr.w	r2, r2, #1
 8009dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3714      	adds	r7, #20
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dcc:	4770      	bx	lr
 8009dce:	bf00      	nop
 8009dd0:	40010000 	.word	0x40010000
 8009dd4:	40000400 	.word	0x40000400
 8009dd8:	40000800 	.word	0x40000800
 8009ddc:	40000c00 	.word	0x40000c00
 8009de0:	40010400 	.word	0x40010400
 8009de4:	40014000 	.word	0x40014000
 8009de8:	40001800 	.word	0x40001800

08009dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	691b      	ldr	r3, [r3, #16]
 8009dfa:	f003 0302 	and.w	r3, r3, #2
 8009dfe:	2b02      	cmp	r3, #2
 8009e00:	d122      	bne.n	8009e48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	68db      	ldr	r3, [r3, #12]
 8009e08:	f003 0302 	and.w	r3, r3, #2
 8009e0c:	2b02      	cmp	r3, #2
 8009e0e:	d11b      	bne.n	8009e48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f06f 0202 	mvn.w	r2, #2
 8009e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	2201      	movs	r2, #1
 8009e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	699b      	ldr	r3, [r3, #24]
 8009e26:	f003 0303 	and.w	r3, r3, #3
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d003      	beq.n	8009e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f9bc 	bl	800a1ac <HAL_TIM_IC_CaptureCallback>
 8009e34:	e005      	b.n	8009e42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 f9ae 	bl	800a198 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f000 f9bf 	bl	800a1c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	f003 0304 	and.w	r3, r3, #4
 8009e52:	2b04      	cmp	r3, #4
 8009e54:	d122      	bne.n	8009e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68db      	ldr	r3, [r3, #12]
 8009e5c:	f003 0304 	and.w	r3, r3, #4
 8009e60:	2b04      	cmp	r3, #4
 8009e62:	d11b      	bne.n	8009e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f06f 0204 	mvn.w	r2, #4
 8009e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2202      	movs	r2, #2
 8009e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	699b      	ldr	r3, [r3, #24]
 8009e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d003      	beq.n	8009e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f992 	bl	800a1ac <HAL_TIM_IC_CaptureCallback>
 8009e88:	e005      	b.n	8009e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 f984 	bl	800a198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f995 	bl	800a1c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	691b      	ldr	r3, [r3, #16]
 8009ea2:	f003 0308 	and.w	r3, r3, #8
 8009ea6:	2b08      	cmp	r3, #8
 8009ea8:	d122      	bne.n	8009ef0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	f003 0308 	and.w	r3, r3, #8
 8009eb4:	2b08      	cmp	r3, #8
 8009eb6:	d11b      	bne.n	8009ef0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f06f 0208 	mvn.w	r2, #8
 8009ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2204      	movs	r2, #4
 8009ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	69db      	ldr	r3, [r3, #28]
 8009ece:	f003 0303 	and.w	r3, r3, #3
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d003      	beq.n	8009ede <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f968 	bl	800a1ac <HAL_TIM_IC_CaptureCallback>
 8009edc:	e005      	b.n	8009eea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f95a 	bl	800a198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f96b 	bl	800a1c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	f003 0310 	and.w	r3, r3, #16
 8009efa:	2b10      	cmp	r3, #16
 8009efc:	d122      	bne.n	8009f44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	f003 0310 	and.w	r3, r3, #16
 8009f08:	2b10      	cmp	r3, #16
 8009f0a:	d11b      	bne.n	8009f44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f06f 0210 	mvn.w	r2, #16
 8009f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2208      	movs	r2, #8
 8009f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	69db      	ldr	r3, [r3, #28]
 8009f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d003      	beq.n	8009f32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 f93e 	bl	800a1ac <HAL_TIM_IC_CaptureCallback>
 8009f30:	e005      	b.n	8009f3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f930 	bl	800a198 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f941 	bl	800a1c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	f003 0301 	and.w	r3, r3, #1
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d10e      	bne.n	8009f70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	f003 0301 	and.w	r3, r3, #1
 8009f5c:	2b01      	cmp	r3, #1
 8009f5e:	d107      	bne.n	8009f70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f06f 0201 	mvn.w	r2, #1
 8009f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f000 f90a 	bl	800a184 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f7a:	2b80      	cmp	r3, #128	; 0x80
 8009f7c:	d10e      	bne.n	8009f9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	68db      	ldr	r3, [r3, #12]
 8009f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f88:	2b80      	cmp	r3, #128	; 0x80
 8009f8a:	d107      	bne.n	8009f9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f000 fae6 	bl	800a568 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fa6:	2b40      	cmp	r3, #64	; 0x40
 8009fa8:	d10e      	bne.n	8009fc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fb4:	2b40      	cmp	r3, #64	; 0x40
 8009fb6:	d107      	bne.n	8009fc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f906 	bl	800a1d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	f003 0320 	and.w	r3, r3, #32
 8009fd2:	2b20      	cmp	r3, #32
 8009fd4:	d10e      	bne.n	8009ff4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	f003 0320 	and.w	r3, r3, #32
 8009fe0:	2b20      	cmp	r3, #32
 8009fe2:	d107      	bne.n	8009ff4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f06f 0220 	mvn.w	r2, #32
 8009fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 fab0 	bl	800a554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ff4:	bf00      	nop
 8009ff6:	3708      	adds	r7, #8
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	d101      	bne.n	800a014 <HAL_TIM_ConfigClockSource+0x18>
 800a010:	2302      	movs	r3, #2
 800a012:	e0b3      	b.n	800a17c <HAL_TIM_ConfigClockSource+0x180>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2202      	movs	r2, #2
 800a020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	689b      	ldr	r3, [r3, #8]
 800a02a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a032:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a03a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	68fa      	ldr	r2, [r7, #12]
 800a042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a04c:	d03e      	beq.n	800a0cc <HAL_TIM_ConfigClockSource+0xd0>
 800a04e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a052:	f200 8087 	bhi.w	800a164 <HAL_TIM_ConfigClockSource+0x168>
 800a056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a05a:	f000 8085 	beq.w	800a168 <HAL_TIM_ConfigClockSource+0x16c>
 800a05e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a062:	d87f      	bhi.n	800a164 <HAL_TIM_ConfigClockSource+0x168>
 800a064:	2b70      	cmp	r3, #112	; 0x70
 800a066:	d01a      	beq.n	800a09e <HAL_TIM_ConfigClockSource+0xa2>
 800a068:	2b70      	cmp	r3, #112	; 0x70
 800a06a:	d87b      	bhi.n	800a164 <HAL_TIM_ConfigClockSource+0x168>
 800a06c:	2b60      	cmp	r3, #96	; 0x60
 800a06e:	d050      	beq.n	800a112 <HAL_TIM_ConfigClockSource+0x116>
 800a070:	2b60      	cmp	r3, #96	; 0x60
 800a072:	d877      	bhi.n	800a164 <HAL_TIM_ConfigClockSource+0x168>
 800a074:	2b50      	cmp	r3, #80	; 0x50
 800a076:	d03c      	beq.n	800a0f2 <HAL_TIM_ConfigClockSource+0xf6>
 800a078:	2b50      	cmp	r3, #80	; 0x50
 800a07a:	d873      	bhi.n	800a164 <HAL_TIM_ConfigClockSource+0x168>
 800a07c:	2b40      	cmp	r3, #64	; 0x40
 800a07e:	d058      	beq.n	800a132 <HAL_TIM_ConfigClockSource+0x136>
 800a080:	2b40      	cmp	r3, #64	; 0x40
 800a082:	d86f      	bhi.n	800a164 <HAL_TIM_ConfigClockSource+0x168>
 800a084:	2b30      	cmp	r3, #48	; 0x30
 800a086:	d064      	beq.n	800a152 <HAL_TIM_ConfigClockSource+0x156>
 800a088:	2b30      	cmp	r3, #48	; 0x30
 800a08a:	d86b      	bhi.n	800a164 <HAL_TIM_ConfigClockSource+0x168>
 800a08c:	2b20      	cmp	r3, #32
 800a08e:	d060      	beq.n	800a152 <HAL_TIM_ConfigClockSource+0x156>
 800a090:	2b20      	cmp	r3, #32
 800a092:	d867      	bhi.n	800a164 <HAL_TIM_ConfigClockSource+0x168>
 800a094:	2b00      	cmp	r3, #0
 800a096:	d05c      	beq.n	800a152 <HAL_TIM_ConfigClockSource+0x156>
 800a098:	2b10      	cmp	r3, #16
 800a09a:	d05a      	beq.n	800a152 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a09c:	e062      	b.n	800a164 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6818      	ldr	r0, [r3, #0]
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	6899      	ldr	r1, [r3, #8]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	685a      	ldr	r2, [r3, #4]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	f000 f9b5 	bl	800a41c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a0c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	609a      	str	r2, [r3, #8]
      break;
 800a0ca:	e04e      	b.n	800a16a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	6818      	ldr	r0, [r3, #0]
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	6899      	ldr	r1, [r3, #8]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	f000 f99e 	bl	800a41c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	689a      	ldr	r2, [r3, #8]
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0ee:	609a      	str	r2, [r3, #8]
      break;
 800a0f0:	e03b      	b.n	800a16a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	6818      	ldr	r0, [r3, #0]
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	6859      	ldr	r1, [r3, #4]
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	461a      	mov	r2, r3
 800a100:	f000 f912 	bl	800a328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2150      	movs	r1, #80	; 0x50
 800a10a:	4618      	mov	r0, r3
 800a10c:	f000 f96b 	bl	800a3e6 <TIM_ITRx_SetConfig>
      break;
 800a110:	e02b      	b.n	800a16a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	6818      	ldr	r0, [r3, #0]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	6859      	ldr	r1, [r3, #4]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	461a      	mov	r2, r3
 800a120:	f000 f931 	bl	800a386 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	2160      	movs	r1, #96	; 0x60
 800a12a:	4618      	mov	r0, r3
 800a12c:	f000 f95b 	bl	800a3e6 <TIM_ITRx_SetConfig>
      break;
 800a130:	e01b      	b.n	800a16a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6818      	ldr	r0, [r3, #0]
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	6859      	ldr	r1, [r3, #4]
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	461a      	mov	r2, r3
 800a140:	f000 f8f2 	bl	800a328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2140      	movs	r1, #64	; 0x40
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 f94b 	bl	800a3e6 <TIM_ITRx_SetConfig>
      break;
 800a150:	e00b      	b.n	800a16a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	4619      	mov	r1, r3
 800a15c:	4610      	mov	r0, r2
 800a15e:	f000 f942 	bl	800a3e6 <TIM_ITRx_SetConfig>
        break;
 800a162:	e002      	b.n	800a16a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a164:	bf00      	nop
 800a166:	e000      	b.n	800a16a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a168:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2201      	movs	r2, #1
 800a16e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a17a:	2300      	movs	r3, #0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a184:	b480      	push	{r7}
 800a186:	b083      	sub	sp, #12
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a18c:	bf00      	nop
 800a18e:	370c      	adds	r7, #12
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr

0800a198 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a1a0:	bf00      	nop
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b083      	sub	sp, #12
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a1c8:	bf00      	nop
 800a1ca:	370c      	adds	r7, #12
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d2:	4770      	bx	lr

0800a1d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1dc:	bf00      	nop
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	4a40      	ldr	r2, [pc, #256]	; (800a2fc <TIM_Base_SetConfig+0x114>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d013      	beq.n	800a228 <TIM_Base_SetConfig+0x40>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a206:	d00f      	beq.n	800a228 <TIM_Base_SetConfig+0x40>
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a3d      	ldr	r2, [pc, #244]	; (800a300 <TIM_Base_SetConfig+0x118>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d00b      	beq.n	800a228 <TIM_Base_SetConfig+0x40>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a3c      	ldr	r2, [pc, #240]	; (800a304 <TIM_Base_SetConfig+0x11c>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d007      	beq.n	800a228 <TIM_Base_SetConfig+0x40>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a3b      	ldr	r2, [pc, #236]	; (800a308 <TIM_Base_SetConfig+0x120>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d003      	beq.n	800a228 <TIM_Base_SetConfig+0x40>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a3a      	ldr	r2, [pc, #232]	; (800a30c <TIM_Base_SetConfig+0x124>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d108      	bne.n	800a23a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a22e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	4313      	orrs	r3, r2
 800a238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	4a2f      	ldr	r2, [pc, #188]	; (800a2fc <TIM_Base_SetConfig+0x114>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d02b      	beq.n	800a29a <TIM_Base_SetConfig+0xb2>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a248:	d027      	beq.n	800a29a <TIM_Base_SetConfig+0xb2>
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	4a2c      	ldr	r2, [pc, #176]	; (800a300 <TIM_Base_SetConfig+0x118>)
 800a24e:	4293      	cmp	r3, r2
 800a250:	d023      	beq.n	800a29a <TIM_Base_SetConfig+0xb2>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	4a2b      	ldr	r2, [pc, #172]	; (800a304 <TIM_Base_SetConfig+0x11c>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d01f      	beq.n	800a29a <TIM_Base_SetConfig+0xb2>
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	4a2a      	ldr	r2, [pc, #168]	; (800a308 <TIM_Base_SetConfig+0x120>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d01b      	beq.n	800a29a <TIM_Base_SetConfig+0xb2>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	4a29      	ldr	r2, [pc, #164]	; (800a30c <TIM_Base_SetConfig+0x124>)
 800a266:	4293      	cmp	r3, r2
 800a268:	d017      	beq.n	800a29a <TIM_Base_SetConfig+0xb2>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	4a28      	ldr	r2, [pc, #160]	; (800a310 <TIM_Base_SetConfig+0x128>)
 800a26e:	4293      	cmp	r3, r2
 800a270:	d013      	beq.n	800a29a <TIM_Base_SetConfig+0xb2>
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	4a27      	ldr	r2, [pc, #156]	; (800a314 <TIM_Base_SetConfig+0x12c>)
 800a276:	4293      	cmp	r3, r2
 800a278:	d00f      	beq.n	800a29a <TIM_Base_SetConfig+0xb2>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a26      	ldr	r2, [pc, #152]	; (800a318 <TIM_Base_SetConfig+0x130>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d00b      	beq.n	800a29a <TIM_Base_SetConfig+0xb2>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a25      	ldr	r2, [pc, #148]	; (800a31c <TIM_Base_SetConfig+0x134>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d007      	beq.n	800a29a <TIM_Base_SetConfig+0xb2>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a24      	ldr	r2, [pc, #144]	; (800a320 <TIM_Base_SetConfig+0x138>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d003      	beq.n	800a29a <TIM_Base_SetConfig+0xb2>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a23      	ldr	r2, [pc, #140]	; (800a324 <TIM_Base_SetConfig+0x13c>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d108      	bne.n	800a2ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a2a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	68db      	ldr	r3, [r3, #12]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	695b      	ldr	r3, [r3, #20]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68fa      	ldr	r2, [r7, #12]
 800a2be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	689a      	ldr	r2, [r3, #8]
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	4a0a      	ldr	r2, [pc, #40]	; (800a2fc <TIM_Base_SetConfig+0x114>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d003      	beq.n	800a2e0 <TIM_Base_SetConfig+0xf8>
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	4a0c      	ldr	r2, [pc, #48]	; (800a30c <TIM_Base_SetConfig+0x124>)
 800a2dc:	4293      	cmp	r3, r2
 800a2de:	d103      	bne.n	800a2e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	691a      	ldr	r2, [r3, #16]
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	615a      	str	r2, [r3, #20]
}
 800a2ee:	bf00      	nop
 800a2f0:	3714      	adds	r7, #20
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	40010000 	.word	0x40010000
 800a300:	40000400 	.word	0x40000400
 800a304:	40000800 	.word	0x40000800
 800a308:	40000c00 	.word	0x40000c00
 800a30c:	40010400 	.word	0x40010400
 800a310:	40014000 	.word	0x40014000
 800a314:	40014400 	.word	0x40014400
 800a318:	40014800 	.word	0x40014800
 800a31c:	40001800 	.word	0x40001800
 800a320:	40001c00 	.word	0x40001c00
 800a324:	40002000 	.word	0x40002000

0800a328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a328:	b480      	push	{r7}
 800a32a:	b087      	sub	sp, #28
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	60f8      	str	r0, [r7, #12]
 800a330:	60b9      	str	r1, [r7, #8]
 800a332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6a1b      	ldr	r3, [r3, #32]
 800a338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	f023 0201 	bic.w	r2, r3, #1
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	699b      	ldr	r3, [r3, #24]
 800a34a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	011b      	lsls	r3, r3, #4
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	4313      	orrs	r3, r2
 800a35c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a35e:	697b      	ldr	r3, [r7, #20]
 800a360:	f023 030a 	bic.w	r3, r3, #10
 800a364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a366:	697a      	ldr	r2, [r7, #20]
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	4313      	orrs	r3, r2
 800a36c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	697a      	ldr	r2, [r7, #20]
 800a378:	621a      	str	r2, [r3, #32]
}
 800a37a:	bf00      	nop
 800a37c:	371c      	adds	r7, #28
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr

0800a386 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a386:	b480      	push	{r7}
 800a388:	b087      	sub	sp, #28
 800a38a:	af00      	add	r7, sp, #0
 800a38c:	60f8      	str	r0, [r7, #12]
 800a38e:	60b9      	str	r1, [r7, #8]
 800a390:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	6a1b      	ldr	r3, [r3, #32]
 800a396:	f023 0210 	bic.w	r2, r3, #16
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	699b      	ldr	r3, [r3, #24]
 800a3a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	6a1b      	ldr	r3, [r3, #32]
 800a3a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a3b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	031b      	lsls	r3, r3, #12
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a3c2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	011b      	lsls	r3, r3, #4
 800a3c8:	693a      	ldr	r2, [r7, #16]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	697a      	ldr	r2, [r7, #20]
 800a3d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	621a      	str	r2, [r3, #32]
}
 800a3da:	bf00      	nop
 800a3dc:	371c      	adds	r7, #28
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a3e6:	b480      	push	{r7}
 800a3e8:	b085      	sub	sp, #20
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
 800a3ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	689b      	ldr	r3, [r3, #8]
 800a3f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a3fe:	683a      	ldr	r2, [r7, #0]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	4313      	orrs	r3, r2
 800a404:	f043 0307 	orr.w	r3, r3, #7
 800a408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	609a      	str	r2, [r3, #8]
}
 800a410:	bf00      	nop
 800a412:	3714      	adds	r7, #20
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b087      	sub	sp, #28
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
 800a428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a436:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	021a      	lsls	r2, r3, #8
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	431a      	orrs	r2, r3
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	4313      	orrs	r3, r2
 800a444:	697a      	ldr	r2, [r7, #20]
 800a446:	4313      	orrs	r3, r2
 800a448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	697a      	ldr	r2, [r7, #20]
 800a44e:	609a      	str	r2, [r3, #8]
}
 800a450:	bf00      	nop
 800a452:	371c      	adds	r7, #28
 800a454:	46bd      	mov	sp, r7
 800a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45a:	4770      	bx	lr

0800a45c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a45c:	b480      	push	{r7}
 800a45e:	b085      	sub	sp, #20
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d101      	bne.n	800a474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a470:	2302      	movs	r3, #2
 800a472:	e05a      	b.n	800a52a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2202      	movs	r2, #2
 800a480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	689b      	ldr	r3, [r3, #8]
 800a492:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a49a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68fa      	ldr	r2, [r7, #12]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	68fa      	ldr	r2, [r7, #12]
 800a4ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a21      	ldr	r2, [pc, #132]	; (800a538 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d022      	beq.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a4c0:	d01d      	beq.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	4a1d      	ldr	r2, [pc, #116]	; (800a53c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a4c8:	4293      	cmp	r3, r2
 800a4ca:	d018      	beq.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a1b      	ldr	r2, [pc, #108]	; (800a540 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a4d2:	4293      	cmp	r3, r2
 800a4d4:	d013      	beq.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4a1a      	ldr	r2, [pc, #104]	; (800a544 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d00e      	beq.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	4a18      	ldr	r2, [pc, #96]	; (800a548 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d009      	beq.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a17      	ldr	r2, [pc, #92]	; (800a54c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d004      	beq.n	800a4fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a15      	ldr	r2, [pc, #84]	; (800a550 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d10c      	bne.n	800a518 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a504:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	685b      	ldr	r3, [r3, #4]
 800a50a:	68ba      	ldr	r2, [r7, #8]
 800a50c:	4313      	orrs	r3, r2
 800a50e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2201      	movs	r2, #1
 800a51c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a528:	2300      	movs	r3, #0
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3714      	adds	r7, #20
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr
 800a536:	bf00      	nop
 800a538:	40010000 	.word	0x40010000
 800a53c:	40000400 	.word	0x40000400
 800a540:	40000800 	.word	0x40000800
 800a544:	40000c00 	.word	0x40000c00
 800a548:	40010400 	.word	0x40010400
 800a54c:	40014000 	.word	0x40014000
 800a550:	40001800 	.word	0x40001800

0800a554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a554:	b480      	push	{r7}
 800a556:	b083      	sub	sp, #12
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a55c:	bf00      	nop
 800a55e:	370c      	adds	r7, #12
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a570:	bf00      	nop
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800a57c:	b480      	push	{r7}
 800a57e:	b085      	sub	sp, #20
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800a586:	2300      	movs	r3, #0
 800a588:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a594:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800a596:	68fa      	ldr	r2, [r7, #12]
 800a598:	4b20      	ldr	r3, [pc, #128]	; (800a61c <FSMC_NORSRAM_Init+0xa0>)
 800a59a:	4013      	ands	r3, r2
 800a59c:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a5a6:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800a5a8:	683b      	ldr	r3, [r7, #0]
 800a5aa:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800a5ac:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800a5b2:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800a5b8:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800a5be:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800a5c4:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800a5ca:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800a5d0:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800a5d6:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800a5dc:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800a5e2:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800a5e8:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a5ea:	68fa      	ldr	r2, [r7, #12]
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	689b      	ldr	r3, [r3, #8]
 800a5f4:	2b08      	cmp	r3, #8
 800a5f6:	d103      	bne.n	800a600 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5fe:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	681a      	ldr	r2, [r3, #0]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68f9      	ldr	r1, [r7, #12]
 800a608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3714      	adds	r7, #20
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	fff00080 	.word	0xfff00080

0800a620 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a620:	b480      	push	{r7}
 800a622:	b087      	sub	sp, #28
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800a62c:	2300      	movs	r3, #0
 800a62e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	1c5a      	adds	r2, r3, #1
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a63a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800a642:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a64e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800a656:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800a65e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	691b      	ldr	r3, [r3, #16]
 800a664:	3b01      	subs	r3, #1
 800a666:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a668:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	695b      	ldr	r3, [r3, #20]
 800a66e:	3b02      	subs	r3, #2
 800a670:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800a672:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a678:	4313      	orrs	r3, r2
 800a67a:	697a      	ldr	r2, [r7, #20]
 800a67c:	4313      	orrs	r3, r2
 800a67e:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	1c5a      	adds	r2, r3, #1
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6979      	ldr	r1, [r7, #20]
 800a688:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	371c      	adds	r7, #28
 800a692:	46bd      	mov	sp, r7
 800a694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a698:	4770      	bx	lr
	...

0800a69c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b087      	sub	sp, #28
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	60f8      	str	r0, [r7, #12]
 800a6a4:	60b9      	str	r1, [r7, #8]
 800a6a6:	607a      	str	r2, [r7, #4]
 800a6a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6b4:	d122      	bne.n	800a6fc <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6be:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	4b15      	ldr	r3, [pc, #84]	; (800a718 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a6d2:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	689b      	ldr	r3, [r3, #8]
 800a6d8:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800a6da:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	68db      	ldr	r3, [r3, #12]
 800a6e0:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800a6e2:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800a6e8:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800a6ea:	697a      	ldr	r2, [r7, #20]
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	6979      	ldr	r1, [r7, #20]
 800a6f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a6fa:	e005      	b.n	800a708 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	687a      	ldr	r2, [r7, #4]
 800a700:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800a708:	2300      	movs	r3, #0
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	371c      	adds	r7, #28
 800a70e:	46bd      	mov	sp, r7
 800a710:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	cff00000 	.word	0xcff00000

0800a71c <__errno>:
 800a71c:	4b01      	ldr	r3, [pc, #4]	; (800a724 <__errno+0x8>)
 800a71e:	6818      	ldr	r0, [r3, #0]
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop
 800a724:	20000048 	.word	0x20000048

0800a728 <__libc_init_array>:
 800a728:	b570      	push	{r4, r5, r6, lr}
 800a72a:	4d0d      	ldr	r5, [pc, #52]	; (800a760 <__libc_init_array+0x38>)
 800a72c:	4c0d      	ldr	r4, [pc, #52]	; (800a764 <__libc_init_array+0x3c>)
 800a72e:	1b64      	subs	r4, r4, r5
 800a730:	10a4      	asrs	r4, r4, #2
 800a732:	2600      	movs	r6, #0
 800a734:	42a6      	cmp	r6, r4
 800a736:	d109      	bne.n	800a74c <__libc_init_array+0x24>
 800a738:	4d0b      	ldr	r5, [pc, #44]	; (800a768 <__libc_init_array+0x40>)
 800a73a:	4c0c      	ldr	r4, [pc, #48]	; (800a76c <__libc_init_array+0x44>)
 800a73c:	f000 f908 	bl	800a950 <_init>
 800a740:	1b64      	subs	r4, r4, r5
 800a742:	10a4      	asrs	r4, r4, #2
 800a744:	2600      	movs	r6, #0
 800a746:	42a6      	cmp	r6, r4
 800a748:	d105      	bne.n	800a756 <__libc_init_array+0x2e>
 800a74a:	bd70      	pop	{r4, r5, r6, pc}
 800a74c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a750:	4798      	blx	r3
 800a752:	3601      	adds	r6, #1
 800a754:	e7ee      	b.n	800a734 <__libc_init_array+0xc>
 800a756:	f855 3b04 	ldr.w	r3, [r5], #4
 800a75a:	4798      	blx	r3
 800a75c:	3601      	adds	r6, #1
 800a75e:	e7f2      	b.n	800a746 <__libc_init_array+0x1e>
 800a760:	0800c224 	.word	0x0800c224
 800a764:	0800c224 	.word	0x0800c224
 800a768:	0800c224 	.word	0x0800c224
 800a76c:	0800c228 	.word	0x0800c228

0800a770 <memset>:
 800a770:	4402      	add	r2, r0
 800a772:	4603      	mov	r3, r0
 800a774:	4293      	cmp	r3, r2
 800a776:	d100      	bne.n	800a77a <memset+0xa>
 800a778:	4770      	bx	lr
 800a77a:	f803 1b01 	strb.w	r1, [r3], #1
 800a77e:	e7f9      	b.n	800a774 <memset+0x4>

0800a780 <sqrt>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	ed2d 8b02 	vpush	{d8}
 800a786:	ec55 4b10 	vmov	r4, r5, d0
 800a78a:	f000 f82d 	bl	800a7e8 <__ieee754_sqrt>
 800a78e:	4b15      	ldr	r3, [pc, #84]	; (800a7e4 <sqrt+0x64>)
 800a790:	eeb0 8a40 	vmov.f32	s16, s0
 800a794:	eef0 8a60 	vmov.f32	s17, s1
 800a798:	f993 3000 	ldrsb.w	r3, [r3]
 800a79c:	3301      	adds	r3, #1
 800a79e:	d019      	beq.n	800a7d4 <sqrt+0x54>
 800a7a0:	4622      	mov	r2, r4
 800a7a2:	462b      	mov	r3, r5
 800a7a4:	4620      	mov	r0, r4
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	f7f6 f964 	bl	8000a74 <__aeabi_dcmpun>
 800a7ac:	b990      	cbnz	r0, 800a7d4 <sqrt+0x54>
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	f7f6 f935 	bl	8000a24 <__aeabi_dcmplt>
 800a7ba:	b158      	cbz	r0, 800a7d4 <sqrt+0x54>
 800a7bc:	f7ff ffae 	bl	800a71c <__errno>
 800a7c0:	2321      	movs	r3, #33	; 0x21
 800a7c2:	6003      	str	r3, [r0, #0]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	4610      	mov	r0, r2
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	f7f5 ffe2 	bl	8000794 <__aeabi_ddiv>
 800a7d0:	ec41 0b18 	vmov	d8, r0, r1
 800a7d4:	eeb0 0a48 	vmov.f32	s0, s16
 800a7d8:	eef0 0a68 	vmov.f32	s1, s17
 800a7dc:	ecbd 8b02 	vpop	{d8}
 800a7e0:	bd38      	pop	{r3, r4, r5, pc}
 800a7e2:	bf00      	nop
 800a7e4:	200000ac 	.word	0x200000ac

0800a7e8 <__ieee754_sqrt>:
 800a7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ec:	ec55 4b10 	vmov	r4, r5, d0
 800a7f0:	4e56      	ldr	r6, [pc, #344]	; (800a94c <__ieee754_sqrt+0x164>)
 800a7f2:	43ae      	bics	r6, r5
 800a7f4:	ee10 0a10 	vmov	r0, s0
 800a7f8:	ee10 3a10 	vmov	r3, s0
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	462a      	mov	r2, r5
 800a800:	d110      	bne.n	800a824 <__ieee754_sqrt+0x3c>
 800a802:	ee10 2a10 	vmov	r2, s0
 800a806:	462b      	mov	r3, r5
 800a808:	f7f5 fe9a 	bl	8000540 <__aeabi_dmul>
 800a80c:	4602      	mov	r2, r0
 800a80e:	460b      	mov	r3, r1
 800a810:	4620      	mov	r0, r4
 800a812:	4629      	mov	r1, r5
 800a814:	f7f5 fcde 	bl	80001d4 <__adddf3>
 800a818:	4604      	mov	r4, r0
 800a81a:	460d      	mov	r5, r1
 800a81c:	ec45 4b10 	vmov	d0, r4, r5
 800a820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a824:	2d00      	cmp	r5, #0
 800a826:	dc10      	bgt.n	800a84a <__ieee754_sqrt+0x62>
 800a828:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a82c:	4330      	orrs	r0, r6
 800a82e:	d0f5      	beq.n	800a81c <__ieee754_sqrt+0x34>
 800a830:	b15d      	cbz	r5, 800a84a <__ieee754_sqrt+0x62>
 800a832:	ee10 2a10 	vmov	r2, s0
 800a836:	462b      	mov	r3, r5
 800a838:	ee10 0a10 	vmov	r0, s0
 800a83c:	f7f5 fcc8 	bl	80001d0 <__aeabi_dsub>
 800a840:	4602      	mov	r2, r0
 800a842:	460b      	mov	r3, r1
 800a844:	f7f5 ffa6 	bl	8000794 <__aeabi_ddiv>
 800a848:	e7e6      	b.n	800a818 <__ieee754_sqrt+0x30>
 800a84a:	1509      	asrs	r1, r1, #20
 800a84c:	d076      	beq.n	800a93c <__ieee754_sqrt+0x154>
 800a84e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a852:	07ce      	lsls	r6, r1, #31
 800a854:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a858:	bf5e      	ittt	pl
 800a85a:	0fda      	lsrpl	r2, r3, #31
 800a85c:	005b      	lslpl	r3, r3, #1
 800a85e:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a862:	0fda      	lsrs	r2, r3, #31
 800a864:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a868:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a86c:	2000      	movs	r0, #0
 800a86e:	106d      	asrs	r5, r5, #1
 800a870:	005b      	lsls	r3, r3, #1
 800a872:	f04f 0e16 	mov.w	lr, #22
 800a876:	4684      	mov	ip, r0
 800a878:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a87c:	eb0c 0401 	add.w	r4, ip, r1
 800a880:	4294      	cmp	r4, r2
 800a882:	bfde      	ittt	le
 800a884:	1b12      	suble	r2, r2, r4
 800a886:	eb04 0c01 	addle.w	ip, r4, r1
 800a88a:	1840      	addle	r0, r0, r1
 800a88c:	0052      	lsls	r2, r2, #1
 800a88e:	f1be 0e01 	subs.w	lr, lr, #1
 800a892:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a896:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a89a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a89e:	d1ed      	bne.n	800a87c <__ieee754_sqrt+0x94>
 800a8a0:	4671      	mov	r1, lr
 800a8a2:	2720      	movs	r7, #32
 800a8a4:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a8a8:	4562      	cmp	r2, ip
 800a8aa:	eb04 060e 	add.w	r6, r4, lr
 800a8ae:	dc02      	bgt.n	800a8b6 <__ieee754_sqrt+0xce>
 800a8b0:	d113      	bne.n	800a8da <__ieee754_sqrt+0xf2>
 800a8b2:	429e      	cmp	r6, r3
 800a8b4:	d811      	bhi.n	800a8da <__ieee754_sqrt+0xf2>
 800a8b6:	2e00      	cmp	r6, #0
 800a8b8:	eb06 0e04 	add.w	lr, r6, r4
 800a8bc:	da43      	bge.n	800a946 <__ieee754_sqrt+0x15e>
 800a8be:	f1be 0f00 	cmp.w	lr, #0
 800a8c2:	db40      	blt.n	800a946 <__ieee754_sqrt+0x15e>
 800a8c4:	f10c 0801 	add.w	r8, ip, #1
 800a8c8:	eba2 020c 	sub.w	r2, r2, ip
 800a8cc:	429e      	cmp	r6, r3
 800a8ce:	bf88      	it	hi
 800a8d0:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a8d4:	1b9b      	subs	r3, r3, r6
 800a8d6:	4421      	add	r1, r4
 800a8d8:	46c4      	mov	ip, r8
 800a8da:	0052      	lsls	r2, r2, #1
 800a8dc:	3f01      	subs	r7, #1
 800a8de:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a8e2:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a8e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a8ea:	d1dd      	bne.n	800a8a8 <__ieee754_sqrt+0xc0>
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	d006      	beq.n	800a8fe <__ieee754_sqrt+0x116>
 800a8f0:	1c4c      	adds	r4, r1, #1
 800a8f2:	bf13      	iteet	ne
 800a8f4:	3101      	addne	r1, #1
 800a8f6:	3001      	addeq	r0, #1
 800a8f8:	4639      	moveq	r1, r7
 800a8fa:	f021 0101 	bicne.w	r1, r1, #1
 800a8fe:	1043      	asrs	r3, r0, #1
 800a900:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a904:	0849      	lsrs	r1, r1, #1
 800a906:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a90a:	07c2      	lsls	r2, r0, #31
 800a90c:	bf48      	it	mi
 800a90e:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a912:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a916:	460c      	mov	r4, r1
 800a918:	463d      	mov	r5, r7
 800a91a:	e77f      	b.n	800a81c <__ieee754_sqrt+0x34>
 800a91c:	0ada      	lsrs	r2, r3, #11
 800a91e:	3815      	subs	r0, #21
 800a920:	055b      	lsls	r3, r3, #21
 800a922:	2a00      	cmp	r2, #0
 800a924:	d0fa      	beq.n	800a91c <__ieee754_sqrt+0x134>
 800a926:	02d7      	lsls	r7, r2, #11
 800a928:	d50a      	bpl.n	800a940 <__ieee754_sqrt+0x158>
 800a92a:	f1c1 0420 	rsb	r4, r1, #32
 800a92e:	fa23 f404 	lsr.w	r4, r3, r4
 800a932:	1e4d      	subs	r5, r1, #1
 800a934:	408b      	lsls	r3, r1
 800a936:	4322      	orrs	r2, r4
 800a938:	1b41      	subs	r1, r0, r5
 800a93a:	e788      	b.n	800a84e <__ieee754_sqrt+0x66>
 800a93c:	4608      	mov	r0, r1
 800a93e:	e7f0      	b.n	800a922 <__ieee754_sqrt+0x13a>
 800a940:	0052      	lsls	r2, r2, #1
 800a942:	3101      	adds	r1, #1
 800a944:	e7ef      	b.n	800a926 <__ieee754_sqrt+0x13e>
 800a946:	46e0      	mov	r8, ip
 800a948:	e7be      	b.n	800a8c8 <__ieee754_sqrt+0xe0>
 800a94a:	bf00      	nop
 800a94c:	7ff00000 	.word	0x7ff00000

0800a950 <_init>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	bf00      	nop
 800a954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a956:	bc08      	pop	{r3}
 800a958:	469e      	mov	lr, r3
 800a95a:	4770      	bx	lr

0800a95c <_fini>:
 800a95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a95e:	bf00      	nop
 800a960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a962:	bc08      	pop	{r3}
 800a964:	469e      	mov	lr, r3
 800a966:	4770      	bx	lr
