
BDS2_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007384  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000047fc  0800756c  0800756c  0001756c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd68  0800bd68  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  0800bd68  0800bd68  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bd68  0800bd68  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd68  0800bd68  0001bd68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd6c  0800bd6c  0001bd6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800bd70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000014  0800bd84  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000234  0800bd84  00020234  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122b1  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e9  00000000  00000000  000322ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001178  00000000  00000000  00034bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  00035d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001baa5  00000000  00000000  00036d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013123  00000000  00000000  00052835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a2bdc  00000000  00000000  00065958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00108534  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a60  00000000  00000000  00108588  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000014 	.word	0x20000014
 8000204:	00000000 	.word	0x00000000
 8000208:	08007554 	.word	0x08007554

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000018 	.word	0x20000018
 8000224:	08007554 	.word	0x08007554

08000228 <__aeabi_dmul>:
 8000228:	b570      	push	{r4, r5, r6, lr}
 800022a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000232:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000236:	bf1d      	ittte	ne
 8000238:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800023c:	ea94 0f0c 	teqne	r4, ip
 8000240:	ea95 0f0c 	teqne	r5, ip
 8000244:	f000 f8de 	bleq	8000404 <__aeabi_dmul+0x1dc>
 8000248:	442c      	add	r4, r5
 800024a:	ea81 0603 	eor.w	r6, r1, r3
 800024e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000252:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000256:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800025a:	bf18      	it	ne
 800025c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000260:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000268:	d038      	beq.n	80002dc <__aeabi_dmul+0xb4>
 800026a:	fba0 ce02 	umull	ip, lr, r0, r2
 800026e:	f04f 0500 	mov.w	r5, #0
 8000272:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000276:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800027a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027e:	f04f 0600 	mov.w	r6, #0
 8000282:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000286:	f09c 0f00 	teq	ip, #0
 800028a:	bf18      	it	ne
 800028c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000290:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000294:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000298:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800029c:	d204      	bcs.n	80002a8 <__aeabi_dmul+0x80>
 800029e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002a2:	416d      	adcs	r5, r5
 80002a4:	eb46 0606 	adc.w	r6, r6, r6
 80002a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002c0:	bf88      	it	hi
 80002c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c6:	d81e      	bhi.n	8000306 <__aeabi_dmul+0xde>
 80002c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002cc:	bf08      	it	eq
 80002ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002d2:	f150 0000 	adcs.w	r0, r0, #0
 80002d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002da:	bd70      	pop	{r4, r5, r6, pc}
 80002dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002e0:	ea46 0101 	orr.w	r1, r6, r1
 80002e4:	ea40 0002 	orr.w	r0, r0, r2
 80002e8:	ea81 0103 	eor.w	r1, r1, r3
 80002ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002f0:	bfc2      	ittt	gt
 80002f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002fa:	bd70      	popgt	{r4, r5, r6, pc}
 80002fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000300:	f04f 0e00 	mov.w	lr, #0
 8000304:	3c01      	subs	r4, #1
 8000306:	f300 80ab 	bgt.w	8000460 <__aeabi_dmul+0x238>
 800030a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030e:	bfde      	ittt	le
 8000310:	2000      	movle	r0, #0
 8000312:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000316:	bd70      	pople	{r4, r5, r6, pc}
 8000318:	f1c4 0400 	rsb	r4, r4, #0
 800031c:	3c20      	subs	r4, #32
 800031e:	da35      	bge.n	800038c <__aeabi_dmul+0x164>
 8000320:	340c      	adds	r4, #12
 8000322:	dc1b      	bgt.n	800035c <__aeabi_dmul+0x134>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f305 	lsl.w	r3, r0, r5
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f205 	lsl.w	r2, r1, r5
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000340:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000344:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000348:	fa21 f604 	lsr.w	r6, r1, r4
 800034c:	eb42 0106 	adc.w	r1, r2, r6
 8000350:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000354:	bf08      	it	eq
 8000356:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800035a:	bd70      	pop	{r4, r5, r6, pc}
 800035c:	f1c4 040c 	rsb	r4, r4, #12
 8000360:	f1c4 0520 	rsb	r5, r4, #32
 8000364:	fa00 f304 	lsl.w	r3, r0, r4
 8000368:	fa20 f005 	lsr.w	r0, r0, r5
 800036c:	fa01 f204 	lsl.w	r2, r1, r4
 8000370:	ea40 0002 	orr.w	r0, r0, r2
 8000374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000378:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f1c4 0520 	rsb	r5, r4, #32
 8000390:	fa00 f205 	lsl.w	r2, r0, r5
 8000394:	ea4e 0e02 	orr.w	lr, lr, r2
 8000398:	fa20 f304 	lsr.w	r3, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea43 0302 	orr.w	r3, r3, r2
 80003a4:	fa21 f004 	lsr.w	r0, r1, r4
 80003a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	fa21 f204 	lsr.w	r2, r1, r4
 80003b0:	ea20 0002 	bic.w	r0, r0, r2
 80003b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f094 0f00 	teq	r4, #0
 80003c8:	d10f      	bne.n	80003ea <__aeabi_dmul+0x1c2>
 80003ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ce:	0040      	lsls	r0, r0, #1
 80003d0:	eb41 0101 	adc.w	r1, r1, r1
 80003d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d8:	bf08      	it	eq
 80003da:	3c01      	subeq	r4, #1
 80003dc:	d0f7      	beq.n	80003ce <__aeabi_dmul+0x1a6>
 80003de:	ea41 0106 	orr.w	r1, r1, r6
 80003e2:	f095 0f00 	teq	r5, #0
 80003e6:	bf18      	it	ne
 80003e8:	4770      	bxne	lr
 80003ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	eb43 0303 	adc.w	r3, r3, r3
 80003f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f8:	bf08      	it	eq
 80003fa:	3d01      	subeq	r5, #1
 80003fc:	d0f7      	beq.n	80003ee <__aeabi_dmul+0x1c6>
 80003fe:	ea43 0306 	orr.w	r3, r3, r6
 8000402:	4770      	bx	lr
 8000404:	ea94 0f0c 	teq	r4, ip
 8000408:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800040c:	bf18      	it	ne
 800040e:	ea95 0f0c 	teqne	r5, ip
 8000412:	d00c      	beq.n	800042e <__aeabi_dmul+0x206>
 8000414:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000418:	bf18      	it	ne
 800041a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041e:	d1d1      	bne.n	80003c4 <__aeabi_dmul+0x19c>
 8000420:	ea81 0103 	eor.w	r1, r1, r3
 8000424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd70      	pop	{r4, r5, r6, pc}
 800042e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000432:	bf06      	itte	eq
 8000434:	4610      	moveq	r0, r2
 8000436:	4619      	moveq	r1, r3
 8000438:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800043c:	d019      	beq.n	8000472 <__aeabi_dmul+0x24a>
 800043e:	ea94 0f0c 	teq	r4, ip
 8000442:	d102      	bne.n	800044a <__aeabi_dmul+0x222>
 8000444:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000448:	d113      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800044a:	ea95 0f0c 	teq	r5, ip
 800044e:	d105      	bne.n	800045c <__aeabi_dmul+0x234>
 8000450:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000454:	bf1c      	itt	ne
 8000456:	4610      	movne	r0, r2
 8000458:	4619      	movne	r1, r3
 800045a:	d10a      	bne.n	8000472 <__aeabi_dmul+0x24a>
 800045c:	ea81 0103 	eor.w	r1, r1, r3
 8000460:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000464:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd70      	pop	{r4, r5, r6, pc}
 8000472:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000476:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800047a:	bd70      	pop	{r4, r5, r6, pc}

0800047c <__aeabi_drsub>:
 800047c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000480:	e002      	b.n	8000488 <__adddf3>
 8000482:	bf00      	nop

08000484 <__aeabi_dsub>:
 8000484:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000488 <__adddf3>:
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000492:	ea94 0f05 	teq	r4, r5
 8000496:	bf08      	it	eq
 8000498:	ea90 0f02 	teqeq	r0, r2
 800049c:	bf1f      	itttt	ne
 800049e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ae:	f000 80e2 	beq.w	8000676 <__adddf3+0x1ee>
 80004b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ba:	bfb8      	it	lt
 80004bc:	426d      	neglt	r5, r5
 80004be:	dd0c      	ble.n	80004da <__adddf3+0x52>
 80004c0:	442c      	add	r4, r5
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	ea82 0000 	eor.w	r0, r2, r0
 80004ce:	ea83 0101 	eor.w	r1, r3, r1
 80004d2:	ea80 0202 	eor.w	r2, r0, r2
 80004d6:	ea81 0303 	eor.w	r3, r1, r3
 80004da:	2d36      	cmp	r5, #54	; 0x36
 80004dc:	bf88      	it	hi
 80004de:	bd30      	pophi	{r4, r5, pc}
 80004e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004f0:	d002      	beq.n	80004f8 <__adddf3+0x70>
 80004f2:	4240      	negs	r0, r0
 80004f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000500:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000504:	d002      	beq.n	800050c <__adddf3+0x84>
 8000506:	4252      	negs	r2, r2
 8000508:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800050c:	ea94 0f05 	teq	r4, r5
 8000510:	f000 80a7 	beq.w	8000662 <__adddf3+0x1da>
 8000514:	f1a4 0401 	sub.w	r4, r4, #1
 8000518:	f1d5 0e20 	rsbs	lr, r5, #32
 800051c:	db0d      	blt.n	800053a <__adddf3+0xb2>
 800051e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000522:	fa22 f205 	lsr.w	r2, r2, r5
 8000526:	1880      	adds	r0, r0, r2
 8000528:	f141 0100 	adc.w	r1, r1, #0
 800052c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000530:	1880      	adds	r0, r0, r2
 8000532:	fa43 f305 	asr.w	r3, r3, r5
 8000536:	4159      	adcs	r1, r3
 8000538:	e00e      	b.n	8000558 <__adddf3+0xd0>
 800053a:	f1a5 0520 	sub.w	r5, r5, #32
 800053e:	f10e 0e20 	add.w	lr, lr, #32
 8000542:	2a01      	cmp	r2, #1
 8000544:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000548:	bf28      	it	cs
 800054a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054e:	fa43 f305 	asr.w	r3, r3, r5
 8000552:	18c0      	adds	r0, r0, r3
 8000554:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	d507      	bpl.n	800056e <__adddf3+0xe6>
 800055e:	f04f 0e00 	mov.w	lr, #0
 8000562:	f1dc 0c00 	rsbs	ip, ip, #0
 8000566:	eb7e 0000 	sbcs.w	r0, lr, r0
 800056a:	eb6e 0101 	sbc.w	r1, lr, r1
 800056e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000572:	d31b      	bcc.n	80005ac <__adddf3+0x124>
 8000574:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000578:	d30c      	bcc.n	8000594 <__adddf3+0x10c>
 800057a:	0849      	lsrs	r1, r1, #1
 800057c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000580:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000584:	f104 0401 	add.w	r4, r4, #1
 8000588:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800058c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000590:	f080 809a 	bcs.w	80006c8 <__adddf3+0x240>
 8000594:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	ea41 0105 	orr.w	r1, r1, r5
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005b0:	4140      	adcs	r0, r0
 80005b2:	eb41 0101 	adc.w	r1, r1, r1
 80005b6:	3c01      	subs	r4, #1
 80005b8:	bf28      	it	cs
 80005ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005be:	d2e9      	bcs.n	8000594 <__adddf3+0x10c>
 80005c0:	f091 0f00 	teq	r1, #0
 80005c4:	bf04      	itt	eq
 80005c6:	4601      	moveq	r1, r0
 80005c8:	2000      	moveq	r0, #0
 80005ca:	fab1 f381 	clz	r3, r1
 80005ce:	bf08      	it	eq
 80005d0:	3320      	addeq	r3, #32
 80005d2:	f1a3 030b 	sub.w	r3, r3, #11
 80005d6:	f1b3 0220 	subs.w	r2, r3, #32
 80005da:	da0c      	bge.n	80005f6 <__adddf3+0x16e>
 80005dc:	320c      	adds	r2, #12
 80005de:	dd08      	ble.n	80005f2 <__adddf3+0x16a>
 80005e0:	f102 0c14 	add.w	ip, r2, #20
 80005e4:	f1c2 020c 	rsb	r2, r2, #12
 80005e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ec:	fa21 f102 	lsr.w	r1, r1, r2
 80005f0:	e00c      	b.n	800060c <__adddf3+0x184>
 80005f2:	f102 0214 	add.w	r2, r2, #20
 80005f6:	bfd8      	it	le
 80005f8:	f1c2 0c20 	rsble	ip, r2, #32
 80005fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000600:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000604:	bfdc      	itt	le
 8000606:	ea41 010c 	orrle.w	r1, r1, ip
 800060a:	4090      	lslle	r0, r2
 800060c:	1ae4      	subs	r4, r4, r3
 800060e:	bfa2      	ittt	ge
 8000610:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000614:	4329      	orrge	r1, r5
 8000616:	bd30      	popge	{r4, r5, pc}
 8000618:	ea6f 0404 	mvn.w	r4, r4
 800061c:	3c1f      	subs	r4, #31
 800061e:	da1c      	bge.n	800065a <__adddf3+0x1d2>
 8000620:	340c      	adds	r4, #12
 8000622:	dc0e      	bgt.n	8000642 <__adddf3+0x1ba>
 8000624:	f104 0414 	add.w	r4, r4, #20
 8000628:	f1c4 0220 	rsb	r2, r4, #32
 800062c:	fa20 f004 	lsr.w	r0, r0, r4
 8000630:	fa01 f302 	lsl.w	r3, r1, r2
 8000634:	ea40 0003 	orr.w	r0, r0, r3
 8000638:	fa21 f304 	lsr.w	r3, r1, r4
 800063c:	ea45 0103 	orr.w	r1, r5, r3
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	f1c4 040c 	rsb	r4, r4, #12
 8000646:	f1c4 0220 	rsb	r2, r4, #32
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 f304 	lsl.w	r3, r1, r4
 8000652:	ea40 0003 	orr.w	r0, r0, r3
 8000656:	4629      	mov	r1, r5
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	fa21 f004 	lsr.w	r0, r1, r4
 800065e:	4629      	mov	r1, r5
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	f094 0f00 	teq	r4, #0
 8000666:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800066a:	bf06      	itte	eq
 800066c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000670:	3401      	addeq	r4, #1
 8000672:	3d01      	subne	r5, #1
 8000674:	e74e      	b.n	8000514 <__adddf3+0x8c>
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf18      	it	ne
 800067c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000680:	d029      	beq.n	80006d6 <__adddf3+0x24e>
 8000682:	ea94 0f05 	teq	r4, r5
 8000686:	bf08      	it	eq
 8000688:	ea90 0f02 	teqeq	r0, r2
 800068c:	d005      	beq.n	800069a <__adddf3+0x212>
 800068e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000692:	bf04      	itt	eq
 8000694:	4619      	moveq	r1, r3
 8000696:	4610      	moveq	r0, r2
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	ea91 0f03 	teq	r1, r3
 800069e:	bf1e      	ittt	ne
 80006a0:	2100      	movne	r1, #0
 80006a2:	2000      	movne	r0, #0
 80006a4:	bd30      	popne	{r4, r5, pc}
 80006a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006aa:	d105      	bne.n	80006b8 <__adddf3+0x230>
 80006ac:	0040      	lsls	r0, r0, #1
 80006ae:	4149      	adcs	r1, r1
 80006b0:	bf28      	it	cs
 80006b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd30      	pop	{r4, r5, pc}
 80006b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006bc:	bf3c      	itt	cc
 80006be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006c2:	bd30      	popcc	{r4, r5, pc}
 80006c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006da:	bf1a      	itte	ne
 80006dc:	4619      	movne	r1, r3
 80006de:	4610      	movne	r0, r2
 80006e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e4:	bf1c      	itt	ne
 80006e6:	460b      	movne	r3, r1
 80006e8:	4602      	movne	r2, r0
 80006ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ee:	bf06      	itte	eq
 80006f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f4:	ea91 0f03 	teqeq	r1, r3
 80006f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006fc:	bd30      	pop	{r4, r5, pc}
 80006fe:	bf00      	nop

08000700 <__aeabi_ui2d>:
 8000700:	f090 0f00 	teq	r0, #0
 8000704:	bf04      	itt	eq
 8000706:	2100      	moveq	r1, #0
 8000708:	4770      	bxeq	lr
 800070a:	b530      	push	{r4, r5, lr}
 800070c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000710:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000714:	f04f 0500 	mov.w	r5, #0
 8000718:	f04f 0100 	mov.w	r1, #0
 800071c:	e750      	b.n	80005c0 <__adddf3+0x138>
 800071e:	bf00      	nop

08000720 <__aeabi_i2d>:
 8000720:	f090 0f00 	teq	r0, #0
 8000724:	bf04      	itt	eq
 8000726:	2100      	moveq	r1, #0
 8000728:	4770      	bxeq	lr
 800072a:	b530      	push	{r4, r5, lr}
 800072c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000730:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000734:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000738:	bf48      	it	mi
 800073a:	4240      	negmi	r0, r0
 800073c:	f04f 0100 	mov.w	r1, #0
 8000740:	e73e      	b.n	80005c0 <__adddf3+0x138>
 8000742:	bf00      	nop

08000744 <__aeabi_f2d>:
 8000744:	0042      	lsls	r2, r0, #1
 8000746:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800074a:	ea4f 0131 	mov.w	r1, r1, rrx
 800074e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000752:	bf1f      	itttt	ne
 8000754:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000758:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800075c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000760:	4770      	bxne	lr
 8000762:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000766:	bf08      	it	eq
 8000768:	4770      	bxeq	lr
 800076a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076e:	bf04      	itt	eq
 8000770:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 7460 	mov.w	r4, #896	; 0x380
 800077c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	e71c      	b.n	80005c0 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_ul2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f04f 0500 	mov.w	r5, #0
 8000796:	e00a      	b.n	80007ae <__aeabi_l2d+0x16>

08000798 <__aeabi_l2d>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	b530      	push	{r4, r5, lr}
 80007a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a6:	d502      	bpl.n	80007ae <__aeabi_l2d+0x16>
 80007a8:	4240      	negs	r0, r0
 80007aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ba:	f43f aed8 	beq.w	800056e <__adddf3+0xe6>
 80007be:	f04f 0203 	mov.w	r2, #3
 80007c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c6:	bf18      	it	ne
 80007c8:	3203      	addne	r2, #3
 80007ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ce:	bf18      	it	ne
 80007d0:	3203      	addne	r2, #3
 80007d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d6:	f1c2 0320 	rsb	r3, r2, #32
 80007da:	fa00 fc03 	lsl.w	ip, r0, r3
 80007de:	fa20 f002 	lsr.w	r0, r0, r2
 80007e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e6:	ea40 000e 	orr.w	r0, r0, lr
 80007ea:	fa21 f102 	lsr.w	r1, r1, r2
 80007ee:	4414      	add	r4, r2
 80007f0:	e6bd      	b.n	800056e <__adddf3+0xe6>
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2uiz>:
 80007f4:	004a      	lsls	r2, r1, #1
 80007f6:	d211      	bcs.n	800081c <__aeabi_d2uiz+0x28>
 80007f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007fc:	d211      	bcs.n	8000822 <__aeabi_d2uiz+0x2e>
 80007fe:	d50d      	bpl.n	800081c <__aeabi_d2uiz+0x28>
 8000800:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000804:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000808:	d40e      	bmi.n	8000828 <__aeabi_d2uiz+0x34>
 800080a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000812:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000816:	fa23 f002 	lsr.w	r0, r3, r2
 800081a:	4770      	bx	lr
 800081c:	f04f 0000 	mov.w	r0, #0
 8000820:	4770      	bx	lr
 8000822:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000826:	d102      	bne.n	800082e <__aeabi_d2uiz+0x3a>
 8000828:	f04f 30ff 	mov.w	r0, #4294967295
 800082c:	4770      	bx	lr
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	4770      	bx	lr

08000834 <SPI2_SetSpeed>:
//SPI速度设置函数
//SPI速度=fAPB1/分频系数
//@ref SPI_BaudRate_Prescaler:SPI_BAUDRATEPRESCALER_2~SPI_BAUDRATEPRESCALER_2 256
//fAPB1时钟一般为42Mhz：
void SPI2_SetSpeed(u8 SPI_BaudRatePrescaler)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
    assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler));//判断有效性
    __HAL_SPI_DISABLE(&hspi2);            //关闭SPI
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <SPI2_SetSpeed+0x58>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b11      	ldr	r3, [pc, #68]	; (800088c <SPI2_SetSpeed+0x58>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800084c:	601a      	str	r2, [r3, #0]
    hspi2.Instance->CR1&=0XFFC7;          //位3-5清零，用来设置波特率
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <SPI2_SetSpeed+0x58>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	6819      	ldr	r1, [r3, #0]
 8000854:	4b0d      	ldr	r3, [pc, #52]	; (800088c <SPI2_SetSpeed+0x58>)
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 800085c:	400b      	ands	r3, r1
 800085e:	6013      	str	r3, [r2, #0]
    hspi2.Instance->CR1|=SPI_BaudRatePrescaler;//设置SPI速度
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <SPI2_SetSpeed+0x58>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	6819      	ldr	r1, [r3, #0]
 8000866:	79fa      	ldrb	r2, [r7, #7]
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <SPI2_SetSpeed+0x58>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	430a      	orrs	r2, r1
 800086e:	601a      	str	r2, [r3, #0]
    __HAL_SPI_ENABLE(&hspi2);             //使能SPI
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <SPI2_SetSpeed+0x58>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <SPI2_SetSpeed+0x58>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800087e:	601a      	str	r2, [r3, #0]

}
 8000880:	bf00      	nop
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	2000003c 	.word	0x2000003c

08000890 <SPI2_ReadWriteByte>:

//SPI1 读写一个字节
//TxData:要写入的字节
//返回值:读取到的字节
u8 SPI2_ReadWriteByte(u8 TxData)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b086      	sub	sp, #24
 8000894:	af02      	add	r7, sp, #8
 8000896:	4603      	mov	r3, r0
 8000898:	71fb      	strb	r3, [r7, #7]
    u8 Rxdata;
    HAL_SPI_TransmitReceive(&hspi2,&TxData,&Rxdata,1, 1000);
 800089a:	f107 020f 	add.w	r2, r7, #15
 800089e:	1df9      	adds	r1, r7, #7
 80008a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	2301      	movs	r3, #1
 80008a8:	4803      	ldr	r0, [pc, #12]	; (80008b8 <SPI2_ReadWriteByte+0x28>)
 80008aa:	f005 fd97 	bl	80063dc <HAL_SPI_TransmitReceive>
 	return Rxdata;          		    //返回收到的数据
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000003c 	.word	0x2000003c

080008bc <NRF24L01_Init>:
    __HAL_SPI_ENABLE(&hspi2);                //使能SPI2
}

//初始化24L01的IO口
void NRF24L01_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
//	//GPIOG6上拉输入
//	GPIO_Initure.Pin=GPIO_PIN_6;			//PG6
//	GPIO_Initure.Mode=GPIO_MODE_INPUT;      //输入
//	HAL_GPIO_Init(GPIOG,&GPIO_Initure);     //初始化
//
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,GPIO_PIN_SET);//PB12输出1,防止SPI FLASH干扰NRF的通信
 80008c0:	2201      	movs	r2, #1
 80008c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <NRF24L01_Init+0x20>)
 80008c8:	f004 ff36 	bl	8005738 <HAL_GPIO_WritePin>
//
//	SPI2_Init();    		                //初始化SPI1
//    NRF24L01_SPI_Init();                    //针对NRF的特点修改SPI的设置
	NRF24L01_CE=0; 			                //使能24L01
 80008cc:	4b04      	ldr	r3, [pc, #16]	; (80008e0 <NRF24L01_Init+0x24>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
	NRF24L01_CSN=1;			                //SPI片选取消
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <NRF24L01_Init+0x28>)
 80008d4:	2201      	movs	r2, #1
 80008d6:	601a      	str	r2, [r3, #0]
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40010c00 	.word	0x40010c00
 80008e0:	422402a0 	.word	0x422402a0
 80008e4:	4224029c 	.word	0x4224029c

080008e8 <NRF24L01_Check>:
//检测24L01是否存在
//返回值:0，成功;1，失败
u8 NRF24L01_Check(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
	u8 buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 80008ee:	4a19      	ldr	r2, [pc, #100]	; (8000954 <NRF24L01_Check+0x6c>)
 80008f0:	463b      	mov	r3, r7
 80008f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008f6:	6018      	str	r0, [r3, #0]
 80008f8:	3304      	adds	r3, #4
 80008fa:	7019      	strb	r1, [r3, #0]
	u8 i;
	SPI2_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi速度为10.5Mhz（（24L01的最大SPI时钟为10Mhz,这里大一点没关系）
 80008fc:	2010      	movs	r0, #16
 80008fe:	f7ff ff99 	bl	8000834 <SPI2_SetSpeed>
	NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//写入5个字节的地址.
 8000902:	463b      	mov	r3, r7
 8000904:	2205      	movs	r2, #5
 8000906:	4619      	mov	r1, r3
 8000908:	2030      	movs	r0, #48	; 0x30
 800090a:	f000 f88f 	bl	8000a2c <NRF24L01_Write_Buf>
	NRF24L01_Read_Buf(TX_ADDR,buf,5); //读出写入的地址
 800090e:	463b      	mov	r3, r7
 8000910:	2205      	movs	r2, #5
 8000912:	4619      	mov	r1, r3
 8000914:	2010      	movs	r0, #16
 8000916:	f000 f85b 	bl	80009d0 <NRF24L01_Read_Buf>
	for(i=0;i<5;i++)if(buf[i]!=0XA5)break;
 800091a:	2300      	movs	r3, #0
 800091c:	71fb      	strb	r3, [r7, #7]
 800091e:	e00a      	b.n	8000936 <NRF24L01_Check+0x4e>
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	f107 0208 	add.w	r2, r7, #8
 8000926:	4413      	add	r3, r2
 8000928:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800092c:	2ba5      	cmp	r3, #165	; 0xa5
 800092e:	d106      	bne.n	800093e <NRF24L01_Check+0x56>
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	3301      	adds	r3, #1
 8000934:	71fb      	strb	r3, [r7, #7]
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b04      	cmp	r3, #4
 800093a:	d9f1      	bls.n	8000920 <NRF24L01_Check+0x38>
 800093c:	e000      	b.n	8000940 <NRF24L01_Check+0x58>
 800093e:	bf00      	nop
	if(i!=5)return 1;//检测24L01错误
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	2b05      	cmp	r3, #5
 8000944:	d001      	beq.n	800094a <NRF24L01_Check+0x62>
 8000946:	2301      	movs	r3, #1
 8000948:	e000      	b.n	800094c <NRF24L01_Check+0x64>
	return 0;		 //检测到24L01
 800094a:	2300      	movs	r3, #0
}
 800094c:	4618      	mov	r0, r3
 800094e:	3708      	adds	r7, #8
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	0800756c 	.word	0x0800756c

08000958 <NRF24L01_Write_Reg>:
//SPI写寄存器
//reg:指定寄存器地址
//value:写入的值
u8 NRF24L01_Write_Reg(u8 reg,u8 value)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	4613      	mov	r3, r2
 8000966:	71bb      	strb	r3, [r7, #6]
	u8 status;
   	NRF24L01_CSN=0;                 //使能SPI传输
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <NRF24L01_Write_Reg+0x3c>)
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
  	status =SPI2_ReadWriteByte(reg);//发送寄存器号
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff ff8d 	bl	8000890 <SPI2_ReadWriteByte>
 8000976:	4603      	mov	r3, r0
 8000978:	73fb      	strb	r3, [r7, #15]
  	SPI2_ReadWriteByte(value);      //写入寄存器的值
 800097a:	79bb      	ldrb	r3, [r7, #6]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff87 	bl	8000890 <SPI2_ReadWriteByte>
  	NRF24L01_CSN=1;                 //禁止SPI传输
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <NRF24L01_Write_Reg+0x3c>)
 8000984:	2201      	movs	r2, #1
 8000986:	601a      	str	r2, [r3, #0]
  	return(status);       		    //返回状态值
 8000988:	7bfb      	ldrb	r3, [r7, #15]
}
 800098a:	4618      	mov	r0, r3
 800098c:	3710      	adds	r7, #16
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	4224029c 	.word	0x4224029c

08000998 <NRF24L01_Read_Reg>:
//读取SPI寄存器值
//reg:要读的寄存器
u8 NRF24L01_Read_Reg(u8 reg)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]
	  u8 reg_val;
   	NRF24L01_CSN=0;             //使能SPI传输
 80009a2:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <NRF24L01_Read_Reg+0x34>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
  	SPI2_ReadWriteByte(reg);    //发送寄存器号
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ff70 	bl	8000890 <SPI2_ReadWriteByte>
  	reg_val=SPI2_ReadWriteByte(0XFF);//读取寄存器内容
 80009b0:	20ff      	movs	r0, #255	; 0xff
 80009b2:	f7ff ff6d 	bl	8000890 <SPI2_ReadWriteByte>
 80009b6:	4603      	mov	r3, r0
 80009b8:	73fb      	strb	r3, [r7, #15]
  	NRF24L01_CSN=1;             //禁止SPI传输
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <NRF24L01_Read_Reg+0x34>)
 80009bc:	2201      	movs	r2, #1
 80009be:	601a      	str	r2, [r3, #0]
  	return(reg_val);            //返回状态值
 80009c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3710      	adds	r7, #16
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	4224029c 	.word	0x4224029c

080009d0 <NRF24L01_Read_Buf>:
//reg:寄存器(位置)
//*pBuf:数据指针
//len:数据长度
//返回值,此次读到的状态寄存器值
u8 NRF24L01_Read_Buf(u8 reg,u8 *pBuf,u8 len)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	4603      	mov	r3, r0
 80009d8:	6039      	str	r1, [r7, #0]
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	4613      	mov	r3, r2
 80009de:	71bb      	strb	r3, [r7, #6]
	u8 status,u8_ctr;
  	NRF24L01_CSN=0;            //使能SPI传输
 80009e0:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <NRF24L01_Read_Buf+0x58>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
  	status=SPI2_ReadWriteByte(reg);//发送寄存器值(位置),并读取状态值
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff ff51 	bl	8000890 <SPI2_ReadWriteByte>
 80009ee:	4603      	mov	r3, r0
 80009f0:	73bb      	strb	r3, [r7, #14]
	for(u8_ctr=0;u8_ctr<len;u8_ctr++)pBuf[u8_ctr]=SPI2_ReadWriteByte(0XFF);//读出数据
 80009f2:	2300      	movs	r3, #0
 80009f4:	73fb      	strb	r3, [r7, #15]
 80009f6:	e00a      	b.n	8000a0e <NRF24L01_Read_Buf+0x3e>
 80009f8:	7bfb      	ldrb	r3, [r7, #15]
 80009fa:	683a      	ldr	r2, [r7, #0]
 80009fc:	18d4      	adds	r4, r2, r3
 80009fe:	20ff      	movs	r0, #255	; 0xff
 8000a00:	f7ff ff46 	bl	8000890 <SPI2_ReadWriteByte>
 8000a04:	4603      	mov	r3, r0
 8000a06:	7023      	strb	r3, [r4, #0]
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
 8000a0e:	7bfa      	ldrb	r2, [r7, #15]
 8000a10:	79bb      	ldrb	r3, [r7, #6]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d3f0      	bcc.n	80009f8 <NRF24L01_Read_Buf+0x28>
  	NRF24L01_CSN=1;            //关闭SPI传输
 8000a16:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <NRF24L01_Read_Buf+0x58>)
 8000a18:	2201      	movs	r2, #1
 8000a1a:	601a      	str	r2, [r3, #0]
  	return status;             //返回读到的状态值
 8000a1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3714      	adds	r7, #20
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd90      	pop	{r4, r7, pc}
 8000a26:	bf00      	nop
 8000a28:	4224029c 	.word	0x4224029c

08000a2c <NRF24L01_Write_Buf>:
//reg:寄存器(位置)
//*pBuf:数据指针
//len:数据长度
//返回值,此次读到的状态寄存器值
u8 NRF24L01_Write_Buf(u8 reg, u8 *pBuf, u8 len)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	6039      	str	r1, [r7, #0]
 8000a36:	71fb      	strb	r3, [r7, #7]
 8000a38:	4613      	mov	r3, r2
 8000a3a:	71bb      	strb	r3, [r7, #6]
	u8 status,u8_ctr;
	NRF24L01_CSN=0;             //使能SPI传输
 8000a3c:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <NRF24L01_Write_Buf+0x54>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
  	status = SPI2_ReadWriteByte(reg);//发送寄存器值(位置),并读取状态值
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	4618      	mov	r0, r3
 8000a46:	f7ff ff23 	bl	8000890 <SPI2_ReadWriteByte>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	73bb      	strb	r3, [r7, #14]
  	for(u8_ctr=0; u8_ctr<len; u8_ctr++)SPI2_ReadWriteByte(*pBuf++); //写入数据
 8000a4e:	2300      	movs	r3, #0
 8000a50:	73fb      	strb	r3, [r7, #15]
 8000a52:	e009      	b.n	8000a68 <NRF24L01_Write_Buf+0x3c>
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	603a      	str	r2, [r7, #0]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff ff17 	bl	8000890 <SPI2_ReadWriteByte>
 8000a62:	7bfb      	ldrb	r3, [r7, #15]
 8000a64:	3301      	adds	r3, #1
 8000a66:	73fb      	strb	r3, [r7, #15]
 8000a68:	7bfa      	ldrb	r2, [r7, #15]
 8000a6a:	79bb      	ldrb	r3, [r7, #6]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	d3f1      	bcc.n	8000a54 <NRF24L01_Write_Buf+0x28>
  	NRF24L01_CSN=1;             //关闭SPI传输
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <NRF24L01_Write_Buf+0x54>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	601a      	str	r2, [r3, #0]
  	return status;              //返回读到的状态值
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3710      	adds	r7, #16
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	4224029c 	.word	0x4224029c

08000a84 <NRF24L01_TxPacket>:
//启动NRF24L01发送一次数据
//txbuf:待发送数据首地址
//返回值:发送完成状况
u8 NRF24L01_TxPacket(u8 *txbuf)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
	u8 sta;
 	SPI2_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi速度为6.75Mhz（24L01的最大SPI时钟为10Mhz）
 8000a8c:	2010      	movs	r0, #16
 8000a8e:	f7ff fed1 	bl	8000834 <SPI2_SetSpeed>
	NRF24L01_CE=0;
 8000a92:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <NRF24L01_TxPacket+0x70>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
  	NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);//写数据到TX BUF  32个字节
 8000a98:	2220      	movs	r2, #32
 8000a9a:	6879      	ldr	r1, [r7, #4]
 8000a9c:	20a0      	movs	r0, #160	; 0xa0
 8000a9e:	f7ff ffc5 	bl	8000a2c <NRF24L01_Write_Buf>
 	NRF24L01_CE=1;                         //启动发送
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <NRF24L01_TxPacket+0x70>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	601a      	str	r2, [r3, #0]
	while(NRF24L01_IRQ!=0);                 //等待发送完成
 8000aa8:	bf00      	nop
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <NRF24L01_TxPacket+0x74>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d1fb      	bne.n	8000aaa <NRF24L01_TxPacket+0x26>
	sta=NRF24L01_Read_Reg(STATUS);          //读取状态寄存器的值
 8000ab2:	2007      	movs	r0, #7
 8000ab4:	f7ff ff70 	bl	8000998 <NRF24L01_Read_Reg>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
 8000abc:	7bfb      	ldrb	r3, [r7, #15]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	2027      	movs	r0, #39	; 0x27
 8000ac2:	f7ff ff49 	bl	8000958 <NRF24L01_Write_Reg>
	if(sta&MAX_TX)                          //达到最大重发次数
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
 8000ac8:	f003 0310 	and.w	r3, r3, #16
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d005      	beq.n	8000adc <NRF24L01_TxPacket+0x58>
	{
		NRF24L01_Write_Reg(FLUSH_TX,0xff);  //清除TX FIFO寄存器
 8000ad0:	21ff      	movs	r1, #255	; 0xff
 8000ad2:	20e1      	movs	r0, #225	; 0xe1
 8000ad4:	f7ff ff40 	bl	8000958 <NRF24L01_Write_Reg>
		return MAX_TX;
 8000ad8:	2310      	movs	r3, #16
 8000ada:	e007      	b.n	8000aec <NRF24L01_TxPacket+0x68>
	}
	if(sta&TX_OK)                           //发送完成
 8000adc:	7bfb      	ldrb	r3, [r7, #15]
 8000ade:	f003 0320 	and.w	r3, r3, #32
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <NRF24L01_TxPacket+0x66>
	{
		return TX_OK;
 8000ae6:	2320      	movs	r3, #32
 8000ae8:	e000      	b.n	8000aec <NRF24L01_TxPacket+0x68>
	}
	return 0xff;//其他原因发送失败
 8000aea:	23ff      	movs	r3, #255	; 0xff
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	422402a0 	.word	0x422402a0
 8000af8:	42240218 	.word	0x42240218

08000afc <NRF24L01_RxPacket>:
//启动NRF24L01发送一次数据
//txbuf:待发送数据首地址
//返回值:0，接收完成；其他，错误代码
u8 NRF24L01_RxPacket(u8 *rxbuf)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	u8 sta;
	SPI2_SetSpeed(SPI_BAUDRATEPRESCALER_8); //spi速度为6.75Mhz（24L01的最大SPI时钟为10Mhz）
 8000b04:	2010      	movs	r0, #16
 8000b06:	f7ff fe95 	bl	8000834 <SPI2_SetSpeed>
	sta=NRF24L01_Read_Reg(STATUS);          //读取状态寄存器的值
 8000b0a:	2007      	movs	r0, #7
 8000b0c:	f7ff ff44 	bl	8000998 <NRF24L01_Read_Reg>
 8000b10:	4603      	mov	r3, r0
 8000b12:	73fb      	strb	r3, [r7, #15]
	NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志
 8000b14:	7bfb      	ldrb	r3, [r7, #15]
 8000b16:	4619      	mov	r1, r3
 8000b18:	2027      	movs	r0, #39	; 0x27
 8000b1a:	f7ff ff1d 	bl	8000958 <NRF24L01_Write_Reg>
	if(sta&RX_OK)//接收到数据
 8000b1e:	7bfb      	ldrb	r3, [r7, #15]
 8000b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d00a      	beq.n	8000b3e <NRF24L01_RxPacket+0x42>
	{
		NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据
 8000b28:	2220      	movs	r2, #32
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	2061      	movs	r0, #97	; 0x61
 8000b2e:	f7ff ff4f 	bl	80009d0 <NRF24L01_Read_Buf>
		NRF24L01_Write_Reg(FLUSH_RX,0xff);  //清除RX FIFO寄存器
 8000b32:	21ff      	movs	r1, #255	; 0xff
 8000b34:	20e2      	movs	r0, #226	; 0xe2
 8000b36:	f7ff ff0f 	bl	8000958 <NRF24L01_Write_Reg>
		return 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e000      	b.n	8000b40 <NRF24L01_RxPacket+0x44>
	}
	return 1;//没收到任何数据
 8000b3e:	2301      	movs	r3, #1
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <NRF24L01_TX_Mode>:
//设置TX地址,写TX数据宽度,设置RX自动应答的地址,填充TX发送数据,选择RF频道,波特率和LNA HCURR
//PWR_UP,CRC使能
//当CE变高后,即进入RX模式,并可以接收数据了
//CE为高大于10us,则启动发送.
void NRF24L01_TX_Mode(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	NRF24L01_CE=0;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <NRF24L01_TX_Mode+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
	NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(u8*)TX_ADDRESS,TX_ADR_WIDTH);//写TX节点地址
 8000b52:	2205      	movs	r2, #5
 8000b54:	4913      	ldr	r1, [pc, #76]	; (8000ba4 <NRF24L01_TX_Mode+0x5c>)
 8000b56:	2030      	movs	r0, #48	; 0x30
 8000b58:	f7ff ff68 	bl	8000a2c <NRF24L01_Write_Buf>
	NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(u8*)RX_ADDRESS,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK
 8000b5c:	2205      	movs	r2, #5
 8000b5e:	4912      	ldr	r1, [pc, #72]	; (8000ba8 <NRF24L01_TX_Mode+0x60>)
 8000b60:	202a      	movs	r0, #42	; 0x2a
 8000b62:	f7ff ff63 	bl	8000a2c <NRF24L01_Write_Buf>

	NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答
 8000b66:	2101      	movs	r1, #1
 8000b68:	2021      	movs	r0, #33	; 0x21
 8000b6a:	f7ff fef5 	bl	8000958 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址
 8000b6e:	2101      	movs	r1, #1
 8000b70:	2022      	movs	r0, #34	; 0x22
 8000b72:	f7ff fef1 	bl	8000958 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0x1a);//设置自动重发间隔时间:500us + 86us;最大自动重发次数:10次
 8000b76:	211a      	movs	r1, #26
 8000b78:	2024      	movs	r0, #36	; 0x24
 8000b7a:	f7ff feed 	bl	8000958 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);       //设置RF通道为40
 8000b7e:	2128      	movs	r1, #40	; 0x28
 8000b80:	2025      	movs	r0, #37	; 0x25
 8000b82:	f7ff fee9 	bl	8000958 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启
 8000b86:	210f      	movs	r1, #15
 8000b88:	2026      	movs	r0, #38	; 0x26
 8000b8a:	f7ff fee5 	bl	8000958 <NRF24L01_Write_Reg>
	NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG,0x0e);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断
 8000b8e:	210e      	movs	r1, #14
 8000b90:	2020      	movs	r0, #32
 8000b92:	f7ff fee1 	bl	8000958 <NRF24L01_Write_Reg>
	NRF24L01_CE=1;//CE为高,10us后启动发送
 8000b96:	4b02      	ldr	r3, [pc, #8]	; (8000ba0 <NRF24L01_TX_Mode+0x58>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	601a      	str	r2, [r3, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	422402a0 	.word	0x422402a0
 8000ba4:	08007600 	.word	0x08007600
 8000ba8:	08007608 	.word	0x08007608

08000bac <delay_us>:

//延时nus
//nus为要延时的us数.
//nus:0~190887435(最大值即2^32/fac_us@fac_us=22.5)
void delay_us(u32 nus)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b089      	sub	sp, #36	; 0x24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	u32 ticks;
	u32 told,tnow,tcnt=0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61bb      	str	r3, [r7, #24]
	u32 reload=SysTick->LOAD;				//LOAD的值
 8000bb8:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <delay_us+0x74>)
 8000bba:	685b      	ldr	r3, [r3, #4]
 8000bbc:	617b      	str	r3, [r7, #20]
	ticks=nus*fac_us; 						//需要的节拍数
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <delay_us+0x78>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	fb02 f303 	mul.w	r3, r2, r3
 8000bc8:	613b      	str	r3, [r7, #16]
	told=SysTick->VAL;        				//刚进入时的计数器值
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <delay_us+0x74>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	61fb      	str	r3, [r7, #28]
	while(1)
	{
		tnow=SysTick->VAL;
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <delay_us+0x74>)
 8000bd2:	689b      	ldr	r3, [r3, #8]
 8000bd4:	60fb      	str	r3, [r7, #12]
		if(tnow!=told)
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	69fb      	ldr	r3, [r7, #28]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d0f8      	beq.n	8000bd0 <delay_us+0x24>
		{
			if(tnow<told)tcnt+=told-tnow;	//这里注意一下SYSTICK是一个递减的计数器就可以了.
 8000bde:	68fa      	ldr	r2, [r7, #12]
 8000be0:	69fb      	ldr	r3, [r7, #28]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d206      	bcs.n	8000bf4 <delay_us+0x48>
 8000be6:	69fa      	ldr	r2, [r7, #28]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4413      	add	r3, r2
 8000bf0:	61bb      	str	r3, [r7, #24]
 8000bf2:	e007      	b.n	8000c04 <delay_us+0x58>
			else tcnt+=reload-tnow+told;
 8000bf4:	697a      	ldr	r2, [r7, #20]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	1ad2      	subs	r2, r2, r3
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4413      	add	r3, r2
 8000c02:	61bb      	str	r3, [r7, #24]
			told=tnow;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	61fb      	str	r3, [r7, #28]
			if(tcnt>=ticks)break;			//时间超过/等于要延迟的时间,则退出.
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d200      	bcs.n	8000c12 <delay_us+0x66>
		tnow=SysTick->VAL;
 8000c10:	e7de      	b.n	8000bd0 <delay_us+0x24>
			if(tcnt>=ticks)break;			//时间超过/等于要延迟的时间,则退出.
 8000c12:	bf00      	nop
		}
	};
}
 8000c14:	bf00      	nop
 8000c16:	3724      	adds	r7, #36	; 0x24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010
 8000c24:	20000030 	.word	0x20000030

08000c28 <delay_ms>:

//延时nms
//nms:要延时的ms数
void delay_ms(u16 nms)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	80fb      	strh	r3, [r7, #6]
	u32 i;
	for(i=0;i<nms;i++) delay_us(1000);
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	e006      	b.n	8000c46 <delay_ms+0x1e>
 8000c38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c3c:	f7ff ffb6 	bl	8000bac <delay_us>
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	3301      	adds	r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	88fb      	ldrh	r3, [r7, #6]
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	429a      	cmp	r2, r3
 8000c4c:	d3f4      	bcc.n	8000c38 <delay_ms+0x10>
}
 8000c4e:	bf00      	nop
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <LCD_WR_REG>:
_lcd_dev lcddev;

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(vu16 regval)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	80fb      	strh	r3, [r7, #6]
	//regval=regval;		//使用-O2优化的时候,必须插入的延时
	LCD->LCD_REG=regval;//写入要写的寄存器序号
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <LCD_WR_REG+0x1c>)
 8000c64:	88fa      	ldrh	r2, [r7, #6]
 8000c66:	b292      	uxth	r2, r2
 8000c68:	801a      	strh	r2, [r3, #0]
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	6c0007fe 	.word	0x6c0007fe

08000c78 <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(vu16 data)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	80fb      	strh	r3, [r7, #6]
	//data=data;			//使用-O2优化的时候,必须插入的延时
	LCD->LCD_RAM=data;
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <LCD_WR_DATA+0x1c>)
 8000c84:	88fa      	ldrh	r2, [r7, #6]
 8000c86:	b292      	uxth	r2, r2
 8000c88:	805a      	strh	r2, [r3, #2]
}
 8000c8a:	bf00      	nop
 8000c8c:	370c      	adds	r7, #12
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	6c0007fe 	.word	0x6c0007fe

08000c98 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
u16 LCD_RD_DATA(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
	vu16 ram;			//防止被优化
	ram=LCD->LCD_RAM;
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <LCD_RD_DATA+0x1c>)
 8000ca0:	885b      	ldrh	r3, [r3, #2]
 8000ca2:	b29b      	uxth	r3, r3
 8000ca4:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000ca6:	88fb      	ldrh	r3, [r7, #6]
 8000ca8:	b29b      	uxth	r3, r3
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr
 8000cb4:	6c0007fe 	.word	0x6c0007fe

08000cb8 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(u16 LCD_Reg,u16 LCD_RegValue)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	460a      	mov	r2, r1
 8000cc2:	80fb      	strh	r3, [r7, #6]
 8000cc4:	4613      	mov	r3, r2
 8000cc6:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 8000cc8:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <LCD_WriteReg+0x28>)
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = LCD_RegValue;//写入数据
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <LCD_WriteReg+0x28>)
 8000cd0:	88bb      	ldrh	r3, [r7, #4]
 8000cd2:	8053      	strh	r3, [r2, #2]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	6c0007fe 	.word	0x6c0007fe

08000ce4 <LCD_WriteRAM_Prepare>:
	HAL_Delay(5);
	return LCD_RD_DATA();		//返回读到的值
}
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
 	LCD->LCD_REG=lcddev.wramcmd;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <LCD_WriteRAM_Prepare+0x14>)
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <LCD_WriteRAM_Prepare+0x18>)
 8000cec:	8912      	ldrh	r2, [r2, #8]
 8000cee:	801a      	strh	r2, [r3, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	6c0007fe 	.word	0x6c0007fe
 8000cfc:	200000dc 	.word	0x200000dc

08000d00 <LCD_SetCursor>:
}
//设置光标位置(对RGB屏无效)
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	460a      	mov	r2, r1
 8000d0a:	80fb      	strh	r3, [r7, #6]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8000d10:	4b6b      	ldr	r3, [pc, #428]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000d12:	889b      	ldrh	r3, [r3, #4]
 8000d14:	f249 3241 	movw	r2, #37697	; 0x9341
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d005      	beq.n	8000d28 <LCD_SetCursor+0x28>
 8000d1c:	4b68      	ldr	r3, [pc, #416]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000d1e:	889b      	ldrh	r3, [r3, #4]
 8000d20:	f245 3210 	movw	r2, #21264	; 0x5310
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d122      	bne.n	8000d6e <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8000d28:	4b65      	ldr	r3, [pc, #404]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000d2a:	895b      	ldrh	r3, [r3, #10]
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff93 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff9d 	bl	8000c78 <LCD_WR_DATA>
 8000d3e:	88fb      	ldrh	r3, [r7, #6]
 8000d40:	b2db      	uxtb	r3, r3
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff97 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8000d4a:	4b5d      	ldr	r3, [pc, #372]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000d4c:	899b      	ldrh	r3, [r3, #12]
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff ff82 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8000d54:	88bb      	ldrh	r3, [r7, #4]
 8000d56:	0a1b      	lsrs	r3, r3, #8
 8000d58:	b29b      	uxth	r3, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff ff8c 	bl	8000c78 <LCD_WR_DATA>
 8000d60:	88bb      	ldrh	r3, [r7, #4]
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	b29b      	uxth	r3, r3
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff86 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
	}
}
 8000d6c:	e0a3      	b.n	8000eb6 <LCD_SetCursor+0x1b6>
	}else if(lcddev.id==0X1963)
 8000d6e:	4b54      	ldr	r3, [pc, #336]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000d70:	889b      	ldrh	r3, [r3, #4]
 8000d72:	f641 1263 	movw	r2, #6499	; 0x1963
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d167      	bne.n	8000e4a <LCD_SetCursor+0x14a>
		if(lcddev.dir==0)//x坐标需要变换
 8000d7a:	4b51      	ldr	r3, [pc, #324]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000d7c:	799b      	ldrb	r3, [r3, #6]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d11e      	bne.n	8000dc0 <LCD_SetCursor+0xc0>
			Xpos=lcddev.width-1-Xpos;
 8000d82:	4b4f      	ldr	r3, [pc, #316]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000d84:	881a      	ldrh	r2, [r3, #0]
 8000d86:	88fb      	ldrh	r3, [r7, #6]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8000d90:	4b4b      	ldr	r3, [pc, #300]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000d92:	895b      	ldrh	r3, [r3, #10]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff5f 	bl	8000c58 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f7ff ff6c 	bl	8000c78 <LCD_WR_DATA>
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff ff69 	bl	8000c78 <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8000da6:	88fb      	ldrh	r3, [r7, #6]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff63 	bl	8000c78 <LCD_WR_DATA>
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff ff5d 	bl	8000c78 <LCD_WR_DATA>
 8000dbe:	e021      	b.n	8000e04 <LCD_SetCursor+0x104>
			LCD_WR_REG(lcddev.setxcmd);
 8000dc0:	4b3f      	ldr	r3, [pc, #252]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000dc2:	895b      	ldrh	r3, [r3, #10]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff47 	bl	8000c58 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	0a1b      	lsrs	r3, r3, #8
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff51 	bl	8000c78 <LCD_WR_DATA>
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff4b 	bl	8000c78 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8000de2:	4b37      	ldr	r3, [pc, #220]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000de4:	881b      	ldrh	r3, [r3, #0]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	121b      	asrs	r3, r3, #8
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff43 	bl	8000c78 <LCD_WR_DATA>
 8000df2:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000df4:	881b      	ldrh	r3, [r3, #0]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f7ff ff3a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8000e04:	4b2e      	ldr	r3, [pc, #184]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000e06:	899b      	ldrh	r3, [r3, #12]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff25 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8000e0e:	88bb      	ldrh	r3, [r7, #4]
 8000e10:	0a1b      	lsrs	r3, r3, #8
 8000e12:	b29b      	uxth	r3, r3
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff2f 	bl	8000c78 <LCD_WR_DATA>
 8000e1a:	88bb      	ldrh	r3, [r7, #4]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff29 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8000e26:	4b26      	ldr	r3, [pc, #152]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000e28:	885b      	ldrh	r3, [r3, #2]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	121b      	asrs	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff21 	bl	8000c78 <LCD_WR_DATA>
 8000e36:	4b22      	ldr	r3, [pc, #136]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000e38:	885b      	ldrh	r3, [r3, #2]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	b29b      	uxth	r3, r3
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ff18 	bl	8000c78 <LCD_WR_DATA>
}
 8000e48:	e035      	b.n	8000eb6 <LCD_SetCursor+0x1b6>
	}else if(lcddev.id==0X5510)
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000e4c:	889b      	ldrh	r3, [r3, #4]
 8000e4e:	f245 5210 	movw	r2, #21776	; 0x5510
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d12f      	bne.n	8000eb6 <LCD_SetCursor+0x1b6>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000e58:	895b      	ldrh	r3, [r3, #10]
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fefc 	bl	8000c58 <LCD_WR_REG>
 8000e60:	88fb      	ldrh	r3, [r7, #6]
 8000e62:	0a1b      	lsrs	r3, r3, #8
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff ff06 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000e6e:	895b      	ldrh	r3, [r3, #10]
 8000e70:	3301      	adds	r3, #1
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff feef 	bl	8000c58 <LCD_WR_REG>
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fef9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000e88:	899b      	ldrh	r3, [r3, #12]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fee4 	bl	8000c58 <LCD_WR_REG>
 8000e90:	88bb      	ldrh	r3, [r7, #4]
 8000e92:	0a1b      	lsrs	r3, r3, #8
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff feee 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 8000e9c:	4b08      	ldr	r3, [pc, #32]	; (8000ec0 <LCD_SetCursor+0x1c0>)
 8000e9e:	899b      	ldrh	r3, [r3, #12]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fed7 	bl	8000c58 <LCD_WR_REG>
 8000eaa:	88bb      	ldrh	r3, [r7, #4]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fee1 	bl	8000c78 <LCD_WR_DATA>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200000dc 	.word	0x200000dc

08000ec4 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(u8 dir)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	u16 regval=0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	81fb      	strh	r3, [r7, #14]
	u16 dirreg=0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	81bb      	strh	r3, [r7, #12]
	u16 temp;
	if((lcddev.dir==1&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对1963不改变扫描方向！竖屏时1963改变方向
 8000ed6:	4ba9      	ldr	r3, [pc, #676]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8000ed8:	799b      	ldrb	r3, [r3, #6]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d105      	bne.n	8000eea <LCD_Scan_Dir+0x26>
 8000ede:	4ba7      	ldr	r3, [pc, #668]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8000ee0:	889b      	ldrh	r3, [r3, #4]
 8000ee2:	f641 1263 	movw	r2, #6499	; 0x1963
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d109      	bne.n	8000efe <LCD_Scan_Dir+0x3a>
 8000eea:	4ba4      	ldr	r3, [pc, #656]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8000eec:	799b      	ldrb	r3, [r3, #6]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d134      	bne.n	8000f5c <LCD_Scan_Dir+0x98>
 8000ef2:	4ba2      	ldr	r3, [pc, #648]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8000ef4:	889b      	ldrh	r3, [r3, #4]
 8000ef6:	f641 1263 	movw	r2, #6499	; 0x1963
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d12e      	bne.n	8000f5c <LCD_Scan_Dir+0x98>
	{
		switch(dir)//方向转换
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b07      	cmp	r3, #7
 8000f02:	d82c      	bhi.n	8000f5e <LCD_Scan_Dir+0x9a>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <LCD_Scan_Dir+0x48>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000f2d 	.word	0x08000f2d
 8000f10:	08000f33 	.word	0x08000f33
 8000f14:	08000f39 	.word	0x08000f39
 8000f18:	08000f3f 	.word	0x08000f3f
 8000f1c:	08000f45 	.word	0x08000f45
 8000f20:	08000f4b 	.word	0x08000f4b
 8000f24:	08000f51 	.word	0x08000f51
 8000f28:	08000f57 	.word	0x08000f57
		{
			case 0:dir=6;break;
 8000f2c:	2306      	movs	r3, #6
 8000f2e:	71fb      	strb	r3, [r7, #7]
 8000f30:	e015      	b.n	8000f5e <LCD_Scan_Dir+0x9a>
			case 1:dir=7;break;
 8000f32:	2307      	movs	r3, #7
 8000f34:	71fb      	strb	r3, [r7, #7]
 8000f36:	e012      	b.n	8000f5e <LCD_Scan_Dir+0x9a>
			case 2:dir=4;break;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	e00f      	b.n	8000f5e <LCD_Scan_Dir+0x9a>
			case 3:dir=5;break;
 8000f3e:	2305      	movs	r3, #5
 8000f40:	71fb      	strb	r3, [r7, #7]
 8000f42:	e00c      	b.n	8000f5e <LCD_Scan_Dir+0x9a>
			case 4:dir=1;break;
 8000f44:	2301      	movs	r3, #1
 8000f46:	71fb      	strb	r3, [r7, #7]
 8000f48:	e009      	b.n	8000f5e <LCD_Scan_Dir+0x9a>
			case 5:dir=0;break;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	71fb      	strb	r3, [r7, #7]
 8000f4e:	e006      	b.n	8000f5e <LCD_Scan_Dir+0x9a>
			case 6:dir=3;break;
 8000f50:	2303      	movs	r3, #3
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	e003      	b.n	8000f5e <LCD_Scan_Dir+0x9a>
			case 7:dir=2;break;
 8000f56:	2302      	movs	r3, #2
 8000f58:	71fb      	strb	r3, [r7, #7]
 8000f5a:	e000      	b.n	8000f5e <LCD_Scan_Dir+0x9a>
		}
	}
 8000f5c:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/5310/5510/1963,特殊处理
 8000f5e:	4b87      	ldr	r3, [pc, #540]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8000f60:	889b      	ldrh	r3, [r3, #4]
 8000f62:	f249 3241 	movw	r2, #37697	; 0x9341
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d012      	beq.n	8000f90 <LCD_Scan_Dir+0xcc>
 8000f6a:	4b84      	ldr	r3, [pc, #528]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8000f6c:	889b      	ldrh	r3, [r3, #4]
 8000f6e:	f245 3210 	movw	r2, #21264	; 0x5310
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00c      	beq.n	8000f90 <LCD_Scan_Dir+0xcc>
 8000f76:	4b81      	ldr	r3, [pc, #516]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8000f78:	889b      	ldrh	r3, [r3, #4]
 8000f7a:	f245 5210 	movw	r2, #21776	; 0x5510
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d006      	beq.n	8000f90 <LCD_Scan_Dir+0xcc>
 8000f82:	4b7e      	ldr	r3, [pc, #504]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8000f84:	889b      	ldrh	r3, [r3, #4]
 8000f86:	f641 1263 	movw	r2, #6499	; 0x1963
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	f040 8130 	bne.w	80011f0 <LCD_Scan_Dir+0x32c>
	{
		switch(dir)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	2b07      	cmp	r3, #7
 8000f94:	d835      	bhi.n	8001002 <LCD_Scan_Dir+0x13e>
 8000f96:	a201      	add	r2, pc, #4	; (adr r2, 8000f9c <LCD_Scan_Dir+0xd8>)
 8000f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9c:	08001003 	.word	0x08001003
 8000fa0:	08000fbd 	.word	0x08000fbd
 8000fa4:	08000fc7 	.word	0x08000fc7
 8000fa8:	08000fd1 	.word	0x08000fd1
 8000fac:	08000fdb 	.word	0x08000fdb
 8000fb0:	08000fe5 	.word	0x08000fe5
 8000fb4:	08000fef 	.word	0x08000fef
 8000fb8:	08000ff9 	.word	0x08000ff9
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 8000fbc:	89fb      	ldrh	r3, [r7, #14]
 8000fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fc2:	81fb      	strh	r3, [r7, #14]
				break;
 8000fc4:	e01d      	b.n	8001002 <LCD_Scan_Dir+0x13e>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 8000fc6:	89fb      	ldrh	r3, [r7, #14]
 8000fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fcc:	81fb      	strh	r3, [r7, #14]
				break;
 8000fce:	e018      	b.n	8001002 <LCD_Scan_Dir+0x13e>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 8000fd0:	89fb      	ldrh	r3, [r7, #14]
 8000fd2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000fd6:	81fb      	strh	r3, [r7, #14]
				break;
 8000fd8:	e013      	b.n	8001002 <LCD_Scan_Dir+0x13e>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 8000fda:	89fb      	ldrh	r3, [r7, #14]
 8000fdc:	f043 0320 	orr.w	r3, r3, #32
 8000fe0:	81fb      	strh	r3, [r7, #14]
				break;
 8000fe2:	e00e      	b.n	8001002 <LCD_Scan_Dir+0x13e>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 8000fe4:	89fb      	ldrh	r3, [r7, #14]
 8000fe6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000fea:	81fb      	strh	r3, [r7, #14]
				break;
 8000fec:	e009      	b.n	8001002 <LCD_Scan_Dir+0x13e>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000ff4:	81fb      	strh	r3, [r7, #14]
				break;
 8000ff6:	e004      	b.n	8001002 <LCD_Scan_Dir+0x13e>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 8000ff8:	89fb      	ldrh	r3, [r7, #14]
 8000ffa:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8000ffe:	81fb      	strh	r3, [r7, #14]
				break;
 8001000:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 8001002:	4b5e      	ldr	r3, [pc, #376]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8001004:	889b      	ldrh	r3, [r3, #4]
 8001006:	f245 5210 	movw	r2, #21776	; 0x5510
 800100a:	4293      	cmp	r3, r2
 800100c:	d103      	bne.n	8001016 <LCD_Scan_Dir+0x152>
 800100e:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001012:	81bb      	strh	r3, [r7, #12]
 8001014:	e001      	b.n	800101a <LCD_Scan_Dir+0x156>
		else dirreg=0X36;
 8001016:	2336      	movs	r3, #54	; 0x36
 8001018:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 800101a:	4b58      	ldr	r3, [pc, #352]	; (800117c <LCD_Scan_Dir+0x2b8>)
 800101c:	889b      	ldrh	r3, [r3, #4]
 800101e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001022:	4293      	cmp	r3, r2
 8001024:	d00f      	beq.n	8001046 <LCD_Scan_Dir+0x182>
 8001026:	4b55      	ldr	r3, [pc, #340]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8001028:	889b      	ldrh	r3, [r3, #4]
 800102a:	f245 5210 	movw	r2, #21776	; 0x5510
 800102e:	4293      	cmp	r3, r2
 8001030:	d009      	beq.n	8001046 <LCD_Scan_Dir+0x182>
 8001032:	4b52      	ldr	r3, [pc, #328]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8001034:	889b      	ldrh	r3, [r3, #4]
 8001036:	f641 1263 	movw	r2, #6499	; 0x1963
 800103a:	4293      	cmp	r3, r2
 800103c:	d003      	beq.n	8001046 <LCD_Scan_Dir+0x182>
 800103e:	89fb      	ldrh	r3, [r7, #14]
 8001040:	f043 0308 	orr.w	r3, r3, #8
 8001044:	81fb      	strh	r3, [r7, #14]
 		LCD_WriteReg(dirreg,regval);
 8001046:	89fa      	ldrh	r2, [r7, #14]
 8001048:	89bb      	ldrh	r3, [r7, #12]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fe33 	bl	8000cb8 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 8001052:	4b4a      	ldr	r3, [pc, #296]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8001054:	889b      	ldrh	r3, [r3, #4]
 8001056:	f641 1263 	movw	r2, #6499	; 0x1963
 800105a:	4293      	cmp	r3, r2
 800105c:	d025      	beq.n	80010aa <LCD_Scan_Dir+0x1e6>
		{
			if(regval&0X20)
 800105e:	89fb      	ldrh	r3, [r7, #14]
 8001060:	f003 0320 	and.w	r3, r3, #32
 8001064:	2b00      	cmp	r3, #0
 8001066:	d010      	beq.n	800108a <LCD_Scan_Dir+0x1c6>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 8001068:	4b44      	ldr	r3, [pc, #272]	; (800117c <LCD_Scan_Dir+0x2b8>)
 800106a:	881a      	ldrh	r2, [r3, #0]
 800106c:	4b43      	ldr	r3, [pc, #268]	; (800117c <LCD_Scan_Dir+0x2b8>)
 800106e:	885b      	ldrh	r3, [r3, #2]
 8001070:	429a      	cmp	r2, r3
 8001072:	d21a      	bcs.n	80010aa <LCD_Scan_Dir+0x1e6>
				{
					temp=lcddev.width;
 8001074:	4b41      	ldr	r3, [pc, #260]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 800107a:	4b40      	ldr	r3, [pc, #256]	; (800117c <LCD_Scan_Dir+0x2b8>)
 800107c:	885a      	ldrh	r2, [r3, #2]
 800107e:	4b3f      	ldr	r3, [pc, #252]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8001080:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8001082:	4a3e      	ldr	r2, [pc, #248]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8001084:	897b      	ldrh	r3, [r7, #10]
 8001086:	8053      	strh	r3, [r2, #2]
 8001088:	e00f      	b.n	80010aa <LCD_Scan_Dir+0x1e6>
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 800108a:	4b3c      	ldr	r3, [pc, #240]	; (800117c <LCD_Scan_Dir+0x2b8>)
 800108c:	881a      	ldrh	r2, [r3, #0]
 800108e:	4b3b      	ldr	r3, [pc, #236]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8001090:	885b      	ldrh	r3, [r3, #2]
 8001092:	429a      	cmp	r2, r3
 8001094:	d909      	bls.n	80010aa <LCD_Scan_Dir+0x1e6>
				{
					temp=lcddev.width;
 8001096:	4b39      	ldr	r3, [pc, #228]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 800109c:	4b37      	ldr	r3, [pc, #220]	; (800117c <LCD_Scan_Dir+0x2b8>)
 800109e:	885a      	ldrh	r2, [r3, #2]
 80010a0:	4b36      	ldr	r3, [pc, #216]	; (800117c <LCD_Scan_Dir+0x2b8>)
 80010a2:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80010a4:	4a35      	ldr	r2, [pc, #212]	; (800117c <LCD_Scan_Dir+0x2b8>)
 80010a6:	897b      	ldrh	r3, [r7, #10]
 80010a8:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 80010aa:	4b34      	ldr	r3, [pc, #208]	; (800117c <LCD_Scan_Dir+0x2b8>)
 80010ac:	889b      	ldrh	r3, [r3, #4]
 80010ae:	f245 5210 	movw	r2, #21776	; 0x5510
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d164      	bne.n	8001180 <LCD_Scan_Dir+0x2bc>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 80010b6:	4b31      	ldr	r3, [pc, #196]	; (800117c <LCD_Scan_Dir+0x2b8>)
 80010b8:	895b      	ldrh	r3, [r3, #10]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fdcc 	bl	8000c58 <LCD_WR_REG>
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff fdd9 	bl	8000c78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 80010c6:	4b2d      	ldr	r3, [pc, #180]	; (800117c <LCD_Scan_Dir+0x2b8>)
 80010c8:	895b      	ldrh	r3, [r3, #10]
 80010ca:	3301      	adds	r3, #1
 80010cc:	b29b      	uxth	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fdc2 	bl	8000c58 <LCD_WR_REG>
 80010d4:	2000      	movs	r0, #0
 80010d6:	f7ff fdcf 	bl	8000c78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 80010da:	4b28      	ldr	r3, [pc, #160]	; (800117c <LCD_Scan_Dir+0x2b8>)
 80010dc:	895b      	ldrh	r3, [r3, #10]
 80010de:	3302      	adds	r3, #2
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fdb8 	bl	8000c58 <LCD_WR_REG>
 80010e8:	4b24      	ldr	r3, [pc, #144]	; (800117c <LCD_Scan_Dir+0x2b8>)
 80010ea:	881b      	ldrh	r3, [r3, #0]
 80010ec:	3b01      	subs	r3, #1
 80010ee:	121b      	asrs	r3, r3, #8
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fdc0 	bl	8000c78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 80010f8:	4b20      	ldr	r3, [pc, #128]	; (800117c <LCD_Scan_Dir+0x2b8>)
 80010fa:	895b      	ldrh	r3, [r3, #10]
 80010fc:	3303      	adds	r3, #3
 80010fe:	b29b      	uxth	r3, r3
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fda9 	bl	8000c58 <LCD_WR_REG>
 8001106:	4b1d      	ldr	r3, [pc, #116]	; (800117c <LCD_Scan_Dir+0x2b8>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	3b01      	subs	r3, #1
 800110c:	b29b      	uxth	r3, r3
 800110e:	b2db      	uxtb	r3, r3
 8001110:	b29b      	uxth	r3, r3
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff fdb0 	bl	8000c78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 8001118:	4b18      	ldr	r3, [pc, #96]	; (800117c <LCD_Scan_Dir+0x2b8>)
 800111a:	899b      	ldrh	r3, [r3, #12]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fd9b 	bl	8000c58 <LCD_WR_REG>
 8001122:	2000      	movs	r0, #0
 8001124:	f7ff fda8 	bl	8000c78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <LCD_Scan_Dir+0x2b8>)
 800112a:	899b      	ldrh	r3, [r3, #12]
 800112c:	3301      	adds	r3, #1
 800112e:	b29b      	uxth	r3, r3
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fd91 	bl	8000c58 <LCD_WR_REG>
 8001136:	2000      	movs	r0, #0
 8001138:	f7ff fd9e 	bl	8000c78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <LCD_Scan_Dir+0x2b8>)
 800113e:	899b      	ldrh	r3, [r3, #12]
 8001140:	3302      	adds	r3, #2
 8001142:	b29b      	uxth	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fd87 	bl	8000c58 <LCD_WR_REG>
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <LCD_Scan_Dir+0x2b8>)
 800114c:	885b      	ldrh	r3, [r3, #2]
 800114e:	3b01      	subs	r3, #1
 8001150:	121b      	asrs	r3, r3, #8
 8001152:	b29b      	uxth	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fd8f 	bl	8000c78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <LCD_Scan_Dir+0x2b8>)
 800115c:	899b      	ldrh	r3, [r3, #12]
 800115e:	3303      	adds	r3, #3
 8001160:	b29b      	uxth	r3, r3
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fd78 	bl	8000c58 <LCD_WR_REG>
 8001168:	4b04      	ldr	r3, [pc, #16]	; (800117c <LCD_Scan_Dir+0x2b8>)
 800116a:	885b      	ldrh	r3, [r3, #2]
 800116c:	3b01      	subs	r3, #1
 800116e:	b29b      	uxth	r3, r3
 8001170:	b2db      	uxtb	r3, r3
 8001172:	b29b      	uxth	r3, r3
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fd7f 	bl	8000c78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
			LCD_WR_DATA(0);LCD_WR_DATA(0);
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
		}
  	}
}
 800117a:	e039      	b.n	80011f0 <LCD_Scan_Dir+0x32c>
 800117c:	200000dc 	.word	0x200000dc
			LCD_WR_REG(lcddev.setxcmd);
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <LCD_Scan_Dir+0x334>)
 8001182:	895b      	ldrh	r3, [r3, #10]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fd67 	bl	8000c58 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 800118a:	2000      	movs	r0, #0
 800118c:	f7ff fd74 	bl	8000c78 <LCD_WR_DATA>
 8001190:	2000      	movs	r0, #0
 8001192:	f7ff fd71 	bl	8000c78 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <LCD_Scan_Dir+0x334>)
 8001198:	881b      	ldrh	r3, [r3, #0]
 800119a:	3b01      	subs	r3, #1
 800119c:	121b      	asrs	r3, r3, #8
 800119e:	b29b      	uxth	r3, r3
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fd69 	bl	8000c78 <LCD_WR_DATA>
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <LCD_Scan_Dir+0x334>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	b29b      	uxth	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fd60 	bl	8000c78 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <LCD_Scan_Dir+0x334>)
 80011ba:	899b      	ldrh	r3, [r3, #12]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fd4b 	bl	8000c58 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f7ff fd58 	bl	8000c78 <LCD_WR_DATA>
 80011c8:	2000      	movs	r0, #0
 80011ca:	f7ff fd55 	bl	8000c78 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <LCD_Scan_Dir+0x334>)
 80011d0:	885b      	ldrh	r3, [r3, #2]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	121b      	asrs	r3, r3, #8
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fd4d 	bl	8000c78 <LCD_WR_DATA>
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <LCD_Scan_Dir+0x334>)
 80011e0:	885b      	ldrh	r3, [r3, #2]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fd44 	bl	8000c78 <LCD_WR_DATA>
}
 80011f0:	bf00      	nop
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200000dc 	.word	0x200000dc

080011fc <LCD_Fast_DrawPoint>:
}
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(u16 x,u16 y,u32 color)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	603a      	str	r2, [r7, #0]
 8001206:	80fb      	strh	r3, [r7, #6]
 8001208:	460b      	mov	r3, r1
 800120a:	80bb      	strh	r3, [r7, #4]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 800120c:	4b5e      	ldr	r3, [pc, #376]	; (8001388 <LCD_Fast_DrawPoint+0x18c>)
 800120e:	889b      	ldrh	r3, [r3, #4]
 8001210:	f249 3241 	movw	r2, #37697	; 0x9341
 8001214:	4293      	cmp	r3, r2
 8001216:	d005      	beq.n	8001224 <LCD_Fast_DrawPoint+0x28>
 8001218:	4b5b      	ldr	r3, [pc, #364]	; (8001388 <LCD_Fast_DrawPoint+0x18c>)
 800121a:	889b      	ldrh	r3, [r3, #4]
 800121c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001220:	4293      	cmp	r3, r2
 8001222:	d122      	bne.n	800126a <LCD_Fast_DrawPoint+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8001224:	4b58      	ldr	r3, [pc, #352]	; (8001388 <LCD_Fast_DrawPoint+0x18c>)
 8001226:	895b      	ldrh	r3, [r3, #10]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fd15 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 800122e:	88fb      	ldrh	r3, [r7, #6]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	b29b      	uxth	r3, r3
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fd1f 	bl	8000c78 <LCD_WR_DATA>
 800123a:	88fb      	ldrh	r3, [r7, #6]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	b29b      	uxth	r3, r3
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fd19 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001246:	4b50      	ldr	r3, [pc, #320]	; (8001388 <LCD_Fast_DrawPoint+0x18c>)
 8001248:	899b      	ldrh	r3, [r3, #12]
 800124a:	4618      	mov	r0, r3
 800124c:	f7ff fd04 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001250:	88bb      	ldrh	r3, [r7, #4]
 8001252:	0a1b      	lsrs	r3, r3, #8
 8001254:	b29b      	uxth	r3, r3
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fd0e 	bl	8000c78 <LCD_WR_DATA>
 800125c:	88bb      	ldrh	r3, [r7, #4]
 800125e:	b2db      	uxtb	r3, r3
 8001260:	b29b      	uxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fd08 	bl	8000c78 <LCD_WR_DATA>
 8001268:	e081      	b.n	800136e <LCD_Fast_DrawPoint+0x172>
	}else if(lcddev.id==0X5510)
 800126a:	4b47      	ldr	r3, [pc, #284]	; (8001388 <LCD_Fast_DrawPoint+0x18c>)
 800126c:	889b      	ldrh	r3, [r3, #4]
 800126e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001272:	4293      	cmp	r3, r2
 8001274:	d130      	bne.n	80012d8 <LCD_Fast_DrawPoint+0xdc>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 8001276:	4b44      	ldr	r3, [pc, #272]	; (8001388 <LCD_Fast_DrawPoint+0x18c>)
 8001278:	895b      	ldrh	r3, [r3, #10]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fcec 	bl	8000c58 <LCD_WR_REG>
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	0a1b      	lsrs	r3, r3, #8
 8001284:	b29b      	uxth	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fcf6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 800128c:	4b3e      	ldr	r3, [pc, #248]	; (8001388 <LCD_Fast_DrawPoint+0x18c>)
 800128e:	895b      	ldrh	r3, [r3, #10]
 8001290:	3301      	adds	r3, #1
 8001292:	b29b      	uxth	r3, r3
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fcdf 	bl	8000c58 <LCD_WR_REG>
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	b29b      	uxth	r3, r3
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fce9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 80012a6:	4b38      	ldr	r3, [pc, #224]	; (8001388 <LCD_Fast_DrawPoint+0x18c>)
 80012a8:	899b      	ldrh	r3, [r3, #12]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fcd4 	bl	8000c58 <LCD_WR_REG>
 80012b0:	88bb      	ldrh	r3, [r7, #4]
 80012b2:	0a1b      	lsrs	r3, r3, #8
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fcde 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 80012bc:	4b32      	ldr	r3, [pc, #200]	; (8001388 <LCD_Fast_DrawPoint+0x18c>)
 80012be:	899b      	ldrh	r3, [r3, #12]
 80012c0:	3301      	adds	r3, #1
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fcc7 	bl	8000c58 <LCD_WR_REG>
 80012ca:	88bb      	ldrh	r3, [r7, #4]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fcd1 	bl	8000c78 <LCD_WR_DATA>
 80012d6:	e04a      	b.n	800136e <LCD_Fast_DrawPoint+0x172>
	}else if(lcddev.id==0X1963)
 80012d8:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <LCD_Fast_DrawPoint+0x18c>)
 80012da:	889b      	ldrh	r3, [r3, #4]
 80012dc:	f641 1263 	movw	r2, #6499	; 0x1963
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d144      	bne.n	800136e <LCD_Fast_DrawPoint+0x172>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <LCD_Fast_DrawPoint+0x18c>)
 80012e6:	799b      	ldrb	r3, [r3, #6]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d106      	bne.n	80012fa <LCD_Fast_DrawPoint+0xfe>
 80012ec:	4b26      	ldr	r3, [pc, #152]	; (8001388 <LCD_Fast_DrawPoint+0x18c>)
 80012ee:	881a      	ldrh	r2, [r3, #0]
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	3b01      	subs	r3, #1
 80012f8:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80012fa:	4b23      	ldr	r3, [pc, #140]	; (8001388 <LCD_Fast_DrawPoint+0x18c>)
 80012fc:	895b      	ldrh	r3, [r3, #10]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fcaa 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001304:	88fb      	ldrh	r3, [r7, #6]
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	b29b      	uxth	r3, r3
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fcb4 	bl	8000c78 <LCD_WR_DATA>
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	b2db      	uxtb	r3, r3
 8001314:	b29b      	uxth	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fcae 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	0a1b      	lsrs	r3, r3, #8
 8001320:	b29b      	uxth	r3, r3
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fca8 	bl	8000c78 <LCD_WR_DATA>
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	b2db      	uxtb	r3, r3
 800132c:	b29b      	uxth	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fca2 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <LCD_Fast_DrawPoint+0x18c>)
 8001336:	899b      	ldrh	r3, [r3, #12]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fc8d 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 800133e:	88bb      	ldrh	r3, [r7, #4]
 8001340:	0a1b      	lsrs	r3, r3, #8
 8001342:	b29b      	uxth	r3, r3
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fc97 	bl	8000c78 <LCD_WR_DATA>
 800134a:	88bb      	ldrh	r3, [r7, #4]
 800134c:	b2db      	uxtb	r3, r3
 800134e:	b29b      	uxth	r3, r3
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fc91 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001356:	88bb      	ldrh	r3, [r7, #4]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	b29b      	uxth	r3, r3
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff fc8b 	bl	8000c78 <LCD_WR_DATA>
 8001362:	88bb      	ldrh	r3, [r7, #4]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	b29b      	uxth	r3, r3
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fc85 	bl	8000c78 <LCD_WR_DATA>
	}
	LCD->LCD_REG=lcddev.wramcmd;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <LCD_Fast_DrawPoint+0x190>)
 8001370:	4a05      	ldr	r2, [pc, #20]	; (8001388 <LCD_Fast_DrawPoint+0x18c>)
 8001372:	8912      	ldrh	r2, [r2, #8]
 8001374:	801a      	strh	r2, [r3, #0]
	LCD->LCD_RAM=color;
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <LCD_Fast_DrawPoint+0x190>)
 8001378:	683a      	ldr	r2, [r7, #0]
 800137a:	b292      	uxth	r2, r2
 800137c:	805a      	strh	r2, [r3, #2]
}
 800137e:	bf00      	nop
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	200000dc 	.word	0x200000dc
 800138c:	6c0007fe 	.word	0x6c0007fe

08001390 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(u8 pwm)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 800139a:	20be      	movs	r0, #190	; 0xbe
 800139c:	f7ff fc5c 	bl	8000c58 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 80013a0:	2005      	movs	r0, #5
 80013a2:	f7ff fc69 	bl	8000c78 <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f9b9 	bl	8000720 <__aeabi_i2d>
 80013ae:	a310      	add	r3, pc, #64	; (adr r3, 80013f0 <LCD_SSD_BackLightSet+0x60>)
 80013b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b4:	f7fe ff38 	bl	8000228 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fa18 	bl	80007f4 <__aeabi_d2uiz>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fc55 	bl	8000c78 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff fc52 	bl	8000c78 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 80013d4:	20ff      	movs	r0, #255	; 0xff
 80013d6:	f7ff fc4f 	bl	8000c78 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff fc4c 	bl	8000c78 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 80013e0:	2000      	movs	r0, #0
 80013e2:	f7ff fc49 	bl	8000c78 <LCD_WR_DATA>
}
 80013e6:	bf00      	nop
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	66666666 	.word	0x66666666
 80013f4:	40046666 	.word	0x40046666

080013f8 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(u8 dir)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
	lcddev.dir=dir;		//竖屏/横屏
 8001402:	4a64      	ldr	r2, [pc, #400]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	7193      	strb	r3, [r2, #6]
	if(dir==0)			//竖屏
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d15e      	bne.n	80014cc <LCD_Display_Dir+0xd4>
	{
		lcddev.width=240;
 800140e:	4b61      	ldr	r3, [pc, #388]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001410:	22f0      	movs	r2, #240	; 0xf0
 8001412:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001414:	4b5f      	ldr	r3, [pc, #380]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001416:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800141a:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 800141c:	4b5d      	ldr	r3, [pc, #372]	; (8001594 <LCD_Display_Dir+0x19c>)
 800141e:	889b      	ldrh	r3, [r3, #4]
 8001420:	f249 3241 	movw	r2, #37697	; 0x9341
 8001424:	4293      	cmp	r3, r2
 8001426:	d005      	beq.n	8001434 <LCD_Display_Dir+0x3c>
 8001428:	4b5a      	ldr	r3, [pc, #360]	; (8001594 <LCD_Display_Dir+0x19c>)
 800142a:	889b      	ldrh	r3, [r3, #4]
 800142c:	f245 3210 	movw	r2, #21264	; 0x5310
 8001430:	4293      	cmp	r3, r2
 8001432:	d118      	bne.n	8001466 <LCD_Display_Dir+0x6e>
		{
			lcddev.wramcmd=0X2C;
 8001434:	4b57      	ldr	r3, [pc, #348]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001436:	222c      	movs	r2, #44	; 0x2c
 8001438:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 800143a:	4b56      	ldr	r3, [pc, #344]	; (8001594 <LCD_Display_Dir+0x19c>)
 800143c:	222a      	movs	r2, #42	; 0x2a
 800143e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001440:	4b54      	ldr	r3, [pc, #336]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001442:	222b      	movs	r2, #43	; 0x2b
 8001444:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X5310)
 8001446:	4b53      	ldr	r3, [pc, #332]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001448:	889b      	ldrh	r3, [r3, #4]
 800144a:	f245 3210 	movw	r2, #21264	; 0x5310
 800144e:	4293      	cmp	r3, r2
 8001450:	f040 8099 	bne.w	8001586 <LCD_Display_Dir+0x18e>
			{
				lcddev.width=320;
 8001454:	4b4f      	ldr	r3, [pc, #316]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001456:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800145a:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 800145c:	4b4d      	ldr	r3, [pc, #308]	; (8001594 <LCD_Display_Dir+0x19c>)
 800145e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001462:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X5310)
 8001464:	e08f      	b.n	8001586 <LCD_Display_Dir+0x18e>
			}
		}else if(lcddev.id==0x5510)
 8001466:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001468:	889b      	ldrh	r3, [r3, #4]
 800146a:	f245 5210 	movw	r2, #21776	; 0x5510
 800146e:	4293      	cmp	r3, r2
 8001470:	d114      	bne.n	800149c <LCD_Display_Dir+0xa4>
		{
			lcddev.wramcmd=0X2C00;
 8001472:	4b48      	ldr	r3, [pc, #288]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001474:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001478:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 800147a:	4b46      	ldr	r3, [pc, #280]	; (8001594 <LCD_Display_Dir+0x19c>)
 800147c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001480:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001482:	4b44      	ldr	r3, [pc, #272]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001484:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001488:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 800148a:	4b42      	ldr	r3, [pc, #264]	; (8001594 <LCD_Display_Dir+0x19c>)
 800148c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001490:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 8001492:	4b40      	ldr	r3, [pc, #256]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001494:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001498:	805a      	strh	r2, [r3, #2]
 800149a:	e074      	b.n	8001586 <LCD_Display_Dir+0x18e>
		}else if(lcddev.id==0X1963)
 800149c:	4b3d      	ldr	r3, [pc, #244]	; (8001594 <LCD_Display_Dir+0x19c>)
 800149e:	889b      	ldrh	r3, [r3, #4]
 80014a0:	f641 1263 	movw	r2, #6499	; 0x1963
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d16e      	bne.n	8001586 <LCD_Display_Dir+0x18e>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 80014a8:	4b3a      	ldr	r3, [pc, #232]	; (8001594 <LCD_Display_Dir+0x19c>)
 80014aa:	222c      	movs	r2, #44	; 0x2c
 80014ac:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 80014ae:	4b39      	ldr	r3, [pc, #228]	; (8001594 <LCD_Display_Dir+0x19c>)
 80014b0:	222b      	movs	r2, #43	; 0x2b
 80014b2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 80014b4:	4b37      	ldr	r3, [pc, #220]	; (8001594 <LCD_Display_Dir+0x19c>)
 80014b6:	222a      	movs	r2, #42	; 0x2a
 80014b8:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 80014ba:	4b36      	ldr	r3, [pc, #216]	; (8001594 <LCD_Display_Dir+0x19c>)
 80014bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80014c0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 80014c2:	4b34      	ldr	r3, [pc, #208]	; (8001594 <LCD_Display_Dir+0x19c>)
 80014c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80014c8:	805a      	strh	r2, [r3, #2]
 80014ca:	e05c      	b.n	8001586 <LCD_Display_Dir+0x18e>
		}
	}else 				//横屏
	{
		lcddev.width=320;
 80014cc:	4b31      	ldr	r3, [pc, #196]	; (8001594 <LCD_Display_Dir+0x19c>)
 80014ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014d2:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80014d4:	4b2f      	ldr	r3, [pc, #188]	; (8001594 <LCD_Display_Dir+0x19c>)
 80014d6:	22f0      	movs	r2, #240	; 0xf0
 80014d8:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 80014da:	4b2e      	ldr	r3, [pc, #184]	; (8001594 <LCD_Display_Dir+0x19c>)
 80014dc:	889b      	ldrh	r3, [r3, #4]
 80014de:	f249 3241 	movw	r2, #37697	; 0x9341
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d005      	beq.n	80014f2 <LCD_Display_Dir+0xfa>
 80014e6:	4b2b      	ldr	r3, [pc, #172]	; (8001594 <LCD_Display_Dir+0x19c>)
 80014e8:	889b      	ldrh	r3, [r3, #4]
 80014ea:	f245 3210 	movw	r2, #21264	; 0x5310
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d109      	bne.n	8001506 <LCD_Display_Dir+0x10e>
		{
			lcddev.wramcmd=0X2C;
 80014f2:	4b28      	ldr	r3, [pc, #160]	; (8001594 <LCD_Display_Dir+0x19c>)
 80014f4:	222c      	movs	r2, #44	; 0x2c
 80014f6:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 80014f8:	4b26      	ldr	r3, [pc, #152]	; (8001594 <LCD_Display_Dir+0x19c>)
 80014fa:	222a      	movs	r2, #42	; 0x2a
 80014fc:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 80014fe:	4b25      	ldr	r3, [pc, #148]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001500:	222b      	movs	r2, #43	; 0x2b
 8001502:	819a      	strh	r2, [r3, #12]
 8001504:	e031      	b.n	800156a <LCD_Display_Dir+0x172>
		}else if(lcddev.id==0x5510)
 8001506:	4b23      	ldr	r3, [pc, #140]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001508:	889b      	ldrh	r3, [r3, #4]
 800150a:	f245 5210 	movw	r2, #21776	; 0x5510
 800150e:	4293      	cmp	r3, r2
 8001510:	d114      	bne.n	800153c <LCD_Display_Dir+0x144>
		{
			lcddev.wramcmd=0X2C00;
 8001512:	4b20      	ldr	r3, [pc, #128]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001514:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001518:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 800151a:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <LCD_Display_Dir+0x19c>)
 800151c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001520:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001524:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001528:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <LCD_Display_Dir+0x19c>)
 800152c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001530:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 8001532:	4b18      	ldr	r3, [pc, #96]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001534:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001538:	805a      	strh	r2, [r3, #2]
 800153a:	e016      	b.n	800156a <LCD_Display_Dir+0x172>
		}else if(lcddev.id==0X1963)
 800153c:	4b15      	ldr	r3, [pc, #84]	; (8001594 <LCD_Display_Dir+0x19c>)
 800153e:	889b      	ldrh	r3, [r3, #4]
 8001540:	f641 1263 	movw	r2, #6499	; 0x1963
 8001544:	4293      	cmp	r3, r2
 8001546:	d110      	bne.n	800156a <LCD_Display_Dir+0x172>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8001548:	4b12      	ldr	r3, [pc, #72]	; (8001594 <LCD_Display_Dir+0x19c>)
 800154a:	222c      	movs	r2, #44	; 0x2c
 800154c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001550:	222a      	movs	r2, #42	; 0x2a
 8001552:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 8001554:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001556:	222b      	movs	r2, #43	; 0x2b
 8001558:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <LCD_Display_Dir+0x19c>)
 800155c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001560:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001564:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001568:	805a      	strh	r2, [r3, #2]
		}
		if(lcddev.id==0X5310)
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <LCD_Display_Dir+0x19c>)
 800156c:	889b      	ldrh	r3, [r3, #4]
 800156e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001572:	4293      	cmp	r3, r2
 8001574:	d107      	bne.n	8001586 <LCD_Display_Dir+0x18e>
		{
			lcddev.width=480;
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001578:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800157c:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 800157e:	4b05      	ldr	r3, [pc, #20]	; (8001594 <LCD_Display_Dir+0x19c>)
 8001580:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001584:	805a      	strh	r2, [r3, #2]
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8001586:	2000      	movs	r0, #0
 8001588:	f7ff fc9c 	bl	8000ec4 <LCD_Scan_Dir>
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	200000dc 	.word	0x200000dc

08001598 <LCD_Init>:


//初始化lcd
//该初始化函数可以初始化各种型号的LCD(详见本.c文件最前面的描述)
void LCD_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
	HAL_SRAM_Init(&TFTSRAM_Handler,&FSMC_ReadWriteTim,&FSMC_WriteTim);

	delay_ms(50); // delay 50 ms
*/
	//尝试9341 ID的读取
	LCD_WR_REG(0XD3);
 800159c:	20d3      	movs	r0, #211	; 0xd3
 800159e:	f7ff fb5b 	bl	8000c58 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80015a2:	f7ff fb79 	bl	8000c98 <LCD_RD_DATA>
 80015a6:	4603      	mov	r3, r0
 80015a8:	461a      	mov	r2, r3
 80015aa:	4b5c      	ldr	r3, [pc, #368]	; (800171c <LCD_Init+0x184>)
 80015ac:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//读到0X00
 80015ae:	f7ff fb73 	bl	8000c98 <LCD_RD_DATA>
 80015b2:	4603      	mov	r3, r0
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b59      	ldr	r3, [pc, #356]	; (800171c <LCD_Init+0x184>)
 80015b8:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//读取93
 80015ba:	f7ff fb6d 	bl	8000c98 <LCD_RD_DATA>
 80015be:	4603      	mov	r3, r0
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b56      	ldr	r3, [pc, #344]	; (800171c <LCD_Init+0x184>)
 80015c4:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80015c6:	4b55      	ldr	r3, [pc, #340]	; (800171c <LCD_Init+0x184>)
 80015c8:	889b      	ldrh	r3, [r3, #4]
 80015ca:	021b      	lsls	r3, r3, #8
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	4b53      	ldr	r3, [pc, #332]	; (800171c <LCD_Init+0x184>)
 80015d0:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//读取41
 80015d2:	f7ff fb61 	bl	8000c98 <LCD_RD_DATA>
 80015d6:	4603      	mov	r3, r0
 80015d8:	461a      	mov	r2, r3
 80015da:	4b50      	ldr	r3, [pc, #320]	; (800171c <LCD_Init+0x184>)
 80015dc:	889b      	ldrh	r3, [r3, #4]
 80015de:	4313      	orrs	r3, r2
 80015e0:	b29a      	uxth	r2, r3
 80015e2:	4b4e      	ldr	r3, [pc, #312]	; (800171c <LCD_Init+0x184>)
 80015e4:	809a      	strh	r2, [r3, #4]
	if(lcddev.id!=0X9341)		//非9341,尝试看看是不是NT35310
 80015e6:	4b4d      	ldr	r3, [pc, #308]	; (800171c <LCD_Init+0x184>)
 80015e8:	889b      	ldrh	r3, [r3, #4]
 80015ea:	f249 3241 	movw	r2, #37697	; 0x9341
 80015ee:	4293      	cmp	r3, r2
 80015f0:	f000 808b 	beq.w	800170a <LCD_Init+0x172>
	{
		LCD_WR_REG(0XD4);
 80015f4:	20d4      	movs	r0, #212	; 0xd4
 80015f6:	f7ff fb2f 	bl	8000c58 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();//dummy read
 80015fa:	f7ff fb4d 	bl	8000c98 <LCD_RD_DATA>
 80015fe:	4603      	mov	r3, r0
 8001600:	461a      	mov	r2, r3
 8001602:	4b46      	ldr	r3, [pc, #280]	; (800171c <LCD_Init+0x184>)
 8001604:	809a      	strh	r2, [r3, #4]
		lcddev.id=LCD_RD_DATA();//读回0X01
 8001606:	f7ff fb47 	bl	8000c98 <LCD_RD_DATA>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b43      	ldr	r3, [pc, #268]	; (800171c <LCD_Init+0x184>)
 8001610:	809a      	strh	r2, [r3, #4]
		lcddev.id=LCD_RD_DATA();//读回0X53
 8001612:	f7ff fb41 	bl	8000c98 <LCD_RD_DATA>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	4b40      	ldr	r3, [pc, #256]	; (800171c <LCD_Init+0x184>)
 800161c:	809a      	strh	r2, [r3, #4]
		lcddev.id<<=8;
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <LCD_Init+0x184>)
 8001620:	889b      	ldrh	r3, [r3, #4]
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b3d      	ldr	r3, [pc, #244]	; (800171c <LCD_Init+0x184>)
 8001628:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 800162a:	f7ff fb35 	bl	8000c98 <LCD_RD_DATA>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	4b3a      	ldr	r3, [pc, #232]	; (800171c <LCD_Init+0x184>)
 8001634:	889b      	ldrh	r3, [r3, #4]
 8001636:	4313      	orrs	r3, r2
 8001638:	b29a      	uxth	r2, r3
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <LCD_Init+0x184>)
 800163c:	809a      	strh	r2, [r3, #4]
		if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 800163e:	4b37      	ldr	r3, [pc, #220]	; (800171c <LCD_Init+0x184>)
 8001640:	889b      	ldrh	r3, [r3, #4]
 8001642:	f245 3210 	movw	r2, #21264	; 0x5310
 8001646:	4293      	cmp	r3, r2
 8001648:	d05f      	beq.n	800170a <LCD_Init+0x172>
		{
			LCD_WR_REG(0XDA00);
 800164a:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 800164e:	f7ff fb03 	bl	8000c58 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();		//读回0X00
 8001652:	f7ff fb21 	bl	8000c98 <LCD_RD_DATA>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	4b30      	ldr	r3, [pc, #192]	; (800171c <LCD_Init+0x184>)
 800165c:	809a      	strh	r2, [r3, #4]
			LCD_WR_REG(0XDB00);
 800165e:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8001662:	f7ff faf9 	bl	8000c58 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();		//读回0X80
 8001666:	f7ff fb17 	bl	8000c98 <LCD_RD_DATA>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <LCD_Init+0x184>)
 8001670:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <LCD_Init+0x184>)
 8001674:	889b      	ldrh	r3, [r3, #4]
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	b29a      	uxth	r2, r3
 800167a:	4b28      	ldr	r3, [pc, #160]	; (800171c <LCD_Init+0x184>)
 800167c:	809a      	strh	r2, [r3, #4]
			LCD_WR_REG(0XDC00);
 800167e:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8001682:	f7ff fae9 	bl	8000c58 <LCD_WR_REG>
			lcddev.id|=LCD_RD_DATA();		//读回0X00
 8001686:	f7ff fb07 	bl	8000c98 <LCD_RD_DATA>
 800168a:	4603      	mov	r3, r0
 800168c:	461a      	mov	r2, r3
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <LCD_Init+0x184>)
 8001690:	889b      	ldrh	r3, [r3, #4]
 8001692:	4313      	orrs	r3, r2
 8001694:	b29a      	uxth	r2, r3
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <LCD_Init+0x184>)
 8001698:	809a      	strh	r2, [r3, #4]
			if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 800169a:	4b20      	ldr	r3, [pc, #128]	; (800171c <LCD_Init+0x184>)
 800169c:	889b      	ldrh	r3, [r3, #4]
 800169e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016a2:	d103      	bne.n	80016ac <LCD_Init+0x114>
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <LCD_Init+0x184>)
 80016a6:	f245 5210 	movw	r2, #21776	; 0x5510
 80016aa:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <LCD_Init+0x184>)
 80016ae:	889b      	ldrh	r3, [r3, #4]
 80016b0:	f245 5210 	movw	r2, #21776	; 0x5510
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d028      	beq.n	800170a <LCD_Init+0x172>
			{
				LCD_WR_REG(0XA1);
 80016b8:	20a1      	movs	r0, #161	; 0xa1
 80016ba:	f7ff facd 	bl	8000c58 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();
 80016be:	f7ff faeb 	bl	8000c98 <LCD_RD_DATA>
 80016c2:	4603      	mov	r3, r0
 80016c4:	461a      	mov	r2, r3
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <LCD_Init+0x184>)
 80016c8:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();	//读回0X57
 80016ca:	f7ff fae5 	bl	8000c98 <LCD_RD_DATA>
 80016ce:	4603      	mov	r3, r0
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <LCD_Init+0x184>)
 80016d4:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <LCD_Init+0x184>)
 80016d8:	889b      	ldrh	r3, [r3, #4]
 80016da:	021b      	lsls	r3, r3, #8
 80016dc:	b29a      	uxth	r2, r3
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <LCD_Init+0x184>)
 80016e0:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//读回0X61
 80016e2:	f7ff fad9 	bl	8000c98 <LCD_RD_DATA>
 80016e6:	4603      	mov	r3, r0
 80016e8:	461a      	mov	r2, r3
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <LCD_Init+0x184>)
 80016ec:	889b      	ldrh	r3, [r3, #4]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b29a      	uxth	r2, r3
 80016f2:	4b0a      	ldr	r3, [pc, #40]	; (800171c <LCD_Init+0x184>)
 80016f4:	809a      	strh	r2, [r3, #4]
				if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <LCD_Init+0x184>)
 80016f8:	889b      	ldrh	r3, [r3, #4]
 80016fa:	f245 7261 	movw	r2, #22369	; 0x5761
 80016fe:	4293      	cmp	r3, r2
 8001700:	d103      	bne.n	800170a <LCD_Init+0x172>
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <LCD_Init+0x184>)
 8001704:	f641 1263 	movw	r2, #6499	; 0x1963
 8001708:	809a      	strh	r2, [r3, #4]
				//else lcddev.id=0x5510;
			}
		}
	}

	if(lcddev.id==0X9341)	//9341初始化
 800170a:	4b04      	ldr	r3, [pc, #16]	; (800171c <LCD_Init+0x184>)
 800170c:	889b      	ldrh	r3, [r3, #4]
 800170e:	f249 3241 	movw	r2, #37697	; 0x9341
 8001712:	4293      	cmp	r3, r2
 8001714:	f040 811a 	bne.w	800194c <LCD_Init+0x3b4>
 8001718:	e002      	b.n	8001720 <LCD_Init+0x188>
 800171a:	bf00      	nop
 800171c:	200000dc 	.word	0x200000dc
	{
		LCD_WR_REG(0xCF);
 8001720:	20cf      	movs	r0, #207	; 0xcf
 8001722:	f7ff fa99 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff faa6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 800172c:	20c1      	movs	r0, #193	; 0xc1
 800172e:	f7ff faa3 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 8001732:	2030      	movs	r0, #48	; 0x30
 8001734:	f7ff faa0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 8001738:	20ed      	movs	r0, #237	; 0xed
 800173a:	f7ff fa8d 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 800173e:	2064      	movs	r0, #100	; 0x64
 8001740:	f7ff fa9a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001744:	2003      	movs	r0, #3
 8001746:	f7ff fa97 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 800174a:	2012      	movs	r0, #18
 800174c:	f7ff fa94 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 8001750:	2081      	movs	r0, #129	; 0x81
 8001752:	f7ff fa91 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 8001756:	20e8      	movs	r0, #232	; 0xe8
 8001758:	f7ff fa7e 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 800175c:	2085      	movs	r0, #133	; 0x85
 800175e:	f7ff fa8b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8001762:	2010      	movs	r0, #16
 8001764:	f7ff fa88 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8001768:	207a      	movs	r0, #122	; 0x7a
 800176a:	f7ff fa85 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 800176e:	20cb      	movs	r0, #203	; 0xcb
 8001770:	f7ff fa72 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8001774:	2039      	movs	r0, #57	; 0x39
 8001776:	f7ff fa7f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 800177a:	202c      	movs	r0, #44	; 0x2c
 800177c:	f7ff fa7c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff fa79 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8001786:	2034      	movs	r0, #52	; 0x34
 8001788:	f7ff fa76 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800178c:	2002      	movs	r0, #2
 800178e:	f7ff fa73 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8001792:	20f7      	movs	r0, #247	; 0xf7
 8001794:	f7ff fa60 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8001798:	2020      	movs	r0, #32
 800179a:	f7ff fa6d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 800179e:	20ea      	movs	r0, #234	; 0xea
 80017a0:	f7ff fa5a 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff fa67 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f7ff fa64 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 80017b0:	20c0      	movs	r0, #192	; 0xc0
 80017b2:	f7ff fa51 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 80017b6:	201b      	movs	r0, #27
 80017b8:	f7ff fa5e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 80017bc:	20c1      	movs	r0, #193	; 0xc1
 80017be:	f7ff fa4b 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80017c2:	2001      	movs	r0, #1
 80017c4:	f7ff fa58 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 80017c8:	20c5      	movs	r0, #197	; 0xc5
 80017ca:	f7ff fa45 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 80017ce:	2030      	movs	r0, #48	; 0x30
 80017d0:	f7ff fa52 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 80017d4:	2030      	movs	r0, #48	; 0x30
 80017d6:	f7ff fa4f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 80017da:	20c7      	movs	r0, #199	; 0xc7
 80017dc:	f7ff fa3c 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 80017e0:	20b7      	movs	r0, #183	; 0xb7
 80017e2:	f7ff fa49 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 80017e6:	2036      	movs	r0, #54	; 0x36
 80017e8:	f7ff fa36 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 80017ec:	2048      	movs	r0, #72	; 0x48
 80017ee:	f7ff fa43 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 80017f2:	203a      	movs	r0, #58	; 0x3a
 80017f4:	f7ff fa30 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 80017f8:	2055      	movs	r0, #85	; 0x55
 80017fa:	f7ff fa3d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 80017fe:	20b1      	movs	r0, #177	; 0xb1
 8001800:	f7ff fa2a 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff fa37 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 800180a:	201a      	movs	r0, #26
 800180c:	f7ff fa34 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 8001810:	20b6      	movs	r0, #182	; 0xb6
 8001812:	f7ff fa21 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8001816:	200a      	movs	r0, #10
 8001818:	f7ff fa2e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 800181c:	20a2      	movs	r0, #162	; 0xa2
 800181e:	f7ff fa2b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001822:	20f2      	movs	r0, #242	; 0xf2
 8001824:	f7ff fa18 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001828:	2000      	movs	r0, #0
 800182a:	f7ff fa25 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 800182e:	2026      	movs	r0, #38	; 0x26
 8001830:	f7ff fa12 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8001834:	2001      	movs	r0, #1
 8001836:	f7ff fa1f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 800183a:	20e0      	movs	r0, #224	; 0xe0
 800183c:	f7ff fa0c 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 8001840:	200f      	movs	r0, #15
 8001842:	f7ff fa19 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8001846:	202a      	movs	r0, #42	; 0x2a
 8001848:	f7ff fa16 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 800184c:	2028      	movs	r0, #40	; 0x28
 800184e:	f7ff fa13 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8001852:	2008      	movs	r0, #8
 8001854:	f7ff fa10 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 8001858:	200e      	movs	r0, #14
 800185a:	f7ff fa0d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 800185e:	2008      	movs	r0, #8
 8001860:	f7ff fa0a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8001864:	2054      	movs	r0, #84	; 0x54
 8001866:	f7ff fa07 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 800186a:	20a9      	movs	r0, #169	; 0xa9
 800186c:	f7ff fa04 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8001870:	2043      	movs	r0, #67	; 0x43
 8001872:	f7ff fa01 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 8001876:	200a      	movs	r0, #10
 8001878:	f7ff f9fe 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 800187c:	200f      	movs	r0, #15
 800187e:	f7ff f9fb 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001882:	2000      	movs	r0, #0
 8001884:	f7ff f9f8 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001888:	2000      	movs	r0, #0
 800188a:	f7ff f9f5 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800188e:	2000      	movs	r0, #0
 8001890:	f7ff f9f2 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001894:	2000      	movs	r0, #0
 8001896:	f7ff f9ef 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 800189a:	20e1      	movs	r0, #225	; 0xe1
 800189c:	f7ff f9dc 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80018a0:	2000      	movs	r0, #0
 80018a2:	f7ff f9e9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 80018a6:	2015      	movs	r0, #21
 80018a8:	f7ff f9e6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 80018ac:	2017      	movs	r0, #23
 80018ae:	f7ff f9e3 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 80018b2:	2007      	movs	r0, #7
 80018b4:	f7ff f9e0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 80018b8:	2011      	movs	r0, #17
 80018ba:	f7ff f9dd 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 80018be:	2006      	movs	r0, #6
 80018c0:	f7ff f9da 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 80018c4:	202b      	movs	r0, #43	; 0x2b
 80018c6:	f7ff f9d7 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 80018ca:	2056      	movs	r0, #86	; 0x56
 80018cc:	f7ff f9d4 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80018d0:	203c      	movs	r0, #60	; 0x3c
 80018d2:	f7ff f9d1 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 80018d6:	2005      	movs	r0, #5
 80018d8:	f7ff f9ce 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 80018dc:	2010      	movs	r0, #16
 80018de:	f7ff f9cb 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 80018e2:	200f      	movs	r0, #15
 80018e4:	f7ff f9c8 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80018e8:	203f      	movs	r0, #63	; 0x3f
 80018ea:	f7ff f9c5 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80018ee:	203f      	movs	r0, #63	; 0x3f
 80018f0:	f7ff f9c2 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 80018f4:	200f      	movs	r0, #15
 80018f6:	f7ff f9bf 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 80018fa:	202b      	movs	r0, #43	; 0x2b
 80018fc:	f7ff f9ac 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001900:	2000      	movs	r0, #0
 8001902:	f7ff f9b9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001906:	2000      	movs	r0, #0
 8001908:	f7ff f9b6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 800190c:	2001      	movs	r0, #1
 800190e:	f7ff f9b3 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 8001912:	203f      	movs	r0, #63	; 0x3f
 8001914:	f7ff f9b0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 8001918:	202a      	movs	r0, #42	; 0x2a
 800191a:	f7ff f99d 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800191e:	2000      	movs	r0, #0
 8001920:	f7ff f9aa 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001924:	2000      	movs	r0, #0
 8001926:	f7ff f9a7 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800192a:	2000      	movs	r0, #0
 800192c:	f7ff f9a4 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 8001930:	20ef      	movs	r0, #239	; 0xef
 8001932:	f7ff f9a1 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 8001936:	2011      	movs	r0, #17
 8001938:	f7ff f98e 	bl	8000c58 <LCD_WR_REG>
		HAL_Delay(120);
 800193c:	2078      	movs	r0, #120	; 0x78
 800193e:	f003 f83d 	bl	80049bc <HAL_Delay>
		//delay_ms(120);
		LCD_WR_REG(0x29); //display on
 8001942:	2029      	movs	r0, #41	; 0x29
 8001944:	f7ff f988 	bl	8000c58 <LCD_WR_REG>
 8001948:	f001 bfc7 	b.w	80038da <LCD_Init+0x2342>
	}else if(lcddev.id==0x5310)
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <LCD_Init+0x3c4>)
 800194e:	889b      	ldrh	r3, [r3, #4]
 8001950:	f245 3210 	movw	r2, #21264	; 0x5310
 8001954:	4293      	cmp	r3, r2
 8001956:	f040 877c 	bne.w	8002852 <LCD_Init+0x12ba>
 800195a:	e001      	b.n	8001960 <LCD_Init+0x3c8>
 800195c:	200000dc 	.word	0x200000dc
	{
		LCD_WR_REG(0xED);
 8001960:	20ed      	movs	r0, #237	; 0xed
 8001962:	f7ff f979 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8001966:	2001      	movs	r0, #1
 8001968:	f7ff f986 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 800196c:	20fe      	movs	r0, #254	; 0xfe
 800196e:	f7ff f983 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 8001972:	20ee      	movs	r0, #238	; 0xee
 8001974:	f7ff f970 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 8001978:	20de      	movs	r0, #222	; 0xde
 800197a:	f7ff f97d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 800197e:	2021      	movs	r0, #33	; 0x21
 8001980:	f7ff f97a 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 8001984:	20f1      	movs	r0, #241	; 0xf1
 8001986:	f7ff f967 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 800198a:	2001      	movs	r0, #1
 800198c:	f7ff f974 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 8001990:	20df      	movs	r0, #223	; 0xdf
 8001992:	f7ff f961 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 8001996:	2010      	movs	r0, #16
 8001998:	f7ff f96e 	bl	8000c78 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 800199c:	20c4      	movs	r0, #196	; 0xc4
 800199e:	f7ff f95b 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 80019a2:	208f      	movs	r0, #143	; 0x8f
 80019a4:	f7ff f968 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 80019a8:	20c6      	movs	r0, #198	; 0xc6
 80019aa:	f7ff f955 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff f962 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80019b4:	20e2      	movs	r0, #226	; 0xe2
 80019b6:	f7ff f95f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80019ba:	20e2      	movs	r0, #226	; 0xe2
 80019bc:	f7ff f95c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80019c0:	20e2      	movs	r0, #226	; 0xe2
 80019c2:	f7ff f959 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 80019c6:	20bf      	movs	r0, #191	; 0xbf
 80019c8:	f7ff f946 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 80019cc:	20aa      	movs	r0, #170	; 0xaa
 80019ce:	f7ff f953 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 80019d2:	20b0      	movs	r0, #176	; 0xb0
 80019d4:	f7ff f940 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 80019d8:	200d      	movs	r0, #13
 80019da:	f7ff f94d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80019de:	2000      	movs	r0, #0
 80019e0:	f7ff f94a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 80019e4:	200d      	movs	r0, #13
 80019e6:	f7ff f947 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff f944 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 80019f0:	2011      	movs	r0, #17
 80019f2:	f7ff f941 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff f93e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 80019fc:	2019      	movs	r0, #25
 80019fe:	f7ff f93b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f7ff f938 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8001a08:	2021      	movs	r0, #33	; 0x21
 8001a0a:	f7ff f935 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff f932 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8001a14:	202d      	movs	r0, #45	; 0x2d
 8001a16:	f7ff f92f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f7ff f92c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 8001a20:	203d      	movs	r0, #61	; 0x3d
 8001a22:	f7ff f929 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff f926 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8001a2c:	205d      	movs	r0, #93	; 0x5d
 8001a2e:	f7ff f923 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001a32:	2000      	movs	r0, #0
 8001a34:	f7ff f920 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8001a38:	205d      	movs	r0, #93	; 0x5d
 8001a3a:	f7ff f91d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff f91a 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 8001a44:	20b1      	movs	r0, #177	; 0xb1
 8001a46:	f7ff f907 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 8001a4a:	2080      	movs	r0, #128	; 0x80
 8001a4c:	f7ff f914 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff f911 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8001a56:	208b      	movs	r0, #139	; 0x8b
 8001a58:	f7ff f90e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff f90b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8001a62:	2096      	movs	r0, #150	; 0x96
 8001a64:	f7ff f908 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001a68:	2000      	movs	r0, #0
 8001a6a:	f7ff f905 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 8001a6e:	20b2      	movs	r0, #178	; 0xb2
 8001a70:	f7ff f8f2 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001a74:	2000      	movs	r0, #0
 8001a76:	f7ff f8ff 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f7ff f8fc 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8001a80:	2002      	movs	r0, #2
 8001a82:	f7ff f8f9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001a86:	2000      	movs	r0, #0
 8001a88:	f7ff f8f6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f7ff f8f3 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff f8f0 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 8001a98:	20b3      	movs	r0, #179	; 0xb3
 8001a9a:	f7ff f8dd 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f7ff f8ea 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7ff f8e7 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f7ff f8e4 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff f8e1 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ab6:	2000      	movs	r0, #0
 8001ab8:	f7ff f8de 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001abc:	2000      	movs	r0, #0
 8001abe:	f7ff f8db 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7ff f8d8 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f7ff f8d5 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f7ff f8d2 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7ff f8cf 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ada:	2000      	movs	r0, #0
 8001adc:	f7ff f8cc 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ae0:	2000      	movs	r0, #0
 8001ae2:	f7ff f8c9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7ff f8c6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001aec:	2000      	movs	r0, #0
 8001aee:	f7ff f8c3 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001af2:	2000      	movs	r0, #0
 8001af4:	f7ff f8c0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7ff f8bd 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001afe:	2000      	movs	r0, #0
 8001b00:	f7ff f8ba 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001b04:	2000      	movs	r0, #0
 8001b06:	f7ff f8b7 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f7ff f8b4 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001b10:	2000      	movs	r0, #0
 8001b12:	f7ff f8b1 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f7ff f8ae 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7ff f8ab 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001b22:	2000      	movs	r0, #0
 8001b24:	f7ff f8a8 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff f8a5 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 8001b2e:	20b4      	movs	r0, #180	; 0xb4
 8001b30:	f7ff f892 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 8001b34:	208b      	movs	r0, #139	; 0x8b
 8001b36:	f7ff f89f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	f7ff f89c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8001b40:	2096      	movs	r0, #150	; 0x96
 8001b42:	f7ff f899 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f7ff f896 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 8001b4c:	20a1      	movs	r0, #161	; 0xa1
 8001b4e:	f7ff f893 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001b52:	2000      	movs	r0, #0
 8001b54:	f7ff f890 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 8001b58:	20b5      	movs	r0, #181	; 0xb5
 8001b5a:	f7ff f87d 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 8001b5e:	2002      	movs	r0, #2
 8001b60:	f7ff f88a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001b64:	2000      	movs	r0, #0
 8001b66:	f7ff f887 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001b6a:	2003      	movs	r0, #3
 8001b6c:	f7ff f884 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001b70:	2000      	movs	r0, #0
 8001b72:	f7ff f881 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8001b76:	2004      	movs	r0, #4
 8001b78:	f7ff f87e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	f7ff f87b 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 8001b82:	20b6      	movs	r0, #182	; 0xb6
 8001b84:	f7ff f868 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff f875 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f7ff f872 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 8001b94:	20b7      	movs	r0, #183	; 0xb7
 8001b96:	f7ff f85f 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f7ff f86c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff f869 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8001ba6:	203f      	movs	r0, #63	; 0x3f
 8001ba8:	f7ff f866 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001bac:	2000      	movs	r0, #0
 8001bae:	f7ff f863 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 8001bb2:	205e      	movs	r0, #94	; 0x5e
 8001bb4:	f7ff f860 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f7ff f85d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8001bbe:	2064      	movs	r0, #100	; 0x64
 8001bc0:	f7ff f85a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f7ff f857 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 8001bca:	208c      	movs	r0, #140	; 0x8c
 8001bcc:	f7ff f854 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	f7ff f851 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 8001bd6:	20ac      	movs	r0, #172	; 0xac
 8001bd8:	f7ff f84e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001bdc:	2000      	movs	r0, #0
 8001bde:	f7ff f84b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8001be2:	20dc      	movs	r0, #220	; 0xdc
 8001be4:	f7ff f848 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001be8:	2000      	movs	r0, #0
 8001bea:	f7ff f845 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 8001bee:	2070      	movs	r0, #112	; 0x70
 8001bf0:	f7ff f842 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f7ff f83f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 8001bfa:	2090      	movs	r0, #144	; 0x90
 8001bfc:	f7ff f83c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff f839 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 8001c06:	20eb      	movs	r0, #235	; 0xeb
 8001c08:	f7ff f836 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c0c:	2000      	movs	r0, #0
 8001c0e:	f7ff f833 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8001c12:	20dc      	movs	r0, #220	; 0xdc
 8001c14:	f7ff f830 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c18:	2000      	movs	r0, #0
 8001c1a:	f7ff f82d 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 8001c1e:	20b8      	movs	r0, #184	; 0xb8
 8001c20:	f7ff f81a 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff f827 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f7ff f824 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c30:	2000      	movs	r0, #0
 8001c32:	f7ff f821 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c36:	2000      	movs	r0, #0
 8001c38:	f7ff f81e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	f7ff f81b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c42:	2000      	movs	r0, #0
 8001c44:	f7ff f818 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff f815 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7ff f812 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 8001c54:	20ba      	movs	r0, #186	; 0xba
 8001c56:	f7fe ffff 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 8001c5a:	2024      	movs	r0, #36	; 0x24
 8001c5c:	f7ff f80c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7ff f809 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c66:	2000      	movs	r0, #0
 8001c68:	f7ff f806 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f7ff f803 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 8001c72:	20c1      	movs	r0, #193	; 0xc1
 8001c74:	f7fe fff0 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8001c78:	2020      	movs	r0, #32
 8001c7a:	f7fe fffd 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f7fe fffa 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8001c84:	2054      	movs	r0, #84	; 0x54
 8001c86:	f7fe fff7 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f7fe fff4 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8001c90:	20ff      	movs	r0, #255	; 0xff
 8001c92:	f7fe fff1 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c96:	2000      	movs	r0, #0
 8001c98:	f7fe ffee 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 8001c9c:	20c2      	movs	r0, #194	; 0xc2
 8001c9e:	f7fe ffdb 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8001ca2:	200a      	movs	r0, #10
 8001ca4:	f7fe ffe8 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f7fe ffe5 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8001cae:	2004      	movs	r0, #4
 8001cb0:	f7fe ffe2 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	f7fe ffdf 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 8001cba:	20c3      	movs	r0, #195	; 0xc3
 8001cbc:	f7fe ffcc 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 8001cc0:	203c      	movs	r0, #60	; 0x3c
 8001cc2:	f7fe ffd9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	f7fe ffd6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 8001ccc:	203a      	movs	r0, #58	; 0x3a
 8001cce:	f7fe ffd3 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001cd2:	2000      	movs	r0, #0
 8001cd4:	f7fe ffd0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 8001cd8:	2039      	movs	r0, #57	; 0x39
 8001cda:	f7fe ffcd 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f7fe ffca 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 8001ce4:	2037      	movs	r0, #55	; 0x37
 8001ce6:	f7fe ffc7 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001cea:	2000      	movs	r0, #0
 8001cec:	f7fe ffc4 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8001cf0:	203c      	movs	r0, #60	; 0x3c
 8001cf2:	f7fe ffc1 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f7fe ffbe 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8001cfc:	2036      	movs	r0, #54	; 0x36
 8001cfe:	f7fe ffbb 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d02:	2000      	movs	r0, #0
 8001d04:	f7fe ffb8 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8001d08:	2032      	movs	r0, #50	; 0x32
 8001d0a:	f7fe ffb5 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f7fe ffb2 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8001d14:	202f      	movs	r0, #47	; 0x2f
 8001d16:	f7fe ffaf 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	f7fe ffac 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8001d20:	202c      	movs	r0, #44	; 0x2c
 8001d22:	f7fe ffa9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d26:	2000      	movs	r0, #0
 8001d28:	f7fe ffa6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8001d2c:	2029      	movs	r0, #41	; 0x29
 8001d2e:	f7fe ffa3 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d32:	2000      	movs	r0, #0
 8001d34:	f7fe ffa0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8001d38:	2026      	movs	r0, #38	; 0x26
 8001d3a:	f7fe ff9d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7fe ff9a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8001d44:	2024      	movs	r0, #36	; 0x24
 8001d46:	f7fe ff97 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7fe ff94 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8001d50:	2024      	movs	r0, #36	; 0x24
 8001d52:	f7fe ff91 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d56:	2000      	movs	r0, #0
 8001d58:	f7fe ff8e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8001d5c:	2023      	movs	r0, #35	; 0x23
 8001d5e:	f7fe ff8b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f7fe ff88 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8001d68:	203c      	movs	r0, #60	; 0x3c
 8001d6a:	f7fe ff85 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f7fe ff82 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8001d74:	2036      	movs	r0, #54	; 0x36
 8001d76:	f7fe ff7f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d7a:	2000      	movs	r0, #0
 8001d7c:	f7fe ff7c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8001d80:	2032      	movs	r0, #50	; 0x32
 8001d82:	f7fe ff79 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d86:	2000      	movs	r0, #0
 8001d88:	f7fe ff76 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8001d8c:	202f      	movs	r0, #47	; 0x2f
 8001d8e:	f7fe ff73 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d92:	2000      	movs	r0, #0
 8001d94:	f7fe ff70 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8001d98:	202c      	movs	r0, #44	; 0x2c
 8001d9a:	f7fe ff6d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d9e:	2000      	movs	r0, #0
 8001da0:	f7fe ff6a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8001da4:	2029      	movs	r0, #41	; 0x29
 8001da6:	f7fe ff67 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f7fe ff64 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8001db0:	2026      	movs	r0, #38	; 0x26
 8001db2:	f7fe ff61 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001db6:	2000      	movs	r0, #0
 8001db8:	f7fe ff5e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8001dbc:	2024      	movs	r0, #36	; 0x24
 8001dbe:	f7fe ff5b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f7fe ff58 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8001dc8:	2024      	movs	r0, #36	; 0x24
 8001dca:	f7fe ff55 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dce:	2000      	movs	r0, #0
 8001dd0:	f7fe ff52 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8001dd4:	2023      	movs	r0, #35	; 0x23
 8001dd6:	f7fe ff4f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7fe ff4c 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 8001de0:	20c4      	movs	r0, #196	; 0xc4
 8001de2:	f7fe ff39 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 8001de6:	2062      	movs	r0, #98	; 0x62
 8001de8:	f7fe ff46 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7fe ff43 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8001df2:	2005      	movs	r0, #5
 8001df4:	f7fe ff40 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001df8:	2000      	movs	r0, #0
 8001dfa:	f7fe ff3d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8001dfe:	2084      	movs	r0, #132	; 0x84
 8001e00:	f7fe ff3a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7fe ff37 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 8001e0a:	20f0      	movs	r0, #240	; 0xf0
 8001e0c:	f7fe ff34 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7fe ff31 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8001e16:	2018      	movs	r0, #24
 8001e18:	f7fe ff2e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	f7fe ff2b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 8001e22:	20a4      	movs	r0, #164	; 0xa4
 8001e24:	f7fe ff28 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f7fe ff25 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8001e2e:	2018      	movs	r0, #24
 8001e30:	f7fe ff22 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7fe ff1f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8001e3a:	2050      	movs	r0, #80	; 0x50
 8001e3c:	f7fe ff1c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f7fe ff19 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 8001e46:	200c      	movs	r0, #12
 8001e48:	f7fe ff16 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f7fe ff13 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8001e52:	2017      	movs	r0, #23
 8001e54:	f7fe ff10 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e58:	2000      	movs	r0, #0
 8001e5a:	f7fe ff0d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 8001e5e:	2095      	movs	r0, #149	; 0x95
 8001e60:	f7fe ff0a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7fe ff07 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8001e6a:	20f3      	movs	r0, #243	; 0xf3
 8001e6c:	f7fe ff04 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7fe ff01 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 8001e76:	20e6      	movs	r0, #230	; 0xe6
 8001e78:	f7fe fefe 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7fe fefb 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 8001e82:	20c5      	movs	r0, #197	; 0xc5
 8001e84:	f7fe fee8 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8001e88:	2032      	movs	r0, #50	; 0x32
 8001e8a:	f7fe fef5 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f7fe fef2 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8001e94:	2044      	movs	r0, #68	; 0x44
 8001e96:	f7fe feef 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7fe feec 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 8001ea0:	2065      	movs	r0, #101	; 0x65
 8001ea2:	f7fe fee9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7fe fee6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8001eac:	2076      	movs	r0, #118	; 0x76
 8001eae:	f7fe fee3 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7fe fee0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8001eb8:	2088      	movs	r0, #136	; 0x88
 8001eba:	f7fe fedd 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7fe feda 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8001ec4:	20c6      	movs	r0, #198	; 0xc6
 8001ec6:	f7fe fec7 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8001eca:	2020      	movs	r0, #32
 8001ecc:	f7fe fed4 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	f7fe fed1 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8001ed6:	2017      	movs	r0, #23
 8001ed8:	f7fe fece 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7fe fecb 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8001ee2:	2001      	movs	r0, #1
 8001ee4:	f7fe fec8 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7fe fec5 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 8001eee:	20c7      	movs	r0, #199	; 0xc7
 8001ef0:	f7fe feb2 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7fe febf 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7fe febc 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7fe feb9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7fe feb6 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8001f0c:	20c8      	movs	r0, #200	; 0xc8
 8001f0e:	f7fe fea3 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f7fe feb0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f18:	2000      	movs	r0, #0
 8001f1a:	f7fe fead 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7fe feaa 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f24:	2000      	movs	r0, #0
 8001f26:	f7fe fea7 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 8001f2a:	20c9      	movs	r0, #201	; 0xc9
 8001f2c:	f7fe fe94 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001f30:	2000      	movs	r0, #0
 8001f32:	f7fe fea1 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7fe fe9e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7fe fe9b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f7fe fe98 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f7fe fe95 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7fe fe92 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7fe fe8f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f7fe fe8c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f60:	2000      	movs	r0, #0
 8001f62:	f7fe fe89 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f7fe fe86 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7fe fe83 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7fe fe80 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f7fe fe7d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7fe fe7a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7fe fe77 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7fe fe74 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 8001f90:	20e0      	movs	r0, #224	; 0xe0
 8001f92:	f7fe fe61 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8001f96:	2016      	movs	r0, #22
 8001f98:	f7fe fe6e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7fe fe6b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8001fa2:	201c      	movs	r0, #28
 8001fa4:	f7fe fe68 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7fe fe65 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8001fae:	2021      	movs	r0, #33	; 0x21
 8001fb0:	f7fe fe62 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f7fe fe5f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8001fba:	2036      	movs	r0, #54	; 0x36
 8001fbc:	f7fe fe5c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f7fe fe59 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 8001fc6:	2046      	movs	r0, #70	; 0x46
 8001fc8:	f7fe fe56 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7fe fe53 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 8001fd2:	2052      	movs	r0, #82	; 0x52
 8001fd4:	f7fe fe50 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7fe fe4d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8001fde:	2064      	movs	r0, #100	; 0x64
 8001fe0:	f7fe fe4a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f7fe fe47 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8001fea:	207a      	movs	r0, #122	; 0x7a
 8001fec:	f7fe fe44 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7fe fe41 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8001ff6:	208b      	movs	r0, #139	; 0x8b
 8001ff8:	f7fe fe3e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f7fe fe3b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002002:	2099      	movs	r0, #153	; 0x99
 8002004:	f7fe fe38 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002008:	2000      	movs	r0, #0
 800200a:	f7fe fe35 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 800200e:	20a8      	movs	r0, #168	; 0xa8
 8002010:	f7fe fe32 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002014:	2000      	movs	r0, #0
 8002016:	f7fe fe2f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 800201a:	20b9      	movs	r0, #185	; 0xb9
 800201c:	f7fe fe2c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002020:	2000      	movs	r0, #0
 8002022:	f7fe fe29 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002026:	20c4      	movs	r0, #196	; 0xc4
 8002028:	f7fe fe26 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800202c:	2000      	movs	r0, #0
 800202e:	f7fe fe23 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002032:	20ca      	movs	r0, #202	; 0xca
 8002034:	f7fe fe20 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002038:	2000      	movs	r0, #0
 800203a:	f7fe fe1d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 800203e:	20d2      	movs	r0, #210	; 0xd2
 8002040:	f7fe fe1a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002044:	2000      	movs	r0, #0
 8002046:	f7fe fe17 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 800204a:	20d9      	movs	r0, #217	; 0xd9
 800204c:	f7fe fe14 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002050:	2000      	movs	r0, #0
 8002052:	f7fe fe11 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8002056:	20e0      	movs	r0, #224	; 0xe0
 8002058:	f7fe fe0e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800205c:	2000      	movs	r0, #0
 800205e:	f7fe fe0b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002062:	20f3      	movs	r0, #243	; 0xf3
 8002064:	f7fe fe08 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002068:	2000      	movs	r0, #0
 800206a:	f7fe fe05 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 800206e:	20e1      	movs	r0, #225	; 0xe1
 8002070:	f7fe fdf2 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8002074:	2016      	movs	r0, #22
 8002076:	f7fe fdff 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800207a:	2000      	movs	r0, #0
 800207c:	f7fe fdfc 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8002080:	201c      	movs	r0, #28
 8002082:	f7fe fdf9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002086:	2000      	movs	r0, #0
 8002088:	f7fe fdf6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 800208c:	2022      	movs	r0, #34	; 0x22
 800208e:	f7fe fdf3 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002092:	2000      	movs	r0, #0
 8002094:	f7fe fdf0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002098:	2036      	movs	r0, #54	; 0x36
 800209a:	f7fe fded 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800209e:	2000      	movs	r0, #0
 80020a0:	f7fe fdea 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80020a4:	2045      	movs	r0, #69	; 0x45
 80020a6:	f7fe fde7 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020aa:	2000      	movs	r0, #0
 80020ac:	f7fe fde4 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80020b0:	2052      	movs	r0, #82	; 0x52
 80020b2:	f7fe fde1 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7fe fdde 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80020bc:	2064      	movs	r0, #100	; 0x64
 80020be:	f7fe fddb 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020c2:	2000      	movs	r0, #0
 80020c4:	f7fe fdd8 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 80020c8:	207a      	movs	r0, #122	; 0x7a
 80020ca:	f7fe fdd5 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020ce:	2000      	movs	r0, #0
 80020d0:	f7fe fdd2 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 80020d4:	208b      	movs	r0, #139	; 0x8b
 80020d6:	f7fe fdcf 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020da:	2000      	movs	r0, #0
 80020dc:	f7fe fdcc 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80020e0:	2099      	movs	r0, #153	; 0x99
 80020e2:	f7fe fdc9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020e6:	2000      	movs	r0, #0
 80020e8:	f7fe fdc6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 80020ec:	20a8      	movs	r0, #168	; 0xa8
 80020ee:	f7fe fdc3 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7fe fdc0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 80020f8:	20b9      	movs	r0, #185	; 0xb9
 80020fa:	f7fe fdbd 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020fe:	2000      	movs	r0, #0
 8002100:	f7fe fdba 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002104:	20c4      	movs	r0, #196	; 0xc4
 8002106:	f7fe fdb7 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800210a:	2000      	movs	r0, #0
 800210c:	f7fe fdb4 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002110:	20ca      	movs	r0, #202	; 0xca
 8002112:	f7fe fdb1 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002116:	2000      	movs	r0, #0
 8002118:	f7fe fdae 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 800211c:	20d2      	movs	r0, #210	; 0xd2
 800211e:	f7fe fdab 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002122:	2000      	movs	r0, #0
 8002124:	f7fe fda8 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 8002128:	20d8      	movs	r0, #216	; 0xd8
 800212a:	f7fe fda5 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800212e:	2000      	movs	r0, #0
 8002130:	f7fe fda2 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8002134:	20e0      	movs	r0, #224	; 0xe0
 8002136:	f7fe fd9f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800213a:	2000      	movs	r0, #0
 800213c:	f7fe fd9c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002140:	20f3      	movs	r0, #243	; 0xf3
 8002142:	f7fe fd99 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002146:	2000      	movs	r0, #0
 8002148:	f7fe fd96 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 800214c:	20e2      	movs	r0, #226	; 0xe2
 800214e:	f7fe fd83 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002152:	2005      	movs	r0, #5
 8002154:	f7fe fd90 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002158:	2000      	movs	r0, #0
 800215a:	f7fe fd8d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 800215e:	200b      	movs	r0, #11
 8002160:	f7fe fd8a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002164:	2000      	movs	r0, #0
 8002166:	f7fe fd87 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 800216a:	201b      	movs	r0, #27
 800216c:	f7fe fd84 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002170:	2000      	movs	r0, #0
 8002172:	f7fe fd81 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8002176:	2034      	movs	r0, #52	; 0x34
 8002178:	f7fe fd7e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800217c:	2000      	movs	r0, #0
 800217e:	f7fe fd7b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002182:	2044      	movs	r0, #68	; 0x44
 8002184:	f7fe fd78 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002188:	2000      	movs	r0, #0
 800218a:	f7fe fd75 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 800218e:	204f      	movs	r0, #79	; 0x4f
 8002190:	f7fe fd72 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002194:	2000      	movs	r0, #0
 8002196:	f7fe fd6f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 800219a:	2061      	movs	r0, #97	; 0x61
 800219c:	f7fe fd6c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7fe fd69 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 80021a6:	2079      	movs	r0, #121	; 0x79
 80021a8:	f7fe fd66 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021ac:	2000      	movs	r0, #0
 80021ae:	f7fe fd63 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80021b2:	2088      	movs	r0, #136	; 0x88
 80021b4:	f7fe fd60 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021b8:	2000      	movs	r0, #0
 80021ba:	f7fe fd5d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80021be:	2097      	movs	r0, #151	; 0x97
 80021c0:	f7fe fd5a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021c4:	2000      	movs	r0, #0
 80021c6:	f7fe fd57 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80021ca:	20a6      	movs	r0, #166	; 0xa6
 80021cc:	f7fe fd54 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021d0:	2000      	movs	r0, #0
 80021d2:	f7fe fd51 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80021d6:	20b7      	movs	r0, #183	; 0xb7
 80021d8:	f7fe fd4e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021dc:	2000      	movs	r0, #0
 80021de:	f7fe fd4b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 80021e2:	20c2      	movs	r0, #194	; 0xc2
 80021e4:	f7fe fd48 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021e8:	2000      	movs	r0, #0
 80021ea:	f7fe fd45 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 80021ee:	20c7      	movs	r0, #199	; 0xc7
 80021f0:	f7fe fd42 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021f4:	2000      	movs	r0, #0
 80021f6:	f7fe fd3f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 80021fa:	20d1      	movs	r0, #209	; 0xd1
 80021fc:	f7fe fd3c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002200:	2000      	movs	r0, #0
 8002202:	f7fe fd39 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 8002206:	20d6      	movs	r0, #214	; 0xd6
 8002208:	f7fe fd36 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800220c:	2000      	movs	r0, #0
 800220e:	f7fe fd33 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002212:	20dd      	movs	r0, #221	; 0xdd
 8002214:	f7fe fd30 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002218:	2000      	movs	r0, #0
 800221a:	f7fe fd2d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800221e:	20f3      	movs	r0, #243	; 0xf3
 8002220:	f7fe fd2a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002224:	2000      	movs	r0, #0
 8002226:	f7fe fd27 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 800222a:	20e3      	movs	r0, #227	; 0xe3
 800222c:	f7fe fd14 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002230:	2005      	movs	r0, #5
 8002232:	f7fe fd21 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002236:	2000      	movs	r0, #0
 8002238:	f7fe fd1e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 800223c:	200a      	movs	r0, #10
 800223e:	f7fe fd1b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002242:	2000      	movs	r0, #0
 8002244:	f7fe fd18 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8002248:	201c      	movs	r0, #28
 800224a:	f7fe fd15 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800224e:	2000      	movs	r0, #0
 8002250:	f7fe fd12 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002254:	2033      	movs	r0, #51	; 0x33
 8002256:	f7fe fd0f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800225a:	2000      	movs	r0, #0
 800225c:	f7fe fd0c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002260:	2044      	movs	r0, #68	; 0x44
 8002262:	f7fe fd09 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002266:	2000      	movs	r0, #0
 8002268:	f7fe fd06 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 800226c:	2050      	movs	r0, #80	; 0x50
 800226e:	f7fe fd03 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002272:	2000      	movs	r0, #0
 8002274:	f7fe fd00 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 8002278:	2062      	movs	r0, #98	; 0x62
 800227a:	f7fe fcfd 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800227e:	2000      	movs	r0, #0
 8002280:	f7fe fcfa 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 8002284:	2078      	movs	r0, #120	; 0x78
 8002286:	f7fe fcf7 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800228a:	2000      	movs	r0, #0
 800228c:	f7fe fcf4 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002290:	2088      	movs	r0, #136	; 0x88
 8002292:	f7fe fcf1 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002296:	2000      	movs	r0, #0
 8002298:	f7fe fcee 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 800229c:	2097      	movs	r0, #151	; 0x97
 800229e:	f7fe fceb 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022a2:	2000      	movs	r0, #0
 80022a4:	f7fe fce8 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80022a8:	20a6      	movs	r0, #166	; 0xa6
 80022aa:	f7fe fce5 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ae:	2000      	movs	r0, #0
 80022b0:	f7fe fce2 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80022b4:	20b7      	movs	r0, #183	; 0xb7
 80022b6:	f7fe fcdf 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ba:	2000      	movs	r0, #0
 80022bc:	f7fe fcdc 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 80022c0:	20c2      	movs	r0, #194	; 0xc2
 80022c2:	f7fe fcd9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022c6:	2000      	movs	r0, #0
 80022c8:	f7fe fcd6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 80022cc:	20c7      	movs	r0, #199	; 0xc7
 80022ce:	f7fe fcd3 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022d2:	2000      	movs	r0, #0
 80022d4:	f7fe fcd0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 80022d8:	20d1      	movs	r0, #209	; 0xd1
 80022da:	f7fe fccd 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022de:	2000      	movs	r0, #0
 80022e0:	f7fe fcca 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 80022e4:	20d5      	movs	r0, #213	; 0xd5
 80022e6:	f7fe fcc7 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ea:	2000      	movs	r0, #0
 80022ec:	f7fe fcc4 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 80022f0:	20dd      	movs	r0, #221	; 0xdd
 80022f2:	f7fe fcc1 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022f6:	2000      	movs	r0, #0
 80022f8:	f7fe fcbe 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80022fc:	20f3      	movs	r0, #243	; 0xf3
 80022fe:	f7fe fcbb 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002302:	2000      	movs	r0, #0
 8002304:	f7fe fcb8 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 8002308:	20e4      	movs	r0, #228	; 0xe4
 800230a:	f7fe fca5 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 800230e:	2001      	movs	r0, #1
 8002310:	f7fe fcb2 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002314:	2000      	movs	r0, #0
 8002316:	f7fe fcaf 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 800231a:	2001      	movs	r0, #1
 800231c:	f7fe fcac 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002320:	2000      	movs	r0, #0
 8002322:	f7fe fca9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002326:	2002      	movs	r0, #2
 8002328:	f7fe fca6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800232c:	2000      	movs	r0, #0
 800232e:	f7fe fca3 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8002332:	202a      	movs	r0, #42	; 0x2a
 8002334:	f7fe fca0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002338:	2000      	movs	r0, #0
 800233a:	f7fe fc9d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 800233e:	203c      	movs	r0, #60	; 0x3c
 8002340:	f7fe fc9a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002344:	2000      	movs	r0, #0
 8002346:	f7fe fc97 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 800234a:	204b      	movs	r0, #75	; 0x4b
 800234c:	f7fe fc94 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002350:	2000      	movs	r0, #0
 8002352:	f7fe fc91 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002356:	205d      	movs	r0, #93	; 0x5d
 8002358:	f7fe fc8e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800235c:	2000      	movs	r0, #0
 800235e:	f7fe fc8b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002362:	2074      	movs	r0, #116	; 0x74
 8002364:	f7fe fc88 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002368:	2000      	movs	r0, #0
 800236a:	f7fe fc85 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 800236e:	2084      	movs	r0, #132	; 0x84
 8002370:	f7fe fc82 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002374:	2000      	movs	r0, #0
 8002376:	f7fe fc7f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 800237a:	2093      	movs	r0, #147	; 0x93
 800237c:	f7fe fc7c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002380:	2000      	movs	r0, #0
 8002382:	f7fe fc79 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002386:	20a2      	movs	r0, #162	; 0xa2
 8002388:	f7fe fc76 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800238c:	2000      	movs	r0, #0
 800238e:	f7fe fc73 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8002392:	20b3      	movs	r0, #179	; 0xb3
 8002394:	f7fe fc70 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002398:	2000      	movs	r0, #0
 800239a:	f7fe fc6d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 800239e:	20be      	movs	r0, #190	; 0xbe
 80023a0:	f7fe fc6a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7fe fc67 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 80023aa:	20c4      	movs	r0, #196	; 0xc4
 80023ac:	f7fe fc64 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7fe fc61 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80023b6:	20cd      	movs	r0, #205	; 0xcd
 80023b8:	f7fe fc5e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023bc:	2000      	movs	r0, #0
 80023be:	f7fe fc5b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80023c2:	20d3      	movs	r0, #211	; 0xd3
 80023c4:	f7fe fc58 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7fe fc55 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 80023ce:	20dd      	movs	r0, #221	; 0xdd
 80023d0:	f7fe fc52 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7fe fc4f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80023da:	20f3      	movs	r0, #243	; 0xf3
 80023dc:	f7fe fc4c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7fe fc49 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 80023e6:	20e5      	movs	r0, #229	; 0xe5
 80023e8:	f7fe fc36 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80023ec:	2000      	movs	r0, #0
 80023ee:	f7fe fc43 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023f2:	2000      	movs	r0, #0
 80023f4:	f7fe fc40 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023f8:	2000      	movs	r0, #0
 80023fa:	f7fe fc3d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023fe:	2000      	movs	r0, #0
 8002400:	f7fe fc3a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8002404:	2002      	movs	r0, #2
 8002406:	f7fe fc37 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800240a:	2000      	movs	r0, #0
 800240c:	f7fe fc34 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002410:	2029      	movs	r0, #41	; 0x29
 8002412:	f7fe fc31 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002416:	2000      	movs	r0, #0
 8002418:	f7fe fc2e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 800241c:	203c      	movs	r0, #60	; 0x3c
 800241e:	f7fe fc2b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002422:	2000      	movs	r0, #0
 8002424:	f7fe fc28 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8002428:	204b      	movs	r0, #75	; 0x4b
 800242a:	f7fe fc25 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800242e:	2000      	movs	r0, #0
 8002430:	f7fe fc22 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002434:	205d      	movs	r0, #93	; 0x5d
 8002436:	f7fe fc1f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800243a:	2000      	movs	r0, #0
 800243c:	f7fe fc1c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002440:	2074      	movs	r0, #116	; 0x74
 8002442:	f7fe fc19 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002446:	2000      	movs	r0, #0
 8002448:	f7fe fc16 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 800244c:	2084      	movs	r0, #132	; 0x84
 800244e:	f7fe fc13 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002452:	2000      	movs	r0, #0
 8002454:	f7fe fc10 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8002458:	2093      	movs	r0, #147	; 0x93
 800245a:	f7fe fc0d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800245e:	2000      	movs	r0, #0
 8002460:	f7fe fc0a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8002464:	20a2      	movs	r0, #162	; 0xa2
 8002466:	f7fe fc07 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800246a:	2000      	movs	r0, #0
 800246c:	f7fe fc04 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8002470:	20b3      	movs	r0, #179	; 0xb3
 8002472:	f7fe fc01 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002476:	2000      	movs	r0, #0
 8002478:	f7fe fbfe 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 800247c:	20be      	movs	r0, #190	; 0xbe
 800247e:	f7fe fbfb 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002482:	2000      	movs	r0, #0
 8002484:	f7fe fbf8 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002488:	20c4      	movs	r0, #196	; 0xc4
 800248a:	f7fe fbf5 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800248e:	2000      	movs	r0, #0
 8002490:	f7fe fbf2 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8002494:	20cd      	movs	r0, #205	; 0xcd
 8002496:	f7fe fbef 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800249a:	2000      	movs	r0, #0
 800249c:	f7fe fbec 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80024a0:	20d3      	movs	r0, #211	; 0xd3
 80024a2:	f7fe fbe9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f7fe fbe6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 80024ac:	20dc      	movs	r0, #220	; 0xdc
 80024ae:	f7fe fbe3 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024b2:	2000      	movs	r0, #0
 80024b4:	f7fe fbe0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80024b8:	20f3      	movs	r0, #243	; 0xf3
 80024ba:	f7fe fbdd 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024be:	2000      	movs	r0, #0
 80024c0:	f7fe fbda 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 80024c4:	20e6      	movs	r0, #230	; 0xe6
 80024c6:	f7fe fbc7 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 80024ca:	2011      	movs	r0, #17
 80024cc:	f7fe fbd4 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7fe fbd1 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 80024d6:	2034      	movs	r0, #52	; 0x34
 80024d8:	f7fe fbce 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024dc:	2000      	movs	r0, #0
 80024de:	f7fe fbcb 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 80024e2:	2056      	movs	r0, #86	; 0x56
 80024e4:	f7fe fbc8 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024e8:	2000      	movs	r0, #0
 80024ea:	f7fe fbc5 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80024ee:	2076      	movs	r0, #118	; 0x76
 80024f0:	f7fe fbc2 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f7fe fbbf 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 80024fa:	2077      	movs	r0, #119	; 0x77
 80024fc:	f7fe fbbc 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002500:	2000      	movs	r0, #0
 8002502:	f7fe fbb9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002506:	2066      	movs	r0, #102	; 0x66
 8002508:	f7fe fbb6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800250c:	2000      	movs	r0, #0
 800250e:	f7fe fbb3 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002512:	2088      	movs	r0, #136	; 0x88
 8002514:	f7fe fbb0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002518:	2000      	movs	r0, #0
 800251a:	f7fe fbad 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800251e:	2099      	movs	r0, #153	; 0x99
 8002520:	f7fe fbaa 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002524:	2000      	movs	r0, #0
 8002526:	f7fe fba7 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 800252a:	20bb      	movs	r0, #187	; 0xbb
 800252c:	f7fe fba4 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002530:	2000      	movs	r0, #0
 8002532:	f7fe fba1 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002536:	2099      	movs	r0, #153	; 0x99
 8002538:	f7fe fb9e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800253c:	2000      	movs	r0, #0
 800253e:	f7fe fb9b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002542:	2066      	movs	r0, #102	; 0x66
 8002544:	f7fe fb98 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002548:	2000      	movs	r0, #0
 800254a:	f7fe fb95 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800254e:	2055      	movs	r0, #85	; 0x55
 8002550:	f7fe fb92 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002554:	2000      	movs	r0, #0
 8002556:	f7fe fb8f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800255a:	2055      	movs	r0, #85	; 0x55
 800255c:	f7fe fb8c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002560:	2000      	movs	r0, #0
 8002562:	f7fe fb89 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002566:	2045      	movs	r0, #69	; 0x45
 8002568:	f7fe fb86 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800256c:	2000      	movs	r0, #0
 800256e:	f7fe fb83 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8002572:	2043      	movs	r0, #67	; 0x43
 8002574:	f7fe fb80 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002578:	2000      	movs	r0, #0
 800257a:	f7fe fb7d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800257e:	2044      	movs	r0, #68	; 0x44
 8002580:	f7fe fb7a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002584:	2000      	movs	r0, #0
 8002586:	f7fe fb77 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 800258a:	20e7      	movs	r0, #231	; 0xe7
 800258c:	f7fe fb64 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8002590:	2032      	movs	r0, #50	; 0x32
 8002592:	f7fe fb71 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002596:	2000      	movs	r0, #0
 8002598:	f7fe fb6e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800259c:	2055      	movs	r0, #85	; 0x55
 800259e:	f7fe fb6b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025a2:	2000      	movs	r0, #0
 80025a4:	f7fe fb68 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80025a8:	2076      	movs	r0, #118	; 0x76
 80025aa:	f7fe fb65 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f7fe fb62 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80025b4:	2066      	movs	r0, #102	; 0x66
 80025b6:	f7fe fb5f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe fb5c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 80025c0:	2067      	movs	r0, #103	; 0x67
 80025c2:	f7fe fb59 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f7fe fb56 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 80025cc:	2067      	movs	r0, #103	; 0x67
 80025ce:	f7fe fb53 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025d2:	2000      	movs	r0, #0
 80025d4:	f7fe fb50 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 80025d8:	2087      	movs	r0, #135	; 0x87
 80025da:	f7fe fb4d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025de:	2000      	movs	r0, #0
 80025e0:	f7fe fb4a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80025e4:	2099      	movs	r0, #153	; 0x99
 80025e6:	f7fe fb47 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ea:	2000      	movs	r0, #0
 80025ec:	f7fe fb44 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 80025f0:	20bb      	movs	r0, #187	; 0xbb
 80025f2:	f7fe fb41 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025f6:	2000      	movs	r0, #0
 80025f8:	f7fe fb3e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80025fc:	2099      	movs	r0, #153	; 0x99
 80025fe:	f7fe fb3b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002602:	2000      	movs	r0, #0
 8002604:	f7fe fb38 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002608:	2077      	movs	r0, #119	; 0x77
 800260a:	f7fe fb35 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800260e:	2000      	movs	r0, #0
 8002610:	f7fe fb32 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002614:	2044      	movs	r0, #68	; 0x44
 8002616:	f7fe fb2f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800261a:	2000      	movs	r0, #0
 800261c:	f7fe fb2c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002620:	2056      	movs	r0, #86	; 0x56
 8002622:	f7fe fb29 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002626:	2000      	movs	r0, #0
 8002628:	f7fe fb26 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 800262c:	2023      	movs	r0, #35	; 0x23
 800262e:	f7fe fb23 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002632:	2000      	movs	r0, #0
 8002634:	f7fe fb20 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002638:	2033      	movs	r0, #51	; 0x33
 800263a:	f7fe fb1d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800263e:	2000      	movs	r0, #0
 8002640:	f7fe fb1a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002644:	2045      	movs	r0, #69	; 0x45
 8002646:	f7fe fb17 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800264a:	2000      	movs	r0, #0
 800264c:	f7fe fb14 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 8002650:	20e8      	movs	r0, #232	; 0xe8
 8002652:	f7fe fb01 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002656:	2000      	movs	r0, #0
 8002658:	f7fe fb0e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800265c:	2000      	movs	r0, #0
 800265e:	f7fe fb0b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002662:	2099      	movs	r0, #153	; 0x99
 8002664:	f7fe fb08 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002668:	2000      	movs	r0, #0
 800266a:	f7fe fb05 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 800266e:	2087      	movs	r0, #135	; 0x87
 8002670:	f7fe fb02 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002674:	2000      	movs	r0, #0
 8002676:	f7fe faff 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 800267a:	2088      	movs	r0, #136	; 0x88
 800267c:	f7fe fafc 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002680:	2000      	movs	r0, #0
 8002682:	f7fe faf9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002686:	2077      	movs	r0, #119	; 0x77
 8002688:	f7fe faf6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800268c:	2000      	movs	r0, #0
 800268e:	f7fe faf3 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002692:	2066      	movs	r0, #102	; 0x66
 8002694:	f7fe faf0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002698:	2000      	movs	r0, #0
 800269a:	f7fe faed 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 800269e:	2088      	movs	r0, #136	; 0x88
 80026a0:	f7fe faea 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7fe fae7 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 80026aa:	20aa      	movs	r0, #170	; 0xaa
 80026ac:	f7fe fae4 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026b0:	2000      	movs	r0, #0
 80026b2:	f7fe fae1 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 80026b6:	20bb      	movs	r0, #187	; 0xbb
 80026b8:	f7fe fade 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026bc:	2000      	movs	r0, #0
 80026be:	f7fe fadb 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80026c2:	2099      	movs	r0, #153	; 0x99
 80026c4:	f7fe fad8 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026c8:	2000      	movs	r0, #0
 80026ca:	f7fe fad5 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80026ce:	2066      	movs	r0, #102	; 0x66
 80026d0:	f7fe fad2 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7fe facf 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80026da:	2055      	movs	r0, #85	; 0x55
 80026dc:	f7fe facc 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026e0:	2000      	movs	r0, #0
 80026e2:	f7fe fac9 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80026e6:	2055      	movs	r0, #85	; 0x55
 80026e8:	f7fe fac6 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026ec:	2000      	movs	r0, #0
 80026ee:	f7fe fac3 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80026f2:	2044      	movs	r0, #68	; 0x44
 80026f4:	f7fe fac0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7fe fabd 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80026fe:	2044      	movs	r0, #68	; 0x44
 8002700:	f7fe faba 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002704:	2000      	movs	r0, #0
 8002706:	f7fe fab7 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800270a:	2055      	movs	r0, #85	; 0x55
 800270c:	f7fe fab4 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002710:	2000      	movs	r0, #0
 8002712:	f7fe fab1 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 8002716:	20e9      	movs	r0, #233	; 0xe9
 8002718:	f7fe fa9e 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 800271c:	20aa      	movs	r0, #170	; 0xaa
 800271e:	f7fe faab 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002722:	2000      	movs	r0, #0
 8002724:	f7fe faa8 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002728:	2000      	movs	r0, #0
 800272a:	f7fe faa5 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800272e:	2000      	movs	r0, #0
 8002730:	f7fe faa2 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 8002734:	2000      	movs	r0, #0
 8002736:	f7fe fa8f 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 800273a:	20aa      	movs	r0, #170	; 0xaa
 800273c:	f7fe fa9c 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 8002740:	20cf      	movs	r0, #207	; 0xcf
 8002742:	f7fe fa89 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002746:	2000      	movs	r0, #0
 8002748:	f7fe fa96 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800274c:	2000      	movs	r0, #0
 800274e:	f7fe fa93 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002752:	2000      	movs	r0, #0
 8002754:	f7fe fa90 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002758:	2000      	movs	r0, #0
 800275a:	f7fe fa8d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800275e:	2000      	movs	r0, #0
 8002760:	f7fe fa8a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002764:	2000      	movs	r0, #0
 8002766:	f7fe fa87 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800276a:	2000      	movs	r0, #0
 800276c:	f7fe fa84 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002770:	2000      	movs	r0, #0
 8002772:	f7fe fa81 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002776:	2000      	movs	r0, #0
 8002778:	f7fe fa7e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800277c:	2000      	movs	r0, #0
 800277e:	f7fe fa7b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002782:	2000      	movs	r0, #0
 8002784:	f7fe fa78 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002788:	2000      	movs	r0, #0
 800278a:	f7fe fa75 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800278e:	2000      	movs	r0, #0
 8002790:	f7fe fa72 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002794:	2000      	movs	r0, #0
 8002796:	f7fe fa6f 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800279a:	2000      	movs	r0, #0
 800279c:	f7fe fa6c 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7fe fa69 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f7fe fa66 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 80027ac:	20f0      	movs	r0, #240	; 0xf0
 80027ae:	f7fe fa53 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f7fe fa60 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 80027b8:	2050      	movs	r0, #80	; 0x50
 80027ba:	f7fe fa5d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027be:	2000      	movs	r0, #0
 80027c0:	f7fe fa5a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7fe fa57 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027ca:	2000      	movs	r0, #0
 80027cc:	f7fe fa54 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 80027d0:	20f3      	movs	r0, #243	; 0xf3
 80027d2:	f7fe fa41 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7fe fa4e 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 80027dc:	20f9      	movs	r0, #249	; 0xf9
 80027de:	f7fe fa3b 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 80027e2:	2006      	movs	r0, #6
 80027e4:	f7fe fa48 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 80027e8:	2010      	movs	r0, #16
 80027ea:	f7fe fa45 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 80027ee:	2029      	movs	r0, #41	; 0x29
 80027f0:	f7fe fa42 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7fe fa3f 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 80027fa:	203a      	movs	r0, #58	; 0x3a
 80027fc:	f7fe fa2c 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8002800:	2055      	movs	r0, #85	; 0x55
 8002802:	f7fe fa39 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 8002806:	2011      	movs	r0, #17
 8002808:	f7fe fa26 	bl	8000c58 <LCD_WR_REG>
		HAL_Delay(100);
 800280c:	2064      	movs	r0, #100	; 0x64
 800280e:	f002 f8d5 	bl	80049bc <HAL_Delay>
		//delay_ms(100);
		LCD_WR_REG(0x29);
 8002812:	2029      	movs	r0, #41	; 0x29
 8002814:	f7fe fa20 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8002818:	2035      	movs	r0, #53	; 0x35
 800281a:	f7fe fa1d 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800281e:	2000      	movs	r0, #0
 8002820:	f7fe fa2a 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 8002824:	2051      	movs	r0, #81	; 0x51
 8002826:	f7fe fa17 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 800282a:	20ff      	movs	r0, #255	; 0xff
 800282c:	f7fe fa24 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8002830:	2053      	movs	r0, #83	; 0x53
 8002832:	f7fe fa11 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 8002836:	202c      	movs	r0, #44	; 0x2c
 8002838:	f7fe fa1e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 800283c:	2055      	movs	r0, #85	; 0x55
 800283e:	f7fe fa0b 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 8002842:	2082      	movs	r0, #130	; 0x82
 8002844:	f7fe fa18 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8002848:	202c      	movs	r0, #44	; 0x2c
 800284a:	f7fe fa05 	bl	8000c58 <LCD_WR_REG>
 800284e:	f001 b844 	b.w	80038da <LCD_Init+0x2342>
	}else if(lcddev.id==0x5510)
 8002852:	4b04      	ldr	r3, [pc, #16]	; (8002864 <LCD_Init+0x12cc>)
 8002854:	889b      	ldrh	r3, [r3, #4]
 8002856:	f245 5210 	movw	r2, #21776	; 0x5510
 800285a:	4293      	cmp	r3, r2
 800285c:	f040 877e 	bne.w	800375c <LCD_Init+0x21c4>
 8002860:	e002      	b.n	8002868 <LCD_Init+0x12d0>
 8002862:	bf00      	nop
 8002864:	200000dc 	.word	0x200000dc
	{
		LCD_WriteReg(0xF000,0x55);
 8002868:	2155      	movs	r1, #85	; 0x55
 800286a:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 800286e:	f7fe fa23 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8002872:	21aa      	movs	r1, #170	; 0xaa
 8002874:	f24f 0001 	movw	r0, #61441	; 0xf001
 8002878:	f7fe fa1e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 800287c:	2152      	movs	r1, #82	; 0x52
 800287e:	f24f 0002 	movw	r0, #61442	; 0xf002
 8002882:	f7fe fa19 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8002886:	2108      	movs	r1, #8
 8002888:	f24f 0003 	movw	r0, #61443	; 0xf003
 800288c:	f7fe fa14 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 8002890:	2101      	movs	r1, #1
 8002892:	f24f 0004 	movw	r0, #61444	; 0xf004
 8002896:	f7fe fa0f 	bl	8000cb8 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 800289a:	210d      	movs	r1, #13
 800289c:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80028a0:	f7fe fa0a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 80028a4:	210d      	movs	r1, #13
 80028a6:	f24b 0001 	movw	r0, #45057	; 0xb001
 80028aa:	f7fe fa05 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 80028ae:	210d      	movs	r1, #13
 80028b0:	f24b 0002 	movw	r0, #45058	; 0xb002
 80028b4:	f7fe fa00 	bl	8000cb8 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 80028b8:	2134      	movs	r1, #52	; 0x34
 80028ba:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80028be:	f7fe f9fb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 80028c2:	2134      	movs	r1, #52	; 0x34
 80028c4:	f24b 6001 	movw	r0, #46593	; 0xb601
 80028c8:	f7fe f9f6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 80028cc:	2134      	movs	r1, #52	; 0x34
 80028ce:	f24b 6002 	movw	r0, #46594	; 0xb602
 80028d2:	f7fe f9f1 	bl	8000cb8 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 80028d6:	210d      	movs	r1, #13
 80028d8:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80028dc:	f7fe f9ec 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 80028e0:	210d      	movs	r1, #13
 80028e2:	f24b 1001 	movw	r0, #45313	; 0xb101
 80028e6:	f7fe f9e7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 80028ea:	210d      	movs	r1, #13
 80028ec:	f24b 1002 	movw	r0, #45314	; 0xb102
 80028f0:	f7fe f9e2 	bl	8000cb8 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 80028f4:	2134      	movs	r1, #52	; 0x34
 80028f6:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80028fa:	f7fe f9dd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 80028fe:	2134      	movs	r1, #52	; 0x34
 8002900:	f24b 7001 	movw	r0, #46849	; 0xb701
 8002904:	f7fe f9d8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 8002908:	2134      	movs	r1, #52	; 0x34
 800290a:	f24b 7002 	movw	r0, #46850	; 0xb702
 800290e:	f7fe f9d3 	bl	8000cb8 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 8002912:	2100      	movs	r1, #0
 8002914:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8002918:	f7fe f9ce 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 800291c:	2100      	movs	r1, #0
 800291e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8002922:	f7fe f9c9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 8002926:	2100      	movs	r1, #0
 8002928:	f24b 2002 	movw	r0, #45570	; 0xb202
 800292c:	f7fe f9c4 	bl	8000cb8 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8002930:	2124      	movs	r1, #36	; 0x24
 8002932:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8002936:	f7fe f9bf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 800293a:	2124      	movs	r1, #36	; 0x24
 800293c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8002940:	f7fe f9ba 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8002944:	2124      	movs	r1, #36	; 0x24
 8002946:	f64b 0002 	movw	r0, #47106	; 0xb802
 800294a:	f7fe f9b5 	bl	8000cb8 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 800294e:	2101      	movs	r1, #1
 8002950:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8002954:	f7fe f9b0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 8002958:	210f      	movs	r1, #15
 800295a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 800295e:	f7fe f9ab 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 8002962:	210f      	movs	r1, #15
 8002964:	f24b 3001 	movw	r0, #45825	; 0xb301
 8002968:	f7fe f9a6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 800296c:	210f      	movs	r1, #15
 800296e:	f24b 3002 	movw	r0, #45826	; 0xb302
 8002972:	f7fe f9a1 	bl	8000cb8 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 8002976:	2134      	movs	r1, #52	; 0x34
 8002978:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 800297c:	f7fe f99c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 8002980:	2134      	movs	r1, #52	; 0x34
 8002982:	f64b 1001 	movw	r0, #47361	; 0xb901
 8002986:	f7fe f997 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 800298a:	2134      	movs	r1, #52	; 0x34
 800298c:	f64b 1002 	movw	r0, #47362	; 0xb902
 8002990:	f7fe f992 	bl	8000cb8 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 8002994:	2108      	movs	r1, #8
 8002996:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 800299a:	f7fe f98d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 800299e:	2108      	movs	r1, #8
 80029a0:	f24b 5001 	movw	r0, #46337	; 0xb501
 80029a4:	f7fe f988 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 80029a8:	2108      	movs	r1, #8
 80029aa:	f24b 5002 	movw	r0, #46338	; 0xb502
 80029ae:	f7fe f983 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 80029b2:	2103      	movs	r1, #3
 80029b4:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80029b8:	f7fe f97e 	bl	8000cb8 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 80029bc:	2124      	movs	r1, #36	; 0x24
 80029be:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80029c2:	f7fe f979 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 80029c6:	2124      	movs	r1, #36	; 0x24
 80029c8:	f64b 2001 	movw	r0, #47617	; 0xba01
 80029cc:	f7fe f974 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 80029d0:	2124      	movs	r1, #36	; 0x24
 80029d2:	f64b 2002 	movw	r0, #47618	; 0xba02
 80029d6:	f7fe f96f 	bl	8000cb8 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 80029da:	2100      	movs	r1, #0
 80029dc:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80029e0:	f7fe f96a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 80029e4:	2178      	movs	r1, #120	; 0x78
 80029e6:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80029ea:	f7fe f965 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 80029ee:	2100      	movs	r1, #0
 80029f0:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80029f4:	f7fe f960 	bl	8000cb8 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 80029f8:	2100      	movs	r1, #0
 80029fa:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 80029fe:	f7fe f95b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 8002a02:	2178      	movs	r1, #120	; 0x78
 8002a04:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8002a08:	f7fe f956 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8002a12:	f7fe f951 	bl	8000cb8 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 8002a16:	2100      	movs	r1, #0
 8002a18:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8002a1c:	f7fe f94c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 8002a20:	2164      	movs	r1, #100	; 0x64
 8002a22:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8002a26:	f7fe f947 	bl	8000cb8 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8002a30:	f7fe f942 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8002a34:	2133      	movs	r1, #51	; 0x33
 8002a36:	f24d 1001 	movw	r0, #53505	; 0xd101
 8002a3a:	f7fe f93d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 8002a3e:	2100      	movs	r1, #0
 8002a40:	f24d 1002 	movw	r0, #53506	; 0xd102
 8002a44:	f7fe f938 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 8002a48:	2134      	movs	r1, #52	; 0x34
 8002a4a:	f24d 1003 	movw	r0, #53507	; 0xd103
 8002a4e:	f7fe f933 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 8002a52:	2100      	movs	r1, #0
 8002a54:	f24d 1004 	movw	r0, #53508	; 0xd104
 8002a58:	f7fe f92e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 8002a5c:	213a      	movs	r1, #58	; 0x3a
 8002a5e:	f24d 1005 	movw	r0, #53509	; 0xd105
 8002a62:	f7fe f929 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 8002a66:	2100      	movs	r1, #0
 8002a68:	f24d 1006 	movw	r0, #53510	; 0xd106
 8002a6c:	f7fe f924 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 8002a70:	214a      	movs	r1, #74	; 0x4a
 8002a72:	f24d 1007 	movw	r0, #53511	; 0xd107
 8002a76:	f7fe f91f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	f24d 1008 	movw	r0, #53512	; 0xd108
 8002a80:	f7fe f91a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 8002a84:	215c      	movs	r1, #92	; 0x5c
 8002a86:	f24d 1009 	movw	r0, #53513	; 0xd109
 8002a8a:	f7fe f915 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 8002a8e:	2100      	movs	r1, #0
 8002a90:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8002a94:	f7fe f910 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 8002a98:	2181      	movs	r1, #129	; 0x81
 8002a9a:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8002a9e:	f7fe f90b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 8002aa2:	2100      	movs	r1, #0
 8002aa4:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8002aa8:	f7fe f906 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 8002aac:	21a6      	movs	r1, #166	; 0xa6
 8002aae:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8002ab2:	f7fe f901 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 8002ab6:	2100      	movs	r1, #0
 8002ab8:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8002abc:	f7fe f8fc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8002ac0:	21e5      	movs	r1, #229	; 0xe5
 8002ac2:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8002ac6:	f7fe f8f7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 8002aca:	2101      	movs	r1, #1
 8002acc:	f24d 1010 	movw	r0, #53520	; 0xd110
 8002ad0:	f7fe f8f2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 8002ad4:	2113      	movs	r1, #19
 8002ad6:	f24d 1011 	movw	r0, #53521	; 0xd111
 8002ada:	f7fe f8ed 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8002ade:	2101      	movs	r1, #1
 8002ae0:	f24d 1012 	movw	r0, #53522	; 0xd112
 8002ae4:	f7fe f8e8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 8002ae8:	2154      	movs	r1, #84	; 0x54
 8002aea:	f24d 1013 	movw	r0, #53523	; 0xd113
 8002aee:	f7fe f8e3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 8002af2:	2101      	movs	r1, #1
 8002af4:	f24d 1014 	movw	r0, #53524	; 0xd114
 8002af8:	f7fe f8de 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8002afc:	2182      	movs	r1, #130	; 0x82
 8002afe:	f24d 1015 	movw	r0, #53525	; 0xd115
 8002b02:	f7fe f8d9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 8002b06:	2101      	movs	r1, #1
 8002b08:	f24d 1016 	movw	r0, #53526	; 0xd116
 8002b0c:	f7fe f8d4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8002b10:	21ca      	movs	r1, #202	; 0xca
 8002b12:	f24d 1017 	movw	r0, #53527	; 0xd117
 8002b16:	f7fe f8cf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8002b20:	f7fe f8ca 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8002b24:	2100      	movs	r1, #0
 8002b26:	f24d 1019 	movw	r0, #53529	; 0xd119
 8002b2a:	f7fe f8c5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 8002b2e:	2102      	movs	r1, #2
 8002b30:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8002b34:	f7fe f8c0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 8002b38:	2101      	movs	r1, #1
 8002b3a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8002b3e:	f7fe f8bb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 8002b42:	2102      	movs	r1, #2
 8002b44:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8002b48:	f7fe f8b6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 8002b4c:	2134      	movs	r1, #52	; 0x34
 8002b4e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8002b52:	f7fe f8b1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 8002b56:	2102      	movs	r1, #2
 8002b58:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8002b5c:	f7fe f8ac 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 8002b60:	2167      	movs	r1, #103	; 0x67
 8002b62:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8002b66:	f7fe f8a7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 8002b6a:	2102      	movs	r1, #2
 8002b6c:	f24d 1020 	movw	r0, #53536	; 0xd120
 8002b70:	f7fe f8a2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 8002b74:	2184      	movs	r1, #132	; 0x84
 8002b76:	f24d 1021 	movw	r0, #53537	; 0xd121
 8002b7a:	f7fe f89d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 8002b7e:	2102      	movs	r1, #2
 8002b80:	f24d 1022 	movw	r0, #53538	; 0xd122
 8002b84:	f7fe f898 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 8002b88:	21a4      	movs	r1, #164	; 0xa4
 8002b8a:	f24d 1023 	movw	r0, #53539	; 0xd123
 8002b8e:	f7fe f893 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 8002b92:	2102      	movs	r1, #2
 8002b94:	f24d 1024 	movw	r0, #53540	; 0xd124
 8002b98:	f7fe f88e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 8002b9c:	21b7      	movs	r1, #183	; 0xb7
 8002b9e:	f24d 1025 	movw	r0, #53541	; 0xd125
 8002ba2:	f7fe f889 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 8002ba6:	2102      	movs	r1, #2
 8002ba8:	f24d 1026 	movw	r0, #53542	; 0xd126
 8002bac:	f7fe f884 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 8002bb0:	21cf      	movs	r1, #207	; 0xcf
 8002bb2:	f24d 1027 	movw	r0, #53543	; 0xd127
 8002bb6:	f7fe f87f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 8002bba:	2102      	movs	r1, #2
 8002bbc:	f24d 1028 	movw	r0, #53544	; 0xd128
 8002bc0:	f7fe f87a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 8002bc4:	21de      	movs	r1, #222	; 0xde
 8002bc6:	f24d 1029 	movw	r0, #53545	; 0xd129
 8002bca:	f7fe f875 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8002bce:	2102      	movs	r1, #2
 8002bd0:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8002bd4:	f7fe f870 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 8002bd8:	21f2      	movs	r1, #242	; 0xf2
 8002bda:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8002bde:	f7fe f86b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 8002be2:	2102      	movs	r1, #2
 8002be4:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8002be8:	f7fe f866 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8002bec:	21fe      	movs	r1, #254	; 0xfe
 8002bee:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8002bf2:	f7fe f861 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 8002bf6:	2103      	movs	r1, #3
 8002bf8:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8002bfc:	f7fe f85c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8002c00:	2110      	movs	r1, #16
 8002c02:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8002c06:	f7fe f857 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 8002c0a:	2103      	movs	r1, #3
 8002c0c:	f24d 1030 	movw	r0, #53552	; 0xd130
 8002c10:	f7fe f852 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8002c14:	2133      	movs	r1, #51	; 0x33
 8002c16:	f24d 1031 	movw	r0, #53553	; 0xd131
 8002c1a:	f7fe f84d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 8002c1e:	2103      	movs	r1, #3
 8002c20:	f24d 1032 	movw	r0, #53554	; 0xd132
 8002c24:	f7fe f848 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 8002c28:	216d      	movs	r1, #109	; 0x6d
 8002c2a:	f24d 1033 	movw	r0, #53555	; 0xd133
 8002c2e:	f7fe f843 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 8002c32:	2100      	movs	r1, #0
 8002c34:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8002c38:	f7fe f83e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8002c3c:	2133      	movs	r1, #51	; 0x33
 8002c3e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8002c42:	f7fe f839 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 8002c46:	2100      	movs	r1, #0
 8002c48:	f24d 2002 	movw	r0, #53762	; 0xd202
 8002c4c:	f7fe f834 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 8002c50:	2134      	movs	r1, #52	; 0x34
 8002c52:	f24d 2003 	movw	r0, #53763	; 0xd203
 8002c56:	f7fe f82f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8002c60:	f7fe f82a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 8002c64:	213a      	movs	r1, #58	; 0x3a
 8002c66:	f24d 2005 	movw	r0, #53765	; 0xd205
 8002c6a:	f7fe f825 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 8002c6e:	2100      	movs	r1, #0
 8002c70:	f24d 2006 	movw	r0, #53766	; 0xd206
 8002c74:	f7fe f820 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 8002c78:	214a      	movs	r1, #74	; 0x4a
 8002c7a:	f24d 2007 	movw	r0, #53767	; 0xd207
 8002c7e:	f7fe f81b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 8002c82:	2100      	movs	r1, #0
 8002c84:	f24d 2008 	movw	r0, #53768	; 0xd208
 8002c88:	f7fe f816 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 8002c8c:	215c      	movs	r1, #92	; 0x5c
 8002c8e:	f24d 2009 	movw	r0, #53769	; 0xd209
 8002c92:	f7fe f811 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 8002c96:	2100      	movs	r1, #0
 8002c98:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8002c9c:	f7fe f80c 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 8002ca0:	2181      	movs	r1, #129	; 0x81
 8002ca2:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8002ca6:	f7fe f807 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 8002caa:	2100      	movs	r1, #0
 8002cac:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8002cb0:	f7fe f802 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 8002cb4:	21a6      	movs	r1, #166	; 0xa6
 8002cb6:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8002cba:	f7fd fffd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8002cc4:	f7fd fff8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 8002cc8:	21e5      	movs	r1, #229	; 0xe5
 8002cca:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8002cce:	f7fd fff3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	f24d 2010 	movw	r0, #53776	; 0xd210
 8002cd8:	f7fd ffee 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8002cdc:	2113      	movs	r1, #19
 8002cde:	f24d 2011 	movw	r0, #53777	; 0xd211
 8002ce2:	f7fd ffe9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	f24d 2012 	movw	r0, #53778	; 0xd212
 8002cec:	f7fd ffe4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8002cf0:	2154      	movs	r1, #84	; 0x54
 8002cf2:	f24d 2013 	movw	r0, #53779	; 0xd213
 8002cf6:	f7fd ffdf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	f24d 2014 	movw	r0, #53780	; 0xd214
 8002d00:	f7fd ffda 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8002d04:	2182      	movs	r1, #130	; 0x82
 8002d06:	f24d 2015 	movw	r0, #53781	; 0xd215
 8002d0a:	f7fd ffd5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8002d0e:	2101      	movs	r1, #1
 8002d10:	f24d 2016 	movw	r0, #53782	; 0xd216
 8002d14:	f7fd ffd0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 8002d18:	21ca      	movs	r1, #202	; 0xca
 8002d1a:	f24d 2017 	movw	r0, #53783	; 0xd217
 8002d1e:	f7fd ffcb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 8002d22:	2102      	movs	r1, #2
 8002d24:	f24d 2018 	movw	r0, #53784	; 0xd218
 8002d28:	f7fd ffc6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8002d32:	f7fd ffc1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 8002d36:	2102      	movs	r1, #2
 8002d38:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8002d3c:	f7fd ffbc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 8002d40:	2101      	movs	r1, #1
 8002d42:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8002d46:	f7fd ffb7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8002d50:	f7fd ffb2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 8002d54:	2134      	movs	r1, #52	; 0x34
 8002d56:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8002d5a:	f7fd ffad 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 8002d5e:	2102      	movs	r1, #2
 8002d60:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8002d64:	f7fd ffa8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 8002d68:	2167      	movs	r1, #103	; 0x67
 8002d6a:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8002d6e:	f7fd ffa3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 8002d72:	2102      	movs	r1, #2
 8002d74:	f24d 2020 	movw	r0, #53792	; 0xd220
 8002d78:	f7fd ff9e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 8002d7c:	2184      	movs	r1, #132	; 0x84
 8002d7e:	f24d 2021 	movw	r0, #53793	; 0xd221
 8002d82:	f7fd ff99 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 8002d86:	2102      	movs	r1, #2
 8002d88:	f24d 2022 	movw	r0, #53794	; 0xd222
 8002d8c:	f7fd ff94 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 8002d90:	21a4      	movs	r1, #164	; 0xa4
 8002d92:	f24d 2023 	movw	r0, #53795	; 0xd223
 8002d96:	f7fd ff8f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 8002d9a:	2102      	movs	r1, #2
 8002d9c:	f24d 2024 	movw	r0, #53796	; 0xd224
 8002da0:	f7fd ff8a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 8002da4:	21b7      	movs	r1, #183	; 0xb7
 8002da6:	f24d 2025 	movw	r0, #53797	; 0xd225
 8002daa:	f7fd ff85 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 8002dae:	2102      	movs	r1, #2
 8002db0:	f24d 2026 	movw	r0, #53798	; 0xd226
 8002db4:	f7fd ff80 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 8002db8:	21cf      	movs	r1, #207	; 0xcf
 8002dba:	f24d 2027 	movw	r0, #53799	; 0xd227
 8002dbe:	f7fd ff7b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 8002dc2:	2102      	movs	r1, #2
 8002dc4:	f24d 2028 	movw	r0, #53800	; 0xd228
 8002dc8:	f7fd ff76 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8002dcc:	21de      	movs	r1, #222	; 0xde
 8002dce:	f24d 2029 	movw	r0, #53801	; 0xd229
 8002dd2:	f7fd ff71 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8002ddc:	f7fd ff6c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8002de0:	21f2      	movs	r1, #242	; 0xf2
 8002de2:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8002de6:	f7fd ff67 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 8002dea:	2102      	movs	r1, #2
 8002dec:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8002df0:	f7fd ff62 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 8002df4:	21fe      	movs	r1, #254	; 0xfe
 8002df6:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8002dfa:	f7fd ff5d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8002dfe:	2103      	movs	r1, #3
 8002e00:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8002e04:	f7fd ff58 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 8002e08:	2110      	movs	r1, #16
 8002e0a:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8002e0e:	f7fd ff53 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 8002e12:	2103      	movs	r1, #3
 8002e14:	f24d 2030 	movw	r0, #53808	; 0xd230
 8002e18:	f7fd ff4e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8002e1c:	2133      	movs	r1, #51	; 0x33
 8002e1e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8002e22:	f7fd ff49 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 8002e26:	2103      	movs	r1, #3
 8002e28:	f24d 2032 	movw	r0, #53810	; 0xd232
 8002e2c:	f7fd ff44 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 8002e30:	216d      	movs	r1, #109	; 0x6d
 8002e32:	f24d 2033 	movw	r0, #53811	; 0xd233
 8002e36:	f7fd ff3f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8002e40:	f7fd ff3a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 8002e44:	2133      	movs	r1, #51	; 0x33
 8002e46:	f24d 3001 	movw	r0, #54017	; 0xd301
 8002e4a:	f7fd ff35 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 8002e4e:	2100      	movs	r1, #0
 8002e50:	f24d 3002 	movw	r0, #54018	; 0xd302
 8002e54:	f7fd ff30 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 8002e58:	2134      	movs	r1, #52	; 0x34
 8002e5a:	f24d 3003 	movw	r0, #54019	; 0xd303
 8002e5e:	f7fd ff2b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 8002e62:	2100      	movs	r1, #0
 8002e64:	f24d 3004 	movw	r0, #54020	; 0xd304
 8002e68:	f7fd ff26 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 8002e6c:	213a      	movs	r1, #58	; 0x3a
 8002e6e:	f24d 3005 	movw	r0, #54021	; 0xd305
 8002e72:	f7fd ff21 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 8002e76:	2100      	movs	r1, #0
 8002e78:	f24d 3006 	movw	r0, #54022	; 0xd306
 8002e7c:	f7fd ff1c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 8002e80:	214a      	movs	r1, #74	; 0x4a
 8002e82:	f24d 3007 	movw	r0, #54023	; 0xd307
 8002e86:	f7fd ff17 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	f24d 3008 	movw	r0, #54024	; 0xd308
 8002e90:	f7fd ff12 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 8002e94:	215c      	movs	r1, #92	; 0x5c
 8002e96:	f24d 3009 	movw	r0, #54025	; 0xd309
 8002e9a:	f7fd ff0d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8002ea4:	f7fd ff08 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 8002ea8:	2181      	movs	r1, #129	; 0x81
 8002eaa:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8002eae:	f7fd ff03 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8002eb8:	f7fd fefe 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 8002ebc:	21a6      	movs	r1, #166	; 0xa6
 8002ebe:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8002ec2:	f7fd fef9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 8002ec6:	2100      	movs	r1, #0
 8002ec8:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8002ecc:	f7fd fef4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 8002ed0:	21e5      	movs	r1, #229	; 0xe5
 8002ed2:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8002ed6:	f7fd feef 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 8002eda:	2101      	movs	r1, #1
 8002edc:	f24d 3010 	movw	r0, #54032	; 0xd310
 8002ee0:	f7fd feea 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 8002ee4:	2113      	movs	r1, #19
 8002ee6:	f24d 3011 	movw	r0, #54033	; 0xd311
 8002eea:	f7fd fee5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8002eee:	2101      	movs	r1, #1
 8002ef0:	f24d 3012 	movw	r0, #54034	; 0xd312
 8002ef4:	f7fd fee0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 8002ef8:	2154      	movs	r1, #84	; 0x54
 8002efa:	f24d 3013 	movw	r0, #54035	; 0xd313
 8002efe:	f7fd fedb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 8002f02:	2101      	movs	r1, #1
 8002f04:	f24d 3014 	movw	r0, #54036	; 0xd314
 8002f08:	f7fd fed6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8002f0c:	2182      	movs	r1, #130	; 0x82
 8002f0e:	f24d 3015 	movw	r0, #54037	; 0xd315
 8002f12:	f7fd fed1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 8002f16:	2101      	movs	r1, #1
 8002f18:	f24d 3016 	movw	r0, #54038	; 0xd316
 8002f1c:	f7fd fecc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 8002f20:	21ca      	movs	r1, #202	; 0xca
 8002f22:	f24d 3017 	movw	r0, #54039	; 0xd317
 8002f26:	f7fd fec7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8002f30:	f7fd fec2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 8002f34:	2100      	movs	r1, #0
 8002f36:	f24d 3019 	movw	r0, #54041	; 0xd319
 8002f3a:	f7fd febd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 8002f3e:	2102      	movs	r1, #2
 8002f40:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8002f44:	f7fd feb8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 8002f48:	2101      	movs	r1, #1
 8002f4a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8002f4e:	f7fd feb3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 8002f52:	2102      	movs	r1, #2
 8002f54:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8002f58:	f7fd feae 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 8002f5c:	2134      	movs	r1, #52	; 0x34
 8002f5e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8002f62:	f7fd fea9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 8002f66:	2102      	movs	r1, #2
 8002f68:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8002f6c:	f7fd fea4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 8002f70:	2167      	movs	r1, #103	; 0x67
 8002f72:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8002f76:	f7fd fe9f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 8002f7a:	2102      	movs	r1, #2
 8002f7c:	f24d 3020 	movw	r0, #54048	; 0xd320
 8002f80:	f7fd fe9a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 8002f84:	2184      	movs	r1, #132	; 0x84
 8002f86:	f24d 3021 	movw	r0, #54049	; 0xd321
 8002f8a:	f7fd fe95 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 8002f8e:	2102      	movs	r1, #2
 8002f90:	f24d 3022 	movw	r0, #54050	; 0xd322
 8002f94:	f7fd fe90 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 8002f98:	21a4      	movs	r1, #164	; 0xa4
 8002f9a:	f24d 3023 	movw	r0, #54051	; 0xd323
 8002f9e:	f7fd fe8b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	f24d 3024 	movw	r0, #54052	; 0xd324
 8002fa8:	f7fd fe86 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 8002fac:	21b7      	movs	r1, #183	; 0xb7
 8002fae:	f24d 3025 	movw	r0, #54053	; 0xd325
 8002fb2:	f7fd fe81 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	f24d 3026 	movw	r0, #54054	; 0xd326
 8002fbc:	f7fd fe7c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 8002fc0:	21cf      	movs	r1, #207	; 0xcf
 8002fc2:	f24d 3027 	movw	r0, #54055	; 0xd327
 8002fc6:	f7fd fe77 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 8002fca:	2102      	movs	r1, #2
 8002fcc:	f24d 3028 	movw	r0, #54056	; 0xd328
 8002fd0:	f7fd fe72 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 8002fd4:	21de      	movs	r1, #222	; 0xde
 8002fd6:	f24d 3029 	movw	r0, #54057	; 0xd329
 8002fda:	f7fd fe6d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 8002fde:	2102      	movs	r1, #2
 8002fe0:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8002fe4:	f7fd fe68 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 8002fe8:	21f2      	movs	r1, #242	; 0xf2
 8002fea:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8002fee:	f7fd fe63 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8002ff8:	f7fd fe5e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8002ffc:	21fe      	movs	r1, #254	; 0xfe
 8002ffe:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003002:	f7fd fe59 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 8003006:	2103      	movs	r1, #3
 8003008:	f24d 302e 	movw	r0, #54062	; 0xd32e
 800300c:	f7fd fe54 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8003010:	2110      	movs	r1, #16
 8003012:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003016:	f7fd fe4f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 800301a:	2103      	movs	r1, #3
 800301c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003020:	f7fd fe4a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 8003024:	2133      	movs	r1, #51	; 0x33
 8003026:	f24d 3031 	movw	r0, #54065	; 0xd331
 800302a:	f7fd fe45 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 800302e:	2103      	movs	r1, #3
 8003030:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003034:	f7fd fe40 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 8003038:	216d      	movs	r1, #109	; 0x6d
 800303a:	f24d 3033 	movw	r0, #54067	; 0xd333
 800303e:	f7fd fe3b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 8003042:	2100      	movs	r1, #0
 8003044:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003048:	f7fd fe36 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 800304c:	2133      	movs	r1, #51	; 0x33
 800304e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003052:	f7fd fe31 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 8003056:	2100      	movs	r1, #0
 8003058:	f24d 4002 	movw	r0, #54274	; 0xd402
 800305c:	f7fd fe2c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 8003060:	2134      	movs	r1, #52	; 0x34
 8003062:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003066:	f7fd fe27 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 800306a:	2100      	movs	r1, #0
 800306c:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003070:	f7fd fe22 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 8003074:	213a      	movs	r1, #58	; 0x3a
 8003076:	f24d 4005 	movw	r0, #54277	; 0xd405
 800307a:	f7fd fe1d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 800307e:	2100      	movs	r1, #0
 8003080:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003084:	f7fd fe18 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 8003088:	214a      	movs	r1, #74	; 0x4a
 800308a:	f24d 4007 	movw	r0, #54279	; 0xd407
 800308e:	f7fd fe13 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 8003092:	2100      	movs	r1, #0
 8003094:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003098:	f7fd fe0e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 800309c:	215c      	movs	r1, #92	; 0x5c
 800309e:	f24d 4009 	movw	r0, #54281	; 0xd409
 80030a2:	f7fd fe09 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 80030a6:	2100      	movs	r1, #0
 80030a8:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80030ac:	f7fd fe04 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 80030b0:	2181      	movs	r1, #129	; 0x81
 80030b2:	f24d 400b 	movw	r0, #54283	; 0xd40b
 80030b6:	f7fd fdff 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 80030ba:	2100      	movs	r1, #0
 80030bc:	f24d 400c 	movw	r0, #54284	; 0xd40c
 80030c0:	f7fd fdfa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 80030c4:	21a6      	movs	r1, #166	; 0xa6
 80030c6:	f24d 400d 	movw	r0, #54285	; 0xd40d
 80030ca:	f7fd fdf5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 80030ce:	2100      	movs	r1, #0
 80030d0:	f24d 400e 	movw	r0, #54286	; 0xd40e
 80030d4:	f7fd fdf0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 80030d8:	21e5      	movs	r1, #229	; 0xe5
 80030da:	f24d 400f 	movw	r0, #54287	; 0xd40f
 80030de:	f7fd fdeb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 80030e2:	2101      	movs	r1, #1
 80030e4:	f24d 4010 	movw	r0, #54288	; 0xd410
 80030e8:	f7fd fde6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 80030ec:	2113      	movs	r1, #19
 80030ee:	f24d 4011 	movw	r0, #54289	; 0xd411
 80030f2:	f7fd fde1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 80030f6:	2101      	movs	r1, #1
 80030f8:	f24d 4012 	movw	r0, #54290	; 0xd412
 80030fc:	f7fd fddc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 8003100:	2154      	movs	r1, #84	; 0x54
 8003102:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003106:	f7fd fdd7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 800310a:	2101      	movs	r1, #1
 800310c:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003110:	f7fd fdd2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 8003114:	2182      	movs	r1, #130	; 0x82
 8003116:	f24d 4015 	movw	r0, #54293	; 0xd415
 800311a:	f7fd fdcd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 800311e:	2101      	movs	r1, #1
 8003120:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003124:	f7fd fdc8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 8003128:	21ca      	movs	r1, #202	; 0xca
 800312a:	f24d 4017 	movw	r0, #54295	; 0xd417
 800312e:	f7fd fdc3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 8003132:	2102      	movs	r1, #2
 8003134:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003138:	f7fd fdbe 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 800313c:	2100      	movs	r1, #0
 800313e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003142:	f7fd fdb9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 8003146:	2102      	movs	r1, #2
 8003148:	f24d 401a 	movw	r0, #54298	; 0xd41a
 800314c:	f7fd fdb4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 8003150:	2101      	movs	r1, #1
 8003152:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003156:	f7fd fdaf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 800315a:	2102      	movs	r1, #2
 800315c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003160:	f7fd fdaa 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 8003164:	2134      	movs	r1, #52	; 0x34
 8003166:	f24d 401d 	movw	r0, #54301	; 0xd41d
 800316a:	f7fd fda5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 800316e:	2102      	movs	r1, #2
 8003170:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003174:	f7fd fda0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 8003178:	2167      	movs	r1, #103	; 0x67
 800317a:	f24d 401f 	movw	r0, #54303	; 0xd41f
 800317e:	f7fd fd9b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 8003182:	2102      	movs	r1, #2
 8003184:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003188:	f7fd fd96 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 800318c:	2184      	movs	r1, #132	; 0x84
 800318e:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003192:	f7fd fd91 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 8003196:	2102      	movs	r1, #2
 8003198:	f24d 4022 	movw	r0, #54306	; 0xd422
 800319c:	f7fd fd8c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 80031a0:	21a4      	movs	r1, #164	; 0xa4
 80031a2:	f24d 4023 	movw	r0, #54307	; 0xd423
 80031a6:	f7fd fd87 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 80031aa:	2102      	movs	r1, #2
 80031ac:	f24d 4024 	movw	r0, #54308	; 0xd424
 80031b0:	f7fd fd82 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 80031b4:	21b7      	movs	r1, #183	; 0xb7
 80031b6:	f24d 4025 	movw	r0, #54309	; 0xd425
 80031ba:	f7fd fd7d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 80031be:	2102      	movs	r1, #2
 80031c0:	f24d 4026 	movw	r0, #54310	; 0xd426
 80031c4:	f7fd fd78 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 80031c8:	21cf      	movs	r1, #207	; 0xcf
 80031ca:	f24d 4027 	movw	r0, #54311	; 0xd427
 80031ce:	f7fd fd73 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 80031d2:	2102      	movs	r1, #2
 80031d4:	f24d 4028 	movw	r0, #54312	; 0xd428
 80031d8:	f7fd fd6e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 80031dc:	21de      	movs	r1, #222	; 0xde
 80031de:	f24d 4029 	movw	r0, #54313	; 0xd429
 80031e2:	f7fd fd69 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 80031e6:	2102      	movs	r1, #2
 80031e8:	f24d 402a 	movw	r0, #54314	; 0xd42a
 80031ec:	f7fd fd64 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 80031f0:	21f2      	movs	r1, #242	; 0xf2
 80031f2:	f24d 402b 	movw	r0, #54315	; 0xd42b
 80031f6:	f7fd fd5f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 80031fa:	2102      	movs	r1, #2
 80031fc:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003200:	f7fd fd5a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 8003204:	21fe      	movs	r1, #254	; 0xfe
 8003206:	f24d 402d 	movw	r0, #54317	; 0xd42d
 800320a:	f7fd fd55 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 800320e:	2103      	movs	r1, #3
 8003210:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8003214:	f7fd fd50 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8003218:	2110      	movs	r1, #16
 800321a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 800321e:	f7fd fd4b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 8003222:	2103      	movs	r1, #3
 8003224:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003228:	f7fd fd46 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 800322c:	2133      	movs	r1, #51	; 0x33
 800322e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8003232:	f7fd fd41 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 8003236:	2103      	movs	r1, #3
 8003238:	f24d 4032 	movw	r0, #54322	; 0xd432
 800323c:	f7fd fd3c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 8003240:	216d      	movs	r1, #109	; 0x6d
 8003242:	f24d 4033 	movw	r0, #54323	; 0xd433
 8003246:	f7fd fd37 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 800324a:	2100      	movs	r1, #0
 800324c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8003250:	f7fd fd32 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 8003254:	2133      	movs	r1, #51	; 0x33
 8003256:	f24d 5001 	movw	r0, #54529	; 0xd501
 800325a:	f7fd fd2d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 800325e:	2100      	movs	r1, #0
 8003260:	f24d 5002 	movw	r0, #54530	; 0xd502
 8003264:	f7fd fd28 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 8003268:	2134      	movs	r1, #52	; 0x34
 800326a:	f24d 5003 	movw	r0, #54531	; 0xd503
 800326e:	f7fd fd23 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 8003272:	2100      	movs	r1, #0
 8003274:	f24d 5004 	movw	r0, #54532	; 0xd504
 8003278:	f7fd fd1e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 800327c:	213a      	movs	r1, #58	; 0x3a
 800327e:	f24d 5005 	movw	r0, #54533	; 0xd505
 8003282:	f7fd fd19 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 8003286:	2100      	movs	r1, #0
 8003288:	f24d 5006 	movw	r0, #54534	; 0xd506
 800328c:	f7fd fd14 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 8003290:	214a      	movs	r1, #74	; 0x4a
 8003292:	f24d 5007 	movw	r0, #54535	; 0xd507
 8003296:	f7fd fd0f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 800329a:	2100      	movs	r1, #0
 800329c:	f24d 5008 	movw	r0, #54536	; 0xd508
 80032a0:	f7fd fd0a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 80032a4:	215c      	movs	r1, #92	; 0x5c
 80032a6:	f24d 5009 	movw	r0, #54537	; 0xd509
 80032aa:	f7fd fd05 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 80032ae:	2100      	movs	r1, #0
 80032b0:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80032b4:	f7fd fd00 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 80032b8:	2181      	movs	r1, #129	; 0x81
 80032ba:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80032be:	f7fd fcfb 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 80032c2:	2100      	movs	r1, #0
 80032c4:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80032c8:	f7fd fcf6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 80032cc:	21a6      	movs	r1, #166	; 0xa6
 80032ce:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80032d2:	f7fd fcf1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 80032d6:	2100      	movs	r1, #0
 80032d8:	f24d 500e 	movw	r0, #54542	; 0xd50e
 80032dc:	f7fd fcec 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 80032e0:	21e5      	movs	r1, #229	; 0xe5
 80032e2:	f24d 500f 	movw	r0, #54543	; 0xd50f
 80032e6:	f7fd fce7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 80032ea:	2101      	movs	r1, #1
 80032ec:	f24d 5010 	movw	r0, #54544	; 0xd510
 80032f0:	f7fd fce2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 80032f4:	2113      	movs	r1, #19
 80032f6:	f24d 5011 	movw	r0, #54545	; 0xd511
 80032fa:	f7fd fcdd 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 80032fe:	2101      	movs	r1, #1
 8003300:	f24d 5012 	movw	r0, #54546	; 0xd512
 8003304:	f7fd fcd8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 8003308:	2154      	movs	r1, #84	; 0x54
 800330a:	f24d 5013 	movw	r0, #54547	; 0xd513
 800330e:	f7fd fcd3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 8003312:	2101      	movs	r1, #1
 8003314:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003318:	f7fd fcce 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 800331c:	2182      	movs	r1, #130	; 0x82
 800331e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8003322:	f7fd fcc9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 8003326:	2101      	movs	r1, #1
 8003328:	f24d 5016 	movw	r0, #54550	; 0xd516
 800332c:	f7fd fcc4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 8003330:	21ca      	movs	r1, #202	; 0xca
 8003332:	f24d 5017 	movw	r0, #54551	; 0xd517
 8003336:	f7fd fcbf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 800333a:	2102      	movs	r1, #2
 800333c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003340:	f7fd fcba 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 8003344:	2100      	movs	r1, #0
 8003346:	f24d 5019 	movw	r0, #54553	; 0xd519
 800334a:	f7fd fcb5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 800334e:	2102      	movs	r1, #2
 8003350:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8003354:	f7fd fcb0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 8003358:	2101      	movs	r1, #1
 800335a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 800335e:	f7fd fcab 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 8003362:	2102      	movs	r1, #2
 8003364:	f24d 501c 	movw	r0, #54556	; 0xd51c
 8003368:	f7fd fca6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 800336c:	2134      	movs	r1, #52	; 0x34
 800336e:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8003372:	f7fd fca1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 8003376:	2102      	movs	r1, #2
 8003378:	f24d 501e 	movw	r0, #54558	; 0xd51e
 800337c:	f7fd fc9c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 8003380:	2167      	movs	r1, #103	; 0x67
 8003382:	f24d 501f 	movw	r0, #54559	; 0xd51f
 8003386:	f7fd fc97 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 800338a:	2102      	movs	r1, #2
 800338c:	f24d 5020 	movw	r0, #54560	; 0xd520
 8003390:	f7fd fc92 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 8003394:	2184      	movs	r1, #132	; 0x84
 8003396:	f24d 5021 	movw	r0, #54561	; 0xd521
 800339a:	f7fd fc8d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 800339e:	2102      	movs	r1, #2
 80033a0:	f24d 5022 	movw	r0, #54562	; 0xd522
 80033a4:	f7fd fc88 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 80033a8:	21a4      	movs	r1, #164	; 0xa4
 80033aa:	f24d 5023 	movw	r0, #54563	; 0xd523
 80033ae:	f7fd fc83 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 80033b2:	2102      	movs	r1, #2
 80033b4:	f24d 5024 	movw	r0, #54564	; 0xd524
 80033b8:	f7fd fc7e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 80033bc:	21b7      	movs	r1, #183	; 0xb7
 80033be:	f24d 5025 	movw	r0, #54565	; 0xd525
 80033c2:	f7fd fc79 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 80033c6:	2102      	movs	r1, #2
 80033c8:	f24d 5026 	movw	r0, #54566	; 0xd526
 80033cc:	f7fd fc74 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 80033d0:	21cf      	movs	r1, #207	; 0xcf
 80033d2:	f24d 5027 	movw	r0, #54567	; 0xd527
 80033d6:	f7fd fc6f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 80033da:	2102      	movs	r1, #2
 80033dc:	f24d 5028 	movw	r0, #54568	; 0xd528
 80033e0:	f7fd fc6a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 80033e4:	21de      	movs	r1, #222	; 0xde
 80033e6:	f24d 5029 	movw	r0, #54569	; 0xd529
 80033ea:	f7fd fc65 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 80033ee:	2102      	movs	r1, #2
 80033f0:	f24d 502a 	movw	r0, #54570	; 0xd52a
 80033f4:	f7fd fc60 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 80033f8:	21f2      	movs	r1, #242	; 0xf2
 80033fa:	f24d 502b 	movw	r0, #54571	; 0xd52b
 80033fe:	f7fd fc5b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 8003402:	2102      	movs	r1, #2
 8003404:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003408:	f7fd fc56 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 800340c:	21fe      	movs	r1, #254	; 0xfe
 800340e:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8003412:	f7fd fc51 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 8003416:	2103      	movs	r1, #3
 8003418:	f24d 502e 	movw	r0, #54574	; 0xd52e
 800341c:	f7fd fc4c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8003420:	2110      	movs	r1, #16
 8003422:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8003426:	f7fd fc47 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 800342a:	2103      	movs	r1, #3
 800342c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003430:	f7fd fc42 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 8003434:	2133      	movs	r1, #51	; 0x33
 8003436:	f24d 5031 	movw	r0, #54577	; 0xd531
 800343a:	f7fd fc3d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 800343e:	2103      	movs	r1, #3
 8003440:	f24d 5032 	movw	r0, #54578	; 0xd532
 8003444:	f7fd fc38 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 8003448:	216d      	movs	r1, #109	; 0x6d
 800344a:	f24d 5033 	movw	r0, #54579	; 0xd533
 800344e:	f7fd fc33 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 8003452:	2100      	movs	r1, #0
 8003454:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8003458:	f7fd fc2e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 800345c:	2133      	movs	r1, #51	; 0x33
 800345e:	f24d 6001 	movw	r0, #54785	; 0xd601
 8003462:	f7fd fc29 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 8003466:	2100      	movs	r1, #0
 8003468:	f24d 6002 	movw	r0, #54786	; 0xd602
 800346c:	f7fd fc24 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 8003470:	2134      	movs	r1, #52	; 0x34
 8003472:	f24d 6003 	movw	r0, #54787	; 0xd603
 8003476:	f7fd fc1f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 800347a:	2100      	movs	r1, #0
 800347c:	f24d 6004 	movw	r0, #54788	; 0xd604
 8003480:	f7fd fc1a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 8003484:	213a      	movs	r1, #58	; 0x3a
 8003486:	f24d 6005 	movw	r0, #54789	; 0xd605
 800348a:	f7fd fc15 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 800348e:	2100      	movs	r1, #0
 8003490:	f24d 6006 	movw	r0, #54790	; 0xd606
 8003494:	f7fd fc10 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 8003498:	214a      	movs	r1, #74	; 0x4a
 800349a:	f24d 6007 	movw	r0, #54791	; 0xd607
 800349e:	f7fd fc0b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 80034a2:	2100      	movs	r1, #0
 80034a4:	f24d 6008 	movw	r0, #54792	; 0xd608
 80034a8:	f7fd fc06 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 80034ac:	215c      	movs	r1, #92	; 0x5c
 80034ae:	f24d 6009 	movw	r0, #54793	; 0xd609
 80034b2:	f7fd fc01 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 80034b6:	2100      	movs	r1, #0
 80034b8:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80034bc:	f7fd fbfc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 80034c0:	2181      	movs	r1, #129	; 0x81
 80034c2:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80034c6:	f7fd fbf7 	bl	8000cb8 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 80034ca:	2100      	movs	r1, #0
 80034cc:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80034d0:	f7fd fbf2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 80034d4:	21a6      	movs	r1, #166	; 0xa6
 80034d6:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80034da:	f7fd fbed 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 80034de:	2100      	movs	r1, #0
 80034e0:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80034e4:	f7fd fbe8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 80034e8:	21e5      	movs	r1, #229	; 0xe5
 80034ea:	f24d 600f 	movw	r0, #54799	; 0xd60f
 80034ee:	f7fd fbe3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 80034f2:	2101      	movs	r1, #1
 80034f4:	f24d 6010 	movw	r0, #54800	; 0xd610
 80034f8:	f7fd fbde 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 80034fc:	2113      	movs	r1, #19
 80034fe:	f24d 6011 	movw	r0, #54801	; 0xd611
 8003502:	f7fd fbd9 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 8003506:	2101      	movs	r1, #1
 8003508:	f24d 6012 	movw	r0, #54802	; 0xd612
 800350c:	f7fd fbd4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8003510:	2154      	movs	r1, #84	; 0x54
 8003512:	f24d 6013 	movw	r0, #54803	; 0xd613
 8003516:	f7fd fbcf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 800351a:	2101      	movs	r1, #1
 800351c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003520:	f7fd fbca 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 8003524:	2182      	movs	r1, #130	; 0x82
 8003526:	f24d 6015 	movw	r0, #54805	; 0xd615
 800352a:	f7fd fbc5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 800352e:	2101      	movs	r1, #1
 8003530:	f24d 6016 	movw	r0, #54806	; 0xd616
 8003534:	f7fd fbc0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 8003538:	21ca      	movs	r1, #202	; 0xca
 800353a:	f24d 6017 	movw	r0, #54807	; 0xd617
 800353e:	f7fd fbbb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 8003542:	2102      	movs	r1, #2
 8003544:	f24d 6018 	movw	r0, #54808	; 0xd618
 8003548:	f7fd fbb6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 800354c:	2100      	movs	r1, #0
 800354e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8003552:	f7fd fbb1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 8003556:	2102      	movs	r1, #2
 8003558:	f24d 601a 	movw	r0, #54810	; 0xd61a
 800355c:	f7fd fbac 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 8003560:	2101      	movs	r1, #1
 8003562:	f24d 601b 	movw	r0, #54811	; 0xd61b
 8003566:	f7fd fba7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 800356a:	2102      	movs	r1, #2
 800356c:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8003570:	f7fd fba2 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 8003574:	2134      	movs	r1, #52	; 0x34
 8003576:	f24d 601d 	movw	r0, #54813	; 0xd61d
 800357a:	f7fd fb9d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 800357e:	2102      	movs	r1, #2
 8003580:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8003584:	f7fd fb98 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 8003588:	2167      	movs	r1, #103	; 0x67
 800358a:	f24d 601f 	movw	r0, #54815	; 0xd61f
 800358e:	f7fd fb93 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 8003592:	2102      	movs	r1, #2
 8003594:	f24d 6020 	movw	r0, #54816	; 0xd620
 8003598:	f7fd fb8e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 800359c:	2184      	movs	r1, #132	; 0x84
 800359e:	f24d 6021 	movw	r0, #54817	; 0xd621
 80035a2:	f7fd fb89 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 80035a6:	2102      	movs	r1, #2
 80035a8:	f24d 6022 	movw	r0, #54818	; 0xd622
 80035ac:	f7fd fb84 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 80035b0:	21a4      	movs	r1, #164	; 0xa4
 80035b2:	f24d 6023 	movw	r0, #54819	; 0xd623
 80035b6:	f7fd fb7f 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 80035ba:	2102      	movs	r1, #2
 80035bc:	f24d 6024 	movw	r0, #54820	; 0xd624
 80035c0:	f7fd fb7a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 80035c4:	21b7      	movs	r1, #183	; 0xb7
 80035c6:	f24d 6025 	movw	r0, #54821	; 0xd625
 80035ca:	f7fd fb75 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 80035ce:	2102      	movs	r1, #2
 80035d0:	f24d 6026 	movw	r0, #54822	; 0xd626
 80035d4:	f7fd fb70 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 80035d8:	21cf      	movs	r1, #207	; 0xcf
 80035da:	f24d 6027 	movw	r0, #54823	; 0xd627
 80035de:	f7fd fb6b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 80035e2:	2102      	movs	r1, #2
 80035e4:	f24d 6028 	movw	r0, #54824	; 0xd628
 80035e8:	f7fd fb66 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 80035ec:	21de      	movs	r1, #222	; 0xde
 80035ee:	f24d 6029 	movw	r0, #54825	; 0xd629
 80035f2:	f7fd fb61 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 80035f6:	2102      	movs	r1, #2
 80035f8:	f24d 602a 	movw	r0, #54826	; 0xd62a
 80035fc:	f7fd fb5c 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8003600:	21f2      	movs	r1, #242	; 0xf2
 8003602:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8003606:	f7fd fb57 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 800360a:	2102      	movs	r1, #2
 800360c:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003610:	f7fd fb52 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 8003614:	21fe      	movs	r1, #254	; 0xfe
 8003616:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800361a:	f7fd fb4d 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 800361e:	2103      	movs	r1, #3
 8003620:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8003624:	f7fd fb48 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 8003628:	2110      	movs	r1, #16
 800362a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 800362e:	f7fd fb43 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 8003632:	2103      	movs	r1, #3
 8003634:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003638:	f7fd fb3e 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 800363c:	2133      	movs	r1, #51	; 0x33
 800363e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8003642:	f7fd fb39 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 8003646:	2103      	movs	r1, #3
 8003648:	f24d 6032 	movw	r0, #54834	; 0xd632
 800364c:	f7fd fb34 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 8003650:	216d      	movs	r1, #109	; 0x6d
 8003652:	f24d 6033 	movw	r0, #54835	; 0xd633
 8003656:	f7fd fb2f 	bl	8000cb8 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 800365a:	2155      	movs	r1, #85	; 0x55
 800365c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8003660:	f7fd fb2a 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8003664:	21aa      	movs	r1, #170	; 0xaa
 8003666:	f24f 0001 	movw	r0, #61441	; 0xf001
 800366a:	f7fd fb25 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 800366e:	2152      	movs	r1, #82	; 0x52
 8003670:	f24f 0002 	movw	r0, #61442	; 0xf002
 8003674:	f7fd fb20 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8003678:	2108      	movs	r1, #8
 800367a:	f24f 0003 	movw	r0, #61443	; 0xf003
 800367e:	f7fd fb1b 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 8003682:	2100      	movs	r1, #0
 8003684:	f24f 0004 	movw	r0, #61444	; 0xf004
 8003688:	f7fd fb16 	bl	8000cb8 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 800368c:	21cc      	movs	r1, #204	; 0xcc
 800368e:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8003692:	f7fd fb11 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 8003696:	2100      	movs	r1, #0
 8003698:	f24b 1001 	movw	r0, #45313	; 0xb101
 800369c:	f7fd fb0c 	bl	8000cb8 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 80036a0:	2105      	movs	r1, #5
 80036a2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80036a6:	f7fd fb07 	bl	8000cb8 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 80036aa:	2170      	movs	r1, #112	; 0x70
 80036ac:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80036b0:	f7fd fb02 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 80036b4:	2170      	movs	r1, #112	; 0x70
 80036b6:	f24b 7001 	movw	r0, #46849	; 0xb701
 80036ba:	f7fd fafd 	bl	8000cb8 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 80036be:	2101      	movs	r1, #1
 80036c0:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80036c4:	f7fd faf8 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 80036c8:	2103      	movs	r1, #3
 80036ca:	f64b 0001 	movw	r0, #47105	; 0xb801
 80036ce:	f7fd faf3 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 80036d2:	2103      	movs	r1, #3
 80036d4:	f64b 0002 	movw	r0, #47106	; 0xb802
 80036d8:	f7fd faee 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 80036dc:	2103      	movs	r1, #3
 80036de:	f64b 0003 	movw	r0, #47107	; 0xb803
 80036e2:	f7fd fae9 	bl	8000cb8 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 80036e6:	2102      	movs	r1, #2
 80036e8:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80036ec:	f7fd fae4 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 80036f0:	2100      	movs	r1, #0
 80036f2:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80036f6:	f7fd fadf 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 80036fa:	2100      	movs	r1, #0
 80036fc:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003700:	f7fd fada 	bl	8000cb8 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 8003704:	21d0      	movs	r1, #208	; 0xd0
 8003706:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 800370a:	f7fd fad5 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 800370e:	2102      	movs	r1, #2
 8003710:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003714:	f7fd fad0 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8003718:	2150      	movs	r1, #80	; 0x50
 800371a:	f64c 1002 	movw	r0, #51458	; 0xc902
 800371e:	f7fd facb 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 8003722:	2150      	movs	r1, #80	; 0x50
 8003724:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003728:	f7fd fac6 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 800372c:	2150      	movs	r1, #80	; 0x50
 800372e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003732:	f7fd fac1 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 8003736:	2100      	movs	r1, #0
 8003738:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 800373c:	f7fd fabc 	bl	8000cb8 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8003740:	2155      	movs	r1, #85	; 0x55
 8003742:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003746:	f7fd fab7 	bl	8000cb8 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 800374a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800374e:	f7fd fa83 	bl	8000c58 <LCD_WR_REG>
		//HAL_Delay(120);
		//delay_us(120);
		LCD_WR_REG(0x2900);
 8003752:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003756:	f7fd fa7f 	bl	8000c58 <LCD_WR_REG>
 800375a:	e0be      	b.n	80038da <LCD_Init+0x2342>
	}else if(lcddev.id==0X1963)
 800375c:	4b7d      	ldr	r3, [pc, #500]	; (8003954 <LCD_Init+0x23bc>)
 800375e:	889b      	ldrh	r3, [r3, #4]
 8003760:	f641 1263 	movw	r2, #6499	; 0x1963
 8003764:	4293      	cmp	r3, r2
 8003766:	f040 80b8 	bne.w	80038da <LCD_Init+0x2342>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 800376a:	20e2      	movs	r0, #226	; 0xe2
 800376c:	f7fd fa74 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 8003770:	201d      	movs	r0, #29
 8003772:	f7fd fa81 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8003776:	2002      	movs	r0, #2
 8003778:	f7fd fa7e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 800377c:	2004      	movs	r0, #4
 800377e:	f7fd fa7b 	bl	8000c78 <LCD_WR_DATA>
		HAL_Delay(100);
 8003782:	2064      	movs	r0, #100	; 0x64
 8003784:	f001 f91a 	bl	80049bc <HAL_Delay>
		//delay_us(100);
		LCD_WR_REG(0xE0);		// Start PLL command
 8003788:	20e0      	movs	r0, #224	; 0xe0
 800378a:	f7fd fa65 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 800378e:	2001      	movs	r0, #1
 8003790:	f7fd fa72 	bl	8000c78 <LCD_WR_DATA>
		HAL_Delay(10);
 8003794:	200a      	movs	r0, #10
 8003796:	f001 f911 	bl	80049bc <HAL_Delay>
		//delay_ms(10);
		LCD_WR_REG(0xE0);		// Start PLL command again
 800379a:	20e0      	movs	r0, #224	; 0xe0
 800379c:	f7fd fa5c 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 80037a0:	2003      	movs	r0, #3
 80037a2:	f7fd fa69 	bl	8000c78 <LCD_WR_DATA>
		HAL_Delay(12);
 80037a6:	200c      	movs	r0, #12
 80037a8:	f001 f908 	bl	80049bc <HAL_Delay>
		//delay_ms(12);
		LCD_WR_REG(0x01);		//软复位
 80037ac:	2001      	movs	r0, #1
 80037ae:	f7fd fa53 	bl	8000c58 <LCD_WR_REG>
		HAL_Delay(10);
 80037b2:	200a      	movs	r0, #10
 80037b4:	f001 f902 	bl	80049bc <HAL_Delay>
		//delay_ms(10);

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 80037b8:	20e6      	movs	r0, #230	; 0xe6
 80037ba:	f7fd fa4d 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 80037be:	202f      	movs	r0, #47	; 0x2f
 80037c0:	f7fd fa5a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 80037c4:	20ff      	movs	r0, #255	; 0xff
 80037c6:	f7fd fa57 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 80037ca:	20ff      	movs	r0, #255	; 0xff
 80037cc:	f7fd fa54 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 80037d0:	20b0      	movs	r0, #176	; 0xb0
 80037d2:	f7fd fa41 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 80037d6:	2020      	movs	r0, #32
 80037d8:	f7fd fa4e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 80037dc:	2000      	movs	r0, #0
 80037de:	f7fd fa4b 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 80037e2:	2003      	movs	r0, #3
 80037e4:	f7fd fa48 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 80037e8:	f240 301f 	movw	r0, #799	; 0x31f
 80037ec:	f7fd fa44 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 80037f0:	2001      	movs	r0, #1
 80037f2:	f7fd fa41 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 80037f6:	f240 10df 	movw	r0, #479	; 0x1df
 80037fa:	f7fd fa3d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 80037fe:	2000      	movs	r0, #0
 8003800:	f7fd fa3a 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 8003804:	20b4      	movs	r0, #180	; 0xb4
 8003806:	f7fd fa27 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 800380a:	2004      	movs	r0, #4
 800380c:	f7fd fa34 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 8003810:	f240 401f 	movw	r0, #1055	; 0x41f
 8003814:	f7fd fa30 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 8003818:	2000      	movs	r0, #0
 800381a:	f7fd fa2d 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 800381e:	202e      	movs	r0, #46	; 0x2e
 8003820:	f7fd fa2a 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8003824:	2000      	movs	r0, #0
 8003826:	f7fd fa27 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800382a:	2000      	movs	r0, #0
 800382c:	f7fd fa24 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003830:	2000      	movs	r0, #0
 8003832:	f7fd fa21 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003836:	2000      	movs	r0, #0
 8003838:	f7fd fa1e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 800383c:	20b6      	movs	r0, #182	; 0xb6
 800383e:	f7fd fa0b 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8003842:	2002      	movs	r0, #2
 8003844:	f7fd fa18 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 8003848:	f44f 7003 	mov.w	r0, #524	; 0x20c
 800384c:	f7fd fa14 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 8003850:	2000      	movs	r0, #0
 8003852:	f7fd fa11 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 8003856:	2017      	movs	r0, #23
 8003858:	f7fd fa0e 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 800385c:	2015      	movs	r0, #21
 800385e:	f7fd fa0b 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003862:	2000      	movs	r0, #0
 8003864:	f7fd fa08 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003868:	2000      	movs	r0, #0
 800386a:	f7fd fa05 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 800386e:	20f0      	movs	r0, #240	; 0xf0
 8003870:	f7fd f9f2 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 8003874:	2003      	movs	r0, #3
 8003876:	f7fd f9ff 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 800387a:	2029      	movs	r0, #41	; 0x29
 800387c:	f7fd f9ec 	bl	8000c58 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8003880:	20d0      	movs	r0, #208	; 0xd0
 8003882:	f7fd f9e9 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8003886:	2000      	movs	r0, #0
 8003888:	f7fd f9f6 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 800388c:	20be      	movs	r0, #190	; 0xbe
 800388e:	f7fd f9e3 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8003892:	2005      	movs	r0, #5
 8003894:	f7fd f9f0 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8003898:	20fe      	movs	r0, #254	; 0xfe
 800389a:	f7fd f9ed 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 800389e:	2001      	movs	r0, #1
 80038a0:	f7fd f9ea 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 80038a4:	2000      	movs	r0, #0
 80038a6:	f7fd f9e7 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 80038aa:	2000      	movs	r0, #0
 80038ac:	f7fd f9e4 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 80038b0:	2000      	movs	r0, #0
 80038b2:	f7fd f9e1 	bl	8000c78 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 80038b6:	20b8      	movs	r0, #184	; 0xb8
 80038b8:	f7fd f9ce 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 80038bc:	2003      	movs	r0, #3
 80038be:	f7fd f9db 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 80038c2:	2001      	movs	r0, #1
 80038c4:	f7fd f9d8 	bl	8000c78 <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 80038c8:	20ba      	movs	r0, #186	; 0xba
 80038ca:	f7fd f9c5 	bl	8000c58 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 80038ce:	2001      	movs	r0, #1
 80038d0:	f7fd f9d2 	bl	8000c78 <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 80038d4:	2064      	movs	r0, #100	; 0x64
 80038d6:	f7fd fd5b 	bl	8001390 <LCD_SSD_BackLightSet>
	}
	//初始化完成以后,提速
	if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//如果是这几个IC,则设置WR时序为最快
 80038da:	4b1e      	ldr	r3, [pc, #120]	; (8003954 <LCD_Init+0x23bc>)
 80038dc:	889b      	ldrh	r3, [r3, #4]
 80038de:	f249 3241 	movw	r2, #37697	; 0x9341
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d011      	beq.n	800390a <LCD_Init+0x2372>
 80038e6:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <LCD_Init+0x23bc>)
 80038e8:	889b      	ldrh	r3, [r3, #4]
 80038ea:	f245 3210 	movw	r2, #21264	; 0x5310
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00b      	beq.n	800390a <LCD_Init+0x2372>
 80038f2:	4b18      	ldr	r3, [pc, #96]	; (8003954 <LCD_Init+0x23bc>)
 80038f4:	889b      	ldrh	r3, [r3, #4]
 80038f6:	f245 5210 	movw	r2, #21776	; 0x5510
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d005      	beq.n	800390a <LCD_Init+0x2372>
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <LCD_Init+0x23bc>)
 8003900:	889b      	ldrh	r3, [r3, #4]
 8003902:	f641 1263 	movw	r2, #6499	; 0x1963
 8003906:	4293      	cmp	r3, r2
 8003908:	d117      	bne.n	800393a <LCD_Init+0x23a2>
	{
		//重新配置写时序控制寄存器的时序
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//地址建立时间(ADDSET)清零
 800390a:	4b13      	ldr	r3, [pc, #76]	; (8003958 <LCD_Init+0x23c0>)
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	4a12      	ldr	r2, [pc, #72]	; (8003958 <LCD_Init+0x23c0>)
 8003910:	f023 030f 	bic.w	r3, r3, #15
 8003914:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//数据保存时间清零
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <LCD_Init+0x23c0>)
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	4a0f      	ldr	r2, [pc, #60]	; (8003958 <LCD_Init+0x23c0>)
 800391c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003920:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=1<<0;		//地址建立时间(ADDSET)为2个HCLK =28ns
 8003922:	4b0d      	ldr	r3, [pc, #52]	; (8003958 <LCD_Init+0x23c0>)
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	4a0c      	ldr	r2, [pc, #48]	; (8003958 <LCD_Init+0x23c0>)
 8003928:	f043 0301 	orr.w	r3, r3, #1
 800392c:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=1<<8; 	//数据保存时间(DATAST)为13.8ns*2个HCLK=28ns
 800392e:	4b0a      	ldr	r3, [pc, #40]	; (8003958 <LCD_Init+0x23c0>)
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	4a09      	ldr	r2, [pc, #36]	; (8003958 <LCD_Init+0x23c0>)
 8003934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003938:	6193      	str	r3, [r2, #24]
	}
	LCD_Display_Dir(0);		//默认为竖屏
 800393a:	2000      	movs	r0, #0
 800393c:	f7fd fd5c 	bl	80013f8 <LCD_Display_Dir>
	LCD_LED=1;				//点亮背光
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <LCD_Init+0x23c4>)
 8003942:	2201      	movs	r2, #1
 8003944:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8003946:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800394a:	f000 f809 	bl	8003960 <LCD_Clear>
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200000dc 	.word	0x200000dc
 8003958:	a0000104 	.word	0xa0000104
 800395c:	42218180 	.word	0x42218180

08003960 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(u32 color)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b084      	sub	sp, #16
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	u32 index=0;
 8003968:	2300      	movs	r3, #0
 800396a:	60fb      	str	r3, [r7, #12]
	u32 totalpoint=lcddev.width;
 800396c:	4b11      	ldr	r3, [pc, #68]	; (80039b4 <LCD_Clear+0x54>)
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 8003972:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <LCD_Clear+0x54>)
 8003974:	885b      	ldrh	r3, [r3, #2]
 8003976:	461a      	mov	r2, r3
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	fb02 f303 	mul.w	r3, r2, r3
 800397e:	60bb      	str	r3, [r7, #8]
	LCD_SetCursor(0x00,0x0000);			//设置光标位置
 8003980:	2100      	movs	r1, #0
 8003982:	2000      	movs	r0, #0
 8003984:	f7fd f9bc 	bl	8000d00 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 8003988:	f7fd f9ac 	bl	8000ce4 <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 800398c:	2300      	movs	r3, #0
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	e006      	b.n	80039a0 <LCD_Clear+0x40>
	{
		LCD->LCD_RAM=color;
 8003992:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <LCD_Clear+0x58>)
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	b292      	uxth	r2, r2
 8003998:	805a      	strh	r2, [r3, #2]
	for(index=0;index<totalpoint;index++)
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	3301      	adds	r3, #1
 800399e:	60fb      	str	r3, [r7, #12]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d3f4      	bcc.n	8003992 <LCD_Clear+0x32>
	}
}
 80039a8:	bf00      	nop
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	200000dc 	.word	0x200000dc
 80039b8:	6c0007fe 	.word	0x6c0007fe

080039bc <LCD_Fill>:
//在指定区域内填充单个颜色
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
//color:要填充的颜色
void LCD_Fill(u16 sx,u16 sy,u16 ex,u16 ey,u32 color)
{
 80039bc:	b590      	push	{r4, r7, lr}
 80039be:	b085      	sub	sp, #20
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4604      	mov	r4, r0
 80039c4:	4608      	mov	r0, r1
 80039c6:	4611      	mov	r1, r2
 80039c8:	461a      	mov	r2, r3
 80039ca:	4623      	mov	r3, r4
 80039cc:	80fb      	strh	r3, [r7, #6]
 80039ce:	4603      	mov	r3, r0
 80039d0:	80bb      	strh	r3, [r7, #4]
 80039d2:	460b      	mov	r3, r1
 80039d4:	807b      	strh	r3, [r7, #2]
 80039d6:	4613      	mov	r3, r2
 80039d8:	803b      	strh	r3, [r7, #0]
	u16 i,j;
	u16 xlen=0;
 80039da:	2300      	movs	r3, #0
 80039dc:	817b      	strh	r3, [r7, #10]
	xlen=ex-sx+1;
 80039de:	887a      	ldrh	r2, [r7, #2]
 80039e0:	88fb      	ldrh	r3, [r7, #6]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3301      	adds	r3, #1
 80039e8:	817b      	strh	r3, [r7, #10]
	for(i=sy;i<=ey;i++)
 80039ea:	88bb      	ldrh	r3, [r7, #4]
 80039ec:	81fb      	strh	r3, [r7, #14]
 80039ee:	e018      	b.n	8003a22 <LCD_Fill+0x66>
	{
		LCD_SetCursor(sx,i);      				//设置光标位置
 80039f0:	89fa      	ldrh	r2, [r7, #14]
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	4611      	mov	r1, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fd f982 	bl	8000d00 <LCD_SetCursor>
		LCD_WriteRAM_Prepare();     			//开始写入GRAM
 80039fc:	f7fd f972 	bl	8000ce4 <LCD_WriteRAM_Prepare>
		for(j=0;j<xlen;j++)LCD->LCD_RAM=color;	//显示颜色
 8003a00:	2300      	movs	r3, #0
 8003a02:	81bb      	strh	r3, [r7, #12]
 8003a04:	e006      	b.n	8003a14 <LCD_Fill+0x58>
 8003a06:	4b0b      	ldr	r3, [pc, #44]	; (8003a34 <LCD_Fill+0x78>)
 8003a08:	6a3a      	ldr	r2, [r7, #32]
 8003a0a:	b292      	uxth	r2, r2
 8003a0c:	805a      	strh	r2, [r3, #2]
 8003a0e:	89bb      	ldrh	r3, [r7, #12]
 8003a10:	3301      	adds	r3, #1
 8003a12:	81bb      	strh	r3, [r7, #12]
 8003a14:	89ba      	ldrh	r2, [r7, #12]
 8003a16:	897b      	ldrh	r3, [r7, #10]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d3f4      	bcc.n	8003a06 <LCD_Fill+0x4a>
	for(i=sy;i<=ey;i++)
 8003a1c:	89fb      	ldrh	r3, [r7, #14]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	81fb      	strh	r3, [r7, #14]
 8003a22:	89fa      	ldrh	r2, [r7, #14]
 8003a24:	883b      	ldrh	r3, [r7, #0]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d9e2      	bls.n	80039f0 <LCD_Fill+0x34>
	}
}
 8003a2a:	bf00      	nop
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd90      	pop	{r4, r7, pc}
 8003a34:	6c0007fe 	.word	0x6c0007fe

08003a38 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(u16 x,u16 y,u8 num,u8 size,u8 mode)
{
 8003a38:	b590      	push	{r4, r7, lr}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	4604      	mov	r4, r0
 8003a40:	4608      	mov	r0, r1
 8003a42:	4611      	mov	r1, r2
 8003a44:	461a      	mov	r2, r3
 8003a46:	4623      	mov	r3, r4
 8003a48:	80fb      	strh	r3, [r7, #6]
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	80bb      	strh	r3, [r7, #4]
 8003a4e:	460b      	mov	r3, r1
 8003a50:	70fb      	strb	r3, [r7, #3]
 8003a52:	4613      	mov	r3, r2
 8003a54:	70bb      	strb	r3, [r7, #2]
    u8 temp,t1,t;
	u16 y0=y;
 8003a56:	88bb      	ldrh	r3, [r7, #4]
 8003a58:	817b      	strh	r3, [r7, #10]
	u8 csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 8003a5a:	78bb      	ldrb	r3, [r7, #2]
 8003a5c:	08db      	lsrs	r3, r3, #3
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	461a      	mov	r2, r3
 8003a62:	78bb      	ldrb	r3, [r7, #2]
 8003a64:	f003 0307 	and.w	r3, r3, #7
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	bf14      	ite	ne
 8003a6e:	2301      	movne	r3, #1
 8003a70:	2300      	moveq	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	4413      	add	r3, r2
 8003a76:	b2db      	uxtb	r3, r3
 8003a78:	78ba      	ldrb	r2, [r7, #2]
 8003a7a:	0852      	lsrs	r2, r2, #1
 8003a7c:	b2d2      	uxtb	r2, r2
 8003a7e:	fb02 f303 	mul.w	r3, r2, r3
 8003a82:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8003a84:	78fb      	ldrb	r3, [r7, #3]
 8003a86:	3b20      	subs	r3, #32
 8003a88:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	737b      	strb	r3, [r7, #13]
 8003a8e:	e075      	b.n	8003b7c <LCD_ShowChar+0x144>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 8003a90:	78bb      	ldrb	r3, [r7, #2]
 8003a92:	2b0c      	cmp	r3, #12
 8003a94:	d10b      	bne.n	8003aae <LCD_ShowChar+0x76>
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	7b79      	ldrb	r1, [r7, #13]
 8003a9a:	483e      	ldr	r0, [pc, #248]	; (8003b94 <LCD_ShowChar+0x15c>)
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	4413      	add	r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	4403      	add	r3, r0
 8003aa6:	440b      	add	r3, r1
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	73fb      	strb	r3, [r7, #15]
 8003aac:	e025      	b.n	8003afa <LCD_ShowChar+0xc2>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 8003aae:	78bb      	ldrb	r3, [r7, #2]
 8003ab0:	2b10      	cmp	r3, #16
 8003ab2:	d108      	bne.n	8003ac6 <LCD_ShowChar+0x8e>
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	7b7b      	ldrb	r3, [r7, #13]
 8003ab8:	4937      	ldr	r1, [pc, #220]	; (8003b98 <LCD_ShowChar+0x160>)
 8003aba:	0112      	lsls	r2, r2, #4
 8003abc:	440a      	add	r2, r1
 8003abe:	4413      	add	r3, r2
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	73fb      	strb	r3, [r7, #15]
 8003ac4:	e019      	b.n	8003afa <LCD_ShowChar+0xc2>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 8003ac6:	78bb      	ldrb	r3, [r7, #2]
 8003ac8:	2b18      	cmp	r3, #24
 8003aca:	d10b      	bne.n	8003ae4 <LCD_ShowChar+0xac>
 8003acc:	78fa      	ldrb	r2, [r7, #3]
 8003ace:	7b79      	ldrb	r1, [r7, #13]
 8003ad0:	4832      	ldr	r0, [pc, #200]	; (8003b9c <LCD_ShowChar+0x164>)
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	00db      	lsls	r3, r3, #3
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4403      	add	r3, r0
 8003adc:	440b      	add	r3, r1
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	73fb      	strb	r3, [r7, #15]
 8003ae2:	e00a      	b.n	8003afa <LCD_ShowChar+0xc2>
		else if(size==32)temp=asc2_3216[num][t];	//调用3216字体
 8003ae4:	78bb      	ldrb	r3, [r7, #2]
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d14d      	bne.n	8003b86 <LCD_ShowChar+0x14e>
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	7b7b      	ldrb	r3, [r7, #13]
 8003aee:	492c      	ldr	r1, [pc, #176]	; (8003ba0 <LCD_ShowChar+0x168>)
 8003af0:	01d2      	lsls	r2, r2, #7
 8003af2:	440a      	add	r2, r1
 8003af4:	4413      	add	r3, r2
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 8003afa:	2300      	movs	r3, #0
 8003afc:	73bb      	strb	r3, [r7, #14]
 8003afe:	e035      	b.n	8003b6c <LCD_ShowChar+0x134>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 8003b00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	da07      	bge.n	8003b18 <LCD_ShowChar+0xe0>
 8003b08:	4b26      	ldr	r3, [pc, #152]	; (8003ba4 <LCD_ShowChar+0x16c>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	88b9      	ldrh	r1, [r7, #4]
 8003b0e:	88fb      	ldrh	r3, [r7, #6]
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fd fb73 	bl	80011fc <LCD_Fast_DrawPoint>
 8003b16:	e00a      	b.n	8003b2e <LCD_ShowChar+0xf6>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 8003b18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d106      	bne.n	8003b2e <LCD_ShowChar+0xf6>
 8003b20:	4b21      	ldr	r3, [pc, #132]	; (8003ba8 <LCD_ShowChar+0x170>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	88b9      	ldrh	r1, [r7, #4]
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fd fb67 	bl	80011fc <LCD_Fast_DrawPoint>
			temp<<=1;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
			y++;
 8003b34:	88bb      	ldrh	r3, [r7, #4]
 8003b36:	3301      	adds	r3, #1
 8003b38:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 8003b3a:	4b1c      	ldr	r3, [pc, #112]	; (8003bac <LCD_ShowChar+0x174>)
 8003b3c:	885b      	ldrh	r3, [r3, #2]
 8003b3e:	88ba      	ldrh	r2, [r7, #4]
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d222      	bcs.n	8003b8a <LCD_ShowChar+0x152>
			if((y-y0)==size)
 8003b44:	88ba      	ldrh	r2, [r7, #4]
 8003b46:	897b      	ldrh	r3, [r7, #10]
 8003b48:	1ad2      	subs	r2, r2, r3
 8003b4a:	78bb      	ldrb	r3, [r7, #2]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d10a      	bne.n	8003b66 <LCD_ShowChar+0x12e>
			{
				y=y0;
 8003b50:	897b      	ldrh	r3, [r7, #10]
 8003b52:	80bb      	strh	r3, [r7, #4]
				x++;
 8003b54:	88fb      	ldrh	r3, [r7, #6]
 8003b56:	3301      	adds	r3, #1
 8003b58:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 8003b5a:	4b14      	ldr	r3, [pc, #80]	; (8003bac <LCD_ShowChar+0x174>)
 8003b5c:	881b      	ldrh	r3, [r3, #0]
 8003b5e:	88fa      	ldrh	r2, [r7, #6]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d307      	bcc.n	8003b74 <LCD_ShowChar+0x13c>
 8003b64:	e012      	b.n	8003b8c <LCD_ShowChar+0x154>
		for(t1=0;t1<8;t1++)
 8003b66:	7bbb      	ldrb	r3, [r7, #14]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	73bb      	strb	r3, [r7, #14]
 8003b6c:	7bbb      	ldrb	r3, [r7, #14]
 8003b6e:	2b07      	cmp	r3, #7
 8003b70:	d9c6      	bls.n	8003b00 <LCD_ShowChar+0xc8>
 8003b72:	e000      	b.n	8003b76 <LCD_ShowChar+0x13e>
				break;
 8003b74:	bf00      	nop
	for(t=0;t<csize;t++)
 8003b76:	7b7b      	ldrb	r3, [r7, #13]
 8003b78:	3301      	adds	r3, #1
 8003b7a:	737b      	strb	r3, [r7, #13]
 8003b7c:	7b7a      	ldrb	r2, [r7, #13]
 8003b7e:	7a7b      	ldrb	r3, [r7, #9]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d385      	bcc.n	8003a90 <LCD_ShowChar+0x58>
 8003b84:	e002      	b.n	8003b8c <LCD_ShowChar+0x154>
		else return;								//没有的字库
 8003b86:	bf00      	nop
 8003b88:	e000      	b.n	8003b8c <LCD_ShowChar+0x154>
			if(y>=lcddev.height)return;		//超区域了
 8003b8a:	bf00      	nop
			}
		}
	}
}
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd90      	pop	{r4, r7, pc}
 8003b92:	bf00      	nop
 8003b94:	08007610 	.word	0x08007610
 8003b98:	08007a84 	.word	0x08007a84
 8003b9c:	08008074 	.word	0x08008074
 8003ba0:	08008dd0 	.word	0x08008dd0
 8003ba4:	20000000 	.word	0x20000000
 8003ba8:	20000004 	.word	0x20000004
 8003bac:	200000dc 	.word	0x200000dc

08003bb0 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(u16 x,u16 y,u16 width,u16 height,u8 size,u8 *p)
{
 8003bb0:	b590      	push	{r4, r7, lr}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	4608      	mov	r0, r1
 8003bba:	4611      	mov	r1, r2
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4623      	mov	r3, r4
 8003bc0:	80fb      	strh	r3, [r7, #6]
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	80bb      	strh	r3, [r7, #4]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	807b      	strh	r3, [r7, #2]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	803b      	strh	r3, [r7, #0]
	u8 x0=x;
 8003bce:	88fb      	ldrh	r3, [r7, #6]
 8003bd0:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8003bd2:	887a      	ldrh	r2, [r7, #2]
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	807b      	strh	r3, [r7, #2]
	height+=y;
 8003bda:	883a      	ldrh	r2, [r7, #0]
 8003bdc:	88bb      	ldrh	r3, [r7, #4]
 8003bde:	4413      	add	r3, r2
 8003be0:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8003be2:	e024      	b.n	8003c2e <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 8003be4:	88fa      	ldrh	r2, [r7, #6]
 8003be6:	887b      	ldrh	r3, [r7, #2]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d307      	bcc.n	8003bfc <LCD_ShowString+0x4c>
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	80fb      	strh	r3, [r7, #6]
 8003bf0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	88bb      	ldrh	r3, [r7, #4]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 8003bfc:	88ba      	ldrh	r2, [r7, #4]
 8003bfe:	883b      	ldrh	r3, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d21d      	bcs.n	8003c40 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8003c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c06:	781a      	ldrb	r2, [r3, #0]
 8003c08:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c0c:	88b9      	ldrh	r1, [r7, #4]
 8003c0e:	88f8      	ldrh	r0, [r7, #6]
 8003c10:	2400      	movs	r4, #0
 8003c12:	9400      	str	r4, [sp, #0]
 8003c14:	f7ff ff10 	bl	8003a38 <LCD_ShowChar>
        x+=size/2;
 8003c18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003c1c:	085b      	lsrs	r3, r3, #1
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	4413      	add	r3, r2
 8003c26:	80fb      	strh	r3, [r7, #6]
        p++;
 8003c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	2b7e      	cmp	r3, #126	; 0x7e
 8003c34:	d805      	bhi.n	8003c42 <LCD_ShowString+0x92>
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b1f      	cmp	r3, #31
 8003c3c:	d8d2      	bhi.n	8003be4 <LCD_ShowString+0x34>
    }
}
 8003c3e:	e000      	b.n	8003c42 <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 8003c40:	bf00      	nop
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd90      	pop	{r4, r7, pc}
	...

08003c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c52:	f000 fe51 	bl	80048f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c56:	f000 f989 	bl	8003f6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c5a:	f000 fad1 	bl	8004200 <MX_GPIO_Init>
  MX_TIM3_Init();
 8003c5e:	f000 fa57 	bl	8004110 <MX_TIM3_Init>
  MX_FSMC_Init();
 8003c62:	f000 fbbd 	bl	80043e0 <MX_FSMC_Init>
  MX_ADC1_Init();
 8003c66:	f000 f9df 	bl	8004028 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8003c6a:	f000 fa9f 	bl	80041ac <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8003c6e:	f000 fa19 	bl	80040a4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1);
 8003c72:	2001      	movs	r0, #1
 8003c74:	f000 fea2 	bl	80049bc <HAL_Delay>
  LCD_Init();
 8003c78:	f7fd fc8e 	bl	8001598 <LCD_Init>
  POINT_COLOR=RED;
 8003c7c:	4ba9      	ldr	r3, [pc, #676]	; (8003f24 <main+0x2d8>)
 8003c7e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003c82:	601a      	str	r2, [r3, #0]

  HAL_ADC_Start(&hadc1);
 8003c84:	48a8      	ldr	r0, [pc, #672]	; (8003f28 <main+0x2dc>)
 8003c86:	f000 ffa7 	bl	8004bd8 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 10);
 8003c8a:	210a      	movs	r1, #10
 8003c8c:	48a6      	ldr	r0, [pc, #664]	; (8003f28 <main+0x2dc>)
 8003c8e:	f001 f851 	bl	8004d34 <HAL_ADC_PollForConversion>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8003c92:	2104      	movs	r1, #4
 8003c94:	48a5      	ldr	r0, [pc, #660]	; (8003f2c <main+0x2e0>)
 8003c96:	f002 fe85 	bl	80069a4 <HAL_TIM_PWM_Start>
  NRF24L01_Init();
 8003c9a:	f7fc fe0f 	bl	80008bc <NRF24L01_Init>

	  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	2120      	movs	r1, #32
 8003ca2:	48a3      	ldr	r0, [pc, #652]	; (8003f30 <main+0x2e4>)
 8003ca4:	f001 fd48 	bl	8005738 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 8003ca8:	2201      	movs	r2, #1
 8003caa:	2120      	movs	r1, #32
 8003cac:	48a1      	ldr	r0, [pc, #644]	; (8003f34 <main+0x2e8>)
 8003cae:	f001 fd43 	bl	8005738 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	 	  	  	POINT_COLOR=BLACK;
 8003cb2:	4b9c      	ldr	r3, [pc, #624]	; (8003f24 <main+0x2d8>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
	 	  		LCD_ShowString(30,40,210,24,24,(uint8_t *)"Present By ZXD");
 8003cb8:	4b9f      	ldr	r3, [pc, #636]	; (8003f38 <main+0x2ec>)
 8003cba:	9301      	str	r3, [sp, #4]
 8003cbc:	2318      	movs	r3, #24
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	2318      	movs	r3, #24
 8003cc2:	22d2      	movs	r2, #210	; 0xd2
 8003cc4:	2128      	movs	r1, #40	; 0x28
 8003cc6:	201e      	movs	r0, #30
 8003cc8:	f7ff ff72 	bl	8003bb0 <LCD_ShowString>

	 			if(NRF24L01_Check()==0)
 8003ccc:	f7fc fe0c 	bl	80008e8 <NRF24L01_Check>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f040 8083 	bne.w	8003dde <main+0x192>
	 			{
	 				if(Check_flag==0)
 8003cd8:	4b98      	ldr	r3, [pc, #608]	; (8003f3c <main+0x2f0>)
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d119      	bne.n	8003d14 <main+0xc8>
	 				{
	 				LCD_Fill(65,190,309,200+16,WHITE);
 8003ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	23d8      	movs	r3, #216	; 0xd8
 8003ce8:	f240 1235 	movw	r2, #309	; 0x135
 8003cec:	21be      	movs	r1, #190	; 0xbe
 8003cee:	2041      	movs	r0, #65	; 0x41
 8003cf0:	f7ff fe64 	bl	80039bc <LCD_Fill>
	 				LCD_ShowString(70,190,200,16,16,(uint8_t *)"NRF24L01 OK");
 8003cf4:	4b92      	ldr	r3, [pc, #584]	; (8003f40 <main+0x2f4>)
 8003cf6:	9301      	str	r3, [sp, #4]
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	2310      	movs	r3, #16
 8003cfe:	22c8      	movs	r2, #200	; 0xc8
 8003d00:	21be      	movs	r1, #190	; 0xbe
 8003d02:	2046      	movs	r0, #70	; 0x46
 8003d04:	f7ff ff54 	bl	8003bb0 <LCD_ShowString>
	 				Check_flag=1;
 8003d08:	4b8c      	ldr	r3, [pc, #560]	; (8003f3c <main+0x2f0>)
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	701a      	strb	r2, [r3, #0]
	 				NRF24L01_TX_Mode();
 8003d0e:	f7fc ff1b 	bl	8000b48 <NRF24L01_TX_Mode>
 8003d12:	e085      	b.n	8003e20 <main+0x1d4>
	 				else{


	 					//sprintf((char *)tmp_buf,"%d",DAC_FRE);

	 					   if(NRF24L01_RxPacket(tmp_buf)==TX_OK)
 8003d14:	488b      	ldr	r0, [pc, #556]	; (8003f44 <main+0x2f8>)
 8003d16:	f7fc fef1 	bl	8000afc <NRF24L01_RxPacket>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b20      	cmp	r3, #32
 8003d1e:	d146      	bne.n	8003dae <main+0x162>
	 					  {
	 						  LCD_Fill(0,220,lcddev.width,220+16,WHITE);//清空显示
 8003d20:	4b89      	ldr	r3, [pc, #548]	; (8003f48 <main+0x2fc>)
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d28:	9300      	str	r3, [sp, #0]
 8003d2a:	23ec      	movs	r3, #236	; 0xec
 8003d2c:	21dc      	movs	r1, #220	; 0xdc
 8003d2e:	2000      	movs	r0, #0
 8003d30:	f7ff fe44 	bl	80039bc <LCD_Fill>
	 					  	  LCD_ShowString(70,220,239,32,16,(uint8_t *)"DATA Receiving ");
 8003d34:	4b85      	ldr	r3, [pc, #532]	; (8003f4c <main+0x300>)
 8003d36:	9301      	str	r3, [sp, #4]
 8003d38:	2310      	movs	r3, #16
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	2320      	movs	r3, #32
 8003d3e:	22ef      	movs	r2, #239	; 0xef
 8003d40:	21dc      	movs	r1, #220	; 0xdc
 8003d42:	2046      	movs	r0, #70	; 0x46
 8003d44:	f7ff ff34 	bl	8003bb0 <LCD_ShowString>
	 					  	  memset(send_data, 0, sizeof(send_data));
 8003d48:	2232      	movs	r2, #50	; 0x32
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4880      	ldr	r0, [pc, #512]	; (8003f50 <main+0x304>)
 8003d4e:	f003 fbf9 	bl	8007544 <memset>
	 					  	  	adcx = HAL_ADC_GetValue(&hadc1);
 8003d52:	4875      	ldr	r0, [pc, #468]	; (8003f28 <main+0x2dc>)
 8003d54:	f001 f8e8 	bl	8004f28 <HAL_ADC_GetValue>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	4b7d      	ldr	r3, [pc, #500]	; (8003f54 <main+0x308>)
 8003d5e:	801a      	strh	r2, [r3, #0]
	 							send_data[(int)tmp_buf]=adcx;
 8003d60:	4b7c      	ldr	r3, [pc, #496]	; (8003f54 <main+0x308>)
 8003d62:	881a      	ldrh	r2, [r3, #0]
 8003d64:	4b77      	ldr	r3, [pc, #476]	; (8003f44 <main+0x2f8>)
 8003d66:	b2d1      	uxtb	r1, r2
 8003d68:	4a79      	ldr	r2, [pc, #484]	; (8003f50 <main+0x304>)
 8003d6a:	54d1      	strb	r1, [r2, r3]

	 							for(int ii=0;ii<50;ii++)
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	607b      	str	r3, [r7, #4]
 8003d70:	e019      	b.n	8003da6 <main+0x15a>
	 							{
	 									HAL_UART_Transmit(&huart1, send_data, sizeof(send_data), 100);
 8003d72:	2364      	movs	r3, #100	; 0x64
 8003d74:	2232      	movs	r2, #50	; 0x32
 8003d76:	4976      	ldr	r1, [pc, #472]	; (8003f50 <main+0x304>)
 8003d78:	4877      	ldr	r0, [pc, #476]	; (8003f58 <main+0x30c>)
 8003d7a:	f003 f97e 	bl	800707a <HAL_UART_Transmit>
	 									delay_ms(500);
 8003d7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003d82:	f7fc ff51 	bl	8000c28 <delay_ms>
	 									LCD_ShowString(0,190,lcddev.width-1,32,16,send_data);
 8003d86:	4b70      	ldr	r3, [pc, #448]	; (8003f48 <main+0x2fc>)
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	4b70      	ldr	r3, [pc, #448]	; (8003f50 <main+0x304>)
 8003d90:	9301      	str	r3, [sp, #4]
 8003d92:	2310      	movs	r3, #16
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	2320      	movs	r3, #32
 8003d98:	21be      	movs	r1, #190	; 0xbe
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	f7ff ff08 	bl	8003bb0 <LCD_ShowString>
	 							for(int ii=0;ii<50;ii++)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	3301      	adds	r3, #1
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2b31      	cmp	r3, #49	; 0x31
 8003daa:	dde2      	ble.n	8003d72 <main+0x126>
 8003dac:	e038      	b.n	8003e20 <main+0x1d4>
	 							}

	 					  }else
	 					  {
	 					  LCD_Fill(0,220,lcddev.width,220+16,WHITE);//清空显示
 8003dae:	4b66      	ldr	r3, [pc, #408]	; (8003f48 <main+0x2fc>)
 8003db0:	881a      	ldrh	r2, [r3, #0]
 8003db2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	23ec      	movs	r3, #236	; 0xec
 8003dba:	21dc      	movs	r1, #220	; 0xdc
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	f7ff fdfd 	bl	80039bc <LCD_Fill>
	 					  LCD_ShowString(70,220,lcddev.width-1,32,16,(uint8_t *)"Receive Failed ");
 8003dc2:	4b61      	ldr	r3, [pc, #388]	; (8003f48 <main+0x2fc>)
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	4b64      	ldr	r3, [pc, #400]	; (8003f5c <main+0x310>)
 8003dcc:	9301      	str	r3, [sp, #4]
 8003dce:	2310      	movs	r3, #16
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	2320      	movs	r3, #32
 8003dd4:	21dc      	movs	r1, #220	; 0xdc
 8003dd6:	2046      	movs	r0, #70	; 0x46
 8003dd8:	f7ff feea 	bl	8003bb0 <LCD_ShowString>
 8003ddc:	e020      	b.n	8003e20 <main+0x1d4>
	 					  };

	 				}
	 			}
	 			else{
	 				LCD_Fill(65,190,309,200+16,WHITE);
 8003dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	23d8      	movs	r3, #216	; 0xd8
 8003de6:	f240 1235 	movw	r2, #309	; 0x135
 8003dea:	21be      	movs	r1, #190	; 0xbe
 8003dec:	2041      	movs	r0, #65	; 0x41
 8003dee:	f7ff fde5 	bl	80039bc <LCD_Fill>
	 				LCD_Fill(0,220,lcddev.width,220+16,WHITE);//清空显示
 8003df2:	4b55      	ldr	r3, [pc, #340]	; (8003f48 <main+0x2fc>)
 8003df4:	881a      	ldrh	r2, [r3, #0]
 8003df6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	23ec      	movs	r3, #236	; 0xec
 8003dfe:	21dc      	movs	r1, #220	; 0xdc
 8003e00:	2000      	movs	r0, #0
 8003e02:	f7ff fddb 	bl	80039bc <LCD_Fill>
	 				LCD_ShowString(70,190,200,16,16,(uint8_t *)"NRF24L01 Error");
 8003e06:	4b56      	ldr	r3, [pc, #344]	; (8003f60 <main+0x314>)
 8003e08:	9301      	str	r3, [sp, #4]
 8003e0a:	2310      	movs	r3, #16
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	2310      	movs	r3, #16
 8003e10:	22c8      	movs	r2, #200	; 0xc8
 8003e12:	21be      	movs	r1, #190	; 0xbe
 8003e14:	2046      	movs	r0, #70	; 0x46
 8003e16:	f7ff fecb 	bl	8003bb0 <LCD_ShowString>
	 				Check_flag=0;
 8003e1a:	4b48      	ldr	r3, [pc, #288]	; (8003f3c <main+0x2f0>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	701a      	strb	r2, [r3, #0]
	 			}



    			if(NRF24L01_Check()==0)
 8003e20:	f7fc fd62 	bl	80008e8 <NRF24L01_Check>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d14b      	bne.n	8003ec2 <main+0x276>
    			{
    				LCD_Fill(65,190,309,200+16,WHITE);
 8003e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	23d8      	movs	r3, #216	; 0xd8
 8003e32:	f240 1235 	movw	r2, #309	; 0x135
 8003e36:	21be      	movs	r1, #190	; 0xbe
 8003e38:	2041      	movs	r0, #65	; 0x41
 8003e3a:	f7ff fdbf 	bl	80039bc <LCD_Fill>
    				LCD_ShowString(70,190,200,16,16,(uint8_t *)"NRF24L01 OK");
 8003e3e:	4b40      	ldr	r3, [pc, #256]	; (8003f40 <main+0x2f4>)
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	2310      	movs	r3, #16
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	2310      	movs	r3, #16
 8003e48:	22c8      	movs	r2, #200	; 0xc8
 8003e4a:	21be      	movs	r1, #190	; 0xbe
 8003e4c:	2046      	movs	r0, #70	; 0x46
 8003e4e:	f7ff feaf 	bl	8003bb0 <LCD_ShowString>
    				Check_flag=1;
 8003e52:	4b3a      	ldr	r3, [pc, #232]	; (8003f3c <main+0x2f0>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	701a      	strb	r2, [r3, #0]
    				NRF24L01_TX_Mode();
 8003e58:	f7fc fe76 	bl	8000b48 <NRF24L01_TX_Mode>
    				if(NRF24L01_TxPacket(tmp_buf)==TX_OK)
 8003e5c:	4839      	ldr	r0, [pc, #228]	; (8003f44 <main+0x2f8>)
 8003e5e:	f7fc fe11 	bl	8000a84 <NRF24L01_TxPacket>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b20      	cmp	r3, #32
 8003e66:	d114      	bne.n	8003e92 <main+0x246>
    				{
    					LCD_Fill(0,220,lcddev.width,220+16,WHITE);//清空显示
 8003e68:	4b37      	ldr	r3, [pc, #220]	; (8003f48 <main+0x2fc>)
 8003e6a:	881a      	ldrh	r2, [r3, #0]
 8003e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	23ec      	movs	r3, #236	; 0xec
 8003e74:	21dc      	movs	r1, #220	; 0xdc
 8003e76:	2000      	movs	r0, #0
 8003e78:	f7ff fda0 	bl	80039bc <LCD_Fill>
    					LCD_ShowString(70,220,239,32,16,(uint8_t *)"DATA Sending ");
 8003e7c:	4b39      	ldr	r3, [pc, #228]	; (8003f64 <main+0x318>)
 8003e7e:	9301      	str	r3, [sp, #4]
 8003e80:	2310      	movs	r3, #16
 8003e82:	9300      	str	r3, [sp, #0]
 8003e84:	2320      	movs	r3, #32
 8003e86:	22ef      	movs	r2, #239	; 0xef
 8003e88:	21dc      	movs	r1, #220	; 0xdc
 8003e8a:	2046      	movs	r0, #70	; 0x46
 8003e8c:	f7ff fe90 	bl	8003bb0 <LCD_ShowString>
 8003e90:	e038      	b.n	8003f04 <main+0x2b8>
    				}else
    				{
    	 				LCD_Fill(0,220,lcddev.width,220+16,WHITE);//清空显示
 8003e92:	4b2d      	ldr	r3, [pc, #180]	; (8003f48 <main+0x2fc>)
 8003e94:	881a      	ldrh	r2, [r3, #0]
 8003e96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	23ec      	movs	r3, #236	; 0xec
 8003e9e:	21dc      	movs	r1, #220	; 0xdc
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	f7ff fd8b 	bl	80039bc <LCD_Fill>
    					LCD_ShowString(70,220,lcddev.width-1,32,16,(uint8_t *)"Send Failed ");
 8003ea6:	4b28      	ldr	r3, [pc, #160]	; (8003f48 <main+0x2fc>)
 8003ea8:	881b      	ldrh	r3, [r3, #0]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	4b2e      	ldr	r3, [pc, #184]	; (8003f68 <main+0x31c>)
 8003eb0:	9301      	str	r3, [sp, #4]
 8003eb2:	2310      	movs	r3, #16
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	2320      	movs	r3, #32
 8003eb8:	21dc      	movs	r1, #220	; 0xdc
 8003eba:	2046      	movs	r0, #70	; 0x46
 8003ebc:	f7ff fe78 	bl	8003bb0 <LCD_ShowString>
 8003ec0:	e020      	b.n	8003f04 <main+0x2b8>
    				};

    			}
    			else{
    				LCD_Fill(65,190,309,200+16,WHITE);
 8003ec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	23d8      	movs	r3, #216	; 0xd8
 8003eca:	f240 1235 	movw	r2, #309	; 0x135
 8003ece:	21be      	movs	r1, #190	; 0xbe
 8003ed0:	2041      	movs	r0, #65	; 0x41
 8003ed2:	f7ff fd73 	bl	80039bc <LCD_Fill>
    				LCD_Fill(0,220,lcddev.width,220+16,WHITE);//清空显示
 8003ed6:	4b1c      	ldr	r3, [pc, #112]	; (8003f48 <main+0x2fc>)
 8003ed8:	881a      	ldrh	r2, [r3, #0]
 8003eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	23ec      	movs	r3, #236	; 0xec
 8003ee2:	21dc      	movs	r1, #220	; 0xdc
 8003ee4:	2000      	movs	r0, #0
 8003ee6:	f7ff fd69 	bl	80039bc <LCD_Fill>
    				LCD_ShowString(70,190,200,16,16,(uint8_t *)"NRF24L01 Error");
 8003eea:	4b1d      	ldr	r3, [pc, #116]	; (8003f60 <main+0x314>)
 8003eec:	9301      	str	r3, [sp, #4]
 8003eee:	2310      	movs	r3, #16
 8003ef0:	9300      	str	r3, [sp, #0]
 8003ef2:	2310      	movs	r3, #16
 8003ef4:	22c8      	movs	r2, #200	; 0xc8
 8003ef6:	21be      	movs	r1, #190	; 0xbe
 8003ef8:	2046      	movs	r0, #70	; 0x46
 8003efa:	f7ff fe59 	bl	8003bb0 <LCD_ShowString>
    				Check_flag=0;
 8003efe:	4b0f      	ldr	r3, [pc, #60]	; (8003f3c <main+0x2f0>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
    			}




	 	 	  	HAL_ADC_Start(&hadc1);
 8003f04:	4808      	ldr	r0, [pc, #32]	; (8003f28 <main+0x2dc>)
 8003f06:	f000 fe67 	bl	8004bd8 <HAL_ADC_Start>
	 	 	  	HAL_ADC_PollForConversion(&hadc1, 10);
 8003f0a:	210a      	movs	r1, #10
 8003f0c:	4806      	ldr	r0, [pc, #24]	; (8003f28 <main+0x2dc>)
 8003f0e:	f000 ff11 	bl	8004d34 <HAL_ADC_PollForConversion>
	 	 	  	adcx = HAL_ADC_GetValue(&hadc1);
 8003f12:	4805      	ldr	r0, [pc, #20]	; (8003f28 <main+0x2dc>)
 8003f14:	f001 f808 	bl	8004f28 <HAL_ADC_GetValue>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <main+0x308>)
 8003f1e:	801a      	strh	r2, [r3, #0]
	 	  	  	POINT_COLOR=BLACK;
 8003f20:	e6c7      	b.n	8003cb2 <main+0x66>
 8003f22:	bf00      	nop
 8003f24:	20000000 	.word	0x20000000
 8003f28:	20000180 	.word	0x20000180
 8003f2c:	20000138 	.word	0x20000138
 8003f30:	40010c00 	.word	0x40010c00
 8003f34:	40011800 	.word	0x40011800
 8003f38:	08007574 	.word	0x08007574
 8003f3c:	20000034 	.word	0x20000034
 8003f40:	08007584 	.word	0x08007584
 8003f44:	200001f0 	.word	0x200001f0
 8003f48:	200000dc 	.word	0x200000dc
 8003f4c:	08007590 	.word	0x08007590
 8003f50:	200001fc 	.word	0x200001fc
 8003f54:	200000ec 	.word	0x200000ec
 8003f58:	200001b0 	.word	0x200001b0
 8003f5c:	080075a0 	.word	0x080075a0
 8003f60:	080075b0 	.word	0x080075b0
 8003f64:	080075c0 	.word	0x080075c0
 8003f68:	080075d0 	.word	0x080075d0

08003f6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b096      	sub	sp, #88	; 0x58
 8003f70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003f72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f76:	2228      	movs	r2, #40	; 0x28
 8003f78:	2100      	movs	r1, #0
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f003 fae2 	bl	8007544 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f80:	f107 031c 	add.w	r3, r7, #28
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	605a      	str	r2, [r3, #4]
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	60da      	str	r2, [r3, #12]
 8003f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f90:	1d3b      	adds	r3, r7, #4
 8003f92:	2200      	movs	r2, #0
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	605a      	str	r2, [r3, #4]
 8003f98:	609a      	str	r2, [r3, #8]
 8003f9a:	60da      	str	r2, [r3, #12]
 8003f9c:	611a      	str	r2, [r3, #16]
 8003f9e:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003fa4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fa8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003faa:	2300      	movs	r3, #0
 8003fac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003fb6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8003fbc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8003fc0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003fc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f001 fbce 	bl	8005768 <HAL_RCC_OscConfig>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003fd2:	f000 fa83 	bl	80044dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003fd6:	230f      	movs	r3, #15
 8003fd8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003fda:	2302      	movs	r3, #2
 8003fdc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003fe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fe6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003fec:	f107 031c 	add.w	r3, r7, #28
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f001 fe38 	bl	8005c68 <HAL_RCC_ClockConfig>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003ffe:	f000 fa6d 	bl	80044dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004002:	2302      	movs	r3, #2
 8004004:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8004006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800400a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800400c:	1d3b      	adds	r3, r7, #4
 800400e:	4618      	mov	r0, r3
 8004010:	f001 ffc4 	bl	8005f9c <HAL_RCCEx_PeriphCLKConfig>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800401a:	f000 fa5f 	bl	80044dc <Error_Handler>
  }
}
 800401e:	bf00      	nop
 8004020:	3758      	adds	r7, #88	; 0x58
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800402e:	1d3b      	adds	r3, r7, #4
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8004038:	4b18      	ldr	r3, [pc, #96]	; (800409c <MX_ADC1_Init+0x74>)
 800403a:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <MX_ADC1_Init+0x78>)
 800403c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800403e:	4b17      	ldr	r3, [pc, #92]	; (800409c <MX_ADC1_Init+0x74>)
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8004044:	4b15      	ldr	r3, [pc, #84]	; (800409c <MX_ADC1_Init+0x74>)
 8004046:	2200      	movs	r2, #0
 8004048:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <MX_ADC1_Init+0x74>)
 800404c:	2200      	movs	r2, #0
 800404e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004050:	4b12      	ldr	r3, [pc, #72]	; (800409c <MX_ADC1_Init+0x74>)
 8004052:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8004056:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004058:	4b10      	ldr	r3, [pc, #64]	; (800409c <MX_ADC1_Init+0x74>)
 800405a:	2200      	movs	r2, #0
 800405c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800405e:	4b0f      	ldr	r3, [pc, #60]	; (800409c <MX_ADC1_Init+0x74>)
 8004060:	2201      	movs	r2, #1
 8004062:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004064:	480d      	ldr	r0, [pc, #52]	; (800409c <MX_ADC1_Init+0x74>)
 8004066:	f000 fccd 	bl	8004a04 <HAL_ADC_Init>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8004070:	f000 fa34 	bl	80044dc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004074:	2301      	movs	r3, #1
 8004076:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004078:	2301      	movs	r3, #1
 800407a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004080:	1d3b      	adds	r3, r7, #4
 8004082:	4619      	mov	r1, r3
 8004084:	4805      	ldr	r0, [pc, #20]	; (800409c <MX_ADC1_Init+0x74>)
 8004086:	f000 ff5b 	bl	8004f40 <HAL_ADC_ConfigChannel>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8004090:	f000 fa24 	bl	80044dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	20000180 	.word	0x20000180
 80040a0:	40012400 	.word	0x40012400

080040a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80040a8:	4b17      	ldr	r3, [pc, #92]	; (8004108 <MX_SPI2_Init+0x64>)
 80040aa:	4a18      	ldr	r2, [pc, #96]	; (800410c <MX_SPI2_Init+0x68>)
 80040ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80040ae:	4b16      	ldr	r3, [pc, #88]	; (8004108 <MX_SPI2_Init+0x64>)
 80040b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80040b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80040b6:	4b14      	ldr	r3, [pc, #80]	; (8004108 <MX_SPI2_Init+0x64>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80040bc:	4b12      	ldr	r3, [pc, #72]	; (8004108 <MX_SPI2_Init+0x64>)
 80040be:	2200      	movs	r2, #0
 80040c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80040c2:	4b11      	ldr	r3, [pc, #68]	; (8004108 <MX_SPI2_Init+0x64>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040c8:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <MX_SPI2_Init+0x64>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80040ce:	4b0e      	ldr	r3, [pc, #56]	; (8004108 <MX_SPI2_Init+0x64>)
 80040d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80040d6:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <MX_SPI2_Init+0x64>)
 80040d8:	2208      	movs	r2, #8
 80040da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80040dc:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <MX_SPI2_Init+0x64>)
 80040de:	2200      	movs	r2, #0
 80040e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80040e2:	4b09      	ldr	r3, [pc, #36]	; (8004108 <MX_SPI2_Init+0x64>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040e8:	4b07      	ldr	r3, [pc, #28]	; (8004108 <MX_SPI2_Init+0x64>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <MX_SPI2_Init+0x64>)
 80040f0:	220a      	movs	r2, #10
 80040f2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80040f4:	4804      	ldr	r0, [pc, #16]	; (8004108 <MX_SPI2_Init+0x64>)
 80040f6:	f002 f8ed 	bl	80062d4 <HAL_SPI_Init>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d001      	beq.n	8004104 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8004100:	f000 f9ec 	bl	80044dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004104:	bf00      	nop
 8004106:	bd80      	pop	{r7, pc}
 8004108:	2000003c 	.word	0x2000003c
 800410c:	40003800 	.word	0x40003800

08004110 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004116:	f107 0308 	add.w	r3, r7, #8
 800411a:	2200      	movs	r2, #0
 800411c:	601a      	str	r2, [r3, #0]
 800411e:	605a      	str	r2, [r3, #4]
 8004120:	609a      	str	r2, [r3, #8]
 8004122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004124:	463b      	mov	r3, r7
 8004126:	2200      	movs	r2, #0
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800412c:	4b1d      	ldr	r3, [pc, #116]	; (80041a4 <MX_TIM3_Init+0x94>)
 800412e:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <MX_TIM3_Init+0x98>)
 8004130:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8004132:	4b1c      	ldr	r3, [pc, #112]	; (80041a4 <MX_TIM3_Init+0x94>)
 8004134:	2247      	movs	r2, #71	; 0x47
 8004136:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004138:	4b1a      	ldr	r3, [pc, #104]	; (80041a4 <MX_TIM3_Init+0x94>)
 800413a:	2200      	movs	r2, #0
 800413c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800413e:	4b19      	ldr	r3, [pc, #100]	; (80041a4 <MX_TIM3_Init+0x94>)
 8004140:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004144:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004146:	4b17      	ldr	r3, [pc, #92]	; (80041a4 <MX_TIM3_Init+0x94>)
 8004148:	2200      	movs	r2, #0
 800414a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800414c:	4b15      	ldr	r3, [pc, #84]	; (80041a4 <MX_TIM3_Init+0x94>)
 800414e:	2200      	movs	r2, #0
 8004150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8004152:	4814      	ldr	r0, [pc, #80]	; (80041a4 <MX_TIM3_Init+0x94>)
 8004154:	f002 fbd7 	bl	8006906 <HAL_TIM_Base_Init>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d001      	beq.n	8004162 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800415e:	f000 f9bd 	bl	80044dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004166:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004168:	f107 0308 	add.w	r3, r7, #8
 800416c:	4619      	mov	r1, r3
 800416e:	480d      	ldr	r0, [pc, #52]	; (80041a4 <MX_TIM3_Init+0x94>)
 8004170:	f002 fcd2 	bl	8006b18 <HAL_TIM_ConfigClockSource>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800417a:	f000 f9af 	bl	80044dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800417e:	2300      	movs	r3, #0
 8004180:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004182:	2300      	movs	r3, #0
 8004184:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004186:	463b      	mov	r3, r7
 8004188:	4619      	mov	r1, r3
 800418a:	4806      	ldr	r0, [pc, #24]	; (80041a4 <MX_TIM3_Init+0x94>)
 800418c:	f002 febc 	bl	8006f08 <HAL_TIMEx_MasterConfigSynchronization>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d001      	beq.n	800419a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8004196:	f000 f9a1 	bl	80044dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800419a:	bf00      	nop
 800419c:	3718      	adds	r7, #24
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000138 	.word	0x20000138
 80041a8:	40000400 	.word	0x40000400

080041ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80041b0:	4b11      	ldr	r3, [pc, #68]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041b2:	4a12      	ldr	r2, [pc, #72]	; (80041fc <MX_USART1_UART_Init+0x50>)
 80041b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80041b6:	4b10      	ldr	r3, [pc, #64]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80041bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80041be:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041c6:	2200      	movs	r2, #0
 80041c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80041ca:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80041d0:	4b09      	ldr	r3, [pc, #36]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041d2:	220c      	movs	r2, #12
 80041d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041d8:	2200      	movs	r2, #0
 80041da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80041dc:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041de:	2200      	movs	r2, #0
 80041e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80041e2:	4805      	ldr	r0, [pc, #20]	; (80041f8 <MX_USART1_UART_Init+0x4c>)
 80041e4:	f002 fefc 	bl	8006fe0 <HAL_UART_Init>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80041ee:	f000 f975 	bl	80044dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80041f2:	bf00      	nop
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	200001b0 	.word	0x200001b0
 80041fc:	40013800 	.word	0x40013800

08004200 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b08a      	sub	sp, #40	; 0x28
 8004204:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004206:	f107 0318 	add.w	r3, r7, #24
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	605a      	str	r2, [r3, #4]
 8004210:	609a      	str	r2, [r3, #8]
 8004212:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004214:	4b6c      	ldr	r3, [pc, #432]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	4a6b      	ldr	r2, [pc, #428]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 800421a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800421e:	6193      	str	r3, [r2, #24]
 8004220:	4b69      	ldr	r3, [pc, #420]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800422c:	4b66      	ldr	r3, [pc, #408]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	4a65      	ldr	r2, [pc, #404]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 8004232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004236:	6193      	str	r3, [r2, #24]
 8004238:	4b63      	ldr	r3, [pc, #396]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	613b      	str	r3, [r7, #16]
 8004242:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004244:	4b60      	ldr	r3, [pc, #384]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	4a5f      	ldr	r2, [pc, #380]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 800424a:	f043 0304 	orr.w	r3, r3, #4
 800424e:	6193      	str	r3, [r2, #24]
 8004250:	4b5d      	ldr	r3, [pc, #372]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	f003 0304 	and.w	r3, r3, #4
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800425c:	4b5a      	ldr	r3, [pc, #360]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	4a59      	ldr	r2, [pc, #356]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 8004262:	f043 0308 	orr.w	r3, r3, #8
 8004266:	6193      	str	r3, [r2, #24]
 8004268:	4b57      	ldr	r3, [pc, #348]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	f003 0308 	and.w	r3, r3, #8
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004274:	4b54      	ldr	r3, [pc, #336]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	4a53      	ldr	r2, [pc, #332]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 800427a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800427e:	6193      	str	r3, [r2, #24]
 8004280:	4b51      	ldr	r3, [pc, #324]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	607b      	str	r3, [r7, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800428c:	4b4e      	ldr	r3, [pc, #312]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 800428e:	699b      	ldr	r3, [r3, #24]
 8004290:	4a4d      	ldr	r2, [pc, #308]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 8004292:	f043 0320 	orr.w	r3, r3, #32
 8004296:	6193      	str	r3, [r2, #24]
 8004298:	4b4b      	ldr	r3, [pc, #300]	; (80043c8 <MX_GPIO_Init+0x1c8>)
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	603b      	str	r3, [r7, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 80042a4:	2200      	movs	r2, #0
 80042a6:	2120      	movs	r1, #32
 80042a8:	4848      	ldr	r0, [pc, #288]	; (80043cc <MX_GPIO_Init+0x1cc>)
 80042aa:	f001 fa45 	bl	8005738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_12, GPIO_PIN_SET);
 80042ae:	2201      	movs	r2, #1
 80042b0:	f241 0101 	movw	r1, #4097	; 0x1001
 80042b4:	4846      	ldr	r0, [pc, #280]	; (80043d0 <MX_GPIO_Init+0x1d0>)
 80042b6:	f001 fa3f 	bl	8005738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80042ba:	2200      	movs	r2, #0
 80042bc:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80042c0:	4844      	ldr	r0, [pc, #272]	; (80043d4 <MX_GPIO_Init+0x1d4>)
 80042c2:	f001 fa39 	bl	8005738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80042c6:	2200      	movs	r2, #0
 80042c8:	2120      	movs	r1, #32
 80042ca:	4841      	ldr	r0, [pc, #260]	; (80043d0 <MX_GPIO_Init+0x1d0>)
 80042cc:	f001 fa34 	bl	8005738 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80042d0:	2318      	movs	r3, #24
 80042d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042d4:	2300      	movs	r3, #0
 80042d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042d8:	2301      	movs	r3, #1
 80042da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042dc:	f107 0318 	add.w	r3, r7, #24
 80042e0:	4619      	mov	r1, r3
 80042e2:	483a      	ldr	r0, [pc, #232]	; (80043cc <MX_GPIO_Init+0x1cc>)
 80042e4:	f001 f894 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pin : led2_Pin */
  GPIO_InitStruct.Pin = led2_Pin;
 80042e8:	2320      	movs	r3, #32
 80042ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042ec:	2301      	movs	r3, #1
 80042ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f4:	2302      	movs	r3, #2
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(led2_GPIO_Port, &GPIO_InitStruct);
 80042f8:	f107 0318 	add.w	r3, r7, #24
 80042fc:	4619      	mov	r1, r3
 80042fe:	4833      	ldr	r0, [pc, #204]	; (80043cc <MX_GPIO_Init+0x1cc>)
 8004300:	f001 f886 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF9 PF10 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8004304:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8004308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800430a:	2300      	movs	r3, #0
 800430c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800430e:	2300      	movs	r3, #0
 8004310:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004312:	f107 0318 	add.w	r3, r7, #24
 8004316:	4619      	mov	r1, r3
 8004318:	482f      	ldr	r0, [pc, #188]	; (80043d8 <MX_GPIO_Init+0x1d8>)
 800431a:	f001 f879 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800431e:	2301      	movs	r3, #1
 8004320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004326:	2302      	movs	r3, #2
 8004328:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800432a:	f107 0318 	add.w	r3, r7, #24
 800432e:	4619      	mov	r1, r3
 8004330:	482a      	ldr	r0, [pc, #168]	; (80043dc <MX_GPIO_Init+0x1dc>)
 8004332:	f001 f86d 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 8004336:	f241 0301 	movw	r3, #4097	; 0x1001
 800433a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800433c:	2301      	movs	r3, #1
 800433e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004340:	2301      	movs	r3, #1
 8004342:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004344:	2303      	movs	r3, #3
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004348:	f107 0318 	add.w	r3, r7, #24
 800434c:	4619      	mov	r1, r3
 800434e:	4820      	ldr	r0, [pc, #128]	; (80043d0 <MX_GPIO_Init+0x1d0>)
 8004350:	f001 f85e 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8004354:	2306      	movs	r3, #6
 8004356:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004358:	2300      	movs	r3, #0
 800435a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435c:	2300      	movs	r3, #0
 800435e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004360:	f107 0318 	add.w	r3, r7, #24
 8004364:	4619      	mov	r1, r3
 8004366:	481a      	ldr	r0, [pc, #104]	; (80043d0 <MX_GPIO_Init+0x1d0>)
 8004368:	f001 f852 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800436c:	2340      	movs	r3, #64	; 0x40
 800436e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004374:	2301      	movs	r3, #1
 8004376:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004378:	f107 0318 	add.w	r3, r7, #24
 800437c:	4619      	mov	r1, r3
 800437e:	4815      	ldr	r0, [pc, #84]	; (80043d4 <MX_GPIO_Init+0x1d4>)
 8004380:	f001 f846 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004384:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004388:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800438a:	2301      	movs	r3, #1
 800438c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800438e:	2300      	movs	r3, #0
 8004390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004392:	2302      	movs	r3, #2
 8004394:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004396:	f107 0318 	add.w	r3, r7, #24
 800439a:	4619      	mov	r1, r3
 800439c:	480d      	ldr	r0, [pc, #52]	; (80043d4 <MX_GPIO_Init+0x1d4>)
 800439e:	f001 f837 	bl	8005410 <HAL_GPIO_Init>

  /*Configure GPIO pin : led1_Pin */
  GPIO_InitStruct.Pin = led1_Pin;
 80043a2:	2320      	movs	r3, #32
 80043a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043a6:	2301      	movs	r3, #1
 80043a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80043aa:	2302      	movs	r3, #2
 80043ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80043ae:	2303      	movs	r3, #3
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 80043b2:	f107 0318 	add.w	r3, r7, #24
 80043b6:	4619      	mov	r1, r3
 80043b8:	4805      	ldr	r0, [pc, #20]	; (80043d0 <MX_GPIO_Init+0x1d0>)
 80043ba:	f001 f829 	bl	8005410 <HAL_GPIO_Init>

}
 80043be:	bf00      	nop
 80043c0:	3728      	adds	r7, #40	; 0x28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
 80043c6:	bf00      	nop
 80043c8:	40021000 	.word	0x40021000
 80043cc:	40011800 	.word	0x40011800
 80043d0:	40010c00 	.word	0x40010c00
 80043d4:	40012000 	.word	0x40012000
 80043d8:	40011c00 	.word	0x40011c00
 80043dc:	40010800 	.word	0x40010800

080043e0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b08e      	sub	sp, #56	; 0x38
 80043e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80043e6:	f107 031c 	add.w	r3, r7, #28
 80043ea:	2200      	movs	r2, #0
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	605a      	str	r2, [r3, #4]
 80043f0:	609a      	str	r2, [r3, #8]
 80043f2:	60da      	str	r2, [r3, #12]
 80043f4:	611a      	str	r2, [r3, #16]
 80043f6:	615a      	str	r2, [r3, #20]
 80043f8:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80043fa:	463b      	mov	r3, r7
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	605a      	str	r2, [r3, #4]
 8004402:	609a      	str	r2, [r3, #8]
 8004404:	60da      	str	r2, [r3, #12]
 8004406:	611a      	str	r2, [r3, #16]
 8004408:	615a      	str	r2, [r3, #20]
 800440a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800440c:	4b30      	ldr	r3, [pc, #192]	; (80044d0 <MX_FSMC_Init+0xf0>)
 800440e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8004412:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8004414:	4b2e      	ldr	r3, [pc, #184]	; (80044d0 <MX_FSMC_Init+0xf0>)
 8004416:	4a2f      	ldr	r2, [pc, #188]	; (80044d4 <MX_FSMC_Init+0xf4>)
 8004418:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 800441a:	4b2d      	ldr	r3, [pc, #180]	; (80044d0 <MX_FSMC_Init+0xf0>)
 800441c:	2206      	movs	r2, #6
 800441e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8004420:	4b2b      	ldr	r3, [pc, #172]	; (80044d0 <MX_FSMC_Init+0xf0>)
 8004422:	2200      	movs	r2, #0
 8004424:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8004426:	4b2a      	ldr	r3, [pc, #168]	; (80044d0 <MX_FSMC_Init+0xf0>)
 8004428:	2200      	movs	r2, #0
 800442a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800442c:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <MX_FSMC_Init+0xf0>)
 800442e:	2210      	movs	r2, #16
 8004430:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004432:	4b27      	ldr	r3, [pc, #156]	; (80044d0 <MX_FSMC_Init+0xf0>)
 8004434:	2200      	movs	r2, #0
 8004436:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004438:	4b25      	ldr	r3, [pc, #148]	; (80044d0 <MX_FSMC_Init+0xf0>)
 800443a:	2200      	movs	r2, #0
 800443c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800443e:	4b24      	ldr	r3, [pc, #144]	; (80044d0 <MX_FSMC_Init+0xf0>)
 8004440:	2200      	movs	r2, #0
 8004442:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004444:	4b22      	ldr	r3, [pc, #136]	; (80044d0 <MX_FSMC_Init+0xf0>)
 8004446:	2200      	movs	r2, #0
 8004448:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800444a:	4b21      	ldr	r3, [pc, #132]	; (80044d0 <MX_FSMC_Init+0xf0>)
 800444c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004450:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004452:	4b1f      	ldr	r3, [pc, #124]	; (80044d0 <MX_FSMC_Init+0xf0>)
 8004454:	2200      	movs	r2, #0
 8004456:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8004458:	4b1d      	ldr	r3, [pc, #116]	; (80044d0 <MX_FSMC_Init+0xf0>)
 800445a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800445e:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004460:	4b1b      	ldr	r3, [pc, #108]	; (80044d0 <MX_FSMC_Init+0xf0>)
 8004462:	2200      	movs	r2, #0
 8004464:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004466:	4b1a      	ldr	r3, [pc, #104]	; (80044d0 <MX_FSMC_Init+0xf0>)
 8004468:	2200      	movs	r2, #0
 800446a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 6;
 800446c:	2306      	movs	r3, #6
 800446e:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8004470:	230f      	movs	r3, #15
 8004472:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 26;
 8004474:	231a      	movs	r3, #26
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8004478:	2300      	movs	r3, #0
 800447a:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800447c:	2310      	movs	r3, #16
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8004480:	2311      	movs	r3, #17
 8004482:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004484:	2300      	movs	r3, #0
 8004486:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 3;
 8004488:	2303      	movs	r3, #3
 800448a:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800448c:	230f      	movs	r3, #15
 800448e:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 6;
 8004490:	2306      	movs	r3, #6
 8004492:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8004494:	2300      	movs	r3, #0
 8004496:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8004498:	2310      	movs	r3, #16
 800449a:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800449c:	2311      	movs	r3, #17
 800449e:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80044a4:	463a      	mov	r2, r7
 80044a6:	f107 031c 	add.w	r3, r7, #28
 80044aa:	4619      	mov	r1, r3
 80044ac:	4808      	ldr	r0, [pc, #32]	; (80044d0 <MX_FSMC_Init+0xf0>)
 80044ae:	f002 f9dd 	bl	800686c <HAL_SRAM_Init>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 80044b8:	f000 f810 	bl	80044dc <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80044bc:	4b06      	ldr	r3, [pc, #24]	; (80044d8 <MX_FSMC_Init+0xf8>)
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	4a05      	ldr	r2, [pc, #20]	; (80044d8 <MX_FSMC_Init+0xf8>)
 80044c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044c6:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80044c8:	bf00      	nop
 80044ca:	3738      	adds	r7, #56	; 0x38
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	200000f0 	.word	0x200000f0
 80044d4:	a0000104 	.word	0xa0000104
 80044d8:	40010000 	.word	0x40010000

080044dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80044e0:	bf00      	nop
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bc80      	pop	{r7}
 80044e6:	4770      	bx	lr

080044e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80044ee:	4b16      	ldr	r3, [pc, #88]	; (8004548 <HAL_MspInit+0x60>)
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	4a15      	ldr	r2, [pc, #84]	; (8004548 <HAL_MspInit+0x60>)
 80044f4:	f043 0301 	orr.w	r3, r3, #1
 80044f8:	6193      	str	r3, [r2, #24]
 80044fa:	4b13      	ldr	r3, [pc, #76]	; (8004548 <HAL_MspInit+0x60>)
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004506:	4b10      	ldr	r3, [pc, #64]	; (8004548 <HAL_MspInit+0x60>)
 8004508:	69db      	ldr	r3, [r3, #28]
 800450a:	4a0f      	ldr	r2, [pc, #60]	; (8004548 <HAL_MspInit+0x60>)
 800450c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004510:	61d3      	str	r3, [r2, #28]
 8004512:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <HAL_MspInit+0x60>)
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800451a:	607b      	str	r3, [r7, #4]
 800451c:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800451e:	2004      	movs	r0, #4
 8004520:	f000 ff42 	bl	80053a8 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004524:	4b09      	ldr	r3, [pc, #36]	; (800454c <HAL_MspInit+0x64>)
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	60fb      	str	r3, [r7, #12]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	4a04      	ldr	r2, [pc, #16]	; (800454c <HAL_MspInit+0x64>)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004540:	bf00      	nop
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	40021000 	.word	0x40021000
 800454c:	40010000 	.word	0x40010000

08004550 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b088      	sub	sp, #32
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004558:	f107 0310 	add.w	r3, r7, #16
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
 8004560:	605a      	str	r2, [r3, #4]
 8004562:	609a      	str	r2, [r3, #8]
 8004564:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a14      	ldr	r2, [pc, #80]	; (80045bc <HAL_ADC_MspInit+0x6c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d121      	bne.n	80045b4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004570:	4b13      	ldr	r3, [pc, #76]	; (80045c0 <HAL_ADC_MspInit+0x70>)
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	4a12      	ldr	r2, [pc, #72]	; (80045c0 <HAL_ADC_MspInit+0x70>)
 8004576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800457a:	6193      	str	r3, [r2, #24]
 800457c:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <HAL_ADC_MspInit+0x70>)
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004584:	60fb      	str	r3, [r7, #12]
 8004586:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004588:	4b0d      	ldr	r3, [pc, #52]	; (80045c0 <HAL_ADC_MspInit+0x70>)
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	4a0c      	ldr	r2, [pc, #48]	; (80045c0 <HAL_ADC_MspInit+0x70>)
 800458e:	f043 0304 	orr.w	r3, r3, #4
 8004592:	6193      	str	r3, [r2, #24]
 8004594:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <HAL_ADC_MspInit+0x70>)
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80045a0:	2302      	movs	r3, #2
 80045a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80045a4:	2303      	movs	r3, #3
 80045a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045a8:	f107 0310 	add.w	r3, r7, #16
 80045ac:	4619      	mov	r1, r3
 80045ae:	4805      	ldr	r0, [pc, #20]	; (80045c4 <HAL_ADC_MspInit+0x74>)
 80045b0:	f000 ff2e 	bl	8005410 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80045b4:	bf00      	nop
 80045b6:	3720      	adds	r7, #32
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40012400 	.word	0x40012400
 80045c0:	40021000 	.word	0x40021000
 80045c4:	40010800 	.word	0x40010800

080045c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d0:	f107 0310 	add.w	r3, r7, #16
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	605a      	str	r2, [r3, #4]
 80045da:	609a      	str	r2, [r3, #8]
 80045dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <HAL_SPI_MspInit+0x8c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d131      	bne.n	800464c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80045e8:	4b1b      	ldr	r3, [pc, #108]	; (8004658 <HAL_SPI_MspInit+0x90>)
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	4a1a      	ldr	r2, [pc, #104]	; (8004658 <HAL_SPI_MspInit+0x90>)
 80045ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045f2:	61d3      	str	r3, [r2, #28]
 80045f4:	4b18      	ldr	r3, [pc, #96]	; (8004658 <HAL_SPI_MspInit+0x90>)
 80045f6:	69db      	ldr	r3, [r3, #28]
 80045f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045fc:	60fb      	str	r3, [r7, #12]
 80045fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004600:	4b15      	ldr	r3, [pc, #84]	; (8004658 <HAL_SPI_MspInit+0x90>)
 8004602:	699b      	ldr	r3, [r3, #24]
 8004604:	4a14      	ldr	r2, [pc, #80]	; (8004658 <HAL_SPI_MspInit+0x90>)
 8004606:	f043 0308 	orr.w	r3, r3, #8
 800460a:	6193      	str	r3, [r2, #24]
 800460c:	4b12      	ldr	r3, [pc, #72]	; (8004658 <HAL_SPI_MspInit+0x90>)
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	60bb      	str	r3, [r7, #8]
 8004616:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004618:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800461c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800461e:	2302      	movs	r3, #2
 8004620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004622:	2303      	movs	r3, #3
 8004624:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004626:	f107 0310 	add.w	r3, r7, #16
 800462a:	4619      	mov	r1, r3
 800462c:	480b      	ldr	r0, [pc, #44]	; (800465c <HAL_SPI_MspInit+0x94>)
 800462e:	f000 feef 	bl	8005410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004632:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800463c:	2300      	movs	r3, #0
 800463e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004640:	f107 0310 	add.w	r3, r7, #16
 8004644:	4619      	mov	r1, r3
 8004646:	4805      	ldr	r0, [pc, #20]	; (800465c <HAL_SPI_MspInit+0x94>)
 8004648:	f000 fee2 	bl	8005410 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800464c:	bf00      	nop
 800464e:	3720      	adds	r7, #32
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	40003800 	.word	0x40003800
 8004658:	40021000 	.word	0x40021000
 800465c:	40010c00 	.word	0x40010c00

08004660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a09      	ldr	r2, [pc, #36]	; (8004694 <HAL_TIM_Base_MspInit+0x34>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d10b      	bne.n	800468a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004672:	4b09      	ldr	r3, [pc, #36]	; (8004698 <HAL_TIM_Base_MspInit+0x38>)
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	4a08      	ldr	r2, [pc, #32]	; (8004698 <HAL_TIM_Base_MspInit+0x38>)
 8004678:	f043 0302 	orr.w	r3, r3, #2
 800467c:	61d3      	str	r3, [r2, #28]
 800467e:	4b06      	ldr	r3, [pc, #24]	; (8004698 <HAL_TIM_Base_MspInit+0x38>)
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800468a:	bf00      	nop
 800468c:	3714      	adds	r7, #20
 800468e:	46bd      	mov	sp, r7
 8004690:	bc80      	pop	{r7}
 8004692:	4770      	bx	lr
 8004694:	40000400 	.word	0x40000400
 8004698:	40021000 	.word	0x40021000

0800469c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046a4:	f107 0310 	add.w	r3, r7, #16
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	605a      	str	r2, [r3, #4]
 80046ae:	609a      	str	r2, [r3, #8]
 80046b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1c      	ldr	r2, [pc, #112]	; (8004728 <HAL_UART_MspInit+0x8c>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d131      	bne.n	8004720 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80046bc:	4b1b      	ldr	r3, [pc, #108]	; (800472c <HAL_UART_MspInit+0x90>)
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	4a1a      	ldr	r2, [pc, #104]	; (800472c <HAL_UART_MspInit+0x90>)
 80046c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80046c6:	6193      	str	r3, [r2, #24]
 80046c8:	4b18      	ldr	r3, [pc, #96]	; (800472c <HAL_UART_MspInit+0x90>)
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046d0:	60fb      	str	r3, [r7, #12]
 80046d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046d4:	4b15      	ldr	r3, [pc, #84]	; (800472c <HAL_UART_MspInit+0x90>)
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	4a14      	ldr	r2, [pc, #80]	; (800472c <HAL_UART_MspInit+0x90>)
 80046da:	f043 0304 	orr.w	r3, r3, #4
 80046de:	6193      	str	r3, [r2, #24]
 80046e0:	4b12      	ldr	r3, [pc, #72]	; (800472c <HAL_UART_MspInit+0x90>)
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	f003 0304 	and.w	r3, r3, #4
 80046e8:	60bb      	str	r3, [r7, #8]
 80046ea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80046ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046f2:	2302      	movs	r3, #2
 80046f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80046f6:	2303      	movs	r3, #3
 80046f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046fa:	f107 0310 	add.w	r3, r7, #16
 80046fe:	4619      	mov	r1, r3
 8004700:	480b      	ldr	r0, [pc, #44]	; (8004730 <HAL_UART_MspInit+0x94>)
 8004702:	f000 fe85 	bl	8005410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800470a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004710:	2300      	movs	r3, #0
 8004712:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004714:	f107 0310 	add.w	r3, r7, #16
 8004718:	4619      	mov	r1, r3
 800471a:	4805      	ldr	r0, [pc, #20]	; (8004730 <HAL_UART_MspInit+0x94>)
 800471c:	f000 fe78 	bl	8005410 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004720:	bf00      	nop
 8004722:	3720      	adds	r7, #32
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40013800 	.word	0x40013800
 800472c:	40021000 	.word	0x40021000
 8004730:	40010800 	.word	0x40010800

08004734 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800473a:	f107 0308 	add.w	r3, r7, #8
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]
 8004742:	605a      	str	r2, [r3, #4]
 8004744:	609a      	str	r2, [r3, #8]
 8004746:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8004748:	4b1f      	ldr	r3, [pc, #124]	; (80047c8 <HAL_FSMC_MspInit+0x94>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d136      	bne.n	80047be <HAL_FSMC_MspInit+0x8a>
    return;
  }
  FSMC_Initialized = 1;
 8004750:	4b1d      	ldr	r3, [pc, #116]	; (80047c8 <HAL_FSMC_MspInit+0x94>)
 8004752:	2201      	movs	r2, #1
 8004754:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004756:	4b1d      	ldr	r3, [pc, #116]	; (80047cc <HAL_FSMC_MspInit+0x98>)
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	4a1c      	ldr	r2, [pc, #112]	; (80047cc <HAL_FSMC_MspInit+0x98>)
 800475c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004760:	6153      	str	r3, [r2, #20]
 8004762:	4b1a      	ldr	r3, [pc, #104]	; (80047cc <HAL_FSMC_MspInit+0x98>)
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800476a:	607b      	str	r3, [r7, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 800476e:	f241 0301 	movw	r3, #4097	; 0x1001
 8004772:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004774:	2302      	movs	r3, #2
 8004776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004778:	2303      	movs	r3, #3
 800477a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800477c:	f107 0308 	add.w	r3, r7, #8
 8004780:	4619      	mov	r1, r3
 8004782:	4813      	ldr	r0, [pc, #76]	; (80047d0 <HAL_FSMC_MspInit+0x9c>)
 8004784:	f000 fe44 	bl	8005410 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004788:	f64f 7380 	movw	r3, #65408	; 0xff80
 800478c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800478e:	2302      	movs	r3, #2
 8004790:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004792:	2303      	movs	r3, #3
 8004794:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004796:	f107 0308 	add.w	r3, r7, #8
 800479a:	4619      	mov	r1, r3
 800479c:	480d      	ldr	r0, [pc, #52]	; (80047d4 <HAL_FSMC_MspInit+0xa0>)
 800479e:	f000 fe37 	bl	8005410 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80047a2:	f24c 7333 	movw	r3, #50995	; 0xc733
 80047a6:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047a8:	2302      	movs	r3, #2
 80047aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047ac:	2303      	movs	r3, #3
 80047ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80047b0:	f107 0308 	add.w	r3, r7, #8
 80047b4:	4619      	mov	r1, r3
 80047b6:	4808      	ldr	r0, [pc, #32]	; (80047d8 <HAL_FSMC_MspInit+0xa4>)
 80047b8:	f000 fe2a 	bl	8005410 <HAL_GPIO_Init>
 80047bc:	e000      	b.n	80047c0 <HAL_FSMC_MspInit+0x8c>
    return;
 80047be:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80047c0:	3718      	adds	r7, #24
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	20000038 	.word	0x20000038
 80047cc:	40021000 	.word	0x40021000
 80047d0:	40012000 	.word	0x40012000
 80047d4:	40011800 	.word	0x40011800
 80047d8:	40011400 	.word	0x40011400

080047dc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80047e4:	f7ff ffa6 	bl	8004734 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80047e8:	bf00      	nop
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80047f4:	bf00      	nop
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bc80      	pop	{r7}
 80047fa:	4770      	bx	lr

080047fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004800:	e7fe      	b.n	8004800 <HardFault_Handler+0x4>

08004802 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004802:	b480      	push	{r7}
 8004804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004806:	e7fe      	b.n	8004806 <MemManage_Handler+0x4>

08004808 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800480c:	e7fe      	b.n	800480c <BusFault_Handler+0x4>

0800480e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800480e:	b480      	push	{r7}
 8004810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004812:	e7fe      	b.n	8004812 <UsageFault_Handler+0x4>

08004814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004818:	bf00      	nop
 800481a:	46bd      	mov	sp, r7
 800481c:	bc80      	pop	{r7}
 800481e:	4770      	bx	lr

08004820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	bc80      	pop	{r7}
 800482a:	4770      	bx	lr

0800482c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004830:	bf00      	nop
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800483c:	f000 f8a2 	bl	8004984 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004840:	bf00      	nop
 8004842:	bd80      	pop	{r7, pc}

08004844 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004848:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <SystemInit+0x5c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a14      	ldr	r2, [pc, #80]	; (80048a0 <SystemInit+0x5c>)
 800484e:	f043 0301 	orr.w	r3, r3, #1
 8004852:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004854:	4b12      	ldr	r3, [pc, #72]	; (80048a0 <SystemInit+0x5c>)
 8004856:	685a      	ldr	r2, [r3, #4]
 8004858:	4911      	ldr	r1, [pc, #68]	; (80048a0 <SystemInit+0x5c>)
 800485a:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <SystemInit+0x60>)
 800485c:	4013      	ands	r3, r2
 800485e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004860:	4b0f      	ldr	r3, [pc, #60]	; (80048a0 <SystemInit+0x5c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a0e      	ldr	r2, [pc, #56]	; (80048a0 <SystemInit+0x5c>)
 8004866:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800486a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800486e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004870:	4b0b      	ldr	r3, [pc, #44]	; (80048a0 <SystemInit+0x5c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a0a      	ldr	r2, [pc, #40]	; (80048a0 <SystemInit+0x5c>)
 8004876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800487a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800487c:	4b08      	ldr	r3, [pc, #32]	; (80048a0 <SystemInit+0x5c>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	4a07      	ldr	r2, [pc, #28]	; (80048a0 <SystemInit+0x5c>)
 8004882:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004886:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004888:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <SystemInit+0x5c>)
 800488a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800488e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <SystemInit+0x64>)
 8004892:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004896:	609a      	str	r2, [r3, #8]
#endif 
}
 8004898:	bf00      	nop
 800489a:	46bd      	mov	sp, r7
 800489c:	bc80      	pop	{r7}
 800489e:	4770      	bx	lr
 80048a0:	40021000 	.word	0x40021000
 80048a4:	f8ff0000 	.word	0xf8ff0000
 80048a8:	e000ed00 	.word	0xe000ed00

080048ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80048ac:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80048ae:	e003      	b.n	80048b8 <LoopCopyDataInit>

080048b0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80048b2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80048b4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80048b6:	3104      	adds	r1, #4

080048b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80048b8:	480a      	ldr	r0, [pc, #40]	; (80048e4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80048ba:	4b0b      	ldr	r3, [pc, #44]	; (80048e8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80048bc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80048be:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80048c0:	d3f6      	bcc.n	80048b0 <CopyDataInit>
  ldr r2, =_sbss
 80048c2:	4a0a      	ldr	r2, [pc, #40]	; (80048ec <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80048c4:	e002      	b.n	80048cc <LoopFillZerobss>

080048c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80048c6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80048c8:	f842 3b04 	str.w	r3, [r2], #4

080048cc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80048cc:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80048ce:	429a      	cmp	r2, r3
  bcc FillZerobss
 80048d0:	d3f9      	bcc.n	80048c6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80048d2:	f7ff ffb7 	bl	8004844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048d6:	f002 fe11 	bl	80074fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80048da:	f7ff f9b7 	bl	8003c4c <main>
  bx lr
 80048de:	4770      	bx	lr
  ldr r3, =_sidata
 80048e0:	0800bd70 	.word	0x0800bd70
  ldr r0, =_sdata
 80048e4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80048e8:	20000014 	.word	0x20000014
  ldr r2, =_sbss
 80048ec:	20000014 	.word	0x20000014
  ldr r3, = _ebss
 80048f0:	20000234 	.word	0x20000234

080048f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80048f4:	e7fe      	b.n	80048f4 <ADC1_2_IRQHandler>
	...

080048f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80048fc:	4b08      	ldr	r3, [pc, #32]	; (8004920 <HAL_Init+0x28>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a07      	ldr	r2, [pc, #28]	; (8004920 <HAL_Init+0x28>)
 8004902:	f043 0310 	orr.w	r3, r3, #16
 8004906:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004908:	2003      	movs	r0, #3
 800490a:	f000 fd4d 	bl	80053a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800490e:	2000      	movs	r0, #0
 8004910:	f000 f808 	bl	8004924 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004914:	f7ff fde8 	bl	80044e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40022000 	.word	0x40022000

08004924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800492c:	4b12      	ldr	r3, [pc, #72]	; (8004978 <HAL_InitTick+0x54>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	4b12      	ldr	r3, [pc, #72]	; (800497c <HAL_InitTick+0x58>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	4619      	mov	r1, r3
 8004936:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800493a:	fbb3 f3f1 	udiv	r3, r3, r1
 800493e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fd57 	bl	80053f6 <HAL_SYSTICK_Config>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e00e      	b.n	8004970 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b0f      	cmp	r3, #15
 8004956:	d80a      	bhi.n	800496e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004958:	2200      	movs	r2, #0
 800495a:	6879      	ldr	r1, [r7, #4]
 800495c:	f04f 30ff 	mov.w	r0, #4294967295
 8004960:	f000 fd2d 	bl	80053be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004964:	4a06      	ldr	r2, [pc, #24]	; (8004980 <HAL_InitTick+0x5c>)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800496a:	2300      	movs	r3, #0
 800496c:	e000      	b.n	8004970 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
}
 8004970:	4618      	mov	r0, r3
 8004972:	3708      	adds	r7, #8
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	20000008 	.word	0x20000008
 800497c:	20000010 	.word	0x20000010
 8004980:	2000000c 	.word	0x2000000c

08004984 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004988:	4b05      	ldr	r3, [pc, #20]	; (80049a0 <HAL_IncTick+0x1c>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	461a      	mov	r2, r3
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HAL_IncTick+0x20>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4413      	add	r3, r2
 8004994:	4a03      	ldr	r2, [pc, #12]	; (80049a4 <HAL_IncTick+0x20>)
 8004996:	6013      	str	r3, [r2, #0]
}
 8004998:	bf00      	nop
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr
 80049a0:	20000010 	.word	0x20000010
 80049a4:	20000230 	.word	0x20000230

080049a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  return uwTick;
 80049ac:	4b02      	ldr	r3, [pc, #8]	; (80049b8 <HAL_GetTick+0x10>)
 80049ae:	681b      	ldr	r3, [r3, #0]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr
 80049b8:	20000230 	.word	0x20000230

080049bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80049c4:	f7ff fff0 	bl	80049a8 <HAL_GetTick>
 80049c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049d4:	d005      	beq.n	80049e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80049d6:	4b0a      	ldr	r3, [pc, #40]	; (8004a00 <HAL_Delay+0x44>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	461a      	mov	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80049e2:	bf00      	nop
 80049e4:	f7ff ffe0 	bl	80049a8 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d8f7      	bhi.n	80049e4 <HAL_Delay+0x28>
  {
  }
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	20000010 	.word	0x20000010

08004a04 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e0ce      	b.n	8004bc4 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d109      	bne.n	8004a48 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7ff fd84 	bl	8004550 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fbc3 	bl	80051d4 <ADC_ConversionStop_Disable>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f040 80a9 	bne.w	8004bb2 <HAL_ADC_Init+0x1ae>
 8004a60:	7dfb      	ldrb	r3, [r7, #23]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	f040 80a5 	bne.w	8004bb2 <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a70:	f023 0302 	bic.w	r3, r3, #2
 8004a74:	f043 0202 	orr.w	r2, r3, #2
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4951      	ldr	r1, [pc, #324]	; (8004bcc <HAL_ADC_Init+0x1c8>)
 8004a86:	428b      	cmp	r3, r1
 8004a88:	d10a      	bne.n	8004aa0 <HAL_ADC_Init+0x9c>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004a92:	d002      	beq.n	8004a9a <HAL_ADC_Init+0x96>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	e004      	b.n	8004aa4 <HAL_ADC_Init+0xa0>
 8004a9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004a9e:	e001      	b.n	8004aa4 <HAL_ADC_Init+0xa0>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004aa4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	7b1b      	ldrb	r3, [r3, #12]
 8004aaa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8004aac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8004aae:	68ba      	ldr	r2, [r7, #8]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004abc:	d003      	beq.n	8004ac6 <HAL_ADC_Init+0xc2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d102      	bne.n	8004acc <HAL_ADC_Init+0xc8>
 8004ac6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004aca:	e000      	b.n	8004ace <HAL_ADC_Init+0xca>
 8004acc:	2300      	movs	r3, #0
 8004ace:	693a      	ldr	r2, [r7, #16]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	7d1b      	ldrb	r3, [r3, #20]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d119      	bne.n	8004b10 <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	7b1b      	ldrb	r3, [r3, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d109      	bne.n	8004af8 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	035a      	lsls	r2, r3, #13
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004af4:	613b      	str	r3, [r7, #16]
 8004af6:	e00b      	b.n	8004b10 <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afc:	f043 0220 	orr.w	r2, r3, #32
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b08:	f043 0201 	orr.w	r2, r3, #1
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	4b29      	ldr	r3, [pc, #164]	; (8004bd0 <HAL_ADC_Init+0x1cc>)
 8004b2c:	4013      	ands	r3, r2
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6812      	ldr	r2, [r2, #0]
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	430b      	orrs	r3, r1
 8004b36:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b40:	d003      	beq.n	8004b4a <HAL_ADC_Init+0x146>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d104      	bne.n	8004b54 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	051b      	lsls	r3, r3, #20
 8004b52:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b5a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	430a      	orrs	r2, r1
 8004b66:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <HAL_ADC_Init+0x1d0>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d10b      	bne.n	8004b90 <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b82:	f023 0303 	bic.w	r3, r3, #3
 8004b86:	f043 0201 	orr.w	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004b8e:	e018      	b.n	8004bc2 <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b94:	f023 0312 	bic.w	r3, r3, #18
 8004b98:	f043 0210 	orr.w	r2, r3, #16
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba4:	f043 0201 	orr.w	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8004bac:	2301      	movs	r3, #1
 8004bae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004bb0:	e007      	b.n	8004bc2 <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb6:	f043 0210 	orr.w	r2, r3, #16
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40013c00 	.word	0x40013c00
 8004bd0:	ffe1f7fd 	.word	0xffe1f7fd
 8004bd4:	ff1f0efe 	.word	0xff1f0efe

08004bd8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004be0:	2300      	movs	r3, #0
 8004be2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d101      	bne.n	8004bf2 <HAL_ADC_Start+0x1a>
 8004bee:	2302      	movs	r3, #2
 8004bf0:	e098      	b.n	8004d24 <HAL_ADC_Start+0x14c>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fa98 	bl	8005130 <ADC_Enable>
 8004c00:	4603      	mov	r3, r0
 8004c02:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f040 8087 	bne.w	8004d1a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a41      	ldr	r2, [pc, #260]	; (8004d2c <HAL_ADC_Start+0x154>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d105      	bne.n	8004c36 <HAL_ADC_Start+0x5e>
 8004c2a:	4b41      	ldr	r3, [pc, #260]	; (8004d30 <HAL_ADC_Start+0x158>)
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d115      	bne.n	8004c62 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d026      	beq.n	8004c9e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004c60:	e01d      	b.n	8004c9e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a2f      	ldr	r2, [pc, #188]	; (8004d30 <HAL_ADC_Start+0x158>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <HAL_ADC_Start+0xaa>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a2b      	ldr	r2, [pc, #172]	; (8004d2c <HAL_ADC_Start+0x154>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d10d      	bne.n	8004c9e <HAL_ADC_Start+0xc6>
 8004c82:	4b2b      	ldr	r3, [pc, #172]	; (8004d30 <HAL_ADC_Start+0x158>)
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d006      	beq.n	8004cb8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cae:	f023 0206 	bic.w	r2, r3, #6
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004cb6:	e002      	b.n	8004cbe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f06f 0202 	mvn.w	r2, #2
 8004cce:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004cda:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004cde:	d113      	bne.n	8004d08 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004ce4:	4a11      	ldr	r2, [pc, #68]	; (8004d2c <HAL_ADC_Start+0x154>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d105      	bne.n	8004cf6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004cea:	4b11      	ldr	r3, [pc, #68]	; (8004d30 <HAL_ADC_Start+0x158>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d108      	bne.n	8004d08 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004d04:	609a      	str	r2, [r3, #8]
 8004d06:	e00c      	b.n	8004d22 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004d16:	609a      	str	r2, [r3, #8]
 8004d18:	e003      	b.n	8004d22 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40012800 	.word	0x40012800
 8004d30:	40012400 	.word	0x40012400

08004d34 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004d34:	b590      	push	{r4, r7, lr}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004d4a:	f7ff fe2d 	bl	80049a8 <HAL_GetTick>
 8004d4e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	f043 0220 	orr.w	r2, r3, #32
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e0c8      	b.n	8004f08 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d12a      	bne.n	8004dda <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d123      	bne.n	8004dda <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004d92:	e01a      	b.n	8004dca <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d9a:	d016      	beq.n	8004dca <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <HAL_ADC_PollForConversion+0x7e>
 8004da2:	f7ff fe01 	bl	80049a8 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	683a      	ldr	r2, [r7, #0]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d20b      	bcs.n	8004dca <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db6:	f043 0204 	orr.w	r2, r3, #4
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e09e      	b.n	8004f08 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0302 	and.w	r3, r3, #2
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0dd      	beq.n	8004d94 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004dd8:	e06c      	b.n	8004eb4 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004dda:	4b4d      	ldr	r3, [pc, #308]	; (8004f10 <HAL_ADC_PollForConversion+0x1dc>)
 8004ddc:	681c      	ldr	r4, [r3, #0]
 8004dde:	2002      	movs	r0, #2
 8004de0:	f001 f992 	bl	8006108 <HAL_RCCEx_GetPeriphCLKFreq>
 8004de4:	4603      	mov	r3, r0
 8004de6:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	6919      	ldr	r1, [r3, #16]
 8004df0:	4b48      	ldr	r3, [pc, #288]	; (8004f14 <HAL_ADC_PollForConversion+0x1e0>)
 8004df2:	400b      	ands	r3, r1
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d118      	bne.n	8004e2a <HAL_ADC_PollForConversion+0xf6>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68d9      	ldr	r1, [r3, #12]
 8004dfe:	4b46      	ldr	r3, [pc, #280]	; (8004f18 <HAL_ADC_PollForConversion+0x1e4>)
 8004e00:	400b      	ands	r3, r1
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d111      	bne.n	8004e2a <HAL_ADC_PollForConversion+0xf6>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6919      	ldr	r1, [r3, #16]
 8004e0c:	4b43      	ldr	r3, [pc, #268]	; (8004f1c <HAL_ADC_PollForConversion+0x1e8>)
 8004e0e:	400b      	ands	r3, r1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d108      	bne.n	8004e26 <HAL_ADC_PollForConversion+0xf2>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68d9      	ldr	r1, [r3, #12]
 8004e1a:	4b41      	ldr	r3, [pc, #260]	; (8004f20 <HAL_ADC_PollForConversion+0x1ec>)
 8004e1c:	400b      	ands	r3, r1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_ADC_PollForConversion+0xf2>
 8004e22:	2314      	movs	r3, #20
 8004e24:	e020      	b.n	8004e68 <HAL_ADC_PollForConversion+0x134>
 8004e26:	2329      	movs	r3, #41	; 0x29
 8004e28:	e01e      	b.n	8004e68 <HAL_ADC_PollForConversion+0x134>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6919      	ldr	r1, [r3, #16]
 8004e30:	4b3a      	ldr	r3, [pc, #232]	; (8004f1c <HAL_ADC_PollForConversion+0x1e8>)
 8004e32:	400b      	ands	r3, r1
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <HAL_ADC_PollForConversion+0x112>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68d9      	ldr	r1, [r3, #12]
 8004e3e:	4b38      	ldr	r3, [pc, #224]	; (8004f20 <HAL_ADC_PollForConversion+0x1ec>)
 8004e40:	400b      	ands	r3, r1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00d      	beq.n	8004e62 <HAL_ADC_PollForConversion+0x12e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6919      	ldr	r1, [r3, #16]
 8004e4c:	4b35      	ldr	r3, [pc, #212]	; (8004f24 <HAL_ADC_PollForConversion+0x1f0>)
 8004e4e:	400b      	ands	r3, r1
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d108      	bne.n	8004e66 <HAL_ADC_PollForConversion+0x132>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68d9      	ldr	r1, [r3, #12]
 8004e5a:	4b32      	ldr	r3, [pc, #200]	; (8004f24 <HAL_ADC_PollForConversion+0x1f0>)
 8004e5c:	400b      	ands	r3, r1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_ADC_PollForConversion+0x132>
 8004e62:	2354      	movs	r3, #84	; 0x54
 8004e64:	e000      	b.n	8004e68 <HAL_ADC_PollForConversion+0x134>
 8004e66:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004e68:	fb02 f303 	mul.w	r3, r2, r3
 8004e6c:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004e6e:	e01d      	b.n	8004eac <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e76:	d016      	beq.n	8004ea6 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d007      	beq.n	8004e8e <HAL_ADC_PollForConversion+0x15a>
 8004e7e:	f7ff fd93 	bl	80049a8 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d20b      	bcs.n	8004ea6 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e92:	f043 0204 	orr.w	r2, r3, #4
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e030      	b.n	8004f08 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	3301      	adds	r3, #1
 8004eaa:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d8dd      	bhi.n	8004e70 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0212 	mvn.w	r2, #18
 8004ebc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ec2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004ed4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004ed8:	d115      	bne.n	8004f06 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d111      	bne.n	8004f06 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d105      	bne.n	8004f06 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	f043 0201 	orr.w	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	371c      	adds	r7, #28
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd90      	pop	{r4, r7, pc}
 8004f10:	20000008 	.word	0x20000008
 8004f14:	24924924 	.word	0x24924924
 8004f18:	00924924 	.word	0x00924924
 8004f1c:	12492492 	.word	0x12492492
 8004f20:	00492492 	.word	0x00492492
 8004f24:	00249249 	.word	0x00249249

08004f28 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr

08004f40 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x20>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e0dc      	b.n	800511a <HAL_ADC_ConfigChannel+0x1da>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	2b06      	cmp	r3, #6
 8004f6e:	d81c      	bhi.n	8004faa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	685a      	ldr	r2, [r3, #4]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	4413      	add	r3, r2
 8004f80:	3b05      	subs	r3, #5
 8004f82:	221f      	movs	r2, #31
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	4019      	ands	r1, r3
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	6818      	ldr	r0, [r3, #0]
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	3b05      	subs	r3, #5
 8004f9c:	fa00 f203 	lsl.w	r2, r0, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	430a      	orrs	r2, r1
 8004fa6:	635a      	str	r2, [r3, #52]	; 0x34
 8004fa8:	e03c      	b.n	8005024 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b0c      	cmp	r3, #12
 8004fb0:	d81c      	bhi.n	8004fec <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	4413      	add	r3, r2
 8004fc2:	3b23      	subs	r3, #35	; 0x23
 8004fc4:	221f      	movs	r2, #31
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	4019      	ands	r1, r3
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	3b23      	subs	r3, #35	; 0x23
 8004fde:	fa00 f203 	lsl.w	r2, r0, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	631a      	str	r2, [r3, #48]	; 0x30
 8004fea:	e01b      	b.n	8005024 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	3b41      	subs	r3, #65	; 0x41
 8004ffe:	221f      	movs	r2, #31
 8005000:	fa02 f303 	lsl.w	r3, r2, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	4019      	ands	r1, r3
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	4613      	mov	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	4413      	add	r3, r2
 8005016:	3b41      	subs	r3, #65	; 0x41
 8005018:	fa00 f203 	lsl.w	r2, r0, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b09      	cmp	r3, #9
 800502a:	d91c      	bls.n	8005066 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68d9      	ldr	r1, [r3, #12]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4613      	mov	r3, r2
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	4413      	add	r3, r2
 800503c:	3b1e      	subs	r3, #30
 800503e:	2207      	movs	r2, #7
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	43db      	mvns	r3, r3
 8005046:	4019      	ands	r1, r3
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	6898      	ldr	r0, [r3, #8]
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	4613      	mov	r3, r2
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	4413      	add	r3, r2
 8005056:	3b1e      	subs	r3, #30
 8005058:	fa00 f203 	lsl.w	r2, r0, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	60da      	str	r2, [r3, #12]
 8005064:	e019      	b.n	800509a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6919      	ldr	r1, [r3, #16]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	4613      	mov	r3, r2
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	4413      	add	r3, r2
 8005076:	2207      	movs	r2, #7
 8005078:	fa02 f303 	lsl.w	r3, r2, r3
 800507c:	43db      	mvns	r3, r3
 800507e:	4019      	ands	r1, r3
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	6898      	ldr	r0, [r3, #8]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	4613      	mov	r3, r2
 800508a:	005b      	lsls	r3, r3, #1
 800508c:	4413      	add	r3, r2
 800508e:	fa00 f203 	lsl.w	r2, r0, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b10      	cmp	r3, #16
 80050a0:	d003      	beq.n	80050aa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80050a6:	2b11      	cmp	r3, #17
 80050a8:	d132      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a1d      	ldr	r2, [pc, #116]	; (8005124 <HAL_ADC_ConfigChannel+0x1e4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d125      	bne.n	8005100 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d126      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80050d0:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2b10      	cmp	r3, #16
 80050d8:	d11a      	bne.n	8005110 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80050da:	4b13      	ldr	r3, [pc, #76]	; (8005128 <HAL_ADC_ConfigChannel+0x1e8>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a13      	ldr	r2, [pc, #76]	; (800512c <HAL_ADC_ConfigChannel+0x1ec>)
 80050e0:	fba2 2303 	umull	r2, r3, r2, r3
 80050e4:	0c9a      	lsrs	r2, r3, #18
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	005b      	lsls	r3, r3, #1
 80050ee:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80050f0:	e002      	b.n	80050f8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1f9      	bne.n	80050f2 <HAL_ADC_ConfigChannel+0x1b2>
 80050fe:	e007      	b.n	8005110 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	f043 0220 	orr.w	r2, r3, #32
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8005118:	7bfb      	ldrb	r3, [r7, #15]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr
 8005124:	40012400 	.word	0x40012400
 8005128:	20000008 	.word	0x20000008
 800512c:	431bde83 	.word	0x431bde83

08005130 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 0301 	and.w	r3, r3, #1
 800514a:	2b01      	cmp	r3, #1
 800514c:	d039      	beq.n	80051c2 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f042 0201 	orr.w	r2, r2, #1
 800515c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800515e:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <ADC_Enable+0x9c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a1b      	ldr	r2, [pc, #108]	; (80051d0 <ADC_Enable+0xa0>)
 8005164:	fba2 2303 	umull	r2, r3, r2, r3
 8005168:	0c9b      	lsrs	r3, r3, #18
 800516a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800516c:	e002      	b.n	8005174 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	3b01      	subs	r3, #1
 8005172:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1f9      	bne.n	800516e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800517a:	f7ff fc15 	bl	80049a8 <HAL_GetTick>
 800517e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005180:	e018      	b.n	80051b4 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005182:	f7ff fc11 	bl	80049a8 <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d911      	bls.n	80051b4 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005194:	f043 0210 	orr.w	r2, r3, #16
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051a0:	f043 0201 	orr.w	r2, r3, #1
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e007      	b.n	80051c4 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f003 0301 	and.w	r3, r3, #1
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d1df      	bne.n	8005182 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80051c2:	2300      	movs	r3, #0
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3710      	adds	r7, #16
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	20000008 	.word	0x20000008
 80051d0:	431bde83 	.word	0x431bde83

080051d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d127      	bne.n	800523e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689a      	ldr	r2, [r3, #8]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 0201 	bic.w	r2, r2, #1
 80051fc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80051fe:	f7ff fbd3 	bl	80049a8 <HAL_GetTick>
 8005202:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005204:	e014      	b.n	8005230 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005206:	f7ff fbcf 	bl	80049a8 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	2b02      	cmp	r3, #2
 8005212:	d90d      	bls.n	8005230 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005218:	f043 0210 	orr.w	r2, r3, #16
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005224:	f043 0201 	orr.w	r2, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e007      	b.n	8005240 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b01      	cmp	r3, #1
 800523c:	d0e3      	beq.n	8005206 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005258:	4b0c      	ldr	r3, [pc, #48]	; (800528c <__NVIC_SetPriorityGrouping+0x44>)
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005264:	4013      	ands	r3, r2
 8005266:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005270:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005278:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800527a:	4a04      	ldr	r2, [pc, #16]	; (800528c <__NVIC_SetPriorityGrouping+0x44>)
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	60d3      	str	r3, [r2, #12]
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	bc80      	pop	{r7}
 8005288:	4770      	bx	lr
 800528a:	bf00      	nop
 800528c:	e000ed00 	.word	0xe000ed00

08005290 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005290:	b480      	push	{r7}
 8005292:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <__NVIC_GetPriorityGrouping+0x18>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	0a1b      	lsrs	r3, r3, #8
 800529a:	f003 0307 	and.w	r3, r3, #7
}
 800529e:	4618      	mov	r0, r3
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bc80      	pop	{r7}
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	e000ed00 	.word	0xe000ed00

080052ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	6039      	str	r1, [r7, #0]
 80052b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	db0a      	blt.n	80052d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	b2da      	uxtb	r2, r3
 80052c4:	490c      	ldr	r1, [pc, #48]	; (80052f8 <__NVIC_SetPriority+0x4c>)
 80052c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052ca:	0112      	lsls	r2, r2, #4
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	440b      	add	r3, r1
 80052d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80052d4:	e00a      	b.n	80052ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	4908      	ldr	r1, [pc, #32]	; (80052fc <__NVIC_SetPriority+0x50>)
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	f003 030f 	and.w	r3, r3, #15
 80052e2:	3b04      	subs	r3, #4
 80052e4:	0112      	lsls	r2, r2, #4
 80052e6:	b2d2      	uxtb	r2, r2
 80052e8:	440b      	add	r3, r1
 80052ea:	761a      	strb	r2, [r3, #24]
}
 80052ec:	bf00      	nop
 80052ee:	370c      	adds	r7, #12
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bc80      	pop	{r7}
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	e000e100 	.word	0xe000e100
 80052fc:	e000ed00 	.word	0xe000ed00

08005300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005300:	b480      	push	{r7}
 8005302:	b089      	sub	sp, #36	; 0x24
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f1c3 0307 	rsb	r3, r3, #7
 800531a:	2b04      	cmp	r3, #4
 800531c:	bf28      	it	cs
 800531e:	2304      	movcs	r3, #4
 8005320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	3304      	adds	r3, #4
 8005326:	2b06      	cmp	r3, #6
 8005328:	d902      	bls.n	8005330 <NVIC_EncodePriority+0x30>
 800532a:	69fb      	ldr	r3, [r7, #28]
 800532c:	3b03      	subs	r3, #3
 800532e:	e000      	b.n	8005332 <NVIC_EncodePriority+0x32>
 8005330:	2300      	movs	r3, #0
 8005332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005334:	f04f 32ff 	mov.w	r2, #4294967295
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	fa02 f303 	lsl.w	r3, r2, r3
 800533e:	43da      	mvns	r2, r3
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	401a      	ands	r2, r3
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005348:	f04f 31ff 	mov.w	r1, #4294967295
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	fa01 f303 	lsl.w	r3, r1, r3
 8005352:	43d9      	mvns	r1, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005358:	4313      	orrs	r3, r2
         );
}
 800535a:	4618      	mov	r0, r3
 800535c:	3724      	adds	r7, #36	; 0x24
 800535e:	46bd      	mov	sp, r7
 8005360:	bc80      	pop	{r7}
 8005362:	4770      	bx	lr

08005364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	3b01      	subs	r3, #1
 8005370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005374:	d301      	bcc.n	800537a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005376:	2301      	movs	r3, #1
 8005378:	e00f      	b.n	800539a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800537a:	4a0a      	ldr	r2, [pc, #40]	; (80053a4 <SysTick_Config+0x40>)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3b01      	subs	r3, #1
 8005380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005382:	210f      	movs	r1, #15
 8005384:	f04f 30ff 	mov.w	r0, #4294967295
 8005388:	f7ff ff90 	bl	80052ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800538c:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <SysTick_Config+0x40>)
 800538e:	2200      	movs	r2, #0
 8005390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005392:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <SysTick_Config+0x40>)
 8005394:	2207      	movs	r2, #7
 8005396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	e000e010 	.word	0xe000e010

080053a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b082      	sub	sp, #8
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff ff49 	bl	8005248 <__NVIC_SetPriorityGrouping>
}
 80053b6:	bf00      	nop
 80053b8:	3708      	adds	r7, #8
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80053be:	b580      	push	{r7, lr}
 80053c0:	b086      	sub	sp, #24
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	4603      	mov	r3, r0
 80053c6:	60b9      	str	r1, [r7, #8]
 80053c8:	607a      	str	r2, [r7, #4]
 80053ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80053d0:	f7ff ff5e 	bl	8005290 <__NVIC_GetPriorityGrouping>
 80053d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	68b9      	ldr	r1, [r7, #8]
 80053da:	6978      	ldr	r0, [r7, #20]
 80053dc:	f7ff ff90 	bl	8005300 <NVIC_EncodePriority>
 80053e0:	4602      	mov	r2, r0
 80053e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053e6:	4611      	mov	r1, r2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7ff ff5f 	bl	80052ac <__NVIC_SetPriority>
}
 80053ee:	bf00      	nop
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}

080053f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80053f6:	b580      	push	{r7, lr}
 80053f8:	b082      	sub	sp, #8
 80053fa:	af00      	add	r7, sp, #0
 80053fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7ff ffb0 	bl	8005364 <SysTick_Config>
 8005404:	4603      	mov	r3, r0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3708      	adds	r7, #8
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
	...

08005410 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005410:	b480      	push	{r7}
 8005412:	b08b      	sub	sp, #44	; 0x2c
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800541a:	2300      	movs	r3, #0
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800541e:	2300      	movs	r3, #0
 8005420:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005422:	e179      	b.n	8005718 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005424:	2201      	movs	r2, #1
 8005426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005428:	fa02 f303 	lsl.w	r3, r2, r3
 800542c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69fa      	ldr	r2, [r7, #28]
 8005434:	4013      	ands	r3, r2
 8005436:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	429a      	cmp	r2, r3
 800543e:	f040 8168 	bne.w	8005712 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	4aa0      	ldr	r2, [pc, #640]	; (80056c8 <HAL_GPIO_Init+0x2b8>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d05e      	beq.n	800550a <HAL_GPIO_Init+0xfa>
 800544c:	4a9e      	ldr	r2, [pc, #632]	; (80056c8 <HAL_GPIO_Init+0x2b8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d875      	bhi.n	800553e <HAL_GPIO_Init+0x12e>
 8005452:	4a9e      	ldr	r2, [pc, #632]	; (80056cc <HAL_GPIO_Init+0x2bc>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d058      	beq.n	800550a <HAL_GPIO_Init+0xfa>
 8005458:	4a9c      	ldr	r2, [pc, #624]	; (80056cc <HAL_GPIO_Init+0x2bc>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d86f      	bhi.n	800553e <HAL_GPIO_Init+0x12e>
 800545e:	4a9c      	ldr	r2, [pc, #624]	; (80056d0 <HAL_GPIO_Init+0x2c0>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d052      	beq.n	800550a <HAL_GPIO_Init+0xfa>
 8005464:	4a9a      	ldr	r2, [pc, #616]	; (80056d0 <HAL_GPIO_Init+0x2c0>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d869      	bhi.n	800553e <HAL_GPIO_Init+0x12e>
 800546a:	4a9a      	ldr	r2, [pc, #616]	; (80056d4 <HAL_GPIO_Init+0x2c4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d04c      	beq.n	800550a <HAL_GPIO_Init+0xfa>
 8005470:	4a98      	ldr	r2, [pc, #608]	; (80056d4 <HAL_GPIO_Init+0x2c4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d863      	bhi.n	800553e <HAL_GPIO_Init+0x12e>
 8005476:	4a98      	ldr	r2, [pc, #608]	; (80056d8 <HAL_GPIO_Init+0x2c8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d046      	beq.n	800550a <HAL_GPIO_Init+0xfa>
 800547c:	4a96      	ldr	r2, [pc, #600]	; (80056d8 <HAL_GPIO_Init+0x2c8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d85d      	bhi.n	800553e <HAL_GPIO_Init+0x12e>
 8005482:	2b12      	cmp	r3, #18
 8005484:	d82a      	bhi.n	80054dc <HAL_GPIO_Init+0xcc>
 8005486:	2b12      	cmp	r3, #18
 8005488:	d859      	bhi.n	800553e <HAL_GPIO_Init+0x12e>
 800548a:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <HAL_GPIO_Init+0x80>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	0800550b 	.word	0x0800550b
 8005494:	080054e5 	.word	0x080054e5
 8005498:	080054f7 	.word	0x080054f7
 800549c:	08005539 	.word	0x08005539
 80054a0:	0800553f 	.word	0x0800553f
 80054a4:	0800553f 	.word	0x0800553f
 80054a8:	0800553f 	.word	0x0800553f
 80054ac:	0800553f 	.word	0x0800553f
 80054b0:	0800553f 	.word	0x0800553f
 80054b4:	0800553f 	.word	0x0800553f
 80054b8:	0800553f 	.word	0x0800553f
 80054bc:	0800553f 	.word	0x0800553f
 80054c0:	0800553f 	.word	0x0800553f
 80054c4:	0800553f 	.word	0x0800553f
 80054c8:	0800553f 	.word	0x0800553f
 80054cc:	0800553f 	.word	0x0800553f
 80054d0:	0800553f 	.word	0x0800553f
 80054d4:	080054ed 	.word	0x080054ed
 80054d8:	08005501 	.word	0x08005501
 80054dc:	4a7f      	ldr	r2, [pc, #508]	; (80056dc <HAL_GPIO_Init+0x2cc>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d013      	beq.n	800550a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80054e2:	e02c      	b.n	800553e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	623b      	str	r3, [r7, #32]
          break;
 80054ea:	e029      	b.n	8005540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	3304      	adds	r3, #4
 80054f2:	623b      	str	r3, [r7, #32]
          break;
 80054f4:	e024      	b.n	8005540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	3308      	adds	r3, #8
 80054fc:	623b      	str	r3, [r7, #32]
          break;
 80054fe:	e01f      	b.n	8005540 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	330c      	adds	r3, #12
 8005506:	623b      	str	r3, [r7, #32]
          break;
 8005508:	e01a      	b.n	8005540 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d102      	bne.n	8005518 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005512:	2304      	movs	r3, #4
 8005514:	623b      	str	r3, [r7, #32]
          break;
 8005516:	e013      	b.n	8005540 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	2b01      	cmp	r3, #1
 800551e:	d105      	bne.n	800552c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005520:	2308      	movs	r3, #8
 8005522:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	611a      	str	r2, [r3, #16]
          break;
 800552a:	e009      	b.n	8005540 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800552c:	2308      	movs	r3, #8
 800552e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	615a      	str	r2, [r3, #20]
          break;
 8005536:	e003      	b.n	8005540 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005538:	2300      	movs	r3, #0
 800553a:	623b      	str	r3, [r7, #32]
          break;
 800553c:	e000      	b.n	8005540 <HAL_GPIO_Init+0x130>
          break;
 800553e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2bff      	cmp	r3, #255	; 0xff
 8005544:	d801      	bhi.n	800554a <HAL_GPIO_Init+0x13a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	e001      	b.n	800554e <HAL_GPIO_Init+0x13e>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3304      	adds	r3, #4
 800554e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2bff      	cmp	r3, #255	; 0xff
 8005554:	d802      	bhi.n	800555c <HAL_GPIO_Init+0x14c>
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	e002      	b.n	8005562 <HAL_GPIO_Init+0x152>
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	3b08      	subs	r3, #8
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	210f      	movs	r1, #15
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	fa01 f303 	lsl.w	r3, r1, r3
 8005570:	43db      	mvns	r3, r3
 8005572:	401a      	ands	r2, r3
 8005574:	6a39      	ldr	r1, [r7, #32]
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	fa01 f303 	lsl.w	r3, r1, r3
 800557c:	431a      	orrs	r2, r3
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 80c1 	beq.w	8005712 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005590:	4b53      	ldr	r3, [pc, #332]	; (80056e0 <HAL_GPIO_Init+0x2d0>)
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	4a52      	ldr	r2, [pc, #328]	; (80056e0 <HAL_GPIO_Init+0x2d0>)
 8005596:	f043 0301 	orr.w	r3, r3, #1
 800559a:	6193      	str	r3, [r2, #24]
 800559c:	4b50      	ldr	r3, [pc, #320]	; (80056e0 <HAL_GPIO_Init+0x2d0>)
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	f003 0301 	and.w	r3, r3, #1
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80055a8:	4a4e      	ldr	r2, [pc, #312]	; (80056e4 <HAL_GPIO_Init+0x2d4>)
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	089b      	lsrs	r3, r3, #2
 80055ae:	3302      	adds	r3, #2
 80055b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80055b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b8:	f003 0303 	and.w	r3, r3, #3
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	220f      	movs	r2, #15
 80055c0:	fa02 f303 	lsl.w	r3, r2, r3
 80055c4:	43db      	mvns	r3, r3
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	4013      	ands	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a46      	ldr	r2, [pc, #280]	; (80056e8 <HAL_GPIO_Init+0x2d8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d01f      	beq.n	8005614 <HAL_GPIO_Init+0x204>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a45      	ldr	r2, [pc, #276]	; (80056ec <HAL_GPIO_Init+0x2dc>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d019      	beq.n	8005610 <HAL_GPIO_Init+0x200>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a44      	ldr	r2, [pc, #272]	; (80056f0 <HAL_GPIO_Init+0x2e0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <HAL_GPIO_Init+0x1fc>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a43      	ldr	r2, [pc, #268]	; (80056f4 <HAL_GPIO_Init+0x2e4>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00d      	beq.n	8005608 <HAL_GPIO_Init+0x1f8>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a42      	ldr	r2, [pc, #264]	; (80056f8 <HAL_GPIO_Init+0x2e8>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d007      	beq.n	8005604 <HAL_GPIO_Init+0x1f4>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a41      	ldr	r2, [pc, #260]	; (80056fc <HAL_GPIO_Init+0x2ec>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d101      	bne.n	8005600 <HAL_GPIO_Init+0x1f0>
 80055fc:	2305      	movs	r3, #5
 80055fe:	e00a      	b.n	8005616 <HAL_GPIO_Init+0x206>
 8005600:	2306      	movs	r3, #6
 8005602:	e008      	b.n	8005616 <HAL_GPIO_Init+0x206>
 8005604:	2304      	movs	r3, #4
 8005606:	e006      	b.n	8005616 <HAL_GPIO_Init+0x206>
 8005608:	2303      	movs	r3, #3
 800560a:	e004      	b.n	8005616 <HAL_GPIO_Init+0x206>
 800560c:	2302      	movs	r3, #2
 800560e:	e002      	b.n	8005616 <HAL_GPIO_Init+0x206>
 8005610:	2301      	movs	r3, #1
 8005612:	e000      	b.n	8005616 <HAL_GPIO_Init+0x206>
 8005614:	2300      	movs	r3, #0
 8005616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005618:	f002 0203 	and.w	r2, r2, #3
 800561c:	0092      	lsls	r2, r2, #2
 800561e:	4093      	lsls	r3, r2
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005626:	492f      	ldr	r1, [pc, #188]	; (80056e4 <HAL_GPIO_Init+0x2d4>)
 8005628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800562a:	089b      	lsrs	r3, r3, #2
 800562c:	3302      	adds	r3, #2
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d006      	beq.n	800564e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005640:	4b2f      	ldr	r3, [pc, #188]	; (8005700 <HAL_GPIO_Init+0x2f0>)
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	492e      	ldr	r1, [pc, #184]	; (8005700 <HAL_GPIO_Init+0x2f0>)
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	4313      	orrs	r3, r2
 800564a:	600b      	str	r3, [r1, #0]
 800564c:	e006      	b.n	800565c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800564e:	4b2c      	ldr	r3, [pc, #176]	; (8005700 <HAL_GPIO_Init+0x2f0>)
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	43db      	mvns	r3, r3
 8005656:	492a      	ldr	r1, [pc, #168]	; (8005700 <HAL_GPIO_Init+0x2f0>)
 8005658:	4013      	ands	r3, r2
 800565a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d006      	beq.n	8005676 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005668:	4b25      	ldr	r3, [pc, #148]	; (8005700 <HAL_GPIO_Init+0x2f0>)
 800566a:	685a      	ldr	r2, [r3, #4]
 800566c:	4924      	ldr	r1, [pc, #144]	; (8005700 <HAL_GPIO_Init+0x2f0>)
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	4313      	orrs	r3, r2
 8005672:	604b      	str	r3, [r1, #4]
 8005674:	e006      	b.n	8005684 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005676:	4b22      	ldr	r3, [pc, #136]	; (8005700 <HAL_GPIO_Init+0x2f0>)
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	43db      	mvns	r3, r3
 800567e:	4920      	ldr	r1, [pc, #128]	; (8005700 <HAL_GPIO_Init+0x2f0>)
 8005680:	4013      	ands	r3, r2
 8005682:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d006      	beq.n	800569e <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005690:	4b1b      	ldr	r3, [pc, #108]	; (8005700 <HAL_GPIO_Init+0x2f0>)
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	491a      	ldr	r1, [pc, #104]	; (8005700 <HAL_GPIO_Init+0x2f0>)
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	4313      	orrs	r3, r2
 800569a:	608b      	str	r3, [r1, #8]
 800569c:	e006      	b.n	80056ac <HAL_GPIO_Init+0x29c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800569e:	4b18      	ldr	r3, [pc, #96]	; (8005700 <HAL_GPIO_Init+0x2f0>)
 80056a0:	689a      	ldr	r2, [r3, #8]
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	43db      	mvns	r3, r3
 80056a6:	4916      	ldr	r1, [pc, #88]	; (8005700 <HAL_GPIO_Init+0x2f0>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d025      	beq.n	8005704 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80056b8:	4b11      	ldr	r3, [pc, #68]	; (8005700 <HAL_GPIO_Init+0x2f0>)
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	4910      	ldr	r1, [pc, #64]	; (8005700 <HAL_GPIO_Init+0x2f0>)
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	60cb      	str	r3, [r1, #12]
 80056c4:	e025      	b.n	8005712 <HAL_GPIO_Init+0x302>
 80056c6:	bf00      	nop
 80056c8:	10320000 	.word	0x10320000
 80056cc:	10310000 	.word	0x10310000
 80056d0:	10220000 	.word	0x10220000
 80056d4:	10210000 	.word	0x10210000
 80056d8:	10120000 	.word	0x10120000
 80056dc:	10110000 	.word	0x10110000
 80056e0:	40021000 	.word	0x40021000
 80056e4:	40010000 	.word	0x40010000
 80056e8:	40010800 	.word	0x40010800
 80056ec:	40010c00 	.word	0x40010c00
 80056f0:	40011000 	.word	0x40011000
 80056f4:	40011400 	.word	0x40011400
 80056f8:	40011800 	.word	0x40011800
 80056fc:	40011c00 	.word	0x40011c00
 8005700:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005704:	4b0b      	ldr	r3, [pc, #44]	; (8005734 <HAL_GPIO_Init+0x324>)
 8005706:	68da      	ldr	r2, [r3, #12]
 8005708:	69bb      	ldr	r3, [r7, #24]
 800570a:	43db      	mvns	r3, r3
 800570c:	4909      	ldr	r1, [pc, #36]	; (8005734 <HAL_GPIO_Init+0x324>)
 800570e:	4013      	ands	r3, r2
 8005710:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005714:	3301      	adds	r3, #1
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571e:	fa22 f303 	lsr.w	r3, r2, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	f47f ae7e 	bne.w	8005424 <HAL_GPIO_Init+0x14>
  }
}
 8005728:	bf00      	nop
 800572a:	bf00      	nop
 800572c:	372c      	adds	r7, #44	; 0x2c
 800572e:	46bd      	mov	sp, r7
 8005730:	bc80      	pop	{r7}
 8005732:	4770      	bx	lr
 8005734:	40010400 	.word	0x40010400

08005738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	460b      	mov	r3, r1
 8005742:	807b      	strh	r3, [r7, #2]
 8005744:	4613      	mov	r3, r2
 8005746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005748:	787b      	ldrb	r3, [r7, #1]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d003      	beq.n	8005756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800574e:	887a      	ldrh	r2, [r7, #2]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005754:	e003      	b.n	800575e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005756:	887b      	ldrh	r3, [r7, #2]
 8005758:	041a      	lsls	r2, r3, #16
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	611a      	str	r2, [r3, #16]
}
 800575e:	bf00      	nop
 8005760:	370c      	adds	r7, #12
 8005762:	46bd      	mov	sp, r7
 8005764:	bc80      	pop	{r7}
 8005766:	4770      	bx	lr

08005768 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e26c      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 8087 	beq.w	8005896 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005788:	4b92      	ldr	r3, [pc, #584]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	f003 030c 	and.w	r3, r3, #12
 8005790:	2b04      	cmp	r3, #4
 8005792:	d00c      	beq.n	80057ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005794:	4b8f      	ldr	r3, [pc, #572]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f003 030c 	and.w	r3, r3, #12
 800579c:	2b08      	cmp	r3, #8
 800579e:	d112      	bne.n	80057c6 <HAL_RCC_OscConfig+0x5e>
 80057a0:	4b8c      	ldr	r3, [pc, #560]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ac:	d10b      	bne.n	80057c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057ae:	4b89      	ldr	r3, [pc, #548]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d06c      	beq.n	8005894 <HAL_RCC_OscConfig+0x12c>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d168      	bne.n	8005894 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e246      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057ce:	d106      	bne.n	80057de <HAL_RCC_OscConfig+0x76>
 80057d0:	4b80      	ldr	r3, [pc, #512]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a7f      	ldr	r2, [pc, #508]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 80057d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057da:	6013      	str	r3, [r2, #0]
 80057dc:	e02e      	b.n	800583c <HAL_RCC_OscConfig+0xd4>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d10c      	bne.n	8005800 <HAL_RCC_OscConfig+0x98>
 80057e6:	4b7b      	ldr	r3, [pc, #492]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a7a      	ldr	r2, [pc, #488]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 80057ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	4b78      	ldr	r3, [pc, #480]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a77      	ldr	r2, [pc, #476]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 80057f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	e01d      	b.n	800583c <HAL_RCC_OscConfig+0xd4>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005808:	d10c      	bne.n	8005824 <HAL_RCC_OscConfig+0xbc>
 800580a:	4b72      	ldr	r3, [pc, #456]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a71      	ldr	r2, [pc, #452]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 8005810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005814:	6013      	str	r3, [r2, #0]
 8005816:	4b6f      	ldr	r3, [pc, #444]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a6e      	ldr	r2, [pc, #440]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 800581c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005820:	6013      	str	r3, [r2, #0]
 8005822:	e00b      	b.n	800583c <HAL_RCC_OscConfig+0xd4>
 8005824:	4b6b      	ldr	r3, [pc, #428]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a6a      	ldr	r2, [pc, #424]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 800582a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	4b68      	ldr	r3, [pc, #416]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a67      	ldr	r2, [pc, #412]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 8005836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800583a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d013      	beq.n	800586c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005844:	f7ff f8b0 	bl	80049a8 <HAL_GetTick>
 8005848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800584a:	e008      	b.n	800585e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800584c:	f7ff f8ac 	bl	80049a8 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	2b64      	cmp	r3, #100	; 0x64
 8005858:	d901      	bls.n	800585e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e1fa      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585e:	4b5d      	ldr	r3, [pc, #372]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d0f0      	beq.n	800584c <HAL_RCC_OscConfig+0xe4>
 800586a:	e014      	b.n	8005896 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800586c:	f7ff f89c 	bl	80049a8 <HAL_GetTick>
 8005870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005872:	e008      	b.n	8005886 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005874:	f7ff f898 	bl	80049a8 <HAL_GetTick>
 8005878:	4602      	mov	r2, r0
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	2b64      	cmp	r3, #100	; 0x64
 8005880:	d901      	bls.n	8005886 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005882:	2303      	movs	r3, #3
 8005884:	e1e6      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005886:	4b53      	ldr	r3, [pc, #332]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1f0      	bne.n	8005874 <HAL_RCC_OscConfig+0x10c>
 8005892:	e000      	b.n	8005896 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d063      	beq.n	800596a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058a2:	4b4c      	ldr	r3, [pc, #304]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	f003 030c 	and.w	r3, r3, #12
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00b      	beq.n	80058c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80058ae:	4b49      	ldr	r3, [pc, #292]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	f003 030c 	and.w	r3, r3, #12
 80058b6:	2b08      	cmp	r3, #8
 80058b8:	d11c      	bne.n	80058f4 <HAL_RCC_OscConfig+0x18c>
 80058ba:	4b46      	ldr	r3, [pc, #280]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d116      	bne.n	80058f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058c6:	4b43      	ldr	r3, [pc, #268]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0302 	and.w	r3, r3, #2
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d005      	beq.n	80058de <HAL_RCC_OscConfig+0x176>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d001      	beq.n	80058de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e1ba      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058de:	4b3d      	ldr	r3, [pc, #244]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	4939      	ldr	r1, [pc, #228]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058f2:	e03a      	b.n	800596a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d020      	beq.n	800593e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058fc:	4b36      	ldr	r3, [pc, #216]	; (80059d8 <HAL_RCC_OscConfig+0x270>)
 80058fe:	2201      	movs	r2, #1
 8005900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005902:	f7ff f851 	bl	80049a8 <HAL_GetTick>
 8005906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005908:	e008      	b.n	800591c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800590a:	f7ff f84d 	bl	80049a8 <HAL_GetTick>
 800590e:	4602      	mov	r2, r0
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	1ad3      	subs	r3, r2, r3
 8005914:	2b02      	cmp	r3, #2
 8005916:	d901      	bls.n	800591c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005918:	2303      	movs	r3, #3
 800591a:	e19b      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800591c:	4b2d      	ldr	r3, [pc, #180]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d0f0      	beq.n	800590a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005928:	4b2a      	ldr	r3, [pc, #168]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	695b      	ldr	r3, [r3, #20]
 8005934:	00db      	lsls	r3, r3, #3
 8005936:	4927      	ldr	r1, [pc, #156]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 8005938:	4313      	orrs	r3, r2
 800593a:	600b      	str	r3, [r1, #0]
 800593c:	e015      	b.n	800596a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800593e:	4b26      	ldr	r3, [pc, #152]	; (80059d8 <HAL_RCC_OscConfig+0x270>)
 8005940:	2200      	movs	r2, #0
 8005942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005944:	f7ff f830 	bl	80049a8 <HAL_GetTick>
 8005948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800594a:	e008      	b.n	800595e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800594c:	f7ff f82c 	bl	80049a8 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e17a      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800595e:	4b1d      	ldr	r3, [pc, #116]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d1f0      	bne.n	800594c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0308 	and.w	r3, r3, #8
 8005972:	2b00      	cmp	r3, #0
 8005974:	d03a      	beq.n	80059ec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d019      	beq.n	80059b2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800597e:	4b17      	ldr	r3, [pc, #92]	; (80059dc <HAL_RCC_OscConfig+0x274>)
 8005980:	2201      	movs	r2, #1
 8005982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005984:	f7ff f810 	bl	80049a8 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800598c:	f7ff f80c 	bl	80049a8 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e15a      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800599e:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <HAL_RCC_OscConfig+0x26c>)
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d0f0      	beq.n	800598c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80059aa:	2001      	movs	r0, #1
 80059ac:	f000 fad8 	bl	8005f60 <RCC_Delay>
 80059b0:	e01c      	b.n	80059ec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059b2:	4b0a      	ldr	r3, [pc, #40]	; (80059dc <HAL_RCC_OscConfig+0x274>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059b8:	f7fe fff6 	bl	80049a8 <HAL_GetTick>
 80059bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059be:	e00f      	b.n	80059e0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059c0:	f7fe fff2 	bl	80049a8 <HAL_GetTick>
 80059c4:	4602      	mov	r2, r0
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	1ad3      	subs	r3, r2, r3
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d908      	bls.n	80059e0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e140      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>
 80059d2:	bf00      	nop
 80059d4:	40021000 	.word	0x40021000
 80059d8:	42420000 	.word	0x42420000
 80059dc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059e0:	4b9e      	ldr	r3, [pc, #632]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	f003 0302 	and.w	r3, r3, #2
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1e9      	bne.n	80059c0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0304 	and.w	r3, r3, #4
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 80a6 	beq.w	8005b46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059fa:	2300      	movs	r3, #0
 80059fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059fe:	4b97      	ldr	r3, [pc, #604]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10d      	bne.n	8005a26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a0a:	4b94      	ldr	r3, [pc, #592]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005a0c:	69db      	ldr	r3, [r3, #28]
 8005a0e:	4a93      	ldr	r2, [pc, #588]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a14:	61d3      	str	r3, [r2, #28]
 8005a16:	4b91      	ldr	r3, [pc, #580]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a1e:	60bb      	str	r3, [r7, #8]
 8005a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a22:	2301      	movs	r3, #1
 8005a24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a26:	4b8e      	ldr	r3, [pc, #568]	; (8005c60 <HAL_RCC_OscConfig+0x4f8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d118      	bne.n	8005a64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a32:	4b8b      	ldr	r3, [pc, #556]	; (8005c60 <HAL_RCC_OscConfig+0x4f8>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a8a      	ldr	r2, [pc, #552]	; (8005c60 <HAL_RCC_OscConfig+0x4f8>)
 8005a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a3e:	f7fe ffb3 	bl	80049a8 <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a44:	e008      	b.n	8005a58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a46:	f7fe ffaf 	bl	80049a8 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	2b64      	cmp	r3, #100	; 0x64
 8005a52:	d901      	bls.n	8005a58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005a54:	2303      	movs	r3, #3
 8005a56:	e0fd      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a58:	4b81      	ldr	r3, [pc, #516]	; (8005c60 <HAL_RCC_OscConfig+0x4f8>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d0f0      	beq.n	8005a46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d106      	bne.n	8005a7a <HAL_RCC_OscConfig+0x312>
 8005a6c:	4b7b      	ldr	r3, [pc, #492]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005a6e:	6a1b      	ldr	r3, [r3, #32]
 8005a70:	4a7a      	ldr	r2, [pc, #488]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005a72:	f043 0301 	orr.w	r3, r3, #1
 8005a76:	6213      	str	r3, [r2, #32]
 8005a78:	e02d      	b.n	8005ad6 <HAL_RCC_OscConfig+0x36e>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68db      	ldr	r3, [r3, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10c      	bne.n	8005a9c <HAL_RCC_OscConfig+0x334>
 8005a82:	4b76      	ldr	r3, [pc, #472]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	4a75      	ldr	r2, [pc, #468]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005a88:	f023 0301 	bic.w	r3, r3, #1
 8005a8c:	6213      	str	r3, [r2, #32]
 8005a8e:	4b73      	ldr	r3, [pc, #460]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	4a72      	ldr	r2, [pc, #456]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005a94:	f023 0304 	bic.w	r3, r3, #4
 8005a98:	6213      	str	r3, [r2, #32]
 8005a9a:	e01c      	b.n	8005ad6 <HAL_RCC_OscConfig+0x36e>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	2b05      	cmp	r3, #5
 8005aa2:	d10c      	bne.n	8005abe <HAL_RCC_OscConfig+0x356>
 8005aa4:	4b6d      	ldr	r3, [pc, #436]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005aa6:	6a1b      	ldr	r3, [r3, #32]
 8005aa8:	4a6c      	ldr	r2, [pc, #432]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005aaa:	f043 0304 	orr.w	r3, r3, #4
 8005aae:	6213      	str	r3, [r2, #32]
 8005ab0:	4b6a      	ldr	r3, [pc, #424]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	4a69      	ldr	r2, [pc, #420]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005ab6:	f043 0301 	orr.w	r3, r3, #1
 8005aba:	6213      	str	r3, [r2, #32]
 8005abc:	e00b      	b.n	8005ad6 <HAL_RCC_OscConfig+0x36e>
 8005abe:	4b67      	ldr	r3, [pc, #412]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	4a66      	ldr	r2, [pc, #408]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005ac4:	f023 0301 	bic.w	r3, r3, #1
 8005ac8:	6213      	str	r3, [r2, #32]
 8005aca:	4b64      	ldr	r3, [pc, #400]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005acc:	6a1b      	ldr	r3, [r3, #32]
 8005ace:	4a63      	ldr	r2, [pc, #396]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005ad0:	f023 0304 	bic.w	r3, r3, #4
 8005ad4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d015      	beq.n	8005b0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ade:	f7fe ff63 	bl	80049a8 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ae4:	e00a      	b.n	8005afc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ae6:	f7fe ff5f 	bl	80049a8 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d901      	bls.n	8005afc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e0ab      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005afc:	4b57      	ldr	r3, [pc, #348]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0ee      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x37e>
 8005b08:	e014      	b.n	8005b34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b0a:	f7fe ff4d 	bl	80049a8 <HAL_GetTick>
 8005b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b10:	e00a      	b.n	8005b28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b12:	f7fe ff49 	bl	80049a8 <HAL_GetTick>
 8005b16:	4602      	mov	r2, r0
 8005b18:	693b      	ldr	r3, [r7, #16]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e095      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b28:	4b4c      	ldr	r3, [pc, #304]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005b2a:	6a1b      	ldr	r3, [r3, #32]
 8005b2c:	f003 0302 	and.w	r3, r3, #2
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1ee      	bne.n	8005b12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b34:	7dfb      	ldrb	r3, [r7, #23]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d105      	bne.n	8005b46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b3a:	4b48      	ldr	r3, [pc, #288]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005b3c:	69db      	ldr	r3, [r3, #28]
 8005b3e:	4a47      	ldr	r2, [pc, #284]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 8081 	beq.w	8005c52 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b50:	4b42      	ldr	r3, [pc, #264]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f003 030c 	and.w	r3, r3, #12
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d061      	beq.n	8005c20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d146      	bne.n	8005bf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b64:	4b3f      	ldr	r3, [pc, #252]	; (8005c64 <HAL_RCC_OscConfig+0x4fc>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b6a:	f7fe ff1d 	bl	80049a8 <HAL_GetTick>
 8005b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b70:	e008      	b.n	8005b84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b72:	f7fe ff19 	bl	80049a8 <HAL_GetTick>
 8005b76:	4602      	mov	r2, r0
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	1ad3      	subs	r3, r2, r3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d901      	bls.n	8005b84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e067      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b84:	4b35      	ldr	r3, [pc, #212]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1f0      	bne.n	8005b72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a1b      	ldr	r3, [r3, #32]
 8005b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b98:	d108      	bne.n	8005bac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005b9a:	4b30      	ldr	r3, [pc, #192]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	492d      	ldr	r1, [pc, #180]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005bac:	4b2b      	ldr	r3, [pc, #172]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a19      	ldr	r1, [r3, #32]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	430b      	orrs	r3, r1
 8005bbe:	4927      	ldr	r1, [pc, #156]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bc4:	4b27      	ldr	r3, [pc, #156]	; (8005c64 <HAL_RCC_OscConfig+0x4fc>)
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bca:	f7fe feed 	bl	80049a8 <HAL_GetTick>
 8005bce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bd2:	f7fe fee9 	bl	80049a8 <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	693b      	ldr	r3, [r7, #16]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e037      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005be4:	4b1d      	ldr	r3, [pc, #116]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0f0      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x46a>
 8005bf0:	e02f      	b.n	8005c52 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bf2:	4b1c      	ldr	r3, [pc, #112]	; (8005c64 <HAL_RCC_OscConfig+0x4fc>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bf8:	f7fe fed6 	bl	80049a8 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005bfe:	e008      	b.n	8005c12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c00:	f7fe fed2 	bl	80049a8 <HAL_GetTick>
 8005c04:	4602      	mov	r2, r0
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	1ad3      	subs	r3, r2, r3
 8005c0a:	2b02      	cmp	r3, #2
 8005c0c:	d901      	bls.n	8005c12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e020      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005c12:	4b12      	ldr	r3, [pc, #72]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1f0      	bne.n	8005c00 <HAL_RCC_OscConfig+0x498>
 8005c1e:	e018      	b.n	8005c52 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	69db      	ldr	r3, [r3, #28]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e013      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <HAL_RCC_OscConfig+0x4f4>)
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d106      	bne.n	8005c4e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d001      	beq.n	8005c52 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e000      	b.n	8005c54 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	40021000 	.word	0x40021000
 8005c60:	40007000 	.word	0x40007000
 8005c64:	42420060 	.word	0x42420060

08005c68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0d0      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c7c:	4b6a      	ldr	r3, [pc, #424]	; (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0307 	and.w	r3, r3, #7
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d910      	bls.n	8005cac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8a:	4b67      	ldr	r3, [pc, #412]	; (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f023 0207 	bic.w	r2, r3, #7
 8005c92:	4965      	ldr	r1, [pc, #404]	; (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	4313      	orrs	r3, r2
 8005c98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c9a:	4b63      	ldr	r3, [pc, #396]	; (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	683a      	ldr	r2, [r7, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e0b8      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d020      	beq.n	8005cfa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d005      	beq.n	8005cd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005cc4:	4b59      	ldr	r3, [pc, #356]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	4a58      	ldr	r2, [pc, #352]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005cca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005cce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 0308 	and.w	r3, r3, #8
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d005      	beq.n	8005ce8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cdc:	4b53      	ldr	r3, [pc, #332]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	4a52      	ldr	r2, [pc, #328]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005ce2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005ce6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ce8:	4b50      	ldr	r3, [pc, #320]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	494d      	ldr	r1, [pc, #308]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d040      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d107      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d0e:	4b47      	ldr	r3, [pc, #284]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d115      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e07f      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d107      	bne.n	8005d36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d26:	4b41      	ldr	r3, [pc, #260]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d109      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d32:	2301      	movs	r3, #1
 8005d34:	e073      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d36:	4b3d      	ldr	r3, [pc, #244]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e06b      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d46:	4b39      	ldr	r3, [pc, #228]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f023 0203 	bic.w	r2, r3, #3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	4936      	ldr	r1, [pc, #216]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d58:	f7fe fe26 	bl	80049a8 <HAL_GetTick>
 8005d5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d5e:	e00a      	b.n	8005d76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d60:	f7fe fe22 	bl	80049a8 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e053      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d76:	4b2d      	ldr	r3, [pc, #180]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f003 020c 	and.w	r2, r3, #12
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d1eb      	bne.n	8005d60 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d88:	4b27      	ldr	r3, [pc, #156]	; (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0307 	and.w	r3, r3, #7
 8005d90:	683a      	ldr	r2, [r7, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d210      	bcs.n	8005db8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d96:	4b24      	ldr	r3, [pc, #144]	; (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f023 0207 	bic.w	r2, r3, #7
 8005d9e:	4922      	ldr	r1, [pc, #136]	; (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da6:	4b20      	ldr	r3, [pc, #128]	; (8005e28 <HAL_RCC_ClockConfig+0x1c0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0307 	and.w	r3, r3, #7
 8005dae:	683a      	ldr	r2, [r7, #0]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d001      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	e032      	b.n	8005e1e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0304 	and.w	r3, r3, #4
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d008      	beq.n	8005dd6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dc4:	4b19      	ldr	r3, [pc, #100]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	4916      	ldr	r1, [pc, #88]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0308 	and.w	r3, r3, #8
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d009      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005de2:	4b12      	ldr	r3, [pc, #72]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	00db      	lsls	r3, r3, #3
 8005df0:	490e      	ldr	r1, [pc, #56]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005df6:	f000 f821 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4b0b      	ldr	r3, [pc, #44]	; (8005e2c <HAL_RCC_ClockConfig+0x1c4>)
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	490a      	ldr	r1, [pc, #40]	; (8005e30 <HAL_RCC_ClockConfig+0x1c8>)
 8005e08:	5ccb      	ldrb	r3, [r1, r3]
 8005e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0e:	4a09      	ldr	r2, [pc, #36]	; (8005e34 <HAL_RCC_ClockConfig+0x1cc>)
 8005e10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005e12:	4b09      	ldr	r3, [pc, #36]	; (8005e38 <HAL_RCC_ClockConfig+0x1d0>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fe fd84 	bl	8004924 <HAL_InitTick>

  return HAL_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop
 8005e28:	40022000 	.word	0x40022000
 8005e2c:	40021000 	.word	0x40021000
 8005e30:	0800bd50 	.word	0x0800bd50
 8005e34:	20000008 	.word	0x20000008
 8005e38:	2000000c 	.word	0x2000000c

08005e3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e3c:	b490      	push	{r4, r7}
 8005e3e:	b08a      	sub	sp, #40	; 0x28
 8005e40:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005e42:	4b2a      	ldr	r3, [pc, #168]	; (8005eec <HAL_RCC_GetSysClockFreq+0xb0>)
 8005e44:	1d3c      	adds	r4, r7, #4
 8005e46:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005e48:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005e4c:	f240 2301 	movw	r3, #513	; 0x201
 8005e50:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005e52:	2300      	movs	r3, #0
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	2300      	movs	r3, #0
 8005e58:	61bb      	str	r3, [r7, #24]
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5e:	2300      	movs	r3, #0
 8005e60:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005e66:	4b22      	ldr	r3, [pc, #136]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005e6c:	69fb      	ldr	r3, [r7, #28]
 8005e6e:	f003 030c 	and.w	r3, r3, #12
 8005e72:	2b04      	cmp	r3, #4
 8005e74:	d002      	beq.n	8005e7c <HAL_RCC_GetSysClockFreq+0x40>
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d003      	beq.n	8005e82 <HAL_RCC_GetSysClockFreq+0x46>
 8005e7a:	e02d      	b.n	8005ed8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005e7c:	4b1d      	ldr	r3, [pc, #116]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e7e:	623b      	str	r3, [r7, #32]
      break;
 8005e80:	e02d      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	0c9b      	lsrs	r3, r3, #18
 8005e86:	f003 030f 	and.w	r3, r3, #15
 8005e8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005e8e:	4413      	add	r3, r2
 8005e90:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005e94:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005e96:	69fb      	ldr	r3, [r7, #28]
 8005e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d013      	beq.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005ea0:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	0c5b      	lsrs	r3, r3, #17
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005eae:	4413      	add	r3, r2
 8005eb0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005eb4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	4a0e      	ldr	r2, [pc, #56]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eba:	fb02 f203 	mul.w	r2, r2, r3
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec6:	e004      	b.n	8005ed2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	4a0b      	ldr	r2, [pc, #44]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ecc:	fb02 f303 	mul.w	r3, r2, r3
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	623b      	str	r3, [r7, #32]
      break;
 8005ed6:	e002      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ed8:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eda:	623b      	str	r3, [r7, #32]
      break;
 8005edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ede:	6a3b      	ldr	r3, [r7, #32]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3728      	adds	r7, #40	; 0x28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bc90      	pop	{r4, r7}
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	080075e0 	.word	0x080075e0
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	007a1200 	.word	0x007a1200
 8005ef8:	003d0900 	.word	0x003d0900

08005efc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005efc:	b480      	push	{r7}
 8005efe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f00:	4b02      	ldr	r3, [pc, #8]	; (8005f0c <HAL_RCC_GetHCLKFreq+0x10>)
 8005f02:	681b      	ldr	r3, [r3, #0]
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bc80      	pop	{r7}
 8005f0a:	4770      	bx	lr
 8005f0c:	20000008 	.word	0x20000008

08005f10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005f14:	f7ff fff2 	bl	8005efc <HAL_RCC_GetHCLKFreq>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	0a1b      	lsrs	r3, r3, #8
 8005f20:	f003 0307 	and.w	r3, r3, #7
 8005f24:	4903      	ldr	r1, [pc, #12]	; (8005f34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f26:	5ccb      	ldrb	r3, [r1, r3]
 8005f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	40021000 	.word	0x40021000
 8005f34:	0800bd60 	.word	0x0800bd60

08005f38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005f3c:	f7ff ffde 	bl	8005efc <HAL_RCC_GetHCLKFreq>
 8005f40:	4602      	mov	r2, r0
 8005f42:	4b05      	ldr	r3, [pc, #20]	; (8005f58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	0adb      	lsrs	r3, r3, #11
 8005f48:	f003 0307 	and.w	r3, r3, #7
 8005f4c:	4903      	ldr	r1, [pc, #12]	; (8005f5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005f4e:	5ccb      	ldrb	r3, [r1, r3]
 8005f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	40021000 	.word	0x40021000
 8005f5c:	0800bd60 	.word	0x0800bd60

08005f60 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005f68:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <RCC_Delay+0x34>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a0a      	ldr	r2, [pc, #40]	; (8005f98 <RCC_Delay+0x38>)
 8005f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f72:	0a5b      	lsrs	r3, r3, #9
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	fb02 f303 	mul.w	r3, r2, r3
 8005f7a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005f7c:	bf00      	nop
  }
  while (Delay --);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	1e5a      	subs	r2, r3, #1
 8005f82:	60fa      	str	r2, [r7, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1f9      	bne.n	8005f7c <RCC_Delay+0x1c>
}
 8005f88:	bf00      	nop
 8005f8a:	bf00      	nop
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bc80      	pop	{r7}
 8005f92:	4770      	bx	lr
 8005f94:	20000008 	.word	0x20000008
 8005f98:	10624dd3 	.word	0x10624dd3

08005f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b086      	sub	sp, #24
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	613b      	str	r3, [r7, #16]
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d07d      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fbc:	4b4f      	ldr	r3, [pc, #316]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fbe:	69db      	ldr	r3, [r3, #28]
 8005fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10d      	bne.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fc8:	4b4c      	ldr	r3, [pc, #304]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	4a4b      	ldr	r2, [pc, #300]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fd2:	61d3      	str	r3, [r2, #28]
 8005fd4:	4b49      	ldr	r3, [pc, #292]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005fd6:	69db      	ldr	r3, [r3, #28]
 8005fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fdc:	60bb      	str	r3, [r7, #8]
 8005fde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe4:	4b46      	ldr	r3, [pc, #280]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d118      	bne.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ff0:	4b43      	ldr	r3, [pc, #268]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a42      	ldr	r2, [pc, #264]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ffa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ffc:	f7fe fcd4 	bl	80049a8 <HAL_GetTick>
 8006000:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006002:	e008      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006004:	f7fe fcd0 	bl	80049a8 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b64      	cmp	r3, #100	; 0x64
 8006010:	d901      	bls.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e06d      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006016:	4b3a      	ldr	r3, [pc, #232]	; (8006100 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006022:	4b36      	ldr	r3, [pc, #216]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006024:	6a1b      	ldr	r3, [r3, #32]
 8006026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800602a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d02e      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	429a      	cmp	r2, r3
 800603e:	d027      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006040:	4b2e      	ldr	r3, [pc, #184]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006048:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800604a:	4b2e      	ldr	r3, [pc, #184]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800604c:	2201      	movs	r2, #1
 800604e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006050:	4b2c      	ldr	r3, [pc, #176]	; (8006104 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006056:	4a29      	ldr	r2, [pc, #164]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f003 0301 	and.w	r3, r3, #1
 8006062:	2b00      	cmp	r3, #0
 8006064:	d014      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006066:	f7fe fc9f 	bl	80049a8 <HAL_GetTick>
 800606a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800606c:	e00a      	b.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800606e:	f7fe fc9b 	bl	80049a8 <HAL_GetTick>
 8006072:	4602      	mov	r2, r0
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	1ad3      	subs	r3, r2, r3
 8006078:	f241 3288 	movw	r2, #5000	; 0x1388
 800607c:	4293      	cmp	r3, r2
 800607e:	d901      	bls.n	8006084 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e036      	b.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006084:	4b1d      	ldr	r3, [pc, #116]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	f003 0302 	and.w	r3, r3, #2
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0ee      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006090:	4b1a      	ldr	r3, [pc, #104]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	4917      	ldr	r1, [pc, #92]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800609e:	4313      	orrs	r3, r2
 80060a0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060a2:	7dfb      	ldrb	r3, [r7, #23]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d105      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060a8:	4b14      	ldr	r3, [pc, #80]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060aa:	69db      	ldr	r3, [r3, #28]
 80060ac:	4a13      	ldr	r2, [pc, #76]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80060c0:	4b0e      	ldr	r3, [pc, #56]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	490b      	ldr	r1, [pc, #44]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0310 	and.w	r3, r3, #16
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d008      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060de:	4b07      	ldr	r3, [pc, #28]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	695b      	ldr	r3, [r3, #20]
 80060ea:	4904      	ldr	r1, [pc, #16]	; (80060fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80060ec:	4313      	orrs	r3, r2
 80060ee:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	40021000 	.word	0x40021000
 8006100:	40007000 	.word	0x40007000
 8006104:	42420440 	.word	0x42420440

08006108 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006108:	b590      	push	{r4, r7, lr}
 800610a:	b08d      	sub	sp, #52	; 0x34
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006110:	4b6b      	ldr	r3, [pc, #428]	; (80062c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 8006112:	f107 040c 	add.w	r4, r7, #12
 8006116:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006118:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800611c:	f240 2301 	movw	r3, #513	; 0x201
 8006120:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
 8006126:	2300      	movs	r3, #0
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
 800612a:	2300      	movs	r3, #0
 800612c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	61fb      	str	r3, [r7, #28]
 8006132:	2300      	movs	r3, #0
 8006134:	62bb      	str	r3, [r7, #40]	; 0x28
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	3b01      	subs	r3, #1
 800613a:	2b0f      	cmp	r3, #15
 800613c:	f200 80b6 	bhi.w	80062ac <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006140:	a201      	add	r2, pc, #4	; (adr r2, 8006148 <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 8006142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006146:	bf00      	nop
 8006148:	0800622b 	.word	0x0800622b
 800614c:	08006291 	.word	0x08006291
 8006150:	080062ad 	.word	0x080062ad
 8006154:	0800621b 	.word	0x0800621b
 8006158:	080062ad 	.word	0x080062ad
 800615c:	080062ad 	.word	0x080062ad
 8006160:	080062ad 	.word	0x080062ad
 8006164:	08006223 	.word	0x08006223
 8006168:	080062ad 	.word	0x080062ad
 800616c:	080062ad 	.word	0x080062ad
 8006170:	080062ad 	.word	0x080062ad
 8006174:	080062ad 	.word	0x080062ad
 8006178:	080062ad 	.word	0x080062ad
 800617c:	080062ad 	.word	0x080062ad
 8006180:	080062ad 	.word	0x080062ad
 8006184:	08006189 	.word	0x08006189
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 8006188:	4b4e      	ldr	r3, [pc, #312]	; (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800618e:	4b4d      	ldr	r3, [pc, #308]	; (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006196:	2b00      	cmp	r3, #0
 8006198:	f000 808a 	beq.w	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	0c9b      	lsrs	r3, r3, #18
 80061a0:	f003 030f 	and.w	r3, r3, #15
 80061a4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80061a8:	4413      	add	r3, r2
 80061aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80061ae:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d018      	beq.n	80061ec <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80061ba:	4b42      	ldr	r3, [pc, #264]	; (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	0c5b      	lsrs	r3, r3, #17
 80061c0:	f003 0301 	and.w	r3, r3, #1
 80061c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80061c8:	4413      	add	r3, r2
 80061ca:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80061ce:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00d      	beq.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80061da:	4a3b      	ldr	r2, [pc, #236]	; (80062c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80061dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061de:	fbb2 f2f3 	udiv	r2, r2, r3
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	fb02 f303 	mul.w	r3, r2, r3
 80061e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061ea:	e004      	b.n	80061f6 <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	4a37      	ldr	r2, [pc, #220]	; (80062cc <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 80061f0:	fb02 f303 	mul.w	r3, r2, r3
 80061f4:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80061f6:	4b33      	ldr	r3, [pc, #204]	; (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006202:	d102      	bne.n	800620a <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 8006208:	e052      	b.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 800620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620c:	005b      	lsls	r3, r3, #1
 800620e:	4a30      	ldr	r2, [pc, #192]	; (80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8006210:	fba2 2303 	umull	r2, r3, r2, r3
 8006214:	085b      	lsrs	r3, r3, #1
 8006216:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8006218:	e04a      	b.n	80062b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 800621a:	f7ff fe0f 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 800621e:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006220:	e049      	b.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 8006222:	f7ff fe0b 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8006226:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 8006228:	e045      	b.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 800622a:	4b26      	ldr	r3, [pc, #152]	; (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800623a:	d108      	bne.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 8006246:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800624a:	62bb      	str	r3, [r7, #40]	; 0x28
 800624c:	e01f      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006258:	d109      	bne.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 800625a:	4b1a      	ldr	r3, [pc, #104]	; (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800625c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 8006266:	f649 4340 	movw	r3, #40000	; 0x9c40
 800626a:	62bb      	str	r3, [r7, #40]	; 0x28
 800626c:	e00f      	b.n	800628e <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006274:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006278:	d11c      	bne.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800627a:	4b12      	ldr	r3, [pc, #72]	; (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d016      	beq.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 8006286:	f24f 4324 	movw	r3, #62500	; 0xf424
 800628a:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 800628c:	e012      	b.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800628e:	e011      	b.n	80062b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006290:	f7ff fe52 	bl	8005f38 <HAL_RCC_GetPCLK2Freq>
 8006294:	4602      	mov	r2, r0
 8006296:	4b0b      	ldr	r3, [pc, #44]	; (80062c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	0b9b      	lsrs	r3, r3, #14
 800629c:	f003 0303 	and.w	r3, r3, #3
 80062a0:	3301      	adds	r3, #1
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80062a8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80062aa:	e004      	b.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 80062ac:	bf00      	nop
 80062ae:	e002      	b.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 80062b0:	bf00      	nop
 80062b2:	e000      	b.n	80062b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 80062b4:	bf00      	nop
    }
  }
  return (frequency);
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3734      	adds	r7, #52	; 0x34
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd90      	pop	{r4, r7, pc}
 80062c0:	080075f0 	.word	0x080075f0
 80062c4:	40021000 	.word	0x40021000
 80062c8:	007a1200 	.word	0x007a1200
 80062cc:	003d0900 	.word	0x003d0900
 80062d0:	aaaaaaab 	.word	0xaaaaaaab

080062d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e076      	b.n	80063d4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d108      	bne.n	8006300 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062f6:	d009      	beq.n	800630c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	61da      	str	r2, [r3, #28]
 80062fe:	e005      	b.n	800630c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d106      	bne.n	800632c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f7fe f94e 	bl	80045c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006342:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006354:	431a      	orrs	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	691b      	ldr	r3, [r3, #16]
 8006364:	f003 0302 	and.w	r3, r3, #2
 8006368:	431a      	orrs	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	431a      	orrs	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800637c:	431a      	orrs	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006390:	ea42 0103 	orr.w	r1, r2, r3
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006398:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	0c1a      	lsrs	r2, r3, #16
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f002 0204 	and.w	r2, r2, #4
 80063b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	69da      	ldr	r2, [r3, #28]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3708      	adds	r7, #8
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08c      	sub	sp, #48	; 0x30
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80063ea:	2301      	movs	r3, #1
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80063ee:	2300      	movs	r3, #0
 80063f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d101      	bne.n	8006402 <HAL_SPI_TransmitReceive+0x26>
 80063fe:	2302      	movs	r3, #2
 8006400:	e18a      	b.n	8006718 <HAL_SPI_TransmitReceive+0x33c>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800640a:	f7fe facd 	bl	80049a8 <HAL_GetTick>
 800640e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006420:	887b      	ldrh	r3, [r7, #2]
 8006422:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006424:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006428:	2b01      	cmp	r3, #1
 800642a:	d00f      	beq.n	800644c <HAL_SPI_TransmitReceive+0x70>
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006432:	d107      	bne.n	8006444 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d103      	bne.n	8006444 <HAL_SPI_TransmitReceive+0x68>
 800643c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006440:	2b04      	cmp	r3, #4
 8006442:	d003      	beq.n	800644c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006444:	2302      	movs	r3, #2
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800644a:	e15b      	b.n	8006704 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d005      	beq.n	800645e <HAL_SPI_TransmitReceive+0x82>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <HAL_SPI_TransmitReceive+0x82>
 8006458:	887b      	ldrh	r3, [r7, #2]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d103      	bne.n	8006466 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006464:	e14e      	b.n	8006704 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b04      	cmp	r3, #4
 8006470:	d003      	beq.n	800647a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2205      	movs	r2, #5
 8006476:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2200      	movs	r2, #0
 800647e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	887a      	ldrh	r2, [r7, #2]
 800648a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	887a      	ldrh	r2, [r7, #2]
 8006490:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	68ba      	ldr	r2, [r7, #8]
 8006496:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	887a      	ldrh	r2, [r7, #2]
 800649c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	887a      	ldrh	r2, [r7, #2]
 80064a2:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ba:	2b40      	cmp	r3, #64	; 0x40
 80064bc:	d007      	beq.n	80064ce <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064cc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d6:	d178      	bne.n	80065ca <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <HAL_SPI_TransmitReceive+0x10a>
 80064e0:	8b7b      	ldrh	r3, [r7, #26]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d166      	bne.n	80065b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ea:	881a      	ldrh	r2, [r3, #0]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f6:	1c9a      	adds	r2, r3, #2
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800650a:	e053      	b.n	80065b4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b02      	cmp	r3, #2
 8006518:	d11b      	bne.n	8006552 <HAL_SPI_TransmitReceive+0x176>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800651e:	b29b      	uxth	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d016      	beq.n	8006552 <HAL_SPI_TransmitReceive+0x176>
 8006524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006526:	2b01      	cmp	r3, #1
 8006528:	d113      	bne.n	8006552 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652e:	881a      	ldrh	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653a:	1c9a      	adds	r2, r3, #2
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	b29a      	uxth	r2, r3
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f003 0301 	and.w	r3, r3, #1
 800655c:	2b01      	cmp	r3, #1
 800655e:	d119      	bne.n	8006594 <HAL_SPI_TransmitReceive+0x1b8>
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006564:	b29b      	uxth	r3, r3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d014      	beq.n	8006594 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68da      	ldr	r2, [r3, #12]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	b292      	uxth	r2, r2
 8006576:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657c:	1c9a      	adds	r2, r3, #2
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006586:	b29b      	uxth	r3, r3
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006590:	2301      	movs	r3, #1
 8006592:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006594:	f7fe fa08 	bl	80049a8 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065a0:	429a      	cmp	r2, r3
 80065a2:	d807      	bhi.n	80065b4 <HAL_SPI_TransmitReceive+0x1d8>
 80065a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065aa:	d003      	beq.n	80065b4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80065b2:	e0a7      	b.n	8006704 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1a6      	bne.n	800650c <HAL_SPI_TransmitReceive+0x130>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1a1      	bne.n	800650c <HAL_SPI_TransmitReceive+0x130>
 80065c8:	e07c      	b.n	80066c4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d002      	beq.n	80065d8 <HAL_SPI_TransmitReceive+0x1fc>
 80065d2:	8b7b      	ldrh	r3, [r7, #26]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d16b      	bne.n	80066b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	330c      	adds	r3, #12
 80065e2:	7812      	ldrb	r2, [r2, #0]
 80065e4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ea:	1c5a      	adds	r2, r3, #1
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80065f4:	b29b      	uxth	r3, r3
 80065f6:	3b01      	subs	r3, #1
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80065fe:	e057      	b.n	80066b0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 0302 	and.w	r3, r3, #2
 800660a:	2b02      	cmp	r3, #2
 800660c:	d11c      	bne.n	8006648 <HAL_SPI_TransmitReceive+0x26c>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006612:	b29b      	uxth	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d017      	beq.n	8006648 <HAL_SPI_TransmitReceive+0x26c>
 8006618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661a:	2b01      	cmp	r3, #1
 800661c:	d114      	bne.n	8006648 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	330c      	adds	r3, #12
 8006628:	7812      	ldrb	r2, [r2, #0]
 800662a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b01      	subs	r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b01      	cmp	r3, #1
 8006654:	d119      	bne.n	800668a <HAL_SPI_TransmitReceive+0x2ae>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800665a:	b29b      	uxth	r3, r3
 800665c:	2b00      	cmp	r3, #0
 800665e:	d014      	beq.n	800668a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68da      	ldr	r2, [r3, #12]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	b2d2      	uxtb	r2, r2
 800666c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	1c5a      	adds	r2, r3, #1
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800667c:	b29b      	uxth	r3, r3
 800667e:	3b01      	subs	r3, #1
 8006680:	b29a      	uxth	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006686:	2301      	movs	r3, #1
 8006688:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800668a:	f7fe f98d 	bl	80049a8 <HAL_GetTick>
 800668e:	4602      	mov	r2, r0
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	1ad3      	subs	r3, r2, r3
 8006694:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006696:	429a      	cmp	r2, r3
 8006698:	d803      	bhi.n	80066a2 <HAL_SPI_TransmitReceive+0x2c6>
 800669a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a0:	d102      	bne.n	80066a8 <HAL_SPI_TransmitReceive+0x2cc>
 80066a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d103      	bne.n	80066b0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80066ae:	e029      	b.n	8006704 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1a2      	bne.n	8006600 <HAL_SPI_TransmitReceive+0x224>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d19d      	bne.n	8006600 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80066c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 f8b1 	bl	8006830 <SPI_EndRxTxTransaction>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d006      	beq.n	80066e2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2220      	movs	r2, #32
 80066de:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80066e0:	e010      	b.n	8006704 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10b      	bne.n	8006702 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066ea:	2300      	movs	r3, #0
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	617b      	str	r3, [r7, #20]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	e000      	b.n	8006704 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006702:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2201      	movs	r2, #1
 8006708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	2200      	movs	r2, #0
 8006710:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006714:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006718:	4618      	mov	r0, r3
 800671a:	3730      	adds	r7, #48	; 0x30
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	603b      	str	r3, [r7, #0]
 800672c:	4613      	mov	r3, r2
 800672e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006730:	f7fe f93a 	bl	80049a8 <HAL_GetTick>
 8006734:	4602      	mov	r2, r0
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	1a9b      	subs	r3, r3, r2
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	4413      	add	r3, r2
 800673e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006740:	f7fe f932 	bl	80049a8 <HAL_GetTick>
 8006744:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006746:	4b39      	ldr	r3, [pc, #228]	; (800682c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	015b      	lsls	r3, r3, #5
 800674c:	0d1b      	lsrs	r3, r3, #20
 800674e:	69fa      	ldr	r2, [r7, #28]
 8006750:	fb02 f303 	mul.w	r3, r2, r3
 8006754:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006756:	e054      	b.n	8006802 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800675e:	d050      	beq.n	8006802 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006760:	f7fe f922 	bl	80049a8 <HAL_GetTick>
 8006764:	4602      	mov	r2, r0
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	1ad3      	subs	r3, r2, r3
 800676a:	69fa      	ldr	r2, [r7, #28]
 800676c:	429a      	cmp	r2, r3
 800676e:	d902      	bls.n	8006776 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d13d      	bne.n	80067f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006784:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800678e:	d111      	bne.n	80067b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006798:	d004      	beq.n	80067a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067a2:	d107      	bne.n	80067b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067bc:	d10f      	bne.n	80067de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e017      	b.n	8006822 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d101      	bne.n	80067fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80067f8:	2300      	movs	r3, #0
 80067fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	3b01      	subs	r3, #1
 8006800:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	4013      	ands	r3, r2
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	429a      	cmp	r2, r3
 8006810:	bf0c      	ite	eq
 8006812:	2301      	moveq	r3, #1
 8006814:	2300      	movne	r3, #0
 8006816:	b2db      	uxtb	r3, r3
 8006818:	461a      	mov	r2, r3
 800681a:	79fb      	ldrb	r3, [r7, #7]
 800681c:	429a      	cmp	r2, r3
 800681e:	d19b      	bne.n	8006758 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3720      	adds	r7, #32
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20000008 	.word	0x20000008

08006830 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af02      	add	r7, sp, #8
 8006836:	60f8      	str	r0, [r7, #12]
 8006838:	60b9      	str	r1, [r7, #8]
 800683a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2200      	movs	r2, #0
 8006844:	2180      	movs	r1, #128	; 0x80
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f7ff ff6a 	bl	8006720 <SPI_WaitFlagStateUntilTimeout>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d007      	beq.n	8006862 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006856:	f043 0220 	orr.w	r2, r3, #32
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e000      	b.n	8006864 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <HAL_SRAM_Init+0x1c>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006886:	d101      	bne.n	800688c <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e038      	b.n	80068fe <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006892:	b2db      	uxtb	r3, r3
 8006894:	2b00      	cmp	r3, #0
 8006896:	d106      	bne.n	80068a6 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7fd ff9b 	bl	80047dc <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3308      	adds	r3, #8
 80068ae:	4619      	mov	r1, r3
 80068b0:	4610      	mov	r0, r2
 80068b2:	f000 fd4d 	bl	8007350 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6818      	ldr	r0, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	461a      	mov	r2, r3
 80068c0:	68b9      	ldr	r1, [r7, #8]
 80068c2:	f000 fdaf 	bl	8007424 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	6858      	ldr	r0, [r3, #4]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	689a      	ldr	r2, [r3, #8]
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d2:	6879      	ldr	r1, [r7, #4]
 80068d4:	f000 fdda 	bl	800748c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	6892      	ldr	r2, [r2, #8]
 80068e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	6892      	ldr	r2, [r2, #8]
 80068ec:	f041 0101 	orr.w	r1, r1, #1
 80068f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3710      	adds	r7, #16
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d101      	bne.n	8006918 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e041      	b.n	800699c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800691e:	b2db      	uxtb	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d106      	bne.n	8006932 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7fd fe97 	bl	8004660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2202      	movs	r2, #2
 8006936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	3304      	adds	r3, #4
 8006942:	4619      	mov	r1, r3
 8006944:	4610      	mov	r0, r2
 8006946:	f000 f9ab 	bl	8006ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3708      	adds	r7, #8
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b084      	sub	sp, #16
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d109      	bne.n	80069c8 <HAL_TIM_PWM_Start+0x24>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b01      	cmp	r3, #1
 80069be:	bf14      	ite	ne
 80069c0:	2301      	movne	r3, #1
 80069c2:	2300      	moveq	r3, #0
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	e022      	b.n	8006a0e <HAL_TIM_PWM_Start+0x6a>
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	2b04      	cmp	r3, #4
 80069cc:	d109      	bne.n	80069e2 <HAL_TIM_PWM_Start+0x3e>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	bf14      	ite	ne
 80069da:	2301      	movne	r3, #1
 80069dc:	2300      	moveq	r3, #0
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	e015      	b.n	8006a0e <HAL_TIM_PWM_Start+0x6a>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	2b08      	cmp	r3, #8
 80069e6:	d109      	bne.n	80069fc <HAL_TIM_PWM_Start+0x58>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	bf14      	ite	ne
 80069f4:	2301      	movne	r3, #1
 80069f6:	2300      	moveq	r3, #0
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	e008      	b.n	8006a0e <HAL_TIM_PWM_Start+0x6a>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a02:	b2db      	uxtb	r3, r3
 8006a04:	2b01      	cmp	r3, #1
 8006a06:	bf14      	ite	ne
 8006a08:	2301      	movne	r3, #1
 8006a0a:	2300      	moveq	r3, #0
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d001      	beq.n	8006a16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e072      	b.n	8006afc <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d104      	bne.n	8006a26 <HAL_TIM_PWM_Start+0x82>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2202      	movs	r2, #2
 8006a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a24:	e013      	b.n	8006a4e <HAL_TIM_PWM_Start+0xaa>
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	2b04      	cmp	r3, #4
 8006a2a:	d104      	bne.n	8006a36 <HAL_TIM_PWM_Start+0x92>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a34:	e00b      	b.n	8006a4e <HAL_TIM_PWM_Start+0xaa>
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d104      	bne.n	8006a46 <HAL_TIM_PWM_Start+0xa2>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2202      	movs	r2, #2
 8006a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a44:	e003      	b.n	8006a4e <HAL_TIM_PWM_Start+0xaa>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2202      	movs	r2, #2
 8006a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2201      	movs	r2, #1
 8006a54:	6839      	ldr	r1, [r7, #0]
 8006a56:	4618      	mov	r0, r3
 8006a58:	f000 fa32 	bl	8006ec0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a28      	ldr	r2, [pc, #160]	; (8006b04 <HAL_TIM_PWM_Start+0x160>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d004      	beq.n	8006a70 <HAL_TIM_PWM_Start+0xcc>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a27      	ldr	r2, [pc, #156]	; (8006b08 <HAL_TIM_PWM_Start+0x164>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d101      	bne.n	8006a74 <HAL_TIM_PWM_Start+0xd0>
 8006a70:	2301      	movs	r3, #1
 8006a72:	e000      	b.n	8006a76 <HAL_TIM_PWM_Start+0xd2>
 8006a74:	2300      	movs	r3, #0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d007      	beq.n	8006a8a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a1d      	ldr	r2, [pc, #116]	; (8006b04 <HAL_TIM_PWM_Start+0x160>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d018      	beq.n	8006ac6 <HAL_TIM_PWM_Start+0x122>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a1b      	ldr	r2, [pc, #108]	; (8006b08 <HAL_TIM_PWM_Start+0x164>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d013      	beq.n	8006ac6 <HAL_TIM_PWM_Start+0x122>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa6:	d00e      	beq.n	8006ac6 <HAL_TIM_PWM_Start+0x122>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a17      	ldr	r2, [pc, #92]	; (8006b0c <HAL_TIM_PWM_Start+0x168>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d009      	beq.n	8006ac6 <HAL_TIM_PWM_Start+0x122>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a16      	ldr	r2, [pc, #88]	; (8006b10 <HAL_TIM_PWM_Start+0x16c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d004      	beq.n	8006ac6 <HAL_TIM_PWM_Start+0x122>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a14      	ldr	r2, [pc, #80]	; (8006b14 <HAL_TIM_PWM_Start+0x170>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d111      	bne.n	8006aea <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	f003 0307 	and.w	r3, r3, #7
 8006ad0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2b06      	cmp	r3, #6
 8006ad6:	d010      	beq.n	8006afa <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f042 0201 	orr.w	r2, r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ae8:	e007      	b.n	8006afa <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 0201 	orr.w	r2, r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40012c00 	.word	0x40012c00
 8006b08:	40013400 	.word	0x40013400
 8006b0c:	40000400 	.word	0x40000400
 8006b10:	40000800 	.word	0x40000800
 8006b14:	40000c00 	.word	0x40000c00

08006b18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d101      	bne.n	8006b30 <HAL_TIM_ConfigClockSource+0x18>
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	e0b3      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x180>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b68:	d03e      	beq.n	8006be8 <HAL_TIM_ConfigClockSource+0xd0>
 8006b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b6e:	f200 8087 	bhi.w	8006c80 <HAL_TIM_ConfigClockSource+0x168>
 8006b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b76:	f000 8085 	beq.w	8006c84 <HAL_TIM_ConfigClockSource+0x16c>
 8006b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b7e:	d87f      	bhi.n	8006c80 <HAL_TIM_ConfigClockSource+0x168>
 8006b80:	2b70      	cmp	r3, #112	; 0x70
 8006b82:	d01a      	beq.n	8006bba <HAL_TIM_ConfigClockSource+0xa2>
 8006b84:	2b70      	cmp	r3, #112	; 0x70
 8006b86:	d87b      	bhi.n	8006c80 <HAL_TIM_ConfigClockSource+0x168>
 8006b88:	2b60      	cmp	r3, #96	; 0x60
 8006b8a:	d050      	beq.n	8006c2e <HAL_TIM_ConfigClockSource+0x116>
 8006b8c:	2b60      	cmp	r3, #96	; 0x60
 8006b8e:	d877      	bhi.n	8006c80 <HAL_TIM_ConfigClockSource+0x168>
 8006b90:	2b50      	cmp	r3, #80	; 0x50
 8006b92:	d03c      	beq.n	8006c0e <HAL_TIM_ConfigClockSource+0xf6>
 8006b94:	2b50      	cmp	r3, #80	; 0x50
 8006b96:	d873      	bhi.n	8006c80 <HAL_TIM_ConfigClockSource+0x168>
 8006b98:	2b40      	cmp	r3, #64	; 0x40
 8006b9a:	d058      	beq.n	8006c4e <HAL_TIM_ConfigClockSource+0x136>
 8006b9c:	2b40      	cmp	r3, #64	; 0x40
 8006b9e:	d86f      	bhi.n	8006c80 <HAL_TIM_ConfigClockSource+0x168>
 8006ba0:	2b30      	cmp	r3, #48	; 0x30
 8006ba2:	d064      	beq.n	8006c6e <HAL_TIM_ConfigClockSource+0x156>
 8006ba4:	2b30      	cmp	r3, #48	; 0x30
 8006ba6:	d86b      	bhi.n	8006c80 <HAL_TIM_ConfigClockSource+0x168>
 8006ba8:	2b20      	cmp	r3, #32
 8006baa:	d060      	beq.n	8006c6e <HAL_TIM_ConfigClockSource+0x156>
 8006bac:	2b20      	cmp	r3, #32
 8006bae:	d867      	bhi.n	8006c80 <HAL_TIM_ConfigClockSource+0x168>
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d05c      	beq.n	8006c6e <HAL_TIM_ConfigClockSource+0x156>
 8006bb4:	2b10      	cmp	r3, #16
 8006bb6:	d05a      	beq.n	8006c6e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006bb8:	e062      	b.n	8006c80 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6818      	ldr	r0, [r3, #0]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	6899      	ldr	r1, [r3, #8]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	f000 f95a 	bl	8006e82 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bdc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	609a      	str	r2, [r3, #8]
      break;
 8006be6:	e04e      	b.n	8006c86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6818      	ldr	r0, [r3, #0]
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	6899      	ldr	r1, [r3, #8]
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685a      	ldr	r2, [r3, #4]
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	f000 f943 	bl	8006e82 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	689a      	ldr	r2, [r3, #8]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c0a:	609a      	str	r2, [r3, #8]
      break;
 8006c0c:	e03b      	b.n	8006c86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6818      	ldr	r0, [r3, #0]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6859      	ldr	r1, [r3, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f000 f8ba 	bl	8006d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2150      	movs	r1, #80	; 0x50
 8006c26:	4618      	mov	r0, r3
 8006c28:	f000 f911 	bl	8006e4e <TIM_ITRx_SetConfig>
      break;
 8006c2c:	e02b      	b.n	8006c86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6818      	ldr	r0, [r3, #0]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	6859      	ldr	r1, [r3, #4]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	f000 f8d8 	bl	8006df0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2160      	movs	r1, #96	; 0x60
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 f901 	bl	8006e4e <TIM_ITRx_SetConfig>
      break;
 8006c4c:	e01b      	b.n	8006c86 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6818      	ldr	r0, [r3, #0]
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	6859      	ldr	r1, [r3, #4]
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	461a      	mov	r2, r3
 8006c5c:	f000 f89a 	bl	8006d94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2140      	movs	r1, #64	; 0x40
 8006c66:	4618      	mov	r0, r3
 8006c68:	f000 f8f1 	bl	8006e4e <TIM_ITRx_SetConfig>
      break;
 8006c6c:	e00b      	b.n	8006c86 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4619      	mov	r1, r3
 8006c78:	4610      	mov	r0, r2
 8006c7a:	f000 f8e8 	bl	8006e4e <TIM_ITRx_SetConfig>
        break;
 8006c7e:	e002      	b.n	8006c86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006c80:	bf00      	nop
 8006c82:	e000      	b.n	8006c86 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006c84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a33      	ldr	r2, [pc, #204]	; (8006d80 <TIM_Base_SetConfig+0xe0>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d013      	beq.n	8006ce0 <TIM_Base_SetConfig+0x40>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a32      	ldr	r2, [pc, #200]	; (8006d84 <TIM_Base_SetConfig+0xe4>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d00f      	beq.n	8006ce0 <TIM_Base_SetConfig+0x40>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc6:	d00b      	beq.n	8006ce0 <TIM_Base_SetConfig+0x40>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a2f      	ldr	r2, [pc, #188]	; (8006d88 <TIM_Base_SetConfig+0xe8>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d007      	beq.n	8006ce0 <TIM_Base_SetConfig+0x40>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a2e      	ldr	r2, [pc, #184]	; (8006d8c <TIM_Base_SetConfig+0xec>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d003      	beq.n	8006ce0 <TIM_Base_SetConfig+0x40>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a2d      	ldr	r2, [pc, #180]	; (8006d90 <TIM_Base_SetConfig+0xf0>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d108      	bne.n	8006cf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	68fa      	ldr	r2, [r7, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4a22      	ldr	r2, [pc, #136]	; (8006d80 <TIM_Base_SetConfig+0xe0>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d013      	beq.n	8006d22 <TIM_Base_SetConfig+0x82>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a21      	ldr	r2, [pc, #132]	; (8006d84 <TIM_Base_SetConfig+0xe4>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d00f      	beq.n	8006d22 <TIM_Base_SetConfig+0x82>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d08:	d00b      	beq.n	8006d22 <TIM_Base_SetConfig+0x82>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a1e      	ldr	r2, [pc, #120]	; (8006d88 <TIM_Base_SetConfig+0xe8>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d007      	beq.n	8006d22 <TIM_Base_SetConfig+0x82>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a1d      	ldr	r2, [pc, #116]	; (8006d8c <TIM_Base_SetConfig+0xec>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d003      	beq.n	8006d22 <TIM_Base_SetConfig+0x82>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a1c      	ldr	r2, [pc, #112]	; (8006d90 <TIM_Base_SetConfig+0xf0>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d108      	bne.n	8006d34 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68db      	ldr	r3, [r3, #12]
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	689a      	ldr	r2, [r3, #8]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a09      	ldr	r2, [pc, #36]	; (8006d80 <TIM_Base_SetConfig+0xe0>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d003      	beq.n	8006d68 <TIM_Base_SetConfig+0xc8>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a08      	ldr	r2, [pc, #32]	; (8006d84 <TIM_Base_SetConfig+0xe4>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d103      	bne.n	8006d70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	615a      	str	r2, [r3, #20]
}
 8006d76:	bf00      	nop
 8006d78:	3714      	adds	r7, #20
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr
 8006d80:	40012c00 	.word	0x40012c00
 8006d84:	40013400 	.word	0x40013400
 8006d88:	40000400 	.word	0x40000400
 8006d8c:	40000800 	.word	0x40000800
 8006d90:	40000c00 	.word	0x40000c00

08006d94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	f023 0201 	bic.w	r2, r3, #1
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	011b      	lsls	r3, r3, #4
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	f023 030a 	bic.w	r3, r3, #10
 8006dd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	621a      	str	r2, [r3, #32]
}
 8006de6:	bf00      	nop
 8006de8:	371c      	adds	r7, #28
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bc80      	pop	{r7}
 8006dee:	4770      	bx	lr

08006df0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b087      	sub	sp, #28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	60b9      	str	r1, [r7, #8]
 8006dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	f023 0210 	bic.w	r2, r3, #16
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	031b      	lsls	r3, r3, #12
 8006e20:	697a      	ldr	r2, [r7, #20]
 8006e22:	4313      	orrs	r3, r2
 8006e24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	011b      	lsls	r3, r3, #4
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	697a      	ldr	r2, [r7, #20]
 8006e3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	621a      	str	r2, [r3, #32]
}
 8006e44:	bf00      	nop
 8006e46:	371c      	adds	r7, #28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bc80      	pop	{r7}
 8006e4c:	4770      	bx	lr

08006e4e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b085      	sub	sp, #20
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
 8006e56:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	f043 0307 	orr.w	r3, r3, #7
 8006e70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	609a      	str	r2, [r3, #8]
}
 8006e78:	bf00      	nop
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bc80      	pop	{r7}
 8006e80:	4770      	bx	lr

08006e82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e82:	b480      	push	{r7}
 8006e84:	b087      	sub	sp, #28
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	60f8      	str	r0, [r7, #12]
 8006e8a:	60b9      	str	r1, [r7, #8]
 8006e8c:	607a      	str	r2, [r7, #4]
 8006e8e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e9c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	021a      	lsls	r2, r3, #8
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	431a      	orrs	r2, r3
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	609a      	str	r2, [r3, #8]
}
 8006eb6:	bf00      	nop
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bc80      	pop	{r7}
 8006ebe:	4770      	bx	lr

08006ec0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f003 031f 	and.w	r3, r3, #31
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6a1a      	ldr	r2, [r3, #32]
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	43db      	mvns	r3, r3
 8006ee2:	401a      	ands	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6a1a      	ldr	r2, [r3, #32]
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f003 031f 	and.w	r3, r3, #31
 8006ef2:	6879      	ldr	r1, [r7, #4]
 8006ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef8:	431a      	orrs	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	621a      	str	r2, [r3, #32]
}
 8006efe:	bf00      	nop
 8006f00:	371c      	adds	r7, #28
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bc80      	pop	{r7}
 8006f06:	4770      	bx	lr

08006f08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b085      	sub	sp, #20
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d101      	bne.n	8006f20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	e050      	b.n	8006fc2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2202      	movs	r2, #2
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68fa      	ldr	r2, [r7, #12]
 8006f58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a1b      	ldr	r2, [pc, #108]	; (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d018      	beq.n	8006f96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a19      	ldr	r2, [pc, #100]	; (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d013      	beq.n	8006f96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f76:	d00e      	beq.n	8006f96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a15      	ldr	r2, [pc, #84]	; (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d009      	beq.n	8006f96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a14      	ldr	r2, [pc, #80]	; (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d004      	beq.n	8006f96 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a12      	ldr	r2, [pc, #72]	; (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d10c      	bne.n	8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68ba      	ldr	r2, [r7, #8]
 8006fae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bc80      	pop	{r7}
 8006fca:	4770      	bx	lr
 8006fcc:	40012c00 	.word	0x40012c00
 8006fd0:	40013400 	.word	0x40013400
 8006fd4:	40000400 	.word	0x40000400
 8006fd8:	40000800 	.word	0x40000800
 8006fdc:	40000c00 	.word	0x40000c00

08006fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e03f      	b.n	8007072 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7fd fb48 	bl	800469c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2224      	movs	r2, #36	; 0x24
 8007010:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f905 	bl	8007234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	691a      	ldr	r2, [r3, #16]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	695a      	ldr	r2, [r3, #20]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2220      	movs	r2, #32
 8007064:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007070:	2300      	movs	r3, #0
}
 8007072:	4618      	mov	r0, r3
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}

0800707a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800707a:	b580      	push	{r7, lr}
 800707c:	b08a      	sub	sp, #40	; 0x28
 800707e:	af02      	add	r7, sp, #8
 8007080:	60f8      	str	r0, [r7, #12]
 8007082:	60b9      	str	r1, [r7, #8]
 8007084:	603b      	str	r3, [r7, #0]
 8007086:	4613      	mov	r3, r2
 8007088:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800708a:	2300      	movs	r3, #0
 800708c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b20      	cmp	r3, #32
 8007098:	d17c      	bne.n	8007194 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d002      	beq.n	80070a6 <HAL_UART_Transmit+0x2c>
 80070a0:	88fb      	ldrh	r3, [r7, #6]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e075      	b.n	8007196 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d101      	bne.n	80070b8 <HAL_UART_Transmit+0x3e>
 80070b4:	2302      	movs	r3, #2
 80070b6:	e06e      	b.n	8007196 <HAL_UART_Transmit+0x11c>
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2221      	movs	r2, #33	; 0x21
 80070ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80070ce:	f7fd fc6b 	bl	80049a8 <HAL_GetTick>
 80070d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	88fa      	ldrh	r2, [r7, #6]
 80070d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	88fa      	ldrh	r2, [r7, #6]
 80070de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e8:	d108      	bne.n	80070fc <HAL_UART_Transmit+0x82>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d104      	bne.n	80070fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	61bb      	str	r3, [r7, #24]
 80070fa:	e003      	b.n	8007104 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007100:	2300      	movs	r3, #0
 8007102:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800710c:	e02a      	b.n	8007164 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	2200      	movs	r2, #0
 8007116:	2180      	movs	r1, #128	; 0x80
 8007118:	68f8      	ldr	r0, [r7, #12]
 800711a:	f000 f840 	bl	800719e <UART_WaitOnFlagUntilTimeout>
 800711e:	4603      	mov	r3, r0
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e036      	b.n	8007196 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10b      	bne.n	8007146 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800713c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	3302      	adds	r3, #2
 8007142:	61bb      	str	r3, [r7, #24]
 8007144:	e007      	b.n	8007156 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	781a      	ldrb	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	3301      	adds	r3, #1
 8007154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800715a:	b29b      	uxth	r3, r3
 800715c:	3b01      	subs	r3, #1
 800715e:	b29a      	uxth	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1cf      	bne.n	800710e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2200      	movs	r2, #0
 8007176:	2140      	movs	r1, #64	; 0x40
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 f810 	bl	800719e <UART_WaitOnFlagUntilTimeout>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e006      	b.n	8007196 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2220      	movs	r2, #32
 800718c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8007190:	2300      	movs	r3, #0
 8007192:	e000      	b.n	8007196 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007194:	2302      	movs	r3, #2
  }
}
 8007196:	4618      	mov	r0, r3
 8007198:	3720      	adds	r7, #32
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b084      	sub	sp, #16
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	603b      	str	r3, [r7, #0]
 80071aa:	4613      	mov	r3, r2
 80071ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071ae:	e02c      	b.n	800720a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071b0:	69bb      	ldr	r3, [r7, #24]
 80071b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b6:	d028      	beq.n	800720a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d007      	beq.n	80071ce <UART_WaitOnFlagUntilTimeout+0x30>
 80071be:	f7fd fbf3 	bl	80049a8 <HAL_GetTick>
 80071c2:	4602      	mov	r2, r0
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	1ad3      	subs	r3, r2, r3
 80071c8:	69ba      	ldr	r2, [r7, #24]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d21d      	bcs.n	800720a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68da      	ldr	r2, [r3, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80071dc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	695a      	ldr	r2, [r3, #20]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f022 0201 	bic.w	r2, r2, #1
 80071ec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2220      	movs	r2, #32
 80071f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2220      	movs	r2, #32
 80071fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e00f      	b.n	800722a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	4013      	ands	r3, r2
 8007214:	68ba      	ldr	r2, [r7, #8]
 8007216:	429a      	cmp	r2, r3
 8007218:	bf0c      	ite	eq
 800721a:	2301      	moveq	r3, #1
 800721c:	2300      	movne	r3, #0
 800721e:	b2db      	uxtb	r3, r3
 8007220:	461a      	mov	r2, r3
 8007222:	79fb      	ldrb	r3, [r7, #7]
 8007224:	429a      	cmp	r2, r3
 8007226:	d0c3      	beq.n	80071b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
	...

08007234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	691b      	ldr	r3, [r3, #16]
 8007242:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	431a      	orrs	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	695b      	ldr	r3, [r3, #20]
 8007260:	4313      	orrs	r3, r2
 8007262:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800726e:	f023 030c 	bic.w	r3, r3, #12
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	6812      	ldr	r2, [r2, #0]
 8007276:	68b9      	ldr	r1, [r7, #8]
 8007278:	430b      	orrs	r3, r1
 800727a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	695b      	ldr	r3, [r3, #20]
 8007282:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	699a      	ldr	r2, [r3, #24]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	430a      	orrs	r2, r1
 8007290:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a2c      	ldr	r2, [pc, #176]	; (8007348 <UART_SetConfig+0x114>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d103      	bne.n	80072a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800729c:	f7fe fe4c 	bl	8005f38 <HAL_RCC_GetPCLK2Freq>
 80072a0:	60f8      	str	r0, [r7, #12]
 80072a2:	e002      	b.n	80072aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80072a4:	f7fe fe34 	bl	8005f10 <HAL_RCC_GetPCLK1Freq>
 80072a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80072aa:	68fa      	ldr	r2, [r7, #12]
 80072ac:	4613      	mov	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	4413      	add	r3, r2
 80072b2:	009a      	lsls	r2, r3, #2
 80072b4:	441a      	add	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c0:	4a22      	ldr	r2, [pc, #136]	; (800734c <UART_SetConfig+0x118>)
 80072c2:	fba2 2303 	umull	r2, r3, r2, r3
 80072c6:	095b      	lsrs	r3, r3, #5
 80072c8:	0119      	lsls	r1, r3, #4
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4613      	mov	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	009a      	lsls	r2, r3, #2
 80072d4:	441a      	add	r2, r3
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80072e0:	4b1a      	ldr	r3, [pc, #104]	; (800734c <UART_SetConfig+0x118>)
 80072e2:	fba3 0302 	umull	r0, r3, r3, r2
 80072e6:	095b      	lsrs	r3, r3, #5
 80072e8:	2064      	movs	r0, #100	; 0x64
 80072ea:	fb00 f303 	mul.w	r3, r0, r3
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	011b      	lsls	r3, r3, #4
 80072f2:	3332      	adds	r3, #50	; 0x32
 80072f4:	4a15      	ldr	r2, [pc, #84]	; (800734c <UART_SetConfig+0x118>)
 80072f6:	fba2 2303 	umull	r2, r3, r2, r3
 80072fa:	095b      	lsrs	r3, r3, #5
 80072fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007300:	4419      	add	r1, r3
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	4613      	mov	r3, r2
 8007306:	009b      	lsls	r3, r3, #2
 8007308:	4413      	add	r3, r2
 800730a:	009a      	lsls	r2, r3, #2
 800730c:	441a      	add	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	fbb2 f2f3 	udiv	r2, r2, r3
 8007318:	4b0c      	ldr	r3, [pc, #48]	; (800734c <UART_SetConfig+0x118>)
 800731a:	fba3 0302 	umull	r0, r3, r3, r2
 800731e:	095b      	lsrs	r3, r3, #5
 8007320:	2064      	movs	r0, #100	; 0x64
 8007322:	fb00 f303 	mul.w	r3, r0, r3
 8007326:	1ad3      	subs	r3, r2, r3
 8007328:	011b      	lsls	r3, r3, #4
 800732a:	3332      	adds	r3, #50	; 0x32
 800732c:	4a07      	ldr	r2, [pc, #28]	; (800734c <UART_SetConfig+0x118>)
 800732e:	fba2 2303 	umull	r2, r3, r2, r3
 8007332:	095b      	lsrs	r3, r3, #5
 8007334:	f003 020f 	and.w	r2, r3, #15
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	440a      	add	r2, r1
 800733e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8007340:	bf00      	nop
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	40013800 	.word	0x40013800
 800734c:	51eb851f 	.word	0x51eb851f

08007350 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8007350:	b480      	push	{r7}
 8007352:	b087      	sub	sp, #28
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	6812      	ldr	r2, [r2, #0]
 8007368:	f023 0101 	bic.w	r1, r3, #1
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	2b08      	cmp	r3, #8
 8007378:	d102      	bne.n	8007380 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800737a:	2340      	movs	r3, #64	; 0x40
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	e001      	b.n	8007384 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007380:	2300      	movs	r3, #0
 8007382:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007390:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007396:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800739c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80073a2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80073a8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80073ae:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80073b4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80073ba:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80073c0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80073c6:	4313      	orrs	r3, r2
 80073c8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	699b      	ldr	r3, [r3, #24]
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	4313      	orrs	r3, r2
 80073d2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073d8:	693a      	ldr	r2, [r7, #16]
 80073da:	4313      	orrs	r3, r2
 80073dc:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80073de:	4b10      	ldr	r3, [pc, #64]	; (8007420 <FSMC_NORSRAM_Init+0xd0>)
 80073e0:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80073e8:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80073f0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	43db      	mvns	r3, r3
 8007400:	ea02 0103 	and.w	r1, r2, r3
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	4319      	orrs	r1, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	371c      	adds	r7, #28
 8007418:	46bd      	mov	sp, r7
 800741a:	bc80      	pop	{r7}
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	0008fb7f 	.word	0x0008fb7f

08007424 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	1c5a      	adds	r2, r3, #1
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800743a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	431a      	orrs	r2, r3
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	689b      	ldr	r3, [r3, #8]
 800744e:	021b      	lsls	r3, r3, #8
 8007450:	431a      	orrs	r2, r3
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	041b      	lsls	r3, r3, #16
 8007458:	431a      	orrs	r2, r3
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	3b01      	subs	r3, #1
 8007460:	051b      	lsls	r3, r3, #20
 8007462:	431a      	orrs	r2, r3
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	695b      	ldr	r3, [r3, #20]
 8007468:	3b02      	subs	r3, #2
 800746a:	061b      	lsls	r3, r3, #24
 800746c:	431a      	orrs	r2, r3
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	4313      	orrs	r3, r2
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	3201      	adds	r2, #1
 8007478:	4319      	orrs	r1, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8007480:	2300      	movs	r3, #0
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	bc80      	pop	{r7}
 800748a:	4770      	bx	lr

0800748c <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	60f8      	str	r0, [r7, #12]
 8007494:	60b9      	str	r1, [r7, #8]
 8007496:	607a      	str	r2, [r7, #4]
 8007498:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074a0:	d11d      	bne.n	80074de <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	687a      	ldr	r2, [r7, #4]
 80074a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074aa:	4b13      	ldr	r3, [pc, #76]	; (80074f8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80074ac:	4013      	ands	r3, r2
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	6811      	ldr	r1, [r2, #0]
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	6852      	ldr	r2, [r2, #4]
 80074b6:	0112      	lsls	r2, r2, #4
 80074b8:	4311      	orrs	r1, r2
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	6892      	ldr	r2, [r2, #8]
 80074be:	0212      	lsls	r2, r2, #8
 80074c0:	4311      	orrs	r1, r2
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	6992      	ldr	r2, [r2, #24]
 80074c6:	4311      	orrs	r1, r2
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	68d2      	ldr	r2, [r2, #12]
 80074cc:	0412      	lsls	r2, r2, #16
 80074ce:	430a      	orrs	r2, r1
 80074d0:	ea43 0102 	orr.w	r1, r3, r2
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80074dc:	e005      	b.n	80074ea <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80074e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bc80      	pop	{r7}
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	cff00000 	.word	0xcff00000

080074fc <__libc_init_array>:
 80074fc:	b570      	push	{r4, r5, r6, lr}
 80074fe:	2600      	movs	r6, #0
 8007500:	4d0c      	ldr	r5, [pc, #48]	; (8007534 <__libc_init_array+0x38>)
 8007502:	4c0d      	ldr	r4, [pc, #52]	; (8007538 <__libc_init_array+0x3c>)
 8007504:	1b64      	subs	r4, r4, r5
 8007506:	10a4      	asrs	r4, r4, #2
 8007508:	42a6      	cmp	r6, r4
 800750a:	d109      	bne.n	8007520 <__libc_init_array+0x24>
 800750c:	f000 f822 	bl	8007554 <_init>
 8007510:	2600      	movs	r6, #0
 8007512:	4d0a      	ldr	r5, [pc, #40]	; (800753c <__libc_init_array+0x40>)
 8007514:	4c0a      	ldr	r4, [pc, #40]	; (8007540 <__libc_init_array+0x44>)
 8007516:	1b64      	subs	r4, r4, r5
 8007518:	10a4      	asrs	r4, r4, #2
 800751a:	42a6      	cmp	r6, r4
 800751c:	d105      	bne.n	800752a <__libc_init_array+0x2e>
 800751e:	bd70      	pop	{r4, r5, r6, pc}
 8007520:	f855 3b04 	ldr.w	r3, [r5], #4
 8007524:	4798      	blx	r3
 8007526:	3601      	adds	r6, #1
 8007528:	e7ee      	b.n	8007508 <__libc_init_array+0xc>
 800752a:	f855 3b04 	ldr.w	r3, [r5], #4
 800752e:	4798      	blx	r3
 8007530:	3601      	adds	r6, #1
 8007532:	e7f2      	b.n	800751a <__libc_init_array+0x1e>
 8007534:	0800bd68 	.word	0x0800bd68
 8007538:	0800bd68 	.word	0x0800bd68
 800753c:	0800bd68 	.word	0x0800bd68
 8007540:	0800bd6c 	.word	0x0800bd6c

08007544 <memset>:
 8007544:	4603      	mov	r3, r0
 8007546:	4402      	add	r2, r0
 8007548:	4293      	cmp	r3, r2
 800754a:	d100      	bne.n	800754e <memset+0xa>
 800754c:	4770      	bx	lr
 800754e:	f803 1b01 	strb.w	r1, [r3], #1
 8007552:	e7f9      	b.n	8007548 <memset+0x4>

08007554 <_init>:
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	bf00      	nop
 8007558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755a:	bc08      	pop	{r3}
 800755c:	469e      	mov	lr, r3
 800755e:	4770      	bx	lr

08007560 <_fini>:
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	bf00      	nop
 8007564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007566:	bc08      	pop	{r3}
 8007568:	469e      	mov	lr, r3
 800756a:	4770      	bx	lr
