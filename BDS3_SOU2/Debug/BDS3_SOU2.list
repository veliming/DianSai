
BDS3_SOU2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093f8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018a0  08009580  08009580  00019580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae20  0800ae20  000200b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae20  0800ae20  0001ae20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae28  0800ae28  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae28  0800ae28  0001ae28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae2c  0800ae2c  0001ae2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  0800ae30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  200000b0  0800aee0  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  0800aee0  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a3e  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e6c  00000000  00000000  00032b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  00035990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  00036808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023784  00000000  00000000  00037518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013178  00000000  00000000  0005ac9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cda61  00000000  00000000  0006de14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013b875  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cfc  00000000  00000000  0013b8c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000b0 	.word	0x200000b0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009568 	.word	0x08009568

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000b4 	.word	0x200000b4
 80001c4:	08009568 	.word	0x08009568

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_uldivmod>:
 8000ae0:	b953      	cbnz	r3, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae2:	b94a      	cbnz	r2, 8000af8 <__aeabi_uldivmod+0x18>
 8000ae4:	2900      	cmp	r1, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	2800      	cmpeq	r0, #0
 8000aea:	bf1c      	itt	ne
 8000aec:	f04f 31ff 	movne.w	r1, #4294967295
 8000af0:	f04f 30ff 	movne.w	r0, #4294967295
 8000af4:	f000 b96e 	b.w	8000dd4 <__aeabi_idiv0>
 8000af8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000afc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b00:	f000 f806 	bl	8000b10 <__udivmoddi4>
 8000b04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b0c:	b004      	add	sp, #16
 8000b0e:	4770      	bx	lr

08000b10 <__udivmoddi4>:
 8000b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b14:	9d08      	ldr	r5, [sp, #32]
 8000b16:	4604      	mov	r4, r0
 8000b18:	468c      	mov	ip, r1
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	f040 8083 	bne.w	8000c26 <__udivmoddi4+0x116>
 8000b20:	428a      	cmp	r2, r1
 8000b22:	4617      	mov	r7, r2
 8000b24:	d947      	bls.n	8000bb6 <__udivmoddi4+0xa6>
 8000b26:	fab2 f282 	clz	r2, r2
 8000b2a:	b142      	cbz	r2, 8000b3e <__udivmoddi4+0x2e>
 8000b2c:	f1c2 0020 	rsb	r0, r2, #32
 8000b30:	fa24 f000 	lsr.w	r0, r4, r0
 8000b34:	4091      	lsls	r1, r2
 8000b36:	4097      	lsls	r7, r2
 8000b38:	ea40 0c01 	orr.w	ip, r0, r1
 8000b3c:	4094      	lsls	r4, r2
 8000b3e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b42:	0c23      	lsrs	r3, r4, #16
 8000b44:	fbbc f6f8 	udiv	r6, ip, r8
 8000b48:	fa1f fe87 	uxth.w	lr, r7
 8000b4c:	fb08 c116 	mls	r1, r8, r6, ip
 8000b50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b54:	fb06 f10e 	mul.w	r1, r6, lr
 8000b58:	4299      	cmp	r1, r3
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x60>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b62:	f080 8119 	bcs.w	8000d98 <__udivmoddi4+0x288>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 8116 	bls.w	8000d98 <__udivmoddi4+0x288>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b78:	fb08 3310 	mls	r3, r8, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d909      	bls.n	8000b9c <__udivmoddi4+0x8c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	f080 8105 	bcs.w	8000d9c <__udivmoddi4+0x28c>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f240 8102 	bls.w	8000d9c <__udivmoddi4+0x28c>
 8000b98:	3802      	subs	r0, #2
 8000b9a:	443c      	add	r4, r7
 8000b9c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba0:	eba4 040e 	sub.w	r4, r4, lr
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	b11d      	cbz	r5, 8000bb0 <__udivmoddi4+0xa0>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	b902      	cbnz	r2, 8000bba <__udivmoddi4+0xaa>
 8000bb8:	deff      	udf	#255	; 0xff
 8000bba:	fab2 f282 	clz	r2, r2
 8000bbe:	2a00      	cmp	r2, #0
 8000bc0:	d150      	bne.n	8000c64 <__udivmoddi4+0x154>
 8000bc2:	1bcb      	subs	r3, r1, r7
 8000bc4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bc8:	fa1f f887 	uxth.w	r8, r7
 8000bcc:	2601      	movs	r6, #1
 8000bce:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bd2:	0c21      	lsrs	r1, r4, #16
 8000bd4:	fb0e 331c 	mls	r3, lr, ip, r3
 8000bd8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000bdc:	fb08 f30c 	mul.w	r3, r8, ip
 8000be0:	428b      	cmp	r3, r1
 8000be2:	d907      	bls.n	8000bf4 <__udivmoddi4+0xe4>
 8000be4:	1879      	adds	r1, r7, r1
 8000be6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bea:	d202      	bcs.n	8000bf2 <__udivmoddi4+0xe2>
 8000bec:	428b      	cmp	r3, r1
 8000bee:	f200 80e9 	bhi.w	8000dc4 <__udivmoddi4+0x2b4>
 8000bf2:	4684      	mov	ip, r0
 8000bf4:	1ac9      	subs	r1, r1, r3
 8000bf6:	b2a3      	uxth	r3, r4
 8000bf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c00:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c04:	fb08 f800 	mul.w	r8, r8, r0
 8000c08:	45a0      	cmp	r8, r4
 8000c0a:	d907      	bls.n	8000c1c <__udivmoddi4+0x10c>
 8000c0c:	193c      	adds	r4, r7, r4
 8000c0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x10a>
 8000c14:	45a0      	cmp	r8, r4
 8000c16:	f200 80d9 	bhi.w	8000dcc <__udivmoddi4+0x2bc>
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	eba4 0408 	sub.w	r4, r4, r8
 8000c20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c24:	e7bf      	b.n	8000ba6 <__udivmoddi4+0x96>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d909      	bls.n	8000c3e <__udivmoddi4+0x12e>
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	f000 80b1 	beq.w	8000d92 <__udivmoddi4+0x282>
 8000c30:	2600      	movs	r6, #0
 8000c32:	e9c5 0100 	strd	r0, r1, [r5]
 8000c36:	4630      	mov	r0, r6
 8000c38:	4631      	mov	r1, r6
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	fab3 f683 	clz	r6, r3
 8000c42:	2e00      	cmp	r6, #0
 8000c44:	d14a      	bne.n	8000cdc <__udivmoddi4+0x1cc>
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d302      	bcc.n	8000c50 <__udivmoddi4+0x140>
 8000c4a:	4282      	cmp	r2, r0
 8000c4c:	f200 80b8 	bhi.w	8000dc0 <__udivmoddi4+0x2b0>
 8000c50:	1a84      	subs	r4, r0, r2
 8000c52:	eb61 0103 	sbc.w	r1, r1, r3
 8000c56:	2001      	movs	r0, #1
 8000c58:	468c      	mov	ip, r1
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	d0a8      	beq.n	8000bb0 <__udivmoddi4+0xa0>
 8000c5e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c62:	e7a5      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000c64:	f1c2 0320 	rsb	r3, r2, #32
 8000c68:	fa20 f603 	lsr.w	r6, r0, r3
 8000c6c:	4097      	lsls	r7, r2
 8000c6e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c72:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c76:	40d9      	lsrs	r1, r3
 8000c78:	4330      	orrs	r0, r6
 8000c7a:	0c03      	lsrs	r3, r0, #16
 8000c7c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c88:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8c:	fb06 f108 	mul.w	r1, r6, r8
 8000c90:	4299      	cmp	r1, r3
 8000c92:	fa04 f402 	lsl.w	r4, r4, r2
 8000c96:	d909      	bls.n	8000cac <__udivmoddi4+0x19c>
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c9e:	f080 808d 	bcs.w	8000dbc <__udivmoddi4+0x2ac>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 808a 	bls.w	8000dbc <__udivmoddi4+0x2ac>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	443b      	add	r3, r7
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b281      	uxth	r1, r0
 8000cb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbc:	fb00 f308 	mul.w	r3, r0, r8
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x1c4>
 8000cc4:	1879      	adds	r1, r7, r1
 8000cc6:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cca:	d273      	bcs.n	8000db4 <__udivmoddi4+0x2a4>
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d971      	bls.n	8000db4 <__udivmoddi4+0x2a4>
 8000cd0:	3802      	subs	r0, #2
 8000cd2:	4439      	add	r1, r7
 8000cd4:	1acb      	subs	r3, r1, r3
 8000cd6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000cda:	e778      	b.n	8000bce <__udivmoddi4+0xbe>
 8000cdc:	f1c6 0c20 	rsb	ip, r6, #32
 8000ce0:	fa03 f406 	lsl.w	r4, r3, r6
 8000ce4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ce8:	431c      	orrs	r4, r3
 8000cea:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cee:	fa01 f306 	lsl.w	r3, r1, r6
 8000cf2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cf6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cfa:	431f      	orrs	r7, r3
 8000cfc:	0c3b      	lsrs	r3, r7, #16
 8000cfe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d02:	fa1f f884 	uxth.w	r8, r4
 8000d06:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d0a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d0e:	fb09 fa08 	mul.w	sl, r9, r8
 8000d12:	458a      	cmp	sl, r1
 8000d14:	fa02 f206 	lsl.w	r2, r2, r6
 8000d18:	fa00 f306 	lsl.w	r3, r0, r6
 8000d1c:	d908      	bls.n	8000d30 <__udivmoddi4+0x220>
 8000d1e:	1861      	adds	r1, r4, r1
 8000d20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d24:	d248      	bcs.n	8000db8 <__udivmoddi4+0x2a8>
 8000d26:	458a      	cmp	sl, r1
 8000d28:	d946      	bls.n	8000db8 <__udivmoddi4+0x2a8>
 8000d2a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d2e:	4421      	add	r1, r4
 8000d30:	eba1 010a 	sub.w	r1, r1, sl
 8000d34:	b2bf      	uxth	r7, r7
 8000d36:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d3a:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d3e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d42:	fb00 f808 	mul.w	r8, r0, r8
 8000d46:	45b8      	cmp	r8, r7
 8000d48:	d907      	bls.n	8000d5a <__udivmoddi4+0x24a>
 8000d4a:	19e7      	adds	r7, r4, r7
 8000d4c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d50:	d22e      	bcs.n	8000db0 <__udivmoddi4+0x2a0>
 8000d52:	45b8      	cmp	r8, r7
 8000d54:	d92c      	bls.n	8000db0 <__udivmoddi4+0x2a0>
 8000d56:	3802      	subs	r0, #2
 8000d58:	4427      	add	r7, r4
 8000d5a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d5e:	eba7 0708 	sub.w	r7, r7, r8
 8000d62:	fba0 8902 	umull	r8, r9, r0, r2
 8000d66:	454f      	cmp	r7, r9
 8000d68:	46c6      	mov	lr, r8
 8000d6a:	4649      	mov	r1, r9
 8000d6c:	d31a      	bcc.n	8000da4 <__udivmoddi4+0x294>
 8000d6e:	d017      	beq.n	8000da0 <__udivmoddi4+0x290>
 8000d70:	b15d      	cbz	r5, 8000d8a <__udivmoddi4+0x27a>
 8000d72:	ebb3 020e 	subs.w	r2, r3, lr
 8000d76:	eb67 0701 	sbc.w	r7, r7, r1
 8000d7a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d7e:	40f2      	lsrs	r2, r6
 8000d80:	ea4c 0202 	orr.w	r2, ip, r2
 8000d84:	40f7      	lsrs	r7, r6
 8000d86:	e9c5 2700 	strd	r2, r7, [r5]
 8000d8a:	2600      	movs	r6, #0
 8000d8c:	4631      	mov	r1, r6
 8000d8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d92:	462e      	mov	r6, r5
 8000d94:	4628      	mov	r0, r5
 8000d96:	e70b      	b.n	8000bb0 <__udivmoddi4+0xa0>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	e6e9      	b.n	8000b70 <__udivmoddi4+0x60>
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	e6fd      	b.n	8000b9c <__udivmoddi4+0x8c>
 8000da0:	4543      	cmp	r3, r8
 8000da2:	d2e5      	bcs.n	8000d70 <__udivmoddi4+0x260>
 8000da4:	ebb8 0e02 	subs.w	lr, r8, r2
 8000da8:	eb69 0104 	sbc.w	r1, r9, r4
 8000dac:	3801      	subs	r0, #1
 8000dae:	e7df      	b.n	8000d70 <__udivmoddi4+0x260>
 8000db0:	4608      	mov	r0, r1
 8000db2:	e7d2      	b.n	8000d5a <__udivmoddi4+0x24a>
 8000db4:	4660      	mov	r0, ip
 8000db6:	e78d      	b.n	8000cd4 <__udivmoddi4+0x1c4>
 8000db8:	4681      	mov	r9, r0
 8000dba:	e7b9      	b.n	8000d30 <__udivmoddi4+0x220>
 8000dbc:	4666      	mov	r6, ip
 8000dbe:	e775      	b.n	8000cac <__udivmoddi4+0x19c>
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	e74a      	b.n	8000c5a <__udivmoddi4+0x14a>
 8000dc4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dc8:	4439      	add	r1, r7
 8000dca:	e713      	b.n	8000bf4 <__udivmoddi4+0xe4>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	e724      	b.n	8000c1c <__udivmoddi4+0x10c>
 8000dd2:	bf00      	nop

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <AT24CXX_Init>:
//All rights reserved
//////////////////////////////////////////////////////////////////////////////////

//初始化IIC接口
void AT24CXX_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	IIC_Init();//IIC初始化
 8000ddc:	f005 f9b0 	bl	8006140 <IIC_Init>
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <AT24CXX_ReadOneByte>:
//在AT24CXX指定地址读出一个数据
//ReadAddr:开始读数的地址
//返回值  :读到的数据
u8 AT24CXX_ReadOneByte(u16 ReadAddr)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	80fb      	strh	r3, [r7, #6]
	u8 temp=0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	73fb      	strb	r3, [r7, #15]
    IIC_Start();
 8000df2:	f005 f9b7 	bl	8006164 <IIC_Start>
	if(EE_TYPE>AT24C16)
	{
		IIC_Send_Byte(0XA0);	   //发送写命令
		IIC_Wait_Ack();
		IIC_Send_Byte(ReadAddr>>8);//发送高地址
	}else IIC_Send_Byte(0XA0+((ReadAddr/256)<<1));   //发送器件地址0XA0,写数据
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	b2db      	uxtb	r3, r3
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	3b60      	subs	r3, #96	; 0x60
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	f005 fa86 	bl	8006318 <IIC_Send_Byte>
	IIC_Wait_Ack();
 8000e0c:	f005 f9fa 	bl	8006204 <IIC_Wait_Ack>
    IIC_Send_Byte(ReadAddr%256);   //发送低地址
 8000e10:	88fb      	ldrh	r3, [r7, #6]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	4618      	mov	r0, r3
 8000e16:	f005 fa7f 	bl	8006318 <IIC_Send_Byte>
	IIC_Wait_Ack();
 8000e1a:	f005 f9f3 	bl	8006204 <IIC_Wait_Ack>
	IIC_Start();
 8000e1e:	f005 f9a1 	bl	8006164 <IIC_Start>
	IIC_Send_Byte(0XA1);           //进入接收模式
 8000e22:	20a1      	movs	r0, #161	; 0xa1
 8000e24:	f005 fa78 	bl	8006318 <IIC_Send_Byte>
	IIC_Wait_Ack();
 8000e28:	f005 f9ec 	bl	8006204 <IIC_Wait_Ack>
    temp=IIC_Read_Byte(0);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f005 fab3 	bl	8006398 <IIC_Read_Byte>
 8000e32:	4603      	mov	r3, r0
 8000e34:	73fb      	strb	r3, [r7, #15]
    IIC_Stop();//产生一个停止条件
 8000e36:	f005 f9bd 	bl	80061b4 <IIC_Stop>
	return temp;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3710      	adds	r7, #16
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <AT24CXX_WriteOneByte>:
//在AT24CXX指定地址写入一个数据
//WriteAddr  :写入数据的目的地址
//DataToWrite:要写入的数据
void AT24CXX_WriteOneByte(u16 WriteAddr,u8 DataToWrite)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	460a      	mov	r2, r1
 8000e4e:	80fb      	strh	r3, [r7, #6]
 8000e50:	4613      	mov	r3, r2
 8000e52:	717b      	strb	r3, [r7, #5]
    IIC_Start();
 8000e54:	f005 f986 	bl	8006164 <IIC_Start>
	if(EE_TYPE>AT24C16)
	{
		IIC_Send_Byte(0XA0);	    //发送写命令
		IIC_Wait_Ack();
		IIC_Send_Byte(WriteAddr>>8);//发送高地址
	}else IIC_Send_Byte(0XA0+((WriteAddr/256)<<1));   //发送器件地址0XA0,写数据
 8000e58:	88fb      	ldrh	r3, [r7, #6]
 8000e5a:	0a1b      	lsrs	r3, r3, #8
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	3b60      	subs	r3, #96	; 0x60
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f005 fa55 	bl	8006318 <IIC_Send_Byte>
	IIC_Wait_Ack();
 8000e6e:	f005 f9c9 	bl	8006204 <IIC_Wait_Ack>
    IIC_Send_Byte(WriteAddr%256);   //发送低地址
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	b2db      	uxtb	r3, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f005 fa4e 	bl	8006318 <IIC_Send_Byte>
	IIC_Wait_Ack();
 8000e7c:	f005 f9c2 	bl	8006204 <IIC_Wait_Ack>
	IIC_Send_Byte(DataToWrite);     //发送字节
 8000e80:	797b      	ldrb	r3, [r7, #5]
 8000e82:	4618      	mov	r0, r3
 8000e84:	f005 fa48 	bl	8006318 <IIC_Send_Byte>
	IIC_Wait_Ack();
 8000e88:	f005 f9bc 	bl	8006204 <IIC_Wait_Ack>
    IIC_Stop();//产生一个停止条件
 8000e8c:	f005 f992 	bl	80061b4 <IIC_Stop>
	delay_ms(10);
 8000e90:	200a      	movs	r0, #10
 8000e92:	f000 f8ab 	bl	8000fec <delay_ms>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <AT24CXX_WriteLenByte>:
//该函数用于写入16bit或者32bit的数据.
//WriteAddr  :开始写入的地址
//DataToWrite:数据数组首地址
//Len        :要写入数据的长度2,4
void AT24CXX_WriteLenByte(u16 WriteAddr,u32 DataToWrite,u8 Len)
{
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b084      	sub	sp, #16
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	6039      	str	r1, [r7, #0]
 8000ea8:	80fb      	strh	r3, [r7, #6]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	717b      	strb	r3, [r7, #5]
	u8 t;
	for(t=0;t<Len;t++)
 8000eae:	2300      	movs	r3, #0
 8000eb0:	73fb      	strb	r3, [r7, #15]
 8000eb2:	e010      	b.n	8000ed6 <AT24CXX_WriteLenByte+0x38>
	{
		AT24CXX_WriteOneByte(WriteAddr+t,(DataToWrite>>(8*t))&0xff);
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	4413      	add	r3, r2
 8000ebc:	b298      	uxth	r0, r3
 8000ebe:	7bfb      	ldrb	r3, [r7, #15]
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	683a      	ldr	r2, [r7, #0]
 8000ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f7ff ffba 	bl	8000e44 <AT24CXX_WriteOneByte>
	for(t=0;t<Len;t++)
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	7bfa      	ldrb	r2, [r7, #15]
 8000ed8:	797b      	ldrb	r3, [r7, #5]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d3ea      	bcc.n	8000eb4 <AT24CXX_WriteLenByte+0x16>
	}
}
 8000ede:	bf00      	nop
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <AT24CXX_ReadLenByte>:
//该函数用于读出16bit或者32bit的数据.
//ReadAddr   :开始读出的地址
//返回值     :数据
//Len        :要读出数据的长度2,4
u32 AT24CXX_ReadLenByte(u16 ReadAddr,u8 Len)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	460a      	mov	r2, r1
 8000ef2:	80fb      	strh	r3, [r7, #6]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	717b      	strb	r3, [r7, #5]
	u8 t;
	u32 temp=0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60bb      	str	r3, [r7, #8]
	for(t=0;t<Len;t++)
 8000efc:	2300      	movs	r3, #0
 8000efe:	73fb      	strb	r3, [r7, #15]
 8000f00:	e018      	b.n	8000f34 <AT24CXX_ReadLenByte+0x4c>
	{
		temp<<=8;
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	60bb      	str	r3, [r7, #8]
		temp+=AT24CXX_ReadOneByte(ReadAddr+Len-t-1);
 8000f08:	797b      	ldrb	r3, [r7, #5]
 8000f0a:	b29a      	uxth	r2, r3
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	4413      	add	r3, r2
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	3b01      	subs	r3, #1
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff60 	bl	8000de4 <AT24CXX_ReadOneByte>
 8000f24:	4603      	mov	r3, r0
 8000f26:	461a      	mov	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<Len;t++)
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	3301      	adds	r3, #1
 8000f32:	73fb      	strb	r3, [r7, #15]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	797b      	ldrb	r3, [r7, #5]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d3e2      	bcc.n	8000f02 <AT24CXX_ReadLenByte+0x1a>
	}
	return temp;
 8000f3c:	68bb      	ldr	r3, [r7, #8]
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3710      	adds	r7, #16
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <delay_init>:
static u8 fac_us = 0; //us延时倍乘数
//初始化延迟函数
//SYSTICK的时钟固定为HCLK时钟的1/8
//SYSCLK:系统时钟
void delay_init(u8 SYSCLK)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
    HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK); //SysTick频率为HCLK
 8000f52:	2004      	movs	r0, #4
 8000f54:	f006 fd7c 	bl	8007a50 <HAL_SYSTICK_CLKSourceConfig>
    fac_us = SYSCLK;
 8000f58:	4a03      	ldr	r2, [pc, #12]	; (8000f68 <delay_init+0x20>)
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	7013      	strb	r3, [r2, #0]
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200000cc 	.word	0x200000cc

08000f6c <delay_us>:
    {
        ;
    } while (--t);
}
void delay_us(u32 nus)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	; 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
    u32 ticks;
    u32 told, tnow, tcnt = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61bb      	str	r3, [r7, #24]
    u32 reload = SysTick->LOAD; //LOAD的值
 8000f78:	4b1a      	ldr	r3, [pc, #104]	; (8000fe4 <delay_us+0x78>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	617b      	str	r3, [r7, #20]
    ticks = nus * fac_us;       //需要的节拍数
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <delay_us+0x7c>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	fb02 f303 	mul.w	r3, r2, r3
 8000f8a:	613b      	str	r3, [r7, #16]
    told = SysTick->VAL;        //刚进⼊时的计数器值
 8000f8c:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <delay_us+0x78>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <delay_us+0x78>)
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	60fb      	str	r3, [r7, #12]
        if (tnow != told)
 8000f98:	68fa      	ldr	r2, [r7, #12]
 8000f9a:	69fb      	ldr	r3, [r7, #28]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d0f8      	beq.n	8000f92 <delay_us+0x26>
        {
            if (tnow < told)
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	d206      	bcs.n	8000fb6 <delay_us+0x4a>
                tcnt += told - tnow; //这⾥注意⼀下SYSTICK是⼀个递减的计数器就可以了.
 8000fa8:	69fa      	ldr	r2, [r7, #28]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
 8000fb4:	e007      	b.n	8000fc6 <delay_us+0x5a>
            else
                tcnt += reload - tnow + told;
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	1ad2      	subs	r2, r2, r3
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
            told = tnow;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d200      	bcs.n	8000fd4 <delay_us+0x68>
        tnow = SysTick->VAL;
 8000fd2:	e7de      	b.n	8000f92 <delay_us+0x26>
                break; //时间超过/等于要延迟的时间,则退出.
 8000fd4:	bf00      	nop
        }
    };
}
 8000fd6:	bf00      	nop
 8000fd8:	3724      	adds	r7, #36	; 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e010 	.word	0xe000e010
 8000fe8:	200000cc 	.word	0x200000cc

08000fec <delay_ms>:
//延时nms
//nms:要延时的ms数
void delay_ms(u16 nms)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	80fb      	strh	r3, [r7, #6]
    u32 i;
    for (i = 0; i < nms; i++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	e006      	b.n	800100a <delay_ms+0x1e>
        delay_us(1000);
 8000ffc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001000:	f7ff ffb4 	bl	8000f6c <delay_us>
    for (i = 0; i < nms; i++)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	429a      	cmp	r2, r3
 8001010:	d3f4      	bcc.n	8000ffc <delay_ms+0x10>
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001022:	463b      	mov	r3, r7
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_DAC_Init+0x4c>)
 800102c:	4a0f      	ldr	r2, [pc, #60]	; (800106c <MX_DAC_Init+0x50>)
 800102e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001030:	480d      	ldr	r0, [pc, #52]	; (8001068 <MX_DAC_Init+0x4c>)
 8001032:	f006 fd29 	bl	8007a88 <HAL_DAC_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800103c:	f005 f87a 	bl	8006134 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001040:	2300      	movs	r3, #0
 8001042:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001048:	463b      	mov	r3, r7
 800104a:	2200      	movs	r2, #0
 800104c:	4619      	mov	r1, r3
 800104e:	4806      	ldr	r0, [pc, #24]	; (8001068 <MX_DAC_Init+0x4c>)
 8001050:	f006 fd8e 	bl	8007b70 <HAL_DAC_ConfigChannel>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800105a:	f005 f86b 	bl	8006134 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200000dc 	.word	0x200000dc
 800106c:	40007400 	.word	0x40007400

08001070 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a17      	ldr	r2, [pc, #92]	; (80010ec <HAL_DAC_MspInit+0x7c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d127      	bne.n	80010e2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_DAC_MspInit+0x80>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <HAL_DAC_MspInit+0x80>)
 800109c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_DAC_MspInit+0x80>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_DAC_MspInit+0x80>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <HAL_DAC_MspInit+0x80>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_DAC_MspInit+0x80>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80010ca:	2330      	movs	r3, #48	; 0x30
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ce:	2303      	movs	r3, #3
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <HAL_DAC_MspInit+0x84>)
 80010de:	f006 fd97 	bl	8007c10 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40007400 	.word	0x40007400
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000

080010f8 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08e      	sub	sp, #56	; 0x38
 80010fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80010fe:	f107 031c 	add.w	r3, r7, #28
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
 800110c:	611a      	str	r2, [r3, #16]
 800110e:	615a      	str	r2, [r3, #20]
 8001110:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
 8001120:	615a      	str	r2, [r3, #20]
 8001122:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001124:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <MX_FSMC_Init+0xec>)
 8001126:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800112a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800112c:	4b2d      	ldr	r3, [pc, #180]	; (80011e4 <MX_FSMC_Init+0xec>)
 800112e:	4a2e      	ldr	r2, [pc, #184]	; (80011e8 <MX_FSMC_Init+0xf0>)
 8001130:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 8001132:	4b2c      	ldr	r3, [pc, #176]	; (80011e4 <MX_FSMC_Init+0xec>)
 8001134:	2206      	movs	r2, #6
 8001136:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001138:	4b2a      	ldr	r3, [pc, #168]	; (80011e4 <MX_FSMC_Init+0xec>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800113e:	4b29      	ldr	r3, [pc, #164]	; (80011e4 <MX_FSMC_Init+0xec>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001144:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <MX_FSMC_Init+0xec>)
 8001146:	2210      	movs	r2, #16
 8001148:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800114a:	4b26      	ldr	r3, [pc, #152]	; (80011e4 <MX_FSMC_Init+0xec>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001150:	4b24      	ldr	r3, [pc, #144]	; (80011e4 <MX_FSMC_Init+0xec>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001156:	4b23      	ldr	r3, [pc, #140]	; (80011e4 <MX_FSMC_Init+0xec>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800115c:	4b21      	ldr	r3, [pc, #132]	; (80011e4 <MX_FSMC_Init+0xec>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001162:	4b20      	ldr	r3, [pc, #128]	; (80011e4 <MX_FSMC_Init+0xec>)
 8001164:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001168:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800116a:	4b1e      	ldr	r3, [pc, #120]	; (80011e4 <MX_FSMC_Init+0xec>)
 800116c:	2200      	movs	r2, #0
 800116e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <MX_FSMC_Init+0xec>)
 8001172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001176:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001178:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_FSMC_Init+0xec>)
 800117a:	2200      	movs	r2, #0
 800117c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <MX_FSMC_Init+0xec>)
 8001180:	2200      	movs	r2, #0
 8001182:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001184:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_FSMC_Init+0xec>)
 8001186:	2200      	movs	r2, #0
 8001188:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0x0f;
 800118a:	230f      	movs	r3, #15
 800118c:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800118e:	230f      	movs	r3, #15
 8001190:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001192:	233c      	movs	r3, #60	; 0x3c
 8001194:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8001196:	2300      	movs	r3, #0
 8001198:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800119a:	2310      	movs	r3, #16
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 800119e:	2311      	movs	r3, #17
 80011a0:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80011a2:	2300      	movs	r3, #0
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 80011a6:	2309      	movs	r3, #9
 80011a8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80011aa:	230f      	movs	r3, #15
 80011ac:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 8;
 80011ae:	2308      	movs	r3, #8
 80011b0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80011b6:	2310      	movs	r3, #16
 80011b8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80011ba:	2311      	movs	r3, #17
 80011bc:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80011be:	2300      	movs	r3, #0
 80011c0:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80011c2:	463a      	mov	r2, r7
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	; (80011e4 <MX_FSMC_Init+0xec>)
 80011cc:	f007 fb16 	bl	80087fc <HAL_SRAM_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80011d6:	f004 ffad 	bl	8006134 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80011da:	bf00      	nop
 80011dc:	3738      	adds	r7, #56	; 0x38
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000f0 	.word	0x200000f0
 80011e8:	a0000104 	.word	0xa0000104

080011ec <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
 80011fc:	60da      	str	r2, [r3, #12]
 80011fe:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001200:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <HAL_FSMC_MspInit+0xc8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d151      	bne.n	80012ac <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <HAL_FSMC_MspInit+0xc8>)
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <HAL_FSMC_MspInit+0xcc>)
 8001214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001216:	4a28      	ldr	r2, [pc, #160]	; (80012b8 <HAL_FSMC_MspInit+0xcc>)
 8001218:	f043 0301 	orr.w	r3, r3, #1
 800121c:	6393      	str	r3, [r2, #56]	; 0x38
 800121e:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <HAL_FSMC_MspInit+0xcc>)
 8001220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001234:	2301      	movs	r3, #1
 8001236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800123c:	230c      	movs	r3, #12
 800123e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	4619      	mov	r1, r3
 8001244:	481d      	ldr	r0, [pc, #116]	; (80012bc <HAL_FSMC_MspInit+0xd0>)
 8001246:	f006 fce3 	bl	8007c10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800124a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800124e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001254:	2301      	movs	r3, #1
 8001256:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800125c:	230c      	movs	r3, #12
 800125e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001260:	1d3b      	adds	r3, r7, #4
 8001262:	4619      	mov	r1, r3
 8001264:	4816      	ldr	r0, [pc, #88]	; (80012c0 <HAL_FSMC_MspInit+0xd4>)
 8001266:	f006 fcd3 	bl	8007c10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800126a:	f24c 7333 	movw	r3, #50995	; 0xc733
 800126e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001274:	2301      	movs	r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800127c:	230c      	movs	r3, #12
 800127e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001280:	1d3b      	adds	r3, r7, #4
 8001282:	4619      	mov	r1, r3
 8001284:	480f      	ldr	r0, [pc, #60]	; (80012c4 <HAL_FSMC_MspInit+0xd8>)
 8001286:	f006 fcc3 	bl	8007c10 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001294:	2301      	movs	r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001298:	2303      	movs	r3, #3
 800129a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800129c:	230c      	movs	r3, #12
 800129e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012a0:	1d3b      	adds	r3, r7, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4808      	ldr	r0, [pc, #32]	; (80012c8 <HAL_FSMC_MspInit+0xdc>)
 80012a6:	f006 fcb3 	bl	8007c10 <HAL_GPIO_Init>
 80012aa:	e000      	b.n	80012ae <HAL_FSMC_MspInit+0xc2>
    return;
 80012ac:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80012ae:	3718      	adds	r7, #24
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200000d0 	.word	0x200000d0
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40021400 	.word	0x40021400
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40020c00 	.word	0x40020c00
 80012c8:	40021800 	.word	0x40021800

080012cc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80012d4:	f7ff ff8a 	bl	80011ec <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80012d8:	bf00      	nop
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08e      	sub	sp, #56	; 0x38
 80012e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
 80012fa:	4b76      	ldr	r3, [pc, #472]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a75      	ldr	r2, [pc, #468]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 8001300:	f043 0310 	orr.w	r3, r3, #16
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b73      	ldr	r3, [pc, #460]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f003 0310 	and.w	r3, r3, #16
 800130e:	623b      	str	r3, [r7, #32]
 8001310:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
 8001316:	4b6f      	ldr	r3, [pc, #444]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	4a6e      	ldr	r2, [pc, #440]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	; 0x30
 8001322:	4b6c      	ldr	r3, [pc, #432]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
 8001332:	4b68      	ldr	r3, [pc, #416]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a67      	ldr	r2, [pc, #412]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 8001338:	f043 0320 	orr.w	r3, r3, #32
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b65      	ldr	r3, [pc, #404]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0320 	and.w	r3, r3, #32
 8001346:	61bb      	str	r3, [r7, #24]
 8001348:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
 800134e:	4b61      	ldr	r3, [pc, #388]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	4a60      	ldr	r2, [pc, #384]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 8001354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001358:	6313      	str	r3, [r2, #48]	; 0x30
 800135a:	4b5e      	ldr	r3, [pc, #376]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001362:	617b      	str	r3, [r7, #20]
 8001364:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
 800136a:	4b5a      	ldr	r3, [pc, #360]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a59      	ldr	r2, [pc, #356]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b57      	ldr	r3, [pc, #348]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60fb      	str	r3, [r7, #12]
 8001386:	4b53      	ldr	r3, [pc, #332]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a52      	ldr	r2, [pc, #328]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b50      	ldr	r3, [pc, #320]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b4c      	ldr	r3, [pc, #304]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a4b      	ldr	r2, [pc, #300]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 80013a8:	f043 0308 	orr.w	r3, r3, #8
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b49      	ldr	r3, [pc, #292]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	4b45      	ldr	r3, [pc, #276]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a44      	ldr	r2, [pc, #272]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 80013c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b42      	ldr	r3, [pc, #264]	; (80014d4 <MX_GPIO_Init+0x1f4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TCS_GPIO_Port, TCS_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013dc:	483e      	ldr	r0, [pc, #248]	; (80014d8 <MX_GPIO_Init+0x1f8>)
 80013de:	f006 fdb3 	bl	8007f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80013e2:	2201      	movs	r2, #1
 80013e4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80013e8:	483c      	ldr	r0, [pc, #240]	; (80014dc <MX_GPIO_Init+0x1fc>)
 80013ea:	f006 fdad 	bl	8007f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TCLK_Pin|LCD_BL_Pin|IIC_SCL_Pin|IIC_SDA_Pin, GPIO_PIN_RESET);
 80013ee:	2200      	movs	r2, #0
 80013f0:	f248 3101 	movw	r1, #33537	; 0x8301
 80013f4:	483a      	ldr	r0, [pc, #232]	; (80014e0 <MX_GPIO_Init+0x200>)
 80013f6:	f006 fda7 	bl	8007f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TDIN_GPIO_Port, TDIN_Pin, GPIO_PIN_RESET);
 80013fa:	2200      	movs	r2, #0
 80013fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001400:	4836      	ldr	r0, [pc, #216]	; (80014dc <MX_GPIO_Init+0x1fc>)
 8001402:	f006 fda1 	bl	8007f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin|KEY2_Pin;
 8001406:	231c      	movs	r3, #28
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800140e:	2301      	movs	r3, #1
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4832      	ldr	r0, [pc, #200]	; (80014e4 <MX_GPIO_Init+0x204>)
 800141a:	f006 fbf9 	bl	8007c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TCS_Pin;
 800141e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142c:	2300      	movs	r3, #0
 800142e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TCS_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	4619      	mov	r1, r3
 8001436:	4828      	ldr	r0, [pc, #160]	; (80014d8 <MX_GPIO_Init+0x1f8>)
 8001438:	f006 fbea 	bl	8007c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 800143c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001440:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001446:	2301      	movs	r3, #1
 8001448:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800144a:	2303      	movs	r3, #3
 800144c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800144e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001452:	4619      	mov	r1, r3
 8001454:	4821      	ldr	r0, [pc, #132]	; (80014dc <MX_GPIO_Init+0x1fc>)
 8001456:	f006 fbdb 	bl	8007c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TCLK_Pin|IIC_SCL_Pin|IIC_SDA_Pin;
 800145a:	f240 3301 	movw	r3, #769	; 0x301
 800145e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001460:	2301      	movs	r3, #1
 8001462:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001464:	2301      	movs	r3, #1
 8001466:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001470:	4619      	mov	r1, r3
 8001472:	481b      	ldr	r0, [pc, #108]	; (80014e0 <MX_GPIO_Init+0x200>)
 8001474:	f006 fbcc 	bl	8007c10 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PEN_Pin|DOUT_Pin;
 8001478:	2306      	movs	r3, #6
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	2300      	movs	r3, #0
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001480:	2301      	movs	r3, #1
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	4815      	ldr	r0, [pc, #84]	; (80014e0 <MX_GPIO_Init+0x200>)
 800148c:	f006 fbc0 	bl	8007c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TDIN_Pin;
 8001490:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TDIN_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <MX_GPIO_Init+0x1fc>)
 80014aa:	f006 fbb1 	bl	8007c10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80014ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80014bc:	2301      	movs	r3, #1
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c4:	4619      	mov	r1, r3
 80014c6:	4806      	ldr	r0, [pc, #24]	; (80014e0 <MX_GPIO_Init+0x200>)
 80014c8:	f006 fba2 	bl	8007c10 <HAL_GPIO_Init>

}
 80014cc:	bf00      	nop
 80014ce:	3738      	adds	r7, #56	; 0x38
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020800 	.word	0x40020800
 80014dc:	40021400 	.word	0x40021400
 80014e0:	40020400 	.word	0x40020400
 80014e4:	40021000 	.word	0x40021000

080014e8 <LCD_WR_REG>:
_lcd_dev lcddev;

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(__IO uint16_t regval)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
	regval=regval;		//使用-O2优化的时候,必须插入的延时
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=regval;//写入要写的寄存器序号
 80014f8:	4b04      	ldr	r3, [pc, #16]	; (800150c <LCD_WR_REG+0x24>)
 80014fa:	88fa      	ldrh	r2, [r7, #6]
 80014fc:	b292      	uxth	r2, r2
 80014fe:	801a      	strh	r2, [r3, #0]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	6c00007e 	.word	0x6c00007e

08001510 <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(__IO uint16_t data)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
	data=data;			//使用-O2优化的时候,必须插入的延时
 800151a:	88fb      	ldrh	r3, [r7, #6]
 800151c:	b29b      	uxth	r3, r3
 800151e:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <LCD_WR_DATA+0x24>)
 8001522:	88fa      	ldrh	r2, [r7, #6]
 8001524:	b292      	uxth	r2, r2
 8001526:	805a      	strh	r2, [r3, #2]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	6c00007e 	.word	0x6c00007e

08001538 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//防止被优化
	ram=LCD->LCD_RAM;
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <LCD_RD_DATA+0x20>)
 8001540:	885b      	ldrh	r3, [r3, #2]
 8001542:	b29b      	uxth	r3, r3
 8001544:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	b29b      	uxth	r3, r3
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	6c00007e 	.word	0x6c00007e

0800155c <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	4603      	mov	r3, r0
 8001564:	460a      	mov	r2, r1
 8001566:	80fb      	strh	r3, [r7, #6]
 8001568:	4613      	mov	r3, r2
 800156a:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 800156c:	4a05      	ldr	r2, [pc, #20]	; (8001584 <LCD_WriteReg+0x28>)
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = LCD_RegValue;//写入数据
 8001572:	4a04      	ldr	r2, [pc, #16]	; (8001584 <LCD_WriteReg+0x28>)
 8001574:	88bb      	ldrh	r3, [r7, #4]
 8001576:	8053      	strh	r3, [r2, #2]
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	6c00007e 	.word	0x6c00007e

08001588 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器地址
//返回值:读到的数据
uint16_t LCD_ReadReg(uint16_t LCD_Reg)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);		//写入要读的寄存器序号
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	4618      	mov	r0, r3
 8001596:	f7ff ffa7 	bl	80014e8 <LCD_WR_REG>
	delay_us(5);
 800159a:	2005      	movs	r0, #5
 800159c:	f7ff fce6 	bl	8000f6c <delay_us>
	return LCD_RD_DATA();		//返回读到的值
 80015a0:	f7ff ffca 	bl	8001538 <LCD_RD_DATA>
 80015a4:	4603      	mov	r3, r0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
 	LCD->LCD_REG=lcddev.wramcmd;
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <LCD_WriteRAM_Prepare+0x18>)
 80015b6:	4a05      	ldr	r2, [pc, #20]	; (80015cc <LCD_WriteRAM_Prepare+0x1c>)
 80015b8:	8912      	ldrh	r2, [r2, #8]
 80015ba:	801a      	strh	r2, [r3, #0]
}
 80015bc:	bf00      	nop
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	6c00007e 	.word	0x6c00007e
 80015cc:	20000140 	.word	0x20000140

080015d0 <LCD_SetCursor>:
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	460a      	mov	r2, r1
 80015da:	80fb      	strh	r3, [r7, #6]
 80015dc:	4613      	mov	r3, r2
 80015de:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 80015e0:	4b92      	ldr	r3, [pc, #584]	; (800182c <LCD_SetCursor+0x25c>)
 80015e2:	889b      	ldrh	r3, [r3, #4]
 80015e4:	f249 3241 	movw	r2, #37697	; 0x9341
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d005      	beq.n	80015f8 <LCD_SetCursor+0x28>
 80015ec:	4b8f      	ldr	r3, [pc, #572]	; (800182c <LCD_SetCursor+0x25c>)
 80015ee:	889b      	ldrh	r3, [r3, #4]
 80015f0:	f245 3210 	movw	r2, #21264	; 0x5310
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d122      	bne.n	800163e <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 80015f8:	4b8c      	ldr	r3, [pc, #560]	; (800182c <LCD_SetCursor+0x25c>)
 80015fa:	895b      	ldrh	r3, [r3, #10]
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff73 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	0a1b      	lsrs	r3, r3, #8
 8001606:	b29b      	uxth	r3, r3
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff81 	bl	8001510 <LCD_WR_DATA>
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	b2db      	uxtb	r3, r3
 8001612:	b29b      	uxth	r3, r3
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff7b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800161a:	4b84      	ldr	r3, [pc, #528]	; (800182c <LCD_SetCursor+0x25c>)
 800161c:	899b      	ldrh	r3, [r3, #12]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ff62 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8001624:	88bb      	ldrh	r3, [r7, #4]
 8001626:	0a1b      	lsrs	r3, r3, #8
 8001628:	b29b      	uxth	r3, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff ff70 	bl	8001510 <LCD_WR_DATA>
 8001630:	88bb      	ldrh	r3, [r7, #4]
 8001632:	b2db      	uxtb	r3, r3
 8001634:	b29b      	uxth	r3, r3
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ff6a 	bl	8001510 <LCD_WR_DATA>
	{
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 800163c:	e0f1      	b.n	8001822 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X6804)
 800163e:	4b7b      	ldr	r3, [pc, #492]	; (800182c <LCD_SetCursor+0x25c>)
 8001640:	889b      	ldrh	r3, [r3, #4]
 8001642:	f646 0204 	movw	r2, #26628	; 0x6804
 8001646:	4293      	cmp	r3, r2
 8001648:	d12d      	bne.n	80016a6 <LCD_SetCursor+0xd6>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏时处理
 800164a:	4b78      	ldr	r3, [pc, #480]	; (800182c <LCD_SetCursor+0x25c>)
 800164c:	799b      	ldrb	r3, [r3, #6]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d106      	bne.n	8001660 <LCD_SetCursor+0x90>
 8001652:	4b76      	ldr	r3, [pc, #472]	; (800182c <LCD_SetCursor+0x25c>)
 8001654:	881a      	ldrh	r2, [r3, #0]
 8001656:	88fb      	ldrh	r3, [r7, #6]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	b29b      	uxth	r3, r3
 800165c:	3b01      	subs	r3, #1
 800165e:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001660:	4b72      	ldr	r3, [pc, #456]	; (800182c <LCD_SetCursor+0x25c>)
 8001662:	895b      	ldrh	r3, [r3, #10]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff3f 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 800166a:	88fb      	ldrh	r3, [r7, #6]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	b29b      	uxth	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff4d 	bl	8001510 <LCD_WR_DATA>
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	b2db      	uxtb	r3, r3
 800167a:	b29b      	uxth	r3, r3
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff47 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001682:	4b6a      	ldr	r3, [pc, #424]	; (800182c <LCD_SetCursor+0x25c>)
 8001684:	899b      	ldrh	r3, [r3, #12]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff2e 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 800168c:	88bb      	ldrh	r3, [r7, #4]
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	b29b      	uxth	r3, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff3c 	bl	8001510 <LCD_WR_DATA>
 8001698:	88bb      	ldrh	r3, [r7, #4]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	b29b      	uxth	r3, r3
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ff36 	bl	8001510 <LCD_WR_DATA>
}
 80016a4:	e0bd      	b.n	8001822 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X1963)
 80016a6:	4b61      	ldr	r3, [pc, #388]	; (800182c <LCD_SetCursor+0x25c>)
 80016a8:	889b      	ldrh	r3, [r3, #4]
 80016aa:	f641 1263 	movw	r2, #6499	; 0x1963
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d167      	bne.n	8001782 <LCD_SetCursor+0x1b2>
		if(lcddev.dir==0)//x坐标需要变换
 80016b2:	4b5e      	ldr	r3, [pc, #376]	; (800182c <LCD_SetCursor+0x25c>)
 80016b4:	799b      	ldrb	r3, [r3, #6]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d11e      	bne.n	80016f8 <LCD_SetCursor+0x128>
			Xpos=lcddev.width-1-Xpos;
 80016ba:	4b5c      	ldr	r3, [pc, #368]	; (800182c <LCD_SetCursor+0x25c>)
 80016bc:	881a      	ldrh	r2, [r3, #0]
 80016be:	88fb      	ldrh	r3, [r7, #6]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	3b01      	subs	r3, #1
 80016c6:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 80016c8:	4b58      	ldr	r3, [pc, #352]	; (800182c <LCD_SetCursor+0x25c>)
 80016ca:	895b      	ldrh	r3, [r3, #10]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff0b 	bl	80014e8 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80016d2:	2000      	movs	r0, #0
 80016d4:	f7ff ff1c 	bl	8001510 <LCD_WR_DATA>
 80016d8:	2000      	movs	r0, #0
 80016da:	f7ff ff19 	bl	8001510 <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff ff13 	bl	8001510 <LCD_WR_DATA>
 80016ea:	88fb      	ldrh	r3, [r7, #6]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff ff0d 	bl	8001510 <LCD_WR_DATA>
 80016f6:	e021      	b.n	800173c <LCD_SetCursor+0x16c>
			LCD_WR_REG(lcddev.setxcmd);
 80016f8:	4b4c      	ldr	r3, [pc, #304]	; (800182c <LCD_SetCursor+0x25c>)
 80016fa:	895b      	ldrh	r3, [r3, #10]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fef3 	bl	80014e8 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	b29b      	uxth	r3, r3
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff01 	bl	8001510 <LCD_WR_DATA>
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	b29b      	uxth	r3, r3
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff fefb 	bl	8001510 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 800171a:	4b44      	ldr	r3, [pc, #272]	; (800182c <LCD_SetCursor+0x25c>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	3b01      	subs	r3, #1
 8001720:	121b      	asrs	r3, r3, #8
 8001722:	b29b      	uxth	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff fef3 	bl	8001510 <LCD_WR_DATA>
 800172a:	4b40      	ldr	r3, [pc, #256]	; (800182c <LCD_SetCursor+0x25c>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	3b01      	subs	r3, #1
 8001730:	b29b      	uxth	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	b29b      	uxth	r3, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff feea 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800173c:	4b3b      	ldr	r3, [pc, #236]	; (800182c <LCD_SetCursor+0x25c>)
 800173e:	899b      	ldrh	r3, [r3, #12]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff fed1 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8001746:	88bb      	ldrh	r3, [r7, #4]
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	b29b      	uxth	r3, r3
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff fedf 	bl	8001510 <LCD_WR_DATA>
 8001752:	88bb      	ldrh	r3, [r7, #4]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	b29b      	uxth	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fed9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 800175e:	4b33      	ldr	r3, [pc, #204]	; (800182c <LCD_SetCursor+0x25c>)
 8001760:	885b      	ldrh	r3, [r3, #2]
 8001762:	3b01      	subs	r3, #1
 8001764:	121b      	asrs	r3, r3, #8
 8001766:	b29b      	uxth	r3, r3
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fed1 	bl	8001510 <LCD_WR_DATA>
 800176e:	4b2f      	ldr	r3, [pc, #188]	; (800182c <LCD_SetCursor+0x25c>)
 8001770:	885b      	ldrh	r3, [r3, #2]
 8001772:	3b01      	subs	r3, #1
 8001774:	b29b      	uxth	r3, r3
 8001776:	b2db      	uxtb	r3, r3
 8001778:	b29b      	uxth	r3, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f7ff fec8 	bl	8001510 <LCD_WR_DATA>
}
 8001780:	e04f      	b.n	8001822 <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X5510)
 8001782:	4b2a      	ldr	r3, [pc, #168]	; (800182c <LCD_SetCursor+0x25c>)
 8001784:	889b      	ldrh	r3, [r3, #4]
 8001786:	f245 5210 	movw	r2, #21776	; 0x5510
 800178a:	4293      	cmp	r3, r2
 800178c:	d130      	bne.n	80017f0 <LCD_SetCursor+0x220>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 800178e:	4b27      	ldr	r3, [pc, #156]	; (800182c <LCD_SetCursor+0x25c>)
 8001790:	895b      	ldrh	r3, [r3, #10]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fea8 	bl	80014e8 <LCD_WR_REG>
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	0a1b      	lsrs	r3, r3, #8
 800179c:	b29b      	uxth	r3, r3
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff feb6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <LCD_SetCursor+0x25c>)
 80017a6:	895b      	ldrh	r3, [r3, #10]
 80017a8:	3301      	adds	r3, #1
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7ff fe9b 	bl	80014e8 <LCD_WR_REG>
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff fea9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <LCD_SetCursor+0x25c>)
 80017c0:	899b      	ldrh	r3, [r3, #12]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7ff fe90 	bl	80014e8 <LCD_WR_REG>
 80017c8:	88bb      	ldrh	r3, [r7, #4]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fe9e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 80017d4:	4b15      	ldr	r3, [pc, #84]	; (800182c <LCD_SetCursor+0x25c>)
 80017d6:	899b      	ldrh	r3, [r3, #12]
 80017d8:	3301      	adds	r3, #1
 80017da:	b29b      	uxth	r3, r3
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fe83 	bl	80014e8 <LCD_WR_REG>
 80017e2:	88bb      	ldrh	r3, [r7, #4]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fe91 	bl	8001510 <LCD_WR_DATA>
}
 80017ee:	e018      	b.n	8001822 <LCD_SetCursor+0x252>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
 80017f0:	4b0e      	ldr	r3, [pc, #56]	; (800182c <LCD_SetCursor+0x25c>)
 80017f2:	799b      	ldrb	r3, [r3, #6]
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d106      	bne.n	8001806 <LCD_SetCursor+0x236>
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <LCD_SetCursor+0x25c>)
 80017fa:	881a      	ldrh	r2, [r3, #0]
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	b29b      	uxth	r3, r3
 8001802:	3b01      	subs	r3, #1
 8001804:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <LCD_SetCursor+0x25c>)
 8001808:	895b      	ldrh	r3, [r3, #10]
 800180a:	88fa      	ldrh	r2, [r7, #6]
 800180c:	4611      	mov	r1, r2
 800180e:	4618      	mov	r0, r3
 8001810:	f7ff fea4 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8001814:	4b05      	ldr	r3, [pc, #20]	; (800182c <LCD_SetCursor+0x25c>)
 8001816:	899b      	ldrh	r3, [r3, #12]
 8001818:	88ba      	ldrh	r2, [r7, #4]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fe9d 	bl	800155c <LCD_WriteReg>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	20000140 	.word	0x20000140

08001830 <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 800183a:	2300      	movs	r3, #0
 800183c:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 800183e:	2300      	movs	r3, #0
 8001840:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X6804&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8001842:	4b78      	ldr	r3, [pc, #480]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 8001844:	799b      	ldrb	r3, [r3, #6]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d10b      	bne.n	8001862 <LCD_Scan_Dir+0x32>
 800184a:	4b76      	ldr	r3, [pc, #472]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 800184c:	889b      	ldrh	r3, [r3, #4]
 800184e:	f646 0204 	movw	r2, #26628	; 0x6804
 8001852:	4293      	cmp	r3, r2
 8001854:	d005      	beq.n	8001862 <LCD_Scan_Dir+0x32>
 8001856:	4b73      	ldr	r3, [pc, #460]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 8001858:	889b      	ldrh	r3, [r3, #4]
 800185a:	f641 1263 	movw	r2, #6499	; 0x1963
 800185e:	4293      	cmp	r3, r2
 8001860:	d109      	bne.n	8001876 <LCD_Scan_Dir+0x46>
 8001862:	4b70      	ldr	r3, [pc, #448]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 8001864:	799b      	ldrb	r3, [r3, #6]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d134      	bne.n	80018d4 <LCD_Scan_Dir+0xa4>
 800186a:	4b6e      	ldr	r3, [pc, #440]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 800186c:	889b      	ldrh	r3, [r3, #4]
 800186e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001872:	4293      	cmp	r3, r2
 8001874:	d12e      	bne.n	80018d4 <LCD_Scan_Dir+0xa4>
	{
		switch(dir)//方向转换
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	2b07      	cmp	r3, #7
 800187a:	d82c      	bhi.n	80018d6 <LCD_Scan_Dir+0xa6>
 800187c:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <LCD_Scan_Dir+0x54>)
 800187e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001882:	bf00      	nop
 8001884:	080018a5 	.word	0x080018a5
 8001888:	080018ab 	.word	0x080018ab
 800188c:	080018b1 	.word	0x080018b1
 8001890:	080018b7 	.word	0x080018b7
 8001894:	080018bd 	.word	0x080018bd
 8001898:	080018c3 	.word	0x080018c3
 800189c:	080018c9 	.word	0x080018c9
 80018a0:	080018cf 	.word	0x080018cf
		{
			case 0:dir=6;break;
 80018a4:	2306      	movs	r3, #6
 80018a6:	71fb      	strb	r3, [r7, #7]
 80018a8:	e015      	b.n	80018d6 <LCD_Scan_Dir+0xa6>
			case 1:dir=7;break;
 80018aa:	2307      	movs	r3, #7
 80018ac:	71fb      	strb	r3, [r7, #7]
 80018ae:	e012      	b.n	80018d6 <LCD_Scan_Dir+0xa6>
			case 2:dir=4;break;
 80018b0:	2304      	movs	r3, #4
 80018b2:	71fb      	strb	r3, [r7, #7]
 80018b4:	e00f      	b.n	80018d6 <LCD_Scan_Dir+0xa6>
			case 3:dir=5;break;
 80018b6:	2305      	movs	r3, #5
 80018b8:	71fb      	strb	r3, [r7, #7]
 80018ba:	e00c      	b.n	80018d6 <LCD_Scan_Dir+0xa6>
			case 4:dir=1;break;
 80018bc:	2301      	movs	r3, #1
 80018be:	71fb      	strb	r3, [r7, #7]
 80018c0:	e009      	b.n	80018d6 <LCD_Scan_Dir+0xa6>
			case 5:dir=0;break;
 80018c2:	2300      	movs	r3, #0
 80018c4:	71fb      	strb	r3, [r7, #7]
 80018c6:	e006      	b.n	80018d6 <LCD_Scan_Dir+0xa6>
			case 6:dir=3;break;
 80018c8:	2303      	movs	r3, #3
 80018ca:	71fb      	strb	r3, [r7, #7]
 80018cc:	e003      	b.n	80018d6 <LCD_Scan_Dir+0xa6>
			case 7:dir=2;break;
 80018ce:	2302      	movs	r3, #2
 80018d0:	71fb      	strb	r3, [r7, #7]
 80018d2:	e000      	b.n	80018d6 <LCD_Scan_Dir+0xa6>
		}
	}
 80018d4:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X6804||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/6804/5310/5510/1963,特殊处理
 80018d6:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 80018d8:	889b      	ldrh	r3, [r3, #4]
 80018da:	f249 3241 	movw	r2, #37697	; 0x9341
 80018de:	4293      	cmp	r3, r2
 80018e0:	d018      	beq.n	8001914 <LCD_Scan_Dir+0xe4>
 80018e2:	4b50      	ldr	r3, [pc, #320]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 80018e4:	889b      	ldrh	r3, [r3, #4]
 80018e6:	f646 0204 	movw	r2, #26628	; 0x6804
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d012      	beq.n	8001914 <LCD_Scan_Dir+0xe4>
 80018ee:	4b4d      	ldr	r3, [pc, #308]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 80018f0:	889b      	ldrh	r3, [r3, #4]
 80018f2:	f245 3210 	movw	r2, #21264	; 0x5310
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00c      	beq.n	8001914 <LCD_Scan_Dir+0xe4>
 80018fa:	4b4a      	ldr	r3, [pc, #296]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 80018fc:	889b      	ldrh	r3, [r3, #4]
 80018fe:	f245 5210 	movw	r2, #21776	; 0x5510
 8001902:	4293      	cmp	r3, r2
 8001904:	d006      	beq.n	8001914 <LCD_Scan_Dir+0xe4>
 8001906:	4b47      	ldr	r3, [pc, #284]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 8001908:	889b      	ldrh	r3, [r3, #4]
 800190a:	f641 1263 	movw	r2, #6499	; 0x1963
 800190e:	4293      	cmp	r3, r2
 8001910:	f040 813c 	bne.w	8001b8c <LCD_Scan_Dir+0x35c>
	{
		switch(dir)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	2b07      	cmp	r3, #7
 8001918:	d835      	bhi.n	8001986 <LCD_Scan_Dir+0x156>
 800191a:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <LCD_Scan_Dir+0xf0>)
 800191c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001920:	08001987 	.word	0x08001987
 8001924:	08001941 	.word	0x08001941
 8001928:	0800194b 	.word	0x0800194b
 800192c:	08001955 	.word	0x08001955
 8001930:	0800195f 	.word	0x0800195f
 8001934:	08001969 	.word	0x08001969
 8001938:	08001973 	.word	0x08001973
 800193c:	0800197d 	.word	0x0800197d
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 8001940:	89fb      	ldrh	r3, [r7, #14]
 8001942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001946:	81fb      	strh	r3, [r7, #14]
				break;
 8001948:	e01d      	b.n	8001986 <LCD_Scan_Dir+0x156>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 800194a:	89fb      	ldrh	r3, [r7, #14]
 800194c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001950:	81fb      	strh	r3, [r7, #14]
				break;
 8001952:	e018      	b.n	8001986 <LCD_Scan_Dir+0x156>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 8001954:	89fb      	ldrh	r3, [r7, #14]
 8001956:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800195a:	81fb      	strh	r3, [r7, #14]
				break;
 800195c:	e013      	b.n	8001986 <LCD_Scan_Dir+0x156>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 800195e:	89fb      	ldrh	r3, [r7, #14]
 8001960:	f043 0320 	orr.w	r3, r3, #32
 8001964:	81fb      	strh	r3, [r7, #14]
				break;
 8001966:	e00e      	b.n	8001986 <LCD_Scan_Dir+0x156>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 8001968:	89fb      	ldrh	r3, [r7, #14]
 800196a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800196e:	81fb      	strh	r3, [r7, #14]
				break;
 8001970:	e009      	b.n	8001986 <LCD_Scan_Dir+0x156>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 8001972:	89fb      	ldrh	r3, [r7, #14]
 8001974:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001978:	81fb      	strh	r3, [r7, #14]
				break;
 800197a:	e004      	b.n	8001986 <LCD_Scan_Dir+0x156>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 800197c:	89fb      	ldrh	r3, [r7, #14]
 800197e:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001982:	81fb      	strh	r3, [r7, #14]
				break;
 8001984:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 8001986:	4b27      	ldr	r3, [pc, #156]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 8001988:	889b      	ldrh	r3, [r3, #4]
 800198a:	f245 5210 	movw	r2, #21776	; 0x5510
 800198e:	4293      	cmp	r3, r2
 8001990:	d103      	bne.n	800199a <LCD_Scan_Dir+0x16a>
 8001992:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8001996:	81bb      	strh	r3, [r7, #12]
 8001998:	e001      	b.n	800199e <LCD_Scan_Dir+0x16e>
		else dirreg=0X36;
 800199a:	2336      	movs	r3, #54	; 0x36
 800199c:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 80019a0:	889b      	ldrh	r3, [r3, #4]
 80019a2:	f245 3210 	movw	r2, #21264	; 0x5310
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d00f      	beq.n	80019ca <LCD_Scan_Dir+0x19a>
 80019aa:	4b1e      	ldr	r3, [pc, #120]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 80019ac:	889b      	ldrh	r3, [r3, #4]
 80019ae:	f245 5210 	movw	r2, #21776	; 0x5510
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d009      	beq.n	80019ca <LCD_Scan_Dir+0x19a>
 80019b6:	4b1b      	ldr	r3, [pc, #108]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 80019b8:	889b      	ldrh	r3, [r3, #4]
 80019ba:	f641 1263 	movw	r2, #6499	; 0x1963
 80019be:	4293      	cmp	r3, r2
 80019c0:	d003      	beq.n	80019ca <LCD_Scan_Dir+0x19a>
 80019c2:	89fb      	ldrh	r3, [r7, #14]
 80019c4:	f043 0308 	orr.w	r3, r3, #8
 80019c8:	81fb      	strh	r3, [r7, #14]
		if(lcddev.id==0X6804)regval|=0x02;//6804的BIT6和9341的反了
 80019ca:	4b16      	ldr	r3, [pc, #88]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 80019cc:	889b      	ldrh	r3, [r3, #4]
 80019ce:	f646 0204 	movw	r2, #26628	; 0x6804
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d103      	bne.n	80019de <LCD_Scan_Dir+0x1ae>
 80019d6:	89fb      	ldrh	r3, [r7, #14]
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 80019de:	89fa      	ldrh	r2, [r7, #14]
 80019e0:	89bb      	ldrh	r3, [r7, #12]
 80019e2:	4611      	mov	r1, r2
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fdb9 	bl	800155c <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 80019ec:	889b      	ldrh	r3, [r3, #4]
 80019ee:	f641 1263 	movw	r2, #6499	; 0x1963
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d028      	beq.n	8001a48 <LCD_Scan_Dir+0x218>
		{
			if(regval&0X20)
 80019f6:	89fb      	ldrh	r3, [r7, #14]
 80019f8:	f003 0320 	and.w	r3, r3, #32
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d013      	beq.n	8001a28 <LCD_Scan_Dir+0x1f8>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 8001a02:	881a      	ldrh	r2, [r3, #0]
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 8001a06:	885b      	ldrh	r3, [r3, #2]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d21d      	bcs.n	8001a48 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 8001a14:	885a      	ldrh	r2, [r3, #2]
 8001a16:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 8001a18:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8001a1a:	4a02      	ldr	r2, [pc, #8]	; (8001a24 <LCD_Scan_Dir+0x1f4>)
 8001a1c:	897b      	ldrh	r3, [r7, #10]
 8001a1e:	8053      	strh	r3, [r2, #2]
 8001a20:	e012      	b.n	8001a48 <LCD_Scan_Dir+0x218>
 8001a22:	bf00      	nop
 8001a24:	20000140 	.word	0x20000140
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 8001a28:	4b7d      	ldr	r3, [pc, #500]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001a2a:	881a      	ldrh	r2, [r3, #0]
 8001a2c:	4b7c      	ldr	r3, [pc, #496]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001a2e:	885b      	ldrh	r3, [r3, #2]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d909      	bls.n	8001a48 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8001a34:	4b7a      	ldr	r3, [pc, #488]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8001a3a:	4b79      	ldr	r3, [pc, #484]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001a3c:	885a      	ldrh	r2, [r3, #2]
 8001a3e:	4b78      	ldr	r3, [pc, #480]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001a40:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8001a42:	4a77      	ldr	r2, [pc, #476]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001a44:	897b      	ldrh	r3, [r7, #10]
 8001a46:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 8001a48:	4b75      	ldr	r3, [pc, #468]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001a4a:	889b      	ldrh	r3, [r3, #4]
 8001a4c:	f245 5210 	movw	r2, #21776	; 0x5510
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d162      	bne.n	8001b1a <LCD_Scan_Dir+0x2ea>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 8001a54:	4b72      	ldr	r3, [pc, #456]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001a56:	895b      	ldrh	r3, [r3, #10]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fd45 	bl	80014e8 <LCD_WR_REG>
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fd56 	bl	8001510 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 8001a64:	4b6e      	ldr	r3, [pc, #440]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001a66:	895b      	ldrh	r3, [r3, #10]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fd3b 	bl	80014e8 <LCD_WR_REG>
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff fd4c 	bl	8001510 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 8001a78:	4b69      	ldr	r3, [pc, #420]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001a7a:	895b      	ldrh	r3, [r3, #10]
 8001a7c:	3302      	adds	r3, #2
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff fd31 	bl	80014e8 <LCD_WR_REG>
 8001a86:	4b66      	ldr	r3, [pc, #408]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001a88:	881b      	ldrh	r3, [r3, #0]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	121b      	asrs	r3, r3, #8
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fd3d 	bl	8001510 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001a96:	4b62      	ldr	r3, [pc, #392]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001a98:	895b      	ldrh	r3, [r3, #10]
 8001a9a:	3303      	adds	r3, #3
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fd22 	bl	80014e8 <LCD_WR_REG>
 8001aa4:	4b5e      	ldr	r3, [pc, #376]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001aa6:	881b      	ldrh	r3, [r3, #0]
 8001aa8:	3b01      	subs	r3, #1
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fd2d 	bl	8001510 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 8001ab6:	4b5a      	ldr	r3, [pc, #360]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001ab8:	899b      	ldrh	r3, [r3, #12]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fd14 	bl	80014e8 <LCD_WR_REG>
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f7ff fd25 	bl	8001510 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 8001ac6:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001ac8:	899b      	ldrh	r3, [r3, #12]
 8001aca:	3301      	adds	r3, #1
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fd0a 	bl	80014e8 <LCD_WR_REG>
 8001ad4:	2000      	movs	r0, #0
 8001ad6:	f7ff fd1b 	bl	8001510 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 8001ada:	4b51      	ldr	r3, [pc, #324]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001adc:	899b      	ldrh	r3, [r3, #12]
 8001ade:	3302      	adds	r3, #2
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fd00 	bl	80014e8 <LCD_WR_REG>
 8001ae8:	4b4d      	ldr	r3, [pc, #308]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001aea:	885b      	ldrh	r3, [r3, #2]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	121b      	asrs	r3, r3, #8
 8001af0:	b29b      	uxth	r3, r3
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff fd0c 	bl	8001510 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001af8:	4b49      	ldr	r3, [pc, #292]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001afa:	899b      	ldrh	r3, [r3, #12]
 8001afc:	3303      	adds	r3, #3
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff fcf1 	bl	80014e8 <LCD_WR_REG>
 8001b06:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001b08:	885b      	ldrh	r3, [r3, #2]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fcfc 	bl	8001510 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8001b18:	e07e      	b.n	8001c18 <LCD_Scan_Dir+0x3e8>
		}else
		{
			LCD_WR_REG(lcddev.setxcmd);
 8001b1a:	4b41      	ldr	r3, [pc, #260]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001b1c:	895b      	ldrh	r3, [r3, #10]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fce2 	bl	80014e8 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7ff fcf3 	bl	8001510 <LCD_WR_DATA>
 8001b2a:	2000      	movs	r0, #0
 8001b2c:	f7ff fcf0 	bl	8001510 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001b30:	4b3b      	ldr	r3, [pc, #236]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	121b      	asrs	r3, r3, #8
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fce8 	bl	8001510 <LCD_WR_DATA>
 8001b40:	4b37      	ldr	r3, [pc, #220]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001b42:	881b      	ldrh	r3, [r3, #0]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fcdf 	bl	8001510 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 8001b52:	4b33      	ldr	r3, [pc, #204]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001b54:	899b      	ldrh	r3, [r3, #12]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fcc6 	bl	80014e8 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff fcd7 	bl	8001510 <LCD_WR_DATA>
 8001b62:	2000      	movs	r0, #0
 8001b64:	f7ff fcd4 	bl	8001510 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001b68:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001b6a:	885b      	ldrh	r3, [r3, #2]
 8001b6c:	3b01      	subs	r3, #1
 8001b6e:	121b      	asrs	r3, r3, #8
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fccc 	bl	8001510 <LCD_WR_DATA>
 8001b78:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <LCD_Scan_Dir+0x3f0>)
 8001b7a:	885b      	ldrh	r3, [r3, #2]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fcc3 	bl	8001510 <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8001b8a:	e045      	b.n	8001c18 <LCD_Scan_Dir+0x3e8>
		}
  	}else
	{
		switch(dir)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	2b07      	cmp	r3, #7
 8001b90:	d835      	bhi.n	8001bfe <LCD_Scan_Dir+0x3ce>
 8001b92:	a201      	add	r2, pc, #4	; (adr r2, 8001b98 <LCD_Scan_Dir+0x368>)
 8001b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b98:	08001bb9 	.word	0x08001bb9
 8001b9c:	08001bc3 	.word	0x08001bc3
 8001ba0:	08001bcd 	.word	0x08001bcd
 8001ba4:	08001bff 	.word	0x08001bff
 8001ba8:	08001bd7 	.word	0x08001bd7
 8001bac:	08001be1 	.word	0x08001be1
 8001bb0:	08001beb 	.word	0x08001beb
 8001bb4:	08001bf5 	.word	0x08001bf5
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(1<<5)|(1<<4)|(0<<3);
 8001bb8:	89fb      	ldrh	r3, [r7, #14]
 8001bba:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001bbe:	81fb      	strh	r3, [r7, #14]
				break;
 8001bc0:	e01d      	b.n	8001bfe <LCD_Scan_Dir+0x3ce>
			case L2R_D2U://从左到右,从下到上
				regval|=(0<<5)|(1<<4)|(0<<3);
 8001bc2:	89fb      	ldrh	r3, [r7, #14]
 8001bc4:	f043 0310 	orr.w	r3, r3, #16
 8001bc8:	81fb      	strh	r3, [r7, #14]
				break;
 8001bca:	e018      	b.n	8001bfe <LCD_Scan_Dir+0x3ce>
			case R2L_U2D://从右到左,从上到下
				regval|=(1<<5)|(0<<4)|(0<<3);
 8001bcc:	89fb      	ldrh	r3, [r7, #14]
 8001bce:	f043 0320 	orr.w	r3, r3, #32
 8001bd2:	81fb      	strh	r3, [r7, #14]
				break;
 8001bd4:	e013      	b.n	8001bfe <LCD_Scan_Dir+0x3ce>
			case R2L_D2U://从右到左,从下到上
				regval|=(0<<5)|(0<<4)|(0<<3);
				break;
			case U2D_L2R://从上到下,从左到右
				regval|=(1<<5)|(1<<4)|(1<<3);
 8001bd6:	89fb      	ldrh	r3, [r7, #14]
 8001bd8:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8001bdc:	81fb      	strh	r3, [r7, #14]
				break;
 8001bde:	e00e      	b.n	8001bfe <LCD_Scan_Dir+0x3ce>
			case U2D_R2L://从上到下,从右到左
				regval|=(1<<5)|(0<<4)|(1<<3);
 8001be0:	89fb      	ldrh	r3, [r7, #14]
 8001be2:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8001be6:	81fb      	strh	r3, [r7, #14]
				break;
 8001be8:	e009      	b.n	8001bfe <LCD_Scan_Dir+0x3ce>
			case D2U_L2R://从下到上,从左到右
				regval|=(0<<5)|(1<<4)|(1<<3);
 8001bea:	89fb      	ldrh	r3, [r7, #14]
 8001bec:	f043 0318 	orr.w	r3, r3, #24
 8001bf0:	81fb      	strh	r3, [r7, #14]
				break;
 8001bf2:	e004      	b.n	8001bfe <LCD_Scan_Dir+0x3ce>
			case D2U_R2L://从下到上,从右到左
				regval|=(0<<5)|(0<<4)|(1<<3);
 8001bf4:	89fb      	ldrh	r3, [r7, #14]
 8001bf6:	f043 0308 	orr.w	r3, r3, #8
 8001bfa:	81fb      	strh	r3, [r7, #14]
				break;
 8001bfc:	bf00      	nop
		}
		dirreg=0X03;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	81bb      	strh	r3, [r7, #12]
		regval|=1<<12;
 8001c02:	89fb      	ldrh	r3, [r7, #14]
 8001c04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c08:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8001c0a:	89fa      	ldrh	r2, [r7, #14]
 8001c0c:	89bb      	ldrh	r3, [r7, #12]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fca3 	bl	800155c <LCD_WriteReg>
	}
}
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000140 	.word	0x20000140

08001c24 <LCD_DrawPoint>:
//画点
//x,y:坐标
//POINT_COLOR:此点的颜色
void LCD_DrawPoint(uint16_t x,uint16_t y)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	460a      	mov	r2, r1
 8001c2e:	80fb      	strh	r3, [r7, #6]
 8001c30:	4613      	mov	r3, r2
 8001c32:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);		//设置光标位置
 8001c34:	88ba      	ldrh	r2, [r7, #4]
 8001c36:	88fb      	ldrh	r3, [r7, #6]
 8001c38:	4611      	mov	r1, r2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fcc8 	bl	80015d0 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();	//开始写入GRAM
 8001c40:	f7ff fcb6 	bl	80015b0 <LCD_WriteRAM_Prepare>
	LCD->LCD_RAM=POINT_COLOR;
 8001c44:	4b03      	ldr	r3, [pc, #12]	; (8001c54 <LCD_DrawPoint+0x30>)
 8001c46:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <LCD_DrawPoint+0x34>)
 8001c48:	8812      	ldrh	r2, [r2, #0]
 8001c4a:	805a      	strh	r2, [r3, #2]
}
 8001c4c:	bf00      	nop
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	6c00007e 	.word	0x6c00007e
 8001c58:	200000d4 	.word	0x200000d4

08001c5c <LCD_Fast_DrawPoint>:
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	80fb      	strh	r3, [r7, #6]
 8001c66:	460b      	mov	r3, r1
 8001c68:	80bb      	strh	r3, [r7, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	807b      	strh	r3, [r7, #2]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001c6e:	4b85      	ldr	r3, [pc, #532]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001c70:	889b      	ldrh	r3, [r3, #4]
 8001c72:	f249 3241 	movw	r2, #37697	; 0x9341
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d005      	beq.n	8001c86 <LCD_Fast_DrawPoint+0x2a>
 8001c7a:	4b82      	ldr	r3, [pc, #520]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001c7c:	889b      	ldrh	r3, [r3, #4]
 8001c7e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d122      	bne.n	8001ccc <LCD_Fast_DrawPoint+0x70>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8001c86:	4b7f      	ldr	r3, [pc, #508]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001c88:	895b      	ldrh	r3, [r3, #10]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fc2c 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001c90:	88fb      	ldrh	r3, [r7, #6]
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fc3a 	bl	8001510 <LCD_WR_DATA>
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff fc34 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001ca8:	4b76      	ldr	r3, [pc, #472]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001caa:	899b      	ldrh	r3, [r3, #12]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fc1b 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001cb2:	88bb      	ldrh	r3, [r7, #4]
 8001cb4:	0a1b      	lsrs	r3, r3, #8
 8001cb6:	b29b      	uxth	r3, r3
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff fc29 	bl	8001510 <LCD_WR_DATA>
 8001cbe:	88bb      	ldrh	r3, [r7, #4]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fc23 	bl	8001510 <LCD_WR_DATA>
 8001cca:	e0cf      	b.n	8001e6c <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X5510)
 8001ccc:	4b6d      	ldr	r3, [pc, #436]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001cce:	889b      	ldrh	r3, [r3, #4]
 8001cd0:	f245 5210 	movw	r2, #21776	; 0x5510
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d130      	bne.n	8001d3a <LCD_Fast_DrawPoint+0xde>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 8001cd8:	4b6a      	ldr	r3, [pc, #424]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001cda:	895b      	ldrh	r3, [r3, #10]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff fc03 	bl	80014e8 <LCD_WR_REG>
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	0a1b      	lsrs	r3, r3, #8
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fc11 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 8001cee:	4b65      	ldr	r3, [pc, #404]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001cf0:	895b      	ldrh	r3, [r3, #10]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7ff fbf6 	bl	80014e8 <LCD_WR_REG>
 8001cfc:	88fb      	ldrh	r3, [r7, #6]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	b29b      	uxth	r3, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fc04 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 8001d08:	4b5e      	ldr	r3, [pc, #376]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001d0a:	899b      	ldrh	r3, [r3, #12]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff fbeb 	bl	80014e8 <LCD_WR_REG>
 8001d12:	88bb      	ldrh	r3, [r7, #4]
 8001d14:	0a1b      	lsrs	r3, r3, #8
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fbf9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 8001d1e:	4b59      	ldr	r3, [pc, #356]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001d20:	899b      	ldrh	r3, [r3, #12]
 8001d22:	3301      	adds	r3, #1
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fbde 	bl	80014e8 <LCD_WR_REG>
 8001d2c:	88bb      	ldrh	r3, [r7, #4]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fbec 	bl	8001510 <LCD_WR_DATA>
 8001d38:	e098      	b.n	8001e6c <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X1963)
 8001d3a:	4b52      	ldr	r3, [pc, #328]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001d3c:	889b      	ldrh	r3, [r3, #4]
 8001d3e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d145      	bne.n	8001dd2 <LCD_Fast_DrawPoint+0x176>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 8001d46:	4b4f      	ldr	r3, [pc, #316]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001d48:	799b      	ldrb	r3, [r3, #6]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d106      	bne.n	8001d5c <LCD_Fast_DrawPoint+0x100>
 8001d4e:	4b4d      	ldr	r3, [pc, #308]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001d50:	881a      	ldrh	r2, [r3, #0]
 8001d52:	88fb      	ldrh	r3, [r7, #6]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001d5c:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001d5e:	895b      	ldrh	r3, [r3, #10]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fbc1 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001d66:	88fb      	ldrh	r3, [r7, #6]
 8001d68:	0a1b      	lsrs	r3, r3, #8
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fbcf 	bl	8001510 <LCD_WR_DATA>
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fbc9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001d7e:	88fb      	ldrh	r3, [r7, #6]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fbc3 	bl	8001510 <LCD_WR_DATA>
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fbbd 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001d96:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001d98:	899b      	ldrh	r3, [r3, #12]
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7ff fba4 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001da0:	88bb      	ldrh	r3, [r7, #4]
 8001da2:	0a1b      	lsrs	r3, r3, #8
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fbb2 	bl	8001510 <LCD_WR_DATA>
 8001dac:	88bb      	ldrh	r3, [r7, #4]
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fbac 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001db8:	88bb      	ldrh	r3, [r7, #4]
 8001dba:	0a1b      	lsrs	r3, r3, #8
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff fba6 	bl	8001510 <LCD_WR_DATA>
 8001dc4:	88bb      	ldrh	r3, [r7, #4]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff fba0 	bl	8001510 <LCD_WR_DATA>
 8001dd0:	e04c      	b.n	8001e6c <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X6804)
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001dd4:	889b      	ldrh	r3, [r3, #4]
 8001dd6:	f646 0204 	movw	r2, #26628	; 0x6804
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d12d      	bne.n	8001e3a <LCD_Fast_DrawPoint+0x1de>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 8001dde:	4b29      	ldr	r3, [pc, #164]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001de0:	799b      	ldrb	r3, [r3, #6]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d106      	bne.n	8001df4 <LCD_Fast_DrawPoint+0x198>
 8001de6:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001de8:	881a      	ldrh	r2, [r3, #0]
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	3b01      	subs	r3, #1
 8001df2:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001df4:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001df6:	895b      	ldrh	r3, [r3, #10]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff fb75 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001dfe:	88fb      	ldrh	r3, [r7, #6]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7ff fb83 	bl	8001510 <LCD_WR_DATA>
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fb7d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001e18:	899b      	ldrh	r3, [r3, #12]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fb64 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001e20:	88bb      	ldrh	r3, [r7, #4]
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fb72 	bl	8001510 <LCD_WR_DATA>
 8001e2c:	88bb      	ldrh	r3, [r7, #4]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7ff fb6c 	bl	8001510 <LCD_WR_DATA>
 8001e38:	e018      	b.n	8001e6c <LCD_Fast_DrawPoint+0x210>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001e3c:	799b      	ldrb	r3, [r3, #6]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d106      	bne.n	8001e50 <LCD_Fast_DrawPoint+0x1f4>
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001e44:	881a      	ldrh	r2, [r3, #0]
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 8001e50:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001e52:	895b      	ldrh	r3, [r3, #10]
 8001e54:	88fa      	ldrh	r2, [r7, #6]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fb7f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001e60:	899b      	ldrh	r3, [r3, #12]
 8001e62:	88ba      	ldrh	r2, [r7, #4]
 8001e64:	4611      	mov	r1, r2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fb78 	bl	800155c <LCD_WriteReg>
	}
	LCD->LCD_REG=lcddev.wramcmd;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <LCD_Fast_DrawPoint+0x22c>)
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <LCD_Fast_DrawPoint+0x228>)
 8001e70:	8912      	ldrh	r2, [r2, #8]
 8001e72:	801a      	strh	r2, [r3, #0]
	LCD->LCD_RAM=color;
 8001e74:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <LCD_Fast_DrawPoint+0x22c>)
 8001e76:	887b      	ldrh	r3, [r7, #2]
 8001e78:	8053      	strh	r3, [r2, #2]
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000140 	.word	0x20000140
 8001e88:	6c00007e 	.word	0x6c00007e
 8001e8c:	00000000 	.word	0x00000000

08001e90 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8001e9a:	20be      	movs	r0, #190	; 0xbe
 8001e9c:	f7ff fb24 	bl	80014e8 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8001ea0:	2005      	movs	r0, #5
 8001ea2:	f7ff fb35 	bl	8001510 <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7fe fadf 	bl	800046c <__aeabi_i2d>
 8001eae:	a310      	add	r3, pc, #64	; (adr r3, 8001ef0 <LCD_SSD_BackLightSet+0x60>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fb44 	bl	8000540 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7fe fdee 	bl	8000aa0 <__aeabi_d2uiz>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fb21 	bl	8001510 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f7ff fb1e 	bl	8001510 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 8001ed4:	20ff      	movs	r0, #255	; 0xff
 8001ed6:	f7ff fb1b 	bl	8001510 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 8001eda:	2000      	movs	r0, #0
 8001edc:	f7ff fb18 	bl	8001510 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7ff fb15 	bl	8001510 <LCD_WR_DATA>
}
 8001ee6:	bf00      	nop
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	66666666 	.word	0x66666666
 8001ef4:	40046666 	.word	0x40046666

08001ef8 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
	if(dir==0)			//竖屏
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d177      	bne.n	8001ff8 <LCD_Display_Dir+0x100>
	{
		lcddev.dir=0;	//竖屏
 8001f08:	4b80      	ldr	r3, [pc, #512]	; (800210c <LCD_Display_Dir+0x214>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	719a      	strb	r2, [r3, #6]
		lcddev.width=240;
 8001f0e:	4b7f      	ldr	r3, [pc, #508]	; (800210c <LCD_Display_Dir+0x214>)
 8001f10:	22f0      	movs	r2, #240	; 0xf0
 8001f12:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001f14:	4b7d      	ldr	r3, [pc, #500]	; (800210c <LCD_Display_Dir+0x214>)
 8001f16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f1a:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X6804||lcddev.id==0X5310)
 8001f1c:	4b7b      	ldr	r3, [pc, #492]	; (800210c <LCD_Display_Dir+0x214>)
 8001f1e:	889b      	ldrh	r3, [r3, #4]
 8001f20:	f249 3241 	movw	r2, #37697	; 0x9341
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d00b      	beq.n	8001f40 <LCD_Display_Dir+0x48>
 8001f28:	4b78      	ldr	r3, [pc, #480]	; (800210c <LCD_Display_Dir+0x214>)
 8001f2a:	889b      	ldrh	r3, [r3, #4]
 8001f2c:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d005      	beq.n	8001f40 <LCD_Display_Dir+0x48>
 8001f34:	4b75      	ldr	r3, [pc, #468]	; (800210c <LCD_Display_Dir+0x214>)
 8001f36:	889b      	ldrh	r3, [r3, #4]
 8001f38:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d11e      	bne.n	8001f7e <LCD_Display_Dir+0x86>
		{
			lcddev.wramcmd=0X2C;
 8001f40:	4b72      	ldr	r3, [pc, #456]	; (800210c <LCD_Display_Dir+0x214>)
 8001f42:	222c      	movs	r2, #44	; 0x2c
 8001f44:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001f46:	4b71      	ldr	r3, [pc, #452]	; (800210c <LCD_Display_Dir+0x214>)
 8001f48:	222a      	movs	r2, #42	; 0x2a
 8001f4a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001f4c:	4b6f      	ldr	r3, [pc, #444]	; (800210c <LCD_Display_Dir+0x214>)
 8001f4e:	222b      	movs	r2, #43	; 0x2b
 8001f50:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8001f52:	4b6e      	ldr	r3, [pc, #440]	; (800210c <LCD_Display_Dir+0x214>)
 8001f54:	889b      	ldrh	r3, [r3, #4]
 8001f56:	f646 0204 	movw	r2, #26628	; 0x6804
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d006      	beq.n	8001f6c <LCD_Display_Dir+0x74>
 8001f5e:	4b6b      	ldr	r3, [pc, #428]	; (800210c <LCD_Display_Dir+0x214>)
 8001f60:	889b      	ldrh	r3, [r3, #4]
 8001f62:	f245 3210 	movw	r2, #21264	; 0x5310
 8001f66:	4293      	cmp	r3, r2
 8001f68:	f040 80c7 	bne.w	80020fa <LCD_Display_Dir+0x202>
			{
				lcddev.width=320;
 8001f6c:	4b67      	ldr	r3, [pc, #412]	; (800210c <LCD_Display_Dir+0x214>)
 8001f6e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001f72:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 8001f74:	4b65      	ldr	r3, [pc, #404]	; (800210c <LCD_Display_Dir+0x214>)
 8001f76:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001f7a:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8001f7c:	e0bd      	b.n	80020fa <LCD_Display_Dir+0x202>
			}
		}else if(lcddev.id==0x5510)
 8001f7e:	4b63      	ldr	r3, [pc, #396]	; (800210c <LCD_Display_Dir+0x214>)
 8001f80:	889b      	ldrh	r3, [r3, #4]
 8001f82:	f245 5210 	movw	r2, #21776	; 0x5510
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d114      	bne.n	8001fb4 <LCD_Display_Dir+0xbc>
		{
			lcddev.wramcmd=0X2C00;
 8001f8a:	4b60      	ldr	r3, [pc, #384]	; (800210c <LCD_Display_Dir+0x214>)
 8001f8c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001f90:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8001f92:	4b5e      	ldr	r3, [pc, #376]	; (800210c <LCD_Display_Dir+0x214>)
 8001f94:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001f98:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8001f9a:	4b5c      	ldr	r3, [pc, #368]	; (800210c <LCD_Display_Dir+0x214>)
 8001f9c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001fa0:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 8001fa2:	4b5a      	ldr	r3, [pc, #360]	; (800210c <LCD_Display_Dir+0x214>)
 8001fa4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001fa8:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 8001faa:	4b58      	ldr	r3, [pc, #352]	; (800210c <LCD_Display_Dir+0x214>)
 8001fac:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001fb0:	805a      	strh	r2, [r3, #2]
 8001fb2:	e0a3      	b.n	80020fc <LCD_Display_Dir+0x204>
		}else if(lcddev.id==0X1963)
 8001fb4:	4b55      	ldr	r3, [pc, #340]	; (800210c <LCD_Display_Dir+0x214>)
 8001fb6:	889b      	ldrh	r3, [r3, #4]
 8001fb8:	f641 1263 	movw	r2, #6499	; 0x1963
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d111      	bne.n	8001fe4 <LCD_Display_Dir+0xec>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8001fc0:	4b52      	ldr	r3, [pc, #328]	; (800210c <LCD_Display_Dir+0x214>)
 8001fc2:	222c      	movs	r2, #44	; 0x2c
 8001fc4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 8001fc6:	4b51      	ldr	r3, [pc, #324]	; (800210c <LCD_Display_Dir+0x214>)
 8001fc8:	222b      	movs	r2, #43	; 0x2b
 8001fca:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 8001fcc:	4b4f      	ldr	r3, [pc, #316]	; (800210c <LCD_Display_Dir+0x214>)
 8001fce:	222a      	movs	r2, #42	; 0x2a
 8001fd0:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 8001fd2:	4b4e      	ldr	r3, [pc, #312]	; (800210c <LCD_Display_Dir+0x214>)
 8001fd4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001fd8:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 8001fda:	4b4c      	ldr	r3, [pc, #304]	; (800210c <LCD_Display_Dir+0x214>)
 8001fdc:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001fe0:	805a      	strh	r2, [r3, #2]
 8001fe2:	e08b      	b.n	80020fc <LCD_Display_Dir+0x204>
		}else
		{
			lcddev.wramcmd=0X22;
 8001fe4:	4b49      	ldr	r3, [pc, #292]	; (800210c <LCD_Display_Dir+0x214>)
 8001fe6:	2222      	movs	r2, #34	; 0x22
 8001fe8:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X20;
 8001fea:	4b48      	ldr	r3, [pc, #288]	; (800210c <LCD_Display_Dir+0x214>)
 8001fec:	2220      	movs	r2, #32
 8001fee:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X21;
 8001ff0:	4b46      	ldr	r3, [pc, #280]	; (800210c <LCD_Display_Dir+0x214>)
 8001ff2:	2221      	movs	r2, #33	; 0x21
 8001ff4:	819a      	strh	r2, [r3, #12]
 8001ff6:	e081      	b.n	80020fc <LCD_Display_Dir+0x204>
		}
	}else 				//横屏
	{
		lcddev.dir=1;	//横屏
 8001ff8:	4b44      	ldr	r3, [pc, #272]	; (800210c <LCD_Display_Dir+0x214>)
 8001ffa:	2201      	movs	r2, #1
 8001ffc:	719a      	strb	r2, [r3, #6]
		lcddev.width=320;
 8001ffe:	4b43      	ldr	r3, [pc, #268]	; (800210c <LCD_Display_Dir+0x214>)
 8002000:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002004:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8002006:	4b41      	ldr	r3, [pc, #260]	; (800210c <LCD_Display_Dir+0x214>)
 8002008:	22f0      	movs	r2, #240	; 0xf0
 800200a:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 800200c:	4b3f      	ldr	r3, [pc, #252]	; (800210c <LCD_Display_Dir+0x214>)
 800200e:	889b      	ldrh	r3, [r3, #4]
 8002010:	f249 3241 	movw	r2, #37697	; 0x9341
 8002014:	4293      	cmp	r3, r2
 8002016:	d005      	beq.n	8002024 <LCD_Display_Dir+0x12c>
 8002018:	4b3c      	ldr	r3, [pc, #240]	; (800210c <LCD_Display_Dir+0x214>)
 800201a:	889b      	ldrh	r3, [r3, #4]
 800201c:	f245 3210 	movw	r2, #21264	; 0x5310
 8002020:	4293      	cmp	r3, r2
 8002022:	d109      	bne.n	8002038 <LCD_Display_Dir+0x140>
		{
			lcddev.wramcmd=0X2C;
 8002024:	4b39      	ldr	r3, [pc, #228]	; (800210c <LCD_Display_Dir+0x214>)
 8002026:	222c      	movs	r2, #44	; 0x2c
 8002028:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 800202a:	4b38      	ldr	r3, [pc, #224]	; (800210c <LCD_Display_Dir+0x214>)
 800202c:	222a      	movs	r2, #42	; 0x2a
 800202e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8002030:	4b36      	ldr	r3, [pc, #216]	; (800210c <LCD_Display_Dir+0x214>)
 8002032:	222b      	movs	r2, #43	; 0x2b
 8002034:	819a      	strh	r2, [r3, #12]
 8002036:	e04b      	b.n	80020d0 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X6804)
 8002038:	4b34      	ldr	r3, [pc, #208]	; (800210c <LCD_Display_Dir+0x214>)
 800203a:	889b      	ldrh	r3, [r3, #4]
 800203c:	f646 0204 	movw	r2, #26628	; 0x6804
 8002040:	4293      	cmp	r3, r2
 8002042:	d109      	bne.n	8002058 <LCD_Display_Dir+0x160>
		{
 			lcddev.wramcmd=0X2C;
 8002044:	4b31      	ldr	r3, [pc, #196]	; (800210c <LCD_Display_Dir+0x214>)
 8002046:	222c      	movs	r2, #44	; 0x2c
 8002048:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2B;
 800204a:	4b30      	ldr	r3, [pc, #192]	; (800210c <LCD_Display_Dir+0x214>)
 800204c:	222b      	movs	r2, #43	; 0x2b
 800204e:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;
 8002050:	4b2e      	ldr	r3, [pc, #184]	; (800210c <LCD_Display_Dir+0x214>)
 8002052:	222a      	movs	r2, #42	; 0x2a
 8002054:	819a      	strh	r2, [r3, #12]
 8002056:	e03b      	b.n	80020d0 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0x5510)
 8002058:	4b2c      	ldr	r3, [pc, #176]	; (800210c <LCD_Display_Dir+0x214>)
 800205a:	889b      	ldrh	r3, [r3, #4]
 800205c:	f245 5210 	movw	r2, #21776	; 0x5510
 8002060:	4293      	cmp	r3, r2
 8002062:	d114      	bne.n	800208e <LCD_Display_Dir+0x196>
		{
			lcddev.wramcmd=0X2C00;
 8002064:	4b29      	ldr	r3, [pc, #164]	; (800210c <LCD_Display_Dir+0x214>)
 8002066:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 800206a:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 800206c:	4b27      	ldr	r3, [pc, #156]	; (800210c <LCD_Display_Dir+0x214>)
 800206e:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8002072:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8002074:	4b25      	ldr	r3, [pc, #148]	; (800210c <LCD_Display_Dir+0x214>)
 8002076:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 800207a:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 800207c:	4b23      	ldr	r3, [pc, #140]	; (800210c <LCD_Display_Dir+0x214>)
 800207e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002082:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <LCD_Display_Dir+0x214>)
 8002086:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800208a:	805a      	strh	r2, [r3, #2]
 800208c:	e020      	b.n	80020d0 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X1963)
 800208e:	4b1f      	ldr	r3, [pc, #124]	; (800210c <LCD_Display_Dir+0x214>)
 8002090:	889b      	ldrh	r3, [r3, #4]
 8002092:	f641 1263 	movw	r2, #6499	; 0x1963
 8002096:	4293      	cmp	r3, r2
 8002098:	d111      	bne.n	80020be <LCD_Display_Dir+0x1c6>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <LCD_Display_Dir+0x214>)
 800209c:	222c      	movs	r2, #44	; 0x2c
 800209e:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 80020a0:	4b1a      	ldr	r3, [pc, #104]	; (800210c <LCD_Display_Dir+0x214>)
 80020a2:	222a      	movs	r2, #42	; 0x2a
 80020a4:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 80020a6:	4b19      	ldr	r3, [pc, #100]	; (800210c <LCD_Display_Dir+0x214>)
 80020a8:	222b      	movs	r2, #43	; 0x2b
 80020aa:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 80020ac:	4b17      	ldr	r3, [pc, #92]	; (800210c <LCD_Display_Dir+0x214>)
 80020ae:	f44f 7248 	mov.w	r2, #800	; 0x320
 80020b2:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 80020b4:	4b15      	ldr	r3, [pc, #84]	; (800210c <LCD_Display_Dir+0x214>)
 80020b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80020ba:	805a      	strh	r2, [r3, #2]
 80020bc:	e008      	b.n	80020d0 <LCD_Display_Dir+0x1d8>
		}else
		{
			lcddev.wramcmd=0X22;
 80020be:	4b13      	ldr	r3, [pc, #76]	; (800210c <LCD_Display_Dir+0x214>)
 80020c0:	2222      	movs	r2, #34	; 0x22
 80020c2:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X21;
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <LCD_Display_Dir+0x214>)
 80020c6:	2221      	movs	r2, #33	; 0x21
 80020c8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X20;
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <LCD_Display_Dir+0x214>)
 80020cc:	2220      	movs	r2, #32
 80020ce:	819a      	strh	r2, [r3, #12]
		}
		if(lcddev.id==0X6804||lcddev.id==0X5310)
 80020d0:	4b0e      	ldr	r3, [pc, #56]	; (800210c <LCD_Display_Dir+0x214>)
 80020d2:	889b      	ldrh	r3, [r3, #4]
 80020d4:	f646 0204 	movw	r2, #26628	; 0x6804
 80020d8:	4293      	cmp	r3, r2
 80020da:	d005      	beq.n	80020e8 <LCD_Display_Dir+0x1f0>
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <LCD_Display_Dir+0x214>)
 80020de:	889b      	ldrh	r3, [r3, #4]
 80020e0:	f245 3210 	movw	r2, #21264	; 0x5310
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d109      	bne.n	80020fc <LCD_Display_Dir+0x204>
		{
			lcddev.width=480;
 80020e8:	4b08      	ldr	r3, [pc, #32]	; (800210c <LCD_Display_Dir+0x214>)
 80020ea:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80020ee:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <LCD_Display_Dir+0x214>)
 80020f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020f6:	805a      	strh	r2, [r3, #2]
 80020f8:	e000      	b.n	80020fc <LCD_Display_Dir+0x204>
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 80020fa:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 80020fc:	2000      	movs	r0, #0
 80020fe:	f7ff fb97 	bl	8001830 <LCD_Scan_Dir>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000140 	.word	0x20000140

08002110 <LCD_Init>:
}
//初始化lcd
//该初始化函数可以初始化各种ILI93XX液晶,但是其他函数是基于ILI9320的!!!
//在其他型号的驱动芯片上没有测试!
void LCD_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
	__IO uint32_t i =0;
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]

//  FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);  //初始化FSMC配置

//  FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM4, ENABLE);  // 使能BANK1

 	HAL_Delay(50); // delay 50 ms
 800211a:	2032      	movs	r0, #50	; 0x32
 800211c:	f005 fb62 	bl	80077e4 <HAL_Delay>
 	LCD_WriteReg(0x0000,0x0001);
 8002120:	2101      	movs	r1, #1
 8002122:	2000      	movs	r0, #0
 8002124:	f7ff fa1a 	bl	800155c <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 8002128:	2032      	movs	r0, #50	; 0x32
 800212a:	f005 fb5b 	bl	80077e4 <HAL_Delay>
  	lcddev.id = LCD_ReadReg(0x0000);
 800212e:	2000      	movs	r0, #0
 8002130:	f7ff fa2a 	bl	8001588 <LCD_ReadReg>
 8002134:	4603      	mov	r3, r0
 8002136:	461a      	mov	r2, r3
 8002138:	4b95      	ldr	r3, [pc, #596]	; (8002390 <LCD_Init+0x280>)
 800213a:	809a      	strh	r2, [r3, #4]
   	if(lcddev.id<0XFF||lcddev.id==0XFFFF||lcddev.id==0X9300)//读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 800213c:	4b94      	ldr	r3, [pc, #592]	; (8002390 <LCD_Init+0x280>)
 800213e:	889b      	ldrh	r3, [r3, #4]
 8002140:	2bfe      	cmp	r3, #254	; 0xfe
 8002142:	d90b      	bls.n	800215c <LCD_Init+0x4c>
 8002144:	4b92      	ldr	r3, [pc, #584]	; (8002390 <LCD_Init+0x280>)
 8002146:	889b      	ldrh	r3, [r3, #4]
 8002148:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800214c:	4293      	cmp	r3, r2
 800214e:	d005      	beq.n	800215c <LCD_Init+0x4c>
 8002150:	4b8f      	ldr	r3, [pc, #572]	; (8002390 <LCD_Init+0x280>)
 8002152:	889b      	ldrh	r3, [r3, #4]
 8002154:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 8002158:	f040 80e9 	bne.w	800232e <LCD_Init+0x21e>
	{
 		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 800215c:	20d3      	movs	r0, #211	; 0xd3
 800215e:	f7ff f9c3 	bl	80014e8 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();	//dummy read
 8002162:	f7ff f9e9 	bl	8001538 <LCD_RD_DATA>
 8002166:	4603      	mov	r3, r0
 8002168:	461a      	mov	r2, r3
 800216a:	4b89      	ldr	r3, [pc, #548]	; (8002390 <LCD_Init+0x280>)
 800216c:	809a      	strh	r2, [r3, #4]
 		lcddev.id=LCD_RD_DATA();	//读到0X00
 800216e:	f7ff f9e3 	bl	8001538 <LCD_RD_DATA>
 8002172:	4603      	mov	r3, r0
 8002174:	461a      	mov	r2, r3
 8002176:	4b86      	ldr	r3, [pc, #536]	; (8002390 <LCD_Init+0x280>)
 8002178:	809a      	strh	r2, [r3, #4]
  		lcddev.id=LCD_RD_DATA();   	//读取93
 800217a:	f7ff f9dd 	bl	8001538 <LCD_RD_DATA>
 800217e:	4603      	mov	r3, r0
 8002180:	461a      	mov	r2, r3
 8002182:	4b83      	ldr	r3, [pc, #524]	; (8002390 <LCD_Init+0x280>)
 8002184:	809a      	strh	r2, [r3, #4]
 		lcddev.id<<=8;
 8002186:	4b82      	ldr	r3, [pc, #520]	; (8002390 <LCD_Init+0x280>)
 8002188:	889b      	ldrh	r3, [r3, #4]
 800218a:	021b      	lsls	r3, r3, #8
 800218c:	b29a      	uxth	r2, r3
 800218e:	4b80      	ldr	r3, [pc, #512]	; (8002390 <LCD_Init+0x280>)
 8002190:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();  	//读取41
 8002192:	f7ff f9d1 	bl	8001538 <LCD_RD_DATA>
 8002196:	4603      	mov	r3, r0
 8002198:	461a      	mov	r2, r3
 800219a:	4b7d      	ldr	r3, [pc, #500]	; (8002390 <LCD_Init+0x280>)
 800219c:	889b      	ldrh	r3, [r3, #4]
 800219e:	4313      	orrs	r3, r2
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	4b7b      	ldr	r3, [pc, #492]	; (8002390 <LCD_Init+0x280>)
 80021a4:	809a      	strh	r2, [r3, #4]
 		if(lcddev.id!=0X9341)		//非9341,尝试是不是6804
 80021a6:	4b7a      	ldr	r3, [pc, #488]	; (8002390 <LCD_Init+0x280>)
 80021a8:	889b      	ldrh	r3, [r3, #4]
 80021aa:	f249 3241 	movw	r2, #37697	; 0x9341
 80021ae:	4293      	cmp	r3, r2
 80021b0:	f000 80bd 	beq.w	800232e <LCD_Init+0x21e>
		{
 			LCD_WR_REG(0XBF);
 80021b4:	20bf      	movs	r0, #191	; 0xbf
 80021b6:	f7ff f997 	bl	80014e8 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA(); 	//dummy read
 80021ba:	f7ff f9bd 	bl	8001538 <LCD_RD_DATA>
 80021be:	4603      	mov	r3, r0
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b73      	ldr	r3, [pc, #460]	; (8002390 <LCD_Init+0x280>)
 80021c4:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA();   	//读回0X01
 80021c6:	f7ff f9b7 	bl	8001538 <LCD_RD_DATA>
 80021ca:	4603      	mov	r3, r0
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b70      	ldr	r3, [pc, #448]	; (8002390 <LCD_Init+0x280>)
 80021d0:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA(); 	//读回0XD0
 80021d2:	f7ff f9b1 	bl	8001538 <LCD_RD_DATA>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461a      	mov	r2, r3
 80021da:	4b6d      	ldr	r3, [pc, #436]	; (8002390 <LCD_Init+0x280>)
 80021dc:	809a      	strh	r2, [r3, #4]
	  		lcddev.id=LCD_RD_DATA();	//这里读回0X68
 80021de:	f7ff f9ab 	bl	8001538 <LCD_RD_DATA>
 80021e2:	4603      	mov	r3, r0
 80021e4:	461a      	mov	r2, r3
 80021e6:	4b6a      	ldr	r3, [pc, #424]	; (8002390 <LCD_Init+0x280>)
 80021e8:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 80021ea:	4b69      	ldr	r3, [pc, #420]	; (8002390 <LCD_Init+0x280>)
 80021ec:	889b      	ldrh	r3, [r3, #4]
 80021ee:	021b      	lsls	r3, r3, #8
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	4b67      	ldr	r3, [pc, #412]	; (8002390 <LCD_Init+0x280>)
 80021f4:	809a      	strh	r2, [r3, #4]
	  		lcddev.id|=LCD_RD_DATA();	//这里读回0X04
 80021f6:	f7ff f99f 	bl	8001538 <LCD_RD_DATA>
 80021fa:	4603      	mov	r3, r0
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b64      	ldr	r3, [pc, #400]	; (8002390 <LCD_Init+0x280>)
 8002200:	889b      	ldrh	r3, [r3, #4]
 8002202:	4313      	orrs	r3, r2
 8002204:	b29a      	uxth	r2, r3
 8002206:	4b62      	ldr	r3, [pc, #392]	; (8002390 <LCD_Init+0x280>)
 8002208:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X6804)		//也不是6804,尝试看看是不是NT35310
 800220a:	4b61      	ldr	r3, [pc, #388]	; (8002390 <LCD_Init+0x280>)
 800220c:	889b      	ldrh	r3, [r3, #4]
 800220e:	f646 0204 	movw	r2, #26628	; 0x6804
 8002212:	4293      	cmp	r3, r2
 8002214:	f000 808b 	beq.w	800232e <LCD_Init+0x21e>
			{
				LCD_WR_REG(0XD4);
 8002218:	20d4      	movs	r0, #212	; 0xd4
 800221a:	f7ff f965 	bl	80014e8 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();//dummy read
 800221e:	f7ff f98b 	bl	8001538 <LCD_RD_DATA>
 8002222:	4603      	mov	r3, r0
 8002224:	461a      	mov	r2, r3
 8002226:	4b5a      	ldr	r3, [pc, #360]	; (8002390 <LCD_Init+0x280>)
 8002228:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X01
 800222a:	f7ff f985 	bl	8001538 <LCD_RD_DATA>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	4b57      	ldr	r3, [pc, #348]	; (8002390 <LCD_Init+0x280>)
 8002234:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X53
 8002236:	f7ff f97f 	bl	8001538 <LCD_RD_DATA>
 800223a:	4603      	mov	r3, r0
 800223c:	461a      	mov	r2, r3
 800223e:	4b54      	ldr	r3, [pc, #336]	; (8002390 <LCD_Init+0x280>)
 8002240:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 8002242:	4b53      	ldr	r3, [pc, #332]	; (8002390 <LCD_Init+0x280>)
 8002244:	889b      	ldrh	r3, [r3, #4]
 8002246:	021b      	lsls	r3, r3, #8
 8002248:	b29a      	uxth	r2, r3
 800224a:	4b51      	ldr	r3, [pc, #324]	; (8002390 <LCD_Init+0x280>)
 800224c:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 800224e:	f7ff f973 	bl	8001538 <LCD_RD_DATA>
 8002252:	4603      	mov	r3, r0
 8002254:	461a      	mov	r2, r3
 8002256:	4b4e      	ldr	r3, [pc, #312]	; (8002390 <LCD_Init+0x280>)
 8002258:	889b      	ldrh	r3, [r3, #4]
 800225a:	4313      	orrs	r3, r2
 800225c:	b29a      	uxth	r2, r3
 800225e:	4b4c      	ldr	r3, [pc, #304]	; (8002390 <LCD_Init+0x280>)
 8002260:	809a      	strh	r2, [r3, #4]
				if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8002262:	4b4b      	ldr	r3, [pc, #300]	; (8002390 <LCD_Init+0x280>)
 8002264:	889b      	ldrh	r3, [r3, #4]
 8002266:	f245 3210 	movw	r2, #21264	; 0x5310
 800226a:	4293      	cmp	r3, r2
 800226c:	d05f      	beq.n	800232e <LCD_Init+0x21e>
				{
					LCD_WR_REG(0XDA00);
 800226e:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8002272:	f7ff f939 	bl	80014e8 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X00
 8002276:	f7ff f95f 	bl	8001538 <LCD_RD_DATA>
 800227a:	4603      	mov	r3, r0
 800227c:	461a      	mov	r2, r3
 800227e:	4b44      	ldr	r3, [pc, #272]	; (8002390 <LCD_Init+0x280>)
 8002280:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDB00);
 8002282:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8002286:	f7ff f92f 	bl	80014e8 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X80
 800228a:	f7ff f955 	bl	8001538 <LCD_RD_DATA>
 800228e:	4603      	mov	r3, r0
 8002290:	461a      	mov	r2, r3
 8002292:	4b3f      	ldr	r3, [pc, #252]	; (8002390 <LCD_Init+0x280>)
 8002294:	809a      	strh	r2, [r3, #4]
					lcddev.id<<=8;
 8002296:	4b3e      	ldr	r3, [pc, #248]	; (8002390 <LCD_Init+0x280>)
 8002298:	889b      	ldrh	r3, [r3, #4]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	b29a      	uxth	r2, r3
 800229e:	4b3c      	ldr	r3, [pc, #240]	; (8002390 <LCD_Init+0x280>)
 80022a0:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 80022a2:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 80022a6:	f7ff f91f 	bl	80014e8 <LCD_WR_REG>
					lcddev.id|=LCD_RD_DATA();		//读回0X00
 80022aa:	f7ff f945 	bl	8001538 <LCD_RD_DATA>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b37      	ldr	r3, [pc, #220]	; (8002390 <LCD_Init+0x280>)
 80022b4:	889b      	ldrh	r3, [r3, #4]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	4b35      	ldr	r3, [pc, #212]	; (8002390 <LCD_Init+0x280>)
 80022bc:	809a      	strh	r2, [r3, #4]
					if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 80022be:	4b34      	ldr	r3, [pc, #208]	; (8002390 <LCD_Init+0x280>)
 80022c0:	889b      	ldrh	r3, [r3, #4]
 80022c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022c6:	d103      	bne.n	80022d0 <LCD_Init+0x1c0>
 80022c8:	4b31      	ldr	r3, [pc, #196]	; (8002390 <LCD_Init+0x280>)
 80022ca:	f245 5210 	movw	r2, #21776	; 0x5510
 80022ce:	809a      	strh	r2, [r3, #4]
					if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 80022d0:	4b2f      	ldr	r3, [pc, #188]	; (8002390 <LCD_Init+0x280>)
 80022d2:	889b      	ldrh	r3, [r3, #4]
 80022d4:	f245 5210 	movw	r2, #21776	; 0x5510
 80022d8:	4293      	cmp	r3, r2
 80022da:	d028      	beq.n	800232e <LCD_Init+0x21e>
					{
						LCD_WR_REG(0XA1);
 80022dc:	20a1      	movs	r0, #161	; 0xa1
 80022de:	f7ff f903 	bl	80014e8 <LCD_WR_REG>
						lcddev.id=LCD_RD_DATA();
 80022e2:	f7ff f929 	bl	8001538 <LCD_RD_DATA>
 80022e6:	4603      	mov	r3, r0
 80022e8:	461a      	mov	r2, r3
 80022ea:	4b29      	ldr	r3, [pc, #164]	; (8002390 <LCD_Init+0x280>)
 80022ec:	809a      	strh	r2, [r3, #4]
						lcddev.id=LCD_RD_DATA();	//读回0X57
 80022ee:	f7ff f923 	bl	8001538 <LCD_RD_DATA>
 80022f2:	4603      	mov	r3, r0
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <LCD_Init+0x280>)
 80022f8:	809a      	strh	r2, [r3, #4]
						lcddev.id<<=8;
 80022fa:	4b25      	ldr	r3, [pc, #148]	; (8002390 <LCD_Init+0x280>)
 80022fc:	889b      	ldrh	r3, [r3, #4]
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	b29a      	uxth	r2, r3
 8002302:	4b23      	ldr	r3, [pc, #140]	; (8002390 <LCD_Init+0x280>)
 8002304:	809a      	strh	r2, [r3, #4]
						lcddev.id|=LCD_RD_DATA();	//读回0X61
 8002306:	f7ff f917 	bl	8001538 <LCD_RD_DATA>
 800230a:	4603      	mov	r3, r0
 800230c:	461a      	mov	r2, r3
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <LCD_Init+0x280>)
 8002310:	889b      	ldrh	r3, [r3, #4]
 8002312:	4313      	orrs	r3, r2
 8002314:	b29a      	uxth	r2, r3
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <LCD_Init+0x280>)
 8002318:	809a      	strh	r2, [r3, #4]
						if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <LCD_Init+0x280>)
 800231c:	889b      	ldrh	r3, [r3, #4]
 800231e:	f245 7261 	movw	r2, #22369	; 0x5761
 8002322:	4293      	cmp	r3, r2
 8002324:	d103      	bne.n	800232e <LCD_Init+0x21e>
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <LCD_Init+0x280>)
 8002328:	f641 1263 	movw	r2, #6499	; 0x1963
 800232c:	809a      	strh	r2, [r3, #4]
					}
				}
			}
 		}
	}
	if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//如果是这几个IC,则设置WR时序为最快
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <LCD_Init+0x280>)
 8002330:	889b      	ldrh	r3, [r3, #4]
 8002332:	f249 3241 	movw	r2, #37697	; 0x9341
 8002336:	4293      	cmp	r3, r2
 8002338:	d011      	beq.n	800235e <LCD_Init+0x24e>
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <LCD_Init+0x280>)
 800233c:	889b      	ldrh	r3, [r3, #4]
 800233e:	f245 3210 	movw	r2, #21264	; 0x5310
 8002342:	4293      	cmp	r3, r2
 8002344:	d00b      	beq.n	800235e <LCD_Init+0x24e>
 8002346:	4b12      	ldr	r3, [pc, #72]	; (8002390 <LCD_Init+0x280>)
 8002348:	889b      	ldrh	r3, [r3, #4]
 800234a:	f245 5210 	movw	r2, #21776	; 0x5510
 800234e:	4293      	cmp	r3, r2
 8002350:	d005      	beq.n	800235e <LCD_Init+0x24e>
 8002352:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <LCD_Init+0x280>)
 8002354:	889b      	ldrh	r3, [r3, #4]
 8002356:	f641 1263 	movw	r2, #6499	; 0x1963
 800235a:	4293      	cmp	r3, r2
 800235c:	d11c      	bne.n	8002398 <LCD_Init+0x288>
	{
		//重新配置写时序控制寄存器的时序
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//地址建立时间(ADDSET)清零
 800235e:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <LCD_Init+0x284>)
 8002360:	699b      	ldr	r3, [r3, #24]
 8002362:	4a0c      	ldr	r2, [pc, #48]	; (8002394 <LCD_Init+0x284>)
 8002364:	f023 030f 	bic.w	r3, r3, #15
 8002368:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//数据保存时间清零
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <LCD_Init+0x284>)
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	4a09      	ldr	r2, [pc, #36]	; (8002394 <LCD_Init+0x284>)
 8002370:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002374:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=3<<0;		//地址建立时间(ADDSET)为3个HCLK =18ns
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <LCD_Init+0x284>)
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	4a06      	ldr	r2, [pc, #24]	; (8002394 <LCD_Init+0x284>)
 800237c:	f043 0303 	orr.w	r3, r3, #3
 8002380:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=2<<8; 	//数据保存时间(DATAST)为6ns*3个HCLK=18ns
 8002382:	4b04      	ldr	r3, [pc, #16]	; (8002394 <LCD_Init+0x284>)
 8002384:	699b      	ldr	r3, [r3, #24]
 8002386:	4a03      	ldr	r2, [pc, #12]	; (8002394 <LCD_Init+0x284>)
 8002388:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800238c:	6193      	str	r3, [r2, #24]
 800238e:	e027      	b.n	80023e0 <LCD_Init+0x2d0>
 8002390:	20000140 	.word	0x20000140
 8002394:	a0000104 	.word	0xa0000104
	}else if(lcddev.id==0X6804||lcddev.id==0XC505)	//6804/C505速度上不去,得降低
 8002398:	4ba0      	ldr	r3, [pc, #640]	; (800261c <LCD_Init+0x50c>)
 800239a:	889b      	ldrh	r3, [r3, #4]
 800239c:	f646 0204 	movw	r2, #26628	; 0x6804
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d005      	beq.n	80023b0 <LCD_Init+0x2a0>
 80023a4:	4b9d      	ldr	r3, [pc, #628]	; (800261c <LCD_Init+0x50c>)
 80023a6:	889b      	ldrh	r3, [r3, #4]
 80023a8:	f24c 5205 	movw	r2, #50437	; 0xc505
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d117      	bne.n	80023e0 <LCD_Init+0x2d0>
	{
		//重新配置写时序控制寄存器的时序
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//地址建立时间(ADDSET)清零
 80023b0:	4b9b      	ldr	r3, [pc, #620]	; (8002620 <LCD_Init+0x510>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	4a9a      	ldr	r2, [pc, #616]	; (8002620 <LCD_Init+0x510>)
 80023b6:	f023 030f 	bic.w	r3, r3, #15
 80023ba:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//数据保存时间清零
 80023bc:	4b98      	ldr	r3, [pc, #608]	; (8002620 <LCD_Init+0x510>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	4a97      	ldr	r2, [pc, #604]	; (8002620 <LCD_Init+0x510>)
 80023c2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023c6:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=10<<0;	//地址建立时间(ADDSET)为10个HCLK =60ns
 80023c8:	4b95      	ldr	r3, [pc, #596]	; (8002620 <LCD_Init+0x510>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	4a94      	ldr	r2, [pc, #592]	; (8002620 <LCD_Init+0x510>)
 80023ce:	f043 030a 	orr.w	r3, r3, #10
 80023d2:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=12<<8; 	//数据保存时间(DATAST)为6ns*13个HCLK=78ns
 80023d4:	4b92      	ldr	r3, [pc, #584]	; (8002620 <LCD_Init+0x510>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	4a91      	ldr	r2, [pc, #580]	; (8002620 <LCD_Init+0x510>)
 80023da:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80023de:	6193      	str	r3, [r2, #24]
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if(lcddev.id==0X9341)	//9341初始化
 80023e0:	4b8e      	ldr	r3, [pc, #568]	; (800261c <LCD_Init+0x50c>)
 80023e2:	889b      	ldrh	r3, [r3, #4]
 80023e4:	f249 3241 	movw	r2, #37697	; 0x9341
 80023e8:	4293      	cmp	r3, r2
 80023ea:	f040 811b 	bne.w	8002624 <LCD_Init+0x514>
	{
		LCD_WR_REG(0xCF);
 80023ee:	20cf      	movs	r0, #207	; 0xcf
 80023f0:	f7ff f87a 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7ff f88b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 80023fa:	20c1      	movs	r0, #193	; 0xc1
 80023fc:	f7ff f888 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 8002400:	2030      	movs	r0, #48	; 0x30
 8002402:	f7ff f885 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 8002406:	20ed      	movs	r0, #237	; 0xed
 8002408:	f7ff f86e 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 800240c:	2064      	movs	r0, #100	; 0x64
 800240e:	f7ff f87f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8002412:	2003      	movs	r0, #3
 8002414:	f7ff f87c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 8002418:	2012      	movs	r0, #18
 800241a:	f7ff f879 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 800241e:	2081      	movs	r0, #129	; 0x81
 8002420:	f7ff f876 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 8002424:	20e8      	movs	r0, #232	; 0xe8
 8002426:	f7ff f85f 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 800242a:	2085      	movs	r0, #133	; 0x85
 800242c:	f7ff f870 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8002430:	2010      	movs	r0, #16
 8002432:	f7ff f86d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8002436:	207a      	movs	r0, #122	; 0x7a
 8002438:	f7ff f86a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 800243c:	20cb      	movs	r0, #203	; 0xcb
 800243e:	f7ff f853 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8002442:	2039      	movs	r0, #57	; 0x39
 8002444:	f7ff f864 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002448:	202c      	movs	r0, #44	; 0x2c
 800244a:	f7ff f861 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800244e:	2000      	movs	r0, #0
 8002450:	f7ff f85e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8002454:	2034      	movs	r0, #52	; 0x34
 8002456:	f7ff f85b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800245a:	2002      	movs	r0, #2
 800245c:	f7ff f858 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8002460:	20f7      	movs	r0, #247	; 0xf7
 8002462:	f7ff f841 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8002466:	2020      	movs	r0, #32
 8002468:	f7ff f852 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 800246c:	20ea      	movs	r0, #234	; 0xea
 800246e:	f7ff f83b 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002472:	2000      	movs	r0, #0
 8002474:	f7ff f84c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002478:	2000      	movs	r0, #0
 800247a:	f7ff f849 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 800247e:	20c0      	movs	r0, #192	; 0xc0
 8002480:	f7ff f832 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 8002484:	201b      	movs	r0, #27
 8002486:	f7ff f843 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 800248a:	20c1      	movs	r0, #193	; 0xc1
 800248c:	f7ff f82c 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8002490:	2001      	movs	r0, #1
 8002492:	f7ff f83d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 8002496:	20c5      	movs	r0, #197	; 0xc5
 8002498:	f7ff f826 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 800249c:	2030      	movs	r0, #48	; 0x30
 800249e:	f7ff f837 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 80024a2:	2030      	movs	r0, #48	; 0x30
 80024a4:	f7ff f834 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 80024a8:	20c7      	movs	r0, #199	; 0xc7
 80024aa:	f7ff f81d 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 80024ae:	20b7      	movs	r0, #183	; 0xb7
 80024b0:	f7ff f82e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 80024b4:	2036      	movs	r0, #54	; 0x36
 80024b6:	f7ff f817 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 80024ba:	2048      	movs	r0, #72	; 0x48
 80024bc:	f7ff f828 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 80024c0:	203a      	movs	r0, #58	; 0x3a
 80024c2:	f7ff f811 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 80024c6:	2055      	movs	r0, #85	; 0x55
 80024c8:	f7ff f822 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 80024cc:	20b1      	movs	r0, #177	; 0xb1
 80024ce:	f7ff f80b 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80024d2:	2000      	movs	r0, #0
 80024d4:	f7ff f81c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 80024d8:	201a      	movs	r0, #26
 80024da:	f7ff f819 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 80024de:	20b6      	movs	r0, #182	; 0xb6
 80024e0:	f7ff f802 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 80024e4:	200a      	movs	r0, #10
 80024e6:	f7ff f813 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80024ea:	20a2      	movs	r0, #162	; 0xa2
 80024ec:	f7ff f810 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80024f0:	20f2      	movs	r0, #242	; 0xf2
 80024f2:	f7fe fff9 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7ff f80a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 80024fc:	2026      	movs	r0, #38	; 0x26
 80024fe:	f7fe fff3 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002502:	2001      	movs	r0, #1
 8002504:	f7ff f804 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 8002508:	20e0      	movs	r0, #224	; 0xe0
 800250a:	f7fe ffed 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 800250e:	200f      	movs	r0, #15
 8002510:	f7fe fffe 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8002514:	202a      	movs	r0, #42	; 0x2a
 8002516:	f7fe fffb 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 800251a:	2028      	movs	r0, #40	; 0x28
 800251c:	f7fe fff8 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8002520:	2008      	movs	r0, #8
 8002522:	f7fe fff5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 8002526:	200e      	movs	r0, #14
 8002528:	f7fe fff2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 800252c:	2008      	movs	r0, #8
 800252e:	f7fe ffef 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8002532:	2054      	movs	r0, #84	; 0x54
 8002534:	f7fe ffec 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 8002538:	20a9      	movs	r0, #169	; 0xa9
 800253a:	f7fe ffe9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 800253e:	2043      	movs	r0, #67	; 0x43
 8002540:	f7fe ffe6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 8002544:	200a      	movs	r0, #10
 8002546:	f7fe ffe3 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 800254a:	200f      	movs	r0, #15
 800254c:	f7fe ffe0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002550:	2000      	movs	r0, #0
 8002552:	f7fe ffdd 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002556:	2000      	movs	r0, #0
 8002558:	f7fe ffda 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800255c:	2000      	movs	r0, #0
 800255e:	f7fe ffd7 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002562:	2000      	movs	r0, #0
 8002564:	f7fe ffd4 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 8002568:	20e1      	movs	r0, #225	; 0xe1
 800256a:	f7fe ffbd 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800256e:	2000      	movs	r0, #0
 8002570:	f7fe ffce 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 8002574:	2015      	movs	r0, #21
 8002576:	f7fe ffcb 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 800257a:	2017      	movs	r0, #23
 800257c:	f7fe ffc8 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 8002580:	2007      	movs	r0, #7
 8002582:	f7fe ffc5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8002586:	2011      	movs	r0, #17
 8002588:	f7fe ffc2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 800258c:	2006      	movs	r0, #6
 800258e:	f7fe ffbf 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 8002592:	202b      	movs	r0, #43	; 0x2b
 8002594:	f7fe ffbc 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002598:	2056      	movs	r0, #86	; 0x56
 800259a:	f7fe ffb9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 800259e:	203c      	movs	r0, #60	; 0x3c
 80025a0:	f7fe ffb6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 80025a4:	2005      	movs	r0, #5
 80025a6:	f7fe ffb3 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 80025aa:	2010      	movs	r0, #16
 80025ac:	f7fe ffb0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 80025b0:	200f      	movs	r0, #15
 80025b2:	f7fe ffad 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80025b6:	203f      	movs	r0, #63	; 0x3f
 80025b8:	f7fe ffaa 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80025bc:	203f      	movs	r0, #63	; 0x3f
 80025be:	f7fe ffa7 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 80025c2:	200f      	movs	r0, #15
 80025c4:	f7fe ffa4 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 80025c8:	202b      	movs	r0, #43	; 0x2b
 80025ca:	f7fe ff8d 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7fe ff9e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7fe ff9b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 80025da:	2001      	movs	r0, #1
 80025dc:	f7fe ff98 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 80025e0:	203f      	movs	r0, #63	; 0x3f
 80025e2:	f7fe ff95 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 80025e6:	202a      	movs	r0, #42	; 0x2a
 80025e8:	f7fe ff7e 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80025ec:	2000      	movs	r0, #0
 80025ee:	f7fe ff8f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025f2:	2000      	movs	r0, #0
 80025f4:	f7fe ff8c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7fe ff89 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 80025fe:	20ef      	movs	r0, #239	; 0xef
 8002600:	f7fe ff86 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 8002604:	2011      	movs	r0, #17
 8002606:	f7fe ff6f 	bl	80014e8 <LCD_WR_REG>
		HAL_Delay(120);
 800260a:	2078      	movs	r0, #120	; 0x78
 800260c:	f005 f8ea 	bl	80077e4 <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 8002610:	2029      	movs	r0, #41	; 0x29
 8002612:	f7fe ff69 	bl	80014e8 <LCD_WR_REG>
 8002616:	f003 b924 	b.w	8005862 <LCD_Init+0x3752>
 800261a:	bf00      	nop
 800261c:	20000140 	.word	0x20000140
 8002620:	a0000104 	.word	0xa0000104
	}else if(lcddev.id==0x6804) //6804初始化
 8002624:	4b58      	ldr	r3, [pc, #352]	; (8002788 <LCD_Init+0x678>)
 8002626:	889b      	ldrh	r3, [r3, #4]
 8002628:	f646 0204 	movw	r2, #26628	; 0x6804
 800262c:	4293      	cmp	r3, r2
 800262e:	f040 80ad 	bne.w	800278c <LCD_Init+0x67c>
	{
		LCD_WR_REG(0X11);
 8002632:	2011      	movs	r0, #17
 8002634:	f7fe ff58 	bl	80014e8 <LCD_WR_REG>
		HAL_Delay(20);
 8002638:	2014      	movs	r0, #20
 800263a:	f005 f8d3 	bl	80077e4 <HAL_Delay>
		LCD_WR_REG(0XD0);//VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 800263e:	20d0      	movs	r0, #208	; 0xd0
 8002640:	f7fe ff52 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0X07);
 8002644:	2007      	movs	r0, #7
 8002646:	f7fe ff63 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X42);
 800264a:	2042      	movs	r0, #66	; 0x42
 800264c:	f7fe ff60 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X1D);
 8002650:	201d      	movs	r0, #29
 8002652:	f7fe ff5d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0XD1);//VCOMH VCOM_AC amplitude setting
 8002656:	20d1      	movs	r0, #209	; 0xd1
 8002658:	f7fe ff46 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 800265c:	2000      	movs	r0, #0
 800265e:	f7fe ff57 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X1a);
 8002662:	201a      	movs	r0, #26
 8002664:	f7fe ff54 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X09);
 8002668:	2009      	movs	r0, #9
 800266a:	f7fe ff51 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0XD2);//Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 800266e:	20d2      	movs	r0, #210	; 0xd2
 8002670:	f7fe ff3a 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 8002674:	2001      	movs	r0, #1
 8002676:	f7fe ff4b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X22);
 800267a:	2022      	movs	r0, #34	; 0x22
 800267c:	f7fe ff48 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0XC0);//REV SM GS
 8002680:	20c0      	movs	r0, #192	; 0xc0
 8002682:	f7fe ff31 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0X10);
 8002686:	2010      	movs	r0, #16
 8002688:	f7fe ff42 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X3B);
 800268c:	203b      	movs	r0, #59	; 0x3b
 800268e:	f7fe ff3f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002692:	2000      	movs	r0, #0
 8002694:	f7fe ff3c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X02);
 8002698:	2002      	movs	r0, #2
 800269a:	f7fe ff39 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X11);
 800269e:	2011      	movs	r0, #17
 80026a0:	f7fe ff36 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0XC5);// Frame rate setting = 72HZ  when setting 0x03
 80026a4:	20c5      	movs	r0, #197	; 0xc5
 80026a6:	f7fe ff1f 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0X03);
 80026aa:	2003      	movs	r0, #3
 80026ac:	f7fe ff30 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0XC8);//Gamma setting
 80026b0:	20c8      	movs	r0, #200	; 0xc8
 80026b2:	f7fe ff19 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f7fe ff2a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 80026bc:	2025      	movs	r0, #37	; 0x25
 80026be:	f7fe ff27 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X21);
 80026c2:	2021      	movs	r0, #33	; 0x21
 80026c4:	f7fe ff24 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X05);
 80026c8:	2005      	movs	r0, #5
 80026ca:	f7fe ff21 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7fe ff1e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X0a);
 80026d4:	200a      	movs	r0, #10
 80026d6:	f7fe ff1b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X65);
 80026da:	2065      	movs	r0, #101	; 0x65
 80026dc:	f7fe ff18 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 80026e0:	2025      	movs	r0, #37	; 0x25
 80026e2:	f7fe ff15 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X77);
 80026e6:	2077      	movs	r0, #119	; 0x77
 80026e8:	f7fe ff12 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X50);
 80026ec:	2050      	movs	r0, #80	; 0x50
 80026ee:	f7fe ff0f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X0f);
 80026f2:	200f      	movs	r0, #15
 80026f4:	f7fe ff0c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 80026f8:	2000      	movs	r0, #0
 80026fa:	f7fe ff09 	bl	8001510 <LCD_WR_DATA>

   		LCD_WR_REG(0XF8);
 80026fe:	20f8      	movs	r0, #248	; 0xf8
 8002700:	f7fe fef2 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 8002704:	2001      	movs	r0, #1
 8002706:	f7fe ff03 	bl	8001510 <LCD_WR_DATA>

 		LCD_WR_REG(0XFE);
 800270a:	20fe      	movs	r0, #254	; 0xfe
 800270c:	f7fe feec 	bl	80014e8 <LCD_WR_REG>
 		LCD_WR_DATA(0X00);
 8002710:	2000      	movs	r0, #0
 8002712:	f7fe fefd 	bl	8001510 <LCD_WR_DATA>
 		LCD_WR_DATA(0X02);
 8002716:	2002      	movs	r0, #2
 8002718:	f7fe fefa 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0X20);//Exit invert mode
 800271c:	2020      	movs	r0, #32
 800271e:	f7fe fee3 	bl	80014e8 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8002722:	2036      	movs	r0, #54	; 0x36
 8002724:	f7fe fee0 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0X08);//原来是a
 8002728:	2008      	movs	r0, #8
 800272a:	f7fe fef1 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0X3A);
 800272e:	203a      	movs	r0, #58	; 0x3a
 8002730:	f7fe feda 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0X55);//16位模式
 8002734:	2055      	movs	r0, #85	; 0x55
 8002736:	f7fe feeb 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0X2B);
 800273a:	202b      	movs	r0, #43	; 0x2b
 800273c:	f7fe fed4 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8002740:	2000      	movs	r0, #0
 8002742:	f7fe fee5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002746:	2000      	movs	r0, #0
 8002748:	f7fe fee2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 800274c:	2001      	movs	r0, #1
 800274e:	f7fe fedf 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X3F);
 8002752:	203f      	movs	r0, #63	; 0x3f
 8002754:	f7fe fedc 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0X2A);
 8002758:	202a      	movs	r0, #42	; 0x2a
 800275a:	f7fe fec5 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 800275e:	2000      	movs	r0, #0
 8002760:	f7fe fed6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8002764:	2000      	movs	r0, #0
 8002766:	f7fe fed3 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 800276a:	2001      	movs	r0, #1
 800276c:	f7fe fed0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0XDF);
 8002770:	20df      	movs	r0, #223	; 0xdf
 8002772:	f7fe fecd 	bl	8001510 <LCD_WR_DATA>
		HAL_Delay(120);
 8002776:	2078      	movs	r0, #120	; 0x78
 8002778:	f005 f834 	bl	80077e4 <HAL_Delay>
		LCD_WR_REG(0X29);
 800277c:	2029      	movs	r0, #41	; 0x29
 800277e:	f7fe feb3 	bl	80014e8 <LCD_WR_REG>
 8002782:	f003 b86e 	b.w	8005862 <LCD_Init+0x3752>
 8002786:	bf00      	nop
 8002788:	20000140 	.word	0x20000140
 	}else if(lcddev.id==0x5310)
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <LCD_Init+0x68c>)
 800278e:	889b      	ldrh	r3, [r3, #4]
 8002790:	f245 3210 	movw	r2, #21264	; 0x5310
 8002794:	4293      	cmp	r3, r2
 8002796:	f040 877c 	bne.w	8003692 <LCD_Init+0x1582>
 800279a:	e001      	b.n	80027a0 <LCD_Init+0x690>
 800279c:	20000140 	.word	0x20000140
	{
		LCD_WR_REG(0xED);
 80027a0:	20ed      	movs	r0, #237	; 0xed
 80027a2:	f7fe fea1 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80027a6:	2001      	movs	r0, #1
 80027a8:	f7fe feb2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 80027ac:	20fe      	movs	r0, #254	; 0xfe
 80027ae:	f7fe feaf 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 80027b2:	20ee      	movs	r0, #238	; 0xee
 80027b4:	f7fe fe98 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 80027b8:	20de      	movs	r0, #222	; 0xde
 80027ba:	f7fe fea9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80027be:	2021      	movs	r0, #33	; 0x21
 80027c0:	f7fe fea6 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 80027c4:	20f1      	movs	r0, #241	; 0xf1
 80027c6:	f7fe fe8f 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80027ca:	2001      	movs	r0, #1
 80027cc:	f7fe fea0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 80027d0:	20df      	movs	r0, #223	; 0xdf
 80027d2:	f7fe fe89 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 80027d6:	2010      	movs	r0, #16
 80027d8:	f7fe fe9a 	bl	8001510 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80027dc:	20c4      	movs	r0, #196	; 0xc4
 80027de:	f7fe fe83 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 80027e2:	208f      	movs	r0, #143	; 0x8f
 80027e4:	f7fe fe94 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 80027e8:	20c6      	movs	r0, #198	; 0xc6
 80027ea:	f7fe fe7d 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80027ee:	2000      	movs	r0, #0
 80027f0:	f7fe fe8e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80027f4:	20e2      	movs	r0, #226	; 0xe2
 80027f6:	f7fe fe8b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80027fa:	20e2      	movs	r0, #226	; 0xe2
 80027fc:	f7fe fe88 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8002800:	20e2      	movs	r0, #226	; 0xe2
 8002802:	f7fe fe85 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 8002806:	20bf      	movs	r0, #191	; 0xbf
 8002808:	f7fe fe6e 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 800280c:	20aa      	movs	r0, #170	; 0xaa
 800280e:	f7fe fe7f 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 8002812:	20b0      	movs	r0, #176	; 0xb0
 8002814:	f7fe fe68 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 8002818:	200d      	movs	r0, #13
 800281a:	f7fe fe79 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800281e:	2000      	movs	r0, #0
 8002820:	f7fe fe76 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 8002824:	200d      	movs	r0, #13
 8002826:	f7fe fe73 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800282a:	2000      	movs	r0, #0
 800282c:	f7fe fe70 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8002830:	2011      	movs	r0, #17
 8002832:	f7fe fe6d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002836:	2000      	movs	r0, #0
 8002838:	f7fe fe6a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 800283c:	2019      	movs	r0, #25
 800283e:	f7fe fe67 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002842:	2000      	movs	r0, #0
 8002844:	f7fe fe64 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8002848:	2021      	movs	r0, #33	; 0x21
 800284a:	f7fe fe61 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800284e:	2000      	movs	r0, #0
 8002850:	f7fe fe5e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8002854:	202d      	movs	r0, #45	; 0x2d
 8002856:	f7fe fe5b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800285a:	2000      	movs	r0, #0
 800285c:	f7fe fe58 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 8002860:	203d      	movs	r0, #61	; 0x3d
 8002862:	f7fe fe55 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002866:	2000      	movs	r0, #0
 8002868:	f7fe fe52 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 800286c:	205d      	movs	r0, #93	; 0x5d
 800286e:	f7fe fe4f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002872:	2000      	movs	r0, #0
 8002874:	f7fe fe4c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8002878:	205d      	movs	r0, #93	; 0x5d
 800287a:	f7fe fe49 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe fe46 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 8002884:	20b1      	movs	r0, #177	; 0xb1
 8002886:	f7fe fe2f 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 800288a:	2080      	movs	r0, #128	; 0x80
 800288c:	f7fe fe40 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002890:	2000      	movs	r0, #0
 8002892:	f7fe fe3d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8002896:	208b      	movs	r0, #139	; 0x8b
 8002898:	f7fe fe3a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800289c:	2000      	movs	r0, #0
 800289e:	f7fe fe37 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 80028a2:	2096      	movs	r0, #150	; 0x96
 80028a4:	f7fe fe34 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028a8:	2000      	movs	r0, #0
 80028aa:	f7fe fe31 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 80028ae:	20b2      	movs	r0, #178	; 0xb2
 80028b0:	f7fe fe1a 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80028b4:	2000      	movs	r0, #0
 80028b6:	f7fe fe2b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7fe fe28 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 80028c0:	2002      	movs	r0, #2
 80028c2:	f7fe fe25 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f7fe fe22 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80028cc:	2003      	movs	r0, #3
 80028ce:	f7fe fe1f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7fe fe1c 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 80028d8:	20b3      	movs	r0, #179	; 0xb3
 80028da:	f7fe fe05 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80028de:	2000      	movs	r0, #0
 80028e0:	f7fe fe16 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028e4:	2000      	movs	r0, #0
 80028e6:	f7fe fe13 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7fe fe10 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028f0:	2000      	movs	r0, #0
 80028f2:	f7fe fe0d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7fe fe0a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028fc:	2000      	movs	r0, #0
 80028fe:	f7fe fe07 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002902:	2000      	movs	r0, #0
 8002904:	f7fe fe04 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002908:	2000      	movs	r0, #0
 800290a:	f7fe fe01 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800290e:	2000      	movs	r0, #0
 8002910:	f7fe fdfe 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002914:	2000      	movs	r0, #0
 8002916:	f7fe fdfb 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800291a:	2000      	movs	r0, #0
 800291c:	f7fe fdf8 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002920:	2000      	movs	r0, #0
 8002922:	f7fe fdf5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002926:	2000      	movs	r0, #0
 8002928:	f7fe fdf2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800292c:	2000      	movs	r0, #0
 800292e:	f7fe fdef 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002932:	2000      	movs	r0, #0
 8002934:	f7fe fdec 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002938:	2000      	movs	r0, #0
 800293a:	f7fe fde9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800293e:	2000      	movs	r0, #0
 8002940:	f7fe fde6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002944:	2000      	movs	r0, #0
 8002946:	f7fe fde3 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800294a:	2000      	movs	r0, #0
 800294c:	f7fe fde0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002950:	2000      	movs	r0, #0
 8002952:	f7fe fddd 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002956:	2000      	movs	r0, #0
 8002958:	f7fe fdda 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800295c:	2000      	movs	r0, #0
 800295e:	f7fe fdd7 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002962:	2000      	movs	r0, #0
 8002964:	f7fe fdd4 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002968:	2000      	movs	r0, #0
 800296a:	f7fe fdd1 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 800296e:	20b4      	movs	r0, #180	; 0xb4
 8002970:	f7fe fdba 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 8002974:	208b      	movs	r0, #139	; 0x8b
 8002976:	f7fe fdcb 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800297a:	2000      	movs	r0, #0
 800297c:	f7fe fdc8 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8002980:	2096      	movs	r0, #150	; 0x96
 8002982:	f7fe fdc5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002986:	2000      	movs	r0, #0
 8002988:	f7fe fdc2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 800298c:	20a1      	movs	r0, #161	; 0xa1
 800298e:	f7fe fdbf 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002992:	2000      	movs	r0, #0
 8002994:	f7fe fdbc 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 8002998:	20b5      	movs	r0, #181	; 0xb5
 800299a:	f7fe fda5 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 800299e:	2002      	movs	r0, #2
 80029a0:	f7fe fdb6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7fe fdb3 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80029aa:	2003      	movs	r0, #3
 80029ac:	f7fe fdb0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7fe fdad 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 80029b6:	2004      	movs	r0, #4
 80029b8:	f7fe fdaa 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029bc:	2000      	movs	r0, #0
 80029be:	f7fe fda7 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 80029c2:	20b6      	movs	r0, #182	; 0xb6
 80029c4:	f7fe fd90 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7fe fda1 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029ce:	2000      	movs	r0, #0
 80029d0:	f7fe fd9e 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 80029d4:	20b7      	movs	r0, #183	; 0xb7
 80029d6:	f7fe fd87 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80029da:	2000      	movs	r0, #0
 80029dc:	f7fe fd98 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7fe fd95 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80029e6:	203f      	movs	r0, #63	; 0x3f
 80029e8:	f7fe fd92 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7fe fd8f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 80029f2:	205e      	movs	r0, #94	; 0x5e
 80029f4:	f7fe fd8c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7fe fd89 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80029fe:	2064      	movs	r0, #100	; 0x64
 8002a00:	f7fe fd86 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7fe fd83 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 8002a0a:	208c      	movs	r0, #140	; 0x8c
 8002a0c:	f7fe fd80 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fe fd7d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 8002a16:	20ac      	movs	r0, #172	; 0xac
 8002a18:	f7fe fd7a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a1c:	2000      	movs	r0, #0
 8002a1e:	f7fe fd77 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002a22:	20dc      	movs	r0, #220	; 0xdc
 8002a24:	f7fe fd74 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7fe fd71 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 8002a2e:	2070      	movs	r0, #112	; 0x70
 8002a30:	f7fe fd6e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f7fe fd6b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 8002a3a:	2090      	movs	r0, #144	; 0x90
 8002a3c:	f7fe fd68 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a40:	2000      	movs	r0, #0
 8002a42:	f7fe fd65 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 8002a46:	20eb      	movs	r0, #235	; 0xeb
 8002a48:	f7fe fd62 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	f7fe fd5f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002a52:	20dc      	movs	r0, #220	; 0xdc
 8002a54:	f7fe fd5c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7fe fd59 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 8002a5e:	20b8      	movs	r0, #184	; 0xb8
 8002a60:	f7fe fd42 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fe fd53 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7fe fd50 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f7fe fd4d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7fe fd4a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7fe fd47 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7fe fd44 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f7fe fd41 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7fe fd3e 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 8002a94:	20ba      	movs	r0, #186	; 0xba
 8002a96:	f7fe fd27 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 8002a9a:	2024      	movs	r0, #36	; 0x24
 8002a9c:	f7fe fd38 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aa0:	2000      	movs	r0, #0
 8002aa2:	f7fe fd35 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7fe fd32 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aac:	2000      	movs	r0, #0
 8002aae:	f7fe fd2f 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 8002ab2:	20c1      	movs	r0, #193	; 0xc1
 8002ab4:	f7fe fd18 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8002ab8:	2020      	movs	r0, #32
 8002aba:	f7fe fd29 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7fe fd26 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8002ac4:	2054      	movs	r0, #84	; 0x54
 8002ac6:	f7fe fd23 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fe fd20 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8002ad0:	20ff      	movs	r0, #255	; 0xff
 8002ad2:	f7fe fd1d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7fe fd1a 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 8002adc:	20c2      	movs	r0, #194	; 0xc2
 8002ade:	f7fe fd03 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8002ae2:	200a      	movs	r0, #10
 8002ae4:	f7fe fd14 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7fe fd11 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8002aee:	2004      	movs	r0, #4
 8002af0:	f7fe fd0e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7fe fd0b 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 8002afa:	20c3      	movs	r0, #195	; 0xc3
 8002afc:	f7fe fcf4 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 8002b00:	203c      	movs	r0, #60	; 0x3c
 8002b02:	f7fe fd05 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b06:	2000      	movs	r0, #0
 8002b08:	f7fe fd02 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 8002b0c:	203a      	movs	r0, #58	; 0x3a
 8002b0e:	f7fe fcff 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b12:	2000      	movs	r0, #0
 8002b14:	f7fe fcfc 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 8002b18:	2039      	movs	r0, #57	; 0x39
 8002b1a:	f7fe fcf9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f7fe fcf6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 8002b24:	2037      	movs	r0, #55	; 0x37
 8002b26:	f7fe fcf3 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b2a:	2000      	movs	r0, #0
 8002b2c:	f7fe fcf0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002b30:	203c      	movs	r0, #60	; 0x3c
 8002b32:	f7fe fced 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b36:	2000      	movs	r0, #0
 8002b38:	f7fe fcea 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002b3c:	2036      	movs	r0, #54	; 0x36
 8002b3e:	f7fe fce7 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b42:	2000      	movs	r0, #0
 8002b44:	f7fe fce4 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8002b48:	2032      	movs	r0, #50	; 0x32
 8002b4a:	f7fe fce1 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b4e:	2000      	movs	r0, #0
 8002b50:	f7fe fcde 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8002b54:	202f      	movs	r0, #47	; 0x2f
 8002b56:	f7fe fcdb 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b5a:	2000      	movs	r0, #0
 8002b5c:	f7fe fcd8 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002b60:	202c      	movs	r0, #44	; 0x2c
 8002b62:	f7fe fcd5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b66:	2000      	movs	r0, #0
 8002b68:	f7fe fcd2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002b6c:	2029      	movs	r0, #41	; 0x29
 8002b6e:	f7fe fccf 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b72:	2000      	movs	r0, #0
 8002b74:	f7fe fccc 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8002b78:	2026      	movs	r0, #38	; 0x26
 8002b7a:	f7fe fcc9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f7fe fcc6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002b84:	2024      	movs	r0, #36	; 0x24
 8002b86:	f7fe fcc3 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	f7fe fcc0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002b90:	2024      	movs	r0, #36	; 0x24
 8002b92:	f7fe fcbd 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b96:	2000      	movs	r0, #0
 8002b98:	f7fe fcba 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002b9c:	2023      	movs	r0, #35	; 0x23
 8002b9e:	f7fe fcb7 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f7fe fcb4 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002ba8:	203c      	movs	r0, #60	; 0x3c
 8002baa:	f7fe fcb1 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f7fe fcae 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002bb4:	2036      	movs	r0, #54	; 0x36
 8002bb6:	f7fe fcab 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f7fe fca8 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8002bc0:	2032      	movs	r0, #50	; 0x32
 8002bc2:	f7fe fca5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bc6:	2000      	movs	r0, #0
 8002bc8:	f7fe fca2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8002bcc:	202f      	movs	r0, #47	; 0x2f
 8002bce:	f7fe fc9f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	f7fe fc9c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002bd8:	202c      	movs	r0, #44	; 0x2c
 8002bda:	f7fe fc99 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bde:	2000      	movs	r0, #0
 8002be0:	f7fe fc96 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002be4:	2029      	movs	r0, #41	; 0x29
 8002be6:	f7fe fc93 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bea:	2000      	movs	r0, #0
 8002bec:	f7fe fc90 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8002bf0:	2026      	movs	r0, #38	; 0x26
 8002bf2:	f7fe fc8d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f7fe fc8a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002bfc:	2024      	movs	r0, #36	; 0x24
 8002bfe:	f7fe fc87 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c02:	2000      	movs	r0, #0
 8002c04:	f7fe fc84 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002c08:	2024      	movs	r0, #36	; 0x24
 8002c0a:	f7fe fc81 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f7fe fc7e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002c14:	2023      	movs	r0, #35	; 0x23
 8002c16:	f7fe fc7b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f7fe fc78 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 8002c20:	20c4      	movs	r0, #196	; 0xc4
 8002c22:	f7fe fc61 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 8002c26:	2062      	movs	r0, #98	; 0x62
 8002c28:	f7fe fc72 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7fe fc6f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8002c32:	2005      	movs	r0, #5
 8002c34:	f7fe fc6c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f7fe fc69 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002c3e:	2084      	movs	r0, #132	; 0x84
 8002c40:	f7fe fc66 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c44:	2000      	movs	r0, #0
 8002c46:	f7fe fc63 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 8002c4a:	20f0      	movs	r0, #240	; 0xf0
 8002c4c:	f7fe fc60 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c50:	2000      	movs	r0, #0
 8002c52:	f7fe fc5d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8002c56:	2018      	movs	r0, #24
 8002c58:	f7fe fc5a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c5c:	2000      	movs	r0, #0
 8002c5e:	f7fe fc57 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 8002c62:	20a4      	movs	r0, #164	; 0xa4
 8002c64:	f7fe fc54 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c68:	2000      	movs	r0, #0
 8002c6a:	f7fe fc51 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8002c6e:	2018      	movs	r0, #24
 8002c70:	f7fe fc4e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c74:	2000      	movs	r0, #0
 8002c76:	f7fe fc4b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002c7a:	2050      	movs	r0, #80	; 0x50
 8002c7c:	f7fe fc48 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7fe fc45 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 8002c86:	200c      	movs	r0, #12
 8002c88:	f7fe fc42 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f7fe fc3f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8002c92:	2017      	movs	r0, #23
 8002c94:	f7fe fc3c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f7fe fc39 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 8002c9e:	2095      	movs	r0, #149	; 0x95
 8002ca0:	f7fe fc36 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	f7fe fc33 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002caa:	20f3      	movs	r0, #243	; 0xf3
 8002cac:	f7fe fc30 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	f7fe fc2d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 8002cb6:	20e6      	movs	r0, #230	; 0xe6
 8002cb8:	f7fe fc2a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cbc:	2000      	movs	r0, #0
 8002cbe:	f7fe fc27 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 8002cc2:	20c5      	movs	r0, #197	; 0xc5
 8002cc4:	f7fe fc10 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8002cc8:	2032      	movs	r0, #50	; 0x32
 8002cca:	f7fe fc21 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cce:	2000      	movs	r0, #0
 8002cd0:	f7fe fc1e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002cd4:	2044      	movs	r0, #68	; 0x44
 8002cd6:	f7fe fc1b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cda:	2000      	movs	r0, #0
 8002cdc:	f7fe fc18 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 8002ce0:	2065      	movs	r0, #101	; 0x65
 8002ce2:	f7fe fc15 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fe fc12 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002cec:	2076      	movs	r0, #118	; 0x76
 8002cee:	f7fe fc0f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	f7fe fc0c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002cf8:	2088      	movs	r0, #136	; 0x88
 8002cfa:	f7fe fc09 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f7fe fc06 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8002d04:	20c6      	movs	r0, #198	; 0xc6
 8002d06:	f7fe fbef 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8002d0a:	2020      	movs	r0, #32
 8002d0c:	f7fe fc00 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d10:	2000      	movs	r0, #0
 8002d12:	f7fe fbfd 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8002d16:	2017      	movs	r0, #23
 8002d18:	f7fe fbfa 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d1c:	2000      	movs	r0, #0
 8002d1e:	f7fe fbf7 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002d22:	2001      	movs	r0, #1
 8002d24:	f7fe fbf4 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d28:	2000      	movs	r0, #0
 8002d2a:	f7fe fbf1 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 8002d2e:	20c7      	movs	r0, #199	; 0xc7
 8002d30:	f7fe fbda 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002d34:	2000      	movs	r0, #0
 8002d36:	f7fe fbeb 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d3a:	2000      	movs	r0, #0
 8002d3c:	f7fe fbe8 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d40:	2000      	movs	r0, #0
 8002d42:	f7fe fbe5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d46:	2000      	movs	r0, #0
 8002d48:	f7fe fbe2 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8002d4c:	20c8      	movs	r0, #200	; 0xc8
 8002d4e:	f7fe fbcb 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002d52:	2000      	movs	r0, #0
 8002d54:	f7fe fbdc 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7fe fbd9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d5e:	2000      	movs	r0, #0
 8002d60:	f7fe fbd6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d64:	2000      	movs	r0, #0
 8002d66:	f7fe fbd3 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 8002d6a:	20c9      	movs	r0, #201	; 0xc9
 8002d6c:	f7fe fbbc 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002d70:	2000      	movs	r0, #0
 8002d72:	f7fe fbcd 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d76:	2000      	movs	r0, #0
 8002d78:	f7fe fbca 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d7c:	2000      	movs	r0, #0
 8002d7e:	f7fe fbc7 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d82:	2000      	movs	r0, #0
 8002d84:	f7fe fbc4 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7fe fbc1 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d8e:	2000      	movs	r0, #0
 8002d90:	f7fe fbbe 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d94:	2000      	movs	r0, #0
 8002d96:	f7fe fbbb 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002d9a:	2000      	movs	r0, #0
 8002d9c:	f7fe fbb8 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002da0:	2000      	movs	r0, #0
 8002da2:	f7fe fbb5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002da6:	2000      	movs	r0, #0
 8002da8:	f7fe fbb2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fe fbaf 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002db2:	2000      	movs	r0, #0
 8002db4:	f7fe fbac 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002db8:	2000      	movs	r0, #0
 8002dba:	f7fe fba9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	f7fe fba6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f7fe fba3 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002dca:	2000      	movs	r0, #0
 8002dcc:	f7fe fba0 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 8002dd0:	20e0      	movs	r0, #224	; 0xe0
 8002dd2:	f7fe fb89 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8002dd6:	2016      	movs	r0, #22
 8002dd8:	f7fe fb9a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7fe fb97 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8002de2:	201c      	movs	r0, #28
 8002de4:	f7fe fb94 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002de8:	2000      	movs	r0, #0
 8002dea:	f7fe fb91 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8002dee:	2021      	movs	r0, #33	; 0x21
 8002df0:	f7fe fb8e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7fe fb8b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002dfa:	2036      	movs	r0, #54	; 0x36
 8002dfc:	f7fe fb88 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7fe fb85 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 8002e06:	2046      	movs	r0, #70	; 0x46
 8002e08:	f7fe fb82 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	f7fe fb7f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 8002e12:	2052      	movs	r0, #82	; 0x52
 8002e14:	f7fe fb7c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e18:	2000      	movs	r0, #0
 8002e1a:	f7fe fb79 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002e1e:	2064      	movs	r0, #100	; 0x64
 8002e20:	f7fe fb76 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e24:	2000      	movs	r0, #0
 8002e26:	f7fe fb73 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8002e2a:	207a      	movs	r0, #122	; 0x7a
 8002e2c:	f7fe fb70 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e30:	2000      	movs	r0, #0
 8002e32:	f7fe fb6d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8002e36:	208b      	movs	r0, #139	; 0x8b
 8002e38:	f7fe fb6a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f7fe fb67 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002e42:	2099      	movs	r0, #153	; 0x99
 8002e44:	f7fe fb64 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e48:	2000      	movs	r0, #0
 8002e4a:	f7fe fb61 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002e4e:	20a8      	movs	r0, #168	; 0xa8
 8002e50:	f7fe fb5e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e54:	2000      	movs	r0, #0
 8002e56:	f7fe fb5b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8002e5a:	20b9      	movs	r0, #185	; 0xb9
 8002e5c:	f7fe fb58 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e60:	2000      	movs	r0, #0
 8002e62:	f7fe fb55 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002e66:	20c4      	movs	r0, #196	; 0xc4
 8002e68:	f7fe fb52 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e6c:	2000      	movs	r0, #0
 8002e6e:	f7fe fb4f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002e72:	20ca      	movs	r0, #202	; 0xca
 8002e74:	f7fe fb4c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e78:	2000      	movs	r0, #0
 8002e7a:	f7fe fb49 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002e7e:	20d2      	movs	r0, #210	; 0xd2
 8002e80:	f7fe fb46 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fe fb43 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 8002e8a:	20d9      	movs	r0, #217	; 0xd9
 8002e8c:	f7fe fb40 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e90:	2000      	movs	r0, #0
 8002e92:	f7fe fb3d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8002e96:	20e0      	movs	r0, #224	; 0xe0
 8002e98:	f7fe fb3a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002e9c:	2000      	movs	r0, #0
 8002e9e:	f7fe fb37 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002ea2:	20f3      	movs	r0, #243	; 0xf3
 8002ea4:	f7fe fb34 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7fe fb31 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 8002eae:	20e1      	movs	r0, #225	; 0xe1
 8002eb0:	f7fe fb1a 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8002eb4:	2016      	movs	r0, #22
 8002eb6:	f7fe fb2b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fe fb28 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8002ec0:	201c      	movs	r0, #28
 8002ec2:	f7fe fb25 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	f7fe fb22 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 8002ecc:	2022      	movs	r0, #34	; 0x22
 8002ece:	f7fe fb1f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ed2:	2000      	movs	r0, #0
 8002ed4:	f7fe fb1c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002ed8:	2036      	movs	r0, #54	; 0x36
 8002eda:	f7fe fb19 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ede:	2000      	movs	r0, #0
 8002ee0:	f7fe fb16 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8002ee4:	2045      	movs	r0, #69	; 0x45
 8002ee6:	f7fe fb13 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002eea:	2000      	movs	r0, #0
 8002eec:	f7fe fb10 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 8002ef0:	2052      	movs	r0, #82	; 0x52
 8002ef2:	f7fe fb0d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f7fe fb0a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002efc:	2064      	movs	r0, #100	; 0x64
 8002efe:	f7fe fb07 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f02:	2000      	movs	r0, #0
 8002f04:	f7fe fb04 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8002f08:	207a      	movs	r0, #122	; 0x7a
 8002f0a:	f7fe fb01 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f0e:	2000      	movs	r0, #0
 8002f10:	f7fe fafe 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8002f14:	208b      	movs	r0, #139	; 0x8b
 8002f16:	f7fe fafb 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f7fe faf8 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002f20:	2099      	movs	r0, #153	; 0x99
 8002f22:	f7fe faf5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f26:	2000      	movs	r0, #0
 8002f28:	f7fe faf2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002f2c:	20a8      	movs	r0, #168	; 0xa8
 8002f2e:	f7fe faef 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f32:	2000      	movs	r0, #0
 8002f34:	f7fe faec 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8002f38:	20b9      	movs	r0, #185	; 0xb9
 8002f3a:	f7fe fae9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f7fe fae6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002f44:	20c4      	movs	r0, #196	; 0xc4
 8002f46:	f7fe fae3 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	f7fe fae0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002f50:	20ca      	movs	r0, #202	; 0xca
 8002f52:	f7fe fadd 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f56:	2000      	movs	r0, #0
 8002f58:	f7fe fada 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002f5c:	20d2      	movs	r0, #210	; 0xd2
 8002f5e:	f7fe fad7 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f62:	2000      	movs	r0, #0
 8002f64:	f7fe fad4 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 8002f68:	20d8      	movs	r0, #216	; 0xd8
 8002f6a:	f7fe fad1 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f6e:	2000      	movs	r0, #0
 8002f70:	f7fe face 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8002f74:	20e0      	movs	r0, #224	; 0xe0
 8002f76:	f7fe facb 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f7a:	2000      	movs	r0, #0
 8002f7c:	f7fe fac8 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002f80:	20f3      	movs	r0, #243	; 0xf3
 8002f82:	f7fe fac5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f86:	2000      	movs	r0, #0
 8002f88:	f7fe fac2 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 8002f8c:	20e2      	movs	r0, #226	; 0xe2
 8002f8e:	f7fe faab 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002f92:	2005      	movs	r0, #5
 8002f94:	f7fe fabc 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f7fe fab9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 8002f9e:	200b      	movs	r0, #11
 8002fa0:	f7fe fab6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7fe fab3 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 8002faa:	201b      	movs	r0, #27
 8002fac:	f7fe fab0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f7fe faad 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8002fb6:	2034      	movs	r0, #52	; 0x34
 8002fb8:	f7fe faaa 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f7fe faa7 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002fc2:	2044      	movs	r0, #68	; 0x44
 8002fc4:	f7fe faa4 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fc8:	2000      	movs	r0, #0
 8002fca:	f7fe faa1 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 8002fce:	204f      	movs	r0, #79	; 0x4f
 8002fd0:	f7fe fa9e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7fe fa9b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 8002fda:	2061      	movs	r0, #97	; 0x61
 8002fdc:	f7fe fa98 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fe0:	2000      	movs	r0, #0
 8002fe2:	f7fe fa95 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 8002fe6:	2079      	movs	r0, #121	; 0x79
 8002fe8:	f7fe fa92 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002fec:	2000      	movs	r0, #0
 8002fee:	f7fe fa8f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002ff2:	2088      	movs	r0, #136	; 0x88
 8002ff4:	f7fe fa8c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f7fe fa89 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8002ffe:	2097      	movs	r0, #151	; 0x97
 8003000:	f7fe fa86 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003004:	2000      	movs	r0, #0
 8003006:	f7fe fa83 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 800300a:	20a6      	movs	r0, #166	; 0xa6
 800300c:	f7fe fa80 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003010:	2000      	movs	r0, #0
 8003012:	f7fe fa7d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8003016:	20b7      	movs	r0, #183	; 0xb7
 8003018:	f7fe fa7a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800301c:	2000      	movs	r0, #0
 800301e:	f7fe fa77 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8003022:	20c2      	movs	r0, #194	; 0xc2
 8003024:	f7fe fa74 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003028:	2000      	movs	r0, #0
 800302a:	f7fe fa71 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 800302e:	20c7      	movs	r0, #199	; 0xc7
 8003030:	f7fe fa6e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003034:	2000      	movs	r0, #0
 8003036:	f7fe fa6b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 800303a:	20d1      	movs	r0, #209	; 0xd1
 800303c:	f7fe fa68 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003040:	2000      	movs	r0, #0
 8003042:	f7fe fa65 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 8003046:	20d6      	movs	r0, #214	; 0xd6
 8003048:	f7fe fa62 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800304c:	2000      	movs	r0, #0
 800304e:	f7fe fa5f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8003052:	20dd      	movs	r0, #221	; 0xdd
 8003054:	f7fe fa5c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003058:	2000      	movs	r0, #0
 800305a:	f7fe fa59 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800305e:	20f3      	movs	r0, #243	; 0xf3
 8003060:	f7fe fa56 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003064:	2000      	movs	r0, #0
 8003066:	f7fe fa53 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 800306a:	20e3      	movs	r0, #227	; 0xe3
 800306c:	f7fe fa3c 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8003070:	2005      	movs	r0, #5
 8003072:	f7fe fa4d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003076:	2000      	movs	r0, #0
 8003078:	f7fe fa4a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 800307c:	200a      	movs	r0, #10
 800307e:	f7fe fa47 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003082:	2000      	movs	r0, #0
 8003084:	f7fe fa44 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8003088:	201c      	movs	r0, #28
 800308a:	f7fe fa41 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800308e:	2000      	movs	r0, #0
 8003090:	f7fe fa3e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8003094:	2033      	movs	r0, #51	; 0x33
 8003096:	f7fe fa3b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800309a:	2000      	movs	r0, #0
 800309c:	f7fe fa38 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80030a0:	2044      	movs	r0, #68	; 0x44
 80030a2:	f7fe fa35 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030a6:	2000      	movs	r0, #0
 80030a8:	f7fe fa32 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 80030ac:	2050      	movs	r0, #80	; 0x50
 80030ae:	f7fe fa2f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030b2:	2000      	movs	r0, #0
 80030b4:	f7fe fa2c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 80030b8:	2062      	movs	r0, #98	; 0x62
 80030ba:	f7fe fa29 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030be:	2000      	movs	r0, #0
 80030c0:	f7fe fa26 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 80030c4:	2078      	movs	r0, #120	; 0x78
 80030c6:	f7fe fa23 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030ca:	2000      	movs	r0, #0
 80030cc:	f7fe fa20 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80030d0:	2088      	movs	r0, #136	; 0x88
 80030d2:	f7fe fa1d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030d6:	2000      	movs	r0, #0
 80030d8:	f7fe fa1a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80030dc:	2097      	movs	r0, #151	; 0x97
 80030de:	f7fe fa17 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030e2:	2000      	movs	r0, #0
 80030e4:	f7fe fa14 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80030e8:	20a6      	movs	r0, #166	; 0xa6
 80030ea:	f7fe fa11 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7fe fa0e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80030f4:	20b7      	movs	r0, #183	; 0xb7
 80030f6:	f7fe fa0b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80030fa:	2000      	movs	r0, #0
 80030fc:	f7fe fa08 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8003100:	20c2      	movs	r0, #194	; 0xc2
 8003102:	f7fe fa05 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003106:	2000      	movs	r0, #0
 8003108:	f7fe fa02 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 800310c:	20c7      	movs	r0, #199	; 0xc7
 800310e:	f7fe f9ff 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003112:	2000      	movs	r0, #0
 8003114:	f7fe f9fc 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8003118:	20d1      	movs	r0, #209	; 0xd1
 800311a:	f7fe f9f9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800311e:	2000      	movs	r0, #0
 8003120:	f7fe f9f6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 8003124:	20d5      	movs	r0, #213	; 0xd5
 8003126:	f7fe f9f3 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800312a:	2000      	movs	r0, #0
 800312c:	f7fe f9f0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8003130:	20dd      	movs	r0, #221	; 0xdd
 8003132:	f7fe f9ed 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003136:	2000      	movs	r0, #0
 8003138:	f7fe f9ea 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800313c:	20f3      	movs	r0, #243	; 0xf3
 800313e:	f7fe f9e7 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003142:	2000      	movs	r0, #0
 8003144:	f7fe f9e4 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 8003148:	20e4      	movs	r0, #228	; 0xe4
 800314a:	f7fe f9cd 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 800314e:	2001      	movs	r0, #1
 8003150:	f7fe f9de 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003154:	2000      	movs	r0, #0
 8003156:	f7fe f9db 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 800315a:	2001      	movs	r0, #1
 800315c:	f7fe f9d8 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003160:	2000      	movs	r0, #0
 8003162:	f7fe f9d5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8003166:	2002      	movs	r0, #2
 8003168:	f7fe f9d2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800316c:	2000      	movs	r0, #0
 800316e:	f7fe f9cf 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8003172:	202a      	movs	r0, #42	; 0x2a
 8003174:	f7fe f9cc 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003178:	2000      	movs	r0, #0
 800317a:	f7fe f9c9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 800317e:	203c      	movs	r0, #60	; 0x3c
 8003180:	f7fe f9c6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003184:	2000      	movs	r0, #0
 8003186:	f7fe f9c3 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 800318a:	204b      	movs	r0, #75	; 0x4b
 800318c:	f7fe f9c0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003190:	2000      	movs	r0, #0
 8003192:	f7fe f9bd 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8003196:	205d      	movs	r0, #93	; 0x5d
 8003198:	f7fe f9ba 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800319c:	2000      	movs	r0, #0
 800319e:	f7fe f9b7 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 80031a2:	2074      	movs	r0, #116	; 0x74
 80031a4:	f7fe f9b4 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031a8:	2000      	movs	r0, #0
 80031aa:	f7fe f9b1 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 80031ae:	2084      	movs	r0, #132	; 0x84
 80031b0:	f7fe f9ae 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031b4:	2000      	movs	r0, #0
 80031b6:	f7fe f9ab 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 80031ba:	2093      	movs	r0, #147	; 0x93
 80031bc:	f7fe f9a8 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031c0:	2000      	movs	r0, #0
 80031c2:	f7fe f9a5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80031c6:	20a2      	movs	r0, #162	; 0xa2
 80031c8:	f7fe f9a2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031cc:	2000      	movs	r0, #0
 80031ce:	f7fe f99f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 80031d2:	20b3      	movs	r0, #179	; 0xb3
 80031d4:	f7fe f99c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031d8:	2000      	movs	r0, #0
 80031da:	f7fe f999 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 80031de:	20be      	movs	r0, #190	; 0xbe
 80031e0:	f7fe f996 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031e4:	2000      	movs	r0, #0
 80031e6:	f7fe f993 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 80031ea:	20c4      	movs	r0, #196	; 0xc4
 80031ec:	f7fe f990 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031f0:	2000      	movs	r0, #0
 80031f2:	f7fe f98d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80031f6:	20cd      	movs	r0, #205	; 0xcd
 80031f8:	f7fe f98a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80031fc:	2000      	movs	r0, #0
 80031fe:	f7fe f987 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8003202:	20d3      	movs	r0, #211	; 0xd3
 8003204:	f7fe f984 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003208:	2000      	movs	r0, #0
 800320a:	f7fe f981 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 800320e:	20dd      	movs	r0, #221	; 0xdd
 8003210:	f7fe f97e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003214:	2000      	movs	r0, #0
 8003216:	f7fe f97b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800321a:	20f3      	movs	r0, #243	; 0xf3
 800321c:	f7fe f978 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003220:	2000      	movs	r0, #0
 8003222:	f7fe f975 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 8003226:	20e5      	movs	r0, #229	; 0xe5
 8003228:	f7fe f95e 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800322c:	2000      	movs	r0, #0
 800322e:	f7fe f96f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003232:	2000      	movs	r0, #0
 8003234:	f7fe f96c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003238:	2000      	movs	r0, #0
 800323a:	f7fe f969 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800323e:	2000      	movs	r0, #0
 8003240:	f7fe f966 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8003244:	2002      	movs	r0, #2
 8003246:	f7fe f963 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800324a:	2000      	movs	r0, #0
 800324c:	f7fe f960 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8003250:	2029      	movs	r0, #41	; 0x29
 8003252:	f7fe f95d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003256:	2000      	movs	r0, #0
 8003258:	f7fe f95a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 800325c:	203c      	movs	r0, #60	; 0x3c
 800325e:	f7fe f957 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003262:	2000      	movs	r0, #0
 8003264:	f7fe f954 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8003268:	204b      	movs	r0, #75	; 0x4b
 800326a:	f7fe f951 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800326e:	2000      	movs	r0, #0
 8003270:	f7fe f94e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8003274:	205d      	movs	r0, #93	; 0x5d
 8003276:	f7fe f94b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800327a:	2000      	movs	r0, #0
 800327c:	f7fe f948 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8003280:	2074      	movs	r0, #116	; 0x74
 8003282:	f7fe f945 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003286:	2000      	movs	r0, #0
 8003288:	f7fe f942 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 800328c:	2084      	movs	r0, #132	; 0x84
 800328e:	f7fe f93f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003292:	2000      	movs	r0, #0
 8003294:	f7fe f93c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 8003298:	2093      	movs	r0, #147	; 0x93
 800329a:	f7fe f939 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800329e:	2000      	movs	r0, #0
 80032a0:	f7fe f936 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80032a4:	20a2      	movs	r0, #162	; 0xa2
 80032a6:	f7fe f933 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032aa:	2000      	movs	r0, #0
 80032ac:	f7fe f930 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 80032b0:	20b3      	movs	r0, #179	; 0xb3
 80032b2:	f7fe f92d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032b6:	2000      	movs	r0, #0
 80032b8:	f7fe f92a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 80032bc:	20be      	movs	r0, #190	; 0xbe
 80032be:	f7fe f927 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032c2:	2000      	movs	r0, #0
 80032c4:	f7fe f924 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 80032c8:	20c4      	movs	r0, #196	; 0xc4
 80032ca:	f7fe f921 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032ce:	2000      	movs	r0, #0
 80032d0:	f7fe f91e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80032d4:	20cd      	movs	r0, #205	; 0xcd
 80032d6:	f7fe f91b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032da:	2000      	movs	r0, #0
 80032dc:	f7fe f918 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80032e0:	20d3      	movs	r0, #211	; 0xd3
 80032e2:	f7fe f915 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032e6:	2000      	movs	r0, #0
 80032e8:	f7fe f912 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 80032ec:	20dc      	movs	r0, #220	; 0xdc
 80032ee:	f7fe f90f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032f2:	2000      	movs	r0, #0
 80032f4:	f7fe f90c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80032f8:	20f3      	movs	r0, #243	; 0xf3
 80032fa:	f7fe f909 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80032fe:	2000      	movs	r0, #0
 8003300:	f7fe f906 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 8003304:	20e6      	movs	r0, #230	; 0xe6
 8003306:	f7fe f8ef 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 800330a:	2011      	movs	r0, #17
 800330c:	f7fe f900 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003310:	2000      	movs	r0, #0
 8003312:	f7fe f8fd 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8003316:	2034      	movs	r0, #52	; 0x34
 8003318:	f7fe f8fa 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800331c:	2000      	movs	r0, #0
 800331e:	f7fe f8f7 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8003322:	2056      	movs	r0, #86	; 0x56
 8003324:	f7fe f8f4 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003328:	2000      	movs	r0, #0
 800332a:	f7fe f8f1 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 800332e:	2076      	movs	r0, #118	; 0x76
 8003330:	f7fe f8ee 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003334:	2000      	movs	r0, #0
 8003336:	f7fe f8eb 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 800333a:	2077      	movs	r0, #119	; 0x77
 800333c:	f7fe f8e8 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003340:	2000      	movs	r0, #0
 8003342:	f7fe f8e5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8003346:	2066      	movs	r0, #102	; 0x66
 8003348:	f7fe f8e2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800334c:	2000      	movs	r0, #0
 800334e:	f7fe f8df 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8003352:	2088      	movs	r0, #136	; 0x88
 8003354:	f7fe f8dc 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003358:	2000      	movs	r0, #0
 800335a:	f7fe f8d9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800335e:	2099      	movs	r0, #153	; 0x99
 8003360:	f7fe f8d6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003364:	2000      	movs	r0, #0
 8003366:	f7fe f8d3 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 800336a:	20bb      	movs	r0, #187	; 0xbb
 800336c:	f7fe f8d0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003370:	2000      	movs	r0, #0
 8003372:	f7fe f8cd 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8003376:	2099      	movs	r0, #153	; 0x99
 8003378:	f7fe f8ca 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800337c:	2000      	movs	r0, #0
 800337e:	f7fe f8c7 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8003382:	2066      	movs	r0, #102	; 0x66
 8003384:	f7fe f8c4 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003388:	2000      	movs	r0, #0
 800338a:	f7fe f8c1 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800338e:	2055      	movs	r0, #85	; 0x55
 8003390:	f7fe f8be 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003394:	2000      	movs	r0, #0
 8003396:	f7fe f8bb 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800339a:	2055      	movs	r0, #85	; 0x55
 800339c:	f7fe f8b8 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033a0:	2000      	movs	r0, #0
 80033a2:	f7fe f8b5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80033a6:	2045      	movs	r0, #69	; 0x45
 80033a8:	f7fe f8b2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033ac:	2000      	movs	r0, #0
 80033ae:	f7fe f8af 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 80033b2:	2043      	movs	r0, #67	; 0x43
 80033b4:	f7fe f8ac 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033b8:	2000      	movs	r0, #0
 80033ba:	f7fe f8a9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80033be:	2044      	movs	r0, #68	; 0x44
 80033c0:	f7fe f8a6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033c4:	2000      	movs	r0, #0
 80033c6:	f7fe f8a3 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 80033ca:	20e7      	movs	r0, #231	; 0xe7
 80033cc:	f7fe f88c 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 80033d0:	2032      	movs	r0, #50	; 0x32
 80033d2:	f7fe f89d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033d6:	2000      	movs	r0, #0
 80033d8:	f7fe f89a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80033dc:	2055      	movs	r0, #85	; 0x55
 80033de:	f7fe f897 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7fe f894 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80033e8:	2076      	movs	r0, #118	; 0x76
 80033ea:	f7fe f891 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033ee:	2000      	movs	r0, #0
 80033f0:	f7fe f88e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80033f4:	2066      	movs	r0, #102	; 0x66
 80033f6:	f7fe f88b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80033fa:	2000      	movs	r0, #0
 80033fc:	f7fe f888 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8003400:	2067      	movs	r0, #103	; 0x67
 8003402:	f7fe f885 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003406:	2000      	movs	r0, #0
 8003408:	f7fe f882 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 800340c:	2067      	movs	r0, #103	; 0x67
 800340e:	f7fe f87f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003412:	2000      	movs	r0, #0
 8003414:	f7fe f87c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8003418:	2087      	movs	r0, #135	; 0x87
 800341a:	f7fe f879 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800341e:	2000      	movs	r0, #0
 8003420:	f7fe f876 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8003424:	2099      	movs	r0, #153	; 0x99
 8003426:	f7fe f873 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800342a:	2000      	movs	r0, #0
 800342c:	f7fe f870 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8003430:	20bb      	movs	r0, #187	; 0xbb
 8003432:	f7fe f86d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003436:	2000      	movs	r0, #0
 8003438:	f7fe f86a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800343c:	2099      	movs	r0, #153	; 0x99
 800343e:	f7fe f867 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003442:	2000      	movs	r0, #0
 8003444:	f7fe f864 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8003448:	2077      	movs	r0, #119	; 0x77
 800344a:	f7fe f861 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800344e:	2000      	movs	r0, #0
 8003450:	f7fe f85e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003454:	2044      	movs	r0, #68	; 0x44
 8003456:	f7fe f85b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800345a:	2000      	movs	r0, #0
 800345c:	f7fe f858 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8003460:	2056      	movs	r0, #86	; 0x56
 8003462:	f7fe f855 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003466:	2000      	movs	r0, #0
 8003468:	f7fe f852 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 800346c:	2023      	movs	r0, #35	; 0x23
 800346e:	f7fe f84f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003472:	2000      	movs	r0, #0
 8003474:	f7fe f84c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8003478:	2033      	movs	r0, #51	; 0x33
 800347a:	f7fe f849 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800347e:	2000      	movs	r0, #0
 8003480:	f7fe f846 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8003484:	2045      	movs	r0, #69	; 0x45
 8003486:	f7fe f843 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800348a:	2000      	movs	r0, #0
 800348c:	f7fe f840 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 8003490:	20e8      	movs	r0, #232	; 0xe8
 8003492:	f7fe f829 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003496:	2000      	movs	r0, #0
 8003498:	f7fe f83a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800349c:	2000      	movs	r0, #0
 800349e:	f7fe f837 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80034a2:	2099      	movs	r0, #153	; 0x99
 80034a4:	f7fe f834 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034a8:	2000      	movs	r0, #0
 80034aa:	f7fe f831 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 80034ae:	2087      	movs	r0, #135	; 0x87
 80034b0:	f7fe f82e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034b4:	2000      	movs	r0, #0
 80034b6:	f7fe f82b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80034ba:	2088      	movs	r0, #136	; 0x88
 80034bc:	f7fe f828 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034c0:	2000      	movs	r0, #0
 80034c2:	f7fe f825 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 80034c6:	2077      	movs	r0, #119	; 0x77
 80034c8:	f7fe f822 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034cc:	2000      	movs	r0, #0
 80034ce:	f7fe f81f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80034d2:	2066      	movs	r0, #102	; 0x66
 80034d4:	f7fe f81c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034d8:	2000      	movs	r0, #0
 80034da:	f7fe f819 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80034de:	2088      	movs	r0, #136	; 0x88
 80034e0:	f7fe f816 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034e4:	2000      	movs	r0, #0
 80034e6:	f7fe f813 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 80034ea:	20aa      	movs	r0, #170	; 0xaa
 80034ec:	f7fe f810 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034f0:	2000      	movs	r0, #0
 80034f2:	f7fe f80d 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 80034f6:	20bb      	movs	r0, #187	; 0xbb
 80034f8:	f7fe f80a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034fc:	2000      	movs	r0, #0
 80034fe:	f7fe f807 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8003502:	2099      	movs	r0, #153	; 0x99
 8003504:	f7fe f804 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003508:	2000      	movs	r0, #0
 800350a:	f7fe f801 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800350e:	2066      	movs	r0, #102	; 0x66
 8003510:	f7fd fffe 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003514:	2000      	movs	r0, #0
 8003516:	f7fd fffb 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800351a:	2055      	movs	r0, #85	; 0x55
 800351c:	f7fd fff8 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003520:	2000      	movs	r0, #0
 8003522:	f7fd fff5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8003526:	2055      	movs	r0, #85	; 0x55
 8003528:	f7fd fff2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800352c:	2000      	movs	r0, #0
 800352e:	f7fd ffef 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003532:	2044      	movs	r0, #68	; 0x44
 8003534:	f7fd ffec 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003538:	2000      	movs	r0, #0
 800353a:	f7fd ffe9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800353e:	2044      	movs	r0, #68	; 0x44
 8003540:	f7fd ffe6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003544:	2000      	movs	r0, #0
 8003546:	f7fd ffe3 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800354a:	2055      	movs	r0, #85	; 0x55
 800354c:	f7fd ffe0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003550:	2000      	movs	r0, #0
 8003552:	f7fd ffdd 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 8003556:	20e9      	movs	r0, #233	; 0xe9
 8003558:	f7fd ffc6 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 800355c:	20aa      	movs	r0, #170	; 0xaa
 800355e:	f7fd ffd7 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003562:	2000      	movs	r0, #0
 8003564:	f7fd ffd4 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003568:	2000      	movs	r0, #0
 800356a:	f7fd ffd1 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800356e:	2000      	movs	r0, #0
 8003570:	f7fd ffce 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 8003574:	2000      	movs	r0, #0
 8003576:	f7fd ffb7 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 800357a:	20aa      	movs	r0, #170	; 0xaa
 800357c:	f7fd ffc8 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 8003580:	20cf      	movs	r0, #207	; 0xcf
 8003582:	f7fd ffb1 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003586:	2000      	movs	r0, #0
 8003588:	f7fd ffc2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800358c:	2000      	movs	r0, #0
 800358e:	f7fd ffbf 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003592:	2000      	movs	r0, #0
 8003594:	f7fd ffbc 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003598:	2000      	movs	r0, #0
 800359a:	f7fd ffb9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800359e:	2000      	movs	r0, #0
 80035a0:	f7fd ffb6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035a4:	2000      	movs	r0, #0
 80035a6:	f7fd ffb3 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035aa:	2000      	movs	r0, #0
 80035ac:	f7fd ffb0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035b0:	2000      	movs	r0, #0
 80035b2:	f7fd ffad 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035b6:	2000      	movs	r0, #0
 80035b8:	f7fd ffaa 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035bc:	2000      	movs	r0, #0
 80035be:	f7fd ffa7 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035c2:	2000      	movs	r0, #0
 80035c4:	f7fd ffa4 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035c8:	2000      	movs	r0, #0
 80035ca:	f7fd ffa1 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035ce:	2000      	movs	r0, #0
 80035d0:	f7fd ff9e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035d4:	2000      	movs	r0, #0
 80035d6:	f7fd ff9b 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035da:	2000      	movs	r0, #0
 80035dc:	f7fd ff98 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035e0:	2000      	movs	r0, #0
 80035e2:	f7fd ff95 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035e6:	2000      	movs	r0, #0
 80035e8:	f7fd ff92 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 80035ec:	20f0      	movs	r0, #240	; 0xf0
 80035ee:	f7fd ff7b 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80035f2:	2000      	movs	r0, #0
 80035f4:	f7fd ff8c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 80035f8:	2050      	movs	r0, #80	; 0x50
 80035fa:	f7fd ff89 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80035fe:	2000      	movs	r0, #0
 8003600:	f7fd ff86 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003604:	2000      	movs	r0, #0
 8003606:	f7fd ff83 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800360a:	2000      	movs	r0, #0
 800360c:	f7fd ff80 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 8003610:	20f3      	movs	r0, #243	; 0xf3
 8003612:	f7fd ff69 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003616:	2000      	movs	r0, #0
 8003618:	f7fd ff7a 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 800361c:	20f9      	movs	r0, #249	; 0xf9
 800361e:	f7fd ff63 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 8003622:	2006      	movs	r0, #6
 8003624:	f7fd ff74 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8003628:	2010      	movs	r0, #16
 800362a:	f7fd ff71 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 800362e:	2029      	movs	r0, #41	; 0x29
 8003630:	f7fd ff6e 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003634:	2000      	movs	r0, #0
 8003636:	f7fd ff6b 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 800363a:	203a      	movs	r0, #58	; 0x3a
 800363c:	f7fd ff54 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8003640:	2055      	movs	r0, #85	; 0x55
 8003642:	f7fd ff65 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 8003646:	2011      	movs	r0, #17
 8003648:	f7fd ff4e 	bl	80014e8 <LCD_WR_REG>
		HAL_Delay(100);
 800364c:	2064      	movs	r0, #100	; 0x64
 800364e:	f004 f8c9 	bl	80077e4 <HAL_Delay>
		LCD_WR_REG(0x29);
 8003652:	2029      	movs	r0, #41	; 0x29
 8003654:	f7fd ff48 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8003658:	2035      	movs	r0, #53	; 0x35
 800365a:	f7fd ff45 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800365e:	2000      	movs	r0, #0
 8003660:	f7fd ff56 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 8003664:	2051      	movs	r0, #81	; 0x51
 8003666:	f7fd ff3f 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 800366a:	20ff      	movs	r0, #255	; 0xff
 800366c:	f7fd ff50 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8003670:	2053      	movs	r0, #83	; 0x53
 8003672:	f7fd ff39 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 8003676:	202c      	movs	r0, #44	; 0x2c
 8003678:	f7fd ff4a 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 800367c:	2055      	movs	r0, #85	; 0x55
 800367e:	f7fd ff33 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 8003682:	2082      	movs	r0, #130	; 0x82
 8003684:	f7fd ff44 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8003688:	202c      	movs	r0, #44	; 0x2c
 800368a:	f7fd ff2d 	bl	80014e8 <LCD_WR_REG>
 800368e:	f002 b8e8 	b.w	8005862 <LCD_Init+0x3752>
	}else if(lcddev.id==0x5510)
 8003692:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <LCD_Init+0x1594>)
 8003694:	889b      	ldrh	r3, [r3, #4]
 8003696:	f245 5210 	movw	r2, #21776	; 0x5510
 800369a:	4293      	cmp	r3, r2
 800369c:	f040 8782 	bne.w	80045a4 <LCD_Init+0x2494>
 80036a0:	e002      	b.n	80036a8 <LCD_Init+0x1598>
 80036a2:	bf00      	nop
 80036a4:	20000140 	.word	0x20000140
	{
		LCD_WriteReg(0xF000,0x55);
 80036a8:	2155      	movs	r1, #85	; 0x55
 80036aa:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80036ae:	f7fd ff55 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 80036b2:	21aa      	movs	r1, #170	; 0xaa
 80036b4:	f24f 0001 	movw	r0, #61441	; 0xf001
 80036b8:	f7fd ff50 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 80036bc:	2152      	movs	r1, #82	; 0x52
 80036be:	f24f 0002 	movw	r0, #61442	; 0xf002
 80036c2:	f7fd ff4b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 80036c6:	2108      	movs	r1, #8
 80036c8:	f24f 0003 	movw	r0, #61443	; 0xf003
 80036cc:	f7fd ff46 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 80036d0:	2101      	movs	r1, #1
 80036d2:	f24f 0004 	movw	r0, #61444	; 0xf004
 80036d6:	f7fd ff41 	bl	800155c <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 80036da:	210d      	movs	r1, #13
 80036dc:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80036e0:	f7fd ff3c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 80036e4:	210d      	movs	r1, #13
 80036e6:	f24b 0001 	movw	r0, #45057	; 0xb001
 80036ea:	f7fd ff37 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 80036ee:	210d      	movs	r1, #13
 80036f0:	f24b 0002 	movw	r0, #45058	; 0xb002
 80036f4:	f7fd ff32 	bl	800155c <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 80036f8:	2134      	movs	r1, #52	; 0x34
 80036fa:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80036fe:	f7fd ff2d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 8003702:	2134      	movs	r1, #52	; 0x34
 8003704:	f24b 6001 	movw	r0, #46593	; 0xb601
 8003708:	f7fd ff28 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 800370c:	2134      	movs	r1, #52	; 0x34
 800370e:	f24b 6002 	movw	r0, #46594	; 0xb602
 8003712:	f7fd ff23 	bl	800155c <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 8003716:	210d      	movs	r1, #13
 8003718:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 800371c:	f7fd ff1e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8003720:	210d      	movs	r1, #13
 8003722:	f24b 1001 	movw	r0, #45313	; 0xb101
 8003726:	f7fd ff19 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 800372a:	210d      	movs	r1, #13
 800372c:	f24b 1002 	movw	r0, #45314	; 0xb102
 8003730:	f7fd ff14 	bl	800155c <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 8003734:	2134      	movs	r1, #52	; 0x34
 8003736:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 800373a:	f7fd ff0f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 800373e:	2134      	movs	r1, #52	; 0x34
 8003740:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003744:	f7fd ff0a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 8003748:	2134      	movs	r1, #52	; 0x34
 800374a:	f24b 7002 	movw	r0, #46850	; 0xb702
 800374e:	f7fd ff05 	bl	800155c <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 8003752:	2100      	movs	r1, #0
 8003754:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8003758:	f7fd ff00 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 800375c:	2100      	movs	r1, #0
 800375e:	f24b 2001 	movw	r0, #45569	; 0xb201
 8003762:	f7fd fefb 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 8003766:	2100      	movs	r1, #0
 8003768:	f24b 2002 	movw	r0, #45570	; 0xb202
 800376c:	f7fd fef6 	bl	800155c <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8003770:	2124      	movs	r1, #36	; 0x24
 8003772:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003776:	f7fd fef1 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 800377a:	2124      	movs	r1, #36	; 0x24
 800377c:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003780:	f7fd feec 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8003784:	2124      	movs	r1, #36	; 0x24
 8003786:	f64b 0002 	movw	r0, #47106	; 0xb802
 800378a:	f7fd fee7 	bl	800155c <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 800378e:	2101      	movs	r1, #1
 8003790:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8003794:	f7fd fee2 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 8003798:	210f      	movs	r1, #15
 800379a:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 800379e:	f7fd fedd 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 80037a2:	210f      	movs	r1, #15
 80037a4:	f24b 3001 	movw	r0, #45825	; 0xb301
 80037a8:	f7fd fed8 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 80037ac:	210f      	movs	r1, #15
 80037ae:	f24b 3002 	movw	r0, #45826	; 0xb302
 80037b2:	f7fd fed3 	bl	800155c <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 80037b6:	2134      	movs	r1, #52	; 0x34
 80037b8:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80037bc:	f7fd fece 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 80037c0:	2134      	movs	r1, #52	; 0x34
 80037c2:	f64b 1001 	movw	r0, #47361	; 0xb901
 80037c6:	f7fd fec9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 80037ca:	2134      	movs	r1, #52	; 0x34
 80037cc:	f64b 1002 	movw	r0, #47362	; 0xb902
 80037d0:	f7fd fec4 	bl	800155c <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 80037d4:	2108      	movs	r1, #8
 80037d6:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80037da:	f7fd febf 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 80037de:	2108      	movs	r1, #8
 80037e0:	f24b 5001 	movw	r0, #46337	; 0xb501
 80037e4:	f7fd feba 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 80037e8:	2108      	movs	r1, #8
 80037ea:	f24b 5002 	movw	r0, #46338	; 0xb502
 80037ee:	f7fd feb5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 80037f2:	2103      	movs	r1, #3
 80037f4:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80037f8:	f7fd feb0 	bl	800155c <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 80037fc:	2124      	movs	r1, #36	; 0x24
 80037fe:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8003802:	f7fd feab 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 8003806:	2124      	movs	r1, #36	; 0x24
 8003808:	f64b 2001 	movw	r0, #47617	; 0xba01
 800380c:	f7fd fea6 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8003810:	2124      	movs	r1, #36	; 0x24
 8003812:	f64b 2002 	movw	r0, #47618	; 0xba02
 8003816:	f7fd fea1 	bl	800155c <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 800381a:	2100      	movs	r1, #0
 800381c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003820:	f7fd fe9c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 8003824:	2178      	movs	r1, #120	; 0x78
 8003826:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800382a:	f7fd fe97 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 800382e:	2100      	movs	r1, #0
 8003830:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003834:	f7fd fe92 	bl	800155c <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 8003838:	2100      	movs	r1, #0
 800383a:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 800383e:	f7fd fe8d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 8003842:	2178      	movs	r1, #120	; 0x78
 8003844:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8003848:	f7fd fe88 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 800384c:	2100      	movs	r1, #0
 800384e:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8003852:	f7fd fe83 	bl	800155c <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 8003856:	2100      	movs	r1, #0
 8003858:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 800385c:	f7fd fe7e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 8003860:	2164      	movs	r1, #100	; 0x64
 8003862:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8003866:	f7fd fe79 	bl	800155c <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 800386a:	2100      	movs	r1, #0
 800386c:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8003870:	f7fd fe74 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8003874:	2133      	movs	r1, #51	; 0x33
 8003876:	f24d 1001 	movw	r0, #53505	; 0xd101
 800387a:	f7fd fe6f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 800387e:	2100      	movs	r1, #0
 8003880:	f24d 1002 	movw	r0, #53506	; 0xd102
 8003884:	f7fd fe6a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 8003888:	2134      	movs	r1, #52	; 0x34
 800388a:	f24d 1003 	movw	r0, #53507	; 0xd103
 800388e:	f7fd fe65 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 8003892:	2100      	movs	r1, #0
 8003894:	f24d 1004 	movw	r0, #53508	; 0xd104
 8003898:	f7fd fe60 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 800389c:	213a      	movs	r1, #58	; 0x3a
 800389e:	f24d 1005 	movw	r0, #53509	; 0xd105
 80038a2:	f7fd fe5b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 80038a6:	2100      	movs	r1, #0
 80038a8:	f24d 1006 	movw	r0, #53510	; 0xd106
 80038ac:	f7fd fe56 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 80038b0:	214a      	movs	r1, #74	; 0x4a
 80038b2:	f24d 1007 	movw	r0, #53511	; 0xd107
 80038b6:	f7fd fe51 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 80038ba:	2100      	movs	r1, #0
 80038bc:	f24d 1008 	movw	r0, #53512	; 0xd108
 80038c0:	f7fd fe4c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 80038c4:	215c      	movs	r1, #92	; 0x5c
 80038c6:	f24d 1009 	movw	r0, #53513	; 0xd109
 80038ca:	f7fd fe47 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 80038ce:	2100      	movs	r1, #0
 80038d0:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80038d4:	f7fd fe42 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 80038d8:	2181      	movs	r1, #129	; 0x81
 80038da:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80038de:	f7fd fe3d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 80038e2:	2100      	movs	r1, #0
 80038e4:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80038e8:	f7fd fe38 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 80038ec:	21a6      	movs	r1, #166	; 0xa6
 80038ee:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80038f2:	f7fd fe33 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 80038f6:	2100      	movs	r1, #0
 80038f8:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80038fc:	f7fd fe2e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8003900:	21e5      	movs	r1, #229	; 0xe5
 8003902:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8003906:	f7fd fe29 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 800390a:	2101      	movs	r1, #1
 800390c:	f24d 1010 	movw	r0, #53520	; 0xd110
 8003910:	f7fd fe24 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 8003914:	2113      	movs	r1, #19
 8003916:	f24d 1011 	movw	r0, #53521	; 0xd111
 800391a:	f7fd fe1f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 800391e:	2101      	movs	r1, #1
 8003920:	f24d 1012 	movw	r0, #53522	; 0xd112
 8003924:	f7fd fe1a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 8003928:	2154      	movs	r1, #84	; 0x54
 800392a:	f24d 1013 	movw	r0, #53523	; 0xd113
 800392e:	f7fd fe15 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 8003932:	2101      	movs	r1, #1
 8003934:	f24d 1014 	movw	r0, #53524	; 0xd114
 8003938:	f7fd fe10 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 800393c:	2182      	movs	r1, #130	; 0x82
 800393e:	f24d 1015 	movw	r0, #53525	; 0xd115
 8003942:	f7fd fe0b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 8003946:	2101      	movs	r1, #1
 8003948:	f24d 1016 	movw	r0, #53526	; 0xd116
 800394c:	f7fd fe06 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8003950:	21ca      	movs	r1, #202	; 0xca
 8003952:	f24d 1017 	movw	r0, #53527	; 0xd117
 8003956:	f7fd fe01 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 800395a:	2102      	movs	r1, #2
 800395c:	f24d 1018 	movw	r0, #53528	; 0xd118
 8003960:	f7fd fdfc 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8003964:	2100      	movs	r1, #0
 8003966:	f24d 1019 	movw	r0, #53529	; 0xd119
 800396a:	f7fd fdf7 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 800396e:	2102      	movs	r1, #2
 8003970:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8003974:	f7fd fdf2 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 8003978:	2101      	movs	r1, #1
 800397a:	f24d 101b 	movw	r0, #53531	; 0xd11b
 800397e:	f7fd fded 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 8003982:	2102      	movs	r1, #2
 8003984:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8003988:	f7fd fde8 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 800398c:	2134      	movs	r1, #52	; 0x34
 800398e:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8003992:	f7fd fde3 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 8003996:	2102      	movs	r1, #2
 8003998:	f24d 101e 	movw	r0, #53534	; 0xd11e
 800399c:	f7fd fdde 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 80039a0:	2167      	movs	r1, #103	; 0x67
 80039a2:	f24d 101f 	movw	r0, #53535	; 0xd11f
 80039a6:	f7fd fdd9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 80039aa:	2102      	movs	r1, #2
 80039ac:	f24d 1020 	movw	r0, #53536	; 0xd120
 80039b0:	f7fd fdd4 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 80039b4:	2184      	movs	r1, #132	; 0x84
 80039b6:	f24d 1021 	movw	r0, #53537	; 0xd121
 80039ba:	f7fd fdcf 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 80039be:	2102      	movs	r1, #2
 80039c0:	f24d 1022 	movw	r0, #53538	; 0xd122
 80039c4:	f7fd fdca 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 80039c8:	21a4      	movs	r1, #164	; 0xa4
 80039ca:	f24d 1023 	movw	r0, #53539	; 0xd123
 80039ce:	f7fd fdc5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 80039d2:	2102      	movs	r1, #2
 80039d4:	f24d 1024 	movw	r0, #53540	; 0xd124
 80039d8:	f7fd fdc0 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 80039dc:	21b7      	movs	r1, #183	; 0xb7
 80039de:	f24d 1025 	movw	r0, #53541	; 0xd125
 80039e2:	f7fd fdbb 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 80039e6:	2102      	movs	r1, #2
 80039e8:	f24d 1026 	movw	r0, #53542	; 0xd126
 80039ec:	f7fd fdb6 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 80039f0:	21cf      	movs	r1, #207	; 0xcf
 80039f2:	f24d 1027 	movw	r0, #53543	; 0xd127
 80039f6:	f7fd fdb1 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 80039fa:	2102      	movs	r1, #2
 80039fc:	f24d 1028 	movw	r0, #53544	; 0xd128
 8003a00:	f7fd fdac 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 8003a04:	21de      	movs	r1, #222	; 0xde
 8003a06:	f24d 1029 	movw	r0, #53545	; 0xd129
 8003a0a:	f7fd fda7 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8003a0e:	2102      	movs	r1, #2
 8003a10:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8003a14:	f7fd fda2 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 8003a18:	21f2      	movs	r1, #242	; 0xf2
 8003a1a:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8003a1e:	f7fd fd9d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 8003a22:	2102      	movs	r1, #2
 8003a24:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8003a28:	f7fd fd98 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8003a2c:	21fe      	movs	r1, #254	; 0xfe
 8003a2e:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8003a32:	f7fd fd93 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 8003a36:	2103      	movs	r1, #3
 8003a38:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8003a3c:	f7fd fd8e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8003a40:	2110      	movs	r1, #16
 8003a42:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8003a46:	f7fd fd89 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 8003a4a:	2103      	movs	r1, #3
 8003a4c:	f24d 1030 	movw	r0, #53552	; 0xd130
 8003a50:	f7fd fd84 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8003a54:	2133      	movs	r1, #51	; 0x33
 8003a56:	f24d 1031 	movw	r0, #53553	; 0xd131
 8003a5a:	f7fd fd7f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 8003a5e:	2103      	movs	r1, #3
 8003a60:	f24d 1032 	movw	r0, #53554	; 0xd132
 8003a64:	f7fd fd7a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 8003a68:	216d      	movs	r1, #109	; 0x6d
 8003a6a:	f24d 1033 	movw	r0, #53555	; 0xd133
 8003a6e:	f7fd fd75 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 8003a72:	2100      	movs	r1, #0
 8003a74:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8003a78:	f7fd fd70 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8003a7c:	2133      	movs	r1, #51	; 0x33
 8003a7e:	f24d 2001 	movw	r0, #53761	; 0xd201
 8003a82:	f7fd fd6b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 8003a86:	2100      	movs	r1, #0
 8003a88:	f24d 2002 	movw	r0, #53762	; 0xd202
 8003a8c:	f7fd fd66 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 8003a90:	2134      	movs	r1, #52	; 0x34
 8003a92:	f24d 2003 	movw	r0, #53763	; 0xd203
 8003a96:	f7fd fd61 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 8003a9a:	2100      	movs	r1, #0
 8003a9c:	f24d 2004 	movw	r0, #53764	; 0xd204
 8003aa0:	f7fd fd5c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 8003aa4:	213a      	movs	r1, #58	; 0x3a
 8003aa6:	f24d 2005 	movw	r0, #53765	; 0xd205
 8003aaa:	f7fd fd57 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 8003aae:	2100      	movs	r1, #0
 8003ab0:	f24d 2006 	movw	r0, #53766	; 0xd206
 8003ab4:	f7fd fd52 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 8003ab8:	214a      	movs	r1, #74	; 0x4a
 8003aba:	f24d 2007 	movw	r0, #53767	; 0xd207
 8003abe:	f7fd fd4d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	f24d 2008 	movw	r0, #53768	; 0xd208
 8003ac8:	f7fd fd48 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 8003acc:	215c      	movs	r1, #92	; 0x5c
 8003ace:	f24d 2009 	movw	r0, #53769	; 0xd209
 8003ad2:	f7fd fd43 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8003adc:	f7fd fd3e 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 8003ae0:	2181      	movs	r1, #129	; 0x81
 8003ae2:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8003ae6:	f7fd fd39 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 8003aea:	2100      	movs	r1, #0
 8003aec:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003af0:	f7fd fd34 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 8003af4:	21a6      	movs	r1, #166	; 0xa6
 8003af6:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003afa:	f7fd fd2f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 8003afe:	2100      	movs	r1, #0
 8003b00:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8003b04:	f7fd fd2a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 8003b08:	21e5      	movs	r1, #229	; 0xe5
 8003b0a:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003b0e:	f7fd fd25 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 8003b12:	2101      	movs	r1, #1
 8003b14:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003b18:	f7fd fd20 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8003b1c:	2113      	movs	r1, #19
 8003b1e:	f24d 2011 	movw	r0, #53777	; 0xd211
 8003b22:	f7fd fd1b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 8003b26:	2101      	movs	r1, #1
 8003b28:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003b2c:	f7fd fd16 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8003b30:	2154      	movs	r1, #84	; 0x54
 8003b32:	f24d 2013 	movw	r0, #53779	; 0xd213
 8003b36:	f7fd fd11 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003b40:	f7fd fd0c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8003b44:	2182      	movs	r1, #130	; 0x82
 8003b46:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003b4a:	f7fd fd07 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8003b4e:	2101      	movs	r1, #1
 8003b50:	f24d 2016 	movw	r0, #53782	; 0xd216
 8003b54:	f7fd fd02 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 8003b58:	21ca      	movs	r1, #202	; 0xca
 8003b5a:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003b5e:	f7fd fcfd 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 8003b62:	2102      	movs	r1, #2
 8003b64:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003b68:	f7fd fcf8 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	f24d 2019 	movw	r0, #53785	; 0xd219
 8003b72:	f7fd fcf3 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 8003b76:	2102      	movs	r1, #2
 8003b78:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003b7c:	f7fd fcee 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 8003b80:	2101      	movs	r1, #1
 8003b82:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8003b86:	f7fd fce9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8003b90:	f7fd fce4 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 8003b94:	2134      	movs	r1, #52	; 0x34
 8003b96:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8003b9a:	f7fd fcdf 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 8003b9e:	2102      	movs	r1, #2
 8003ba0:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8003ba4:	f7fd fcda 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 8003ba8:	2167      	movs	r1, #103	; 0x67
 8003baa:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8003bae:	f7fd fcd5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 8003bb2:	2102      	movs	r1, #2
 8003bb4:	f24d 2020 	movw	r0, #53792	; 0xd220
 8003bb8:	f7fd fcd0 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 8003bbc:	2184      	movs	r1, #132	; 0x84
 8003bbe:	f24d 2021 	movw	r0, #53793	; 0xd221
 8003bc2:	f7fd fccb 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	f24d 2022 	movw	r0, #53794	; 0xd222
 8003bcc:	f7fd fcc6 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 8003bd0:	21a4      	movs	r1, #164	; 0xa4
 8003bd2:	f24d 2023 	movw	r0, #53795	; 0xd223
 8003bd6:	f7fd fcc1 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 8003bda:	2102      	movs	r1, #2
 8003bdc:	f24d 2024 	movw	r0, #53796	; 0xd224
 8003be0:	f7fd fcbc 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 8003be4:	21b7      	movs	r1, #183	; 0xb7
 8003be6:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003bea:	f7fd fcb7 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 8003bee:	2102      	movs	r1, #2
 8003bf0:	f24d 2026 	movw	r0, #53798	; 0xd226
 8003bf4:	f7fd fcb2 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 8003bf8:	21cf      	movs	r1, #207	; 0xcf
 8003bfa:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003bfe:	f7fd fcad 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 8003c02:	2102      	movs	r1, #2
 8003c04:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003c08:	f7fd fca8 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8003c0c:	21de      	movs	r1, #222	; 0xde
 8003c0e:	f24d 2029 	movw	r0, #53801	; 0xd229
 8003c12:	f7fd fca3 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 8003c16:	2102      	movs	r1, #2
 8003c18:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003c1c:	f7fd fc9e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8003c20:	21f2      	movs	r1, #242	; 0xf2
 8003c22:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8003c26:	f7fd fc99 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003c30:	f7fd fc94 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 8003c34:	21fe      	movs	r1, #254	; 0xfe
 8003c36:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003c3a:	f7fd fc8f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8003c3e:	2103      	movs	r1, #3
 8003c40:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8003c44:	f7fd fc8a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 8003c48:	2110      	movs	r1, #16
 8003c4a:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003c4e:	f7fd fc85 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 8003c52:	2103      	movs	r1, #3
 8003c54:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003c58:	f7fd fc80 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8003c5c:	2133      	movs	r1, #51	; 0x33
 8003c5e:	f24d 2031 	movw	r0, #53809	; 0xd231
 8003c62:	f7fd fc7b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 8003c66:	2103      	movs	r1, #3
 8003c68:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003c6c:	f7fd fc76 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 8003c70:	216d      	movs	r1, #109	; 0x6d
 8003c72:	f24d 2033 	movw	r0, #53811	; 0xd233
 8003c76:	f7fd fc71 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003c80:	f7fd fc6c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 8003c84:	2133      	movs	r1, #51	; 0x33
 8003c86:	f24d 3001 	movw	r0, #54017	; 0xd301
 8003c8a:	f7fd fc67 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 8003c8e:	2100      	movs	r1, #0
 8003c90:	f24d 3002 	movw	r0, #54018	; 0xd302
 8003c94:	f7fd fc62 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 8003c98:	2134      	movs	r1, #52	; 0x34
 8003c9a:	f24d 3003 	movw	r0, #54019	; 0xd303
 8003c9e:	f7fd fc5d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 8003ca2:	2100      	movs	r1, #0
 8003ca4:	f24d 3004 	movw	r0, #54020	; 0xd304
 8003ca8:	f7fd fc58 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 8003cac:	213a      	movs	r1, #58	; 0x3a
 8003cae:	f24d 3005 	movw	r0, #54021	; 0xd305
 8003cb2:	f7fd fc53 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	f24d 3006 	movw	r0, #54022	; 0xd306
 8003cbc:	f7fd fc4e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 8003cc0:	214a      	movs	r1, #74	; 0x4a
 8003cc2:	f24d 3007 	movw	r0, #54023	; 0xd307
 8003cc6:	f7fd fc49 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 8003cca:	2100      	movs	r1, #0
 8003ccc:	f24d 3008 	movw	r0, #54024	; 0xd308
 8003cd0:	f7fd fc44 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 8003cd4:	215c      	movs	r1, #92	; 0x5c
 8003cd6:	f24d 3009 	movw	r0, #54025	; 0xd309
 8003cda:	f7fd fc3f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 8003cde:	2100      	movs	r1, #0
 8003ce0:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8003ce4:	f7fd fc3a 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 8003ce8:	2181      	movs	r1, #129	; 0x81
 8003cea:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003cee:	f7fd fc35 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003cf8:	f7fd fc30 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 8003cfc:	21a6      	movs	r1, #166	; 0xa6
 8003cfe:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8003d02:	f7fd fc2b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 8003d06:	2100      	movs	r1, #0
 8003d08:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003d0c:	f7fd fc26 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 8003d10:	21e5      	movs	r1, #229	; 0xe5
 8003d12:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8003d16:	f7fd fc21 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 8003d1a:	2101      	movs	r1, #1
 8003d1c:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003d20:	f7fd fc1c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 8003d24:	2113      	movs	r1, #19
 8003d26:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003d2a:	f7fd fc17 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8003d2e:	2101      	movs	r1, #1
 8003d30:	f24d 3012 	movw	r0, #54034	; 0xd312
 8003d34:	f7fd fc12 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 8003d38:	2154      	movs	r1, #84	; 0x54
 8003d3a:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003d3e:	f7fd fc0d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 8003d42:	2101      	movs	r1, #1
 8003d44:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003d48:	f7fd fc08 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8003d4c:	2182      	movs	r1, #130	; 0x82
 8003d4e:	f24d 3015 	movw	r0, #54037	; 0xd315
 8003d52:	f7fd fc03 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 8003d56:	2101      	movs	r1, #1
 8003d58:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003d5c:	f7fd fbfe 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 8003d60:	21ca      	movs	r1, #202	; 0xca
 8003d62:	f24d 3017 	movw	r0, #54039	; 0xd317
 8003d66:	f7fd fbf9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 8003d6a:	2102      	movs	r1, #2
 8003d6c:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003d70:	f7fd fbf4 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 8003d74:	2100      	movs	r1, #0
 8003d76:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003d7a:	f7fd fbef 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 8003d7e:	2102      	movs	r1, #2
 8003d80:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8003d84:	f7fd fbea 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 8003d88:	2101      	movs	r1, #1
 8003d8a:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8003d8e:	f7fd fbe5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 8003d92:	2102      	movs	r1, #2
 8003d94:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8003d98:	f7fd fbe0 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 8003d9c:	2134      	movs	r1, #52	; 0x34
 8003d9e:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8003da2:	f7fd fbdb 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 8003da6:	2102      	movs	r1, #2
 8003da8:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8003dac:	f7fd fbd6 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 8003db0:	2167      	movs	r1, #103	; 0x67
 8003db2:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8003db6:	f7fd fbd1 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 8003dba:	2102      	movs	r1, #2
 8003dbc:	f24d 3020 	movw	r0, #54048	; 0xd320
 8003dc0:	f7fd fbcc 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 8003dc4:	2184      	movs	r1, #132	; 0x84
 8003dc6:	f24d 3021 	movw	r0, #54049	; 0xd321
 8003dca:	f7fd fbc7 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 8003dce:	2102      	movs	r1, #2
 8003dd0:	f24d 3022 	movw	r0, #54050	; 0xd322
 8003dd4:	f7fd fbc2 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 8003dd8:	21a4      	movs	r1, #164	; 0xa4
 8003dda:	f24d 3023 	movw	r0, #54051	; 0xd323
 8003dde:	f7fd fbbd 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 8003de2:	2102      	movs	r1, #2
 8003de4:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003de8:	f7fd fbb8 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 8003dec:	21b7      	movs	r1, #183	; 0xb7
 8003dee:	f24d 3025 	movw	r0, #54053	; 0xd325
 8003df2:	f7fd fbb3 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 8003df6:	2102      	movs	r1, #2
 8003df8:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003dfc:	f7fd fbae 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 8003e00:	21cf      	movs	r1, #207	; 0xcf
 8003e02:	f24d 3027 	movw	r0, #54055	; 0xd327
 8003e06:	f7fd fba9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 8003e0a:	2102      	movs	r1, #2
 8003e0c:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003e10:	f7fd fba4 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 8003e14:	21de      	movs	r1, #222	; 0xde
 8003e16:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003e1a:	f7fd fb9f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 8003e1e:	2102      	movs	r1, #2
 8003e20:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8003e24:	f7fd fb9a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 8003e28:	21f2      	movs	r1, #242	; 0xf2
 8003e2a:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003e2e:	f7fd fb95 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 8003e32:	2102      	movs	r1, #2
 8003e34:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003e38:	f7fd fb90 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8003e3c:	21fe      	movs	r1, #254	; 0xfe
 8003e3e:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8003e42:	f7fd fb8b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 8003e46:	2103      	movs	r1, #3
 8003e48:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003e4c:	f7fd fb86 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8003e50:	2110      	movs	r1, #16
 8003e52:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8003e56:	f7fd fb81 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 8003e5a:	2103      	movs	r1, #3
 8003e5c:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003e60:	f7fd fb7c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 8003e64:	2133      	movs	r1, #51	; 0x33
 8003e66:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003e6a:	f7fd fb77 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 8003e6e:	2103      	movs	r1, #3
 8003e70:	f24d 3032 	movw	r0, #54066	; 0xd332
 8003e74:	f7fd fb72 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 8003e78:	216d      	movs	r1, #109	; 0x6d
 8003e7a:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003e7e:	f7fd fb6d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 8003e82:	2100      	movs	r1, #0
 8003e84:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8003e88:	f7fd fb68 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 8003e8c:	2133      	movs	r1, #51	; 0x33
 8003e8e:	f24d 4001 	movw	r0, #54273	; 0xd401
 8003e92:	f7fd fb63 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 8003e96:	2100      	movs	r1, #0
 8003e98:	f24d 4002 	movw	r0, #54274	; 0xd402
 8003e9c:	f7fd fb5e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 8003ea0:	2134      	movs	r1, #52	; 0x34
 8003ea2:	f24d 4003 	movw	r0, #54275	; 0xd403
 8003ea6:	f7fd fb59 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 8003eaa:	2100      	movs	r1, #0
 8003eac:	f24d 4004 	movw	r0, #54276	; 0xd404
 8003eb0:	f7fd fb54 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 8003eb4:	213a      	movs	r1, #58	; 0x3a
 8003eb6:	f24d 4005 	movw	r0, #54277	; 0xd405
 8003eba:	f7fd fb4f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	f24d 4006 	movw	r0, #54278	; 0xd406
 8003ec4:	f7fd fb4a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 8003ec8:	214a      	movs	r1, #74	; 0x4a
 8003eca:	f24d 4007 	movw	r0, #54279	; 0xd407
 8003ece:	f7fd fb45 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 8003ed2:	2100      	movs	r1, #0
 8003ed4:	f24d 4008 	movw	r0, #54280	; 0xd408
 8003ed8:	f7fd fb40 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 8003edc:	215c      	movs	r1, #92	; 0x5c
 8003ede:	f24d 4009 	movw	r0, #54281	; 0xd409
 8003ee2:	f7fd fb3b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003eec:	f7fd fb36 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 8003ef0:	2181      	movs	r1, #129	; 0x81
 8003ef2:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8003ef6:	f7fd fb31 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 8003efa:	2100      	movs	r1, #0
 8003efc:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003f00:	f7fd fb2c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 8003f04:	21a6      	movs	r1, #166	; 0xa6
 8003f06:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003f0a:	f7fd fb27 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 8003f0e:	2100      	movs	r1, #0
 8003f10:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8003f14:	f7fd fb22 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 8003f18:	21e5      	movs	r1, #229	; 0xe5
 8003f1a:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003f1e:	f7fd fb1d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 8003f22:	2101      	movs	r1, #1
 8003f24:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003f28:	f7fd fb18 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 8003f2c:	2113      	movs	r1, #19
 8003f2e:	f24d 4011 	movw	r0, #54289	; 0xd411
 8003f32:	f7fd fb13 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 8003f36:	2101      	movs	r1, #1
 8003f38:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003f3c:	f7fd fb0e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 8003f40:	2154      	movs	r1, #84	; 0x54
 8003f42:	f24d 4013 	movw	r0, #54291	; 0xd413
 8003f46:	f7fd fb09 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003f50:	f7fd fb04 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 8003f54:	2182      	movs	r1, #130	; 0x82
 8003f56:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003f5a:	f7fd faff 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 8003f5e:	2101      	movs	r1, #1
 8003f60:	f24d 4016 	movw	r0, #54294	; 0xd416
 8003f64:	f7fd fafa 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 8003f68:	21ca      	movs	r1, #202	; 0xca
 8003f6a:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003f6e:	f7fd faf5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 8003f72:	2102      	movs	r1, #2
 8003f74:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003f78:	f7fd faf0 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	f24d 4019 	movw	r0, #54297	; 0xd419
 8003f82:	f7fd faeb 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 8003f86:	2102      	movs	r1, #2
 8003f88:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8003f8c:	f7fd fae6 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 8003f90:	2101      	movs	r1, #1
 8003f92:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8003f96:	f7fd fae1 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8003fa0:	f7fd fadc 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 8003fa4:	2134      	movs	r1, #52	; 0x34
 8003fa6:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8003faa:	f7fd fad7 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 8003fae:	2102      	movs	r1, #2
 8003fb0:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8003fb4:	f7fd fad2 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 8003fb8:	2167      	movs	r1, #103	; 0x67
 8003fba:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8003fbe:	f7fd facd 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	f24d 4020 	movw	r0, #54304	; 0xd420
 8003fc8:	f7fd fac8 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 8003fcc:	2184      	movs	r1, #132	; 0x84
 8003fce:	f24d 4021 	movw	r0, #54305	; 0xd421
 8003fd2:	f7fd fac3 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 8003fd6:	2102      	movs	r1, #2
 8003fd8:	f24d 4022 	movw	r0, #54306	; 0xd422
 8003fdc:	f7fd fabe 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 8003fe0:	21a4      	movs	r1, #164	; 0xa4
 8003fe2:	f24d 4023 	movw	r0, #54307	; 0xd423
 8003fe6:	f7fd fab9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 8003fea:	2102      	movs	r1, #2
 8003fec:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003ff0:	f7fd fab4 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 8003ff4:	21b7      	movs	r1, #183	; 0xb7
 8003ff6:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003ffa:	f7fd faaf 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 8003ffe:	2102      	movs	r1, #2
 8004000:	f24d 4026 	movw	r0, #54310	; 0xd426
 8004004:	f7fd faaa 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 8004008:	21cf      	movs	r1, #207	; 0xcf
 800400a:	f24d 4027 	movw	r0, #54311	; 0xd427
 800400e:	f7fd faa5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 8004012:	2102      	movs	r1, #2
 8004014:	f24d 4028 	movw	r0, #54312	; 0xd428
 8004018:	f7fd faa0 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 800401c:	21de      	movs	r1, #222	; 0xde
 800401e:	f24d 4029 	movw	r0, #54313	; 0xd429
 8004022:	f7fd fa9b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 8004026:	2102      	movs	r1, #2
 8004028:	f24d 402a 	movw	r0, #54314	; 0xd42a
 800402c:	f7fd fa96 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 8004030:	21f2      	movs	r1, #242	; 0xf2
 8004032:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8004036:	f7fd fa91 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 800403a:	2102      	movs	r1, #2
 800403c:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8004040:	f7fd fa8c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 8004044:	21fe      	movs	r1, #254	; 0xfe
 8004046:	f24d 402d 	movw	r0, #54317	; 0xd42d
 800404a:	f7fd fa87 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 800404e:	2103      	movs	r1, #3
 8004050:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8004054:	f7fd fa82 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8004058:	2110      	movs	r1, #16
 800405a:	f24d 402f 	movw	r0, #54319	; 0xd42f
 800405e:	f7fd fa7d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 8004062:	2103      	movs	r1, #3
 8004064:	f24d 4030 	movw	r0, #54320	; 0xd430
 8004068:	f7fd fa78 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 800406c:	2133      	movs	r1, #51	; 0x33
 800406e:	f24d 4031 	movw	r0, #54321	; 0xd431
 8004072:	f7fd fa73 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 8004076:	2103      	movs	r1, #3
 8004078:	f24d 4032 	movw	r0, #54322	; 0xd432
 800407c:	f7fd fa6e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 8004080:	216d      	movs	r1, #109	; 0x6d
 8004082:	f24d 4033 	movw	r0, #54323	; 0xd433
 8004086:	f7fd fa69 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 800408a:	2100      	movs	r1, #0
 800408c:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8004090:	f7fd fa64 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 8004094:	2133      	movs	r1, #51	; 0x33
 8004096:	f24d 5001 	movw	r0, #54529	; 0xd501
 800409a:	f7fd fa5f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 800409e:	2100      	movs	r1, #0
 80040a0:	f24d 5002 	movw	r0, #54530	; 0xd502
 80040a4:	f7fd fa5a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 80040a8:	2134      	movs	r1, #52	; 0x34
 80040aa:	f24d 5003 	movw	r0, #54531	; 0xd503
 80040ae:	f7fd fa55 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 80040b2:	2100      	movs	r1, #0
 80040b4:	f24d 5004 	movw	r0, #54532	; 0xd504
 80040b8:	f7fd fa50 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 80040bc:	213a      	movs	r1, #58	; 0x3a
 80040be:	f24d 5005 	movw	r0, #54533	; 0xd505
 80040c2:	f7fd fa4b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 80040c6:	2100      	movs	r1, #0
 80040c8:	f24d 5006 	movw	r0, #54534	; 0xd506
 80040cc:	f7fd fa46 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 80040d0:	214a      	movs	r1, #74	; 0x4a
 80040d2:	f24d 5007 	movw	r0, #54535	; 0xd507
 80040d6:	f7fd fa41 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 80040da:	2100      	movs	r1, #0
 80040dc:	f24d 5008 	movw	r0, #54536	; 0xd508
 80040e0:	f7fd fa3c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 80040e4:	215c      	movs	r1, #92	; 0x5c
 80040e6:	f24d 5009 	movw	r0, #54537	; 0xd509
 80040ea:	f7fd fa37 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 80040ee:	2100      	movs	r1, #0
 80040f0:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80040f4:	f7fd fa32 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 80040f8:	2181      	movs	r1, #129	; 0x81
 80040fa:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80040fe:	f7fd fa2d 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 8004102:	2100      	movs	r1, #0
 8004104:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8004108:	f7fd fa28 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 800410c:	21a6      	movs	r1, #166	; 0xa6
 800410e:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8004112:	f7fd fa23 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 8004116:	2100      	movs	r1, #0
 8004118:	f24d 500e 	movw	r0, #54542	; 0xd50e
 800411c:	f7fd fa1e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 8004120:	21e5      	movs	r1, #229	; 0xe5
 8004122:	f24d 500f 	movw	r0, #54543	; 0xd50f
 8004126:	f7fd fa19 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 800412a:	2101      	movs	r1, #1
 800412c:	f24d 5010 	movw	r0, #54544	; 0xd510
 8004130:	f7fd fa14 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 8004134:	2113      	movs	r1, #19
 8004136:	f24d 5011 	movw	r0, #54545	; 0xd511
 800413a:	f7fd fa0f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 800413e:	2101      	movs	r1, #1
 8004140:	f24d 5012 	movw	r0, #54546	; 0xd512
 8004144:	f7fd fa0a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 8004148:	2154      	movs	r1, #84	; 0x54
 800414a:	f24d 5013 	movw	r0, #54547	; 0xd513
 800414e:	f7fd fa05 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 8004152:	2101      	movs	r1, #1
 8004154:	f24d 5014 	movw	r0, #54548	; 0xd514
 8004158:	f7fd fa00 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 800415c:	2182      	movs	r1, #130	; 0x82
 800415e:	f24d 5015 	movw	r0, #54549	; 0xd515
 8004162:	f7fd f9fb 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 8004166:	2101      	movs	r1, #1
 8004168:	f24d 5016 	movw	r0, #54550	; 0xd516
 800416c:	f7fd f9f6 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 8004170:	21ca      	movs	r1, #202	; 0xca
 8004172:	f24d 5017 	movw	r0, #54551	; 0xd517
 8004176:	f7fd f9f1 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 800417a:	2102      	movs	r1, #2
 800417c:	f24d 5018 	movw	r0, #54552	; 0xd518
 8004180:	f7fd f9ec 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 8004184:	2100      	movs	r1, #0
 8004186:	f24d 5019 	movw	r0, #54553	; 0xd519
 800418a:	f7fd f9e7 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 800418e:	2102      	movs	r1, #2
 8004190:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8004194:	f7fd f9e2 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 8004198:	2101      	movs	r1, #1
 800419a:	f24d 501b 	movw	r0, #54555	; 0xd51b
 800419e:	f7fd f9dd 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 80041a2:	2102      	movs	r1, #2
 80041a4:	f24d 501c 	movw	r0, #54556	; 0xd51c
 80041a8:	f7fd f9d8 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 80041ac:	2134      	movs	r1, #52	; 0x34
 80041ae:	f24d 501d 	movw	r0, #54557	; 0xd51d
 80041b2:	f7fd f9d3 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 80041b6:	2102      	movs	r1, #2
 80041b8:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80041bc:	f7fd f9ce 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 80041c0:	2167      	movs	r1, #103	; 0x67
 80041c2:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80041c6:	f7fd f9c9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 80041ca:	2102      	movs	r1, #2
 80041cc:	f24d 5020 	movw	r0, #54560	; 0xd520
 80041d0:	f7fd f9c4 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 80041d4:	2184      	movs	r1, #132	; 0x84
 80041d6:	f24d 5021 	movw	r0, #54561	; 0xd521
 80041da:	f7fd f9bf 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 80041de:	2102      	movs	r1, #2
 80041e0:	f24d 5022 	movw	r0, #54562	; 0xd522
 80041e4:	f7fd f9ba 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 80041e8:	21a4      	movs	r1, #164	; 0xa4
 80041ea:	f24d 5023 	movw	r0, #54563	; 0xd523
 80041ee:	f7fd f9b5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 80041f2:	2102      	movs	r1, #2
 80041f4:	f24d 5024 	movw	r0, #54564	; 0xd524
 80041f8:	f7fd f9b0 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 80041fc:	21b7      	movs	r1, #183	; 0xb7
 80041fe:	f24d 5025 	movw	r0, #54565	; 0xd525
 8004202:	f7fd f9ab 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 8004206:	2102      	movs	r1, #2
 8004208:	f24d 5026 	movw	r0, #54566	; 0xd526
 800420c:	f7fd f9a6 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 8004210:	21cf      	movs	r1, #207	; 0xcf
 8004212:	f24d 5027 	movw	r0, #54567	; 0xd527
 8004216:	f7fd f9a1 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 800421a:	2102      	movs	r1, #2
 800421c:	f24d 5028 	movw	r0, #54568	; 0xd528
 8004220:	f7fd f99c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 8004224:	21de      	movs	r1, #222	; 0xde
 8004226:	f24d 5029 	movw	r0, #54569	; 0xd529
 800422a:	f7fd f997 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 800422e:	2102      	movs	r1, #2
 8004230:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8004234:	f7fd f992 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 8004238:	21f2      	movs	r1, #242	; 0xf2
 800423a:	f24d 502b 	movw	r0, #54571	; 0xd52b
 800423e:	f7fd f98d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 8004242:	2102      	movs	r1, #2
 8004244:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8004248:	f7fd f988 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 800424c:	21fe      	movs	r1, #254	; 0xfe
 800424e:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8004252:	f7fd f983 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 8004256:	2103      	movs	r1, #3
 8004258:	f24d 502e 	movw	r0, #54574	; 0xd52e
 800425c:	f7fd f97e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8004260:	2110      	movs	r1, #16
 8004262:	f24d 502f 	movw	r0, #54575	; 0xd52f
 8004266:	f7fd f979 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 800426a:	2103      	movs	r1, #3
 800426c:	f24d 5030 	movw	r0, #54576	; 0xd530
 8004270:	f7fd f974 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 8004274:	2133      	movs	r1, #51	; 0x33
 8004276:	f24d 5031 	movw	r0, #54577	; 0xd531
 800427a:	f7fd f96f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 800427e:	2103      	movs	r1, #3
 8004280:	f24d 5032 	movw	r0, #54578	; 0xd532
 8004284:	f7fd f96a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 8004288:	216d      	movs	r1, #109	; 0x6d
 800428a:	f24d 5033 	movw	r0, #54579	; 0xd533
 800428e:	f7fd f965 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 8004292:	2100      	movs	r1, #0
 8004294:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 8004298:	f7fd f960 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 800429c:	2133      	movs	r1, #51	; 0x33
 800429e:	f24d 6001 	movw	r0, #54785	; 0xd601
 80042a2:	f7fd f95b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 80042a6:	2100      	movs	r1, #0
 80042a8:	f24d 6002 	movw	r0, #54786	; 0xd602
 80042ac:	f7fd f956 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 80042b0:	2134      	movs	r1, #52	; 0x34
 80042b2:	f24d 6003 	movw	r0, #54787	; 0xd603
 80042b6:	f7fd f951 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 80042ba:	2100      	movs	r1, #0
 80042bc:	f24d 6004 	movw	r0, #54788	; 0xd604
 80042c0:	f7fd f94c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 80042c4:	213a      	movs	r1, #58	; 0x3a
 80042c6:	f24d 6005 	movw	r0, #54789	; 0xd605
 80042ca:	f7fd f947 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 80042ce:	2100      	movs	r1, #0
 80042d0:	f24d 6006 	movw	r0, #54790	; 0xd606
 80042d4:	f7fd f942 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 80042d8:	214a      	movs	r1, #74	; 0x4a
 80042da:	f24d 6007 	movw	r0, #54791	; 0xd607
 80042de:	f7fd f93d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 80042e2:	2100      	movs	r1, #0
 80042e4:	f24d 6008 	movw	r0, #54792	; 0xd608
 80042e8:	f7fd f938 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 80042ec:	215c      	movs	r1, #92	; 0x5c
 80042ee:	f24d 6009 	movw	r0, #54793	; 0xd609
 80042f2:	f7fd f933 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 80042f6:	2100      	movs	r1, #0
 80042f8:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80042fc:	f7fd f92e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 8004300:	2181      	movs	r1, #129	; 0x81
 8004302:	f24d 600b 	movw	r0, #54795	; 0xd60b
 8004306:	f7fd f929 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 800430a:	2100      	movs	r1, #0
 800430c:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8004310:	f7fd f924 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 8004314:	21a6      	movs	r1, #166	; 0xa6
 8004316:	f24d 600d 	movw	r0, #54797	; 0xd60d
 800431a:	f7fd f91f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 800431e:	2100      	movs	r1, #0
 8004320:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8004324:	f7fd f91a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 8004328:	21e5      	movs	r1, #229	; 0xe5
 800432a:	f24d 600f 	movw	r0, #54799	; 0xd60f
 800432e:	f7fd f915 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 8004332:	2101      	movs	r1, #1
 8004334:	f24d 6010 	movw	r0, #54800	; 0xd610
 8004338:	f7fd f910 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 800433c:	2113      	movs	r1, #19
 800433e:	f24d 6011 	movw	r0, #54801	; 0xd611
 8004342:	f7fd f90b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 8004346:	2101      	movs	r1, #1
 8004348:	f24d 6012 	movw	r0, #54802	; 0xd612
 800434c:	f7fd f906 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8004350:	2154      	movs	r1, #84	; 0x54
 8004352:	f24d 6013 	movw	r0, #54803	; 0xd613
 8004356:	f7fd f901 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 800435a:	2101      	movs	r1, #1
 800435c:	f24d 6014 	movw	r0, #54804	; 0xd614
 8004360:	f7fd f8fc 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 8004364:	2182      	movs	r1, #130	; 0x82
 8004366:	f24d 6015 	movw	r0, #54805	; 0xd615
 800436a:	f7fd f8f7 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 800436e:	2101      	movs	r1, #1
 8004370:	f24d 6016 	movw	r0, #54806	; 0xd616
 8004374:	f7fd f8f2 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 8004378:	21ca      	movs	r1, #202	; 0xca
 800437a:	f24d 6017 	movw	r0, #54807	; 0xd617
 800437e:	f7fd f8ed 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 8004382:	2102      	movs	r1, #2
 8004384:	f24d 6018 	movw	r0, #54808	; 0xd618
 8004388:	f7fd f8e8 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 800438c:	2100      	movs	r1, #0
 800438e:	f24d 6019 	movw	r0, #54809	; 0xd619
 8004392:	f7fd f8e3 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 8004396:	2102      	movs	r1, #2
 8004398:	f24d 601a 	movw	r0, #54810	; 0xd61a
 800439c:	f7fd f8de 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 80043a0:	2101      	movs	r1, #1
 80043a2:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80043a6:	f7fd f8d9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 80043aa:	2102      	movs	r1, #2
 80043ac:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80043b0:	f7fd f8d4 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 80043b4:	2134      	movs	r1, #52	; 0x34
 80043b6:	f24d 601d 	movw	r0, #54813	; 0xd61d
 80043ba:	f7fd f8cf 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 80043be:	2102      	movs	r1, #2
 80043c0:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80043c4:	f7fd f8ca 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 80043c8:	2167      	movs	r1, #103	; 0x67
 80043ca:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80043ce:	f7fd f8c5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 80043d2:	2102      	movs	r1, #2
 80043d4:	f24d 6020 	movw	r0, #54816	; 0xd620
 80043d8:	f7fd f8c0 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 80043dc:	2184      	movs	r1, #132	; 0x84
 80043de:	f24d 6021 	movw	r0, #54817	; 0xd621
 80043e2:	f7fd f8bb 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 80043e6:	2102      	movs	r1, #2
 80043e8:	f24d 6022 	movw	r0, #54818	; 0xd622
 80043ec:	f7fd f8b6 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 80043f0:	21a4      	movs	r1, #164	; 0xa4
 80043f2:	f24d 6023 	movw	r0, #54819	; 0xd623
 80043f6:	f7fd f8b1 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 80043fa:	2102      	movs	r1, #2
 80043fc:	f24d 6024 	movw	r0, #54820	; 0xd624
 8004400:	f7fd f8ac 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 8004404:	21b7      	movs	r1, #183	; 0xb7
 8004406:	f24d 6025 	movw	r0, #54821	; 0xd625
 800440a:	f7fd f8a7 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 800440e:	2102      	movs	r1, #2
 8004410:	f24d 6026 	movw	r0, #54822	; 0xd626
 8004414:	f7fd f8a2 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 8004418:	21cf      	movs	r1, #207	; 0xcf
 800441a:	f24d 6027 	movw	r0, #54823	; 0xd627
 800441e:	f7fd f89d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 8004422:	2102      	movs	r1, #2
 8004424:	f24d 6028 	movw	r0, #54824	; 0xd628
 8004428:	f7fd f898 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 800442c:	21de      	movs	r1, #222	; 0xde
 800442e:	f24d 6029 	movw	r0, #54825	; 0xd629
 8004432:	f7fd f893 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 8004436:	2102      	movs	r1, #2
 8004438:	f24d 602a 	movw	r0, #54826	; 0xd62a
 800443c:	f7fd f88e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8004440:	21f2      	movs	r1, #242	; 0xf2
 8004442:	f24d 602b 	movw	r0, #54827	; 0xd62b
 8004446:	f7fd f889 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 800444a:	2102      	movs	r1, #2
 800444c:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8004450:	f7fd f884 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 8004454:	21fe      	movs	r1, #254	; 0xfe
 8004456:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800445a:	f7fd f87f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 800445e:	2103      	movs	r1, #3
 8004460:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8004464:	f7fd f87a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 8004468:	2110      	movs	r1, #16
 800446a:	f24d 602f 	movw	r0, #54831	; 0xd62f
 800446e:	f7fd f875 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 8004472:	2103      	movs	r1, #3
 8004474:	f24d 6030 	movw	r0, #54832	; 0xd630
 8004478:	f7fd f870 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 800447c:	2133      	movs	r1, #51	; 0x33
 800447e:	f24d 6031 	movw	r0, #54833	; 0xd631
 8004482:	f7fd f86b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 8004486:	2103      	movs	r1, #3
 8004488:	f24d 6032 	movw	r0, #54834	; 0xd632
 800448c:	f7fd f866 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 8004490:	216d      	movs	r1, #109	; 0x6d
 8004492:	f24d 6033 	movw	r0, #54835	; 0xd633
 8004496:	f7fd f861 	bl	800155c <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 800449a:	2155      	movs	r1, #85	; 0x55
 800449c:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80044a0:	f7fd f85c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 80044a4:	21aa      	movs	r1, #170	; 0xaa
 80044a6:	f24f 0001 	movw	r0, #61441	; 0xf001
 80044aa:	f7fd f857 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 80044ae:	2152      	movs	r1, #82	; 0x52
 80044b0:	f24f 0002 	movw	r0, #61442	; 0xf002
 80044b4:	f7fd f852 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 80044b8:	2108      	movs	r1, #8
 80044ba:	f24f 0003 	movw	r0, #61443	; 0xf003
 80044be:	f7fd f84d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 80044c2:	2100      	movs	r1, #0
 80044c4:	f24f 0004 	movw	r0, #61444	; 0xf004
 80044c8:	f7fd f848 	bl	800155c <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80044cc:	21cc      	movs	r1, #204	; 0xcc
 80044ce:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80044d2:	f7fd f843 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80044d6:	2100      	movs	r1, #0
 80044d8:	f24b 1001 	movw	r0, #45313	; 0xb101
 80044dc:	f7fd f83e 	bl	800155c <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 80044e0:	2105      	movs	r1, #5
 80044e2:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80044e6:	f7fd f839 	bl	800155c <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 80044ea:	2170      	movs	r1, #112	; 0x70
 80044ec:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80044f0:	f7fd f834 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 80044f4:	2170      	movs	r1, #112	; 0x70
 80044f6:	f24b 7001 	movw	r0, #46849	; 0xb701
 80044fa:	f7fd f82f 	bl	800155c <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 80044fe:	2101      	movs	r1, #1
 8004500:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8004504:	f7fd f82a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 8004508:	2103      	movs	r1, #3
 800450a:	f64b 0001 	movw	r0, #47105	; 0xb801
 800450e:	f7fd f825 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 8004512:	2103      	movs	r1, #3
 8004514:	f64b 0002 	movw	r0, #47106	; 0xb802
 8004518:	f7fd f820 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 800451c:	2103      	movs	r1, #3
 800451e:	f64b 0003 	movw	r0, #47107	; 0xb803
 8004522:	f7fd f81b 	bl	800155c <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 8004526:	2102      	movs	r1, #2
 8004528:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 800452c:	f7fd f816 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8004530:	2100      	movs	r1, #0
 8004532:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8004536:	f7fd f811 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 800453a:	2100      	movs	r1, #0
 800453c:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004540:	f7fd f80c 	bl	800155c <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 8004544:	21d0      	movs	r1, #208	; 0xd0
 8004546:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 800454a:	f7fd f807 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 800454e:	2102      	movs	r1, #2
 8004550:	f64c 1001 	movw	r0, #51457	; 0xc901
 8004554:	f7fd f802 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8004558:	2150      	movs	r1, #80	; 0x50
 800455a:	f64c 1002 	movw	r0, #51458	; 0xc902
 800455e:	f7fc fffd 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 8004562:	2150      	movs	r1, #80	; 0x50
 8004564:	f64c 1003 	movw	r0, #51459	; 0xc903
 8004568:	f7fc fff8 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 800456c:	2150      	movs	r1, #80	; 0x50
 800456e:	f64c 1004 	movw	r0, #51460	; 0xc904
 8004572:	f7fc fff3 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 8004576:	2100      	movs	r1, #0
 8004578:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 800457c:	f7fc ffee 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8004580:	2155      	movs	r1, #85	; 0x55
 8004582:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8004586:	f7fc ffe9 	bl	800155c <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 800458a:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 800458e:	f7fc ffab 	bl	80014e8 <LCD_WR_REG>
		delay_us(120);
 8004592:	2078      	movs	r0, #120	; 0x78
 8004594:	f7fc fcea 	bl	8000f6c <delay_us>
		LCD_WR_REG(0x2900);
 8004598:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 800459c:	f7fc ffa4 	bl	80014e8 <LCD_WR_REG>
 80045a0:	f001 b95f 	b.w	8005862 <LCD_Init+0x3752>
	}else if(lcddev.id==0x9325)//9325
 80045a4:	4bec      	ldr	r3, [pc, #944]	; (8004958 <LCD_Init+0x2848>)
 80045a6:	889b      	ldrh	r3, [r3, #4]
 80045a8:	f249 3225 	movw	r2, #37669	; 0x9325
 80045ac:	4293      	cmp	r3, r2
 80045ae:	f040 80d7 	bne.w	8004760 <LCD_Init+0x2650>
	{
		LCD_WriteReg(0x00E5,0x78F0);
 80045b2:	f647 01f0 	movw	r1, #30960	; 0x78f0
 80045b6:	20e5      	movs	r0, #229	; 0xe5
 80045b8:	f7fc ffd0 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0001,0x0100);
 80045bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045c0:	2001      	movs	r0, #1
 80045c2:	f7fc ffcb 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 80045c6:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80045ca:	2002      	movs	r0, #2
 80045cc:	f7fc ffc6 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0003,0x1030);
 80045d0:	f241 0130 	movw	r1, #4144	; 0x1030
 80045d4:	2003      	movs	r0, #3
 80045d6:	f7fc ffc1 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0004,0x0000);
 80045da:	2100      	movs	r1, #0
 80045dc:	2004      	movs	r0, #4
 80045de:	f7fc ffbd 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 80045e2:	f240 2102 	movw	r1, #514	; 0x202
 80045e6:	2008      	movs	r0, #8
 80045e8:	f7fc ffb8 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0009,0x0000);
 80045ec:	2100      	movs	r1, #0
 80045ee:	2009      	movs	r0, #9
 80045f0:	f7fc ffb4 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x000A,0x0000);
 80045f4:	2100      	movs	r1, #0
 80045f6:	200a      	movs	r0, #10
 80045f8:	f7fc ffb0 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x000C,0x0000);
 80045fc:	2100      	movs	r1, #0
 80045fe:	200c      	movs	r0, #12
 8004600:	f7fc ffac 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x000D,0x0000);
 8004604:	2100      	movs	r1, #0
 8004606:	200d      	movs	r0, #13
 8004608:	f7fc ffa8 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x000F,0x0000);
 800460c:	2100      	movs	r1, #0
 800460e:	200f      	movs	r0, #15
 8004610:	f7fc ffa4 	bl	800155c <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010,0x0000);
 8004614:	2100      	movs	r1, #0
 8004616:	2010      	movs	r0, #16
 8004618:	f7fc ffa0 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 800461c:	2107      	movs	r1, #7
 800461e:	2011      	movs	r0, #17
 8004620:	f7fc ff9c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 8004624:	2100      	movs	r1, #0
 8004626:	2012      	movs	r0, #18
 8004628:	f7fc ff98 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 800462c:	2100      	movs	r1, #0
 800462e:	2013      	movs	r0, #19
 8004630:	f7fc ff94 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0000);
 8004634:	2100      	movs	r1, #0
 8004636:	2007      	movs	r0, #7
 8004638:	f7fc ff90 	bl	800155c <LCD_WriteReg>
		//vgh
		LCD_WriteReg(0x0010,0x1690);
 800463c:	f241 6190 	movw	r1, #5776	; 0x1690
 8004640:	2010      	movs	r0, #16
 8004642:	f7fc ff8b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0227);
 8004646:	f240 2127 	movw	r1, #551	; 0x227
 800464a:	2011      	movs	r0, #17
 800464c:	f7fc ff86 	bl	800155c <LCD_WriteReg>
		//delayms(100);
		//vregiout
		LCD_WriteReg(0x0012,0x009D); //0x001b
 8004650:	219d      	movs	r1, #157	; 0x9d
 8004652:	2012      	movs	r0, #18
 8004654:	f7fc ff82 	bl	800155c <LCD_WriteReg>
		//delayms(100);
		//vom amplitude
		LCD_WriteReg(0x0013,0x1900);
 8004658:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 800465c:	2013      	movs	r0, #19
 800465e:	f7fc ff7d 	bl	800155c <LCD_WriteReg>
		//delayms(100);
		//vom H
		LCD_WriteReg(0x0029,0x0025);
 8004662:	2125      	movs	r1, #37	; 0x25
 8004664:	2029      	movs	r0, #41	; 0x29
 8004666:	f7fc ff79 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x002B,0x000D);
 800466a:	210d      	movs	r1, #13
 800466c:	202b      	movs	r0, #43	; 0x2b
 800466e:	f7fc ff75 	bl	800155c <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030,0x0007);
 8004672:	2107      	movs	r1, #7
 8004674:	2030      	movs	r0, #48	; 0x30
 8004676:	f7fc ff71 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0303);
 800467a:	f240 3103 	movw	r1, #771	; 0x303
 800467e:	2031      	movs	r0, #49	; 0x31
 8004680:	f7fc ff6c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0003);// 0006
 8004684:	2103      	movs	r1, #3
 8004686:	2032      	movs	r0, #50	; 0x32
 8004688:	f7fc ff68 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0206);
 800468c:	f240 2106 	movw	r1, #518	; 0x206
 8004690:	2035      	movs	r0, #53	; 0x35
 8004692:	f7fc ff63 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x0008);
 8004696:	2108      	movs	r1, #8
 8004698:	2036      	movs	r0, #54	; 0x36
 800469a:	f7fc ff5f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0406);
 800469e:	f240 4106 	movw	r1, #1030	; 0x406
 80046a2:	2037      	movs	r0, #55	; 0x37
 80046a4:	f7fc ff5a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0304);//0200
 80046a8:	f44f 7141 	mov.w	r1, #772	; 0x304
 80046ac:	2038      	movs	r0, #56	; 0x38
 80046ae:	f7fc ff55 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0007);
 80046b2:	2107      	movs	r1, #7
 80046b4:	2039      	movs	r0, #57	; 0x39
 80046b6:	f7fc ff51 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x003C,0x0602);// 0504
 80046ba:	f240 6102 	movw	r1, #1538	; 0x602
 80046be:	203c      	movs	r0, #60	; 0x3c
 80046c0:	f7fc ff4c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x003D,0x0008);
 80046c4:	2108      	movs	r1, #8
 80046c6:	203d      	movs	r0, #61	; 0x3d
 80046c8:	f7fc ff48 	bl	800155c <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050,0x0000);
 80046cc:	2100      	movs	r1, #0
 80046ce:	2050      	movs	r0, #80	; 0x50
 80046d0:	f7fc ff44 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00EF);
 80046d4:	21ef      	movs	r1, #239	; 0xef
 80046d6:	2051      	movs	r0, #81	; 0x51
 80046d8:	f7fc ff40 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 80046dc:	2100      	movs	r1, #0
 80046de:	2052      	movs	r0, #82	; 0x52
 80046e0:	f7fc ff3c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013F);
 80046e4:	f240 113f 	movw	r1, #319	; 0x13f
 80046e8:	2053      	movs	r0, #83	; 0x53
 80046ea:	f7fc ff37 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0060,0xA700);
 80046ee:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80046f2:	2060      	movs	r0, #96	; 0x60
 80046f4:	f7fc ff32 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 80046f8:	2101      	movs	r1, #1
 80046fa:	2061      	movs	r0, #97	; 0x61
 80046fc:	f7fc ff2e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x006A,0x0000);
 8004700:	2100      	movs	r1, #0
 8004702:	206a      	movs	r0, #106	; 0x6a
 8004704:	f7fc ff2a 	bl	800155c <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080,0x0000);
 8004708:	2100      	movs	r1, #0
 800470a:	2080      	movs	r0, #128	; 0x80
 800470c:	f7fc ff26 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0081,0x0000);
 8004710:	2100      	movs	r1, #0
 8004712:	2081      	movs	r0, #129	; 0x81
 8004714:	f7fc ff22 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0082,0x0000);
 8004718:	2100      	movs	r1, #0
 800471a:	2082      	movs	r0, #130	; 0x82
 800471c:	f7fc ff1e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0083,0x0000);
 8004720:	2100      	movs	r1, #0
 8004722:	2083      	movs	r0, #131	; 0x83
 8004724:	f7fc ff1a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0084,0x0000);
 8004728:	2100      	movs	r1, #0
 800472a:	2084      	movs	r0, #132	; 0x84
 800472c:	f7fc ff16 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0085,0x0000);
 8004730:	2100      	movs	r1, #0
 8004732:	2085      	movs	r0, #133	; 0x85
 8004734:	f7fc ff12 	bl	800155c <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090,0x0010);
 8004738:	2110      	movs	r1, #16
 800473a:	2090      	movs	r0, #144	; 0x90
 800473c:	f7fc ff0e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 8004740:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004744:	2092      	movs	r0, #146	; 0x92
 8004746:	f7fc ff09 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0x0007,0x0133);
 800474a:	f240 1133 	movw	r1, #307	; 0x133
 800474e:	2007      	movs	r0, #7
 8004750:	f7fc ff04 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x00,0x0022);//
 8004754:	2122      	movs	r1, #34	; 0x22
 8004756:	2000      	movs	r0, #0
 8004758:	f7fc ff00 	bl	800155c <LCD_WriteReg>
 800475c:	f001 b881 	b.w	8005862 <LCD_Init+0x3752>
	}else if(lcddev.id==0x9328)//ILI9328   OK
 8004760:	4b7d      	ldr	r3, [pc, #500]	; (8004958 <LCD_Init+0x2848>)
 8004762:	889b      	ldrh	r3, [r3, #4]
 8004764:	f249 3228 	movw	r2, #37672	; 0x9328
 8004768:	4293      	cmp	r3, r2
 800476a:	f040 80f7 	bne.w	800495c <LCD_Init+0x284c>
	{
  		LCD_WriteReg(0x00EC,0x108F);// internal timeing
 800476e:	f241 018f 	movw	r1, #4239	; 0x108f
 8004772:	20ec      	movs	r0, #236	; 0xec
 8004774:	f7fc fef2 	bl	800155c <LCD_WriteReg>
 		LCD_WriteReg(0x00EF,0x1234);// ADD
 8004778:	f241 2134 	movw	r1, #4660	; 0x1234
 800477c:	20ef      	movs	r0, #239	; 0xef
 800477e:	f7fc feed 	bl	800155c <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);
        //LCD_WriteReg(0x0000,0x0001);//开启内部时钟
        LCD_WriteReg(0x0001,0x0100);
 8004782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004786:	2001      	movs	r0, #1
 8004788:	f7fc fee8 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);//电源开启
 800478c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004790:	2002      	movs	r0, #2
 8004792:	f7fc fee3 	bl	800155c <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(0<<3) );//65K
 8004796:	f241 0130 	movw	r1, #4144	; 0x1030
 800479a:	2003      	movs	r0, #3
 800479c:	f7fc fede 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 80047a0:	2100      	movs	r1, #0
 80047a2:	2004      	movs	r0, #4
 80047a4:	f7fc feda 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x0202);
 80047a8:	f240 2102 	movw	r1, #514	; 0x202
 80047ac:	2008      	movs	r0, #8
 80047ae:	f7fc fed5 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0009,0x0000);
 80047b2:	2100      	movs	r1, #0
 80047b4:	2009      	movs	r0, #9
 80047b6:	f7fc fed1 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x000a,0x0000);//display setting
 80047ba:	2100      	movs	r1, #0
 80047bc:	200a      	movs	r0, #10
 80047be:	f7fc fecd 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x000c,0x0001);//display setting
 80047c2:	2101      	movs	r1, #1
 80047c4:	200c      	movs	r0, #12
 80047c6:	f7fc fec9 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x000d,0x0000);//0f3c
 80047ca:	2100      	movs	r1, #0
 80047cc:	200d      	movs	r0, #13
 80047ce:	f7fc fec5 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x000f,0x0000);
 80047d2:	2100      	movs	r1, #0
 80047d4:	200f      	movs	r0, #15
 80047d6:	f7fc fec1 	bl	800155c <LCD_WriteReg>
		//电源配置
        LCD_WriteReg(0x0010,0x0000);
 80047da:	2100      	movs	r1, #0
 80047dc:	2010      	movs	r0, #16
 80047de:	f7fc febd 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0007);
 80047e2:	2107      	movs	r1, #7
 80047e4:	2011      	movs	r0, #17
 80047e6:	f7fc feb9 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x0000);
 80047ea:	2100      	movs	r1, #0
 80047ec:	2012      	movs	r0, #18
 80047ee:	f7fc feb5 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0000);
 80047f2:	2100      	movs	r1, #0
 80047f4:	2013      	movs	r0, #19
 80047f6:	f7fc feb1 	bl	800155c <LCD_WriteReg>
     	LCD_WriteReg(0x0007,0x0001);
 80047fa:	2101      	movs	r1, #1
 80047fc:	2007      	movs	r0, #7
 80047fe:	f7fc fead 	bl	800155c <LCD_WriteReg>
       	HAL_Delay(50);
 8004802:	2032      	movs	r0, #50	; 0x32
 8004804:	f002 ffee 	bl	80077e4 <HAL_Delay>
        LCD_WriteReg(0x0010,0x1490);
 8004808:	f241 4190 	movw	r1, #5264	; 0x1490
 800480c:	2010      	movs	r0, #16
 800480e:	f7fc fea5 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0227);
 8004812:	f240 2127 	movw	r1, #551	; 0x227
 8004816:	2011      	movs	r0, #17
 8004818:	f7fc fea0 	bl	800155c <LCD_WriteReg>
        HAL_Delay(50);
 800481c:	2032      	movs	r0, #50	; 0x32
 800481e:	f002 ffe1 	bl	80077e4 <HAL_Delay>
        LCD_WriteReg(0x0012,0x008A);
 8004822:	218a      	movs	r1, #138	; 0x8a
 8004824:	2012      	movs	r0, #18
 8004826:	f7fc fe99 	bl	800155c <LCD_WriteReg>
        HAL_Delay(50);
 800482a:	2032      	movs	r0, #50	; 0x32
 800482c:	f002 ffda 	bl	80077e4 <HAL_Delay>
        LCD_WriteReg(0x0013,0x1a00);
 8004830:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8004834:	2013      	movs	r0, #19
 8004836:	f7fc fe91 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x0006);
 800483a:	2106      	movs	r1, #6
 800483c:	2029      	movs	r0, #41	; 0x29
 800483e:	f7fc fe8d 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x002b,0x000d);
 8004842:	210d      	movs	r1, #13
 8004844:	202b      	movs	r0, #43	; 0x2b
 8004846:	f7fc fe89 	bl	800155c <LCD_WriteReg>
        HAL_Delay(50);
 800484a:	2032      	movs	r0, #50	; 0x32
 800484c:	f002 ffca 	bl	80077e4 <HAL_Delay>
        LCD_WriteReg(0x0020,0x0000);
 8004850:	2100      	movs	r1, #0
 8004852:	2020      	movs	r0, #32
 8004854:	f7fc fe82 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 8004858:	2100      	movs	r1, #0
 800485a:	2021      	movs	r0, #33	; 0x21
 800485c:	f7fc fe7e 	bl	800155c <LCD_WriteReg>
		HAL_Delay(50);
 8004860:	2032      	movs	r0, #50	; 0x32
 8004862:	f002 ffbf 	bl	80077e4 <HAL_Delay>
		//伽马校正
        LCD_WriteReg(0x0030,0x0000);
 8004866:	2100      	movs	r1, #0
 8004868:	2030      	movs	r0, #48	; 0x30
 800486a:	f7fc fe77 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0604);
 800486e:	f240 6104 	movw	r1, #1540	; 0x604
 8004872:	2031      	movs	r0, #49	; 0x31
 8004874:	f7fc fe72 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0305);
 8004878:	f240 3105 	movw	r1, #773	; 0x305
 800487c:	2032      	movs	r0, #50	; 0x32
 800487e:	f7fc fe6d 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0000);
 8004882:	2100      	movs	r1, #0
 8004884:	2035      	movs	r0, #53	; 0x35
 8004886:	f7fc fe69 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x0C09);
 800488a:	f640 4109 	movw	r1, #3081	; 0xc09
 800488e:	2036      	movs	r0, #54	; 0x36
 8004890:	f7fc fe64 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0204);
 8004894:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004898:	2037      	movs	r0, #55	; 0x37
 800489a:	f7fc fe5f 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0301);
 800489e:	f240 3101 	movw	r1, #769	; 0x301
 80048a2:	2038      	movs	r0, #56	; 0x38
 80048a4:	f7fc fe5a 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0707);
 80048a8:	f240 7107 	movw	r1, #1799	; 0x707
 80048ac:	2039      	movs	r0, #57	; 0x39
 80048ae:	f7fc fe55 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x003c,0x0000);
 80048b2:	2100      	movs	r1, #0
 80048b4:	203c      	movs	r0, #60	; 0x3c
 80048b6:	f7fc fe51 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x003d,0x0a0a);
 80048ba:	f640 210a 	movw	r1, #2570	; 0xa0a
 80048be:	203d      	movs	r0, #61	; 0x3d
 80048c0:	f7fc fe4c 	bl	800155c <LCD_WriteReg>
        HAL_Delay(50);
 80048c4:	2032      	movs	r0, #50	; 0x32
 80048c6:	f002 ff8d 	bl	80077e4 <HAL_Delay>
        LCD_WriteReg(0x0050,0x0000); //水平GRAM起始位置
 80048ca:	2100      	movs	r1, #0
 80048cc:	2050      	movs	r0, #80	; 0x50
 80048ce:	f7fc fe45 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00ef); //水平GRAM终止位置
 80048d2:	21ef      	movs	r1, #239	; 0xef
 80048d4:	2051      	movs	r0, #81	; 0x51
 80048d6:	f7fc fe41 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000); //垂直GRAM起始位置
 80048da:	2100      	movs	r1, #0
 80048dc:	2052      	movs	r0, #82	; 0x52
 80048de:	f7fc fe3d 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013f); //垂直GRAM终止位置
 80048e2:	f240 113f 	movw	r1, #319	; 0x13f
 80048e6:	2053      	movs	r0, #83	; 0x53
 80048e8:	f7fc fe38 	bl	800155c <LCD_WriteReg>

         LCD_WriteReg(0x0060,0xa700);
 80048ec:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80048f0:	2060      	movs	r0, #96	; 0x60
 80048f2:	f7fc fe33 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 80048f6:	2101      	movs	r1, #1
 80048f8:	2061      	movs	r0, #97	; 0x61
 80048fa:	f7fc fe2f 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x006a,0x0000);
 80048fe:	2100      	movs	r1, #0
 8004900:	206a      	movs	r0, #106	; 0x6a
 8004902:	f7fc fe2b 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8004906:	2100      	movs	r1, #0
 8004908:	2080      	movs	r0, #128	; 0x80
 800490a:	f7fc fe27 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0081,0x0000);
 800490e:	2100      	movs	r1, #0
 8004910:	2081      	movs	r0, #129	; 0x81
 8004912:	f7fc fe23 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8004916:	2100      	movs	r1, #0
 8004918:	2082      	movs	r0, #130	; 0x82
 800491a:	f7fc fe1f 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 800491e:	2100      	movs	r1, #0
 8004920:	2083      	movs	r0, #131	; 0x83
 8004922:	f7fc fe1b 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8004926:	2100      	movs	r1, #0
 8004928:	2084      	movs	r0, #132	; 0x84
 800492a:	f7fc fe17 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 800492e:	2100      	movs	r1, #0
 8004930:	2085      	movs	r0, #133	; 0x85
 8004932:	f7fc fe13 	bl	800155c <LCD_WriteReg>

        LCD_WriteReg(0x0090,0x0010);
 8004936:	2110      	movs	r1, #16
 8004938:	2090      	movs	r0, #144	; 0x90
 800493a:	f7fc fe0f 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0600);
 800493e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004942:	2092      	movs	r0, #146	; 0x92
 8004944:	f7fc fe0a 	bl	800155c <LCD_WriteReg>
        //开启显示设置
        LCD_WriteReg(0x0007,0x0133);
 8004948:	f240 1133 	movw	r1, #307	; 0x133
 800494c:	2007      	movs	r0, #7
 800494e:	f7fc fe05 	bl	800155c <LCD_WriteReg>
 8004952:	f000 bf86 	b.w	8005862 <LCD_Init+0x3752>
 8004956:	bf00      	nop
 8004958:	20000140 	.word	0x20000140
	}else if(lcddev.id==0x9320)//测试OK.
 800495c:	4bce      	ldr	r3, [pc, #824]	; (8004c98 <LCD_Init+0x2b88>)
 800495e:	889b      	ldrh	r3, [r3, #4]
 8004960:	f249 3220 	movw	r2, #37664	; 0x9320
 8004964:	4293      	cmp	r3, r2
 8004966:	f040 80ad 	bne.w	8004ac4 <LCD_Init+0x29b4>
	{
		LCD_WriteReg(0x00,0x0000);
 800496a:	2100      	movs	r1, #0
 800496c:	2000      	movs	r0, #0
 800496e:	f7fc fdf5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x01,0x0100);	//Driver Output Contral.
 8004972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004976:	2001      	movs	r0, #1
 8004978:	f7fc fdf0 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);	//LCD Driver Waveform Contral.
 800497c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004980:	2002      	movs	r0, #2
 8004982:	f7fc fdeb 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode Set.
 8004986:	f241 0130 	movw	r1, #4144	; 0x1030
 800498a:	2003      	movs	r0, #3
 800498c:	f7fc fde6 	bl	800155c <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04,0x0000);	//Scalling Contral.
 8004990:	2100      	movs	r1, #0
 8004992:	2004      	movs	r0, #4
 8004994:	f7fc fde2 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0202);	//Display Contral 2.(0x0207)
 8004998:	f240 2102 	movw	r1, #514	; 0x202
 800499c:	2008      	movs	r0, #8
 800499e:	f7fc fddd 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000);	//Display Contral 3.(0x0000)
 80049a2:	2100      	movs	r1, #0
 80049a4:	2009      	movs	r0, #9
 80049a6:	f7fc fdd9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0a,0x0000);	//Frame Cycle Contal.(0x0000)
 80049aa:	2100      	movs	r1, #0
 80049ac:	200a      	movs	r0, #10
 80049ae:	f7fc fdd5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0c,(1<<0));	//Extern Display Interface Contral 1.(0x0000)
 80049b2:	2101      	movs	r1, #1
 80049b4:	200c      	movs	r0, #12
 80049b6:	f7fc fdd1 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0d,0x0000);	//Frame Maker Position.
 80049ba:	2100      	movs	r1, #0
 80049bc:	200d      	movs	r0, #13
 80049be:	f7fc fdcd 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0f,0x0000);	//Extern Display Interface Contral 2.
 80049c2:	2100      	movs	r1, #0
 80049c4:	200f      	movs	r0, #15
 80049c6:	f7fc fdc9 	bl	800155c <LCD_WriteReg>
		HAL_Delay(50);
 80049ca:	2032      	movs	r0, #50	; 0x32
 80049cc:	f002 ff0a 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0x07,0x0101);	//Display Contral.
 80049d0:	f240 1101 	movw	r1, #257	; 0x101
 80049d4:	2007      	movs	r0, #7
 80049d6:	f7fc fdc1 	bl	800155c <LCD_WriteReg>
		HAL_Delay(50);
 80049da:	2032      	movs	r0, #50	; 0x32
 80049dc:	f002 ff02 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	//Power Control 1.(0x16b0)
 80049e0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80049e4:	2010      	movs	r0, #16
 80049e6:	f7fc fdb9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0007);								//Power Control 2.(0x0001)
 80049ea:	2107      	movs	r1, #7
 80049ec:	2011      	movs	r0, #17
 80049ee:	f7fc fdb5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x12,(1<<8)|(1<<4)|(0<<0));				//Power Control 3.(0x0138)
 80049f2:	f44f 7188 	mov.w	r1, #272	; 0x110
 80049f6:	2012      	movs	r0, #18
 80049f8:	f7fc fdb0 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0b00);								//Power Control 4.
 80049fc:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8004a00:	2013      	movs	r0, #19
 8004a02:	f7fc fdab 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0000);								//Power Control 7.
 8004a06:	2100      	movs	r1, #0
 8004a08:	2029      	movs	r0, #41	; 0x29
 8004a0a:	f7fc fda7 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0x2b,(1<<14)|(1<<4));
 8004a0e:	f244 0110 	movw	r1, #16400	; 0x4010
 8004a12:	202b      	movs	r0, #43	; 0x2b
 8004a14:	f7fc fda2 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x50,0);	//Set X Star
 8004a18:	2100      	movs	r1, #0
 8004a1a:	2050      	movs	r0, #80	; 0x50
 8004a1c:	f7fc fd9e 	bl	800155c <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51,239);	//Set Y Star
 8004a20:	21ef      	movs	r1, #239	; 0xef
 8004a22:	2051      	movs	r0, #81	; 0x51
 8004a24:	f7fc fd9a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x52,0);	//Set Y End.t.
 8004a28:	2100      	movs	r1, #0
 8004a2a:	2052      	movs	r0, #82	; 0x52
 8004a2c:	f7fc fd96 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x53,319);	//
 8004a30:	f240 113f 	movw	r1, #319	; 0x13f
 8004a34:	2053      	movs	r0, #83	; 0x53
 8004a36:	f7fc fd91 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0x60,0x2700);	//Driver Output Control.
 8004a3a:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004a3e:	2060      	movs	r0, #96	; 0x60
 8004a40:	f7fc fd8c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x61,0x0001);	//Driver Output Control.
 8004a44:	2101      	movs	r1, #1
 8004a46:	2061      	movs	r0, #97	; 0x61
 8004a48:	f7fc fd88 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x6a,0x0000);	//Vertical Srcoll Control.
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	206a      	movs	r0, #106	; 0x6a
 8004a50:	f7fc fd84 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0x80,0x0000);	//Display Position? Partial Display 1.
 8004a54:	2100      	movs	r1, #0
 8004a56:	2080      	movs	r0, #128	; 0x80
 8004a58:	f7fc fd80 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000);	//RAM Address Start? Partial Display 1.
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	2081      	movs	r0, #129	; 0x81
 8004a60:	f7fc fd7c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000);	//RAM Address End-Partial Display 1.
 8004a64:	2100      	movs	r1, #0
 8004a66:	2082      	movs	r0, #130	; 0x82
 8004a68:	f7fc fd78 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000);	//Displsy Position? Partial Display 2.
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	2083      	movs	r0, #131	; 0x83
 8004a70:	f7fc fd74 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000);	//RAM Address Start? Partial Display 2.
 8004a74:	2100      	movs	r1, #0
 8004a76:	2084      	movs	r0, #132	; 0x84
 8004a78:	f7fc fd70 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000);	//RAM Address End? Partial Display 2.
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	2085      	movs	r0, #133	; 0x85
 8004a80:	f7fc fd6c 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0x90,(0<<7)|(16<<0));	//Frame Cycle Contral.(0x0013)
 8004a84:	2110      	movs	r1, #16
 8004a86:	2090      	movs	r0, #144	; 0x90
 8004a88:	f7fc fd68 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);	//Panel Interface Contral 2.(0x0000)
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	2092      	movs	r0, #146	; 0x92
 8004a90:	f7fc fd64 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0001);	//Panel Interface Contral 3.
 8004a94:	2101      	movs	r1, #1
 8004a96:	2093      	movs	r0, #147	; 0x93
 8004a98:	f7fc fd60 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);	//Frame Cycle Contral.(0x0110)
 8004a9c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004aa0:	2095      	movs	r0, #149	; 0x95
 8004aa2:	f7fc fd5b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x97,(0<<8));	//
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	2097      	movs	r0, #151	; 0x97
 8004aaa:	f7fc fd57 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x98,0x0000);	//Frame Cycle Contral.
 8004aae:	2100      	movs	r1, #0
 8004ab0:	2098      	movs	r0, #152	; 0x98
 8004ab2:	f7fc fd53 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);	//(0x0173)
 8004ab6:	f240 1173 	movw	r1, #371	; 0x173
 8004aba:	2007      	movs	r0, #7
 8004abc:	f7fc fd4e 	bl	800155c <LCD_WriteReg>
 8004ac0:	f000 becf 	b.w	8005862 <LCD_Init+0x3752>
	}else if(lcddev.id==0X9331)//OK |/|/|
 8004ac4:	4b74      	ldr	r3, [pc, #464]	; (8004c98 <LCD_Init+0x2b88>)
 8004ac6:	889b      	ldrh	r3, [r3, #4]
 8004ac8:	f249 3231 	movw	r2, #37681	; 0x9331
 8004acc:	4293      	cmp	r3, r2
 8004ace:	f040 80e5 	bne.w	8004c9c <LCD_Init+0x2b8c>
	{
		LCD_WriteReg(0x00E7, 0x1014);
 8004ad2:	f241 0114 	movw	r1, #4116	; 0x1014
 8004ad6:	20e7      	movs	r0, #231	; 0xe7
 8004ad8:	f7fc fd40 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8004adc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	f7fc fd3b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8004ae6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004aea:	2002      	movs	r0, #2
 8004aec:	f7fc fd36 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(1<<3));//65K
 8004af0:	f241 0138 	movw	r1, #4152	; 0x1038
 8004af4:	2003      	movs	r0, #3
 8004af6:	f7fc fd31 	bl	800155c <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8004afa:	f240 2102 	movw	r1, #514	; 0x202
 8004afe:	2008      	movs	r0, #8
 8004b00:	f7fc fd2c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8004b04:	2100      	movs	r1, #0
 8004b06:	2009      	movs	r0, #9
 8004b08:	f7fc fd28 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8004b0c:	2100      	movs	r1, #0
 8004b0e:	200a      	movs	r0, #10
 8004b10:	f7fc fd24 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8004b14:	2100      	movs	r1, #0
 8004b16:	200c      	movs	r0, #12
 8004b18:	f7fc fd20 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8004b1c:	2100      	movs	r1, #0
 8004b1e:	200d      	movs	r0, #13
 8004b20:	f7fc fd1c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8004b24:	2100      	movs	r1, #0
 8004b26:	200f      	movs	r0, #15
 8004b28:	f7fc fd18 	bl	800155c <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	2010      	movs	r0, #16
 8004b30:	f7fc fd14 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8004b34:	2107      	movs	r1, #7
 8004b36:	2011      	movs	r0, #17
 8004b38:	f7fc fd10 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	2012      	movs	r0, #18
 8004b40:	f7fc fd0c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8004b44:	2100      	movs	r1, #0
 8004b46:	2013      	movs	r0, #19
 8004b48:	f7fc fd08 	bl	800155c <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8004b4c:	20c8      	movs	r0, #200	; 0xc8
 8004b4e:	f002 fe49 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8004b52:	f241 6190 	movw	r1, #5776	; 0x1690
 8004b56:	2010      	movs	r0, #16
 8004b58:	f7fc fd00 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8004b5c:	f240 2127 	movw	r1, #551	; 0x227
 8004b60:	2011      	movs	r0, #17
 8004b62:	f7fc fcfb 	bl	800155c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004b66:	2032      	movs	r0, #50	; 0x32
 8004b68:	f002 fe3c 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8004b6c:	210c      	movs	r1, #12
 8004b6e:	2012      	movs	r0, #18
 8004b70:	f7fc fcf4 	bl	800155c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004b74:	2032      	movs	r0, #50	; 0x32
 8004b76:	f002 fe35 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8004b7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004b7e:	2013      	movs	r0, #19
 8004b80:	f7fc fcec 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8004b84:	2111      	movs	r1, #17
 8004b86:	2029      	movs	r0, #41	; 0x29
 8004b88:	f7fc fce8 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8004b8c:	210b      	movs	r1, #11
 8004b8e:	202b      	movs	r0, #43	; 0x2b
 8004b90:	f7fc fce4 	bl	800155c <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8004b94:	2032      	movs	r0, #50	; 0x32
 8004b96:	f002 fe25 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	2020      	movs	r0, #32
 8004b9e:	f7fc fcdd 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8004ba2:	f240 113f 	movw	r1, #319	; 0x13f
 8004ba6:	2021      	movs	r0, #33	; 0x21
 8004ba8:	f7fc fcd8 	bl	800155c <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8004bac:	2100      	movs	r1, #0
 8004bae:	2030      	movs	r0, #48	; 0x30
 8004bb0:	f7fc fcd4 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8004bb4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004bb8:	2031      	movs	r0, #49	; 0x31
 8004bba:	f7fc fccf 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	2032      	movs	r0, #50	; 0x32
 8004bc2:	f7fc fccb 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8004bc6:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004bca:	2035      	movs	r0, #53	; 0x35
 8004bcc:	f7fc fcc6 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8004bd0:	f241 610a 	movw	r1, #5642	; 0x160a
 8004bd4:	2036      	movs	r0, #54	; 0x36
 8004bd6:	f7fc fcc1 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8004bda:	f240 7107 	movw	r1, #1799	; 0x707
 8004bde:	2037      	movs	r0, #55	; 0x37
 8004be0:	f7fc fcbc 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8004be4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004be8:	2038      	movs	r0, #56	; 0x38
 8004bea:	f7fc fcb7 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8004bee:	f240 7107 	movw	r1, #1799	; 0x707
 8004bf2:	2039      	movs	r0, #57	; 0x39
 8004bf4:	f7fc fcb2 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8004bf8:	f240 4102 	movw	r1, #1026	; 0x402
 8004bfc:	203c      	movs	r0, #60	; 0x3c
 8004bfe:	f7fc fcad 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8004c02:	f640 410f 	movw	r1, #3087	; 0xc0f
 8004c06:	203d      	movs	r0, #61	; 0x3d
 8004c08:	f7fc fca8 	bl	800155c <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	2050      	movs	r0, #80	; 0x50
 8004c10:	f7fc fca4 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8004c14:	21ef      	movs	r1, #239	; 0xef
 8004c16:	2051      	movs	r0, #81	; 0x51
 8004c18:	f7fc fca0 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8004c1c:	2100      	movs	r1, #0
 8004c1e:	2052      	movs	r0, #82	; 0x52
 8004c20:	f7fc fc9c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8004c24:	f240 113f 	movw	r1, #319	; 0x13f
 8004c28:	2053      	movs	r0, #83	; 0x53
 8004c2a:	f7fc fc97 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8004c2e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004c32:	2060      	movs	r0, #96	; 0x60
 8004c34:	f7fc fc92 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV
 8004c38:	2101      	movs	r1, #1
 8004c3a:	2061      	movs	r0, #97	; 0x61
 8004c3c:	f7fc fc8e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8004c40:	2100      	movs	r1, #0
 8004c42:	206a      	movs	r0, #106	; 0x6a
 8004c44:	f7fc fc8a 	bl	800155c <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8004c48:	2100      	movs	r1, #0
 8004c4a:	2080      	movs	r0, #128	; 0x80
 8004c4c:	f7fc fc86 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8004c50:	2100      	movs	r1, #0
 8004c52:	2081      	movs	r0, #129	; 0x81
 8004c54:	f7fc fc82 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8004c58:	2100      	movs	r1, #0
 8004c5a:	2082      	movs	r0, #130	; 0x82
 8004c5c:	f7fc fc7e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8004c60:	2100      	movs	r1, #0
 8004c62:	2083      	movs	r0, #131	; 0x83
 8004c64:	f7fc fc7a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8004c68:	2100      	movs	r1, #0
 8004c6a:	2084      	movs	r0, #132	; 0x84
 8004c6c:	f7fc fc76 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8004c70:	2100      	movs	r1, #0
 8004c72:	2085      	movs	r0, #133	; 0x85
 8004c74:	f7fc fc72 	bl	800155c <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8004c78:	2110      	movs	r1, #16
 8004c7a:	2090      	movs	r0, #144	; 0x90
 8004c7c:	f7fc fc6e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8004c80:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c84:	2092      	movs	r0, #146	; 0x92
 8004c86:	f7fc fc69 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8004c8a:	f240 1133 	movw	r1, #307	; 0x133
 8004c8e:	2007      	movs	r0, #7
 8004c90:	f7fc fc64 	bl	800155c <LCD_WriteReg>
 8004c94:	f000 bde5 	b.w	8005862 <LCD_Init+0x3752>
 8004c98:	20000140 	.word	0x20000140
	}else if(lcddev.id==0x5408)
 8004c9c:	4be2      	ldr	r3, [pc, #904]	; (8005028 <LCD_Init+0x2f18>)
 8004c9e:	889b      	ldrh	r3, [r3, #4]
 8004ca0:	f245 4208 	movw	r2, #21512	; 0x5408
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	f040 80a3 	bne.w	8004df0 <LCD_Init+0x2ce0>
	{
		LCD_WriteReg(0x01,0x0100);
 8004caa:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cae:	2001      	movs	r0, #1
 8004cb0:	f7fc fc54 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);//LCD Driving Waveform Contral
 8004cb4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004cb8:	2002      	movs	r0, #2
 8004cba:	f7fc fc4f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode设置
 8004cbe:	f241 0130 	movw	r1, #4144	; 0x1030
 8004cc2:	2003      	movs	r0, #3
 8004cc4:	f7fc fc4a 	bl	800155c <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04,0x0000); //Scalling Control register
 8004cc8:	2100      	movs	r1, #0
 8004cca:	2004      	movs	r0, #4
 8004ccc:	f7fc fc46 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0207); //Display Control 2
 8004cd0:	f240 2107 	movw	r1, #519	; 0x207
 8004cd4:	2008      	movs	r0, #8
 8004cd6:	f7fc fc41 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000); //Display Control 3
 8004cda:	2100      	movs	r1, #0
 8004cdc:	2009      	movs	r0, #9
 8004cde:	f7fc fc3d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0A,0x0000); //Frame Cycle Control
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	200a      	movs	r0, #10
 8004ce6:	f7fc fc39 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0C,0x0000); //External Display Interface Control 1
 8004cea:	2100      	movs	r1, #0
 8004cec:	200c      	movs	r0, #12
 8004cee:	f7fc fc35 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0D,0x0000); //Frame Maker Position
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	200d      	movs	r0, #13
 8004cf6:	f7fc fc31 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0F,0x0000); //External Display Interface Control 2
 8004cfa:	2100      	movs	r1, #0
 8004cfc:	200f      	movs	r0, #15
 8004cfe:	f7fc fc2d 	bl	800155c <LCD_WriteReg>
 		HAL_Delay(20);
 8004d02:	2014      	movs	r0, #20
 8004d04:	f002 fd6e 	bl	80077e4 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10,0x16B0); //0x14B0 //Power Control 1
 8004d08:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8004d0c:	2010      	movs	r0, #16
 8004d0e:	f7fc fc25 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0001); //0x0007 //Power Control 2
 8004d12:	2101      	movs	r1, #1
 8004d14:	2011      	movs	r0, #17
 8004d16:	f7fc fc21 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x17,0x0001); //0x0000 //Power Control 3
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	2017      	movs	r0, #23
 8004d1e:	f7fc fc1d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x12,0x0138); //0x013B //Power Control 4
 8004d22:	f44f 719c 	mov.w	r1, #312	; 0x138
 8004d26:	2012      	movs	r0, #18
 8004d28:	f7fc fc18 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0800); //0x0800 //Power Control 5
 8004d2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004d30:	2013      	movs	r0, #19
 8004d32:	f7fc fc13 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0009); //NVM read data 2
 8004d36:	2109      	movs	r1, #9
 8004d38:	2029      	movs	r0, #41	; 0x29
 8004d3a:	f7fc fc0f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x2a,0x0009); //NVM read data 3
 8004d3e:	2109      	movs	r1, #9
 8004d40:	202a      	movs	r0, #42	; 0x2a
 8004d42:	f7fc fc0b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0xa4,0x0000);
 8004d46:	2100      	movs	r1, #0
 8004d48:	20a4      	movs	r0, #164	; 0xa4
 8004d4a:	f7fc fc07 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x50,0x0000); //设置操作窗口的X轴开始列
 8004d4e:	2100      	movs	r1, #0
 8004d50:	2050      	movs	r0, #80	; 0x50
 8004d52:	f7fc fc03 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x51,0x00EF); //设置操作窗口的X轴结束列
 8004d56:	21ef      	movs	r1, #239	; 0xef
 8004d58:	2051      	movs	r0, #81	; 0x51
 8004d5a:	f7fc fbff 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x52,0x0000); //设置操作窗口的Y轴开始行
 8004d5e:	2100      	movs	r1, #0
 8004d60:	2052      	movs	r0, #82	; 0x52
 8004d62:	f7fc fbfb 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x53,0x013F); //设置操作窗口的Y轴结束行
 8004d66:	f240 113f 	movw	r1, #319	; 0x13f
 8004d6a:	2053      	movs	r0, #83	; 0x53
 8004d6c:	f7fc fbf6 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x60,0x2700); //Driver Output Control
 8004d70:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004d74:	2060      	movs	r0, #96	; 0x60
 8004d76:	f7fc fbf1 	bl	800155c <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61,0x0001); //Driver Output Control
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	2061      	movs	r0, #97	; 0x61
 8004d7e:	f7fc fbed 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x6A,0x0000); //Vertical Scroll Control
 8004d82:	2100      	movs	r1, #0
 8004d84:	206a      	movs	r0, #106	; 0x6a
 8004d86:	f7fc fbe9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x80,0x0000); //Display Position – Partial Display 1
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	2080      	movs	r0, #128	; 0x80
 8004d8e:	f7fc fbe5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000); //RAM Address Start – Partial Display 1
 8004d92:	2100      	movs	r1, #0
 8004d94:	2081      	movs	r0, #129	; 0x81
 8004d96:	f7fc fbe1 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000); //RAM address End - Partial Display 1
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	2082      	movs	r0, #130	; 0x82
 8004d9e:	f7fc fbdd 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000); //Display Position – Partial Display 2
 8004da2:	2100      	movs	r1, #0
 8004da4:	2083      	movs	r0, #131	; 0x83
 8004da6:	f7fc fbd9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000); //RAM Address Start – Partial Display 2
 8004daa:	2100      	movs	r1, #0
 8004dac:	2084      	movs	r0, #132	; 0x84
 8004dae:	f7fc fbd5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000); //RAM address End – Partail Display2
 8004db2:	2100      	movs	r1, #0
 8004db4:	2085      	movs	r0, #133	; 0x85
 8004db6:	f7fc fbd1 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x90,0x0013); //Frame Cycle Control
 8004dba:	2113      	movs	r1, #19
 8004dbc:	2090      	movs	r0, #144	; 0x90
 8004dbe:	f7fc fbcd 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);  //Panel Interface Control 2
 8004dc2:	2100      	movs	r1, #0
 8004dc4:	2092      	movs	r0, #146	; 0x92
 8004dc6:	f7fc fbc9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0003); //Panel Interface control 3
 8004dca:	2103      	movs	r1, #3
 8004dcc:	2093      	movs	r0, #147	; 0x93
 8004dce:	f7fc fbc5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);  //Frame Cycle Control
 8004dd2:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004dd6:	2095      	movs	r0, #149	; 0x95
 8004dd8:	f7fc fbc0 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);
 8004ddc:	f240 1173 	movw	r1, #371	; 0x173
 8004de0:	2007      	movs	r0, #7
 8004de2:	f7fc fbbb 	bl	800155c <LCD_WriteReg>
		HAL_Delay(50);
 8004de6:	2032      	movs	r0, #50	; 0x32
 8004de8:	f002 fcfc 	bl	80077e4 <HAL_Delay>
 8004dec:	f000 bd39 	b.w	8005862 <LCD_Init+0x3752>
	}
	else if(lcddev.id==0x1505)//OK
 8004df0:	4b8d      	ldr	r3, [pc, #564]	; (8005028 <LCD_Init+0x2f18>)
 8004df2:	889b      	ldrh	r3, [r3, #4]
 8004df4:	f241 5205 	movw	r2, #5381	; 0x1505
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	f040 8117 	bne.w	800502c <LCD_Init+0x2f1c>
	{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
        LCD_WriteReg(0x0007,0x0000);
 8004dfe:	2100      	movs	r1, #0
 8004e00:	2007      	movs	r0, #7
 8004e02:	f7fc fbab 	bl	800155c <LCD_WriteReg>
        HAL_Delay(50);
 8004e06:	2032      	movs	r0, #50	; 0x32
 8004e08:	f002 fcec 	bl	80077e4 <HAL_Delay>
        LCD_WriteReg(0x0012,0x011C);//0x011A   why need to set several times?
 8004e0c:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004e10:	2012      	movs	r0, #18
 8004e12:	f7fc fba3 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x00A4,0x0001);//NVM
 8004e16:	2101      	movs	r1, #1
 8004e18:	20a4      	movs	r0, #164	; 0xa4
 8004e1a:	f7fc fb9f 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x000F);
 8004e1e:	210f      	movs	r1, #15
 8004e20:	2008      	movs	r0, #8
 8004e22:	f7fc fb9b 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x000A,0x0008);
 8004e26:	2108      	movs	r1, #8
 8004e28:	200a      	movs	r0, #10
 8004e2a:	f7fc fb97 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x000D,0x0008);
 8004e2e:	2108      	movs	r1, #8
 8004e30:	200d      	movs	r0, #13
 8004e32:	f7fc fb93 	bl	800155c <LCD_WriteReg>
  		//伽马校正
        LCD_WriteReg(0x0030,0x0707);
 8004e36:	f240 7107 	movw	r1, #1799	; 0x707
 8004e3a:	2030      	movs	r0, #48	; 0x30
 8004e3c:	f7fc fb8e 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0007); //0x0707
 8004e40:	2107      	movs	r1, #7
 8004e42:	2031      	movs	r0, #49	; 0x31
 8004e44:	f7fc fb8a 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0603);
 8004e48:	f240 6103 	movw	r1, #1539	; 0x603
 8004e4c:	2032      	movs	r0, #50	; 0x32
 8004e4e:	f7fc fb85 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0033,0x0700);
 8004e52:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004e56:	2033      	movs	r0, #51	; 0x33
 8004e58:	f7fc fb80 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0034,0x0202);
 8004e5c:	f240 2102 	movw	r1, #514	; 0x202
 8004e60:	2034      	movs	r0, #52	; 0x34
 8004e62:	f7fc fb7b 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0002); //?0x0606
 8004e66:	2102      	movs	r1, #2
 8004e68:	2035      	movs	r0, #53	; 0x35
 8004e6a:	f7fc fb77 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x1F0F);
 8004e6e:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8004e72:	2036      	movs	r0, #54	; 0x36
 8004e74:	f7fc fb72 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0707); //0x0f0f  0x0105
 8004e78:	f240 7107 	movw	r1, #1799	; 0x707
 8004e7c:	2037      	movs	r0, #55	; 0x37
 8004e7e:	f7fc fb6d 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0000);
 8004e82:	2100      	movs	r1, #0
 8004e84:	2038      	movs	r0, #56	; 0x38
 8004e86:	f7fc fb69 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0000);
 8004e8a:	2100      	movs	r1, #0
 8004e8c:	2039      	movs	r0, #57	; 0x39
 8004e8e:	f7fc fb65 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x003A,0x0707);
 8004e92:	f240 7107 	movw	r1, #1799	; 0x707
 8004e96:	203a      	movs	r0, #58	; 0x3a
 8004e98:	f7fc fb60 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x003B,0x0000); //0x0303
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	203b      	movs	r0, #59	; 0x3b
 8004ea0:	f7fc fb5c 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x003C,0x0007); //?0x0707
 8004ea4:	2107      	movs	r1, #7
 8004ea6:	203c      	movs	r0, #60	; 0x3c
 8004ea8:	f7fc fb58 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x003D,0x0000); //0x1313//0x1f08
 8004eac:	2100      	movs	r1, #0
 8004eae:	203d      	movs	r0, #61	; 0x3d
 8004eb0:	f7fc fb54 	bl	800155c <LCD_WriteReg>
        HAL_Delay(50);
 8004eb4:	2032      	movs	r0, #50	; 0x32
 8004eb6:	f002 fc95 	bl	80077e4 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0001);
 8004eba:	2101      	movs	r1, #1
 8004ebc:	2007      	movs	r0, #7
 8004ebe:	f7fc fb4d 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0017,0x0001);//开启电源
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	2017      	movs	r0, #23
 8004ec6:	f7fc fb49 	bl	800155c <LCD_WriteReg>
        HAL_Delay(50);
 8004eca:	2032      	movs	r0, #50	; 0x32
 8004ecc:	f002 fc8a 	bl	80077e4 <HAL_Delay>
  		//电源配置
        LCD_WriteReg(0x0010,0x17A0);
 8004ed0:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8004ed4:	2010      	movs	r0, #16
 8004ed6:	f7fc fb41 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0217);//reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8004eda:	f240 2117 	movw	r1, #535	; 0x217
 8004ede:	2011      	movs	r0, #17
 8004ee0:	f7fc fb3c 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x011E);//0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8004ee4:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8004ee8:	2012      	movs	r0, #18
 8004eea:	f7fc fb37 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0F00);//VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8004eee:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8004ef2:	2013      	movs	r0, #19
 8004ef4:	f7fc fb32 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x002A,0x0000);
 8004ef8:	2100      	movs	r1, #0
 8004efa:	202a      	movs	r0, #42	; 0x2a
 8004efc:	f7fc fb2e 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x000A);//0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8004f00:	210a      	movs	r1, #10
 8004f02:	2029      	movs	r0, #41	; 0x29
 8004f04:	f7fc fb2a 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x013E);// 0x013C  power supply on
 8004f08:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004f0c:	2012      	movs	r0, #18
 8004f0e:	f7fc fb25 	bl	800155c <LCD_WriteReg>
        //Coordinates Control//
        LCD_WriteReg(0x0050,0x0000);//0x0e00
 8004f12:	2100      	movs	r1, #0
 8004f14:	2050      	movs	r0, #80	; 0x50
 8004f16:	f7fc fb21 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00EF);
 8004f1a:	21ef      	movs	r1, #239	; 0xef
 8004f1c:	2051      	movs	r0, #81	; 0x51
 8004f1e:	f7fc fb1d 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000);
 8004f22:	2100      	movs	r1, #0
 8004f24:	2052      	movs	r0, #82	; 0x52
 8004f26:	f7fc fb19 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013F);
 8004f2a:	f240 113f 	movw	r1, #319	; 0x13f
 8004f2e:	2053      	movs	r0, #83	; 0x53
 8004f30:	f7fc fb14 	bl	800155c <LCD_WriteReg>
    	//Pannel Image Control//
        LCD_WriteReg(0x0060,0x2700);
 8004f34:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8004f38:	2060      	movs	r0, #96	; 0x60
 8004f3a:	f7fc fb0f 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 8004f3e:	2101      	movs	r1, #1
 8004f40:	2061      	movs	r0, #97	; 0x61
 8004f42:	f7fc fb0b 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x006A,0x0000);
 8004f46:	2100      	movs	r1, #0
 8004f48:	206a      	movs	r0, #106	; 0x6a
 8004f4a:	f7fc fb07 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8004f4e:	2100      	movs	r1, #0
 8004f50:	2080      	movs	r0, #128	; 0x80
 8004f52:	f7fc fb03 	bl	800155c <LCD_WriteReg>
    	//Partial Image Control//
        LCD_WriteReg(0x0081,0x0000);
 8004f56:	2100      	movs	r1, #0
 8004f58:	2081      	movs	r0, #129	; 0x81
 8004f5a:	f7fc faff 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8004f5e:	2100      	movs	r1, #0
 8004f60:	2082      	movs	r0, #130	; 0x82
 8004f62:	f7fc fafb 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 8004f66:	2100      	movs	r1, #0
 8004f68:	2083      	movs	r0, #131	; 0x83
 8004f6a:	f7fc faf7 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8004f6e:	2100      	movs	r1, #0
 8004f70:	2084      	movs	r0, #132	; 0x84
 8004f72:	f7fc faf3 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 8004f76:	2100      	movs	r1, #0
 8004f78:	2085      	movs	r0, #133	; 0x85
 8004f7a:	f7fc faef 	bl	800155c <LCD_WriteReg>
  		//Panel Interface Control//
        LCD_WriteReg(0x0090,0x0013);//0x0010 frenqucy
 8004f7e:	2113      	movs	r1, #19
 8004f80:	2090      	movs	r0, #144	; 0x90
 8004f82:	f7fc faeb 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0300);
 8004f86:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004f8a:	2092      	movs	r0, #146	; 0x92
 8004f8c:	f7fc fae6 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0093,0x0005);
 8004f90:	2105      	movs	r1, #5
 8004f92:	2093      	movs	r0, #147	; 0x93
 8004f94:	f7fc fae2 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0095,0x0000);
 8004f98:	2100      	movs	r1, #0
 8004f9a:	2095      	movs	r0, #149	; 0x95
 8004f9c:	f7fc fade 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0097,0x0000);
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	2097      	movs	r0, #151	; 0x97
 8004fa4:	f7fc fada 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0098,0x0000);
 8004fa8:	2100      	movs	r1, #0
 8004faa:	2098      	movs	r0, #152	; 0x98
 8004fac:	f7fc fad6 	bl	800155c <LCD_WriteReg>

        LCD_WriteReg(0x0001,0x0100);
 8004fb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	f7fc fad1 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);
 8004fba:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004fbe:	2002      	movs	r0, #2
 8004fc0:	f7fc facc 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 8004fc4:	f241 0138 	movw	r1, #4152	; 0x1038
 8004fc8:	2003      	movs	r0, #3
 8004fca:	f7fc fac7 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 8004fce:	2100      	movs	r1, #0
 8004fd0:	2004      	movs	r0, #4
 8004fd2:	f7fc fac3 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x000C,0x0000);
 8004fd6:	2100      	movs	r1, #0
 8004fd8:	200c      	movs	r0, #12
 8004fda:	f7fc fabf 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x000F,0x0000);
 8004fde:	2100      	movs	r1, #0
 8004fe0:	200f      	movs	r0, #15
 8004fe2:	f7fc fabb 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0020,0x0000);
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	2020      	movs	r0, #32
 8004fea:	f7fc fab7 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 8004fee:	2100      	movs	r1, #0
 8004ff0:	2021      	movs	r0, #33	; 0x21
 8004ff2:	f7fc fab3 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0007,0x0021);
 8004ff6:	2121      	movs	r1, #33	; 0x21
 8004ff8:	2007      	movs	r0, #7
 8004ffa:	f7fc faaf 	bl	800155c <LCD_WriteReg>
        HAL_Delay(20);
 8004ffe:	2014      	movs	r0, #20
 8005000:	f002 fbf0 	bl	80077e4 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0061);
 8005004:	2161      	movs	r1, #97	; 0x61
 8005006:	2007      	movs	r0, #7
 8005008:	f7fc faa8 	bl	800155c <LCD_WriteReg>
        HAL_Delay(20);
 800500c:	2014      	movs	r0, #20
 800500e:	f002 fbe9 	bl	80077e4 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0173);
 8005012:	f240 1173 	movw	r1, #371	; 0x173
 8005016:	2007      	movs	r0, #7
 8005018:	f7fc faa0 	bl	800155c <LCD_WriteReg>
        HAL_Delay(20);
 800501c:	2014      	movs	r0, #20
 800501e:	f002 fbe1 	bl	80077e4 <HAL_Delay>
 8005022:	f000 bc1e 	b.w	8005862 <LCD_Init+0x3752>
 8005026:	bf00      	nop
 8005028:	20000140 	.word	0x20000140
	}else if(lcddev.id==0xB505)
 800502c:	4bef      	ldr	r3, [pc, #956]	; (80053ec <LCD_Init+0x32dc>)
 800502e:	889b      	ldrh	r3, [r3, #4]
 8005030:	f24b 5205 	movw	r2, #46341	; 0xb505
 8005034:	4293      	cmp	r3, r2
 8005036:	f040 8102 	bne.w	800523e <LCD_Init+0x312e>
	{
		LCD_WriteReg(0x0000,0x0000);
 800503a:	2100      	movs	r1, #0
 800503c:	2000      	movs	r0, #0
 800503e:	f7fc fa8d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005042:	2100      	movs	r1, #0
 8005044:	2000      	movs	r0, #0
 8005046:	f7fc fa89 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800504a:	2100      	movs	r1, #0
 800504c:	2000      	movs	r0, #0
 800504e:	f7fc fa85 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005052:	2100      	movs	r1, #0
 8005054:	2000      	movs	r0, #0
 8005056:	f7fc fa81 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0x00a4,0x0001);
 800505a:	2101      	movs	r1, #1
 800505c:	20a4      	movs	r0, #164	; 0xa4
 800505e:	f7fc fa7d 	bl	800155c <LCD_WriteReg>
		HAL_Delay(20);
 8005062:	2014      	movs	r0, #20
 8005064:	f002 fbbe 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 8005068:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800506c:	2060      	movs	r0, #96	; 0x60
 800506e:	f7fc fa75 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8005072:	f240 2102 	movw	r1, #514	; 0x202
 8005076:	2008      	movs	r0, #8
 8005078:	f7fc fa70 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0214);
 800507c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8005080:	2030      	movs	r0, #48	; 0x30
 8005082:	f7fc fa6b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x3715);
 8005086:	f243 7115 	movw	r1, #14101	; 0x3715
 800508a:	2031      	movs	r0, #49	; 0x31
 800508c:	f7fc fa66 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0604);
 8005090:	f240 6104 	movw	r1, #1540	; 0x604
 8005094:	2032      	movs	r0, #50	; 0x32
 8005096:	f7fc fa61 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0e16);
 800509a:	f640 6116 	movw	r1, #3606	; 0xe16
 800509e:	2033      	movs	r0, #51	; 0x33
 80050a0:	f7fc fa5c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x2211);
 80050a4:	f242 2111 	movw	r1, #8721	; 0x2211
 80050a8:	2034      	movs	r0, #52	; 0x34
 80050aa:	f7fc fa57 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x1500);
 80050ae:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 80050b2:	2035      	movs	r0, #53	; 0x35
 80050b4:	f7fc fa52 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x8507);
 80050b8:	f248 5107 	movw	r1, #34055	; 0x8507
 80050bc:	2036      	movs	r0, #54	; 0x36
 80050be:	f7fc fa4d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x1407);
 80050c2:	f241 4107 	movw	r1, #5127	; 0x1407
 80050c6:	2037      	movs	r0, #55	; 0x37
 80050c8:	f7fc fa48 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x1403);
 80050cc:	f241 4103 	movw	r1, #5123	; 0x1403
 80050d0:	2038      	movs	r0, #56	; 0x38
 80050d2:	f7fc fa43 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0020);
 80050d6:	2120      	movs	r1, #32
 80050d8:	2039      	movs	r0, #57	; 0x39
 80050da:	f7fc fa3f 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0x0090,0x001a);
 80050de:	211a      	movs	r1, #26
 80050e0:	2090      	movs	r0, #144	; 0x90
 80050e2:	f7fc fa3b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0010,0x0000);
 80050e6:	2100      	movs	r1, #0
 80050e8:	2010      	movs	r0, #16
 80050ea:	f7fc fa37 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 80050ee:	2107      	movs	r1, #7
 80050f0:	2011      	movs	r0, #17
 80050f2:	f7fc fa33 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 80050f6:	2100      	movs	r1, #0
 80050f8:	2012      	movs	r0, #18
 80050fa:	f7fc fa2f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 80050fe:	2100      	movs	r1, #0
 8005100:	2013      	movs	r0, #19
 8005102:	f7fc fa2b 	bl	800155c <LCD_WriteReg>
		HAL_Delay(20);
 8005106:	2014      	movs	r0, #20
 8005108:	f002 fb6c 	bl	80077e4 <HAL_Delay>

		LCD_WriteReg(0x0010,0x0730);
 800510c:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8005110:	2010      	movs	r0, #16
 8005112:	f7fc fa23 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0137);
 8005116:	f240 1137 	movw	r1, #311	; 0x137
 800511a:	2011      	movs	r0, #17
 800511c:	f7fc fa1e 	bl	800155c <LCD_WriteReg>
		HAL_Delay(20);
 8005120:	2014      	movs	r0, #20
 8005122:	f002 fb5f 	bl	80077e4 <HAL_Delay>

		LCD_WriteReg(0x0012,0x01b8);
 8005126:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800512a:	2012      	movs	r0, #18
 800512c:	f7fc fa16 	bl	800155c <LCD_WriteReg>
		HAL_Delay(20);
 8005130:	2014      	movs	r0, #20
 8005132:	f002 fb57 	bl	80077e4 <HAL_Delay>

		LCD_WriteReg(0x0013,0x0f00);
 8005136:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800513a:	2013      	movs	r0, #19
 800513c:	f7fc fa0e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x002a,0x0080);
 8005140:	2180      	movs	r1, #128	; 0x80
 8005142:	202a      	movs	r0, #42	; 0x2a
 8005144:	f7fc fa0a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0029,0x0048);
 8005148:	2148      	movs	r1, #72	; 0x48
 800514a:	2029      	movs	r0, #41	; 0x29
 800514c:	f7fc fa06 	bl	800155c <LCD_WriteReg>
		HAL_Delay(20);
 8005150:	2014      	movs	r0, #20
 8005152:	f002 fb47 	bl	80077e4 <HAL_Delay>

		LCD_WriteReg(0x0001,0x0100);
 8005156:	f44f 7180 	mov.w	r1, #256	; 0x100
 800515a:	2001      	movs	r0, #1
 800515c:	f7fc f9fe 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 8005160:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005164:	2002      	movs	r0, #2
 8005166:	f7fc f9f9 	bl	800155c <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 800516a:	f241 0138 	movw	r1, #4152	; 0x1038
 800516e:	2003      	movs	r0, #3
 8005170:	f7fc f9f4 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8005174:	f240 2102 	movw	r1, #514	; 0x202
 8005178:	2008      	movs	r0, #8
 800517a:	f7fc f9ef 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x000a,0x0000);
 800517e:	2100      	movs	r1, #0
 8005180:	200a      	movs	r0, #10
 8005182:	f7fc f9eb 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x000c,0x0000);
 8005186:	2100      	movs	r1, #0
 8005188:	200c      	movs	r0, #12
 800518a:	f7fc f9e7 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x000d,0x0000);
 800518e:	2100      	movs	r1, #0
 8005190:	200d      	movs	r0, #13
 8005192:	f7fc f9e3 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x000e,0x0030);
 8005196:	2130      	movs	r1, #48	; 0x30
 8005198:	200e      	movs	r0, #14
 800519a:	f7fc f9df 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0050,0x0000);
 800519e:	2100      	movs	r1, #0
 80051a0:	2050      	movs	r0, #80	; 0x50
 80051a2:	f7fc f9db 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00ef);
 80051a6:	21ef      	movs	r1, #239	; 0xef
 80051a8:	2051      	movs	r0, #81	; 0x51
 80051aa:	f7fc f9d7 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 80051ae:	2100      	movs	r1, #0
 80051b0:	2052      	movs	r0, #82	; 0x52
 80051b2:	f7fc f9d3 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013f);
 80051b6:	f240 113f 	movw	r1, #319	; 0x13f
 80051ba:	2053      	movs	r0, #83	; 0x53
 80051bc:	f7fc f9ce 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0060,0x2700);
 80051c0:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80051c4:	2060      	movs	r0, #96	; 0x60
 80051c6:	f7fc f9c9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 80051ca:	2101      	movs	r1, #1
 80051cc:	2061      	movs	r0, #97	; 0x61
 80051ce:	f7fc f9c5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x006a,0x0000);
 80051d2:	2100      	movs	r1, #0
 80051d4:	206a      	movs	r0, #106	; 0x6a
 80051d6:	f7fc f9c1 	bl	800155c <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090,0X0011);
 80051da:	2111      	movs	r1, #17
 80051dc:	2090      	movs	r0, #144	; 0x90
 80051de:	f7fc f9bd 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 80051e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051e6:	2092      	movs	r0, #146	; 0x92
 80051e8:	f7fc f9b8 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0093,0x0402);
 80051ec:	f240 4102 	movw	r1, #1026	; 0x402
 80051f0:	2093      	movs	r0, #147	; 0x93
 80051f2:	f7fc f9b3 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0094,0x0002);
 80051f6:	2102      	movs	r1, #2
 80051f8:	2094      	movs	r0, #148	; 0x94
 80051fa:	f7fc f9af 	bl	800155c <LCD_WriteReg>
		HAL_Delay(20);
 80051fe:	2014      	movs	r0, #20
 8005200:	f002 faf0 	bl	80077e4 <HAL_Delay>

		LCD_WriteReg(0x0007,0x0001);
 8005204:	2101      	movs	r1, #1
 8005206:	2007      	movs	r0, #7
 8005208:	f7fc f9a8 	bl	800155c <LCD_WriteReg>
		HAL_Delay(20);
 800520c:	2014      	movs	r0, #20
 800520e:	f002 fae9 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0x0007,0x0061);
 8005212:	2161      	movs	r1, #97	; 0x61
 8005214:	2007      	movs	r0, #7
 8005216:	f7fc f9a1 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0173);
 800521a:	f240 1173 	movw	r1, #371	; 0x173
 800521e:	2007      	movs	r0, #7
 8005220:	f7fc f99c 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0x0020,0x0000);
 8005224:	2100      	movs	r1, #0
 8005226:	2020      	movs	r0, #32
 8005228:	f7fc f998 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0021,0x0000);
 800522c:	2100      	movs	r1, #0
 800522e:	2021      	movs	r0, #33	; 0x21
 8005230:	f7fc f994 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x00,0x22);
 8005234:	2122      	movs	r1, #34	; 0x22
 8005236:	2000      	movs	r0, #0
 8005238:	f7fc f990 	bl	800155c <LCD_WriteReg>
 800523c:	e311      	b.n	8005862 <LCD_Init+0x3752>
	}else if(lcddev.id==0xC505)
 800523e:	4b6b      	ldr	r3, [pc, #428]	; (80053ec <LCD_Init+0x32dc>)
 8005240:	889b      	ldrh	r3, [r3, #4]
 8005242:	f24c 5205 	movw	r2, #50437	; 0xc505
 8005246:	4293      	cmp	r3, r2
 8005248:	f040 80d2 	bne.w	80053f0 <LCD_Init+0x32e0>
	{
		LCD_WriteReg(0x0000,0x0000);
 800524c:	2100      	movs	r1, #0
 800524e:	2000      	movs	r0, #0
 8005250:	f7fc f984 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005254:	2100      	movs	r1, #0
 8005256:	2000      	movs	r0, #0
 8005258:	f7fc f980 	bl	800155c <LCD_WriteReg>
		HAL_Delay(20);
 800525c:	2014      	movs	r0, #20
 800525e:	f002 fac1 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0x0000,0x0000);
 8005262:	2100      	movs	r1, #0
 8005264:	2000      	movs	r0, #0
 8005266:	f7fc f979 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800526a:	2100      	movs	r1, #0
 800526c:	2000      	movs	r0, #0
 800526e:	f7fc f975 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005272:	2100      	movs	r1, #0
 8005274:	2000      	movs	r0, #0
 8005276:	f7fc f971 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800527a:	2100      	movs	r1, #0
 800527c:	2000      	movs	r0, #0
 800527e:	f7fc f96d 	bl	800155c <LCD_WriteReg>
 		LCD_WriteReg(0x00a4,0x0001);
 8005282:	2101      	movs	r1, #1
 8005284:	20a4      	movs	r0, #164	; 0xa4
 8005286:	f7fc f969 	bl	800155c <LCD_WriteReg>
		HAL_Delay(20);
 800528a:	2014      	movs	r0, #20
 800528c:	f002 faaa 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 8005290:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005294:	2060      	movs	r0, #96	; 0x60
 8005296:	f7fc f961 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0806);
 800529a:	f640 0106 	movw	r1, #2054	; 0x806
 800529e:	2008      	movs	r0, #8
 80052a0:	f7fc f95c 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0703);//gamma setting
 80052a4:	f240 7103 	movw	r1, #1795	; 0x703
 80052a8:	2030      	movs	r0, #48	; 0x30
 80052aa:	f7fc f957 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0001);
 80052ae:	2101      	movs	r1, #1
 80052b0:	2031      	movs	r0, #49	; 0x31
 80052b2:	f7fc f953 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0004);
 80052b6:	2104      	movs	r1, #4
 80052b8:	2032      	movs	r0, #50	; 0x32
 80052ba:	f7fc f94f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0102);
 80052be:	f44f 7181 	mov.w	r1, #258	; 0x102
 80052c2:	2033      	movs	r0, #51	; 0x33
 80052c4:	f7fc f94a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x0300);
 80052c8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80052cc:	2034      	movs	r0, #52	; 0x34
 80052ce:	f7fc f945 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0103);
 80052d2:	f240 1103 	movw	r1, #259	; 0x103
 80052d6:	2035      	movs	r0, #53	; 0x35
 80052d8:	f7fc f940 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x001F);
 80052dc:	211f      	movs	r1, #31
 80052de:	2036      	movs	r0, #54	; 0x36
 80052e0:	f7fc f93c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0703);
 80052e4:	f240 7103 	movw	r1, #1795	; 0x703
 80052e8:	2037      	movs	r0, #55	; 0x37
 80052ea:	f7fc f937 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0001);
 80052ee:	2101      	movs	r1, #1
 80052f0:	2038      	movs	r0, #56	; 0x38
 80052f2:	f7fc f933 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0004);
 80052f6:	2104      	movs	r1, #4
 80052f8:	2039      	movs	r0, #57	; 0x39
 80052fa:	f7fc f92f 	bl	800155c <LCD_WriteReg>



		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80052fe:	2115      	movs	r1, #21
 8005300:	2090      	movs	r0, #144	; 0x90
 8005302:	f7fc f92b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 8005306:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800530a:	2010      	movs	r0, #16
 800530c:	f7fc f926 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0247);	//DC1,DC0,VC
 8005310:	f240 2147 	movw	r1, #583	; 0x247
 8005314:	2011      	movs	r0, #17
 8005316:	f7fc f921 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 800531a:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800531e:	2012      	movs	r0, #18
 8005320:	f7fc f91c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8005324:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8005328:	2013      	movs	r0, #19
 800532a:	f7fc f917 	bl	800155c <LCD_WriteReg>
		HAL_Delay(120);
 800532e:	2078      	movs	r0, #120	; 0x78
 8005330:	f002 fa58 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8005334:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005338:	2001      	movs	r0, #1
 800533a:	f7fc f90f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 800533e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005342:	2002      	movs	r0, #2
 8005344:	f7fc f90a 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 8005348:	f241 0130 	movw	r1, #4144	; 0x1030
 800534c:	2003      	movs	r0, #3
 800534e:	f7fc f905 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8005352:	2108      	movs	r1, #8
 8005354:	200a      	movs	r0, #10
 8005356:	f7fc f901 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800535a:	2100      	movs	r1, #0
 800535c:	200c      	movs	r0, #12
 800535e:	f7fc f8fd 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8005362:	2120      	movs	r1, #32
 8005364:	200e      	movs	r0, #14
 8005366:	f7fc f8f9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800536a:	2100      	movs	r1, #0
 800536c:	200f      	movs	r0, #15
 800536e:	f7fc f8f5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8005372:	2100      	movs	r1, #0
 8005374:	2020      	movs	r0, #32
 8005376:	f7fc f8f1 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 800537a:	2100      	movs	r1, #0
 800537c:	2021      	movs	r0, #33	; 0x21
 800537e:	f7fc f8ed 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x002A,0x003D);	//vcom2
 8005382:	213d      	movs	r1, #61	; 0x3d
 8005384:	202a      	movs	r0, #42	; 0x2a
 8005386:	f7fc f8e9 	bl	800155c <LCD_WriteReg>
		HAL_Delay(20);
 800538a:	2014      	movs	r0, #20
 800538c:	f002 fa2a 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8005390:	212d      	movs	r1, #45	; 0x2d
 8005392:	2029      	movs	r0, #41	; 0x29
 8005394:	f7fc f8e2 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 8005398:	2100      	movs	r1, #0
 800539a:	2050      	movs	r0, #80	; 0x50
 800539c:	f7fc f8de 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 80053a0:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 80053a4:	2051      	movs	r0, #81	; 0x51
 80053a6:	f7fc f8d9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 80053aa:	2100      	movs	r1, #0
 80053ac:	2052      	movs	r0, #82	; 0x52
 80053ae:	f7fc f8d5 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80053b2:	f240 113f 	movw	r1, #319	; 0x13f
 80053b6:	2053      	movs	r0, #83	; 0x53
 80053b8:	f7fc f8d0 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 80053bc:	2100      	movs	r1, #0
 80053be:	2061      	movs	r0, #97	; 0x61
 80053c0:	f7fc f8cc 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80053c4:	2100      	movs	r1, #0
 80053c6:	206a      	movs	r0, #106	; 0x6a
 80053c8:	f7fc f8c8 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0300);
 80053cc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80053d0:	2092      	movs	r0, #146	; 0x92
 80053d2:	f7fc f8c3 	bl	800155c <LCD_WriteReg>

 		LCD_WriteReg(0x0093, 0x0005);
 80053d6:	2105      	movs	r1, #5
 80053d8:	2093      	movs	r0, #147	; 0x93
 80053da:	f7fc f8bf 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80053de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053e2:	2007      	movs	r0, #7
 80053e4:	f7fc f8ba 	bl	800155c <LCD_WriteReg>
 80053e8:	e23b      	b.n	8005862 <LCD_Init+0x3752>
 80053ea:	bf00      	nop
 80053ec:	20000140 	.word	0x20000140
	}else if(lcddev.id==0x4531)//OK |/|/|
 80053f0:	4bbb      	ldr	r3, [pc, #748]	; (80056e0 <LCD_Init+0x35d0>)
 80053f2:	889b      	ldrh	r3, [r3, #4]
 80053f4:	f244 5231 	movw	r2, #17713	; 0x4531
 80053f8:	4293      	cmp	r3, r2
 80053fa:	f040 80ba 	bne.w	8005572 <LCD_Init+0x3462>
	{
		LCD_WriteReg(0X00,0X0001);
 80053fe:	2101      	movs	r1, #1
 8005400:	2000      	movs	r0, #0
 8005402:	f7fc f8ab 	bl	800155c <LCD_WriteReg>
		HAL_Delay(10);
 8005406:	200a      	movs	r0, #10
 8005408:	f002 f9ec 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0X10,0X1628);
 800540c:	f241 6128 	movw	r1, #5672	; 0x1628
 8005410:	2010      	movs	r0, #16
 8005412:	f7fc f8a3 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X12,0X000e);//0x0006
 8005416:	210e      	movs	r1, #14
 8005418:	2012      	movs	r0, #18
 800541a:	f7fc f89f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X13,0X0A39);
 800541e:	f640 2139 	movw	r1, #2617	; 0xa39
 8005422:	2013      	movs	r0, #19
 8005424:	f7fc f89a 	bl	800155c <LCD_WriteReg>
		HAL_Delay(10);
 8005428:	200a      	movs	r0, #10
 800542a:	f002 f9db 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0X11,0X0040);
 800542e:	2140      	movs	r1, #64	; 0x40
 8005430:	2011      	movs	r0, #17
 8005432:	f7fc f893 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X15,0X0050);
 8005436:	2150      	movs	r1, #80	; 0x50
 8005438:	2015      	movs	r0, #21
 800543a:	f7fc f88f 	bl	800155c <LCD_WriteReg>
		HAL_Delay(10);
 800543e:	200a      	movs	r0, #10
 8005440:	f002 f9d0 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0X12,0X001e);//16
 8005444:	211e      	movs	r1, #30
 8005446:	2012      	movs	r0, #18
 8005448:	f7fc f888 	bl	800155c <LCD_WriteReg>
		HAL_Delay(10);
 800544c:	200a      	movs	r0, #10
 800544e:	f002 f9c9 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0X10,0X1620);
 8005452:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 8005456:	2010      	movs	r0, #16
 8005458:	f7fc f880 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X13,0X2A39);
 800545c:	f642 2139 	movw	r1, #10809	; 0x2a39
 8005460:	2013      	movs	r0, #19
 8005462:	f7fc f87b 	bl	800155c <LCD_WriteReg>
		HAL_Delay(10);
 8005466:	200a      	movs	r0, #10
 8005468:	f002 f9bc 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0X01,0X0100);
 800546c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005470:	2001      	movs	r0, #1
 8005472:	f7fc f873 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 8005476:	f44f 7140 	mov.w	r1, #768	; 0x300
 800547a:	2002      	movs	r0, #2
 800547c:	f7fc f86e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1038);//改变方向的
 8005480:	f241 0138 	movw	r1, #4152	; 0x1038
 8005484:	2003      	movs	r0, #3
 8005486:	f7fc f869 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0202);
 800548a:	f240 2102 	movw	r1, #514	; 0x202
 800548e:	2008      	movs	r0, #8
 8005490:	f7fc f864 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 8005494:	2108      	movs	r1, #8
 8005496:	200a      	movs	r0, #10
 8005498:	f7fc f860 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X30,0X0000);
 800549c:	2100      	movs	r1, #0
 800549e:	2030      	movs	r0, #48	; 0x30
 80054a0:	f7fc f85c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 80054a4:	f240 4102 	movw	r1, #1026	; 0x402
 80054a8:	2031      	movs	r0, #49	; 0x31
 80054aa:	f7fc f857 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0106);
 80054ae:	f44f 7183 	mov.w	r1, #262	; 0x106
 80054b2:	2032      	movs	r0, #50	; 0x32
 80054b4:	f7fc f852 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0503);
 80054b8:	f240 5103 	movw	r1, #1283	; 0x503
 80054bc:	2033      	movs	r0, #51	; 0x33
 80054be:	f7fc f84d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0104);
 80054c2:	f44f 7182 	mov.w	r1, #260	; 0x104
 80054c6:	2034      	movs	r0, #52	; 0x34
 80054c8:	f7fc f848 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0301);
 80054cc:	f240 3101 	movw	r1, #769	; 0x301
 80054d0:	2035      	movs	r0, #53	; 0x35
 80054d2:	f7fc f843 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 80054d6:	f240 7107 	movw	r1, #1799	; 0x707
 80054da:	2036      	movs	r0, #54	; 0x36
 80054dc:	f7fc f83e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 80054e0:	f240 3105 	movw	r1, #773	; 0x305
 80054e4:	2037      	movs	r0, #55	; 0x37
 80054e6:	f7fc f839 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0208);
 80054ea:	f44f 7102 	mov.w	r1, #520	; 0x208
 80054ee:	2038      	movs	r0, #56	; 0x38
 80054f0:	f7fc f834 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0F0B);
 80054f4:	f640 710b 	movw	r1, #3851	; 0xf0b
 80054f8:	2039      	movs	r0, #57	; 0x39
 80054fa:	f7fc f82f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X41,0X0002);
 80054fe:	2102      	movs	r1, #2
 8005500:	2041      	movs	r0, #65	; 0x41
 8005502:	f7fc f82b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X60,0X2700);
 8005506:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800550a:	2060      	movs	r0, #96	; 0x60
 800550c:	f7fc f826 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8005510:	2101      	movs	r1, #1
 8005512:	2061      	movs	r0, #97	; 0x61
 8005514:	f7fc f822 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X90,0X0210);
 8005518:	f44f 7104 	mov.w	r1, #528	; 0x210
 800551c:	2090      	movs	r0, #144	; 0x90
 800551e:	f7fc f81d 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X92,0X010A);
 8005522:	f44f 7185 	mov.w	r1, #266	; 0x10a
 8005526:	2092      	movs	r0, #146	; 0x92
 8005528:	f7fc f818 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0004);
 800552c:	2104      	movs	r1, #4
 800552e:	2093      	movs	r0, #147	; 0x93
 8005530:	f7fc f814 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0100);
 8005534:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005538:	20a0      	movs	r0, #160	; 0xa0
 800553a:	f7fc f80f 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 800553e:	2101      	movs	r1, #1
 8005540:	2007      	movs	r0, #7
 8005542:	f7fc f80b 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 8005546:	2121      	movs	r1, #33	; 0x21
 8005548:	2007      	movs	r0, #7
 800554a:	f7fc f807 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 800554e:	2123      	movs	r1, #35	; 0x23
 8005550:	2007      	movs	r0, #7
 8005552:	f7fc f803 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 8005556:	2133      	movs	r1, #51	; 0x33
 8005558:	2007      	movs	r0, #7
 800555a:	f7fb ffff 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 800555e:	f240 1133 	movw	r1, #307	; 0x133
 8005562:	2007      	movs	r0, #7
 8005564:	f7fb fffa 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0000);
 8005568:	2100      	movs	r1, #0
 800556a:	20a0      	movs	r0, #160	; 0xa0
 800556c:	f7fb fff6 	bl	800155c <LCD_WriteReg>
 8005570:	e177      	b.n	8005862 <LCD_Init+0x3752>
	}else if(lcddev.id==0x4535)
 8005572:	4b5b      	ldr	r3, [pc, #364]	; (80056e0 <LCD_Init+0x35d0>)
 8005574:	889b      	ldrh	r3, [r3, #4]
 8005576:	f244 5235 	movw	r2, #17717	; 0x4535
 800557a:	4293      	cmp	r3, r2
 800557c:	f040 80b2 	bne.w	80056e4 <LCD_Init+0x35d4>
	{
		LCD_WriteReg(0X15,0X0030);
 8005580:	2130      	movs	r1, #48	; 0x30
 8005582:	2015      	movs	r0, #21
 8005584:	f7fb ffea 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X9A,0X0010);
 8005588:	2110      	movs	r1, #16
 800558a:	209a      	movs	r0, #154	; 0x9a
 800558c:	f7fb ffe6 	bl	800155c <LCD_WriteReg>
 		LCD_WriteReg(0X11,0X0020);
 8005590:	2120      	movs	r1, #32
 8005592:	2011      	movs	r0, #17
 8005594:	f7fb ffe2 	bl	800155c <LCD_WriteReg>
 		LCD_WriteReg(0X10,0X3428);
 8005598:	f243 4128 	movw	r1, #13352	; 0x3428
 800559c:	2010      	movs	r0, #16
 800559e:	f7fb ffdd 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X12,0X0002);//16
 80055a2:	2102      	movs	r1, #2
 80055a4:	2012      	movs	r0, #18
 80055a6:	f7fb ffd9 	bl	800155c <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X1038);
 80055aa:	f241 0138 	movw	r1, #4152	; 0x1038
 80055ae:	2013      	movs	r0, #19
 80055b0:	f7fb ffd4 	bl	800155c <LCD_WriteReg>
		HAL_Delay(40);
 80055b4:	2028      	movs	r0, #40	; 0x28
 80055b6:	f002 f915 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0X12,0X0012);//16
 80055ba:	2112      	movs	r1, #18
 80055bc:	2012      	movs	r0, #18
 80055be:	f7fb ffcd 	bl	800155c <LCD_WriteReg>
		HAL_Delay(40);
 80055c2:	2028      	movs	r0, #40	; 0x28
 80055c4:	f002 f90e 	bl	80077e4 <HAL_Delay>
  		LCD_WriteReg(0X10,0X3420);
 80055c8:	f243 4120 	movw	r1, #13344	; 0x3420
 80055cc:	2010      	movs	r0, #16
 80055ce:	f7fb ffc5 	bl	800155c <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X3038);
 80055d2:	f243 0138 	movw	r1, #12344	; 0x3038
 80055d6:	2013      	movs	r0, #19
 80055d8:	f7fb ffc0 	bl	800155c <LCD_WriteReg>
		HAL_Delay(70);
 80055dc:	2046      	movs	r0, #70	; 0x46
 80055de:	f002 f901 	bl	80077e4 <HAL_Delay>
		LCD_WriteReg(0X30,0X0000);
 80055e2:	2100      	movs	r1, #0
 80055e4:	2030      	movs	r0, #48	; 0x30
 80055e6:	f7fb ffb9 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 80055ea:	f240 4102 	movw	r1, #1026	; 0x402
 80055ee:	2031      	movs	r0, #49	; 0x31
 80055f0:	f7fb ffb4 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0307);
 80055f4:	f240 3107 	movw	r1, #775	; 0x307
 80055f8:	2032      	movs	r0, #50	; 0x32
 80055fa:	f7fb ffaf 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0304);
 80055fe:	f44f 7141 	mov.w	r1, #772	; 0x304
 8005602:	2033      	movs	r0, #51	; 0x33
 8005604:	f7fb ffaa 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0004);
 8005608:	2104      	movs	r1, #4
 800560a:	2034      	movs	r0, #52	; 0x34
 800560c:	f7fb ffa6 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0401);
 8005610:	f240 4101 	movw	r1, #1025	; 0x401
 8005614:	2035      	movs	r0, #53	; 0x35
 8005616:	f7fb ffa1 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 800561a:	f240 7107 	movw	r1, #1799	; 0x707
 800561e:	2036      	movs	r0, #54	; 0x36
 8005620:	f7fb ff9c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 8005624:	f240 3105 	movw	r1, #773	; 0x305
 8005628:	2037      	movs	r0, #55	; 0x37
 800562a:	f7fb ff97 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0610);
 800562e:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8005632:	2038      	movs	r0, #56	; 0x38
 8005634:	f7fb ff92 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0610);
 8005638:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800563c:	2039      	movs	r0, #57	; 0x39
 800563e:	f7fb ff8d 	bl	800155c <LCD_WriteReg>

		LCD_WriteReg(0X01,0X0100);
 8005642:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005646:	2001      	movs	r0, #1
 8005648:	f7fb ff88 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 800564c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005650:	2002      	movs	r0, #2
 8005652:	f7fb ff83 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1030);//改变方向的
 8005656:	f241 0130 	movw	r1, #4144	; 0x1030
 800565a:	2003      	movs	r0, #3
 800565c:	f7fb ff7e 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0808);
 8005660:	f640 0108 	movw	r1, #2056	; 0x808
 8005664:	2008      	movs	r0, #8
 8005666:	f7fb ff79 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 800566a:	2108      	movs	r1, #8
 800566c:	200a      	movs	r0, #10
 800566e:	f7fb ff75 	bl	800155c <LCD_WriteReg>
 		LCD_WriteReg(0X60,0X2700);
 8005672:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005676:	2060      	movs	r0, #96	; 0x60
 8005678:	f7fb ff70 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 800567c:	2101      	movs	r1, #1
 800567e:	2061      	movs	r0, #97	; 0x61
 8005680:	f7fb ff6c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X90,0X013E);
 8005684:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005688:	2090      	movs	r0, #144	; 0x90
 800568a:	f7fb ff67 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X92,0X0100);
 800568e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005692:	2092      	movs	r0, #146	; 0x92
 8005694:	f7fb ff62 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0100);
 8005698:	f44f 7180 	mov.w	r1, #256	; 0x100
 800569c:	2093      	movs	r0, #147	; 0x93
 800569e:	f7fb ff5d 	bl	800155c <LCD_WriteReg>
 		LCD_WriteReg(0XA0,0X3000);
 80056a2:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 80056a6:	20a0      	movs	r0, #160	; 0xa0
 80056a8:	f7fb ff58 	bl	800155c <LCD_WriteReg>
 		LCD_WriteReg(0XA3,0X0010);
 80056ac:	2110      	movs	r1, #16
 80056ae:	20a3      	movs	r0, #163	; 0xa3
 80056b0:	f7fb ff54 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 80056b4:	2101      	movs	r1, #1
 80056b6:	2007      	movs	r0, #7
 80056b8:	f7fb ff50 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 80056bc:	2121      	movs	r1, #33	; 0x21
 80056be:	2007      	movs	r0, #7
 80056c0:	f7fb ff4c 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 80056c4:	2123      	movs	r1, #35	; 0x23
 80056c6:	2007      	movs	r0, #7
 80056c8:	f7fb ff48 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 80056cc:	2133      	movs	r1, #51	; 0x33
 80056ce:	2007      	movs	r0, #7
 80056d0:	f7fb ff44 	bl	800155c <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 80056d4:	f240 1133 	movw	r1, #307	; 0x133
 80056d8:	2007      	movs	r0, #7
 80056da:	f7fb ff3f 	bl	800155c <LCD_WriteReg>
 80056de:	e0c0      	b.n	8005862 <LCD_Init+0x3752>
 80056e0:	20000140 	.word	0x20000140
	}else if(lcddev.id==0X1963)
 80056e4:	4b67      	ldr	r3, [pc, #412]	; (8005884 <LCD_Init+0x3774>)
 80056e6:	889b      	ldrh	r3, [r3, #4]
 80056e8:	f641 1263 	movw	r2, #6499	; 0x1963
 80056ec:	4293      	cmp	r3, r2
 80056ee:	f040 80b8 	bne.w	8005862 <LCD_Init+0x3752>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80056f2:	20e2      	movs	r0, #226	; 0xe2
 80056f4:	f7fb fef8 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 80056f8:	201d      	movs	r0, #29
 80056fa:	f7fb ff09 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80056fe:	2002      	movs	r0, #2
 8005700:	f7fb ff06 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 8005704:	2004      	movs	r0, #4
 8005706:	f7fb ff03 	bl	8001510 <LCD_WR_DATA>
		delay_us(100);
 800570a:	2064      	movs	r0, #100	; 0x64
 800570c:	f7fb fc2e 	bl	8000f6c <delay_us>
		LCD_WR_REG(0xE0);		// Start PLL command
 8005710:	20e0      	movs	r0, #224	; 0xe0
 8005712:	f7fb fee9 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8005716:	2001      	movs	r0, #1
 8005718:	f7fb fefa 	bl	8001510 <LCD_WR_DATA>
		HAL_Delay(10);
 800571c:	200a      	movs	r0, #10
 800571e:	f002 f861 	bl	80077e4 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8005722:	20e0      	movs	r0, #224	; 0xe0
 8005724:	f7fb fee0 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 8005728:	2003      	movs	r0, #3
 800572a:	f7fb fef1 	bl	8001510 <LCD_WR_DATA>
		HAL_Delay(12);
 800572e:	200c      	movs	r0, #12
 8005730:	f002 f858 	bl	80077e4 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8005734:	2001      	movs	r0, #1
 8005736:	f7fb fed7 	bl	80014e8 <LCD_WR_REG>
		HAL_Delay(10);
 800573a:	200a      	movs	r0, #10
 800573c:	f002 f852 	bl	80077e4 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8005740:	20e6      	movs	r0, #230	; 0xe6
 8005742:	f7fb fed1 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8005746:	202f      	movs	r0, #47	; 0x2f
 8005748:	f7fb fee2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 800574c:	20ff      	movs	r0, #255	; 0xff
 800574e:	f7fb fedf 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8005752:	20ff      	movs	r0, #255	; 0xff
 8005754:	f7fb fedc 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 8005758:	20b0      	movs	r0, #176	; 0xb0
 800575a:	f7fb fec5 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 800575e:	2020      	movs	r0, #32
 8005760:	f7fb fed6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 8005764:	2000      	movs	r0, #0
 8005766:	f7fb fed3 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 800576a:	2003      	movs	r0, #3
 800576c:	f7fb fed0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8005770:	f240 301f 	movw	r0, #799	; 0x31f
 8005774:	f7fb fecc 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 8005778:	2001      	movs	r0, #1
 800577a:	f7fb fec9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 800577e:	f240 10df 	movw	r0, #479	; 0x1df
 8005782:	f7fb fec5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 8005786:	2000      	movs	r0, #0
 8005788:	f7fb fec2 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 800578c:	20b4      	movs	r0, #180	; 0xb4
 800578e:	f7fb feab 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8005792:	2004      	movs	r0, #4
 8005794:	f7fb febc 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 8005798:	f240 401f 	movw	r0, #1055	; 0x41f
 800579c:	f7fb feb8 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 80057a0:	2000      	movs	r0, #0
 80057a2:	f7fb feb5 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 80057a6:	202e      	movs	r0, #46	; 0x2e
 80057a8:	f7fb feb2 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 80057ac:	2000      	movs	r0, #0
 80057ae:	f7fb feaf 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80057b2:	2000      	movs	r0, #0
 80057b4:	f7fb feac 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80057b8:	2000      	movs	r0, #0
 80057ba:	f7fb fea9 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80057be:	2000      	movs	r0, #0
 80057c0:	f7fb fea6 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 80057c4:	20b6      	movs	r0, #182	; 0xb6
 80057c6:	f7fb fe8f 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 80057ca:	2002      	movs	r0, #2
 80057cc:	f7fb fea0 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 80057d0:	f44f 7003 	mov.w	r0, #524	; 0x20c
 80057d4:	f7fb fe9c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 80057d8:	2000      	movs	r0, #0
 80057da:	f7fb fe99 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 80057de:	2017      	movs	r0, #23
 80057e0:	f7fb fe96 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 80057e4:	2015      	movs	r0, #21
 80057e6:	f7fb fe93 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80057ea:	2000      	movs	r0, #0
 80057ec:	f7fb fe90 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80057f0:	2000      	movs	r0, #0
 80057f2:	f7fb fe8d 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 80057f6:	20f0      	movs	r0, #240	; 0xf0
 80057f8:	f7fb fe76 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 80057fc:	2003      	movs	r0, #3
 80057fe:	f7fb fe87 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 8005802:	2029      	movs	r0, #41	; 0x29
 8005804:	f7fb fe70 	bl	80014e8 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8005808:	20d0      	movs	r0, #208	; 0xd0
 800580a:	f7fb fe6d 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 800580e:	2000      	movs	r0, #0
 8005810:	f7fb fe7e 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 8005814:	20be      	movs	r0, #190	; 0xbe
 8005816:	f7fb fe67 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 800581a:	2005      	movs	r0, #5
 800581c:	f7fb fe78 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8005820:	20fe      	movs	r0, #254	; 0xfe
 8005822:	f7fb fe75 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 8005826:	2001      	movs	r0, #1
 8005828:	f7fb fe72 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 800582c:	2000      	movs	r0, #0
 800582e:	f7fb fe6f 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 8005832:	2000      	movs	r0, #0
 8005834:	f7fb fe6c 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 8005838:	2000      	movs	r0, #0
 800583a:	f7fb fe69 	bl	8001510 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 800583e:	20b8      	movs	r0, #184	; 0xb8
 8005840:	f7fb fe52 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8005844:	2003      	movs	r0, #3
 8005846:	f7fb fe63 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 800584a:	2001      	movs	r0, #1
 800584c:	f7fb fe60 	bl	8001510 <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 8005850:	20ba      	movs	r0, #186	; 0xba
 8005852:	f7fb fe49 	bl	80014e8 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8005856:	2001      	movs	r0, #1
 8005858:	f7fb fe5a 	bl	8001510 <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 800585c:	2064      	movs	r0, #100	; 0x64
 800585e:	f7fc fb17 	bl	8001e90 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		//默认为竖屏
 8005862:	2000      	movs	r0, #0
 8005864:	f7fc fb48 	bl	8001ef8 <LCD_Display_Dir>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);				//点亮背光
 8005868:	2201      	movs	r2, #1
 800586a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800586e:	4806      	ldr	r0, [pc, #24]	; (8005888 <LCD_Init+0x3778>)
 8005870:	f002 fb6a 	bl	8007f48 <HAL_GPIO_WritePin>
	LCD_Clear(WHITE);
 8005874:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005878:	f000 f808 	bl	800588c <LCD_Clear>
}
 800587c:	bf00      	nop
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	20000140 	.word	0x20000140
 8005888:	40020400 	.word	0x40020400

0800588c <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint16_t color)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	4603      	mov	r3, r0
 8005894:	80fb      	strh	r3, [r7, #6]
	uint32_t index=0;
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 800589a:	4b21      	ldr	r3, [pc, #132]	; (8005920 <LCD_Clear+0x94>)
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 80058a0:	4b1f      	ldr	r3, [pc, #124]	; (8005920 <LCD_Clear+0x94>)
 80058a2:	885b      	ldrh	r3, [r3, #2]
 80058a4:	461a      	mov	r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	fb02 f303 	mul.w	r3, r2, r3
 80058ac:	60bb      	str	r3, [r7, #8]
	if((lcddev.id==0X6804)&&(lcddev.dir==1))//6804横屏的时候特殊处理
 80058ae:	4b1c      	ldr	r3, [pc, #112]	; (8005920 <LCD_Clear+0x94>)
 80058b0:	889b      	ldrh	r3, [r3, #4]
 80058b2:	f646 0204 	movw	r2, #26628	; 0x6804
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d11a      	bne.n	80058f0 <LCD_Clear+0x64>
 80058ba:	4b19      	ldr	r3, [pc, #100]	; (8005920 <LCD_Clear+0x94>)
 80058bc:	799b      	ldrb	r3, [r3, #6]
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d116      	bne.n	80058f0 <LCD_Clear+0x64>
	{
 		lcddev.dir=0;
 80058c2:	4b17      	ldr	r3, [pc, #92]	; (8005920 <LCD_Clear+0x94>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 80058c8:	4b15      	ldr	r3, [pc, #84]	; (8005920 <LCD_Clear+0x94>)
 80058ca:	222a      	movs	r2, #42	; 0x2a
 80058cc:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 80058ce:	4b14      	ldr	r3, [pc, #80]	; (8005920 <LCD_Clear+0x94>)
 80058d0:	222b      	movs	r2, #43	; 0x2b
 80058d2:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00,0x0000);		//设置光标位置
 80058d4:	2100      	movs	r1, #0
 80058d6:	2000      	movs	r0, #0
 80058d8:	f7fb fe7a 	bl	80015d0 <LCD_SetCursor>
 		lcddev.dir=1;
 80058dc:	4b10      	ldr	r3, [pc, #64]	; (8005920 <LCD_Clear+0x94>)
 80058de:	2201      	movs	r2, #1
 80058e0:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 80058e2:	4b0f      	ldr	r3, [pc, #60]	; (8005920 <LCD_Clear+0x94>)
 80058e4:	222b      	movs	r2, #43	; 0x2b
 80058e6:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 80058e8:	4b0d      	ldr	r3, [pc, #52]	; (8005920 <LCD_Clear+0x94>)
 80058ea:	222a      	movs	r2, #42	; 0x2a
 80058ec:	819a      	strh	r2, [r3, #12]
 80058ee:	e003      	b.n	80058f8 <LCD_Clear+0x6c>
 	}else LCD_SetCursor(0x00,0x0000);	//设置光标位置
 80058f0:	2100      	movs	r1, #0
 80058f2:	2000      	movs	r0, #0
 80058f4:	f7fb fe6c 	bl	80015d0 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 80058f8:	f7fb fe5a 	bl	80015b0 <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 80058fc:	2300      	movs	r3, #0
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	e005      	b.n	800590e <LCD_Clear+0x82>
	{
		LCD->LCD_RAM=color;
 8005902:	4a08      	ldr	r2, [pc, #32]	; (8005924 <LCD_Clear+0x98>)
 8005904:	88fb      	ldrh	r3, [r7, #6]
 8005906:	8053      	strh	r3, [r2, #2]
	for(index=0;index<totalpoint;index++)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3301      	adds	r3, #1
 800590c:	60fb      	str	r3, [r7, #12]
 800590e:	68fa      	ldr	r2, [r7, #12]
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	429a      	cmp	r2, r3
 8005914:	d3f5      	bcc.n	8005902 <LCD_Clear+0x76>
	}
}
 8005916:	bf00      	nop
 8005918:	bf00      	nop
 800591a:	3710      	adds	r7, #16
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	20000140 	.word	0x20000140
 8005924:	6c00007e 	.word	0x6c00007e

08005928 <LCD_Color_Fill>:
}
//在指定区域内填充指定颜色块
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
//color:要填充的颜色
void LCD_Color_Fill(uint16_t sx,uint16_t sy,uint16_t ex,uint16_t ey,uint16_t *color)
{
 8005928:	b590      	push	{r4, r7, lr}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	4604      	mov	r4, r0
 8005930:	4608      	mov	r0, r1
 8005932:	4611      	mov	r1, r2
 8005934:	461a      	mov	r2, r3
 8005936:	4623      	mov	r3, r4
 8005938:	80fb      	strh	r3, [r7, #6]
 800593a:	4603      	mov	r3, r0
 800593c:	80bb      	strh	r3, [r7, #4]
 800593e:	460b      	mov	r3, r1
 8005940:	807b      	strh	r3, [r7, #2]
 8005942:	4613      	mov	r3, r2
 8005944:	803b      	strh	r3, [r7, #0]
	uint16_t height,width;
	uint16_t i,j;
	width=ex-sx+1; 			//得到填充的宽度
 8005946:	887a      	ldrh	r2, [r7, #2]
 8005948:	88fb      	ldrh	r3, [r7, #6]
 800594a:	1ad3      	subs	r3, r2, r3
 800594c:	b29b      	uxth	r3, r3
 800594e:	3301      	adds	r3, #1
 8005950:	817b      	strh	r3, [r7, #10]
	height=ey-sy+1;			//高度
 8005952:	883a      	ldrh	r2, [r7, #0]
 8005954:	88bb      	ldrh	r3, [r7, #4]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	b29b      	uxth	r3, r3
 800595a:	3301      	adds	r3, #1
 800595c:	813b      	strh	r3, [r7, #8]
 	for(i=0;i<height;i++)
 800595e:	2300      	movs	r3, #0
 8005960:	81fb      	strh	r3, [r7, #14]
 8005962:	e023      	b.n	80059ac <LCD_Color_Fill+0x84>
	{
 		LCD_SetCursor(sx,sy+i);   	//设置光标位置
 8005964:	88ba      	ldrh	r2, [r7, #4]
 8005966:	89fb      	ldrh	r3, [r7, #14]
 8005968:	4413      	add	r3, r2
 800596a:	b29a      	uxth	r2, r3
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	4611      	mov	r1, r2
 8005970:	4618      	mov	r0, r3
 8005972:	f7fb fe2d 	bl	80015d0 <LCD_SetCursor>
		LCD_WriteRAM_Prepare();     //开始写入GRAM
 8005976:	f7fb fe1b 	bl	80015b0 <LCD_WriteRAM_Prepare>
		for(j=0;j<width;j++)LCD->LCD_RAM=color[i*width+j];//写入数据
 800597a:	2300      	movs	r3, #0
 800597c:	81bb      	strh	r3, [r7, #12]
 800597e:	e00e      	b.n	800599e <LCD_Color_Fill+0x76>
 8005980:	89fb      	ldrh	r3, [r7, #14]
 8005982:	897a      	ldrh	r2, [r7, #10]
 8005984:	fb02 f203 	mul.w	r2, r2, r3
 8005988:	89bb      	ldrh	r3, [r7, #12]
 800598a:	4413      	add	r3, r2
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	6a3a      	ldr	r2, [r7, #32]
 8005990:	4413      	add	r3, r2
 8005992:	4a0b      	ldr	r2, [pc, #44]	; (80059c0 <LCD_Color_Fill+0x98>)
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	8053      	strh	r3, [r2, #2]
 8005998:	89bb      	ldrh	r3, [r7, #12]
 800599a:	3301      	adds	r3, #1
 800599c:	81bb      	strh	r3, [r7, #12]
 800599e:	89ba      	ldrh	r2, [r7, #12]
 80059a0:	897b      	ldrh	r3, [r7, #10]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d3ec      	bcc.n	8005980 <LCD_Color_Fill+0x58>
 	for(i=0;i<height;i++)
 80059a6:	89fb      	ldrh	r3, [r7, #14]
 80059a8:	3301      	adds	r3, #1
 80059aa:	81fb      	strh	r3, [r7, #14]
 80059ac:	89fa      	ldrh	r2, [r7, #14]
 80059ae:	893b      	ldrh	r3, [r7, #8]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d3d7      	bcc.n	8005964 <LCD_Color_Fill+0x3c>
	}
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd90      	pop	{r4, r7, pc}
 80059be:	bf00      	nop
 80059c0:	6c00007e 	.word	0x6c00007e

080059c4 <LCD_DrawLine>:
//画线
//x1,y1:起点坐标
//x2,y2:终点坐标
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 80059c4:	b590      	push	{r4, r7, lr}
 80059c6:	b08d      	sub	sp, #52	; 0x34
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	4604      	mov	r4, r0
 80059cc:	4608      	mov	r0, r1
 80059ce:	4611      	mov	r1, r2
 80059d0:	461a      	mov	r2, r3
 80059d2:	4623      	mov	r3, r4
 80059d4:	80fb      	strh	r3, [r7, #6]
 80059d6:	4603      	mov	r3, r0
 80059d8:	80bb      	strh	r3, [r7, #4]
 80059da:	460b      	mov	r3, r1
 80059dc:	807b      	strh	r3, [r7, #2]
 80059de:	4613      	mov	r3, r2
 80059e0:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80059e2:	2300      	movs	r3, #0
 80059e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059e6:	2300      	movs	r3, #0
 80059e8:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1; //计算坐标增量
 80059ea:	887a      	ldrh	r2, [r7, #2]
 80059ec:	88fb      	ldrh	r3, [r7, #6]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80059f2:	883a      	ldrh	r2, [r7, #0]
 80059f4:	88bb      	ldrh	r3, [r7, #4]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80059fa:	88fb      	ldrh	r3, [r7, #6]
 80059fc:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80059fe:	88bb      	ldrh	r3, [r7, #4]
 8005a00:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //设置单步方向
 8005a02:	6a3b      	ldr	r3, [r7, #32]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	dd02      	ble.n	8005a0e <LCD_DrawLine+0x4a>
 8005a08:	2301      	movs	r3, #1
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	e00b      	b.n	8005a26 <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;//垂直线
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d102      	bne.n	8005a1a <LCD_DrawLine+0x56>
 8005a14:	2300      	movs	r3, #0
 8005a16:	617b      	str	r3, [r7, #20]
 8005a18:	e005      	b.n	8005a26 <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8005a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a1e:	617b      	str	r3, [r7, #20]
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	425b      	negs	r3, r3
 8005a24:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	dd02      	ble.n	8005a32 <LCD_DrawLine+0x6e>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	613b      	str	r3, [r7, #16]
 8005a30:	e00b      	b.n	8005a4a <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;//水平线
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d102      	bne.n	8005a3e <LCD_DrawLine+0x7a>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	e005      	b.n	8005a4a <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;}
 8005a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a42:	613b      	str	r3, [r7, #16]
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	425b      	negs	r3, r3
 8005a48:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴
 8005a4a:	6a3a      	ldr	r2, [r7, #32]
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	dd02      	ble.n	8005a58 <LCD_DrawLine+0x94>
 8005a52:	6a3b      	ldr	r3, [r7, #32]
 8005a54:	61bb      	str	r3, [r7, #24]
 8005a56:	e001      	b.n	8005a5c <LCD_DrawLine+0x98>
	else distance=delta_y;
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )//画线输出
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005a60:	e02a      	b.n	8005ab8 <LCD_DrawLine+0xf4>
	{
		LCD_DrawPoint(uRow,uCol);//画点
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	b292      	uxth	r2, r2
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f7fc f8d9 	bl	8001c24 <LCD_DrawPoint>
		xerr+=delta_x ;
 8005a72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	4413      	add	r3, r2
 8005a78:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y ;
 8005a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	4413      	add	r3, r2
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8005a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	dd07      	ble.n	8005a9a <LCD_DrawLine+0xd6>
		{
			xerr-=distance;
 8005a8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	4413      	add	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8005a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	dd07      	ble.n	8005ab2 <LCD_DrawLine+0xee>
		{
			yerr-=distance;
 8005aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	4413      	add	r3, r2
 8005ab0:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )//画线输出
 8005ab2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005ab8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	3301      	adds	r3, #1
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	ddcf      	ble.n	8005a62 <LCD_DrawLine+0x9e>
		}
	}
}
 8005ac2:	bf00      	nop
 8005ac4:	bf00      	nop
 8005ac6:	3734      	adds	r7, #52	; 0x34
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd90      	pop	{r4, r7, pc}

08005acc <LCD_DrawRectangle>:
//画矩形
//(x1,y1),(x2,y2):矩形的对角坐标
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8005acc:	b590      	push	{r4, r7, lr}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	4608      	mov	r0, r1
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	461a      	mov	r2, r3
 8005ada:	4623      	mov	r3, r4
 8005adc:	80fb      	strh	r3, [r7, #6]
 8005ade:	4603      	mov	r3, r0
 8005ae0:	80bb      	strh	r3, [r7, #4]
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	807b      	strh	r3, [r7, #2]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1,y1,x2,y1);
 8005aea:	88bb      	ldrh	r3, [r7, #4]
 8005aec:	887a      	ldrh	r2, [r7, #2]
 8005aee:	88b9      	ldrh	r1, [r7, #4]
 8005af0:	88f8      	ldrh	r0, [r7, #6]
 8005af2:	f7ff ff67 	bl	80059c4 <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x1,y2);
 8005af6:	883b      	ldrh	r3, [r7, #0]
 8005af8:	88fa      	ldrh	r2, [r7, #6]
 8005afa:	88b9      	ldrh	r1, [r7, #4]
 8005afc:	88f8      	ldrh	r0, [r7, #6]
 8005afe:	f7ff ff61 	bl	80059c4 <LCD_DrawLine>
	LCD_DrawLine(x1,y2,x2,y2);
 8005b02:	883b      	ldrh	r3, [r7, #0]
 8005b04:	887a      	ldrh	r2, [r7, #2]
 8005b06:	8839      	ldrh	r1, [r7, #0]
 8005b08:	88f8      	ldrh	r0, [r7, #6]
 8005b0a:	f7ff ff5b 	bl	80059c4 <LCD_DrawLine>
	LCD_DrawLine(x2,y1,x2,y2);
 8005b0e:	883b      	ldrh	r3, [r7, #0]
 8005b10:	887a      	ldrh	r2, [r7, #2]
 8005b12:	88b9      	ldrh	r1, [r7, #4]
 8005b14:	8878      	ldrh	r0, [r7, #2]
 8005b16:	f7ff ff55 	bl	80059c4 <LCD_DrawLine>
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd90      	pop	{r4, r7, pc}

08005b22 <LCD_Draw_Circle>:
//在指定位置画一个指定大小的圆
//(x,y):中心点
//r    :半径
void LCD_Draw_Circle(uint16_t x0,uint16_t y0,uint8_t r)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b086      	sub	sp, #24
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	4603      	mov	r3, r0
 8005b2a:	80fb      	strh	r3, [r7, #6]
 8005b2c:	460b      	mov	r3, r1
 8005b2e:	80bb      	strh	r3, [r7, #4]
 8005b30:	4613      	mov	r3, r2
 8005b32:	70fb      	strb	r3, [r7, #3]
	int a,b;
	int di;
	a=0;b=r;
 8005b34:	2300      	movs	r3, #0
 8005b36:	617b      	str	r3, [r7, #20]
 8005b38:	78fb      	ldrb	r3, [r7, #3]
 8005b3a:	613b      	str	r3, [r7, #16]
	di=3-(r<<1);             //判断下个点位置的标志
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	f1c3 0303 	rsb	r3, r3, #3
 8005b44:	60fb      	str	r3, [r7, #12]
	while(a<=b)
 8005b46:	e07f      	b.n	8005c48 <LCD_Draw_Circle+0x126>
	{
		LCD_DrawPoint(x0+a,y0-b);             //5
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	88fb      	ldrh	r3, [r7, #6]
 8005b4e:	4413      	add	r3, r2
 8005b50:	b298      	uxth	r0, r3
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	88ba      	ldrh	r2, [r7, #4]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	b29b      	uxth	r3, r3
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	f7fc f861 	bl	8001c24 <LCD_DrawPoint>
 		LCD_DrawPoint(x0+b,y0-a);             //0
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	88fb      	ldrh	r3, [r7, #6]
 8005b68:	4413      	add	r3, r2
 8005b6a:	b298      	uxth	r0, r3
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	88ba      	ldrh	r2, [r7, #4]
 8005b72:	1ad3      	subs	r3, r2, r3
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	4619      	mov	r1, r3
 8005b78:	f7fc f854 	bl	8001c24 <LCD_DrawPoint>
		LCD_DrawPoint(x0+b,y0+a);             //4
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	88fb      	ldrh	r3, [r7, #6]
 8005b82:	4413      	add	r3, r2
 8005b84:	b298      	uxth	r0, r3
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	b29a      	uxth	r2, r3
 8005b8a:	88bb      	ldrh	r3, [r7, #4]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	4619      	mov	r1, r3
 8005b92:	f7fc f847 	bl	8001c24 <LCD_DrawPoint>
		LCD_DrawPoint(x0+a,y0+b);             //6
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	88fb      	ldrh	r3, [r7, #6]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	b298      	uxth	r0, r3
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	88bb      	ldrh	r3, [r7, #4]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	4619      	mov	r1, r3
 8005bac:	f7fc f83a 	bl	8001c24 <LCD_DrawPoint>
		LCD_DrawPoint(x0-a,y0+b);             //1
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	1ad3      	subs	r3, r2, r3
 8005bb8:	b298      	uxth	r0, r3
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	88bb      	ldrh	r3, [r7, #4]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	4619      	mov	r1, r3
 8005bc6:	f7fc f82d 	bl	8001c24 <LCD_DrawPoint>
 		LCD_DrawPoint(x0-b,y0+a);
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	88fa      	ldrh	r2, [r7, #6]
 8005bd0:	1ad3      	subs	r3, r2, r3
 8005bd2:	b298      	uxth	r0, r3
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	88bb      	ldrh	r3, [r7, #4]
 8005bda:	4413      	add	r3, r2
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	4619      	mov	r1, r3
 8005be0:	f7fc f820 	bl	8001c24 <LCD_DrawPoint>
		LCD_DrawPoint(x0-a,y0-b);             //2
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	88fa      	ldrh	r2, [r7, #6]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	b298      	uxth	r0, r3
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	88ba      	ldrh	r2, [r7, #4]
 8005bf4:	1ad3      	subs	r3, r2, r3
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	f7fc f813 	bl	8001c24 <LCD_DrawPoint>
  		LCD_DrawPoint(x0-b,y0-a);             //7
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	88fa      	ldrh	r2, [r7, #6]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	b298      	uxth	r0, r3
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	88ba      	ldrh	r2, [r7, #4]
 8005c0e:	1ad3      	subs	r3, r2, r3
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	4619      	mov	r1, r3
 8005c14:	f7fc f806 	bl	8001c24 <LCD_DrawPoint>
		a++;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	617b      	str	r3, [r7, #20]
		//使用Bresenham算法画圆
		if(di<0)di +=4*a+6;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	da06      	bge.n	8005c32 <LCD_Draw_Circle+0x110>
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	3306      	adds	r3, #6
 8005c2a:	68fa      	ldr	r2, [r7, #12]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	e00a      	b.n	8005c48 <LCD_Draw_Circle+0x126>
		else
		{
			di+=10+4*(a-b);
 8005c32:	697a      	ldr	r2, [r7, #20]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	1ad3      	subs	r3, r2, r3
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	330a      	adds	r3, #10
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4413      	add	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
			b--;
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	3b01      	subs	r3, #1
 8005c46:	613b      	str	r3, [r7, #16]
	while(a<=b)
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	f77f af7b 	ble.w	8005b48 <LCD_Draw_Circle+0x26>
		}
	}
}
 8005c52:	bf00      	nop
 8005c54:	bf00      	nop
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 8005c5c:	b590      	push	{r4, r7, lr}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	4604      	mov	r4, r0
 8005c64:	4608      	mov	r0, r1
 8005c66:	4611      	mov	r1, r2
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4623      	mov	r3, r4
 8005c6c:	80fb      	strh	r3, [r7, #6]
 8005c6e:	4603      	mov	r3, r0
 8005c70:	80bb      	strh	r3, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	70fb      	strb	r3, [r7, #3]
 8005c76:	4613      	mov	r3, r2
 8005c78:	70bb      	strb	r3, [r7, #2]
    uint8_t temp,t1,t;
	uint16_t y0=y;
 8005c7a:	88bb      	ldrh	r3, [r7, #4]
 8005c7c:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 8005c7e:	78bb      	ldrb	r3, [r7, #2]
 8005c80:	08db      	lsrs	r3, r3, #3
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	461a      	mov	r2, r3
 8005c86:	78bb      	ldrb	r3, [r7, #2]
 8005c88:	f003 0307 	and.w	r3, r3, #7
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	bf14      	ite	ne
 8005c92:	2301      	movne	r3, #1
 8005c94:	2300      	moveq	r3, #0
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	4413      	add	r3, r2
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	78bb      	ldrb	r3, [r7, #2]
 8005c9e:	085b      	lsrs	r3, r3, #1
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	fb12 f303 	smulbb	r3, r2, r3
 8005ca6:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	3b20      	subs	r3, #32
 8005cac:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 8005cae:	2300      	movs	r3, #0
 8005cb0:	737b      	strb	r3, [r7, #13]
 8005cb2:	e069      	b.n	8005d88 <LCD_ShowChar+0x12c>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 8005cb4:	78bb      	ldrb	r3, [r7, #2]
 8005cb6:	2b0c      	cmp	r3, #12
 8005cb8:	d10b      	bne.n	8005cd2 <LCD_ShowChar+0x76>
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	7b79      	ldrb	r1, [r7, #13]
 8005cbe:	4838      	ldr	r0, [pc, #224]	; (8005da0 <LCD_ShowChar+0x144>)
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4403      	add	r3, r0
 8005cca:	440b      	add	r3, r1
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	73fb      	strb	r3, [r7, #15]
 8005cd0:	e019      	b.n	8005d06 <LCD_ShowChar+0xaa>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 8005cd2:	78bb      	ldrb	r3, [r7, #2]
 8005cd4:	2b10      	cmp	r3, #16
 8005cd6:	d108      	bne.n	8005cea <LCD_ShowChar+0x8e>
 8005cd8:	78fa      	ldrb	r2, [r7, #3]
 8005cda:	7b7b      	ldrb	r3, [r7, #13]
 8005cdc:	4931      	ldr	r1, [pc, #196]	; (8005da4 <LCD_ShowChar+0x148>)
 8005cde:	0112      	lsls	r2, r2, #4
 8005ce0:	440a      	add	r2, r1
 8005ce2:	4413      	add	r3, r2
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	73fb      	strb	r3, [r7, #15]
 8005ce8:	e00d      	b.n	8005d06 <LCD_ShowChar+0xaa>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 8005cea:	78bb      	ldrb	r3, [r7, #2]
 8005cec:	2b18      	cmp	r3, #24
 8005cee:	d150      	bne.n	8005d92 <LCD_ShowChar+0x136>
 8005cf0:	78fa      	ldrb	r2, [r7, #3]
 8005cf2:	7b79      	ldrb	r1, [r7, #13]
 8005cf4:	482c      	ldr	r0, [pc, #176]	; (8005da8 <LCD_ShowChar+0x14c>)
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	4413      	add	r3, r2
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	4403      	add	r3, r0
 8005d00:	440b      	add	r3, r1
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 8005d06:	2300      	movs	r3, #0
 8005d08:	73bb      	strb	r3, [r7, #14]
 8005d0a:	e035      	b.n	8005d78 <LCD_ShowChar+0x11c>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 8005d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	da07      	bge.n	8005d24 <LCD_ShowChar+0xc8>
 8005d14:	4b25      	ldr	r3, [pc, #148]	; (8005dac <LCD_ShowChar+0x150>)
 8005d16:	881a      	ldrh	r2, [r3, #0]
 8005d18:	88b9      	ldrh	r1, [r7, #4]
 8005d1a:	88fb      	ldrh	r3, [r7, #6]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fb ff9d 	bl	8001c5c <LCD_Fast_DrawPoint>
 8005d22:	e00a      	b.n	8005d3a <LCD_ShowChar+0xde>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 8005d24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d106      	bne.n	8005d3a <LCD_ShowChar+0xde>
 8005d2c:	4b20      	ldr	r3, [pc, #128]	; (8005db0 <LCD_ShowChar+0x154>)
 8005d2e:	881a      	ldrh	r2, [r3, #0]
 8005d30:	88b9      	ldrh	r1, [r7, #4]
 8005d32:	88fb      	ldrh	r3, [r7, #6]
 8005d34:	4618      	mov	r0, r3
 8005d36:	f7fb ff91 	bl	8001c5c <LCD_Fast_DrawPoint>
			temp<<=1;
 8005d3a:	7bfb      	ldrb	r3, [r7, #15]
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
			y++;
 8005d40:	88bb      	ldrh	r3, [r7, #4]
 8005d42:	3301      	adds	r3, #1
 8005d44:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 8005d46:	4b1b      	ldr	r3, [pc, #108]	; (8005db4 <LCD_ShowChar+0x158>)
 8005d48:	885b      	ldrh	r3, [r3, #2]
 8005d4a:	88ba      	ldrh	r2, [r7, #4]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d222      	bcs.n	8005d96 <LCD_ShowChar+0x13a>
			if((y-y0)==size)
 8005d50:	88ba      	ldrh	r2, [r7, #4]
 8005d52:	897b      	ldrh	r3, [r7, #10]
 8005d54:	1ad2      	subs	r2, r2, r3
 8005d56:	78bb      	ldrb	r3, [r7, #2]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d10a      	bne.n	8005d72 <LCD_ShowChar+0x116>
			{
				y=y0;
 8005d5c:	897b      	ldrh	r3, [r7, #10]
 8005d5e:	80bb      	strh	r3, [r7, #4]
				x++;
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	3301      	adds	r3, #1
 8005d64:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 8005d66:	4b13      	ldr	r3, [pc, #76]	; (8005db4 <LCD_ShowChar+0x158>)
 8005d68:	881b      	ldrh	r3, [r3, #0]
 8005d6a:	88fa      	ldrh	r2, [r7, #6]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d307      	bcc.n	8005d80 <LCD_ShowChar+0x124>
 8005d70:	e012      	b.n	8005d98 <LCD_ShowChar+0x13c>
		for(t1=0;t1<8;t1++)
 8005d72:	7bbb      	ldrb	r3, [r7, #14]
 8005d74:	3301      	adds	r3, #1
 8005d76:	73bb      	strb	r3, [r7, #14]
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	2b07      	cmp	r3, #7
 8005d7c:	d9c6      	bls.n	8005d0c <LCD_ShowChar+0xb0>
 8005d7e:	e000      	b.n	8005d82 <LCD_ShowChar+0x126>
				break;
 8005d80:	bf00      	nop
	for(t=0;t<csize;t++)
 8005d82:	7b7b      	ldrb	r3, [r7, #13]
 8005d84:	3301      	adds	r3, #1
 8005d86:	737b      	strb	r3, [r7, #13]
 8005d88:	7b7a      	ldrb	r2, [r7, #13]
 8005d8a:	7a7b      	ldrb	r3, [r7, #9]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d391      	bcc.n	8005cb4 <LCD_ShowChar+0x58>
 8005d90:	e002      	b.n	8005d98 <LCD_ShowChar+0x13c>
		else return;								//没有的字库
 8005d92:	bf00      	nop
 8005d94:	e000      	b.n	8005d98 <LCD_ShowChar+0x13c>
			if(y>=lcddev.height)return;		//超区域了
 8005d96:	bf00      	nop
			}
		}
	}
}
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd90      	pop	{r4, r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	08009650 	.word	0x08009650
 8005da4:	08009ac4 	.word	0x08009ac4
 8005da8:	0800a0b4 	.word	0x0800a0b4
 8005dac:	200000d4 	.word	0x200000d4
 8005db0:	20000000 	.word	0x20000000
 8005db4:	20000140 	.word	0x20000140

08005db8 <LCD_Pow>:
//m^n函数
//返回值:m^n次方.
uint32_t LCD_Pow(uint8_t m,uint8_t n)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	460a      	mov	r2, r1
 8005dc2:	71fb      	strb	r3, [r7, #7]
 8005dc4:	4613      	mov	r3, r2
 8005dc6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8005dcc:	e004      	b.n	8005dd8 <LCD_Pow+0x20>
 8005dce:	79fa      	ldrb	r2, [r7, #7]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	fb02 f303 	mul.w	r3, r2, r3
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	79bb      	ldrb	r3, [r7, #6]
 8005dda:	1e5a      	subs	r2, r3, #1
 8005ddc:	71ba      	strb	r2, [r7, #6]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1f5      	bne.n	8005dce <LCD_Pow+0x16>
	return result;
 8005de2:	68fb      	ldr	r3, [r7, #12]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <LCD_ShowNum>:
//len :数字的位数
//size:字体大小
//color:颜色
//num:数值(0~4294967295);
void LCD_ShowNum(uint16_t x,uint16_t y,uint32_t num,uint8_t len,uint8_t size)
{
 8005df0:	b590      	push	{r4, r7, lr}
 8005df2:	b089      	sub	sp, #36	; 0x24
 8005df4:	af02      	add	r7, sp, #8
 8005df6:	60ba      	str	r2, [r7, #8]
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	81fb      	strh	r3, [r7, #14]
 8005dfe:	460b      	mov	r3, r1
 8005e00:	81bb      	strh	r3, [r7, #12]
 8005e02:	4613      	mov	r3, r2
 8005e04:	71fb      	strb	r3, [r7, #7]
	uint8_t t,temp;
	uint8_t enshow=0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	75bb      	strb	r3, [r7, #22]
	for(t=0;t<len;t++)
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	75fb      	strb	r3, [r7, #23]
 8005e0e:	e055      	b.n	8005ebc <LCD_ShowNum+0xcc>
	{
		temp=(num/LCD_Pow(10,len-t-1))%10;
 8005e10:	79fa      	ldrb	r2, [r7, #7]
 8005e12:	7dfb      	ldrb	r3, [r7, #23]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	200a      	movs	r0, #10
 8005e20:	f7ff ffca 	bl	8005db8 <LCD_Pow>
 8005e24:	4602      	mov	r2, r0
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e2c:	4b28      	ldr	r3, [pc, #160]	; (8005ed0 <LCD_ShowNum+0xe0>)
 8005e2e:	fba3 2301 	umull	r2, r3, r3, r1
 8005e32:	08da      	lsrs	r2, r3, #3
 8005e34:	4613      	mov	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	4413      	add	r3, r2
 8005e3a:	005b      	lsls	r3, r3, #1
 8005e3c:	1aca      	subs	r2, r1, r3
 8005e3e:	4613      	mov	r3, r2
 8005e40:	757b      	strb	r3, [r7, #21]
		if(enshow==0&&t<(len-1))
 8005e42:	7dbb      	ldrb	r3, [r7, #22]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d11f      	bne.n	8005e88 <LCD_ShowNum+0x98>
 8005e48:	7dfa      	ldrb	r2, [r7, #23]
 8005e4a:	79fb      	ldrb	r3, [r7, #7]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	da1a      	bge.n	8005e88 <LCD_ShowNum+0x98>
		{
			if(temp==0)
 8005e52:	7d7b      	ldrb	r3, [r7, #21]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d115      	bne.n	8005e84 <LCD_ShowNum+0x94>
			{
				LCD_ShowChar(x+(size/2)*t,y,' ',size,0);
 8005e58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e5c:	085b      	lsrs	r3, r3, #1
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	fb12 f303 	smulbb	r3, r2, r3
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	89fb      	ldrh	r3, [r7, #14]
 8005e6e:	4413      	add	r3, r2
 8005e70:	b298      	uxth	r0, r3
 8005e72:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e76:	89b9      	ldrh	r1, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	9200      	str	r2, [sp, #0]
 8005e7c:	2220      	movs	r2, #32
 8005e7e:	f7ff feed 	bl	8005c5c <LCD_ShowChar>
				continue;
 8005e82:	e018      	b.n	8005eb6 <LCD_ShowNum+0xc6>
			}else enshow=1;
 8005e84:	2301      	movs	r3, #1
 8005e86:	75bb      	strb	r3, [r7, #22]

		}
	 	LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,0);
 8005e88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e8c:	085b      	lsrs	r3, r3, #1
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	7dfb      	ldrb	r3, [r7, #23]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	fb12 f303 	smulbb	r3, r2, r3
 8005e9a:	b29a      	uxth	r2, r3
 8005e9c:	89fb      	ldrh	r3, [r7, #14]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	b298      	uxth	r0, r3
 8005ea2:	7d7b      	ldrb	r3, [r7, #21]
 8005ea4:	3330      	adds	r3, #48	; 0x30
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005eac:	89b9      	ldrh	r1, [r7, #12]
 8005eae:	2400      	movs	r4, #0
 8005eb0:	9400      	str	r4, [sp, #0]
 8005eb2:	f7ff fed3 	bl	8005c5c <LCD_ShowChar>
	for(t=0;t<len;t++)
 8005eb6:	7dfb      	ldrb	r3, [r7, #23]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	75fb      	strb	r3, [r7, #23]
 8005ebc:	7dfa      	ldrb	r2, [r7, #23]
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d3a5      	bcc.n	8005e10 <LCD_ShowNum+0x20>
	}
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop
 8005ec8:	371c      	adds	r7, #28
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd90      	pop	{r4, r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	cccccccd 	.word	0xcccccccd

08005ed4 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 8005ed4:	b590      	push	{r4, r7, lr}
 8005ed6:	b087      	sub	sp, #28
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	4604      	mov	r4, r0
 8005edc:	4608      	mov	r0, r1
 8005ede:	4611      	mov	r1, r2
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	4623      	mov	r3, r4
 8005ee4:	80fb      	strh	r3, [r7, #6]
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	80bb      	strh	r3, [r7, #4]
 8005eea:	460b      	mov	r3, r1
 8005eec:	807b      	strh	r3, [r7, #2]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8005ef6:	887a      	ldrh	r2, [r7, #2]
 8005ef8:	88fb      	ldrh	r3, [r7, #6]
 8005efa:	4413      	add	r3, r2
 8005efc:	807b      	strh	r3, [r7, #2]
	height+=y;
 8005efe:	883a      	ldrh	r2, [r7, #0]
 8005f00:	88bb      	ldrh	r3, [r7, #4]
 8005f02:	4413      	add	r3, r2
 8005f04:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8005f06:	e024      	b.n	8005f52 <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 8005f08:	88fa      	ldrh	r2, [r7, #6]
 8005f0a:	887b      	ldrh	r3, [r7, #2]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d307      	bcc.n	8005f20 <LCD_ShowString+0x4c>
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
 8005f12:	80fb      	strh	r3, [r7, #6]
 8005f14:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	88bb      	ldrh	r3, [r7, #4]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 8005f20:	88ba      	ldrh	r2, [r7, #4]
 8005f22:	883b      	ldrh	r3, [r7, #0]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d21d      	bcs.n	8005f64 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,0);
 8005f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2a:	781a      	ldrb	r2, [r3, #0]
 8005f2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f30:	88b9      	ldrh	r1, [r7, #4]
 8005f32:	88f8      	ldrh	r0, [r7, #6]
 8005f34:	2400      	movs	r4, #0
 8005f36:	9400      	str	r4, [sp, #0]
 8005f38:	f7ff fe90 	bl	8005c5c <LCD_ShowChar>
        x+=size/2;
 8005f3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	88fb      	ldrh	r3, [r7, #6]
 8005f48:	4413      	add	r3, r2
 8005f4a:	80fb      	strh	r3, [r7, #6]
        p++;
 8005f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4e:	3301      	adds	r3, #1
 8005f50:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8005f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	2b7e      	cmp	r3, #126	; 0x7e
 8005f58:	d805      	bhi.n	8005f66 <LCD_ShowString+0x92>
 8005f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	2b1f      	cmp	r3, #31
 8005f60:	d8d2      	bhi.n	8005f08 <LCD_ShowString+0x34>
    }
}
 8005f62:	e000      	b.n	8005f66 <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 8005f64:	bf00      	nop
}
 8005f66:	bf00      	nop
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd90      	pop	{r4, r7, pc}
	...

08005f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f76:	f001 fbc3 	bl	8007700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005f7a:	f000 f871 	bl	8006060 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005f7e:	f7fb f9af 	bl	80012e0 <MX_GPIO_Init>
  MX_DAC_Init();
 8005f82:	f7fb f84b 	bl	800101c <MX_DAC_Init>
  MX_FSMC_Init();
 8005f86:	f7fb f8b7 	bl	80010f8 <MX_FSMC_Init>
  MX_TIM8_Init();
 8005f8a:	f000 fac9 	bl	8006520 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim8);
 8005f8e:	482f      	ldr	r0, [pc, #188]	; (800604c <main+0xdc>)
 8005f90:	f002 fcc8 	bl	8008924 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac,DAC1_CHANNEL_1);
 8005f94:	2100      	movs	r1, #0
 8005f96:	482e      	ldr	r0, [pc, #184]	; (8006050 <main+0xe0>)
 8005f98:	f001 fd98 	bl	8007acc <HAL_DAC_Start>

  delay_init(168);
 8005f9c:	20a8      	movs	r0, #168	; 0xa8
 8005f9e:	f7fa ffd3 	bl	8000f48 <delay_init>
  LCD_Init();
 8005fa2:	f7fc f8b5 	bl	8002110 <LCD_Init>
	tp_dev.init();
 8005fa6:	4b2b      	ldr	r3, [pc, #172]	; (8006054 <main+0xe4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4798      	blx	r3

  POINT_COLOR = RED;
 8005fac:	4b2a      	ldr	r3, [pc, #168]	; (8006058 <main+0xe8>)
 8005fae:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8005fb2:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  tp_dev.scan(0);
 8005fb4:	4b27      	ldr	r3, [pc, #156]	; (8006054 <main+0xe4>)
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	2000      	movs	r0, #0
 8005fba:	4798      	blx	r3
	  LCD_DrawRectangle(50, 50, 100, 100);
 8005fbc:	2364      	movs	r3, #100	; 0x64
 8005fbe:	2264      	movs	r2, #100	; 0x64
 8005fc0:	2132      	movs	r1, #50	; 0x32
 8005fc2:	2032      	movs	r0, #50	; 0x32
 8005fc4:	f7ff fd82 	bl	8005acc <LCD_DrawRectangle>
	  if(tp_dev.x[0]>50&&tp_dev.y[0]>50&&tp_dev.x[0]<100&&tp_dev.y[0]<100&&flagaa==0)
 8005fc8:	4b22      	ldr	r3, [pc, #136]	; (8006054 <main+0xe4>)
 8005fca:	899b      	ldrh	r3, [r3, #12]
 8005fcc:	2b32      	cmp	r3, #50	; 0x32
 8005fce:	d91c      	bls.n	800600a <main+0x9a>
 8005fd0:	4b20      	ldr	r3, [pc, #128]	; (8006054 <main+0xe4>)
 8005fd2:	8adb      	ldrh	r3, [r3, #22]
 8005fd4:	2b32      	cmp	r3, #50	; 0x32
 8005fd6:	d918      	bls.n	800600a <main+0x9a>
 8005fd8:	4b1e      	ldr	r3, [pc, #120]	; (8006054 <main+0xe4>)
 8005fda:	899b      	ldrh	r3, [r3, #12]
 8005fdc:	2b63      	cmp	r3, #99	; 0x63
 8005fde:	d814      	bhi.n	800600a <main+0x9a>
 8005fe0:	4b1c      	ldr	r3, [pc, #112]	; (8006054 <main+0xe4>)
 8005fe2:	8adb      	ldrh	r3, [r3, #22]
 8005fe4:	2b63      	cmp	r3, #99	; 0x63
 8005fe6:	d810      	bhi.n	800600a <main+0x9a>
 8005fe8:	4b1c      	ldr	r3, [pc, #112]	; (800605c <main+0xec>)
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10c      	bne.n	800600a <main+0x9a>
	  {
		  LCD_Color_Fill(50, 50, 100, 100,GRAYBLUE);
 8005ff0:	f245 4358 	movw	r3, #21592	; 0x5458
 8005ff4:	9300      	str	r3, [sp, #0]
 8005ff6:	2364      	movs	r3, #100	; 0x64
 8005ff8:	2264      	movs	r2, #100	; 0x64
 8005ffa:	2132      	movs	r1, #50	; 0x32
 8005ffc:	2032      	movs	r0, #50	; 0x32
 8005ffe:	f7ff fc93 	bl	8005928 <LCD_Color_Fill>
		  flagaa=1;
 8006002:	4b16      	ldr	r3, [pc, #88]	; (800605c <main+0xec>)
 8006004:	2201      	movs	r2, #1
 8006006:	701a      	strb	r2, [r3, #0]
 8006008:	e01f      	b.n	800604a <main+0xda>
	  }
	  else if(tp_dev.x[0]>50&&tp_dev.y[0]>50&&tp_dev.x[0]<100&&tp_dev.y[0]<100&&flagaa!=0)
 800600a:	4b12      	ldr	r3, [pc, #72]	; (8006054 <main+0xe4>)
 800600c:	899b      	ldrh	r3, [r3, #12]
 800600e:	2b32      	cmp	r3, #50	; 0x32
 8006010:	d9d0      	bls.n	8005fb4 <main+0x44>
 8006012:	4b10      	ldr	r3, [pc, #64]	; (8006054 <main+0xe4>)
 8006014:	8adb      	ldrh	r3, [r3, #22]
 8006016:	2b32      	cmp	r3, #50	; 0x32
 8006018:	d9cc      	bls.n	8005fb4 <main+0x44>
 800601a:	4b0e      	ldr	r3, [pc, #56]	; (8006054 <main+0xe4>)
 800601c:	899b      	ldrh	r3, [r3, #12]
 800601e:	2b63      	cmp	r3, #99	; 0x63
 8006020:	d8c8      	bhi.n	8005fb4 <main+0x44>
 8006022:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <main+0xe4>)
 8006024:	8adb      	ldrh	r3, [r3, #22]
 8006026:	2b63      	cmp	r3, #99	; 0x63
 8006028:	d8c4      	bhi.n	8005fb4 <main+0x44>
 800602a:	4b0c      	ldr	r3, [pc, #48]	; (800605c <main+0xec>)
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d0c0      	beq.n	8005fb4 <main+0x44>
	  {
		  LCD_Color_Fill(50, 50, 100, 100,DARKBLUE);
 8006032:	f240 13cf 	movw	r3, #463	; 0x1cf
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	2364      	movs	r3, #100	; 0x64
 800603a:	2264      	movs	r2, #100	; 0x64
 800603c:	2132      	movs	r1, #50	; 0x32
 800603e:	2032      	movs	r0, #50	; 0x32
 8006040:	f7ff fc72 	bl	8005928 <LCD_Color_Fill>
		  flagaa=0;
 8006044:	4b05      	ldr	r3, [pc, #20]	; (800605c <main+0xec>)
 8006046:	2200      	movs	r2, #0
 8006048:	701a      	strb	r2, [r3, #0]
	  tp_dev.scan(0);
 800604a:	e7b3      	b.n	8005fb4 <main+0x44>
 800604c:	20000150 	.word	0x20000150
 8006050:	200000dc 	.word	0x200000dc
 8006054:	20000008 	.word	0x20000008
 8006058:	200000d4 	.word	0x200000d4
 800605c:	200000d6 	.word	0x200000d6

08006060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b094      	sub	sp, #80	; 0x50
 8006064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006066:	f107 0320 	add.w	r3, r7, #32
 800606a:	2230      	movs	r2, #48	; 0x30
 800606c:	2100      	movs	r1, #0
 800606e:	4618      	mov	r0, r3
 8006070:	f003 f98a 	bl	8009388 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006074:	f107 030c 	add.w	r3, r7, #12
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	605a      	str	r2, [r3, #4]
 800607e:	609a      	str	r2, [r3, #8]
 8006080:	60da      	str	r2, [r3, #12]
 8006082:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006084:	2300      	movs	r3, #0
 8006086:	60bb      	str	r3, [r7, #8]
 8006088:	4b28      	ldr	r3, [pc, #160]	; (800612c <SystemClock_Config+0xcc>)
 800608a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608c:	4a27      	ldr	r2, [pc, #156]	; (800612c <SystemClock_Config+0xcc>)
 800608e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006092:	6413      	str	r3, [r2, #64]	; 0x40
 8006094:	4b25      	ldr	r3, [pc, #148]	; (800612c <SystemClock_Config+0xcc>)
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609c:	60bb      	str	r3, [r7, #8]
 800609e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80060a0:	2300      	movs	r3, #0
 80060a2:	607b      	str	r3, [r7, #4]
 80060a4:	4b22      	ldr	r3, [pc, #136]	; (8006130 <SystemClock_Config+0xd0>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a21      	ldr	r2, [pc, #132]	; (8006130 <SystemClock_Config+0xd0>)
 80060aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060ae:	6013      	str	r3, [r2, #0]
 80060b0:	4b1f      	ldr	r3, [pc, #124]	; (8006130 <SystemClock_Config+0xd0>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060b8:	607b      	str	r3, [r7, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80060bc:	2301      	movs	r3, #1
 80060be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80060c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80060c6:	2302      	movs	r3, #2
 80060c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80060ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80060ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80060d0:	2304      	movs	r3, #4
 80060d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80060d4:	23a8      	movs	r3, #168	; 0xa8
 80060d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80060d8:	2302      	movs	r3, #2
 80060da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80060dc:	2304      	movs	r3, #4
 80060de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80060e0:	f107 0320 	add.w	r3, r7, #32
 80060e4:	4618      	mov	r0, r3
 80060e6:	f001 ff49 	bl	8007f7c <HAL_RCC_OscConfig>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80060f0:	f000 f820 	bl	8006134 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80060f4:	230f      	movs	r3, #15
 80060f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80060f8:	2302      	movs	r3, #2
 80060fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80060fc:	2300      	movs	r3, #0
 80060fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006100:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006104:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8006106:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800610a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800610c:	f107 030c 	add.w	r3, r7, #12
 8006110:	2105      	movs	r1, #5
 8006112:	4618      	mov	r0, r3
 8006114:	f002 f9aa 	bl	800846c <HAL_RCC_ClockConfig>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d001      	beq.n	8006122 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800611e:	f000 f809 	bl	8006134 <Error_Handler>
  }
}
 8006122:	bf00      	nop
 8006124:	3750      	adds	r7, #80	; 0x50
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	40023800 	.word	0x40023800
 8006130:	40007000 	.word	0x40007000

08006134 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006134:	b480      	push	{r7}
 8006136:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006138:	b672      	cpsid	i
}
 800613a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800613c:	e7fe      	b.n	800613c <Error_Handler+0x8>
	...

08006140 <IIC_Init>:
//All rights reserved
//////////////////////////////////////////////////////////////////////////////////

//初始化IIC
void IIC_Init(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
//   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//普通输出模式
//   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
//   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
//   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
//   GPIO_Init(GPIOB, &GPIO_InitStructure);//初始化
	IIC_SCL=1;
 8006144:	4b05      	ldr	r3, [pc, #20]	; (800615c <IIC_Init+0x1c>)
 8006146:	2201      	movs	r2, #1
 8006148:	601a      	str	r2, [r3, #0]
	IIC_SDA=1;
 800614a:	4b05      	ldr	r3, [pc, #20]	; (8006160 <IIC_Init+0x20>)
 800614c:	2201      	movs	r2, #1
 800614e:	601a      	str	r2, [r3, #0]
}
 8006150:	bf00      	nop
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	424082a0 	.word	0x424082a0
 8006160:	424082a4 	.word	0x424082a4

08006164 <IIC_Start>:
//产生IIC起始信号
void IIC_Start(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
	SDA_OUT();     //sda线输出
 8006168:	4b0f      	ldr	r3, [pc, #60]	; (80061a8 <IIC_Start+0x44>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a0e      	ldr	r2, [pc, #56]	; (80061a8 <IIC_Start+0x44>)
 800616e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	4b0c      	ldr	r3, [pc, #48]	; (80061a8 <IIC_Start+0x44>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a0b      	ldr	r2, [pc, #44]	; (80061a8 <IIC_Start+0x44>)
 800617a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800617e:	6013      	str	r3, [r2, #0]
	IIC_SDA=1;
 8006180:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <IIC_Start+0x48>)
 8006182:	2201      	movs	r2, #1
 8006184:	601a      	str	r2, [r3, #0]
	IIC_SCL=1;
 8006186:	4b0a      	ldr	r3, [pc, #40]	; (80061b0 <IIC_Start+0x4c>)
 8006188:	2201      	movs	r2, #1
 800618a:	601a      	str	r2, [r3, #0]
	delay_us(4);
 800618c:	2004      	movs	r0, #4
 800618e:	f7fa feed 	bl	8000f6c <delay_us>
 	IIC_SDA=0;//START:when CLK is high,DATA change form high to low
 8006192:	4b06      	ldr	r3, [pc, #24]	; (80061ac <IIC_Start+0x48>)
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]
	delay_us(4);
 8006198:	2004      	movs	r0, #4
 800619a:	f7fa fee7 	bl	8000f6c <delay_us>
	IIC_SCL=0;//钳住I2C总线，准备发送或接收数据
 800619e:	4b04      	ldr	r3, [pc, #16]	; (80061b0 <IIC_Start+0x4c>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	601a      	str	r2, [r3, #0]
}
 80061a4:	bf00      	nop
 80061a6:	bd80      	pop	{r7, pc}
 80061a8:	40020400 	.word	0x40020400
 80061ac:	424082a4 	.word	0x424082a4
 80061b0:	424082a0 	.word	0x424082a0

080061b4 <IIC_Stop>:
//产生IIC停止信号
void IIC_Stop(void)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	af00      	add	r7, sp, #0
	SDA_OUT();//sda线输出
 80061b8:	4b0f      	ldr	r3, [pc, #60]	; (80061f8 <IIC_Stop+0x44>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a0e      	ldr	r2, [pc, #56]	; (80061f8 <IIC_Stop+0x44>)
 80061be:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80061c2:	6013      	str	r3, [r2, #0]
 80061c4:	4b0c      	ldr	r3, [pc, #48]	; (80061f8 <IIC_Stop+0x44>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a0b      	ldr	r2, [pc, #44]	; (80061f8 <IIC_Stop+0x44>)
 80061ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80061ce:	6013      	str	r3, [r2, #0]
	IIC_SCL=0;
 80061d0:	4b0a      	ldr	r3, [pc, #40]	; (80061fc <IIC_Stop+0x48>)
 80061d2:	2200      	movs	r2, #0
 80061d4:	601a      	str	r2, [r3, #0]
	IIC_SDA=0;//STOP:when CLK is high DATA change form low to high
 80061d6:	4b0a      	ldr	r3, [pc, #40]	; (8006200 <IIC_Stop+0x4c>)
 80061d8:	2200      	movs	r2, #0
 80061da:	601a      	str	r2, [r3, #0]
 	delay_us(4);
 80061dc:	2004      	movs	r0, #4
 80061de:	f7fa fec5 	bl	8000f6c <delay_us>
	IIC_SCL=1;
 80061e2:	4b06      	ldr	r3, [pc, #24]	; (80061fc <IIC_Stop+0x48>)
 80061e4:	2201      	movs	r2, #1
 80061e6:	601a      	str	r2, [r3, #0]
	IIC_SDA=1;//发送I2C总线结束信号
 80061e8:	4b05      	ldr	r3, [pc, #20]	; (8006200 <IIC_Stop+0x4c>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	601a      	str	r2, [r3, #0]
	delay_us(4);
 80061ee:	2004      	movs	r0, #4
 80061f0:	f7fa febc 	bl	8000f6c <delay_us>
}
 80061f4:	bf00      	nop
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	40020400 	.word	0x40020400
 80061fc:	424082a0 	.word	0x424082a0
 8006200:	424082a4 	.word	0x424082a4

08006204 <IIC_Wait_Ack>:
//等待应答信号到来
//返回值：1，接收应答失败
//        0，接收应答成功
u8 IIC_Wait_Ack(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
	u8 ucErrTime=0;
 800620a:	2300      	movs	r3, #0
 800620c:	71fb      	strb	r3, [r7, #7]
	SDA_IN();      //SDA设置为输入
 800620e:	4b16      	ldr	r3, [pc, #88]	; (8006268 <IIC_Wait_Ack+0x64>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a15      	ldr	r2, [pc, #84]	; (8006268 <IIC_Wait_Ack+0x64>)
 8006214:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8006218:	6013      	str	r3, [r2, #0]
 800621a:	4b13      	ldr	r3, [pc, #76]	; (8006268 <IIC_Wait_Ack+0x64>)
 800621c:	4a12      	ldr	r2, [pc, #72]	; (8006268 <IIC_Wait_Ack+0x64>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	6013      	str	r3, [r2, #0]
	IIC_SDA=1;delay_us(1);
 8006222:	4b12      	ldr	r3, [pc, #72]	; (800626c <IIC_Wait_Ack+0x68>)
 8006224:	2201      	movs	r2, #1
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	2001      	movs	r0, #1
 800622a:	f7fa fe9f 	bl	8000f6c <delay_us>
	IIC_SCL=1;delay_us(1);
 800622e:	4b10      	ldr	r3, [pc, #64]	; (8006270 <IIC_Wait_Ack+0x6c>)
 8006230:	2201      	movs	r2, #1
 8006232:	601a      	str	r2, [r3, #0]
 8006234:	2001      	movs	r0, #1
 8006236:	f7fa fe99 	bl	8000f6c <delay_us>
	while(READ_SDA)
 800623a:	e009      	b.n	8006250 <IIC_Wait_Ack+0x4c>
	{
		ucErrTime++;
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	3301      	adds	r3, #1
 8006240:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 8006242:	79fb      	ldrb	r3, [r7, #7]
 8006244:	2bfa      	cmp	r3, #250	; 0xfa
 8006246:	d903      	bls.n	8006250 <IIC_Wait_Ack+0x4c>
		{
			IIC_Stop();
 8006248:	f7ff ffb4 	bl	80061b4 <IIC_Stop>
			return 1;
 800624c:	2301      	movs	r3, #1
 800624e:	e007      	b.n	8006260 <IIC_Wait_Ack+0x5c>
	while(READ_SDA)
 8006250:	4b08      	ldr	r3, [pc, #32]	; (8006274 <IIC_Wait_Ack+0x70>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d1f1      	bne.n	800623c <IIC_Wait_Ack+0x38>
		}
	}
	IIC_SCL=0;//时钟输出0
 8006258:	4b05      	ldr	r3, [pc, #20]	; (8006270 <IIC_Wait_Ack+0x6c>)
 800625a:	2200      	movs	r2, #0
 800625c:	601a      	str	r2, [r3, #0]
	return 0;
 800625e:	2300      	movs	r3, #0
}
 8006260:	4618      	mov	r0, r3
 8006262:	3708      	adds	r7, #8
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40020400 	.word	0x40020400
 800626c:	424082a4 	.word	0x424082a4
 8006270:	424082a0 	.word	0x424082a0
 8006274:	42408224 	.word	0x42408224

08006278 <IIC_Ack>:
//产生ACK应答
void IIC_Ack(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
	IIC_SCL=0;
 800627c:	4b0f      	ldr	r3, [pc, #60]	; (80062bc <IIC_Ack+0x44>)
 800627e:	2200      	movs	r2, #0
 8006280:	601a      	str	r2, [r3, #0]
	SDA_OUT();
 8006282:	4b0f      	ldr	r3, [pc, #60]	; (80062c0 <IIC_Ack+0x48>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a0e      	ldr	r2, [pc, #56]	; (80062c0 <IIC_Ack+0x48>)
 8006288:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	4b0c      	ldr	r3, [pc, #48]	; (80062c0 <IIC_Ack+0x48>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a0b      	ldr	r2, [pc, #44]	; (80062c0 <IIC_Ack+0x48>)
 8006294:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006298:	6013      	str	r3, [r2, #0]
	IIC_SDA=0;
 800629a:	4b0a      	ldr	r3, [pc, #40]	; (80062c4 <IIC_Ack+0x4c>)
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]
	delay_us(2);
 80062a0:	2002      	movs	r0, #2
 80062a2:	f7fa fe63 	bl	8000f6c <delay_us>
	IIC_SCL=1;
 80062a6:	4b05      	ldr	r3, [pc, #20]	; (80062bc <IIC_Ack+0x44>)
 80062a8:	2201      	movs	r2, #1
 80062aa:	601a      	str	r2, [r3, #0]
	delay_us(2);
 80062ac:	2002      	movs	r0, #2
 80062ae:	f7fa fe5d 	bl	8000f6c <delay_us>
	IIC_SCL=0;
 80062b2:	4b02      	ldr	r3, [pc, #8]	; (80062bc <IIC_Ack+0x44>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	601a      	str	r2, [r3, #0]
}
 80062b8:	bf00      	nop
 80062ba:	bd80      	pop	{r7, pc}
 80062bc:	424082a0 	.word	0x424082a0
 80062c0:	40020400 	.word	0x40020400
 80062c4:	424082a4 	.word	0x424082a4

080062c8 <IIC_NAck>:
//不产生ACK应答
void IIC_NAck(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
	IIC_SCL=0;
 80062cc:	4b0f      	ldr	r3, [pc, #60]	; (800630c <IIC_NAck+0x44>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]
	SDA_OUT();
 80062d2:	4b0f      	ldr	r3, [pc, #60]	; (8006310 <IIC_NAck+0x48>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a0e      	ldr	r2, [pc, #56]	; (8006310 <IIC_NAck+0x48>)
 80062d8:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	4b0c      	ldr	r3, [pc, #48]	; (8006310 <IIC_NAck+0x48>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a0b      	ldr	r2, [pc, #44]	; (8006310 <IIC_NAck+0x48>)
 80062e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062e8:	6013      	str	r3, [r2, #0]
	IIC_SDA=1;
 80062ea:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <IIC_NAck+0x4c>)
 80062ec:	2201      	movs	r2, #1
 80062ee:	601a      	str	r2, [r3, #0]
	delay_us(2);
 80062f0:	2002      	movs	r0, #2
 80062f2:	f7fa fe3b 	bl	8000f6c <delay_us>
	IIC_SCL=1;
 80062f6:	4b05      	ldr	r3, [pc, #20]	; (800630c <IIC_NAck+0x44>)
 80062f8:	2201      	movs	r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
	delay_us(2);
 80062fc:	2002      	movs	r0, #2
 80062fe:	f7fa fe35 	bl	8000f6c <delay_us>
	IIC_SCL=0;
 8006302:	4b02      	ldr	r3, [pc, #8]	; (800630c <IIC_NAck+0x44>)
 8006304:	2200      	movs	r2, #0
 8006306:	601a      	str	r2, [r3, #0]
}
 8006308:	bf00      	nop
 800630a:	bd80      	pop	{r7, pc}
 800630c:	424082a0 	.word	0x424082a0
 8006310:	40020400 	.word	0x40020400
 8006314:	424082a4 	.word	0x424082a4

08006318 <IIC_Send_Byte>:
//IIC发送一个字节
//返回从机有无应答
//1，有应答
//0，无应答
void IIC_Send_Byte(u8 txd)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	71fb      	strb	r3, [r7, #7]
    u8 t;
	SDA_OUT();
 8006322:	4b1a      	ldr	r3, [pc, #104]	; (800638c <IIC_Send_Byte+0x74>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a19      	ldr	r2, [pc, #100]	; (800638c <IIC_Send_Byte+0x74>)
 8006328:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	4b17      	ldr	r3, [pc, #92]	; (800638c <IIC_Send_Byte+0x74>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a16      	ldr	r2, [pc, #88]	; (800638c <IIC_Send_Byte+0x74>)
 8006334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006338:	6013      	str	r3, [r2, #0]
    IIC_SCL=0;//拉低时钟开始数据传输
 800633a:	4b15      	ldr	r3, [pc, #84]	; (8006390 <IIC_Send_Byte+0x78>)
 800633c:	2200      	movs	r2, #0
 800633e:	601a      	str	r2, [r3, #0]
    for(t=0;t<8;t++)
 8006340:	2300      	movs	r3, #0
 8006342:	73fb      	strb	r3, [r7, #15]
 8006344:	e019      	b.n	800637a <IIC_Send_Byte+0x62>
    {
        IIC_SDA=(txd&0x80)>>7;
 8006346:	79fb      	ldrb	r3, [r7, #7]
 8006348:	09db      	lsrs	r3, r3, #7
 800634a:	b2da      	uxtb	r2, r3
 800634c:	4b11      	ldr	r3, [pc, #68]	; (8006394 <IIC_Send_Byte+0x7c>)
 800634e:	601a      	str	r2, [r3, #0]
        txd<<=1;
 8006350:	79fb      	ldrb	r3, [r7, #7]
 8006352:	005b      	lsls	r3, r3, #1
 8006354:	71fb      	strb	r3, [r7, #7]
		delay_us(2);   //对TEA5767这三个延时都是必须的
 8006356:	2002      	movs	r0, #2
 8006358:	f7fa fe08 	bl	8000f6c <delay_us>
		IIC_SCL=1;
 800635c:	4b0c      	ldr	r3, [pc, #48]	; (8006390 <IIC_Send_Byte+0x78>)
 800635e:	2201      	movs	r2, #1
 8006360:	601a      	str	r2, [r3, #0]
		delay_us(2);
 8006362:	2002      	movs	r0, #2
 8006364:	f7fa fe02 	bl	8000f6c <delay_us>
		IIC_SCL=0;
 8006368:	4b09      	ldr	r3, [pc, #36]	; (8006390 <IIC_Send_Byte+0x78>)
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]
		delay_us(2);
 800636e:	2002      	movs	r0, #2
 8006370:	f7fa fdfc 	bl	8000f6c <delay_us>
    for(t=0;t<8;t++)
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	3301      	adds	r3, #1
 8006378:	73fb      	strb	r3, [r7, #15]
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	2b07      	cmp	r3, #7
 800637e:	d9e2      	bls.n	8006346 <IIC_Send_Byte+0x2e>
    }
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	3710      	adds	r7, #16
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	40020400 	.word	0x40020400
 8006390:	424082a0 	.word	0x424082a0
 8006394:	424082a4 	.word	0x424082a4

08006398 <IIC_Read_Byte>:
//读1个字节，ack=1时，发送ACK，ack=0，发送nACK
u8 IIC_Read_Byte(unsigned char ack)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	4603      	mov	r3, r0
 80063a0:	71fb      	strb	r3, [r7, #7]
	unsigned char i,receive=0;
 80063a2:	2300      	movs	r3, #0
 80063a4:	73bb      	strb	r3, [r7, #14]
	SDA_IN();//SDA设置为输入
 80063a6:	4b1b      	ldr	r3, [pc, #108]	; (8006414 <IIC_Read_Byte+0x7c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a1a      	ldr	r2, [pc, #104]	; (8006414 <IIC_Read_Byte+0x7c>)
 80063ac:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80063b0:	6013      	str	r3, [r2, #0]
 80063b2:	4b18      	ldr	r3, [pc, #96]	; (8006414 <IIC_Read_Byte+0x7c>)
 80063b4:	4a17      	ldr	r2, [pc, #92]	; (8006414 <IIC_Read_Byte+0x7c>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	6013      	str	r3, [r2, #0]
    for(i=0;i<8;i++ )
 80063ba:	2300      	movs	r3, #0
 80063bc:	73fb      	strb	r3, [r7, #15]
 80063be:	e018      	b.n	80063f2 <IIC_Read_Byte+0x5a>
	{
        IIC_SCL=0;
 80063c0:	4b15      	ldr	r3, [pc, #84]	; (8006418 <IIC_Read_Byte+0x80>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]
        delay_us(2);
 80063c6:	2002      	movs	r0, #2
 80063c8:	f7fa fdd0 	bl	8000f6c <delay_us>
		IIC_SCL=1;
 80063cc:	4b12      	ldr	r3, [pc, #72]	; (8006418 <IIC_Read_Byte+0x80>)
 80063ce:	2201      	movs	r2, #1
 80063d0:	601a      	str	r2, [r3, #0]
        receive<<=1;
 80063d2:	7bbb      	ldrb	r3, [r7, #14]
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	73bb      	strb	r3, [r7, #14]
        if(READ_SDA)receive++;
 80063d8:	4b10      	ldr	r3, [pc, #64]	; (800641c <IIC_Read_Byte+0x84>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d002      	beq.n	80063e6 <IIC_Read_Byte+0x4e>
 80063e0:	7bbb      	ldrb	r3, [r7, #14]
 80063e2:	3301      	adds	r3, #1
 80063e4:	73bb      	strb	r3, [r7, #14]
		delay_us(1);
 80063e6:	2001      	movs	r0, #1
 80063e8:	f7fa fdc0 	bl	8000f6c <delay_us>
    for(i=0;i<8;i++ )
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	3301      	adds	r3, #1
 80063f0:	73fb      	strb	r3, [r7, #15]
 80063f2:	7bfb      	ldrb	r3, [r7, #15]
 80063f4:	2b07      	cmp	r3, #7
 80063f6:	d9e3      	bls.n	80063c0 <IIC_Read_Byte+0x28>
    }
    if (!ack)
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d102      	bne.n	8006404 <IIC_Read_Byte+0x6c>
        IIC_NAck();//发送nACK
 80063fe:	f7ff ff63 	bl	80062c8 <IIC_NAck>
 8006402:	e001      	b.n	8006408 <IIC_Read_Byte+0x70>
    else
        IIC_Ack(); //发送ACK
 8006404:	f7ff ff38 	bl	8006278 <IIC_Ack>
    return receive;
 8006408:	7bbb      	ldrb	r3, [r7, #14]
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	40020400 	.word	0x40020400
 8006418:	424082a0 	.word	0x424082a0
 800641c:	42408224 	.word	0x42408224

08006420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b082      	sub	sp, #8
 8006424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006426:	2300      	movs	r3, #0
 8006428:	607b      	str	r3, [r7, #4]
 800642a:	4b10      	ldr	r3, [pc, #64]	; (800646c <HAL_MspInit+0x4c>)
 800642c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642e:	4a0f      	ldr	r2, [pc, #60]	; (800646c <HAL_MspInit+0x4c>)
 8006430:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006434:	6453      	str	r3, [r2, #68]	; 0x44
 8006436:	4b0d      	ldr	r3, [pc, #52]	; (800646c <HAL_MspInit+0x4c>)
 8006438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800643e:	607b      	str	r3, [r7, #4]
 8006440:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006442:	2300      	movs	r3, #0
 8006444:	603b      	str	r3, [r7, #0]
 8006446:	4b09      	ldr	r3, [pc, #36]	; (800646c <HAL_MspInit+0x4c>)
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	4a08      	ldr	r2, [pc, #32]	; (800646c <HAL_MspInit+0x4c>)
 800644c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006450:	6413      	str	r3, [r2, #64]	; 0x40
 8006452:	4b06      	ldr	r3, [pc, #24]	; (800646c <HAL_MspInit+0x4c>)
 8006454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800645a:	603b      	str	r3, [r7, #0]
 800645c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800645e:	2005      	movs	r0, #5
 8006460:	f001 fab4 	bl	80079cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006464:	bf00      	nop
 8006466:	3708      	adds	r7, #8
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	40023800 	.word	0x40023800

08006470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006470:	b480      	push	{r7}
 8006472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006474:	e7fe      	b.n	8006474 <NMI_Handler+0x4>

08006476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006476:	b480      	push	{r7}
 8006478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800647a:	e7fe      	b.n	800647a <HardFault_Handler+0x4>

0800647c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800647c:	b480      	push	{r7}
 800647e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006480:	e7fe      	b.n	8006480 <MemManage_Handler+0x4>

08006482 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006482:	b480      	push	{r7}
 8006484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006486:	e7fe      	b.n	8006486 <BusFault_Handler+0x4>

08006488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006488:	b480      	push	{r7}
 800648a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800648c:	e7fe      	b.n	800648c <UsageFault_Handler+0x4>

0800648e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800648e:	b480      	push	{r7}
 8006490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006492:	bf00      	nop
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80064a0:	bf00      	nop
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80064aa:	b480      	push	{r7}
 80064ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80064ae:	bf00      	nop
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80064bc:	f001 f972 	bl	80077a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80064c0:	bf00      	nop
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80064c8:	4809      	ldr	r0, [pc, #36]	; (80064f0 <TIM8_UP_TIM13_IRQHandler+0x2c>)
 80064ca:	f002 fa9b 	bl	8008a04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */
  DAC->DHR12R1 = flag?2439:0;
 80064ce:	4b09      	ldr	r3, [pc, #36]	; (80064f4 <TIM8_UP_TIM13_IRQHandler+0x30>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <TIM8_UP_TIM13_IRQHandler+0x18>
 80064d6:	f640 1387 	movw	r3, #2439	; 0x987
 80064da:	e000      	b.n	80064de <TIM8_UP_TIM13_IRQHandler+0x1a>
 80064dc:	2300      	movs	r3, #0
 80064de:	4a06      	ldr	r2, [pc, #24]	; (80064f8 <TIM8_UP_TIM13_IRQHandler+0x34>)
 80064e0:	6093      	str	r3, [r2, #8]
  flag = ~flag;
 80064e2:	4b04      	ldr	r3, [pc, #16]	; (80064f4 <TIM8_UP_TIM13_IRQHandler+0x30>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	43db      	mvns	r3, r3
 80064e8:	4a02      	ldr	r2, [pc, #8]	; (80064f4 <TIM8_UP_TIM13_IRQHandler+0x30>)
 80064ea:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80064ec:	bf00      	nop
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	20000150 	.word	0x20000150
 80064f4:	200000d8 	.word	0x200000d8
 80064f8:	40007400 	.word	0x40007400

080064fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80064fc:	b480      	push	{r7}
 80064fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006500:	4b06      	ldr	r3, [pc, #24]	; (800651c <SystemInit+0x20>)
 8006502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006506:	4a05      	ldr	r2, [pc, #20]	; (800651c <SystemInit+0x20>)
 8006508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800650c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006510:	bf00      	nop
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	e000ed00 	.word	0xe000ed00

08006520 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006526:	f107 0308 	add.w	r3, r7, #8
 800652a:	2200      	movs	r2, #0
 800652c:	601a      	str	r2, [r3, #0]
 800652e:	605a      	str	r2, [r3, #4]
 8006530:	609a      	str	r2, [r3, #8]
 8006532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006534:	463b      	mov	r3, r7
 8006536:	2200      	movs	r2, #0
 8006538:	601a      	str	r2, [r3, #0]
 800653a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800653c:	4b1e      	ldr	r3, [pc, #120]	; (80065b8 <MX_TIM8_Init+0x98>)
 800653e:	4a1f      	ldr	r2, [pc, #124]	; (80065bc <MX_TIM8_Init+0x9c>)
 8006540:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 43-1;
 8006542:	4b1d      	ldr	r3, [pc, #116]	; (80065b8 <MX_TIM8_Init+0x98>)
 8006544:	222a      	movs	r2, #42	; 0x2a
 8006546:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006548:	4b1b      	ldr	r3, [pc, #108]	; (80065b8 <MX_TIM8_Init+0x98>)
 800654a:	2200      	movs	r2, #0
 800654c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 16-1;
 800654e:	4b1a      	ldr	r3, [pc, #104]	; (80065b8 <MX_TIM8_Init+0x98>)
 8006550:	220f      	movs	r2, #15
 8006552:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006554:	4b18      	ldr	r3, [pc, #96]	; (80065b8 <MX_TIM8_Init+0x98>)
 8006556:	2200      	movs	r2, #0
 8006558:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800655a:	4b17      	ldr	r3, [pc, #92]	; (80065b8 <MX_TIM8_Init+0x98>)
 800655c:	2200      	movs	r2, #0
 800655e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006560:	4b15      	ldr	r3, [pc, #84]	; (80065b8 <MX_TIM8_Init+0x98>)
 8006562:	2280      	movs	r2, #128	; 0x80
 8006564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8006566:	4814      	ldr	r0, [pc, #80]	; (80065b8 <MX_TIM8_Init+0x98>)
 8006568:	f002 f98c 	bl	8008884 <HAL_TIM_Base_Init>
 800656c:	4603      	mov	r3, r0
 800656e:	2b00      	cmp	r3, #0
 8006570:	d001      	beq.n	8006576 <MX_TIM8_Init+0x56>
  {
    Error_Handler();
 8006572:	f7ff fddf 	bl	8006134 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800657a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800657c:	f107 0308 	add.w	r3, r7, #8
 8006580:	4619      	mov	r1, r3
 8006582:	480d      	ldr	r0, [pc, #52]	; (80065b8 <MX_TIM8_Init+0x98>)
 8006584:	f002 fb46 	bl	8008c14 <HAL_TIM_ConfigClockSource>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <MX_TIM8_Init+0x72>
  {
    Error_Handler();
 800658e:	f7ff fdd1 	bl	8006134 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006592:	2300      	movs	r3, #0
 8006594:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006596:	2300      	movs	r3, #0
 8006598:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800659a:	463b      	mov	r3, r7
 800659c:	4619      	mov	r1, r3
 800659e:	4806      	ldr	r0, [pc, #24]	; (80065b8 <MX_TIM8_Init+0x98>)
 80065a0:	f002 fd68 	bl	8009074 <HAL_TIMEx_MasterConfigSynchronization>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <MX_TIM8_Init+0x8e>
  {
    Error_Handler();
 80065aa:	f7ff fdc3 	bl	8006134 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80065ae:	bf00      	nop
 80065b0:	3718      	adds	r7, #24
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20000150 	.word	0x20000150
 80065bc:	40010400 	.word	0x40010400

080065c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a0e      	ldr	r2, [pc, #56]	; (8006608 <HAL_TIM_Base_MspInit+0x48>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d115      	bne.n	80065fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	4b0d      	ldr	r3, [pc, #52]	; (800660c <HAL_TIM_Base_MspInit+0x4c>)
 80065d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065da:	4a0c      	ldr	r2, [pc, #48]	; (800660c <HAL_TIM_Base_MspInit+0x4c>)
 80065dc:	f043 0302 	orr.w	r3, r3, #2
 80065e0:	6453      	str	r3, [r2, #68]	; 0x44
 80065e2:	4b0a      	ldr	r3, [pc, #40]	; (800660c <HAL_TIM_Base_MspInit+0x4c>)
 80065e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80065ee:	2200      	movs	r2, #0
 80065f0:	2100      	movs	r1, #0
 80065f2:	202c      	movs	r0, #44	; 0x2c
 80065f4:	f001 f9f5 	bl	80079e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80065f8:	202c      	movs	r0, #44	; 0x2c
 80065fa:	f001 fa0e 	bl	8007a1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80065fe:	bf00      	nop
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	40010400 	.word	0x40010400
 800660c:	40023800 	.word	0x40023800

08006610 <TP_Write_Byte>:

//SPI写数据
//向触摸屏IC写入1byte数据
//num:要写入的数据
void TP_Write_Byte(u8 num)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	4603      	mov	r3, r0
 8006618:	71fb      	strb	r3, [r7, #7]
	u8 count = 0;
 800661a:	2300      	movs	r3, #0
 800661c:	73fb      	strb	r3, [r7, #15]
	for (count = 0; count < 8; count++)
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]
 8006622:	e019      	b.n	8006658 <TP_Write_Byte+0x48>
	{
		if (num & 0x80)
 8006624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006628:	2b00      	cmp	r3, #0
 800662a:	da03      	bge.n	8006634 <TP_Write_Byte+0x24>
			TDIN = 1;
 800662c:	4b0e      	ldr	r3, [pc, #56]	; (8006668 <TP_Write_Byte+0x58>)
 800662e:	2201      	movs	r2, #1
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	e002      	b.n	800663a <TP_Write_Byte+0x2a>
		else
			TDIN = 0;
 8006634:	4b0c      	ldr	r3, [pc, #48]	; (8006668 <TP_Write_Byte+0x58>)
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
		num <<= 1;
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	71fb      	strb	r3, [r7, #7]
		TCLK = 0;
 8006640:	4b0a      	ldr	r3, [pc, #40]	; (800666c <TP_Write_Byte+0x5c>)
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
		delay_us(1);
 8006646:	2001      	movs	r0, #1
 8006648:	f7fa fc90 	bl	8000f6c <delay_us>
		TCLK = 1; //上升沿有效
 800664c:	4b07      	ldr	r3, [pc, #28]	; (800666c <TP_Write_Byte+0x5c>)
 800664e:	2201      	movs	r2, #1
 8006650:	601a      	str	r2, [r3, #0]
	for (count = 0; count < 8; count++)
 8006652:	7bfb      	ldrb	r3, [r7, #15]
 8006654:	3301      	adds	r3, #1
 8006656:	73fb      	strb	r3, [r7, #15]
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2b07      	cmp	r3, #7
 800665c:	d9e2      	bls.n	8006624 <TP_Write_Byte+0x14>
	}
}
 800665e:	bf00      	nop
 8006660:	bf00      	nop
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	424282ac 	.word	0x424282ac
 800666c:	42408280 	.word	0x42408280

08006670 <TP_Read_AD>:
//SPI读数据
//从触摸屏IC读取adc值
//CMD:指令
//返回值:读到的数据
u16 TP_Read_AD(u8 CMD)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	71fb      	strb	r3, [r7, #7]
	u8 count = 0;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]
	u16 Num = 0;
 800667e:	2300      	movs	r3, #0
 8006680:	81bb      	strh	r3, [r7, #12]
	TCLK = 0;			//先拉低时钟
 8006682:	4b23      	ldr	r3, [pc, #140]	; (8006710 <TP_Read_AD+0xa0>)
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]
	TDIN = 0;			//拉低数据线
 8006688:	4b22      	ldr	r3, [pc, #136]	; (8006714 <TP_Read_AD+0xa4>)
 800668a:	2200      	movs	r2, #0
 800668c:	601a      	str	r2, [r3, #0]
	TCS = 0;			//选中触摸屏IC
 800668e:	4b22      	ldr	r3, [pc, #136]	; (8006718 <TP_Read_AD+0xa8>)
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]
	TP_Write_Byte(CMD); //发送命令字
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	4618      	mov	r0, r3
 8006698:	f7ff ffba 	bl	8006610 <TP_Write_Byte>
	delay_us(6);		//ADS7846的转换时间最长为6us
 800669c:	2006      	movs	r0, #6
 800669e:	f7fa fc65 	bl	8000f6c <delay_us>
	TCLK = 0;
 80066a2:	4b1b      	ldr	r3, [pc, #108]	; (8006710 <TP_Read_AD+0xa0>)
 80066a4:	2200      	movs	r2, #0
 80066a6:	601a      	str	r2, [r3, #0]
	delay_us(1);
 80066a8:	2001      	movs	r0, #1
 80066aa:	f7fa fc5f 	bl	8000f6c <delay_us>
	TCLK = 1; //给1个时钟，清除BUSY
 80066ae:	4b18      	ldr	r3, [pc, #96]	; (8006710 <TP_Read_AD+0xa0>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	601a      	str	r2, [r3, #0]
	delay_us(1);
 80066b4:	2001      	movs	r0, #1
 80066b6:	f7fa fc59 	bl	8000f6c <delay_us>
	TCLK = 0;
 80066ba:	4b15      	ldr	r3, [pc, #84]	; (8006710 <TP_Read_AD+0xa0>)
 80066bc:	2200      	movs	r2, #0
 80066be:	601a      	str	r2, [r3, #0]
	for (count = 0; count < 16; count++) //读出16位数据,只有高12位有效
 80066c0:	2300      	movs	r3, #0
 80066c2:	73fb      	strb	r3, [r7, #15]
 80066c4:	e015      	b.n	80066f2 <TP_Read_AD+0x82>
	{
		Num <<= 1;
 80066c6:	89bb      	ldrh	r3, [r7, #12]
 80066c8:	005b      	lsls	r3, r3, #1
 80066ca:	81bb      	strh	r3, [r7, #12]
		TCLK = 0; //下降沿有效
 80066cc:	4b10      	ldr	r3, [pc, #64]	; (8006710 <TP_Read_AD+0xa0>)
 80066ce:	2200      	movs	r2, #0
 80066d0:	601a      	str	r2, [r3, #0]
		delay_us(1);
 80066d2:	2001      	movs	r0, #1
 80066d4:	f7fa fc4a 	bl	8000f6c <delay_us>
		TCLK = 1;
 80066d8:	4b0d      	ldr	r3, [pc, #52]	; (8006710 <TP_Read_AD+0xa0>)
 80066da:	2201      	movs	r2, #1
 80066dc:	601a      	str	r2, [r3, #0]
		if (DOUT)
 80066de:	4b0f      	ldr	r3, [pc, #60]	; (800671c <TP_Read_AD+0xac>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <TP_Read_AD+0x7c>
			Num++;
 80066e6:	89bb      	ldrh	r3, [r7, #12]
 80066e8:	3301      	adds	r3, #1
 80066ea:	81bb      	strh	r3, [r7, #12]
	for (count = 0; count < 16; count++) //读出16位数据,只有高12位有效
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	3301      	adds	r3, #1
 80066f0:	73fb      	strb	r3, [r7, #15]
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	2b0f      	cmp	r3, #15
 80066f6:	d9e6      	bls.n	80066c6 <TP_Read_AD+0x56>
	}
	Num >>= 4; //只有高12位有效.
 80066f8:	89bb      	ldrh	r3, [r7, #12]
 80066fa:	091b      	lsrs	r3, r3, #4
 80066fc:	81bb      	strh	r3, [r7, #12]
	TCS = 1;   //释放片选
 80066fe:	4b06      	ldr	r3, [pc, #24]	; (8006718 <TP_Read_AD+0xa8>)
 8006700:	2201      	movs	r2, #1
 8006702:	601a      	str	r2, [r3, #0]
	return (Num);
 8006704:	89bb      	ldrh	r3, [r7, #12]
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	42408280 	.word	0x42408280
 8006714:	424282ac 	.word	0x424282ac
 8006718:	424102b4 	.word	0x424102b4
 800671c:	42408208 	.word	0x42408208

08006720 <TP_Read_XOY>:
//xy:指令（CMD_RDX/CMD_RDY）
//返回值:读到的数据
#define READ_TIMES 5 //读取次数
#define LOST_VAL 1	 //丢弃值
u16 TP_Read_XOY(u8 xy)
{
 8006720:	b590      	push	{r4, r7, lr}
 8006722:	b089      	sub	sp, #36	; 0x24
 8006724:	af00      	add	r7, sp, #0
 8006726:	4603      	mov	r3, r0
 8006728:	71fb      	strb	r3, [r7, #7]
	u16 i, j;
	u16 buf[READ_TIMES];
	u16 sum = 0;
 800672a:	2300      	movs	r3, #0
 800672c:	837b      	strh	r3, [r7, #26]
	u16 temp;
	for (i = 0; i < READ_TIMES; i++)
 800672e:	2300      	movs	r3, #0
 8006730:	83fb      	strh	r3, [r7, #30]
 8006732:	e00f      	b.n	8006754 <TP_Read_XOY+0x34>
		buf[i] = TP_Read_AD(xy);
 8006734:	8bfc      	ldrh	r4, [r7, #30]
 8006736:	79fb      	ldrb	r3, [r7, #7]
 8006738:	4618      	mov	r0, r3
 800673a:	f7ff ff99 	bl	8006670 <TP_Read_AD>
 800673e:	4603      	mov	r3, r0
 8006740:	461a      	mov	r2, r3
 8006742:	0063      	lsls	r3, r4, #1
 8006744:	f107 0120 	add.w	r1, r7, #32
 8006748:	440b      	add	r3, r1
 800674a:	f823 2c14 	strh.w	r2, [r3, #-20]
	for (i = 0; i < READ_TIMES; i++)
 800674e:	8bfb      	ldrh	r3, [r7, #30]
 8006750:	3301      	adds	r3, #1
 8006752:	83fb      	strh	r3, [r7, #30]
 8006754:	8bfb      	ldrh	r3, [r7, #30]
 8006756:	2b04      	cmp	r3, #4
 8006758:	d9ec      	bls.n	8006734 <TP_Read_XOY+0x14>
	for (i = 0; i < READ_TIMES - 1; i++) //排序
 800675a:	2300      	movs	r3, #0
 800675c:	83fb      	strh	r3, [r7, #30]
 800675e:	e03b      	b.n	80067d8 <TP_Read_XOY+0xb8>
	{
		for (j = i + 1; j < READ_TIMES; j++)
 8006760:	8bfb      	ldrh	r3, [r7, #30]
 8006762:	3301      	adds	r3, #1
 8006764:	83bb      	strh	r3, [r7, #28]
 8006766:	e031      	b.n	80067cc <TP_Read_XOY+0xac>
		{
			if (buf[i] > buf[j]) //升序排列
 8006768:	8bfb      	ldrh	r3, [r7, #30]
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	f107 0220 	add.w	r2, r7, #32
 8006770:	4413      	add	r3, r2
 8006772:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8006776:	8bbb      	ldrh	r3, [r7, #28]
 8006778:	005b      	lsls	r3, r3, #1
 800677a:	f107 0120 	add.w	r1, r7, #32
 800677e:	440b      	add	r3, r1
 8006780:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8006784:	429a      	cmp	r2, r3
 8006786:	d91e      	bls.n	80067c6 <TP_Read_XOY+0xa6>
			{
				temp = buf[i];
 8006788:	8bfb      	ldrh	r3, [r7, #30]
 800678a:	005b      	lsls	r3, r3, #1
 800678c:	f107 0220 	add.w	r2, r7, #32
 8006790:	4413      	add	r3, r2
 8006792:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8006796:	833b      	strh	r3, [r7, #24]
				buf[i] = buf[j];
 8006798:	8bbb      	ldrh	r3, [r7, #28]
 800679a:	8bfa      	ldrh	r2, [r7, #30]
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	f107 0120 	add.w	r1, r7, #32
 80067a2:	440b      	add	r3, r1
 80067a4:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 80067a8:	0053      	lsls	r3, r2, #1
 80067aa:	f107 0220 	add.w	r2, r7, #32
 80067ae:	4413      	add	r3, r2
 80067b0:	460a      	mov	r2, r1
 80067b2:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j] = temp;
 80067b6:	8bbb      	ldrh	r3, [r7, #28]
 80067b8:	005b      	lsls	r3, r3, #1
 80067ba:	f107 0220 	add.w	r2, r7, #32
 80067be:	4413      	add	r3, r2
 80067c0:	8b3a      	ldrh	r2, [r7, #24]
 80067c2:	f823 2c14 	strh.w	r2, [r3, #-20]
		for (j = i + 1; j < READ_TIMES; j++)
 80067c6:	8bbb      	ldrh	r3, [r7, #28]
 80067c8:	3301      	adds	r3, #1
 80067ca:	83bb      	strh	r3, [r7, #28]
 80067cc:	8bbb      	ldrh	r3, [r7, #28]
 80067ce:	2b04      	cmp	r3, #4
 80067d0:	d9ca      	bls.n	8006768 <TP_Read_XOY+0x48>
	for (i = 0; i < READ_TIMES - 1; i++) //排序
 80067d2:	8bfb      	ldrh	r3, [r7, #30]
 80067d4:	3301      	adds	r3, #1
 80067d6:	83fb      	strh	r3, [r7, #30]
 80067d8:	8bfb      	ldrh	r3, [r7, #30]
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d9c0      	bls.n	8006760 <TP_Read_XOY+0x40>
			}
		}
	}
	sum = 0;
 80067de:	2300      	movs	r3, #0
 80067e0:	837b      	strh	r3, [r7, #26]
	for (i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++)
 80067e2:	2301      	movs	r3, #1
 80067e4:	83fb      	strh	r3, [r7, #30]
 80067e6:	e00c      	b.n	8006802 <TP_Read_XOY+0xe2>
		sum += buf[i];
 80067e8:	8bfb      	ldrh	r3, [r7, #30]
 80067ea:	005b      	lsls	r3, r3, #1
 80067ec:	f107 0220 	add.w	r2, r7, #32
 80067f0:	4413      	add	r3, r2
 80067f2:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80067f6:	8b7b      	ldrh	r3, [r7, #26]
 80067f8:	4413      	add	r3, r2
 80067fa:	837b      	strh	r3, [r7, #26]
	for (i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++)
 80067fc:	8bfb      	ldrh	r3, [r7, #30]
 80067fe:	3301      	adds	r3, #1
 8006800:	83fb      	strh	r3, [r7, #30]
 8006802:	8bfb      	ldrh	r3, [r7, #30]
 8006804:	2b03      	cmp	r3, #3
 8006806:	d9ef      	bls.n	80067e8 <TP_Read_XOY+0xc8>
	temp = sum / (READ_TIMES - 2 * LOST_VAL);
 8006808:	8b7b      	ldrh	r3, [r7, #26]
 800680a:	4a05      	ldr	r2, [pc, #20]	; (8006820 <TP_Read_XOY+0x100>)
 800680c:	fba2 2303 	umull	r2, r3, r2, r3
 8006810:	085b      	lsrs	r3, r3, #1
 8006812:	833b      	strh	r3, [r7, #24]
	return temp;
 8006814:	8b3b      	ldrh	r3, [r7, #24]
}
 8006816:	4618      	mov	r0, r3
 8006818:	3724      	adds	r7, #36	; 0x24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd90      	pop	{r4, r7, pc}
 800681e:	bf00      	nop
 8006820:	aaaaaaab 	.word	0xaaaaaaab

08006824 <TP_Read_XY>:
//读取x,y坐标
//最小值不能少于100.
//x,y:读取到的坐标值
//返回值:0,失败;1,成功。
u8 TP_Read_XY(u16 *x, u16 *y)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
	u16 xtemp, ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 800682e:	4b0c      	ldr	r3, [pc, #48]	; (8006860 <TP_Read_XY+0x3c>)
 8006830:	781b      	ldrb	r3, [r3, #0]
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff ff74 	bl	8006720 <TP_Read_XOY>
 8006838:	4603      	mov	r3, r0
 800683a:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 800683c:	4b09      	ldr	r3, [pc, #36]	; (8006864 <TP_Read_XY+0x40>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	4618      	mov	r0, r3
 8006842:	f7ff ff6d 	bl	8006720 <TP_Read_XOY>
 8006846:	4603      	mov	r3, r0
 8006848:	81bb      	strh	r3, [r7, #12]
	//if(xtemp<100||ytemp<100)return 0;//读数失败
	*x = xtemp;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	89fa      	ldrh	r2, [r7, #14]
 800684e:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	89ba      	ldrh	r2, [r7, #12]
 8006854:	801a      	strh	r2, [r3, #0]
	return 1; //读数成功
 8006856:	2301      	movs	r3, #1
}
 8006858:	4618      	mov	r0, r3
 800685a:	3710      	adds	r7, #16
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	2000003c 	.word	0x2000003c
 8006864:	2000003d 	.word	0x2000003d

08006868 <TP_Read_XY2>:
//该函数能大大提高准确度
//x,y:读取到的坐标值
//返回值:0,失败;1,成功。
#define ERR_RANGE 50 //误差范围
u8 TP_Read_XY2(u16 *x, u16 *y)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
 8006870:	6039      	str	r1, [r7, #0]
	u16 x1, y1;
	u16 x2, y2;
	u8 flag;
	flag = TP_Read_XY(&x1, &y1);
 8006872:	f107 0212 	add.w	r2, r7, #18
 8006876:	f107 0314 	add.w	r3, r7, #20
 800687a:	4611      	mov	r1, r2
 800687c:	4618      	mov	r0, r3
 800687e:	f7ff ffd1 	bl	8006824 <TP_Read_XY>
 8006882:	4603      	mov	r3, r0
 8006884:	75fb      	strb	r3, [r7, #23]
	if (flag == 0)
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <TP_Read_XY2+0x28>
		return (0);
 800688c:	2300      	movs	r3, #0
 800688e:	e049      	b.n	8006924 <TP_Read_XY2+0xbc>
	flag = TP_Read_XY(&x2, &y2);
 8006890:	f107 020e 	add.w	r2, r7, #14
 8006894:	f107 0310 	add.w	r3, r7, #16
 8006898:	4611      	mov	r1, r2
 800689a:	4618      	mov	r0, r3
 800689c:	f7ff ffc2 	bl	8006824 <TP_Read_XY>
 80068a0:	4603      	mov	r3, r0
 80068a2:	75fb      	strb	r3, [r7, #23]
	if (flag == 0)
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <TP_Read_XY2+0x46>
		return (0);
 80068aa:	2300      	movs	r3, #0
 80068ac:	e03a      	b.n	8006924 <TP_Read_XY2+0xbc>
	if (((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE)) //前后两次采样在+-50内
 80068ae:	8a3a      	ldrh	r2, [r7, #16]
 80068b0:	8abb      	ldrh	r3, [r7, #20]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d804      	bhi.n	80068c0 <TP_Read_XY2+0x58>
 80068b6:	8a3b      	ldrh	r3, [r7, #16]
 80068b8:	3331      	adds	r3, #49	; 0x31
 80068ba:	8aba      	ldrh	r2, [r7, #20]
 80068bc:	4293      	cmp	r3, r2
 80068be:	da08      	bge.n	80068d2 <TP_Read_XY2+0x6a>
 80068c0:	8aba      	ldrh	r2, [r7, #20]
 80068c2:	8a3b      	ldrh	r3, [r7, #16]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d82c      	bhi.n	8006922 <TP_Read_XY2+0xba>
 80068c8:	8abb      	ldrh	r3, [r7, #20]
 80068ca:	3331      	adds	r3, #49	; 0x31
 80068cc:	8a3a      	ldrh	r2, [r7, #16]
 80068ce:	4293      	cmp	r3, r2
 80068d0:	db27      	blt.n	8006922 <TP_Read_XY2+0xba>
		&& ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 80068d2:	89fa      	ldrh	r2, [r7, #14]
 80068d4:	8a7b      	ldrh	r3, [r7, #18]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d804      	bhi.n	80068e4 <TP_Read_XY2+0x7c>
 80068da:	89fb      	ldrh	r3, [r7, #14]
 80068dc:	3331      	adds	r3, #49	; 0x31
 80068de:	8a7a      	ldrh	r2, [r7, #18]
 80068e0:	4293      	cmp	r3, r2
 80068e2:	da08      	bge.n	80068f6 <TP_Read_XY2+0x8e>
 80068e4:	8a7a      	ldrh	r2, [r7, #18]
 80068e6:	89fb      	ldrh	r3, [r7, #14]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d81a      	bhi.n	8006922 <TP_Read_XY2+0xba>
 80068ec:	8a7b      	ldrh	r3, [r7, #18]
 80068ee:	3331      	adds	r3, #49	; 0x31
 80068f0:	89fa      	ldrh	r2, [r7, #14]
 80068f2:	4293      	cmp	r3, r2
 80068f4:	db15      	blt.n	8006922 <TP_Read_XY2+0xba>
	{
		*x = (x1 + x2) / 2;
 80068f6:	8abb      	ldrh	r3, [r7, #20]
 80068f8:	461a      	mov	r2, r3
 80068fa:	8a3b      	ldrh	r3, [r7, #16]
 80068fc:	4413      	add	r3, r2
 80068fe:	0fda      	lsrs	r2, r3, #31
 8006900:	4413      	add	r3, r2
 8006902:	105b      	asrs	r3, r3, #1
 8006904:	b29a      	uxth	r2, r3
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	801a      	strh	r2, [r3, #0]
		*y = (y1 + y2) / 2;
 800690a:	8a7b      	ldrh	r3, [r7, #18]
 800690c:	461a      	mov	r2, r3
 800690e:	89fb      	ldrh	r3, [r7, #14]
 8006910:	4413      	add	r3, r2
 8006912:	0fda      	lsrs	r2, r3, #31
 8006914:	4413      	add	r3, r2
 8006916:	105b      	asrs	r3, r3, #1
 8006918:	b29a      	uxth	r2, r3
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	801a      	strh	r2, [r3, #0]
		return 1;
 800691e:	2301      	movs	r3, #1
 8006920:	e000      	b.n	8006924 <TP_Read_XY2+0xbc>
	}
	else
		return 0;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <TP_Drow_Touch_Point>:
//画一个触摸点
//用来校准用的
//x,y:坐标
//color:颜色
void TP_Drow_Touch_Point(u16 x, u16 y, u16 color)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	4603      	mov	r3, r0
 8006934:	80fb      	strh	r3, [r7, #6]
 8006936:	460b      	mov	r3, r1
 8006938:	80bb      	strh	r3, [r7, #4]
 800693a:	4613      	mov	r3, r2
 800693c:	807b      	strh	r3, [r7, #2]
	POINT_COLOR = color;
 800693e:	4a24      	ldr	r2, [pc, #144]	; (80069d0 <TP_Drow_Touch_Point+0xa4>)
 8006940:	887b      	ldrh	r3, [r7, #2]
 8006942:	8013      	strh	r3, [r2, #0]
	LCD_DrawLine(x - 12, y, x + 13, y); //横线
 8006944:	88fb      	ldrh	r3, [r7, #6]
 8006946:	3b0c      	subs	r3, #12
 8006948:	b298      	uxth	r0, r3
 800694a:	88fb      	ldrh	r3, [r7, #6]
 800694c:	330d      	adds	r3, #13
 800694e:	b29a      	uxth	r2, r3
 8006950:	88bb      	ldrh	r3, [r7, #4]
 8006952:	88b9      	ldrh	r1, [r7, #4]
 8006954:	f7ff f836 	bl	80059c4 <LCD_DrawLine>
	LCD_DrawLine(x, y - 12, x, y + 13); //竖线
 8006958:	88bb      	ldrh	r3, [r7, #4]
 800695a:	3b0c      	subs	r3, #12
 800695c:	b299      	uxth	r1, r3
 800695e:	88bb      	ldrh	r3, [r7, #4]
 8006960:	330d      	adds	r3, #13
 8006962:	b29b      	uxth	r3, r3
 8006964:	88fa      	ldrh	r2, [r7, #6]
 8006966:	88f8      	ldrh	r0, [r7, #6]
 8006968:	f7ff f82c 	bl	80059c4 <LCD_DrawLine>
	LCD_DrawPoint(x + 1, y + 1);
 800696c:	88fb      	ldrh	r3, [r7, #6]
 800696e:	3301      	adds	r3, #1
 8006970:	b29a      	uxth	r2, r3
 8006972:	88bb      	ldrh	r3, [r7, #4]
 8006974:	3301      	adds	r3, #1
 8006976:	b29b      	uxth	r3, r3
 8006978:	4619      	mov	r1, r3
 800697a:	4610      	mov	r0, r2
 800697c:	f7fb f952 	bl	8001c24 <LCD_DrawPoint>
	LCD_DrawPoint(x - 1, y + 1);
 8006980:	88fb      	ldrh	r3, [r7, #6]
 8006982:	3b01      	subs	r3, #1
 8006984:	b29a      	uxth	r2, r3
 8006986:	88bb      	ldrh	r3, [r7, #4]
 8006988:	3301      	adds	r3, #1
 800698a:	b29b      	uxth	r3, r3
 800698c:	4619      	mov	r1, r3
 800698e:	4610      	mov	r0, r2
 8006990:	f7fb f948 	bl	8001c24 <LCD_DrawPoint>
	LCD_DrawPoint(x + 1, y - 1);
 8006994:	88fb      	ldrh	r3, [r7, #6]
 8006996:	3301      	adds	r3, #1
 8006998:	b29a      	uxth	r2, r3
 800699a:	88bb      	ldrh	r3, [r7, #4]
 800699c:	3b01      	subs	r3, #1
 800699e:	b29b      	uxth	r3, r3
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f7fb f93e 	bl	8001c24 <LCD_DrawPoint>
	LCD_DrawPoint(x - 1, y - 1);
 80069a8:	88fb      	ldrh	r3, [r7, #6]
 80069aa:	3b01      	subs	r3, #1
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	88bb      	ldrh	r3, [r7, #4]
 80069b0:	3b01      	subs	r3, #1
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	4619      	mov	r1, r3
 80069b6:	4610      	mov	r0, r2
 80069b8:	f7fb f934 	bl	8001c24 <LCD_DrawPoint>
	LCD_Draw_Circle(x, y, 6); //画中心圈
 80069bc:	88b9      	ldrh	r1, [r7, #4]
 80069be:	88fb      	ldrh	r3, [r7, #6]
 80069c0:	2206      	movs	r2, #6
 80069c2:	4618      	mov	r0, r3
 80069c4:	f7ff f8ad 	bl	8005b22 <LCD_Draw_Circle>
}
 80069c8:	bf00      	nop
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	200000d4 	.word	0x200000d4

080069d4 <TP_Scan>:
//触摸按键扫描
//tp:0,屏幕坐标;1,物理坐标(校准等特殊场合用)
//返回值:当前触屏状态.
//0,触屏无触摸;1,触屏有触摸
u8 TP_Scan(u8 tp)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	4603      	mov	r3, r0
 80069dc:	71fb      	strb	r3, [r7, #7]
	if (PEN == 0) //有按键按下
 80069de:	4b42      	ldr	r3, [pc, #264]	; (8006ae8 <TP_Scan+0x114>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d157      	bne.n	8006a96 <TP_Scan+0xc2>
	{
		if (tp)
 80069e6:	79fb      	ldrb	r3, [r7, #7]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d004      	beq.n	80069f6 <TP_Scan+0x22>
			TP_Read_XY2(&tp_dev.x[0], &tp_dev.y[0]);	  //读取物理坐标
 80069ec:	493f      	ldr	r1, [pc, #252]	; (8006aec <TP_Scan+0x118>)
 80069ee:	4840      	ldr	r0, [pc, #256]	; (8006af0 <TP_Scan+0x11c>)
 80069f0:	f7ff ff3a 	bl	8006868 <TP_Read_XY2>
 80069f4:	e03c      	b.n	8006a70 <TP_Scan+0x9c>
		else if (TP_Read_XY2(&tp_dev.x[0], &tp_dev.y[0])) //读取屏幕坐标
 80069f6:	493d      	ldr	r1, [pc, #244]	; (8006aec <TP_Scan+0x118>)
 80069f8:	483d      	ldr	r0, [pc, #244]	; (8006af0 <TP_Scan+0x11c>)
 80069fa:	f7ff ff35 	bl	8006868 <TP_Read_XY2>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d035      	beq.n	8006a70 <TP_Scan+0x9c>
		{
			tp_dev.x[0] = tp_dev.xfac * tp_dev.x[0] + tp_dev.xoff; //将结果转换为屏幕坐标
 8006a04:	4b3b      	ldr	r3, [pc, #236]	; (8006af4 <TP_Scan+0x120>)
 8006a06:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8006a0a:	4b3a      	ldr	r3, [pc, #232]	; (8006af4 <TP_Scan+0x120>)
 8006a0c:	899b      	ldrh	r3, [r3, #12]
 8006a0e:	ee07 3a90 	vmov	s15, r3
 8006a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a1a:	4b36      	ldr	r3, [pc, #216]	; (8006af4 <TP_Scan+0x120>)
 8006a1c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8006a20:	ee07 3a90 	vmov	s15, r3
 8006a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a30:	ee17 3a90 	vmov	r3, s15
 8006a34:	b29a      	uxth	r2, r3
 8006a36:	4b2f      	ldr	r3, [pc, #188]	; (8006af4 <TP_Scan+0x120>)
 8006a38:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0] = tp_dev.yfac * tp_dev.y[0] + tp_dev.yoff;
 8006a3a:	4b2e      	ldr	r3, [pc, #184]	; (8006af4 <TP_Scan+0x120>)
 8006a3c:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8006a40:	4b2c      	ldr	r3, [pc, #176]	; (8006af4 <TP_Scan+0x120>)
 8006a42:	8adb      	ldrh	r3, [r3, #22]
 8006a44:	ee07 3a90 	vmov	s15, r3
 8006a48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006a50:	4b28      	ldr	r3, [pc, #160]	; (8006af4 <TP_Scan+0x120>)
 8006a52:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a66:	ee17 3a90 	vmov	r3, s15
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	4b21      	ldr	r3, [pc, #132]	; (8006af4 <TP_Scan+0x120>)
 8006a6e:	82da      	strh	r2, [r3, #22]
		}
		if ((tp_dev.sta & TP_PRES_DOWN) == 0) //之前没有被按下
 8006a70:	4b20      	ldr	r3, [pc, #128]	; (8006af4 <TP_Scan+0x120>)
 8006a72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a76:	b25b      	sxtb	r3, r3
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	db2a      	blt.n	8006ad2 <TP_Scan+0xfe>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES; //按键按下
 8006a7c:	4b1d      	ldr	r3, [pc, #116]	; (8006af4 <TP_Scan+0x120>)
 8006a7e:	22c0      	movs	r2, #192	; 0xc0
 8006a80:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4] = tp_dev.x[0];				  //记录第一次按下时的坐标
 8006a84:	4b1b      	ldr	r3, [pc, #108]	; (8006af4 <TP_Scan+0x120>)
 8006a86:	899a      	ldrh	r2, [r3, #12]
 8006a88:	4b1a      	ldr	r3, [pc, #104]	; (8006af4 <TP_Scan+0x120>)
 8006a8a:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4] = tp_dev.y[0];
 8006a8c:	4b19      	ldr	r3, [pc, #100]	; (8006af4 <TP_Scan+0x120>)
 8006a8e:	8ada      	ldrh	r2, [r3, #22]
 8006a90:	4b18      	ldr	r3, [pc, #96]	; (8006af4 <TP_Scan+0x120>)
 8006a92:	83da      	strh	r2, [r3, #30]
 8006a94:	e01d      	b.n	8006ad2 <TP_Scan+0xfe>
		}
	}
	else
	{
		if (tp_dev.sta & TP_PRES_DOWN) //之前是被按下的
 8006a96:	4b17      	ldr	r3, [pc, #92]	; (8006af4 <TP_Scan+0x120>)
 8006a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006a9c:	b25b      	sxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	da09      	bge.n	8006ab6 <TP_Scan+0xe2>
		{
			tp_dev.sta &= ~(1 << 7); //标记按键松开
 8006aa2:	4b14      	ldr	r3, [pc, #80]	; (8006af4 <TP_Scan+0x120>)
 8006aa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006aa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aac:	b2da      	uxtb	r2, r3
 8006aae:	4b11      	ldr	r3, [pc, #68]	; (8006af4 <TP_Scan+0x120>)
 8006ab0:	f883 2020 	strb.w	r2, [r3, #32]
 8006ab4:	e00d      	b.n	8006ad2 <TP_Scan+0xfe>
		}
		else //之前就没有被按下
		{
			tp_dev.x[4] = 0;
 8006ab6:	4b0f      	ldr	r3, [pc, #60]	; (8006af4 <TP_Scan+0x120>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4] = 0;
 8006abc:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <TP_Scan+0x120>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0] = 0xffff;
 8006ac2:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <TP_Scan+0x120>)
 8006ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ac8:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0] = 0xffff;
 8006aca:	4b0a      	ldr	r3, [pc, #40]	; (8006af4 <TP_Scan+0x120>)
 8006acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ad0:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN; //返回当前的触屏状态
 8006ad2:	4b08      	ldr	r3, [pc, #32]	; (8006af4 <TP_Scan+0x120>)
 8006ad4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ad8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006adc:	b2db      	uxtb	r3, r3
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3708      	adds	r7, #8
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop
 8006ae8:	42408204 	.word	0x42408204
 8006aec:	2000001e 	.word	0x2000001e
 8006af0:	20000014 	.word	0x20000014
 8006af4:	20000008 	.word	0x20000008

08006af8 <TP_Save_Adjdata>:
//////////////////////////////////////////////////////////////////////////
//保存在EEPROM里面的地址区间基址,占用13个字节(RANGE:SAVE_ADDR_BASE~SAVE_ADDR_BASE+12)
#define SAVE_ADDR_BASE 40
//保存校准参数
void TP_Save_Adjdata(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
	s32 temp;
	//保存校正结果!
	temp = tp_dev.xfac * 100000000; //保存x校正因素
 8006afe:	4b23      	ldr	r3, [pc, #140]	; (8006b8c <TP_Save_Adjdata+0x94>)
 8006b00:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006b04:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8006b90 <TP_Save_Adjdata+0x98>
 8006b08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b0c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b10:	ee17 3a90 	vmov	r3, s15
 8006b14:	607b      	str	r3, [r7, #4]
	AT24CXX_WriteLenByte(SAVE_ADDR_BASE, temp, 4);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2204      	movs	r2, #4
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	2028      	movs	r0, #40	; 0x28
 8006b1e:	f7fa f9be 	bl	8000e9e <AT24CXX_WriteLenByte>
	temp = tp_dev.yfac * 100000000; //保存y校正因素
 8006b22:	4b1a      	ldr	r3, [pc, #104]	; (8006b8c <TP_Save_Adjdata+0x94>)
 8006b24:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006b28:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8006b90 <TP_Save_Adjdata+0x98>
 8006b2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006b34:	ee17 3a90 	vmov	r3, s15
 8006b38:	607b      	str	r3, [r7, #4]
	AT24CXX_WriteLenByte(SAVE_ADDR_BASE + 4, temp, 4);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2204      	movs	r2, #4
 8006b3e:	4619      	mov	r1, r3
 8006b40:	202c      	movs	r0, #44	; 0x2c
 8006b42:	f7fa f9ac 	bl	8000e9e <AT24CXX_WriteLenByte>
	//保存x偏移量
	AT24CXX_WriteLenByte(SAVE_ADDR_BASE + 8, tp_dev.xoff, 2);
 8006b46:	4b11      	ldr	r3, [pc, #68]	; (8006b8c <TP_Save_Adjdata+0x94>)
 8006b48:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	4619      	mov	r1, r3
 8006b50:	2030      	movs	r0, #48	; 0x30
 8006b52:	f7fa f9a4 	bl	8000e9e <AT24CXX_WriteLenByte>
	//保存y偏移量
	AT24CXX_WriteLenByte(SAVE_ADDR_BASE + 10, tp_dev.yoff, 2);
 8006b56:	4b0d      	ldr	r3, [pc, #52]	; (8006b8c <TP_Save_Adjdata+0x94>)
 8006b58:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	4619      	mov	r1, r3
 8006b60:	2032      	movs	r0, #50	; 0x32
 8006b62:	f7fa f99c 	bl	8000e9e <AT24CXX_WriteLenByte>
	//保存触屏类型
	AT24CXX_WriteOneByte(SAVE_ADDR_BASE + 12, tp_dev.touchtype);
 8006b66:	4b09      	ldr	r3, [pc, #36]	; (8006b8c <TP_Save_Adjdata+0x94>)
 8006b68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	2034      	movs	r0, #52	; 0x34
 8006b70:	f7fa f968 	bl	8000e44 <AT24CXX_WriteOneByte>
	temp = 0X0A; //标记校准过了
 8006b74:	230a      	movs	r3, #10
 8006b76:	607b      	str	r3, [r7, #4]
	AT24CXX_WriteOneByte(SAVE_ADDR_BASE + 13, temp);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	2035      	movs	r0, #53	; 0x35
 8006b80:	f7fa f960 	bl	8000e44 <AT24CXX_WriteOneByte>
}
 8006b84:	bf00      	nop
 8006b86:	3708      	adds	r7, #8
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	20000008 	.word	0x20000008
 8006b90:	4cbebc20 	.word	0x4cbebc20

08006b94 <TP_Get_Adjdata>:
//得到保存在EEPROM里面的校准值
//返回值：1，成功获取数据
//        0，获取失败，要重新校准
u8 TP_Get_Adjdata(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
	s32 tempfac;
	tempfac = AT24CXX_ReadOneByte(SAVE_ADDR_BASE + 13); //读取标记字,看是否校准过！
 8006b9a:	2035      	movs	r0, #53	; 0x35
 8006b9c:	f7fa f922 	bl	8000de4 <AT24CXX_ReadOneByte>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	607b      	str	r3, [r7, #4]
	if (tempfac == 0X0A)								//触摸屏已经校准过了
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b0a      	cmp	r3, #10
 8006ba8:	d14f      	bne.n	8006c4a <TP_Get_Adjdata+0xb6>
	{
		tempfac = AT24CXX_ReadLenByte(SAVE_ADDR_BASE, 4);
 8006baa:	2104      	movs	r1, #4
 8006bac:	2028      	movs	r0, #40	; 0x28
 8006bae:	f7fa f99b 	bl	8000ee8 <AT24CXX_ReadLenByte>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	607b      	str	r3, [r7, #4]
		tp_dev.xfac = (float)tempfac / 100000000; //得到x校准参数
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	ee07 3a90 	vmov	s15, r3
 8006bbc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bc0:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006c54 <TP_Get_Adjdata+0xc0>
 8006bc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bc8:	4b23      	ldr	r3, [pc, #140]	; (8006c58 <TP_Get_Adjdata+0xc4>)
 8006bca:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		tempfac = AT24CXX_ReadLenByte(SAVE_ADDR_BASE + 4, 4);
 8006bce:	2104      	movs	r1, #4
 8006bd0:	202c      	movs	r0, #44	; 0x2c
 8006bd2:	f7fa f989 	bl	8000ee8 <AT24CXX_ReadLenByte>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	607b      	str	r3, [r7, #4]
		tp_dev.yfac = (float)tempfac / 100000000; //得到y校准参数
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	ee07 3a90 	vmov	s15, r3
 8006be0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006be4:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8006c54 <TP_Get_Adjdata+0xc0>
 8006be8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bec:	4b1a      	ldr	r3, [pc, #104]	; (8006c58 <TP_Get_Adjdata+0xc4>)
 8006bee:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
												  //得到x偏移量
		tp_dev.xoff = AT24CXX_ReadLenByte(SAVE_ADDR_BASE + 8, 2);
 8006bf2:	2102      	movs	r1, #2
 8006bf4:	2030      	movs	r0, #48	; 0x30
 8006bf6:	f7fa f977 	bl	8000ee8 <AT24CXX_ReadLenByte>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	b21a      	sxth	r2, r3
 8006bfe:	4b16      	ldr	r3, [pc, #88]	; (8006c58 <TP_Get_Adjdata+0xc4>)
 8006c00:	859a      	strh	r2, [r3, #44]	; 0x2c
		//得到y偏移量
		tp_dev.yoff = AT24CXX_ReadLenByte(SAVE_ADDR_BASE + 10, 2);
 8006c02:	2102      	movs	r1, #2
 8006c04:	2032      	movs	r0, #50	; 0x32
 8006c06:	f7fa f96f 	bl	8000ee8 <AT24CXX_ReadLenByte>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	b21a      	sxth	r2, r3
 8006c0e:	4b12      	ldr	r3, [pc, #72]	; (8006c58 <TP_Get_Adjdata+0xc4>)
 8006c10:	85da      	strh	r2, [r3, #46]	; 0x2e
		tp_dev.touchtype = AT24CXX_ReadOneByte(SAVE_ADDR_BASE + 12); //读取触屏类型标记
 8006c12:	2034      	movs	r0, #52	; 0x34
 8006c14:	f7fa f8e6 	bl	8000de4 <AT24CXX_ReadOneByte>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	4b0e      	ldr	r3, [pc, #56]	; (8006c58 <TP_Get_Adjdata+0xc4>)
 8006c1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		if (tp_dev.touchtype)										 //X,Y方向与屏幕相反
 8006c22:	4b0d      	ldr	r3, [pc, #52]	; (8006c58 <TP_Get_Adjdata+0xc4>)
 8006c24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d006      	beq.n	8006c3a <TP_Get_Adjdata+0xa6>
		{
			CMD_RDX = 0X90;
 8006c2c:	4b0b      	ldr	r3, [pc, #44]	; (8006c5c <TP_Get_Adjdata+0xc8>)
 8006c2e:	2290      	movs	r2, #144	; 0x90
 8006c30:	701a      	strb	r2, [r3, #0]
			CMD_RDY = 0XD0;
 8006c32:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <TP_Get_Adjdata+0xcc>)
 8006c34:	22d0      	movs	r2, #208	; 0xd0
 8006c36:	701a      	strb	r2, [r3, #0]
 8006c38:	e005      	b.n	8006c46 <TP_Get_Adjdata+0xb2>
		}
		else //X,Y方向与屏幕相同
		{
			CMD_RDX = 0XD0;
 8006c3a:	4b08      	ldr	r3, [pc, #32]	; (8006c5c <TP_Get_Adjdata+0xc8>)
 8006c3c:	22d0      	movs	r2, #208	; 0xd0
 8006c3e:	701a      	strb	r2, [r3, #0]
			CMD_RDY = 0X90;
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <TP_Get_Adjdata+0xcc>)
 8006c42:	2290      	movs	r2, #144	; 0x90
 8006c44:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e000      	b.n	8006c4c <TP_Get_Adjdata+0xb8>
	}
	return 0;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3708      	adds	r7, #8
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	4cbebc20 	.word	0x4cbebc20
 8006c58:	20000008 	.word	0x20000008
 8006c5c:	2000003c 	.word	0x2000003c
 8006c60:	2000003d 	.word	0x2000003d

08006c64 <TP_Adj_Info_Show>:
//提示字符串
u8 *const TP_REMIND_MSG_TBL = "Please use the stylus click the cross on the screen.The cross will always move until the screen adjustment is completed.";

//提示校准结果(各个参数)
void TP_Adj_Info_Show(u16 x0, u16 y0, u16 x1, u16 y1, u16 x2, u16 y2, u16 x3, u16 y3, u16 fac)
{
 8006c64:	b590      	push	{r4, r7, lr}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af02      	add	r7, sp, #8
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	4611      	mov	r1, r2
 8006c70:	461a      	mov	r2, r3
 8006c72:	4623      	mov	r3, r4
 8006c74:	80fb      	strh	r3, [r7, #6]
 8006c76:	4603      	mov	r3, r0
 8006c78:	80bb      	strh	r3, [r7, #4]
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	807b      	strh	r3, [r7, #2]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	803b      	strh	r3, [r7, #0]
	POINT_COLOR = RED;
 8006c82:	4b5e      	ldr	r3, [pc, #376]	; (8006dfc <TP_Adj_Info_Show+0x198>)
 8006c84:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006c88:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(40, 160, lcddev.width, lcddev.height, 16, "x1:");
 8006c8a:	4b5d      	ldr	r3, [pc, #372]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006c8c:	881a      	ldrh	r2, [r3, #0]
 8006c8e:	4b5c      	ldr	r3, [pc, #368]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006c90:	885b      	ldrh	r3, [r3, #2]
 8006c92:	495c      	ldr	r1, [pc, #368]	; (8006e04 <TP_Adj_Info_Show+0x1a0>)
 8006c94:	9101      	str	r1, [sp, #4]
 8006c96:	2110      	movs	r1, #16
 8006c98:	9100      	str	r1, [sp, #0]
 8006c9a:	21a0      	movs	r1, #160	; 0xa0
 8006c9c:	2028      	movs	r0, #40	; 0x28
 8006c9e:	f7ff f919 	bl	8005ed4 <LCD_ShowString>
	LCD_ShowString(40 + 80, 160, lcddev.width, lcddev.height, 16, "y1:");
 8006ca2:	4b57      	ldr	r3, [pc, #348]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006ca4:	881a      	ldrh	r2, [r3, #0]
 8006ca6:	4b56      	ldr	r3, [pc, #344]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006ca8:	885b      	ldrh	r3, [r3, #2]
 8006caa:	4957      	ldr	r1, [pc, #348]	; (8006e08 <TP_Adj_Info_Show+0x1a4>)
 8006cac:	9101      	str	r1, [sp, #4]
 8006cae:	2110      	movs	r1, #16
 8006cb0:	9100      	str	r1, [sp, #0]
 8006cb2:	21a0      	movs	r1, #160	; 0xa0
 8006cb4:	2078      	movs	r0, #120	; 0x78
 8006cb6:	f7ff f90d 	bl	8005ed4 <LCD_ShowString>
	LCD_ShowString(40, 180, lcddev.width, lcddev.height, 16, "x2:");
 8006cba:	4b51      	ldr	r3, [pc, #324]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006cbc:	881a      	ldrh	r2, [r3, #0]
 8006cbe:	4b50      	ldr	r3, [pc, #320]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006cc0:	885b      	ldrh	r3, [r3, #2]
 8006cc2:	4952      	ldr	r1, [pc, #328]	; (8006e0c <TP_Adj_Info_Show+0x1a8>)
 8006cc4:	9101      	str	r1, [sp, #4]
 8006cc6:	2110      	movs	r1, #16
 8006cc8:	9100      	str	r1, [sp, #0]
 8006cca:	21b4      	movs	r1, #180	; 0xb4
 8006ccc:	2028      	movs	r0, #40	; 0x28
 8006cce:	f7ff f901 	bl	8005ed4 <LCD_ShowString>
	LCD_ShowString(40 + 80, 180, lcddev.width, lcddev.height, 16, "y2:");
 8006cd2:	4b4b      	ldr	r3, [pc, #300]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006cd4:	881a      	ldrh	r2, [r3, #0]
 8006cd6:	4b4a      	ldr	r3, [pc, #296]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006cd8:	885b      	ldrh	r3, [r3, #2]
 8006cda:	494d      	ldr	r1, [pc, #308]	; (8006e10 <TP_Adj_Info_Show+0x1ac>)
 8006cdc:	9101      	str	r1, [sp, #4]
 8006cde:	2110      	movs	r1, #16
 8006ce0:	9100      	str	r1, [sp, #0]
 8006ce2:	21b4      	movs	r1, #180	; 0xb4
 8006ce4:	2078      	movs	r0, #120	; 0x78
 8006ce6:	f7ff f8f5 	bl	8005ed4 <LCD_ShowString>
	LCD_ShowString(40, 200, lcddev.width, lcddev.height, 16, "x3:");
 8006cea:	4b45      	ldr	r3, [pc, #276]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006cec:	881a      	ldrh	r2, [r3, #0]
 8006cee:	4b44      	ldr	r3, [pc, #272]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006cf0:	885b      	ldrh	r3, [r3, #2]
 8006cf2:	4948      	ldr	r1, [pc, #288]	; (8006e14 <TP_Adj_Info_Show+0x1b0>)
 8006cf4:	9101      	str	r1, [sp, #4]
 8006cf6:	2110      	movs	r1, #16
 8006cf8:	9100      	str	r1, [sp, #0]
 8006cfa:	21c8      	movs	r1, #200	; 0xc8
 8006cfc:	2028      	movs	r0, #40	; 0x28
 8006cfe:	f7ff f8e9 	bl	8005ed4 <LCD_ShowString>
	LCD_ShowString(40 + 80, 200, lcddev.width, lcddev.height, 16, "y3:");
 8006d02:	4b3f      	ldr	r3, [pc, #252]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006d04:	881a      	ldrh	r2, [r3, #0]
 8006d06:	4b3e      	ldr	r3, [pc, #248]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006d08:	885b      	ldrh	r3, [r3, #2]
 8006d0a:	4943      	ldr	r1, [pc, #268]	; (8006e18 <TP_Adj_Info_Show+0x1b4>)
 8006d0c:	9101      	str	r1, [sp, #4]
 8006d0e:	2110      	movs	r1, #16
 8006d10:	9100      	str	r1, [sp, #0]
 8006d12:	21c8      	movs	r1, #200	; 0xc8
 8006d14:	2078      	movs	r0, #120	; 0x78
 8006d16:	f7ff f8dd 	bl	8005ed4 <LCD_ShowString>
	LCD_ShowString(40, 220, lcddev.width, lcddev.height, 16, "x4:");
 8006d1a:	4b39      	ldr	r3, [pc, #228]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006d1c:	881a      	ldrh	r2, [r3, #0]
 8006d1e:	4b38      	ldr	r3, [pc, #224]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006d20:	885b      	ldrh	r3, [r3, #2]
 8006d22:	493e      	ldr	r1, [pc, #248]	; (8006e1c <TP_Adj_Info_Show+0x1b8>)
 8006d24:	9101      	str	r1, [sp, #4]
 8006d26:	2110      	movs	r1, #16
 8006d28:	9100      	str	r1, [sp, #0]
 8006d2a:	21dc      	movs	r1, #220	; 0xdc
 8006d2c:	2028      	movs	r0, #40	; 0x28
 8006d2e:	f7ff f8d1 	bl	8005ed4 <LCD_ShowString>
	LCD_ShowString(40 + 80, 220, lcddev.width, lcddev.height, 16, "y4:");
 8006d32:	4b33      	ldr	r3, [pc, #204]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006d34:	881a      	ldrh	r2, [r3, #0]
 8006d36:	4b32      	ldr	r3, [pc, #200]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006d38:	885b      	ldrh	r3, [r3, #2]
 8006d3a:	4939      	ldr	r1, [pc, #228]	; (8006e20 <TP_Adj_Info_Show+0x1bc>)
 8006d3c:	9101      	str	r1, [sp, #4]
 8006d3e:	2110      	movs	r1, #16
 8006d40:	9100      	str	r1, [sp, #0]
 8006d42:	21dc      	movs	r1, #220	; 0xdc
 8006d44:	2078      	movs	r0, #120	; 0x78
 8006d46:	f7ff f8c5 	bl	8005ed4 <LCD_ShowString>
	LCD_ShowString(40, 240, lcddev.width, lcddev.height, 16, "fac is:");
 8006d4a:	4b2d      	ldr	r3, [pc, #180]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006d4c:	881a      	ldrh	r2, [r3, #0]
 8006d4e:	4b2c      	ldr	r3, [pc, #176]	; (8006e00 <TP_Adj_Info_Show+0x19c>)
 8006d50:	885b      	ldrh	r3, [r3, #2]
 8006d52:	4934      	ldr	r1, [pc, #208]	; (8006e24 <TP_Adj_Info_Show+0x1c0>)
 8006d54:	9101      	str	r1, [sp, #4]
 8006d56:	2110      	movs	r1, #16
 8006d58:	9100      	str	r1, [sp, #0]
 8006d5a:	21f0      	movs	r1, #240	; 0xf0
 8006d5c:	2028      	movs	r0, #40	; 0x28
 8006d5e:	f7ff f8b9 	bl	8005ed4 <LCD_ShowString>
	LCD_ShowNum(40 + 24, 160, x0, 4, 16);	   //显示数值
 8006d62:	88fa      	ldrh	r2, [r7, #6]
 8006d64:	2310      	movs	r3, #16
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	2304      	movs	r3, #4
 8006d6a:	21a0      	movs	r1, #160	; 0xa0
 8006d6c:	2040      	movs	r0, #64	; 0x40
 8006d6e:	f7ff f83f 	bl	8005df0 <LCD_ShowNum>
	LCD_ShowNum(40 + 24 + 80, 160, y0, 4, 16); //显示数值
 8006d72:	88ba      	ldrh	r2, [r7, #4]
 8006d74:	2310      	movs	r3, #16
 8006d76:	9300      	str	r3, [sp, #0]
 8006d78:	2304      	movs	r3, #4
 8006d7a:	21a0      	movs	r1, #160	; 0xa0
 8006d7c:	2090      	movs	r0, #144	; 0x90
 8006d7e:	f7ff f837 	bl	8005df0 <LCD_ShowNum>
	LCD_ShowNum(40 + 24, 180, x1, 4, 16);	   //显示数值
 8006d82:	887a      	ldrh	r2, [r7, #2]
 8006d84:	2310      	movs	r3, #16
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	2304      	movs	r3, #4
 8006d8a:	21b4      	movs	r1, #180	; 0xb4
 8006d8c:	2040      	movs	r0, #64	; 0x40
 8006d8e:	f7ff f82f 	bl	8005df0 <LCD_ShowNum>
	LCD_ShowNum(40 + 24 + 80, 180, y1, 4, 16); //显示数值
 8006d92:	883a      	ldrh	r2, [r7, #0]
 8006d94:	2310      	movs	r3, #16
 8006d96:	9300      	str	r3, [sp, #0]
 8006d98:	2304      	movs	r3, #4
 8006d9a:	21b4      	movs	r1, #180	; 0xb4
 8006d9c:	2090      	movs	r0, #144	; 0x90
 8006d9e:	f7ff f827 	bl	8005df0 <LCD_ShowNum>
	LCD_ShowNum(40 + 24, 200, x2, 4, 16);	   //显示数值
 8006da2:	8b3a      	ldrh	r2, [r7, #24]
 8006da4:	2310      	movs	r3, #16
 8006da6:	9300      	str	r3, [sp, #0]
 8006da8:	2304      	movs	r3, #4
 8006daa:	21c8      	movs	r1, #200	; 0xc8
 8006dac:	2040      	movs	r0, #64	; 0x40
 8006dae:	f7ff f81f 	bl	8005df0 <LCD_ShowNum>
	LCD_ShowNum(40 + 24 + 80, 200, y2, 4, 16); //显示数值
 8006db2:	8bba      	ldrh	r2, [r7, #28]
 8006db4:	2310      	movs	r3, #16
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	2304      	movs	r3, #4
 8006dba:	21c8      	movs	r1, #200	; 0xc8
 8006dbc:	2090      	movs	r0, #144	; 0x90
 8006dbe:	f7ff f817 	bl	8005df0 <LCD_ShowNum>
	LCD_ShowNum(40 + 24, 220, x3, 4, 16);	   //显示数值
 8006dc2:	8c3a      	ldrh	r2, [r7, #32]
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	9300      	str	r3, [sp, #0]
 8006dc8:	2304      	movs	r3, #4
 8006dca:	21dc      	movs	r1, #220	; 0xdc
 8006dcc:	2040      	movs	r0, #64	; 0x40
 8006dce:	f7ff f80f 	bl	8005df0 <LCD_ShowNum>
	LCD_ShowNum(40 + 24 + 80, 220, y3, 4, 16); //显示数值
 8006dd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006dd4:	2310      	movs	r3, #16
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	2304      	movs	r3, #4
 8006dda:	21dc      	movs	r1, #220	; 0xdc
 8006ddc:	2090      	movs	r0, #144	; 0x90
 8006dde:	f7ff f807 	bl	8005df0 <LCD_ShowNum>
	LCD_ShowNum(40 + 56, 240, fac, 3, 16);	   //显示数值,该数值必须在95~105范围之内.
 8006de2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006de4:	2310      	movs	r3, #16
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	2303      	movs	r3, #3
 8006dea:	21f0      	movs	r1, #240	; 0xf0
 8006dec:	2060      	movs	r0, #96	; 0x60
 8006dee:	f7fe ffff 	bl	8005df0 <LCD_ShowNum>
}
 8006df2:	bf00      	nop
 8006df4:	370c      	adds	r7, #12
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd90      	pop	{r4, r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	200000d4 	.word	0x200000d4
 8006e00:	20000140 	.word	0x20000140
 8006e04:	080095fc 	.word	0x080095fc
 8006e08:	08009600 	.word	0x08009600
 8006e0c:	08009604 	.word	0x08009604
 8006e10:	08009608 	.word	0x08009608
 8006e14:	0800960c 	.word	0x0800960c
 8006e18:	08009610 	.word	0x08009610
 8006e1c:	08009614 	.word	0x08009614
 8006e20:	08009618 	.word	0x08009618
 8006e24:	0800961c 	.word	0x0800961c

08006e28 <TP_Adjust>:

//触摸屏校准代码
//得到四个校准参数
void TP_Adjust(void)
{
 8006e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e2c:	b093      	sub	sp, #76	; 0x4c
 8006e2e:	af06      	add	r7, sp, #24
	u16 pos_temp[4][2]; //坐标缓存值
	u8 cnt = 0;
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	u16 d1, d2;
	u32 tem1, tem2;
	double fac;
	u16 outtime = 0;
 8006e36:	2300      	movs	r3, #0
 8006e38:	85bb      	strh	r3, [r7, #44]	; 0x2c
	cnt = 0;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	POINT_COLOR = BLUE;
 8006e40:	4bbd      	ldr	r3, [pc, #756]	; (8007138 <TP_Adjust+0x310>)
 8006e42:	221f      	movs	r2, #31
 8006e44:	801a      	strh	r2, [r3, #0]
	BACK_COLOR = WHITE;
 8006e46:	4bbd      	ldr	r3, [pc, #756]	; (800713c <TP_Adjust+0x314>)
 8006e48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e4c:	801a      	strh	r2, [r3, #0]
	LCD_Clear(WHITE);  //清屏
 8006e4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006e52:	f7fe fd1b 	bl	800588c <LCD_Clear>
	POINT_COLOR = RED; //红色
 8006e56:	4bb8      	ldr	r3, [pc, #736]	; (8007138 <TP_Adjust+0x310>)
 8006e58:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006e5c:	801a      	strh	r2, [r3, #0]
	LCD_Clear(WHITE);  //清屏
 8006e5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006e62:	f7fe fd13 	bl	800588c <LCD_Clear>
	POINT_COLOR = BLACK;
 8006e66:	4bb4      	ldr	r3, [pc, #720]	; (8007138 <TP_Adjust+0x310>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(40, 40, 160, 100, 16, (u8 *)TP_REMIND_MSG_TBL); //显示提示信息
 8006e6c:	4bb4      	ldr	r3, [pc, #720]	; (8007140 <TP_Adjust+0x318>)
 8006e6e:	9301      	str	r3, [sp, #4]
 8006e70:	2310      	movs	r3, #16
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	2364      	movs	r3, #100	; 0x64
 8006e76:	22a0      	movs	r2, #160	; 0xa0
 8006e78:	2128      	movs	r1, #40	; 0x28
 8006e7a:	2028      	movs	r0, #40	; 0x28
 8006e7c:	f7ff f82a 	bl	8005ed4 <LCD_ShowString>
	TP_Drow_Touch_Point(20, 20, RED);							   //画点1
 8006e80:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006e84:	2114      	movs	r1, #20
 8006e86:	2014      	movs	r0, #20
 8006e88:	f7ff fd50 	bl	800692c <TP_Drow_Touch_Point>
	tp_dev.sta = 0;												   //消除触发信号
 8006e8c:	4bad      	ldr	r3, [pc, #692]	; (8007144 <TP_Adjust+0x31c>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac = 0;											   //xfac用来标记是否校准过,所以校准之前必须清掉!以免错误
 8006e94:	4bab      	ldr	r3, [pc, #684]	; (8007144 <TP_Adjust+0x31c>)
 8006e96:	f04f 0200 	mov.w	r2, #0
 8006e9a:	625a      	str	r2, [r3, #36]	; 0x24
	while (1)													   //如果连续10秒钟没有按下,则自动退出
	{
		tp_dev.scan(1);							 //扫描物理坐标
 8006e9c:	4ba9      	ldr	r3, [pc, #676]	; (8007144 <TP_Adjust+0x31c>)
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	2001      	movs	r0, #1
 8006ea2:	4798      	blx	r3
		if ((tp_dev.sta & 0xc0) == TP_CATH_PRES) //按键按下了一次(此时按键松开了.)
 8006ea4:	4ba7      	ldr	r3, [pc, #668]	; (8007144 <TP_Adjust+0x31c>)
 8006ea6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006eaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006eae:	2b40      	cmp	r3, #64	; 0x40
 8006eb0:	f040 83b9 	bne.w	8007626 <TP_Adjust+0x7fe>
		{
			outtime = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	85bb      	strh	r3, [r7, #44]	; 0x2c
			tp_dev.sta &= ~(1 << 6); //标记按键已经被处理过了.
 8006eb8:	4ba2      	ldr	r3, [pc, #648]	; (8007144 <TP_Adjust+0x31c>)
 8006eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ec2:	b2da      	uxtb	r2, r3
 8006ec4:	4b9f      	ldr	r3, [pc, #636]	; (8007144 <TP_Adjust+0x31c>)
 8006ec6:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0] = tp_dev.x[0];
 8006eca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ece:	4a9d      	ldr	r2, [pc, #628]	; (8007144 <TP_Adjust+0x31c>)
 8006ed0:	8992      	ldrh	r2, [r2, #12]
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006ed8:	440b      	add	r3, r1
 8006eda:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1] = tp_dev.y[0];
 8006ede:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ee2:	4a98      	ldr	r2, [pc, #608]	; (8007144 <TP_Adjust+0x31c>)
 8006ee4:	8ad2      	ldrh	r2, [r2, #22]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8006eec:	440b      	add	r3, r1
 8006eee:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8006ef2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch (cnt)
 8006efc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f00:	3b01      	subs	r3, #1
 8006f02:	2b03      	cmp	r3, #3
 8006f04:	f200 8390 	bhi.w	8007628 <TP_Adjust+0x800>
 8006f08:	a201      	add	r2, pc, #4	; (adr r2, 8006f10 <TP_Adjust+0xe8>)
 8006f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0e:	bf00      	nop
 8006f10:	08006f21 	.word	0x08006f21
 8006f14:	08006f43 	.word	0x08006f43
 8006f18:	08006f6d 	.word	0x08006f6d
 8006f1c:	08006f9d 	.word	0x08006f9d
			{
			case 1:
				TP_Drow_Touch_Point(20, 20, WHITE);				 //清除点1
 8006f20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f24:	2114      	movs	r1, #20
 8006f26:	2014      	movs	r0, #20
 8006f28:	f7ff fd00 	bl	800692c <TP_Drow_Touch_Point>
				TP_Drow_Touch_Point(lcddev.width - 20, 20, RED); //画点2
 8006f2c:	4b86      	ldr	r3, [pc, #536]	; (8007148 <TP_Adjust+0x320>)
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	3b14      	subs	r3, #20
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006f38:	2114      	movs	r1, #20
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7ff fcf6 	bl	800692c <TP_Drow_Touch_Point>
				break;
 8006f40:	e372      	b.n	8007628 <TP_Adjust+0x800>
			case 2:
				TP_Drow_Touch_Point(lcddev.width - 20, 20, WHITE); //清除点2
 8006f42:	4b81      	ldr	r3, [pc, #516]	; (8007148 <TP_Adjust+0x320>)
 8006f44:	881b      	ldrh	r3, [r3, #0]
 8006f46:	3b14      	subs	r3, #20
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f4e:	2114      	movs	r1, #20
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff fceb 	bl	800692c <TP_Drow_Touch_Point>
				TP_Drow_Touch_Point(20, lcddev.height - 20, RED);  //画点3
 8006f56:	4b7c      	ldr	r3, [pc, #496]	; (8007148 <TP_Adjust+0x320>)
 8006f58:	885b      	ldrh	r3, [r3, #2]
 8006f5a:	3b14      	subs	r3, #20
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006f62:	4619      	mov	r1, r3
 8006f64:	2014      	movs	r0, #20
 8006f66:	f7ff fce1 	bl	800692c <TP_Drow_Touch_Point>
				break;
 8006f6a:	e35d      	b.n	8007628 <TP_Adjust+0x800>
			case 3:
				TP_Drow_Touch_Point(20, lcddev.height - 20, WHITE);				 //清除点3
 8006f6c:	4b76      	ldr	r3, [pc, #472]	; (8007148 <TP_Adjust+0x320>)
 8006f6e:	885b      	ldrh	r3, [r3, #2]
 8006f70:	3b14      	subs	r3, #20
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f78:	4619      	mov	r1, r3
 8006f7a:	2014      	movs	r0, #20
 8006f7c:	f7ff fcd6 	bl	800692c <TP_Drow_Touch_Point>
				TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, RED); //画点4
 8006f80:	4b71      	ldr	r3, [pc, #452]	; (8007148 <TP_Adjust+0x320>)
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	3b14      	subs	r3, #20
 8006f86:	b298      	uxth	r0, r3
 8006f88:	4b6f      	ldr	r3, [pc, #444]	; (8007148 <TP_Adjust+0x320>)
 8006f8a:	885b      	ldrh	r3, [r3, #2]
 8006f8c:	3b14      	subs	r3, #20
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006f94:	4619      	mov	r1, r3
 8006f96:	f7ff fcc9 	bl	800692c <TP_Drow_Touch_Point>
				break;
 8006f9a:	e345      	b.n	8007628 <TP_Adjust+0x800>
			case 4:											 //全部四个点已经得到
															 //对边相等
				tem1 = abs(pos_temp[0][0] - pos_temp[1][0]); //x1-x2
 8006f9c:	893b      	ldrh	r3, [r7, #8]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	89bb      	ldrh	r3, [r7, #12]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bfb8      	it	lt
 8006fa8:	425b      	neglt	r3, r3
 8006faa:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[0][1] - pos_temp[1][1]); //y1-y2
 8006fac:	897b      	ldrh	r3, [r7, #10]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	89fb      	ldrh	r3, [r7, #14]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	bfb8      	it	lt
 8006fb8:	425b      	neglt	r3, r3
 8006fba:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 8006fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbe:	fb03 f303 	mul.w	r3, r3, r3
 8006fc2:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc6:	fb03 f303 	mul.w	r3, r3, r3
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
				d1 = sqrt(tem1 + tem2); //得到1,2的距离
 8006fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	4413      	add	r3, r2
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7f9 fa3a 	bl	800044c <__aeabi_ui2d>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	ec43 2b10 	vmov	d0, r2, r3
 8006fe0:	f002 f9da 	bl	8009398 <sqrt>
 8006fe4:	ec53 2b10 	vmov	r2, r3, d0
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4619      	mov	r1, r3
 8006fec:	f7f9 fd58 	bl	8000aa0 <__aeabi_d2uiz>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	847b      	strh	r3, [r7, #34]	; 0x22

				tem1 = abs(pos_temp[2][0] - pos_temp[3][0]); //x3-x4
 8006ff4:	8a3b      	ldrh	r3, [r7, #16]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	8abb      	ldrh	r3, [r7, #20]
 8006ffa:	1ad3      	subs	r3, r2, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	bfb8      	it	lt
 8007000:	425b      	neglt	r3, r3
 8007002:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[2][1] - pos_temp[3][1]); //y3-y4
 8007004:	8a7b      	ldrh	r3, [r7, #18]
 8007006:	461a      	mov	r2, r3
 8007008:	8afb      	ldrh	r3, [r7, #22]
 800700a:	1ad3      	subs	r3, r2, r3
 800700c:	2b00      	cmp	r3, #0
 800700e:	bfb8      	it	lt
 8007010:	425b      	neglt	r3, r3
 8007012:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	fb03 f303 	mul.w	r3, r3, r3
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701e:	fb03 f303 	mul.w	r3, r3, r3
 8007022:	627b      	str	r3, [r7, #36]	; 0x24
				d2 = sqrt(tem1 + tem2); //得到3,4的距离
 8007024:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007028:	4413      	add	r3, r2
 800702a:	4618      	mov	r0, r3
 800702c:	f7f9 fa0e 	bl	800044c <__aeabi_ui2d>
 8007030:	4602      	mov	r2, r0
 8007032:	460b      	mov	r3, r1
 8007034:	ec43 2b10 	vmov	d0, r2, r3
 8007038:	f002 f9ae 	bl	8009398 <sqrt>
 800703c:	ec53 2b10 	vmov	r2, r3, d0
 8007040:	4610      	mov	r0, r2
 8007042:	4619      	mov	r1, r3
 8007044:	f7f9 fd2c 	bl	8000aa0 <__aeabi_d2uiz>
 8007048:	4603      	mov	r3, r0
 800704a:	843b      	strh	r3, [r7, #32]
				fac = (float)d1 / d2;
 800704c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800704e:	ee07 3a90 	vmov	s15, r3
 8007052:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007056:	8c3b      	ldrh	r3, [r7, #32]
 8007058:	ee07 3a90 	vmov	s15, r3
 800705c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007060:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007064:	ee16 0a90 	vmov	r0, s13
 8007068:	f7f9 fa12 	bl	8000490 <__aeabi_f2d>
 800706c:	4602      	mov	r2, r0
 800706e:	460b      	mov	r3, r1
 8007070:	e9c7 2306 	strd	r2, r3, [r7, #24]
				if (fac < 0.95 || fac > 1.05 || d1 == 0 || d2 == 0) //不合格
 8007074:	a32c      	add	r3, pc, #176	; (adr r3, 8007128 <TP_Adjust+0x300>)
 8007076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800707e:	f7f9 fcd1 	bl	8000a24 <__aeabi_dcmplt>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10f      	bne.n	80070a8 <TP_Adjust+0x280>
 8007088:	a329      	add	r3, pc, #164	; (adr r3, 8007130 <TP_Adjust+0x308>)
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007092:	f7f9 fce5 	bl	8000a60 <__aeabi_dcmpgt>
 8007096:	4603      	mov	r3, r0
 8007098:	2b00      	cmp	r3, #0
 800709a:	d105      	bne.n	80070a8 <TP_Adjust+0x280>
 800709c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <TP_Adjust+0x280>
 80070a2:	8c3b      	ldrh	r3, [r7, #32]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d153      	bne.n	8007150 <TP_Adjust+0x328>
				{
					cnt = 0;
 80070a8:	2300      	movs	r3, #0
 80070aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE);																							 //清除点4
 80070ae:	4b26      	ldr	r3, [pc, #152]	; (8007148 <TP_Adjust+0x320>)
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	3b14      	subs	r3, #20
 80070b4:	b298      	uxth	r0, r3
 80070b6:	4b24      	ldr	r3, [pc, #144]	; (8007148 <TP_Adjust+0x320>)
 80070b8:	885b      	ldrh	r3, [r3, #2]
 80070ba:	3b14      	subs	r3, #20
 80070bc:	b29b      	uxth	r3, r3
 80070be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80070c2:	4619      	mov	r1, r3
 80070c4:	f7ff fc32 	bl	800692c <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20, 20, RED);																															 //画点1
 80070c8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80070cc:	2114      	movs	r1, #20
 80070ce:	2014      	movs	r0, #20
 80070d0:	f7ff fc2c 	bl	800692c <TP_Drow_Touch_Point>
					TP_Adj_Info_Show(pos_temp[0][0], pos_temp[0][1], pos_temp[1][0], pos_temp[1][1], pos_temp[2][0], pos_temp[2][1], pos_temp[3][0], pos_temp[3][1], fac * 100); //显示数据
 80070d4:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 80070d8:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 80070dc:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 80070e0:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 80070e4:	8a3c      	ldrh	r4, [r7, #16]
 80070e6:	8a7d      	ldrh	r5, [r7, #18]
 80070e8:	8abe      	ldrh	r6, [r7, #20]
 80070ea:	8afb      	ldrh	r3, [r7, #22]
 80070ec:	607b      	str	r3, [r7, #4]
 80070ee:	f04f 0200 	mov.w	r2, #0
 80070f2:	4b16      	ldr	r3, [pc, #88]	; (800714c <TP_Adjust+0x324>)
 80070f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80070f8:	f7f9 fa22 	bl	8000540 <__aeabi_dmul>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4610      	mov	r0, r2
 8007102:	4619      	mov	r1, r3
 8007104:	f7f9 fccc 	bl	8000aa0 <__aeabi_d2uiz>
 8007108:	4603      	mov	r3, r0
 800710a:	b29b      	uxth	r3, r3
 800710c:	9304      	str	r3, [sp, #16]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	9303      	str	r3, [sp, #12]
 8007112:	9602      	str	r6, [sp, #8]
 8007114:	9501      	str	r5, [sp, #4]
 8007116:	9400      	str	r4, [sp, #0]
 8007118:	465b      	mov	r3, fp
 800711a:	4652      	mov	r2, sl
 800711c:	4649      	mov	r1, r9
 800711e:	4640      	mov	r0, r8
 8007120:	f7ff fda0 	bl	8006c64 <TP_Adj_Info_Show>
					continue;
 8007124:	e28e      	b.n	8007644 <TP_Adjust+0x81c>
 8007126:	bf00      	nop
 8007128:	66666666 	.word	0x66666666
 800712c:	3fee6666 	.word	0x3fee6666
 8007130:	cccccccd 	.word	0xcccccccd
 8007134:	3ff0cccc 	.word	0x3ff0cccc
 8007138:	200000d4 	.word	0x200000d4
 800713c:	20000000 	.word	0x20000000
 8007140:	08009580 	.word	0x08009580
 8007144:	20000008 	.word	0x20000008
 8007148:	20000140 	.word	0x20000140
 800714c:	40590000 	.word	0x40590000
				}
				tem1 = abs(pos_temp[0][0] - pos_temp[2][0]); //x1-x3
 8007150:	893b      	ldrh	r3, [r7, #8]
 8007152:	461a      	mov	r2, r3
 8007154:	8a3b      	ldrh	r3, [r7, #16]
 8007156:	1ad3      	subs	r3, r2, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	bfb8      	it	lt
 800715c:	425b      	neglt	r3, r3
 800715e:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[0][1] - pos_temp[2][1]); //y1-y3
 8007160:	897b      	ldrh	r3, [r7, #10]
 8007162:	461a      	mov	r2, r3
 8007164:	8a7b      	ldrh	r3, [r7, #18]
 8007166:	1ad3      	subs	r3, r2, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	bfb8      	it	lt
 800716c:	425b      	neglt	r3, r3
 800716e:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	fb03 f303 	mul.w	r3, r3, r3
 8007176:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800717a:	fb03 f303 	mul.w	r3, r3, r3
 800717e:	627b      	str	r3, [r7, #36]	; 0x24
				d1 = sqrt(tem1 + tem2); //得到1,3的距离
 8007180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	4413      	add	r3, r2
 8007186:	4618      	mov	r0, r3
 8007188:	f7f9 f960 	bl	800044c <__aeabi_ui2d>
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	ec43 2b10 	vmov	d0, r2, r3
 8007194:	f002 f900 	bl	8009398 <sqrt>
 8007198:	ec53 2b10 	vmov	r2, r3, d0
 800719c:	4610      	mov	r0, r2
 800719e:	4619      	mov	r1, r3
 80071a0:	f7f9 fc7e 	bl	8000aa0 <__aeabi_d2uiz>
 80071a4:	4603      	mov	r3, r0
 80071a6:	847b      	strh	r3, [r7, #34]	; 0x22

				tem1 = abs(pos_temp[1][0] - pos_temp[3][0]); //x2-x4
 80071a8:	89bb      	ldrh	r3, [r7, #12]
 80071aa:	461a      	mov	r2, r3
 80071ac:	8abb      	ldrh	r3, [r7, #20]
 80071ae:	1ad3      	subs	r3, r2, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	bfb8      	it	lt
 80071b4:	425b      	neglt	r3, r3
 80071b6:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[1][1] - pos_temp[3][1]); //y2-y4
 80071b8:	89fb      	ldrh	r3, [r7, #14]
 80071ba:	461a      	mov	r2, r3
 80071bc:	8afb      	ldrh	r3, [r7, #22]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	bfb8      	it	lt
 80071c4:	425b      	neglt	r3, r3
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	fb03 f303 	mul.w	r3, r3, r3
 80071ce:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	fb03 f303 	mul.w	r3, r3, r3
 80071d6:	627b      	str	r3, [r7, #36]	; 0x24
				d2 = sqrt(tem1 + tem2); //得到2,4的距离
 80071d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	4413      	add	r3, r2
 80071de:	4618      	mov	r0, r3
 80071e0:	f7f9 f934 	bl	800044c <__aeabi_ui2d>
 80071e4:	4602      	mov	r2, r0
 80071e6:	460b      	mov	r3, r1
 80071e8:	ec43 2b10 	vmov	d0, r2, r3
 80071ec:	f002 f8d4 	bl	8009398 <sqrt>
 80071f0:	ec53 2b10 	vmov	r2, r3, d0
 80071f4:	4610      	mov	r0, r2
 80071f6:	4619      	mov	r1, r3
 80071f8:	f7f9 fc52 	bl	8000aa0 <__aeabi_d2uiz>
 80071fc:	4603      	mov	r3, r0
 80071fe:	843b      	strh	r3, [r7, #32]
				fac = (float)d1 / d2;
 8007200:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007202:	ee07 3a90 	vmov	s15, r3
 8007206:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800720a:	8c3b      	ldrh	r3, [r7, #32]
 800720c:	ee07 3a90 	vmov	s15, r3
 8007210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007214:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007218:	ee16 0a90 	vmov	r0, s13
 800721c:	f7f9 f938 	bl	8000490 <__aeabi_f2d>
 8007220:	4602      	mov	r2, r0
 8007222:	460b      	mov	r3, r1
 8007224:	e9c7 2306 	strd	r2, r3, [r7, #24]
				if (fac < 0.95 || fac > 1.05) //不合格
 8007228:	a389      	add	r3, pc, #548	; (adr r3, 8007450 <TP_Adjust+0x628>)
 800722a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800722e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007232:	f7f9 fbf7 	bl	8000a24 <__aeabi_dcmplt>
 8007236:	4603      	mov	r3, r0
 8007238:	2b00      	cmp	r3, #0
 800723a:	d109      	bne.n	8007250 <TP_Adjust+0x428>
 800723c:	a386      	add	r3, pc, #536	; (adr r3, 8007458 <TP_Adjust+0x630>)
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8007246:	f7f9 fc0b 	bl	8000a60 <__aeabi_dcmpgt>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d03e      	beq.n	80072ce <TP_Adjust+0x4a6>
				{
					cnt = 0;
 8007250:	2300      	movs	r3, #0
 8007252:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE);																							 //清除点4
 8007256:	4b82      	ldr	r3, [pc, #520]	; (8007460 <TP_Adjust+0x638>)
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	3b14      	subs	r3, #20
 800725c:	b298      	uxth	r0, r3
 800725e:	4b80      	ldr	r3, [pc, #512]	; (8007460 <TP_Adjust+0x638>)
 8007260:	885b      	ldrh	r3, [r3, #2]
 8007262:	3b14      	subs	r3, #20
 8007264:	b29b      	uxth	r3, r3
 8007266:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800726a:	4619      	mov	r1, r3
 800726c:	f7ff fb5e 	bl	800692c <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20, 20, RED);																															 //画点1
 8007270:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8007274:	2114      	movs	r1, #20
 8007276:	2014      	movs	r0, #20
 8007278:	f7ff fb58 	bl	800692c <TP_Drow_Touch_Point>
					TP_Adj_Info_Show(pos_temp[0][0], pos_temp[0][1], pos_temp[1][0], pos_temp[1][1], pos_temp[2][0], pos_temp[2][1], pos_temp[3][0], pos_temp[3][1], fac * 100); //显示数据
 800727c:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 8007280:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 8007284:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 8007288:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 800728c:	8a3c      	ldrh	r4, [r7, #16]
 800728e:	8a7d      	ldrh	r5, [r7, #18]
 8007290:	8abe      	ldrh	r6, [r7, #20]
 8007292:	8afb      	ldrh	r3, [r7, #22]
 8007294:	607b      	str	r3, [r7, #4]
 8007296:	f04f 0200 	mov.w	r2, #0
 800729a:	4b72      	ldr	r3, [pc, #456]	; (8007464 <TP_Adjust+0x63c>)
 800729c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80072a0:	f7f9 f94e 	bl	8000540 <__aeabi_dmul>
 80072a4:	4602      	mov	r2, r0
 80072a6:	460b      	mov	r3, r1
 80072a8:	4610      	mov	r0, r2
 80072aa:	4619      	mov	r1, r3
 80072ac:	f7f9 fbf8 	bl	8000aa0 <__aeabi_d2uiz>
 80072b0:	4603      	mov	r3, r0
 80072b2:	b29b      	uxth	r3, r3
 80072b4:	9304      	str	r3, [sp, #16]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	9303      	str	r3, [sp, #12]
 80072ba:	9602      	str	r6, [sp, #8]
 80072bc:	9501      	str	r5, [sp, #4]
 80072be:	9400      	str	r4, [sp, #0]
 80072c0:	465b      	mov	r3, fp
 80072c2:	4652      	mov	r2, sl
 80072c4:	4649      	mov	r1, r9
 80072c6:	4640      	mov	r0, r8
 80072c8:	f7ff fccc 	bl	8006c64 <TP_Adj_Info_Show>
					continue;
 80072cc:	e1ba      	b.n	8007644 <TP_Adjust+0x81c>
				} //正确了

				//对角线相等
				tem1 = abs(pos_temp[1][0] - pos_temp[2][0]); //x1-x3
 80072ce:	89bb      	ldrh	r3, [r7, #12]
 80072d0:	461a      	mov	r2, r3
 80072d2:	8a3b      	ldrh	r3, [r7, #16]
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	bfb8      	it	lt
 80072da:	425b      	neglt	r3, r3
 80072dc:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[1][1] - pos_temp[2][1]); //y1-y3
 80072de:	89fb      	ldrh	r3, [r7, #14]
 80072e0:	461a      	mov	r2, r3
 80072e2:	8a7b      	ldrh	r3, [r7, #18]
 80072e4:	1ad3      	subs	r3, r2, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	bfb8      	it	lt
 80072ea:	425b      	neglt	r3, r3
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 80072ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f0:	fb03 f303 	mul.w	r3, r3, r3
 80072f4:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 80072f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f8:	fb03 f303 	mul.w	r3, r3, r3
 80072fc:	627b      	str	r3, [r7, #36]	; 0x24
				d1 = sqrt(tem1 + tem2); //得到1,4的距离
 80072fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	4413      	add	r3, r2
 8007304:	4618      	mov	r0, r3
 8007306:	f7f9 f8a1 	bl	800044c <__aeabi_ui2d>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	ec43 2b10 	vmov	d0, r2, r3
 8007312:	f002 f841 	bl	8009398 <sqrt>
 8007316:	ec53 2b10 	vmov	r2, r3, d0
 800731a:	4610      	mov	r0, r2
 800731c:	4619      	mov	r1, r3
 800731e:	f7f9 fbbf 	bl	8000aa0 <__aeabi_d2uiz>
 8007322:	4603      	mov	r3, r0
 8007324:	847b      	strh	r3, [r7, #34]	; 0x22

				tem1 = abs(pos_temp[0][0] - pos_temp[3][0]); //x2-x4
 8007326:	893b      	ldrh	r3, [r7, #8]
 8007328:	461a      	mov	r2, r3
 800732a:	8abb      	ldrh	r3, [r7, #20]
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	bfb8      	it	lt
 8007332:	425b      	neglt	r3, r3
 8007334:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[0][1] - pos_temp[3][1]); //y2-y4
 8007336:	897b      	ldrh	r3, [r7, #10]
 8007338:	461a      	mov	r2, r3
 800733a:	8afb      	ldrh	r3, [r7, #22]
 800733c:	1ad3      	subs	r3, r2, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	bfb8      	it	lt
 8007342:	425b      	neglt	r3, r3
 8007344:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	fb03 f303 	mul.w	r3, r3, r3
 800734c:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	fb03 f303 	mul.w	r3, r3, r3
 8007354:	627b      	str	r3, [r7, #36]	; 0x24
				d2 = sqrt(tem1 + tem2); //得到2,3的距离
 8007356:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735a:	4413      	add	r3, r2
 800735c:	4618      	mov	r0, r3
 800735e:	f7f9 f875 	bl	800044c <__aeabi_ui2d>
 8007362:	4602      	mov	r2, r0
 8007364:	460b      	mov	r3, r1
 8007366:	ec43 2b10 	vmov	d0, r2, r3
 800736a:	f002 f815 	bl	8009398 <sqrt>
 800736e:	ec53 2b10 	vmov	r2, r3, d0
 8007372:	4610      	mov	r0, r2
 8007374:	4619      	mov	r1, r3
 8007376:	f7f9 fb93 	bl	8000aa0 <__aeabi_d2uiz>
 800737a:	4603      	mov	r3, r0
 800737c:	843b      	strh	r3, [r7, #32]
				fac = (float)d1 / d2;
 800737e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007380:	ee07 3a90 	vmov	s15, r3
 8007384:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007388:	8c3b      	ldrh	r3, [r7, #32]
 800738a:	ee07 3a90 	vmov	s15, r3
 800738e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007392:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007396:	ee16 0a90 	vmov	r0, s13
 800739a:	f7f9 f879 	bl	8000490 <__aeabi_f2d>
 800739e:	4602      	mov	r2, r0
 80073a0:	460b      	mov	r3, r1
 80073a2:	e9c7 2306 	strd	r2, r3, [r7, #24]
				if (fac < 0.95 || fac > 1.05) //不合格
 80073a6:	a32a      	add	r3, pc, #168	; (adr r3, 8007450 <TP_Adjust+0x628>)
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80073b0:	f7f9 fb38 	bl	8000a24 <__aeabi_dcmplt>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d109      	bne.n	80073ce <TP_Adjust+0x5a6>
 80073ba:	a327      	add	r3, pc, #156	; (adr r3, 8007458 <TP_Adjust+0x630>)
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80073c4:	f7f9 fb4c 	bl	8000a60 <__aeabi_dcmpgt>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d04c      	beq.n	8007468 <TP_Adjust+0x640>
				{
					cnt = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE);																							 //清除点4
 80073d4:	4b22      	ldr	r3, [pc, #136]	; (8007460 <TP_Adjust+0x638>)
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	3b14      	subs	r3, #20
 80073da:	b298      	uxth	r0, r3
 80073dc:	4b20      	ldr	r3, [pc, #128]	; (8007460 <TP_Adjust+0x638>)
 80073de:	885b      	ldrh	r3, [r3, #2]
 80073e0:	3b14      	subs	r3, #20
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80073e8:	4619      	mov	r1, r3
 80073ea:	f7ff fa9f 	bl	800692c <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20, 20, RED);																															 //画点1
 80073ee:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80073f2:	2114      	movs	r1, #20
 80073f4:	2014      	movs	r0, #20
 80073f6:	f7ff fa99 	bl	800692c <TP_Drow_Touch_Point>
					TP_Adj_Info_Show(pos_temp[0][0], pos_temp[0][1], pos_temp[1][0], pos_temp[1][1], pos_temp[2][0], pos_temp[2][1], pos_temp[3][0], pos_temp[3][1], fac * 100); //显示数据
 80073fa:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 80073fe:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 8007402:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 8007406:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 800740a:	8a3c      	ldrh	r4, [r7, #16]
 800740c:	8a7d      	ldrh	r5, [r7, #18]
 800740e:	8abe      	ldrh	r6, [r7, #20]
 8007410:	8afb      	ldrh	r3, [r7, #22]
 8007412:	607b      	str	r3, [r7, #4]
 8007414:	f04f 0200 	mov.w	r2, #0
 8007418:	4b12      	ldr	r3, [pc, #72]	; (8007464 <TP_Adjust+0x63c>)
 800741a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800741e:	f7f9 f88f 	bl	8000540 <__aeabi_dmul>
 8007422:	4602      	mov	r2, r0
 8007424:	460b      	mov	r3, r1
 8007426:	4610      	mov	r0, r2
 8007428:	4619      	mov	r1, r3
 800742a:	f7f9 fb39 	bl	8000aa0 <__aeabi_d2uiz>
 800742e:	4603      	mov	r3, r0
 8007430:	b29b      	uxth	r3, r3
 8007432:	9304      	str	r3, [sp, #16]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	9303      	str	r3, [sp, #12]
 8007438:	9602      	str	r6, [sp, #8]
 800743a:	9501      	str	r5, [sp, #4]
 800743c:	9400      	str	r4, [sp, #0]
 800743e:	465b      	mov	r3, fp
 8007440:	4652      	mov	r2, sl
 8007442:	4649      	mov	r1, r9
 8007444:	4640      	mov	r0, r8
 8007446:	f7ff fc0d 	bl	8006c64 <TP_Adj_Info_Show>
					continue;
 800744a:	e0fb      	b.n	8007644 <TP_Adjust+0x81c>
 800744c:	f3af 8000 	nop.w
 8007450:	66666666 	.word	0x66666666
 8007454:	3fee6666 	.word	0x3fee6666
 8007458:	cccccccd 	.word	0xcccccccd
 800745c:	3ff0cccc 	.word	0x3ff0cccc
 8007460:	20000140 	.word	0x20000140
 8007464:	40590000 	.word	0x40590000
				} //正确了
				//计算结果
				tp_dev.xfac = (float)(lcddev.width - 40) / (pos_temp[1][0] - pos_temp[0][0]);		//得到xfac
 8007468:	4b79      	ldr	r3, [pc, #484]	; (8007650 <TP_Adjust+0x828>)
 800746a:	881b      	ldrh	r3, [r3, #0]
 800746c:	3b28      	subs	r3, #40	; 0x28
 800746e:	ee07 3a90 	vmov	s15, r3
 8007472:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007476:	89bb      	ldrh	r3, [r7, #12]
 8007478:	461a      	mov	r2, r3
 800747a:	893b      	ldrh	r3, [r7, #8]
 800747c:	1ad3      	subs	r3, r2, r3
 800747e:	ee07 3a90 	vmov	s15, r3
 8007482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800748a:	4b72      	ldr	r3, [pc, #456]	; (8007654 <TP_Adjust+0x82c>)
 800748c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				tp_dev.xoff = (lcddev.width - tp_dev.xfac * (pos_temp[1][0] + pos_temp[0][0])) / 2; //得到xoff
 8007490:	4b6f      	ldr	r3, [pc, #444]	; (8007650 <TP_Adjust+0x828>)
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	ee07 3a90 	vmov	s15, r3
 8007498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800749c:	4b6d      	ldr	r3, [pc, #436]	; (8007654 <TP_Adjust+0x82c>)
 800749e:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80074a2:	89bb      	ldrh	r3, [r7, #12]
 80074a4:	461a      	mov	r2, r3
 80074a6:	893b      	ldrh	r3, [r7, #8]
 80074a8:	4413      	add	r3, r2
 80074aa:	ee07 3a90 	vmov	s15, r3
 80074ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80074b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80074b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80074ba:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80074be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074c6:	ee17 3a90 	vmov	r3, s15
 80074ca:	b21a      	sxth	r2, r3
 80074cc:	4b61      	ldr	r3, [pc, #388]	; (8007654 <TP_Adjust+0x82c>)
 80074ce:	859a      	strh	r2, [r3, #44]	; 0x2c

				tp_dev.yfac = (float)(lcddev.height - 40) / (pos_temp[2][1] - pos_temp[0][1]);		 //得到yfac
 80074d0:	4b5f      	ldr	r3, [pc, #380]	; (8007650 <TP_Adjust+0x828>)
 80074d2:	885b      	ldrh	r3, [r3, #2]
 80074d4:	3b28      	subs	r3, #40	; 0x28
 80074d6:	ee07 3a90 	vmov	s15, r3
 80074da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80074de:	8a7b      	ldrh	r3, [r7, #18]
 80074e0:	461a      	mov	r2, r3
 80074e2:	897b      	ldrh	r3, [r7, #10]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	ee07 3a90 	vmov	s15, r3
 80074ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80074ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074f2:	4b58      	ldr	r3, [pc, #352]	; (8007654 <TP_Adjust+0x82c>)
 80074f4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				tp_dev.yoff = (lcddev.height - tp_dev.yfac * (pos_temp[2][1] + pos_temp[0][1])) / 2; //得到yoff
 80074f8:	4b55      	ldr	r3, [pc, #340]	; (8007650 <TP_Adjust+0x828>)
 80074fa:	885b      	ldrh	r3, [r3, #2]
 80074fc:	ee07 3a90 	vmov	s15, r3
 8007500:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007504:	4b53      	ldr	r3, [pc, #332]	; (8007654 <TP_Adjust+0x82c>)
 8007506:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 800750a:	8a7b      	ldrh	r3, [r7, #18]
 800750c:	461a      	mov	r2, r3
 800750e:	897b      	ldrh	r3, [r7, #10]
 8007510:	4413      	add	r3, r2
 8007512:	ee07 3a90 	vmov	s15, r3
 8007516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800751a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800751e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007522:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007526:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800752a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800752e:	ee17 3a90 	vmov	r3, s15
 8007532:	b21a      	sxth	r2, r3
 8007534:	4b47      	ldr	r3, [pc, #284]	; (8007654 <TP_Adjust+0x82c>)
 8007536:	85da      	strh	r2, [r3, #46]	; 0x2e
				if (abs(tp_dev.xfac) > 2 || abs(tp_dev.yfac) > 2)									 //触屏和预设的相反了.
 8007538:	4b46      	ldr	r3, [pc, #280]	; (8007654 <TP_Adjust+0x82c>)
 800753a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800753e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007542:	ee17 3a90 	vmov	r3, s15
 8007546:	2b00      	cmp	r3, #0
 8007548:	bfb8      	it	lt
 800754a:	425b      	neglt	r3, r3
 800754c:	2b02      	cmp	r3, #2
 800754e:	dc0b      	bgt.n	8007568 <TP_Adjust+0x740>
 8007550:	4b40      	ldr	r3, [pc, #256]	; (8007654 <TP_Adjust+0x82c>)
 8007552:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800755a:	ee17 3a90 	vmov	r3, s15
 800755e:	2b00      	cmp	r3, #0
 8007560:	bfb8      	it	lt
 8007562:	425b      	neglt	r3, r3
 8007564:	2b02      	cmp	r3, #2
 8007566:	dd40      	ble.n	80075ea <TP_Adjust+0x7c2>
				{
					cnt = 0;
 8007568:	2300      	movs	r3, #0
 800756a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE); //清除点4
 800756e:	4b38      	ldr	r3, [pc, #224]	; (8007650 <TP_Adjust+0x828>)
 8007570:	881b      	ldrh	r3, [r3, #0]
 8007572:	3b14      	subs	r3, #20
 8007574:	b298      	uxth	r0, r3
 8007576:	4b36      	ldr	r3, [pc, #216]	; (8007650 <TP_Adjust+0x828>)
 8007578:	885b      	ldrh	r3, [r3, #2]
 800757a:	3b14      	subs	r3, #20
 800757c:	b29b      	uxth	r3, r3
 800757e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007582:	4619      	mov	r1, r3
 8007584:	f7ff f9d2 	bl	800692c <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20, 20, RED);								   //画点1
 8007588:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800758c:	2114      	movs	r1, #20
 800758e:	2014      	movs	r0, #20
 8007590:	f7ff f9cc 	bl	800692c <TP_Drow_Touch_Point>
					LCD_ShowString(40, 26, lcddev.width, lcddev.height, 16, "TP Need readjust!");
 8007594:	4b2e      	ldr	r3, [pc, #184]	; (8007650 <TP_Adjust+0x828>)
 8007596:	881a      	ldrh	r2, [r3, #0]
 8007598:	4b2d      	ldr	r3, [pc, #180]	; (8007650 <TP_Adjust+0x828>)
 800759a:	885b      	ldrh	r3, [r3, #2]
 800759c:	492e      	ldr	r1, [pc, #184]	; (8007658 <TP_Adjust+0x830>)
 800759e:	9101      	str	r1, [sp, #4]
 80075a0:	2110      	movs	r1, #16
 80075a2:	9100      	str	r1, [sp, #0]
 80075a4:	211a      	movs	r1, #26
 80075a6:	2028      	movs	r0, #40	; 0x28
 80075a8:	f7fe fc94 	bl	8005ed4 <LCD_ShowString>
					tp_dev.touchtype = !tp_dev.touchtype; //修改触屏类型.
 80075ac:	4b29      	ldr	r3, [pc, #164]	; (8007654 <TP_Adjust+0x82c>)
 80075ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	bf0c      	ite	eq
 80075b6:	2301      	moveq	r3, #1
 80075b8:	2300      	movne	r3, #0
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	4b25      	ldr	r3, [pc, #148]	; (8007654 <TP_Adjust+0x82c>)
 80075c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					if (tp_dev.touchtype)				  //X,Y方向与屏幕相反
 80075c4:	4b23      	ldr	r3, [pc, #140]	; (8007654 <TP_Adjust+0x82c>)
 80075c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d006      	beq.n	80075dc <TP_Adjust+0x7b4>
					{
						CMD_RDX = 0X90;
 80075ce:	4b23      	ldr	r3, [pc, #140]	; (800765c <TP_Adjust+0x834>)
 80075d0:	2290      	movs	r2, #144	; 0x90
 80075d2:	701a      	strb	r2, [r3, #0]
						CMD_RDY = 0XD0;
 80075d4:	4b22      	ldr	r3, [pc, #136]	; (8007660 <TP_Adjust+0x838>)
 80075d6:	22d0      	movs	r2, #208	; 0xd0
 80075d8:	701a      	strb	r2, [r3, #0]
					else //X,Y方向与屏幕相同
					{
						CMD_RDX = 0XD0;
						CMD_RDY = 0X90;
					}
					continue;
 80075da:	e033      	b.n	8007644 <TP_Adjust+0x81c>
						CMD_RDX = 0XD0;
 80075dc:	4b1f      	ldr	r3, [pc, #124]	; (800765c <TP_Adjust+0x834>)
 80075de:	22d0      	movs	r2, #208	; 0xd0
 80075e0:	701a      	strb	r2, [r3, #0]
						CMD_RDY = 0X90;
 80075e2:	4b1f      	ldr	r3, [pc, #124]	; (8007660 <TP_Adjust+0x838>)
 80075e4:	2290      	movs	r2, #144	; 0x90
 80075e6:	701a      	strb	r2, [r3, #0]
					continue;
 80075e8:	e02c      	b.n	8007644 <TP_Adjust+0x81c>
				}
				POINT_COLOR = BLUE;
 80075ea:	4b1e      	ldr	r3, [pc, #120]	; (8007664 <TP_Adjust+0x83c>)
 80075ec:	221f      	movs	r2, #31
 80075ee:	801a      	strh	r2, [r3, #0]
				LCD_Clear(WHITE);																	 //清屏
 80075f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80075f4:	f7fe f94a 	bl	800588c <LCD_Clear>
				LCD_ShowString(35, 110, lcddev.width, lcddev.height, 16, "Touch Screen Adjust OK!"); //校正完成
 80075f8:	4b15      	ldr	r3, [pc, #84]	; (8007650 <TP_Adjust+0x828>)
 80075fa:	881a      	ldrh	r2, [r3, #0]
 80075fc:	4b14      	ldr	r3, [pc, #80]	; (8007650 <TP_Adjust+0x828>)
 80075fe:	885b      	ldrh	r3, [r3, #2]
 8007600:	4919      	ldr	r1, [pc, #100]	; (8007668 <TP_Adjust+0x840>)
 8007602:	9101      	str	r1, [sp, #4]
 8007604:	2110      	movs	r1, #16
 8007606:	9100      	str	r1, [sp, #0]
 8007608:	216e      	movs	r1, #110	; 0x6e
 800760a:	2023      	movs	r0, #35	; 0x23
 800760c:	f7fe fc62 	bl	8005ed4 <LCD_ShowString>
				delay_ms(1000);
 8007610:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007614:	f7f9 fcea 	bl	8000fec <delay_ms>
				TP_Save_Adjdata();
 8007618:	f7ff fa6e 	bl	8006af8 <TP_Save_Adjdata>
				LCD_Clear(WHITE); //清屏
 800761c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007620:	f7fe f934 	bl	800588c <LCD_Clear>
 8007624:	e00f      	b.n	8007646 <TP_Adjust+0x81e>
				return;			  //校正完成
			}
		}
 8007626:	bf00      	nop
		delay_ms(10);
 8007628:	200a      	movs	r0, #10
 800762a:	f7f9 fcdf 	bl	8000fec <delay_ms>
		outtime++;
 800762e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007630:	3301      	adds	r3, #1
 8007632:	85bb      	strh	r3, [r7, #44]	; 0x2c
		if (outtime > 1000)
 8007634:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007636:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800763a:	f67f ac2f 	bls.w	8006e9c <TP_Adjust+0x74>
		{
			TP_Get_Adjdata();
 800763e:	f7ff faa9 	bl	8006b94 <TP_Get_Adjdata>
			break;
 8007642:	e000      	b.n	8007646 <TP_Adjust+0x81e>
		tp_dev.scan(1);							 //扫描物理坐标
 8007644:	e42a      	b.n	8006e9c <TP_Adjust+0x74>
		}
	}
}
 8007646:	3734      	adds	r7, #52	; 0x34
 8007648:	46bd      	mov	sp, r7
 800764a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800764e:	bf00      	nop
 8007650:	20000140 	.word	0x20000140
 8007654:	20000008 	.word	0x20000008
 8007658:	08009624 	.word	0x08009624
 800765c:	2000003c 	.word	0x2000003c
 8007660:	2000003d 	.word	0x2000003d
 8007664:	200000d4 	.word	0x200000d4
 8007668:	08009638 	.word	0x08009638

0800766c <TP_Init>:
//触摸屏初始化
//返回值:0,没有进行校准
//       1,进行过校准
u8 TP_Init(void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	af00      	add	r7, sp, #0

	// GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;	  //PF11设置推挽输出
	// GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; //输出模式
	// GPIO_Init(GPIOF, &GPIO_InitStructure);		  //初始化

	TP_Read_XY(&tp_dev.x[0], &tp_dev.y[0]); //第一次读取初始化
 8007670:	490c      	ldr	r1, [pc, #48]	; (80076a4 <TP_Init+0x38>)
 8007672:	480d      	ldr	r0, [pc, #52]	; (80076a8 <TP_Init+0x3c>)
 8007674:	f7ff f8d6 	bl	8006824 <TP_Read_XY>
	AT24CXX_Init();							//初始化24CXX
 8007678:	f7f9 fbae 	bl	8000dd8 <AT24CXX_Init>
	if (TP_Get_Adjdata())
 800767c:	f7ff fa8a 	bl	8006b94 <TP_Get_Adjdata>
 8007680:	4603      	mov	r3, r0
 8007682:	2b00      	cmp	r3, #0
 8007684:	d001      	beq.n	800768a <TP_Init+0x1e>
		return 0; //已经校准
 8007686:	2300      	movs	r3, #0
 8007688:	e00a      	b.n	80076a0 <TP_Init+0x34>
	else		  //未校准?
	{
		LCD_Clear(WHITE); //清屏
 800768a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800768e:	f7fe f8fd 	bl	800588c <LCD_Clear>
		TP_Adjust();	  //屏幕校准
 8007692:	f7ff fbc9 	bl	8006e28 <TP_Adjust>
		TP_Save_Adjdata();
 8007696:	f7ff fa2f 	bl	8006af8 <TP_Save_Adjdata>
	}
	TP_Get_Adjdata();
 800769a:	f7ff fa7b 	bl	8006b94 <TP_Get_Adjdata>
	// }
	return 1;
 800769e:	2301      	movs	r3, #1
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	2000001e 	.word	0x2000001e
 80076a8:	20000014 	.word	0x20000014

080076ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80076ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80076e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80076b0:	480d      	ldr	r0, [pc, #52]	; (80076e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80076b2:	490e      	ldr	r1, [pc, #56]	; (80076ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80076b4:	4a0e      	ldr	r2, [pc, #56]	; (80076f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80076b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80076b8:	e002      	b.n	80076c0 <LoopCopyDataInit>

080076ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80076ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80076bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80076be:	3304      	adds	r3, #4

080076c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80076c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80076c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80076c4:	d3f9      	bcc.n	80076ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80076c6:	4a0b      	ldr	r2, [pc, #44]	; (80076f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80076c8:	4c0b      	ldr	r4, [pc, #44]	; (80076f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80076ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80076cc:	e001      	b.n	80076d2 <LoopFillZerobss>

080076ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80076ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80076d0:	3204      	adds	r2, #4

080076d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80076d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80076d4:	d3fb      	bcc.n	80076ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80076d6:	f7fe ff11 	bl	80064fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80076da:	f001 fe31 	bl	8009340 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80076de:	f7fe fc47 	bl	8005f70 <main>
  bx  lr    
 80076e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80076e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80076e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80076ec:	200000b0 	.word	0x200000b0
  ldr r2, =_sidata
 80076f0:	0800ae30 	.word	0x0800ae30
  ldr r2, =_sbss
 80076f4:	200000b0 	.word	0x200000b0
  ldr r4, =_ebss
 80076f8:	2000019c 	.word	0x2000019c

080076fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80076fc:	e7fe      	b.n	80076fc <ADC_IRQHandler>
	...

08007700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007704:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <HAL_Init+0x40>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a0d      	ldr	r2, [pc, #52]	; (8007740 <HAL_Init+0x40>)
 800770a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800770e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007710:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <HAL_Init+0x40>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a0a      	ldr	r2, [pc, #40]	; (8007740 <HAL_Init+0x40>)
 8007716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800771a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800771c:	4b08      	ldr	r3, [pc, #32]	; (8007740 <HAL_Init+0x40>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a07      	ldr	r2, [pc, #28]	; (8007740 <HAL_Init+0x40>)
 8007722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007728:	2003      	movs	r0, #3
 800772a:	f000 f94f 	bl	80079cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800772e:	2000      	movs	r0, #0
 8007730:	f000 f808 	bl	8007744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007734:	f7fe fe74 	bl	8006420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	40023c00 	.word	0x40023c00

08007744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800774c:	4b12      	ldr	r3, [pc, #72]	; (8007798 <HAL_InitTick+0x54>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	4b12      	ldr	r3, [pc, #72]	; (800779c <HAL_InitTick+0x58>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	4619      	mov	r1, r3
 8007756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800775a:	fbb3 f3f1 	udiv	r3, r3, r1
 800775e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007762:	4618      	mov	r0, r3
 8007764:	f000 f967 	bl	8007a36 <HAL_SYSTICK_Config>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e00e      	b.n	8007790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b0f      	cmp	r3, #15
 8007776:	d80a      	bhi.n	800778e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007778:	2200      	movs	r2, #0
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	f04f 30ff 	mov.w	r0, #4294967295
 8007780:	f000 f92f 	bl	80079e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007784:	4a06      	ldr	r2, [pc, #24]	; (80077a0 <HAL_InitTick+0x5c>)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	e000      	b.n	8007790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
}
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	20000004 	.word	0x20000004
 800779c:	20000044 	.word	0x20000044
 80077a0:	20000040 	.word	0x20000040

080077a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80077a8:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <HAL_IncTick+0x20>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	461a      	mov	r2, r3
 80077ae:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <HAL_IncTick+0x24>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4413      	add	r3, r2
 80077b4:	4a04      	ldr	r2, [pc, #16]	; (80077c8 <HAL_IncTick+0x24>)
 80077b6:	6013      	str	r3, [r2, #0]
}
 80077b8:	bf00      	nop
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	20000044 	.word	0x20000044
 80077c8:	20000198 	.word	0x20000198

080077cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
  return uwTick;
 80077d0:	4b03      	ldr	r3, [pc, #12]	; (80077e0 <HAL_GetTick+0x14>)
 80077d2:	681b      	ldr	r3, [r3, #0]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	20000198 	.word	0x20000198

080077e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80077ec:	f7ff ffee 	bl	80077cc <HAL_GetTick>
 80077f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fc:	d005      	beq.n	800780a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80077fe:	4b0a      	ldr	r3, [pc, #40]	; (8007828 <HAL_Delay+0x44>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4413      	add	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800780a:	bf00      	nop
 800780c:	f7ff ffde 	bl	80077cc <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	429a      	cmp	r2, r3
 800781a:	d8f7      	bhi.n	800780c <HAL_Delay+0x28>
  {
  }
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20000044 	.word	0x20000044

0800782c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800783c:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <__NVIC_SetPriorityGrouping+0x44>)
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007848:	4013      	ands	r3, r2
 800784a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800785c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800785e:	4a04      	ldr	r2, [pc, #16]	; (8007870 <__NVIC_SetPriorityGrouping+0x44>)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	60d3      	str	r3, [r2, #12]
}
 8007864:	bf00      	nop
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	e000ed00 	.word	0xe000ed00

08007874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007878:	4b04      	ldr	r3, [pc, #16]	; (800788c <__NVIC_GetPriorityGrouping+0x18>)
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	0a1b      	lsrs	r3, r3, #8
 800787e:	f003 0307 	and.w	r3, r3, #7
}
 8007882:	4618      	mov	r0, r3
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	e000ed00 	.word	0xe000ed00

08007890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800789a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	db0b      	blt.n	80078ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	f003 021f 	and.w	r2, r3, #31
 80078a8:	4907      	ldr	r1, [pc, #28]	; (80078c8 <__NVIC_EnableIRQ+0x38>)
 80078aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	2001      	movs	r0, #1
 80078b2:	fa00 f202 	lsl.w	r2, r0, r2
 80078b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	e000e100 	.word	0xe000e100

080078cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	6039      	str	r1, [r7, #0]
 80078d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	db0a      	blt.n	80078f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	490c      	ldr	r1, [pc, #48]	; (8007918 <__NVIC_SetPriority+0x4c>)
 80078e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ea:	0112      	lsls	r2, r2, #4
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	440b      	add	r3, r1
 80078f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078f4:	e00a      	b.n	800790c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	4908      	ldr	r1, [pc, #32]	; (800791c <__NVIC_SetPriority+0x50>)
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	f003 030f 	and.w	r3, r3, #15
 8007902:	3b04      	subs	r3, #4
 8007904:	0112      	lsls	r2, r2, #4
 8007906:	b2d2      	uxtb	r2, r2
 8007908:	440b      	add	r3, r1
 800790a:	761a      	strb	r2, [r3, #24]
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	e000e100 	.word	0xe000e100
 800791c:	e000ed00 	.word	0xe000ed00

08007920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007920:	b480      	push	{r7}
 8007922:	b089      	sub	sp, #36	; 0x24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f1c3 0307 	rsb	r3, r3, #7
 800793a:	2b04      	cmp	r3, #4
 800793c:	bf28      	it	cs
 800793e:	2304      	movcs	r3, #4
 8007940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	3304      	adds	r3, #4
 8007946:	2b06      	cmp	r3, #6
 8007948:	d902      	bls.n	8007950 <NVIC_EncodePriority+0x30>
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	3b03      	subs	r3, #3
 800794e:	e000      	b.n	8007952 <NVIC_EncodePriority+0x32>
 8007950:	2300      	movs	r3, #0
 8007952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007954:	f04f 32ff 	mov.w	r2, #4294967295
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	43da      	mvns	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	401a      	ands	r2, r3
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007968:	f04f 31ff 	mov.w	r1, #4294967295
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	fa01 f303 	lsl.w	r3, r1, r3
 8007972:	43d9      	mvns	r1, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007978:	4313      	orrs	r3, r2
         );
}
 800797a:	4618      	mov	r0, r3
 800797c:	3724      	adds	r7, #36	; 0x24
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
	...

08007988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3b01      	subs	r3, #1
 8007994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007998:	d301      	bcc.n	800799e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800799a:	2301      	movs	r3, #1
 800799c:	e00f      	b.n	80079be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800799e:	4a0a      	ldr	r2, [pc, #40]	; (80079c8 <SysTick_Config+0x40>)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	3b01      	subs	r3, #1
 80079a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80079a6:	210f      	movs	r1, #15
 80079a8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ac:	f7ff ff8e 	bl	80078cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80079b0:	4b05      	ldr	r3, [pc, #20]	; (80079c8 <SysTick_Config+0x40>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80079b6:	4b04      	ldr	r3, [pc, #16]	; (80079c8 <SysTick_Config+0x40>)
 80079b8:	2207      	movs	r2, #7
 80079ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	e000e010 	.word	0xe000e010

080079cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff ff29 	bl	800782c <__NVIC_SetPriorityGrouping>
}
 80079da:	bf00      	nop
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b086      	sub	sp, #24
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	4603      	mov	r3, r0
 80079ea:	60b9      	str	r1, [r7, #8]
 80079ec:	607a      	str	r2, [r7, #4]
 80079ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80079f0:	2300      	movs	r3, #0
 80079f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80079f4:	f7ff ff3e 	bl	8007874 <__NVIC_GetPriorityGrouping>
 80079f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079fa:	687a      	ldr	r2, [r7, #4]
 80079fc:	68b9      	ldr	r1, [r7, #8]
 80079fe:	6978      	ldr	r0, [r7, #20]
 8007a00:	f7ff ff8e 	bl	8007920 <NVIC_EncodePriority>
 8007a04:	4602      	mov	r2, r0
 8007a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a0a:	4611      	mov	r1, r2
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f7ff ff5d 	bl	80078cc <__NVIC_SetPriority>
}
 8007a12:	bf00      	nop
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	4603      	mov	r3, r0
 8007a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff ff31 	bl	8007890 <__NVIC_EnableIRQ>
}
 8007a2e:	bf00      	nop
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b082      	sub	sp, #8
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff ffa2 	bl	8007988 <SysTick_Config>
 8007a44:	4603      	mov	r3, r0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b04      	cmp	r3, #4
 8007a5c:	d106      	bne.n	8007a6c <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8007a5e:	4b09      	ldr	r3, [pc, #36]	; (8007a84 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	4a08      	ldr	r2, [pc, #32]	; (8007a84 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8007a64:	f043 0304 	orr.w	r3, r3, #4
 8007a68:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 8007a6a:	e005      	b.n	8007a78 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8007a6c:	4b05      	ldr	r3, [pc, #20]	; (8007a84 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a04      	ldr	r2, [pc, #16]	; (8007a84 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 8007a72:	f023 0304 	bic.w	r3, r3, #4
 8007a76:	6013      	str	r3, [r2, #0]
}
 8007a78:	bf00      	nop
 8007a7a:	370c      	adds	r7, #12
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	e000e010 	.word	0xe000e010

08007a88 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	e014      	b.n	8007ac4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	791b      	ldrb	r3, [r3, #4]
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d105      	bne.n	8007ab0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7f9 fae0 	bl	8001070 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2202      	movs	r2, #2
 8007ab4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2201      	movs	r2, #1
 8007ac0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3708      	adds	r7, #8
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}

08007acc <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007acc:	b480      	push	{r7}
 8007ace:	b083      	sub	sp, #12
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
 8007ad4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	795b      	ldrb	r3, [r3, #5]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d101      	bne.n	8007ae2 <HAL_DAC_Start+0x16>
 8007ade:	2302      	movs	r3, #2
 8007ae0:	e040      	b.n	8007b64 <HAL_DAC_Start+0x98>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2202      	movs	r2, #2
 8007aec:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	6819      	ldr	r1, [r3, #0]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	f003 0310 	and.w	r3, r3, #16
 8007afa:	2201      	movs	r2, #1
 8007afc:	409a      	lsls	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	430a      	orrs	r2, r1
 8007b04:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10f      	bne.n	8007b2c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8007b16:	2b3c      	cmp	r3, #60	; 0x3c
 8007b18:	d11d      	bne.n	8007b56 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f042 0201 	orr.w	r2, r2, #1
 8007b28:	605a      	str	r2, [r3, #4]
 8007b2a:	e014      	b.n	8007b56 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	f003 0310 	and.w	r3, r3, #16
 8007b3c:	213c      	movs	r1, #60	; 0x3c
 8007b3e:	fa01 f303 	lsl.w	r3, r1, r3
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d107      	bne.n	8007b56 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f042 0202 	orr.w	r2, r2, #2
 8007b54:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007b62:	2300      	movs	r3, #0
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	370c      	adds	r7, #12
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b087      	sub	sp, #28
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	60f8      	str	r0, [r7, #12]
 8007b78:	60b9      	str	r1, [r7, #8]
 8007b7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	795b      	ldrb	r3, [r3, #5]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d101      	bne.n	8007b88 <HAL_DAC_ConfigChannel+0x18>
 8007b84:	2302      	movs	r3, #2
 8007b86:	e03c      	b.n	8007c02 <HAL_DAC_ConfigChannel+0x92>
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2202      	movs	r2, #2
 8007b92:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f003 0310 	and.w	r3, r3, #16
 8007ba2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8007ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8007baa:	43db      	mvns	r3, r3
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f003 0310 	and.w	r3, r3, #16
 8007bc4:	693a      	ldr	r2, [r7, #16]
 8007bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bca:	697a      	ldr	r2, [r7, #20]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	697a      	ldr	r2, [r7, #20]
 8007bd6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	6819      	ldr	r1, [r3, #0]
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f003 0310 	and.w	r3, r3, #16
 8007be4:	22c0      	movs	r2, #192	; 0xc0
 8007be6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bea:	43da      	mvns	r2, r3
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	400a      	ands	r2, r1
 8007bf2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	371c      	adds	r7, #28
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
	...

08007c10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b089      	sub	sp, #36	; 0x24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007c22:	2300      	movs	r3, #0
 8007c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007c26:	2300      	movs	r3, #0
 8007c28:	61fb      	str	r3, [r7, #28]
 8007c2a:	e16b      	b.n	8007f04 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	69fb      	ldr	r3, [r7, #28]
 8007c30:	fa02 f303 	lsl.w	r3, r2, r3
 8007c34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	697a      	ldr	r2, [r7, #20]
 8007c3c:	4013      	ands	r3, r2
 8007c3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	f040 815a 	bne.w	8007efe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	f003 0303 	and.w	r3, r3, #3
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d005      	beq.n	8007c62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	685b      	ldr	r3, [r3, #4]
 8007c5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007c5e:	2b02      	cmp	r3, #2
 8007c60:	d130      	bne.n	8007cc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	005b      	lsls	r3, r3, #1
 8007c6c:	2203      	movs	r2, #3
 8007c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c72:	43db      	mvns	r3, r3
 8007c74:	69ba      	ldr	r2, [r7, #24]
 8007c76:	4013      	ands	r3, r2
 8007c78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	68da      	ldr	r2, [r3, #12]
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	fa02 f303 	lsl.w	r3, r2, r3
 8007c86:	69ba      	ldr	r2, [r7, #24]
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	685b      	ldr	r3, [r3, #4]
 8007c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007c98:	2201      	movs	r2, #1
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ca0:	43db      	mvns	r3, r3
 8007ca2:	69ba      	ldr	r2, [r7, #24]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	091b      	lsrs	r3, r3, #4
 8007cae:	f003 0201 	and.w	r2, r3, #1
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb8:	69ba      	ldr	r2, [r7, #24]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	69ba      	ldr	r2, [r7, #24]
 8007cc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f003 0303 	and.w	r3, r3, #3
 8007ccc:	2b03      	cmp	r3, #3
 8007cce:	d017      	beq.n	8007d00 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007cd6:	69fb      	ldr	r3, [r7, #28]
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	2203      	movs	r2, #3
 8007cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ce0:	43db      	mvns	r3, r3
 8007ce2:	69ba      	ldr	r2, [r7, #24]
 8007ce4:	4013      	ands	r3, r2
 8007ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	689a      	ldr	r2, [r3, #8]
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	005b      	lsls	r3, r3, #1
 8007cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f003 0303 	and.w	r3, r3, #3
 8007d08:	2b02      	cmp	r3, #2
 8007d0a:	d123      	bne.n	8007d54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	08da      	lsrs	r2, r3, #3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	3208      	adds	r2, #8
 8007d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	f003 0307 	and.w	r3, r3, #7
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	220f      	movs	r2, #15
 8007d24:	fa02 f303 	lsl.w	r3, r2, r3
 8007d28:	43db      	mvns	r3, r3
 8007d2a:	69ba      	ldr	r2, [r7, #24]
 8007d2c:	4013      	ands	r3, r2
 8007d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	691a      	ldr	r2, [r3, #16]
 8007d34:	69fb      	ldr	r3, [r7, #28]
 8007d36:	f003 0307 	and.w	r3, r3, #7
 8007d3a:	009b      	lsls	r3, r3, #2
 8007d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	08da      	lsrs	r2, r3, #3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3208      	adds	r2, #8
 8007d4e:	69b9      	ldr	r1, [r7, #24]
 8007d50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007d5a:	69fb      	ldr	r3, [r7, #28]
 8007d5c:	005b      	lsls	r3, r3, #1
 8007d5e:	2203      	movs	r2, #3
 8007d60:	fa02 f303 	lsl.w	r3, r2, r3
 8007d64:	43db      	mvns	r3, r3
 8007d66:	69ba      	ldr	r2, [r7, #24]
 8007d68:	4013      	ands	r3, r2
 8007d6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f003 0203 	and.w	r2, r3, #3
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	005b      	lsls	r3, r3, #1
 8007d78:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7c:	69ba      	ldr	r2, [r7, #24]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 80b4 	beq.w	8007efe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	4b60      	ldr	r3, [pc, #384]	; (8007f1c <HAL_GPIO_Init+0x30c>)
 8007d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d9e:	4a5f      	ldr	r2, [pc, #380]	; (8007f1c <HAL_GPIO_Init+0x30c>)
 8007da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007da4:	6453      	str	r3, [r2, #68]	; 0x44
 8007da6:	4b5d      	ldr	r3, [pc, #372]	; (8007f1c <HAL_GPIO_Init+0x30c>)
 8007da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007db2:	4a5b      	ldr	r2, [pc, #364]	; (8007f20 <HAL_GPIO_Init+0x310>)
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	089b      	lsrs	r3, r3, #2
 8007db8:	3302      	adds	r3, #2
 8007dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	f003 0303 	and.w	r3, r3, #3
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	220f      	movs	r2, #15
 8007dca:	fa02 f303 	lsl.w	r3, r2, r3
 8007dce:	43db      	mvns	r3, r3
 8007dd0:	69ba      	ldr	r2, [r7, #24]
 8007dd2:	4013      	ands	r3, r2
 8007dd4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a52      	ldr	r2, [pc, #328]	; (8007f24 <HAL_GPIO_Init+0x314>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d02b      	beq.n	8007e36 <HAL_GPIO_Init+0x226>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a51      	ldr	r2, [pc, #324]	; (8007f28 <HAL_GPIO_Init+0x318>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d025      	beq.n	8007e32 <HAL_GPIO_Init+0x222>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a50      	ldr	r2, [pc, #320]	; (8007f2c <HAL_GPIO_Init+0x31c>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d01f      	beq.n	8007e2e <HAL_GPIO_Init+0x21e>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a4f      	ldr	r2, [pc, #316]	; (8007f30 <HAL_GPIO_Init+0x320>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d019      	beq.n	8007e2a <HAL_GPIO_Init+0x21a>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a4e      	ldr	r2, [pc, #312]	; (8007f34 <HAL_GPIO_Init+0x324>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d013      	beq.n	8007e26 <HAL_GPIO_Init+0x216>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a4d      	ldr	r2, [pc, #308]	; (8007f38 <HAL_GPIO_Init+0x328>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d00d      	beq.n	8007e22 <HAL_GPIO_Init+0x212>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a4c      	ldr	r2, [pc, #304]	; (8007f3c <HAL_GPIO_Init+0x32c>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d007      	beq.n	8007e1e <HAL_GPIO_Init+0x20e>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a4b      	ldr	r2, [pc, #300]	; (8007f40 <HAL_GPIO_Init+0x330>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d101      	bne.n	8007e1a <HAL_GPIO_Init+0x20a>
 8007e16:	2307      	movs	r3, #7
 8007e18:	e00e      	b.n	8007e38 <HAL_GPIO_Init+0x228>
 8007e1a:	2308      	movs	r3, #8
 8007e1c:	e00c      	b.n	8007e38 <HAL_GPIO_Init+0x228>
 8007e1e:	2306      	movs	r3, #6
 8007e20:	e00a      	b.n	8007e38 <HAL_GPIO_Init+0x228>
 8007e22:	2305      	movs	r3, #5
 8007e24:	e008      	b.n	8007e38 <HAL_GPIO_Init+0x228>
 8007e26:	2304      	movs	r3, #4
 8007e28:	e006      	b.n	8007e38 <HAL_GPIO_Init+0x228>
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e004      	b.n	8007e38 <HAL_GPIO_Init+0x228>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	e002      	b.n	8007e38 <HAL_GPIO_Init+0x228>
 8007e32:	2301      	movs	r3, #1
 8007e34:	e000      	b.n	8007e38 <HAL_GPIO_Init+0x228>
 8007e36:	2300      	movs	r3, #0
 8007e38:	69fa      	ldr	r2, [r7, #28]
 8007e3a:	f002 0203 	and.w	r2, r2, #3
 8007e3e:	0092      	lsls	r2, r2, #2
 8007e40:	4093      	lsls	r3, r2
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e48:	4935      	ldr	r1, [pc, #212]	; (8007f20 <HAL_GPIO_Init+0x310>)
 8007e4a:	69fb      	ldr	r3, [r7, #28]
 8007e4c:	089b      	lsrs	r3, r3, #2
 8007e4e:	3302      	adds	r3, #2
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007e56:	4b3b      	ldr	r3, [pc, #236]	; (8007f44 <HAL_GPIO_Init+0x334>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	43db      	mvns	r3, r3
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	4013      	ands	r3, r2
 8007e64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007e72:	69ba      	ldr	r2, [r7, #24]
 8007e74:	693b      	ldr	r3, [r7, #16]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007e7a:	4a32      	ldr	r2, [pc, #200]	; (8007f44 <HAL_GPIO_Init+0x334>)
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007e80:	4b30      	ldr	r3, [pc, #192]	; (8007f44 <HAL_GPIO_Init+0x334>)
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	43db      	mvns	r3, r3
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	4013      	ands	r3, r2
 8007e8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d003      	beq.n	8007ea4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	4313      	orrs	r3, r2
 8007ea2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007ea4:	4a27      	ldr	r2, [pc, #156]	; (8007f44 <HAL_GPIO_Init+0x334>)
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007eaa:	4b26      	ldr	r3, [pc, #152]	; (8007f44 <HAL_GPIO_Init+0x334>)
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	43db      	mvns	r3, r3
 8007eb4:	69ba      	ldr	r2, [r7, #24]
 8007eb6:	4013      	ands	r3, r2
 8007eb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d003      	beq.n	8007ece <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8007ec6:	69ba      	ldr	r2, [r7, #24]
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007ece:	4a1d      	ldr	r2, [pc, #116]	; (8007f44 <HAL_GPIO_Init+0x334>)
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007ed4:	4b1b      	ldr	r3, [pc, #108]	; (8007f44 <HAL_GPIO_Init+0x334>)
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	43db      	mvns	r3, r3
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d003      	beq.n	8007ef8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007ef0:	69ba      	ldr	r2, [r7, #24]
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007ef8:	4a12      	ldr	r2, [pc, #72]	; (8007f44 <HAL_GPIO_Init+0x334>)
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	3301      	adds	r3, #1
 8007f02:	61fb      	str	r3, [r7, #28]
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	2b0f      	cmp	r3, #15
 8007f08:	f67f ae90 	bls.w	8007c2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007f0c:	bf00      	nop
 8007f0e:	bf00      	nop
 8007f10:	3724      	adds	r7, #36	; 0x24
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	40023800 	.word	0x40023800
 8007f20:	40013800 	.word	0x40013800
 8007f24:	40020000 	.word	0x40020000
 8007f28:	40020400 	.word	0x40020400
 8007f2c:	40020800 	.word	0x40020800
 8007f30:	40020c00 	.word	0x40020c00
 8007f34:	40021000 	.word	0x40021000
 8007f38:	40021400 	.word	0x40021400
 8007f3c:	40021800 	.word	0x40021800
 8007f40:	40021c00 	.word	0x40021c00
 8007f44:	40013c00 	.word	0x40013c00

08007f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	807b      	strh	r3, [r7, #2]
 8007f54:	4613      	mov	r3, r2
 8007f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007f58:	787b      	ldrb	r3, [r7, #1]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d003      	beq.n	8007f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f5e:	887a      	ldrh	r2, [r7, #2]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007f64:	e003      	b.n	8007f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007f66:	887b      	ldrh	r3, [r7, #2]
 8007f68:	041a      	lsls	r2, r3, #16
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	619a      	str	r2, [r3, #24]
}
 8007f6e:	bf00      	nop
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
	...

08007f7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e264      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d075      	beq.n	8008086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f9a:	4ba3      	ldr	r3, [pc, #652]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f003 030c 	and.w	r3, r3, #12
 8007fa2:	2b04      	cmp	r3, #4
 8007fa4:	d00c      	beq.n	8007fc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fa6:	4ba0      	ldr	r3, [pc, #640]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007fae:	2b08      	cmp	r3, #8
 8007fb0:	d112      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007fb2:	4b9d      	ldr	r3, [pc, #628]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fbe:	d10b      	bne.n	8007fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fc0:	4b99      	ldr	r3, [pc, #612]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d05b      	beq.n	8008084 <HAL_RCC_OscConfig+0x108>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d157      	bne.n	8008084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e23f      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	685b      	ldr	r3, [r3, #4]
 8007fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fe0:	d106      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x74>
 8007fe2:	4b91      	ldr	r3, [pc, #580]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a90      	ldr	r2, [pc, #576]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8007fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fec:	6013      	str	r3, [r2, #0]
 8007fee:	e01d      	b.n	800802c <HAL_RCC_OscConfig+0xb0>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ff8:	d10c      	bne.n	8008014 <HAL_RCC_OscConfig+0x98>
 8007ffa:	4b8b      	ldr	r3, [pc, #556]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a8a      	ldr	r2, [pc, #552]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8008000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	4b88      	ldr	r3, [pc, #544]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a87      	ldr	r2, [pc, #540]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 800800c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	e00b      	b.n	800802c <HAL_RCC_OscConfig+0xb0>
 8008014:	4b84      	ldr	r3, [pc, #528]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a83      	ldr	r2, [pc, #524]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 800801a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800801e:	6013      	str	r3, [r2, #0]
 8008020:	4b81      	ldr	r3, [pc, #516]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a80      	ldr	r2, [pc, #512]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8008026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800802a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d013      	beq.n	800805c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008034:	f7ff fbca 	bl	80077cc <HAL_GetTick>
 8008038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800803a:	e008      	b.n	800804e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800803c:	f7ff fbc6 	bl	80077cc <HAL_GetTick>
 8008040:	4602      	mov	r2, r0
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	1ad3      	subs	r3, r2, r3
 8008046:	2b64      	cmp	r3, #100	; 0x64
 8008048:	d901      	bls.n	800804e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800804a:	2303      	movs	r3, #3
 800804c:	e204      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800804e:	4b76      	ldr	r3, [pc, #472]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0f0      	beq.n	800803c <HAL_RCC_OscConfig+0xc0>
 800805a:	e014      	b.n	8008086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800805c:	f7ff fbb6 	bl	80077cc <HAL_GetTick>
 8008060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008062:	e008      	b.n	8008076 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008064:	f7ff fbb2 	bl	80077cc <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	2b64      	cmp	r3, #100	; 0x64
 8008070:	d901      	bls.n	8008076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e1f0      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008076:	4b6c      	ldr	r3, [pc, #432]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1f0      	bne.n	8008064 <HAL_RCC_OscConfig+0xe8>
 8008082:	e000      	b.n	8008086 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d063      	beq.n	800815a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008092:	4b65      	ldr	r3, [pc, #404]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f003 030c 	and.w	r3, r3, #12
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00b      	beq.n	80080b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800809e:	4b62      	ldr	r3, [pc, #392]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80080a6:	2b08      	cmp	r3, #8
 80080a8:	d11c      	bne.n	80080e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80080aa:	4b5f      	ldr	r3, [pc, #380]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d116      	bne.n	80080e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080b6:	4b5c      	ldr	r3, [pc, #368]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0302 	and.w	r3, r3, #2
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d005      	beq.n	80080ce <HAL_RCC_OscConfig+0x152>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d001      	beq.n	80080ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e1c4      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ce:	4b56      	ldr	r3, [pc, #344]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	691b      	ldr	r3, [r3, #16]
 80080da:	00db      	lsls	r3, r3, #3
 80080dc:	4952      	ldr	r1, [pc, #328]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 80080de:	4313      	orrs	r3, r2
 80080e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080e2:	e03a      	b.n	800815a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68db      	ldr	r3, [r3, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d020      	beq.n	800812e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080ec:	4b4f      	ldr	r3, [pc, #316]	; (800822c <HAL_RCC_OscConfig+0x2b0>)
 80080ee:	2201      	movs	r2, #1
 80080f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080f2:	f7ff fb6b 	bl	80077cc <HAL_GetTick>
 80080f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080f8:	e008      	b.n	800810c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080fa:	f7ff fb67 	bl	80077cc <HAL_GetTick>
 80080fe:	4602      	mov	r2, r0
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	1ad3      	subs	r3, r2, r3
 8008104:	2b02      	cmp	r3, #2
 8008106:	d901      	bls.n	800810c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008108:	2303      	movs	r3, #3
 800810a:	e1a5      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800810c:	4b46      	ldr	r3, [pc, #280]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0302 	and.w	r3, r3, #2
 8008114:	2b00      	cmp	r3, #0
 8008116:	d0f0      	beq.n	80080fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008118:	4b43      	ldr	r3, [pc, #268]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	00db      	lsls	r3, r3, #3
 8008126:	4940      	ldr	r1, [pc, #256]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8008128:	4313      	orrs	r3, r2
 800812a:	600b      	str	r3, [r1, #0]
 800812c:	e015      	b.n	800815a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800812e:	4b3f      	ldr	r3, [pc, #252]	; (800822c <HAL_RCC_OscConfig+0x2b0>)
 8008130:	2200      	movs	r2, #0
 8008132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008134:	f7ff fb4a 	bl	80077cc <HAL_GetTick>
 8008138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800813a:	e008      	b.n	800814e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800813c:	f7ff fb46 	bl	80077cc <HAL_GetTick>
 8008140:	4602      	mov	r2, r0
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	1ad3      	subs	r3, r2, r3
 8008146:	2b02      	cmp	r3, #2
 8008148:	d901      	bls.n	800814e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800814a:	2303      	movs	r3, #3
 800814c:	e184      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800814e:	4b36      	ldr	r3, [pc, #216]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	f003 0302 	and.w	r3, r3, #2
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1f0      	bne.n	800813c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 0308 	and.w	r3, r3, #8
 8008162:	2b00      	cmp	r3, #0
 8008164:	d030      	beq.n	80081c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d016      	beq.n	800819c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800816e:	4b30      	ldr	r3, [pc, #192]	; (8008230 <HAL_RCC_OscConfig+0x2b4>)
 8008170:	2201      	movs	r2, #1
 8008172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008174:	f7ff fb2a 	bl	80077cc <HAL_GetTick>
 8008178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800817a:	e008      	b.n	800818e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800817c:	f7ff fb26 	bl	80077cc <HAL_GetTick>
 8008180:	4602      	mov	r2, r0
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	1ad3      	subs	r3, r2, r3
 8008186:	2b02      	cmp	r3, #2
 8008188:	d901      	bls.n	800818e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e164      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800818e:	4b26      	ldr	r3, [pc, #152]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 8008190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008192:	f003 0302 	and.w	r3, r3, #2
 8008196:	2b00      	cmp	r3, #0
 8008198:	d0f0      	beq.n	800817c <HAL_RCC_OscConfig+0x200>
 800819a:	e015      	b.n	80081c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800819c:	4b24      	ldr	r3, [pc, #144]	; (8008230 <HAL_RCC_OscConfig+0x2b4>)
 800819e:	2200      	movs	r2, #0
 80081a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081a2:	f7ff fb13 	bl	80077cc <HAL_GetTick>
 80081a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081a8:	e008      	b.n	80081bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80081aa:	f7ff fb0f 	bl	80077cc <HAL_GetTick>
 80081ae:	4602      	mov	r2, r0
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	1ad3      	subs	r3, r2, r3
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d901      	bls.n	80081bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80081b8:	2303      	movs	r3, #3
 80081ba:	e14d      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081bc:	4b1a      	ldr	r3, [pc, #104]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 80081be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081c0:	f003 0302 	and.w	r3, r3, #2
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1f0      	bne.n	80081aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0304 	and.w	r3, r3, #4
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	f000 80a0 	beq.w	8008316 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081d6:	2300      	movs	r3, #0
 80081d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081da:	4b13      	ldr	r3, [pc, #76]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10f      	bne.n	8008206 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081e6:	2300      	movs	r3, #0
 80081e8:	60bb      	str	r3, [r7, #8]
 80081ea:	4b0f      	ldr	r3, [pc, #60]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 80081ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ee:	4a0e      	ldr	r2, [pc, #56]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 80081f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081f4:	6413      	str	r3, [r2, #64]	; 0x40
 80081f6:	4b0c      	ldr	r3, [pc, #48]	; (8008228 <HAL_RCC_OscConfig+0x2ac>)
 80081f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081fe:	60bb      	str	r3, [r7, #8]
 8008200:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008202:	2301      	movs	r3, #1
 8008204:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <HAL_RCC_OscConfig+0x2b8>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800820e:	2b00      	cmp	r3, #0
 8008210:	d121      	bne.n	8008256 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008212:	4b08      	ldr	r3, [pc, #32]	; (8008234 <HAL_RCC_OscConfig+0x2b8>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a07      	ldr	r2, [pc, #28]	; (8008234 <HAL_RCC_OscConfig+0x2b8>)
 8008218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800821c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800821e:	f7ff fad5 	bl	80077cc <HAL_GetTick>
 8008222:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008224:	e011      	b.n	800824a <HAL_RCC_OscConfig+0x2ce>
 8008226:	bf00      	nop
 8008228:	40023800 	.word	0x40023800
 800822c:	42470000 	.word	0x42470000
 8008230:	42470e80 	.word	0x42470e80
 8008234:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008238:	f7ff fac8 	bl	80077cc <HAL_GetTick>
 800823c:	4602      	mov	r2, r0
 800823e:	693b      	ldr	r3, [r7, #16]
 8008240:	1ad3      	subs	r3, r2, r3
 8008242:	2b02      	cmp	r3, #2
 8008244:	d901      	bls.n	800824a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008246:	2303      	movs	r3, #3
 8008248:	e106      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800824a:	4b85      	ldr	r3, [pc, #532]	; (8008460 <HAL_RCC_OscConfig+0x4e4>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008252:	2b00      	cmp	r3, #0
 8008254:	d0f0      	beq.n	8008238 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	2b01      	cmp	r3, #1
 800825c:	d106      	bne.n	800826c <HAL_RCC_OscConfig+0x2f0>
 800825e:	4b81      	ldr	r3, [pc, #516]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 8008260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008262:	4a80      	ldr	r2, [pc, #512]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 8008264:	f043 0301 	orr.w	r3, r3, #1
 8008268:	6713      	str	r3, [r2, #112]	; 0x70
 800826a:	e01c      	b.n	80082a6 <HAL_RCC_OscConfig+0x32a>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	2b05      	cmp	r3, #5
 8008272:	d10c      	bne.n	800828e <HAL_RCC_OscConfig+0x312>
 8008274:	4b7b      	ldr	r3, [pc, #492]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 8008276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008278:	4a7a      	ldr	r2, [pc, #488]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 800827a:	f043 0304 	orr.w	r3, r3, #4
 800827e:	6713      	str	r3, [r2, #112]	; 0x70
 8008280:	4b78      	ldr	r3, [pc, #480]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 8008282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008284:	4a77      	ldr	r2, [pc, #476]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 8008286:	f043 0301 	orr.w	r3, r3, #1
 800828a:	6713      	str	r3, [r2, #112]	; 0x70
 800828c:	e00b      	b.n	80082a6 <HAL_RCC_OscConfig+0x32a>
 800828e:	4b75      	ldr	r3, [pc, #468]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 8008290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008292:	4a74      	ldr	r2, [pc, #464]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 8008294:	f023 0301 	bic.w	r3, r3, #1
 8008298:	6713      	str	r3, [r2, #112]	; 0x70
 800829a:	4b72      	ldr	r3, [pc, #456]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 800829c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800829e:	4a71      	ldr	r2, [pc, #452]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 80082a0:	f023 0304 	bic.w	r3, r3, #4
 80082a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	689b      	ldr	r3, [r3, #8]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d015      	beq.n	80082da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ae:	f7ff fa8d 	bl	80077cc <HAL_GetTick>
 80082b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082b4:	e00a      	b.n	80082cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082b6:	f7ff fa89 	bl	80077cc <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d901      	bls.n	80082cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80082c8:	2303      	movs	r3, #3
 80082ca:	e0c5      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082cc:	4b65      	ldr	r3, [pc, #404]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 80082ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d0:	f003 0302 	and.w	r3, r3, #2
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d0ee      	beq.n	80082b6 <HAL_RCC_OscConfig+0x33a>
 80082d8:	e014      	b.n	8008304 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80082da:	f7ff fa77 	bl	80077cc <HAL_GetTick>
 80082de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082e0:	e00a      	b.n	80082f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082e2:	f7ff fa73 	bl	80077cc <HAL_GetTick>
 80082e6:	4602      	mov	r2, r0
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	1ad3      	subs	r3, r2, r3
 80082ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d901      	bls.n	80082f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80082f4:	2303      	movs	r3, #3
 80082f6:	e0af      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082f8:	4b5a      	ldr	r3, [pc, #360]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 80082fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082fc:	f003 0302 	and.w	r3, r3, #2
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1ee      	bne.n	80082e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008304:	7dfb      	ldrb	r3, [r7, #23]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d105      	bne.n	8008316 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800830a:	4b56      	ldr	r3, [pc, #344]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	4a55      	ldr	r2, [pc, #340]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 8008310:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008314:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	699b      	ldr	r3, [r3, #24]
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 809b 	beq.w	8008456 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008320:	4b50      	ldr	r3, [pc, #320]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f003 030c 	and.w	r3, r3, #12
 8008328:	2b08      	cmp	r3, #8
 800832a:	d05c      	beq.n	80083e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	2b02      	cmp	r3, #2
 8008332:	d141      	bne.n	80083b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008334:	4b4c      	ldr	r3, [pc, #304]	; (8008468 <HAL_RCC_OscConfig+0x4ec>)
 8008336:	2200      	movs	r2, #0
 8008338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800833a:	f7ff fa47 	bl	80077cc <HAL_GetTick>
 800833e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008340:	e008      	b.n	8008354 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008342:	f7ff fa43 	bl	80077cc <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	2b02      	cmp	r3, #2
 800834e:	d901      	bls.n	8008354 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e081      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008354:	4b43      	ldr	r3, [pc, #268]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1f0      	bne.n	8008342 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	69da      	ldr	r2, [r3, #28]
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a1b      	ldr	r3, [r3, #32]
 8008368:	431a      	orrs	r2, r3
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836e:	019b      	lsls	r3, r3, #6
 8008370:	431a      	orrs	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008376:	085b      	lsrs	r3, r3, #1
 8008378:	3b01      	subs	r3, #1
 800837a:	041b      	lsls	r3, r3, #16
 800837c:	431a      	orrs	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008382:	061b      	lsls	r3, r3, #24
 8008384:	4937      	ldr	r1, [pc, #220]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 8008386:	4313      	orrs	r3, r2
 8008388:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800838a:	4b37      	ldr	r3, [pc, #220]	; (8008468 <HAL_RCC_OscConfig+0x4ec>)
 800838c:	2201      	movs	r2, #1
 800838e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008390:	f7ff fa1c 	bl	80077cc <HAL_GetTick>
 8008394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008396:	e008      	b.n	80083aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008398:	f7ff fa18 	bl	80077cc <HAL_GetTick>
 800839c:	4602      	mov	r2, r0
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	1ad3      	subs	r3, r2, r3
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	d901      	bls.n	80083aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80083a6:	2303      	movs	r3, #3
 80083a8:	e056      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80083aa:	4b2e      	ldr	r3, [pc, #184]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d0f0      	beq.n	8008398 <HAL_RCC_OscConfig+0x41c>
 80083b6:	e04e      	b.n	8008456 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083b8:	4b2b      	ldr	r3, [pc, #172]	; (8008468 <HAL_RCC_OscConfig+0x4ec>)
 80083ba:	2200      	movs	r2, #0
 80083bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083be:	f7ff fa05 	bl	80077cc <HAL_GetTick>
 80083c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083c4:	e008      	b.n	80083d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083c6:	f7ff fa01 	bl	80077cc <HAL_GetTick>
 80083ca:	4602      	mov	r2, r0
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	1ad3      	subs	r3, r2, r3
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d901      	bls.n	80083d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80083d4:	2303      	movs	r3, #3
 80083d6:	e03f      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083d8:	4b22      	ldr	r3, [pc, #136]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d1f0      	bne.n	80083c6 <HAL_RCC_OscConfig+0x44a>
 80083e4:	e037      	b.n	8008456 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d101      	bne.n	80083f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e032      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80083f2:	4b1c      	ldr	r3, [pc, #112]	; (8008464 <HAL_RCC_OscConfig+0x4e8>)
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	699b      	ldr	r3, [r3, #24]
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d028      	beq.n	8008452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800840a:	429a      	cmp	r2, r3
 800840c:	d121      	bne.n	8008452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008418:	429a      	cmp	r2, r3
 800841a:	d11a      	bne.n	8008452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008422:	4013      	ands	r3, r2
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008428:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800842a:	4293      	cmp	r3, r2
 800842c:	d111      	bne.n	8008452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008438:	085b      	lsrs	r3, r3, #1
 800843a:	3b01      	subs	r3, #1
 800843c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800843e:	429a      	cmp	r2, r3
 8008440:	d107      	bne.n	8008452 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800844e:	429a      	cmp	r2, r3
 8008450:	d001      	beq.n	8008456 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	e000      	b.n	8008458 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}
 8008460:	40007000 	.word	0x40007000
 8008464:	40023800 	.word	0x40023800
 8008468:	42470060 	.word	0x42470060

0800846c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	e0cc      	b.n	800861a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008480:	4b68      	ldr	r3, [pc, #416]	; (8008624 <HAL_RCC_ClockConfig+0x1b8>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 0307 	and.w	r3, r3, #7
 8008488:	683a      	ldr	r2, [r7, #0]
 800848a:	429a      	cmp	r2, r3
 800848c:	d90c      	bls.n	80084a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800848e:	4b65      	ldr	r3, [pc, #404]	; (8008624 <HAL_RCC_ClockConfig+0x1b8>)
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	b2d2      	uxtb	r2, r2
 8008494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008496:	4b63      	ldr	r3, [pc, #396]	; (8008624 <HAL_RCC_ClockConfig+0x1b8>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0307 	and.w	r3, r3, #7
 800849e:	683a      	ldr	r2, [r7, #0]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d001      	beq.n	80084a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e0b8      	b.n	800861a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0302 	and.w	r3, r3, #2
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d020      	beq.n	80084f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0304 	and.w	r3, r3, #4
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d005      	beq.n	80084cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084c0:	4b59      	ldr	r3, [pc, #356]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	4a58      	ldr	r2, [pc, #352]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 80084c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80084ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f003 0308 	and.w	r3, r3, #8
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d005      	beq.n	80084e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80084d8:	4b53      	ldr	r3, [pc, #332]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	4a52      	ldr	r2, [pc, #328]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 80084de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80084e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084e4:	4b50      	ldr	r3, [pc, #320]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	494d      	ldr	r1, [pc, #308]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 0301 	and.w	r3, r3, #1
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d044      	beq.n	800858c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	2b01      	cmp	r3, #1
 8008508:	d107      	bne.n	800851a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800850a:	4b47      	ldr	r3, [pc, #284]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d119      	bne.n	800854a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008516:	2301      	movs	r3, #1
 8008518:	e07f      	b.n	800861a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	2b02      	cmp	r3, #2
 8008520:	d003      	beq.n	800852a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008526:	2b03      	cmp	r3, #3
 8008528:	d107      	bne.n	800853a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800852a:	4b3f      	ldr	r3, [pc, #252]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008532:	2b00      	cmp	r3, #0
 8008534:	d109      	bne.n	800854a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008536:	2301      	movs	r3, #1
 8008538:	e06f      	b.n	800861a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800853a:	4b3b      	ldr	r3, [pc, #236]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0302 	and.w	r3, r3, #2
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e067      	b.n	800861a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800854a:	4b37      	ldr	r3, [pc, #220]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f023 0203 	bic.w	r2, r3, #3
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	4934      	ldr	r1, [pc, #208]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 8008558:	4313      	orrs	r3, r2
 800855a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800855c:	f7ff f936 	bl	80077cc <HAL_GetTick>
 8008560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008562:	e00a      	b.n	800857a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008564:	f7ff f932 	bl	80077cc <HAL_GetTick>
 8008568:	4602      	mov	r2, r0
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	1ad3      	subs	r3, r2, r3
 800856e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008572:	4293      	cmp	r3, r2
 8008574:	d901      	bls.n	800857a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008576:	2303      	movs	r3, #3
 8008578:	e04f      	b.n	800861a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800857a:	4b2b      	ldr	r3, [pc, #172]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	f003 020c 	and.w	r2, r3, #12
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	429a      	cmp	r2, r3
 800858a:	d1eb      	bne.n	8008564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800858c:	4b25      	ldr	r3, [pc, #148]	; (8008624 <HAL_RCC_ClockConfig+0x1b8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0307 	and.w	r3, r3, #7
 8008594:	683a      	ldr	r2, [r7, #0]
 8008596:	429a      	cmp	r2, r3
 8008598:	d20c      	bcs.n	80085b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800859a:	4b22      	ldr	r3, [pc, #136]	; (8008624 <HAL_RCC_ClockConfig+0x1b8>)
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	b2d2      	uxtb	r2, r2
 80085a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80085a2:	4b20      	ldr	r3, [pc, #128]	; (8008624 <HAL_RCC_ClockConfig+0x1b8>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d001      	beq.n	80085b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e032      	b.n	800861a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0304 	and.w	r3, r3, #4
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d008      	beq.n	80085d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80085c0:	4b19      	ldr	r3, [pc, #100]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	4916      	ldr	r1, [pc, #88]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f003 0308 	and.w	r3, r3, #8
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d009      	beq.n	80085f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80085de:	4b12      	ldr	r3, [pc, #72]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	691b      	ldr	r3, [r3, #16]
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	490e      	ldr	r1, [pc, #56]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80085f2:	f000 f821 	bl	8008638 <HAL_RCC_GetSysClockFreq>
 80085f6:	4602      	mov	r2, r0
 80085f8:	4b0b      	ldr	r3, [pc, #44]	; (8008628 <HAL_RCC_ClockConfig+0x1bc>)
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	091b      	lsrs	r3, r3, #4
 80085fe:	f003 030f 	and.w	r3, r3, #15
 8008602:	490a      	ldr	r1, [pc, #40]	; (800862c <HAL_RCC_ClockConfig+0x1c0>)
 8008604:	5ccb      	ldrb	r3, [r1, r3]
 8008606:	fa22 f303 	lsr.w	r3, r2, r3
 800860a:	4a09      	ldr	r2, [pc, #36]	; (8008630 <HAL_RCC_ClockConfig+0x1c4>)
 800860c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800860e:	4b09      	ldr	r3, [pc, #36]	; (8008634 <HAL_RCC_ClockConfig+0x1c8>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4618      	mov	r0, r3
 8008614:	f7ff f896 	bl	8007744 <HAL_InitTick>

  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	40023c00 	.word	0x40023c00
 8008628:	40023800 	.word	0x40023800
 800862c:	0800ae10 	.word	0x0800ae10
 8008630:	20000004 	.word	0x20000004
 8008634:	20000040 	.word	0x20000040

08008638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008638:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800863c:	b084      	sub	sp, #16
 800863e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008640:	2300      	movs	r3, #0
 8008642:	607b      	str	r3, [r7, #4]
 8008644:	2300      	movs	r3, #0
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	2300      	movs	r3, #0
 800864a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800864c:	2300      	movs	r3, #0
 800864e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008650:	4b67      	ldr	r3, [pc, #412]	; (80087f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008652:	689b      	ldr	r3, [r3, #8]
 8008654:	f003 030c 	and.w	r3, r3, #12
 8008658:	2b08      	cmp	r3, #8
 800865a:	d00d      	beq.n	8008678 <HAL_RCC_GetSysClockFreq+0x40>
 800865c:	2b08      	cmp	r3, #8
 800865e:	f200 80bd 	bhi.w	80087dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8008662:	2b00      	cmp	r3, #0
 8008664:	d002      	beq.n	800866c <HAL_RCC_GetSysClockFreq+0x34>
 8008666:	2b04      	cmp	r3, #4
 8008668:	d003      	beq.n	8008672 <HAL_RCC_GetSysClockFreq+0x3a>
 800866a:	e0b7      	b.n	80087dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800866c:	4b61      	ldr	r3, [pc, #388]	; (80087f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800866e:	60bb      	str	r3, [r7, #8]
       break;
 8008670:	e0b7      	b.n	80087e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008672:	4b61      	ldr	r3, [pc, #388]	; (80087f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8008674:	60bb      	str	r3, [r7, #8]
      break;
 8008676:	e0b4      	b.n	80087e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008678:	4b5d      	ldr	r3, [pc, #372]	; (80087f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008680:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008682:	4b5b      	ldr	r3, [pc, #364]	; (80087f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800868a:	2b00      	cmp	r3, #0
 800868c:	d04d      	beq.n	800872a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800868e:	4b58      	ldr	r3, [pc, #352]	; (80087f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	099b      	lsrs	r3, r3, #6
 8008694:	461a      	mov	r2, r3
 8008696:	f04f 0300 	mov.w	r3, #0
 800869a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800869e:	f04f 0100 	mov.w	r1, #0
 80086a2:	ea02 0800 	and.w	r8, r2, r0
 80086a6:	ea03 0901 	and.w	r9, r3, r1
 80086aa:	4640      	mov	r0, r8
 80086ac:	4649      	mov	r1, r9
 80086ae:	f04f 0200 	mov.w	r2, #0
 80086b2:	f04f 0300 	mov.w	r3, #0
 80086b6:	014b      	lsls	r3, r1, #5
 80086b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80086bc:	0142      	lsls	r2, r0, #5
 80086be:	4610      	mov	r0, r2
 80086c0:	4619      	mov	r1, r3
 80086c2:	ebb0 0008 	subs.w	r0, r0, r8
 80086c6:	eb61 0109 	sbc.w	r1, r1, r9
 80086ca:	f04f 0200 	mov.w	r2, #0
 80086ce:	f04f 0300 	mov.w	r3, #0
 80086d2:	018b      	lsls	r3, r1, #6
 80086d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80086d8:	0182      	lsls	r2, r0, #6
 80086da:	1a12      	subs	r2, r2, r0
 80086dc:	eb63 0301 	sbc.w	r3, r3, r1
 80086e0:	f04f 0000 	mov.w	r0, #0
 80086e4:	f04f 0100 	mov.w	r1, #0
 80086e8:	00d9      	lsls	r1, r3, #3
 80086ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086ee:	00d0      	lsls	r0, r2, #3
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	eb12 0208 	adds.w	r2, r2, r8
 80086f8:	eb43 0309 	adc.w	r3, r3, r9
 80086fc:	f04f 0000 	mov.w	r0, #0
 8008700:	f04f 0100 	mov.w	r1, #0
 8008704:	0259      	lsls	r1, r3, #9
 8008706:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800870a:	0250      	lsls	r0, r2, #9
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	4610      	mov	r0, r2
 8008712:	4619      	mov	r1, r3
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	461a      	mov	r2, r3
 8008718:	f04f 0300 	mov.w	r3, #0
 800871c:	f7f8 f9e0 	bl	8000ae0 <__aeabi_uldivmod>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4613      	mov	r3, r2
 8008726:	60fb      	str	r3, [r7, #12]
 8008728:	e04a      	b.n	80087c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800872a:	4b31      	ldr	r3, [pc, #196]	; (80087f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	099b      	lsrs	r3, r3, #6
 8008730:	461a      	mov	r2, r3
 8008732:	f04f 0300 	mov.w	r3, #0
 8008736:	f240 10ff 	movw	r0, #511	; 0x1ff
 800873a:	f04f 0100 	mov.w	r1, #0
 800873e:	ea02 0400 	and.w	r4, r2, r0
 8008742:	ea03 0501 	and.w	r5, r3, r1
 8008746:	4620      	mov	r0, r4
 8008748:	4629      	mov	r1, r5
 800874a:	f04f 0200 	mov.w	r2, #0
 800874e:	f04f 0300 	mov.w	r3, #0
 8008752:	014b      	lsls	r3, r1, #5
 8008754:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008758:	0142      	lsls	r2, r0, #5
 800875a:	4610      	mov	r0, r2
 800875c:	4619      	mov	r1, r3
 800875e:	1b00      	subs	r0, r0, r4
 8008760:	eb61 0105 	sbc.w	r1, r1, r5
 8008764:	f04f 0200 	mov.w	r2, #0
 8008768:	f04f 0300 	mov.w	r3, #0
 800876c:	018b      	lsls	r3, r1, #6
 800876e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008772:	0182      	lsls	r2, r0, #6
 8008774:	1a12      	subs	r2, r2, r0
 8008776:	eb63 0301 	sbc.w	r3, r3, r1
 800877a:	f04f 0000 	mov.w	r0, #0
 800877e:	f04f 0100 	mov.w	r1, #0
 8008782:	00d9      	lsls	r1, r3, #3
 8008784:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008788:	00d0      	lsls	r0, r2, #3
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	1912      	adds	r2, r2, r4
 8008790:	eb45 0303 	adc.w	r3, r5, r3
 8008794:	f04f 0000 	mov.w	r0, #0
 8008798:	f04f 0100 	mov.w	r1, #0
 800879c:	0299      	lsls	r1, r3, #10
 800879e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80087a2:	0290      	lsls	r0, r2, #10
 80087a4:	4602      	mov	r2, r0
 80087a6:	460b      	mov	r3, r1
 80087a8:	4610      	mov	r0, r2
 80087aa:	4619      	mov	r1, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	461a      	mov	r2, r3
 80087b0:	f04f 0300 	mov.w	r3, #0
 80087b4:	f7f8 f994 	bl	8000ae0 <__aeabi_uldivmod>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	4613      	mov	r3, r2
 80087be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80087c0:	4b0b      	ldr	r3, [pc, #44]	; (80087f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	0c1b      	lsrs	r3, r3, #16
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	3301      	adds	r3, #1
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d8:	60bb      	str	r3, [r7, #8]
      break;
 80087da:	e002      	b.n	80087e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80087dc:	4b05      	ldr	r3, [pc, #20]	; (80087f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80087de:	60bb      	str	r3, [r7, #8]
      break;
 80087e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80087e2:	68bb      	ldr	r3, [r7, #8]
}
 80087e4:	4618      	mov	r0, r3
 80087e6:	3710      	adds	r7, #16
 80087e8:	46bd      	mov	sp, r7
 80087ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80087ee:	bf00      	nop
 80087f0:	40023800 	.word	0x40023800
 80087f4:	00f42400 	.word	0x00f42400
 80087f8:	007a1200 	.word	0x007a1200

080087fc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b084      	sub	sp, #16
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e034      	b.n	800887c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008818:	b2db      	uxtb	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	d106      	bne.n	800882c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	f7f8 fd50 	bl	80012cc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681a      	ldr	r2, [r3, #0]
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	3308      	adds	r3, #8
 8008834:	4619      	mov	r1, r3
 8008836:	4610      	mov	r0, r2
 8008838:	f000 fcac 	bl	8009194 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6818      	ldr	r0, [r3, #0]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	461a      	mov	r2, r3
 8008846:	68b9      	ldr	r1, [r7, #8]
 8008848:	f000 fcf6 	bl	8009238 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	6858      	ldr	r0, [r3, #4]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	689a      	ldr	r2, [r3, #8]
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008858:	6879      	ldr	r1, [r7, #4]
 800885a:	f000 fd2b 	bl	80092b4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	68fa      	ldr	r2, [r7, #12]
 8008864:	6892      	ldr	r2, [r2, #8]
 8008866:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	6892      	ldr	r2, [r2, #8]
 8008872:	f041 0101 	orr.w	r1, r1, #1
 8008876:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800887a:	2300      	movs	r3, #0
}
 800887c:	4618      	mov	r0, r3
 800887e:	3710      	adds	r7, #16
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e041      	b.n	800891a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800889c:	b2db      	uxtb	r3, r3
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d106      	bne.n	80088b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f7fd fe88 	bl	80065c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2202      	movs	r2, #2
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	3304      	adds	r3, #4
 80088c0:	4619      	mov	r1, r3
 80088c2:	4610      	mov	r0, r2
 80088c4:	f000 fa9c 	bl	8008e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2201      	movs	r2, #1
 80088cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008932:	b2db      	uxtb	r3, r3
 8008934:	2b01      	cmp	r3, #1
 8008936:	d001      	beq.n	800893c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008938:	2301      	movs	r3, #1
 800893a:	e04e      	b.n	80089da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68da      	ldr	r2, [r3, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f042 0201 	orr.w	r2, r2, #1
 8008952:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4a23      	ldr	r2, [pc, #140]	; (80089e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d022      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0x80>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008966:	d01d      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0x80>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	4a1f      	ldr	r2, [pc, #124]	; (80089ec <HAL_TIM_Base_Start_IT+0xc8>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d018      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0x80>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4a1e      	ldr	r2, [pc, #120]	; (80089f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008978:	4293      	cmp	r3, r2
 800897a:	d013      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0x80>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a1c      	ldr	r2, [pc, #112]	; (80089f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d00e      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0x80>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a1b      	ldr	r2, [pc, #108]	; (80089f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d009      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0x80>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4a19      	ldr	r2, [pc, #100]	; (80089fc <HAL_TIM_Base_Start_IT+0xd8>)
 8008996:	4293      	cmp	r3, r2
 8008998:	d004      	beq.n	80089a4 <HAL_TIM_Base_Start_IT+0x80>
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a18      	ldr	r2, [pc, #96]	; (8008a00 <HAL_TIM_Base_Start_IT+0xdc>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d111      	bne.n	80089c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f003 0307 	and.w	r3, r3, #7
 80089ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b06      	cmp	r3, #6
 80089b4:	d010      	beq.n	80089d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681a      	ldr	r2, [r3, #0]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f042 0201 	orr.w	r2, r2, #1
 80089c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c6:	e007      	b.n	80089d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681a      	ldr	r2, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f042 0201 	orr.w	r2, r2, #1
 80089d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089d8:	2300      	movs	r3, #0
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3714      	adds	r7, #20
 80089de:	46bd      	mov	sp, r7
 80089e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	40010000 	.word	0x40010000
 80089ec:	40000400 	.word	0x40000400
 80089f0:	40000800 	.word	0x40000800
 80089f4:	40000c00 	.word	0x40000c00
 80089f8:	40010400 	.word	0x40010400
 80089fc:	40014000 	.word	0x40014000
 8008a00:	40001800 	.word	0x40001800

08008a04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	f003 0302 	and.w	r3, r3, #2
 8008a16:	2b02      	cmp	r3, #2
 8008a18:	d122      	bne.n	8008a60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	f003 0302 	and.w	r3, r3, #2
 8008a24:	2b02      	cmp	r3, #2
 8008a26:	d11b      	bne.n	8008a60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f06f 0202 	mvn.w	r2, #2
 8008a30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2201      	movs	r2, #1
 8008a36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	f003 0303 	and.w	r3, r3, #3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 f9bc 	bl	8008dc4 <HAL_TIM_IC_CaptureCallback>
 8008a4c:	e005      	b.n	8008a5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f9ae 	bl	8008db0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f000 f9bf 	bl	8008dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	f003 0304 	and.w	r3, r3, #4
 8008a6a:	2b04      	cmp	r3, #4
 8008a6c:	d122      	bne.n	8008ab4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	f003 0304 	and.w	r3, r3, #4
 8008a78:	2b04      	cmp	r3, #4
 8008a7a:	d11b      	bne.n	8008ab4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f06f 0204 	mvn.w	r2, #4
 8008a84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2202      	movs	r2, #2
 8008a8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f992 	bl	8008dc4 <HAL_TIM_IC_CaptureCallback>
 8008aa0:	e005      	b.n	8008aae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f984 	bl	8008db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 f995 	bl	8008dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	f003 0308 	and.w	r3, r3, #8
 8008abe:	2b08      	cmp	r3, #8
 8008ac0:	d122      	bne.n	8008b08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68db      	ldr	r3, [r3, #12]
 8008ac8:	f003 0308 	and.w	r3, r3, #8
 8008acc:	2b08      	cmp	r3, #8
 8008ace:	d11b      	bne.n	8008b08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f06f 0208 	mvn.w	r2, #8
 8008ad8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2204      	movs	r2, #4
 8008ade:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	f003 0303 	and.w	r3, r3, #3
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d003      	beq.n	8008af6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 f968 	bl	8008dc4 <HAL_TIM_IC_CaptureCallback>
 8008af4:	e005      	b.n	8008b02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f95a 	bl	8008db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f96b 	bl	8008dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2200      	movs	r2, #0
 8008b06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	f003 0310 	and.w	r3, r3, #16
 8008b12:	2b10      	cmp	r3, #16
 8008b14:	d122      	bne.n	8008b5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f003 0310 	and.w	r3, r3, #16
 8008b20:	2b10      	cmp	r3, #16
 8008b22:	d11b      	bne.n	8008b5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f06f 0210 	mvn.w	r2, #16
 8008b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2208      	movs	r2, #8
 8008b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	69db      	ldr	r3, [r3, #28]
 8008b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 f93e 	bl	8008dc4 <HAL_TIM_IC_CaptureCallback>
 8008b48:	e005      	b.n	8008b56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f930 	bl	8008db0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 f941 	bl	8008dd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	f003 0301 	and.w	r3, r3, #1
 8008b66:	2b01      	cmp	r3, #1
 8008b68:	d10e      	bne.n	8008b88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68db      	ldr	r3, [r3, #12]
 8008b70:	f003 0301 	and.w	r3, r3, #1
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d107      	bne.n	8008b88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f06f 0201 	mvn.w	r2, #1
 8008b80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f90a 	bl	8008d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b92:	2b80      	cmp	r3, #128	; 0x80
 8008b94:	d10e      	bne.n	8008bb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba0:	2b80      	cmp	r3, #128	; 0x80
 8008ba2:	d107      	bne.n	8008bb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fae6 	bl	8009180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bbe:	2b40      	cmp	r3, #64	; 0x40
 8008bc0:	d10e      	bne.n	8008be0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bcc:	2b40      	cmp	r3, #64	; 0x40
 8008bce:	d107      	bne.n	8008be0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 f906 	bl	8008dec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	691b      	ldr	r3, [r3, #16]
 8008be6:	f003 0320 	and.w	r3, r3, #32
 8008bea:	2b20      	cmp	r3, #32
 8008bec:	d10e      	bne.n	8008c0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	68db      	ldr	r3, [r3, #12]
 8008bf4:	f003 0320 	and.w	r3, r3, #32
 8008bf8:	2b20      	cmp	r3, #32
 8008bfa:	d107      	bne.n	8008c0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	f06f 0220 	mvn.w	r2, #32
 8008c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c06:	6878      	ldr	r0, [r7, #4]
 8008c08:	f000 fab0 	bl	800916c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c0c:	bf00      	nop
 8008c0e:	3708      	adds	r7, #8
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b084      	sub	sp, #16
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d101      	bne.n	8008c2c <HAL_TIM_ConfigClockSource+0x18>
 8008c28:	2302      	movs	r3, #2
 8008c2a:	e0b3      	b.n	8008d94 <HAL_TIM_ConfigClockSource+0x180>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	2202      	movs	r2, #2
 8008c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008c4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c52:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c64:	d03e      	beq.n	8008ce4 <HAL_TIM_ConfigClockSource+0xd0>
 8008c66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c6a:	f200 8087 	bhi.w	8008d7c <HAL_TIM_ConfigClockSource+0x168>
 8008c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c72:	f000 8085 	beq.w	8008d80 <HAL_TIM_ConfigClockSource+0x16c>
 8008c76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c7a:	d87f      	bhi.n	8008d7c <HAL_TIM_ConfigClockSource+0x168>
 8008c7c:	2b70      	cmp	r3, #112	; 0x70
 8008c7e:	d01a      	beq.n	8008cb6 <HAL_TIM_ConfigClockSource+0xa2>
 8008c80:	2b70      	cmp	r3, #112	; 0x70
 8008c82:	d87b      	bhi.n	8008d7c <HAL_TIM_ConfigClockSource+0x168>
 8008c84:	2b60      	cmp	r3, #96	; 0x60
 8008c86:	d050      	beq.n	8008d2a <HAL_TIM_ConfigClockSource+0x116>
 8008c88:	2b60      	cmp	r3, #96	; 0x60
 8008c8a:	d877      	bhi.n	8008d7c <HAL_TIM_ConfigClockSource+0x168>
 8008c8c:	2b50      	cmp	r3, #80	; 0x50
 8008c8e:	d03c      	beq.n	8008d0a <HAL_TIM_ConfigClockSource+0xf6>
 8008c90:	2b50      	cmp	r3, #80	; 0x50
 8008c92:	d873      	bhi.n	8008d7c <HAL_TIM_ConfigClockSource+0x168>
 8008c94:	2b40      	cmp	r3, #64	; 0x40
 8008c96:	d058      	beq.n	8008d4a <HAL_TIM_ConfigClockSource+0x136>
 8008c98:	2b40      	cmp	r3, #64	; 0x40
 8008c9a:	d86f      	bhi.n	8008d7c <HAL_TIM_ConfigClockSource+0x168>
 8008c9c:	2b30      	cmp	r3, #48	; 0x30
 8008c9e:	d064      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x156>
 8008ca0:	2b30      	cmp	r3, #48	; 0x30
 8008ca2:	d86b      	bhi.n	8008d7c <HAL_TIM_ConfigClockSource+0x168>
 8008ca4:	2b20      	cmp	r3, #32
 8008ca6:	d060      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x156>
 8008ca8:	2b20      	cmp	r3, #32
 8008caa:	d867      	bhi.n	8008d7c <HAL_TIM_ConfigClockSource+0x168>
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d05c      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x156>
 8008cb0:	2b10      	cmp	r3, #16
 8008cb2:	d05a      	beq.n	8008d6a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008cb4:	e062      	b.n	8008d7c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6818      	ldr	r0, [r3, #0]
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	6899      	ldr	r1, [r3, #8]
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	685a      	ldr	r2, [r3, #4]
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	f000 f9b5 	bl	8009034 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008cd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	609a      	str	r2, [r3, #8]
      break;
 8008ce2:	e04e      	b.n	8008d82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6818      	ldr	r0, [r3, #0]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	6899      	ldr	r1, [r3, #8]
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685a      	ldr	r2, [r3, #4]
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	f000 f99e 	bl	8009034 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	689a      	ldr	r2, [r3, #8]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008d06:	609a      	str	r2, [r3, #8]
      break;
 8008d08:	e03b      	b.n	8008d82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6818      	ldr	r0, [r3, #0]
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	6859      	ldr	r1, [r3, #4]
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	461a      	mov	r2, r3
 8008d18:	f000 f912 	bl	8008f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2150      	movs	r1, #80	; 0x50
 8008d22:	4618      	mov	r0, r3
 8008d24:	f000 f96b 	bl	8008ffe <TIM_ITRx_SetConfig>
      break;
 8008d28:	e02b      	b.n	8008d82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6818      	ldr	r0, [r3, #0]
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	6859      	ldr	r1, [r3, #4]
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	461a      	mov	r2, r3
 8008d38:	f000 f931 	bl	8008f9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2160      	movs	r1, #96	; 0x60
 8008d42:	4618      	mov	r0, r3
 8008d44:	f000 f95b 	bl	8008ffe <TIM_ITRx_SetConfig>
      break;
 8008d48:	e01b      	b.n	8008d82 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6818      	ldr	r0, [r3, #0]
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	6859      	ldr	r1, [r3, #4]
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	461a      	mov	r2, r3
 8008d58:	f000 f8f2 	bl	8008f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	2140      	movs	r1, #64	; 0x40
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 f94b 	bl	8008ffe <TIM_ITRx_SetConfig>
      break;
 8008d68:	e00b      	b.n	8008d82 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4619      	mov	r1, r3
 8008d74:	4610      	mov	r0, r2
 8008d76:	f000 f942 	bl	8008ffe <TIM_ITRx_SetConfig>
        break;
 8008d7a:	e002      	b.n	8008d82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008d7c:	bf00      	nop
 8008d7e:	e000      	b.n	8008d82 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008d80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008df4:	bf00      	nop
 8008df6:	370c      	adds	r7, #12
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfe:	4770      	bx	lr

08008e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a40      	ldr	r2, [pc, #256]	; (8008f14 <TIM_Base_SetConfig+0x114>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d013      	beq.n	8008e40 <TIM_Base_SetConfig+0x40>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e1e:	d00f      	beq.n	8008e40 <TIM_Base_SetConfig+0x40>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	4a3d      	ldr	r2, [pc, #244]	; (8008f18 <TIM_Base_SetConfig+0x118>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d00b      	beq.n	8008e40 <TIM_Base_SetConfig+0x40>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a3c      	ldr	r2, [pc, #240]	; (8008f1c <TIM_Base_SetConfig+0x11c>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d007      	beq.n	8008e40 <TIM_Base_SetConfig+0x40>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a3b      	ldr	r2, [pc, #236]	; (8008f20 <TIM_Base_SetConfig+0x120>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d003      	beq.n	8008e40 <TIM_Base_SetConfig+0x40>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	4a3a      	ldr	r2, [pc, #232]	; (8008f24 <TIM_Base_SetConfig+0x124>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d108      	bne.n	8008e52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a2f      	ldr	r2, [pc, #188]	; (8008f14 <TIM_Base_SetConfig+0x114>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d02b      	beq.n	8008eb2 <TIM_Base_SetConfig+0xb2>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e60:	d027      	beq.n	8008eb2 <TIM_Base_SetConfig+0xb2>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a2c      	ldr	r2, [pc, #176]	; (8008f18 <TIM_Base_SetConfig+0x118>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d023      	beq.n	8008eb2 <TIM_Base_SetConfig+0xb2>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a2b      	ldr	r2, [pc, #172]	; (8008f1c <TIM_Base_SetConfig+0x11c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d01f      	beq.n	8008eb2 <TIM_Base_SetConfig+0xb2>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a2a      	ldr	r2, [pc, #168]	; (8008f20 <TIM_Base_SetConfig+0x120>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d01b      	beq.n	8008eb2 <TIM_Base_SetConfig+0xb2>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a29      	ldr	r2, [pc, #164]	; (8008f24 <TIM_Base_SetConfig+0x124>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d017      	beq.n	8008eb2 <TIM_Base_SetConfig+0xb2>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a28      	ldr	r2, [pc, #160]	; (8008f28 <TIM_Base_SetConfig+0x128>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d013      	beq.n	8008eb2 <TIM_Base_SetConfig+0xb2>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a27      	ldr	r2, [pc, #156]	; (8008f2c <TIM_Base_SetConfig+0x12c>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d00f      	beq.n	8008eb2 <TIM_Base_SetConfig+0xb2>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a26      	ldr	r2, [pc, #152]	; (8008f30 <TIM_Base_SetConfig+0x130>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d00b      	beq.n	8008eb2 <TIM_Base_SetConfig+0xb2>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a25      	ldr	r2, [pc, #148]	; (8008f34 <TIM_Base_SetConfig+0x134>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d007      	beq.n	8008eb2 <TIM_Base_SetConfig+0xb2>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a24      	ldr	r2, [pc, #144]	; (8008f38 <TIM_Base_SetConfig+0x138>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d003      	beq.n	8008eb2 <TIM_Base_SetConfig+0xb2>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a23      	ldr	r2, [pc, #140]	; (8008f3c <TIM_Base_SetConfig+0x13c>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d108      	bne.n	8008ec4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	695b      	ldr	r3, [r3, #20]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	68fa      	ldr	r2, [r7, #12]
 8008ed6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	689a      	ldr	r2, [r3, #8]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681a      	ldr	r2, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	4a0a      	ldr	r2, [pc, #40]	; (8008f14 <TIM_Base_SetConfig+0x114>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d003      	beq.n	8008ef8 <TIM_Base_SetConfig+0xf8>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	4a0c      	ldr	r2, [pc, #48]	; (8008f24 <TIM_Base_SetConfig+0x124>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d103      	bne.n	8008f00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	691a      	ldr	r2, [r3, #16]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2201      	movs	r2, #1
 8008f04:	615a      	str	r2, [r3, #20]
}
 8008f06:	bf00      	nop
 8008f08:	3714      	adds	r7, #20
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	40010000 	.word	0x40010000
 8008f18:	40000400 	.word	0x40000400
 8008f1c:	40000800 	.word	0x40000800
 8008f20:	40000c00 	.word	0x40000c00
 8008f24:	40010400 	.word	0x40010400
 8008f28:	40014000 	.word	0x40014000
 8008f2c:	40014400 	.word	0x40014400
 8008f30:	40014800 	.word	0x40014800
 8008f34:	40001800 	.word	0x40001800
 8008f38:	40001c00 	.word	0x40001c00
 8008f3c:	40002000 	.word	0x40002000

08008f40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b087      	sub	sp, #28
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	f023 0201 	bic.w	r2, r3, #1
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	699b      	ldr	r3, [r3, #24]
 8008f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f64:	693b      	ldr	r3, [r7, #16]
 8008f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	011b      	lsls	r3, r3, #4
 8008f70:	693a      	ldr	r2, [r7, #16]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f023 030a 	bic.w	r3, r3, #10
 8008f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	693a      	ldr	r2, [r7, #16]
 8008f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	697a      	ldr	r2, [r7, #20]
 8008f90:	621a      	str	r2, [r3, #32]
}
 8008f92:	bf00      	nop
 8008f94:	371c      	adds	r7, #28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b087      	sub	sp, #28
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	60f8      	str	r0, [r7, #12]
 8008fa6:	60b9      	str	r1, [r7, #8]
 8008fa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	6a1b      	ldr	r3, [r3, #32]
 8008fae:	f023 0210 	bic.w	r2, r3, #16
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008fc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	031b      	lsls	r3, r3, #12
 8008fce:	697a      	ldr	r2, [r7, #20]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008fda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	011b      	lsls	r3, r3, #4
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	697a      	ldr	r2, [r7, #20]
 8008fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	621a      	str	r2, [r3, #32]
}
 8008ff2:	bf00      	nop
 8008ff4:	371c      	adds	r7, #28
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr

08008ffe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008ffe:	b480      	push	{r7}
 8009000:	b085      	sub	sp, #20
 8009002:	af00      	add	r7, sp, #0
 8009004:	6078      	str	r0, [r7, #4]
 8009006:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009014:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009016:	683a      	ldr	r2, [r7, #0]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	4313      	orrs	r3, r2
 800901c:	f043 0307 	orr.w	r3, r3, #7
 8009020:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	68fa      	ldr	r2, [r7, #12]
 8009026:	609a      	str	r2, [r3, #8]
}
 8009028:	bf00      	nop
 800902a:	3714      	adds	r7, #20
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009034:	b480      	push	{r7}
 8009036:	b087      	sub	sp, #28
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	60b9      	str	r1, [r7, #8]
 800903e:	607a      	str	r2, [r7, #4]
 8009040:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800904e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	021a      	lsls	r2, r3, #8
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	431a      	orrs	r2, r3
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	4313      	orrs	r3, r2
 800905c:	697a      	ldr	r2, [r7, #20]
 800905e:	4313      	orrs	r3, r2
 8009060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	697a      	ldr	r2, [r7, #20]
 8009066:	609a      	str	r2, [r3, #8]
}
 8009068:	bf00      	nop
 800906a:	371c      	adds	r7, #28
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009088:	2302      	movs	r3, #2
 800908a:	e05a      	b.n	8009142 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2202      	movs	r2, #2
 8009098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68fa      	ldr	r2, [r7, #12]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	68fa      	ldr	r2, [r7, #12]
 80090c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a21      	ldr	r2, [pc, #132]	; (8009150 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d022      	beq.n	8009116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090d8:	d01d      	beq.n	8009116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a1d      	ldr	r2, [pc, #116]	; (8009154 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d018      	beq.n	8009116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a1b      	ldr	r2, [pc, #108]	; (8009158 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d013      	beq.n	8009116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a1a      	ldr	r2, [pc, #104]	; (800915c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d00e      	beq.n	8009116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a18      	ldr	r2, [pc, #96]	; (8009160 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d009      	beq.n	8009116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a17      	ldr	r2, [pc, #92]	; (8009164 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d004      	beq.n	8009116 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a15      	ldr	r2, [pc, #84]	; (8009168 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d10c      	bne.n	8009130 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800911c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	4313      	orrs	r3, r2
 8009126:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68ba      	ldr	r2, [r7, #8]
 800912e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2201      	movs	r2, #1
 8009134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2200      	movs	r2, #0
 800913c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009140:	2300      	movs	r3, #0
}
 8009142:	4618      	mov	r0, r3
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	40010000 	.word	0x40010000
 8009154:	40000400 	.word	0x40000400
 8009158:	40000800 	.word	0x40000800
 800915c:	40000c00 	.word	0x40000c00
 8009160:	40010400 	.word	0x40010400
 8009164:	40014000 	.word	0x40014000
 8009168:	40001800 	.word	0x40001800

0800916c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009180:	b480      	push	{r7}
 8009182:	b083      	sub	sp, #12
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009188:	bf00      	nop
 800918a:	370c      	adds	r7, #12
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8009194:	b480      	push	{r7}
 8009196:	b085      	sub	sp, #20
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
 800919c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800919e:	2300      	movs	r3, #0
 80091a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091ac:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 80091ae:	68fa      	ldr	r2, [r7, #12]
 80091b0:	4b20      	ldr	r3, [pc, #128]	; (8009234 <FSMC_NORSRAM_Init+0xa0>)
 80091b2:	4013      	ands	r3, r2
 80091b4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80091be:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80091c4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80091ca:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80091d0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80091d6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80091dc:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80091e2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80091e8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80091ee:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80091f4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80091fa:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8009200:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009202:	68fa      	ldr	r2, [r7, #12]
 8009204:	4313      	orrs	r3, r2
 8009206:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	2b08      	cmp	r3, #8
 800920e:	d103      	bne.n	8009218 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009216:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	68f9      	ldr	r1, [r7, #12]
 8009220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	fff00080 	.word	0xfff00080

08009238 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009238:	b480      	push	{r7}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	60f8      	str	r0, [r7, #12]
 8009240:	60b9      	str	r1, [r7, #8]
 8009242:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009244:	2300      	movs	r3, #0
 8009246:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	1c5a      	adds	r2, r3, #1
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009252:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800925a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009266:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800926e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	68db      	ldr	r3, [r3, #12]
 8009274:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8009276:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009278:	68bb      	ldr	r3, [r7, #8]
 800927a:	691b      	ldr	r3, [r3, #16]
 800927c:	3b01      	subs	r3, #1
 800927e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009280:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	695b      	ldr	r3, [r3, #20]
 8009286:	3b02      	subs	r3, #2
 8009288:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800928a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009290:	4313      	orrs	r3, r2
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	4313      	orrs	r3, r2
 8009296:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	6979      	ldr	r1, [r7, #20]
 80092a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80092a4:	2300      	movs	r3, #0
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	371c      	adds	r7, #28
 80092aa:	46bd      	mov	sp, r7
 80092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b0:	4770      	bx	lr
	...

080092b4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b087      	sub	sp, #28
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
 80092c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 80092c2:	2300      	movs	r3, #0
 80092c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80092cc:	d122      	bne.n	8009314 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092d6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80092d8:	697a      	ldr	r2, [r7, #20]
 80092da:	4b15      	ldr	r3, [pc, #84]	; (8009330 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80092dc:	4013      	ands	r3, r2
 80092de:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80092ea:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80092f2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80092fa:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009300:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	4313      	orrs	r3, r2
 8009306:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	6979      	ldr	r1, [r7, #20]
 800930e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009312:	e005      	b.n	8009320 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800931c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	371c      	adds	r7, #28
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop
 8009330:	cff00000 	.word	0xcff00000

08009334 <__errno>:
 8009334:	4b01      	ldr	r3, [pc, #4]	; (800933c <__errno+0x8>)
 8009336:	6818      	ldr	r0, [r3, #0]
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	20000048 	.word	0x20000048

08009340 <__libc_init_array>:
 8009340:	b570      	push	{r4, r5, r6, lr}
 8009342:	4d0d      	ldr	r5, [pc, #52]	; (8009378 <__libc_init_array+0x38>)
 8009344:	4c0d      	ldr	r4, [pc, #52]	; (800937c <__libc_init_array+0x3c>)
 8009346:	1b64      	subs	r4, r4, r5
 8009348:	10a4      	asrs	r4, r4, #2
 800934a:	2600      	movs	r6, #0
 800934c:	42a6      	cmp	r6, r4
 800934e:	d109      	bne.n	8009364 <__libc_init_array+0x24>
 8009350:	4d0b      	ldr	r5, [pc, #44]	; (8009380 <__libc_init_array+0x40>)
 8009352:	4c0c      	ldr	r4, [pc, #48]	; (8009384 <__libc_init_array+0x44>)
 8009354:	f000 f908 	bl	8009568 <_init>
 8009358:	1b64      	subs	r4, r4, r5
 800935a:	10a4      	asrs	r4, r4, #2
 800935c:	2600      	movs	r6, #0
 800935e:	42a6      	cmp	r6, r4
 8009360:	d105      	bne.n	800936e <__libc_init_array+0x2e>
 8009362:	bd70      	pop	{r4, r5, r6, pc}
 8009364:	f855 3b04 	ldr.w	r3, [r5], #4
 8009368:	4798      	blx	r3
 800936a:	3601      	adds	r6, #1
 800936c:	e7ee      	b.n	800934c <__libc_init_array+0xc>
 800936e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009372:	4798      	blx	r3
 8009374:	3601      	adds	r6, #1
 8009376:	e7f2      	b.n	800935e <__libc_init_array+0x1e>
 8009378:	0800ae28 	.word	0x0800ae28
 800937c:	0800ae28 	.word	0x0800ae28
 8009380:	0800ae28 	.word	0x0800ae28
 8009384:	0800ae2c 	.word	0x0800ae2c

08009388 <memset>:
 8009388:	4402      	add	r2, r0
 800938a:	4603      	mov	r3, r0
 800938c:	4293      	cmp	r3, r2
 800938e:	d100      	bne.n	8009392 <memset+0xa>
 8009390:	4770      	bx	lr
 8009392:	f803 1b01 	strb.w	r1, [r3], #1
 8009396:	e7f9      	b.n	800938c <memset+0x4>

08009398 <sqrt>:
 8009398:	b538      	push	{r3, r4, r5, lr}
 800939a:	ed2d 8b02 	vpush	{d8}
 800939e:	ec55 4b10 	vmov	r4, r5, d0
 80093a2:	f000 f82d 	bl	8009400 <__ieee754_sqrt>
 80093a6:	4b15      	ldr	r3, [pc, #84]	; (80093fc <sqrt+0x64>)
 80093a8:	eeb0 8a40 	vmov.f32	s16, s0
 80093ac:	eef0 8a60 	vmov.f32	s17, s1
 80093b0:	f993 3000 	ldrsb.w	r3, [r3]
 80093b4:	3301      	adds	r3, #1
 80093b6:	d019      	beq.n	80093ec <sqrt+0x54>
 80093b8:	4622      	mov	r2, r4
 80093ba:	462b      	mov	r3, r5
 80093bc:	4620      	mov	r0, r4
 80093be:	4629      	mov	r1, r5
 80093c0:	f7f7 fb58 	bl	8000a74 <__aeabi_dcmpun>
 80093c4:	b990      	cbnz	r0, 80093ec <sqrt+0x54>
 80093c6:	2200      	movs	r2, #0
 80093c8:	2300      	movs	r3, #0
 80093ca:	4620      	mov	r0, r4
 80093cc:	4629      	mov	r1, r5
 80093ce:	f7f7 fb29 	bl	8000a24 <__aeabi_dcmplt>
 80093d2:	b158      	cbz	r0, 80093ec <sqrt+0x54>
 80093d4:	f7ff ffae 	bl	8009334 <__errno>
 80093d8:	2321      	movs	r3, #33	; 0x21
 80093da:	6003      	str	r3, [r0, #0]
 80093dc:	2200      	movs	r2, #0
 80093de:	2300      	movs	r3, #0
 80093e0:	4610      	mov	r0, r2
 80093e2:	4619      	mov	r1, r3
 80093e4:	f7f7 f9d6 	bl	8000794 <__aeabi_ddiv>
 80093e8:	ec41 0b18 	vmov	d8, r0, r1
 80093ec:	eeb0 0a48 	vmov.f32	s0, s16
 80093f0:	eef0 0a68 	vmov.f32	s1, s17
 80093f4:	ecbd 8b02 	vpop	{d8}
 80093f8:	bd38      	pop	{r3, r4, r5, pc}
 80093fa:	bf00      	nop
 80093fc:	200000ac 	.word	0x200000ac

08009400 <__ieee754_sqrt>:
 8009400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009404:	ec55 4b10 	vmov	r4, r5, d0
 8009408:	4e56      	ldr	r6, [pc, #344]	; (8009564 <__ieee754_sqrt+0x164>)
 800940a:	43ae      	bics	r6, r5
 800940c:	ee10 0a10 	vmov	r0, s0
 8009410:	ee10 3a10 	vmov	r3, s0
 8009414:	4629      	mov	r1, r5
 8009416:	462a      	mov	r2, r5
 8009418:	d110      	bne.n	800943c <__ieee754_sqrt+0x3c>
 800941a:	ee10 2a10 	vmov	r2, s0
 800941e:	462b      	mov	r3, r5
 8009420:	f7f7 f88e 	bl	8000540 <__aeabi_dmul>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4620      	mov	r0, r4
 800942a:	4629      	mov	r1, r5
 800942c:	f7f6 fed2 	bl	80001d4 <__adddf3>
 8009430:	4604      	mov	r4, r0
 8009432:	460d      	mov	r5, r1
 8009434:	ec45 4b10 	vmov	d0, r4, r5
 8009438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800943c:	2d00      	cmp	r5, #0
 800943e:	dc10      	bgt.n	8009462 <__ieee754_sqrt+0x62>
 8009440:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009444:	4330      	orrs	r0, r6
 8009446:	d0f5      	beq.n	8009434 <__ieee754_sqrt+0x34>
 8009448:	b15d      	cbz	r5, 8009462 <__ieee754_sqrt+0x62>
 800944a:	ee10 2a10 	vmov	r2, s0
 800944e:	462b      	mov	r3, r5
 8009450:	ee10 0a10 	vmov	r0, s0
 8009454:	f7f6 febc 	bl	80001d0 <__aeabi_dsub>
 8009458:	4602      	mov	r2, r0
 800945a:	460b      	mov	r3, r1
 800945c:	f7f7 f99a 	bl	8000794 <__aeabi_ddiv>
 8009460:	e7e6      	b.n	8009430 <__ieee754_sqrt+0x30>
 8009462:	1509      	asrs	r1, r1, #20
 8009464:	d076      	beq.n	8009554 <__ieee754_sqrt+0x154>
 8009466:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800946a:	07ce      	lsls	r6, r1, #31
 800946c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009470:	bf5e      	ittt	pl
 8009472:	0fda      	lsrpl	r2, r3, #31
 8009474:	005b      	lslpl	r3, r3, #1
 8009476:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800947a:	0fda      	lsrs	r2, r3, #31
 800947c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009480:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009484:	2000      	movs	r0, #0
 8009486:	106d      	asrs	r5, r5, #1
 8009488:	005b      	lsls	r3, r3, #1
 800948a:	f04f 0e16 	mov.w	lr, #22
 800948e:	4684      	mov	ip, r0
 8009490:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009494:	eb0c 0401 	add.w	r4, ip, r1
 8009498:	4294      	cmp	r4, r2
 800949a:	bfde      	ittt	le
 800949c:	1b12      	suble	r2, r2, r4
 800949e:	eb04 0c01 	addle.w	ip, r4, r1
 80094a2:	1840      	addle	r0, r0, r1
 80094a4:	0052      	lsls	r2, r2, #1
 80094a6:	f1be 0e01 	subs.w	lr, lr, #1
 80094aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80094ae:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80094b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80094b6:	d1ed      	bne.n	8009494 <__ieee754_sqrt+0x94>
 80094b8:	4671      	mov	r1, lr
 80094ba:	2720      	movs	r7, #32
 80094bc:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80094c0:	4562      	cmp	r2, ip
 80094c2:	eb04 060e 	add.w	r6, r4, lr
 80094c6:	dc02      	bgt.n	80094ce <__ieee754_sqrt+0xce>
 80094c8:	d113      	bne.n	80094f2 <__ieee754_sqrt+0xf2>
 80094ca:	429e      	cmp	r6, r3
 80094cc:	d811      	bhi.n	80094f2 <__ieee754_sqrt+0xf2>
 80094ce:	2e00      	cmp	r6, #0
 80094d0:	eb06 0e04 	add.w	lr, r6, r4
 80094d4:	da43      	bge.n	800955e <__ieee754_sqrt+0x15e>
 80094d6:	f1be 0f00 	cmp.w	lr, #0
 80094da:	db40      	blt.n	800955e <__ieee754_sqrt+0x15e>
 80094dc:	f10c 0801 	add.w	r8, ip, #1
 80094e0:	eba2 020c 	sub.w	r2, r2, ip
 80094e4:	429e      	cmp	r6, r3
 80094e6:	bf88      	it	hi
 80094e8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80094ec:	1b9b      	subs	r3, r3, r6
 80094ee:	4421      	add	r1, r4
 80094f0:	46c4      	mov	ip, r8
 80094f2:	0052      	lsls	r2, r2, #1
 80094f4:	3f01      	subs	r7, #1
 80094f6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80094fa:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80094fe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009502:	d1dd      	bne.n	80094c0 <__ieee754_sqrt+0xc0>
 8009504:	4313      	orrs	r3, r2
 8009506:	d006      	beq.n	8009516 <__ieee754_sqrt+0x116>
 8009508:	1c4c      	adds	r4, r1, #1
 800950a:	bf13      	iteet	ne
 800950c:	3101      	addne	r1, #1
 800950e:	3001      	addeq	r0, #1
 8009510:	4639      	moveq	r1, r7
 8009512:	f021 0101 	bicne.w	r1, r1, #1
 8009516:	1043      	asrs	r3, r0, #1
 8009518:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800951c:	0849      	lsrs	r1, r1, #1
 800951e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009522:	07c2      	lsls	r2, r0, #31
 8009524:	bf48      	it	mi
 8009526:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800952a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800952e:	460c      	mov	r4, r1
 8009530:	463d      	mov	r5, r7
 8009532:	e77f      	b.n	8009434 <__ieee754_sqrt+0x34>
 8009534:	0ada      	lsrs	r2, r3, #11
 8009536:	3815      	subs	r0, #21
 8009538:	055b      	lsls	r3, r3, #21
 800953a:	2a00      	cmp	r2, #0
 800953c:	d0fa      	beq.n	8009534 <__ieee754_sqrt+0x134>
 800953e:	02d7      	lsls	r7, r2, #11
 8009540:	d50a      	bpl.n	8009558 <__ieee754_sqrt+0x158>
 8009542:	f1c1 0420 	rsb	r4, r1, #32
 8009546:	fa23 f404 	lsr.w	r4, r3, r4
 800954a:	1e4d      	subs	r5, r1, #1
 800954c:	408b      	lsls	r3, r1
 800954e:	4322      	orrs	r2, r4
 8009550:	1b41      	subs	r1, r0, r5
 8009552:	e788      	b.n	8009466 <__ieee754_sqrt+0x66>
 8009554:	4608      	mov	r0, r1
 8009556:	e7f0      	b.n	800953a <__ieee754_sqrt+0x13a>
 8009558:	0052      	lsls	r2, r2, #1
 800955a:	3101      	adds	r1, #1
 800955c:	e7ef      	b.n	800953e <__ieee754_sqrt+0x13e>
 800955e:	46e0      	mov	r8, ip
 8009560:	e7be      	b.n	80094e0 <__ieee754_sqrt+0xe0>
 8009562:	bf00      	nop
 8009564:	7ff00000 	.word	0x7ff00000

08009568 <_init>:
 8009568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800956a:	bf00      	nop
 800956c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800956e:	bc08      	pop	{r3}
 8009570:	469e      	mov	lr, r3
 8009572:	4770      	bx	lr

08009574 <_fini>:
 8009574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009576:	bf00      	nop
 8009578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800957a:	bc08      	pop	{r3}
 800957c:	469e      	mov	lr, r3
 800957e:	4770      	bx	lr
