
BDS4_DCDC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bce8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000048b0  0800be70  0800be70  0001be70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010720  08010720  000300bc  2**0
                  CONTENTS
  4 .ARM          00000008  08010720  08010720  00020720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010728  08010728  000300bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010728  08010728  00020728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801072c  0801072c  0002072c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08010730  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  200000bc  080107ec  000300bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000061c  080107ec  0003061c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f804  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023ee  00000000  00000000  0003f8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed8  00000000  00000000  00041ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dd0  00000000  00000000  00042bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f00  00000000  00000000  00043988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001198e  00000000  00000000  00066888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d939a  00000000  00000000  00078216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001515b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000413c  00000000  00000000  00151604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000bc 	.word	0x200000bc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800be58 	.word	0x0800be58

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000c0 	.word	0x200000c0
 80001c4:	0800be58 	.word	0x0800be58

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2uiz>:
 8000aa0:	004a      	lsls	r2, r1, #1
 8000aa2:	d211      	bcs.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d211      	bcs.n	8000ace <__aeabi_d2uiz+0x2e>
 8000aaa:	d50d      	bpl.n	8000ac8 <__aeabi_d2uiz+0x28>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d40e      	bmi.n	8000ad4 <__aeabi_d2uiz+0x34>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	4770      	bx	lr
 8000ac8:	f04f 0000 	mov.w	r0, #0
 8000acc:	4770      	bx	lr
 8000ace:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_d2uiz+0x3a>
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0000 	mov.w	r0, #0
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2f>:
 8000ae0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ae8:	bf24      	itt	cs
 8000aea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000af2:	d90d      	bls.n	8000b10 <__aeabi_d2f+0x30>
 8000af4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000af8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000afc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b08:	bf08      	it	eq
 8000b0a:	f020 0001 	biceq.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b14:	d121      	bne.n	8000b5a <__aeabi_d2f+0x7a>
 8000b16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b1a:	bfbc      	itt	lt
 8000b1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b20:	4770      	bxlt	lr
 8000b22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b2a:	f1c2 0218 	rsb	r2, r2, #24
 8000b2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b36:	fa20 f002 	lsr.w	r0, r0, r2
 8000b3a:	bf18      	it	ne
 8000b3c:	f040 0001 	orrne.w	r0, r0, #1
 8000b40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b4c:	ea40 000c 	orr.w	r0, r0, ip
 8000b50:	fa23 f302 	lsr.w	r3, r3, r2
 8000b54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b58:	e7cc      	b.n	8000af4 <__aeabi_d2f+0x14>
 8000b5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5e:	d107      	bne.n	8000b70 <__aeabi_d2f+0x90>
 8000b60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b64:	bf1e      	ittt	ne
 8000b66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b6e:	4770      	bxne	lr
 8000b70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <__aeabi_uldivmod>:
 8000b80:	b953      	cbnz	r3, 8000b98 <__aeabi_uldivmod+0x18>
 8000b82:	b94a      	cbnz	r2, 8000b98 <__aeabi_uldivmod+0x18>
 8000b84:	2900      	cmp	r1, #0
 8000b86:	bf08      	it	eq
 8000b88:	2800      	cmpeq	r0, #0
 8000b8a:	bf1c      	itt	ne
 8000b8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b90:	f04f 30ff 	movne.w	r0, #4294967295
 8000b94:	f000 b96e 	b.w	8000e74 <__aeabi_idiv0>
 8000b98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ba0:	f000 f806 	bl	8000bb0 <__udivmoddi4>
 8000ba4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr

08000bb0 <__udivmoddi4>:
 8000bb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb4:	9d08      	ldr	r5, [sp, #32]
 8000bb6:	4604      	mov	r4, r0
 8000bb8:	468c      	mov	ip, r1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f040 8083 	bne.w	8000cc6 <__udivmoddi4+0x116>
 8000bc0:	428a      	cmp	r2, r1
 8000bc2:	4617      	mov	r7, r2
 8000bc4:	d947      	bls.n	8000c56 <__udivmoddi4+0xa6>
 8000bc6:	fab2 f282 	clz	r2, r2
 8000bca:	b142      	cbz	r2, 8000bde <__udivmoddi4+0x2e>
 8000bcc:	f1c2 0020 	rsb	r0, r2, #32
 8000bd0:	fa24 f000 	lsr.w	r0, r4, r0
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	4097      	lsls	r7, r2
 8000bd8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bdc:	4094      	lsls	r4, r2
 8000bde:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000be2:	0c23      	lsrs	r3, r4, #16
 8000be4:	fbbc f6f8 	udiv	r6, ip, r8
 8000be8:	fa1f fe87 	uxth.w	lr, r7
 8000bec:	fb08 c116 	mls	r1, r8, r6, ip
 8000bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf4:	fb06 f10e 	mul.w	r1, r6, lr
 8000bf8:	4299      	cmp	r1, r3
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x60>
 8000bfc:	18fb      	adds	r3, r7, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 8119 	bcs.w	8000e38 <__udivmoddi4+0x288>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 8116 	bls.w	8000e38 <__udivmoddi4+0x288>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	443b      	add	r3, r7
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x8c>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2e:	f080 8105 	bcs.w	8000e3c <__udivmoddi4+0x28c>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f240 8102 	bls.w	8000e3c <__udivmoddi4+0x28c>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c40:	eba4 040e 	sub.w	r4, r4, lr
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa0>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	b902      	cbnz	r2, 8000c5a <__udivmoddi4+0xaa>
 8000c58:	deff      	udf	#255	; 0xff
 8000c5a:	fab2 f282 	clz	r2, r2
 8000c5e:	2a00      	cmp	r2, #0
 8000c60:	d150      	bne.n	8000d04 <__udivmoddi4+0x154>
 8000c62:	1bcb      	subs	r3, r1, r7
 8000c64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c68:	fa1f f887 	uxth.w	r8, r7
 8000c6c:	2601      	movs	r6, #1
 8000c6e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c72:	0c21      	lsrs	r1, r4, #16
 8000c74:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c7c:	fb08 f30c 	mul.w	r3, r8, ip
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0xe4>
 8000c84:	1879      	adds	r1, r7, r1
 8000c86:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0xe2>
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	f200 80e9 	bhi.w	8000e64 <__udivmoddi4+0x2b4>
 8000c92:	4684      	mov	ip, r0
 8000c94:	1ac9      	subs	r1, r1, r3
 8000c96:	b2a3      	uxth	r3, r4
 8000c98:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c9c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ca0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ca4:	fb08 f800 	mul.w	r8, r8, r0
 8000ca8:	45a0      	cmp	r8, r4
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0x10c>
 8000cac:	193c      	adds	r4, r7, r4
 8000cae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0x10a>
 8000cb4:	45a0      	cmp	r8, r4
 8000cb6:	f200 80d9 	bhi.w	8000e6c <__udivmoddi4+0x2bc>
 8000cba:	4618      	mov	r0, r3
 8000cbc:	eba4 0408 	sub.w	r4, r4, r8
 8000cc0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cc4:	e7bf      	b.n	8000c46 <__udivmoddi4+0x96>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d909      	bls.n	8000cde <__udivmoddi4+0x12e>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	f000 80b1 	beq.w	8000e32 <__udivmoddi4+0x282>
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	fab3 f683 	clz	r6, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d14a      	bne.n	8000d7c <__udivmoddi4+0x1cc>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0x140>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 80b8 	bhi.w	8000e60 <__udivmoddi4+0x2b0>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb61 0103 	sbc.w	r1, r1, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	468c      	mov	ip, r1
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0a8      	beq.n	8000c50 <__udivmoddi4+0xa0>
 8000cfe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d02:	e7a5      	b.n	8000c50 <__udivmoddi4+0xa0>
 8000d04:	f1c2 0320 	rsb	r3, r2, #32
 8000d08:	fa20 f603 	lsr.w	r6, r0, r3
 8000d0c:	4097      	lsls	r7, r2
 8000d0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d12:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d16:	40d9      	lsrs	r1, r3
 8000d18:	4330      	orrs	r0, r6
 8000d1a:	0c03      	lsrs	r3, r0, #16
 8000d1c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d20:	fa1f f887 	uxth.w	r8, r7
 8000d24:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2c:	fb06 f108 	mul.w	r1, r6, r8
 8000d30:	4299      	cmp	r1, r3
 8000d32:	fa04 f402 	lsl.w	r4, r4, r2
 8000d36:	d909      	bls.n	8000d4c <__udivmoddi4+0x19c>
 8000d38:	18fb      	adds	r3, r7, r3
 8000d3a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d3e:	f080 808d 	bcs.w	8000e5c <__udivmoddi4+0x2ac>
 8000d42:	4299      	cmp	r1, r3
 8000d44:	f240 808a 	bls.w	8000e5c <__udivmoddi4+0x2ac>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	443b      	add	r3, r7
 8000d4c:	1a5b      	subs	r3, r3, r1
 8000d4e:	b281      	uxth	r1, r0
 8000d50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb00 f308 	mul.w	r3, r0, r8
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x1c4>
 8000d64:	1879      	adds	r1, r7, r1
 8000d66:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d6a:	d273      	bcs.n	8000e54 <__udivmoddi4+0x2a4>
 8000d6c:	428b      	cmp	r3, r1
 8000d6e:	d971      	bls.n	8000e54 <__udivmoddi4+0x2a4>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4439      	add	r1, r7
 8000d74:	1acb      	subs	r3, r1, r3
 8000d76:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d7a:	e778      	b.n	8000c6e <__udivmoddi4+0xbe>
 8000d7c:	f1c6 0c20 	rsb	ip, r6, #32
 8000d80:	fa03 f406 	lsl.w	r4, r3, r6
 8000d84:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d88:	431c      	orrs	r4, r3
 8000d8a:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d92:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d96:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d9a:	431f      	orrs	r7, r3
 8000d9c:	0c3b      	lsrs	r3, r7, #16
 8000d9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000da2:	fa1f f884 	uxth.w	r8, r4
 8000da6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000daa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dae:	fb09 fa08 	mul.w	sl, r9, r8
 8000db2:	458a      	cmp	sl, r1
 8000db4:	fa02 f206 	lsl.w	r2, r2, r6
 8000db8:	fa00 f306 	lsl.w	r3, r0, r6
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x220>
 8000dbe:	1861      	adds	r1, r4, r1
 8000dc0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dc4:	d248      	bcs.n	8000e58 <__udivmoddi4+0x2a8>
 8000dc6:	458a      	cmp	sl, r1
 8000dc8:	d946      	bls.n	8000e58 <__udivmoddi4+0x2a8>
 8000dca:	f1a9 0902 	sub.w	r9, r9, #2
 8000dce:	4421      	add	r1, r4
 8000dd0:	eba1 010a 	sub.w	r1, r1, sl
 8000dd4:	b2bf      	uxth	r7, r7
 8000dd6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dda:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dde:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000de2:	fb00 f808 	mul.w	r8, r0, r8
 8000de6:	45b8      	cmp	r8, r7
 8000de8:	d907      	bls.n	8000dfa <__udivmoddi4+0x24a>
 8000dea:	19e7      	adds	r7, r4, r7
 8000dec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000df0:	d22e      	bcs.n	8000e50 <__udivmoddi4+0x2a0>
 8000df2:	45b8      	cmp	r8, r7
 8000df4:	d92c      	bls.n	8000e50 <__udivmoddi4+0x2a0>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4427      	add	r7, r4
 8000dfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfe:	eba7 0708 	sub.w	r7, r7, r8
 8000e02:	fba0 8902 	umull	r8, r9, r0, r2
 8000e06:	454f      	cmp	r7, r9
 8000e08:	46c6      	mov	lr, r8
 8000e0a:	4649      	mov	r1, r9
 8000e0c:	d31a      	bcc.n	8000e44 <__udivmoddi4+0x294>
 8000e0e:	d017      	beq.n	8000e40 <__udivmoddi4+0x290>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x27a>
 8000e12:	ebb3 020e 	subs.w	r2, r3, lr
 8000e16:	eb67 0701 	sbc.w	r7, r7, r1
 8000e1a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e1e:	40f2      	lsrs	r2, r6
 8000e20:	ea4c 0202 	orr.w	r2, ip, r2
 8000e24:	40f7      	lsrs	r7, r6
 8000e26:	e9c5 2700 	strd	r2, r7, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	462e      	mov	r6, r5
 8000e34:	4628      	mov	r0, r5
 8000e36:	e70b      	b.n	8000c50 <__udivmoddi4+0xa0>
 8000e38:	4606      	mov	r6, r0
 8000e3a:	e6e9      	b.n	8000c10 <__udivmoddi4+0x60>
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	e6fd      	b.n	8000c3c <__udivmoddi4+0x8c>
 8000e40:	4543      	cmp	r3, r8
 8000e42:	d2e5      	bcs.n	8000e10 <__udivmoddi4+0x260>
 8000e44:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e48:	eb69 0104 	sbc.w	r1, r9, r4
 8000e4c:	3801      	subs	r0, #1
 8000e4e:	e7df      	b.n	8000e10 <__udivmoddi4+0x260>
 8000e50:	4608      	mov	r0, r1
 8000e52:	e7d2      	b.n	8000dfa <__udivmoddi4+0x24a>
 8000e54:	4660      	mov	r0, ip
 8000e56:	e78d      	b.n	8000d74 <__udivmoddi4+0x1c4>
 8000e58:	4681      	mov	r9, r0
 8000e5a:	e7b9      	b.n	8000dd0 <__udivmoddi4+0x220>
 8000e5c:	4666      	mov	r6, ip
 8000e5e:	e775      	b.n	8000d4c <__udivmoddi4+0x19c>
 8000e60:	4630      	mov	r0, r6
 8000e62:	e74a      	b.n	8000cfa <__udivmoddi4+0x14a>
 8000e64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e68:	4439      	add	r1, r7
 8000e6a:	e713      	b.n	8000c94 <__udivmoddi4+0xe4>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	e724      	b.n	8000cbc <__udivmoddi4+0x10c>
 8000e72:	bf00      	nop

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <delay_us>:
    {
        ;
    } while (--t);
}
void delay_us(u32 nus)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
    u32 ticks;
    u32 told, tnow, tcnt = 0;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61bb      	str	r3, [r7, #24]
    u32 reload = SysTick->LOAD; //LOAD的值
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <delay_us+0x78>)
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	617b      	str	r3, [r7, #20]
    ticks = nus * fac_us;       //需要的节拍数
 8000e8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <delay_us+0x7c>)
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	461a      	mov	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	fb02 f303 	mul.w	r3, r2, r3
 8000e96:	613b      	str	r3, [r7, #16]
    told = SysTick->VAL;        //刚进⼊时的计数器值
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <delay_us+0x78>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <delay_us+0x78>)
 8000ea0:	689b      	ldr	r3, [r3, #8]
 8000ea2:	60fb      	str	r3, [r7, #12]
        if (tnow != told)
 8000ea4:	68fa      	ldr	r2, [r7, #12]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d0f8      	beq.n	8000e9e <delay_us+0x26>
        {
            if (tnow < told)
 8000eac:	68fa      	ldr	r2, [r7, #12]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d206      	bcs.n	8000ec2 <delay_us+0x4a>
                tcnt += told - tnow; //这⾥注意⼀下SYSTICK是⼀个递减的计数器就可以了.
 8000eb4:	69fa      	ldr	r2, [r7, #28]
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
 8000ec0:	e007      	b.n	8000ed2 <delay_us+0x5a>
            else
                tcnt += reload - tnow + told;
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	1ad2      	subs	r2, r2, r3
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	4413      	add	r3, r2
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4413      	add	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
            told = tnow;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d200      	bcs.n	8000ee0 <delay_us+0x68>
        tnow = SysTick->VAL;
 8000ede:	e7de      	b.n	8000e9e <delay_us+0x26>
                break; //时间超过/等于要延迟的时间,则退出.
 8000ee0:	bf00      	nop
        }
    };
}
 8000ee2:	bf00      	nop
 8000ee4:	3724      	adds	r7, #36	; 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000e010 	.word	0xe000e010
 8000ef4:	200000d8 	.word	0x200000d8

08000ef8 <IIC_Init>:


//myiic.c_op
//初始化IIC
void IIC_Init(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
//   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//普通输出模式
//   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
//   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
//   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
//   GPIO_Init(GPIOB, &GPIO_InitStructure);//初始化
	IIC_SCL=1;
 8000efc:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <IIC_Init+0x1c>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
	IIC_SDA=1;
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <IIC_Init+0x20>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	601a      	str	r2, [r3, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	424082a0 	.word	0x424082a0
 8000f18:	424082a4 	.word	0x424082a4

08000f1c <IIC_Start>:
//产生IIC起始信号
void IIC_Start(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	SDA_OUT();     //sda线输出
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <IIC_Start+0x44>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <IIC_Start+0x44>)
 8000f26:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <IIC_Start+0x44>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0b      	ldr	r2, [pc, #44]	; (8000f60 <IIC_Start+0x44>)
 8000f32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f36:	6013      	str	r3, [r2, #0]
	IIC_SDA=1;
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <IIC_Start+0x48>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
	IIC_SCL=1;
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <IIC_Start+0x4c>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	601a      	str	r2, [r3, #0]
	delay_us(4);
 8000f44:	2004      	movs	r0, #4
 8000f46:	f7ff ff97 	bl	8000e78 <delay_us>
 	IIC_SDA=0;//START:when CLK is high,DATA change form high to low
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <IIC_Start+0x48>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 	delay_us(4);
 8000f50:	2004      	movs	r0, #4
 8000f52:	f7ff ff91 	bl	8000e78 <delay_us>
	IIC_SCL=0;//钳住I2C总线，准备发送或接收数据
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <IIC_Start+0x4c>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
}
 8000f5c:	bf00      	nop
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40020400 	.word	0x40020400
 8000f64:	424082a4 	.word	0x424082a4
 8000f68:	424082a0 	.word	0x424082a0

08000f6c <IIC_Stop>:
//产生IIC停止信号
void IIC_Stop(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	SDA_OUT();//sda线输出
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <IIC_Stop+0x44>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <IIC_Stop+0x44>)
 8000f76:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <IIC_Stop+0x44>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <IIC_Stop+0x44>)
 8000f82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f86:	6013      	str	r3, [r2, #0]
	IIC_SCL=0;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <IIC_Stop+0x48>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
	IIC_SDA=0;//STOP:when CLK is high DATA change form low to high
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <IIC_Stop+0x4c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
	delay_us(4);
 8000f94:	2004      	movs	r0, #4
 8000f96:	f7ff ff6f 	bl	8000e78 <delay_us>
	IIC_SCL=1;
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <IIC_Stop+0x48>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
	IIC_SDA=1;//发送I2C总线结束信号
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <IIC_Stop+0x4c>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	601a      	str	r2, [r3, #0]
	delay_us(4);
 8000fa6:	2004      	movs	r0, #4
 8000fa8:	f7ff ff66 	bl	8000e78 <delay_us>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40020400 	.word	0x40020400
 8000fb4:	424082a0 	.word	0x424082a0
 8000fb8:	424082a4 	.word	0x424082a4

08000fbc <IIC_Wait_Ack>:
//等待应答信号到来
//返回值：1，接收应答失败
//        0，接收应答成功
u8 IIC_Wait_Ack(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	u8 ucErrTime=0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	71fb      	strb	r3, [r7, #7]
	SDA_IN();      //SDA设置为输入
 8000fc6:	4b16      	ldr	r3, [pc, #88]	; (8001020 <IIC_Wait_Ack+0x64>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a15      	ldr	r2, [pc, #84]	; (8001020 <IIC_Wait_Ack+0x64>)
 8000fcc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	4b13      	ldr	r3, [pc, #76]	; (8001020 <IIC_Wait_Ack+0x64>)
 8000fd4:	4a12      	ldr	r2, [pc, #72]	; (8001020 <IIC_Wait_Ack+0x64>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	6013      	str	r3, [r2, #0]
	IIC_SDA=1;HAL_Delay(1);
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <IIC_Wait_Ack+0x68>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	f007 ffaf 	bl	8008f44 <HAL_Delay>
	IIC_SCL=1;HAL_Delay(1);
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <IIC_Wait_Ack+0x6c>)
 8000fe8:	2201      	movs	r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	2001      	movs	r0, #1
 8000fee:	f007 ffa9 	bl	8008f44 <HAL_Delay>
	while(READ_SDA)
 8000ff2:	e009      	b.n	8001008 <IIC_Wait_Ack+0x4c>
	{
		ucErrTime++;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	2bfa      	cmp	r3, #250	; 0xfa
 8000ffe:	d903      	bls.n	8001008 <IIC_Wait_Ack+0x4c>
		{
			IIC_Stop();
 8001000:	f7ff ffb4 	bl	8000f6c <IIC_Stop>
			return 1;
 8001004:	2301      	movs	r3, #1
 8001006:	e007      	b.n	8001018 <IIC_Wait_Ack+0x5c>
	while(READ_SDA)
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <IIC_Wait_Ack+0x70>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d1f1      	bne.n	8000ff4 <IIC_Wait_Ack+0x38>
		}
	}
	IIC_SCL=0;//时钟输出0
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <IIC_Wait_Ack+0x6c>)
 8001012:	2200      	movs	r2, #0
 8001014:	601a      	str	r2, [r3, #0]
	return 0;
 8001016:	2300      	movs	r3, #0
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40020400 	.word	0x40020400
 8001024:	424082a4 	.word	0x424082a4
 8001028:	424082a0 	.word	0x424082a0
 800102c:	42408224 	.word	0x42408224

08001030 <IIC_Ack>:
//产生ACK应答
void IIC_Ack(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	IIC_SCL=0;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <IIC_Ack+0x44>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
	SDA_OUT();
 800103a:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <IIC_Ack+0x48>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a0e      	ldr	r2, [pc, #56]	; (8001078 <IIC_Ack+0x48>)
 8001040:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <IIC_Ack+0x48>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <IIC_Ack+0x48>)
 800104c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001050:	6013      	str	r3, [r2, #0]
	IIC_SDA=0;
 8001052:	4b0a      	ldr	r3, [pc, #40]	; (800107c <IIC_Ack+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
	delay_us(2);
 8001058:	2002      	movs	r0, #2
 800105a:	f7ff ff0d 	bl	8000e78 <delay_us>
	IIC_SCL=1;
 800105e:	4b05      	ldr	r3, [pc, #20]	; (8001074 <IIC_Ack+0x44>)
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]
	delay_us(2);
 8001064:	2002      	movs	r0, #2
 8001066:	f7ff ff07 	bl	8000e78 <delay_us>
	IIC_SCL=0;
 800106a:	4b02      	ldr	r3, [pc, #8]	; (8001074 <IIC_Ack+0x44>)
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	424082a0 	.word	0x424082a0
 8001078:	40020400 	.word	0x40020400
 800107c:	424082a4 	.word	0x424082a4

08001080 <IIC_NAck>:
//不产生ACK应答
void IIC_NAck(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
	IIC_SCL=0;
 8001084:	4b0f      	ldr	r3, [pc, #60]	; (80010c4 <IIC_NAck+0x44>)
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
	SDA_OUT();
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <IIC_NAck+0x48>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <IIC_NAck+0x48>)
 8001090:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001094:	6013      	str	r3, [r2, #0]
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <IIC_NAck+0x48>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <IIC_NAck+0x48>)
 800109c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a0:	6013      	str	r3, [r2, #0]
	IIC_SDA=1;
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <IIC_NAck+0x4c>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
	delay_us(2);
 80010a8:	2002      	movs	r0, #2
 80010aa:	f7ff fee5 	bl	8000e78 <delay_us>
	IIC_SCL=1;
 80010ae:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <IIC_NAck+0x44>)
 80010b0:	2201      	movs	r2, #1
 80010b2:	601a      	str	r2, [r3, #0]
	delay_us(2);
 80010b4:	2002      	movs	r0, #2
 80010b6:	f7ff fedf 	bl	8000e78 <delay_us>
	IIC_SCL=0;
 80010ba:	4b02      	ldr	r3, [pc, #8]	; (80010c4 <IIC_NAck+0x44>)
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	424082a0 	.word	0x424082a0
 80010c8:	40020400 	.word	0x40020400
 80010cc:	424082a4 	.word	0x424082a4

080010d0 <IIC_Send_Byte>:
//IIC发送一个字节
//返回从机有无应答
//1，有应答
//0，无应答
void IIC_Send_Byte(u8 txd)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
    u8 t;
	SDA_OUT();
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <IIC_Send_Byte+0x74>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a19      	ldr	r2, [pc, #100]	; (8001144 <IIC_Send_Byte+0x74>)
 80010e0:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b17      	ldr	r3, [pc, #92]	; (8001144 <IIC_Send_Byte+0x74>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a16      	ldr	r2, [pc, #88]	; (8001144 <IIC_Send_Byte+0x74>)
 80010ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f0:	6013      	str	r3, [r2, #0]
    IIC_SCL=0;//拉低时钟开始数据传输
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <IIC_Send_Byte+0x78>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
    for(t=0;t<8;t++)
 80010f8:	2300      	movs	r3, #0
 80010fa:	73fb      	strb	r3, [r7, #15]
 80010fc:	e019      	b.n	8001132 <IIC_Send_Byte+0x62>
    {
        IIC_SDA=(txd&0x80)>>7;
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	09db      	lsrs	r3, r3, #7
 8001102:	b2da      	uxtb	r2, r3
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <IIC_Send_Byte+0x7c>)
 8001106:	601a      	str	r2, [r3, #0]
        txd<<=1;
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	71fb      	strb	r3, [r7, #7]
		delay_us(2);   //对TEA5767这三个延时都是必须的
 800110e:	2002      	movs	r0, #2
 8001110:	f7ff feb2 	bl	8000e78 <delay_us>
		IIC_SCL=1;
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <IIC_Send_Byte+0x78>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]
		delay_us(2);
 800111a:	2002      	movs	r0, #2
 800111c:	f7ff feac 	bl	8000e78 <delay_us>
		IIC_SCL=0;
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <IIC_Send_Byte+0x78>)
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
		delay_us(2);
 8001126:	2002      	movs	r0, #2
 8001128:	f7ff fea6 	bl	8000e78 <delay_us>
    for(t=0;t<8;t++)
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	3301      	adds	r3, #1
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	2b07      	cmp	r3, #7
 8001136:	d9e2      	bls.n	80010fe <IIC_Send_Byte+0x2e>
    }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40020400 	.word	0x40020400
 8001148:	424082a0 	.word	0x424082a0
 800114c:	424082a4 	.word	0x424082a4

08001150 <IIC_Read_Byte>:
//读1个字节，ack=1时，发送ACK，ack=0，发送nACK
u8 IIC_Read_Byte(unsigned char ack)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
	unsigned char i,receive=0;
 800115a:	2300      	movs	r3, #0
 800115c:	73bb      	strb	r3, [r7, #14]
	SDA_IN();//SDA设置为输入
 800115e:	4b1b      	ldr	r3, [pc, #108]	; (80011cc <IIC_Read_Byte+0x7c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a1a      	ldr	r2, [pc, #104]	; (80011cc <IIC_Read_Byte+0x7c>)
 8001164:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8001168:	6013      	str	r3, [r2, #0]
 800116a:	4b18      	ldr	r3, [pc, #96]	; (80011cc <IIC_Read_Byte+0x7c>)
 800116c:	4a17      	ldr	r2, [pc, #92]	; (80011cc <IIC_Read_Byte+0x7c>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6013      	str	r3, [r2, #0]
    for(i=0;i<8;i++ )
 8001172:	2300      	movs	r3, #0
 8001174:	73fb      	strb	r3, [r7, #15]
 8001176:	e018      	b.n	80011aa <IIC_Read_Byte+0x5a>
	{
        IIC_SCL=0;
 8001178:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <IIC_Read_Byte+0x80>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
        delay_us(2);
 800117e:	2002      	movs	r0, #2
 8001180:	f7ff fe7a 	bl	8000e78 <delay_us>
		IIC_SCL=1;
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <IIC_Read_Byte+0x80>)
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]
        receive<<=1;
 800118a:	7bbb      	ldrb	r3, [r7, #14]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	73bb      	strb	r3, [r7, #14]
        if(READ_SDA)receive++;
 8001190:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <IIC_Read_Byte+0x84>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <IIC_Read_Byte+0x4e>
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	3301      	adds	r3, #1
 800119c:	73bb      	strb	r3, [r7, #14]
        delay_us(1);
 800119e:	2001      	movs	r0, #1
 80011a0:	f7ff fe6a 	bl	8000e78 <delay_us>
    for(i=0;i<8;i++ )
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	3301      	adds	r3, #1
 80011a8:	73fb      	strb	r3, [r7, #15]
 80011aa:	7bfb      	ldrb	r3, [r7, #15]
 80011ac:	2b07      	cmp	r3, #7
 80011ae:	d9e3      	bls.n	8001178 <IIC_Read_Byte+0x28>
    }
    if (!ack)
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d102      	bne.n	80011bc <IIC_Read_Byte+0x6c>
        IIC_NAck();//发送nACK
 80011b6:	f7ff ff63 	bl	8001080 <IIC_NAck>
 80011ba:	e001      	b.n	80011c0 <IIC_Read_Byte+0x70>
    else
        IIC_Ack(); //发送ACK
 80011bc:	f7ff ff38 	bl	8001030 <IIC_Ack>
    return receive;
 80011c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40020400 	.word	0x40020400
 80011d0:	424082a0 	.word	0x424082a0
 80011d4:	42408224 	.word	0x42408224

080011d8 <AT24CXX_Init>:


//24cxx.c_op
//初始化IIC接口
void AT24CXX_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
	IIC_Init();//IIC初始化
 80011dc:	f7ff fe8c 	bl	8000ef8 <IIC_Init>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <AT24CXX_ReadOneByte>:
//在AT24CXX指定地址读出一个数据
//ReadAddr:开始读数的地址
//返回值  :读到的数据
u8 AT24CXX_ReadOneByte(u16 ReadAddr)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	80fb      	strh	r3, [r7, #6]
	u8 temp=0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	73fb      	strb	r3, [r7, #15]
    IIC_Start();
 80011f2:	f7ff fe93 	bl	8000f1c <IIC_Start>
	if(EE_TYPE>AT24C16)
	{
		IIC_Send_Byte(0XA0);	   //发送写命令
		IIC_Wait_Ack();
		IIC_Send_Byte(ReadAddr>>8);//发送高地址
	}else IIC_Send_Byte(0XA0+((ReadAddr/256)<<1));   //发送器件地址0XA0,写数据
 80011f6:	88fb      	ldrh	r3, [r7, #6]
 80011f8:	0a1b      	lsrs	r3, r3, #8
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	b2db      	uxtb	r3, r3
 8001202:	3b60      	subs	r3, #96	; 0x60
 8001204:	b2db      	uxtb	r3, r3
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff ff62 	bl	80010d0 <IIC_Send_Byte>
	IIC_Wait_Ack();
 800120c:	f7ff fed6 	bl	8000fbc <IIC_Wait_Ack>
    IIC_Send_Byte(ReadAddr%256);   //发送低地址
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff ff5b 	bl	80010d0 <IIC_Send_Byte>
	IIC_Wait_Ack();
 800121a:	f7ff fecf 	bl	8000fbc <IIC_Wait_Ack>
	IIC_Start();
 800121e:	f7ff fe7d 	bl	8000f1c <IIC_Start>
	IIC_Send_Byte(0XA1);           //进入接收模式
 8001222:	20a1      	movs	r0, #161	; 0xa1
 8001224:	f7ff ff54 	bl	80010d0 <IIC_Send_Byte>
	IIC_Wait_Ack();
 8001228:	f7ff fec8 	bl	8000fbc <IIC_Wait_Ack>
    temp=IIC_Read_Byte(0);
 800122c:	2000      	movs	r0, #0
 800122e:	f7ff ff8f 	bl	8001150 <IIC_Read_Byte>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
    IIC_Stop();//产生一个停止条件
 8001236:	f7ff fe99 	bl	8000f6c <IIC_Stop>
	return temp;
 800123a:	7bfb      	ldrb	r3, [r7, #15]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3710      	adds	r7, #16
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <AT24CXX_WriteOneByte>:
//在AT24CXX指定地址写入一个数据
//WriteAddr  :写入数据的目的地址
//DataToWrite:要写入的数据
void AT24CXX_WriteOneByte(u16 WriteAddr,u8 DataToWrite)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	460a      	mov	r2, r1
 800124e:	80fb      	strh	r3, [r7, #6]
 8001250:	4613      	mov	r3, r2
 8001252:	717b      	strb	r3, [r7, #5]
    IIC_Start();
 8001254:	f7ff fe62 	bl	8000f1c <IIC_Start>
	if(EE_TYPE>AT24C16)
	{
		IIC_Send_Byte(0XA0);	    //发送写命令
		IIC_Wait_Ack();
		IIC_Send_Byte(WriteAddr>>8);//发送高地址
	}else IIC_Send_Byte(0XA0+((WriteAddr/256)<<1));   //发送器件地址0XA0,写数据
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	b29b      	uxth	r3, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	3b60      	subs	r3, #96	; 0x60
 8001266:	b2db      	uxtb	r3, r3
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff31 	bl	80010d0 <IIC_Send_Byte>
	IIC_Wait_Ack();
 800126e:	f7ff fea5 	bl	8000fbc <IIC_Wait_Ack>
    IIC_Send_Byte(WriteAddr%256);   //发送低地址
 8001272:	88fb      	ldrh	r3, [r7, #6]
 8001274:	b2db      	uxtb	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff2a 	bl	80010d0 <IIC_Send_Byte>
	IIC_Wait_Ack();
 800127c:	f7ff fe9e 	bl	8000fbc <IIC_Wait_Ack>
	IIC_Send_Byte(DataToWrite);     //发送字节
 8001280:	797b      	ldrb	r3, [r7, #5]
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff24 	bl	80010d0 <IIC_Send_Byte>
	IIC_Wait_Ack();
 8001288:	f7ff fe98 	bl	8000fbc <IIC_Wait_Ack>
    IIC_Stop();//产生一个停止条件
 800128c:	f7ff fe6e 	bl	8000f6c <IIC_Stop>
	//delay_ms(10);
	HAL_Delay(10);
 8001290:	200a      	movs	r0, #10
 8001292:	f007 fe57 	bl	8008f44 <HAL_Delay>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <AT24CXX_WriteLenByte>:
//该函数用于写入16bit或者32bit的数据.
//WriteAddr  :开始写入的地址
//DataToWrite:数据数组首地址
//Len        :要写入数据的长度2,4
void AT24CXX_WriteLenByte(u16 WriteAddr,u32 DataToWrite,u8 Len)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	4603      	mov	r3, r0
 80012a6:	6039      	str	r1, [r7, #0]
 80012a8:	80fb      	strh	r3, [r7, #6]
 80012aa:	4613      	mov	r3, r2
 80012ac:	717b      	strb	r3, [r7, #5]
	u8 t;
	for(t=0;t<Len;t++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e010      	b.n	80012d6 <AT24CXX_WriteLenByte+0x38>
	{
		AT24CXX_WriteOneByte(WriteAddr+t,(DataToWrite>>(8*t))&0xff);
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	4413      	add	r3, r2
 80012bc:	b298      	uxth	r0, r3
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	683a      	ldr	r2, [r7, #0]
 80012c4:	fa22 f303 	lsr.w	r3, r2, r3
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	4619      	mov	r1, r3
 80012cc:	f7ff ffba 	bl	8001244 <AT24CXX_WriteOneByte>
	for(t=0;t<Len;t++)
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
 80012d2:	3301      	adds	r3, #1
 80012d4:	73fb      	strb	r3, [r7, #15]
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	797b      	ldrb	r3, [r7, #5]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d3ea      	bcc.n	80012b4 <AT24CXX_WriteLenByte+0x16>
	}
}
 80012de:	bf00      	nop
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <AT24CXX_ReadLenByte>:
//该函数用于读出16bit或者32bit的数据.
//ReadAddr   :开始读出的地址
//返回值     :数据
//Len        :要读出数据的长度2,4
u32 AT24CXX_ReadLenByte(u16 ReadAddr,u8 Len)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	4603      	mov	r3, r0
 80012f0:	460a      	mov	r2, r1
 80012f2:	80fb      	strh	r3, [r7, #6]
 80012f4:	4613      	mov	r3, r2
 80012f6:	717b      	strb	r3, [r7, #5]
	u8 t;
	u32 temp=0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60bb      	str	r3, [r7, #8]
	for(t=0;t<Len;t++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]
 8001300:	e018      	b.n	8001334 <AT24CXX_ReadLenByte+0x4c>
	{
		temp<<=8;
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	021b      	lsls	r3, r3, #8
 8001306:	60bb      	str	r3, [r7, #8]
		temp+=AT24CXX_ReadOneByte(ReadAddr+Len-t-1);
 8001308:	797b      	ldrb	r3, [r7, #5]
 800130a:	b29a      	uxth	r2, r3
 800130c:	88fb      	ldrh	r3, [r7, #6]
 800130e:	4413      	add	r3, r2
 8001310:	b29a      	uxth	r2, r3
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	b29b      	uxth	r3, r3
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	b29b      	uxth	r3, r3
 800131a:	3b01      	subs	r3, #1
 800131c:	b29b      	uxth	r3, r3
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff60 	bl	80011e4 <AT24CXX_ReadOneByte>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4413      	add	r3, r2
 800132c:	60bb      	str	r3, [r7, #8]
	for(t=0;t<Len;t++)
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	3301      	adds	r3, #1
 8001332:	73fb      	strb	r3, [r7, #15]
 8001334:	7bfa      	ldrb	r2, [r7, #15]
 8001336:	797b      	ldrb	r3, [r7, #5]
 8001338:	429a      	cmp	r2, r3
 800133a:	d3e2      	bcc.n	8001302 <AT24CXX_ReadLenByte+0x1a>
	}
	return temp;
 800133c:	68bb      	ldr	r3, [r7, #8]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <TP_Write_Byte>:

//SPI写数据
//向触摸屏IC写入1byte数据
//num:要写入的数据
void TP_Write_Byte(u8 num)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
	u8 count = 0;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]
	for (count = 0; count < 8; count++)
 8001356:	2300      	movs	r3, #0
 8001358:	73fb      	strb	r3, [r7, #15]
 800135a:	e019      	b.n	8001390 <TP_Write_Byte+0x48>
	{
		if (num & 0x80)
 800135c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	da03      	bge.n	800136c <TP_Write_Byte+0x24>
			TDIN = 1;
 8001364:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <TP_Write_Byte+0x58>)
 8001366:	2201      	movs	r2, #1
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	e002      	b.n	8001372 <TP_Write_Byte+0x2a>
		else
			TDIN = 0;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <TP_Write_Byte+0x58>)
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
		num <<= 1;
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	71fb      	strb	r3, [r7, #7]
		TCLK = 0;
 8001378:	4b0a      	ldr	r3, [pc, #40]	; (80013a4 <TP_Write_Byte+0x5c>)
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
		delay_us(1);
 800137e:	2001      	movs	r0, #1
 8001380:	f7ff fd7a 	bl	8000e78 <delay_us>
		TCLK = 1; //上升沿有效
 8001384:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <TP_Write_Byte+0x5c>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]
	for (count = 0; count < 8; count++)
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	3301      	adds	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	7bfb      	ldrb	r3, [r7, #15]
 8001392:	2b07      	cmp	r3, #7
 8001394:	d9e2      	bls.n	800135c <TP_Write_Byte+0x14>
	}
}
 8001396:	bf00      	nop
 8001398:	bf00      	nop
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	424282ac 	.word	0x424282ac
 80013a4:	42408280 	.word	0x42408280

080013a8 <TP_Read_AD>:
//SPI读数据
//从触摸屏IC读取adc值
//CMD:指令
//返回值:读到的数据
u16 TP_Read_AD(u8 CMD)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
	u8 count = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	73fb      	strb	r3, [r7, #15]
	u16 Num = 0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	81bb      	strh	r3, [r7, #12]
	TCLK = 0;			//先拉低时钟
 80013ba:	4b23      	ldr	r3, [pc, #140]	; (8001448 <TP_Read_AD+0xa0>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
	TDIN = 0;			//拉低数据线
 80013c0:	4b22      	ldr	r3, [pc, #136]	; (800144c <TP_Read_AD+0xa4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
	TCS = 0;			//选中触摸屏IC
 80013c6:	4b22      	ldr	r3, [pc, #136]	; (8001450 <TP_Read_AD+0xa8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
	TP_Write_Byte(CMD); //发送命令字
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ffba 	bl	8001348 <TP_Write_Byte>
	delay_us(6);		//ADS7846的转换时间最长为6us
 80013d4:	2006      	movs	r0, #6
 80013d6:	f7ff fd4f 	bl	8000e78 <delay_us>
	TCLK = 0;
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <TP_Read_AD+0xa0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
	delay_us(1);
 80013e0:	2001      	movs	r0, #1
 80013e2:	f7ff fd49 	bl	8000e78 <delay_us>
	TCLK = 1; //给1个时钟，清除BUSY
 80013e6:	4b18      	ldr	r3, [pc, #96]	; (8001448 <TP_Read_AD+0xa0>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
	delay_us(1);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f7ff fd43 	bl	8000e78 <delay_us>
	TCLK = 0;
 80013f2:	4b15      	ldr	r3, [pc, #84]	; (8001448 <TP_Read_AD+0xa0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]
	for (count = 0; count < 16; count++) //读出16位数据,只有高12位有效
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	e015      	b.n	800142a <TP_Read_AD+0x82>
	{
		Num <<= 1;
 80013fe:	89bb      	ldrh	r3, [r7, #12]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	81bb      	strh	r3, [r7, #12]
		TCLK = 0; //下降沿有效
 8001404:	4b10      	ldr	r3, [pc, #64]	; (8001448 <TP_Read_AD+0xa0>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
		delay_us(1);
 800140a:	2001      	movs	r0, #1
 800140c:	f7ff fd34 	bl	8000e78 <delay_us>
		TCLK = 1;
 8001410:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <TP_Read_AD+0xa0>)
 8001412:	2201      	movs	r2, #1
 8001414:	601a      	str	r2, [r3, #0]
		if (DOUT)
 8001416:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <TP_Read_AD+0xac>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d002      	beq.n	8001424 <TP_Read_AD+0x7c>
			Num++;
 800141e:	89bb      	ldrh	r3, [r7, #12]
 8001420:	3301      	adds	r3, #1
 8001422:	81bb      	strh	r3, [r7, #12]
	for (count = 0; count < 16; count++) //读出16位数据,只有高12位有效
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	3301      	adds	r3, #1
 8001428:	73fb      	strb	r3, [r7, #15]
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d9e6      	bls.n	80013fe <TP_Read_AD+0x56>
	}
	Num >>= 4; //只有高12位有效.
 8001430:	89bb      	ldrh	r3, [r7, #12]
 8001432:	091b      	lsrs	r3, r3, #4
 8001434:	81bb      	strh	r3, [r7, #12]
	TCS = 1;   //释放片选
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <TP_Read_AD+0xa8>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]
	return (Num);
 800143c:	89bb      	ldrh	r3, [r7, #12]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	42408280 	.word	0x42408280
 800144c:	424282ac 	.word	0x424282ac
 8001450:	424102b4 	.word	0x424102b4
 8001454:	42408208 	.word	0x42408208

08001458 <TP_Read_XOY>:
//xy:指令（CMD_RDX/CMD_RDY）
//返回值:读到的数据
#define READ_TIMES 5 //读取次数
#define LOST_VAL 1	 //丢弃值
u16 TP_Read_XOY(u8 xy)
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	u16 i, j;
	u16 buf[READ_TIMES];
	u16 sum = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	837b      	strh	r3, [r7, #26]
	u16 temp;
	for (i = 0; i < READ_TIMES; i++)
 8001466:	2300      	movs	r3, #0
 8001468:	83fb      	strh	r3, [r7, #30]
 800146a:	e00f      	b.n	800148c <TP_Read_XOY+0x34>
		buf[i] = TP_Read_AD(xy);
 800146c:	8bfc      	ldrh	r4, [r7, #30]
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff99 	bl	80013a8 <TP_Read_AD>
 8001476:	4603      	mov	r3, r0
 8001478:	461a      	mov	r2, r3
 800147a:	0063      	lsls	r3, r4, #1
 800147c:	f107 0120 	add.w	r1, r7, #32
 8001480:	440b      	add	r3, r1
 8001482:	f823 2c14 	strh.w	r2, [r3, #-20]
	for (i = 0; i < READ_TIMES; i++)
 8001486:	8bfb      	ldrh	r3, [r7, #30]
 8001488:	3301      	adds	r3, #1
 800148a:	83fb      	strh	r3, [r7, #30]
 800148c:	8bfb      	ldrh	r3, [r7, #30]
 800148e:	2b04      	cmp	r3, #4
 8001490:	d9ec      	bls.n	800146c <TP_Read_XOY+0x14>
	for (i = 0; i < READ_TIMES - 1; i++) //排序
 8001492:	2300      	movs	r3, #0
 8001494:	83fb      	strh	r3, [r7, #30]
 8001496:	e03b      	b.n	8001510 <TP_Read_XOY+0xb8>
	{
		for (j = i + 1; j < READ_TIMES; j++)
 8001498:	8bfb      	ldrh	r3, [r7, #30]
 800149a:	3301      	adds	r3, #1
 800149c:	83bb      	strh	r3, [r7, #28]
 800149e:	e031      	b.n	8001504 <TP_Read_XOY+0xac>
		{
			if (buf[i] > buf[j]) //升序排列
 80014a0:	8bfb      	ldrh	r3, [r7, #30]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	f107 0220 	add.w	r2, r7, #32
 80014a8:	4413      	add	r3, r2
 80014aa:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80014ae:	8bbb      	ldrh	r3, [r7, #28]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	f107 0120 	add.w	r1, r7, #32
 80014b6:	440b      	add	r3, r1
 80014b8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d91e      	bls.n	80014fe <TP_Read_XOY+0xa6>
			{
				temp = buf[i];
 80014c0:	8bfb      	ldrh	r3, [r7, #30]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	f107 0220 	add.w	r2, r7, #32
 80014c8:	4413      	add	r3, r2
 80014ca:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80014ce:	833b      	strh	r3, [r7, #24]
				buf[i] = buf[j];
 80014d0:	8bbb      	ldrh	r3, [r7, #28]
 80014d2:	8bfa      	ldrh	r2, [r7, #30]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	f107 0120 	add.w	r1, r7, #32
 80014da:	440b      	add	r3, r1
 80014dc:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 80014e0:	0053      	lsls	r3, r2, #1
 80014e2:	f107 0220 	add.w	r2, r7, #32
 80014e6:	4413      	add	r3, r2
 80014e8:	460a      	mov	r2, r1
 80014ea:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j] = temp;
 80014ee:	8bbb      	ldrh	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	f107 0220 	add.w	r2, r7, #32
 80014f6:	4413      	add	r3, r2
 80014f8:	8b3a      	ldrh	r2, [r7, #24]
 80014fa:	f823 2c14 	strh.w	r2, [r3, #-20]
		for (j = i + 1; j < READ_TIMES; j++)
 80014fe:	8bbb      	ldrh	r3, [r7, #28]
 8001500:	3301      	adds	r3, #1
 8001502:	83bb      	strh	r3, [r7, #28]
 8001504:	8bbb      	ldrh	r3, [r7, #28]
 8001506:	2b04      	cmp	r3, #4
 8001508:	d9ca      	bls.n	80014a0 <TP_Read_XOY+0x48>
	for (i = 0; i < READ_TIMES - 1; i++) //排序
 800150a:	8bfb      	ldrh	r3, [r7, #30]
 800150c:	3301      	adds	r3, #1
 800150e:	83fb      	strh	r3, [r7, #30]
 8001510:	8bfb      	ldrh	r3, [r7, #30]
 8001512:	2b03      	cmp	r3, #3
 8001514:	d9c0      	bls.n	8001498 <TP_Read_XOY+0x40>
			}
		}
	}
	sum = 0;
 8001516:	2300      	movs	r3, #0
 8001518:	837b      	strh	r3, [r7, #26]
	for (i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++)
 800151a:	2301      	movs	r3, #1
 800151c:	83fb      	strh	r3, [r7, #30]
 800151e:	e00c      	b.n	800153a <TP_Read_XOY+0xe2>
		sum += buf[i];
 8001520:	8bfb      	ldrh	r3, [r7, #30]
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	f107 0220 	add.w	r2, r7, #32
 8001528:	4413      	add	r3, r2
 800152a:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800152e:	8b7b      	ldrh	r3, [r7, #26]
 8001530:	4413      	add	r3, r2
 8001532:	837b      	strh	r3, [r7, #26]
	for (i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++)
 8001534:	8bfb      	ldrh	r3, [r7, #30]
 8001536:	3301      	adds	r3, #1
 8001538:	83fb      	strh	r3, [r7, #30]
 800153a:	8bfb      	ldrh	r3, [r7, #30]
 800153c:	2b03      	cmp	r3, #3
 800153e:	d9ef      	bls.n	8001520 <TP_Read_XOY+0xc8>
	temp = sum / (READ_TIMES - 2 * LOST_VAL);
 8001540:	8b7b      	ldrh	r3, [r7, #26]
 8001542:	4a05      	ldr	r2, [pc, #20]	; (8001558 <TP_Read_XOY+0x100>)
 8001544:	fba2 2303 	umull	r2, r3, r2, r3
 8001548:	085b      	lsrs	r3, r3, #1
 800154a:	833b      	strh	r3, [r7, #24]
	return temp;
 800154c:	8b3b      	ldrh	r3, [r7, #24]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	; 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd90      	pop	{r4, r7, pc}
 8001556:	bf00      	nop
 8001558:	aaaaaaab 	.word	0xaaaaaaab

0800155c <TP_Read_XY>:
//读取x,y坐标
//最小值不能少于100.
//x,y:读取到的坐标值
//返回值:0,失败;1,成功。
u8 TP_Read_XY(u16 *x, u16 *y)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
	u16 xtemp, ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <TP_Read_XY+0x3c>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff ff74 	bl	8001458 <TP_Read_XOY>
 8001570:	4603      	mov	r3, r0
 8001572:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <TP_Read_XY+0x40>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff6d 	bl	8001458 <TP_Read_XOY>
 800157e:	4603      	mov	r3, r0
 8001580:	81bb      	strh	r3, [r7, #12]
	//if(xtemp<100||ytemp<100)return 0;//读数失败
	*x = xtemp;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	89fa      	ldrh	r2, [r7, #14]
 8001586:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	89ba      	ldrh	r2, [r7, #12]
 800158c:	801a      	strh	r2, [r3, #0]
	return 1; //读数成功
 800158e:	2301      	movs	r3, #1
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000034 	.word	0x20000034
 800159c:	20000035 	.word	0x20000035

080015a0 <TP_Read_XY2>:
//该函数能大大提高准确度
//x,y:读取到的坐标值
//返回值:0,失败;1,成功。
#define ERR_RANGE 50 //误差范围
u8 TP_Read_XY2(u16 *x, u16 *y)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b086      	sub	sp, #24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
	u16 x1, y1;
	u16 x2, y2;
	u8 flag;
	flag = TP_Read_XY(&x1, &y1);
 80015aa:	f107 0212 	add.w	r2, r7, #18
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4611      	mov	r1, r2
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ffd1 	bl	800155c <TP_Read_XY>
 80015ba:	4603      	mov	r3, r0
 80015bc:	75fb      	strb	r3, [r7, #23]
	if (flag == 0)
 80015be:	7dfb      	ldrb	r3, [r7, #23]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <TP_Read_XY2+0x28>
		return (0);
 80015c4:	2300      	movs	r3, #0
 80015c6:	e049      	b.n	800165c <TP_Read_XY2+0xbc>
	flag = TP_Read_XY(&x2, &y2);
 80015c8:	f107 020e 	add.w	r2, r7, #14
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	4611      	mov	r1, r2
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff ffc2 	bl	800155c <TP_Read_XY>
 80015d8:	4603      	mov	r3, r0
 80015da:	75fb      	strb	r3, [r7, #23]
	if (flag == 0)
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <TP_Read_XY2+0x46>
		return (0);
 80015e2:	2300      	movs	r3, #0
 80015e4:	e03a      	b.n	800165c <TP_Read_XY2+0xbc>
	if (((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE)) //前后两次采样在+-50内
 80015e6:	8a3a      	ldrh	r2, [r7, #16]
 80015e8:	8abb      	ldrh	r3, [r7, #20]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d804      	bhi.n	80015f8 <TP_Read_XY2+0x58>
 80015ee:	8a3b      	ldrh	r3, [r7, #16]
 80015f0:	3331      	adds	r3, #49	; 0x31
 80015f2:	8aba      	ldrh	r2, [r7, #20]
 80015f4:	4293      	cmp	r3, r2
 80015f6:	da08      	bge.n	800160a <TP_Read_XY2+0x6a>
 80015f8:	8aba      	ldrh	r2, [r7, #20]
 80015fa:	8a3b      	ldrh	r3, [r7, #16]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d82c      	bhi.n	800165a <TP_Read_XY2+0xba>
 8001600:	8abb      	ldrh	r3, [r7, #20]
 8001602:	3331      	adds	r3, #49	; 0x31
 8001604:	8a3a      	ldrh	r2, [r7, #16]
 8001606:	4293      	cmp	r3, r2
 8001608:	db27      	blt.n	800165a <TP_Read_XY2+0xba>
		&& ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 800160a:	89fa      	ldrh	r2, [r7, #14]
 800160c:	8a7b      	ldrh	r3, [r7, #18]
 800160e:	429a      	cmp	r2, r3
 8001610:	d804      	bhi.n	800161c <TP_Read_XY2+0x7c>
 8001612:	89fb      	ldrh	r3, [r7, #14]
 8001614:	3331      	adds	r3, #49	; 0x31
 8001616:	8a7a      	ldrh	r2, [r7, #18]
 8001618:	4293      	cmp	r3, r2
 800161a:	da08      	bge.n	800162e <TP_Read_XY2+0x8e>
 800161c:	8a7a      	ldrh	r2, [r7, #18]
 800161e:	89fb      	ldrh	r3, [r7, #14]
 8001620:	429a      	cmp	r2, r3
 8001622:	d81a      	bhi.n	800165a <TP_Read_XY2+0xba>
 8001624:	8a7b      	ldrh	r3, [r7, #18]
 8001626:	3331      	adds	r3, #49	; 0x31
 8001628:	89fa      	ldrh	r2, [r7, #14]
 800162a:	4293      	cmp	r3, r2
 800162c:	db15      	blt.n	800165a <TP_Read_XY2+0xba>
	{
		*x = (x1 + x2) / 2;
 800162e:	8abb      	ldrh	r3, [r7, #20]
 8001630:	461a      	mov	r2, r3
 8001632:	8a3b      	ldrh	r3, [r7, #16]
 8001634:	4413      	add	r3, r2
 8001636:	0fda      	lsrs	r2, r3, #31
 8001638:	4413      	add	r3, r2
 800163a:	105b      	asrs	r3, r3, #1
 800163c:	b29a      	uxth	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	801a      	strh	r2, [r3, #0]
		*y = (y1 + y2) / 2;
 8001642:	8a7b      	ldrh	r3, [r7, #18]
 8001644:	461a      	mov	r2, r3
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	4413      	add	r3, r2
 800164a:	0fda      	lsrs	r2, r3, #31
 800164c:	4413      	add	r3, r2
 800164e:	105b      	asrs	r3, r3, #1
 8001650:	b29a      	uxth	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	801a      	strh	r2, [r3, #0]
		return 1;
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <TP_Read_XY2+0xbc>
	}
	else
		return 0;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <TP_Drow_Touch_Point>:
//画一个触摸点
//用来校准用的
//x,y:坐标
//color:颜色
void TP_Drow_Touch_Point(u16 x, u16 y, u16 color)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	80fb      	strh	r3, [r7, #6]
 800166e:	460b      	mov	r3, r1
 8001670:	80bb      	strh	r3, [r7, #4]
 8001672:	4613      	mov	r3, r2
 8001674:	807b      	strh	r3, [r7, #2]
	POINT_COLOR = color;
 8001676:	4a24      	ldr	r2, [pc, #144]	; (8001708 <TP_Drow_Touch_Point+0xa4>)
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	8013      	strh	r3, [r2, #0]
	LCD_DrawLine(x - 12, y, x + 13, y); //横线
 800167c:	88fb      	ldrh	r3, [r7, #6]
 800167e:	3b0c      	subs	r3, #12
 8001680:	b298      	uxth	r0, r3
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	330d      	adds	r3, #13
 8001686:	b29a      	uxth	r2, r3
 8001688:	88bb      	ldrh	r3, [r7, #4]
 800168a:	88b9      	ldrh	r1, [r7, #4]
 800168c:	f005 f93e 	bl	800690c <LCD_DrawLine>
	LCD_DrawLine(x, y - 12, x, y + 13); //竖线
 8001690:	88bb      	ldrh	r3, [r7, #4]
 8001692:	3b0c      	subs	r3, #12
 8001694:	b299      	uxth	r1, r3
 8001696:	88bb      	ldrh	r3, [r7, #4]
 8001698:	330d      	adds	r3, #13
 800169a:	b29b      	uxth	r3, r3
 800169c:	88fa      	ldrh	r2, [r7, #6]
 800169e:	88f8      	ldrh	r0, [r7, #6]
 80016a0:	f005 f934 	bl	800690c <LCD_DrawLine>
	LCD_DrawPoint(x + 1, y + 1);
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	3301      	adds	r3, #1
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	88bb      	ldrh	r3, [r7, #4]
 80016ac:	3301      	adds	r3, #1
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4619      	mov	r1, r3
 80016b2:	4610      	mov	r0, r2
 80016b4:	f001 fa34 	bl	8002b20 <LCD_DrawPoint>
	LCD_DrawPoint(x - 1, y + 1);
 80016b8:	88fb      	ldrh	r3, [r7, #6]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b29a      	uxth	r2, r3
 80016be:	88bb      	ldrh	r3, [r7, #4]
 80016c0:	3301      	adds	r3, #1
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	4619      	mov	r1, r3
 80016c6:	4610      	mov	r0, r2
 80016c8:	f001 fa2a 	bl	8002b20 <LCD_DrawPoint>
	LCD_DrawPoint(x + 1, y - 1);
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	3301      	adds	r3, #1
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	88bb      	ldrh	r3, [r7, #4]
 80016d4:	3b01      	subs	r3, #1
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	4619      	mov	r1, r3
 80016da:	4610      	mov	r0, r2
 80016dc:	f001 fa20 	bl	8002b20 <LCD_DrawPoint>
	LCD_DrawPoint(x - 1, y - 1);
 80016e0:	88fb      	ldrh	r3, [r7, #6]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	88bb      	ldrh	r3, [r7, #4]
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	4619      	mov	r1, r3
 80016ee:	4610      	mov	r0, r2
 80016f0:	f001 fa16 	bl	8002b20 <LCD_DrawPoint>
	LCD_Draw_Circle(x, y, 6); //画中心圈
 80016f4:	88b9      	ldrh	r1, [r7, #4]
 80016f6:	88fb      	ldrh	r3, [r7, #6]
 80016f8:	2206      	movs	r2, #6
 80016fa:	4618      	mov	r0, r3
 80016fc:	f005 f9b5 	bl	8006a6a <LCD_Draw_Circle>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	200000da 	.word	0x200000da

0800170c <TP_Scan>:
//触摸按键扫描
//tp:0,屏幕坐标;1,物理坐标(校准等特殊场合用)
//返回值:当前触屏状态.
//0,触屏无触摸;1,触屏有触摸
u8 TP_Scan(u8 tp)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
	if (PEN == 0) //有按键按下
 8001716:	4b42      	ldr	r3, [pc, #264]	; (8001820 <TP_Scan+0x114>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d157      	bne.n	80017ce <TP_Scan+0xc2>
	{
		if (tp)
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d004      	beq.n	800172e <TP_Scan+0x22>
			TP_Read_XY2(&tp_dev.x[0], &tp_dev.y[0]);	  //读取物理坐标
 8001724:	493f      	ldr	r1, [pc, #252]	; (8001824 <TP_Scan+0x118>)
 8001726:	4840      	ldr	r0, [pc, #256]	; (8001828 <TP_Scan+0x11c>)
 8001728:	f7ff ff3a 	bl	80015a0 <TP_Read_XY2>
 800172c:	e03c      	b.n	80017a8 <TP_Scan+0x9c>
		else if (TP_Read_XY2(&tp_dev.x[0], &tp_dev.y[0])) //读取屏幕坐标
 800172e:	493d      	ldr	r1, [pc, #244]	; (8001824 <TP_Scan+0x118>)
 8001730:	483d      	ldr	r0, [pc, #244]	; (8001828 <TP_Scan+0x11c>)
 8001732:	f7ff ff35 	bl	80015a0 <TP_Read_XY2>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d035      	beq.n	80017a8 <TP_Scan+0x9c>
		{
			tp_dev.x[0] = tp_dev.xfac * tp_dev.x[0] + tp_dev.xoff; //将结果转换为屏幕坐标
 800173c:	4b3b      	ldr	r3, [pc, #236]	; (800182c <TP_Scan+0x120>)
 800173e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001742:	4b3a      	ldr	r3, [pc, #232]	; (800182c <TP_Scan+0x120>)
 8001744:	899b      	ldrh	r3, [r3, #12]
 8001746:	ee07 3a90 	vmov	s15, r3
 800174a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800174e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001752:	4b36      	ldr	r3, [pc, #216]	; (800182c <TP_Scan+0x120>)
 8001754:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001760:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001768:	ee17 3a90 	vmov	r3, s15
 800176c:	b29a      	uxth	r2, r3
 800176e:	4b2f      	ldr	r3, [pc, #188]	; (800182c <TP_Scan+0x120>)
 8001770:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0] = tp_dev.yfac * tp_dev.y[0] + tp_dev.yoff;
 8001772:	4b2e      	ldr	r3, [pc, #184]	; (800182c <TP_Scan+0x120>)
 8001774:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001778:	4b2c      	ldr	r3, [pc, #176]	; (800182c <TP_Scan+0x120>)
 800177a:	8adb      	ldrh	r3, [r3, #22]
 800177c:	ee07 3a90 	vmov	s15, r3
 8001780:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001788:	4b28      	ldr	r3, [pc, #160]	; (800182c <TP_Scan+0x120>)
 800178a:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800178e:	ee07 3a90 	vmov	s15, r3
 8001792:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001796:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800179e:	ee17 3a90 	vmov	r3, s15
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <TP_Scan+0x120>)
 80017a6:	82da      	strh	r2, [r3, #22]
		}
		if ((tp_dev.sta & TP_PRES_DOWN) == 0) //之前没有被按下
 80017a8:	4b20      	ldr	r3, [pc, #128]	; (800182c <TP_Scan+0x120>)
 80017aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ae:	b25b      	sxtb	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db2a      	blt.n	800180a <TP_Scan+0xfe>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES; //按键按下
 80017b4:	4b1d      	ldr	r3, [pc, #116]	; (800182c <TP_Scan+0x120>)
 80017b6:	22c0      	movs	r2, #192	; 0xc0
 80017b8:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4] = tp_dev.x[0];				  //记录第一次按下时的坐标
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <TP_Scan+0x120>)
 80017be:	899a      	ldrh	r2, [r3, #12]
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <TP_Scan+0x120>)
 80017c2:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4] = tp_dev.y[0];
 80017c4:	4b19      	ldr	r3, [pc, #100]	; (800182c <TP_Scan+0x120>)
 80017c6:	8ada      	ldrh	r2, [r3, #22]
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <TP_Scan+0x120>)
 80017ca:	83da      	strh	r2, [r3, #30]
 80017cc:	e01d      	b.n	800180a <TP_Scan+0xfe>
		}
	}
	else
	{
		if (tp_dev.sta & TP_PRES_DOWN) //之前是被按下的
 80017ce:	4b17      	ldr	r3, [pc, #92]	; (800182c <TP_Scan+0x120>)
 80017d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	da09      	bge.n	80017ee <TP_Scan+0xe2>
		{
			tp_dev.sta &= ~(1 << 7); //标记按键松开
 80017da:	4b14      	ldr	r3, [pc, #80]	; (800182c <TP_Scan+0x120>)
 80017dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b11      	ldr	r3, [pc, #68]	; (800182c <TP_Scan+0x120>)
 80017e8:	f883 2020 	strb.w	r2, [r3, #32]
 80017ec:	e00d      	b.n	800180a <TP_Scan+0xfe>
		}
		else //之前就没有被按下
		{
			tp_dev.x[4] = 0;
 80017ee:	4b0f      	ldr	r3, [pc, #60]	; (800182c <TP_Scan+0x120>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4] = 0;
 80017f4:	4b0d      	ldr	r3, [pc, #52]	; (800182c <TP_Scan+0x120>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0] = 0xffff;
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <TP_Scan+0x120>)
 80017fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001800:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0] = 0xffff;
 8001802:	4b0a      	ldr	r3, [pc, #40]	; (800182c <TP_Scan+0x120>)
 8001804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001808:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN; //返回当前的触屏状态
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <TP_Scan+0x120>)
 800180c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001810:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001814:	b2db      	uxtb	r3, r3
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	42408204 	.word	0x42408204
 8001824:	20000016 	.word	0x20000016
 8001828:	2000000c 	.word	0x2000000c
 800182c:	20000000 	.word	0x20000000

08001830 <TP_Save_Adjdata>:
//////////////////////////////////////////////////////////////////////////
//保存在EEPROM里面的地址区间基址,占用13个字节(RANGE:SAVE_ADDR_BASE~SAVE_ADDR_BASE+12)
#define SAVE_ADDR_BASE 40
//保存校准参数
void TP_Save_Adjdata(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
	s32 temp;
	//保存校正结果!
	temp = tp_dev.xfac * 100000000; //保存x校正因素
 8001836:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <TP_Save_Adjdata+0x94>)
 8001838:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800183c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80018c8 <TP_Save_Adjdata+0x98>
 8001840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001844:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001848:	ee17 3a90 	vmov	r3, s15
 800184c:	607b      	str	r3, [r7, #4]
	AT24CXX_WriteLenByte(SAVE_ADDR_BASE, temp, 4);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2204      	movs	r2, #4
 8001852:	4619      	mov	r1, r3
 8001854:	2028      	movs	r0, #40	; 0x28
 8001856:	f7ff fd22 	bl	800129e <AT24CXX_WriteLenByte>
	temp = tp_dev.yfac * 100000000; //保存y校正因素
 800185a:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <TP_Save_Adjdata+0x94>)
 800185c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001860:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80018c8 <TP_Save_Adjdata+0x98>
 8001864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001868:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800186c:	ee17 3a90 	vmov	r3, s15
 8001870:	607b      	str	r3, [r7, #4]
	AT24CXX_WriteLenByte(SAVE_ADDR_BASE + 4, temp, 4);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2204      	movs	r2, #4
 8001876:	4619      	mov	r1, r3
 8001878:	202c      	movs	r0, #44	; 0x2c
 800187a:	f7ff fd10 	bl	800129e <AT24CXX_WriteLenByte>
	//保存x偏移量
	AT24CXX_WriteLenByte(SAVE_ADDR_BASE + 8, tp_dev.xoff, 2);
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <TP_Save_Adjdata+0x94>)
 8001880:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001884:	2202      	movs	r2, #2
 8001886:	4619      	mov	r1, r3
 8001888:	2030      	movs	r0, #48	; 0x30
 800188a:	f7ff fd08 	bl	800129e <AT24CXX_WriteLenByte>
	//保存y偏移量
	AT24CXX_WriteLenByte(SAVE_ADDR_BASE + 10, tp_dev.yoff, 2);
 800188e:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <TP_Save_Adjdata+0x94>)
 8001890:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8001894:	2202      	movs	r2, #2
 8001896:	4619      	mov	r1, r3
 8001898:	2032      	movs	r0, #50	; 0x32
 800189a:	f7ff fd00 	bl	800129e <AT24CXX_WriteLenByte>
	//保存触屏类型
	AT24CXX_WriteOneByte(SAVE_ADDR_BASE + 12, tp_dev.touchtype);
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <TP_Save_Adjdata+0x94>)
 80018a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80018a4:	4619      	mov	r1, r3
 80018a6:	2034      	movs	r0, #52	; 0x34
 80018a8:	f7ff fccc 	bl	8001244 <AT24CXX_WriteOneByte>
	temp = 0X0A; //标记校准过了
 80018ac:	230a      	movs	r3, #10
 80018ae:	607b      	str	r3, [r7, #4]
	AT24CXX_WriteOneByte(SAVE_ADDR_BASE + 13, temp);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	4619      	mov	r1, r3
 80018b6:	2035      	movs	r0, #53	; 0x35
 80018b8:	f7ff fcc4 	bl	8001244 <AT24CXX_WriteOneByte>
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000000 	.word	0x20000000
 80018c8:	4cbebc20 	.word	0x4cbebc20

080018cc <TP_Get_Adjdata>:
//得到保存在EEPROM里面的校准值
//返回值：1，成功获取数据
//        0，获取失败，要重新校准
u8 TP_Get_Adjdata(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
	s32 tempfac;
	tempfac = AT24CXX_ReadOneByte(SAVE_ADDR_BASE + 13); //读取标记字,看是否校准过！
 80018d2:	2035      	movs	r0, #53	; 0x35
 80018d4:	f7ff fc86 	bl	80011e4 <AT24CXX_ReadOneByte>
 80018d8:	4603      	mov	r3, r0
 80018da:	607b      	str	r3, [r7, #4]
	if (tempfac == 0X0A)								//触摸屏已经校准过了
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2b0a      	cmp	r3, #10
 80018e0:	d14f      	bne.n	8001982 <TP_Get_Adjdata+0xb6>
	{
		tempfac = AT24CXX_ReadLenByte(SAVE_ADDR_BASE, 4);
 80018e2:	2104      	movs	r1, #4
 80018e4:	2028      	movs	r0, #40	; 0x28
 80018e6:	f7ff fcff 	bl	80012e8 <AT24CXX_ReadLenByte>
 80018ea:	4603      	mov	r3, r0
 80018ec:	607b      	str	r3, [r7, #4]
		tp_dev.xfac = (float)tempfac / 100000000; //得到x校准参数
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	ee07 3a90 	vmov	s15, r3
 80018f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018f8:	eddf 6a24 	vldr	s13, [pc, #144]	; 800198c <TP_Get_Adjdata+0xc0>
 80018fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001900:	4b23      	ldr	r3, [pc, #140]	; (8001990 <TP_Get_Adjdata+0xc4>)
 8001902:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		tempfac = AT24CXX_ReadLenByte(SAVE_ADDR_BASE + 4, 4);
 8001906:	2104      	movs	r1, #4
 8001908:	202c      	movs	r0, #44	; 0x2c
 800190a:	f7ff fced 	bl	80012e8 <AT24CXX_ReadLenByte>
 800190e:	4603      	mov	r3, r0
 8001910:	607b      	str	r3, [r7, #4]
		tp_dev.yfac = (float)tempfac / 100000000; //得到y校准参数
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	ee07 3a90 	vmov	s15, r3
 8001918:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 800198c <TP_Get_Adjdata+0xc0>
 8001920:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <TP_Get_Adjdata+0xc4>)
 8001926:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
												  //得到x偏移量
		tp_dev.xoff = AT24CXX_ReadLenByte(SAVE_ADDR_BASE + 8, 2);
 800192a:	2102      	movs	r1, #2
 800192c:	2030      	movs	r0, #48	; 0x30
 800192e:	f7ff fcdb 	bl	80012e8 <AT24CXX_ReadLenByte>
 8001932:	4603      	mov	r3, r0
 8001934:	b21a      	sxth	r2, r3
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <TP_Get_Adjdata+0xc4>)
 8001938:	859a      	strh	r2, [r3, #44]	; 0x2c
		//得到y偏移量
		tp_dev.yoff = AT24CXX_ReadLenByte(SAVE_ADDR_BASE + 10, 2);
 800193a:	2102      	movs	r1, #2
 800193c:	2032      	movs	r0, #50	; 0x32
 800193e:	f7ff fcd3 	bl	80012e8 <AT24CXX_ReadLenByte>
 8001942:	4603      	mov	r3, r0
 8001944:	b21a      	sxth	r2, r3
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <TP_Get_Adjdata+0xc4>)
 8001948:	85da      	strh	r2, [r3, #46]	; 0x2e
		tp_dev.touchtype = AT24CXX_ReadOneByte(SAVE_ADDR_BASE + 12); //读取触屏类型标记
 800194a:	2034      	movs	r0, #52	; 0x34
 800194c:	f7ff fc4a 	bl	80011e4 <AT24CXX_ReadOneByte>
 8001950:	4603      	mov	r3, r0
 8001952:	461a      	mov	r2, r3
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <TP_Get_Adjdata+0xc4>)
 8001956:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		if (tp_dev.touchtype)										 //X,Y方向与屏幕相反
 800195a:	4b0d      	ldr	r3, [pc, #52]	; (8001990 <TP_Get_Adjdata+0xc4>)
 800195c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001960:	2b00      	cmp	r3, #0
 8001962:	d006      	beq.n	8001972 <TP_Get_Adjdata+0xa6>
		{
			CMD_RDX = 0X90;
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <TP_Get_Adjdata+0xc8>)
 8001966:	2290      	movs	r2, #144	; 0x90
 8001968:	701a      	strb	r2, [r3, #0]
			CMD_RDY = 0XD0;
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <TP_Get_Adjdata+0xcc>)
 800196c:	22d0      	movs	r2, #208	; 0xd0
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	e005      	b.n	800197e <TP_Get_Adjdata+0xb2>
		}
		else //X,Y方向与屏幕相同
		{
			CMD_RDX = 0XD0;
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <TP_Get_Adjdata+0xc8>)
 8001974:	22d0      	movs	r2, #208	; 0xd0
 8001976:	701a      	strb	r2, [r3, #0]
			CMD_RDY = 0X90;
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <TP_Get_Adjdata+0xcc>)
 800197a:	2290      	movs	r2, #144	; 0x90
 800197c:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 800197e:	2301      	movs	r3, #1
 8001980:	e000      	b.n	8001984 <TP_Get_Adjdata+0xb8>
	}
	return 0;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	4cbebc20 	.word	0x4cbebc20
 8001990:	20000000 	.word	0x20000000
 8001994:	20000034 	.word	0x20000034
 8001998:	20000035 	.word	0x20000035

0800199c <TP_Adj_Info_Show>:
//提示字符串
u8 *const TP_REMIND_MSG_TBL = "Please use the stylus click the cross on the screen.The cross will always move until the screen adjustment is completed.";

//提示校准结果(各个参数)
void TP_Adj_Info_Show(u16 x0, u16 y0, u16 x1, u16 y1, u16 x2, u16 y2, u16 x3, u16 y3, u16 fac)
{
 800199c:	b590      	push	{r4, r7, lr}
 800199e:	b085      	sub	sp, #20
 80019a0:	af02      	add	r7, sp, #8
 80019a2:	4604      	mov	r4, r0
 80019a4:	4608      	mov	r0, r1
 80019a6:	4611      	mov	r1, r2
 80019a8:	461a      	mov	r2, r3
 80019aa:	4623      	mov	r3, r4
 80019ac:	80fb      	strh	r3, [r7, #6]
 80019ae:	4603      	mov	r3, r0
 80019b0:	80bb      	strh	r3, [r7, #4]
 80019b2:	460b      	mov	r3, r1
 80019b4:	807b      	strh	r3, [r7, #2]
 80019b6:	4613      	mov	r3, r2
 80019b8:	803b      	strh	r3, [r7, #0]
	POINT_COLOR = RED;
 80019ba:	4b5e      	ldr	r3, [pc, #376]	; (8001b34 <TP_Adj_Info_Show+0x198>)
 80019bc:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80019c0:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(40, 160, lcddev.width, lcddev.height, 16, "x1:");
 80019c2:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 80019c4:	881a      	ldrh	r2, [r3, #0]
 80019c6:	4b5c      	ldr	r3, [pc, #368]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 80019c8:	885b      	ldrh	r3, [r3, #2]
 80019ca:	495c      	ldr	r1, [pc, #368]	; (8001b3c <TP_Adj_Info_Show+0x1a0>)
 80019cc:	9101      	str	r1, [sp, #4]
 80019ce:	2110      	movs	r1, #16
 80019d0:	9100      	str	r1, [sp, #0]
 80019d2:	21a0      	movs	r1, #160	; 0xa0
 80019d4:	2028      	movs	r0, #40	; 0x28
 80019d6:	f005 fa2f 	bl	8006e38 <LCD_ShowString>
	LCD_ShowString(40 + 80, 160, lcddev.width, lcddev.height, 16, "y1:");
 80019da:	4b57      	ldr	r3, [pc, #348]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 80019dc:	881a      	ldrh	r2, [r3, #0]
 80019de:	4b56      	ldr	r3, [pc, #344]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 80019e0:	885b      	ldrh	r3, [r3, #2]
 80019e2:	4957      	ldr	r1, [pc, #348]	; (8001b40 <TP_Adj_Info_Show+0x1a4>)
 80019e4:	9101      	str	r1, [sp, #4]
 80019e6:	2110      	movs	r1, #16
 80019e8:	9100      	str	r1, [sp, #0]
 80019ea:	21a0      	movs	r1, #160	; 0xa0
 80019ec:	2078      	movs	r0, #120	; 0x78
 80019ee:	f005 fa23 	bl	8006e38 <LCD_ShowString>
	LCD_ShowString(40, 180, lcddev.width, lcddev.height, 16, "x2:");
 80019f2:	4b51      	ldr	r3, [pc, #324]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 80019f4:	881a      	ldrh	r2, [r3, #0]
 80019f6:	4b50      	ldr	r3, [pc, #320]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 80019f8:	885b      	ldrh	r3, [r3, #2]
 80019fa:	4952      	ldr	r1, [pc, #328]	; (8001b44 <TP_Adj_Info_Show+0x1a8>)
 80019fc:	9101      	str	r1, [sp, #4]
 80019fe:	2110      	movs	r1, #16
 8001a00:	9100      	str	r1, [sp, #0]
 8001a02:	21b4      	movs	r1, #180	; 0xb4
 8001a04:	2028      	movs	r0, #40	; 0x28
 8001a06:	f005 fa17 	bl	8006e38 <LCD_ShowString>
	LCD_ShowString(40 + 80, 180, lcddev.width, lcddev.height, 16, "y2:");
 8001a0a:	4b4b      	ldr	r3, [pc, #300]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 8001a0c:	881a      	ldrh	r2, [r3, #0]
 8001a0e:	4b4a      	ldr	r3, [pc, #296]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 8001a10:	885b      	ldrh	r3, [r3, #2]
 8001a12:	494d      	ldr	r1, [pc, #308]	; (8001b48 <TP_Adj_Info_Show+0x1ac>)
 8001a14:	9101      	str	r1, [sp, #4]
 8001a16:	2110      	movs	r1, #16
 8001a18:	9100      	str	r1, [sp, #0]
 8001a1a:	21b4      	movs	r1, #180	; 0xb4
 8001a1c:	2078      	movs	r0, #120	; 0x78
 8001a1e:	f005 fa0b 	bl	8006e38 <LCD_ShowString>
	LCD_ShowString(40, 200, lcddev.width, lcddev.height, 16, "x3:");
 8001a22:	4b45      	ldr	r3, [pc, #276]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 8001a24:	881a      	ldrh	r2, [r3, #0]
 8001a26:	4b44      	ldr	r3, [pc, #272]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 8001a28:	885b      	ldrh	r3, [r3, #2]
 8001a2a:	4948      	ldr	r1, [pc, #288]	; (8001b4c <TP_Adj_Info_Show+0x1b0>)
 8001a2c:	9101      	str	r1, [sp, #4]
 8001a2e:	2110      	movs	r1, #16
 8001a30:	9100      	str	r1, [sp, #0]
 8001a32:	21c8      	movs	r1, #200	; 0xc8
 8001a34:	2028      	movs	r0, #40	; 0x28
 8001a36:	f005 f9ff 	bl	8006e38 <LCD_ShowString>
	LCD_ShowString(40 + 80, 200, lcddev.width, lcddev.height, 16, "y3:");
 8001a3a:	4b3f      	ldr	r3, [pc, #252]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 8001a3c:	881a      	ldrh	r2, [r3, #0]
 8001a3e:	4b3e      	ldr	r3, [pc, #248]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 8001a40:	885b      	ldrh	r3, [r3, #2]
 8001a42:	4943      	ldr	r1, [pc, #268]	; (8001b50 <TP_Adj_Info_Show+0x1b4>)
 8001a44:	9101      	str	r1, [sp, #4]
 8001a46:	2110      	movs	r1, #16
 8001a48:	9100      	str	r1, [sp, #0]
 8001a4a:	21c8      	movs	r1, #200	; 0xc8
 8001a4c:	2078      	movs	r0, #120	; 0x78
 8001a4e:	f005 f9f3 	bl	8006e38 <LCD_ShowString>
	LCD_ShowString(40, 220, lcddev.width, lcddev.height, 16, "x4:");
 8001a52:	4b39      	ldr	r3, [pc, #228]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 8001a54:	881a      	ldrh	r2, [r3, #0]
 8001a56:	4b38      	ldr	r3, [pc, #224]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 8001a58:	885b      	ldrh	r3, [r3, #2]
 8001a5a:	493e      	ldr	r1, [pc, #248]	; (8001b54 <TP_Adj_Info_Show+0x1b8>)
 8001a5c:	9101      	str	r1, [sp, #4]
 8001a5e:	2110      	movs	r1, #16
 8001a60:	9100      	str	r1, [sp, #0]
 8001a62:	21dc      	movs	r1, #220	; 0xdc
 8001a64:	2028      	movs	r0, #40	; 0x28
 8001a66:	f005 f9e7 	bl	8006e38 <LCD_ShowString>
	LCD_ShowString(40 + 80, 220, lcddev.width, lcddev.height, 16, "y4:");
 8001a6a:	4b33      	ldr	r3, [pc, #204]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 8001a6c:	881a      	ldrh	r2, [r3, #0]
 8001a6e:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 8001a70:	885b      	ldrh	r3, [r3, #2]
 8001a72:	4939      	ldr	r1, [pc, #228]	; (8001b58 <TP_Adj_Info_Show+0x1bc>)
 8001a74:	9101      	str	r1, [sp, #4]
 8001a76:	2110      	movs	r1, #16
 8001a78:	9100      	str	r1, [sp, #0]
 8001a7a:	21dc      	movs	r1, #220	; 0xdc
 8001a7c:	2078      	movs	r0, #120	; 0x78
 8001a7e:	f005 f9db 	bl	8006e38 <LCD_ShowString>
	LCD_ShowString(40, 240, lcddev.width, lcddev.height, 16, "fac is:");
 8001a82:	4b2d      	ldr	r3, [pc, #180]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 8001a84:	881a      	ldrh	r2, [r3, #0]
 8001a86:	4b2c      	ldr	r3, [pc, #176]	; (8001b38 <TP_Adj_Info_Show+0x19c>)
 8001a88:	885b      	ldrh	r3, [r3, #2]
 8001a8a:	4934      	ldr	r1, [pc, #208]	; (8001b5c <TP_Adj_Info_Show+0x1c0>)
 8001a8c:	9101      	str	r1, [sp, #4]
 8001a8e:	2110      	movs	r1, #16
 8001a90:	9100      	str	r1, [sp, #0]
 8001a92:	21f0      	movs	r1, #240	; 0xf0
 8001a94:	2028      	movs	r0, #40	; 0x28
 8001a96:	f005 f9cf 	bl	8006e38 <LCD_ShowString>
	LCD_ShowNum(40 + 24, 160, x0, 4, 16);	   //显示数值
 8001a9a:	88fa      	ldrh	r2, [r7, #6]
 8001a9c:	2310      	movs	r3, #16
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	21a0      	movs	r1, #160	; 0xa0
 8001aa4:	2040      	movs	r0, #64	; 0x40
 8001aa6:	f005 f955 	bl	8006d54 <LCD_ShowNum>
	LCD_ShowNum(40 + 24 + 80, 160, y0, 4, 16); //显示数值
 8001aaa:	88ba      	ldrh	r2, [r7, #4]
 8001aac:	2310      	movs	r3, #16
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	2304      	movs	r3, #4
 8001ab2:	21a0      	movs	r1, #160	; 0xa0
 8001ab4:	2090      	movs	r0, #144	; 0x90
 8001ab6:	f005 f94d 	bl	8006d54 <LCD_ShowNum>
	LCD_ShowNum(40 + 24, 180, x1, 4, 16);	   //显示数值
 8001aba:	887a      	ldrh	r2, [r7, #2]
 8001abc:	2310      	movs	r3, #16
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	21b4      	movs	r1, #180	; 0xb4
 8001ac4:	2040      	movs	r0, #64	; 0x40
 8001ac6:	f005 f945 	bl	8006d54 <LCD_ShowNum>
	LCD_ShowNum(40 + 24 + 80, 180, y1, 4, 16); //显示数值
 8001aca:	883a      	ldrh	r2, [r7, #0]
 8001acc:	2310      	movs	r3, #16
 8001ace:	9300      	str	r3, [sp, #0]
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	21b4      	movs	r1, #180	; 0xb4
 8001ad4:	2090      	movs	r0, #144	; 0x90
 8001ad6:	f005 f93d 	bl	8006d54 <LCD_ShowNum>
	LCD_ShowNum(40 + 24, 200, x2, 4, 16);	   //显示数值
 8001ada:	8b3a      	ldrh	r2, [r7, #24]
 8001adc:	2310      	movs	r3, #16
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	21c8      	movs	r1, #200	; 0xc8
 8001ae4:	2040      	movs	r0, #64	; 0x40
 8001ae6:	f005 f935 	bl	8006d54 <LCD_ShowNum>
	LCD_ShowNum(40 + 24 + 80, 200, y2, 4, 16); //显示数值
 8001aea:	8bba      	ldrh	r2, [r7, #28]
 8001aec:	2310      	movs	r3, #16
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2304      	movs	r3, #4
 8001af2:	21c8      	movs	r1, #200	; 0xc8
 8001af4:	2090      	movs	r0, #144	; 0x90
 8001af6:	f005 f92d 	bl	8006d54 <LCD_ShowNum>
	LCD_ShowNum(40 + 24, 220, x3, 4, 16);	   //显示数值
 8001afa:	8c3a      	ldrh	r2, [r7, #32]
 8001afc:	2310      	movs	r3, #16
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2304      	movs	r3, #4
 8001b02:	21dc      	movs	r1, #220	; 0xdc
 8001b04:	2040      	movs	r0, #64	; 0x40
 8001b06:	f005 f925 	bl	8006d54 <LCD_ShowNum>
	LCD_ShowNum(40 + 24 + 80, 220, y3, 4, 16); //显示数值
 8001b0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b0c:	2310      	movs	r3, #16
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	2304      	movs	r3, #4
 8001b12:	21dc      	movs	r1, #220	; 0xdc
 8001b14:	2090      	movs	r0, #144	; 0x90
 8001b16:	f005 f91d 	bl	8006d54 <LCD_ShowNum>
	LCD_ShowNum(40 + 56, 240, fac, 3, 16);	   //显示数值,该数值必须在95~105范围之内.
 8001b1a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b1c:	2310      	movs	r3, #16
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2303      	movs	r3, #3
 8001b22:	21f0      	movs	r1, #240	; 0xf0
 8001b24:	2060      	movs	r0, #96	; 0x60
 8001b26:	f005 f915 	bl	8006d54 <LCD_ShowNum>
}
 8001b2a:	bf00      	nop
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd90      	pop	{r4, r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200000da 	.word	0x200000da
 8001b38:	20000118 	.word	0x20000118
 8001b3c:	0800beec 	.word	0x0800beec
 8001b40:	0800bef0 	.word	0x0800bef0
 8001b44:	0800bef4 	.word	0x0800bef4
 8001b48:	0800bef8 	.word	0x0800bef8
 8001b4c:	0800befc 	.word	0x0800befc
 8001b50:	0800bf00 	.word	0x0800bf00
 8001b54:	0800bf04 	.word	0x0800bf04
 8001b58:	0800bf08 	.word	0x0800bf08
 8001b5c:	0800bf0c 	.word	0x0800bf0c

08001b60 <TP_Adjust>:

//触摸屏校准代码
//得到四个校准参数
void TP_Adjust(void)
{
 8001b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b64:	b093      	sub	sp, #76	; 0x4c
 8001b66:	af06      	add	r7, sp, #24
	u16 pos_temp[4][2]; //坐标缓存值
	u8 cnt = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	u16 d1, d2;
	u32 tem1, tem2;
	double fac;
	u16 outtime = 0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	85bb      	strh	r3, [r7, #44]	; 0x2c
	cnt = 0;
 8001b72:	2300      	movs	r3, #0
 8001b74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	POINT_COLOR = BLUE;
 8001b78:	4bbd      	ldr	r3, [pc, #756]	; (8001e70 <TP_Adjust+0x310>)
 8001b7a:	221f      	movs	r2, #31
 8001b7c:	801a      	strh	r2, [r3, #0]
	BACK_COLOR = WHITE;
 8001b7e:	4bbd      	ldr	r3, [pc, #756]	; (8001e74 <TP_Adjust+0x314>)
 8001b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b84:	801a      	strh	r2, [r3, #0]
	LCD_Clear(WHITE);  //清屏
 8001b86:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b8a:	f004 fdf7 	bl	800677c <LCD_Clear>
	POINT_COLOR = RED; //红色
 8001b8e:	4bb8      	ldr	r3, [pc, #736]	; (8001e70 <TP_Adjust+0x310>)
 8001b90:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001b94:	801a      	strh	r2, [r3, #0]
	LCD_Clear(WHITE);  //清屏
 8001b96:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b9a:	f004 fdef 	bl	800677c <LCD_Clear>
	POINT_COLOR = BLACK;
 8001b9e:	4bb4      	ldr	r3, [pc, #720]	; (8001e70 <TP_Adjust+0x310>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(40, 40, 160, 100, 16, (u8 *)TP_REMIND_MSG_TBL); //显示提示信息
 8001ba4:	4bb4      	ldr	r3, [pc, #720]	; (8001e78 <TP_Adjust+0x318>)
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	2310      	movs	r3, #16
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	2364      	movs	r3, #100	; 0x64
 8001bae:	22a0      	movs	r2, #160	; 0xa0
 8001bb0:	2128      	movs	r1, #40	; 0x28
 8001bb2:	2028      	movs	r0, #40	; 0x28
 8001bb4:	f005 f940 	bl	8006e38 <LCD_ShowString>
	TP_Drow_Touch_Point(20, 20, RED);							   //画点1
 8001bb8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001bbc:	2114      	movs	r1, #20
 8001bbe:	2014      	movs	r0, #20
 8001bc0:	f7ff fd50 	bl	8001664 <TP_Drow_Touch_Point>
	tp_dev.sta = 0;												   //消除触发信号
 8001bc4:	4bad      	ldr	r3, [pc, #692]	; (8001e7c <TP_Adjust+0x31c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac = 0;											   //xfac用来标记是否校准过,所以校准之前必须清掉!以免错误
 8001bcc:	4bab      	ldr	r3, [pc, #684]	; (8001e7c <TP_Adjust+0x31c>)
 8001bce:	f04f 0200 	mov.w	r2, #0
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24
	while (1)													   //如果连续10秒钟没有按下,则自动退出
	{
		tp_dev.scan(1);							 //扫描物理坐标
 8001bd4:	4ba9      	ldr	r3, [pc, #676]	; (8001e7c <TP_Adjust+0x31c>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2001      	movs	r0, #1
 8001bda:	4798      	blx	r3
		if ((tp_dev.sta & 0xc0) == TP_CATH_PRES) //按键按下了一次(此时按键松开了.)
 8001bdc:	4ba7      	ldr	r3, [pc, #668]	; (8001e7c <TP_Adjust+0x31c>)
 8001bde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001be6:	2b40      	cmp	r3, #64	; 0x40
 8001be8:	f040 83b9 	bne.w	800235e <TP_Adjust+0x7fe>
		{
			outtime = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	85bb      	strh	r3, [r7, #44]	; 0x2c
			tp_dev.sta &= ~(1 << 6); //标记按键已经被处理过了.
 8001bf0:	4ba2      	ldr	r3, [pc, #648]	; (8001e7c <TP_Adjust+0x31c>)
 8001bf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b9f      	ldr	r3, [pc, #636]	; (8001e7c <TP_Adjust+0x31c>)
 8001bfe:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0] = tp_dev.x[0];
 8001c02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c06:	4a9d      	ldr	r2, [pc, #628]	; (8001e7c <TP_Adjust+0x31c>)
 8001c08:	8992      	ldrh	r2, [r2, #12]
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001c10:	440b      	add	r3, r1
 8001c12:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1] = tp_dev.y[0];
 8001c16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c1a:	4a98      	ldr	r2, [pc, #608]	; (8001e7c <TP_Adjust+0x31c>)
 8001c1c:	8ad2      	ldrh	r2, [r2, #22]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001c24:	440b      	add	r3, r1
 8001c26:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8001c2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c2e:	3301      	adds	r3, #1
 8001c30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch (cnt)
 8001c34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	f200 8390 	bhi.w	8002360 <TP_Adjust+0x800>
 8001c40:	a201      	add	r2, pc, #4	; (adr r2, 8001c48 <TP_Adjust+0xe8>)
 8001c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c46:	bf00      	nop
 8001c48:	08001c59 	.word	0x08001c59
 8001c4c:	08001c7b 	.word	0x08001c7b
 8001c50:	08001ca5 	.word	0x08001ca5
 8001c54:	08001cd5 	.word	0x08001cd5
			{
			case 1:
				TP_Drow_Touch_Point(20, 20, WHITE);				 //清除点1
 8001c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5c:	2114      	movs	r1, #20
 8001c5e:	2014      	movs	r0, #20
 8001c60:	f7ff fd00 	bl	8001664 <TP_Drow_Touch_Point>
				TP_Drow_Touch_Point(lcddev.width - 20, 20, RED); //画点2
 8001c64:	4b86      	ldr	r3, [pc, #536]	; (8001e80 <TP_Adjust+0x320>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	3b14      	subs	r3, #20
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001c70:	2114      	movs	r1, #20
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fcf6 	bl	8001664 <TP_Drow_Touch_Point>
				break;
 8001c78:	e372      	b.n	8002360 <TP_Adjust+0x800>
			case 2:
				TP_Drow_Touch_Point(lcddev.width - 20, 20, WHITE); //清除点2
 8001c7a:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <TP_Adjust+0x320>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	3b14      	subs	r3, #20
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c86:	2114      	movs	r1, #20
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff fceb 	bl	8001664 <TP_Drow_Touch_Point>
				TP_Drow_Touch_Point(20, lcddev.height - 20, RED);  //画点3
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <TP_Adjust+0x320>)
 8001c90:	885b      	ldrh	r3, [r3, #2]
 8001c92:	3b14      	subs	r3, #20
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	2014      	movs	r0, #20
 8001c9e:	f7ff fce1 	bl	8001664 <TP_Drow_Touch_Point>
				break;
 8001ca2:	e35d      	b.n	8002360 <TP_Adjust+0x800>
			case 3:
				TP_Drow_Touch_Point(20, lcddev.height - 20, WHITE);				 //清除点3
 8001ca4:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <TP_Adjust+0x320>)
 8001ca6:	885b      	ldrh	r3, [r3, #2]
 8001ca8:	3b14      	subs	r3, #20
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	2014      	movs	r0, #20
 8001cb4:	f7ff fcd6 	bl	8001664 <TP_Drow_Touch_Point>
				TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, RED); //画点4
 8001cb8:	4b71      	ldr	r3, [pc, #452]	; (8001e80 <TP_Adjust+0x320>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	3b14      	subs	r3, #20
 8001cbe:	b298      	uxth	r0, r3
 8001cc0:	4b6f      	ldr	r3, [pc, #444]	; (8001e80 <TP_Adjust+0x320>)
 8001cc2:	885b      	ldrh	r3, [r3, #2]
 8001cc4:	3b14      	subs	r3, #20
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7ff fcc9 	bl	8001664 <TP_Drow_Touch_Point>
				break;
 8001cd2:	e345      	b.n	8002360 <TP_Adjust+0x800>
			case 4:											 //全部四个点已经得到
															 //对边相等
				tem1 = abs(pos_temp[0][0] - pos_temp[1][0]); //x1-x2
 8001cd4:	893b      	ldrh	r3, [r7, #8]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	89bb      	ldrh	r3, [r7, #12]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	bfb8      	it	lt
 8001ce0:	425b      	neglt	r3, r3
 8001ce2:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[0][1] - pos_temp[1][1]); //y1-y2
 8001ce4:	897b      	ldrh	r3, [r7, #10]
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	89fb      	ldrh	r3, [r7, #14]
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bfb8      	it	lt
 8001cf0:	425b      	neglt	r3, r3
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 8001cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf6:	fb03 f303 	mul.w	r3, r3, r3
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	fb03 f303 	mul.w	r3, r3, r3
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
				d1 = sqrt(tem1 + tem2); //得到1,2的距离
 8001d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d08:	4413      	add	r3, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7fe fb9e 	bl	800044c <__aeabi_ui2d>
 8001d10:	4602      	mov	r2, r0
 8001d12:	460b      	mov	r3, r1
 8001d14:	ec43 2b10 	vmov	d0, r2, r3
 8001d18:	f009 ffb6 	bl	800bc88 <sqrt>
 8001d1c:	ec53 2b10 	vmov	r2, r3, d0
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f7fe febc 	bl	8000aa0 <__aeabi_d2uiz>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	847b      	strh	r3, [r7, #34]	; 0x22

				tem1 = abs(pos_temp[2][0] - pos_temp[3][0]); //x3-x4
 8001d2c:	8a3b      	ldrh	r3, [r7, #16]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	8abb      	ldrh	r3, [r7, #20]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	bfb8      	it	lt
 8001d38:	425b      	neglt	r3, r3
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[2][1] - pos_temp[3][1]); //y3-y4
 8001d3c:	8a7b      	ldrh	r3, [r7, #18]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	8afb      	ldrh	r3, [r7, #22]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bfb8      	it	lt
 8001d48:	425b      	neglt	r3, r3
 8001d4a:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 8001d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d4e:	fb03 f303 	mul.w	r3, r3, r3
 8001d52:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 8001d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d56:	fb03 f303 	mul.w	r3, r3, r3
 8001d5a:	627b      	str	r3, [r7, #36]	; 0x24
				d2 = sqrt(tem1 + tem2); //得到3,4的距离
 8001d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	4413      	add	r3, r2
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fb72 	bl	800044c <__aeabi_ui2d>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	ec43 2b10 	vmov	d0, r2, r3
 8001d70:	f009 ff8a 	bl	800bc88 <sqrt>
 8001d74:	ec53 2b10 	vmov	r2, r3, d0
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f7fe fe90 	bl	8000aa0 <__aeabi_d2uiz>
 8001d80:	4603      	mov	r3, r0
 8001d82:	843b      	strh	r3, [r7, #32]
				fac = (float)d1 / d2;
 8001d84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d86:	ee07 3a90 	vmov	s15, r3
 8001d8a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d8e:	8c3b      	ldrh	r3, [r7, #32]
 8001d90:	ee07 3a90 	vmov	s15, r3
 8001d94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d98:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001d9c:	ee16 0a90 	vmov	r0, s13
 8001da0:	f7fe fb76 	bl	8000490 <__aeabi_f2d>
 8001da4:	4602      	mov	r2, r0
 8001da6:	460b      	mov	r3, r1
 8001da8:	e9c7 2306 	strd	r2, r3, [r7, #24]
				if (fac < 0.95 || fac > 1.05 || d1 == 0 || d2 == 0) //不合格
 8001dac:	a32c      	add	r3, pc, #176	; (adr r3, 8001e60 <TP_Adjust+0x300>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001db6:	f7fe fe35 	bl	8000a24 <__aeabi_dcmplt>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10f      	bne.n	8001de0 <TP_Adjust+0x280>
 8001dc0:	a329      	add	r3, pc, #164	; (adr r3, 8001e68 <TP_Adjust+0x308>)
 8001dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001dca:	f7fe fe49 	bl	8000a60 <__aeabi_dcmpgt>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d105      	bne.n	8001de0 <TP_Adjust+0x280>
 8001dd4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <TP_Adjust+0x280>
 8001dda:	8c3b      	ldrh	r3, [r7, #32]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d153      	bne.n	8001e88 <TP_Adjust+0x328>
				{
					cnt = 0;
 8001de0:	2300      	movs	r3, #0
 8001de2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE);																							 //清除点4
 8001de6:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <TP_Adjust+0x320>)
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	3b14      	subs	r3, #20
 8001dec:	b298      	uxth	r0, r3
 8001dee:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <TP_Adjust+0x320>)
 8001df0:	885b      	ldrh	r3, [r3, #2]
 8001df2:	3b14      	subs	r3, #20
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f7ff fc32 	bl	8001664 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20, 20, RED);																															 //画点1
 8001e00:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001e04:	2114      	movs	r1, #20
 8001e06:	2014      	movs	r0, #20
 8001e08:	f7ff fc2c 	bl	8001664 <TP_Drow_Touch_Point>
					TP_Adj_Info_Show(pos_temp[0][0], pos_temp[0][1], pos_temp[1][0], pos_temp[1][1], pos_temp[2][0], pos_temp[2][1], pos_temp[3][0], pos_temp[3][1], fac * 100); //显示数据
 8001e0c:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 8001e10:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 8001e14:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 8001e18:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 8001e1c:	8a3c      	ldrh	r4, [r7, #16]
 8001e1e:	8a7d      	ldrh	r5, [r7, #18]
 8001e20:	8abe      	ldrh	r6, [r7, #20]
 8001e22:	8afb      	ldrh	r3, [r7, #22]
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	4b16      	ldr	r3, [pc, #88]	; (8001e84 <TP_Adjust+0x324>)
 8001e2c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e30:	f7fe fb86 	bl	8000540 <__aeabi_dmul>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	f7fe fe30 	bl	8000aa0 <__aeabi_d2uiz>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	9304      	str	r3, [sp, #16]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	9303      	str	r3, [sp, #12]
 8001e4a:	9602      	str	r6, [sp, #8]
 8001e4c:	9501      	str	r5, [sp, #4]
 8001e4e:	9400      	str	r4, [sp, #0]
 8001e50:	465b      	mov	r3, fp
 8001e52:	4652      	mov	r2, sl
 8001e54:	4649      	mov	r1, r9
 8001e56:	4640      	mov	r0, r8
 8001e58:	f7ff fda0 	bl	800199c <TP_Adj_Info_Show>
					continue;
 8001e5c:	e28e      	b.n	800237c <TP_Adjust+0x81c>
 8001e5e:	bf00      	nop
 8001e60:	66666666 	.word	0x66666666
 8001e64:	3fee6666 	.word	0x3fee6666
 8001e68:	cccccccd 	.word	0xcccccccd
 8001e6c:	3ff0cccc 	.word	0x3ff0cccc
 8001e70:	200000da 	.word	0x200000da
 8001e74:	20000036 	.word	0x20000036
 8001e78:	0800be70 	.word	0x0800be70
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000118 	.word	0x20000118
 8001e84:	40590000 	.word	0x40590000
				}
				tem1 = abs(pos_temp[0][0] - pos_temp[2][0]); //x1-x3
 8001e88:	893b      	ldrh	r3, [r7, #8]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	8a3b      	ldrh	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	bfb8      	it	lt
 8001e94:	425b      	neglt	r3, r3
 8001e96:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[0][1] - pos_temp[2][1]); //y1-y3
 8001e98:	897b      	ldrh	r3, [r7, #10]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	8a7b      	ldrh	r3, [r7, #18]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bfb8      	it	lt
 8001ea4:	425b      	neglt	r3, r3
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 8001ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eaa:	fb03 f303 	mul.w	r3, r3, r3
 8001eae:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	fb03 f303 	mul.w	r3, r3, r3
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
				d1 = sqrt(tem1 + tem2); //得到1,3的距离
 8001eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	4413      	add	r3, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fac4 	bl	800044c <__aeabi_ui2d>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	ec43 2b10 	vmov	d0, r2, r3
 8001ecc:	f009 fedc 	bl	800bc88 <sqrt>
 8001ed0:	ec53 2b10 	vmov	r2, r3, d0
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f7fe fde2 	bl	8000aa0 <__aeabi_d2uiz>
 8001edc:	4603      	mov	r3, r0
 8001ede:	847b      	strh	r3, [r7, #34]	; 0x22

				tem1 = abs(pos_temp[1][0] - pos_temp[3][0]); //x2-x4
 8001ee0:	89bb      	ldrh	r3, [r7, #12]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	8abb      	ldrh	r3, [r7, #20]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bfb8      	it	lt
 8001eec:	425b      	neglt	r3, r3
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[1][1] - pos_temp[3][1]); //y2-y4
 8001ef0:	89fb      	ldrh	r3, [r7, #14]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	8afb      	ldrh	r3, [r7, #22]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	bfb8      	it	lt
 8001efc:	425b      	neglt	r3, r3
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 8001f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f02:	fb03 f303 	mul.w	r3, r3, r3
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	fb03 f303 	mul.w	r3, r3, r3
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
				d2 = sqrt(tem1 + tem2); //得到2,4的距离
 8001f10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	4413      	add	r3, r2
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fa98 	bl	800044c <__aeabi_ui2d>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	460b      	mov	r3, r1
 8001f20:	ec43 2b10 	vmov	d0, r2, r3
 8001f24:	f009 feb0 	bl	800bc88 <sqrt>
 8001f28:	ec53 2b10 	vmov	r2, r3, d0
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	4619      	mov	r1, r3
 8001f30:	f7fe fdb6 	bl	8000aa0 <__aeabi_d2uiz>
 8001f34:	4603      	mov	r3, r0
 8001f36:	843b      	strh	r3, [r7, #32]
				fac = (float)d1 / d2;
 8001f38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f42:	8c3b      	ldrh	r3, [r7, #32]
 8001f44:	ee07 3a90 	vmov	s15, r3
 8001f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001f50:	ee16 0a90 	vmov	r0, s13
 8001f54:	f7fe fa9c 	bl	8000490 <__aeabi_f2d>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	460b      	mov	r3, r1
 8001f5c:	e9c7 2306 	strd	r2, r3, [r7, #24]
				if (fac < 0.95 || fac > 1.05) //不合格
 8001f60:	a389      	add	r3, pc, #548	; (adr r3, 8002188 <TP_Adjust+0x628>)
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f6a:	f7fe fd5b 	bl	8000a24 <__aeabi_dcmplt>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d109      	bne.n	8001f88 <TP_Adjust+0x428>
 8001f74:	a386      	add	r3, pc, #536	; (adr r3, 8002190 <TP_Adjust+0x630>)
 8001f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f7e:	f7fe fd6f 	bl	8000a60 <__aeabi_dcmpgt>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d03e      	beq.n	8002006 <TP_Adjust+0x4a6>
				{
					cnt = 0;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE);																							 //清除点4
 8001f8e:	4b82      	ldr	r3, [pc, #520]	; (8002198 <TP_Adjust+0x638>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	3b14      	subs	r3, #20
 8001f94:	b298      	uxth	r0, r3
 8001f96:	4b80      	ldr	r3, [pc, #512]	; (8002198 <TP_Adjust+0x638>)
 8001f98:	885b      	ldrh	r3, [r3, #2]
 8001f9a:	3b14      	subs	r3, #20
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f7ff fb5e 	bl	8001664 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20, 20, RED);																															 //画点1
 8001fa8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001fac:	2114      	movs	r1, #20
 8001fae:	2014      	movs	r0, #20
 8001fb0:	f7ff fb58 	bl	8001664 <TP_Drow_Touch_Point>
					TP_Adj_Info_Show(pos_temp[0][0], pos_temp[0][1], pos_temp[1][0], pos_temp[1][1], pos_temp[2][0], pos_temp[2][1], pos_temp[3][0], pos_temp[3][1], fac * 100); //显示数据
 8001fb4:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 8001fb8:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 8001fbc:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 8001fc0:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 8001fc4:	8a3c      	ldrh	r4, [r7, #16]
 8001fc6:	8a7d      	ldrh	r5, [r7, #18]
 8001fc8:	8abe      	ldrh	r6, [r7, #20]
 8001fca:	8afb      	ldrh	r3, [r7, #22]
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	4b72      	ldr	r3, [pc, #456]	; (800219c <TP_Adjust+0x63c>)
 8001fd4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fd8:	f7fe fab2 	bl	8000540 <__aeabi_dmul>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	460b      	mov	r3, r1
 8001fe0:	4610      	mov	r0, r2
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f7fe fd5c 	bl	8000aa0 <__aeabi_d2uiz>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	9304      	str	r3, [sp, #16]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	9303      	str	r3, [sp, #12]
 8001ff2:	9602      	str	r6, [sp, #8]
 8001ff4:	9501      	str	r5, [sp, #4]
 8001ff6:	9400      	str	r4, [sp, #0]
 8001ff8:	465b      	mov	r3, fp
 8001ffa:	4652      	mov	r2, sl
 8001ffc:	4649      	mov	r1, r9
 8001ffe:	4640      	mov	r0, r8
 8002000:	f7ff fccc 	bl	800199c <TP_Adj_Info_Show>
					continue;
 8002004:	e1ba      	b.n	800237c <TP_Adjust+0x81c>
				} //正确了

				//对角线相等
				tem1 = abs(pos_temp[1][0] - pos_temp[2][0]); //x1-x3
 8002006:	89bb      	ldrh	r3, [r7, #12]
 8002008:	461a      	mov	r2, r3
 800200a:	8a3b      	ldrh	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	bfb8      	it	lt
 8002012:	425b      	neglt	r3, r3
 8002014:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[1][1] - pos_temp[2][1]); //y1-y3
 8002016:	89fb      	ldrh	r3, [r7, #14]
 8002018:	461a      	mov	r2, r3
 800201a:	8a7b      	ldrh	r3, [r7, #18]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	bfb8      	it	lt
 8002022:	425b      	neglt	r3, r3
 8002024:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 8002026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002028:	fb03 f303 	mul.w	r3, r3, r3
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	fb03 f303 	mul.w	r3, r3, r3
 8002034:	627b      	str	r3, [r7, #36]	; 0x24
				d1 = sqrt(tem1 + tem2); //得到1,4的距离
 8002036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203a:	4413      	add	r3, r2
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fa05 	bl	800044c <__aeabi_ui2d>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	ec43 2b10 	vmov	d0, r2, r3
 800204a:	f009 fe1d 	bl	800bc88 <sqrt>
 800204e:	ec53 2b10 	vmov	r2, r3, d0
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f7fe fd23 	bl	8000aa0 <__aeabi_d2uiz>
 800205a:	4603      	mov	r3, r0
 800205c:	847b      	strh	r3, [r7, #34]	; 0x22

				tem1 = abs(pos_temp[0][0] - pos_temp[3][0]); //x2-x4
 800205e:	893b      	ldrh	r3, [r7, #8]
 8002060:	461a      	mov	r2, r3
 8002062:	8abb      	ldrh	r3, [r7, #20]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	bfb8      	it	lt
 800206a:	425b      	neglt	r3, r3
 800206c:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[0][1] - pos_temp[3][1]); //y2-y4
 800206e:	897b      	ldrh	r3, [r7, #10]
 8002070:	461a      	mov	r2, r3
 8002072:	8afb      	ldrh	r3, [r7, #22]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b00      	cmp	r3, #0
 8002078:	bfb8      	it	lt
 800207a:	425b      	neglt	r3, r3
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 800207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002080:	fb03 f303 	mul.w	r3, r3, r3
 8002084:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	fb03 f303 	mul.w	r3, r3, r3
 800208c:	627b      	str	r3, [r7, #36]	; 0x24
				d2 = sqrt(tem1 + tem2); //得到2,3的距离
 800208e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	4413      	add	r3, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7fe f9d9 	bl	800044c <__aeabi_ui2d>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	ec43 2b10 	vmov	d0, r2, r3
 80020a2:	f009 fdf1 	bl	800bc88 <sqrt>
 80020a6:	ec53 2b10 	vmov	r2, r3, d0
 80020aa:	4610      	mov	r0, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7fe fcf7 	bl	8000aa0 <__aeabi_d2uiz>
 80020b2:	4603      	mov	r3, r0
 80020b4:	843b      	strh	r3, [r7, #32]
				fac = (float)d1 / d2;
 80020b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80020b8:	ee07 3a90 	vmov	s15, r3
 80020bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020c0:	8c3b      	ldrh	r3, [r7, #32]
 80020c2:	ee07 3a90 	vmov	s15, r3
 80020c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80020ce:	ee16 0a90 	vmov	r0, s13
 80020d2:	f7fe f9dd 	bl	8000490 <__aeabi_f2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	e9c7 2306 	strd	r2, r3, [r7, #24]
				if (fac < 0.95 || fac > 1.05) //不合格
 80020de:	a32a      	add	r3, pc, #168	; (adr r3, 8002188 <TP_Adjust+0x628>)
 80020e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020e8:	f7fe fc9c 	bl	8000a24 <__aeabi_dcmplt>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d109      	bne.n	8002106 <TP_Adjust+0x5a6>
 80020f2:	a327      	add	r3, pc, #156	; (adr r3, 8002190 <TP_Adjust+0x630>)
 80020f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80020fc:	f7fe fcb0 	bl	8000a60 <__aeabi_dcmpgt>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d04c      	beq.n	80021a0 <TP_Adjust+0x640>
				{
					cnt = 0;
 8002106:	2300      	movs	r3, #0
 8002108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE);																							 //清除点4
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <TP_Adjust+0x638>)
 800210e:	881b      	ldrh	r3, [r3, #0]
 8002110:	3b14      	subs	r3, #20
 8002112:	b298      	uxth	r0, r3
 8002114:	4b20      	ldr	r3, [pc, #128]	; (8002198 <TP_Adjust+0x638>)
 8002116:	885b      	ldrh	r3, [r3, #2]
 8002118:	3b14      	subs	r3, #20
 800211a:	b29b      	uxth	r3, r3
 800211c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002120:	4619      	mov	r1, r3
 8002122:	f7ff fa9f 	bl	8001664 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20, 20, RED);																															 //画点1
 8002126:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800212a:	2114      	movs	r1, #20
 800212c:	2014      	movs	r0, #20
 800212e:	f7ff fa99 	bl	8001664 <TP_Drow_Touch_Point>
					TP_Adj_Info_Show(pos_temp[0][0], pos_temp[0][1], pos_temp[1][0], pos_temp[1][1], pos_temp[2][0], pos_temp[2][1], pos_temp[3][0], pos_temp[3][1], fac * 100); //显示数据
 8002132:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 8002136:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 800213a:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 800213e:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 8002142:	8a3c      	ldrh	r4, [r7, #16]
 8002144:	8a7d      	ldrh	r5, [r7, #18]
 8002146:	8abe      	ldrh	r6, [r7, #20]
 8002148:	8afb      	ldrh	r3, [r7, #22]
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	f04f 0200 	mov.w	r2, #0
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <TP_Adjust+0x63c>)
 8002152:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002156:	f7fe f9f3 	bl	8000540 <__aeabi_dmul>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4610      	mov	r0, r2
 8002160:	4619      	mov	r1, r3
 8002162:	f7fe fc9d 	bl	8000aa0 <__aeabi_d2uiz>
 8002166:	4603      	mov	r3, r0
 8002168:	b29b      	uxth	r3, r3
 800216a:	9304      	str	r3, [sp, #16]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	9303      	str	r3, [sp, #12]
 8002170:	9602      	str	r6, [sp, #8]
 8002172:	9501      	str	r5, [sp, #4]
 8002174:	9400      	str	r4, [sp, #0]
 8002176:	465b      	mov	r3, fp
 8002178:	4652      	mov	r2, sl
 800217a:	4649      	mov	r1, r9
 800217c:	4640      	mov	r0, r8
 800217e:	f7ff fc0d 	bl	800199c <TP_Adj_Info_Show>
					continue;
 8002182:	e0fb      	b.n	800237c <TP_Adjust+0x81c>
 8002184:	f3af 8000 	nop.w
 8002188:	66666666 	.word	0x66666666
 800218c:	3fee6666 	.word	0x3fee6666
 8002190:	cccccccd 	.word	0xcccccccd
 8002194:	3ff0cccc 	.word	0x3ff0cccc
 8002198:	20000118 	.word	0x20000118
 800219c:	40590000 	.word	0x40590000
				} //正确了
				//计算结果
				tp_dev.xfac = (float)(lcddev.width - 40) / (pos_temp[1][0] - pos_temp[0][0]);		//得到xfac
 80021a0:	4b79      	ldr	r3, [pc, #484]	; (8002388 <TP_Adjust+0x828>)
 80021a2:	881b      	ldrh	r3, [r3, #0]
 80021a4:	3b28      	subs	r3, #40	; 0x28
 80021a6:	ee07 3a90 	vmov	s15, r3
 80021aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021ae:	89bb      	ldrh	r3, [r7, #12]
 80021b0:	461a      	mov	r2, r3
 80021b2:	893b      	ldrh	r3, [r7, #8]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	ee07 3a90 	vmov	s15, r3
 80021ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021c2:	4b72      	ldr	r3, [pc, #456]	; (800238c <TP_Adjust+0x82c>)
 80021c4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				tp_dev.xoff = (lcddev.width - tp_dev.xfac * (pos_temp[1][0] + pos_temp[0][0])) / 2; //得到xoff
 80021c8:	4b6f      	ldr	r3, [pc, #444]	; (8002388 <TP_Adjust+0x828>)
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	ee07 3a90 	vmov	s15, r3
 80021d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021d4:	4b6d      	ldr	r3, [pc, #436]	; (800238c <TP_Adjust+0x82c>)
 80021d6:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 80021da:	89bb      	ldrh	r3, [r7, #12]
 80021dc:	461a      	mov	r2, r3
 80021de:	893b      	ldrh	r3, [r7, #8]
 80021e0:	4413      	add	r3, r2
 80021e2:	ee07 3a90 	vmov	s15, r3
 80021e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80021f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80021f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80021fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021fe:	ee17 3a90 	vmov	r3, s15
 8002202:	b21a      	sxth	r2, r3
 8002204:	4b61      	ldr	r3, [pc, #388]	; (800238c <TP_Adjust+0x82c>)
 8002206:	859a      	strh	r2, [r3, #44]	; 0x2c

				tp_dev.yfac = (float)(lcddev.height - 40) / (pos_temp[2][1] - pos_temp[0][1]);		 //得到yfac
 8002208:	4b5f      	ldr	r3, [pc, #380]	; (8002388 <TP_Adjust+0x828>)
 800220a:	885b      	ldrh	r3, [r3, #2]
 800220c:	3b28      	subs	r3, #40	; 0x28
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002216:	8a7b      	ldrh	r3, [r7, #18]
 8002218:	461a      	mov	r2, r3
 800221a:	897b      	ldrh	r3, [r7, #10]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	ee07 3a90 	vmov	s15, r3
 8002222:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800222a:	4b58      	ldr	r3, [pc, #352]	; (800238c <TP_Adjust+0x82c>)
 800222c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				tp_dev.yoff = (lcddev.height - tp_dev.yfac * (pos_temp[2][1] + pos_temp[0][1])) / 2; //得到yoff
 8002230:	4b55      	ldr	r3, [pc, #340]	; (8002388 <TP_Adjust+0x828>)
 8002232:	885b      	ldrh	r3, [r3, #2]
 8002234:	ee07 3a90 	vmov	s15, r3
 8002238:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800223c:	4b53      	ldr	r3, [pc, #332]	; (800238c <TP_Adjust+0x82c>)
 800223e:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8002242:	8a7b      	ldrh	r3, [r7, #18]
 8002244:	461a      	mov	r2, r3
 8002246:	897b      	ldrh	r3, [r7, #10]
 8002248:	4413      	add	r3, r2
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002256:	ee37 7a67 	vsub.f32	s14, s14, s15
 800225a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800225e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002262:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002266:	ee17 3a90 	vmov	r3, s15
 800226a:	b21a      	sxth	r2, r3
 800226c:	4b47      	ldr	r3, [pc, #284]	; (800238c <TP_Adjust+0x82c>)
 800226e:	85da      	strh	r2, [r3, #46]	; 0x2e
				if (abs(tp_dev.xfac) > 2 || abs(tp_dev.yfac) > 2)									 //触屏和预设的相反了.
 8002270:	4b46      	ldr	r3, [pc, #280]	; (800238c <TP_Adjust+0x82c>)
 8002272:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002276:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800227a:	ee17 3a90 	vmov	r3, s15
 800227e:	2b00      	cmp	r3, #0
 8002280:	bfb8      	it	lt
 8002282:	425b      	neglt	r3, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	dc0b      	bgt.n	80022a0 <TP_Adjust+0x740>
 8002288:	4b40      	ldr	r3, [pc, #256]	; (800238c <TP_Adjust+0x82c>)
 800228a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800228e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002292:	ee17 3a90 	vmov	r3, s15
 8002296:	2b00      	cmp	r3, #0
 8002298:	bfb8      	it	lt
 800229a:	425b      	neglt	r3, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	dd40      	ble.n	8002322 <TP_Adjust+0x7c2>
				{
					cnt = 0;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE); //清除点4
 80022a6:	4b38      	ldr	r3, [pc, #224]	; (8002388 <TP_Adjust+0x828>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	3b14      	subs	r3, #20
 80022ac:	b298      	uxth	r0, r3
 80022ae:	4b36      	ldr	r3, [pc, #216]	; (8002388 <TP_Adjust+0x828>)
 80022b0:	885b      	ldrh	r3, [r3, #2]
 80022b2:	3b14      	subs	r3, #20
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ba:	4619      	mov	r1, r3
 80022bc:	f7ff f9d2 	bl	8001664 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20, 20, RED);								   //画点1
 80022c0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80022c4:	2114      	movs	r1, #20
 80022c6:	2014      	movs	r0, #20
 80022c8:	f7ff f9cc 	bl	8001664 <TP_Drow_Touch_Point>
					LCD_ShowString(40, 26, lcddev.width, lcddev.height, 16, "TP Need readjust!");
 80022cc:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <TP_Adjust+0x828>)
 80022ce:	881a      	ldrh	r2, [r3, #0]
 80022d0:	4b2d      	ldr	r3, [pc, #180]	; (8002388 <TP_Adjust+0x828>)
 80022d2:	885b      	ldrh	r3, [r3, #2]
 80022d4:	492e      	ldr	r1, [pc, #184]	; (8002390 <TP_Adjust+0x830>)
 80022d6:	9101      	str	r1, [sp, #4]
 80022d8:	2110      	movs	r1, #16
 80022da:	9100      	str	r1, [sp, #0]
 80022dc:	211a      	movs	r1, #26
 80022de:	2028      	movs	r0, #40	; 0x28
 80022e0:	f004 fdaa 	bl	8006e38 <LCD_ShowString>
					tp_dev.touchtype = !tp_dev.touchtype; //修改触屏类型.
 80022e4:	4b29      	ldr	r3, [pc, #164]	; (800238c <TP_Adjust+0x82c>)
 80022e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	bf0c      	ite	eq
 80022ee:	2301      	moveq	r3, #1
 80022f0:	2300      	movne	r3, #0
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b25      	ldr	r3, [pc, #148]	; (800238c <TP_Adjust+0x82c>)
 80022f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					if (tp_dev.touchtype)				  //X,Y方向与屏幕相反
 80022fc:	4b23      	ldr	r3, [pc, #140]	; (800238c <TP_Adjust+0x82c>)
 80022fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002302:	2b00      	cmp	r3, #0
 8002304:	d006      	beq.n	8002314 <TP_Adjust+0x7b4>
					{
						CMD_RDX = 0X90;
 8002306:	4b23      	ldr	r3, [pc, #140]	; (8002394 <TP_Adjust+0x834>)
 8002308:	2290      	movs	r2, #144	; 0x90
 800230a:	701a      	strb	r2, [r3, #0]
						CMD_RDY = 0XD0;
 800230c:	4b22      	ldr	r3, [pc, #136]	; (8002398 <TP_Adjust+0x838>)
 800230e:	22d0      	movs	r2, #208	; 0xd0
 8002310:	701a      	strb	r2, [r3, #0]
					else //X,Y方向与屏幕相同
					{
						CMD_RDX = 0XD0;
						CMD_RDY = 0X90;
					}
					continue;
 8002312:	e033      	b.n	800237c <TP_Adjust+0x81c>
						CMD_RDX = 0XD0;
 8002314:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <TP_Adjust+0x834>)
 8002316:	22d0      	movs	r2, #208	; 0xd0
 8002318:	701a      	strb	r2, [r3, #0]
						CMD_RDY = 0X90;
 800231a:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <TP_Adjust+0x838>)
 800231c:	2290      	movs	r2, #144	; 0x90
 800231e:	701a      	strb	r2, [r3, #0]
					continue;
 8002320:	e02c      	b.n	800237c <TP_Adjust+0x81c>
				}
				POINT_COLOR = BLUE;
 8002322:	4b1e      	ldr	r3, [pc, #120]	; (800239c <TP_Adjust+0x83c>)
 8002324:	221f      	movs	r2, #31
 8002326:	801a      	strh	r2, [r3, #0]
				LCD_Clear(WHITE);																	 //清屏
 8002328:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800232c:	f004 fa26 	bl	800677c <LCD_Clear>
				LCD_ShowString(35, 110, lcddev.width, lcddev.height, 16, "Touch Screen Adjust OK!"); //校正完成
 8002330:	4b15      	ldr	r3, [pc, #84]	; (8002388 <TP_Adjust+0x828>)
 8002332:	881a      	ldrh	r2, [r3, #0]
 8002334:	4b14      	ldr	r3, [pc, #80]	; (8002388 <TP_Adjust+0x828>)
 8002336:	885b      	ldrh	r3, [r3, #2]
 8002338:	4919      	ldr	r1, [pc, #100]	; (80023a0 <TP_Adjust+0x840>)
 800233a:	9101      	str	r1, [sp, #4]
 800233c:	2110      	movs	r1, #16
 800233e:	9100      	str	r1, [sp, #0]
 8002340:	216e      	movs	r1, #110	; 0x6e
 8002342:	2023      	movs	r0, #35	; 0x23
 8002344:	f004 fd78 	bl	8006e38 <LCD_ShowString>
				//delay_ms(1000);
				HAL_Delay(1000);
 8002348:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800234c:	f006 fdfa 	bl	8008f44 <HAL_Delay>
				TP_Save_Adjdata();
 8002350:	f7ff fa6e 	bl	8001830 <TP_Save_Adjdata>
				LCD_Clear(WHITE); //清屏
 8002354:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002358:	f004 fa10 	bl	800677c <LCD_Clear>
 800235c:	e00f      	b.n	800237e <TP_Adjust+0x81e>
				return;			  //校正完成
			}
		}
 800235e:	bf00      	nop
		//delay_ms(10);
		HAL_Delay(10);
 8002360:	200a      	movs	r0, #10
 8002362:	f006 fdef 	bl	8008f44 <HAL_Delay>
		outtime++;
 8002366:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002368:	3301      	adds	r3, #1
 800236a:	85bb      	strh	r3, [r7, #44]	; 0x2c
		if (outtime > 1000)
 800236c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800236e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002372:	f67f ac2f 	bls.w	8001bd4 <TP_Adjust+0x74>
		{
			TP_Get_Adjdata();
 8002376:	f7ff faa9 	bl	80018cc <TP_Get_Adjdata>
			break;
 800237a:	e000      	b.n	800237e <TP_Adjust+0x81e>
		tp_dev.scan(1);							 //扫描物理坐标
 800237c:	e42a      	b.n	8001bd4 <TP_Adjust+0x74>
		}
	}
}
 800237e:	3734      	adds	r7, #52	; 0x34
 8002380:	46bd      	mov	sp, r7
 8002382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002386:	bf00      	nop
 8002388:	20000118 	.word	0x20000118
 800238c:	20000000 	.word	0x20000000
 8002390:	0800bf14 	.word	0x0800bf14
 8002394:	20000034 	.word	0x20000034
 8002398:	20000035 	.word	0x20000035
 800239c:	200000da 	.word	0x200000da
 80023a0:	0800bf28 	.word	0x0800bf28

080023a4 <TP_Init>:
//触摸屏初始化
//返回值:0,没有进行校准
//       1,进行过校准
u8 TP_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0

	// GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;	  //PF11设置推挽输出
	// GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; //输出模式
	// GPIO_Init(GPIOF, &GPIO_InitStructure);		  //初始化

	TP_Read_XY(&tp_dev.x[0], &tp_dev.y[0]); //第一次读取初始化
 80023a8:	490c      	ldr	r1, [pc, #48]	; (80023dc <TP_Init+0x38>)
 80023aa:	480d      	ldr	r0, [pc, #52]	; (80023e0 <TP_Init+0x3c>)
 80023ac:	f7ff f8d6 	bl	800155c <TP_Read_XY>
	AT24CXX_Init();							//初始化24CXX
 80023b0:	f7fe ff12 	bl	80011d8 <AT24CXX_Init>
	if (TP_Get_Adjdata())
 80023b4:	f7ff fa8a 	bl	80018cc <TP_Get_Adjdata>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <TP_Init+0x1e>
		return 0; //已经校准
 80023be:	2300      	movs	r3, #0
 80023c0:	e00a      	b.n	80023d8 <TP_Init+0x34>
	else		  //未校准?
	{
		LCD_Clear(WHITE); //清屏
 80023c2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023c6:	f004 f9d9 	bl	800677c <LCD_Clear>
		TP_Adjust();	  //屏幕校准
 80023ca:	f7ff fbc9 	bl	8001b60 <TP_Adjust>
		TP_Save_Adjdata();
 80023ce:	f7ff fa2f 	bl	8001830 <TP_Save_Adjdata>
	}
	TP_Get_Adjdata();
 80023d2:	f7ff fa7b 	bl	80018cc <TP_Get_Adjdata>
	// }
	return 1;
 80023d6:	2301      	movs	r3, #1
}
 80023d8:	4618      	mov	r0, r3
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	20000016 	.word	0x20000016
 80023e0:	2000000c 	.word	0x2000000c

080023e4 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;
//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(__IO uint16_t regval)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	4603      	mov	r3, r0
 80023ec:	80fb      	strh	r3, [r7, #6]
	regval=regval;		//使用-O2优化的时候,必须插入的延时
 80023ee:	88fb      	ldrh	r3, [r7, #6]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=regval;//写入要写的寄存器序号
 80023f4:	4b04      	ldr	r3, [pc, #16]	; (8002408 <LCD_WR_REG+0x24>)
 80023f6:	88fa      	ldrh	r2, [r7, #6]
 80023f8:	b292      	uxth	r2, r2
 80023fa:	801a      	strh	r2, [r3, #0]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	6c00007e 	.word	0x6c00007e

0800240c <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(__IO uint16_t data)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	80fb      	strh	r3, [r7, #6]
	data=data;			//使用-O2优化的时候,必须插入的延时
 8002416:	88fb      	ldrh	r3, [r7, #6]
 8002418:	b29b      	uxth	r3, r3
 800241a:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 800241c:	4b04      	ldr	r3, [pc, #16]	; (8002430 <LCD_WR_DATA+0x24>)
 800241e:	88fa      	ldrh	r2, [r7, #6]
 8002420:	b292      	uxth	r2, r2
 8002422:	805a      	strh	r2, [r3, #2]
}
 8002424:	bf00      	nop
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	6c00007e 	.word	0x6c00007e

08002434 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//防止被优化
	ram=LCD->LCD_RAM;
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <LCD_RD_DATA+0x20>)
 800243c:	885b      	ldrh	r3, [r3, #2]
 800243e:	b29b      	uxth	r3, r3
 8002440:	80fb      	strh	r3, [r7, #6]
	return ram;
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	b29b      	uxth	r3, r3
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	6c00007e 	.word	0x6c00007e

08002458 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	460a      	mov	r2, r1
 8002462:	80fb      	strh	r3, [r7, #6]
 8002464:	4613      	mov	r3, r2
 8002466:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 8002468:	4a05      	ldr	r2, [pc, #20]	; (8002480 <LCD_WriteReg+0x28>)
 800246a:	88fb      	ldrh	r3, [r7, #6]
 800246c:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = LCD_RegValue;//写入数据
 800246e:	4a04      	ldr	r2, [pc, #16]	; (8002480 <LCD_WriteReg+0x28>)
 8002470:	88bb      	ldrh	r3, [r7, #4]
 8002472:	8053      	strh	r3, [r2, #2]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	6c00007e 	.word	0x6c00007e

08002484 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器地址
//返回值:读到的数据
uint16_t LCD_ReadReg(uint16_t LCD_Reg)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);		//写入要读的寄存器序号
 800248e:	88fb      	ldrh	r3, [r7, #6]
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff ffa7 	bl	80023e4 <LCD_WR_REG>
	delay_us(5);
 8002496:	2005      	movs	r0, #5
 8002498:	f7fe fcee 	bl	8000e78 <delay_us>

	return LCD_RD_DATA();		//返回读到的值
 800249c:	f7ff ffca 	bl	8002434 <LCD_RD_DATA>
 80024a0:	4603      	mov	r3, r0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
	...

080024ac <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
 	LCD->LCD_REG=lcddev.wramcmd;
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <LCD_WriteRAM_Prepare+0x18>)
 80024b2:	4a05      	ldr	r2, [pc, #20]	; (80024c8 <LCD_WriteRAM_Prepare+0x1c>)
 80024b4:	8912      	ldrh	r2, [r2, #8]
 80024b6:	801a      	strh	r2, [r3, #0]
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	6c00007e 	.word	0x6c00007e
 80024c8:	20000118 	.word	0x20000118

080024cc <LCD_SetCursor>:
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	460a      	mov	r2, r1
 80024d6:	80fb      	strh	r3, [r7, #6]
 80024d8:	4613      	mov	r3, r2
 80024da:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 80024dc:	4b92      	ldr	r3, [pc, #584]	; (8002728 <LCD_SetCursor+0x25c>)
 80024de:	889b      	ldrh	r3, [r3, #4]
 80024e0:	f249 3241 	movw	r2, #37697	; 0x9341
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d005      	beq.n	80024f4 <LCD_SetCursor+0x28>
 80024e8:	4b8f      	ldr	r3, [pc, #572]	; (8002728 <LCD_SetCursor+0x25c>)
 80024ea:	889b      	ldrh	r3, [r3, #4]
 80024ec:	f245 3210 	movw	r2, #21264	; 0x5310
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d122      	bne.n	800253a <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 80024f4:	4b8c      	ldr	r3, [pc, #560]	; (8002728 <LCD_SetCursor+0x25c>)
 80024f6:	895b      	ldrh	r3, [r3, #10]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff73 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80024fe:	88fb      	ldrh	r3, [r7, #6]
 8002500:	0a1b      	lsrs	r3, r3, #8
 8002502:	b29b      	uxth	r3, r3
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ff81 	bl	800240c <LCD_WR_DATA>
 800250a:	88fb      	ldrh	r3, [r7, #6]
 800250c:	b2db      	uxtb	r3, r3
 800250e:	b29b      	uxth	r3, r3
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff7b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8002516:	4b84      	ldr	r3, [pc, #528]	; (8002728 <LCD_SetCursor+0x25c>)
 8002518:	899b      	ldrh	r3, [r3, #12]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff ff62 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8002520:	88bb      	ldrh	r3, [r7, #4]
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	b29b      	uxth	r3, r3
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff ff70 	bl	800240c <LCD_WR_DATA>
 800252c:	88bb      	ldrh	r3, [r7, #4]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	b29b      	uxth	r3, r3
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ff6a 	bl	800240c <LCD_WR_DATA>
	{
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 8002538:	e0f1      	b.n	800271e <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X6804)
 800253a:	4b7b      	ldr	r3, [pc, #492]	; (8002728 <LCD_SetCursor+0x25c>)
 800253c:	889b      	ldrh	r3, [r3, #4]
 800253e:	f646 0204 	movw	r2, #26628	; 0x6804
 8002542:	4293      	cmp	r3, r2
 8002544:	d12d      	bne.n	80025a2 <LCD_SetCursor+0xd6>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏时处理
 8002546:	4b78      	ldr	r3, [pc, #480]	; (8002728 <LCD_SetCursor+0x25c>)
 8002548:	799b      	ldrb	r3, [r3, #6]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d106      	bne.n	800255c <LCD_SetCursor+0x90>
 800254e:	4b76      	ldr	r3, [pc, #472]	; (8002728 <LCD_SetCursor+0x25c>)
 8002550:	881a      	ldrh	r2, [r3, #0]
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	b29b      	uxth	r3, r3
 8002558:	3b01      	subs	r3, #1
 800255a:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 800255c:	4b72      	ldr	r3, [pc, #456]	; (8002728 <LCD_SetCursor+0x25c>)
 800255e:	895b      	ldrh	r3, [r3, #10]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff3f 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8002566:	88fb      	ldrh	r3, [r7, #6]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	b29b      	uxth	r3, r3
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff4d 	bl	800240c <LCD_WR_DATA>
 8002572:	88fb      	ldrh	r3, [r7, #6]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	b29b      	uxth	r3, r3
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff47 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800257e:	4b6a      	ldr	r3, [pc, #424]	; (8002728 <LCD_SetCursor+0x25c>)
 8002580:	899b      	ldrh	r3, [r3, #12]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ff2e 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8002588:	88bb      	ldrh	r3, [r7, #4]
 800258a:	0a1b      	lsrs	r3, r3, #8
 800258c:	b29b      	uxth	r3, r3
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff ff3c 	bl	800240c <LCD_WR_DATA>
 8002594:	88bb      	ldrh	r3, [r7, #4]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	b29b      	uxth	r3, r3
 800259a:	4618      	mov	r0, r3
 800259c:	f7ff ff36 	bl	800240c <LCD_WR_DATA>
}
 80025a0:	e0bd      	b.n	800271e <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X1963)
 80025a2:	4b61      	ldr	r3, [pc, #388]	; (8002728 <LCD_SetCursor+0x25c>)
 80025a4:	889b      	ldrh	r3, [r3, #4]
 80025a6:	f641 1263 	movw	r2, #6499	; 0x1963
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d167      	bne.n	800267e <LCD_SetCursor+0x1b2>
		if(lcddev.dir==0)//x坐标需要变换
 80025ae:	4b5e      	ldr	r3, [pc, #376]	; (8002728 <LCD_SetCursor+0x25c>)
 80025b0:	799b      	ldrb	r3, [r3, #6]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d11e      	bne.n	80025f4 <LCD_SetCursor+0x128>
			Xpos=lcddev.width-1-Xpos;
 80025b6:	4b5c      	ldr	r3, [pc, #368]	; (8002728 <LCD_SetCursor+0x25c>)
 80025b8:	881a      	ldrh	r2, [r3, #0]
 80025ba:	88fb      	ldrh	r3, [r7, #6]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	b29b      	uxth	r3, r3
 80025c0:	3b01      	subs	r3, #1
 80025c2:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 80025c4:	4b58      	ldr	r3, [pc, #352]	; (8002728 <LCD_SetCursor+0x25c>)
 80025c6:	895b      	ldrh	r3, [r3, #10]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff0b 	bl	80023e4 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80025ce:	2000      	movs	r0, #0
 80025d0:	f7ff ff1c 	bl	800240c <LCD_WR_DATA>
 80025d4:	2000      	movs	r0, #0
 80025d6:	f7ff ff19 	bl	800240c <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80025da:	88fb      	ldrh	r3, [r7, #6]
 80025dc:	0a1b      	lsrs	r3, r3, #8
 80025de:	b29b      	uxth	r3, r3
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff13 	bl	800240c <LCD_WR_DATA>
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff0d 	bl	800240c <LCD_WR_DATA>
 80025f2:	e021      	b.n	8002638 <LCD_SetCursor+0x16c>
			LCD_WR_REG(lcddev.setxcmd);
 80025f4:	4b4c      	ldr	r3, [pc, #304]	; (8002728 <LCD_SetCursor+0x25c>)
 80025f6:	895b      	ldrh	r3, [r3, #10]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f7ff fef3 	bl	80023e4 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	0a1b      	lsrs	r3, r3, #8
 8002602:	b29b      	uxth	r3, r3
 8002604:	4618      	mov	r0, r3
 8002606:	f7ff ff01 	bl	800240c <LCD_WR_DATA>
 800260a:	88fb      	ldrh	r3, [r7, #6]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	b29b      	uxth	r3, r3
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fefb 	bl	800240c <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8002616:	4b44      	ldr	r3, [pc, #272]	; (8002728 <LCD_SetCursor+0x25c>)
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	3b01      	subs	r3, #1
 800261c:	121b      	asrs	r3, r3, #8
 800261e:	b29b      	uxth	r3, r3
 8002620:	4618      	mov	r0, r3
 8002622:	f7ff fef3 	bl	800240c <LCD_WR_DATA>
 8002626:	4b40      	ldr	r3, [pc, #256]	; (8002728 <LCD_SetCursor+0x25c>)
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	3b01      	subs	r3, #1
 800262c:	b29b      	uxth	r3, r3
 800262e:	b2db      	uxtb	r3, r3
 8002630:	b29b      	uxth	r3, r3
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff feea 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8002638:	4b3b      	ldr	r3, [pc, #236]	; (8002728 <LCD_SetCursor+0x25c>)
 800263a:	899b      	ldrh	r3, [r3, #12]
 800263c:	4618      	mov	r0, r3
 800263e:	f7ff fed1 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8002642:	88bb      	ldrh	r3, [r7, #4]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	b29b      	uxth	r3, r3
 8002648:	4618      	mov	r0, r3
 800264a:	f7ff fedf 	bl	800240c <LCD_WR_DATA>
 800264e:	88bb      	ldrh	r3, [r7, #4]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	b29b      	uxth	r3, r3
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff fed9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 800265a:	4b33      	ldr	r3, [pc, #204]	; (8002728 <LCD_SetCursor+0x25c>)
 800265c:	885b      	ldrh	r3, [r3, #2]
 800265e:	3b01      	subs	r3, #1
 8002660:	121b      	asrs	r3, r3, #8
 8002662:	b29b      	uxth	r3, r3
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff fed1 	bl	800240c <LCD_WR_DATA>
 800266a:	4b2f      	ldr	r3, [pc, #188]	; (8002728 <LCD_SetCursor+0x25c>)
 800266c:	885b      	ldrh	r3, [r3, #2]
 800266e:	3b01      	subs	r3, #1
 8002670:	b29b      	uxth	r3, r3
 8002672:	b2db      	uxtb	r3, r3
 8002674:	b29b      	uxth	r3, r3
 8002676:	4618      	mov	r0, r3
 8002678:	f7ff fec8 	bl	800240c <LCD_WR_DATA>
}
 800267c:	e04f      	b.n	800271e <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X5510)
 800267e:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <LCD_SetCursor+0x25c>)
 8002680:	889b      	ldrh	r3, [r3, #4]
 8002682:	f245 5210 	movw	r2, #21776	; 0x5510
 8002686:	4293      	cmp	r3, r2
 8002688:	d130      	bne.n	80026ec <LCD_SetCursor+0x220>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 800268a:	4b27      	ldr	r3, [pc, #156]	; (8002728 <LCD_SetCursor+0x25c>)
 800268c:	895b      	ldrh	r3, [r3, #10]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fea8 	bl	80023e4 <LCD_WR_REG>
 8002694:	88fb      	ldrh	r3, [r7, #6]
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	b29b      	uxth	r3, r3
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff feb6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 80026a0:	4b21      	ldr	r3, [pc, #132]	; (8002728 <LCD_SetCursor+0x25c>)
 80026a2:	895b      	ldrh	r3, [r3, #10]
 80026a4:	3301      	adds	r3, #1
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff fe9b 	bl	80023e4 <LCD_WR_REG>
 80026ae:	88fb      	ldrh	r3, [r7, #6]
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff fea9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 80026ba:	4b1b      	ldr	r3, [pc, #108]	; (8002728 <LCD_SetCursor+0x25c>)
 80026bc:	899b      	ldrh	r3, [r3, #12]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fe90 	bl	80023e4 <LCD_WR_REG>
 80026c4:	88bb      	ldrh	r3, [r7, #4]
 80026c6:	0a1b      	lsrs	r3, r3, #8
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fe9e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 80026d0:	4b15      	ldr	r3, [pc, #84]	; (8002728 <LCD_SetCursor+0x25c>)
 80026d2:	899b      	ldrh	r3, [r3, #12]
 80026d4:	3301      	adds	r3, #1
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fe83 	bl	80023e4 <LCD_WR_REG>
 80026de:	88bb      	ldrh	r3, [r7, #4]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7ff fe91 	bl	800240c <LCD_WR_DATA>
}
 80026ea:	e018      	b.n	800271e <LCD_SetCursor+0x252>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
 80026ec:	4b0e      	ldr	r3, [pc, #56]	; (8002728 <LCD_SetCursor+0x25c>)
 80026ee:	799b      	ldrb	r3, [r3, #6]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d106      	bne.n	8002702 <LCD_SetCursor+0x236>
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <LCD_SetCursor+0x25c>)
 80026f6:	881a      	ldrh	r2, [r3, #0]
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8002702:	4b09      	ldr	r3, [pc, #36]	; (8002728 <LCD_SetCursor+0x25c>)
 8002704:	895b      	ldrh	r3, [r3, #10]
 8002706:	88fa      	ldrh	r2, [r7, #6]
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff fea4 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8002710:	4b05      	ldr	r3, [pc, #20]	; (8002728 <LCD_SetCursor+0x25c>)
 8002712:	899b      	ldrh	r3, [r3, #12]
 8002714:	88ba      	ldrh	r2, [r7, #4]
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fe9d 	bl	8002458 <LCD_WriteReg>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000118 	.word	0x20000118

0800272c <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 8002736:	2300      	movs	r3, #0
 8002738:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 800273a:	2300      	movs	r3, #0
 800273c:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X6804&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 800273e:	4b78      	ldr	r3, [pc, #480]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 8002740:	799b      	ldrb	r3, [r3, #6]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d10b      	bne.n	800275e <LCD_Scan_Dir+0x32>
 8002746:	4b76      	ldr	r3, [pc, #472]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 8002748:	889b      	ldrh	r3, [r3, #4]
 800274a:	f646 0204 	movw	r2, #26628	; 0x6804
 800274e:	4293      	cmp	r3, r2
 8002750:	d005      	beq.n	800275e <LCD_Scan_Dir+0x32>
 8002752:	4b73      	ldr	r3, [pc, #460]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 8002754:	889b      	ldrh	r3, [r3, #4]
 8002756:	f641 1263 	movw	r2, #6499	; 0x1963
 800275a:	4293      	cmp	r3, r2
 800275c:	d109      	bne.n	8002772 <LCD_Scan_Dir+0x46>
 800275e:	4b70      	ldr	r3, [pc, #448]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 8002760:	799b      	ldrb	r3, [r3, #6]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d134      	bne.n	80027d0 <LCD_Scan_Dir+0xa4>
 8002766:	4b6e      	ldr	r3, [pc, #440]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 8002768:	889b      	ldrh	r3, [r3, #4]
 800276a:	f641 1263 	movw	r2, #6499	; 0x1963
 800276e:	4293      	cmp	r3, r2
 8002770:	d12e      	bne.n	80027d0 <LCD_Scan_Dir+0xa4>
	{
		switch(dir)//方向转换
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	2b07      	cmp	r3, #7
 8002776:	d82c      	bhi.n	80027d2 <LCD_Scan_Dir+0xa6>
 8002778:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <LCD_Scan_Dir+0x54>)
 800277a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800277e:	bf00      	nop
 8002780:	080027a1 	.word	0x080027a1
 8002784:	080027a7 	.word	0x080027a7
 8002788:	080027ad 	.word	0x080027ad
 800278c:	080027b3 	.word	0x080027b3
 8002790:	080027b9 	.word	0x080027b9
 8002794:	080027bf 	.word	0x080027bf
 8002798:	080027c5 	.word	0x080027c5
 800279c:	080027cb 	.word	0x080027cb
		{
			case 0:dir=6;break;
 80027a0:	2306      	movs	r3, #6
 80027a2:	71fb      	strb	r3, [r7, #7]
 80027a4:	e015      	b.n	80027d2 <LCD_Scan_Dir+0xa6>
			case 1:dir=7;break;
 80027a6:	2307      	movs	r3, #7
 80027a8:	71fb      	strb	r3, [r7, #7]
 80027aa:	e012      	b.n	80027d2 <LCD_Scan_Dir+0xa6>
			case 2:dir=4;break;
 80027ac:	2304      	movs	r3, #4
 80027ae:	71fb      	strb	r3, [r7, #7]
 80027b0:	e00f      	b.n	80027d2 <LCD_Scan_Dir+0xa6>
			case 3:dir=5;break;
 80027b2:	2305      	movs	r3, #5
 80027b4:	71fb      	strb	r3, [r7, #7]
 80027b6:	e00c      	b.n	80027d2 <LCD_Scan_Dir+0xa6>
			case 4:dir=1;break;
 80027b8:	2301      	movs	r3, #1
 80027ba:	71fb      	strb	r3, [r7, #7]
 80027bc:	e009      	b.n	80027d2 <LCD_Scan_Dir+0xa6>
			case 5:dir=0;break;
 80027be:	2300      	movs	r3, #0
 80027c0:	71fb      	strb	r3, [r7, #7]
 80027c2:	e006      	b.n	80027d2 <LCD_Scan_Dir+0xa6>
			case 6:dir=3;break;
 80027c4:	2303      	movs	r3, #3
 80027c6:	71fb      	strb	r3, [r7, #7]
 80027c8:	e003      	b.n	80027d2 <LCD_Scan_Dir+0xa6>
			case 7:dir=2;break;
 80027ca:	2302      	movs	r3, #2
 80027cc:	71fb      	strb	r3, [r7, #7]
 80027ce:	e000      	b.n	80027d2 <LCD_Scan_Dir+0xa6>
		}
	}
 80027d0:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X6804||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/6804/5310/5510/1963,特殊处理
 80027d2:	4b53      	ldr	r3, [pc, #332]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 80027d4:	889b      	ldrh	r3, [r3, #4]
 80027d6:	f249 3241 	movw	r2, #37697	; 0x9341
 80027da:	4293      	cmp	r3, r2
 80027dc:	d018      	beq.n	8002810 <LCD_Scan_Dir+0xe4>
 80027de:	4b50      	ldr	r3, [pc, #320]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 80027e0:	889b      	ldrh	r3, [r3, #4]
 80027e2:	f646 0204 	movw	r2, #26628	; 0x6804
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d012      	beq.n	8002810 <LCD_Scan_Dir+0xe4>
 80027ea:	4b4d      	ldr	r3, [pc, #308]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 80027ec:	889b      	ldrh	r3, [r3, #4]
 80027ee:	f245 3210 	movw	r2, #21264	; 0x5310
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00c      	beq.n	8002810 <LCD_Scan_Dir+0xe4>
 80027f6:	4b4a      	ldr	r3, [pc, #296]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 80027f8:	889b      	ldrh	r3, [r3, #4]
 80027fa:	f245 5210 	movw	r2, #21776	; 0x5510
 80027fe:	4293      	cmp	r3, r2
 8002800:	d006      	beq.n	8002810 <LCD_Scan_Dir+0xe4>
 8002802:	4b47      	ldr	r3, [pc, #284]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 8002804:	889b      	ldrh	r3, [r3, #4]
 8002806:	f641 1263 	movw	r2, #6499	; 0x1963
 800280a:	4293      	cmp	r3, r2
 800280c:	f040 813c 	bne.w	8002a88 <LCD_Scan_Dir+0x35c>
	{
		switch(dir)
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2b07      	cmp	r3, #7
 8002814:	d835      	bhi.n	8002882 <LCD_Scan_Dir+0x156>
 8002816:	a201      	add	r2, pc, #4	; (adr r2, 800281c <LCD_Scan_Dir+0xf0>)
 8002818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800281c:	08002883 	.word	0x08002883
 8002820:	0800283d 	.word	0x0800283d
 8002824:	08002847 	.word	0x08002847
 8002828:	08002851 	.word	0x08002851
 800282c:	0800285b 	.word	0x0800285b
 8002830:	08002865 	.word	0x08002865
 8002834:	0800286f 	.word	0x0800286f
 8002838:	08002879 	.word	0x08002879
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 800283c:	89fb      	ldrh	r3, [r7, #14]
 800283e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002842:	81fb      	strh	r3, [r7, #14]
				break;
 8002844:	e01d      	b.n	8002882 <LCD_Scan_Dir+0x156>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 8002846:	89fb      	ldrh	r3, [r7, #14]
 8002848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800284c:	81fb      	strh	r3, [r7, #14]
				break;
 800284e:	e018      	b.n	8002882 <LCD_Scan_Dir+0x156>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 8002850:	89fb      	ldrh	r3, [r7, #14]
 8002852:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002856:	81fb      	strh	r3, [r7, #14]
				break;
 8002858:	e013      	b.n	8002882 <LCD_Scan_Dir+0x156>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 800285a:	89fb      	ldrh	r3, [r7, #14]
 800285c:	f043 0320 	orr.w	r3, r3, #32
 8002860:	81fb      	strh	r3, [r7, #14]
				break;
 8002862:	e00e      	b.n	8002882 <LCD_Scan_Dir+0x156>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 8002864:	89fb      	ldrh	r3, [r7, #14]
 8002866:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800286a:	81fb      	strh	r3, [r7, #14]
				break;
 800286c:	e009      	b.n	8002882 <LCD_Scan_Dir+0x156>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 800286e:	89fb      	ldrh	r3, [r7, #14]
 8002870:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8002874:	81fb      	strh	r3, [r7, #14]
				break;
 8002876:	e004      	b.n	8002882 <LCD_Scan_Dir+0x156>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 8002878:	89fb      	ldrh	r3, [r7, #14]
 800287a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800287e:	81fb      	strh	r3, [r7, #14]
				break;
 8002880:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 8002882:	4b27      	ldr	r3, [pc, #156]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 8002884:	889b      	ldrh	r3, [r3, #4]
 8002886:	f245 5210 	movw	r2, #21776	; 0x5510
 800288a:	4293      	cmp	r3, r2
 800288c:	d103      	bne.n	8002896 <LCD_Scan_Dir+0x16a>
 800288e:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8002892:	81bb      	strh	r3, [r7, #12]
 8002894:	e001      	b.n	800289a <LCD_Scan_Dir+0x16e>
		else dirreg=0X36;
 8002896:	2336      	movs	r3, #54	; 0x36
 8002898:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 800289a:	4b21      	ldr	r3, [pc, #132]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 800289c:	889b      	ldrh	r3, [r3, #4]
 800289e:	f245 3210 	movw	r2, #21264	; 0x5310
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00f      	beq.n	80028c6 <LCD_Scan_Dir+0x19a>
 80028a6:	4b1e      	ldr	r3, [pc, #120]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 80028a8:	889b      	ldrh	r3, [r3, #4]
 80028aa:	f245 5210 	movw	r2, #21776	; 0x5510
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d009      	beq.n	80028c6 <LCD_Scan_Dir+0x19a>
 80028b2:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 80028b4:	889b      	ldrh	r3, [r3, #4]
 80028b6:	f641 1263 	movw	r2, #6499	; 0x1963
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d003      	beq.n	80028c6 <LCD_Scan_Dir+0x19a>
 80028be:	89fb      	ldrh	r3, [r7, #14]
 80028c0:	f043 0308 	orr.w	r3, r3, #8
 80028c4:	81fb      	strh	r3, [r7, #14]
		if(lcddev.id==0X6804)regval|=0x02;//6804的BIT6和9341的反了
 80028c6:	4b16      	ldr	r3, [pc, #88]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 80028c8:	889b      	ldrh	r3, [r3, #4]
 80028ca:	f646 0204 	movw	r2, #26628	; 0x6804
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d103      	bne.n	80028da <LCD_Scan_Dir+0x1ae>
 80028d2:	89fb      	ldrh	r3, [r7, #14]
 80028d4:	f043 0302 	orr.w	r3, r3, #2
 80028d8:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 80028da:	89fa      	ldrh	r2, [r7, #14]
 80028dc:	89bb      	ldrh	r3, [r7, #12]
 80028de:	4611      	mov	r1, r2
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fdb9 	bl	8002458 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 80028e8:	889b      	ldrh	r3, [r3, #4]
 80028ea:	f641 1263 	movw	r2, #6499	; 0x1963
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d028      	beq.n	8002944 <LCD_Scan_Dir+0x218>
		{
			if(regval&0X20)
 80028f2:	89fb      	ldrh	r3, [r7, #14]
 80028f4:	f003 0320 	and.w	r3, r3, #32
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d013      	beq.n	8002924 <LCD_Scan_Dir+0x1f8>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 80028fe:	881a      	ldrh	r2, [r3, #0]
 8002900:	4b07      	ldr	r3, [pc, #28]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 8002902:	885b      	ldrh	r3, [r3, #2]
 8002904:	429a      	cmp	r2, r3
 8002906:	d21d      	bcs.n	8002944 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8002908:	4b05      	ldr	r3, [pc, #20]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 800290a:	881b      	ldrh	r3, [r3, #0]
 800290c:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 800290e:	4b04      	ldr	r3, [pc, #16]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 8002910:	885a      	ldrh	r2, [r3, #2]
 8002912:	4b03      	ldr	r3, [pc, #12]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 8002914:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8002916:	4a02      	ldr	r2, [pc, #8]	; (8002920 <LCD_Scan_Dir+0x1f4>)
 8002918:	897b      	ldrh	r3, [r7, #10]
 800291a:	8053      	strh	r3, [r2, #2]
 800291c:	e012      	b.n	8002944 <LCD_Scan_Dir+0x218>
 800291e:	bf00      	nop
 8002920:	20000118 	.word	0x20000118
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 8002924:	4b7d      	ldr	r3, [pc, #500]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002926:	881a      	ldrh	r2, [r3, #0]
 8002928:	4b7c      	ldr	r3, [pc, #496]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 800292a:	885b      	ldrh	r3, [r3, #2]
 800292c:	429a      	cmp	r2, r3
 800292e:	d909      	bls.n	8002944 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8002930:	4b7a      	ldr	r3, [pc, #488]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8002936:	4b79      	ldr	r3, [pc, #484]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002938:	885a      	ldrh	r2, [r3, #2]
 800293a:	4b78      	ldr	r3, [pc, #480]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 800293c:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 800293e:	4a77      	ldr	r2, [pc, #476]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002940:	897b      	ldrh	r3, [r7, #10]
 8002942:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 8002944:	4b75      	ldr	r3, [pc, #468]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002946:	889b      	ldrh	r3, [r3, #4]
 8002948:	f245 5210 	movw	r2, #21776	; 0x5510
 800294c:	4293      	cmp	r3, r2
 800294e:	d162      	bne.n	8002a16 <LCD_Scan_Dir+0x2ea>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 8002950:	4b72      	ldr	r3, [pc, #456]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002952:	895b      	ldrh	r3, [r3, #10]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fd45 	bl	80023e4 <LCD_WR_REG>
 800295a:	2000      	movs	r0, #0
 800295c:	f7ff fd56 	bl	800240c <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 8002960:	4b6e      	ldr	r3, [pc, #440]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002962:	895b      	ldrh	r3, [r3, #10]
 8002964:	3301      	adds	r3, #1
 8002966:	b29b      	uxth	r3, r3
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fd3b 	bl	80023e4 <LCD_WR_REG>
 800296e:	2000      	movs	r0, #0
 8002970:	f7ff fd4c 	bl	800240c <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 8002974:	4b69      	ldr	r3, [pc, #420]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002976:	895b      	ldrh	r3, [r3, #10]
 8002978:	3302      	adds	r3, #2
 800297a:	b29b      	uxth	r3, r3
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fd31 	bl	80023e4 <LCD_WR_REG>
 8002982:	4b66      	ldr	r3, [pc, #408]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002984:	881b      	ldrh	r3, [r3, #0]
 8002986:	3b01      	subs	r3, #1
 8002988:	121b      	asrs	r3, r3, #8
 800298a:	b29b      	uxth	r3, r3
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fd3d 	bl	800240c <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8002992:	4b62      	ldr	r3, [pc, #392]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002994:	895b      	ldrh	r3, [r3, #10]
 8002996:	3303      	adds	r3, #3
 8002998:	b29b      	uxth	r3, r3
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff fd22 	bl	80023e4 <LCD_WR_REG>
 80029a0:	4b5e      	ldr	r3, [pc, #376]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff fd2d 	bl	800240c <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 80029b2:	4b5a      	ldr	r3, [pc, #360]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 80029b4:	899b      	ldrh	r3, [r3, #12]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fd14 	bl	80023e4 <LCD_WR_REG>
 80029bc:	2000      	movs	r0, #0
 80029be:	f7ff fd25 	bl	800240c <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 80029c2:	4b56      	ldr	r3, [pc, #344]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 80029c4:	899b      	ldrh	r3, [r3, #12]
 80029c6:	3301      	adds	r3, #1
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fd0a 	bl	80023e4 <LCD_WR_REG>
 80029d0:	2000      	movs	r0, #0
 80029d2:	f7ff fd1b 	bl	800240c <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 80029d6:	4b51      	ldr	r3, [pc, #324]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 80029d8:	899b      	ldrh	r3, [r3, #12]
 80029da:	3302      	adds	r3, #2
 80029dc:	b29b      	uxth	r3, r3
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fd00 	bl	80023e4 <LCD_WR_REG>
 80029e4:	4b4d      	ldr	r3, [pc, #308]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 80029e6:	885b      	ldrh	r3, [r3, #2]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	121b      	asrs	r3, r3, #8
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fd0c 	bl	800240c <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 80029f4:	4b49      	ldr	r3, [pc, #292]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 80029f6:	899b      	ldrh	r3, [r3, #12]
 80029f8:	3303      	adds	r3, #3
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7ff fcf1 	bl	80023e4 <LCD_WR_REG>
 8002a02:	4b46      	ldr	r3, [pc, #280]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002a04:	885b      	ldrh	r3, [r3, #2]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff fcfc 	bl	800240c <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8002a14:	e07e      	b.n	8002b14 <LCD_Scan_Dir+0x3e8>
		}else
		{
			LCD_WR_REG(lcddev.setxcmd);
 8002a16:	4b41      	ldr	r3, [pc, #260]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002a18:	895b      	ldrh	r3, [r3, #10]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fce2 	bl	80023e4 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7ff fcf3 	bl	800240c <LCD_WR_DATA>
 8002a26:	2000      	movs	r0, #0
 8002a28:	f7ff fcf0 	bl	800240c <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8002a2c:	4b3b      	ldr	r3, [pc, #236]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002a2e:	881b      	ldrh	r3, [r3, #0]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	121b      	asrs	r3, r3, #8
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7ff fce8 	bl	800240c <LCD_WR_DATA>
 8002a3c:	4b37      	ldr	r3, [pc, #220]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002a3e:	881b      	ldrh	r3, [r3, #0]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff fcdf 	bl	800240c <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 8002a4e:	4b33      	ldr	r3, [pc, #204]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002a50:	899b      	ldrh	r3, [r3, #12]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff fcc6 	bl	80023e4 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f7ff fcd7 	bl	800240c <LCD_WR_DATA>
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f7ff fcd4 	bl	800240c <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8002a64:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002a66:	885b      	ldrh	r3, [r3, #2]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	121b      	asrs	r3, r3, #8
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff fccc 	bl	800240c <LCD_WR_DATA>
 8002a74:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <LCD_Scan_Dir+0x3f0>)
 8002a76:	885b      	ldrh	r3, [r3, #2]
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fcc3 	bl	800240c <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8002a86:	e045      	b.n	8002b14 <LCD_Scan_Dir+0x3e8>
		}
  	}else
	{
		switch(dir)
 8002a88:	79fb      	ldrb	r3, [r7, #7]
 8002a8a:	2b07      	cmp	r3, #7
 8002a8c:	d835      	bhi.n	8002afa <LCD_Scan_Dir+0x3ce>
 8002a8e:	a201      	add	r2, pc, #4	; (adr r2, 8002a94 <LCD_Scan_Dir+0x368>)
 8002a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a94:	08002ab5 	.word	0x08002ab5
 8002a98:	08002abf 	.word	0x08002abf
 8002a9c:	08002ac9 	.word	0x08002ac9
 8002aa0:	08002afb 	.word	0x08002afb
 8002aa4:	08002ad3 	.word	0x08002ad3
 8002aa8:	08002add 	.word	0x08002add
 8002aac:	08002ae7 	.word	0x08002ae7
 8002ab0:	08002af1 	.word	0x08002af1
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(1<<5)|(1<<4)|(0<<3);
 8002ab4:	89fb      	ldrh	r3, [r7, #14]
 8002ab6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002aba:	81fb      	strh	r3, [r7, #14]
				break;
 8002abc:	e01d      	b.n	8002afa <LCD_Scan_Dir+0x3ce>
			case L2R_D2U://从左到右,从下到上
				regval|=(0<<5)|(1<<4)|(0<<3);
 8002abe:	89fb      	ldrh	r3, [r7, #14]
 8002ac0:	f043 0310 	orr.w	r3, r3, #16
 8002ac4:	81fb      	strh	r3, [r7, #14]
				break;
 8002ac6:	e018      	b.n	8002afa <LCD_Scan_Dir+0x3ce>
			case R2L_U2D://从右到左,从上到下
				regval|=(1<<5)|(0<<4)|(0<<3);
 8002ac8:	89fb      	ldrh	r3, [r7, #14]
 8002aca:	f043 0320 	orr.w	r3, r3, #32
 8002ace:	81fb      	strh	r3, [r7, #14]
				break;
 8002ad0:	e013      	b.n	8002afa <LCD_Scan_Dir+0x3ce>
			case R2L_D2U://从右到左,从下到上
				regval|=(0<<5)|(0<<4)|(0<<3);
				break;
			case U2D_L2R://从上到下,从左到右
				regval|=(1<<5)|(1<<4)|(1<<3);
 8002ad2:	89fb      	ldrh	r3, [r7, #14]
 8002ad4:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8002ad8:	81fb      	strh	r3, [r7, #14]
				break;
 8002ada:	e00e      	b.n	8002afa <LCD_Scan_Dir+0x3ce>
			case U2D_R2L://从上到下,从右到左
				regval|=(1<<5)|(0<<4)|(1<<3);
 8002adc:	89fb      	ldrh	r3, [r7, #14]
 8002ade:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8002ae2:	81fb      	strh	r3, [r7, #14]
				break;
 8002ae4:	e009      	b.n	8002afa <LCD_Scan_Dir+0x3ce>
			case D2U_L2R://从下到上,从左到右
				regval|=(0<<5)|(1<<4)|(1<<3);
 8002ae6:	89fb      	ldrh	r3, [r7, #14]
 8002ae8:	f043 0318 	orr.w	r3, r3, #24
 8002aec:	81fb      	strh	r3, [r7, #14]
				break;
 8002aee:	e004      	b.n	8002afa <LCD_Scan_Dir+0x3ce>
			case D2U_R2L://从下到上,从右到左
				regval|=(0<<5)|(0<<4)|(1<<3);
 8002af0:	89fb      	ldrh	r3, [r7, #14]
 8002af2:	f043 0308 	orr.w	r3, r3, #8
 8002af6:	81fb      	strh	r3, [r7, #14]
				break;
 8002af8:	bf00      	nop
		}
		dirreg=0X03;
 8002afa:	2303      	movs	r3, #3
 8002afc:	81bb      	strh	r3, [r7, #12]
		regval|=1<<12;
 8002afe:	89fb      	ldrh	r3, [r7, #14]
 8002b00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b04:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8002b06:	89fa      	ldrh	r2, [r7, #14]
 8002b08:	89bb      	ldrh	r3, [r7, #12]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fca3 	bl	8002458 <LCD_WriteReg>
	}
}
 8002b12:	bf00      	nop
 8002b14:	bf00      	nop
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20000118 	.word	0x20000118

08002b20 <LCD_DrawPoint>:
//画点
//x,y:坐标
//POINT_COLOR:此点的颜色
void LCD_DrawPoint(uint16_t x,uint16_t y)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	460a      	mov	r2, r1
 8002b2a:	80fb      	strh	r3, [r7, #6]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);		//设置光标位置
 8002b30:	88ba      	ldrh	r2, [r7, #4]
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	4611      	mov	r1, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fcc8 	bl	80024cc <LCD_SetCursor>
	LCD_WriteRAM_Prepare();	//开始写入GRAM
 8002b3c:	f7ff fcb6 	bl	80024ac <LCD_WriteRAM_Prepare>
	LCD->LCD_RAM=POINT_COLOR;
 8002b40:	4b03      	ldr	r3, [pc, #12]	; (8002b50 <LCD_DrawPoint+0x30>)
 8002b42:	4a04      	ldr	r2, [pc, #16]	; (8002b54 <LCD_DrawPoint+0x34>)
 8002b44:	8812      	ldrh	r2, [r2, #0]
 8002b46:	805a      	strh	r2, [r3, #2]
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	6c00007e 	.word	0x6c00007e
 8002b54:	200000da 	.word	0x200000da

08002b58 <LCD_Fast_DrawPoint>:
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	80fb      	strh	r3, [r7, #6]
 8002b62:	460b      	mov	r3, r1
 8002b64:	80bb      	strh	r3, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	807b      	strh	r3, [r7, #2]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8002b6a:	4b85      	ldr	r3, [pc, #532]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002b6c:	889b      	ldrh	r3, [r3, #4]
 8002b6e:	f249 3241 	movw	r2, #37697	; 0x9341
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d005      	beq.n	8002b82 <LCD_Fast_DrawPoint+0x2a>
 8002b76:	4b82      	ldr	r3, [pc, #520]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002b78:	889b      	ldrh	r3, [r3, #4]
 8002b7a:	f245 3210 	movw	r2, #21264	; 0x5310
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d122      	bne.n	8002bc8 <LCD_Fast_DrawPoint+0x70>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8002b82:	4b7f      	ldr	r3, [pc, #508]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002b84:	895b      	ldrh	r3, [r3, #10]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fc2c 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	0a1b      	lsrs	r3, r3, #8
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fc3a 	bl	800240c <LCD_WR_DATA>
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fc34 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8002ba4:	4b76      	ldr	r3, [pc, #472]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002ba6:	899b      	ldrh	r3, [r3, #12]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fc1b 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8002bae:	88bb      	ldrh	r3, [r7, #4]
 8002bb0:	0a1b      	lsrs	r3, r3, #8
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fc29 	bl	800240c <LCD_WR_DATA>
 8002bba:	88bb      	ldrh	r3, [r7, #4]
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fc23 	bl	800240c <LCD_WR_DATA>
 8002bc6:	e0cf      	b.n	8002d68 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X5510)
 8002bc8:	4b6d      	ldr	r3, [pc, #436]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002bca:	889b      	ldrh	r3, [r3, #4]
 8002bcc:	f245 5210 	movw	r2, #21776	; 0x5510
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d130      	bne.n	8002c36 <LCD_Fast_DrawPoint+0xde>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 8002bd4:	4b6a      	ldr	r3, [pc, #424]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002bd6:	895b      	ldrh	r3, [r3, #10]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fc03 	bl	80023e4 <LCD_WR_REG>
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fc11 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 8002bea:	4b65      	ldr	r3, [pc, #404]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002bec:	895b      	ldrh	r3, [r3, #10]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fbf6 	bl	80023e4 <LCD_WR_REG>
 8002bf8:	88fb      	ldrh	r3, [r7, #6]
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fc04 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 8002c04:	4b5e      	ldr	r3, [pc, #376]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002c06:	899b      	ldrh	r3, [r3, #12]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff fbeb 	bl	80023e4 <LCD_WR_REG>
 8002c0e:	88bb      	ldrh	r3, [r7, #4]
 8002c10:	0a1b      	lsrs	r3, r3, #8
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff fbf9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 8002c1a:	4b59      	ldr	r3, [pc, #356]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002c1c:	899b      	ldrh	r3, [r3, #12]
 8002c1e:	3301      	adds	r3, #1
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fbde 	bl	80023e4 <LCD_WR_REG>
 8002c28:	88bb      	ldrh	r3, [r7, #4]
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fbec 	bl	800240c <LCD_WR_DATA>
 8002c34:	e098      	b.n	8002d68 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X1963)
 8002c36:	4b52      	ldr	r3, [pc, #328]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002c38:	889b      	ldrh	r3, [r3, #4]
 8002c3a:	f641 1263 	movw	r2, #6499	; 0x1963
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d145      	bne.n	8002cce <LCD_Fast_DrawPoint+0x176>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 8002c42:	4b4f      	ldr	r3, [pc, #316]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002c44:	799b      	ldrb	r3, [r3, #6]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <LCD_Fast_DrawPoint+0x100>
 8002c4a:	4b4d      	ldr	r3, [pc, #308]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002c4c:	881a      	ldrh	r2, [r3, #0]
 8002c4e:	88fb      	ldrh	r3, [r7, #6]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	3b01      	subs	r3, #1
 8002c56:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8002c58:	4b49      	ldr	r3, [pc, #292]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002c5a:	895b      	ldrh	r3, [r3, #10]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fbc1 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8002c62:	88fb      	ldrh	r3, [r7, #6]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fbcf 	bl	800240c <LCD_WR_DATA>
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fbc9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	0a1b      	lsrs	r3, r3, #8
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fbc3 	bl	800240c <LCD_WR_DATA>
 8002c86:	88fb      	ldrh	r3, [r7, #6]
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fbbd 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8002c92:	4b3b      	ldr	r3, [pc, #236]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002c94:	899b      	ldrh	r3, [r3, #12]
 8002c96:	4618      	mov	r0, r3
 8002c98:	f7ff fba4 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8002c9c:	88bb      	ldrh	r3, [r7, #4]
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7ff fbb2 	bl	800240c <LCD_WR_DATA>
 8002ca8:	88bb      	ldrh	r3, [r7, #4]
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fbac 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8002cb4:	88bb      	ldrh	r3, [r7, #4]
 8002cb6:	0a1b      	lsrs	r3, r3, #8
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fba6 	bl	800240c <LCD_WR_DATA>
 8002cc0:	88bb      	ldrh	r3, [r7, #4]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fba0 	bl	800240c <LCD_WR_DATA>
 8002ccc:	e04c      	b.n	8002d68 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X6804)
 8002cce:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002cd0:	889b      	ldrh	r3, [r3, #4]
 8002cd2:	f646 0204 	movw	r2, #26628	; 0x6804
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d12d      	bne.n	8002d36 <LCD_Fast_DrawPoint+0x1de>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 8002cda:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002cdc:	799b      	ldrb	r3, [r3, #6]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d106      	bne.n	8002cf0 <LCD_Fast_DrawPoint+0x198>
 8002ce2:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002ce4:	881a      	ldrh	r2, [r3, #0]
 8002ce6:	88fb      	ldrh	r3, [r7, #6]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	3b01      	subs	r3, #1
 8002cee:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8002cf0:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002cf2:	895b      	ldrh	r3, [r3, #10]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7ff fb75 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8002cfa:	88fb      	ldrh	r3, [r7, #6]
 8002cfc:	0a1b      	lsrs	r3, r3, #8
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fb83 	bl	800240c <LCD_WR_DATA>
 8002d06:	88fb      	ldrh	r3, [r7, #6]
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fb7d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8002d12:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002d14:	899b      	ldrh	r3, [r3, #12]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff fb64 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8002d1c:	88bb      	ldrh	r3, [r7, #4]
 8002d1e:	0a1b      	lsrs	r3, r3, #8
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fb72 	bl	800240c <LCD_WR_DATA>
 8002d28:	88bb      	ldrh	r3, [r7, #4]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff fb6c 	bl	800240c <LCD_WR_DATA>
 8002d34:	e018      	b.n	8002d68 <LCD_Fast_DrawPoint+0x210>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 8002d36:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002d38:	799b      	ldrb	r3, [r3, #6]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d106      	bne.n	8002d4c <LCD_Fast_DrawPoint+0x1f4>
 8002d3e:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002d40:	881a      	ldrh	r2, [r3, #0]
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002d4e:	895b      	ldrh	r3, [r3, #10]
 8002d50:	88fa      	ldrh	r2, [r7, #6]
 8002d52:	4611      	mov	r1, r2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fb7f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 8002d5a:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002d5c:	899b      	ldrh	r3, [r3, #12]
 8002d5e:	88ba      	ldrh	r2, [r7, #4]
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff fb78 	bl	8002458 <LCD_WriteReg>
	}
	LCD->LCD_REG=lcddev.wramcmd;
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <LCD_Fast_DrawPoint+0x22c>)
 8002d6a:	4a05      	ldr	r2, [pc, #20]	; (8002d80 <LCD_Fast_DrawPoint+0x228>)
 8002d6c:	8912      	ldrh	r2, [r2, #8]
 8002d6e:	801a      	strh	r2, [r3, #0]
	LCD->LCD_RAM=color;
 8002d70:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <LCD_Fast_DrawPoint+0x22c>)
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	8053      	strh	r3, [r2, #2]
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000118 	.word	0x20000118
 8002d84:	6c00007e 	.word	0x6c00007e

08002d88 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	4603      	mov	r3, r0
 8002d90:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8002d92:	20be      	movs	r0, #190	; 0xbe
 8002d94:	f7ff fb26 	bl	80023e4 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8002d98:	2005      	movs	r0, #5
 8002d9a:	f7ff fb37 	bl	800240c <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 8002d9e:	79fb      	ldrb	r3, [r7, #7]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fd fb63 	bl	800046c <__aeabi_i2d>
 8002da6:	a310      	add	r3, pc, #64	; (adr r3, 8002de8 <LCD_SSD_BackLightSet+0x60>)
 8002da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dac:	f7fd fbc8 	bl	8000540 <__aeabi_dmul>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	f7fd fe72 	bl	8000aa0 <__aeabi_d2uiz>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fb23 	bl	800240c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 8002dc6:	2001      	movs	r0, #1
 8002dc8:	f7ff fb20 	bl	800240c <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 8002dcc:	20ff      	movs	r0, #255	; 0xff
 8002dce:	f7ff fb1d 	bl	800240c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f7ff fb1a 	bl	800240c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7ff fb17 	bl	800240c <LCD_WR_DATA>
}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	66666666 	.word	0x66666666
 8002dec:	40046666 	.word	0x40046666

08002df0 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b082      	sub	sp, #8
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	71fb      	strb	r3, [r7, #7]
	if(dir==0)			//竖屏
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d177      	bne.n	8002ef0 <LCD_Display_Dir+0x100>
	{
		lcddev.dir=0;	//竖屏
 8002e00:	4b80      	ldr	r3, [pc, #512]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	719a      	strb	r2, [r3, #6]
		lcddev.width=240;
 8002e06:	4b7f      	ldr	r3, [pc, #508]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e08:	22f0      	movs	r2, #240	; 0xf0
 8002e0a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8002e0c:	4b7d      	ldr	r3, [pc, #500]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e0e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e12:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X6804||lcddev.id==0X5310)
 8002e14:	4b7b      	ldr	r3, [pc, #492]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e16:	889b      	ldrh	r3, [r3, #4]
 8002e18:	f249 3241 	movw	r2, #37697	; 0x9341
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00b      	beq.n	8002e38 <LCD_Display_Dir+0x48>
 8002e20:	4b78      	ldr	r3, [pc, #480]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e22:	889b      	ldrh	r3, [r3, #4]
 8002e24:	f646 0204 	movw	r2, #26628	; 0x6804
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d005      	beq.n	8002e38 <LCD_Display_Dir+0x48>
 8002e2c:	4b75      	ldr	r3, [pc, #468]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e2e:	889b      	ldrh	r3, [r3, #4]
 8002e30:	f245 3210 	movw	r2, #21264	; 0x5310
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d11e      	bne.n	8002e76 <LCD_Display_Dir+0x86>
		{
			lcddev.wramcmd=0X2C;
 8002e38:	4b72      	ldr	r3, [pc, #456]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e3a:	222c      	movs	r2, #44	; 0x2c
 8002e3c:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8002e3e:	4b71      	ldr	r3, [pc, #452]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e40:	222a      	movs	r2, #42	; 0x2a
 8002e42:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8002e44:	4b6f      	ldr	r3, [pc, #444]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e46:	222b      	movs	r2, #43	; 0x2b
 8002e48:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8002e4a:	4b6e      	ldr	r3, [pc, #440]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e4c:	889b      	ldrh	r3, [r3, #4]
 8002e4e:	f646 0204 	movw	r2, #26628	; 0x6804
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d006      	beq.n	8002e64 <LCD_Display_Dir+0x74>
 8002e56:	4b6b      	ldr	r3, [pc, #428]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e58:	889b      	ldrh	r3, [r3, #4]
 8002e5a:	f245 3210 	movw	r2, #21264	; 0x5310
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	f040 80c7 	bne.w	8002ff2 <LCD_Display_Dir+0x202>
			{
				lcddev.width=320;
 8002e64:	4b67      	ldr	r3, [pc, #412]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e66:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002e6a:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 8002e6c:	4b65      	ldr	r3, [pc, #404]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e6e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002e72:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8002e74:	e0bd      	b.n	8002ff2 <LCD_Display_Dir+0x202>
			}
		}else if(lcddev.id==0x5510)
 8002e76:	4b63      	ldr	r3, [pc, #396]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e78:	889b      	ldrh	r3, [r3, #4]
 8002e7a:	f245 5210 	movw	r2, #21776	; 0x5510
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d114      	bne.n	8002eac <LCD_Display_Dir+0xbc>
		{
			lcddev.wramcmd=0X2C00;
 8002e82:	4b60      	ldr	r3, [pc, #384]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e84:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002e88:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8002e8a:	4b5e      	ldr	r3, [pc, #376]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e8c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8002e90:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8002e92:	4b5c      	ldr	r3, [pc, #368]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e94:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002e98:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 8002e9a:	4b5a      	ldr	r3, [pc, #360]	; (8003004 <LCD_Display_Dir+0x214>)
 8002e9c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002ea0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 8002ea2:	4b58      	ldr	r3, [pc, #352]	; (8003004 <LCD_Display_Dir+0x214>)
 8002ea4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002ea8:	805a      	strh	r2, [r3, #2]
 8002eaa:	e0a3      	b.n	8002ff4 <LCD_Display_Dir+0x204>
		}else if(lcddev.id==0X1963)
 8002eac:	4b55      	ldr	r3, [pc, #340]	; (8003004 <LCD_Display_Dir+0x214>)
 8002eae:	889b      	ldrh	r3, [r3, #4]
 8002eb0:	f641 1263 	movw	r2, #6499	; 0x1963
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d111      	bne.n	8002edc <LCD_Display_Dir+0xec>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8002eb8:	4b52      	ldr	r3, [pc, #328]	; (8003004 <LCD_Display_Dir+0x214>)
 8002eba:	222c      	movs	r2, #44	; 0x2c
 8002ebc:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 8002ebe:	4b51      	ldr	r3, [pc, #324]	; (8003004 <LCD_Display_Dir+0x214>)
 8002ec0:	222b      	movs	r2, #43	; 0x2b
 8002ec2:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 8002ec4:	4b4f      	ldr	r3, [pc, #316]	; (8003004 <LCD_Display_Dir+0x214>)
 8002ec6:	222a      	movs	r2, #42	; 0x2a
 8002ec8:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 8002eca:	4b4e      	ldr	r3, [pc, #312]	; (8003004 <LCD_Display_Dir+0x214>)
 8002ecc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002ed0:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 8002ed2:	4b4c      	ldr	r3, [pc, #304]	; (8003004 <LCD_Display_Dir+0x214>)
 8002ed4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002ed8:	805a      	strh	r2, [r3, #2]
 8002eda:	e08b      	b.n	8002ff4 <LCD_Display_Dir+0x204>
		}else
		{
			lcddev.wramcmd=0X22;
 8002edc:	4b49      	ldr	r3, [pc, #292]	; (8003004 <LCD_Display_Dir+0x214>)
 8002ede:	2222      	movs	r2, #34	; 0x22
 8002ee0:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X20;
 8002ee2:	4b48      	ldr	r3, [pc, #288]	; (8003004 <LCD_Display_Dir+0x214>)
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X21;
 8002ee8:	4b46      	ldr	r3, [pc, #280]	; (8003004 <LCD_Display_Dir+0x214>)
 8002eea:	2221      	movs	r2, #33	; 0x21
 8002eec:	819a      	strh	r2, [r3, #12]
 8002eee:	e081      	b.n	8002ff4 <LCD_Display_Dir+0x204>
		}
	}else 				//横屏
	{
		lcddev.dir=1;	//横屏
 8002ef0:	4b44      	ldr	r3, [pc, #272]	; (8003004 <LCD_Display_Dir+0x214>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	719a      	strb	r2, [r3, #6]
		lcddev.width=320;
 8002ef6:	4b43      	ldr	r3, [pc, #268]	; (8003004 <LCD_Display_Dir+0x214>)
 8002ef8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002efc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8002efe:	4b41      	ldr	r3, [pc, #260]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f00:	22f0      	movs	r2, #240	; 0xf0
 8002f02:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8002f04:	4b3f      	ldr	r3, [pc, #252]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f06:	889b      	ldrh	r3, [r3, #4]
 8002f08:	f249 3241 	movw	r2, #37697	; 0x9341
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d005      	beq.n	8002f1c <LCD_Display_Dir+0x12c>
 8002f10:	4b3c      	ldr	r3, [pc, #240]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f12:	889b      	ldrh	r3, [r3, #4]
 8002f14:	f245 3210 	movw	r2, #21264	; 0x5310
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d109      	bne.n	8002f30 <LCD_Display_Dir+0x140>
		{
			lcddev.wramcmd=0X2C;
 8002f1c:	4b39      	ldr	r3, [pc, #228]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f1e:	222c      	movs	r2, #44	; 0x2c
 8002f20:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8002f22:	4b38      	ldr	r3, [pc, #224]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f24:	222a      	movs	r2, #42	; 0x2a
 8002f26:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8002f28:	4b36      	ldr	r3, [pc, #216]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f2a:	222b      	movs	r2, #43	; 0x2b
 8002f2c:	819a      	strh	r2, [r3, #12]
 8002f2e:	e04b      	b.n	8002fc8 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X6804)
 8002f30:	4b34      	ldr	r3, [pc, #208]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f32:	889b      	ldrh	r3, [r3, #4]
 8002f34:	f646 0204 	movw	r2, #26628	; 0x6804
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d109      	bne.n	8002f50 <LCD_Display_Dir+0x160>
		{
 			lcddev.wramcmd=0X2C;
 8002f3c:	4b31      	ldr	r3, [pc, #196]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f3e:	222c      	movs	r2, #44	; 0x2c
 8002f40:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2B;
 8002f42:	4b30      	ldr	r3, [pc, #192]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f44:	222b      	movs	r2, #43	; 0x2b
 8002f46:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;
 8002f48:	4b2e      	ldr	r3, [pc, #184]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f4a:	222a      	movs	r2, #42	; 0x2a
 8002f4c:	819a      	strh	r2, [r3, #12]
 8002f4e:	e03b      	b.n	8002fc8 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0x5510)
 8002f50:	4b2c      	ldr	r3, [pc, #176]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f52:	889b      	ldrh	r3, [r3, #4]
 8002f54:	f245 5210 	movw	r2, #21776	; 0x5510
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d114      	bne.n	8002f86 <LCD_Display_Dir+0x196>
		{
			lcddev.wramcmd=0X2C00;
 8002f5c:	4b29      	ldr	r3, [pc, #164]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f5e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8002f62:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8002f64:	4b27      	ldr	r3, [pc, #156]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f66:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8002f6a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8002f6c:	4b25      	ldr	r3, [pc, #148]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f6e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8002f72:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 8002f74:	4b23      	ldr	r3, [pc, #140]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f76:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002f7a:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 8002f7c:	4b21      	ldr	r3, [pc, #132]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f7e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002f82:	805a      	strh	r2, [r3, #2]
 8002f84:	e020      	b.n	8002fc8 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X1963)
 8002f86:	4b1f      	ldr	r3, [pc, #124]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f88:	889b      	ldrh	r3, [r3, #4]
 8002f8a:	f641 1263 	movw	r2, #6499	; 0x1963
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d111      	bne.n	8002fb6 <LCD_Display_Dir+0x1c6>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8002f92:	4b1c      	ldr	r3, [pc, #112]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f94:	222c      	movs	r2, #44	; 0x2c
 8002f96:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 8002f98:	4b1a      	ldr	r3, [pc, #104]	; (8003004 <LCD_Display_Dir+0x214>)
 8002f9a:	222a      	movs	r2, #42	; 0x2a
 8002f9c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 8002f9e:	4b19      	ldr	r3, [pc, #100]	; (8003004 <LCD_Display_Dir+0x214>)
 8002fa0:	222b      	movs	r2, #43	; 0x2b
 8002fa2:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 8002fa4:	4b17      	ldr	r3, [pc, #92]	; (8003004 <LCD_Display_Dir+0x214>)
 8002fa6:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002faa:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 8002fac:	4b15      	ldr	r3, [pc, #84]	; (8003004 <LCD_Display_Dir+0x214>)
 8002fae:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002fb2:	805a      	strh	r2, [r3, #2]
 8002fb4:	e008      	b.n	8002fc8 <LCD_Display_Dir+0x1d8>
		}else
		{
			lcddev.wramcmd=0X22;
 8002fb6:	4b13      	ldr	r3, [pc, #76]	; (8003004 <LCD_Display_Dir+0x214>)
 8002fb8:	2222      	movs	r2, #34	; 0x22
 8002fba:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X21;
 8002fbc:	4b11      	ldr	r3, [pc, #68]	; (8003004 <LCD_Display_Dir+0x214>)
 8002fbe:	2221      	movs	r2, #33	; 0x21
 8002fc0:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X20;
 8002fc2:	4b10      	ldr	r3, [pc, #64]	; (8003004 <LCD_Display_Dir+0x214>)
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	819a      	strh	r2, [r3, #12]
		}
		if(lcddev.id==0X6804||lcddev.id==0X5310)
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <LCD_Display_Dir+0x214>)
 8002fca:	889b      	ldrh	r3, [r3, #4]
 8002fcc:	f646 0204 	movw	r2, #26628	; 0x6804
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d005      	beq.n	8002fe0 <LCD_Display_Dir+0x1f0>
 8002fd4:	4b0b      	ldr	r3, [pc, #44]	; (8003004 <LCD_Display_Dir+0x214>)
 8002fd6:	889b      	ldrh	r3, [r3, #4]
 8002fd8:	f245 3210 	movw	r2, #21264	; 0x5310
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d109      	bne.n	8002ff4 <LCD_Display_Dir+0x204>
		{
			lcddev.width=480;
 8002fe0:	4b08      	ldr	r3, [pc, #32]	; (8003004 <LCD_Display_Dir+0x214>)
 8002fe2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002fe6:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <LCD_Display_Dir+0x214>)
 8002fea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002fee:	805a      	strh	r2, [r3, #2]
 8002ff0:	e000      	b.n	8002ff4 <LCD_Display_Dir+0x204>
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8002ff2:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 8002ff4:	2000      	movs	r0, #0
 8002ff6:	f7ff fb99 	bl	800272c <LCD_Scan_Dir>
}
 8002ffa:	bf00      	nop
 8002ffc:	3708      	adds	r7, #8
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	20000118 	.word	0x20000118

08003008 <LCD_Init>:
}
//初始化lcd
//该初始化函数可以初始化各种ILI93XX液晶,但是其他函数是基于ILI9320的!!!
//在其他型号的驱动芯片上没有测试!
void LCD_Init(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0

//  FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);  //初始化FSMC配置

//  FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM4, ENABLE);  // 使能BANK1

 	HAL_Delay(50); // delay 50 ms
 800300c:	2032      	movs	r0, #50	; 0x32
 800300e:	f005 ff99 	bl	8008f44 <HAL_Delay>
 	LCD_WriteReg(0x0000,0x0001);
 8003012:	2101      	movs	r1, #1
 8003014:	2000      	movs	r0, #0
 8003016:	f7ff fa1f 	bl	8002458 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 800301a:	2032      	movs	r0, #50	; 0x32
 800301c:	f005 ff92 	bl	8008f44 <HAL_Delay>
  	lcddev.id = LCD_ReadReg(0x0000);
 8003020:	2000      	movs	r0, #0
 8003022:	f7ff fa2f 	bl	8002484 <LCD_ReadReg>
 8003026:	4603      	mov	r3, r0
 8003028:	461a      	mov	r2, r3
 800302a:	4b96      	ldr	r3, [pc, #600]	; (8003284 <LCD_Init+0x27c>)
 800302c:	809a      	strh	r2, [r3, #4]
   	if(lcddev.id<0XFF||lcddev.id==0XFFFF||lcddev.id==0X9300)//读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 800302e:	4b95      	ldr	r3, [pc, #596]	; (8003284 <LCD_Init+0x27c>)
 8003030:	889b      	ldrh	r3, [r3, #4]
 8003032:	2bfe      	cmp	r3, #254	; 0xfe
 8003034:	d90b      	bls.n	800304e <LCD_Init+0x46>
 8003036:	4b93      	ldr	r3, [pc, #588]	; (8003284 <LCD_Init+0x27c>)
 8003038:	889b      	ldrh	r3, [r3, #4]
 800303a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800303e:	4293      	cmp	r3, r2
 8003040:	d005      	beq.n	800304e <LCD_Init+0x46>
 8003042:	4b90      	ldr	r3, [pc, #576]	; (8003284 <LCD_Init+0x27c>)
 8003044:	889b      	ldrh	r3, [r3, #4]
 8003046:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 800304a:	f040 80e9 	bne.w	8003220 <LCD_Init+0x218>
	{
 		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 800304e:	20d3      	movs	r0, #211	; 0xd3
 8003050:	f7ff f9c8 	bl	80023e4 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();	//dummy read
 8003054:	f7ff f9ee 	bl	8002434 <LCD_RD_DATA>
 8003058:	4603      	mov	r3, r0
 800305a:	461a      	mov	r2, r3
 800305c:	4b89      	ldr	r3, [pc, #548]	; (8003284 <LCD_Init+0x27c>)
 800305e:	809a      	strh	r2, [r3, #4]
 		lcddev.id=LCD_RD_DATA();	//读到0X00
 8003060:	f7ff f9e8 	bl	8002434 <LCD_RD_DATA>
 8003064:	4603      	mov	r3, r0
 8003066:	461a      	mov	r2, r3
 8003068:	4b86      	ldr	r3, [pc, #536]	; (8003284 <LCD_Init+0x27c>)
 800306a:	809a      	strh	r2, [r3, #4]
  		lcddev.id=LCD_RD_DATA();   	//读取93
 800306c:	f7ff f9e2 	bl	8002434 <LCD_RD_DATA>
 8003070:	4603      	mov	r3, r0
 8003072:	461a      	mov	r2, r3
 8003074:	4b83      	ldr	r3, [pc, #524]	; (8003284 <LCD_Init+0x27c>)
 8003076:	809a      	strh	r2, [r3, #4]
 		lcddev.id<<=8;
 8003078:	4b82      	ldr	r3, [pc, #520]	; (8003284 <LCD_Init+0x27c>)
 800307a:	889b      	ldrh	r3, [r3, #4]
 800307c:	021b      	lsls	r3, r3, #8
 800307e:	b29a      	uxth	r2, r3
 8003080:	4b80      	ldr	r3, [pc, #512]	; (8003284 <LCD_Init+0x27c>)
 8003082:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();  	//读取41
 8003084:	f7ff f9d6 	bl	8002434 <LCD_RD_DATA>
 8003088:	4603      	mov	r3, r0
 800308a:	461a      	mov	r2, r3
 800308c:	4b7d      	ldr	r3, [pc, #500]	; (8003284 <LCD_Init+0x27c>)
 800308e:	889b      	ldrh	r3, [r3, #4]
 8003090:	4313      	orrs	r3, r2
 8003092:	b29a      	uxth	r2, r3
 8003094:	4b7b      	ldr	r3, [pc, #492]	; (8003284 <LCD_Init+0x27c>)
 8003096:	809a      	strh	r2, [r3, #4]
 		if(lcddev.id!=0X9341)		//非9341,尝试是不是6804
 8003098:	4b7a      	ldr	r3, [pc, #488]	; (8003284 <LCD_Init+0x27c>)
 800309a:	889b      	ldrh	r3, [r3, #4]
 800309c:	f249 3241 	movw	r2, #37697	; 0x9341
 80030a0:	4293      	cmp	r3, r2
 80030a2:	f000 80bd 	beq.w	8003220 <LCD_Init+0x218>
		{
 			LCD_WR_REG(0XBF);
 80030a6:	20bf      	movs	r0, #191	; 0xbf
 80030a8:	f7ff f99c 	bl	80023e4 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA(); 	//dummy read
 80030ac:	f7ff f9c2 	bl	8002434 <LCD_RD_DATA>
 80030b0:	4603      	mov	r3, r0
 80030b2:	461a      	mov	r2, r3
 80030b4:	4b73      	ldr	r3, [pc, #460]	; (8003284 <LCD_Init+0x27c>)
 80030b6:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA();   	//读回0X01
 80030b8:	f7ff f9bc 	bl	8002434 <LCD_RD_DATA>
 80030bc:	4603      	mov	r3, r0
 80030be:	461a      	mov	r2, r3
 80030c0:	4b70      	ldr	r3, [pc, #448]	; (8003284 <LCD_Init+0x27c>)
 80030c2:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA(); 	//读回0XD0
 80030c4:	f7ff f9b6 	bl	8002434 <LCD_RD_DATA>
 80030c8:	4603      	mov	r3, r0
 80030ca:	461a      	mov	r2, r3
 80030cc:	4b6d      	ldr	r3, [pc, #436]	; (8003284 <LCD_Init+0x27c>)
 80030ce:	809a      	strh	r2, [r3, #4]
	  		lcddev.id=LCD_RD_DATA();	//这里读回0X68
 80030d0:	f7ff f9b0 	bl	8002434 <LCD_RD_DATA>
 80030d4:	4603      	mov	r3, r0
 80030d6:	461a      	mov	r2, r3
 80030d8:	4b6a      	ldr	r3, [pc, #424]	; (8003284 <LCD_Init+0x27c>)
 80030da:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 80030dc:	4b69      	ldr	r3, [pc, #420]	; (8003284 <LCD_Init+0x27c>)
 80030de:	889b      	ldrh	r3, [r3, #4]
 80030e0:	021b      	lsls	r3, r3, #8
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	4b67      	ldr	r3, [pc, #412]	; (8003284 <LCD_Init+0x27c>)
 80030e6:	809a      	strh	r2, [r3, #4]
	  		lcddev.id|=LCD_RD_DATA();	//这里读回0X04
 80030e8:	f7ff f9a4 	bl	8002434 <LCD_RD_DATA>
 80030ec:	4603      	mov	r3, r0
 80030ee:	461a      	mov	r2, r3
 80030f0:	4b64      	ldr	r3, [pc, #400]	; (8003284 <LCD_Init+0x27c>)
 80030f2:	889b      	ldrh	r3, [r3, #4]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	4b62      	ldr	r3, [pc, #392]	; (8003284 <LCD_Init+0x27c>)
 80030fa:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X6804)		//也不是6804,尝试看看是不是NT35310
 80030fc:	4b61      	ldr	r3, [pc, #388]	; (8003284 <LCD_Init+0x27c>)
 80030fe:	889b      	ldrh	r3, [r3, #4]
 8003100:	f646 0204 	movw	r2, #26628	; 0x6804
 8003104:	4293      	cmp	r3, r2
 8003106:	f000 808b 	beq.w	8003220 <LCD_Init+0x218>
			{
				LCD_WR_REG(0XD4);
 800310a:	20d4      	movs	r0, #212	; 0xd4
 800310c:	f7ff f96a 	bl	80023e4 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();//dummy read
 8003110:	f7ff f990 	bl	8002434 <LCD_RD_DATA>
 8003114:	4603      	mov	r3, r0
 8003116:	461a      	mov	r2, r3
 8003118:	4b5a      	ldr	r3, [pc, #360]	; (8003284 <LCD_Init+0x27c>)
 800311a:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X01
 800311c:	f7ff f98a 	bl	8002434 <LCD_RD_DATA>
 8003120:	4603      	mov	r3, r0
 8003122:	461a      	mov	r2, r3
 8003124:	4b57      	ldr	r3, [pc, #348]	; (8003284 <LCD_Init+0x27c>)
 8003126:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X53
 8003128:	f7ff f984 	bl	8002434 <LCD_RD_DATA>
 800312c:	4603      	mov	r3, r0
 800312e:	461a      	mov	r2, r3
 8003130:	4b54      	ldr	r3, [pc, #336]	; (8003284 <LCD_Init+0x27c>)
 8003132:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 8003134:	4b53      	ldr	r3, [pc, #332]	; (8003284 <LCD_Init+0x27c>)
 8003136:	889b      	ldrh	r3, [r3, #4]
 8003138:	021b      	lsls	r3, r3, #8
 800313a:	b29a      	uxth	r2, r3
 800313c:	4b51      	ldr	r3, [pc, #324]	; (8003284 <LCD_Init+0x27c>)
 800313e:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 8003140:	f7ff f978 	bl	8002434 <LCD_RD_DATA>
 8003144:	4603      	mov	r3, r0
 8003146:	461a      	mov	r2, r3
 8003148:	4b4e      	ldr	r3, [pc, #312]	; (8003284 <LCD_Init+0x27c>)
 800314a:	889b      	ldrh	r3, [r3, #4]
 800314c:	4313      	orrs	r3, r2
 800314e:	b29a      	uxth	r2, r3
 8003150:	4b4c      	ldr	r3, [pc, #304]	; (8003284 <LCD_Init+0x27c>)
 8003152:	809a      	strh	r2, [r3, #4]
				if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8003154:	4b4b      	ldr	r3, [pc, #300]	; (8003284 <LCD_Init+0x27c>)
 8003156:	889b      	ldrh	r3, [r3, #4]
 8003158:	f245 3210 	movw	r2, #21264	; 0x5310
 800315c:	4293      	cmp	r3, r2
 800315e:	d05f      	beq.n	8003220 <LCD_Init+0x218>
				{
					LCD_WR_REG(0XDA00);
 8003160:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8003164:	f7ff f93e 	bl	80023e4 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X00
 8003168:	f7ff f964 	bl	8002434 <LCD_RD_DATA>
 800316c:	4603      	mov	r3, r0
 800316e:	461a      	mov	r2, r3
 8003170:	4b44      	ldr	r3, [pc, #272]	; (8003284 <LCD_Init+0x27c>)
 8003172:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDB00);
 8003174:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8003178:	f7ff f934 	bl	80023e4 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X80
 800317c:	f7ff f95a 	bl	8002434 <LCD_RD_DATA>
 8003180:	4603      	mov	r3, r0
 8003182:	461a      	mov	r2, r3
 8003184:	4b3f      	ldr	r3, [pc, #252]	; (8003284 <LCD_Init+0x27c>)
 8003186:	809a      	strh	r2, [r3, #4]
					lcddev.id<<=8;
 8003188:	4b3e      	ldr	r3, [pc, #248]	; (8003284 <LCD_Init+0x27c>)
 800318a:	889b      	ldrh	r3, [r3, #4]
 800318c:	021b      	lsls	r3, r3, #8
 800318e:	b29a      	uxth	r2, r3
 8003190:	4b3c      	ldr	r3, [pc, #240]	; (8003284 <LCD_Init+0x27c>)
 8003192:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8003194:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8003198:	f7ff f924 	bl	80023e4 <LCD_WR_REG>
					lcddev.id|=LCD_RD_DATA();		//读回0X00
 800319c:	f7ff f94a 	bl	8002434 <LCD_RD_DATA>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461a      	mov	r2, r3
 80031a4:	4b37      	ldr	r3, [pc, #220]	; (8003284 <LCD_Init+0x27c>)
 80031a6:	889b      	ldrh	r3, [r3, #4]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	4b35      	ldr	r3, [pc, #212]	; (8003284 <LCD_Init+0x27c>)
 80031ae:	809a      	strh	r2, [r3, #4]
					if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 80031b0:	4b34      	ldr	r3, [pc, #208]	; (8003284 <LCD_Init+0x27c>)
 80031b2:	889b      	ldrh	r3, [r3, #4]
 80031b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031b8:	d103      	bne.n	80031c2 <LCD_Init+0x1ba>
 80031ba:	4b32      	ldr	r3, [pc, #200]	; (8003284 <LCD_Init+0x27c>)
 80031bc:	f245 5210 	movw	r2, #21776	; 0x5510
 80031c0:	809a      	strh	r2, [r3, #4]
					if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 80031c2:	4b30      	ldr	r3, [pc, #192]	; (8003284 <LCD_Init+0x27c>)
 80031c4:	889b      	ldrh	r3, [r3, #4]
 80031c6:	f245 5210 	movw	r2, #21776	; 0x5510
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d028      	beq.n	8003220 <LCD_Init+0x218>
					{
						LCD_WR_REG(0XA1);
 80031ce:	20a1      	movs	r0, #161	; 0xa1
 80031d0:	f7ff f908 	bl	80023e4 <LCD_WR_REG>
						lcddev.id=LCD_RD_DATA();
 80031d4:	f7ff f92e 	bl	8002434 <LCD_RD_DATA>
 80031d8:	4603      	mov	r3, r0
 80031da:	461a      	mov	r2, r3
 80031dc:	4b29      	ldr	r3, [pc, #164]	; (8003284 <LCD_Init+0x27c>)
 80031de:	809a      	strh	r2, [r3, #4]
						lcddev.id=LCD_RD_DATA();	//读回0X57
 80031e0:	f7ff f928 	bl	8002434 <LCD_RD_DATA>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	4b26      	ldr	r3, [pc, #152]	; (8003284 <LCD_Init+0x27c>)
 80031ea:	809a      	strh	r2, [r3, #4]
						lcddev.id<<=8;
 80031ec:	4b25      	ldr	r3, [pc, #148]	; (8003284 <LCD_Init+0x27c>)
 80031ee:	889b      	ldrh	r3, [r3, #4]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	4b23      	ldr	r3, [pc, #140]	; (8003284 <LCD_Init+0x27c>)
 80031f6:	809a      	strh	r2, [r3, #4]
						lcddev.id|=LCD_RD_DATA();	//读回0X61
 80031f8:	f7ff f91c 	bl	8002434 <LCD_RD_DATA>
 80031fc:	4603      	mov	r3, r0
 80031fe:	461a      	mov	r2, r3
 8003200:	4b20      	ldr	r3, [pc, #128]	; (8003284 <LCD_Init+0x27c>)
 8003202:	889b      	ldrh	r3, [r3, #4]
 8003204:	4313      	orrs	r3, r2
 8003206:	b29a      	uxth	r2, r3
 8003208:	4b1e      	ldr	r3, [pc, #120]	; (8003284 <LCD_Init+0x27c>)
 800320a:	809a      	strh	r2, [r3, #4]
						if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 800320c:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <LCD_Init+0x27c>)
 800320e:	889b      	ldrh	r3, [r3, #4]
 8003210:	f245 7261 	movw	r2, #22369	; 0x5761
 8003214:	4293      	cmp	r3, r2
 8003216:	d103      	bne.n	8003220 <LCD_Init+0x218>
 8003218:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <LCD_Init+0x27c>)
 800321a:	f641 1263 	movw	r2, #6499	; 0x1963
 800321e:	809a      	strh	r2, [r3, #4]
					}
				}
			}
 		}
	}
	if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//如果是这几个IC,则设置WR时序为最快
 8003220:	4b18      	ldr	r3, [pc, #96]	; (8003284 <LCD_Init+0x27c>)
 8003222:	889b      	ldrh	r3, [r3, #4]
 8003224:	f249 3241 	movw	r2, #37697	; 0x9341
 8003228:	4293      	cmp	r3, r2
 800322a:	d011      	beq.n	8003250 <LCD_Init+0x248>
 800322c:	4b15      	ldr	r3, [pc, #84]	; (8003284 <LCD_Init+0x27c>)
 800322e:	889b      	ldrh	r3, [r3, #4]
 8003230:	f245 3210 	movw	r2, #21264	; 0x5310
 8003234:	4293      	cmp	r3, r2
 8003236:	d00b      	beq.n	8003250 <LCD_Init+0x248>
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <LCD_Init+0x27c>)
 800323a:	889b      	ldrh	r3, [r3, #4]
 800323c:	f245 5210 	movw	r2, #21776	; 0x5510
 8003240:	4293      	cmp	r3, r2
 8003242:	d005      	beq.n	8003250 <LCD_Init+0x248>
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <LCD_Init+0x27c>)
 8003246:	889b      	ldrh	r3, [r3, #4]
 8003248:	f641 1263 	movw	r2, #6499	; 0x1963
 800324c:	4293      	cmp	r3, r2
 800324e:	d11d      	bne.n	800328c <LCD_Init+0x284>
	{
		//重新配置写时序控制寄存器的时序
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//地址建立时间(ADDSET)清零
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <LCD_Init+0x280>)
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	4a0c      	ldr	r2, [pc, #48]	; (8003288 <LCD_Init+0x280>)
 8003256:	f023 030f 	bic.w	r3, r3, #15
 800325a:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//数据保存时间清零
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <LCD_Init+0x280>)
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	4a09      	ldr	r2, [pc, #36]	; (8003288 <LCD_Init+0x280>)
 8003262:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003266:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=3<<0;		//地址建立时间(ADDSET)为3个HCLK =18ns
 8003268:	4b07      	ldr	r3, [pc, #28]	; (8003288 <LCD_Init+0x280>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	4a06      	ldr	r2, [pc, #24]	; (8003288 <LCD_Init+0x280>)
 800326e:	f043 0303 	orr.w	r3, r3, #3
 8003272:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=2<<8; 	//数据保存时间(DATAST)为6ns*3个HCLK=18ns
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <LCD_Init+0x280>)
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	4a03      	ldr	r2, [pc, #12]	; (8003288 <LCD_Init+0x280>)
 800327a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800327e:	6193      	str	r3, [r2, #24]
 8003280:	e028      	b.n	80032d4 <LCD_Init+0x2cc>
 8003282:	bf00      	nop
 8003284:	20000118 	.word	0x20000118
 8003288:	a0000104 	.word	0xa0000104
	}else if(lcddev.id==0X6804||lcddev.id==0XC505)	//6804/C505速度上不去,得降低
 800328c:	4ba0      	ldr	r3, [pc, #640]	; (8003510 <LCD_Init+0x508>)
 800328e:	889b      	ldrh	r3, [r3, #4]
 8003290:	f646 0204 	movw	r2, #26628	; 0x6804
 8003294:	4293      	cmp	r3, r2
 8003296:	d005      	beq.n	80032a4 <LCD_Init+0x29c>
 8003298:	4b9d      	ldr	r3, [pc, #628]	; (8003510 <LCD_Init+0x508>)
 800329a:	889b      	ldrh	r3, [r3, #4]
 800329c:	f24c 5205 	movw	r2, #50437	; 0xc505
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d117      	bne.n	80032d4 <LCD_Init+0x2cc>
	{
		//重新配置写时序控制寄存器的时序
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//地址建立时间(ADDSET)清零
 80032a4:	4b9b      	ldr	r3, [pc, #620]	; (8003514 <LCD_Init+0x50c>)
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	4a9a      	ldr	r2, [pc, #616]	; (8003514 <LCD_Init+0x50c>)
 80032aa:	f023 030f 	bic.w	r3, r3, #15
 80032ae:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//数据保存时间清零
 80032b0:	4b98      	ldr	r3, [pc, #608]	; (8003514 <LCD_Init+0x50c>)
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	4a97      	ldr	r2, [pc, #604]	; (8003514 <LCD_Init+0x50c>)
 80032b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80032ba:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=10<<0;	//地址建立时间(ADDSET)为10个HCLK =60ns
 80032bc:	4b95      	ldr	r3, [pc, #596]	; (8003514 <LCD_Init+0x50c>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	4a94      	ldr	r2, [pc, #592]	; (8003514 <LCD_Init+0x50c>)
 80032c2:	f043 030a 	orr.w	r3, r3, #10
 80032c6:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=12<<8; 	//数据保存时间(DATAST)为6ns*13个HCLK=78ns
 80032c8:	4b92      	ldr	r3, [pc, #584]	; (8003514 <LCD_Init+0x50c>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	4a91      	ldr	r2, [pc, #580]	; (8003514 <LCD_Init+0x50c>)
 80032ce:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80032d2:	6193      	str	r3, [r2, #24]
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if(lcddev.id==0X9341)	//9341初始化
 80032d4:	4b8e      	ldr	r3, [pc, #568]	; (8003510 <LCD_Init+0x508>)
 80032d6:	889b      	ldrh	r3, [r3, #4]
 80032d8:	f249 3241 	movw	r2, #37697	; 0x9341
 80032dc:	4293      	cmp	r3, r2
 80032de:	f040 811b 	bne.w	8003518 <LCD_Init+0x510>
	{
		LCD_WR_REG(0xCF);
 80032e2:	20cf      	movs	r0, #207	; 0xcf
 80032e4:	f7ff f87e 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80032e8:	2000      	movs	r0, #0
 80032ea:	f7ff f88f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 80032ee:	20c1      	movs	r0, #193	; 0xc1
 80032f0:	f7ff f88c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 80032f4:	2030      	movs	r0, #48	; 0x30
 80032f6:	f7ff f889 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 80032fa:	20ed      	movs	r0, #237	; 0xed
 80032fc:	f7ff f872 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 8003300:	2064      	movs	r0, #100	; 0x64
 8003302:	f7ff f883 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8003306:	2003      	movs	r0, #3
 8003308:	f7ff f880 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 800330c:	2012      	movs	r0, #18
 800330e:	f7ff f87d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 8003312:	2081      	movs	r0, #129	; 0x81
 8003314:	f7ff f87a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 8003318:	20e8      	movs	r0, #232	; 0xe8
 800331a:	f7ff f863 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 800331e:	2085      	movs	r0, #133	; 0x85
 8003320:	f7ff f874 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8003324:	2010      	movs	r0, #16
 8003326:	f7ff f871 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 800332a:	207a      	movs	r0, #122	; 0x7a
 800332c:	f7ff f86e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 8003330:	20cb      	movs	r0, #203	; 0xcb
 8003332:	f7ff f857 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8003336:	2039      	movs	r0, #57	; 0x39
 8003338:	f7ff f868 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 800333c:	202c      	movs	r0, #44	; 0x2c
 800333e:	f7ff f865 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003342:	2000      	movs	r0, #0
 8003344:	f7ff f862 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8003348:	2034      	movs	r0, #52	; 0x34
 800334a:	f7ff f85f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800334e:	2002      	movs	r0, #2
 8003350:	f7ff f85c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8003354:	20f7      	movs	r0, #247	; 0xf7
 8003356:	f7ff f845 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 800335a:	2020      	movs	r0, #32
 800335c:	f7ff f856 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 8003360:	20ea      	movs	r0, #234	; 0xea
 8003362:	f7ff f83f 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003366:	2000      	movs	r0, #0
 8003368:	f7ff f850 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800336c:	2000      	movs	r0, #0
 800336e:	f7ff f84d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 8003372:	20c0      	movs	r0, #192	; 0xc0
 8003374:	f7ff f836 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 8003378:	201b      	movs	r0, #27
 800337a:	f7ff f847 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 800337e:	20c1      	movs	r0, #193	; 0xc1
 8003380:	f7ff f830 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8003384:	2001      	movs	r0, #1
 8003386:	f7ff f841 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 800338a:	20c5      	movs	r0, #197	; 0xc5
 800338c:	f7ff f82a 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 8003390:	2030      	movs	r0, #48	; 0x30
 8003392:	f7ff f83b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 8003396:	2030      	movs	r0, #48	; 0x30
 8003398:	f7ff f838 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 800339c:	20c7      	movs	r0, #199	; 0xc7
 800339e:	f7ff f821 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 80033a2:	20b7      	movs	r0, #183	; 0xb7
 80033a4:	f7ff f832 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 80033a8:	2036      	movs	r0, #54	; 0x36
 80033aa:	f7ff f81b 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 80033ae:	2048      	movs	r0, #72	; 0x48
 80033b0:	f7ff f82c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 80033b4:	203a      	movs	r0, #58	; 0x3a
 80033b6:	f7ff f815 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 80033ba:	2055      	movs	r0, #85	; 0x55
 80033bc:	f7ff f826 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 80033c0:	20b1      	movs	r0, #177	; 0xb1
 80033c2:	f7ff f80f 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80033c6:	2000      	movs	r0, #0
 80033c8:	f7ff f820 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 80033cc:	201a      	movs	r0, #26
 80033ce:	f7ff f81d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 80033d2:	20b6      	movs	r0, #182	; 0xb6
 80033d4:	f7ff f806 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 80033d8:	200a      	movs	r0, #10
 80033da:	f7ff f817 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80033de:	20a2      	movs	r0, #162	; 0xa2
 80033e0:	f7ff f814 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80033e4:	20f2      	movs	r0, #242	; 0xf2
 80033e6:	f7fe fffd 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80033ea:	2000      	movs	r0, #0
 80033ec:	f7ff f80e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 80033f0:	2026      	movs	r0, #38	; 0x26
 80033f2:	f7fe fff7 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80033f6:	2001      	movs	r0, #1
 80033f8:	f7ff f808 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 80033fc:	20e0      	movs	r0, #224	; 0xe0
 80033fe:	f7fe fff1 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 8003402:	200f      	movs	r0, #15
 8003404:	f7ff f802 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8003408:	202a      	movs	r0, #42	; 0x2a
 800340a:	f7fe ffff 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 800340e:	2028      	movs	r0, #40	; 0x28
 8003410:	f7fe fffc 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8003414:	2008      	movs	r0, #8
 8003416:	f7fe fff9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 800341a:	200e      	movs	r0, #14
 800341c:	f7fe fff6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8003420:	2008      	movs	r0, #8
 8003422:	f7fe fff3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8003426:	2054      	movs	r0, #84	; 0x54
 8003428:	f7fe fff0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 800342c:	20a9      	movs	r0, #169	; 0xa9
 800342e:	f7fe ffed 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8003432:	2043      	movs	r0, #67	; 0x43
 8003434:	f7fe ffea 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 8003438:	200a      	movs	r0, #10
 800343a:	f7fe ffe7 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 800343e:	200f      	movs	r0, #15
 8003440:	f7fe ffe4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003444:	2000      	movs	r0, #0
 8003446:	f7fe ffe1 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800344a:	2000      	movs	r0, #0
 800344c:	f7fe ffde 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003450:	2000      	movs	r0, #0
 8003452:	f7fe ffdb 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003456:	2000      	movs	r0, #0
 8003458:	f7fe ffd8 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 800345c:	20e1      	movs	r0, #225	; 0xe1
 800345e:	f7fe ffc1 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003462:	2000      	movs	r0, #0
 8003464:	f7fe ffd2 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 8003468:	2015      	movs	r0, #21
 800346a:	f7fe ffcf 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 800346e:	2017      	movs	r0, #23
 8003470:	f7fe ffcc 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 8003474:	2007      	movs	r0, #7
 8003476:	f7fe ffc9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 800347a:	2011      	movs	r0, #17
 800347c:	f7fe ffc6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 8003480:	2006      	movs	r0, #6
 8003482:	f7fe ffc3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 8003486:	202b      	movs	r0, #43	; 0x2b
 8003488:	f7fe ffc0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 800348c:	2056      	movs	r0, #86	; 0x56
 800348e:	f7fe ffbd 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8003492:	203c      	movs	r0, #60	; 0x3c
 8003494:	f7fe ffba 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8003498:	2005      	movs	r0, #5
 800349a:	f7fe ffb7 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 800349e:	2010      	movs	r0, #16
 80034a0:	f7fe ffb4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 80034a4:	200f      	movs	r0, #15
 80034a6:	f7fe ffb1 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80034aa:	203f      	movs	r0, #63	; 0x3f
 80034ac:	f7fe ffae 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80034b0:	203f      	movs	r0, #63	; 0x3f
 80034b2:	f7fe ffab 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 80034b6:	200f      	movs	r0, #15
 80034b8:	f7fe ffa8 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 80034bc:	202b      	movs	r0, #43	; 0x2b
 80034be:	f7fe ff91 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80034c2:	2000      	movs	r0, #0
 80034c4:	f7fe ffa2 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034c8:	2000      	movs	r0, #0
 80034ca:	f7fe ff9f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 80034ce:	2001      	movs	r0, #1
 80034d0:	f7fe ff9c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 80034d4:	203f      	movs	r0, #63	; 0x3f
 80034d6:	f7fe ff99 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 80034da:	202a      	movs	r0, #42	; 0x2a
 80034dc:	f7fe ff82 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80034e0:	2000      	movs	r0, #0
 80034e2:	f7fe ff93 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034e6:	2000      	movs	r0, #0
 80034e8:	f7fe ff90 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80034ec:	2000      	movs	r0, #0
 80034ee:	f7fe ff8d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 80034f2:	20ef      	movs	r0, #239	; 0xef
 80034f4:	f7fe ff8a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 80034f8:	2011      	movs	r0, #17
 80034fa:	f7fe ff73 	bl	80023e4 <LCD_WR_REG>
		HAL_Delay(120);
 80034fe:	2078      	movs	r0, #120	; 0x78
 8003500:	f005 fd20 	bl	8008f44 <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 8003504:	2029      	movs	r0, #41	; 0x29
 8003506:	f7fe ff6d 	bl	80023e4 <LCD_WR_REG>
 800350a:	f003 b924 	b.w	8006756 <LCD_Init+0x374e>
 800350e:	bf00      	nop
 8003510:	20000118 	.word	0x20000118
 8003514:	a0000104 	.word	0xa0000104
	}else if(lcddev.id==0x6804) //6804初始化
 8003518:	4b58      	ldr	r3, [pc, #352]	; (800367c <LCD_Init+0x674>)
 800351a:	889b      	ldrh	r3, [r3, #4]
 800351c:	f646 0204 	movw	r2, #26628	; 0x6804
 8003520:	4293      	cmp	r3, r2
 8003522:	f040 80ad 	bne.w	8003680 <LCD_Init+0x678>
	{
		LCD_WR_REG(0X11);
 8003526:	2011      	movs	r0, #17
 8003528:	f7fe ff5c 	bl	80023e4 <LCD_WR_REG>
		HAL_Delay(20);
 800352c:	2014      	movs	r0, #20
 800352e:	f005 fd09 	bl	8008f44 <HAL_Delay>
		LCD_WR_REG(0XD0);//VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 8003532:	20d0      	movs	r0, #208	; 0xd0
 8003534:	f7fe ff56 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0X07);
 8003538:	2007      	movs	r0, #7
 800353a:	f7fe ff67 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X42);
 800353e:	2042      	movs	r0, #66	; 0x42
 8003540:	f7fe ff64 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X1D);
 8003544:	201d      	movs	r0, #29
 8003546:	f7fe ff61 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0XD1);//VCOMH VCOM_AC amplitude setting
 800354a:	20d1      	movs	r0, #209	; 0xd1
 800354c:	f7fe ff4a 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8003550:	2000      	movs	r0, #0
 8003552:	f7fe ff5b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X1a);
 8003556:	201a      	movs	r0, #26
 8003558:	f7fe ff58 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X09);
 800355c:	2009      	movs	r0, #9
 800355e:	f7fe ff55 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0XD2);//Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8003562:	20d2      	movs	r0, #210	; 0xd2
 8003564:	f7fe ff3e 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 8003568:	2001      	movs	r0, #1
 800356a:	f7fe ff4f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X22);
 800356e:	2022      	movs	r0, #34	; 0x22
 8003570:	f7fe ff4c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0XC0);//REV SM GS
 8003574:	20c0      	movs	r0, #192	; 0xc0
 8003576:	f7fe ff35 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0X10);
 800357a:	2010      	movs	r0, #16
 800357c:	f7fe ff46 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X3B);
 8003580:	203b      	movs	r0, #59	; 0x3b
 8003582:	f7fe ff43 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8003586:	2000      	movs	r0, #0
 8003588:	f7fe ff40 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X02);
 800358c:	2002      	movs	r0, #2
 800358e:	f7fe ff3d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X11);
 8003592:	2011      	movs	r0, #17
 8003594:	f7fe ff3a 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0XC5);// Frame rate setting = 72HZ  when setting 0x03
 8003598:	20c5      	movs	r0, #197	; 0xc5
 800359a:	f7fe ff23 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0X03);
 800359e:	2003      	movs	r0, #3
 80035a0:	f7fe ff34 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0XC8);//Gamma setting
 80035a4:	20c8      	movs	r0, #200	; 0xc8
 80035a6:	f7fe ff1d 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 80035aa:	2000      	movs	r0, #0
 80035ac:	f7fe ff2e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 80035b0:	2025      	movs	r0, #37	; 0x25
 80035b2:	f7fe ff2b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X21);
 80035b6:	2021      	movs	r0, #33	; 0x21
 80035b8:	f7fe ff28 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X05);
 80035bc:	2005      	movs	r0, #5
 80035be:	f7fe ff25 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 80035c2:	2000      	movs	r0, #0
 80035c4:	f7fe ff22 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X0a);
 80035c8:	200a      	movs	r0, #10
 80035ca:	f7fe ff1f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X65);
 80035ce:	2065      	movs	r0, #101	; 0x65
 80035d0:	f7fe ff1c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 80035d4:	2025      	movs	r0, #37	; 0x25
 80035d6:	f7fe ff19 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X77);
 80035da:	2077      	movs	r0, #119	; 0x77
 80035dc:	f7fe ff16 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X50);
 80035e0:	2050      	movs	r0, #80	; 0x50
 80035e2:	f7fe ff13 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X0f);
 80035e6:	200f      	movs	r0, #15
 80035e8:	f7fe ff10 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 80035ec:	2000      	movs	r0, #0
 80035ee:	f7fe ff0d 	bl	800240c <LCD_WR_DATA>

   		LCD_WR_REG(0XF8);
 80035f2:	20f8      	movs	r0, #248	; 0xf8
 80035f4:	f7fe fef6 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 80035f8:	2001      	movs	r0, #1
 80035fa:	f7fe ff07 	bl	800240c <LCD_WR_DATA>

 		LCD_WR_REG(0XFE);
 80035fe:	20fe      	movs	r0, #254	; 0xfe
 8003600:	f7fe fef0 	bl	80023e4 <LCD_WR_REG>
 		LCD_WR_DATA(0X00);
 8003604:	2000      	movs	r0, #0
 8003606:	f7fe ff01 	bl	800240c <LCD_WR_DATA>
 		LCD_WR_DATA(0X02);
 800360a:	2002      	movs	r0, #2
 800360c:	f7fe fefe 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0X20);//Exit invert mode
 8003610:	2020      	movs	r0, #32
 8003612:	f7fe fee7 	bl	80023e4 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 8003616:	2036      	movs	r0, #54	; 0x36
 8003618:	f7fe fee4 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0X08);//原来是a
 800361c:	2008      	movs	r0, #8
 800361e:	f7fe fef5 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0X3A);
 8003622:	203a      	movs	r0, #58	; 0x3a
 8003624:	f7fe fede 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0X55);//16位模式
 8003628:	2055      	movs	r0, #85	; 0x55
 800362a:	f7fe feef 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0X2B);
 800362e:	202b      	movs	r0, #43	; 0x2b
 8003630:	f7fe fed8 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8003634:	2000      	movs	r0, #0
 8003636:	f7fe fee9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 800363a:	2000      	movs	r0, #0
 800363c:	f7fe fee6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 8003640:	2001      	movs	r0, #1
 8003642:	f7fe fee3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X3F);
 8003646:	203f      	movs	r0, #63	; 0x3f
 8003648:	f7fe fee0 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0X2A);
 800364c:	202a      	movs	r0, #42	; 0x2a
 800364e:	f7fe fec9 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8003652:	2000      	movs	r0, #0
 8003654:	f7fe feda 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8003658:	2000      	movs	r0, #0
 800365a:	f7fe fed7 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 800365e:	2001      	movs	r0, #1
 8003660:	f7fe fed4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0XDF);
 8003664:	20df      	movs	r0, #223	; 0xdf
 8003666:	f7fe fed1 	bl	800240c <LCD_WR_DATA>
		HAL_Delay(120);
 800366a:	2078      	movs	r0, #120	; 0x78
 800366c:	f005 fc6a 	bl	8008f44 <HAL_Delay>
		LCD_WR_REG(0X29);
 8003670:	2029      	movs	r0, #41	; 0x29
 8003672:	f7fe feb7 	bl	80023e4 <LCD_WR_REG>
 8003676:	f003 b86e 	b.w	8006756 <LCD_Init+0x374e>
 800367a:	bf00      	nop
 800367c:	20000118 	.word	0x20000118
 	}else if(lcddev.id==0x5310)
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <LCD_Init+0x688>)
 8003682:	889b      	ldrh	r3, [r3, #4]
 8003684:	f245 3210 	movw	r2, #21264	; 0x5310
 8003688:	4293      	cmp	r3, r2
 800368a:	f040 877c 	bne.w	8004586 <LCD_Init+0x157e>
 800368e:	e001      	b.n	8003694 <LCD_Init+0x68c>
 8003690:	20000118 	.word	0x20000118
	{
		LCD_WR_REG(0xED);
 8003694:	20ed      	movs	r0, #237	; 0xed
 8003696:	f7fe fea5 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 800369a:	2001      	movs	r0, #1
 800369c:	f7fe feb6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 80036a0:	20fe      	movs	r0, #254	; 0xfe
 80036a2:	f7fe feb3 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 80036a6:	20ee      	movs	r0, #238	; 0xee
 80036a8:	f7fe fe9c 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 80036ac:	20de      	movs	r0, #222	; 0xde
 80036ae:	f7fe fead 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80036b2:	2021      	movs	r0, #33	; 0x21
 80036b4:	f7fe feaa 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 80036b8:	20f1      	movs	r0, #241	; 0xf1
 80036ba:	f7fe fe93 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80036be:	2001      	movs	r0, #1
 80036c0:	f7fe fea4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 80036c4:	20df      	movs	r0, #223	; 0xdf
 80036c6:	f7fe fe8d 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 80036ca:	2010      	movs	r0, #16
 80036cc:	f7fe fe9e 	bl	800240c <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 80036d0:	20c4      	movs	r0, #196	; 0xc4
 80036d2:	f7fe fe87 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 80036d6:	208f      	movs	r0, #143	; 0x8f
 80036d8:	f7fe fe98 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 80036dc:	20c6      	movs	r0, #198	; 0xc6
 80036de:	f7fe fe81 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80036e2:	2000      	movs	r0, #0
 80036e4:	f7fe fe92 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80036e8:	20e2      	movs	r0, #226	; 0xe2
 80036ea:	f7fe fe8f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80036ee:	20e2      	movs	r0, #226	; 0xe2
 80036f0:	f7fe fe8c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 80036f4:	20e2      	movs	r0, #226	; 0xe2
 80036f6:	f7fe fe89 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 80036fa:	20bf      	movs	r0, #191	; 0xbf
 80036fc:	f7fe fe72 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8003700:	20aa      	movs	r0, #170	; 0xaa
 8003702:	f7fe fe83 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 8003706:	20b0      	movs	r0, #176	; 0xb0
 8003708:	f7fe fe6c 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 800370c:	200d      	movs	r0, #13
 800370e:	f7fe fe7d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003712:	2000      	movs	r0, #0
 8003714:	f7fe fe7a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 8003718:	200d      	movs	r0, #13
 800371a:	f7fe fe77 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800371e:	2000      	movs	r0, #0
 8003720:	f7fe fe74 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8003724:	2011      	movs	r0, #17
 8003726:	f7fe fe71 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800372a:	2000      	movs	r0, #0
 800372c:	f7fe fe6e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 8003730:	2019      	movs	r0, #25
 8003732:	f7fe fe6b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003736:	2000      	movs	r0, #0
 8003738:	f7fe fe68 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 800373c:	2021      	movs	r0, #33	; 0x21
 800373e:	f7fe fe65 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003742:	2000      	movs	r0, #0
 8003744:	f7fe fe62 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8003748:	202d      	movs	r0, #45	; 0x2d
 800374a:	f7fe fe5f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800374e:	2000      	movs	r0, #0
 8003750:	f7fe fe5c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 8003754:	203d      	movs	r0, #61	; 0x3d
 8003756:	f7fe fe59 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800375a:	2000      	movs	r0, #0
 800375c:	f7fe fe56 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8003760:	205d      	movs	r0, #93	; 0x5d
 8003762:	f7fe fe53 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003766:	2000      	movs	r0, #0
 8003768:	f7fe fe50 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 800376c:	205d      	movs	r0, #93	; 0x5d
 800376e:	f7fe fe4d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003772:	2000      	movs	r0, #0
 8003774:	f7fe fe4a 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 8003778:	20b1      	movs	r0, #177	; 0xb1
 800377a:	f7fe fe33 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 800377e:	2080      	movs	r0, #128	; 0x80
 8003780:	f7fe fe44 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003784:	2000      	movs	r0, #0
 8003786:	f7fe fe41 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 800378a:	208b      	movs	r0, #139	; 0x8b
 800378c:	f7fe fe3e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003790:	2000      	movs	r0, #0
 8003792:	f7fe fe3b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8003796:	2096      	movs	r0, #150	; 0x96
 8003798:	f7fe fe38 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800379c:	2000      	movs	r0, #0
 800379e:	f7fe fe35 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 80037a2:	20b2      	movs	r0, #178	; 0xb2
 80037a4:	f7fe fe1e 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80037a8:	2000      	movs	r0, #0
 80037aa:	f7fe fe2f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037ae:	2000      	movs	r0, #0
 80037b0:	f7fe fe2c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 80037b4:	2002      	movs	r0, #2
 80037b6:	f7fe fe29 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037ba:	2000      	movs	r0, #0
 80037bc:	f7fe fe26 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80037c0:	2003      	movs	r0, #3
 80037c2:	f7fe fe23 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037c6:	2000      	movs	r0, #0
 80037c8:	f7fe fe20 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 80037cc:	20b3      	movs	r0, #179	; 0xb3
 80037ce:	f7fe fe09 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80037d2:	2000      	movs	r0, #0
 80037d4:	f7fe fe1a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037d8:	2000      	movs	r0, #0
 80037da:	f7fe fe17 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037de:	2000      	movs	r0, #0
 80037e0:	f7fe fe14 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037e4:	2000      	movs	r0, #0
 80037e6:	f7fe fe11 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037ea:	2000      	movs	r0, #0
 80037ec:	f7fe fe0e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037f0:	2000      	movs	r0, #0
 80037f2:	f7fe fe0b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037f6:	2000      	movs	r0, #0
 80037f8:	f7fe fe08 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80037fc:	2000      	movs	r0, #0
 80037fe:	f7fe fe05 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003802:	2000      	movs	r0, #0
 8003804:	f7fe fe02 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003808:	2000      	movs	r0, #0
 800380a:	f7fe fdff 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800380e:	2000      	movs	r0, #0
 8003810:	f7fe fdfc 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003814:	2000      	movs	r0, #0
 8003816:	f7fe fdf9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800381a:	2000      	movs	r0, #0
 800381c:	f7fe fdf6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003820:	2000      	movs	r0, #0
 8003822:	f7fe fdf3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003826:	2000      	movs	r0, #0
 8003828:	f7fe fdf0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800382c:	2000      	movs	r0, #0
 800382e:	f7fe fded 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003832:	2000      	movs	r0, #0
 8003834:	f7fe fdea 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003838:	2000      	movs	r0, #0
 800383a:	f7fe fde7 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800383e:	2000      	movs	r0, #0
 8003840:	f7fe fde4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003844:	2000      	movs	r0, #0
 8003846:	f7fe fde1 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800384a:	2000      	movs	r0, #0
 800384c:	f7fe fdde 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003850:	2000      	movs	r0, #0
 8003852:	f7fe fddb 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003856:	2000      	movs	r0, #0
 8003858:	f7fe fdd8 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800385c:	2000      	movs	r0, #0
 800385e:	f7fe fdd5 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 8003862:	20b4      	movs	r0, #180	; 0xb4
 8003864:	f7fe fdbe 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 8003868:	208b      	movs	r0, #139	; 0x8b
 800386a:	f7fe fdcf 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800386e:	2000      	movs	r0, #0
 8003870:	f7fe fdcc 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8003874:	2096      	movs	r0, #150	; 0x96
 8003876:	f7fe fdc9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800387a:	2000      	movs	r0, #0
 800387c:	f7fe fdc6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 8003880:	20a1      	movs	r0, #161	; 0xa1
 8003882:	f7fe fdc3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003886:	2000      	movs	r0, #0
 8003888:	f7fe fdc0 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 800388c:	20b5      	movs	r0, #181	; 0xb5
 800388e:	f7fe fda9 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 8003892:	2002      	movs	r0, #2
 8003894:	f7fe fdba 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003898:	2000      	movs	r0, #0
 800389a:	f7fe fdb7 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 800389e:	2003      	movs	r0, #3
 80038a0:	f7fe fdb4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038a4:	2000      	movs	r0, #0
 80038a6:	f7fe fdb1 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 80038aa:	2004      	movs	r0, #4
 80038ac:	f7fe fdae 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038b0:	2000      	movs	r0, #0
 80038b2:	f7fe fdab 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 80038b6:	20b6      	movs	r0, #182	; 0xb6
 80038b8:	f7fe fd94 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80038bc:	2000      	movs	r0, #0
 80038be:	f7fe fda5 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038c2:	2000      	movs	r0, #0
 80038c4:	f7fe fda2 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 80038c8:	20b7      	movs	r0, #183	; 0xb7
 80038ca:	f7fe fd8b 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80038ce:	2000      	movs	r0, #0
 80038d0:	f7fe fd9c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038d4:	2000      	movs	r0, #0
 80038d6:	f7fe fd99 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 80038da:	203f      	movs	r0, #63	; 0x3f
 80038dc:	f7fe fd96 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038e0:	2000      	movs	r0, #0
 80038e2:	f7fe fd93 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 80038e6:	205e      	movs	r0, #94	; 0x5e
 80038e8:	f7fe fd90 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038ec:	2000      	movs	r0, #0
 80038ee:	f7fe fd8d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80038f2:	2064      	movs	r0, #100	; 0x64
 80038f4:	f7fe fd8a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80038f8:	2000      	movs	r0, #0
 80038fa:	f7fe fd87 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 80038fe:	208c      	movs	r0, #140	; 0x8c
 8003900:	f7fe fd84 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003904:	2000      	movs	r0, #0
 8003906:	f7fe fd81 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 800390a:	20ac      	movs	r0, #172	; 0xac
 800390c:	f7fe fd7e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003910:	2000      	movs	r0, #0
 8003912:	f7fe fd7b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8003916:	20dc      	movs	r0, #220	; 0xdc
 8003918:	f7fe fd78 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800391c:	2000      	movs	r0, #0
 800391e:	f7fe fd75 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 8003922:	2070      	movs	r0, #112	; 0x70
 8003924:	f7fe fd72 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003928:	2000      	movs	r0, #0
 800392a:	f7fe fd6f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 800392e:	2090      	movs	r0, #144	; 0x90
 8003930:	f7fe fd6c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003934:	2000      	movs	r0, #0
 8003936:	f7fe fd69 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 800393a:	20eb      	movs	r0, #235	; 0xeb
 800393c:	f7fe fd66 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003940:	2000      	movs	r0, #0
 8003942:	f7fe fd63 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8003946:	20dc      	movs	r0, #220	; 0xdc
 8003948:	f7fe fd60 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800394c:	2000      	movs	r0, #0
 800394e:	f7fe fd5d 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 8003952:	20b8      	movs	r0, #184	; 0xb8
 8003954:	f7fe fd46 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003958:	2000      	movs	r0, #0
 800395a:	f7fe fd57 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800395e:	2000      	movs	r0, #0
 8003960:	f7fe fd54 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003964:	2000      	movs	r0, #0
 8003966:	f7fe fd51 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800396a:	2000      	movs	r0, #0
 800396c:	f7fe fd4e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003970:	2000      	movs	r0, #0
 8003972:	f7fe fd4b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003976:	2000      	movs	r0, #0
 8003978:	f7fe fd48 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800397c:	2000      	movs	r0, #0
 800397e:	f7fe fd45 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003982:	2000      	movs	r0, #0
 8003984:	f7fe fd42 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 8003988:	20ba      	movs	r0, #186	; 0xba
 800398a:	f7fe fd2b 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 800398e:	2024      	movs	r0, #36	; 0x24
 8003990:	f7fe fd3c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003994:	2000      	movs	r0, #0
 8003996:	f7fe fd39 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800399a:	2000      	movs	r0, #0
 800399c:	f7fe fd36 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039a0:	2000      	movs	r0, #0
 80039a2:	f7fe fd33 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 80039a6:	20c1      	movs	r0, #193	; 0xc1
 80039a8:	f7fe fd1c 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 80039ac:	2020      	movs	r0, #32
 80039ae:	f7fe fd2d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039b2:	2000      	movs	r0, #0
 80039b4:	f7fe fd2a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 80039b8:	2054      	movs	r0, #84	; 0x54
 80039ba:	f7fe fd27 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039be:	2000      	movs	r0, #0
 80039c0:	f7fe fd24 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 80039c4:	20ff      	movs	r0, #255	; 0xff
 80039c6:	f7fe fd21 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039ca:	2000      	movs	r0, #0
 80039cc:	f7fe fd1e 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 80039d0:	20c2      	movs	r0, #194	; 0xc2
 80039d2:	f7fe fd07 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 80039d6:	200a      	movs	r0, #10
 80039d8:	f7fe fd18 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039dc:	2000      	movs	r0, #0
 80039de:	f7fe fd15 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 80039e2:	2004      	movs	r0, #4
 80039e4:	f7fe fd12 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039e8:	2000      	movs	r0, #0
 80039ea:	f7fe fd0f 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 80039ee:	20c3      	movs	r0, #195	; 0xc3
 80039f0:	f7fe fcf8 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 80039f4:	203c      	movs	r0, #60	; 0x3c
 80039f6:	f7fe fd09 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80039fa:	2000      	movs	r0, #0
 80039fc:	f7fe fd06 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 8003a00:	203a      	movs	r0, #58	; 0x3a
 8003a02:	f7fe fd03 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a06:	2000      	movs	r0, #0
 8003a08:	f7fe fd00 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 8003a0c:	2039      	movs	r0, #57	; 0x39
 8003a0e:	f7fe fcfd 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a12:	2000      	movs	r0, #0
 8003a14:	f7fe fcfa 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 8003a18:	2037      	movs	r0, #55	; 0x37
 8003a1a:	f7fe fcf7 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a1e:	2000      	movs	r0, #0
 8003a20:	f7fe fcf4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8003a24:	203c      	movs	r0, #60	; 0x3c
 8003a26:	f7fe fcf1 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a2a:	2000      	movs	r0, #0
 8003a2c:	f7fe fcee 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8003a30:	2036      	movs	r0, #54	; 0x36
 8003a32:	f7fe fceb 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a36:	2000      	movs	r0, #0
 8003a38:	f7fe fce8 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8003a3c:	2032      	movs	r0, #50	; 0x32
 8003a3e:	f7fe fce5 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a42:	2000      	movs	r0, #0
 8003a44:	f7fe fce2 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8003a48:	202f      	movs	r0, #47	; 0x2f
 8003a4a:	f7fe fcdf 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a4e:	2000      	movs	r0, #0
 8003a50:	f7fe fcdc 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8003a54:	202c      	movs	r0, #44	; 0x2c
 8003a56:	f7fe fcd9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a5a:	2000      	movs	r0, #0
 8003a5c:	f7fe fcd6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8003a60:	2029      	movs	r0, #41	; 0x29
 8003a62:	f7fe fcd3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a66:	2000      	movs	r0, #0
 8003a68:	f7fe fcd0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8003a6c:	2026      	movs	r0, #38	; 0x26
 8003a6e:	f7fe fccd 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a72:	2000      	movs	r0, #0
 8003a74:	f7fe fcca 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8003a78:	2024      	movs	r0, #36	; 0x24
 8003a7a:	f7fe fcc7 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a7e:	2000      	movs	r0, #0
 8003a80:	f7fe fcc4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8003a84:	2024      	movs	r0, #36	; 0x24
 8003a86:	f7fe fcc1 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	f7fe fcbe 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8003a90:	2023      	movs	r0, #35	; 0x23
 8003a92:	f7fe fcbb 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003a96:	2000      	movs	r0, #0
 8003a98:	f7fe fcb8 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8003a9c:	203c      	movs	r0, #60	; 0x3c
 8003a9e:	f7fe fcb5 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	f7fe fcb2 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8003aa8:	2036      	movs	r0, #54	; 0x36
 8003aaa:	f7fe fcaf 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f7fe fcac 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8003ab4:	2032      	movs	r0, #50	; 0x32
 8003ab6:	f7fe fca9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003aba:	2000      	movs	r0, #0
 8003abc:	f7fe fca6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8003ac0:	202f      	movs	r0, #47	; 0x2f
 8003ac2:	f7fe fca3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ac6:	2000      	movs	r0, #0
 8003ac8:	f7fe fca0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8003acc:	202c      	movs	r0, #44	; 0x2c
 8003ace:	f7fe fc9d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f7fe fc9a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8003ad8:	2029      	movs	r0, #41	; 0x29
 8003ada:	f7fe fc97 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ade:	2000      	movs	r0, #0
 8003ae0:	f7fe fc94 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8003ae4:	2026      	movs	r0, #38	; 0x26
 8003ae6:	f7fe fc91 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003aea:	2000      	movs	r0, #0
 8003aec:	f7fe fc8e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8003af0:	2024      	movs	r0, #36	; 0x24
 8003af2:	f7fe fc8b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003af6:	2000      	movs	r0, #0
 8003af8:	f7fe fc88 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8003afc:	2024      	movs	r0, #36	; 0x24
 8003afe:	f7fe fc85 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b02:	2000      	movs	r0, #0
 8003b04:	f7fe fc82 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8003b08:	2023      	movs	r0, #35	; 0x23
 8003b0a:	f7fe fc7f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b0e:	2000      	movs	r0, #0
 8003b10:	f7fe fc7c 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 8003b14:	20c4      	movs	r0, #196	; 0xc4
 8003b16:	f7fe fc65 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 8003b1a:	2062      	movs	r0, #98	; 0x62
 8003b1c:	f7fe fc76 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b20:	2000      	movs	r0, #0
 8003b22:	f7fe fc73 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8003b26:	2005      	movs	r0, #5
 8003b28:	f7fe fc70 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b2c:	2000      	movs	r0, #0
 8003b2e:	f7fe fc6d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8003b32:	2084      	movs	r0, #132	; 0x84
 8003b34:	f7fe fc6a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f7fe fc67 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 8003b3e:	20f0      	movs	r0, #240	; 0xf0
 8003b40:	f7fe fc64 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b44:	2000      	movs	r0, #0
 8003b46:	f7fe fc61 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8003b4a:	2018      	movs	r0, #24
 8003b4c:	f7fe fc5e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b50:	2000      	movs	r0, #0
 8003b52:	f7fe fc5b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 8003b56:	20a4      	movs	r0, #164	; 0xa4
 8003b58:	f7fe fc58 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f7fe fc55 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8003b62:	2018      	movs	r0, #24
 8003b64:	f7fe fc52 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b68:	2000      	movs	r0, #0
 8003b6a:	f7fe fc4f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8003b6e:	2050      	movs	r0, #80	; 0x50
 8003b70:	f7fe fc4c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b74:	2000      	movs	r0, #0
 8003b76:	f7fe fc49 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 8003b7a:	200c      	movs	r0, #12
 8003b7c:	f7fe fc46 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b80:	2000      	movs	r0, #0
 8003b82:	f7fe fc43 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8003b86:	2017      	movs	r0, #23
 8003b88:	f7fe fc40 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	f7fe fc3d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 8003b92:	2095      	movs	r0, #149	; 0x95
 8003b94:	f7fe fc3a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b98:	2000      	movs	r0, #0
 8003b9a:	f7fe fc37 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8003b9e:	20f3      	movs	r0, #243	; 0xf3
 8003ba0:	f7fe fc34 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ba4:	2000      	movs	r0, #0
 8003ba6:	f7fe fc31 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 8003baa:	20e6      	movs	r0, #230	; 0xe6
 8003bac:	f7fe fc2e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bb0:	2000      	movs	r0, #0
 8003bb2:	f7fe fc2b 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 8003bb6:	20c5      	movs	r0, #197	; 0xc5
 8003bb8:	f7fe fc14 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8003bbc:	2032      	movs	r0, #50	; 0x32
 8003bbe:	f7fe fc25 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	f7fe fc22 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003bc8:	2044      	movs	r0, #68	; 0x44
 8003bca:	f7fe fc1f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bce:	2000      	movs	r0, #0
 8003bd0:	f7fe fc1c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 8003bd4:	2065      	movs	r0, #101	; 0x65
 8003bd6:	f7fe fc19 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bda:	2000      	movs	r0, #0
 8003bdc:	f7fe fc16 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8003be0:	2076      	movs	r0, #118	; 0x76
 8003be2:	f7fe fc13 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003be6:	2000      	movs	r0, #0
 8003be8:	f7fe fc10 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8003bec:	2088      	movs	r0, #136	; 0x88
 8003bee:	f7fe fc0d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	f7fe fc0a 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8003bf8:	20c6      	movs	r0, #198	; 0xc6
 8003bfa:	f7fe fbf3 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8003bfe:	2020      	movs	r0, #32
 8003c00:	f7fe fc04 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c04:	2000      	movs	r0, #0
 8003c06:	f7fe fc01 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8003c0a:	2017      	movs	r0, #23
 8003c0c:	f7fe fbfe 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c10:	2000      	movs	r0, #0
 8003c12:	f7fe fbfb 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8003c16:	2001      	movs	r0, #1
 8003c18:	f7fe fbf8 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c1c:	2000      	movs	r0, #0
 8003c1e:	f7fe fbf5 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 8003c22:	20c7      	movs	r0, #199	; 0xc7
 8003c24:	f7fe fbde 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003c28:	2000      	movs	r0, #0
 8003c2a:	f7fe fbef 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c2e:	2000      	movs	r0, #0
 8003c30:	f7fe fbec 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c34:	2000      	movs	r0, #0
 8003c36:	f7fe fbe9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f7fe fbe6 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8003c40:	20c8      	movs	r0, #200	; 0xc8
 8003c42:	f7fe fbcf 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003c46:	2000      	movs	r0, #0
 8003c48:	f7fe fbe0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	f7fe fbdd 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c52:	2000      	movs	r0, #0
 8003c54:	f7fe fbda 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c58:	2000      	movs	r0, #0
 8003c5a:	f7fe fbd7 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 8003c5e:	20c9      	movs	r0, #201	; 0xc9
 8003c60:	f7fe fbc0 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8003c64:	2000      	movs	r0, #0
 8003c66:	f7fe fbd1 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f7fe fbce 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c70:	2000      	movs	r0, #0
 8003c72:	f7fe fbcb 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c76:	2000      	movs	r0, #0
 8003c78:	f7fe fbc8 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c7c:	2000      	movs	r0, #0
 8003c7e:	f7fe fbc5 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c82:	2000      	movs	r0, #0
 8003c84:	f7fe fbc2 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c88:	2000      	movs	r0, #0
 8003c8a:	f7fe fbbf 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c8e:	2000      	movs	r0, #0
 8003c90:	f7fe fbbc 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c94:	2000      	movs	r0, #0
 8003c96:	f7fe fbb9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003c9a:	2000      	movs	r0, #0
 8003c9c:	f7fe fbb6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ca0:	2000      	movs	r0, #0
 8003ca2:	f7fe fbb3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ca6:	2000      	movs	r0, #0
 8003ca8:	f7fe fbb0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cac:	2000      	movs	r0, #0
 8003cae:	f7fe fbad 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	f7fe fbaa 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cb8:	2000      	movs	r0, #0
 8003cba:	f7fe fba7 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cbe:	2000      	movs	r0, #0
 8003cc0:	f7fe fba4 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 8003cc4:	20e0      	movs	r0, #224	; 0xe0
 8003cc6:	f7fe fb8d 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8003cca:	2016      	movs	r0, #22
 8003ccc:	f7fe fb9e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cd0:	2000      	movs	r0, #0
 8003cd2:	f7fe fb9b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8003cd6:	201c      	movs	r0, #28
 8003cd8:	f7fe fb98 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cdc:	2000      	movs	r0, #0
 8003cde:	f7fe fb95 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8003ce2:	2021      	movs	r0, #33	; 0x21
 8003ce4:	f7fe fb92 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ce8:	2000      	movs	r0, #0
 8003cea:	f7fe fb8f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8003cee:	2036      	movs	r0, #54	; 0x36
 8003cf0:	f7fe fb8c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003cf4:	2000      	movs	r0, #0
 8003cf6:	f7fe fb89 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 8003cfa:	2046      	movs	r0, #70	; 0x46
 8003cfc:	f7fe fb86 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d00:	2000      	movs	r0, #0
 8003d02:	f7fe fb83 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 8003d06:	2052      	movs	r0, #82	; 0x52
 8003d08:	f7fe fb80 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d0c:	2000      	movs	r0, #0
 8003d0e:	f7fe fb7d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8003d12:	2064      	movs	r0, #100	; 0x64
 8003d14:	f7fe fb7a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d18:	2000      	movs	r0, #0
 8003d1a:	f7fe fb77 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8003d1e:	207a      	movs	r0, #122	; 0x7a
 8003d20:	f7fe fb74 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d24:	2000      	movs	r0, #0
 8003d26:	f7fe fb71 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8003d2a:	208b      	movs	r0, #139	; 0x8b
 8003d2c:	f7fe fb6e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d30:	2000      	movs	r0, #0
 8003d32:	f7fe fb6b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8003d36:	2099      	movs	r0, #153	; 0x99
 8003d38:	f7fe fb68 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d3c:	2000      	movs	r0, #0
 8003d3e:	f7fe fb65 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8003d42:	20a8      	movs	r0, #168	; 0xa8
 8003d44:	f7fe fb62 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d48:	2000      	movs	r0, #0
 8003d4a:	f7fe fb5f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8003d4e:	20b9      	movs	r0, #185	; 0xb9
 8003d50:	f7fe fb5c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d54:	2000      	movs	r0, #0
 8003d56:	f7fe fb59 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8003d5a:	20c4      	movs	r0, #196	; 0xc4
 8003d5c:	f7fe fb56 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d60:	2000      	movs	r0, #0
 8003d62:	f7fe fb53 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8003d66:	20ca      	movs	r0, #202	; 0xca
 8003d68:	f7fe fb50 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d6c:	2000      	movs	r0, #0
 8003d6e:	f7fe fb4d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8003d72:	20d2      	movs	r0, #210	; 0xd2
 8003d74:	f7fe fb4a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d78:	2000      	movs	r0, #0
 8003d7a:	f7fe fb47 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 8003d7e:	20d9      	movs	r0, #217	; 0xd9
 8003d80:	f7fe fb44 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d84:	2000      	movs	r0, #0
 8003d86:	f7fe fb41 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8003d8a:	20e0      	movs	r0, #224	; 0xe0
 8003d8c:	f7fe fb3e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d90:	2000      	movs	r0, #0
 8003d92:	f7fe fb3b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8003d96:	20f3      	movs	r0, #243	; 0xf3
 8003d98:	f7fe fb38 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003d9c:	2000      	movs	r0, #0
 8003d9e:	f7fe fb35 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 8003da2:	20e1      	movs	r0, #225	; 0xe1
 8003da4:	f7fe fb1e 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8003da8:	2016      	movs	r0, #22
 8003daa:	f7fe fb2f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dae:	2000      	movs	r0, #0
 8003db0:	f7fe fb2c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8003db4:	201c      	movs	r0, #28
 8003db6:	f7fe fb29 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dba:	2000      	movs	r0, #0
 8003dbc:	f7fe fb26 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 8003dc0:	2022      	movs	r0, #34	; 0x22
 8003dc2:	f7fe fb23 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dc6:	2000      	movs	r0, #0
 8003dc8:	f7fe fb20 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8003dcc:	2036      	movs	r0, #54	; 0x36
 8003dce:	f7fe fb1d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	f7fe fb1a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8003dd8:	2045      	movs	r0, #69	; 0x45
 8003dda:	f7fe fb17 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dde:	2000      	movs	r0, #0
 8003de0:	f7fe fb14 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 8003de4:	2052      	movs	r0, #82	; 0x52
 8003de6:	f7fe fb11 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003dea:	2000      	movs	r0, #0
 8003dec:	f7fe fb0e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8003df0:	2064      	movs	r0, #100	; 0x64
 8003df2:	f7fe fb0b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003df6:	2000      	movs	r0, #0
 8003df8:	f7fe fb08 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8003dfc:	207a      	movs	r0, #122	; 0x7a
 8003dfe:	f7fe fb05 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e02:	2000      	movs	r0, #0
 8003e04:	f7fe fb02 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8003e08:	208b      	movs	r0, #139	; 0x8b
 8003e0a:	f7fe faff 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e0e:	2000      	movs	r0, #0
 8003e10:	f7fe fafc 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8003e14:	2099      	movs	r0, #153	; 0x99
 8003e16:	f7fe faf9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e1a:	2000      	movs	r0, #0
 8003e1c:	f7fe faf6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8003e20:	20a8      	movs	r0, #168	; 0xa8
 8003e22:	f7fe faf3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e26:	2000      	movs	r0, #0
 8003e28:	f7fe faf0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8003e2c:	20b9      	movs	r0, #185	; 0xb9
 8003e2e:	f7fe faed 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e32:	2000      	movs	r0, #0
 8003e34:	f7fe faea 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8003e38:	20c4      	movs	r0, #196	; 0xc4
 8003e3a:	f7fe fae7 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e3e:	2000      	movs	r0, #0
 8003e40:	f7fe fae4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8003e44:	20ca      	movs	r0, #202	; 0xca
 8003e46:	f7fe fae1 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	f7fe fade 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8003e50:	20d2      	movs	r0, #210	; 0xd2
 8003e52:	f7fe fadb 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e56:	2000      	movs	r0, #0
 8003e58:	f7fe fad8 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 8003e5c:	20d8      	movs	r0, #216	; 0xd8
 8003e5e:	f7fe fad5 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e62:	2000      	movs	r0, #0
 8003e64:	f7fe fad2 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8003e68:	20e0      	movs	r0, #224	; 0xe0
 8003e6a:	f7fe facf 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e6e:	2000      	movs	r0, #0
 8003e70:	f7fe facc 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8003e74:	20f3      	movs	r0, #243	; 0xf3
 8003e76:	f7fe fac9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e7a:	2000      	movs	r0, #0
 8003e7c:	f7fe fac6 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 8003e80:	20e2      	movs	r0, #226	; 0xe2
 8003e82:	f7fe faaf 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8003e86:	2005      	movs	r0, #5
 8003e88:	f7fe fac0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	f7fe fabd 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 8003e92:	200b      	movs	r0, #11
 8003e94:	f7fe faba 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003e98:	2000      	movs	r0, #0
 8003e9a:	f7fe fab7 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 8003e9e:	201b      	movs	r0, #27
 8003ea0:	f7fe fab4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ea4:	2000      	movs	r0, #0
 8003ea6:	f7fe fab1 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8003eaa:	2034      	movs	r0, #52	; 0x34
 8003eac:	f7fe faae 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	f7fe faab 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003eb6:	2044      	movs	r0, #68	; 0x44
 8003eb8:	f7fe faa8 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	f7fe faa5 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 8003ec2:	204f      	movs	r0, #79	; 0x4f
 8003ec4:	f7fe faa2 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ec8:	2000      	movs	r0, #0
 8003eca:	f7fe fa9f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 8003ece:	2061      	movs	r0, #97	; 0x61
 8003ed0:	f7fe fa9c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	f7fe fa99 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 8003eda:	2079      	movs	r0, #121	; 0x79
 8003edc:	f7fe fa96 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	f7fe fa93 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8003ee6:	2088      	movs	r0, #136	; 0x88
 8003ee8:	f7fe fa90 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003eec:	2000      	movs	r0, #0
 8003eee:	f7fe fa8d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8003ef2:	2097      	movs	r0, #151	; 0x97
 8003ef4:	f7fe fa8a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ef8:	2000      	movs	r0, #0
 8003efa:	f7fe fa87 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8003efe:	20a6      	movs	r0, #166	; 0xa6
 8003f00:	f7fe fa84 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f04:	2000      	movs	r0, #0
 8003f06:	f7fe fa81 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8003f0a:	20b7      	movs	r0, #183	; 0xb7
 8003f0c:	f7fe fa7e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f10:	2000      	movs	r0, #0
 8003f12:	f7fe fa7b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8003f16:	20c2      	movs	r0, #194	; 0xc2
 8003f18:	f7fe fa78 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f1c:	2000      	movs	r0, #0
 8003f1e:	f7fe fa75 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8003f22:	20c7      	movs	r0, #199	; 0xc7
 8003f24:	f7fe fa72 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f28:	2000      	movs	r0, #0
 8003f2a:	f7fe fa6f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8003f2e:	20d1      	movs	r0, #209	; 0xd1
 8003f30:	f7fe fa6c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f34:	2000      	movs	r0, #0
 8003f36:	f7fe fa69 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 8003f3a:	20d6      	movs	r0, #214	; 0xd6
 8003f3c:	f7fe fa66 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f40:	2000      	movs	r0, #0
 8003f42:	f7fe fa63 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8003f46:	20dd      	movs	r0, #221	; 0xdd
 8003f48:	f7fe fa60 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f4c:	2000      	movs	r0, #0
 8003f4e:	f7fe fa5d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8003f52:	20f3      	movs	r0, #243	; 0xf3
 8003f54:	f7fe fa5a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f58:	2000      	movs	r0, #0
 8003f5a:	f7fe fa57 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 8003f5e:	20e3      	movs	r0, #227	; 0xe3
 8003f60:	f7fe fa40 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8003f64:	2005      	movs	r0, #5
 8003f66:	f7fe fa51 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f6a:	2000      	movs	r0, #0
 8003f6c:	f7fe fa4e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 8003f70:	200a      	movs	r0, #10
 8003f72:	f7fe fa4b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f76:	2000      	movs	r0, #0
 8003f78:	f7fe fa48 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8003f7c:	201c      	movs	r0, #28
 8003f7e:	f7fe fa45 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f82:	2000      	movs	r0, #0
 8003f84:	f7fe fa42 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8003f88:	2033      	movs	r0, #51	; 0x33
 8003f8a:	f7fe fa3f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f8e:	2000      	movs	r0, #0
 8003f90:	f7fe fa3c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8003f94:	2044      	movs	r0, #68	; 0x44
 8003f96:	f7fe fa39 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	f7fe fa36 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8003fa0:	2050      	movs	r0, #80	; 0x50
 8003fa2:	f7fe fa33 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	f7fe fa30 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 8003fac:	2062      	movs	r0, #98	; 0x62
 8003fae:	f7fe fa2d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	f7fe fa2a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 8003fb8:	2078      	movs	r0, #120	; 0x78
 8003fba:	f7fe fa27 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	f7fe fa24 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8003fc4:	2088      	movs	r0, #136	; 0x88
 8003fc6:	f7fe fa21 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fca:	2000      	movs	r0, #0
 8003fcc:	f7fe fa1e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8003fd0:	2097      	movs	r0, #151	; 0x97
 8003fd2:	f7fe fa1b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fd6:	2000      	movs	r0, #0
 8003fd8:	f7fe fa18 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8003fdc:	20a6      	movs	r0, #166	; 0xa6
 8003fde:	f7fe fa15 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	f7fe fa12 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 8003fe8:	20b7      	movs	r0, #183	; 0xb7
 8003fea:	f7fe fa0f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003fee:	2000      	movs	r0, #0
 8003ff0:	f7fe fa0c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8003ff4:	20c2      	movs	r0, #194	; 0xc2
 8003ff6:	f7fe fa09 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003ffa:	2000      	movs	r0, #0
 8003ffc:	f7fe fa06 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8004000:	20c7      	movs	r0, #199	; 0xc7
 8004002:	f7fe fa03 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004006:	2000      	movs	r0, #0
 8004008:	f7fe fa00 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 800400c:	20d1      	movs	r0, #209	; 0xd1
 800400e:	f7fe f9fd 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004012:	2000      	movs	r0, #0
 8004014:	f7fe f9fa 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 8004018:	20d5      	movs	r0, #213	; 0xd5
 800401a:	f7fe f9f7 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800401e:	2000      	movs	r0, #0
 8004020:	f7fe f9f4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8004024:	20dd      	movs	r0, #221	; 0xdd
 8004026:	f7fe f9f1 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800402a:	2000      	movs	r0, #0
 800402c:	f7fe f9ee 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8004030:	20f3      	movs	r0, #243	; 0xf3
 8004032:	f7fe f9eb 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004036:	2000      	movs	r0, #0
 8004038:	f7fe f9e8 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 800403c:	20e4      	movs	r0, #228	; 0xe4
 800403e:	f7fe f9d1 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8004042:	2001      	movs	r0, #1
 8004044:	f7fe f9e2 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004048:	2000      	movs	r0, #0
 800404a:	f7fe f9df 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 800404e:	2001      	movs	r0, #1
 8004050:	f7fe f9dc 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004054:	2000      	movs	r0, #0
 8004056:	f7fe f9d9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800405a:	2002      	movs	r0, #2
 800405c:	f7fe f9d6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004060:	2000      	movs	r0, #0
 8004062:	f7fe f9d3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8004066:	202a      	movs	r0, #42	; 0x2a
 8004068:	f7fe f9d0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800406c:	2000      	movs	r0, #0
 800406e:	f7fe f9cd 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8004072:	203c      	movs	r0, #60	; 0x3c
 8004074:	f7fe f9ca 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004078:	2000      	movs	r0, #0
 800407a:	f7fe f9c7 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 800407e:	204b      	movs	r0, #75	; 0x4b
 8004080:	f7fe f9c4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004084:	2000      	movs	r0, #0
 8004086:	f7fe f9c1 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 800408a:	205d      	movs	r0, #93	; 0x5d
 800408c:	f7fe f9be 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004090:	2000      	movs	r0, #0
 8004092:	f7fe f9bb 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8004096:	2074      	movs	r0, #116	; 0x74
 8004098:	f7fe f9b8 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800409c:	2000      	movs	r0, #0
 800409e:	f7fe f9b5 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 80040a2:	2084      	movs	r0, #132	; 0x84
 80040a4:	f7fe f9b2 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040a8:	2000      	movs	r0, #0
 80040aa:	f7fe f9af 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 80040ae:	2093      	movs	r0, #147	; 0x93
 80040b0:	f7fe f9ac 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040b4:	2000      	movs	r0, #0
 80040b6:	f7fe f9a9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80040ba:	20a2      	movs	r0, #162	; 0xa2
 80040bc:	f7fe f9a6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040c0:	2000      	movs	r0, #0
 80040c2:	f7fe f9a3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 80040c6:	20b3      	movs	r0, #179	; 0xb3
 80040c8:	f7fe f9a0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040cc:	2000      	movs	r0, #0
 80040ce:	f7fe f99d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 80040d2:	20be      	movs	r0, #190	; 0xbe
 80040d4:	f7fe f99a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040d8:	2000      	movs	r0, #0
 80040da:	f7fe f997 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 80040de:	20c4      	movs	r0, #196	; 0xc4
 80040e0:	f7fe f994 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040e4:	2000      	movs	r0, #0
 80040e6:	f7fe f991 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80040ea:	20cd      	movs	r0, #205	; 0xcd
 80040ec:	f7fe f98e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040f0:	2000      	movs	r0, #0
 80040f2:	f7fe f98b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80040f6:	20d3      	movs	r0, #211	; 0xd3
 80040f8:	f7fe f988 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80040fc:	2000      	movs	r0, #0
 80040fe:	f7fe f985 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8004102:	20dd      	movs	r0, #221	; 0xdd
 8004104:	f7fe f982 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004108:	2000      	movs	r0, #0
 800410a:	f7fe f97f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 800410e:	20f3      	movs	r0, #243	; 0xf3
 8004110:	f7fe f97c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004114:	2000      	movs	r0, #0
 8004116:	f7fe f979 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 800411a:	20e5      	movs	r0, #229	; 0xe5
 800411c:	f7fe f962 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004120:	2000      	movs	r0, #0
 8004122:	f7fe f973 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004126:	2000      	movs	r0, #0
 8004128:	f7fe f970 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800412c:	2000      	movs	r0, #0
 800412e:	f7fe f96d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004132:	2000      	movs	r0, #0
 8004134:	f7fe f96a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8004138:	2002      	movs	r0, #2
 800413a:	f7fe f967 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800413e:	2000      	movs	r0, #0
 8004140:	f7fe f964 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8004144:	2029      	movs	r0, #41	; 0x29
 8004146:	f7fe f961 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800414a:	2000      	movs	r0, #0
 800414c:	f7fe f95e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8004150:	203c      	movs	r0, #60	; 0x3c
 8004152:	f7fe f95b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004156:	2000      	movs	r0, #0
 8004158:	f7fe f958 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 800415c:	204b      	movs	r0, #75	; 0x4b
 800415e:	f7fe f955 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004162:	2000      	movs	r0, #0
 8004164:	f7fe f952 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8004168:	205d      	movs	r0, #93	; 0x5d
 800416a:	f7fe f94f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800416e:	2000      	movs	r0, #0
 8004170:	f7fe f94c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8004174:	2074      	movs	r0, #116	; 0x74
 8004176:	f7fe f949 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800417a:	2000      	movs	r0, #0
 800417c:	f7fe f946 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8004180:	2084      	movs	r0, #132	; 0x84
 8004182:	f7fe f943 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004186:	2000      	movs	r0, #0
 8004188:	f7fe f940 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 800418c:	2093      	movs	r0, #147	; 0x93
 800418e:	f7fe f93d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004192:	2000      	movs	r0, #0
 8004194:	f7fe f93a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8004198:	20a2      	movs	r0, #162	; 0xa2
 800419a:	f7fe f937 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800419e:	2000      	movs	r0, #0
 80041a0:	f7fe f934 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 80041a4:	20b3      	movs	r0, #179	; 0xb3
 80041a6:	f7fe f931 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041aa:	2000      	movs	r0, #0
 80041ac:	f7fe f92e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 80041b0:	20be      	movs	r0, #190	; 0xbe
 80041b2:	f7fe f92b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041b6:	2000      	movs	r0, #0
 80041b8:	f7fe f928 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 80041bc:	20c4      	movs	r0, #196	; 0xc4
 80041be:	f7fe f925 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041c2:	2000      	movs	r0, #0
 80041c4:	f7fe f922 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80041c8:	20cd      	movs	r0, #205	; 0xcd
 80041ca:	f7fe f91f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041ce:	2000      	movs	r0, #0
 80041d0:	f7fe f91c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80041d4:	20d3      	movs	r0, #211	; 0xd3
 80041d6:	f7fe f919 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041da:	2000      	movs	r0, #0
 80041dc:	f7fe f916 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 80041e0:	20dc      	movs	r0, #220	; 0xdc
 80041e2:	f7fe f913 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041e6:	2000      	movs	r0, #0
 80041e8:	f7fe f910 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80041ec:	20f3      	movs	r0, #243	; 0xf3
 80041ee:	f7fe f90d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80041f2:	2000      	movs	r0, #0
 80041f4:	f7fe f90a 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 80041f8:	20e6      	movs	r0, #230	; 0xe6
 80041fa:	f7fe f8f3 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 80041fe:	2011      	movs	r0, #17
 8004200:	f7fe f904 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004204:	2000      	movs	r0, #0
 8004206:	f7fe f901 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 800420a:	2034      	movs	r0, #52	; 0x34
 800420c:	f7fe f8fe 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004210:	2000      	movs	r0, #0
 8004212:	f7fe f8fb 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8004216:	2056      	movs	r0, #86	; 0x56
 8004218:	f7fe f8f8 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800421c:	2000      	movs	r0, #0
 800421e:	f7fe f8f5 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8004222:	2076      	movs	r0, #118	; 0x76
 8004224:	f7fe f8f2 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004228:	2000      	movs	r0, #0
 800422a:	f7fe f8ef 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 800422e:	2077      	movs	r0, #119	; 0x77
 8004230:	f7fe f8ec 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004234:	2000      	movs	r0, #0
 8004236:	f7fe f8e9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800423a:	2066      	movs	r0, #102	; 0x66
 800423c:	f7fe f8e6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004240:	2000      	movs	r0, #0
 8004242:	f7fe f8e3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8004246:	2088      	movs	r0, #136	; 0x88
 8004248:	f7fe f8e0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800424c:	2000      	movs	r0, #0
 800424e:	f7fe f8dd 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8004252:	2099      	movs	r0, #153	; 0x99
 8004254:	f7fe f8da 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004258:	2000      	movs	r0, #0
 800425a:	f7fe f8d7 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 800425e:	20bb      	movs	r0, #187	; 0xbb
 8004260:	f7fe f8d4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004264:	2000      	movs	r0, #0
 8004266:	f7fe f8d1 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800426a:	2099      	movs	r0, #153	; 0x99
 800426c:	f7fe f8ce 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004270:	2000      	movs	r0, #0
 8004272:	f7fe f8cb 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8004276:	2066      	movs	r0, #102	; 0x66
 8004278:	f7fe f8c8 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800427c:	2000      	movs	r0, #0
 800427e:	f7fe f8c5 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8004282:	2055      	movs	r0, #85	; 0x55
 8004284:	f7fe f8c2 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004288:	2000      	movs	r0, #0
 800428a:	f7fe f8bf 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800428e:	2055      	movs	r0, #85	; 0x55
 8004290:	f7fe f8bc 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004294:	2000      	movs	r0, #0
 8004296:	f7fe f8b9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 800429a:	2045      	movs	r0, #69	; 0x45
 800429c:	f7fe f8b6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042a0:	2000      	movs	r0, #0
 80042a2:	f7fe f8b3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 80042a6:	2043      	movs	r0, #67	; 0x43
 80042a8:	f7fe f8b0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042ac:	2000      	movs	r0, #0
 80042ae:	f7fe f8ad 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80042b2:	2044      	movs	r0, #68	; 0x44
 80042b4:	f7fe f8aa 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042b8:	2000      	movs	r0, #0
 80042ba:	f7fe f8a7 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 80042be:	20e7      	movs	r0, #231	; 0xe7
 80042c0:	f7fe f890 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 80042c4:	2032      	movs	r0, #50	; 0x32
 80042c6:	f7fe f8a1 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042ca:	2000      	movs	r0, #0
 80042cc:	f7fe f89e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80042d0:	2055      	movs	r0, #85	; 0x55
 80042d2:	f7fe f89b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042d6:	2000      	movs	r0, #0
 80042d8:	f7fe f898 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80042dc:	2076      	movs	r0, #118	; 0x76
 80042de:	f7fe f895 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042e2:	2000      	movs	r0, #0
 80042e4:	f7fe f892 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80042e8:	2066      	movs	r0, #102	; 0x66
 80042ea:	f7fe f88f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042ee:	2000      	movs	r0, #0
 80042f0:	f7fe f88c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 80042f4:	2067      	movs	r0, #103	; 0x67
 80042f6:	f7fe f889 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80042fa:	2000      	movs	r0, #0
 80042fc:	f7fe f886 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8004300:	2067      	movs	r0, #103	; 0x67
 8004302:	f7fe f883 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004306:	2000      	movs	r0, #0
 8004308:	f7fe f880 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 800430c:	2087      	movs	r0, #135	; 0x87
 800430e:	f7fe f87d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004312:	2000      	movs	r0, #0
 8004314:	f7fe f87a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8004318:	2099      	movs	r0, #153	; 0x99
 800431a:	f7fe f877 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800431e:	2000      	movs	r0, #0
 8004320:	f7fe f874 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8004324:	20bb      	movs	r0, #187	; 0xbb
 8004326:	f7fe f871 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800432a:	2000      	movs	r0, #0
 800432c:	f7fe f86e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8004330:	2099      	movs	r0, #153	; 0x99
 8004332:	f7fe f86b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004336:	2000      	movs	r0, #0
 8004338:	f7fe f868 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 800433c:	2077      	movs	r0, #119	; 0x77
 800433e:	f7fe f865 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004342:	2000      	movs	r0, #0
 8004344:	f7fe f862 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8004348:	2044      	movs	r0, #68	; 0x44
 800434a:	f7fe f85f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800434e:	2000      	movs	r0, #0
 8004350:	f7fe f85c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8004354:	2056      	movs	r0, #86	; 0x56
 8004356:	f7fe f859 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800435a:	2000      	movs	r0, #0
 800435c:	f7fe f856 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8004360:	2023      	movs	r0, #35	; 0x23
 8004362:	f7fe f853 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004366:	2000      	movs	r0, #0
 8004368:	f7fe f850 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 800436c:	2033      	movs	r0, #51	; 0x33
 800436e:	f7fe f84d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004372:	2000      	movs	r0, #0
 8004374:	f7fe f84a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8004378:	2045      	movs	r0, #69	; 0x45
 800437a:	f7fe f847 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800437e:	2000      	movs	r0, #0
 8004380:	f7fe f844 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 8004384:	20e8      	movs	r0, #232	; 0xe8
 8004386:	f7fe f82d 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800438a:	2000      	movs	r0, #0
 800438c:	f7fe f83e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004390:	2000      	movs	r0, #0
 8004392:	f7fe f83b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8004396:	2099      	movs	r0, #153	; 0x99
 8004398:	f7fe f838 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800439c:	2000      	movs	r0, #0
 800439e:	f7fe f835 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 80043a2:	2087      	movs	r0, #135	; 0x87
 80043a4:	f7fe f832 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043a8:	2000      	movs	r0, #0
 80043aa:	f7fe f82f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80043ae:	2088      	movs	r0, #136	; 0x88
 80043b0:	f7fe f82c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043b4:	2000      	movs	r0, #0
 80043b6:	f7fe f829 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 80043ba:	2077      	movs	r0, #119	; 0x77
 80043bc:	f7fe f826 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043c0:	2000      	movs	r0, #0
 80043c2:	f7fe f823 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80043c6:	2066      	movs	r0, #102	; 0x66
 80043c8:	f7fe f820 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043cc:	2000      	movs	r0, #0
 80043ce:	f7fe f81d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80043d2:	2088      	movs	r0, #136	; 0x88
 80043d4:	f7fe f81a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043d8:	2000      	movs	r0, #0
 80043da:	f7fe f817 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 80043de:	20aa      	movs	r0, #170	; 0xaa
 80043e0:	f7fe f814 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043e4:	2000      	movs	r0, #0
 80043e6:	f7fe f811 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 80043ea:	20bb      	movs	r0, #187	; 0xbb
 80043ec:	f7fe f80e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043f0:	2000      	movs	r0, #0
 80043f2:	f7fe f80b 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80043f6:	2099      	movs	r0, #153	; 0x99
 80043f8:	f7fe f808 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80043fc:	2000      	movs	r0, #0
 80043fe:	f7fe f805 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8004402:	2066      	movs	r0, #102	; 0x66
 8004404:	f7fe f802 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004408:	2000      	movs	r0, #0
 800440a:	f7fd ffff 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800440e:	2055      	movs	r0, #85	; 0x55
 8004410:	f7fd fffc 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004414:	2000      	movs	r0, #0
 8004416:	f7fd fff9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800441a:	2055      	movs	r0, #85	; 0x55
 800441c:	f7fd fff6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004420:	2000      	movs	r0, #0
 8004422:	f7fd fff3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8004426:	2044      	movs	r0, #68	; 0x44
 8004428:	f7fd fff0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800442c:	2000      	movs	r0, #0
 800442e:	f7fd ffed 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8004432:	2044      	movs	r0, #68	; 0x44
 8004434:	f7fd ffea 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004438:	2000      	movs	r0, #0
 800443a:	f7fd ffe7 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800443e:	2055      	movs	r0, #85	; 0x55
 8004440:	f7fd ffe4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004444:	2000      	movs	r0, #0
 8004446:	f7fd ffe1 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 800444a:	20e9      	movs	r0, #233	; 0xe9
 800444c:	f7fd ffca 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8004450:	20aa      	movs	r0, #170	; 0xaa
 8004452:	f7fd ffdb 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004456:	2000      	movs	r0, #0
 8004458:	f7fd ffd8 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800445c:	2000      	movs	r0, #0
 800445e:	f7fd ffd5 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004462:	2000      	movs	r0, #0
 8004464:	f7fd ffd2 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 8004468:	2000      	movs	r0, #0
 800446a:	f7fd ffbb 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 800446e:	20aa      	movs	r0, #170	; 0xaa
 8004470:	f7fd ffcc 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 8004474:	20cf      	movs	r0, #207	; 0xcf
 8004476:	f7fd ffb5 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800447a:	2000      	movs	r0, #0
 800447c:	f7fd ffc6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004480:	2000      	movs	r0, #0
 8004482:	f7fd ffc3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004486:	2000      	movs	r0, #0
 8004488:	f7fd ffc0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800448c:	2000      	movs	r0, #0
 800448e:	f7fd ffbd 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004492:	2000      	movs	r0, #0
 8004494:	f7fd ffba 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004498:	2000      	movs	r0, #0
 800449a:	f7fd ffb7 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800449e:	2000      	movs	r0, #0
 80044a0:	f7fd ffb4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044a4:	2000      	movs	r0, #0
 80044a6:	f7fd ffb1 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044aa:	2000      	movs	r0, #0
 80044ac:	f7fd ffae 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044b0:	2000      	movs	r0, #0
 80044b2:	f7fd ffab 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044b6:	2000      	movs	r0, #0
 80044b8:	f7fd ffa8 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044bc:	2000      	movs	r0, #0
 80044be:	f7fd ffa5 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044c2:	2000      	movs	r0, #0
 80044c4:	f7fd ffa2 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044c8:	2000      	movs	r0, #0
 80044ca:	f7fd ff9f 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044ce:	2000      	movs	r0, #0
 80044d0:	f7fd ff9c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044d4:	2000      	movs	r0, #0
 80044d6:	f7fd ff99 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044da:	2000      	movs	r0, #0
 80044dc:	f7fd ff96 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 80044e0:	20f0      	movs	r0, #240	; 0xf0
 80044e2:	f7fd ff7f 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80044e6:	2000      	movs	r0, #0
 80044e8:	f7fd ff90 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 80044ec:	2050      	movs	r0, #80	; 0x50
 80044ee:	f7fd ff8d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044f2:	2000      	movs	r0, #0
 80044f4:	f7fd ff8a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044f8:	2000      	movs	r0, #0
 80044fa:	f7fd ff87 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80044fe:	2000      	movs	r0, #0
 8004500:	f7fd ff84 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 8004504:	20f3      	movs	r0, #243	; 0xf3
 8004506:	f7fd ff6d 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800450a:	2000      	movs	r0, #0
 800450c:	f7fd ff7e 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 8004510:	20f9      	movs	r0, #249	; 0xf9
 8004512:	f7fd ff67 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 8004516:	2006      	movs	r0, #6
 8004518:	f7fd ff78 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 800451c:	2010      	movs	r0, #16
 800451e:	f7fd ff75 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8004522:	2029      	movs	r0, #41	; 0x29
 8004524:	f7fd ff72 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004528:	2000      	movs	r0, #0
 800452a:	f7fd ff6f 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 800452e:	203a      	movs	r0, #58	; 0x3a
 8004530:	f7fd ff58 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8004534:	2055      	movs	r0, #85	; 0x55
 8004536:	f7fd ff69 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 800453a:	2011      	movs	r0, #17
 800453c:	f7fd ff52 	bl	80023e4 <LCD_WR_REG>
		HAL_Delay(100);
 8004540:	2064      	movs	r0, #100	; 0x64
 8004542:	f004 fcff 	bl	8008f44 <HAL_Delay>
		LCD_WR_REG(0x29);
 8004546:	2029      	movs	r0, #41	; 0x29
 8004548:	f7fd ff4c 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 800454c:	2035      	movs	r0, #53	; 0x35
 800454e:	f7fd ff49 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004552:	2000      	movs	r0, #0
 8004554:	f7fd ff5a 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 8004558:	2051      	movs	r0, #81	; 0x51
 800455a:	f7fd ff43 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 800455e:	20ff      	movs	r0, #255	; 0xff
 8004560:	f7fd ff54 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8004564:	2053      	movs	r0, #83	; 0x53
 8004566:	f7fd ff3d 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 800456a:	202c      	movs	r0, #44	; 0x2c
 800456c:	f7fd ff4e 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 8004570:	2055      	movs	r0, #85	; 0x55
 8004572:	f7fd ff37 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 8004576:	2082      	movs	r0, #130	; 0x82
 8004578:	f7fd ff48 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800457c:	202c      	movs	r0, #44	; 0x2c
 800457e:	f7fd ff31 	bl	80023e4 <LCD_WR_REG>
 8004582:	f002 b8e8 	b.w	8006756 <LCD_Init+0x374e>
	}else if(lcddev.id==0x5510)
 8004586:	4b04      	ldr	r3, [pc, #16]	; (8004598 <LCD_Init+0x1590>)
 8004588:	889b      	ldrh	r3, [r3, #4]
 800458a:	f245 5210 	movw	r2, #21776	; 0x5510
 800458e:	4293      	cmp	r3, r2
 8004590:	f040 8782 	bne.w	8005498 <LCD_Init+0x2490>
 8004594:	e002      	b.n	800459c <LCD_Init+0x1594>
 8004596:	bf00      	nop
 8004598:	20000118 	.word	0x20000118
	{
		LCD_WriteReg(0xF000,0x55);
 800459c:	2155      	movs	r1, #85	; 0x55
 800459e:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80045a2:	f7fd ff59 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 80045a6:	21aa      	movs	r1, #170	; 0xaa
 80045a8:	f24f 0001 	movw	r0, #61441	; 0xf001
 80045ac:	f7fd ff54 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 80045b0:	2152      	movs	r1, #82	; 0x52
 80045b2:	f24f 0002 	movw	r0, #61442	; 0xf002
 80045b6:	f7fd ff4f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 80045ba:	2108      	movs	r1, #8
 80045bc:	f24f 0003 	movw	r0, #61443	; 0xf003
 80045c0:	f7fd ff4a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 80045c4:	2101      	movs	r1, #1
 80045c6:	f24f 0004 	movw	r0, #61444	; 0xf004
 80045ca:	f7fd ff45 	bl	8002458 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 80045ce:	210d      	movs	r1, #13
 80045d0:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 80045d4:	f7fd ff40 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 80045d8:	210d      	movs	r1, #13
 80045da:	f24b 0001 	movw	r0, #45057	; 0xb001
 80045de:	f7fd ff3b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 80045e2:	210d      	movs	r1, #13
 80045e4:	f24b 0002 	movw	r0, #45058	; 0xb002
 80045e8:	f7fd ff36 	bl	8002458 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 80045ec:	2134      	movs	r1, #52	; 0x34
 80045ee:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80045f2:	f7fd ff31 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 80045f6:	2134      	movs	r1, #52	; 0x34
 80045f8:	f24b 6001 	movw	r0, #46593	; 0xb601
 80045fc:	f7fd ff2c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 8004600:	2134      	movs	r1, #52	; 0x34
 8004602:	f24b 6002 	movw	r0, #46594	; 0xb602
 8004606:	f7fd ff27 	bl	8002458 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 800460a:	210d      	movs	r1, #13
 800460c:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8004610:	f7fd ff22 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8004614:	210d      	movs	r1, #13
 8004616:	f24b 1001 	movw	r0, #45313	; 0xb101
 800461a:	f7fd ff1d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 800461e:	210d      	movs	r1, #13
 8004620:	f24b 1002 	movw	r0, #45314	; 0xb102
 8004624:	f7fd ff18 	bl	8002458 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 8004628:	2134      	movs	r1, #52	; 0x34
 800462a:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 800462e:	f7fd ff13 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8004632:	2134      	movs	r1, #52	; 0x34
 8004634:	f24b 7001 	movw	r0, #46849	; 0xb701
 8004638:	f7fd ff0e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 800463c:	2134      	movs	r1, #52	; 0x34
 800463e:	f24b 7002 	movw	r0, #46850	; 0xb702
 8004642:	f7fd ff09 	bl	8002458 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 8004646:	2100      	movs	r1, #0
 8004648:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 800464c:	f7fd ff04 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8004650:	2100      	movs	r1, #0
 8004652:	f24b 2001 	movw	r0, #45569	; 0xb201
 8004656:	f7fd feff 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 800465a:	2100      	movs	r1, #0
 800465c:	f24b 2002 	movw	r0, #45570	; 0xb202
 8004660:	f7fd fefa 	bl	8002458 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8004664:	2124      	movs	r1, #36	; 0x24
 8004666:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 800466a:	f7fd fef5 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 800466e:	2124      	movs	r1, #36	; 0x24
 8004670:	f64b 0001 	movw	r0, #47105	; 0xb801
 8004674:	f7fd fef0 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8004678:	2124      	movs	r1, #36	; 0x24
 800467a:	f64b 0002 	movw	r0, #47106	; 0xb802
 800467e:	f7fd feeb 	bl	8002458 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 8004682:	2101      	movs	r1, #1
 8004684:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8004688:	f7fd fee6 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 800468c:	210f      	movs	r1, #15
 800468e:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8004692:	f7fd fee1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 8004696:	210f      	movs	r1, #15
 8004698:	f24b 3001 	movw	r0, #45825	; 0xb301
 800469c:	f7fd fedc 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 80046a0:	210f      	movs	r1, #15
 80046a2:	f24b 3002 	movw	r0, #45826	; 0xb302
 80046a6:	f7fd fed7 	bl	8002458 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 80046aa:	2134      	movs	r1, #52	; 0x34
 80046ac:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 80046b0:	f7fd fed2 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 80046b4:	2134      	movs	r1, #52	; 0x34
 80046b6:	f64b 1001 	movw	r0, #47361	; 0xb901
 80046ba:	f7fd fecd 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 80046be:	2134      	movs	r1, #52	; 0x34
 80046c0:	f64b 1002 	movw	r0, #47362	; 0xb902
 80046c4:	f7fd fec8 	bl	8002458 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 80046c8:	2108      	movs	r1, #8
 80046ca:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 80046ce:	f7fd fec3 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 80046d2:	2108      	movs	r1, #8
 80046d4:	f24b 5001 	movw	r0, #46337	; 0xb501
 80046d8:	f7fd febe 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 80046dc:	2108      	movs	r1, #8
 80046de:	f24b 5002 	movw	r0, #46338	; 0xb502
 80046e2:	f7fd feb9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 80046e6:	2103      	movs	r1, #3
 80046e8:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 80046ec:	f7fd feb4 	bl	8002458 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 80046f0:	2124      	movs	r1, #36	; 0x24
 80046f2:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 80046f6:	f7fd feaf 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 80046fa:	2124      	movs	r1, #36	; 0x24
 80046fc:	f64b 2001 	movw	r0, #47617	; 0xba01
 8004700:	f7fd feaa 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8004704:	2124      	movs	r1, #36	; 0x24
 8004706:	f64b 2002 	movw	r0, #47618	; 0xba02
 800470a:	f7fd fea5 	bl	8002458 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 800470e:	2100      	movs	r1, #0
 8004710:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8004714:	f7fd fea0 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 8004718:	2178      	movs	r1, #120	; 0x78
 800471a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800471e:	f7fd fe9b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8004722:	2100      	movs	r1, #0
 8004724:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8004728:	f7fd fe96 	bl	8002458 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 800472c:	2100      	movs	r1, #0
 800472e:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8004732:	f7fd fe91 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 8004736:	2178      	movs	r1, #120	; 0x78
 8004738:	f64b 5001 	movw	r0, #48385	; 0xbd01
 800473c:	f7fd fe8c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8004740:	2100      	movs	r1, #0
 8004742:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8004746:	f7fd fe87 	bl	8002458 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 800474a:	2100      	movs	r1, #0
 800474c:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8004750:	f7fd fe82 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 8004754:	2164      	movs	r1, #100	; 0x64
 8004756:	f64b 6001 	movw	r0, #48641	; 0xbe01
 800475a:	f7fd fe7d 	bl	8002458 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 800475e:	2100      	movs	r1, #0
 8004760:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8004764:	f7fd fe78 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8004768:	2133      	movs	r1, #51	; 0x33
 800476a:	f24d 1001 	movw	r0, #53505	; 0xd101
 800476e:	f7fd fe73 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 8004772:	2100      	movs	r1, #0
 8004774:	f24d 1002 	movw	r0, #53506	; 0xd102
 8004778:	f7fd fe6e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 800477c:	2134      	movs	r1, #52	; 0x34
 800477e:	f24d 1003 	movw	r0, #53507	; 0xd103
 8004782:	f7fd fe69 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 8004786:	2100      	movs	r1, #0
 8004788:	f24d 1004 	movw	r0, #53508	; 0xd104
 800478c:	f7fd fe64 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 8004790:	213a      	movs	r1, #58	; 0x3a
 8004792:	f24d 1005 	movw	r0, #53509	; 0xd105
 8004796:	f7fd fe5f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 800479a:	2100      	movs	r1, #0
 800479c:	f24d 1006 	movw	r0, #53510	; 0xd106
 80047a0:	f7fd fe5a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 80047a4:	214a      	movs	r1, #74	; 0x4a
 80047a6:	f24d 1007 	movw	r0, #53511	; 0xd107
 80047aa:	f7fd fe55 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 80047ae:	2100      	movs	r1, #0
 80047b0:	f24d 1008 	movw	r0, #53512	; 0xd108
 80047b4:	f7fd fe50 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 80047b8:	215c      	movs	r1, #92	; 0x5c
 80047ba:	f24d 1009 	movw	r0, #53513	; 0xd109
 80047be:	f7fd fe4b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 80047c2:	2100      	movs	r1, #0
 80047c4:	f24d 100a 	movw	r0, #53514	; 0xd10a
 80047c8:	f7fd fe46 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 80047cc:	2181      	movs	r1, #129	; 0x81
 80047ce:	f24d 100b 	movw	r0, #53515	; 0xd10b
 80047d2:	f7fd fe41 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 80047d6:	2100      	movs	r1, #0
 80047d8:	f24d 100c 	movw	r0, #53516	; 0xd10c
 80047dc:	f7fd fe3c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 80047e0:	21a6      	movs	r1, #166	; 0xa6
 80047e2:	f24d 100d 	movw	r0, #53517	; 0xd10d
 80047e6:	f7fd fe37 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 80047ea:	2100      	movs	r1, #0
 80047ec:	f24d 100e 	movw	r0, #53518	; 0xd10e
 80047f0:	f7fd fe32 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 80047f4:	21e5      	movs	r1, #229	; 0xe5
 80047f6:	f24d 100f 	movw	r0, #53519	; 0xd10f
 80047fa:	f7fd fe2d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 80047fe:	2101      	movs	r1, #1
 8004800:	f24d 1010 	movw	r0, #53520	; 0xd110
 8004804:	f7fd fe28 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 8004808:	2113      	movs	r1, #19
 800480a:	f24d 1011 	movw	r0, #53521	; 0xd111
 800480e:	f7fd fe23 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8004812:	2101      	movs	r1, #1
 8004814:	f24d 1012 	movw	r0, #53522	; 0xd112
 8004818:	f7fd fe1e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 800481c:	2154      	movs	r1, #84	; 0x54
 800481e:	f24d 1013 	movw	r0, #53523	; 0xd113
 8004822:	f7fd fe19 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 8004826:	2101      	movs	r1, #1
 8004828:	f24d 1014 	movw	r0, #53524	; 0xd114
 800482c:	f7fd fe14 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8004830:	2182      	movs	r1, #130	; 0x82
 8004832:	f24d 1015 	movw	r0, #53525	; 0xd115
 8004836:	f7fd fe0f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 800483a:	2101      	movs	r1, #1
 800483c:	f24d 1016 	movw	r0, #53526	; 0xd116
 8004840:	f7fd fe0a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8004844:	21ca      	movs	r1, #202	; 0xca
 8004846:	f24d 1017 	movw	r0, #53527	; 0xd117
 800484a:	f7fd fe05 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 800484e:	2102      	movs	r1, #2
 8004850:	f24d 1018 	movw	r0, #53528	; 0xd118
 8004854:	f7fd fe00 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8004858:	2100      	movs	r1, #0
 800485a:	f24d 1019 	movw	r0, #53529	; 0xd119
 800485e:	f7fd fdfb 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 8004862:	2102      	movs	r1, #2
 8004864:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8004868:	f7fd fdf6 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 800486c:	2101      	movs	r1, #1
 800486e:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8004872:	f7fd fdf1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 8004876:	2102      	movs	r1, #2
 8004878:	f24d 101c 	movw	r0, #53532	; 0xd11c
 800487c:	f7fd fdec 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 8004880:	2134      	movs	r1, #52	; 0x34
 8004882:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8004886:	f7fd fde7 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 800488a:	2102      	movs	r1, #2
 800488c:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8004890:	f7fd fde2 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 8004894:	2167      	movs	r1, #103	; 0x67
 8004896:	f24d 101f 	movw	r0, #53535	; 0xd11f
 800489a:	f7fd fddd 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 800489e:	2102      	movs	r1, #2
 80048a0:	f24d 1020 	movw	r0, #53536	; 0xd120
 80048a4:	f7fd fdd8 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 80048a8:	2184      	movs	r1, #132	; 0x84
 80048aa:	f24d 1021 	movw	r0, #53537	; 0xd121
 80048ae:	f7fd fdd3 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 80048b2:	2102      	movs	r1, #2
 80048b4:	f24d 1022 	movw	r0, #53538	; 0xd122
 80048b8:	f7fd fdce 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 80048bc:	21a4      	movs	r1, #164	; 0xa4
 80048be:	f24d 1023 	movw	r0, #53539	; 0xd123
 80048c2:	f7fd fdc9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 80048c6:	2102      	movs	r1, #2
 80048c8:	f24d 1024 	movw	r0, #53540	; 0xd124
 80048cc:	f7fd fdc4 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 80048d0:	21b7      	movs	r1, #183	; 0xb7
 80048d2:	f24d 1025 	movw	r0, #53541	; 0xd125
 80048d6:	f7fd fdbf 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 80048da:	2102      	movs	r1, #2
 80048dc:	f24d 1026 	movw	r0, #53542	; 0xd126
 80048e0:	f7fd fdba 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 80048e4:	21cf      	movs	r1, #207	; 0xcf
 80048e6:	f24d 1027 	movw	r0, #53543	; 0xd127
 80048ea:	f7fd fdb5 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 80048ee:	2102      	movs	r1, #2
 80048f0:	f24d 1028 	movw	r0, #53544	; 0xd128
 80048f4:	f7fd fdb0 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 80048f8:	21de      	movs	r1, #222	; 0xde
 80048fa:	f24d 1029 	movw	r0, #53545	; 0xd129
 80048fe:	f7fd fdab 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8004902:	2102      	movs	r1, #2
 8004904:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8004908:	f7fd fda6 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 800490c:	21f2      	movs	r1, #242	; 0xf2
 800490e:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8004912:	f7fd fda1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 8004916:	2102      	movs	r1, #2
 8004918:	f24d 102c 	movw	r0, #53548	; 0xd12c
 800491c:	f7fd fd9c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8004920:	21fe      	movs	r1, #254	; 0xfe
 8004922:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8004926:	f7fd fd97 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 800492a:	2103      	movs	r1, #3
 800492c:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8004930:	f7fd fd92 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8004934:	2110      	movs	r1, #16
 8004936:	f24d 102f 	movw	r0, #53551	; 0xd12f
 800493a:	f7fd fd8d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 800493e:	2103      	movs	r1, #3
 8004940:	f24d 1030 	movw	r0, #53552	; 0xd130
 8004944:	f7fd fd88 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8004948:	2133      	movs	r1, #51	; 0x33
 800494a:	f24d 1031 	movw	r0, #53553	; 0xd131
 800494e:	f7fd fd83 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 8004952:	2103      	movs	r1, #3
 8004954:	f24d 1032 	movw	r0, #53554	; 0xd132
 8004958:	f7fd fd7e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 800495c:	216d      	movs	r1, #109	; 0x6d
 800495e:	f24d 1033 	movw	r0, #53555	; 0xd133
 8004962:	f7fd fd79 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 8004966:	2100      	movs	r1, #0
 8004968:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 800496c:	f7fd fd74 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8004970:	2133      	movs	r1, #51	; 0x33
 8004972:	f24d 2001 	movw	r0, #53761	; 0xd201
 8004976:	f7fd fd6f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 800497a:	2100      	movs	r1, #0
 800497c:	f24d 2002 	movw	r0, #53762	; 0xd202
 8004980:	f7fd fd6a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 8004984:	2134      	movs	r1, #52	; 0x34
 8004986:	f24d 2003 	movw	r0, #53763	; 0xd203
 800498a:	f7fd fd65 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 800498e:	2100      	movs	r1, #0
 8004990:	f24d 2004 	movw	r0, #53764	; 0xd204
 8004994:	f7fd fd60 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 8004998:	213a      	movs	r1, #58	; 0x3a
 800499a:	f24d 2005 	movw	r0, #53765	; 0xd205
 800499e:	f7fd fd5b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 80049a2:	2100      	movs	r1, #0
 80049a4:	f24d 2006 	movw	r0, #53766	; 0xd206
 80049a8:	f7fd fd56 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 80049ac:	214a      	movs	r1, #74	; 0x4a
 80049ae:	f24d 2007 	movw	r0, #53767	; 0xd207
 80049b2:	f7fd fd51 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 80049b6:	2100      	movs	r1, #0
 80049b8:	f24d 2008 	movw	r0, #53768	; 0xd208
 80049bc:	f7fd fd4c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 80049c0:	215c      	movs	r1, #92	; 0x5c
 80049c2:	f24d 2009 	movw	r0, #53769	; 0xd209
 80049c6:	f7fd fd47 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 80049ca:	2100      	movs	r1, #0
 80049cc:	f24d 200a 	movw	r0, #53770	; 0xd20a
 80049d0:	f7fd fd42 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 80049d4:	2181      	movs	r1, #129	; 0x81
 80049d6:	f24d 200b 	movw	r0, #53771	; 0xd20b
 80049da:	f7fd fd3d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 80049de:	2100      	movs	r1, #0
 80049e0:	f24d 200c 	movw	r0, #53772	; 0xd20c
 80049e4:	f7fd fd38 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 80049e8:	21a6      	movs	r1, #166	; 0xa6
 80049ea:	f24d 200d 	movw	r0, #53773	; 0xd20d
 80049ee:	f7fd fd33 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 80049f2:	2100      	movs	r1, #0
 80049f4:	f24d 200e 	movw	r0, #53774	; 0xd20e
 80049f8:	f7fd fd2e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 80049fc:	21e5      	movs	r1, #229	; 0xe5
 80049fe:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8004a02:	f7fd fd29 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 8004a06:	2101      	movs	r1, #1
 8004a08:	f24d 2010 	movw	r0, #53776	; 0xd210
 8004a0c:	f7fd fd24 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8004a10:	2113      	movs	r1, #19
 8004a12:	f24d 2011 	movw	r0, #53777	; 0xd211
 8004a16:	f7fd fd1f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	f24d 2012 	movw	r0, #53778	; 0xd212
 8004a20:	f7fd fd1a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8004a24:	2154      	movs	r1, #84	; 0x54
 8004a26:	f24d 2013 	movw	r0, #53779	; 0xd213
 8004a2a:	f7fd fd15 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 8004a2e:	2101      	movs	r1, #1
 8004a30:	f24d 2014 	movw	r0, #53780	; 0xd214
 8004a34:	f7fd fd10 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8004a38:	2182      	movs	r1, #130	; 0x82
 8004a3a:	f24d 2015 	movw	r0, #53781	; 0xd215
 8004a3e:	f7fd fd0b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8004a42:	2101      	movs	r1, #1
 8004a44:	f24d 2016 	movw	r0, #53782	; 0xd216
 8004a48:	f7fd fd06 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 8004a4c:	21ca      	movs	r1, #202	; 0xca
 8004a4e:	f24d 2017 	movw	r0, #53783	; 0xd217
 8004a52:	f7fd fd01 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 8004a56:	2102      	movs	r1, #2
 8004a58:	f24d 2018 	movw	r0, #53784	; 0xd218
 8004a5c:	f7fd fcfc 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8004a60:	2100      	movs	r1, #0
 8004a62:	f24d 2019 	movw	r0, #53785	; 0xd219
 8004a66:	f7fd fcf7 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 8004a6a:	2102      	movs	r1, #2
 8004a6c:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8004a70:	f7fd fcf2 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 8004a74:	2101      	movs	r1, #1
 8004a76:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8004a7a:	f7fd fced 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 8004a7e:	2102      	movs	r1, #2
 8004a80:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8004a84:	f7fd fce8 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 8004a88:	2134      	movs	r1, #52	; 0x34
 8004a8a:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8004a8e:	f7fd fce3 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 8004a92:	2102      	movs	r1, #2
 8004a94:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8004a98:	f7fd fcde 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 8004a9c:	2167      	movs	r1, #103	; 0x67
 8004a9e:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8004aa2:	f7fd fcd9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 8004aa6:	2102      	movs	r1, #2
 8004aa8:	f24d 2020 	movw	r0, #53792	; 0xd220
 8004aac:	f7fd fcd4 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 8004ab0:	2184      	movs	r1, #132	; 0x84
 8004ab2:	f24d 2021 	movw	r0, #53793	; 0xd221
 8004ab6:	f7fd fccf 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 8004aba:	2102      	movs	r1, #2
 8004abc:	f24d 2022 	movw	r0, #53794	; 0xd222
 8004ac0:	f7fd fcca 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 8004ac4:	21a4      	movs	r1, #164	; 0xa4
 8004ac6:	f24d 2023 	movw	r0, #53795	; 0xd223
 8004aca:	f7fd fcc5 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 8004ace:	2102      	movs	r1, #2
 8004ad0:	f24d 2024 	movw	r0, #53796	; 0xd224
 8004ad4:	f7fd fcc0 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 8004ad8:	21b7      	movs	r1, #183	; 0xb7
 8004ada:	f24d 2025 	movw	r0, #53797	; 0xd225
 8004ade:	f7fd fcbb 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 8004ae2:	2102      	movs	r1, #2
 8004ae4:	f24d 2026 	movw	r0, #53798	; 0xd226
 8004ae8:	f7fd fcb6 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 8004aec:	21cf      	movs	r1, #207	; 0xcf
 8004aee:	f24d 2027 	movw	r0, #53799	; 0xd227
 8004af2:	f7fd fcb1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 8004af6:	2102      	movs	r1, #2
 8004af8:	f24d 2028 	movw	r0, #53800	; 0xd228
 8004afc:	f7fd fcac 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8004b00:	21de      	movs	r1, #222	; 0xde
 8004b02:	f24d 2029 	movw	r0, #53801	; 0xd229
 8004b06:	f7fd fca7 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8004b10:	f7fd fca2 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8004b14:	21f2      	movs	r1, #242	; 0xf2
 8004b16:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8004b1a:	f7fd fc9d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 8004b1e:	2102      	movs	r1, #2
 8004b20:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8004b24:	f7fd fc98 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 8004b28:	21fe      	movs	r1, #254	; 0xfe
 8004b2a:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8004b2e:	f7fd fc93 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8004b32:	2103      	movs	r1, #3
 8004b34:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8004b38:	f7fd fc8e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 8004b3c:	2110      	movs	r1, #16
 8004b3e:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8004b42:	f7fd fc89 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 8004b46:	2103      	movs	r1, #3
 8004b48:	f24d 2030 	movw	r0, #53808	; 0xd230
 8004b4c:	f7fd fc84 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8004b50:	2133      	movs	r1, #51	; 0x33
 8004b52:	f24d 2031 	movw	r0, #53809	; 0xd231
 8004b56:	f7fd fc7f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 8004b5a:	2103      	movs	r1, #3
 8004b5c:	f24d 2032 	movw	r0, #53810	; 0xd232
 8004b60:	f7fd fc7a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 8004b64:	216d      	movs	r1, #109	; 0x6d
 8004b66:	f24d 2033 	movw	r0, #53811	; 0xd233
 8004b6a:	f7fd fc75 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 8004b6e:	2100      	movs	r1, #0
 8004b70:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8004b74:	f7fd fc70 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 8004b78:	2133      	movs	r1, #51	; 0x33
 8004b7a:	f24d 3001 	movw	r0, #54017	; 0xd301
 8004b7e:	f7fd fc6b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 8004b82:	2100      	movs	r1, #0
 8004b84:	f24d 3002 	movw	r0, #54018	; 0xd302
 8004b88:	f7fd fc66 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 8004b8c:	2134      	movs	r1, #52	; 0x34
 8004b8e:	f24d 3003 	movw	r0, #54019	; 0xd303
 8004b92:	f7fd fc61 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 8004b96:	2100      	movs	r1, #0
 8004b98:	f24d 3004 	movw	r0, #54020	; 0xd304
 8004b9c:	f7fd fc5c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 8004ba0:	213a      	movs	r1, #58	; 0x3a
 8004ba2:	f24d 3005 	movw	r0, #54021	; 0xd305
 8004ba6:	f7fd fc57 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 8004baa:	2100      	movs	r1, #0
 8004bac:	f24d 3006 	movw	r0, #54022	; 0xd306
 8004bb0:	f7fd fc52 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 8004bb4:	214a      	movs	r1, #74	; 0x4a
 8004bb6:	f24d 3007 	movw	r0, #54023	; 0xd307
 8004bba:	f7fd fc4d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	f24d 3008 	movw	r0, #54024	; 0xd308
 8004bc4:	f7fd fc48 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 8004bc8:	215c      	movs	r1, #92	; 0x5c
 8004bca:	f24d 3009 	movw	r0, #54025	; 0xd309
 8004bce:	f7fd fc43 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8004bd8:	f7fd fc3e 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 8004bdc:	2181      	movs	r1, #129	; 0x81
 8004bde:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8004be2:	f7fd fc39 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 8004be6:	2100      	movs	r1, #0
 8004be8:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8004bec:	f7fd fc34 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 8004bf0:	21a6      	movs	r1, #166	; 0xa6
 8004bf2:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8004bf6:	f7fd fc2f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8004c00:	f7fd fc2a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 8004c04:	21e5      	movs	r1, #229	; 0xe5
 8004c06:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8004c0a:	f7fd fc25 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 8004c0e:	2101      	movs	r1, #1
 8004c10:	f24d 3010 	movw	r0, #54032	; 0xd310
 8004c14:	f7fd fc20 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 8004c18:	2113      	movs	r1, #19
 8004c1a:	f24d 3011 	movw	r0, #54033	; 0xd311
 8004c1e:	f7fd fc1b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8004c22:	2101      	movs	r1, #1
 8004c24:	f24d 3012 	movw	r0, #54034	; 0xd312
 8004c28:	f7fd fc16 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 8004c2c:	2154      	movs	r1, #84	; 0x54
 8004c2e:	f24d 3013 	movw	r0, #54035	; 0xd313
 8004c32:	f7fd fc11 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 8004c36:	2101      	movs	r1, #1
 8004c38:	f24d 3014 	movw	r0, #54036	; 0xd314
 8004c3c:	f7fd fc0c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8004c40:	2182      	movs	r1, #130	; 0x82
 8004c42:	f24d 3015 	movw	r0, #54037	; 0xd315
 8004c46:	f7fd fc07 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	f24d 3016 	movw	r0, #54038	; 0xd316
 8004c50:	f7fd fc02 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 8004c54:	21ca      	movs	r1, #202	; 0xca
 8004c56:	f24d 3017 	movw	r0, #54039	; 0xd317
 8004c5a:	f7fd fbfd 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 8004c5e:	2102      	movs	r1, #2
 8004c60:	f24d 3018 	movw	r0, #54040	; 0xd318
 8004c64:	f7fd fbf8 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 8004c68:	2100      	movs	r1, #0
 8004c6a:	f24d 3019 	movw	r0, #54041	; 0xd319
 8004c6e:	f7fd fbf3 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 8004c72:	2102      	movs	r1, #2
 8004c74:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8004c78:	f7fd fbee 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8004c82:	f7fd fbe9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 8004c86:	2102      	movs	r1, #2
 8004c88:	f24d 301c 	movw	r0, #54044	; 0xd31c
 8004c8c:	f7fd fbe4 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 8004c90:	2134      	movs	r1, #52	; 0x34
 8004c92:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8004c96:	f7fd fbdf 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 8004c9a:	2102      	movs	r1, #2
 8004c9c:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8004ca0:	f7fd fbda 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 8004ca4:	2167      	movs	r1, #103	; 0x67
 8004ca6:	f24d 301f 	movw	r0, #54047	; 0xd31f
 8004caa:	f7fd fbd5 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 8004cae:	2102      	movs	r1, #2
 8004cb0:	f24d 3020 	movw	r0, #54048	; 0xd320
 8004cb4:	f7fd fbd0 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 8004cb8:	2184      	movs	r1, #132	; 0x84
 8004cba:	f24d 3021 	movw	r0, #54049	; 0xd321
 8004cbe:	f7fd fbcb 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 8004cc2:	2102      	movs	r1, #2
 8004cc4:	f24d 3022 	movw	r0, #54050	; 0xd322
 8004cc8:	f7fd fbc6 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 8004ccc:	21a4      	movs	r1, #164	; 0xa4
 8004cce:	f24d 3023 	movw	r0, #54051	; 0xd323
 8004cd2:	f7fd fbc1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 8004cd6:	2102      	movs	r1, #2
 8004cd8:	f24d 3024 	movw	r0, #54052	; 0xd324
 8004cdc:	f7fd fbbc 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 8004ce0:	21b7      	movs	r1, #183	; 0xb7
 8004ce2:	f24d 3025 	movw	r0, #54053	; 0xd325
 8004ce6:	f7fd fbb7 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 8004cea:	2102      	movs	r1, #2
 8004cec:	f24d 3026 	movw	r0, #54054	; 0xd326
 8004cf0:	f7fd fbb2 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 8004cf4:	21cf      	movs	r1, #207	; 0xcf
 8004cf6:	f24d 3027 	movw	r0, #54055	; 0xd327
 8004cfa:	f7fd fbad 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 8004cfe:	2102      	movs	r1, #2
 8004d00:	f24d 3028 	movw	r0, #54056	; 0xd328
 8004d04:	f7fd fba8 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 8004d08:	21de      	movs	r1, #222	; 0xde
 8004d0a:	f24d 3029 	movw	r0, #54057	; 0xd329
 8004d0e:	f7fd fba3 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 8004d12:	2102      	movs	r1, #2
 8004d14:	f24d 302a 	movw	r0, #54058	; 0xd32a
 8004d18:	f7fd fb9e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 8004d1c:	21f2      	movs	r1, #242	; 0xf2
 8004d1e:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8004d22:	f7fd fb99 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 8004d26:	2102      	movs	r1, #2
 8004d28:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8004d2c:	f7fd fb94 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8004d30:	21fe      	movs	r1, #254	; 0xfe
 8004d32:	f24d 302d 	movw	r0, #54061	; 0xd32d
 8004d36:	f7fd fb8f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 8004d3a:	2103      	movs	r1, #3
 8004d3c:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8004d40:	f7fd fb8a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8004d44:	2110      	movs	r1, #16
 8004d46:	f24d 302f 	movw	r0, #54063	; 0xd32f
 8004d4a:	f7fd fb85 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 8004d4e:	2103      	movs	r1, #3
 8004d50:	f24d 3030 	movw	r0, #54064	; 0xd330
 8004d54:	f7fd fb80 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 8004d58:	2133      	movs	r1, #51	; 0x33
 8004d5a:	f24d 3031 	movw	r0, #54065	; 0xd331
 8004d5e:	f7fd fb7b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 8004d62:	2103      	movs	r1, #3
 8004d64:	f24d 3032 	movw	r0, #54066	; 0xd332
 8004d68:	f7fd fb76 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 8004d6c:	216d      	movs	r1, #109	; 0x6d
 8004d6e:	f24d 3033 	movw	r0, #54067	; 0xd333
 8004d72:	f7fd fb71 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 8004d76:	2100      	movs	r1, #0
 8004d78:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 8004d7c:	f7fd fb6c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 8004d80:	2133      	movs	r1, #51	; 0x33
 8004d82:	f24d 4001 	movw	r0, #54273	; 0xd401
 8004d86:	f7fd fb67 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	f24d 4002 	movw	r0, #54274	; 0xd402
 8004d90:	f7fd fb62 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 8004d94:	2134      	movs	r1, #52	; 0x34
 8004d96:	f24d 4003 	movw	r0, #54275	; 0xd403
 8004d9a:	f7fd fb5d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 8004d9e:	2100      	movs	r1, #0
 8004da0:	f24d 4004 	movw	r0, #54276	; 0xd404
 8004da4:	f7fd fb58 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 8004da8:	213a      	movs	r1, #58	; 0x3a
 8004daa:	f24d 4005 	movw	r0, #54277	; 0xd405
 8004dae:	f7fd fb53 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 8004db2:	2100      	movs	r1, #0
 8004db4:	f24d 4006 	movw	r0, #54278	; 0xd406
 8004db8:	f7fd fb4e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 8004dbc:	214a      	movs	r1, #74	; 0x4a
 8004dbe:	f24d 4007 	movw	r0, #54279	; 0xd407
 8004dc2:	f7fd fb49 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	f24d 4008 	movw	r0, #54280	; 0xd408
 8004dcc:	f7fd fb44 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 8004dd0:	215c      	movs	r1, #92	; 0x5c
 8004dd2:	f24d 4009 	movw	r0, #54281	; 0xd409
 8004dd6:	f7fd fb3f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 8004dda:	2100      	movs	r1, #0
 8004ddc:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8004de0:	f7fd fb3a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 8004de4:	2181      	movs	r1, #129	; 0x81
 8004de6:	f24d 400b 	movw	r0, #54283	; 0xd40b
 8004dea:	f7fd fb35 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 8004dee:	2100      	movs	r1, #0
 8004df0:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8004df4:	f7fd fb30 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 8004df8:	21a6      	movs	r1, #166	; 0xa6
 8004dfa:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8004dfe:	f7fd fb2b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 8004e02:	2100      	movs	r1, #0
 8004e04:	f24d 400e 	movw	r0, #54286	; 0xd40e
 8004e08:	f7fd fb26 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 8004e0c:	21e5      	movs	r1, #229	; 0xe5
 8004e0e:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8004e12:	f7fd fb21 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 8004e16:	2101      	movs	r1, #1
 8004e18:	f24d 4010 	movw	r0, #54288	; 0xd410
 8004e1c:	f7fd fb1c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 8004e20:	2113      	movs	r1, #19
 8004e22:	f24d 4011 	movw	r0, #54289	; 0xd411
 8004e26:	f7fd fb17 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 8004e2a:	2101      	movs	r1, #1
 8004e2c:	f24d 4012 	movw	r0, #54290	; 0xd412
 8004e30:	f7fd fb12 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 8004e34:	2154      	movs	r1, #84	; 0x54
 8004e36:	f24d 4013 	movw	r0, #54291	; 0xd413
 8004e3a:	f7fd fb0d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 8004e3e:	2101      	movs	r1, #1
 8004e40:	f24d 4014 	movw	r0, #54292	; 0xd414
 8004e44:	f7fd fb08 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 8004e48:	2182      	movs	r1, #130	; 0x82
 8004e4a:	f24d 4015 	movw	r0, #54293	; 0xd415
 8004e4e:	f7fd fb03 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 8004e52:	2101      	movs	r1, #1
 8004e54:	f24d 4016 	movw	r0, #54294	; 0xd416
 8004e58:	f7fd fafe 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 8004e5c:	21ca      	movs	r1, #202	; 0xca
 8004e5e:	f24d 4017 	movw	r0, #54295	; 0xd417
 8004e62:	f7fd faf9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 8004e66:	2102      	movs	r1, #2
 8004e68:	f24d 4018 	movw	r0, #54296	; 0xd418
 8004e6c:	f7fd faf4 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8004e70:	2100      	movs	r1, #0
 8004e72:	f24d 4019 	movw	r0, #54297	; 0xd419
 8004e76:	f7fd faef 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 8004e7a:	2102      	movs	r1, #2
 8004e7c:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8004e80:	f7fd faea 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 8004e84:	2101      	movs	r1, #1
 8004e86:	f24d 401b 	movw	r0, #54299	; 0xd41b
 8004e8a:	f7fd fae5 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 8004e8e:	2102      	movs	r1, #2
 8004e90:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8004e94:	f7fd fae0 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 8004e98:	2134      	movs	r1, #52	; 0x34
 8004e9a:	f24d 401d 	movw	r0, #54301	; 0xd41d
 8004e9e:	f7fd fadb 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 8004ea2:	2102      	movs	r1, #2
 8004ea4:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8004ea8:	f7fd fad6 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 8004eac:	2167      	movs	r1, #103	; 0x67
 8004eae:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8004eb2:	f7fd fad1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 8004eb6:	2102      	movs	r1, #2
 8004eb8:	f24d 4020 	movw	r0, #54304	; 0xd420
 8004ebc:	f7fd facc 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 8004ec0:	2184      	movs	r1, #132	; 0x84
 8004ec2:	f24d 4021 	movw	r0, #54305	; 0xd421
 8004ec6:	f7fd fac7 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 8004eca:	2102      	movs	r1, #2
 8004ecc:	f24d 4022 	movw	r0, #54306	; 0xd422
 8004ed0:	f7fd fac2 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 8004ed4:	21a4      	movs	r1, #164	; 0xa4
 8004ed6:	f24d 4023 	movw	r0, #54307	; 0xd423
 8004eda:	f7fd fabd 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 8004ede:	2102      	movs	r1, #2
 8004ee0:	f24d 4024 	movw	r0, #54308	; 0xd424
 8004ee4:	f7fd fab8 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 8004ee8:	21b7      	movs	r1, #183	; 0xb7
 8004eea:	f24d 4025 	movw	r0, #54309	; 0xd425
 8004eee:	f7fd fab3 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 8004ef2:	2102      	movs	r1, #2
 8004ef4:	f24d 4026 	movw	r0, #54310	; 0xd426
 8004ef8:	f7fd faae 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 8004efc:	21cf      	movs	r1, #207	; 0xcf
 8004efe:	f24d 4027 	movw	r0, #54311	; 0xd427
 8004f02:	f7fd faa9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 8004f06:	2102      	movs	r1, #2
 8004f08:	f24d 4028 	movw	r0, #54312	; 0xd428
 8004f0c:	f7fd faa4 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 8004f10:	21de      	movs	r1, #222	; 0xde
 8004f12:	f24d 4029 	movw	r0, #54313	; 0xd429
 8004f16:	f7fd fa9f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 8004f1a:	2102      	movs	r1, #2
 8004f1c:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8004f20:	f7fd fa9a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 8004f24:	21f2      	movs	r1, #242	; 0xf2
 8004f26:	f24d 402b 	movw	r0, #54315	; 0xd42b
 8004f2a:	f7fd fa95 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 8004f2e:	2102      	movs	r1, #2
 8004f30:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8004f34:	f7fd fa90 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 8004f38:	21fe      	movs	r1, #254	; 0xfe
 8004f3a:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8004f3e:	f7fd fa8b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 8004f42:	2103      	movs	r1, #3
 8004f44:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8004f48:	f7fd fa86 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8004f4c:	2110      	movs	r1, #16
 8004f4e:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8004f52:	f7fd fa81 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 8004f56:	2103      	movs	r1, #3
 8004f58:	f24d 4030 	movw	r0, #54320	; 0xd430
 8004f5c:	f7fd fa7c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 8004f60:	2133      	movs	r1, #51	; 0x33
 8004f62:	f24d 4031 	movw	r0, #54321	; 0xd431
 8004f66:	f7fd fa77 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 8004f6a:	2103      	movs	r1, #3
 8004f6c:	f24d 4032 	movw	r0, #54322	; 0xd432
 8004f70:	f7fd fa72 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 8004f74:	216d      	movs	r1, #109	; 0x6d
 8004f76:	f24d 4033 	movw	r0, #54323	; 0xd433
 8004f7a:	f7fd fa6d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 8004f7e:	2100      	movs	r1, #0
 8004f80:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8004f84:	f7fd fa68 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 8004f88:	2133      	movs	r1, #51	; 0x33
 8004f8a:	f24d 5001 	movw	r0, #54529	; 0xd501
 8004f8e:	f7fd fa63 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 8004f92:	2100      	movs	r1, #0
 8004f94:	f24d 5002 	movw	r0, #54530	; 0xd502
 8004f98:	f7fd fa5e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 8004f9c:	2134      	movs	r1, #52	; 0x34
 8004f9e:	f24d 5003 	movw	r0, #54531	; 0xd503
 8004fa2:	f7fd fa59 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	f24d 5004 	movw	r0, #54532	; 0xd504
 8004fac:	f7fd fa54 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 8004fb0:	213a      	movs	r1, #58	; 0x3a
 8004fb2:	f24d 5005 	movw	r0, #54533	; 0xd505
 8004fb6:	f7fd fa4f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 8004fba:	2100      	movs	r1, #0
 8004fbc:	f24d 5006 	movw	r0, #54534	; 0xd506
 8004fc0:	f7fd fa4a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 8004fc4:	214a      	movs	r1, #74	; 0x4a
 8004fc6:	f24d 5007 	movw	r0, #54535	; 0xd507
 8004fca:	f7fd fa45 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 8004fce:	2100      	movs	r1, #0
 8004fd0:	f24d 5008 	movw	r0, #54536	; 0xd508
 8004fd4:	f7fd fa40 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 8004fd8:	215c      	movs	r1, #92	; 0x5c
 8004fda:	f24d 5009 	movw	r0, #54537	; 0xd509
 8004fde:	f7fd fa3b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	f24d 500a 	movw	r0, #54538	; 0xd50a
 8004fe8:	f7fd fa36 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 8004fec:	2181      	movs	r1, #129	; 0x81
 8004fee:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8004ff2:	f7fd fa31 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 8004ff6:	2100      	movs	r1, #0
 8004ff8:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8004ffc:	f7fd fa2c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 8005000:	21a6      	movs	r1, #166	; 0xa6
 8005002:	f24d 500d 	movw	r0, #54541	; 0xd50d
 8005006:	f7fd fa27 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 800500a:	2100      	movs	r1, #0
 800500c:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8005010:	f7fd fa22 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 8005014:	21e5      	movs	r1, #229	; 0xe5
 8005016:	f24d 500f 	movw	r0, #54543	; 0xd50f
 800501a:	f7fd fa1d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 800501e:	2101      	movs	r1, #1
 8005020:	f24d 5010 	movw	r0, #54544	; 0xd510
 8005024:	f7fd fa18 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 8005028:	2113      	movs	r1, #19
 800502a:	f24d 5011 	movw	r0, #54545	; 0xd511
 800502e:	f7fd fa13 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 8005032:	2101      	movs	r1, #1
 8005034:	f24d 5012 	movw	r0, #54546	; 0xd512
 8005038:	f7fd fa0e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 800503c:	2154      	movs	r1, #84	; 0x54
 800503e:	f24d 5013 	movw	r0, #54547	; 0xd513
 8005042:	f7fd fa09 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 8005046:	2101      	movs	r1, #1
 8005048:	f24d 5014 	movw	r0, #54548	; 0xd514
 800504c:	f7fd fa04 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8005050:	2182      	movs	r1, #130	; 0x82
 8005052:	f24d 5015 	movw	r0, #54549	; 0xd515
 8005056:	f7fd f9ff 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 800505a:	2101      	movs	r1, #1
 800505c:	f24d 5016 	movw	r0, #54550	; 0xd516
 8005060:	f7fd f9fa 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 8005064:	21ca      	movs	r1, #202	; 0xca
 8005066:	f24d 5017 	movw	r0, #54551	; 0xd517
 800506a:	f7fd f9f5 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 800506e:	2102      	movs	r1, #2
 8005070:	f24d 5018 	movw	r0, #54552	; 0xd518
 8005074:	f7fd f9f0 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 8005078:	2100      	movs	r1, #0
 800507a:	f24d 5019 	movw	r0, #54553	; 0xd519
 800507e:	f7fd f9eb 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 8005082:	2102      	movs	r1, #2
 8005084:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8005088:	f7fd f9e6 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 800508c:	2101      	movs	r1, #1
 800508e:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8005092:	f7fd f9e1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 8005096:	2102      	movs	r1, #2
 8005098:	f24d 501c 	movw	r0, #54556	; 0xd51c
 800509c:	f7fd f9dc 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 80050a0:	2134      	movs	r1, #52	; 0x34
 80050a2:	f24d 501d 	movw	r0, #54557	; 0xd51d
 80050a6:	f7fd f9d7 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 80050aa:	2102      	movs	r1, #2
 80050ac:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80050b0:	f7fd f9d2 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 80050b4:	2167      	movs	r1, #103	; 0x67
 80050b6:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80050ba:	f7fd f9cd 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 80050be:	2102      	movs	r1, #2
 80050c0:	f24d 5020 	movw	r0, #54560	; 0xd520
 80050c4:	f7fd f9c8 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 80050c8:	2184      	movs	r1, #132	; 0x84
 80050ca:	f24d 5021 	movw	r0, #54561	; 0xd521
 80050ce:	f7fd f9c3 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 80050d2:	2102      	movs	r1, #2
 80050d4:	f24d 5022 	movw	r0, #54562	; 0xd522
 80050d8:	f7fd f9be 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 80050dc:	21a4      	movs	r1, #164	; 0xa4
 80050de:	f24d 5023 	movw	r0, #54563	; 0xd523
 80050e2:	f7fd f9b9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 80050e6:	2102      	movs	r1, #2
 80050e8:	f24d 5024 	movw	r0, #54564	; 0xd524
 80050ec:	f7fd f9b4 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 80050f0:	21b7      	movs	r1, #183	; 0xb7
 80050f2:	f24d 5025 	movw	r0, #54565	; 0xd525
 80050f6:	f7fd f9af 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 80050fa:	2102      	movs	r1, #2
 80050fc:	f24d 5026 	movw	r0, #54566	; 0xd526
 8005100:	f7fd f9aa 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 8005104:	21cf      	movs	r1, #207	; 0xcf
 8005106:	f24d 5027 	movw	r0, #54567	; 0xd527
 800510a:	f7fd f9a5 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 800510e:	2102      	movs	r1, #2
 8005110:	f24d 5028 	movw	r0, #54568	; 0xd528
 8005114:	f7fd f9a0 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 8005118:	21de      	movs	r1, #222	; 0xde
 800511a:	f24d 5029 	movw	r0, #54569	; 0xd529
 800511e:	f7fd f99b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 8005122:	2102      	movs	r1, #2
 8005124:	f24d 502a 	movw	r0, #54570	; 0xd52a
 8005128:	f7fd f996 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 800512c:	21f2      	movs	r1, #242	; 0xf2
 800512e:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8005132:	f7fd f991 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 8005136:	2102      	movs	r1, #2
 8005138:	f24d 502c 	movw	r0, #54572	; 0xd52c
 800513c:	f7fd f98c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8005140:	21fe      	movs	r1, #254	; 0xfe
 8005142:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8005146:	f7fd f987 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 800514a:	2103      	movs	r1, #3
 800514c:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8005150:	f7fd f982 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8005154:	2110      	movs	r1, #16
 8005156:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800515a:	f7fd f97d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 800515e:	2103      	movs	r1, #3
 8005160:	f24d 5030 	movw	r0, #54576	; 0xd530
 8005164:	f7fd f978 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 8005168:	2133      	movs	r1, #51	; 0x33
 800516a:	f24d 5031 	movw	r0, #54577	; 0xd531
 800516e:	f7fd f973 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 8005172:	2103      	movs	r1, #3
 8005174:	f24d 5032 	movw	r0, #54578	; 0xd532
 8005178:	f7fd f96e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 800517c:	216d      	movs	r1, #109	; 0x6d
 800517e:	f24d 5033 	movw	r0, #54579	; 0xd533
 8005182:	f7fd f969 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 8005186:	2100      	movs	r1, #0
 8005188:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 800518c:	f7fd f964 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 8005190:	2133      	movs	r1, #51	; 0x33
 8005192:	f24d 6001 	movw	r0, #54785	; 0xd601
 8005196:	f7fd f95f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 800519a:	2100      	movs	r1, #0
 800519c:	f24d 6002 	movw	r0, #54786	; 0xd602
 80051a0:	f7fd f95a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 80051a4:	2134      	movs	r1, #52	; 0x34
 80051a6:	f24d 6003 	movw	r0, #54787	; 0xd603
 80051aa:	f7fd f955 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 80051ae:	2100      	movs	r1, #0
 80051b0:	f24d 6004 	movw	r0, #54788	; 0xd604
 80051b4:	f7fd f950 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 80051b8:	213a      	movs	r1, #58	; 0x3a
 80051ba:	f24d 6005 	movw	r0, #54789	; 0xd605
 80051be:	f7fd f94b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 80051c2:	2100      	movs	r1, #0
 80051c4:	f24d 6006 	movw	r0, #54790	; 0xd606
 80051c8:	f7fd f946 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 80051cc:	214a      	movs	r1, #74	; 0x4a
 80051ce:	f24d 6007 	movw	r0, #54791	; 0xd607
 80051d2:	f7fd f941 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 80051d6:	2100      	movs	r1, #0
 80051d8:	f24d 6008 	movw	r0, #54792	; 0xd608
 80051dc:	f7fd f93c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 80051e0:	215c      	movs	r1, #92	; 0x5c
 80051e2:	f24d 6009 	movw	r0, #54793	; 0xd609
 80051e6:	f7fd f937 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 80051ea:	2100      	movs	r1, #0
 80051ec:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80051f0:	f7fd f932 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 80051f4:	2181      	movs	r1, #129	; 0x81
 80051f6:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80051fa:	f7fd f92d 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 80051fe:	2100      	movs	r1, #0
 8005200:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8005204:	f7fd f928 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 8005208:	21a6      	movs	r1, #166	; 0xa6
 800520a:	f24d 600d 	movw	r0, #54797	; 0xd60d
 800520e:	f7fd f923 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 8005212:	2100      	movs	r1, #0
 8005214:	f24d 600e 	movw	r0, #54798	; 0xd60e
 8005218:	f7fd f91e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 800521c:	21e5      	movs	r1, #229	; 0xe5
 800521e:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8005222:	f7fd f919 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 8005226:	2101      	movs	r1, #1
 8005228:	f24d 6010 	movw	r0, #54800	; 0xd610
 800522c:	f7fd f914 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8005230:	2113      	movs	r1, #19
 8005232:	f24d 6011 	movw	r0, #54801	; 0xd611
 8005236:	f7fd f90f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 800523a:	2101      	movs	r1, #1
 800523c:	f24d 6012 	movw	r0, #54802	; 0xd612
 8005240:	f7fd f90a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8005244:	2154      	movs	r1, #84	; 0x54
 8005246:	f24d 6013 	movw	r0, #54803	; 0xd613
 800524a:	f7fd f905 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 800524e:	2101      	movs	r1, #1
 8005250:	f24d 6014 	movw	r0, #54804	; 0xd614
 8005254:	f7fd f900 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 8005258:	2182      	movs	r1, #130	; 0x82
 800525a:	f24d 6015 	movw	r0, #54805	; 0xd615
 800525e:	f7fd f8fb 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 8005262:	2101      	movs	r1, #1
 8005264:	f24d 6016 	movw	r0, #54806	; 0xd616
 8005268:	f7fd f8f6 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 800526c:	21ca      	movs	r1, #202	; 0xca
 800526e:	f24d 6017 	movw	r0, #54807	; 0xd617
 8005272:	f7fd f8f1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 8005276:	2102      	movs	r1, #2
 8005278:	f24d 6018 	movw	r0, #54808	; 0xd618
 800527c:	f7fd f8ec 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 8005280:	2100      	movs	r1, #0
 8005282:	f24d 6019 	movw	r0, #54809	; 0xd619
 8005286:	f7fd f8e7 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 800528a:	2102      	movs	r1, #2
 800528c:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8005290:	f7fd f8e2 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 8005294:	2101      	movs	r1, #1
 8005296:	f24d 601b 	movw	r0, #54811	; 0xd61b
 800529a:	f7fd f8dd 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 800529e:	2102      	movs	r1, #2
 80052a0:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80052a4:	f7fd f8d8 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 80052a8:	2134      	movs	r1, #52	; 0x34
 80052aa:	f24d 601d 	movw	r0, #54813	; 0xd61d
 80052ae:	f7fd f8d3 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 80052b2:	2102      	movs	r1, #2
 80052b4:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80052b8:	f7fd f8ce 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 80052bc:	2167      	movs	r1, #103	; 0x67
 80052be:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80052c2:	f7fd f8c9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 80052c6:	2102      	movs	r1, #2
 80052c8:	f24d 6020 	movw	r0, #54816	; 0xd620
 80052cc:	f7fd f8c4 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 80052d0:	2184      	movs	r1, #132	; 0x84
 80052d2:	f24d 6021 	movw	r0, #54817	; 0xd621
 80052d6:	f7fd f8bf 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 80052da:	2102      	movs	r1, #2
 80052dc:	f24d 6022 	movw	r0, #54818	; 0xd622
 80052e0:	f7fd f8ba 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 80052e4:	21a4      	movs	r1, #164	; 0xa4
 80052e6:	f24d 6023 	movw	r0, #54819	; 0xd623
 80052ea:	f7fd f8b5 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 80052ee:	2102      	movs	r1, #2
 80052f0:	f24d 6024 	movw	r0, #54820	; 0xd624
 80052f4:	f7fd f8b0 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 80052f8:	21b7      	movs	r1, #183	; 0xb7
 80052fa:	f24d 6025 	movw	r0, #54821	; 0xd625
 80052fe:	f7fd f8ab 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 8005302:	2102      	movs	r1, #2
 8005304:	f24d 6026 	movw	r0, #54822	; 0xd626
 8005308:	f7fd f8a6 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 800530c:	21cf      	movs	r1, #207	; 0xcf
 800530e:	f24d 6027 	movw	r0, #54823	; 0xd627
 8005312:	f7fd f8a1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 8005316:	2102      	movs	r1, #2
 8005318:	f24d 6028 	movw	r0, #54824	; 0xd628
 800531c:	f7fd f89c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 8005320:	21de      	movs	r1, #222	; 0xde
 8005322:	f24d 6029 	movw	r0, #54825	; 0xd629
 8005326:	f7fd f897 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 800532a:	2102      	movs	r1, #2
 800532c:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8005330:	f7fd f892 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8005334:	21f2      	movs	r1, #242	; 0xf2
 8005336:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800533a:	f7fd f88d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 800533e:	2102      	movs	r1, #2
 8005340:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8005344:	f7fd f888 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 8005348:	21fe      	movs	r1, #254	; 0xfe
 800534a:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800534e:	f7fd f883 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 8005352:	2103      	movs	r1, #3
 8005354:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8005358:	f7fd f87e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 800535c:	2110      	movs	r1, #16
 800535e:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8005362:	f7fd f879 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 8005366:	2103      	movs	r1, #3
 8005368:	f24d 6030 	movw	r0, #54832	; 0xd630
 800536c:	f7fd f874 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 8005370:	2133      	movs	r1, #51	; 0x33
 8005372:	f24d 6031 	movw	r0, #54833	; 0xd631
 8005376:	f7fd f86f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 800537a:	2103      	movs	r1, #3
 800537c:	f24d 6032 	movw	r0, #54834	; 0xd632
 8005380:	f7fd f86a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 8005384:	216d      	movs	r1, #109	; 0x6d
 8005386:	f24d 6033 	movw	r0, #54835	; 0xd633
 800538a:	f7fd f865 	bl	8002458 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 800538e:	2155      	movs	r1, #85	; 0x55
 8005390:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8005394:	f7fd f860 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8005398:	21aa      	movs	r1, #170	; 0xaa
 800539a:	f24f 0001 	movw	r0, #61441	; 0xf001
 800539e:	f7fd f85b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 80053a2:	2152      	movs	r1, #82	; 0x52
 80053a4:	f24f 0002 	movw	r0, #61442	; 0xf002
 80053a8:	f7fd f856 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 80053ac:	2108      	movs	r1, #8
 80053ae:	f24f 0003 	movw	r0, #61443	; 0xf003
 80053b2:	f7fd f851 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 80053b6:	2100      	movs	r1, #0
 80053b8:	f24f 0004 	movw	r0, #61444	; 0xf004
 80053bc:	f7fd f84c 	bl	8002458 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80053c0:	21cc      	movs	r1, #204	; 0xcc
 80053c2:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80053c6:	f7fd f847 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80053ca:	2100      	movs	r1, #0
 80053cc:	f24b 1001 	movw	r0, #45313	; 0xb101
 80053d0:	f7fd f842 	bl	8002458 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 80053d4:	2105      	movs	r1, #5
 80053d6:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80053da:	f7fd f83d 	bl	8002458 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 80053de:	2170      	movs	r1, #112	; 0x70
 80053e0:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80053e4:	f7fd f838 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 80053e8:	2170      	movs	r1, #112	; 0x70
 80053ea:	f24b 7001 	movw	r0, #46849	; 0xb701
 80053ee:	f7fd f833 	bl	8002458 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 80053f2:	2101      	movs	r1, #1
 80053f4:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80053f8:	f7fd f82e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 80053fc:	2103      	movs	r1, #3
 80053fe:	f64b 0001 	movw	r0, #47105	; 0xb801
 8005402:	f7fd f829 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 8005406:	2103      	movs	r1, #3
 8005408:	f64b 0002 	movw	r0, #47106	; 0xb802
 800540c:	f7fd f824 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 8005410:	2103      	movs	r1, #3
 8005412:	f64b 0003 	movw	r0, #47107	; 0xb803
 8005416:	f7fd f81f 	bl	8002458 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 800541a:	2102      	movs	r1, #2
 800541c:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8005420:	f7fd f81a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8005424:	2100      	movs	r1, #0
 8005426:	f64b 4001 	movw	r0, #48129	; 0xbc01
 800542a:	f7fd f815 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 800542e:	2100      	movs	r1, #0
 8005430:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8005434:	f7fd f810 	bl	8002458 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 8005438:	21d0      	movs	r1, #208	; 0xd0
 800543a:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 800543e:	f7fd f80b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8005442:	2102      	movs	r1, #2
 8005444:	f64c 1001 	movw	r0, #51457	; 0xc901
 8005448:	f7fd f806 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 800544c:	2150      	movs	r1, #80	; 0x50
 800544e:	f64c 1002 	movw	r0, #51458	; 0xc902
 8005452:	f7fd f801 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 8005456:	2150      	movs	r1, #80	; 0x50
 8005458:	f64c 1003 	movw	r0, #51459	; 0xc903
 800545c:	f7fc fffc 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 8005460:	2150      	movs	r1, #80	; 0x50
 8005462:	f64c 1004 	movw	r0, #51460	; 0xc904
 8005466:	f7fc fff7 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 800546a:	2100      	movs	r1, #0
 800546c:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8005470:	f7fc fff2 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8005474:	2155      	movs	r1, #85	; 0x55
 8005476:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 800547a:	f7fc ffed 	bl	8002458 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 800547e:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8005482:	f7fc ffaf 	bl	80023e4 <LCD_WR_REG>
		delay_us(120);
 8005486:	2078      	movs	r0, #120	; 0x78
 8005488:	f7fb fcf6 	bl	8000e78 <delay_us>
		LCD_WR_REG(0x2900);
 800548c:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8005490:	f7fc ffa8 	bl	80023e4 <LCD_WR_REG>
 8005494:	f001 b95f 	b.w	8006756 <LCD_Init+0x374e>
	}else if(lcddev.id==0x9325)//9325
 8005498:	4bec      	ldr	r3, [pc, #944]	; (800584c <LCD_Init+0x2844>)
 800549a:	889b      	ldrh	r3, [r3, #4]
 800549c:	f249 3225 	movw	r2, #37669	; 0x9325
 80054a0:	4293      	cmp	r3, r2
 80054a2:	f040 80d7 	bne.w	8005654 <LCD_Init+0x264c>
	{
		LCD_WriteReg(0x00E5,0x78F0);
 80054a6:	f647 01f0 	movw	r1, #30960	; 0x78f0
 80054aa:	20e5      	movs	r0, #229	; 0xe5
 80054ac:	f7fc ffd4 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0001,0x0100);
 80054b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054b4:	2001      	movs	r0, #1
 80054b6:	f7fc ffcf 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 80054ba:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80054be:	2002      	movs	r0, #2
 80054c0:	f7fc ffca 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0003,0x1030);
 80054c4:	f241 0130 	movw	r1, #4144	; 0x1030
 80054c8:	2003      	movs	r0, #3
 80054ca:	f7fc ffc5 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0004,0x0000);
 80054ce:	2100      	movs	r1, #0
 80054d0:	2004      	movs	r0, #4
 80054d2:	f7fc ffc1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 80054d6:	f240 2102 	movw	r1, #514	; 0x202
 80054da:	2008      	movs	r0, #8
 80054dc:	f7fc ffbc 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0009,0x0000);
 80054e0:	2100      	movs	r1, #0
 80054e2:	2009      	movs	r0, #9
 80054e4:	f7fc ffb8 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x000A,0x0000);
 80054e8:	2100      	movs	r1, #0
 80054ea:	200a      	movs	r0, #10
 80054ec:	f7fc ffb4 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x000C,0x0000);
 80054f0:	2100      	movs	r1, #0
 80054f2:	200c      	movs	r0, #12
 80054f4:	f7fc ffb0 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x000D,0x0000);
 80054f8:	2100      	movs	r1, #0
 80054fa:	200d      	movs	r0, #13
 80054fc:	f7fc ffac 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x000F,0x0000);
 8005500:	2100      	movs	r1, #0
 8005502:	200f      	movs	r0, #15
 8005504:	f7fc ffa8 	bl	8002458 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010,0x0000);
 8005508:	2100      	movs	r1, #0
 800550a:	2010      	movs	r0, #16
 800550c:	f7fc ffa4 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 8005510:	2107      	movs	r1, #7
 8005512:	2011      	movs	r0, #17
 8005514:	f7fc ffa0 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 8005518:	2100      	movs	r1, #0
 800551a:	2012      	movs	r0, #18
 800551c:	f7fc ff9c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 8005520:	2100      	movs	r1, #0
 8005522:	2013      	movs	r0, #19
 8005524:	f7fc ff98 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0000);
 8005528:	2100      	movs	r1, #0
 800552a:	2007      	movs	r0, #7
 800552c:	f7fc ff94 	bl	8002458 <LCD_WriteReg>
		//vgh
		LCD_WriteReg(0x0010,0x1690);
 8005530:	f241 6190 	movw	r1, #5776	; 0x1690
 8005534:	2010      	movs	r0, #16
 8005536:	f7fc ff8f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0227);
 800553a:	f240 2127 	movw	r1, #551	; 0x227
 800553e:	2011      	movs	r0, #17
 8005540:	f7fc ff8a 	bl	8002458 <LCD_WriteReg>
		//delayms(100);
		//vregiout
		LCD_WriteReg(0x0012,0x009D); //0x001b
 8005544:	219d      	movs	r1, #157	; 0x9d
 8005546:	2012      	movs	r0, #18
 8005548:	f7fc ff86 	bl	8002458 <LCD_WriteReg>
		//delayms(100);
		//vom amplitude
		LCD_WriteReg(0x0013,0x1900);
 800554c:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8005550:	2013      	movs	r0, #19
 8005552:	f7fc ff81 	bl	8002458 <LCD_WriteReg>
		//delayms(100);
		//vom H
		LCD_WriteReg(0x0029,0x0025);
 8005556:	2125      	movs	r1, #37	; 0x25
 8005558:	2029      	movs	r0, #41	; 0x29
 800555a:	f7fc ff7d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x002B,0x000D);
 800555e:	210d      	movs	r1, #13
 8005560:	202b      	movs	r0, #43	; 0x2b
 8005562:	f7fc ff79 	bl	8002458 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030,0x0007);
 8005566:	2107      	movs	r1, #7
 8005568:	2030      	movs	r0, #48	; 0x30
 800556a:	f7fc ff75 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0303);
 800556e:	f240 3103 	movw	r1, #771	; 0x303
 8005572:	2031      	movs	r0, #49	; 0x31
 8005574:	f7fc ff70 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0003);// 0006
 8005578:	2103      	movs	r1, #3
 800557a:	2032      	movs	r0, #50	; 0x32
 800557c:	f7fc ff6c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0206);
 8005580:	f240 2106 	movw	r1, #518	; 0x206
 8005584:	2035      	movs	r0, #53	; 0x35
 8005586:	f7fc ff67 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x0008);
 800558a:	2108      	movs	r1, #8
 800558c:	2036      	movs	r0, #54	; 0x36
 800558e:	f7fc ff63 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0406);
 8005592:	f240 4106 	movw	r1, #1030	; 0x406
 8005596:	2037      	movs	r0, #55	; 0x37
 8005598:	f7fc ff5e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0304);//0200
 800559c:	f44f 7141 	mov.w	r1, #772	; 0x304
 80055a0:	2038      	movs	r0, #56	; 0x38
 80055a2:	f7fc ff59 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0007);
 80055a6:	2107      	movs	r1, #7
 80055a8:	2039      	movs	r0, #57	; 0x39
 80055aa:	f7fc ff55 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x003C,0x0602);// 0504
 80055ae:	f240 6102 	movw	r1, #1538	; 0x602
 80055b2:	203c      	movs	r0, #60	; 0x3c
 80055b4:	f7fc ff50 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x003D,0x0008);
 80055b8:	2108      	movs	r1, #8
 80055ba:	203d      	movs	r0, #61	; 0x3d
 80055bc:	f7fc ff4c 	bl	8002458 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050,0x0000);
 80055c0:	2100      	movs	r1, #0
 80055c2:	2050      	movs	r0, #80	; 0x50
 80055c4:	f7fc ff48 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00EF);
 80055c8:	21ef      	movs	r1, #239	; 0xef
 80055ca:	2051      	movs	r0, #81	; 0x51
 80055cc:	f7fc ff44 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 80055d0:	2100      	movs	r1, #0
 80055d2:	2052      	movs	r0, #82	; 0x52
 80055d4:	f7fc ff40 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013F);
 80055d8:	f240 113f 	movw	r1, #319	; 0x13f
 80055dc:	2053      	movs	r0, #83	; 0x53
 80055de:	f7fc ff3b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0xA700);
 80055e2:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80055e6:	2060      	movs	r0, #96	; 0x60
 80055e8:	f7fc ff36 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 80055ec:	2101      	movs	r1, #1
 80055ee:	2061      	movs	r0, #97	; 0x61
 80055f0:	f7fc ff32 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x006A,0x0000);
 80055f4:	2100      	movs	r1, #0
 80055f6:	206a      	movs	r0, #106	; 0x6a
 80055f8:	f7fc ff2e 	bl	8002458 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080,0x0000);
 80055fc:	2100      	movs	r1, #0
 80055fe:	2080      	movs	r0, #128	; 0x80
 8005600:	f7fc ff2a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0081,0x0000);
 8005604:	2100      	movs	r1, #0
 8005606:	2081      	movs	r0, #129	; 0x81
 8005608:	f7fc ff26 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0082,0x0000);
 800560c:	2100      	movs	r1, #0
 800560e:	2082      	movs	r0, #130	; 0x82
 8005610:	f7fc ff22 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0083,0x0000);
 8005614:	2100      	movs	r1, #0
 8005616:	2083      	movs	r0, #131	; 0x83
 8005618:	f7fc ff1e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0084,0x0000);
 800561c:	2100      	movs	r1, #0
 800561e:	2084      	movs	r0, #132	; 0x84
 8005620:	f7fc ff1a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0085,0x0000);
 8005624:	2100      	movs	r1, #0
 8005626:	2085      	movs	r0, #133	; 0x85
 8005628:	f7fc ff16 	bl	8002458 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090,0x0010);
 800562c:	2110      	movs	r1, #16
 800562e:	2090      	movs	r0, #144	; 0x90
 8005630:	f7fc ff12 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 8005634:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005638:	2092      	movs	r0, #146	; 0x92
 800563a:	f7fc ff0d 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0x0007,0x0133);
 800563e:	f240 1133 	movw	r1, #307	; 0x133
 8005642:	2007      	movs	r0, #7
 8005644:	f7fc ff08 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x0022);//
 8005648:	2122      	movs	r1, #34	; 0x22
 800564a:	2000      	movs	r0, #0
 800564c:	f7fc ff04 	bl	8002458 <LCD_WriteReg>
 8005650:	f001 b881 	b.w	8006756 <LCD_Init+0x374e>
	}else if(lcddev.id==0x9328)//ILI9328   OK
 8005654:	4b7d      	ldr	r3, [pc, #500]	; (800584c <LCD_Init+0x2844>)
 8005656:	889b      	ldrh	r3, [r3, #4]
 8005658:	f249 3228 	movw	r2, #37672	; 0x9328
 800565c:	4293      	cmp	r3, r2
 800565e:	f040 80f7 	bne.w	8005850 <LCD_Init+0x2848>
	{
  		LCD_WriteReg(0x00EC,0x108F);// internal timeing
 8005662:	f241 018f 	movw	r1, #4239	; 0x108f
 8005666:	20ec      	movs	r0, #236	; 0xec
 8005668:	f7fc fef6 	bl	8002458 <LCD_WriteReg>
 		LCD_WriteReg(0x00EF,0x1234);// ADD
 800566c:	f241 2134 	movw	r1, #4660	; 0x1234
 8005670:	20ef      	movs	r0, #239	; 0xef
 8005672:	f7fc fef1 	bl	8002458 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);
        //LCD_WriteReg(0x0000,0x0001);//开启内部时钟
        LCD_WriteReg(0x0001,0x0100);
 8005676:	f44f 7180 	mov.w	r1, #256	; 0x100
 800567a:	2001      	movs	r0, #1
 800567c:	f7fc feec 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);//电源开启
 8005680:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005684:	2002      	movs	r0, #2
 8005686:	f7fc fee7 	bl	8002458 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(0<<3) );//65K
 800568a:	f241 0130 	movw	r1, #4144	; 0x1030
 800568e:	2003      	movs	r0, #3
 8005690:	f7fc fee2 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 8005694:	2100      	movs	r1, #0
 8005696:	2004      	movs	r0, #4
 8005698:	f7fc fede 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x0202);
 800569c:	f240 2102 	movw	r1, #514	; 0x202
 80056a0:	2008      	movs	r0, #8
 80056a2:	f7fc fed9 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0009,0x0000);
 80056a6:	2100      	movs	r1, #0
 80056a8:	2009      	movs	r0, #9
 80056aa:	f7fc fed5 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x000a,0x0000);//display setting
 80056ae:	2100      	movs	r1, #0
 80056b0:	200a      	movs	r0, #10
 80056b2:	f7fc fed1 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x000c,0x0001);//display setting
 80056b6:	2101      	movs	r1, #1
 80056b8:	200c      	movs	r0, #12
 80056ba:	f7fc fecd 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x000d,0x0000);//0f3c
 80056be:	2100      	movs	r1, #0
 80056c0:	200d      	movs	r0, #13
 80056c2:	f7fc fec9 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x000f,0x0000);
 80056c6:	2100      	movs	r1, #0
 80056c8:	200f      	movs	r0, #15
 80056ca:	f7fc fec5 	bl	8002458 <LCD_WriteReg>
		//电源配置
        LCD_WriteReg(0x0010,0x0000);
 80056ce:	2100      	movs	r1, #0
 80056d0:	2010      	movs	r0, #16
 80056d2:	f7fc fec1 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0007);
 80056d6:	2107      	movs	r1, #7
 80056d8:	2011      	movs	r0, #17
 80056da:	f7fc febd 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x0000);
 80056de:	2100      	movs	r1, #0
 80056e0:	2012      	movs	r0, #18
 80056e2:	f7fc feb9 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0000);
 80056e6:	2100      	movs	r1, #0
 80056e8:	2013      	movs	r0, #19
 80056ea:	f7fc feb5 	bl	8002458 <LCD_WriteReg>
     	LCD_WriteReg(0x0007,0x0001);
 80056ee:	2101      	movs	r1, #1
 80056f0:	2007      	movs	r0, #7
 80056f2:	f7fc feb1 	bl	8002458 <LCD_WriteReg>
       	HAL_Delay(50);
 80056f6:	2032      	movs	r0, #50	; 0x32
 80056f8:	f003 fc24 	bl	8008f44 <HAL_Delay>
        LCD_WriteReg(0x0010,0x1490);
 80056fc:	f241 4190 	movw	r1, #5264	; 0x1490
 8005700:	2010      	movs	r0, #16
 8005702:	f7fc fea9 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0227);
 8005706:	f240 2127 	movw	r1, #551	; 0x227
 800570a:	2011      	movs	r0, #17
 800570c:	f7fc fea4 	bl	8002458 <LCD_WriteReg>
        HAL_Delay(50);
 8005710:	2032      	movs	r0, #50	; 0x32
 8005712:	f003 fc17 	bl	8008f44 <HAL_Delay>
        LCD_WriteReg(0x0012,0x008A);
 8005716:	218a      	movs	r1, #138	; 0x8a
 8005718:	2012      	movs	r0, #18
 800571a:	f7fc fe9d 	bl	8002458 <LCD_WriteReg>
        HAL_Delay(50);
 800571e:	2032      	movs	r0, #50	; 0x32
 8005720:	f003 fc10 	bl	8008f44 <HAL_Delay>
        LCD_WriteReg(0x0013,0x1a00);
 8005724:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8005728:	2013      	movs	r0, #19
 800572a:	f7fc fe95 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x0006);
 800572e:	2106      	movs	r1, #6
 8005730:	2029      	movs	r0, #41	; 0x29
 8005732:	f7fc fe91 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x002b,0x000d);
 8005736:	210d      	movs	r1, #13
 8005738:	202b      	movs	r0, #43	; 0x2b
 800573a:	f7fc fe8d 	bl	8002458 <LCD_WriteReg>
        HAL_Delay(50);
 800573e:	2032      	movs	r0, #50	; 0x32
 8005740:	f003 fc00 	bl	8008f44 <HAL_Delay>
        LCD_WriteReg(0x0020,0x0000);
 8005744:	2100      	movs	r1, #0
 8005746:	2020      	movs	r0, #32
 8005748:	f7fc fe86 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 800574c:	2100      	movs	r1, #0
 800574e:	2021      	movs	r0, #33	; 0x21
 8005750:	f7fc fe82 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(50);
 8005754:	2032      	movs	r0, #50	; 0x32
 8005756:	f003 fbf5 	bl	8008f44 <HAL_Delay>
		//伽马校正
        LCD_WriteReg(0x0030,0x0000);
 800575a:	2100      	movs	r1, #0
 800575c:	2030      	movs	r0, #48	; 0x30
 800575e:	f7fc fe7b 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0604);
 8005762:	f240 6104 	movw	r1, #1540	; 0x604
 8005766:	2031      	movs	r0, #49	; 0x31
 8005768:	f7fc fe76 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0305);
 800576c:	f240 3105 	movw	r1, #773	; 0x305
 8005770:	2032      	movs	r0, #50	; 0x32
 8005772:	f7fc fe71 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0000);
 8005776:	2100      	movs	r1, #0
 8005778:	2035      	movs	r0, #53	; 0x35
 800577a:	f7fc fe6d 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x0C09);
 800577e:	f640 4109 	movw	r1, #3081	; 0xc09
 8005782:	2036      	movs	r0, #54	; 0x36
 8005784:	f7fc fe68 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0204);
 8005788:	f44f 7101 	mov.w	r1, #516	; 0x204
 800578c:	2037      	movs	r0, #55	; 0x37
 800578e:	f7fc fe63 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0301);
 8005792:	f240 3101 	movw	r1, #769	; 0x301
 8005796:	2038      	movs	r0, #56	; 0x38
 8005798:	f7fc fe5e 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0707);
 800579c:	f240 7107 	movw	r1, #1799	; 0x707
 80057a0:	2039      	movs	r0, #57	; 0x39
 80057a2:	f7fc fe59 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x003c,0x0000);
 80057a6:	2100      	movs	r1, #0
 80057a8:	203c      	movs	r0, #60	; 0x3c
 80057aa:	f7fc fe55 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x003d,0x0a0a);
 80057ae:	f640 210a 	movw	r1, #2570	; 0xa0a
 80057b2:	203d      	movs	r0, #61	; 0x3d
 80057b4:	f7fc fe50 	bl	8002458 <LCD_WriteReg>
        HAL_Delay(50);
 80057b8:	2032      	movs	r0, #50	; 0x32
 80057ba:	f003 fbc3 	bl	8008f44 <HAL_Delay>
        LCD_WriteReg(0x0050,0x0000); //水平GRAM起始位置
 80057be:	2100      	movs	r1, #0
 80057c0:	2050      	movs	r0, #80	; 0x50
 80057c2:	f7fc fe49 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00ef); //水平GRAM终止位置
 80057c6:	21ef      	movs	r1, #239	; 0xef
 80057c8:	2051      	movs	r0, #81	; 0x51
 80057ca:	f7fc fe45 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000); //垂直GRAM起始位置
 80057ce:	2100      	movs	r1, #0
 80057d0:	2052      	movs	r0, #82	; 0x52
 80057d2:	f7fc fe41 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013f); //垂直GRAM终止位置
 80057d6:	f240 113f 	movw	r1, #319	; 0x13f
 80057da:	2053      	movs	r0, #83	; 0x53
 80057dc:	f7fc fe3c 	bl	8002458 <LCD_WriteReg>

         LCD_WriteReg(0x0060,0xa700);
 80057e0:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80057e4:	2060      	movs	r0, #96	; 0x60
 80057e6:	f7fc fe37 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 80057ea:	2101      	movs	r1, #1
 80057ec:	2061      	movs	r0, #97	; 0x61
 80057ee:	f7fc fe33 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x006a,0x0000);
 80057f2:	2100      	movs	r1, #0
 80057f4:	206a      	movs	r0, #106	; 0x6a
 80057f6:	f7fc fe2f 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 80057fa:	2100      	movs	r1, #0
 80057fc:	2080      	movs	r0, #128	; 0x80
 80057fe:	f7fc fe2b 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0081,0x0000);
 8005802:	2100      	movs	r1, #0
 8005804:	2081      	movs	r0, #129	; 0x81
 8005806:	f7fc fe27 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 800580a:	2100      	movs	r1, #0
 800580c:	2082      	movs	r0, #130	; 0x82
 800580e:	f7fc fe23 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 8005812:	2100      	movs	r1, #0
 8005814:	2083      	movs	r0, #131	; 0x83
 8005816:	f7fc fe1f 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 800581a:	2100      	movs	r1, #0
 800581c:	2084      	movs	r0, #132	; 0x84
 800581e:	f7fc fe1b 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 8005822:	2100      	movs	r1, #0
 8005824:	2085      	movs	r0, #133	; 0x85
 8005826:	f7fc fe17 	bl	8002458 <LCD_WriteReg>

        LCD_WriteReg(0x0090,0x0010);
 800582a:	2110      	movs	r1, #16
 800582c:	2090      	movs	r0, #144	; 0x90
 800582e:	f7fc fe13 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0600);
 8005832:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005836:	2092      	movs	r0, #146	; 0x92
 8005838:	f7fc fe0e 	bl	8002458 <LCD_WriteReg>
        //开启显示设置
        LCD_WriteReg(0x0007,0x0133);
 800583c:	f240 1133 	movw	r1, #307	; 0x133
 8005840:	2007      	movs	r0, #7
 8005842:	f7fc fe09 	bl	8002458 <LCD_WriteReg>
 8005846:	f000 bf86 	b.w	8006756 <LCD_Init+0x374e>
 800584a:	bf00      	nop
 800584c:	20000118 	.word	0x20000118
	}else if(lcddev.id==0x9320)//测试OK.
 8005850:	4bce      	ldr	r3, [pc, #824]	; (8005b8c <LCD_Init+0x2b84>)
 8005852:	889b      	ldrh	r3, [r3, #4]
 8005854:	f249 3220 	movw	r2, #37664	; 0x9320
 8005858:	4293      	cmp	r3, r2
 800585a:	f040 80ad 	bne.w	80059b8 <LCD_Init+0x29b0>
	{
		LCD_WriteReg(0x00,0x0000);
 800585e:	2100      	movs	r1, #0
 8005860:	2000      	movs	r0, #0
 8005862:	f7fc fdf9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x01,0x0100);	//Driver Output Contral.
 8005866:	f44f 7180 	mov.w	r1, #256	; 0x100
 800586a:	2001      	movs	r0, #1
 800586c:	f7fc fdf4 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);	//LCD Driver Waveform Contral.
 8005870:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005874:	2002      	movs	r0, #2
 8005876:	f7fc fdef 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode Set.
 800587a:	f241 0130 	movw	r1, #4144	; 0x1030
 800587e:	2003      	movs	r0, #3
 8005880:	f7fc fdea 	bl	8002458 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04,0x0000);	//Scalling Contral.
 8005884:	2100      	movs	r1, #0
 8005886:	2004      	movs	r0, #4
 8005888:	f7fc fde6 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0202);	//Display Contral 2.(0x0207)
 800588c:	f240 2102 	movw	r1, #514	; 0x202
 8005890:	2008      	movs	r0, #8
 8005892:	f7fc fde1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000);	//Display Contral 3.(0x0000)
 8005896:	2100      	movs	r1, #0
 8005898:	2009      	movs	r0, #9
 800589a:	f7fc fddd 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0a,0x0000);	//Frame Cycle Contal.(0x0000)
 800589e:	2100      	movs	r1, #0
 80058a0:	200a      	movs	r0, #10
 80058a2:	f7fc fdd9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0c,(1<<0));	//Extern Display Interface Contral 1.(0x0000)
 80058a6:	2101      	movs	r1, #1
 80058a8:	200c      	movs	r0, #12
 80058aa:	f7fc fdd5 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0d,0x0000);	//Frame Maker Position.
 80058ae:	2100      	movs	r1, #0
 80058b0:	200d      	movs	r0, #13
 80058b2:	f7fc fdd1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0f,0x0000);	//Extern Display Interface Contral 2.
 80058b6:	2100      	movs	r1, #0
 80058b8:	200f      	movs	r0, #15
 80058ba:	f7fc fdcd 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(50);
 80058be:	2032      	movs	r0, #50	; 0x32
 80058c0:	f003 fb40 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0x07,0x0101);	//Display Contral.
 80058c4:	f240 1101 	movw	r1, #257	; 0x101
 80058c8:	2007      	movs	r0, #7
 80058ca:	f7fc fdc5 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(50);
 80058ce:	2032      	movs	r0, #50	; 0x32
 80058d0:	f003 fb38 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	//Power Control 1.(0x16b0)
 80058d4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 80058d8:	2010      	movs	r0, #16
 80058da:	f7fc fdbd 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0007);								//Power Control 2.(0x0001)
 80058de:	2107      	movs	r1, #7
 80058e0:	2011      	movs	r0, #17
 80058e2:	f7fc fdb9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x12,(1<<8)|(1<<4)|(0<<0));				//Power Control 3.(0x0138)
 80058e6:	f44f 7188 	mov.w	r1, #272	; 0x110
 80058ea:	2012      	movs	r0, #18
 80058ec:	f7fc fdb4 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0b00);								//Power Control 4.
 80058f0:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 80058f4:	2013      	movs	r0, #19
 80058f6:	f7fc fdaf 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0000);								//Power Control 7.
 80058fa:	2100      	movs	r1, #0
 80058fc:	2029      	movs	r0, #41	; 0x29
 80058fe:	f7fc fdab 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0x2b,(1<<14)|(1<<4));
 8005902:	f244 0110 	movw	r1, #16400	; 0x4010
 8005906:	202b      	movs	r0, #43	; 0x2b
 8005908:	f7fc fda6 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x50,0);	//Set X Star
 800590c:	2100      	movs	r1, #0
 800590e:	2050      	movs	r0, #80	; 0x50
 8005910:	f7fc fda2 	bl	8002458 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51,239);	//Set Y Star
 8005914:	21ef      	movs	r1, #239	; 0xef
 8005916:	2051      	movs	r0, #81	; 0x51
 8005918:	f7fc fd9e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x52,0);	//Set Y End.t.
 800591c:	2100      	movs	r1, #0
 800591e:	2052      	movs	r0, #82	; 0x52
 8005920:	f7fc fd9a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x53,319);	//
 8005924:	f240 113f 	movw	r1, #319	; 0x13f
 8005928:	2053      	movs	r0, #83	; 0x53
 800592a:	f7fc fd95 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0x60,0x2700);	//Driver Output Control.
 800592e:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005932:	2060      	movs	r0, #96	; 0x60
 8005934:	f7fc fd90 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x61,0x0001);	//Driver Output Control.
 8005938:	2101      	movs	r1, #1
 800593a:	2061      	movs	r0, #97	; 0x61
 800593c:	f7fc fd8c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x6a,0x0000);	//Vertical Srcoll Control.
 8005940:	2100      	movs	r1, #0
 8005942:	206a      	movs	r0, #106	; 0x6a
 8005944:	f7fc fd88 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0x80,0x0000);	//Display Position? Partial Display 1.
 8005948:	2100      	movs	r1, #0
 800594a:	2080      	movs	r0, #128	; 0x80
 800594c:	f7fc fd84 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000);	//RAM Address Start? Partial Display 1.
 8005950:	2100      	movs	r1, #0
 8005952:	2081      	movs	r0, #129	; 0x81
 8005954:	f7fc fd80 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000);	//RAM Address End-Partial Display 1.
 8005958:	2100      	movs	r1, #0
 800595a:	2082      	movs	r0, #130	; 0x82
 800595c:	f7fc fd7c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000);	//Displsy Position? Partial Display 2.
 8005960:	2100      	movs	r1, #0
 8005962:	2083      	movs	r0, #131	; 0x83
 8005964:	f7fc fd78 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000);	//RAM Address Start? Partial Display 2.
 8005968:	2100      	movs	r1, #0
 800596a:	2084      	movs	r0, #132	; 0x84
 800596c:	f7fc fd74 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000);	//RAM Address End? Partial Display 2.
 8005970:	2100      	movs	r1, #0
 8005972:	2085      	movs	r0, #133	; 0x85
 8005974:	f7fc fd70 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0x90,(0<<7)|(16<<0));	//Frame Cycle Contral.(0x0013)
 8005978:	2110      	movs	r1, #16
 800597a:	2090      	movs	r0, #144	; 0x90
 800597c:	f7fc fd6c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);	//Panel Interface Contral 2.(0x0000)
 8005980:	2100      	movs	r1, #0
 8005982:	2092      	movs	r0, #146	; 0x92
 8005984:	f7fc fd68 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0001);	//Panel Interface Contral 3.
 8005988:	2101      	movs	r1, #1
 800598a:	2093      	movs	r0, #147	; 0x93
 800598c:	f7fc fd64 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);	//Frame Cycle Contral.(0x0110)
 8005990:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005994:	2095      	movs	r0, #149	; 0x95
 8005996:	f7fc fd5f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x97,(0<<8));	//
 800599a:	2100      	movs	r1, #0
 800599c:	2097      	movs	r0, #151	; 0x97
 800599e:	f7fc fd5b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x98,0x0000);	//Frame Cycle Contral.
 80059a2:	2100      	movs	r1, #0
 80059a4:	2098      	movs	r0, #152	; 0x98
 80059a6:	f7fc fd57 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);	//(0x0173)
 80059aa:	f240 1173 	movw	r1, #371	; 0x173
 80059ae:	2007      	movs	r0, #7
 80059b0:	f7fc fd52 	bl	8002458 <LCD_WriteReg>
 80059b4:	f000 becf 	b.w	8006756 <LCD_Init+0x374e>
	}else if(lcddev.id==0X9331)//OK |/|/|
 80059b8:	4b74      	ldr	r3, [pc, #464]	; (8005b8c <LCD_Init+0x2b84>)
 80059ba:	889b      	ldrh	r3, [r3, #4]
 80059bc:	f249 3231 	movw	r2, #37681	; 0x9331
 80059c0:	4293      	cmp	r3, r2
 80059c2:	f040 80e5 	bne.w	8005b90 <LCD_Init+0x2b88>
	{
		LCD_WriteReg(0x00E7, 0x1014);
 80059c6:	f241 0114 	movw	r1, #4116	; 0x1014
 80059ca:	20e7      	movs	r0, #231	; 0xe7
 80059cc:	f7fc fd44 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 80059d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059d4:	2001      	movs	r0, #1
 80059d6:	f7fc fd3f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 80059da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059de:	2002      	movs	r0, #2
 80059e0:	f7fc fd3a 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(1<<3));//65K
 80059e4:	f241 0138 	movw	r1, #4152	; 0x1038
 80059e8:	2003      	movs	r0, #3
 80059ea:	f7fc fd35 	bl	8002458 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 80059ee:	f240 2102 	movw	r1, #514	; 0x202
 80059f2:	2008      	movs	r0, #8
 80059f4:	f7fc fd30 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 80059f8:	2100      	movs	r1, #0
 80059fa:	2009      	movs	r0, #9
 80059fc:	f7fc fd2c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8005a00:	2100      	movs	r1, #0
 8005a02:	200a      	movs	r0, #10
 8005a04:	f7fc fd28 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8005a08:	2100      	movs	r1, #0
 8005a0a:	200c      	movs	r0, #12
 8005a0c:	f7fc fd24 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8005a10:	2100      	movs	r1, #0
 8005a12:	200d      	movs	r0, #13
 8005a14:	f7fc fd20 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8005a18:	2100      	movs	r1, #0
 8005a1a:	200f      	movs	r0, #15
 8005a1c:	f7fc fd1c 	bl	8002458 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8005a20:	2100      	movs	r1, #0
 8005a22:	2010      	movs	r0, #16
 8005a24:	f7fc fd18 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8005a28:	2107      	movs	r1, #7
 8005a2a:	2011      	movs	r0, #17
 8005a2c:	f7fc fd14 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8005a30:	2100      	movs	r1, #0
 8005a32:	2012      	movs	r0, #18
 8005a34:	f7fc fd10 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8005a38:	2100      	movs	r1, #0
 8005a3a:	2013      	movs	r0, #19
 8005a3c:	f7fc fd0c 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8005a40:	20c8      	movs	r0, #200	; 0xc8
 8005a42:	f003 fa7f 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8005a46:	f241 6190 	movw	r1, #5776	; 0x1690
 8005a4a:	2010      	movs	r0, #16
 8005a4c:	f7fc fd04 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8005a50:	f240 2127 	movw	r1, #551	; 0x227
 8005a54:	2011      	movs	r0, #17
 8005a56:	f7fc fcff 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8005a5a:	2032      	movs	r0, #50	; 0x32
 8005a5c:	f003 fa72 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8005a60:	210c      	movs	r1, #12
 8005a62:	2012      	movs	r0, #18
 8005a64:	f7fc fcf8 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8005a68:	2032      	movs	r0, #50	; 0x32
 8005a6a:	f003 fa6b 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8005a6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a72:	2013      	movs	r0, #19
 8005a74:	f7fc fcf0 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8005a78:	2111      	movs	r1, #17
 8005a7a:	2029      	movs	r0, #41	; 0x29
 8005a7c:	f7fc fcec 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8005a80:	210b      	movs	r1, #11
 8005a82:	202b      	movs	r0, #43	; 0x2b
 8005a84:	f7fc fce8 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8005a88:	2032      	movs	r0, #50	; 0x32
 8005a8a:	f003 fa5b 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8005a8e:	2100      	movs	r1, #0
 8005a90:	2020      	movs	r0, #32
 8005a92:	f7fc fce1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8005a96:	f240 113f 	movw	r1, #319	; 0x13f
 8005a9a:	2021      	movs	r0, #33	; 0x21
 8005a9c:	f7fc fcdc 	bl	8002458 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8005aa0:	2100      	movs	r1, #0
 8005aa2:	2030      	movs	r0, #48	; 0x30
 8005aa4:	f7fc fcd8 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8005aa8:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005aac:	2031      	movs	r0, #49	; 0x31
 8005aae:	f7fc fcd3 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	2032      	movs	r0, #50	; 0x32
 8005ab6:	f7fc fccf 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8005aba:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005abe:	2035      	movs	r0, #53	; 0x35
 8005ac0:	f7fc fcca 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8005ac4:	f241 610a 	movw	r1, #5642	; 0x160a
 8005ac8:	2036      	movs	r0, #54	; 0x36
 8005aca:	f7fc fcc5 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8005ace:	f240 7107 	movw	r1, #1799	; 0x707
 8005ad2:	2037      	movs	r0, #55	; 0x37
 8005ad4:	f7fc fcc0 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8005ad8:	f44f 7183 	mov.w	r1, #262	; 0x106
 8005adc:	2038      	movs	r0, #56	; 0x38
 8005ade:	f7fc fcbb 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8005ae2:	f240 7107 	movw	r1, #1799	; 0x707
 8005ae6:	2039      	movs	r0, #57	; 0x39
 8005ae8:	f7fc fcb6 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8005aec:	f240 4102 	movw	r1, #1026	; 0x402
 8005af0:	203c      	movs	r0, #60	; 0x3c
 8005af2:	f7fc fcb1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8005af6:	f640 410f 	movw	r1, #3087	; 0xc0f
 8005afa:	203d      	movs	r0, #61	; 0x3d
 8005afc:	f7fc fcac 	bl	8002458 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8005b00:	2100      	movs	r1, #0
 8005b02:	2050      	movs	r0, #80	; 0x50
 8005b04:	f7fc fca8 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8005b08:	21ef      	movs	r1, #239	; 0xef
 8005b0a:	2051      	movs	r0, #81	; 0x51
 8005b0c:	f7fc fca4 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8005b10:	2100      	movs	r1, #0
 8005b12:	2052      	movs	r0, #82	; 0x52
 8005b14:	f7fc fca0 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8005b18:	f240 113f 	movw	r1, #319	; 0x13f
 8005b1c:	2053      	movs	r0, #83	; 0x53
 8005b1e:	f7fc fc9b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8005b22:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005b26:	2060      	movs	r0, #96	; 0x60
 8005b28:	f7fc fc96 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	2061      	movs	r0, #97	; 0x61
 8005b30:	f7fc fc92 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8005b34:	2100      	movs	r1, #0
 8005b36:	206a      	movs	r0, #106	; 0x6a
 8005b38:	f7fc fc8e 	bl	8002458 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	2080      	movs	r0, #128	; 0x80
 8005b40:	f7fc fc8a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8005b44:	2100      	movs	r1, #0
 8005b46:	2081      	movs	r0, #129	; 0x81
 8005b48:	f7fc fc86 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	2082      	movs	r0, #130	; 0x82
 8005b50:	f7fc fc82 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8005b54:	2100      	movs	r1, #0
 8005b56:	2083      	movs	r0, #131	; 0x83
 8005b58:	f7fc fc7e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	2084      	movs	r0, #132	; 0x84
 8005b60:	f7fc fc7a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8005b64:	2100      	movs	r1, #0
 8005b66:	2085      	movs	r0, #133	; 0x85
 8005b68:	f7fc fc76 	bl	8002458 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8005b6c:	2110      	movs	r1, #16
 8005b6e:	2090      	movs	r0, #144	; 0x90
 8005b70:	f7fc fc72 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8005b74:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005b78:	2092      	movs	r0, #146	; 0x92
 8005b7a:	f7fc fc6d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8005b7e:	f240 1133 	movw	r1, #307	; 0x133
 8005b82:	2007      	movs	r0, #7
 8005b84:	f7fc fc68 	bl	8002458 <LCD_WriteReg>
 8005b88:	f000 bde5 	b.w	8006756 <LCD_Init+0x374e>
 8005b8c:	20000118 	.word	0x20000118
	}else if(lcddev.id==0x5408)
 8005b90:	4be2      	ldr	r3, [pc, #904]	; (8005f1c <LCD_Init+0x2f14>)
 8005b92:	889b      	ldrh	r3, [r3, #4]
 8005b94:	f245 4208 	movw	r2, #21512	; 0x5408
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	f040 80a3 	bne.w	8005ce4 <LCD_Init+0x2cdc>
	{
		LCD_WriteReg(0x01,0x0100);
 8005b9e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ba2:	2001      	movs	r0, #1
 8005ba4:	f7fc fc58 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);//LCD Driving Waveform Contral
 8005ba8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005bac:	2002      	movs	r0, #2
 8005bae:	f7fc fc53 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode设置
 8005bb2:	f241 0130 	movw	r1, #4144	; 0x1030
 8005bb6:	2003      	movs	r0, #3
 8005bb8:	f7fc fc4e 	bl	8002458 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04,0x0000); //Scalling Control register
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	2004      	movs	r0, #4
 8005bc0:	f7fc fc4a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0207); //Display Control 2
 8005bc4:	f240 2107 	movw	r1, #519	; 0x207
 8005bc8:	2008      	movs	r0, #8
 8005bca:	f7fc fc45 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000); //Display Control 3
 8005bce:	2100      	movs	r1, #0
 8005bd0:	2009      	movs	r0, #9
 8005bd2:	f7fc fc41 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0A,0x0000); //Frame Cycle Control
 8005bd6:	2100      	movs	r1, #0
 8005bd8:	200a      	movs	r0, #10
 8005bda:	f7fc fc3d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0C,0x0000); //External Display Interface Control 1
 8005bde:	2100      	movs	r1, #0
 8005be0:	200c      	movs	r0, #12
 8005be2:	f7fc fc39 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0D,0x0000); //Frame Maker Position
 8005be6:	2100      	movs	r1, #0
 8005be8:	200d      	movs	r0, #13
 8005bea:	f7fc fc35 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0F,0x0000); //External Display Interface Control 2
 8005bee:	2100      	movs	r1, #0
 8005bf0:	200f      	movs	r0, #15
 8005bf2:	f7fc fc31 	bl	8002458 <LCD_WriteReg>
 		HAL_Delay(20);
 8005bf6:	2014      	movs	r0, #20
 8005bf8:	f003 f9a4 	bl	8008f44 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10,0x16B0); //0x14B0 //Power Control 1
 8005bfc:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8005c00:	2010      	movs	r0, #16
 8005c02:	f7fc fc29 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0001); //0x0007 //Power Control 2
 8005c06:	2101      	movs	r1, #1
 8005c08:	2011      	movs	r0, #17
 8005c0a:	f7fc fc25 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x17,0x0001); //0x0000 //Power Control 3
 8005c0e:	2101      	movs	r1, #1
 8005c10:	2017      	movs	r0, #23
 8005c12:	f7fc fc21 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x12,0x0138); //0x013B //Power Control 4
 8005c16:	f44f 719c 	mov.w	r1, #312	; 0x138
 8005c1a:	2012      	movs	r0, #18
 8005c1c:	f7fc fc1c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0800); //0x0800 //Power Control 5
 8005c20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c24:	2013      	movs	r0, #19
 8005c26:	f7fc fc17 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0009); //NVM read data 2
 8005c2a:	2109      	movs	r1, #9
 8005c2c:	2029      	movs	r0, #41	; 0x29
 8005c2e:	f7fc fc13 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x2a,0x0009); //NVM read data 3
 8005c32:	2109      	movs	r1, #9
 8005c34:	202a      	movs	r0, #42	; 0x2a
 8005c36:	f7fc fc0f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0xa4,0x0000);
 8005c3a:	2100      	movs	r1, #0
 8005c3c:	20a4      	movs	r0, #164	; 0xa4
 8005c3e:	f7fc fc0b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x50,0x0000); //设置操作窗口的X轴开始列
 8005c42:	2100      	movs	r1, #0
 8005c44:	2050      	movs	r0, #80	; 0x50
 8005c46:	f7fc fc07 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x51,0x00EF); //设置操作窗口的X轴结束列
 8005c4a:	21ef      	movs	r1, #239	; 0xef
 8005c4c:	2051      	movs	r0, #81	; 0x51
 8005c4e:	f7fc fc03 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x52,0x0000); //设置操作窗口的Y轴开始行
 8005c52:	2100      	movs	r1, #0
 8005c54:	2052      	movs	r0, #82	; 0x52
 8005c56:	f7fc fbff 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x53,0x013F); //设置操作窗口的Y轴结束行
 8005c5a:	f240 113f 	movw	r1, #319	; 0x13f
 8005c5e:	2053      	movs	r0, #83	; 0x53
 8005c60:	f7fc fbfa 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x60,0x2700); //Driver Output Control
 8005c64:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005c68:	2060      	movs	r0, #96	; 0x60
 8005c6a:	f7fc fbf5 	bl	8002458 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61,0x0001); //Driver Output Control
 8005c6e:	2101      	movs	r1, #1
 8005c70:	2061      	movs	r0, #97	; 0x61
 8005c72:	f7fc fbf1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x6A,0x0000); //Vertical Scroll Control
 8005c76:	2100      	movs	r1, #0
 8005c78:	206a      	movs	r0, #106	; 0x6a
 8005c7a:	f7fc fbed 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x80,0x0000); //Display Position – Partial Display 1
 8005c7e:	2100      	movs	r1, #0
 8005c80:	2080      	movs	r0, #128	; 0x80
 8005c82:	f7fc fbe9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000); //RAM Address Start – Partial Display 1
 8005c86:	2100      	movs	r1, #0
 8005c88:	2081      	movs	r0, #129	; 0x81
 8005c8a:	f7fc fbe5 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000); //RAM address End - Partial Display 1
 8005c8e:	2100      	movs	r1, #0
 8005c90:	2082      	movs	r0, #130	; 0x82
 8005c92:	f7fc fbe1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000); //Display Position – Partial Display 2
 8005c96:	2100      	movs	r1, #0
 8005c98:	2083      	movs	r0, #131	; 0x83
 8005c9a:	f7fc fbdd 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000); //RAM Address Start – Partial Display 2
 8005c9e:	2100      	movs	r1, #0
 8005ca0:	2084      	movs	r0, #132	; 0x84
 8005ca2:	f7fc fbd9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000); //RAM address End – Partail Display2
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	2085      	movs	r0, #133	; 0x85
 8005caa:	f7fc fbd5 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x90,0x0013); //Frame Cycle Control
 8005cae:	2113      	movs	r1, #19
 8005cb0:	2090      	movs	r0, #144	; 0x90
 8005cb2:	f7fc fbd1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);  //Panel Interface Control 2
 8005cb6:	2100      	movs	r1, #0
 8005cb8:	2092      	movs	r0, #146	; 0x92
 8005cba:	f7fc fbcd 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0003); //Panel Interface control 3
 8005cbe:	2103      	movs	r1, #3
 8005cc0:	2093      	movs	r0, #147	; 0x93
 8005cc2:	f7fc fbc9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);  //Frame Cycle Control
 8005cc6:	f44f 7188 	mov.w	r1, #272	; 0x110
 8005cca:	2095      	movs	r0, #149	; 0x95
 8005ccc:	f7fc fbc4 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);
 8005cd0:	f240 1173 	movw	r1, #371	; 0x173
 8005cd4:	2007      	movs	r0, #7
 8005cd6:	f7fc fbbf 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(50);
 8005cda:	2032      	movs	r0, #50	; 0x32
 8005cdc:	f003 f932 	bl	8008f44 <HAL_Delay>
 8005ce0:	f000 bd39 	b.w	8006756 <LCD_Init+0x374e>
	}
	else if(lcddev.id==0x1505)//OK
 8005ce4:	4b8d      	ldr	r3, [pc, #564]	; (8005f1c <LCD_Init+0x2f14>)
 8005ce6:	889b      	ldrh	r3, [r3, #4]
 8005ce8:	f241 5205 	movw	r2, #5381	; 0x1505
 8005cec:	4293      	cmp	r3, r2
 8005cee:	f040 8117 	bne.w	8005f20 <LCD_Init+0x2f18>
	{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
        LCD_WriteReg(0x0007,0x0000);
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	2007      	movs	r0, #7
 8005cf6:	f7fc fbaf 	bl	8002458 <LCD_WriteReg>
        HAL_Delay(50);
 8005cfa:	2032      	movs	r0, #50	; 0x32
 8005cfc:	f003 f922 	bl	8008f44 <HAL_Delay>
        LCD_WriteReg(0x0012,0x011C);//0x011A   why need to set several times?
 8005d00:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8005d04:	2012      	movs	r0, #18
 8005d06:	f7fc fba7 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x00A4,0x0001);//NVM
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	20a4      	movs	r0, #164	; 0xa4
 8005d0e:	f7fc fba3 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x000F);
 8005d12:	210f      	movs	r1, #15
 8005d14:	2008      	movs	r0, #8
 8005d16:	f7fc fb9f 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x000A,0x0008);
 8005d1a:	2108      	movs	r1, #8
 8005d1c:	200a      	movs	r0, #10
 8005d1e:	f7fc fb9b 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x000D,0x0008);
 8005d22:	2108      	movs	r1, #8
 8005d24:	200d      	movs	r0, #13
 8005d26:	f7fc fb97 	bl	8002458 <LCD_WriteReg>
  		//伽马校正
        LCD_WriteReg(0x0030,0x0707);
 8005d2a:	f240 7107 	movw	r1, #1799	; 0x707
 8005d2e:	2030      	movs	r0, #48	; 0x30
 8005d30:	f7fc fb92 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0007); //0x0707
 8005d34:	2107      	movs	r1, #7
 8005d36:	2031      	movs	r0, #49	; 0x31
 8005d38:	f7fc fb8e 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0603);
 8005d3c:	f240 6103 	movw	r1, #1539	; 0x603
 8005d40:	2032      	movs	r0, #50	; 0x32
 8005d42:	f7fc fb89 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0033,0x0700);
 8005d46:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005d4a:	2033      	movs	r0, #51	; 0x33
 8005d4c:	f7fc fb84 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0034,0x0202);
 8005d50:	f240 2102 	movw	r1, #514	; 0x202
 8005d54:	2034      	movs	r0, #52	; 0x34
 8005d56:	f7fc fb7f 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0002); //?0x0606
 8005d5a:	2102      	movs	r1, #2
 8005d5c:	2035      	movs	r0, #53	; 0x35
 8005d5e:	f7fc fb7b 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x1F0F);
 8005d62:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8005d66:	2036      	movs	r0, #54	; 0x36
 8005d68:	f7fc fb76 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0707); //0x0f0f  0x0105
 8005d6c:	f240 7107 	movw	r1, #1799	; 0x707
 8005d70:	2037      	movs	r0, #55	; 0x37
 8005d72:	f7fc fb71 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0000);
 8005d76:	2100      	movs	r1, #0
 8005d78:	2038      	movs	r0, #56	; 0x38
 8005d7a:	f7fc fb6d 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0000);
 8005d7e:	2100      	movs	r1, #0
 8005d80:	2039      	movs	r0, #57	; 0x39
 8005d82:	f7fc fb69 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x003A,0x0707);
 8005d86:	f240 7107 	movw	r1, #1799	; 0x707
 8005d8a:	203a      	movs	r0, #58	; 0x3a
 8005d8c:	f7fc fb64 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x003B,0x0000); //0x0303
 8005d90:	2100      	movs	r1, #0
 8005d92:	203b      	movs	r0, #59	; 0x3b
 8005d94:	f7fc fb60 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x003C,0x0007); //?0x0707
 8005d98:	2107      	movs	r1, #7
 8005d9a:	203c      	movs	r0, #60	; 0x3c
 8005d9c:	f7fc fb5c 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x003D,0x0000); //0x1313//0x1f08
 8005da0:	2100      	movs	r1, #0
 8005da2:	203d      	movs	r0, #61	; 0x3d
 8005da4:	f7fc fb58 	bl	8002458 <LCD_WriteReg>
        HAL_Delay(50);
 8005da8:	2032      	movs	r0, #50	; 0x32
 8005daa:	f003 f8cb 	bl	8008f44 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0001);
 8005dae:	2101      	movs	r1, #1
 8005db0:	2007      	movs	r0, #7
 8005db2:	f7fc fb51 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0017,0x0001);//开启电源
 8005db6:	2101      	movs	r1, #1
 8005db8:	2017      	movs	r0, #23
 8005dba:	f7fc fb4d 	bl	8002458 <LCD_WriteReg>
        HAL_Delay(50);
 8005dbe:	2032      	movs	r0, #50	; 0x32
 8005dc0:	f003 f8c0 	bl	8008f44 <HAL_Delay>
  		//电源配置
        LCD_WriteReg(0x0010,0x17A0);
 8005dc4:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8005dc8:	2010      	movs	r0, #16
 8005dca:	f7fc fb45 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0217);//reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 8005dce:	f240 2117 	movw	r1, #535	; 0x217
 8005dd2:	2011      	movs	r0, #17
 8005dd4:	f7fc fb40 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x011E);//0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8005dd8:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8005ddc:	2012      	movs	r0, #18
 8005dde:	f7fc fb3b 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0F00);//VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 8005de2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8005de6:	2013      	movs	r0, #19
 8005de8:	f7fc fb36 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x002A,0x0000);
 8005dec:	2100      	movs	r1, #0
 8005dee:	202a      	movs	r0, #42	; 0x2a
 8005df0:	f7fc fb32 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x000A);//0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 8005df4:	210a      	movs	r1, #10
 8005df6:	2029      	movs	r0, #41	; 0x29
 8005df8:	f7fc fb2e 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x013E);// 0x013C  power supply on
 8005dfc:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8005e00:	2012      	movs	r0, #18
 8005e02:	f7fc fb29 	bl	8002458 <LCD_WriteReg>
        //Coordinates Control//
        LCD_WriteReg(0x0050,0x0000);//0x0e00
 8005e06:	2100      	movs	r1, #0
 8005e08:	2050      	movs	r0, #80	; 0x50
 8005e0a:	f7fc fb25 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00EF);
 8005e0e:	21ef      	movs	r1, #239	; 0xef
 8005e10:	2051      	movs	r0, #81	; 0x51
 8005e12:	f7fc fb21 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000);
 8005e16:	2100      	movs	r1, #0
 8005e18:	2052      	movs	r0, #82	; 0x52
 8005e1a:	f7fc fb1d 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013F);
 8005e1e:	f240 113f 	movw	r1, #319	; 0x13f
 8005e22:	2053      	movs	r0, #83	; 0x53
 8005e24:	f7fc fb18 	bl	8002458 <LCD_WriteReg>
    	//Pannel Image Control//
        LCD_WriteReg(0x0060,0x2700);
 8005e28:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005e2c:	2060      	movs	r0, #96	; 0x60
 8005e2e:	f7fc fb13 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 8005e32:	2101      	movs	r1, #1
 8005e34:	2061      	movs	r0, #97	; 0x61
 8005e36:	f7fc fb0f 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x006A,0x0000);
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	206a      	movs	r0, #106	; 0x6a
 8005e3e:	f7fc fb0b 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8005e42:	2100      	movs	r1, #0
 8005e44:	2080      	movs	r0, #128	; 0x80
 8005e46:	f7fc fb07 	bl	8002458 <LCD_WriteReg>
    	//Partial Image Control//
        LCD_WriteReg(0x0081,0x0000);
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	2081      	movs	r0, #129	; 0x81
 8005e4e:	f7fc fb03 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8005e52:	2100      	movs	r1, #0
 8005e54:	2082      	movs	r0, #130	; 0x82
 8005e56:	f7fc faff 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 8005e5a:	2100      	movs	r1, #0
 8005e5c:	2083      	movs	r0, #131	; 0x83
 8005e5e:	f7fc fafb 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8005e62:	2100      	movs	r1, #0
 8005e64:	2084      	movs	r0, #132	; 0x84
 8005e66:	f7fc faf7 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 8005e6a:	2100      	movs	r1, #0
 8005e6c:	2085      	movs	r0, #133	; 0x85
 8005e6e:	f7fc faf3 	bl	8002458 <LCD_WriteReg>
  		//Panel Interface Control//
        LCD_WriteReg(0x0090,0x0013);//0x0010 frenqucy
 8005e72:	2113      	movs	r1, #19
 8005e74:	2090      	movs	r0, #144	; 0x90
 8005e76:	f7fc faef 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0300);
 8005e7a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005e7e:	2092      	movs	r0, #146	; 0x92
 8005e80:	f7fc faea 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0093,0x0005);
 8005e84:	2105      	movs	r1, #5
 8005e86:	2093      	movs	r0, #147	; 0x93
 8005e88:	f7fc fae6 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0095,0x0000);
 8005e8c:	2100      	movs	r1, #0
 8005e8e:	2095      	movs	r0, #149	; 0x95
 8005e90:	f7fc fae2 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0097,0x0000);
 8005e94:	2100      	movs	r1, #0
 8005e96:	2097      	movs	r0, #151	; 0x97
 8005e98:	f7fc fade 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0098,0x0000);
 8005e9c:	2100      	movs	r1, #0
 8005e9e:	2098      	movs	r0, #152	; 0x98
 8005ea0:	f7fc fada 	bl	8002458 <LCD_WriteReg>

        LCD_WriteReg(0x0001,0x0100);
 8005ea4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ea8:	2001      	movs	r0, #1
 8005eaa:	f7fc fad5 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);
 8005eae:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8005eb2:	2002      	movs	r0, #2
 8005eb4:	f7fc fad0 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 8005eb8:	f241 0138 	movw	r1, #4152	; 0x1038
 8005ebc:	2003      	movs	r0, #3
 8005ebe:	f7fc facb 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	2004      	movs	r0, #4
 8005ec6:	f7fc fac7 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x000C,0x0000);
 8005eca:	2100      	movs	r1, #0
 8005ecc:	200c      	movs	r0, #12
 8005ece:	f7fc fac3 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x000F,0x0000);
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	200f      	movs	r0, #15
 8005ed6:	f7fc fabf 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0020,0x0000);
 8005eda:	2100      	movs	r1, #0
 8005edc:	2020      	movs	r0, #32
 8005ede:	f7fc fabb 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	2021      	movs	r0, #33	; 0x21
 8005ee6:	f7fc fab7 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0007,0x0021);
 8005eea:	2121      	movs	r1, #33	; 0x21
 8005eec:	2007      	movs	r0, #7
 8005eee:	f7fc fab3 	bl	8002458 <LCD_WriteReg>
        HAL_Delay(20);
 8005ef2:	2014      	movs	r0, #20
 8005ef4:	f003 f826 	bl	8008f44 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0061);
 8005ef8:	2161      	movs	r1, #97	; 0x61
 8005efa:	2007      	movs	r0, #7
 8005efc:	f7fc faac 	bl	8002458 <LCD_WriteReg>
        HAL_Delay(20);
 8005f00:	2014      	movs	r0, #20
 8005f02:	f003 f81f 	bl	8008f44 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0173);
 8005f06:	f240 1173 	movw	r1, #371	; 0x173
 8005f0a:	2007      	movs	r0, #7
 8005f0c:	f7fc faa4 	bl	8002458 <LCD_WriteReg>
        HAL_Delay(20);
 8005f10:	2014      	movs	r0, #20
 8005f12:	f003 f817 	bl	8008f44 <HAL_Delay>
 8005f16:	f000 bc1e 	b.w	8006756 <LCD_Init+0x374e>
 8005f1a:	bf00      	nop
 8005f1c:	20000118 	.word	0x20000118
	}else if(lcddev.id==0xB505)
 8005f20:	4bef      	ldr	r3, [pc, #956]	; (80062e0 <LCD_Init+0x32d8>)
 8005f22:	889b      	ldrh	r3, [r3, #4]
 8005f24:	f24b 5205 	movw	r2, #46341	; 0xb505
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	f040 8102 	bne.w	8006132 <LCD_Init+0x312a>
	{
		LCD_WriteReg(0x0000,0x0000);
 8005f2e:	2100      	movs	r1, #0
 8005f30:	2000      	movs	r0, #0
 8005f32:	f7fc fa91 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005f36:	2100      	movs	r1, #0
 8005f38:	2000      	movs	r0, #0
 8005f3a:	f7fc fa8d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005f3e:	2100      	movs	r1, #0
 8005f40:	2000      	movs	r0, #0
 8005f42:	f7fc fa89 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8005f46:	2100      	movs	r1, #0
 8005f48:	2000      	movs	r0, #0
 8005f4a:	f7fc fa85 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0x00a4,0x0001);
 8005f4e:	2101      	movs	r1, #1
 8005f50:	20a4      	movs	r0, #164	; 0xa4
 8005f52:	f7fc fa81 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(20);
 8005f56:	2014      	movs	r0, #20
 8005f58:	f002 fff4 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 8005f5c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8005f60:	2060      	movs	r0, #96	; 0x60
 8005f62:	f7fc fa79 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8005f66:	f240 2102 	movw	r1, #514	; 0x202
 8005f6a:	2008      	movs	r0, #8
 8005f6c:	f7fc fa74 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0214);
 8005f70:	f44f 7105 	mov.w	r1, #532	; 0x214
 8005f74:	2030      	movs	r0, #48	; 0x30
 8005f76:	f7fc fa6f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x3715);
 8005f7a:	f243 7115 	movw	r1, #14101	; 0x3715
 8005f7e:	2031      	movs	r0, #49	; 0x31
 8005f80:	f7fc fa6a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0604);
 8005f84:	f240 6104 	movw	r1, #1540	; 0x604
 8005f88:	2032      	movs	r0, #50	; 0x32
 8005f8a:	f7fc fa65 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0e16);
 8005f8e:	f640 6116 	movw	r1, #3606	; 0xe16
 8005f92:	2033      	movs	r0, #51	; 0x33
 8005f94:	f7fc fa60 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x2211);
 8005f98:	f242 2111 	movw	r1, #8721	; 0x2211
 8005f9c:	2034      	movs	r0, #52	; 0x34
 8005f9e:	f7fc fa5b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x1500);
 8005fa2:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8005fa6:	2035      	movs	r0, #53	; 0x35
 8005fa8:	f7fc fa56 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x8507);
 8005fac:	f248 5107 	movw	r1, #34055	; 0x8507
 8005fb0:	2036      	movs	r0, #54	; 0x36
 8005fb2:	f7fc fa51 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x1407);
 8005fb6:	f241 4107 	movw	r1, #5127	; 0x1407
 8005fba:	2037      	movs	r0, #55	; 0x37
 8005fbc:	f7fc fa4c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x1403);
 8005fc0:	f241 4103 	movw	r1, #5123	; 0x1403
 8005fc4:	2038      	movs	r0, #56	; 0x38
 8005fc6:	f7fc fa47 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0020);
 8005fca:	2120      	movs	r1, #32
 8005fcc:	2039      	movs	r0, #57	; 0x39
 8005fce:	f7fc fa43 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0x0090,0x001a);
 8005fd2:	211a      	movs	r1, #26
 8005fd4:	2090      	movs	r0, #144	; 0x90
 8005fd6:	f7fc fa3f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0010,0x0000);
 8005fda:	2100      	movs	r1, #0
 8005fdc:	2010      	movs	r0, #16
 8005fde:	f7fc fa3b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 8005fe2:	2107      	movs	r1, #7
 8005fe4:	2011      	movs	r0, #17
 8005fe6:	f7fc fa37 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 8005fea:	2100      	movs	r1, #0
 8005fec:	2012      	movs	r0, #18
 8005fee:	f7fc fa33 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	2013      	movs	r0, #19
 8005ff6:	f7fc fa2f 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(20);
 8005ffa:	2014      	movs	r0, #20
 8005ffc:	f002 ffa2 	bl	8008f44 <HAL_Delay>

		LCD_WriteReg(0x0010,0x0730);
 8006000:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 8006004:	2010      	movs	r0, #16
 8006006:	f7fc fa27 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0137);
 800600a:	f240 1137 	movw	r1, #311	; 0x137
 800600e:	2011      	movs	r0, #17
 8006010:	f7fc fa22 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(20);
 8006014:	2014      	movs	r0, #20
 8006016:	f002 ff95 	bl	8008f44 <HAL_Delay>

		LCD_WriteReg(0x0012,0x01b8);
 800601a:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 800601e:	2012      	movs	r0, #18
 8006020:	f7fc fa1a 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(20);
 8006024:	2014      	movs	r0, #20
 8006026:	f002 ff8d 	bl	8008f44 <HAL_Delay>

		LCD_WriteReg(0x0013,0x0f00);
 800602a:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800602e:	2013      	movs	r0, #19
 8006030:	f7fc fa12 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x002a,0x0080);
 8006034:	2180      	movs	r1, #128	; 0x80
 8006036:	202a      	movs	r0, #42	; 0x2a
 8006038:	f7fc fa0e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0029,0x0048);
 800603c:	2148      	movs	r1, #72	; 0x48
 800603e:	2029      	movs	r0, #41	; 0x29
 8006040:	f7fc fa0a 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(20);
 8006044:	2014      	movs	r0, #20
 8006046:	f002 ff7d 	bl	8008f44 <HAL_Delay>

		LCD_WriteReg(0x0001,0x0100);
 800604a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800604e:	2001      	movs	r0, #1
 8006050:	f7fc fa02 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 8006054:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006058:	2002      	movs	r0, #2
 800605a:	f7fc f9fd 	bl	8002458 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 800605e:	f241 0138 	movw	r1, #4152	; 0x1038
 8006062:	2003      	movs	r0, #3
 8006064:	f7fc f9f8 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8006068:	f240 2102 	movw	r1, #514	; 0x202
 800606c:	2008      	movs	r0, #8
 800606e:	f7fc f9f3 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x000a,0x0000);
 8006072:	2100      	movs	r1, #0
 8006074:	200a      	movs	r0, #10
 8006076:	f7fc f9ef 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x000c,0x0000);
 800607a:	2100      	movs	r1, #0
 800607c:	200c      	movs	r0, #12
 800607e:	f7fc f9eb 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x000d,0x0000);
 8006082:	2100      	movs	r1, #0
 8006084:	200d      	movs	r0, #13
 8006086:	f7fc f9e7 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x000e,0x0030);
 800608a:	2130      	movs	r1, #48	; 0x30
 800608c:	200e      	movs	r0, #14
 800608e:	f7fc f9e3 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0050,0x0000);
 8006092:	2100      	movs	r1, #0
 8006094:	2050      	movs	r0, #80	; 0x50
 8006096:	f7fc f9df 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00ef);
 800609a:	21ef      	movs	r1, #239	; 0xef
 800609c:	2051      	movs	r0, #81	; 0x51
 800609e:	f7fc f9db 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 80060a2:	2100      	movs	r1, #0
 80060a4:	2052      	movs	r0, #82	; 0x52
 80060a6:	f7fc f9d7 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013f);
 80060aa:	f240 113f 	movw	r1, #319	; 0x13f
 80060ae:	2053      	movs	r0, #83	; 0x53
 80060b0:	f7fc f9d2 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0x2700);
 80060b4:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80060b8:	2060      	movs	r0, #96	; 0x60
 80060ba:	f7fc f9cd 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 80060be:	2101      	movs	r1, #1
 80060c0:	2061      	movs	r0, #97	; 0x61
 80060c2:	f7fc f9c9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x006a,0x0000);
 80060c6:	2100      	movs	r1, #0
 80060c8:	206a      	movs	r0, #106	; 0x6a
 80060ca:	f7fc f9c5 	bl	8002458 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090,0X0011);
 80060ce:	2111      	movs	r1, #17
 80060d0:	2090      	movs	r0, #144	; 0x90
 80060d2:	f7fc f9c1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 80060d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80060da:	2092      	movs	r0, #146	; 0x92
 80060dc:	f7fc f9bc 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0093,0x0402);
 80060e0:	f240 4102 	movw	r1, #1026	; 0x402
 80060e4:	2093      	movs	r0, #147	; 0x93
 80060e6:	f7fc f9b7 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0094,0x0002);
 80060ea:	2102      	movs	r1, #2
 80060ec:	2094      	movs	r0, #148	; 0x94
 80060ee:	f7fc f9b3 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(20);
 80060f2:	2014      	movs	r0, #20
 80060f4:	f002 ff26 	bl	8008f44 <HAL_Delay>

		LCD_WriteReg(0x0007,0x0001);
 80060f8:	2101      	movs	r1, #1
 80060fa:	2007      	movs	r0, #7
 80060fc:	f7fc f9ac 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(20);
 8006100:	2014      	movs	r0, #20
 8006102:	f002 ff1f 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0x0007,0x0061);
 8006106:	2161      	movs	r1, #97	; 0x61
 8006108:	2007      	movs	r0, #7
 800610a:	f7fc f9a5 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0173);
 800610e:	f240 1173 	movw	r1, #371	; 0x173
 8006112:	2007      	movs	r0, #7
 8006114:	f7fc f9a0 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0x0020,0x0000);
 8006118:	2100      	movs	r1, #0
 800611a:	2020      	movs	r0, #32
 800611c:	f7fc f99c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0021,0x0000);
 8006120:	2100      	movs	r1, #0
 8006122:	2021      	movs	r0, #33	; 0x21
 8006124:	f7fc f998 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x22);
 8006128:	2122      	movs	r1, #34	; 0x22
 800612a:	2000      	movs	r0, #0
 800612c:	f7fc f994 	bl	8002458 <LCD_WriteReg>
 8006130:	e311      	b.n	8006756 <LCD_Init+0x374e>
	}else if(lcddev.id==0xC505)
 8006132:	4b6b      	ldr	r3, [pc, #428]	; (80062e0 <LCD_Init+0x32d8>)
 8006134:	889b      	ldrh	r3, [r3, #4]
 8006136:	f24c 5205 	movw	r2, #50437	; 0xc505
 800613a:	4293      	cmp	r3, r2
 800613c:	f040 80d2 	bne.w	80062e4 <LCD_Init+0x32dc>
	{
		LCD_WriteReg(0x0000,0x0000);
 8006140:	2100      	movs	r1, #0
 8006142:	2000      	movs	r0, #0
 8006144:	f7fc f988 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8006148:	2100      	movs	r1, #0
 800614a:	2000      	movs	r0, #0
 800614c:	f7fc f984 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(20);
 8006150:	2014      	movs	r0, #20
 8006152:	f002 fef7 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0x0000,0x0000);
 8006156:	2100      	movs	r1, #0
 8006158:	2000      	movs	r0, #0
 800615a:	f7fc f97d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800615e:	2100      	movs	r1, #0
 8006160:	2000      	movs	r0, #0
 8006162:	f7fc f979 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8006166:	2100      	movs	r1, #0
 8006168:	2000      	movs	r0, #0
 800616a:	f7fc f975 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800616e:	2100      	movs	r1, #0
 8006170:	2000      	movs	r0, #0
 8006172:	f7fc f971 	bl	8002458 <LCD_WriteReg>
 		LCD_WriteReg(0x00a4,0x0001);
 8006176:	2101      	movs	r1, #1
 8006178:	20a4      	movs	r0, #164	; 0xa4
 800617a:	f7fc f96d 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(20);
 800617e:	2014      	movs	r0, #20
 8006180:	f002 fee0 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 8006184:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006188:	2060      	movs	r0, #96	; 0x60
 800618a:	f7fc f965 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0806);
 800618e:	f640 0106 	movw	r1, #2054	; 0x806
 8006192:	2008      	movs	r0, #8
 8006194:	f7fc f960 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0703);//gamma setting
 8006198:	f240 7103 	movw	r1, #1795	; 0x703
 800619c:	2030      	movs	r0, #48	; 0x30
 800619e:	f7fc f95b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0001);
 80061a2:	2101      	movs	r1, #1
 80061a4:	2031      	movs	r0, #49	; 0x31
 80061a6:	f7fc f957 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0004);
 80061aa:	2104      	movs	r1, #4
 80061ac:	2032      	movs	r0, #50	; 0x32
 80061ae:	f7fc f953 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0102);
 80061b2:	f44f 7181 	mov.w	r1, #258	; 0x102
 80061b6:	2033      	movs	r0, #51	; 0x33
 80061b8:	f7fc f94e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x0300);
 80061bc:	f44f 7140 	mov.w	r1, #768	; 0x300
 80061c0:	2034      	movs	r0, #52	; 0x34
 80061c2:	f7fc f949 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0103);
 80061c6:	f240 1103 	movw	r1, #259	; 0x103
 80061ca:	2035      	movs	r0, #53	; 0x35
 80061cc:	f7fc f944 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x001F);
 80061d0:	211f      	movs	r1, #31
 80061d2:	2036      	movs	r0, #54	; 0x36
 80061d4:	f7fc f940 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0703);
 80061d8:	f240 7103 	movw	r1, #1795	; 0x703
 80061dc:	2037      	movs	r0, #55	; 0x37
 80061de:	f7fc f93b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0001);
 80061e2:	2101      	movs	r1, #1
 80061e4:	2038      	movs	r0, #56	; 0x38
 80061e6:	f7fc f937 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0004);
 80061ea:	2104      	movs	r1, #4
 80061ec:	2039      	movs	r0, #57	; 0x39
 80061ee:	f7fc f933 	bl	8002458 <LCD_WriteReg>



		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80061f2:	2115      	movs	r1, #21
 80061f4:	2090      	movs	r0, #144	; 0x90
 80061f6:	f7fc f92f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80061fa:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80061fe:	2010      	movs	r0, #16
 8006200:	f7fc f92a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0247);	//DC1,DC0,VC
 8006204:	f240 2147 	movw	r1, #583	; 0x247
 8006208:	2011      	movs	r0, #17
 800620a:	f7fc f925 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 800620e:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8006212:	2012      	movs	r0, #18
 8006214:	f7fc f920 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 8006218:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 800621c:	2013      	movs	r0, #19
 800621e:	f7fc f91b 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(120);
 8006222:	2078      	movs	r0, #120	; 0x78
 8006224:	f002 fe8e 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 8006228:	f44f 7180 	mov.w	r1, #256	; 0x100
 800622c:	2001      	movs	r0, #1
 800622e:	f7fc f913 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 8006232:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006236:	2002      	movs	r0, #2
 8006238:	f7fc f90e 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 800623c:	f241 0130 	movw	r1, #4144	; 0x1030
 8006240:	2003      	movs	r0, #3
 8006242:	f7fc f909 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8006246:	2108      	movs	r1, #8
 8006248:	200a      	movs	r0, #10
 800624a:	f7fc f905 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800624e:	2100      	movs	r1, #0
 8006250:	200c      	movs	r0, #12
 8006252:	f7fc f901 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8006256:	2120      	movs	r1, #32
 8006258:	200e      	movs	r0, #14
 800625a:	f7fc f8fd 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800625e:	2100      	movs	r1, #0
 8006260:	200f      	movs	r0, #15
 8006262:	f7fc f8f9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8006266:	2100      	movs	r1, #0
 8006268:	2020      	movs	r0, #32
 800626a:	f7fc f8f5 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 800626e:	2100      	movs	r1, #0
 8006270:	2021      	movs	r0, #33	; 0x21
 8006272:	f7fc f8f1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x002A,0x003D);	//vcom2
 8006276:	213d      	movs	r1, #61	; 0x3d
 8006278:	202a      	movs	r0, #42	; 0x2a
 800627a:	f7fc f8ed 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(20);
 800627e:	2014      	movs	r0, #20
 8006280:	f002 fe60 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8006284:	212d      	movs	r1, #45	; 0x2d
 8006286:	2029      	movs	r0, #41	; 0x29
 8006288:	f7fc f8e6 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800628c:	2100      	movs	r1, #0
 800628e:	2050      	movs	r0, #80	; 0x50
 8006290:	f7fc f8e2 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8006294:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8006298:	2051      	movs	r0, #81	; 0x51
 800629a:	f7fc f8dd 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800629e:	2100      	movs	r1, #0
 80062a0:	2052      	movs	r0, #82	; 0x52
 80062a2:	f7fc f8d9 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 80062a6:	f240 113f 	movw	r1, #319	; 0x13f
 80062aa:	2053      	movs	r0, #83	; 0x53
 80062ac:	f7fc f8d4 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 80062b0:	2100      	movs	r1, #0
 80062b2:	2061      	movs	r0, #97	; 0x61
 80062b4:	f7fc f8d0 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 80062b8:	2100      	movs	r1, #0
 80062ba:	206a      	movs	r0, #106	; 0x6a
 80062bc:	f7fc f8cc 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0300);
 80062c0:	f44f 7140 	mov.w	r1, #768	; 0x300
 80062c4:	2092      	movs	r0, #146	; 0x92
 80062c6:	f7fc f8c7 	bl	8002458 <LCD_WriteReg>

 		LCD_WriteReg(0x0093, 0x0005);
 80062ca:	2105      	movs	r1, #5
 80062cc:	2093      	movs	r0, #147	; 0x93
 80062ce:	f7fc f8c3 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 80062d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062d6:	2007      	movs	r0, #7
 80062d8:	f7fc f8be 	bl	8002458 <LCD_WriteReg>
 80062dc:	e23b      	b.n	8006756 <LCD_Init+0x374e>
 80062de:	bf00      	nop
 80062e0:	20000118 	.word	0x20000118
	}else if(lcddev.id==0x4531)//OK |/|/|
 80062e4:	4bbb      	ldr	r3, [pc, #748]	; (80065d4 <LCD_Init+0x35cc>)
 80062e6:	889b      	ldrh	r3, [r3, #4]
 80062e8:	f244 5231 	movw	r2, #17713	; 0x4531
 80062ec:	4293      	cmp	r3, r2
 80062ee:	f040 80ba 	bne.w	8006466 <LCD_Init+0x345e>
	{
		LCD_WriteReg(0X00,0X0001);
 80062f2:	2101      	movs	r1, #1
 80062f4:	2000      	movs	r0, #0
 80062f6:	f7fc f8af 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(10);
 80062fa:	200a      	movs	r0, #10
 80062fc:	f002 fe22 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0X10,0X1628);
 8006300:	f241 6128 	movw	r1, #5672	; 0x1628
 8006304:	2010      	movs	r0, #16
 8006306:	f7fc f8a7 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X000e);//0x0006
 800630a:	210e      	movs	r1, #14
 800630c:	2012      	movs	r0, #18
 800630e:	f7fc f8a3 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X0A39);
 8006312:	f640 2139 	movw	r1, #2617	; 0xa39
 8006316:	2013      	movs	r0, #19
 8006318:	f7fc f89e 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(10);
 800631c:	200a      	movs	r0, #10
 800631e:	f002 fe11 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0X11,0X0040);
 8006322:	2140      	movs	r1, #64	; 0x40
 8006324:	2011      	movs	r0, #17
 8006326:	f7fc f897 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X15,0X0050);
 800632a:	2150      	movs	r1, #80	; 0x50
 800632c:	2015      	movs	r0, #21
 800632e:	f7fc f893 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(10);
 8006332:	200a      	movs	r0, #10
 8006334:	f002 fe06 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0X12,0X001e);//16
 8006338:	211e      	movs	r1, #30
 800633a:	2012      	movs	r0, #18
 800633c:	f7fc f88c 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(10);
 8006340:	200a      	movs	r0, #10
 8006342:	f002 fdff 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0X10,0X1620);
 8006346:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 800634a:	2010      	movs	r0, #16
 800634c:	f7fc f884 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X2A39);
 8006350:	f642 2139 	movw	r1, #10809	; 0x2a39
 8006354:	2013      	movs	r0, #19
 8006356:	f7fc f87f 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(10);
 800635a:	200a      	movs	r0, #10
 800635c:	f002 fdf2 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0X01,0X0100);
 8006360:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006364:	2001      	movs	r0, #1
 8006366:	f7fc f877 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 800636a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800636e:	2002      	movs	r0, #2
 8006370:	f7fc f872 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1038);//改变方向的
 8006374:	f241 0138 	movw	r1, #4152	; 0x1038
 8006378:	2003      	movs	r0, #3
 800637a:	f7fc f86d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0202);
 800637e:	f240 2102 	movw	r1, #514	; 0x202
 8006382:	2008      	movs	r0, #8
 8006384:	f7fc f868 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 8006388:	2108      	movs	r1, #8
 800638a:	200a      	movs	r0, #10
 800638c:	f7fc f864 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X30,0X0000);
 8006390:	2100      	movs	r1, #0
 8006392:	2030      	movs	r0, #48	; 0x30
 8006394:	f7fc f860 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 8006398:	f240 4102 	movw	r1, #1026	; 0x402
 800639c:	2031      	movs	r0, #49	; 0x31
 800639e:	f7fc f85b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0106);
 80063a2:	f44f 7183 	mov.w	r1, #262	; 0x106
 80063a6:	2032      	movs	r0, #50	; 0x32
 80063a8:	f7fc f856 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0503);
 80063ac:	f240 5103 	movw	r1, #1283	; 0x503
 80063b0:	2033      	movs	r0, #51	; 0x33
 80063b2:	f7fc f851 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0104);
 80063b6:	f44f 7182 	mov.w	r1, #260	; 0x104
 80063ba:	2034      	movs	r0, #52	; 0x34
 80063bc:	f7fc f84c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0301);
 80063c0:	f240 3101 	movw	r1, #769	; 0x301
 80063c4:	2035      	movs	r0, #53	; 0x35
 80063c6:	f7fc f847 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 80063ca:	f240 7107 	movw	r1, #1799	; 0x707
 80063ce:	2036      	movs	r0, #54	; 0x36
 80063d0:	f7fc f842 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 80063d4:	f240 3105 	movw	r1, #773	; 0x305
 80063d8:	2037      	movs	r0, #55	; 0x37
 80063da:	f7fc f83d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0208);
 80063de:	f44f 7102 	mov.w	r1, #520	; 0x208
 80063e2:	2038      	movs	r0, #56	; 0x38
 80063e4:	f7fc f838 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0F0B);
 80063e8:	f640 710b 	movw	r1, #3851	; 0xf0b
 80063ec:	2039      	movs	r0, #57	; 0x39
 80063ee:	f7fc f833 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X41,0X0002);
 80063f2:	2102      	movs	r1, #2
 80063f4:	2041      	movs	r0, #65	; 0x41
 80063f6:	f7fc f82f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X60,0X2700);
 80063fa:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80063fe:	2060      	movs	r0, #96	; 0x60
 8006400:	f7fc f82a 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8006404:	2101      	movs	r1, #1
 8006406:	2061      	movs	r0, #97	; 0x61
 8006408:	f7fc f826 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X0210);
 800640c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8006410:	2090      	movs	r0, #144	; 0x90
 8006412:	f7fc f821 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X010A);
 8006416:	f44f 7185 	mov.w	r1, #266	; 0x10a
 800641a:	2092      	movs	r0, #146	; 0x92
 800641c:	f7fc f81c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0004);
 8006420:	2104      	movs	r1, #4
 8006422:	2093      	movs	r0, #147	; 0x93
 8006424:	f7fc f818 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0100);
 8006428:	f44f 7180 	mov.w	r1, #256	; 0x100
 800642c:	20a0      	movs	r0, #160	; 0xa0
 800642e:	f7fc f813 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 8006432:	2101      	movs	r1, #1
 8006434:	2007      	movs	r0, #7
 8006436:	f7fc f80f 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 800643a:	2121      	movs	r1, #33	; 0x21
 800643c:	2007      	movs	r0, #7
 800643e:	f7fc f80b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 8006442:	2123      	movs	r1, #35	; 0x23
 8006444:	2007      	movs	r0, #7
 8006446:	f7fc f807 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 800644a:	2133      	movs	r1, #51	; 0x33
 800644c:	2007      	movs	r0, #7
 800644e:	f7fc f803 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 8006452:	f240 1133 	movw	r1, #307	; 0x133
 8006456:	2007      	movs	r0, #7
 8006458:	f7fb fffe 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0000);
 800645c:	2100      	movs	r1, #0
 800645e:	20a0      	movs	r0, #160	; 0xa0
 8006460:	f7fb fffa 	bl	8002458 <LCD_WriteReg>
 8006464:	e177      	b.n	8006756 <LCD_Init+0x374e>
	}else if(lcddev.id==0x4535)
 8006466:	4b5b      	ldr	r3, [pc, #364]	; (80065d4 <LCD_Init+0x35cc>)
 8006468:	889b      	ldrh	r3, [r3, #4]
 800646a:	f244 5235 	movw	r2, #17717	; 0x4535
 800646e:	4293      	cmp	r3, r2
 8006470:	f040 80b2 	bne.w	80065d8 <LCD_Init+0x35d0>
	{
		LCD_WriteReg(0X15,0X0030);
 8006474:	2130      	movs	r1, #48	; 0x30
 8006476:	2015      	movs	r0, #21
 8006478:	f7fb ffee 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X9A,0X0010);
 800647c:	2110      	movs	r1, #16
 800647e:	209a      	movs	r0, #154	; 0x9a
 8006480:	f7fb ffea 	bl	8002458 <LCD_WriteReg>
 		LCD_WriteReg(0X11,0X0020);
 8006484:	2120      	movs	r1, #32
 8006486:	2011      	movs	r0, #17
 8006488:	f7fb ffe6 	bl	8002458 <LCD_WriteReg>
 		LCD_WriteReg(0X10,0X3428);
 800648c:	f243 4128 	movw	r1, #13352	; 0x3428
 8006490:	2010      	movs	r0, #16
 8006492:	f7fb ffe1 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X0002);//16
 8006496:	2102      	movs	r1, #2
 8006498:	2012      	movs	r0, #18
 800649a:	f7fb ffdd 	bl	8002458 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X1038);
 800649e:	f241 0138 	movw	r1, #4152	; 0x1038
 80064a2:	2013      	movs	r0, #19
 80064a4:	f7fb ffd8 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(40);
 80064a8:	2028      	movs	r0, #40	; 0x28
 80064aa:	f002 fd4b 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0X12,0X0012);//16
 80064ae:	2112      	movs	r1, #18
 80064b0:	2012      	movs	r0, #18
 80064b2:	f7fb ffd1 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(40);
 80064b6:	2028      	movs	r0, #40	; 0x28
 80064b8:	f002 fd44 	bl	8008f44 <HAL_Delay>
  		LCD_WriteReg(0X10,0X3420);
 80064bc:	f243 4120 	movw	r1, #13344	; 0x3420
 80064c0:	2010      	movs	r0, #16
 80064c2:	f7fb ffc9 	bl	8002458 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X3038);
 80064c6:	f243 0138 	movw	r1, #12344	; 0x3038
 80064ca:	2013      	movs	r0, #19
 80064cc:	f7fb ffc4 	bl	8002458 <LCD_WriteReg>
		HAL_Delay(70);
 80064d0:	2046      	movs	r0, #70	; 0x46
 80064d2:	f002 fd37 	bl	8008f44 <HAL_Delay>
		LCD_WriteReg(0X30,0X0000);
 80064d6:	2100      	movs	r1, #0
 80064d8:	2030      	movs	r0, #48	; 0x30
 80064da:	f7fb ffbd 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 80064de:	f240 4102 	movw	r1, #1026	; 0x402
 80064e2:	2031      	movs	r0, #49	; 0x31
 80064e4:	f7fb ffb8 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0307);
 80064e8:	f240 3107 	movw	r1, #775	; 0x307
 80064ec:	2032      	movs	r0, #50	; 0x32
 80064ee:	f7fb ffb3 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0304);
 80064f2:	f44f 7141 	mov.w	r1, #772	; 0x304
 80064f6:	2033      	movs	r0, #51	; 0x33
 80064f8:	f7fb ffae 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0004);
 80064fc:	2104      	movs	r1, #4
 80064fe:	2034      	movs	r0, #52	; 0x34
 8006500:	f7fb ffaa 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0401);
 8006504:	f240 4101 	movw	r1, #1025	; 0x401
 8006508:	2035      	movs	r0, #53	; 0x35
 800650a:	f7fb ffa5 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 800650e:	f240 7107 	movw	r1, #1799	; 0x707
 8006512:	2036      	movs	r0, #54	; 0x36
 8006514:	f7fb ffa0 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 8006518:	f240 3105 	movw	r1, #773	; 0x305
 800651c:	2037      	movs	r0, #55	; 0x37
 800651e:	f7fb ff9b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0610);
 8006522:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8006526:	2038      	movs	r0, #56	; 0x38
 8006528:	f7fb ff96 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0610);
 800652c:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8006530:	2039      	movs	r0, #57	; 0x39
 8006532:	f7fb ff91 	bl	8002458 <LCD_WriteReg>

		LCD_WriteReg(0X01,0X0100);
 8006536:	f44f 7180 	mov.w	r1, #256	; 0x100
 800653a:	2001      	movs	r0, #1
 800653c:	f7fb ff8c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 8006540:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006544:	2002      	movs	r0, #2
 8006546:	f7fb ff87 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1030);//改变方向的
 800654a:	f241 0130 	movw	r1, #4144	; 0x1030
 800654e:	2003      	movs	r0, #3
 8006550:	f7fb ff82 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0808);
 8006554:	f640 0108 	movw	r1, #2056	; 0x808
 8006558:	2008      	movs	r0, #8
 800655a:	f7fb ff7d 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 800655e:	2108      	movs	r1, #8
 8006560:	200a      	movs	r0, #10
 8006562:	f7fb ff79 	bl	8002458 <LCD_WriteReg>
 		LCD_WriteReg(0X60,0X2700);
 8006566:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800656a:	2060      	movs	r0, #96	; 0x60
 800656c:	f7fb ff74 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8006570:	2101      	movs	r1, #1
 8006572:	2061      	movs	r0, #97	; 0x61
 8006574:	f7fb ff70 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X013E);
 8006578:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800657c:	2090      	movs	r0, #144	; 0x90
 800657e:	f7fb ff6b 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X0100);
 8006582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006586:	2092      	movs	r0, #146	; 0x92
 8006588:	f7fb ff66 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0100);
 800658c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006590:	2093      	movs	r0, #147	; 0x93
 8006592:	f7fb ff61 	bl	8002458 <LCD_WriteReg>
 		LCD_WriteReg(0XA0,0X3000);
 8006596:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800659a:	20a0      	movs	r0, #160	; 0xa0
 800659c:	f7fb ff5c 	bl	8002458 <LCD_WriteReg>
 		LCD_WriteReg(0XA3,0X0010);
 80065a0:	2110      	movs	r1, #16
 80065a2:	20a3      	movs	r0, #163	; 0xa3
 80065a4:	f7fb ff58 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 80065a8:	2101      	movs	r1, #1
 80065aa:	2007      	movs	r0, #7
 80065ac:	f7fb ff54 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 80065b0:	2121      	movs	r1, #33	; 0x21
 80065b2:	2007      	movs	r0, #7
 80065b4:	f7fb ff50 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 80065b8:	2123      	movs	r1, #35	; 0x23
 80065ba:	2007      	movs	r0, #7
 80065bc:	f7fb ff4c 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 80065c0:	2133      	movs	r1, #51	; 0x33
 80065c2:	2007      	movs	r0, #7
 80065c4:	f7fb ff48 	bl	8002458 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 80065c8:	f240 1133 	movw	r1, #307	; 0x133
 80065cc:	2007      	movs	r0, #7
 80065ce:	f7fb ff43 	bl	8002458 <LCD_WriteReg>
 80065d2:	e0c0      	b.n	8006756 <LCD_Init+0x374e>
 80065d4:	20000118 	.word	0x20000118
	}else if(lcddev.id==0X1963)
 80065d8:	4b66      	ldr	r3, [pc, #408]	; (8006774 <LCD_Init+0x376c>)
 80065da:	889b      	ldrh	r3, [r3, #4]
 80065dc:	f641 1263 	movw	r2, #6499	; 0x1963
 80065e0:	4293      	cmp	r3, r2
 80065e2:	f040 80b8 	bne.w	8006756 <LCD_Init+0x374e>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80065e6:	20e2      	movs	r0, #226	; 0xe2
 80065e8:	f7fb fefc 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 80065ec:	201d      	movs	r0, #29
 80065ee:	f7fb ff0d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80065f2:	2002      	movs	r0, #2
 80065f4:	f7fb ff0a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 80065f8:	2004      	movs	r0, #4
 80065fa:	f7fb ff07 	bl	800240c <LCD_WR_DATA>
		delay_us(100);
 80065fe:	2064      	movs	r0, #100	; 0x64
 8006600:	f7fa fc3a 	bl	8000e78 <delay_us>
		LCD_WR_REG(0xE0);		// Start PLL command
 8006604:	20e0      	movs	r0, #224	; 0xe0
 8006606:	f7fb feed 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 800660a:	2001      	movs	r0, #1
 800660c:	f7fb fefe 	bl	800240c <LCD_WR_DATA>
		HAL_Delay(10);
 8006610:	200a      	movs	r0, #10
 8006612:	f002 fc97 	bl	8008f44 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 8006616:	20e0      	movs	r0, #224	; 0xe0
 8006618:	f7fb fee4 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 800661c:	2003      	movs	r0, #3
 800661e:	f7fb fef5 	bl	800240c <LCD_WR_DATA>
		HAL_Delay(12);
 8006622:	200c      	movs	r0, #12
 8006624:	f002 fc8e 	bl	8008f44 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 8006628:	2001      	movs	r0, #1
 800662a:	f7fb fedb 	bl	80023e4 <LCD_WR_REG>
		HAL_Delay(10);
 800662e:	200a      	movs	r0, #10
 8006630:	f002 fc88 	bl	8008f44 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8006634:	20e6      	movs	r0, #230	; 0xe6
 8006636:	f7fb fed5 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 800663a:	202f      	movs	r0, #47	; 0x2f
 800663c:	f7fb fee6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8006640:	20ff      	movs	r0, #255	; 0xff
 8006642:	f7fb fee3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8006646:	20ff      	movs	r0, #255	; 0xff
 8006648:	f7fb fee0 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 800664c:	20b0      	movs	r0, #176	; 0xb0
 800664e:	f7fb fec9 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8006652:	2020      	movs	r0, #32
 8006654:	f7fb feda 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 8006658:	2000      	movs	r0, #0
 800665a:	f7fb fed7 	bl	800240c <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 800665e:	2003      	movs	r0, #3
 8006660:	f7fb fed4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8006664:	f240 301f 	movw	r0, #799	; 0x31f
 8006668:	f7fb fed0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 800666c:	2001      	movs	r0, #1
 800666e:	f7fb fecd 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8006672:	f240 10df 	movw	r0, #479	; 0x1df
 8006676:	f7fb fec9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 800667a:	2000      	movs	r0, #0
 800667c:	f7fb fec6 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 8006680:	20b4      	movs	r0, #180	; 0xb4
 8006682:	f7fb feaf 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8006686:	2004      	movs	r0, #4
 8006688:	f7fb fec0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 800668c:	f240 401f 	movw	r0, #1055	; 0x41f
 8006690:	f7fb febc 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 8006694:	2000      	movs	r0, #0
 8006696:	f7fb feb9 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 800669a:	202e      	movs	r0, #46	; 0x2e
 800669c:	f7fb feb6 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 80066a0:	2000      	movs	r0, #0
 80066a2:	f7fb feb3 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80066a6:	2000      	movs	r0, #0
 80066a8:	f7fb feb0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80066ac:	2000      	movs	r0, #0
 80066ae:	f7fb fead 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80066b2:	2000      	movs	r0, #0
 80066b4:	f7fb feaa 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 80066b8:	20b6      	movs	r0, #182	; 0xb6
 80066ba:	f7fb fe93 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 80066be:	2002      	movs	r0, #2
 80066c0:	f7fb fea4 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 80066c4:	f44f 7003 	mov.w	r0, #524	; 0x20c
 80066c8:	f7fb fea0 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 80066cc:	2000      	movs	r0, #0
 80066ce:	f7fb fe9d 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 80066d2:	2017      	movs	r0, #23
 80066d4:	f7fb fe9a 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 80066d8:	2015      	movs	r0, #21
 80066da:	f7fb fe97 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80066de:	2000      	movs	r0, #0
 80066e0:	f7fb fe94 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80066e4:	2000      	movs	r0, #0
 80066e6:	f7fb fe91 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 80066ea:	20f0      	movs	r0, #240	; 0xf0
 80066ec:	f7fb fe7a 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 80066f0:	2003      	movs	r0, #3
 80066f2:	f7fb fe8b 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 80066f6:	2029      	movs	r0, #41	; 0x29
 80066f8:	f7fb fe74 	bl	80023e4 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 80066fc:	20d0      	movs	r0, #208	; 0xd0
 80066fe:	f7fb fe71 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8006702:	2000      	movs	r0, #0
 8006704:	f7fb fe82 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 8006708:	20be      	movs	r0, #190	; 0xbe
 800670a:	f7fb fe6b 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 800670e:	2005      	movs	r0, #5
 8006710:	f7fb fe7c 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8006714:	20fe      	movs	r0, #254	; 0xfe
 8006716:	f7fb fe79 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 800671a:	2001      	movs	r0, #1
 800671c:	f7fb fe76 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 8006720:	2000      	movs	r0, #0
 8006722:	f7fb fe73 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 8006726:	2000      	movs	r0, #0
 8006728:	f7fb fe70 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 800672c:	2000      	movs	r0, #0
 800672e:	f7fb fe6d 	bl	800240c <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8006732:	20b8      	movs	r0, #184	; 0xb8
 8006734:	f7fb fe56 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8006738:	2003      	movs	r0, #3
 800673a:	f7fb fe67 	bl	800240c <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 800673e:	2001      	movs	r0, #1
 8006740:	f7fb fe64 	bl	800240c <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 8006744:	20ba      	movs	r0, #186	; 0xba
 8006746:	f7fb fe4d 	bl	80023e4 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 800674a:	2001      	movs	r0, #1
 800674c:	f7fb fe5e 	bl	800240c <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 8006750:	2064      	movs	r0, #100	; 0x64
 8006752:	f7fc fb19 	bl	8002d88 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(0);		//默认为竖屏
 8006756:	2000      	movs	r0, #0
 8006758:	f7fc fb4a 	bl	8002df0 <LCD_Display_Dir>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);				//点亮背光
 800675c:	2201      	movs	r2, #1
 800675e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006762:	4805      	ldr	r0, [pc, #20]	; (8006778 <LCD_Init+0x3770>)
 8006764:	f003 fe42 	bl	800a3ec <HAL_GPIO_WritePin>
	LCD_Clear(WHITE);
 8006768:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800676c:	f000 f806 	bl	800677c <LCD_Clear>
}
 8006770:	bf00      	nop
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20000118 	.word	0x20000118
 8006778:	40020400 	.word	0x40020400

0800677c <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint16_t color)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	4603      	mov	r3, r0
 8006784:	80fb      	strh	r3, [r7, #6]
	uint32_t index=0;
 8006786:	2300      	movs	r3, #0
 8006788:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 800678a:	4b21      	ldr	r3, [pc, #132]	; (8006810 <LCD_Clear+0x94>)
 800678c:	881b      	ldrh	r3, [r3, #0]
 800678e:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 8006790:	4b1f      	ldr	r3, [pc, #124]	; (8006810 <LCD_Clear+0x94>)
 8006792:	885b      	ldrh	r3, [r3, #2]
 8006794:	461a      	mov	r2, r3
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	fb02 f303 	mul.w	r3, r2, r3
 800679c:	60bb      	str	r3, [r7, #8]
	if((lcddev.id==0X6804)&&(lcddev.dir==1))//6804横屏的时候特殊处理
 800679e:	4b1c      	ldr	r3, [pc, #112]	; (8006810 <LCD_Clear+0x94>)
 80067a0:	889b      	ldrh	r3, [r3, #4]
 80067a2:	f646 0204 	movw	r2, #26628	; 0x6804
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d11a      	bne.n	80067e0 <LCD_Clear+0x64>
 80067aa:	4b19      	ldr	r3, [pc, #100]	; (8006810 <LCD_Clear+0x94>)
 80067ac:	799b      	ldrb	r3, [r3, #6]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d116      	bne.n	80067e0 <LCD_Clear+0x64>
	{
 		lcddev.dir=0;
 80067b2:	4b17      	ldr	r3, [pc, #92]	; (8006810 <LCD_Clear+0x94>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 80067b8:	4b15      	ldr	r3, [pc, #84]	; (8006810 <LCD_Clear+0x94>)
 80067ba:	222a      	movs	r2, #42	; 0x2a
 80067bc:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 80067be:	4b14      	ldr	r3, [pc, #80]	; (8006810 <LCD_Clear+0x94>)
 80067c0:	222b      	movs	r2, #43	; 0x2b
 80067c2:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00,0x0000);		//设置光标位置
 80067c4:	2100      	movs	r1, #0
 80067c6:	2000      	movs	r0, #0
 80067c8:	f7fb fe80 	bl	80024cc <LCD_SetCursor>
 		lcddev.dir=1;
 80067cc:	4b10      	ldr	r3, [pc, #64]	; (8006810 <LCD_Clear+0x94>)
 80067ce:	2201      	movs	r2, #1
 80067d0:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 80067d2:	4b0f      	ldr	r3, [pc, #60]	; (8006810 <LCD_Clear+0x94>)
 80067d4:	222b      	movs	r2, #43	; 0x2b
 80067d6:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 80067d8:	4b0d      	ldr	r3, [pc, #52]	; (8006810 <LCD_Clear+0x94>)
 80067da:	222a      	movs	r2, #42	; 0x2a
 80067dc:	819a      	strh	r2, [r3, #12]
 80067de:	e003      	b.n	80067e8 <LCD_Clear+0x6c>
 	}else LCD_SetCursor(0x00,0x0000);	//设置光标位置
 80067e0:	2100      	movs	r1, #0
 80067e2:	2000      	movs	r0, #0
 80067e4:	f7fb fe72 	bl	80024cc <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 80067e8:	f7fb fe60 	bl	80024ac <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 80067ec:	2300      	movs	r3, #0
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	e005      	b.n	80067fe <LCD_Clear+0x82>
	{
		LCD->LCD_RAM=color;
 80067f2:	4a08      	ldr	r2, [pc, #32]	; (8006814 <LCD_Clear+0x98>)
 80067f4:	88fb      	ldrh	r3, [r7, #6]
 80067f6:	8053      	strh	r3, [r2, #2]
	for(index=0;index<totalpoint;index++)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	3301      	adds	r3, #1
 80067fc:	60fb      	str	r3, [r7, #12]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	429a      	cmp	r2, r3
 8006804:	d3f5      	bcc.n	80067f2 <LCD_Clear+0x76>
	}
}
 8006806:	bf00      	nop
 8006808:	bf00      	nop
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20000118 	.word	0x20000118
 8006814:	6c00007e 	.word	0x6c00007e

08006818 <LCD_Fill>:
//在指定区域内填充单个颜色
//(sx,sy),(ex,ey):填充矩形对角坐标,区域大小为:(ex-sx+1)*(ey-sy+1)
//color:要填充的颜色
void LCD_Fill(uint16_t sx,uint16_t sy,uint16_t ex,uint16_t ey,uint16_t color)
{
 8006818:	b590      	push	{r4, r7, lr}
 800681a:	b087      	sub	sp, #28
 800681c:	af02      	add	r7, sp, #8
 800681e:	4604      	mov	r4, r0
 8006820:	4608      	mov	r0, r1
 8006822:	4611      	mov	r1, r2
 8006824:	461a      	mov	r2, r3
 8006826:	4623      	mov	r3, r4
 8006828:	80fb      	strh	r3, [r7, #6]
 800682a:	4603      	mov	r3, r0
 800682c:	80bb      	strh	r3, [r7, #4]
 800682e:	460b      	mov	r3, r1
 8006830:	807b      	strh	r3, [r7, #2]
 8006832:	4613      	mov	r3, r2
 8006834:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	uint16_t xlen=0;
 8006836:	2300      	movs	r3, #0
 8006838:	817b      	strh	r3, [r7, #10]
	uint16_t temp;
	if((lcddev.id==0X6804)&&(lcddev.dir==1))	//6804横屏的时候特殊处理
 800683a:	4b32      	ldr	r3, [pc, #200]	; (8006904 <LCD_Fill+0xec>)
 800683c:	889b      	ldrh	r3, [r3, #4]
 800683e:	f646 0204 	movw	r2, #26628	; 0x6804
 8006842:	4293      	cmp	r3, r2
 8006844:	d133      	bne.n	80068ae <LCD_Fill+0x96>
 8006846:	4b2f      	ldr	r3, [pc, #188]	; (8006904 <LCD_Fill+0xec>)
 8006848:	799b      	ldrb	r3, [r3, #6]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d12f      	bne.n	80068ae <LCD_Fill+0x96>
	{
		temp=sx;
 800684e:	88fb      	ldrh	r3, [r7, #6]
 8006850:	813b      	strh	r3, [r7, #8]
		sx=sy;
 8006852:	88bb      	ldrh	r3, [r7, #4]
 8006854:	80fb      	strh	r3, [r7, #6]
		sy=lcddev.width-ex-1;
 8006856:	4b2b      	ldr	r3, [pc, #172]	; (8006904 <LCD_Fill+0xec>)
 8006858:	881a      	ldrh	r2, [r3, #0]
 800685a:	887b      	ldrh	r3, [r7, #2]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	b29b      	uxth	r3, r3
 8006860:	3b01      	subs	r3, #1
 8006862:	80bb      	strh	r3, [r7, #4]
		ex=ey;
 8006864:	883b      	ldrh	r3, [r7, #0]
 8006866:	807b      	strh	r3, [r7, #2]
		ey=lcddev.width-temp-1;
 8006868:	4b26      	ldr	r3, [pc, #152]	; (8006904 <LCD_Fill+0xec>)
 800686a:	881a      	ldrh	r2, [r3, #0]
 800686c:	893b      	ldrh	r3, [r7, #8]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	b29b      	uxth	r3, r3
 8006872:	3b01      	subs	r3, #1
 8006874:	803b      	strh	r3, [r7, #0]
 		lcddev.dir=0;
 8006876:	4b23      	ldr	r3, [pc, #140]	; (8006904 <LCD_Fill+0xec>)
 8006878:	2200      	movs	r2, #0
 800687a:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 800687c:	4b21      	ldr	r3, [pc, #132]	; (8006904 <LCD_Fill+0xec>)
 800687e:	222a      	movs	r2, #42	; 0x2a
 8006880:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 8006882:	4b20      	ldr	r3, [pc, #128]	; (8006904 <LCD_Fill+0xec>)
 8006884:	222b      	movs	r2, #43	; 0x2b
 8006886:	819a      	strh	r2, [r3, #12]
		LCD_Fill(sx,sy,ex,ey,color);
 8006888:	883c      	ldrh	r4, [r7, #0]
 800688a:	887a      	ldrh	r2, [r7, #2]
 800688c:	88b9      	ldrh	r1, [r7, #4]
 800688e:	88f8      	ldrh	r0, [r7, #6]
 8006890:	8c3b      	ldrh	r3, [r7, #32]
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	4623      	mov	r3, r4
 8006896:	f7ff ffbf 	bl	8006818 <LCD_Fill>
 		lcddev.dir=1;
 800689a:	4b1a      	ldr	r3, [pc, #104]	; (8006904 <LCD_Fill+0xec>)
 800689c:	2201      	movs	r2, #1
 800689e:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 80068a0:	4b18      	ldr	r3, [pc, #96]	; (8006904 <LCD_Fill+0xec>)
 80068a2:	222b      	movs	r2, #43	; 0x2b
 80068a4:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 80068a6:	4b17      	ldr	r3, [pc, #92]	; (8006904 <LCD_Fill+0xec>)
 80068a8:	222a      	movs	r2, #42	; 0x2a
 80068aa:	819a      	strh	r2, [r3, #12]
 80068ac:	e025      	b.n	80068fa <LCD_Fill+0xe2>
 	}else
	{
		xlen=ex-sx+1;
 80068ae:	887a      	ldrh	r2, [r7, #2]
 80068b0:	88fb      	ldrh	r3, [r7, #6]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	3301      	adds	r3, #1
 80068b8:	817b      	strh	r3, [r7, #10]
		for(i=sy;i<=ey;i++)
 80068ba:	88bb      	ldrh	r3, [r7, #4]
 80068bc:	81fb      	strh	r3, [r7, #14]
 80068be:	e017      	b.n	80068f0 <LCD_Fill+0xd8>
		{
		 	LCD_SetCursor(sx,i);      				//设置光标位置
 80068c0:	89fa      	ldrh	r2, [r7, #14]
 80068c2:	88fb      	ldrh	r3, [r7, #6]
 80068c4:	4611      	mov	r1, r2
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fb fe00 	bl	80024cc <LCD_SetCursor>
			LCD_WriteRAM_Prepare();     			//开始写入GRAM
 80068cc:	f7fb fdee 	bl	80024ac <LCD_WriteRAM_Prepare>
			for(j=0;j<xlen;j++)LCD->LCD_RAM=color;	//显示颜色
 80068d0:	2300      	movs	r3, #0
 80068d2:	81bb      	strh	r3, [r7, #12]
 80068d4:	e005      	b.n	80068e2 <LCD_Fill+0xca>
 80068d6:	4a0c      	ldr	r2, [pc, #48]	; (8006908 <LCD_Fill+0xf0>)
 80068d8:	8c3b      	ldrh	r3, [r7, #32]
 80068da:	8053      	strh	r3, [r2, #2]
 80068dc:	89bb      	ldrh	r3, [r7, #12]
 80068de:	3301      	adds	r3, #1
 80068e0:	81bb      	strh	r3, [r7, #12]
 80068e2:	89ba      	ldrh	r2, [r7, #12]
 80068e4:	897b      	ldrh	r3, [r7, #10]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d3f5      	bcc.n	80068d6 <LCD_Fill+0xbe>
		for(i=sy;i<=ey;i++)
 80068ea:	89fb      	ldrh	r3, [r7, #14]
 80068ec:	3301      	adds	r3, #1
 80068ee:	81fb      	strh	r3, [r7, #14]
 80068f0:	89fa      	ldrh	r2, [r7, #14]
 80068f2:	883b      	ldrh	r3, [r7, #0]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d9e3      	bls.n	80068c0 <LCD_Fill+0xa8>
		}
	}
}
 80068f8:	bf00      	nop
 80068fa:	bf00      	nop
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd90      	pop	{r4, r7, pc}
 8006902:	bf00      	nop
 8006904:	20000118 	.word	0x20000118
 8006908:	6c00007e 	.word	0x6c00007e

0800690c <LCD_DrawLine>:
}
//画线
//x1,y1:起点坐标
//x2,y2:终点坐标
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 800690c:	b590      	push	{r4, r7, lr}
 800690e:	b08d      	sub	sp, #52	; 0x34
 8006910:	af00      	add	r7, sp, #0
 8006912:	4604      	mov	r4, r0
 8006914:	4608      	mov	r0, r1
 8006916:	4611      	mov	r1, r2
 8006918:	461a      	mov	r2, r3
 800691a:	4623      	mov	r3, r4
 800691c:	80fb      	strh	r3, [r7, #6]
 800691e:	4603      	mov	r3, r0
 8006920:	80bb      	strh	r3, [r7, #4]
 8006922:	460b      	mov	r3, r1
 8006924:	807b      	strh	r3, [r7, #2]
 8006926:	4613      	mov	r3, r2
 8006928:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 800692a:	2300      	movs	r3, #0
 800692c:	62bb      	str	r3, [r7, #40]	; 0x28
 800692e:	2300      	movs	r3, #0
 8006930:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1; //计算坐标增量
 8006932:	887a      	ldrh	r2, [r7, #2]
 8006934:	88fb      	ldrh	r3, [r7, #6]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 800693a:	883a      	ldrh	r2, [r7, #0]
 800693c:	88bb      	ldrh	r3, [r7, #4]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8006946:	88bb      	ldrh	r3, [r7, #4]
 8006948:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //设置单步方向
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	2b00      	cmp	r3, #0
 800694e:	dd02      	ble.n	8006956 <LCD_DrawLine+0x4a>
 8006950:	2301      	movs	r3, #1
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	e00b      	b.n	800696e <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;//垂直线
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d102      	bne.n	8006962 <LCD_DrawLine+0x56>
 800695c:	2300      	movs	r3, #0
 800695e:	617b      	str	r3, [r7, #20]
 8006960:	e005      	b.n	800696e <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8006962:	f04f 33ff 	mov.w	r3, #4294967295
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	425b      	negs	r3, r3
 800696c:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	2b00      	cmp	r3, #0
 8006972:	dd02      	ble.n	800697a <LCD_DrawLine+0x6e>
 8006974:	2301      	movs	r3, #1
 8006976:	613b      	str	r3, [r7, #16]
 8006978:	e00b      	b.n	8006992 <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;//水平线
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d102      	bne.n	8006986 <LCD_DrawLine+0x7a>
 8006980:	2300      	movs	r3, #0
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	e005      	b.n	8006992 <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;}
 8006986:	f04f 33ff 	mov.w	r3, #4294967295
 800698a:	613b      	str	r3, [r7, #16]
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	425b      	negs	r3, r3
 8006990:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴
 8006992:	6a3a      	ldr	r2, [r7, #32]
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	429a      	cmp	r2, r3
 8006998:	dd02      	ble.n	80069a0 <LCD_DrawLine+0x94>
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	61bb      	str	r3, [r7, #24]
 800699e:	e001      	b.n	80069a4 <LCD_DrawLine+0x98>
	else distance=delta_y;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )//画线输出
 80069a4:	2300      	movs	r3, #0
 80069a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80069a8:	e02a      	b.n	8006a00 <LCD_DrawLine+0xf4>
	{
		LCD_DrawPoint(uRow,uCol);//画点
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	b292      	uxth	r2, r2
 80069b2:	4611      	mov	r1, r2
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fc f8b3 	bl	8002b20 <LCD_DrawPoint>
		xerr+=delta_x ;
 80069ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069bc:	6a3b      	ldr	r3, [r7, #32]
 80069be:	4413      	add	r3, r2
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y ;
 80069c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	4413      	add	r3, r2
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 80069ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	429a      	cmp	r2, r3
 80069d0:	dd07      	ble.n	80069e2 <LCD_DrawLine+0xd6>
		{
			xerr-=distance;
 80069d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 80069da:	68fa      	ldr	r2, [r7, #12]
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	4413      	add	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 80069e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e4:	69bb      	ldr	r3, [r7, #24]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	dd07      	ble.n	80069fa <LCD_DrawLine+0xee>
		{
			yerr-=distance;
 80069ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	4413      	add	r3, r2
 80069f8:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )//画线输出
 80069fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80069fc:	3301      	adds	r3, #1
 80069fe:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006a00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	3301      	adds	r3, #1
 8006a06:	429a      	cmp	r2, r3
 8006a08:	ddcf      	ble.n	80069aa <LCD_DrawLine+0x9e>
		}
	}
}
 8006a0a:	bf00      	nop
 8006a0c:	bf00      	nop
 8006a0e:	3734      	adds	r7, #52	; 0x34
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd90      	pop	{r4, r7, pc}

08006a14 <LCD_DrawRectangle>:
//画矩形
//(x1,y1),(x2,y2):矩形的对角坐标
void LCD_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8006a14:	b590      	push	{r4, r7, lr}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	4608      	mov	r0, r1
 8006a1e:	4611      	mov	r1, r2
 8006a20:	461a      	mov	r2, r3
 8006a22:	4623      	mov	r3, r4
 8006a24:	80fb      	strh	r3, [r7, #6]
 8006a26:	4603      	mov	r3, r0
 8006a28:	80bb      	strh	r3, [r7, #4]
 8006a2a:	460b      	mov	r3, r1
 8006a2c:	807b      	strh	r3, [r7, #2]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	803b      	strh	r3, [r7, #0]
	LCD_DrawLine(x1,y1,x2,y1);
 8006a32:	88bb      	ldrh	r3, [r7, #4]
 8006a34:	887a      	ldrh	r2, [r7, #2]
 8006a36:	88b9      	ldrh	r1, [r7, #4]
 8006a38:	88f8      	ldrh	r0, [r7, #6]
 8006a3a:	f7ff ff67 	bl	800690c <LCD_DrawLine>
	LCD_DrawLine(x1,y1,x1,y2);
 8006a3e:	883b      	ldrh	r3, [r7, #0]
 8006a40:	88fa      	ldrh	r2, [r7, #6]
 8006a42:	88b9      	ldrh	r1, [r7, #4]
 8006a44:	88f8      	ldrh	r0, [r7, #6]
 8006a46:	f7ff ff61 	bl	800690c <LCD_DrawLine>
	LCD_DrawLine(x1,y2,x2,y2);
 8006a4a:	883b      	ldrh	r3, [r7, #0]
 8006a4c:	887a      	ldrh	r2, [r7, #2]
 8006a4e:	8839      	ldrh	r1, [r7, #0]
 8006a50:	88f8      	ldrh	r0, [r7, #6]
 8006a52:	f7ff ff5b 	bl	800690c <LCD_DrawLine>
	LCD_DrawLine(x2,y1,x2,y2);
 8006a56:	883b      	ldrh	r3, [r7, #0]
 8006a58:	887a      	ldrh	r2, [r7, #2]
 8006a5a:	88b9      	ldrh	r1, [r7, #4]
 8006a5c:	8878      	ldrh	r0, [r7, #2]
 8006a5e:	f7ff ff55 	bl	800690c <LCD_DrawLine>
}
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd90      	pop	{r4, r7, pc}

08006a6a <LCD_Draw_Circle>:
//在指定位置画一个指定大小的圆
//(x,y):中心点
//r    :半径
void LCD_Draw_Circle(uint16_t x0,uint16_t y0,uint8_t r)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b086      	sub	sp, #24
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	4603      	mov	r3, r0
 8006a72:	80fb      	strh	r3, [r7, #6]
 8006a74:	460b      	mov	r3, r1
 8006a76:	80bb      	strh	r3, [r7, #4]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	70fb      	strb	r3, [r7, #3]
	int a,b;
	int di;
	a=0;b=r;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	613b      	str	r3, [r7, #16]
	di=3-(r<<1);             //判断下个点位置的标志
 8006a84:	78fb      	ldrb	r3, [r7, #3]
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	f1c3 0303 	rsb	r3, r3, #3
 8006a8c:	60fb      	str	r3, [r7, #12]
	while(a<=b)
 8006a8e:	e07f      	b.n	8006b90 <LCD_Draw_Circle+0x126>
	{
		LCD_DrawPoint(x0+a,y0-b);             //5
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	88fb      	ldrh	r3, [r7, #6]
 8006a96:	4413      	add	r3, r2
 8006a98:	b298      	uxth	r0, r3
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	88ba      	ldrh	r2, [r7, #4]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	f7fc f83b 	bl	8002b20 <LCD_DrawPoint>
 		LCD_DrawPoint(x0+b,y0-a);             //0
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	88fb      	ldrh	r3, [r7, #6]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	b298      	uxth	r0, r3
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	88ba      	ldrh	r2, [r7, #4]
 8006aba:	1ad3      	subs	r3, r2, r3
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	4619      	mov	r1, r3
 8006ac0:	f7fc f82e 	bl	8002b20 <LCD_DrawPoint>
		LCD_DrawPoint(x0+b,y0+a);             //4
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	88fb      	ldrh	r3, [r7, #6]
 8006aca:	4413      	add	r3, r2
 8006acc:	b298      	uxth	r0, r3
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	88bb      	ldrh	r3, [r7, #4]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	4619      	mov	r1, r3
 8006ada:	f7fc f821 	bl	8002b20 <LCD_DrawPoint>
		LCD_DrawPoint(x0+a,y0+b);             //6
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	88fb      	ldrh	r3, [r7, #6]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	b298      	uxth	r0, r3
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	b29a      	uxth	r2, r3
 8006aec:	88bb      	ldrh	r3, [r7, #4]
 8006aee:	4413      	add	r3, r2
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	4619      	mov	r1, r3
 8006af4:	f7fc f814 	bl	8002b20 <LCD_DrawPoint>
		LCD_DrawPoint(x0-a,y0+b);             //1
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	88fa      	ldrh	r2, [r7, #6]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	b298      	uxth	r0, r3
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	88bb      	ldrh	r3, [r7, #4]
 8006b08:	4413      	add	r3, r2
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	f7fc f807 	bl	8002b20 <LCD_DrawPoint>
 		LCD_DrawPoint(x0-b,y0+a);
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	88fa      	ldrh	r2, [r7, #6]
 8006b18:	1ad3      	subs	r3, r2, r3
 8006b1a:	b298      	uxth	r0, r3
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	88bb      	ldrh	r3, [r7, #4]
 8006b22:	4413      	add	r3, r2
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	4619      	mov	r1, r3
 8006b28:	f7fb fffa 	bl	8002b20 <LCD_DrawPoint>
		LCD_DrawPoint(x0-a,y0-b);             //2
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	b29b      	uxth	r3, r3
 8006b30:	88fa      	ldrh	r2, [r7, #6]
 8006b32:	1ad3      	subs	r3, r2, r3
 8006b34:	b298      	uxth	r0, r3
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	88ba      	ldrh	r2, [r7, #4]
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	4619      	mov	r1, r3
 8006b42:	f7fb ffed 	bl	8002b20 <LCD_DrawPoint>
  		LCD_DrawPoint(x0-b,y0-a);             //7
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	88fa      	ldrh	r2, [r7, #6]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	b298      	uxth	r0, r3
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	88ba      	ldrh	r2, [r7, #4]
 8006b56:	1ad3      	subs	r3, r2, r3
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	f7fb ffe0 	bl	8002b20 <LCD_DrawPoint>
		a++;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	3301      	adds	r3, #1
 8006b64:	617b      	str	r3, [r7, #20]
		//使用Bresenham算法画圆
		if(di<0)di +=4*a+6;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	da06      	bge.n	8006b7a <LCD_Draw_Circle+0x110>
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	3306      	adds	r3, #6
 8006b72:	68fa      	ldr	r2, [r7, #12]
 8006b74:	4413      	add	r3, r2
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	e00a      	b.n	8006b90 <LCD_Draw_Circle+0x126>
		else
		{
			di+=10+4*(a-b);
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	330a      	adds	r3, #10
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	60fb      	str	r3, [r7, #12]
			b--;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	613b      	str	r3, [r7, #16]
	while(a<=b)
 8006b90:	697a      	ldr	r2, [r7, #20]
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	429a      	cmp	r2, r3
 8006b96:	f77f af7b 	ble.w	8006a90 <LCD_Draw_Circle+0x26>
		}
	}
}
 8006b9a:	bf00      	nop
 8006b9c:	bf00      	nop
 8006b9e:	3718      	adds	r7, #24
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 8006ba4:	b590      	push	{r4, r7, lr}
 8006ba6:	b085      	sub	sp, #20
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	4604      	mov	r4, r0
 8006bac:	4608      	mov	r0, r1
 8006bae:	4611      	mov	r1, r2
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	4623      	mov	r3, r4
 8006bb4:	80fb      	strh	r3, [r7, #6]
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	80bb      	strh	r3, [r7, #4]
 8006bba:	460b      	mov	r3, r1
 8006bbc:	70fb      	strb	r3, [r7, #3]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	70bb      	strb	r3, [r7, #2]
    uint8_t temp,t1,t;
	uint16_t y0=y;
 8006bc2:	88bb      	ldrh	r3, [r7, #4]
 8006bc4:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 8006bc6:	78bb      	ldrb	r3, [r7, #2]
 8006bc8:	08db      	lsrs	r3, r3, #3
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	461a      	mov	r2, r3
 8006bce:	78bb      	ldrb	r3, [r7, #2]
 8006bd0:	f003 0307 	and.w	r3, r3, #7
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	bf14      	ite	ne
 8006bda:	2301      	movne	r3, #1
 8006bdc:	2300      	moveq	r3, #0
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	4413      	add	r3, r2
 8006be2:	b2da      	uxtb	r2, r3
 8006be4:	78bb      	ldrb	r3, [r7, #2]
 8006be6:	085b      	lsrs	r3, r3, #1
 8006be8:	b2db      	uxtb	r3, r3
 8006bea:	fb12 f303 	smulbb	r3, r2, r3
 8006bee:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8006bf0:	78fb      	ldrb	r3, [r7, #3]
 8006bf2:	3b20      	subs	r3, #32
 8006bf4:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	737b      	strb	r3, [r7, #13]
 8006bfa:	e075      	b.n	8006ce8 <LCD_ShowChar+0x144>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 8006bfc:	78bb      	ldrb	r3, [r7, #2]
 8006bfe:	2b0c      	cmp	r3, #12
 8006c00:	d10b      	bne.n	8006c1a <LCD_ShowChar+0x76>
 8006c02:	78fa      	ldrb	r2, [r7, #3]
 8006c04:	7b79      	ldrb	r1, [r7, #13]
 8006c06:	483e      	ldr	r0, [pc, #248]	; (8006d00 <LCD_ShowChar+0x15c>)
 8006c08:	4613      	mov	r3, r2
 8006c0a:	005b      	lsls	r3, r3, #1
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	4403      	add	r3, r0
 8006c12:	440b      	add	r3, r1
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	73fb      	strb	r3, [r7, #15]
 8006c18:	e025      	b.n	8006c66 <LCD_ShowChar+0xc2>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 8006c1a:	78bb      	ldrb	r3, [r7, #2]
 8006c1c:	2b10      	cmp	r3, #16
 8006c1e:	d108      	bne.n	8006c32 <LCD_ShowChar+0x8e>
 8006c20:	78fa      	ldrb	r2, [r7, #3]
 8006c22:	7b7b      	ldrb	r3, [r7, #13]
 8006c24:	4937      	ldr	r1, [pc, #220]	; (8006d04 <LCD_ShowChar+0x160>)
 8006c26:	0112      	lsls	r2, r2, #4
 8006c28:	440a      	add	r2, r1
 8006c2a:	4413      	add	r3, r2
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	73fb      	strb	r3, [r7, #15]
 8006c30:	e019      	b.n	8006c66 <LCD_ShowChar+0xc2>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 8006c32:	78bb      	ldrb	r3, [r7, #2]
 8006c34:	2b18      	cmp	r3, #24
 8006c36:	d10b      	bne.n	8006c50 <LCD_ShowChar+0xac>
 8006c38:	78fa      	ldrb	r2, [r7, #3]
 8006c3a:	7b79      	ldrb	r1, [r7, #13]
 8006c3c:	4832      	ldr	r0, [pc, #200]	; (8006d08 <LCD_ShowChar+0x164>)
 8006c3e:	4613      	mov	r3, r2
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	4413      	add	r3, r2
 8006c44:	009b      	lsls	r3, r3, #2
 8006c46:	4403      	add	r3, r0
 8006c48:	440b      	add	r3, r1
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	73fb      	strb	r3, [r7, #15]
 8006c4e:	e00a      	b.n	8006c66 <LCD_ShowChar+0xc2>
		else if(size==36)temp=asc2_3216[num][t];	//调用3616字体
 8006c50:	78bb      	ldrb	r3, [r7, #2]
 8006c52:	2b24      	cmp	r3, #36	; 0x24
 8006c54:	d14d      	bne.n	8006cf2 <LCD_ShowChar+0x14e>
 8006c56:	78fa      	ldrb	r2, [r7, #3]
 8006c58:	7b7b      	ldrb	r3, [r7, #13]
 8006c5a:	492c      	ldr	r1, [pc, #176]	; (8006d0c <LCD_ShowChar+0x168>)
 8006c5c:	01d2      	lsls	r2, r2, #7
 8006c5e:	440a      	add	r2, r1
 8006c60:	4413      	add	r3, r2
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 8006c66:	2300      	movs	r3, #0
 8006c68:	73bb      	strb	r3, [r7, #14]
 8006c6a:	e035      	b.n	8006cd8 <LCD_ShowChar+0x134>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 8006c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	da07      	bge.n	8006c84 <LCD_ShowChar+0xe0>
 8006c74:	4b26      	ldr	r3, [pc, #152]	; (8006d10 <LCD_ShowChar+0x16c>)
 8006c76:	881a      	ldrh	r2, [r3, #0]
 8006c78:	88b9      	ldrh	r1, [r7, #4]
 8006c7a:	88fb      	ldrh	r3, [r7, #6]
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f7fb ff6b 	bl	8002b58 <LCD_Fast_DrawPoint>
 8006c82:	e00a      	b.n	8006c9a <LCD_ShowChar+0xf6>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 8006c84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d106      	bne.n	8006c9a <LCD_ShowChar+0xf6>
 8006c8c:	4b21      	ldr	r3, [pc, #132]	; (8006d14 <LCD_ShowChar+0x170>)
 8006c8e:	881a      	ldrh	r2, [r3, #0]
 8006c90:	88b9      	ldrh	r1, [r7, #4]
 8006c92:	88fb      	ldrh	r3, [r7, #6]
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fb ff5f 	bl	8002b58 <LCD_Fast_DrawPoint>
			temp<<=1;
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	73fb      	strb	r3, [r7, #15]
			y++;
 8006ca0:	88bb      	ldrh	r3, [r7, #4]
 8006ca2:	3301      	adds	r3, #1
 8006ca4:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 8006ca6:	4b1c      	ldr	r3, [pc, #112]	; (8006d18 <LCD_ShowChar+0x174>)
 8006ca8:	885b      	ldrh	r3, [r3, #2]
 8006caa:	88ba      	ldrh	r2, [r7, #4]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d222      	bcs.n	8006cf6 <LCD_ShowChar+0x152>
			if((y-y0)==size)
 8006cb0:	88ba      	ldrh	r2, [r7, #4]
 8006cb2:	897b      	ldrh	r3, [r7, #10]
 8006cb4:	1ad2      	subs	r2, r2, r3
 8006cb6:	78bb      	ldrb	r3, [r7, #2]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d10a      	bne.n	8006cd2 <LCD_ShowChar+0x12e>
			{
				y=y0;
 8006cbc:	897b      	ldrh	r3, [r7, #10]
 8006cbe:	80bb      	strh	r3, [r7, #4]
				x++;
 8006cc0:	88fb      	ldrh	r3, [r7, #6]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 8006cc6:	4b14      	ldr	r3, [pc, #80]	; (8006d18 <LCD_ShowChar+0x174>)
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	88fa      	ldrh	r2, [r7, #6]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d307      	bcc.n	8006ce0 <LCD_ShowChar+0x13c>
 8006cd0:	e012      	b.n	8006cf8 <LCD_ShowChar+0x154>
		for(t1=0;t1<8;t1++)
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	73bb      	strb	r3, [r7, #14]
 8006cd8:	7bbb      	ldrb	r3, [r7, #14]
 8006cda:	2b07      	cmp	r3, #7
 8006cdc:	d9c6      	bls.n	8006c6c <LCD_ShowChar+0xc8>
 8006cde:	e000      	b.n	8006ce2 <LCD_ShowChar+0x13e>
				break;
 8006ce0:	bf00      	nop
	for(t=0;t<csize;t++)
 8006ce2:	7b7b      	ldrb	r3, [r7, #13]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	737b      	strb	r3, [r7, #13]
 8006ce8:	7b7a      	ldrb	r2, [r7, #13]
 8006cea:	7a7b      	ldrb	r3, [r7, #9]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d385      	bcc.n	8006bfc <LCD_ShowChar+0x58>
 8006cf0:	e002      	b.n	8006cf8 <LCD_ShowChar+0x154>
		else return;								//没有的字库
 8006cf2:	bf00      	nop
 8006cf4:	e000      	b.n	8006cf8 <LCD_ShowChar+0x154>
			if(y>=lcddev.height)return;		//超区域了
 8006cf6:	bf00      	nop
			}
		}
	}
}
 8006cf8:	3714      	adds	r7, #20
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd90      	pop	{r4, r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	0800bfc8 	.word	0x0800bfc8
 8006d04:	0800c43c 	.word	0x0800c43c
 8006d08:	0800ca2c 	.word	0x0800ca2c
 8006d0c:	0800d788 	.word	0x0800d788
 8006d10:	200000da 	.word	0x200000da
 8006d14:	20000036 	.word	0x20000036
 8006d18:	20000118 	.word	0x20000118

08006d1c <LCD_Pow>:
//m^n函数
//返回值:m^n次方.
uint32_t LCD_Pow(uint8_t m,uint8_t n)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b085      	sub	sp, #20
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	4603      	mov	r3, r0
 8006d24:	460a      	mov	r2, r1
 8006d26:	71fb      	strb	r3, [r7, #7]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8006d30:	e004      	b.n	8006d3c <LCD_Pow+0x20>
 8006d32:	79fa      	ldrb	r2, [r7, #7]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	fb02 f303 	mul.w	r3, r2, r3
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	79bb      	ldrb	r3, [r7, #6]
 8006d3e:	1e5a      	subs	r2, r3, #1
 8006d40:	71ba      	strb	r2, [r7, #6]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1f5      	bne.n	8006d32 <LCD_Pow+0x16>
	return result;
 8006d46:	68fb      	ldr	r3, [r7, #12]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3714      	adds	r7, #20
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <LCD_ShowNum>:
//len :数字的位数
//size:字体大小
//color:颜色
//num:数值(0~4294967295);
void LCD_ShowNum(uint16_t x,uint16_t y,uint32_t num,uint8_t len,uint8_t size)
{
 8006d54:	b590      	push	{r4, r7, lr}
 8006d56:	b089      	sub	sp, #36	; 0x24
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	60ba      	str	r2, [r7, #8]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	4603      	mov	r3, r0
 8006d60:	81fb      	strh	r3, [r7, #14]
 8006d62:	460b      	mov	r3, r1
 8006d64:	81bb      	strh	r3, [r7, #12]
 8006d66:	4613      	mov	r3, r2
 8006d68:	71fb      	strb	r3, [r7, #7]
	uint8_t t,temp;
	uint8_t enshow=0;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	75bb      	strb	r3, [r7, #22]
	for(t=0;t<len;t++)
 8006d6e:	2300      	movs	r3, #0
 8006d70:	75fb      	strb	r3, [r7, #23]
 8006d72:	e055      	b.n	8006e20 <LCD_ShowNum+0xcc>
	{
		temp=(num/LCD_Pow(10,len-t-1))%10;
 8006d74:	79fa      	ldrb	r2, [r7, #7]
 8006d76:	7dfb      	ldrb	r3, [r7, #23]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	3b01      	subs	r3, #1
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	4619      	mov	r1, r3
 8006d82:	200a      	movs	r0, #10
 8006d84:	f7ff ffca 	bl	8006d1c <LCD_Pow>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d90:	4b28      	ldr	r3, [pc, #160]	; (8006e34 <LCD_ShowNum+0xe0>)
 8006d92:	fba3 2301 	umull	r2, r3, r3, r1
 8006d96:	08da      	lsrs	r2, r3, #3
 8006d98:	4613      	mov	r3, r2
 8006d9a:	009b      	lsls	r3, r3, #2
 8006d9c:	4413      	add	r3, r2
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	1aca      	subs	r2, r1, r3
 8006da2:	4613      	mov	r3, r2
 8006da4:	757b      	strb	r3, [r7, #21]
		if(enshow==0&&t<(len-1))
 8006da6:	7dbb      	ldrb	r3, [r7, #22]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d11f      	bne.n	8006dec <LCD_ShowNum+0x98>
 8006dac:	7dfa      	ldrb	r2, [r7, #23]
 8006dae:	79fb      	ldrb	r3, [r7, #7]
 8006db0:	3b01      	subs	r3, #1
 8006db2:	429a      	cmp	r2, r3
 8006db4:	da1a      	bge.n	8006dec <LCD_ShowNum+0x98>
		{
			if(temp==0)
 8006db6:	7d7b      	ldrb	r3, [r7, #21]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d115      	bne.n	8006de8 <LCD_ShowNum+0x94>
			{
				LCD_ShowChar(x+(size/2)*t,y,' ',size,0);
 8006dbc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006dc0:	085b      	lsrs	r3, r3, #1
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	b29a      	uxth	r2, r3
 8006dc6:	7dfb      	ldrb	r3, [r7, #23]
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	fb12 f303 	smulbb	r3, r2, r3
 8006dce:	b29a      	uxth	r2, r3
 8006dd0:	89fb      	ldrh	r3, [r7, #14]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	b298      	uxth	r0, r3
 8006dd6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006dda:	89b9      	ldrh	r1, [r7, #12]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	9200      	str	r2, [sp, #0]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f7ff fedf 	bl	8006ba4 <LCD_ShowChar>
				continue;
 8006de6:	e018      	b.n	8006e1a <LCD_ShowNum+0xc6>
			}else enshow=1;
 8006de8:	2301      	movs	r3, #1
 8006dea:	75bb      	strb	r3, [r7, #22]

		}
	 	LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,0);
 8006dec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006df0:	085b      	lsrs	r3, r3, #1
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	7dfb      	ldrb	r3, [r7, #23]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	fb12 f303 	smulbb	r3, r2, r3
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	89fb      	ldrh	r3, [r7, #14]
 8006e02:	4413      	add	r3, r2
 8006e04:	b298      	uxth	r0, r3
 8006e06:	7d7b      	ldrb	r3, [r7, #21]
 8006e08:	3330      	adds	r3, #48	; 0x30
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006e10:	89b9      	ldrh	r1, [r7, #12]
 8006e12:	2400      	movs	r4, #0
 8006e14:	9400      	str	r4, [sp, #0]
 8006e16:	f7ff fec5 	bl	8006ba4 <LCD_ShowChar>
	for(t=0;t<len;t++)
 8006e1a:	7dfb      	ldrb	r3, [r7, #23]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	75fb      	strb	r3, [r7, #23]
 8006e20:	7dfa      	ldrb	r2, [r7, #23]
 8006e22:	79fb      	ldrb	r3, [r7, #7]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d3a5      	bcc.n	8006d74 <LCD_ShowNum+0x20>
	}
}
 8006e28:	bf00      	nop
 8006e2a:	bf00      	nop
 8006e2c:	371c      	adds	r7, #28
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd90      	pop	{r4, r7, pc}
 8006e32:	bf00      	nop
 8006e34:	cccccccd 	.word	0xcccccccd

08006e38 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 8006e38:	b590      	push	{r4, r7, lr}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af02      	add	r7, sp, #8
 8006e3e:	4604      	mov	r4, r0
 8006e40:	4608      	mov	r0, r1
 8006e42:	4611      	mov	r1, r2
 8006e44:	461a      	mov	r2, r3
 8006e46:	4623      	mov	r3, r4
 8006e48:	80fb      	strh	r3, [r7, #6]
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	80bb      	strh	r3, [r7, #4]
 8006e4e:	460b      	mov	r3, r1
 8006e50:	807b      	strh	r3, [r7, #2]
 8006e52:	4613      	mov	r3, r2
 8006e54:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 8006e56:	88fb      	ldrh	r3, [r7, #6]
 8006e58:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8006e5a:	887a      	ldrh	r2, [r7, #2]
 8006e5c:	88fb      	ldrh	r3, [r7, #6]
 8006e5e:	4413      	add	r3, r2
 8006e60:	807b      	strh	r3, [r7, #2]
	height+=y;
 8006e62:	883a      	ldrh	r2, [r7, #0]
 8006e64:	88bb      	ldrh	r3, [r7, #4]
 8006e66:	4413      	add	r3, r2
 8006e68:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8006e6a:	e024      	b.n	8006eb6 <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 8006e6c:	88fa      	ldrh	r2, [r7, #6]
 8006e6e:	887b      	ldrh	r3, [r7, #2]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d307      	bcc.n	8006e84 <LCD_ShowString+0x4c>
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	80fb      	strh	r3, [r7, #6]
 8006e78:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	88bb      	ldrh	r3, [r7, #4]
 8006e80:	4413      	add	r3, r2
 8006e82:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 8006e84:	88ba      	ldrh	r2, [r7, #4]
 8006e86:	883b      	ldrh	r3, [r7, #0]
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d21d      	bcs.n	8006ec8 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,1);
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	781a      	ldrb	r2, [r3, #0]
 8006e90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e94:	88b9      	ldrh	r1, [r7, #4]
 8006e96:	88f8      	ldrh	r0, [r7, #6]
 8006e98:	2401      	movs	r4, #1
 8006e9a:	9400      	str	r4, [sp, #0]
 8006e9c:	f7ff fe82 	bl	8006ba4 <LCD_ShowChar>
        x+=size/2;
 8006ea0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ea4:	085b      	lsrs	r3, r3, #1
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	88fb      	ldrh	r3, [r7, #6]
 8006eac:	4413      	add	r3, r2
 8006eae:	80fb      	strh	r3, [r7, #6]
        p++;
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	2b7e      	cmp	r3, #126	; 0x7e
 8006ebc:	d805      	bhi.n	8006eca <LCD_ShowString+0x92>
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	2b1f      	cmp	r3, #31
 8006ec4:	d8d2      	bhi.n	8006e6c <LCD_ShowString+0x34>
    }
}
 8006ec6:	e000      	b.n	8006eca <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 8006ec8:	bf00      	nop
}
 8006eca:	bf00      	nop
 8006ecc:	3714      	adds	r7, #20
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd90      	pop	{r4, r7, pc}
 8006ed2:	0000      	movs	r0, r0
 8006ed4:	0000      	movs	r0, r0
	...

08006ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006ed8:	b5b0      	push	{r4, r5, r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006ede:	f001 ffbf 	bl	8008e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006ee2:	f000 ff73 	bl	8007dcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006ee6:	f001 f97b 	bl	80081e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8006eea:	f001 f949 	bl	8008180 <MX_DMA_Init>
  MX_ADC1_Init();
 8006eee:	f000 ffd9 	bl	8007ea4 <MX_ADC1_Init>
  MX_FSMC_Init();
 8006ef2:	f001 fa73 	bl	80083dc <MX_FSMC_Init>
  MX_TIM3_Init();
 8006ef6:	f001 f8cb 	bl	8008090 <MX_TIM3_Init>
  MX_ADC2_Init();
 8006efa:	f001 f825 	bl	8007f48 <MX_ADC2_Init>
  MX_ADC3_Init();
 8006efe:	f001 f875 	bl	8007fec <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8006f02:	f7fc f881 	bl	8003008 <LCD_Init>
  tp_dev.init();
 8006f06:	4bb2      	ldr	r3, [pc, #712]	; (80071d0 <main+0x2f8>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4798      	blx	r3
  POINT_COLOR=RED;
 8006f0c:	4bb1      	ldr	r3, [pc, #708]	; (80071d4 <main+0x2fc>)
 8006f0e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8006f12:	801a      	strh	r2, [r3, #0]
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8006f14:	2100      	movs	r1, #0
 8006f16:	48b0      	ldr	r0, [pc, #704]	; (80071d8 <main+0x300>)
 8006f18:	f003 ffd6 	bl	800aec8 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&Voltage_Front_DMA[0], ADCTIMES);
 8006f1c:	2264      	movs	r2, #100	; 0x64
 8006f1e:	49af      	ldr	r1, [pc, #700]	; (80071dc <main+0x304>)
 8006f20:	48af      	ldr	r0, [pc, #700]	; (80071e0 <main+0x308>)
 8006f22:	f002 f877 	bl	8009014 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)&Voltage_Behind_DMA[0], ADCTIMES);
 8006f26:	2264      	movs	r2, #100	; 0x64
 8006f28:	49ae      	ldr	r1, [pc, #696]	; (80071e4 <main+0x30c>)
 8006f2a:	48af      	ldr	r0, [pc, #700]	; (80071e8 <main+0x310>)
 8006f2c:	f002 f872 	bl	8009014 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Current_DMA[0], ADCTIMES);
 8006f30:	2264      	movs	r2, #100	; 0x64
 8006f32:	49ae      	ldr	r1, [pc, #696]	; (80071ec <main+0x314>)
 8006f34:	48ae      	ldr	r0, [pc, #696]	; (80071f0 <main+0x318>)
 8006f36:	f002 f86d 	bl	8009014 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f40:	48ac      	ldr	r0, [pc, #688]	; (80071f4 <main+0x31c>)
 8006f42:	f003 fa53 	bl	800a3ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8006f46:	2201      	movs	r2, #1
 8006f48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006f4c:	48a9      	ldr	r0, [pc, #676]	; (80071f4 <main+0x31c>)
 8006f4e:	f003 fa4d 	bl	800a3ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8006f52:	2201      	movs	r2, #1
 8006f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f58:	48a6      	ldr	r0, [pc, #664]	; (80071f4 <main+0x31c>)
 8006f5a:	f003 fa47 	bl	800a3ec <HAL_GPIO_WritePin>


  LCD_ShowString(15,90,48,16,16,(uint8_t*)"MAIN^");
 8006f5e:	4ba6      	ldr	r3, [pc, #664]	; (80071f8 <main+0x320>)
 8006f60:	9301      	str	r3, [sp, #4]
 8006f62:	2310      	movs	r3, #16
 8006f64:	9300      	str	r3, [sp, #0]
 8006f66:	2310      	movs	r3, #16
 8006f68:	2230      	movs	r2, #48	; 0x30
 8006f6a:	215a      	movs	r1, #90	; 0x5a
 8006f6c:	200f      	movs	r0, #15
 8006f6e:	f7ff ff63 	bl	8006e38 <LCD_ShowString>
  LCD_ShowString(15,135,48,16,16,(uint8_t*)"SUB>");
 8006f72:	4ba2      	ldr	r3, [pc, #648]	; (80071fc <main+0x324>)
 8006f74:	9301      	str	r3, [sp, #4]
 8006f76:	2310      	movs	r3, #16
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	2310      	movs	r3, #16
 8006f7c:	2230      	movs	r2, #48	; 0x30
 8006f7e:	2187      	movs	r1, #135	; 0x87
 8006f80:	200f      	movs	r0, #15
 8006f82:	f7ff ff59 	bl	8006e38 <LCD_ShowString>


  MainMode=Manual;
 8006f86:	4b9e      	ldr	r3, [pc, #632]	; (8007200 <main+0x328>)
 8006f88:	2201      	movs	r2, #1
 8006f8a:	701a      	strb	r2, [r3, #0]
  SubMode=Control;
 8006f8c:	4b9d      	ldr	r3, [pc, #628]	; (8007204 <main+0x32c>)
 8006f8e:	2203      	movs	r2, #3
 8006f90:	701a      	strb	r2, [r3, #0]
  MainDisplay(1,GREEN);
 8006f92:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8006f96:	2001      	movs	r0, #1
 8006f98:	f001 fa9a 	bl	80084d0 <MainDisplay>
  MainDisplay(2,YELLOW);
 8006f9c:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8006fa0:	2002      	movs	r0, #2
 8006fa2:	f001 fa95 	bl	80084d0 <MainDisplay>
  MainDisplay(3,YELLOW);
 8006fa6:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8006faa:	2003      	movs	r0, #3
 8006fac:	f001 fa90 	bl	80084d0 <MainDisplay>
  SubDisplay(1,YELLOW);
 8006fb0:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	f001 fb11 	bl	80085dc <SubDisplay>
  SubDisplay(2,YELLOW);
 8006fba:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8006fbe:	2002      	movs	r0, #2
 8006fc0:	f001 fb0c 	bl	80085dc <SubDisplay>
  PwmDisplay(Pwm,YELLOW);
 8006fc4:	4b90      	ldr	r3, [pc, #576]	; (8007208 <main+0x330>)
 8006fc6:	881b      	ldrh	r3, [r3, #0]
 8006fc8:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f001 fb6b 	bl	80086a8 <PwmDisplay>
  LCD_ShowString(15,160,90,16,16,(uint8_t*)">Vf: >To");
 8006fd2:	4b8e      	ldr	r3, [pc, #568]	; (800720c <main+0x334>)
 8006fd4:	9301      	str	r3, [sp, #4]
 8006fd6:	2310      	movs	r3, #16
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	2310      	movs	r3, #16
 8006fdc:	225a      	movs	r2, #90	; 0x5a
 8006fde:	21a0      	movs	r1, #160	; 0xa0
 8006fe0:	200f      	movs	r0, #15
 8006fe2:	f7ff ff29 	bl	8006e38 <LCD_ShowString>
  LCD_ShowString(15,200,90,16,16,(uint8_t*)">Vb: >To");
 8006fe6:	4b8a      	ldr	r3, [pc, #552]	; (8007210 <main+0x338>)
 8006fe8:	9301      	str	r3, [sp, #4]
 8006fea:	2310      	movs	r3, #16
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	2310      	movs	r3, #16
 8006ff0:	225a      	movs	r2, #90	; 0x5a
 8006ff2:	21c8      	movs	r1, #200	; 0xc8
 8006ff4:	200f      	movs	r0, #15
 8006ff6:	f7ff ff1f 	bl	8006e38 <LCD_ShowString>
  LCD_ShowString(15,240,90,16,16,(uint8_t*)">C:  >To");
 8006ffa:	4b86      	ldr	r3, [pc, #536]	; (8007214 <main+0x33c>)
 8006ffc:	9301      	str	r3, [sp, #4]
 8006ffe:	2310      	movs	r3, #16
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	2310      	movs	r3, #16
 8007004:	225a      	movs	r2, #90	; 0x5a
 8007006:	21f0      	movs	r1, #240	; 0xf0
 8007008:	200f      	movs	r0, #15
 800700a:	f7ff ff15 	bl	8006e38 <LCD_ShowString>
  LCD_ShowString(15,280,90,16,16,(uint8_t*)">Pwm: ");
 800700e:	4b82      	ldr	r3, [pc, #520]	; (8007218 <main+0x340>)
 8007010:	9301      	str	r3, [sp, #4]
 8007012:	2310      	movs	r3, #16
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	2310      	movs	r3, #16
 8007018:	225a      	movs	r2, #90	; 0x5a
 800701a:	f44f 718c 	mov.w	r1, #280	; 0x118
 800701e:	200f      	movs	r0, #15
 8007020:	f7ff ff0a 	bl	8006e38 <LCD_ShowString>
  LCD_DrawLine(0,155,320,155);
 8007024:	239b      	movs	r3, #155	; 0x9b
 8007026:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800702a:	219b      	movs	r1, #155	; 0x9b
 800702c:	2000      	movs	r0, #0
 800702e:	f7ff fc6d 	bl	800690c <LCD_DrawLine>
    /* USER CODE BEGIN 3 */


	  //DAC采集

		HAL_Delay(10);
 8007032:	200a      	movs	r0, #10
 8007034:	f001 ff86 	bl	8008f44 <HAL_Delay>
		for (var = 0,Voltage_Front = 0; var < ADCTIMES; ++var) {
 8007038:	4b78      	ldr	r3, [pc, #480]	; (800721c <main+0x344>)
 800703a:	2200      	movs	r2, #0
 800703c:	701a      	strb	r2, [r3, #0]
 800703e:	4b78      	ldr	r3, [pc, #480]	; (8007220 <main+0x348>)
 8007040:	2200      	movs	r2, #0
 8007042:	601a      	str	r2, [r3, #0]
 8007044:	e011      	b.n	800706a <main+0x192>
				Voltage_Front += Voltage_Front_DMA[var];
 8007046:	4b75      	ldr	r3, [pc, #468]	; (800721c <main+0x344>)
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	461a      	mov	r2, r3
 800704c:	4b63      	ldr	r3, [pc, #396]	; (80071dc <main+0x304>)
 800704e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007052:	461a      	mov	r2, r3
 8007054:	4b72      	ldr	r3, [pc, #456]	; (8007220 <main+0x348>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4413      	add	r3, r2
 800705a:	4a71      	ldr	r2, [pc, #452]	; (8007220 <main+0x348>)
 800705c:	6013      	str	r3, [r2, #0]
		for (var = 0,Voltage_Front = 0; var < ADCTIMES; ++var) {
 800705e:	4b6f      	ldr	r3, [pc, #444]	; (800721c <main+0x344>)
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	3301      	adds	r3, #1
 8007064:	b2da      	uxtb	r2, r3
 8007066:	4b6d      	ldr	r3, [pc, #436]	; (800721c <main+0x344>)
 8007068:	701a      	strb	r2, [r3, #0]
 800706a:	4b6c      	ldr	r3, [pc, #432]	; (800721c <main+0x344>)
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	2b63      	cmp	r3, #99	; 0x63
 8007070:	d9e9      	bls.n	8007046 <main+0x16e>
		}
			Voltage_Front /= ADCTIMES;
 8007072:	4b6b      	ldr	r3, [pc, #428]	; (8007220 <main+0x348>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a6b      	ldr	r2, [pc, #428]	; (8007224 <main+0x34c>)
 8007078:	fba2 2303 	umull	r2, r3, r2, r3
 800707c:	095b      	lsrs	r3, r3, #5
 800707e:	4a68      	ldr	r2, [pc, #416]	; (8007220 <main+0x348>)
 8007080:	6013      	str	r3, [r2, #0]
			LCD_ShowNum(90,163,Voltage_Front,4,16);
 8007082:	4b67      	ldr	r3, [pc, #412]	; (8007220 <main+0x348>)
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	2310      	movs	r3, #16
 8007088:	9300      	str	r3, [sp, #0]
 800708a:	2304      	movs	r3, #4
 800708c:	21a3      	movs	r1, #163	; 0xa3
 800708e:	205a      	movs	r0, #90	; 0x5a
 8007090:	f7ff fe60 	bl	8006d54 <LCD_ShowNum>

		HAL_Delay(10);
 8007094:	200a      	movs	r0, #10
 8007096:	f001 ff55 	bl	8008f44 <HAL_Delay>
		for (var = 0,Voltage_Behind = 0; var < ADCTIMES; ++var) {
 800709a:	4b60      	ldr	r3, [pc, #384]	; (800721c <main+0x344>)
 800709c:	2200      	movs	r2, #0
 800709e:	701a      	strb	r2, [r3, #0]
 80070a0:	4b61      	ldr	r3, [pc, #388]	; (8007228 <main+0x350>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	e011      	b.n	80070cc <main+0x1f4>
				Voltage_Behind += Voltage_Behind_DMA[var];
 80070a8:	4b5c      	ldr	r3, [pc, #368]	; (800721c <main+0x344>)
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	461a      	mov	r2, r3
 80070ae:	4b4d      	ldr	r3, [pc, #308]	; (80071e4 <main+0x30c>)
 80070b0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80070b4:	461a      	mov	r2, r3
 80070b6:	4b5c      	ldr	r3, [pc, #368]	; (8007228 <main+0x350>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4413      	add	r3, r2
 80070bc:	4a5a      	ldr	r2, [pc, #360]	; (8007228 <main+0x350>)
 80070be:	6013      	str	r3, [r2, #0]
		for (var = 0,Voltage_Behind = 0; var < ADCTIMES; ++var) {
 80070c0:	4b56      	ldr	r3, [pc, #344]	; (800721c <main+0x344>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	3301      	adds	r3, #1
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	4b54      	ldr	r3, [pc, #336]	; (800721c <main+0x344>)
 80070ca:	701a      	strb	r2, [r3, #0]
 80070cc:	4b53      	ldr	r3, [pc, #332]	; (800721c <main+0x344>)
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	2b63      	cmp	r3, #99	; 0x63
 80070d2:	d9e9      	bls.n	80070a8 <main+0x1d0>
		}
			Voltage_Behind /= ADCTIMES;
 80070d4:	4b54      	ldr	r3, [pc, #336]	; (8007228 <main+0x350>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a52      	ldr	r2, [pc, #328]	; (8007224 <main+0x34c>)
 80070da:	fba2 2303 	umull	r2, r3, r2, r3
 80070de:	095b      	lsrs	r3, r3, #5
 80070e0:	4a51      	ldr	r2, [pc, #324]	; (8007228 <main+0x350>)
 80070e2:	6013      	str	r3, [r2, #0]
			LCD_ShowNum(90,203,Voltage_Behind,4,16);
 80070e4:	4b50      	ldr	r3, [pc, #320]	; (8007228 <main+0x350>)
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	2310      	movs	r3, #16
 80070ea:	9300      	str	r3, [sp, #0]
 80070ec:	2304      	movs	r3, #4
 80070ee:	21cb      	movs	r1, #203	; 0xcb
 80070f0:	205a      	movs	r0, #90	; 0x5a
 80070f2:	f7ff fe2f 	bl	8006d54 <LCD_ShowNum>

		HAL_Delay(10);
 80070f6:	200a      	movs	r0, #10
 80070f8:	f001 ff24 	bl	8008f44 <HAL_Delay>
		for (var = 0,Current = 0; var < ADCTIMES; ++var) {
 80070fc:	4b47      	ldr	r3, [pc, #284]	; (800721c <main+0x344>)
 80070fe:	2200      	movs	r2, #0
 8007100:	701a      	strb	r2, [r3, #0]
 8007102:	4b4a      	ldr	r3, [pc, #296]	; (800722c <main+0x354>)
 8007104:	2200      	movs	r2, #0
 8007106:	601a      	str	r2, [r3, #0]
 8007108:	e011      	b.n	800712e <main+0x256>
				Current += Current_DMA[var];
 800710a:	4b44      	ldr	r3, [pc, #272]	; (800721c <main+0x344>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	461a      	mov	r2, r3
 8007110:	4b36      	ldr	r3, [pc, #216]	; (80071ec <main+0x314>)
 8007112:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007116:	461a      	mov	r2, r3
 8007118:	4b44      	ldr	r3, [pc, #272]	; (800722c <main+0x354>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4413      	add	r3, r2
 800711e:	4a43      	ldr	r2, [pc, #268]	; (800722c <main+0x354>)
 8007120:	6013      	str	r3, [r2, #0]
		for (var = 0,Current = 0; var < ADCTIMES; ++var) {
 8007122:	4b3e      	ldr	r3, [pc, #248]	; (800721c <main+0x344>)
 8007124:	781b      	ldrb	r3, [r3, #0]
 8007126:	3301      	adds	r3, #1
 8007128:	b2da      	uxtb	r2, r3
 800712a:	4b3c      	ldr	r3, [pc, #240]	; (800721c <main+0x344>)
 800712c:	701a      	strb	r2, [r3, #0]
 800712e:	4b3b      	ldr	r3, [pc, #236]	; (800721c <main+0x344>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b63      	cmp	r3, #99	; 0x63
 8007134:	d9e9      	bls.n	800710a <main+0x232>
		}
			Current /= ADCTIMES;
 8007136:	4b3d      	ldr	r3, [pc, #244]	; (800722c <main+0x354>)
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a3a      	ldr	r2, [pc, #232]	; (8007224 <main+0x34c>)
 800713c:	fba2 2303 	umull	r2, r3, r2, r3
 8007140:	095b      	lsrs	r3, r3, #5
 8007142:	4a3a      	ldr	r2, [pc, #232]	; (800722c <main+0x354>)
 8007144:	6013      	str	r3, [r2, #0]
			LCD_ShowNum(90,243,Current,4,16);
 8007146:	4b39      	ldr	r3, [pc, #228]	; (800722c <main+0x354>)
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	2310      	movs	r3, #16
 800714c:	9300      	str	r3, [sp, #0]
 800714e:	2304      	movs	r3, #4
 8007150:	21f3      	movs	r1, #243	; 0xf3
 8007152:	205a      	movs	r0, #90	; 0x5a
 8007154:	f7ff fdfe 	bl	8006d54 <LCD_ShowNum>




		//模式切换
	  tp_dev.scan(0);
 8007158:	4b1d      	ldr	r3, [pc, #116]	; (80071d0 <main+0x2f8>)
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	2000      	movs	r0, #0
 800715e:	4798      	blx	r3
	  //LCD_DrawPoint(tp_dev.x[0],tp_dev.y[0]);//触控测试
	  if(tp_dev.sta & TP_PRES_DOWN)
 8007160:	4b1b      	ldr	r3, [pc, #108]	; (80071d0 <main+0x2f8>)
 8007162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007166:	b25b      	sxtb	r3, r3
 8007168:	2b00      	cmp	r3, #0
 800716a:	f280 81a7 	bge.w	80074bc <main+0x5e4>
	  {

		  if(tp_dev.x[0]>15&&tp_dev.y[0]>15&&tp_dev.x[0]<75&&tp_dev.y[0]<75){
 800716e:	4b18      	ldr	r3, [pc, #96]	; (80071d0 <main+0x2f8>)
 8007170:	899b      	ldrh	r3, [r3, #12]
 8007172:	2b0f      	cmp	r3, #15
 8007174:	d95c      	bls.n	8007230 <main+0x358>
 8007176:	4b16      	ldr	r3, [pc, #88]	; (80071d0 <main+0x2f8>)
 8007178:	8adb      	ldrh	r3, [r3, #22]
 800717a:	2b0f      	cmp	r3, #15
 800717c:	d958      	bls.n	8007230 <main+0x358>
 800717e:	4b14      	ldr	r3, [pc, #80]	; (80071d0 <main+0x2f8>)
 8007180:	899b      	ldrh	r3, [r3, #12]
 8007182:	2b4a      	cmp	r3, #74	; 0x4a
 8007184:	d854      	bhi.n	8007230 <main+0x358>
 8007186:	4b12      	ldr	r3, [pc, #72]	; (80071d0 <main+0x2f8>)
 8007188:	8adb      	ldrh	r3, [r3, #22]
 800718a:	2b4a      	cmp	r3, #74	; 0x4a
 800718c:	d850      	bhi.n	8007230 <main+0x358>
			  MainMode=Manual;
 800718e:	4b1c      	ldr	r3, [pc, #112]	; (8007200 <main+0x328>)
 8007190:	2201      	movs	r2, #1
 8007192:	701a      	strb	r2, [r3, #0]
			  SubMode=Control;
 8007194:	4b1b      	ldr	r3, [pc, #108]	; (8007204 <main+0x32c>)
 8007196:	2203      	movs	r2, #3
 8007198:	701a      	strb	r2, [r3, #0]
			  MainDisplay(1,GREEN);
 800719a:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800719e:	2001      	movs	r0, #1
 80071a0:	f001 f996 	bl	80084d0 <MainDisplay>
			  MainDisplay(2,YELLOW);
 80071a4:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80071a8:	2002      	movs	r0, #2
 80071aa:	f001 f991 	bl	80084d0 <MainDisplay>
			  MainDisplay(3,YELLOW);
 80071ae:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80071b2:	2003      	movs	r0, #3
 80071b4:	f001 f98c 	bl	80084d0 <MainDisplay>
			  SubDisplay(1,YELLOW);
 80071b8:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80071bc:	2001      	movs	r0, #1
 80071be:	f001 fa0d 	bl	80085dc <SubDisplay>
			  SubDisplay(2,YELLOW);
 80071c2:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80071c6:	2002      	movs	r0, #2
 80071c8:	f001 fa08 	bl	80085dc <SubDisplay>
 80071cc:	e15b      	b.n	8007486 <main+0x5ae>
 80071ce:	bf00      	nop
 80071d0:	20000000 	.word	0x20000000
 80071d4:	200000da 	.word	0x200000da
 80071d8:	200002e8 	.word	0x200002e8
 80071dc:	20000128 	.word	0x20000128
 80071e0:	20000444 	.word	0x20000444
 80071e4:	20000330 	.word	0x20000330
 80071e8:	200001f0 	.word	0x200001f0
 80071ec:	2000048c 	.word	0x2000048c
 80071f0:	200003f8 	.word	0x200003f8
 80071f4:	40021400 	.word	0x40021400
 80071f8:	0800bf40 	.word	0x0800bf40
 80071fc:	0800bf48 	.word	0x0800bf48
 8007200:	20000440 	.word	0x20000440
 8007204:	200005b4 	.word	0x200005b4
 8007208:	20000044 	.word	0x20000044
 800720c:	0800bf50 	.word	0x0800bf50
 8007210:	0800bf5c 	.word	0x0800bf5c
 8007214:	0800bf68 	.word	0x0800bf68
 8007218:	0800bf74 	.word	0x0800bf74
 800721c:	200000f0 	.word	0x200000f0
 8007220:	200000e0 	.word	0x200000e0
 8007224:	51eb851f 	.word	0x51eb851f
 8007228:	200000dc 	.word	0x200000dc
 800722c:	200000e4 	.word	0x200000e4
		  }
		  else if(tp_dev.x[0]>90&&tp_dev.y[0]>15&&tp_dev.x[0]<150&&tp_dev.y[0]<75){
 8007230:	4b99      	ldr	r3, [pc, #612]	; (8007498 <main+0x5c0>)
 8007232:	899b      	ldrh	r3, [r3, #12]
 8007234:	2b5a      	cmp	r3, #90	; 0x5a
 8007236:	d92b      	bls.n	8007290 <main+0x3b8>
 8007238:	4b97      	ldr	r3, [pc, #604]	; (8007498 <main+0x5c0>)
 800723a:	8adb      	ldrh	r3, [r3, #22]
 800723c:	2b0f      	cmp	r3, #15
 800723e:	d927      	bls.n	8007290 <main+0x3b8>
 8007240:	4b95      	ldr	r3, [pc, #596]	; (8007498 <main+0x5c0>)
 8007242:	899b      	ldrh	r3, [r3, #12]
 8007244:	2b95      	cmp	r3, #149	; 0x95
 8007246:	d823      	bhi.n	8007290 <main+0x3b8>
 8007248:	4b93      	ldr	r3, [pc, #588]	; (8007498 <main+0x5c0>)
 800724a:	8adb      	ldrh	r3, [r3, #22]
 800724c:	2b4a      	cmp	r3, #74	; 0x4a
 800724e:	d81f      	bhi.n	8007290 <main+0x3b8>
			  MainMode=AutoCharge;
 8007250:	4b92      	ldr	r3, [pc, #584]	; (800749c <main+0x5c4>)
 8007252:	2202      	movs	r2, #2
 8007254:	701a      	strb	r2, [r3, #0]
			  flag=0;
 8007256:	4b92      	ldr	r3, [pc, #584]	; (80074a0 <main+0x5c8>)
 8007258:	2200      	movs	r2, #0
 800725a:	701a      	strb	r2, [r3, #0]
			  MainDisplay(1,YELLOW);
 800725c:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8007260:	2001      	movs	r0, #1
 8007262:	f001 f935 	bl	80084d0 <MainDisplay>
			  MainDisplay(2,GREEN);
 8007266:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 800726a:	2002      	movs	r0, #2
 800726c:	f001 f930 	bl	80084d0 <MainDisplay>
			  MainDisplay(3,YELLOW);
 8007270:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8007274:	2003      	movs	r0, #3
 8007276:	f001 f92b 	bl	80084d0 <MainDisplay>
			  SubDisplay(1,GRAY);
 800727a:	f248 4130 	movw	r1, #33840	; 0x8430
 800727e:	2001      	movs	r0, #1
 8007280:	f001 f9ac 	bl	80085dc <SubDisplay>
			  SubDisplay(2,GRAY);
 8007284:	f248 4130 	movw	r1, #33840	; 0x8430
 8007288:	2002      	movs	r0, #2
 800728a:	f001 f9a7 	bl	80085dc <SubDisplay>
 800728e:	e0fa      	b.n	8007486 <main+0x5ae>
		  }
		  else if(tp_dev.x[0]>165&&tp_dev.y[0]>15&&tp_dev.x[0]<225&&tp_dev.y[0]<75){
 8007290:	4b81      	ldr	r3, [pc, #516]	; (8007498 <main+0x5c0>)
 8007292:	899b      	ldrh	r3, [r3, #12]
 8007294:	2ba5      	cmp	r3, #165	; 0xa5
 8007296:	d92b      	bls.n	80072f0 <main+0x418>
 8007298:	4b7f      	ldr	r3, [pc, #508]	; (8007498 <main+0x5c0>)
 800729a:	8adb      	ldrh	r3, [r3, #22]
 800729c:	2b0f      	cmp	r3, #15
 800729e:	d927      	bls.n	80072f0 <main+0x418>
 80072a0:	4b7d      	ldr	r3, [pc, #500]	; (8007498 <main+0x5c0>)
 80072a2:	899b      	ldrh	r3, [r3, #12]
 80072a4:	2be0      	cmp	r3, #224	; 0xe0
 80072a6:	d823      	bhi.n	80072f0 <main+0x418>
 80072a8:	4b7b      	ldr	r3, [pc, #492]	; (8007498 <main+0x5c0>)
 80072aa:	8adb      	ldrh	r3, [r3, #22]
 80072ac:	2b4a      	cmp	r3, #74	; 0x4a
 80072ae:	d81f      	bhi.n	80072f0 <main+0x418>
			  MainMode=AutoDischarge;
 80072b0:	4b7a      	ldr	r3, [pc, #488]	; (800749c <main+0x5c4>)
 80072b2:	2203      	movs	r2, #3
 80072b4:	701a      	strb	r2, [r3, #0]
			  flag=0;
 80072b6:	4b7a      	ldr	r3, [pc, #488]	; (80074a0 <main+0x5c8>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	701a      	strb	r2, [r3, #0]
			  MainDisplay(1,YELLOW);
 80072bc:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80072c0:	2001      	movs	r0, #1
 80072c2:	f001 f905 	bl	80084d0 <MainDisplay>
			  MainDisplay(2,YELLOW);
 80072c6:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80072ca:	2002      	movs	r0, #2
 80072cc:	f001 f900 	bl	80084d0 <MainDisplay>
			  MainDisplay(3,GREEN);
 80072d0:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80072d4:	2003      	movs	r0, #3
 80072d6:	f001 f8fb 	bl	80084d0 <MainDisplay>
			  SubDisplay(1,GRAY);
 80072da:	f248 4130 	movw	r1, #33840	; 0x8430
 80072de:	2001      	movs	r0, #1
 80072e0:	f001 f97c 	bl	80085dc <SubDisplay>
			  SubDisplay(2,GRAY);
 80072e4:	f248 4130 	movw	r1, #33840	; 0x8430
 80072e8:	2002      	movs	r0, #2
 80072ea:	f001 f977 	bl	80085dc <SubDisplay>
 80072ee:	e0ca      	b.n	8007486 <main+0x5ae>
		  }
		  else if(MainMode==Manual&&pressdown==0&&tp_dev.x[0]>90&&tp_dev.y[0]>90&&tp_dev.x[0]<150&&tp_dev.y[0]<150){
 80072f0:	4b6a      	ldr	r3, [pc, #424]	; (800749c <main+0x5c4>)
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d136      	bne.n	8007366 <main+0x48e>
 80072f8:	4b6a      	ldr	r3, [pc, #424]	; (80074a4 <main+0x5cc>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d132      	bne.n	8007366 <main+0x48e>
 8007300:	4b65      	ldr	r3, [pc, #404]	; (8007498 <main+0x5c0>)
 8007302:	899b      	ldrh	r3, [r3, #12]
 8007304:	2b5a      	cmp	r3, #90	; 0x5a
 8007306:	d92e      	bls.n	8007366 <main+0x48e>
 8007308:	4b63      	ldr	r3, [pc, #396]	; (8007498 <main+0x5c0>)
 800730a:	8adb      	ldrh	r3, [r3, #22]
 800730c:	2b5a      	cmp	r3, #90	; 0x5a
 800730e:	d92a      	bls.n	8007366 <main+0x48e>
 8007310:	4b61      	ldr	r3, [pc, #388]	; (8007498 <main+0x5c0>)
 8007312:	899b      	ldrh	r3, [r3, #12]
 8007314:	2b95      	cmp	r3, #149	; 0x95
 8007316:	d826      	bhi.n	8007366 <main+0x48e>
 8007318:	4b5f      	ldr	r3, [pc, #380]	; (8007498 <main+0x5c0>)
 800731a:	8adb      	ldrh	r3, [r3, #22]
 800731c:	2b95      	cmp	r3, #149	; 0x95
 800731e:	d822      	bhi.n	8007366 <main+0x48e>
			  if(SubMode==VoltageRegulation)
 8007320:	4b61      	ldr	r3, [pc, #388]	; (80074a8 <main+0x5d0>)
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d10d      	bne.n	8007344 <main+0x46c>
			  {
				  SubMode=Control;
 8007328:	4b5f      	ldr	r3, [pc, #380]	; (80074a8 <main+0x5d0>)
 800732a:	2203      	movs	r2, #3
 800732c:	701a      	strb	r2, [r3, #0]
				  SubDisplay(1,YELLOW);
 800732e:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8007332:	2001      	movs	r0, #1
 8007334:	f001 f952 	bl	80085dc <SubDisplay>
				  SubDisplay(2,YELLOW);
 8007338:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800733c:	2002      	movs	r0, #2
 800733e:	f001 f94d 	bl	80085dc <SubDisplay>
			  if(SubMode==VoltageRegulation)
 8007342:	e0a0      	b.n	8007486 <main+0x5ae>
			  }
			  else
			  {
				  SubMode=VoltageRegulation;
 8007344:	4b58      	ldr	r3, [pc, #352]	; (80074a8 <main+0x5d0>)
 8007346:	2201      	movs	r2, #1
 8007348:	701a      	strb	r2, [r3, #0]
				  flag=0;
 800734a:	4b55      	ldr	r3, [pc, #340]	; (80074a0 <main+0x5c8>)
 800734c:	2200      	movs	r2, #0
 800734e:	701a      	strb	r2, [r3, #0]
				  SubDisplay(1,GREEN);
 8007350:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8007354:	2001      	movs	r0, #1
 8007356:	f001 f941 	bl	80085dc <SubDisplay>
				  SubDisplay(2,YELLOW);
 800735a:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800735e:	2002      	movs	r0, #2
 8007360:	f001 f93c 	bl	80085dc <SubDisplay>
			  if(SubMode==VoltageRegulation)
 8007364:	e08f      	b.n	8007486 <main+0x5ae>
			  }
		  }
		  else if(MainMode==Manual&&pressdown==0&&tp_dev.x[0]>165&&tp_dev.y[0]>90&&tp_dev.x[0]<225&&tp_dev.y[0]<150){
 8007366:	4b4d      	ldr	r3, [pc, #308]	; (800749c <main+0x5c4>)
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d136      	bne.n	80073dc <main+0x504>
 800736e:	4b4d      	ldr	r3, [pc, #308]	; (80074a4 <main+0x5cc>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d132      	bne.n	80073dc <main+0x504>
 8007376:	4b48      	ldr	r3, [pc, #288]	; (8007498 <main+0x5c0>)
 8007378:	899b      	ldrh	r3, [r3, #12]
 800737a:	2ba5      	cmp	r3, #165	; 0xa5
 800737c:	d92e      	bls.n	80073dc <main+0x504>
 800737e:	4b46      	ldr	r3, [pc, #280]	; (8007498 <main+0x5c0>)
 8007380:	8adb      	ldrh	r3, [r3, #22]
 8007382:	2b5a      	cmp	r3, #90	; 0x5a
 8007384:	d92a      	bls.n	80073dc <main+0x504>
 8007386:	4b44      	ldr	r3, [pc, #272]	; (8007498 <main+0x5c0>)
 8007388:	899b      	ldrh	r3, [r3, #12]
 800738a:	2be0      	cmp	r3, #224	; 0xe0
 800738c:	d826      	bhi.n	80073dc <main+0x504>
 800738e:	4b42      	ldr	r3, [pc, #264]	; (8007498 <main+0x5c0>)
 8007390:	8adb      	ldrh	r3, [r3, #22]
 8007392:	2b95      	cmp	r3, #149	; 0x95
 8007394:	d822      	bhi.n	80073dc <main+0x504>
			  if(SubMode==CurrentRegulator)
 8007396:	4b44      	ldr	r3, [pc, #272]	; (80074a8 <main+0x5d0>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	2b02      	cmp	r3, #2
 800739c:	d10d      	bne.n	80073ba <main+0x4e2>
			  {
				  SubMode=Control;
 800739e:	4b42      	ldr	r3, [pc, #264]	; (80074a8 <main+0x5d0>)
 80073a0:	2203      	movs	r2, #3
 80073a2:	701a      	strb	r2, [r3, #0]
				  SubDisplay(1,YELLOW);
 80073a4:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80073a8:	2001      	movs	r0, #1
 80073aa:	f001 f917 	bl	80085dc <SubDisplay>
				  SubDisplay(2,YELLOW);
 80073ae:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80073b2:	2002      	movs	r0, #2
 80073b4:	f001 f912 	bl	80085dc <SubDisplay>
			  if(SubMode==CurrentRegulator)
 80073b8:	e065      	b.n	8007486 <main+0x5ae>
			  }
			  else
			  {
				  SubMode=CurrentRegulator;
 80073ba:	4b3b      	ldr	r3, [pc, #236]	; (80074a8 <main+0x5d0>)
 80073bc:	2202      	movs	r2, #2
 80073be:	701a      	strb	r2, [r3, #0]
				  flag=0;
 80073c0:	4b37      	ldr	r3, [pc, #220]	; (80074a0 <main+0x5c8>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	701a      	strb	r2, [r3, #0]
				  SubDisplay(1,YELLOW);
 80073c6:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80073ca:	2001      	movs	r0, #1
 80073cc:	f001 f906 	bl	80085dc <SubDisplay>
				  SubDisplay(2,GREEN);
 80073d0:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 80073d4:	2002      	movs	r0, #2
 80073d6:	f001 f901 	bl	80085dc <SubDisplay>
			  if(SubMode==CurrentRegulator)
 80073da:	e054      	b.n	8007486 <main+0x5ae>
			  }
		  }
		  else if(MainMode==Manual&&SubMode==Control&&tp_dev.x[0]>75&&tp_dev.y[0]>265&&tp_dev.x[0]<240&&tp_dev.y[0]<285)
 80073dc:	4b2f      	ldr	r3, [pc, #188]	; (800749c <main+0x5c4>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d150      	bne.n	8007486 <main+0x5ae>
 80073e4:	4b30      	ldr	r3, [pc, #192]	; (80074a8 <main+0x5d0>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	2b03      	cmp	r3, #3
 80073ea:	d14c      	bne.n	8007486 <main+0x5ae>
 80073ec:	4b2a      	ldr	r3, [pc, #168]	; (8007498 <main+0x5c0>)
 80073ee:	899b      	ldrh	r3, [r3, #12]
 80073f0:	2b4b      	cmp	r3, #75	; 0x4b
 80073f2:	d948      	bls.n	8007486 <main+0x5ae>
 80073f4:	4b28      	ldr	r3, [pc, #160]	; (8007498 <main+0x5c0>)
 80073f6:	8adb      	ldrh	r3, [r3, #22]
 80073f8:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 80073fc:	d343      	bcc.n	8007486 <main+0x5ae>
 80073fe:	4b26      	ldr	r3, [pc, #152]	; (8007498 <main+0x5c0>)
 8007400:	899b      	ldrh	r3, [r3, #12]
 8007402:	2bef      	cmp	r3, #239	; 0xef
 8007404:	d83f      	bhi.n	8007486 <main+0x5ae>
 8007406:	4b24      	ldr	r3, [pc, #144]	; (8007498 <main+0x5c0>)
 8007408:	8adb      	ldrh	r3, [r3, #22]
 800740a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800740e:	d83a      	bhi.n	8007486 <main+0x5ae>
		  {
			  if(tp_dev.x[0]>225) Pwm=840;
 8007410:	4b21      	ldr	r3, [pc, #132]	; (8007498 <main+0x5c0>)
 8007412:	899b      	ldrh	r3, [r3, #12]
 8007414:	2be1      	cmp	r3, #225	; 0xe1
 8007416:	d904      	bls.n	8007422 <main+0x54a>
 8007418:	4b24      	ldr	r3, [pc, #144]	; (80074ac <main+0x5d4>)
 800741a:	f44f 7252 	mov.w	r2, #840	; 0x348
 800741e:	801a      	strh	r2, [r3, #0]
 8007420:	e02d      	b.n	800747e <main+0x5a6>
			  else if(tp_dev.x[0]<90) Pwm=0;
 8007422:	4b1d      	ldr	r3, [pc, #116]	; (8007498 <main+0x5c0>)
 8007424:	899b      	ldrh	r3, [r3, #12]
 8007426:	2b59      	cmp	r3, #89	; 0x59
 8007428:	d803      	bhi.n	8007432 <main+0x55a>
 800742a:	4b20      	ldr	r3, [pc, #128]	; (80074ac <main+0x5d4>)
 800742c:	2200      	movs	r2, #0
 800742e:	801a      	strh	r2, [r3, #0]
 8007430:	e025      	b.n	800747e <main+0x5a6>
			  else Pwm = 840.0*((tp_dev.x[0]-90.0)/135.0);
 8007432:	4b19      	ldr	r3, [pc, #100]	; (8007498 <main+0x5c0>)
 8007434:	899b      	ldrh	r3, [r3, #12]
 8007436:	4618      	mov	r0, r3
 8007438:	f7f9 f818 	bl	800046c <__aeabi_i2d>
 800743c:	f04f 0200 	mov.w	r2, #0
 8007440:	4b1b      	ldr	r3, [pc, #108]	; (80074b0 <main+0x5d8>)
 8007442:	f7f8 fec5 	bl	80001d0 <__aeabi_dsub>
 8007446:	4602      	mov	r2, r0
 8007448:	460b      	mov	r3, r1
 800744a:	4610      	mov	r0, r2
 800744c:	4619      	mov	r1, r3
 800744e:	a310      	add	r3, pc, #64	; (adr r3, 8007490 <main+0x5b8>)
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	f7f9 f99e 	bl	8000794 <__aeabi_ddiv>
 8007458:	4602      	mov	r2, r0
 800745a:	460b      	mov	r3, r1
 800745c:	4610      	mov	r0, r2
 800745e:	4619      	mov	r1, r3
 8007460:	f04f 0200 	mov.w	r2, #0
 8007464:	4b13      	ldr	r3, [pc, #76]	; (80074b4 <main+0x5dc>)
 8007466:	f7f9 f86b 	bl	8000540 <__aeabi_dmul>
 800746a:	4602      	mov	r2, r0
 800746c:	460b      	mov	r3, r1
 800746e:	4610      	mov	r0, r2
 8007470:	4619      	mov	r1, r3
 8007472:	f7f9 fb15 	bl	8000aa0 <__aeabi_d2uiz>
 8007476:	4603      	mov	r3, r0
 8007478:	b29a      	uxth	r2, r3
 800747a:	4b0c      	ldr	r3, [pc, #48]	; (80074ac <main+0x5d4>)
 800747c:	801a      	strh	r2, [r3, #0]
			  TIM3->CCR1 = Pwm;//手动修改pwm占空�???
 800747e:	4b0b      	ldr	r3, [pc, #44]	; (80074ac <main+0x5d4>)
 8007480:	881a      	ldrh	r2, [r3, #0]
 8007482:	4b0d      	ldr	r3, [pc, #52]	; (80074b8 <main+0x5e0>)
 8007484:	635a      	str	r2, [r3, #52]	; 0x34

		  }

		  pressdown=1;
 8007486:	4b07      	ldr	r3, [pc, #28]	; (80074a4 <main+0x5cc>)
 8007488:	2201      	movs	r2, #1
 800748a:	701a      	strb	r2, [r3, #0]
 800748c:	e019      	b.n	80074c2 <main+0x5ea>
 800748e:	bf00      	nop
 8007490:	00000000 	.word	0x00000000
 8007494:	4060e000 	.word	0x4060e000
 8007498:	20000000 	.word	0x20000000
 800749c:	20000440 	.word	0x20000440
 80074a0:	200000f2 	.word	0x200000f2
 80074a4:	200000f1 	.word	0x200000f1
 80074a8:	200005b4 	.word	0x200005b4
 80074ac:	20000044 	.word	0x20000044
 80074b0:	40568000 	.word	0x40568000
 80074b4:	408a4000 	.word	0x408a4000
 80074b8:	40000400 	.word	0x40000400

	  }else {pressdown=0;}
 80074bc:	4b9e      	ldr	r3, [pc, #632]	; (8007738 <main+0x860>)
 80074be:	2200      	movs	r2, #0
 80074c0:	701a      	strb	r2, [r3, #0]


	  //Pwm显示
	  if(MainMode==Manual&&SubMode==Control&&(pressdown==0))
 80074c2:	4b9e      	ldr	r3, [pc, #632]	; (800773c <main+0x864>)
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	2b01      	cmp	r3, #1
 80074c8:	d12d      	bne.n	8007526 <main+0x64e>
 80074ca:	4b9d      	ldr	r3, [pc, #628]	; (8007740 <main+0x868>)
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d129      	bne.n	8007526 <main+0x64e>
 80074d2:	4b99      	ldr	r3, [pc, #612]	; (8007738 <main+0x860>)
 80074d4:	781b      	ldrb	r3, [r3, #0]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d125      	bne.n	8007526 <main+0x64e>
	  	{
		  PwmDisplay(Pwm,YELLOW);
 80074da:	4b9a      	ldr	r3, [pc, #616]	; (8007744 <main+0x86c>)
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80074e2:	4618      	mov	r0, r3
 80074e4:	f001 f8e0 	bl	80086a8 <PwmDisplay>
		  BACK_COLOR=YELLOW;
 80074e8:	4b97      	ldr	r3, [pc, #604]	; (8007748 <main+0x870>)
 80074ea:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80074ee:	801a      	strh	r2, [r3, #0]
		  LCD_ShowNum(100,283,Pwm*100/840,3,16);
 80074f0:	4b94      	ldr	r3, [pc, #592]	; (8007744 <main+0x86c>)
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	461a      	mov	r2, r3
 80074f6:	2364      	movs	r3, #100	; 0x64
 80074f8:	fb03 f302 	mul.w	r3, r3, r2
 80074fc:	4a93      	ldr	r2, [pc, #588]	; (800774c <main+0x874>)
 80074fe:	fb82 1203 	smull	r1, r2, r2, r3
 8007502:	441a      	add	r2, r3
 8007504:	1252      	asrs	r2, r2, #9
 8007506:	17db      	asrs	r3, r3, #31
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	461a      	mov	r2, r3
 800750c:	2310      	movs	r3, #16
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	2303      	movs	r3, #3
 8007512:	f240 111b 	movw	r1, #283	; 0x11b
 8007516:	2064      	movs	r0, #100	; 0x64
 8007518:	f7ff fc1c 	bl	8006d54 <LCD_ShowNum>
		  BACK_COLOR=WHITE;
 800751c:	4b8a      	ldr	r3, [pc, #552]	; (8007748 <main+0x870>)
 800751e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007522:	801a      	strh	r2, [r3, #0]
 8007524:	e06c      	b.n	8007600 <main+0x728>
	  	}
	  else if(MainMode==Manual&&SubMode==Control&&tp_dev.x[0]>75&&tp_dev.y[0]>265&&tp_dev.x[0]<240&&tp_dev.y[0]<285)
 8007526:	4b85      	ldr	r3, [pc, #532]	; (800773c <main+0x864>)
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d13b      	bne.n	80075a6 <main+0x6ce>
 800752e:	4b84      	ldr	r3, [pc, #528]	; (8007740 <main+0x868>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	2b03      	cmp	r3, #3
 8007534:	d137      	bne.n	80075a6 <main+0x6ce>
 8007536:	4b86      	ldr	r3, [pc, #536]	; (8007750 <main+0x878>)
 8007538:	899b      	ldrh	r3, [r3, #12]
 800753a:	2b4b      	cmp	r3, #75	; 0x4b
 800753c:	d933      	bls.n	80075a6 <main+0x6ce>
 800753e:	4b84      	ldr	r3, [pc, #528]	; (8007750 <main+0x878>)
 8007540:	8adb      	ldrh	r3, [r3, #22]
 8007542:	f5b3 7f85 	cmp.w	r3, #266	; 0x10a
 8007546:	d32e      	bcc.n	80075a6 <main+0x6ce>
 8007548:	4b81      	ldr	r3, [pc, #516]	; (8007750 <main+0x878>)
 800754a:	899b      	ldrh	r3, [r3, #12]
 800754c:	2bef      	cmp	r3, #239	; 0xef
 800754e:	d82a      	bhi.n	80075a6 <main+0x6ce>
 8007550:	4b7f      	ldr	r3, [pc, #508]	; (8007750 <main+0x878>)
 8007552:	8adb      	ldrh	r3, [r3, #22]
 8007554:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8007558:	d825      	bhi.n	80075a6 <main+0x6ce>
	  	 {
		  PwmDisplay(Pwm,GREEN);
 800755a:	4b7a      	ldr	r3, [pc, #488]	; (8007744 <main+0x86c>)
 800755c:	881b      	ldrh	r3, [r3, #0]
 800755e:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8007562:	4618      	mov	r0, r3
 8007564:	f001 f8a0 	bl	80086a8 <PwmDisplay>
		  BACK_COLOR=GREEN;
 8007568:	4b77      	ldr	r3, [pc, #476]	; (8007748 <main+0x870>)
 800756a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800756e:	801a      	strh	r2, [r3, #0]
		  LCD_ShowNum(100,283,Pwm*100/840,3,16);
 8007570:	4b74      	ldr	r3, [pc, #464]	; (8007744 <main+0x86c>)
 8007572:	881b      	ldrh	r3, [r3, #0]
 8007574:	461a      	mov	r2, r3
 8007576:	2364      	movs	r3, #100	; 0x64
 8007578:	fb03 f302 	mul.w	r3, r3, r2
 800757c:	4a73      	ldr	r2, [pc, #460]	; (800774c <main+0x874>)
 800757e:	fb82 1203 	smull	r1, r2, r2, r3
 8007582:	441a      	add	r2, r3
 8007584:	1252      	asrs	r2, r2, #9
 8007586:	17db      	asrs	r3, r3, #31
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	461a      	mov	r2, r3
 800758c:	2310      	movs	r3, #16
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	2303      	movs	r3, #3
 8007592:	f240 111b 	movw	r1, #283	; 0x11b
 8007596:	2064      	movs	r0, #100	; 0x64
 8007598:	f7ff fbdc 	bl	8006d54 <LCD_ShowNum>
		  BACK_COLOR=WHITE;
 800759c:	4b6a      	ldr	r3, [pc, #424]	; (8007748 <main+0x870>)
 800759e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075a2:	801a      	strh	r2, [r3, #0]
 80075a4:	e02c      	b.n	8007600 <main+0x728>
	  	 }
	  else if(MainMode!=Manual||SubMode!=Control)
 80075a6:	4b65      	ldr	r3, [pc, #404]	; (800773c <main+0x864>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d103      	bne.n	80075b6 <main+0x6de>
 80075ae:	4b64      	ldr	r3, [pc, #400]	; (8007740 <main+0x868>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	2b03      	cmp	r3, #3
 80075b4:	d024      	beq.n	8007600 <main+0x728>
	  	 {
		  PwmDisplay(Pwm,GRAY);
 80075b6:	4b63      	ldr	r3, [pc, #396]	; (8007744 <main+0x86c>)
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	f248 4130 	movw	r1, #33840	; 0x8430
 80075be:	4618      	mov	r0, r3
 80075c0:	f001 f872 	bl	80086a8 <PwmDisplay>
		  BACK_COLOR=GRAY;
 80075c4:	4b60      	ldr	r3, [pc, #384]	; (8007748 <main+0x870>)
 80075c6:	f248 4230 	movw	r2, #33840	; 0x8430
 80075ca:	801a      	strh	r2, [r3, #0]
		  LCD_ShowNum(100,283,Pwm*100/840,3,16);
 80075cc:	4b5d      	ldr	r3, [pc, #372]	; (8007744 <main+0x86c>)
 80075ce:	881b      	ldrh	r3, [r3, #0]
 80075d0:	461a      	mov	r2, r3
 80075d2:	2364      	movs	r3, #100	; 0x64
 80075d4:	fb03 f302 	mul.w	r3, r3, r2
 80075d8:	4a5c      	ldr	r2, [pc, #368]	; (800774c <main+0x874>)
 80075da:	fb82 1203 	smull	r1, r2, r2, r3
 80075de:	441a      	add	r2, r3
 80075e0:	1252      	asrs	r2, r2, #9
 80075e2:	17db      	asrs	r3, r3, #31
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	461a      	mov	r2, r3
 80075e8:	2310      	movs	r3, #16
 80075ea:	9300      	str	r3, [sp, #0]
 80075ec:	2303      	movs	r3, #3
 80075ee:	f240 111b 	movw	r1, #283	; 0x11b
 80075f2:	2064      	movs	r0, #100	; 0x64
 80075f4:	f7ff fbae 	bl	8006d54 <LCD_ShowNum>
		  BACK_COLOR=WHITE;
 80075f8:	4b53      	ldr	r3, [pc, #332]	; (8007748 <main+0x870>)
 80075fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80075fe:	801a      	strh	r2, [r3, #0]
	  else{

	  	  }

	  //分模式控�???(PID)
	  if(MainMode==Manual&&SubMode==VoltageRegulation)
 8007600:	4b4e      	ldr	r3, [pc, #312]	; (800773c <main+0x864>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	2b01      	cmp	r3, #1
 8007606:	f040 8119 	bne.w	800783c <main+0x964>
 800760a:	4b4d      	ldr	r3, [pc, #308]	; (8007740 <main+0x868>)
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	2b01      	cmp	r3, #1
 8007610:	f040 8114 	bne.w	800783c <main+0x964>
	  {
		  if(Current<(((ToC)/3.3)*4096))
 8007614:	4b4f      	ldr	r3, [pc, #316]	; (8007754 <main+0x87c>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4618      	mov	r0, r3
 800761a:	f7f8 ff17 	bl	800044c <__aeabi_ui2d>
 800761e:	4604      	mov	r4, r0
 8007620:	460d      	mov	r5, r1
 8007622:	4b4d      	ldr	r3, [pc, #308]	; (8007758 <main+0x880>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4618      	mov	r0, r3
 8007628:	f7f8 ff32 	bl	8000490 <__aeabi_f2d>
 800762c:	a340      	add	r3, pc, #256	; (adr r3, 8007730 <main+0x858>)
 800762e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007632:	f7f9 f8af 	bl	8000794 <__aeabi_ddiv>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4610      	mov	r0, r2
 800763c:	4619      	mov	r1, r3
 800763e:	f04f 0200 	mov.w	r2, #0
 8007642:	4b46      	ldr	r3, [pc, #280]	; (800775c <main+0x884>)
 8007644:	f7f8 ff7c 	bl	8000540 <__aeabi_dmul>
 8007648:	4602      	mov	r2, r0
 800764a:	460b      	mov	r3, r1
 800764c:	4620      	mov	r0, r4
 800764e:	4629      	mov	r1, r5
 8007650:	f7f9 f9e8 	bl	8000a24 <__aeabi_dcmplt>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 808e 	beq.w	8007778 <main+0x8a0>
		  {
			  PID_Init(1);
 800765c:	2001      	movs	r0, #1
 800765e:	f001 f87b 	bl	8008758 <PID_Init>
			  if(flag==0){Pwm=420;flag=1;}
 8007662:	4b3f      	ldr	r3, [pc, #252]	; (8007760 <main+0x888>)
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d106      	bne.n	8007678 <main+0x7a0>
 800766a:	4b36      	ldr	r3, [pc, #216]	; (8007744 <main+0x86c>)
 800766c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007670:	801a      	strh	r2, [r3, #0]
 8007672:	4b3b      	ldr	r3, [pc, #236]	; (8007760 <main+0x888>)
 8007674:	2201      	movs	r2, #1
 8007676:	701a      	strb	r2, [r3, #0]
			  Encoder=Voltage_Behind;
 8007678:	4b3a      	ldr	r3, [pc, #232]	; (8007764 <main+0x88c>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	ee07 3a90 	vmov	s15, r3
 8007680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007684:	4b38      	ldr	r3, [pc, #224]	; (8007768 <main+0x890>)
 8007686:	edc3 7a00 	vstr	s15, [r3]
			  Target=(((ToV1/4)/3.3)*4096);
 800768a:	4b38      	ldr	r3, [pc, #224]	; (800776c <main+0x894>)
 800768c:	edd3 7a00 	vldr	s15, [r3]
 8007690:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007694:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007698:	ee16 0a90 	vmov	r0, s13
 800769c:	f7f8 fef8 	bl	8000490 <__aeabi_f2d>
 80076a0:	a323      	add	r3, pc, #140	; (adr r3, 8007730 <main+0x858>)
 80076a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076a6:	f7f9 f875 	bl	8000794 <__aeabi_ddiv>
 80076aa:	4602      	mov	r2, r0
 80076ac:	460b      	mov	r3, r1
 80076ae:	4610      	mov	r0, r2
 80076b0:	4619      	mov	r1, r3
 80076b2:	f04f 0200 	mov.w	r2, #0
 80076b6:	4b29      	ldr	r3, [pc, #164]	; (800775c <main+0x884>)
 80076b8:	f7f8 ff42 	bl	8000540 <__aeabi_dmul>
 80076bc:	4602      	mov	r2, r0
 80076be:	460b      	mov	r3, r1
 80076c0:	4610      	mov	r0, r2
 80076c2:	4619      	mov	r1, r3
 80076c4:	f7f9 fa0c 	bl	8000ae0 <__aeabi_d2f>
 80076c8:	4603      	mov	r3, r0
 80076ca:	4a29      	ldr	r2, [pc, #164]	; (8007770 <main+0x898>)
 80076cc:	6013      	str	r3, [r2, #0]
			  Pwm += PID_Increase(Encoder,Target);
 80076ce:	4b26      	ldr	r3, [pc, #152]	; (8007768 <main+0x890>)
 80076d0:	edd3 7a00 	vldr	s15, [r3]
 80076d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80076d8:	4b25      	ldr	r3, [pc, #148]	; (8007770 <main+0x898>)
 80076da:	edd3 7a00 	vldr	s15, [r3]
 80076de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80076e2:	ee17 1a90 	vmov	r1, s15
 80076e6:	ee17 0a10 	vmov	r0, s14
 80076ea:	f001 f877 	bl	80087dc <PID_Increase>
 80076ee:	eeb0 7a40 	vmov.f32	s14, s0
 80076f2:	4b14      	ldr	r3, [pc, #80]	; (8007744 <main+0x86c>)
 80076f4:	881b      	ldrh	r3, [r3, #0]
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007702:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007706:	ee17 3a90 	vmov	r3, s15
 800770a:	b29a      	uxth	r2, r3
 800770c:	4b0d      	ldr	r3, [pc, #52]	; (8007744 <main+0x86c>)
 800770e:	801a      	strh	r2, [r3, #0]
			  if(Pwm>835)Pwm=835;
 8007710:	4b0c      	ldr	r3, [pc, #48]	; (8007744 <main+0x86c>)
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	f5b3 7f51 	cmp.w	r3, #836	; 0x344
 8007718:	d303      	bcc.n	8007722 <main+0x84a>
 800771a:	4b0a      	ldr	r3, [pc, #40]	; (8007744 <main+0x86c>)
 800771c:	f240 3243 	movw	r2, #835	; 0x343
 8007720:	801a      	strh	r2, [r3, #0]
			  else if(Pwm<0)Pwm=0;
			  else{};
			  TIM3->CCR1 = Pwm;//PID改pwm
 8007722:	4b08      	ldr	r3, [pc, #32]	; (8007744 <main+0x86c>)
 8007724:	881a      	ldrh	r2, [r3, #0]
 8007726:	4b13      	ldr	r3, [pc, #76]	; (8007774 <main+0x89c>)
 8007728:	635a      	str	r2, [r3, #52]	; 0x34
		  if(Current<(((ToC)/3.3)*4096))
 800772a:	e335      	b.n	8007d98 <main+0xec0>
 800772c:	f3af 8000 	nop.w
 8007730:	66666666 	.word	0x66666666
 8007734:	400a6666 	.word	0x400a6666
 8007738:	200000f1 	.word	0x200000f1
 800773c:	20000440 	.word	0x20000440
 8007740:	200005b4 	.word	0x200005b4
 8007744:	20000044 	.word	0x20000044
 8007748:	20000036 	.word	0x20000036
 800774c:	9c09c09d 	.word	0x9c09c09d
 8007750:	20000000 	.word	0x20000000
 8007754:	200000e4 	.word	0x200000e4
 8007758:	20000040 	.word	0x20000040
 800775c:	40b00000 	.word	0x40b00000
 8007760:	200000f2 	.word	0x200000f2
 8007764:	200000dc 	.word	0x200000dc
 8007768:	200000ec 	.word	0x200000ec
 800776c:	20000038 	.word	0x20000038
 8007770:	200000e8 	.word	0x200000e8
 8007774:	40000400 	.word	0x40000400
		  }
		  else
		  {
			  PID_Init(2);
 8007778:	2002      	movs	r0, #2
 800777a:	f000 ffed 	bl	8008758 <PID_Init>
			  if(flag==0){Pwm=420;flag=1;}
 800777e:	4b7c      	ldr	r3, [pc, #496]	; (8007970 <main+0xa98>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d106      	bne.n	8007794 <main+0x8bc>
 8007786:	4b7b      	ldr	r3, [pc, #492]	; (8007974 <main+0xa9c>)
 8007788:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800778c:	801a      	strh	r2, [r3, #0]
 800778e:	4b78      	ldr	r3, [pc, #480]	; (8007970 <main+0xa98>)
 8007790:	2201      	movs	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]
			  Encoder=Current;
 8007794:	4b78      	ldr	r3, [pc, #480]	; (8007978 <main+0xaa0>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	ee07 3a90 	vmov	s15, r3
 800779c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077a0:	4b76      	ldr	r3, [pc, #472]	; (800797c <main+0xaa4>)
 80077a2:	edc3 7a00 	vstr	s15, [r3]
			  Target=(((ToC)/3.3)*4096);
 80077a6:	4b76      	ldr	r3, [pc, #472]	; (8007980 <main+0xaa8>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7f8 fe70 	bl	8000490 <__aeabi_f2d>
 80077b0:	a36d      	add	r3, pc, #436	; (adr r3, 8007968 <main+0xa90>)
 80077b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b6:	f7f8 ffed 	bl	8000794 <__aeabi_ddiv>
 80077ba:	4602      	mov	r2, r0
 80077bc:	460b      	mov	r3, r1
 80077be:	4610      	mov	r0, r2
 80077c0:	4619      	mov	r1, r3
 80077c2:	f04f 0200 	mov.w	r2, #0
 80077c6:	4b6f      	ldr	r3, [pc, #444]	; (8007984 <main+0xaac>)
 80077c8:	f7f8 feba 	bl	8000540 <__aeabi_dmul>
 80077cc:	4602      	mov	r2, r0
 80077ce:	460b      	mov	r3, r1
 80077d0:	4610      	mov	r0, r2
 80077d2:	4619      	mov	r1, r3
 80077d4:	f7f9 f984 	bl	8000ae0 <__aeabi_d2f>
 80077d8:	4603      	mov	r3, r0
 80077da:	4a6b      	ldr	r2, [pc, #428]	; (8007988 <main+0xab0>)
 80077dc:	6013      	str	r3, [r2, #0]
			  Pwm += PID_Increase(Encoder,Target);
 80077de:	4b67      	ldr	r3, [pc, #412]	; (800797c <main+0xaa4>)
 80077e0:	edd3 7a00 	vldr	s15, [r3]
 80077e4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80077e8:	4b67      	ldr	r3, [pc, #412]	; (8007988 <main+0xab0>)
 80077ea:	edd3 7a00 	vldr	s15, [r3]
 80077ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80077f2:	ee17 1a90 	vmov	r1, s15
 80077f6:	ee17 0a10 	vmov	r0, s14
 80077fa:	f000 ffef 	bl	80087dc <PID_Increase>
 80077fe:	eeb0 7a40 	vmov.f32	s14, s0
 8007802:	4b5c      	ldr	r3, [pc, #368]	; (8007974 <main+0xa9c>)
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	ee07 3a90 	vmov	s15, r3
 800780a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800780e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007812:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007816:	ee17 3a90 	vmov	r3, s15
 800781a:	b29a      	uxth	r2, r3
 800781c:	4b55      	ldr	r3, [pc, #340]	; (8007974 <main+0xa9c>)
 800781e:	801a      	strh	r2, [r3, #0]
			  if(Pwm>835)Pwm=835;
 8007820:	4b54      	ldr	r3, [pc, #336]	; (8007974 <main+0xa9c>)
 8007822:	881b      	ldrh	r3, [r3, #0]
 8007824:	f5b3 7f51 	cmp.w	r3, #836	; 0x344
 8007828:	d303      	bcc.n	8007832 <main+0x95a>
 800782a:	4b52      	ldr	r3, [pc, #328]	; (8007974 <main+0xa9c>)
 800782c:	f240 3243 	movw	r2, #835	; 0x343
 8007830:	801a      	strh	r2, [r3, #0]
			  else if(Pwm<0)Pwm=0;
			  else{};
			  TIM3->CCR1 = Pwm;//PID改pwm
 8007832:	4b50      	ldr	r3, [pc, #320]	; (8007974 <main+0xa9c>)
 8007834:	881a      	ldrh	r2, [r3, #0]
 8007836:	4b55      	ldr	r3, [pc, #340]	; (800798c <main+0xab4>)
 8007838:	635a      	str	r2, [r3, #52]	; 0x34
		  if(Current<(((ToC)/3.3)*4096))
 800783a:	e2ad      	b.n	8007d98 <main+0xec0>
		  }
	  }

	  else if(MainMode==Manual&&SubMode==CurrentRegulator)
 800783c:	4b54      	ldr	r3, [pc, #336]	; (8007990 <main+0xab8>)
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	2b01      	cmp	r3, #1
 8007842:	f040 80ad 	bne.w	80079a0 <main+0xac8>
 8007846:	4b53      	ldr	r3, [pc, #332]	; (8007994 <main+0xabc>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b02      	cmp	r3, #2
 800784c:	f040 80a8 	bne.w	80079a0 <main+0xac8>
	  {
		  if(Voltage_Behind>(((ToV1/4)/3.3)*4096))
 8007850:	4b51      	ldr	r3, [pc, #324]	; (8007998 <main+0xac0>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	4618      	mov	r0, r3
 8007856:	f7f8 fdf9 	bl	800044c <__aeabi_ui2d>
 800785a:	4604      	mov	r4, r0
 800785c:	460d      	mov	r5, r1
 800785e:	4b4f      	ldr	r3, [pc, #316]	; (800799c <main+0xac4>)
 8007860:	edd3 7a00 	vldr	s15, [r3]
 8007864:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007868:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800786c:	ee16 0a90 	vmov	r0, s13
 8007870:	f7f8 fe0e 	bl	8000490 <__aeabi_f2d>
 8007874:	a33c      	add	r3, pc, #240	; (adr r3, 8007968 <main+0xa90>)
 8007876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787a:	f7f8 ff8b 	bl	8000794 <__aeabi_ddiv>
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	4610      	mov	r0, r2
 8007884:	4619      	mov	r1, r3
 8007886:	f04f 0200 	mov.w	r2, #0
 800788a:	4b3e      	ldr	r3, [pc, #248]	; (8007984 <main+0xaac>)
 800788c:	f7f8 fe58 	bl	8000540 <__aeabi_dmul>
 8007890:	4602      	mov	r2, r0
 8007892:	460b      	mov	r3, r1
 8007894:	4620      	mov	r0, r4
 8007896:	4629      	mov	r1, r5
 8007898:	f7f9 f8e2 	bl	8000a60 <__aeabi_dcmpgt>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 827a 	beq.w	8007d98 <main+0xec0>
		  {
			  PID_Init(2);
 80078a4:	2002      	movs	r0, #2
 80078a6:	f000 ff57 	bl	8008758 <PID_Init>
			  if(flag==0){Pwm=420;flag=1;}
 80078aa:	4b31      	ldr	r3, [pc, #196]	; (8007970 <main+0xa98>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d106      	bne.n	80078c0 <main+0x9e8>
 80078b2:	4b30      	ldr	r3, [pc, #192]	; (8007974 <main+0xa9c>)
 80078b4:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80078b8:	801a      	strh	r2, [r3, #0]
 80078ba:	4b2d      	ldr	r3, [pc, #180]	; (8007970 <main+0xa98>)
 80078bc:	2201      	movs	r2, #1
 80078be:	701a      	strb	r2, [r3, #0]
			  Encoder=Current;
 80078c0:	4b2d      	ldr	r3, [pc, #180]	; (8007978 <main+0xaa0>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	ee07 3a90 	vmov	s15, r3
 80078c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078cc:	4b2b      	ldr	r3, [pc, #172]	; (800797c <main+0xaa4>)
 80078ce:	edc3 7a00 	vstr	s15, [r3]
			  Target=(((ToC)/3.3)*4096);
 80078d2:	4b2b      	ldr	r3, [pc, #172]	; (8007980 <main+0xaa8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7f8 fdda 	bl	8000490 <__aeabi_f2d>
 80078dc:	a322      	add	r3, pc, #136	; (adr r3, 8007968 <main+0xa90>)
 80078de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e2:	f7f8 ff57 	bl	8000794 <__aeabi_ddiv>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4610      	mov	r0, r2
 80078ec:	4619      	mov	r1, r3
 80078ee:	f04f 0200 	mov.w	r2, #0
 80078f2:	4b24      	ldr	r3, [pc, #144]	; (8007984 <main+0xaac>)
 80078f4:	f7f8 fe24 	bl	8000540 <__aeabi_dmul>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	4610      	mov	r0, r2
 80078fe:	4619      	mov	r1, r3
 8007900:	f7f9 f8ee 	bl	8000ae0 <__aeabi_d2f>
 8007904:	4603      	mov	r3, r0
 8007906:	4a20      	ldr	r2, [pc, #128]	; (8007988 <main+0xab0>)
 8007908:	6013      	str	r3, [r2, #0]
			  Pwm += PID_Increase(Encoder,Target);
 800790a:	4b1c      	ldr	r3, [pc, #112]	; (800797c <main+0xaa4>)
 800790c:	edd3 7a00 	vldr	s15, [r3]
 8007910:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007914:	4b1c      	ldr	r3, [pc, #112]	; (8007988 <main+0xab0>)
 8007916:	edd3 7a00 	vldr	s15, [r3]
 800791a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800791e:	ee17 1a90 	vmov	r1, s15
 8007922:	ee17 0a10 	vmov	r0, s14
 8007926:	f000 ff59 	bl	80087dc <PID_Increase>
 800792a:	eeb0 7a40 	vmov.f32	s14, s0
 800792e:	4b11      	ldr	r3, [pc, #68]	; (8007974 <main+0xa9c>)
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	ee07 3a90 	vmov	s15, r3
 8007936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800793a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800793e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007942:	ee17 3a90 	vmov	r3, s15
 8007946:	b29a      	uxth	r2, r3
 8007948:	4b0a      	ldr	r3, [pc, #40]	; (8007974 <main+0xa9c>)
 800794a:	801a      	strh	r2, [r3, #0]
			  if(Pwm>835)Pwm=835;
 800794c:	4b09      	ldr	r3, [pc, #36]	; (8007974 <main+0xa9c>)
 800794e:	881b      	ldrh	r3, [r3, #0]
 8007950:	f5b3 7f51 	cmp.w	r3, #836	; 0x344
 8007954:	d303      	bcc.n	800795e <main+0xa86>
 8007956:	4b07      	ldr	r3, [pc, #28]	; (8007974 <main+0xa9c>)
 8007958:	f240 3243 	movw	r2, #835	; 0x343
 800795c:	801a      	strh	r2, [r3, #0]
			  else if(Pwm<0)Pwm=0;
			  else{};
			  TIM3->CCR1 = Pwm;//PID改pwm
 800795e:	4b05      	ldr	r3, [pc, #20]	; (8007974 <main+0xa9c>)
 8007960:	881a      	ldrh	r2, [r3, #0]
 8007962:	4b0a      	ldr	r3, [pc, #40]	; (800798c <main+0xab4>)
 8007964:	635a      	str	r2, [r3, #52]	; 0x34
		  if(Voltage_Behind>(((ToV1/4)/3.3)*4096))
 8007966:	e217      	b.n	8007d98 <main+0xec0>
 8007968:	66666666 	.word	0x66666666
 800796c:	400a6666 	.word	0x400a6666
 8007970:	200000f2 	.word	0x200000f2
 8007974:	20000044 	.word	0x20000044
 8007978:	200000e4 	.word	0x200000e4
 800797c:	200000ec 	.word	0x200000ec
 8007980:	20000040 	.word	0x20000040
 8007984:	40b00000 	.word	0x40b00000
 8007988:	200000e8 	.word	0x200000e8
 800798c:	40000400 	.word	0x40000400
 8007990:	20000440 	.word	0x20000440
 8007994:	200005b4 	.word	0x200005b4
 8007998:	200000dc 	.word	0x200000dc
 800799c:	20000038 	.word	0x20000038
		  {

		  }
	  }

	  else if(MainMode==AutoCharge)
 80079a0:	4bb7      	ldr	r3, [pc, #732]	; (8007c80 <main+0xda8>)
 80079a2:	781b      	ldrb	r3, [r3, #0]
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	f040 8181 	bne.w	8007cac <main+0xdd4>
	  {
		  if(Current>340)//�?�?
 80079aa:	4bb6      	ldr	r3, [pc, #728]	; (8007c84 <main+0xdac>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80079b2:	f240 8129 	bls.w	8007c08 <main+0xd30>
		  {

			  if(Voltage_Behind<(((ToV1/4)/3.3)*4096))//横流
 80079b6:	4bb4      	ldr	r3, [pc, #720]	; (8007c88 <main+0xdb0>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7f8 fd46 	bl	800044c <__aeabi_ui2d>
 80079c0:	4604      	mov	r4, r0
 80079c2:	460d      	mov	r5, r1
 80079c4:	4bb1      	ldr	r3, [pc, #708]	; (8007c8c <main+0xdb4>)
 80079c6:	edd3 7a00 	vldr	s15, [r3]
 80079ca:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 80079ce:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80079d2:	ee16 0a90 	vmov	r0, s13
 80079d6:	f7f8 fd5b 	bl	8000490 <__aeabi_f2d>
 80079da:	a3a7      	add	r3, pc, #668	; (adr r3, 8007c78 <main+0xda0>)
 80079dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e0:	f7f8 fed8 	bl	8000794 <__aeabi_ddiv>
 80079e4:	4602      	mov	r2, r0
 80079e6:	460b      	mov	r3, r1
 80079e8:	4610      	mov	r0, r2
 80079ea:	4619      	mov	r1, r3
 80079ec:	f04f 0200 	mov.w	r2, #0
 80079f0:	4ba7      	ldr	r3, [pc, #668]	; (8007c90 <main+0xdb8>)
 80079f2:	f7f8 fda5 	bl	8000540 <__aeabi_dmul>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4620      	mov	r0, r4
 80079fc:	4629      	mov	r1, r5
 80079fe:	f7f9 f811 	bl	8000a24 <__aeabi_dcmplt>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d067      	beq.n	8007ad8 <main+0xc00>
			  {
				  MainDisplay(2,GREEN);
 8007a08:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8007a0c:	2002      	movs	r0, #2
 8007a0e:	f000 fd5f 	bl	80084d0 <MainDisplay>
				  PID_Init(2);
 8007a12:	2002      	movs	r0, #2
 8007a14:	f000 fea0 	bl	8008758 <PID_Init>
				  if(flag==0){Pwm=420;flag=1;}
 8007a18:	4b9e      	ldr	r3, [pc, #632]	; (8007c94 <main+0xdbc>)
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d106      	bne.n	8007a2e <main+0xb56>
 8007a20:	4b9d      	ldr	r3, [pc, #628]	; (8007c98 <main+0xdc0>)
 8007a22:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007a26:	801a      	strh	r2, [r3, #0]
 8007a28:	4b9a      	ldr	r3, [pc, #616]	; (8007c94 <main+0xdbc>)
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	701a      	strb	r2, [r3, #0]
				  Encoder=Current;
 8007a2e:	4b95      	ldr	r3, [pc, #596]	; (8007c84 <main+0xdac>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	ee07 3a90 	vmov	s15, r3
 8007a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a3a:	4b98      	ldr	r3, [pc, #608]	; (8007c9c <main+0xdc4>)
 8007a3c:	edc3 7a00 	vstr	s15, [r3]
				  Target=(((ToC)/3.3)*4096);
 8007a40:	4b97      	ldr	r3, [pc, #604]	; (8007ca0 <main+0xdc8>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f7f8 fd23 	bl	8000490 <__aeabi_f2d>
 8007a4a:	a38b      	add	r3, pc, #556	; (adr r3, 8007c78 <main+0xda0>)
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	f7f8 fea0 	bl	8000794 <__aeabi_ddiv>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	4610      	mov	r0, r2
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	f04f 0200 	mov.w	r2, #0
 8007a60:	4b8b      	ldr	r3, [pc, #556]	; (8007c90 <main+0xdb8>)
 8007a62:	f7f8 fd6d 	bl	8000540 <__aeabi_dmul>
 8007a66:	4602      	mov	r2, r0
 8007a68:	460b      	mov	r3, r1
 8007a6a:	4610      	mov	r0, r2
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	f7f9 f837 	bl	8000ae0 <__aeabi_d2f>
 8007a72:	4603      	mov	r3, r0
 8007a74:	4a8b      	ldr	r2, [pc, #556]	; (8007ca4 <main+0xdcc>)
 8007a76:	6013      	str	r3, [r2, #0]
				  Pwm += PID_Increase(Encoder,Target);
 8007a78:	4b88      	ldr	r3, [pc, #544]	; (8007c9c <main+0xdc4>)
 8007a7a:	edd3 7a00 	vldr	s15, [r3]
 8007a7e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007a82:	4b88      	ldr	r3, [pc, #544]	; (8007ca4 <main+0xdcc>)
 8007a84:	edd3 7a00 	vldr	s15, [r3]
 8007a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a8c:	ee17 1a90 	vmov	r1, s15
 8007a90:	ee17 0a10 	vmov	r0, s14
 8007a94:	f000 fea2 	bl	80087dc <PID_Increase>
 8007a98:	eeb0 7a40 	vmov.f32	s14, s0
 8007a9c:	4b7e      	ldr	r3, [pc, #504]	; (8007c98 <main+0xdc0>)
 8007a9e:	881b      	ldrh	r3, [r3, #0]
 8007aa0:	ee07 3a90 	vmov	s15, r3
 8007aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ab0:	ee17 3a90 	vmov	r3, s15
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	4b78      	ldr	r3, [pc, #480]	; (8007c98 <main+0xdc0>)
 8007ab8:	801a      	strh	r2, [r3, #0]
				  if(Pwm>835)Pwm=835;
 8007aba:	4b77      	ldr	r3, [pc, #476]	; (8007c98 <main+0xdc0>)
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	f5b3 7f51 	cmp.w	r3, #836	; 0x344
 8007ac2:	d303      	bcc.n	8007acc <main+0xbf4>
 8007ac4:	4b74      	ldr	r3, [pc, #464]	; (8007c98 <main+0xdc0>)
 8007ac6:	f240 3243 	movw	r2, #835	; 0x343
 8007aca:	801a      	strh	r2, [r3, #0]
				  else if(Pwm<0)Pwm=0;
				  else{};
				  TIM3->CCR1 = Pwm;//PID改pwm
 8007acc:	4b72      	ldr	r3, [pc, #456]	; (8007c98 <main+0xdc0>)
 8007ace:	881a      	ldrh	r2, [r3, #0]
 8007ad0:	4b75      	ldr	r3, [pc, #468]	; (8007ca8 <main+0xdd0>)
 8007ad2:	635a      	str	r2, [r3, #52]	; 0x34
 8007ad4:	f7ff baad 	b.w	8007032 <main+0x15a>
			  }
			  else if(Voltage_Behind>(((ToV1/4)/3.3)*4096))//恒压
 8007ad8:	4b6b      	ldr	r3, [pc, #428]	; (8007c88 <main+0xdb0>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7f8 fcb5 	bl	800044c <__aeabi_ui2d>
 8007ae2:	4604      	mov	r4, r0
 8007ae4:	460d      	mov	r5, r1
 8007ae6:	4b69      	ldr	r3, [pc, #420]	; (8007c8c <main+0xdb4>)
 8007ae8:	edd3 7a00 	vldr	s15, [r3]
 8007aec:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007af0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007af4:	ee16 0a90 	vmov	r0, s13
 8007af8:	f7f8 fcca 	bl	8000490 <__aeabi_f2d>
 8007afc:	a35e      	add	r3, pc, #376	; (adr r3, 8007c78 <main+0xda0>)
 8007afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b02:	f7f8 fe47 	bl	8000794 <__aeabi_ddiv>
 8007b06:	4602      	mov	r2, r0
 8007b08:	460b      	mov	r3, r1
 8007b0a:	4610      	mov	r0, r2
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	f04f 0200 	mov.w	r2, #0
 8007b12:	4b5f      	ldr	r3, [pc, #380]	; (8007c90 <main+0xdb8>)
 8007b14:	f7f8 fd14 	bl	8000540 <__aeabi_dmul>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	460b      	mov	r3, r1
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	4629      	mov	r1, r5
 8007b20:	f7f8 ff9e 	bl	8000a60 <__aeabi_dcmpgt>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 8136 	beq.w	8007d98 <main+0xec0>
			  {
				  MainDisplay(2,CYAN);
 8007b2c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8007b30:	2002      	movs	r0, #2
 8007b32:	f000 fccd 	bl	80084d0 <MainDisplay>
				  PID_Init(1);
 8007b36:	2001      	movs	r0, #1
 8007b38:	f000 fe0e 	bl	8008758 <PID_Init>
				  if(flag==0){Pwm=420;flag=1;}
 8007b3c:	4b55      	ldr	r3, [pc, #340]	; (8007c94 <main+0xdbc>)
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d106      	bne.n	8007b52 <main+0xc7a>
 8007b44:	4b54      	ldr	r3, [pc, #336]	; (8007c98 <main+0xdc0>)
 8007b46:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007b4a:	801a      	strh	r2, [r3, #0]
 8007b4c:	4b51      	ldr	r3, [pc, #324]	; (8007c94 <main+0xdbc>)
 8007b4e:	2201      	movs	r2, #1
 8007b50:	701a      	strb	r2, [r3, #0]
				  Encoder=Voltage_Behind;
 8007b52:	4b4d      	ldr	r3, [pc, #308]	; (8007c88 <main+0xdb0>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	ee07 3a90 	vmov	s15, r3
 8007b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b5e:	4b4f      	ldr	r3, [pc, #316]	; (8007c9c <main+0xdc4>)
 8007b60:	edc3 7a00 	vstr	s15, [r3]
				  Target=(((ToV1/4)/3.3)*4096);
 8007b64:	4b49      	ldr	r3, [pc, #292]	; (8007c8c <main+0xdb4>)
 8007b66:	edd3 7a00 	vldr	s15, [r3]
 8007b6a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007b6e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007b72:	ee16 0a90 	vmov	r0, s13
 8007b76:	f7f8 fc8b 	bl	8000490 <__aeabi_f2d>
 8007b7a:	a33f      	add	r3, pc, #252	; (adr r3, 8007c78 <main+0xda0>)
 8007b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b80:	f7f8 fe08 	bl	8000794 <__aeabi_ddiv>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4610      	mov	r0, r2
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	f04f 0200 	mov.w	r2, #0
 8007b90:	4b3f      	ldr	r3, [pc, #252]	; (8007c90 <main+0xdb8>)
 8007b92:	f7f8 fcd5 	bl	8000540 <__aeabi_dmul>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	4610      	mov	r0, r2
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	f7f8 ff9f 	bl	8000ae0 <__aeabi_d2f>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	4a3f      	ldr	r2, [pc, #252]	; (8007ca4 <main+0xdcc>)
 8007ba6:	6013      	str	r3, [r2, #0]
				  Pwm += PID_Increase(Encoder,Target);
 8007ba8:	4b3c      	ldr	r3, [pc, #240]	; (8007c9c <main+0xdc4>)
 8007baa:	edd3 7a00 	vldr	s15, [r3]
 8007bae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007bb2:	4b3c      	ldr	r3, [pc, #240]	; (8007ca4 <main+0xdcc>)
 8007bb4:	edd3 7a00 	vldr	s15, [r3]
 8007bb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bbc:	ee17 1a90 	vmov	r1, s15
 8007bc0:	ee17 0a10 	vmov	r0, s14
 8007bc4:	f000 fe0a 	bl	80087dc <PID_Increase>
 8007bc8:	eeb0 7a40 	vmov.f32	s14, s0
 8007bcc:	4b32      	ldr	r3, [pc, #200]	; (8007c98 <main+0xdc0>)
 8007bce:	881b      	ldrh	r3, [r3, #0]
 8007bd0:	ee07 3a90 	vmov	s15, r3
 8007bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007be0:	ee17 3a90 	vmov	r3, s15
 8007be4:	b29a      	uxth	r2, r3
 8007be6:	4b2c      	ldr	r3, [pc, #176]	; (8007c98 <main+0xdc0>)
 8007be8:	801a      	strh	r2, [r3, #0]
				  if(Pwm>835)Pwm=835;
 8007bea:	4b2b      	ldr	r3, [pc, #172]	; (8007c98 <main+0xdc0>)
 8007bec:	881b      	ldrh	r3, [r3, #0]
 8007bee:	f5b3 7f51 	cmp.w	r3, #836	; 0x344
 8007bf2:	d303      	bcc.n	8007bfc <main+0xd24>
 8007bf4:	4b28      	ldr	r3, [pc, #160]	; (8007c98 <main+0xdc0>)
 8007bf6:	f240 3243 	movw	r2, #835	; 0x343
 8007bfa:	801a      	strh	r2, [r3, #0]
				  else if(Pwm<0)Pwm=0;
				  else{};
				  TIM3->CCR1 = Pwm;//PID改pwm
 8007bfc:	4b26      	ldr	r3, [pc, #152]	; (8007c98 <main+0xdc0>)
 8007bfe:	881a      	ldrh	r2, [r3, #0]
 8007c00:	4b29      	ldr	r3, [pc, #164]	; (8007ca8 <main+0xdd0>)
 8007c02:	635a      	str	r2, [r3, #52]	; 0x34
 8007c04:	f7ff ba15 	b.w	8007032 <main+0x15a>
			  }
		  }
		  else if(Current<340&&Voltage_Behind>(((ToV1/4)/3.3)*4096))
 8007c08:	4b1e      	ldr	r3, [pc, #120]	; (8007c84 <main+0xdac>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8007c10:	f4bf aa0f 	bcs.w	8007032 <main+0x15a>
 8007c14:	4b1c      	ldr	r3, [pc, #112]	; (8007c88 <main+0xdb0>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7f8 fc17 	bl	800044c <__aeabi_ui2d>
 8007c1e:	4604      	mov	r4, r0
 8007c20:	460d      	mov	r5, r1
 8007c22:	4b1a      	ldr	r3, [pc, #104]	; (8007c8c <main+0xdb4>)
 8007c24:	edd3 7a00 	vldr	s15, [r3]
 8007c28:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007c2c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007c30:	ee16 0a90 	vmov	r0, s13
 8007c34:	f7f8 fc2c 	bl	8000490 <__aeabi_f2d>
 8007c38:	a30f      	add	r3, pc, #60	; (adr r3, 8007c78 <main+0xda0>)
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f7f8 fda9 	bl	8000794 <__aeabi_ddiv>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	4610      	mov	r0, r2
 8007c48:	4619      	mov	r1, r3
 8007c4a:	f04f 0200 	mov.w	r2, #0
 8007c4e:	4b10      	ldr	r3, [pc, #64]	; (8007c90 <main+0xdb8>)
 8007c50:	f7f8 fc76 	bl	8000540 <__aeabi_dmul>
 8007c54:	4602      	mov	r2, r0
 8007c56:	460b      	mov	r3, r1
 8007c58:	4620      	mov	r0, r4
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	f7f8 ff00 	bl	8000a60 <__aeabi_dcmpgt>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	f000 8098 	beq.w	8007d98 <main+0xec0>
		  {//冲完
			  MainDisplay(2,BLUE);
 8007c68:	211f      	movs	r1, #31
 8007c6a:	2002      	movs	r0, #2
 8007c6c:	f000 fc30 	bl	80084d0 <MainDisplay>
 8007c70:	f7ff b9df 	b.w	8007032 <main+0x15a>
 8007c74:	f3af 8000 	nop.w
 8007c78:	66666666 	.word	0x66666666
 8007c7c:	400a6666 	.word	0x400a6666
 8007c80:	20000440 	.word	0x20000440
 8007c84:	200000e4 	.word	0x200000e4
 8007c88:	200000dc 	.word	0x200000dc
 8007c8c:	20000038 	.word	0x20000038
 8007c90:	40b00000 	.word	0x40b00000
 8007c94:	200000f2 	.word	0x200000f2
 8007c98:	20000044 	.word	0x20000044
 8007c9c:	200000ec 	.word	0x200000ec
 8007ca0:	20000040 	.word	0x20000040
 8007ca4:	200000e8 	.word	0x200000e8
 8007ca8:	40000400 	.word	0x40000400
		  }


	  }

	  else if(MainMode==AutoDischarge)
 8007cac:	4b3e      	ldr	r3, [pc, #248]	; (8007da8 <main+0xed0>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b03      	cmp	r3, #3
 8007cb2:	f47f a9be 	bne.w	8007032 <main+0x15a>
	  {
		  if(1)
		  {
			  PID_Init(1);
 8007cb6:	2001      	movs	r0, #1
 8007cb8:	f000 fd4e 	bl	8008758 <PID_Init>
			  if(flag==0){Pwm=840;flag=1;}
 8007cbc:	4b3b      	ldr	r3, [pc, #236]	; (8007dac <main+0xed4>)
 8007cbe:	781b      	ldrb	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d106      	bne.n	8007cd2 <main+0xdfa>
 8007cc4:	4b3a      	ldr	r3, [pc, #232]	; (8007db0 <main+0xed8>)
 8007cc6:	f44f 7252 	mov.w	r2, #840	; 0x348
 8007cca:	801a      	strh	r2, [r3, #0]
 8007ccc:	4b37      	ldr	r3, [pc, #220]	; (8007dac <main+0xed4>)
 8007cce:	2201      	movs	r2, #1
 8007cd0:	701a      	strb	r2, [r3, #0]
			  Encoder=Voltage_Front;
 8007cd2:	4b38      	ldr	r3, [pc, #224]	; (8007db4 <main+0xedc>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	ee07 3a90 	vmov	s15, r3
 8007cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cde:	4b36      	ldr	r3, [pc, #216]	; (8007db8 <main+0xee0>)
 8007ce0:	edc3 7a00 	vstr	s15, [r3]
			  Target=(((ToV2/4)/3.3)*4096);
 8007ce4:	4b35      	ldr	r3, [pc, #212]	; (8007dbc <main+0xee4>)
 8007ce6:	edd3 7a00 	vldr	s15, [r3]
 8007cea:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007cee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007cf2:	ee16 0a90 	vmov	r0, s13
 8007cf6:	f7f8 fbcb 	bl	8000490 <__aeabi_f2d>
 8007cfa:	a329      	add	r3, pc, #164	; (adr r3, 8007da0 <main+0xec8>)
 8007cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d00:	f7f8 fd48 	bl	8000794 <__aeabi_ddiv>
 8007d04:	4602      	mov	r2, r0
 8007d06:	460b      	mov	r3, r1
 8007d08:	4610      	mov	r0, r2
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	f04f 0200 	mov.w	r2, #0
 8007d10:	4b2b      	ldr	r3, [pc, #172]	; (8007dc0 <main+0xee8>)
 8007d12:	f7f8 fc15 	bl	8000540 <__aeabi_dmul>
 8007d16:	4602      	mov	r2, r0
 8007d18:	460b      	mov	r3, r1
 8007d1a:	4610      	mov	r0, r2
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	f7f8 fedf 	bl	8000ae0 <__aeabi_d2f>
 8007d22:	4603      	mov	r3, r0
 8007d24:	4a27      	ldr	r2, [pc, #156]	; (8007dc4 <main+0xeec>)
 8007d26:	6013      	str	r3, [r2, #0]
			  Pwm -= PID_Increase(Encoder,Target);
 8007d28:	4b23      	ldr	r3, [pc, #140]	; (8007db8 <main+0xee0>)
 8007d2a:	edd3 7a00 	vldr	s15, [r3]
 8007d2e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8007d32:	4b24      	ldr	r3, [pc, #144]	; (8007dc4 <main+0xeec>)
 8007d34:	edd3 7a00 	vldr	s15, [r3]
 8007d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007d3c:	ee17 1a90 	vmov	r1, s15
 8007d40:	ee17 0a10 	vmov	r0, s14
 8007d44:	f000 fd4a 	bl	80087dc <PID_Increase>
 8007d48:	eeb0 7a40 	vmov.f32	s14, s0
 8007d4c:	4b18      	ldr	r3, [pc, #96]	; (8007db0 <main+0xed8>)
 8007d4e:	881b      	ldrh	r3, [r3, #0]
 8007d50:	ee07 3a90 	vmov	s15, r3
 8007d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007d58:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d60:	ee17 3a90 	vmov	r3, s15
 8007d64:	b29a      	uxth	r2, r3
 8007d66:	4b12      	ldr	r3, [pc, #72]	; (8007db0 <main+0xed8>)
 8007d68:	801a      	strh	r2, [r3, #0]
			  if(Pwm>835)Pwm=835;
 8007d6a:	4b11      	ldr	r3, [pc, #68]	; (8007db0 <main+0xed8>)
 8007d6c:	881b      	ldrh	r3, [r3, #0]
 8007d6e:	f5b3 7f51 	cmp.w	r3, #836	; 0x344
 8007d72:	d304      	bcc.n	8007d7e <main+0xea6>
 8007d74:	4b0e      	ldr	r3, [pc, #56]	; (8007db0 <main+0xed8>)
 8007d76:	f240 3243 	movw	r2, #835	; 0x343
 8007d7a:	801a      	strh	r2, [r3, #0]
 8007d7c:	e008      	b.n	8007d90 <main+0xeb8>
			  else if(Pwm<420)Pwm=420;
 8007d7e:	4b0c      	ldr	r3, [pc, #48]	; (8007db0 <main+0xed8>)
 8007d80:	881b      	ldrh	r3, [r3, #0]
 8007d82:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8007d86:	d203      	bcs.n	8007d90 <main+0xeb8>
 8007d88:	4b09      	ldr	r3, [pc, #36]	; (8007db0 <main+0xed8>)
 8007d8a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8007d8e:	801a      	strh	r2, [r3, #0]
			  else{};
			  TIM3->CCR1 = Pwm;//PID改pwm
 8007d90:	4b07      	ldr	r3, [pc, #28]	; (8007db0 <main+0xed8>)
 8007d92:	881a      	ldrh	r2, [r3, #0]
 8007d94:	4b0c      	ldr	r3, [pc, #48]	; (8007dc8 <main+0xef0>)
 8007d96:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(10);
 8007d98:	f7ff b94b 	b.w	8007032 <main+0x15a>
 8007d9c:	f3af 8000 	nop.w
 8007da0:	66666666 	.word	0x66666666
 8007da4:	400a6666 	.word	0x400a6666
 8007da8:	20000440 	.word	0x20000440
 8007dac:	200000f2 	.word	0x200000f2
 8007db0:	20000044 	.word	0x20000044
 8007db4:	200000e0 	.word	0x200000e0
 8007db8:	200000ec 	.word	0x200000ec
 8007dbc:	2000003c 	.word	0x2000003c
 8007dc0:	40b00000 	.word	0x40b00000
 8007dc4:	200000e8 	.word	0x200000e8
 8007dc8:	40000400 	.word	0x40000400

08007dcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b094      	sub	sp, #80	; 0x50
 8007dd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007dd2:	f107 0320 	add.w	r3, r7, #32
 8007dd6:	2230      	movs	r2, #48	; 0x30
 8007dd8:	2100      	movs	r1, #0
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f003 ff4c 	bl	800bc78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007de0:	f107 030c 	add.w	r3, r7, #12
 8007de4:	2200      	movs	r2, #0
 8007de6:	601a      	str	r2, [r3, #0]
 8007de8:	605a      	str	r2, [r3, #4]
 8007dea:	609a      	str	r2, [r3, #8]
 8007dec:	60da      	str	r2, [r3, #12]
 8007dee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007df0:	2300      	movs	r3, #0
 8007df2:	60bb      	str	r3, [r7, #8]
 8007df4:	4b29      	ldr	r3, [pc, #164]	; (8007e9c <SystemClock_Config+0xd0>)
 8007df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df8:	4a28      	ldr	r2, [pc, #160]	; (8007e9c <SystemClock_Config+0xd0>)
 8007dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dfe:	6413      	str	r3, [r2, #64]	; 0x40
 8007e00:	4b26      	ldr	r3, [pc, #152]	; (8007e9c <SystemClock_Config+0xd0>)
 8007e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e08:	60bb      	str	r3, [r7, #8]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	607b      	str	r3, [r7, #4]
 8007e10:	4b23      	ldr	r3, [pc, #140]	; (8007ea0 <SystemClock_Config+0xd4>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a22      	ldr	r2, [pc, #136]	; (8007ea0 <SystemClock_Config+0xd4>)
 8007e16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e1a:	6013      	str	r3, [r2, #0]
 8007e1c:	4b20      	ldr	r3, [pc, #128]	; (8007ea0 <SystemClock_Config+0xd4>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e24:	607b      	str	r3, [r7, #4]
 8007e26:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007e2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e30:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e32:	2302      	movs	r3, #2
 8007e34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007e36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007e3c:	2304      	movs	r3, #4
 8007e3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007e40:	23a8      	movs	r3, #168	; 0xa8
 8007e42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007e44:	2302      	movs	r3, #2
 8007e46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007e48:	2304      	movs	r3, #4
 8007e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e4c:	f107 0320 	add.w	r3, r7, #32
 8007e50:	4618      	mov	r0, r3
 8007e52:	f002 fae5 	bl	800a420 <HAL_RCC_OscConfig>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007e5c:	f000 fd34 	bl	80088c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e60:	230f      	movs	r3, #15
 8007e62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007e64:	2302      	movs	r3, #2
 8007e66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007e6c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007e70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007e78:	f107 030c 	add.w	r3, r7, #12
 8007e7c:	2105      	movs	r1, #5
 8007e7e:	4618      	mov	r0, r3
 8007e80:	f002 fd46 	bl	800a910 <HAL_RCC_ClockConfig>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007e8a:	f000 fd1d 	bl	80088c8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8007e8e:	f002 fe25 	bl	800aadc <HAL_RCC_EnableCSS>
}
 8007e92:	bf00      	nop
 8007e94:	3750      	adds	r7, #80	; 0x50
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
 8007e9a:	bf00      	nop
 8007e9c:	40023800 	.word	0x40023800
 8007ea0:	40007000 	.word	0x40007000

08007ea4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007eaa:	463b      	mov	r3, r7
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	605a      	str	r2, [r3, #4]
 8007eb2:	609a      	str	r2, [r3, #8]
 8007eb4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8007eb6:	4b22      	ldr	r3, [pc, #136]	; (8007f40 <MX_ADC1_Init+0x9c>)
 8007eb8:	4a22      	ldr	r2, [pc, #136]	; (8007f44 <MX_ADC1_Init+0xa0>)
 8007eba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8007ebc:	4b20      	ldr	r3, [pc, #128]	; (8007f40 <MX_ADC1_Init+0x9c>)
 8007ebe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007ec2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007ec4:	4b1e      	ldr	r3, [pc, #120]	; (8007f40 <MX_ADC1_Init+0x9c>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007eca:	4b1d      	ldr	r3, [pc, #116]	; (8007f40 <MX_ADC1_Init+0x9c>)
 8007ecc:	2200      	movs	r2, #0
 8007ece:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007ed0:	4b1b      	ldr	r3, [pc, #108]	; (8007f40 <MX_ADC1_Init+0x9c>)
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007ed6:	4b1a      	ldr	r3, [pc, #104]	; (8007f40 <MX_ADC1_Init+0x9c>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8007ede:	4b18      	ldr	r3, [pc, #96]	; (8007f40 <MX_ADC1_Init+0x9c>)
 8007ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ee4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8007ee6:	4b16      	ldr	r3, [pc, #88]	; (8007f40 <MX_ADC1_Init+0x9c>)
 8007ee8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007eec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007eee:	4b14      	ldr	r3, [pc, #80]	; (8007f40 <MX_ADC1_Init+0x9c>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007ef4:	4b12      	ldr	r3, [pc, #72]	; (8007f40 <MX_ADC1_Init+0x9c>)
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007efa:	4b11      	ldr	r3, [pc, #68]	; (8007f40 <MX_ADC1_Init+0x9c>)
 8007efc:	2201      	movs	r2, #1
 8007efe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007f02:	4b0f      	ldr	r3, [pc, #60]	; (8007f40 <MX_ADC1_Init+0x9c>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007f08:	480d      	ldr	r0, [pc, #52]	; (8007f40 <MX_ADC1_Init+0x9c>)
 8007f0a:	f001 f83f 	bl	8008f8c <HAL_ADC_Init>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d001      	beq.n	8007f18 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8007f14:	f000 fcd8 	bl	80088c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8007f18:	2304      	movs	r3, #4
 8007f1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8007f20:	2307      	movs	r3, #7
 8007f22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007f24:	463b      	mov	r3, r7
 8007f26:	4619      	mov	r1, r3
 8007f28:	4805      	ldr	r0, [pc, #20]	; (8007f40 <MX_ADC1_Init+0x9c>)
 8007f2a:	f001 f9a1 	bl	8009270 <HAL_ADC_ConfigChannel>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8007f34:	f000 fcc8 	bl	80088c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007f38:	bf00      	nop
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	200003f8 	.word	0x200003f8
 8007f44:	40012000 	.word	0x40012000

08007f48 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b084      	sub	sp, #16
 8007f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007f4e:	463b      	mov	r3, r7
 8007f50:	2200      	movs	r2, #0
 8007f52:	601a      	str	r2, [r3, #0]
 8007f54:	605a      	str	r2, [r3, #4]
 8007f56:	609a      	str	r2, [r3, #8]
 8007f58:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8007f5a:	4b22      	ldr	r3, [pc, #136]	; (8007fe4 <MX_ADC2_Init+0x9c>)
 8007f5c:	4a22      	ldr	r2, [pc, #136]	; (8007fe8 <MX_ADC2_Init+0xa0>)
 8007f5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8007f60:	4b20      	ldr	r3, [pc, #128]	; (8007fe4 <MX_ADC2_Init+0x9c>)
 8007f62:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8007f66:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8007f68:	4b1e      	ldr	r3, [pc, #120]	; (8007fe4 <MX_ADC2_Init+0x9c>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8007f6e:	4b1d      	ldr	r3, [pc, #116]	; (8007fe4 <MX_ADC2_Init+0x9c>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8007f74:	4b1b      	ldr	r3, [pc, #108]	; (8007fe4 <MX_ADC2_Init+0x9c>)
 8007f76:	2201      	movs	r2, #1
 8007f78:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8007f7a:	4b1a      	ldr	r3, [pc, #104]	; (8007fe4 <MX_ADC2_Init+0x9c>)
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8007f82:	4b18      	ldr	r3, [pc, #96]	; (8007fe4 <MX_ADC2_Init+0x9c>)
 8007f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8007f8a:	4b16      	ldr	r3, [pc, #88]	; (8007fe4 <MX_ADC2_Init+0x9c>)
 8007f8c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007f90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007f92:	4b14      	ldr	r3, [pc, #80]	; (8007fe4 <MX_ADC2_Init+0x9c>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8007f98:	4b12      	ldr	r3, [pc, #72]	; (8007fe4 <MX_ADC2_Init+0x9c>)
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8007f9e:	4b11      	ldr	r3, [pc, #68]	; (8007fe4 <MX_ADC2_Init+0x9c>)
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8007fa6:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <MX_ADC2_Init+0x9c>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8007fac:	480d      	ldr	r0, [pc, #52]	; (8007fe4 <MX_ADC2_Init+0x9c>)
 8007fae:	f000 ffed 	bl	8008f8c <HAL_ADC_Init>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8007fb8:	f000 fc86 	bl	80088c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8007fc4:	2307      	movs	r3, #7
 8007fc6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007fc8:	463b      	mov	r3, r7
 8007fca:	4619      	mov	r1, r3
 8007fcc:	4805      	ldr	r0, [pc, #20]	; (8007fe4 <MX_ADC2_Init+0x9c>)
 8007fce:	f001 f94f 	bl	8009270 <HAL_ADC_ConfigChannel>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8007fd8:	f000 fc76 	bl	80088c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8007fdc:	bf00      	nop
 8007fde:	3710      	adds	r7, #16
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	200001f0 	.word	0x200001f0
 8007fe8:	40012100 	.word	0x40012100

08007fec <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007ff2:	463b      	mov	r3, r7
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	605a      	str	r2, [r3, #4]
 8007ffa:	609a      	str	r2, [r3, #8]
 8007ffc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8007ffe:	4b22      	ldr	r3, [pc, #136]	; (8008088 <MX_ADC3_Init+0x9c>)
 8008000:	4a22      	ldr	r2, [pc, #136]	; (800808c <MX_ADC3_Init+0xa0>)
 8008002:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8008004:	4b20      	ldr	r3, [pc, #128]	; (8008088 <MX_ADC3_Init+0x9c>)
 8008006:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800800a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800800c:	4b1e      	ldr	r3, [pc, #120]	; (8008088 <MX_ADC3_Init+0x9c>)
 800800e:	2200      	movs	r2, #0
 8008010:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8008012:	4b1d      	ldr	r3, [pc, #116]	; (8008088 <MX_ADC3_Init+0x9c>)
 8008014:	2200      	movs	r2, #0
 8008016:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8008018:	4b1b      	ldr	r3, [pc, #108]	; (8008088 <MX_ADC3_Init+0x9c>)
 800801a:	2201      	movs	r2, #1
 800801c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800801e:	4b1a      	ldr	r3, [pc, #104]	; (8008088 <MX_ADC3_Init+0x9c>)
 8008020:	2200      	movs	r2, #0
 8008022:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8008026:	4b18      	ldr	r3, [pc, #96]	; (8008088 <MX_ADC3_Init+0x9c>)
 8008028:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800802c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 800802e:	4b16      	ldr	r3, [pc, #88]	; (8008088 <MX_ADC3_Init+0x9c>)
 8008030:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008034:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008036:	4b14      	ldr	r3, [pc, #80]	; (8008088 <MX_ADC3_Init+0x9c>)
 8008038:	2200      	movs	r2, #0
 800803a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800803c:	4b12      	ldr	r3, [pc, #72]	; (8008088 <MX_ADC3_Init+0x9c>)
 800803e:	2201      	movs	r2, #1
 8008040:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8008042:	4b11      	ldr	r3, [pc, #68]	; (8008088 <MX_ADC3_Init+0x9c>)
 8008044:	2201      	movs	r2, #1
 8008046:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800804a:	4b0f      	ldr	r3, [pc, #60]	; (8008088 <MX_ADC3_Init+0x9c>)
 800804c:	2200      	movs	r2, #0
 800804e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8008050:	480d      	ldr	r0, [pc, #52]	; (8008088 <MX_ADC3_Init+0x9c>)
 8008052:	f000 ff9b 	bl	8008f8c <HAL_ADC_Init>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	d001      	beq.n	8008060 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 800805c:	f000 fc34 	bl	80088c8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8008060:	2300      	movs	r3, #0
 8008062:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008064:	2301      	movs	r3, #1
 8008066:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008068:	2307      	movs	r3, #7
 800806a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800806c:	463b      	mov	r3, r7
 800806e:	4619      	mov	r1, r3
 8008070:	4805      	ldr	r0, [pc, #20]	; (8008088 <MX_ADC3_Init+0x9c>)
 8008072:	f001 f8fd 	bl	8009270 <HAL_ADC_ConfigChannel>
 8008076:	4603      	mov	r3, r0
 8008078:	2b00      	cmp	r3, #0
 800807a:	d001      	beq.n	8008080 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800807c:	f000 fc24 	bl	80088c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8008080:	bf00      	nop
 8008082:	3710      	adds	r7, #16
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	20000444 	.word	0x20000444
 800808c:	40012200 	.word	0x40012200

08008090 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b08e      	sub	sp, #56	; 0x38
 8008094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800809a:	2200      	movs	r2, #0
 800809c:	601a      	str	r2, [r3, #0]
 800809e:	605a      	str	r2, [r3, #4]
 80080a0:	609a      	str	r2, [r3, #8]
 80080a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80080a4:	f107 0320 	add.w	r3, r7, #32
 80080a8:	2200      	movs	r2, #0
 80080aa:	601a      	str	r2, [r3, #0]
 80080ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80080ae:	1d3b      	adds	r3, r7, #4
 80080b0:	2200      	movs	r2, #0
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	605a      	str	r2, [r3, #4]
 80080b6:	609a      	str	r2, [r3, #8]
 80080b8:	60da      	str	r2, [r3, #12]
 80080ba:	611a      	str	r2, [r3, #16]
 80080bc:	615a      	str	r2, [r3, #20]
 80080be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80080c0:	4b2d      	ldr	r3, [pc, #180]	; (8008178 <MX_TIM3_Init+0xe8>)
 80080c2:	4a2e      	ldr	r2, [pc, #184]	; (800817c <MX_TIM3_Init+0xec>)
 80080c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5-1;
 80080c6:	4b2c      	ldr	r3, [pc, #176]	; (8008178 <MX_TIM3_Init+0xe8>)
 80080c8:	2204      	movs	r2, #4
 80080ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080cc:	4b2a      	ldr	r3, [pc, #168]	; (8008178 <MX_TIM3_Init+0xe8>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 840-1;
 80080d2:	4b29      	ldr	r3, [pc, #164]	; (8008178 <MX_TIM3_Init+0xe8>)
 80080d4:	f240 3247 	movw	r2, #839	; 0x347
 80080d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080da:	4b27      	ldr	r3, [pc, #156]	; (8008178 <MX_TIM3_Init+0xe8>)
 80080dc:	2200      	movs	r2, #0
 80080de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080e0:	4b25      	ldr	r3, [pc, #148]	; (8008178 <MX_TIM3_Init+0xe8>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80080e6:	4824      	ldr	r0, [pc, #144]	; (8008178 <MX_TIM3_Init+0xe8>)
 80080e8:	f002 fe45 	bl	800ad76 <HAL_TIM_Base_Init>
 80080ec:	4603      	mov	r3, r0
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d001      	beq.n	80080f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80080f2:	f000 fbe9 	bl	80088c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80080fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008100:	4619      	mov	r1, r3
 8008102:	481d      	ldr	r0, [pc, #116]	; (8008178 <MX_TIM3_Init+0xe8>)
 8008104:	f003 f86a 	bl	800b1dc <HAL_TIM_ConfigClockSource>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800810e:	f000 fbdb 	bl	80088c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8008112:	4819      	ldr	r0, [pc, #100]	; (8008178 <MX_TIM3_Init+0xe8>)
 8008114:	f002 fe7e 	bl	800ae14 <HAL_TIM_PWM_Init>
 8008118:	4603      	mov	r3, r0
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800811e:	f000 fbd3 	bl	80088c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008122:	2320      	movs	r3, #32
 8008124:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008126:	2300      	movs	r3, #0
 8008128:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800812a:	f107 0320 	add.w	r3, r7, #32
 800812e:	4619      	mov	r1, r3
 8008130:	4811      	ldr	r0, [pc, #68]	; (8008178 <MX_TIM3_Init+0xe8>)
 8008132:	f003 fc2b 	bl	800b98c <HAL_TIMEx_MasterConfigSynchronization>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d001      	beq.n	8008140 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800813c:	f000 fbc4 	bl	80088c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008140:	2360      	movs	r3, #96	; 0x60
 8008142:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 420;
 8008144:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8008148:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800814a:	2300      	movs	r3, #0
 800814c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800814e:	2304      	movs	r3, #4
 8008150:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008152:	1d3b      	adds	r3, r7, #4
 8008154:	2200      	movs	r2, #0
 8008156:	4619      	mov	r1, r3
 8008158:	4807      	ldr	r0, [pc, #28]	; (8008178 <MX_TIM3_Init+0xe8>)
 800815a:	f002 ff7d 	bl	800b058 <HAL_TIM_PWM_ConfigChannel>
 800815e:	4603      	mov	r3, r0
 8008160:	2b00      	cmp	r3, #0
 8008162:	d001      	beq.n	8008168 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8008164:	f000 fbb0 	bl	80088c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8008168:	4803      	ldr	r0, [pc, #12]	; (8008178 <MX_TIM3_Init+0xe8>)
 800816a:	f000 fd3f 	bl	8008bec <HAL_TIM_MspPostInit>

}
 800816e:	bf00      	nop
 8008170:	3738      	adds	r7, #56	; 0x38
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	bf00      	nop
 8008178:	200002e8 	.word	0x200002e8
 800817c:	40000400 	.word	0x40000400

08008180 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008186:	2300      	movs	r3, #0
 8008188:	607b      	str	r3, [r7, #4]
 800818a:	4b14      	ldr	r3, [pc, #80]	; (80081dc <MX_DMA_Init+0x5c>)
 800818c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818e:	4a13      	ldr	r2, [pc, #76]	; (80081dc <MX_DMA_Init+0x5c>)
 8008190:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008194:	6313      	str	r3, [r2, #48]	; 0x30
 8008196:	4b11      	ldr	r3, [pc, #68]	; (80081dc <MX_DMA_Init+0x5c>)
 8008198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800819a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800819e:	607b      	str	r3, [r7, #4]
 80081a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80081a2:	2200      	movs	r2, #0
 80081a4:	2100      	movs	r1, #0
 80081a6:	2038      	movs	r0, #56	; 0x38
 80081a8:	f001 fbdd 	bl	8009966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80081ac:	2038      	movs	r0, #56	; 0x38
 80081ae:	f001 fbf6 	bl	800999e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80081b2:	2200      	movs	r2, #0
 80081b4:	2100      	movs	r1, #0
 80081b6:	2039      	movs	r0, #57	; 0x39
 80081b8:	f001 fbd5 	bl	8009966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80081bc:	2039      	movs	r0, #57	; 0x39
 80081be:	f001 fbee 	bl	800999e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80081c2:	2200      	movs	r2, #0
 80081c4:	2100      	movs	r1, #0
 80081c6:	203a      	movs	r0, #58	; 0x3a
 80081c8:	f001 fbcd 	bl	8009966 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80081cc:	203a      	movs	r0, #58	; 0x3a
 80081ce:	f001 fbe6 	bl	800999e <HAL_NVIC_EnableIRQ>

}
 80081d2:	bf00      	nop
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	40023800 	.word	0x40023800

080081e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b08e      	sub	sp, #56	; 0x38
 80081e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]
 80081ee:	605a      	str	r2, [r3, #4]
 80081f0:	609a      	str	r2, [r3, #8]
 80081f2:	60da      	str	r2, [r3, #12]
 80081f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80081f6:	2300      	movs	r3, #0
 80081f8:	623b      	str	r3, [r7, #32]
 80081fa:	4b73      	ldr	r3, [pc, #460]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 80081fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fe:	4a72      	ldr	r2, [pc, #456]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 8008200:	f043 0310 	orr.w	r3, r3, #16
 8008204:	6313      	str	r3, [r2, #48]	; 0x30
 8008206:	4b70      	ldr	r3, [pc, #448]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 8008208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800820a:	f003 0310 	and.w	r3, r3, #16
 800820e:	623b      	str	r3, [r7, #32]
 8008210:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008212:	2300      	movs	r3, #0
 8008214:	61fb      	str	r3, [r7, #28]
 8008216:	4b6c      	ldr	r3, [pc, #432]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 8008218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800821a:	4a6b      	ldr	r2, [pc, #428]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 800821c:	f043 0304 	orr.w	r3, r3, #4
 8008220:	6313      	str	r3, [r2, #48]	; 0x30
 8008222:	4b69      	ldr	r3, [pc, #420]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 8008224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008226:	f003 0304 	and.w	r3, r3, #4
 800822a:	61fb      	str	r3, [r7, #28]
 800822c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800822e:	2300      	movs	r3, #0
 8008230:	61bb      	str	r3, [r7, #24]
 8008232:	4b65      	ldr	r3, [pc, #404]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 8008234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008236:	4a64      	ldr	r2, [pc, #400]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 8008238:	f043 0320 	orr.w	r3, r3, #32
 800823c:	6313      	str	r3, [r2, #48]	; 0x30
 800823e:	4b62      	ldr	r3, [pc, #392]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 8008240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008242:	f003 0320 	and.w	r3, r3, #32
 8008246:	61bb      	str	r3, [r7, #24]
 8008248:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800824a:	2300      	movs	r3, #0
 800824c:	617b      	str	r3, [r7, #20]
 800824e:	4b5e      	ldr	r3, [pc, #376]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 8008250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008252:	4a5d      	ldr	r2, [pc, #372]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 8008254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008258:	6313      	str	r3, [r2, #48]	; 0x30
 800825a:	4b5b      	ldr	r3, [pc, #364]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 800825c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800825e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008266:	2300      	movs	r3, #0
 8008268:	613b      	str	r3, [r7, #16]
 800826a:	4b57      	ldr	r3, [pc, #348]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 800826c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800826e:	4a56      	ldr	r2, [pc, #344]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 8008270:	f043 0301 	orr.w	r3, r3, #1
 8008274:	6313      	str	r3, [r2, #48]	; 0x30
 8008276:	4b54      	ldr	r3, [pc, #336]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 8008278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827a:	f003 0301 	and.w	r3, r3, #1
 800827e:	613b      	str	r3, [r7, #16]
 8008280:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008282:	2300      	movs	r3, #0
 8008284:	60fb      	str	r3, [r7, #12]
 8008286:	4b50      	ldr	r3, [pc, #320]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 8008288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800828a:	4a4f      	ldr	r2, [pc, #316]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 800828c:	f043 0302 	orr.w	r3, r3, #2
 8008290:	6313      	str	r3, [r2, #48]	; 0x30
 8008292:	4b4d      	ldr	r3, [pc, #308]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 8008294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800829e:	2300      	movs	r3, #0
 80082a0:	60bb      	str	r3, [r7, #8]
 80082a2:	4b49      	ldr	r3, [pc, #292]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 80082a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a6:	4a48      	ldr	r2, [pc, #288]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 80082a8:	f043 0308 	orr.w	r3, r3, #8
 80082ac:	6313      	str	r3, [r2, #48]	; 0x30
 80082ae:	4b46      	ldr	r3, [pc, #280]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 80082b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b2:	f003 0308 	and.w	r3, r3, #8
 80082b6:	60bb      	str	r3, [r7, #8]
 80082b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80082ba:	2300      	movs	r3, #0
 80082bc:	607b      	str	r3, [r7, #4]
 80082be:	4b42      	ldr	r3, [pc, #264]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 80082c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082c2:	4a41      	ldr	r2, [pc, #260]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 80082c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082c8:	6313      	str	r3, [r2, #48]	; 0x30
 80082ca:	4b3f      	ldr	r3, [pc, #252]	; (80083c8 <MX_GPIO_Init+0x1e8>)
 80082cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082d2:	607b      	str	r3, [r7, #4]
 80082d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TCS_GPIO_Port, TCS_Pin, GPIO_PIN_RESET);
 80082d6:	2200      	movs	r2, #0
 80082d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80082dc:	483b      	ldr	r0, [pc, #236]	; (80083cc <MX_GPIO_Init+0x1ec>)
 80082de:	f002 f885 	bl	800a3ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin|LED2_Pin|TDIN_Pin, GPIO_PIN_RESET);
 80082e2:	2200      	movs	r2, #0
 80082e4:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80082e8:	4839      	ldr	r0, [pc, #228]	; (80083d0 <MX_GPIO_Init+0x1f0>)
 80082ea:	f002 f87f 	bl	800a3ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TCLK_Pin|LCD_BL_Pin|IIC_SCL_Pin|IIC_SDA_Pin, GPIO_PIN_RESET);
 80082ee:	2200      	movs	r2, #0
 80082f0:	f248 3101 	movw	r1, #33537	; 0x8301
 80082f4:	4837      	ldr	r0, [pc, #220]	; (80083d4 <MX_GPIO_Init+0x1f4>)
 80082f6:	f002 f879 	bl	800a3ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY0_Pin KEY1_Pin KEY2_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin|KEY2_Pin;
 80082fa:	231c      	movs	r3, #28
 80082fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80082fe:	2300      	movs	r3, #0
 8008300:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008302:	2301      	movs	r3, #1
 8008304:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800830a:	4619      	mov	r1, r3
 800830c:	4832      	ldr	r0, [pc, #200]	; (80083d8 <MX_GPIO_Init+0x1f8>)
 800830e:	f001 fed1 	bl	800a0b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TCS_Pin */
  GPIO_InitStruct.Pin = TCS_Pin;
 8008312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008318:	2301      	movs	r3, #1
 800831a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800831c:	2300      	movs	r3, #0
 800831e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008320:	2300      	movs	r3, #0
 8008322:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TCS_GPIO_Port, &GPIO_InitStruct);
 8008324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008328:	4619      	mov	r1, r3
 800832a:	4828      	ldr	r0, [pc, #160]	; (80083cc <MX_GPIO_Init+0x1ec>)
 800832c:	f001 fec2 	bl	800a0b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 8008330:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8008334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008336:	2301      	movs	r3, #1
 8008338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800833a:	2301      	movs	r3, #1
 800833c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800833e:	2303      	movs	r3, #3
 8008340:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008346:	4619      	mov	r1, r3
 8008348:	4821      	ldr	r0, [pc, #132]	; (80083d0 <MX_GPIO_Init+0x1f0>)
 800834a:	f001 feb3 	bl	800a0b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TCLK_Pin IIC_SCL_Pin IIC_SDA_Pin */
  GPIO_InitStruct.Pin = TCLK_Pin|IIC_SCL_Pin|IIC_SDA_Pin;
 800834e:	f240 3301 	movw	r3, #769	; 0x301
 8008352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008354:	2301      	movs	r3, #1
 8008356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008358:	2301      	movs	r3, #1
 800835a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800835c:	2303      	movs	r3, #3
 800835e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008364:	4619      	mov	r1, r3
 8008366:	481b      	ldr	r0, [pc, #108]	; (80083d4 <MX_GPIO_Init+0x1f4>)
 8008368:	f001 fea4 	bl	800a0b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEN_Pin DOUT_Pin */
  GPIO_InitStruct.Pin = PEN_Pin|DOUT_Pin;
 800836c:	2306      	movs	r3, #6
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008370:	2300      	movs	r3, #0
 8008372:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008374:	2301      	movs	r3, #1
 8008376:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008378:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800837c:	4619      	mov	r1, r3
 800837e:	4815      	ldr	r0, [pc, #84]	; (80083d4 <MX_GPIO_Init+0x1f4>)
 8008380:	f001 fe98 	bl	800a0b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TDIN_Pin */
  GPIO_InitStruct.Pin = TDIN_Pin;
 8008384:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800838a:	2301      	movs	r3, #1
 800838c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800838e:	2300      	movs	r3, #0
 8008390:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008392:	2303      	movs	r3, #3
 8008394:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TDIN_GPIO_Port, &GPIO_InitStruct);
 8008396:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800839a:	4619      	mov	r1, r3
 800839c:	480c      	ldr	r0, [pc, #48]	; (80083d0 <MX_GPIO_Init+0x1f0>)
 800839e:	f001 fe89 	bl	800a0b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80083a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80083a8:	2301      	movs	r3, #1
 80083aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80083ac:	2301      	movs	r3, #1
 80083ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80083b0:	2301      	movs	r3, #1
 80083b2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80083b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083b8:	4619      	mov	r1, r3
 80083ba:	4806      	ldr	r0, [pc, #24]	; (80083d4 <MX_GPIO_Init+0x1f4>)
 80083bc:	f001 fe7a 	bl	800a0b4 <HAL_GPIO_Init>

}
 80083c0:	bf00      	nop
 80083c2:	3738      	adds	r7, #56	; 0x38
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	40023800 	.word	0x40023800
 80083cc:	40020800 	.word	0x40020800
 80083d0:	40021400 	.word	0x40021400
 80083d4:	40020400 	.word	0x40020400
 80083d8:	40021000 	.word	0x40021000

080083dc <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b08e      	sub	sp, #56	; 0x38
 80083e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80083e2:	f107 031c 	add.w	r3, r7, #28
 80083e6:	2200      	movs	r2, #0
 80083e8:	601a      	str	r2, [r3, #0]
 80083ea:	605a      	str	r2, [r3, #4]
 80083ec:	609a      	str	r2, [r3, #8]
 80083ee:	60da      	str	r2, [r3, #12]
 80083f0:	611a      	str	r2, [r3, #16]
 80083f2:	615a      	str	r2, [r3, #20]
 80083f4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80083f6:	463b      	mov	r3, r7
 80083f8:	2200      	movs	r2, #0
 80083fa:	601a      	str	r2, [r3, #0]
 80083fc:	605a      	str	r2, [r3, #4]
 80083fe:	609a      	str	r2, [r3, #8]
 8008400:	60da      	str	r2, [r3, #12]
 8008402:	611a      	str	r2, [r3, #16]
 8008404:	615a      	str	r2, [r3, #20]
 8008406:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8008408:	4b2f      	ldr	r3, [pc, #188]	; (80084c8 <MX_FSMC_Init+0xec>)
 800840a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800840e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8008410:	4b2d      	ldr	r3, [pc, #180]	; (80084c8 <MX_FSMC_Init+0xec>)
 8008412:	4a2e      	ldr	r2, [pc, #184]	; (80084cc <MX_FSMC_Init+0xf0>)
 8008414:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 8008416:	4b2c      	ldr	r3, [pc, #176]	; (80084c8 <MX_FSMC_Init+0xec>)
 8008418:	2206      	movs	r2, #6
 800841a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800841c:	4b2a      	ldr	r3, [pc, #168]	; (80084c8 <MX_FSMC_Init+0xec>)
 800841e:	2200      	movs	r2, #0
 8008420:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8008422:	4b29      	ldr	r3, [pc, #164]	; (80084c8 <MX_FSMC_Init+0xec>)
 8008424:	2200      	movs	r2, #0
 8008426:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8008428:	4b27      	ldr	r3, [pc, #156]	; (80084c8 <MX_FSMC_Init+0xec>)
 800842a:	2210      	movs	r2, #16
 800842c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800842e:	4b26      	ldr	r3, [pc, #152]	; (80084c8 <MX_FSMC_Init+0xec>)
 8008430:	2200      	movs	r2, #0
 8008432:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8008434:	4b24      	ldr	r3, [pc, #144]	; (80084c8 <MX_FSMC_Init+0xec>)
 8008436:	2200      	movs	r2, #0
 8008438:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800843a:	4b23      	ldr	r3, [pc, #140]	; (80084c8 <MX_FSMC_Init+0xec>)
 800843c:	2200      	movs	r2, #0
 800843e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8008440:	4b21      	ldr	r3, [pc, #132]	; (80084c8 <MX_FSMC_Init+0xec>)
 8008442:	2200      	movs	r2, #0
 8008444:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8008446:	4b20      	ldr	r3, [pc, #128]	; (80084c8 <MX_FSMC_Init+0xec>)
 8008448:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800844c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800844e:	4b1e      	ldr	r3, [pc, #120]	; (80084c8 <MX_FSMC_Init+0xec>)
 8008450:	2200      	movs	r2, #0
 8008452:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8008454:	4b1c      	ldr	r3, [pc, #112]	; (80084c8 <MX_FSMC_Init+0xec>)
 8008456:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800845a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800845c:	4b1a      	ldr	r3, [pc, #104]	; (80084c8 <MX_FSMC_Init+0xec>)
 800845e:	2200      	movs	r2, #0
 8008460:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8008462:	4b19      	ldr	r3, [pc, #100]	; (80084c8 <MX_FSMC_Init+0xec>)
 8008464:	2200      	movs	r2, #0
 8008466:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8008468:	4b17      	ldr	r3, [pc, #92]	; (80084c8 <MX_FSMC_Init+0xec>)
 800846a:	2200      	movs	r2, #0
 800846c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800846e:	230f      	movs	r3, #15
 8008470:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8008472:	230f      	movs	r3, #15
 8008474:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8008476:	233c      	movs	r3, #60	; 0x3c
 8008478:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800847e:	2310      	movs	r3, #16
 8008480:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8008482:	2311      	movs	r3, #17
 8008484:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8008486:	2300      	movs	r3, #0
 8008488:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 800848a:	2309      	movs	r3, #9
 800848c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800848e:	230f      	movs	r3, #15
 8008490:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 8;
 8008492:	2308      	movs	r3, #8
 8008494:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8008496:	2300      	movs	r3, #0
 8008498:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800849a:	2310      	movs	r3, #16
 800849c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800849e:	2311      	movs	r3, #17
 80084a0:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80084a2:	2300      	movs	r3, #0
 80084a4:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80084a6:	463a      	mov	r2, r7
 80084a8:	f107 031c 	add.w	r3, r7, #28
 80084ac:	4619      	mov	r1, r3
 80084ae:	4806      	ldr	r0, [pc, #24]	; (80084c8 <MX_FSMC_Init+0xec>)
 80084b0:	f002 fc1d 	bl	800acee <HAL_SRAM_Init>
 80084b4:	4603      	mov	r3, r0
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d001      	beq.n	80084be <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80084ba:	f000 fa05 	bl	80088c8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80084be:	bf00      	nop
 80084c0:	3738      	adds	r7, #56	; 0x38
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}
 80084c6:	bf00      	nop
 80084c8:	20000298 	.word	0x20000298
 80084cc:	a0000104 	.word	0xa0000104

080084d0 <MainDisplay>:

/* USER CODE BEGIN 4 */
void MainDisplay(uint8_t i,uint16_t c)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b084      	sub	sp, #16
 80084d4:	af02      	add	r7, sp, #8
 80084d6:	4603      	mov	r3, r0
 80084d8:	460a      	mov	r2, r1
 80084da:	71fb      	strb	r3, [r7, #7]
 80084dc:	4613      	mov	r3, r2
 80084de:	80bb      	strh	r3, [r7, #4]
	if(i==1)
 80084e0:	79fb      	ldrb	r3, [r7, #7]
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d108      	bne.n	80084f8 <MainDisplay+0x28>
	{
	LCD_Fill(15,15,75,75,c);
 80084e6:	88bb      	ldrh	r3, [r7, #4]
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	234b      	movs	r3, #75	; 0x4b
 80084ec:	224b      	movs	r2, #75	; 0x4b
 80084ee:	210f      	movs	r1, #15
 80084f0:	200f      	movs	r0, #15
 80084f2:	f7fe f991 	bl	8006818 <LCD_Fill>
 80084f6:	e032      	b.n	800855e <MainDisplay+0x8e>
	}
	else if(i==2)
 80084f8:	79fb      	ldrb	r3, [r7, #7]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d108      	bne.n	8008510 <MainDisplay+0x40>
	{
	LCD_Fill(90,15,150,75,c);
 80084fe:	88bb      	ldrh	r3, [r7, #4]
 8008500:	9300      	str	r3, [sp, #0]
 8008502:	234b      	movs	r3, #75	; 0x4b
 8008504:	2296      	movs	r2, #150	; 0x96
 8008506:	210f      	movs	r1, #15
 8008508:	205a      	movs	r0, #90	; 0x5a
 800850a:	f7fe f985 	bl	8006818 <LCD_Fill>
 800850e:	e026      	b.n	800855e <MainDisplay+0x8e>
	}
	else if(i==3)
 8008510:	79fb      	ldrb	r3, [r7, #7]
 8008512:	2b03      	cmp	r3, #3
 8008514:	d108      	bne.n	8008528 <MainDisplay+0x58>
	{
	LCD_Fill(165,15,225,75,c);
 8008516:	88bb      	ldrh	r3, [r7, #4]
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	234b      	movs	r3, #75	; 0x4b
 800851c:	22e1      	movs	r2, #225	; 0xe1
 800851e:	210f      	movs	r1, #15
 8008520:	20a5      	movs	r0, #165	; 0xa5
 8008522:	f7fe f979 	bl	8006818 <LCD_Fill>
 8008526:	e01a      	b.n	800855e <MainDisplay+0x8e>
	}
	else
	{
	LCD_Fill(15,15,75,75,GRAY);
 8008528:	f248 4330 	movw	r3, #33840	; 0x8430
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	234b      	movs	r3, #75	; 0x4b
 8008530:	224b      	movs	r2, #75	; 0x4b
 8008532:	210f      	movs	r1, #15
 8008534:	200f      	movs	r0, #15
 8008536:	f7fe f96f 	bl	8006818 <LCD_Fill>
	LCD_Fill(90,15,150,75,GRAY);
 800853a:	f248 4330 	movw	r3, #33840	; 0x8430
 800853e:	9300      	str	r3, [sp, #0]
 8008540:	234b      	movs	r3, #75	; 0x4b
 8008542:	2296      	movs	r2, #150	; 0x96
 8008544:	210f      	movs	r1, #15
 8008546:	205a      	movs	r0, #90	; 0x5a
 8008548:	f7fe f966 	bl	8006818 <LCD_Fill>
	LCD_Fill(165,15,225,75,GRAY);
 800854c:	f248 4330 	movw	r3, #33840	; 0x8430
 8008550:	9300      	str	r3, [sp, #0]
 8008552:	234b      	movs	r3, #75	; 0x4b
 8008554:	22e1      	movs	r2, #225	; 0xe1
 8008556:	210f      	movs	r1, #15
 8008558:	20a5      	movs	r0, #165	; 0xa5
 800855a:	f7fe f95d 	bl	8006818 <LCD_Fill>
	}
	  LCD_ShowString(15,15,48,12,12,(uint8_t*)"MANUAL");
 800855e:	4b1b      	ldr	r3, [pc, #108]	; (80085cc <MainDisplay+0xfc>)
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	230c      	movs	r3, #12
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	230c      	movs	r3, #12
 8008568:	2230      	movs	r2, #48	; 0x30
 800856a:	210f      	movs	r1, #15
 800856c:	200f      	movs	r0, #15
 800856e:	f7fe fc63 	bl	8006e38 <LCD_ShowString>
	  LCD_ShowString(90,15,48,12,12,(uint8_t*)"AUTO");
 8008572:	4b17      	ldr	r3, [pc, #92]	; (80085d0 <MainDisplay+0x100>)
 8008574:	9301      	str	r3, [sp, #4]
 8008576:	230c      	movs	r3, #12
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	230c      	movs	r3, #12
 800857c:	2230      	movs	r2, #48	; 0x30
 800857e:	210f      	movs	r1, #15
 8008580:	205a      	movs	r0, #90	; 0x5a
 8008582:	f7fe fc59 	bl	8006e38 <LCD_ShowString>
	  LCD_ShowString(90,27,48,12,12,(uint8_t*)"CHARGE");
 8008586:	4b13      	ldr	r3, [pc, #76]	; (80085d4 <MainDisplay+0x104>)
 8008588:	9301      	str	r3, [sp, #4]
 800858a:	230c      	movs	r3, #12
 800858c:	9300      	str	r3, [sp, #0]
 800858e:	230c      	movs	r3, #12
 8008590:	2230      	movs	r2, #48	; 0x30
 8008592:	211b      	movs	r1, #27
 8008594:	205a      	movs	r0, #90	; 0x5a
 8008596:	f7fe fc4f 	bl	8006e38 <LCD_ShowString>
	  LCD_ShowString(165,15,48,12,12,(uint8_t*)"AUTO");
 800859a:	4b0d      	ldr	r3, [pc, #52]	; (80085d0 <MainDisplay+0x100>)
 800859c:	9301      	str	r3, [sp, #4]
 800859e:	230c      	movs	r3, #12
 80085a0:	9300      	str	r3, [sp, #0]
 80085a2:	230c      	movs	r3, #12
 80085a4:	2230      	movs	r2, #48	; 0x30
 80085a6:	210f      	movs	r1, #15
 80085a8:	20a5      	movs	r0, #165	; 0xa5
 80085aa:	f7fe fc45 	bl	8006e38 <LCD_ShowString>
	  LCD_ShowString(165,27,48,12,12,(uint8_t*)"DISCHARGE");
 80085ae:	4b0a      	ldr	r3, [pc, #40]	; (80085d8 <MainDisplay+0x108>)
 80085b0:	9301      	str	r3, [sp, #4]
 80085b2:	230c      	movs	r3, #12
 80085b4:	9300      	str	r3, [sp, #0]
 80085b6:	230c      	movs	r3, #12
 80085b8:	2230      	movs	r2, #48	; 0x30
 80085ba:	211b      	movs	r1, #27
 80085bc:	20a5      	movs	r0, #165	; 0xa5
 80085be:	f7fe fc3b 	bl	8006e38 <LCD_ShowString>
}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	0800bf7c 	.word	0x0800bf7c
 80085d0:	0800bf84 	.word	0x0800bf84
 80085d4:	0800bf8c 	.word	0x0800bf8c
 80085d8:	0800bf94 	.word	0x0800bf94

080085dc <SubDisplay>:

void SubDisplay(uint8_t i,uint16_t c)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af02      	add	r7, sp, #8
 80085e2:	4603      	mov	r3, r0
 80085e4:	460a      	mov	r2, r1
 80085e6:	71fb      	strb	r3, [r7, #7]
 80085e8:	4613      	mov	r3, r2
 80085ea:	80bb      	strh	r3, [r7, #4]
	if(i==1)
 80085ec:	79fb      	ldrb	r3, [r7, #7]
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d108      	bne.n	8008604 <SubDisplay+0x28>
	{
	LCD_Fill(90,90,150,150,c);
 80085f2:	88bb      	ldrh	r3, [r7, #4]
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	2396      	movs	r3, #150	; 0x96
 80085f8:	2296      	movs	r2, #150	; 0x96
 80085fa:	215a      	movs	r1, #90	; 0x5a
 80085fc:	205a      	movs	r0, #90	; 0x5a
 80085fe:	f7fe f90b 	bl	8006818 <LCD_Fill>
 8008602:	e01d      	b.n	8008640 <SubDisplay+0x64>
	}
	else if(i==2)
 8008604:	79fb      	ldrb	r3, [r7, #7]
 8008606:	2b02      	cmp	r3, #2
 8008608:	d108      	bne.n	800861c <SubDisplay+0x40>
	{
	LCD_Fill(165,90,225,150,c);
 800860a:	88bb      	ldrh	r3, [r7, #4]
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	2396      	movs	r3, #150	; 0x96
 8008610:	22e1      	movs	r2, #225	; 0xe1
 8008612:	215a      	movs	r1, #90	; 0x5a
 8008614:	20a5      	movs	r0, #165	; 0xa5
 8008616:	f7fe f8ff 	bl	8006818 <LCD_Fill>
 800861a:	e011      	b.n	8008640 <SubDisplay+0x64>
	}
	else
	{
	LCD_Fill(90,90,150,150,GRAY);
 800861c:	f248 4330 	movw	r3, #33840	; 0x8430
 8008620:	9300      	str	r3, [sp, #0]
 8008622:	2396      	movs	r3, #150	; 0x96
 8008624:	2296      	movs	r2, #150	; 0x96
 8008626:	215a      	movs	r1, #90	; 0x5a
 8008628:	205a      	movs	r0, #90	; 0x5a
 800862a:	f7fe f8f5 	bl	8006818 <LCD_Fill>
	LCD_Fill(165,90,225,150,GRAY);
 800862e:	f248 4330 	movw	r3, #33840	; 0x8430
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	2396      	movs	r3, #150	; 0x96
 8008636:	22e1      	movs	r2, #225	; 0xe1
 8008638:	215a      	movs	r1, #90	; 0x5a
 800863a:	20a5      	movs	r0, #165	; 0xa5
 800863c:	f7fe f8ec 	bl	8006818 <LCD_Fill>
	}
	  LCD_ShowString(90,90,48,12,12,(uint8_t*)"VOLTAGE");
 8008640:	4b15      	ldr	r3, [pc, #84]	; (8008698 <SubDisplay+0xbc>)
 8008642:	9301      	str	r3, [sp, #4]
 8008644:	230c      	movs	r3, #12
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	230c      	movs	r3, #12
 800864a:	2230      	movs	r2, #48	; 0x30
 800864c:	215a      	movs	r1, #90	; 0x5a
 800864e:	205a      	movs	r0, #90	; 0x5a
 8008650:	f7fe fbf2 	bl	8006e38 <LCD_ShowString>
	  LCD_ShowString(90,102,48,12,12,(uint8_t*)"REGULATION");
 8008654:	4b11      	ldr	r3, [pc, #68]	; (800869c <SubDisplay+0xc0>)
 8008656:	9301      	str	r3, [sp, #4]
 8008658:	230c      	movs	r3, #12
 800865a:	9300      	str	r3, [sp, #0]
 800865c:	230c      	movs	r3, #12
 800865e:	2230      	movs	r2, #48	; 0x30
 8008660:	2166      	movs	r1, #102	; 0x66
 8008662:	205a      	movs	r0, #90	; 0x5a
 8008664:	f7fe fbe8 	bl	8006e38 <LCD_ShowString>
	  LCD_ShowString(165,90,48,12,12,(uint8_t*)"CURRENT");
 8008668:	4b0d      	ldr	r3, [pc, #52]	; (80086a0 <SubDisplay+0xc4>)
 800866a:	9301      	str	r3, [sp, #4]
 800866c:	230c      	movs	r3, #12
 800866e:	9300      	str	r3, [sp, #0]
 8008670:	230c      	movs	r3, #12
 8008672:	2230      	movs	r2, #48	; 0x30
 8008674:	215a      	movs	r1, #90	; 0x5a
 8008676:	20a5      	movs	r0, #165	; 0xa5
 8008678:	f7fe fbde 	bl	8006e38 <LCD_ShowString>
	  LCD_ShowString(165,102,48,12,12,(uint8_t*)"REGULATOR");
 800867c:	4b09      	ldr	r3, [pc, #36]	; (80086a4 <SubDisplay+0xc8>)
 800867e:	9301      	str	r3, [sp, #4]
 8008680:	230c      	movs	r3, #12
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	230c      	movs	r3, #12
 8008686:	2230      	movs	r2, #48	; 0x30
 8008688:	2166      	movs	r1, #102	; 0x66
 800868a:	20a5      	movs	r0, #165	; 0xa5
 800868c:	f7fe fbd4 	bl	8006e38 <LCD_ShowString>
}
 8008690:	bf00      	nop
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	0800bfa0 	.word	0x0800bfa0
 800869c:	0800bfa8 	.word	0x0800bfa8
 80086a0:	0800bfb4 	.word	0x0800bfb4
 80086a4:	0800bfbc 	.word	0x0800bfbc

080086a8 <PwmDisplay>:

void PwmDisplay(uint16_t dp_pwm,uint16_t c)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af02      	add	r7, sp, #8
 80086ae:	4603      	mov	r3, r0
 80086b0:	460a      	mov	r2, r1
 80086b2:	80fb      	strh	r3, [r7, #6]
 80086b4:	4613      	mov	r3, r2
 80086b6:	80bb      	strh	r3, [r7, #4]
	if(0<=(dp_pwm)&&(dp_pwm)<=840)
 80086b8:	88fb      	ldrh	r3, [r7, #6]
 80086ba:	f5b3 7f52 	cmp.w	r3, #840	; 0x348
 80086be:	d83f      	bhi.n	8008740 <PwmDisplay+0x98>
	{
		uint16_t pwm_op;
		pwm_op = 90.0+135.0*(dp_pwm/840.0);
 80086c0:	88fb      	ldrh	r3, [r7, #6]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7f7 fed2 	bl	800046c <__aeabi_i2d>
 80086c8:	f04f 0200 	mov.w	r2, #0
 80086cc:	4b20      	ldr	r3, [pc, #128]	; (8008750 <PwmDisplay+0xa8>)
 80086ce:	f7f8 f861 	bl	8000794 <__aeabi_ddiv>
 80086d2:	4602      	mov	r2, r0
 80086d4:	460b      	mov	r3, r1
 80086d6:	4610      	mov	r0, r2
 80086d8:	4619      	mov	r1, r3
 80086da:	a31b      	add	r3, pc, #108	; (adr r3, 8008748 <PwmDisplay+0xa0>)
 80086dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e0:	f7f7 ff2e 	bl	8000540 <__aeabi_dmul>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4610      	mov	r0, r2
 80086ea:	4619      	mov	r1, r3
 80086ec:	f04f 0200 	mov.w	r2, #0
 80086f0:	4b18      	ldr	r3, [pc, #96]	; (8008754 <PwmDisplay+0xac>)
 80086f2:	f7f7 fd6f 	bl	80001d4 <__adddf3>
 80086f6:	4602      	mov	r2, r0
 80086f8:	460b      	mov	r3, r1
 80086fa:	4610      	mov	r0, r2
 80086fc:	4619      	mov	r1, r3
 80086fe:	f7f8 f9cf 	bl	8000aa0 <__aeabi_d2uiz>
 8008702:	4603      	mov	r3, r0
 8008704:	81fb      	strh	r3, [r7, #14]
		LCD_Fill(90, 280,pwm_op, 300,c);
 8008706:	89fa      	ldrh	r2, [r7, #14]
 8008708:	88bb      	ldrh	r3, [r7, #4]
 800870a:	9300      	str	r3, [sp, #0]
 800870c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8008710:	f44f 718c 	mov.w	r1, #280	; 0x118
 8008714:	205a      	movs	r0, #90	; 0x5a
 8008716:	f7fe f87f 	bl	8006818 <LCD_Fill>
		LCD_Fill(pwm_op, 280,225, 300,WHITE);
 800871a:	89f8      	ldrh	r0, [r7, #14]
 800871c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008720:	9300      	str	r3, [sp, #0]
 8008722:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8008726:	22e1      	movs	r2, #225	; 0xe1
 8008728:	f44f 718c 	mov.w	r1, #280	; 0x118
 800872c:	f7fe f874 	bl	8006818 <LCD_Fill>
		LCD_DrawRectangle(90,280,225,300);
 8008730:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8008734:	22e1      	movs	r2, #225	; 0xe1
 8008736:	f44f 718c 	mov.w	r1, #280	; 0x118
 800873a:	205a      	movs	r0, #90	; 0x5a
 800873c:	f7fe f96a 	bl	8006a14 <LCD_DrawRectangle>

	}
}
 8008740:	bf00      	nop
 8008742:	3710      	adds	r7, #16
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	00000000 	.word	0x00000000
 800874c:	4060e000 	.word	0x4060e000
 8008750:	408a4000 	.word	0x408a4000
 8008754:	40568000 	.word	0x40568000

08008758 <PID_Init>:
		//LCD_Fill(90, 280,pwm_op, 300,c);
		//LCD_Fill(pwm_op, 280,225, 300,WHITE);
}

void PID_Init(int i)
{
 8008758:	b480      	push	{r7}
 800875a:	b083      	sub	sp, #12
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
	if(i==1)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2b01      	cmp	r3, #1
 8008764:	d109      	bne.n	800877a <PID_Init+0x22>
	{
	    pid.kp = 0.18;
 8008766:	4b16      	ldr	r3, [pc, #88]	; (80087c0 <PID_Init+0x68>)
 8008768:	4a16      	ldr	r2, [pc, #88]	; (80087c4 <PID_Init+0x6c>)
 800876a:	601a      	str	r2, [r3, #0]
	    pid.ki = 0.045;
 800876c:	4b14      	ldr	r3, [pc, #80]	; (80087c0 <PID_Init+0x68>)
 800876e:	4a16      	ldr	r2, [pc, #88]	; (80087c8 <PID_Init+0x70>)
 8008770:	605a      	str	r2, [r3, #4]
	    pid.kd = 0.0001;
 8008772:	4b13      	ldr	r3, [pc, #76]	; (80087c0 <PID_Init+0x68>)
 8008774:	4a15      	ldr	r2, [pc, #84]	; (80087cc <PID_Init+0x74>)
 8008776:	609a      	str	r2, [r3, #8]
 8008778:	e00c      	b.n	8008794 <PID_Init+0x3c>
	}
	else if(i==2)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b02      	cmp	r3, #2
 800877e:	d109      	bne.n	8008794 <PID_Init+0x3c>
	{
		pid.kp = 0.08;
 8008780:	4b0f      	ldr	r3, [pc, #60]	; (80087c0 <PID_Init+0x68>)
 8008782:	4a13      	ldr	r2, [pc, #76]	; (80087d0 <PID_Init+0x78>)
 8008784:	601a      	str	r2, [r3, #0]
		pid.ki = 0.05;
 8008786:	4b0e      	ldr	r3, [pc, #56]	; (80087c0 <PID_Init+0x68>)
 8008788:	4a12      	ldr	r2, [pc, #72]	; (80087d4 <PID_Init+0x7c>)
 800878a:	605a      	str	r2, [r3, #4]
		pid.kd = 0;
 800878c:	4b0c      	ldr	r3, [pc, #48]	; (80087c0 <PID_Init+0x68>)
 800878e:	f04f 0200 	mov.w	r2, #0
 8008792:	609a      	str	r2, [r3, #8]
	}

    pid.limit = 100;
 8008794:	4b0a      	ldr	r3, [pc, #40]	; (80087c0 <PID_Init+0x68>)
 8008796:	4a10      	ldr	r2, [pc, #64]	; (80087d8 <PID_Init+0x80>)
 8008798:	619a      	str	r2, [r3, #24]
    pid.ek = 0;
 800879a:	4b09      	ldr	r3, [pc, #36]	; (80087c0 <PID_Init+0x68>)
 800879c:	f04f 0200 	mov.w	r2, #0
 80087a0:	60da      	str	r2, [r3, #12]
    pid.ek_1 = 0;
 80087a2:	4b07      	ldr	r3, [pc, #28]	; (80087c0 <PID_Init+0x68>)
 80087a4:	f04f 0200 	mov.w	r2, #0
 80087a8:	611a      	str	r2, [r3, #16]
    pid.ek_2 = 0;
 80087aa:	4b05      	ldr	r3, [pc, #20]	; (80087c0 <PID_Init+0x68>)
 80087ac:	f04f 0200 	mov.w	r2, #0
 80087b0:	615a      	str	r2, [r3, #20]
}
 80087b2:	bf00      	nop
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	200000f4 	.word	0x200000f4
 80087c4:	3e3851ec 	.word	0x3e3851ec
 80087c8:	3d3851ec 	.word	0x3d3851ec
 80087cc:	38d1b717 	.word	0x38d1b717
 80087d0:	3da3d70a 	.word	0x3da3d70a
 80087d4:	3d4ccccd 	.word	0x3d4ccccd
 80087d8:	42c80000 	.word	0x42c80000

080087dc <PID_Increase>:


// 增量式PID控制
float PID_Increase(int Encoder,int Target)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]

	float pwm = 0;
 80087e6:	f04f 0300 	mov.w	r3, #0
 80087ea:	60fb      	str	r3, [r7, #12]
	    pid.ek = Target - Encoder; // 计算当前误差
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	ee07 3a90 	vmov	s15, r3
 80087f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80087fa:	4b32      	ldr	r3, [pc, #200]	; (80088c4 <PID_Increase+0xe8>)
 80087fc:	edc3 7a03 	vstr	s15, [r3, #12]
	    pwm = pid.kp*(pid.ek - pid.ek_1) + pid.ki*pid.ek +pid.kd*(pid.ek - 2*pid.ek_1 + pid.ek_2);   //增量式PID控制�???
 8008800:	4b30      	ldr	r3, [pc, #192]	; (80088c4 <PID_Increase+0xe8>)
 8008802:	ed93 7a00 	vldr	s14, [r3]
 8008806:	4b2f      	ldr	r3, [pc, #188]	; (80088c4 <PID_Increase+0xe8>)
 8008808:	edd3 6a03 	vldr	s13, [r3, #12]
 800880c:	4b2d      	ldr	r3, [pc, #180]	; (80088c4 <PID_Increase+0xe8>)
 800880e:	edd3 7a04 	vldr	s15, [r3, #16]
 8008812:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8008816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800881a:	4b2a      	ldr	r3, [pc, #168]	; (80088c4 <PID_Increase+0xe8>)
 800881c:	edd3 6a01 	vldr	s13, [r3, #4]
 8008820:	4b28      	ldr	r3, [pc, #160]	; (80088c4 <PID_Increase+0xe8>)
 8008822:	edd3 7a03 	vldr	s15, [r3, #12]
 8008826:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800882a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800882e:	4b25      	ldr	r3, [pc, #148]	; (80088c4 <PID_Increase+0xe8>)
 8008830:	edd3 6a02 	vldr	s13, [r3, #8]
 8008834:	4b23      	ldr	r3, [pc, #140]	; (80088c4 <PID_Increase+0xe8>)
 8008836:	ed93 6a03 	vldr	s12, [r3, #12]
 800883a:	4b22      	ldr	r3, [pc, #136]	; (80088c4 <PID_Increase+0xe8>)
 800883c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008840:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008844:	ee36 6a67 	vsub.f32	s12, s12, s15
 8008848:	4b1e      	ldr	r3, [pc, #120]	; (80088c4 <PID_Increase+0xe8>)
 800884a:	edd3 7a05 	vldr	s15, [r3, #20]
 800884e:	ee76 7a27 	vadd.f32	s15, s12, s15
 8008852:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008856:	ee77 7a27 	vadd.f32	s15, s14, s15
 800885a:	edc7 7a03 	vstr	s15, [r7, #12]
	    pid.ek_2 = pid.ek_1; //保存上上�???次的偏差
 800885e:	4b19      	ldr	r3, [pc, #100]	; (80088c4 <PID_Increase+0xe8>)
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	4a18      	ldr	r2, [pc, #96]	; (80088c4 <PID_Increase+0xe8>)
 8008864:	6153      	str	r3, [r2, #20]
	    pid.ek_1 = pid.ek;   //保存上一次偏�???
 8008866:	4b17      	ldr	r3, [pc, #92]	; (80088c4 <PID_Increase+0xe8>)
 8008868:	68db      	ldr	r3, [r3, #12]
 800886a:	4a16      	ldr	r2, [pc, #88]	; (80088c4 <PID_Increase+0xe8>)
 800886c:	6113      	str	r3, [r2, #16]

	    if(pwm > pid.limit)
 800886e:	4b15      	ldr	r3, [pc, #84]	; (80088c4 <PID_Increase+0xe8>)
 8008870:	edd3 7a06 	vldr	s15, [r3, #24]
 8008874:	ed97 7a03 	vldr	s14, [r7, #12]
 8008878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800887c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008880:	dd03      	ble.n	800888a <PID_Increase+0xae>
	    {
	      pwm =  pid.limit;
 8008882:	4b10      	ldr	r3, [pc, #64]	; (80088c4 <PID_Increase+0xe8>)
 8008884:	699b      	ldr	r3, [r3, #24]
 8008886:	60fb      	str	r3, [r7, #12]
 8008888:	e012      	b.n	80088b0 <PID_Increase+0xd4>
	    }
	    else if(pwm < -pid.limit)
 800888a:	4b0e      	ldr	r3, [pc, #56]	; (80088c4 <PID_Increase+0xe8>)
 800888c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008890:	eef1 7a67 	vneg.f32	s15, s15
 8008894:	ed97 7a03 	vldr	s14, [r7, #12]
 8008898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800889c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a0:	d506      	bpl.n	80088b0 <PID_Increase+0xd4>
	    {
	      pwm =  -pid.limit;
 80088a2:	4b08      	ldr	r3, [pc, #32]	; (80088c4 <PID_Increase+0xe8>)
 80088a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80088a8:	eef1 7a67 	vneg.f32	s15, s15
 80088ac:	edc7 7a03 	vstr	s15, [r7, #12]
	    }
	    return pwm;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	ee07 3a90 	vmov	s15, r3
}
 80088b6:	eeb0 0a67 	vmov.f32	s0, s15
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	200000f4 	.word	0x200000f4

080088c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80088c8:	b480      	push	{r7}
 80088ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80088cc:	b672      	cpsid	i
}
 80088ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80088d0:	e7fe      	b.n	80088d0 <Error_Handler+0x8>
	...

080088d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088da:	2300      	movs	r3, #0
 80088dc:	607b      	str	r3, [r7, #4]
 80088de:	4b10      	ldr	r3, [pc, #64]	; (8008920 <HAL_MspInit+0x4c>)
 80088e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088e2:	4a0f      	ldr	r2, [pc, #60]	; (8008920 <HAL_MspInit+0x4c>)
 80088e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80088e8:	6453      	str	r3, [r2, #68]	; 0x44
 80088ea:	4b0d      	ldr	r3, [pc, #52]	; (8008920 <HAL_MspInit+0x4c>)
 80088ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088f2:	607b      	str	r3, [r7, #4]
 80088f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80088f6:	2300      	movs	r3, #0
 80088f8:	603b      	str	r3, [r7, #0]
 80088fa:	4b09      	ldr	r3, [pc, #36]	; (8008920 <HAL_MspInit+0x4c>)
 80088fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fe:	4a08      	ldr	r2, [pc, #32]	; (8008920 <HAL_MspInit+0x4c>)
 8008900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008904:	6413      	str	r3, [r2, #64]	; 0x40
 8008906:	4b06      	ldr	r3, [pc, #24]	; (8008920 <HAL_MspInit+0x4c>)
 8008908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800890e:	603b      	str	r3, [r7, #0]
 8008910:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008912:	bf00      	nop
 8008914:	370c      	adds	r7, #12
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	40023800 	.word	0x40023800

08008924 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b08e      	sub	sp, #56	; 0x38
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800892c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	605a      	str	r2, [r3, #4]
 8008936:	609a      	str	r2, [r3, #8]
 8008938:	60da      	str	r2, [r3, #12]
 800893a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4a8e      	ldr	r2, [pc, #568]	; (8008b7c <HAL_ADC_MspInit+0x258>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d158      	bne.n	80089f8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8008946:	2300      	movs	r3, #0
 8008948:	623b      	str	r3, [r7, #32]
 800894a:	4b8d      	ldr	r3, [pc, #564]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 800894c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800894e:	4a8c      	ldr	r2, [pc, #560]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 8008950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008954:	6453      	str	r3, [r2, #68]	; 0x44
 8008956:	4b8a      	ldr	r3, [pc, #552]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 8008958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800895a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800895e:	623b      	str	r3, [r7, #32]
 8008960:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008962:	2300      	movs	r3, #0
 8008964:	61fb      	str	r3, [r7, #28]
 8008966:	4b86      	ldr	r3, [pc, #536]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 8008968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800896a:	4a85      	ldr	r2, [pc, #532]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 800896c:	f043 0301 	orr.w	r3, r3, #1
 8008970:	6313      	str	r3, [r2, #48]	; 0x30
 8008972:	4b83      	ldr	r3, [pc, #524]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 8008974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	61fb      	str	r3, [r7, #28]
 800897c:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800897e:	2310      	movs	r3, #16
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008982:	2303      	movs	r3, #3
 8008984:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008986:	2300      	movs	r3, #0
 8008988:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800898a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800898e:	4619      	mov	r1, r3
 8008990:	487c      	ldr	r0, [pc, #496]	; (8008b84 <HAL_ADC_MspInit+0x260>)
 8008992:	f001 fb8f 	bl	800a0b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8008996:	4b7c      	ldr	r3, [pc, #496]	; (8008b88 <HAL_ADC_MspInit+0x264>)
 8008998:	4a7c      	ldr	r2, [pc, #496]	; (8008b8c <HAL_ADC_MspInit+0x268>)
 800899a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800899c:	4b7a      	ldr	r3, [pc, #488]	; (8008b88 <HAL_ADC_MspInit+0x264>)
 800899e:	2200      	movs	r2, #0
 80089a0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80089a2:	4b79      	ldr	r3, [pc, #484]	; (8008b88 <HAL_ADC_MspInit+0x264>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80089a8:	4b77      	ldr	r3, [pc, #476]	; (8008b88 <HAL_ADC_MspInit+0x264>)
 80089aa:	2200      	movs	r2, #0
 80089ac:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80089ae:	4b76      	ldr	r3, [pc, #472]	; (8008b88 <HAL_ADC_MspInit+0x264>)
 80089b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089b4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80089b6:	4b74      	ldr	r3, [pc, #464]	; (8008b88 <HAL_ADC_MspInit+0x264>)
 80089b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089bc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80089be:	4b72      	ldr	r3, [pc, #456]	; (8008b88 <HAL_ADC_MspInit+0x264>)
 80089c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80089c4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80089c6:	4b70      	ldr	r3, [pc, #448]	; (8008b88 <HAL_ADC_MspInit+0x264>)
 80089c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089cc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80089ce:	4b6e      	ldr	r3, [pc, #440]	; (8008b88 <HAL_ADC_MspInit+0x264>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80089d4:	4b6c      	ldr	r3, [pc, #432]	; (8008b88 <HAL_ADC_MspInit+0x264>)
 80089d6:	2200      	movs	r2, #0
 80089d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80089da:	486b      	ldr	r0, [pc, #428]	; (8008b88 <HAL_ADC_MspInit+0x264>)
 80089dc:	f000 fffa 	bl	80099d4 <HAL_DMA_Init>
 80089e0:	4603      	mov	r3, r0
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d001      	beq.n	80089ea <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80089e6:	f7ff ff6f 	bl	80088c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a66      	ldr	r2, [pc, #408]	; (8008b88 <HAL_ADC_MspInit+0x264>)
 80089ee:	639a      	str	r2, [r3, #56]	; 0x38
 80089f0:	4a65      	ldr	r2, [pc, #404]	; (8008b88 <HAL_ADC_MspInit+0x264>)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80089f6:	e0bc      	b.n	8008b72 <HAL_ADC_MspInit+0x24e>
  else if(hadc->Instance==ADC2)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a64      	ldr	r2, [pc, #400]	; (8008b90 <HAL_ADC_MspInit+0x26c>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d159      	bne.n	8008ab6 <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8008a02:	2300      	movs	r3, #0
 8008a04:	61bb      	str	r3, [r7, #24]
 8008a06:	4b5e      	ldr	r3, [pc, #376]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 8008a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0a:	4a5d      	ldr	r2, [pc, #372]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 8008a0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008a10:	6453      	str	r3, [r2, #68]	; 0x44
 8008a12:	4b5b      	ldr	r3, [pc, #364]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 8008a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a1a:	61bb      	str	r3, [r7, #24]
 8008a1c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a1e:	2300      	movs	r3, #0
 8008a20:	617b      	str	r3, [r7, #20]
 8008a22:	4b57      	ldr	r3, [pc, #348]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 8008a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a26:	4a56      	ldr	r2, [pc, #344]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 8008a28:	f043 0301 	orr.w	r3, r3, #1
 8008a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a2e:	4b54      	ldr	r3, [pc, #336]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 8008a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a32:	f003 0301 	and.w	r3, r3, #1
 8008a36:	617b      	str	r3, [r7, #20]
 8008a38:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008a3a:	2304      	movs	r3, #4
 8008a3c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008a3e:	2303      	movs	r3, #3
 8008a40:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	484d      	ldr	r0, [pc, #308]	; (8008b84 <HAL_ADC_MspInit+0x260>)
 8008a4e:	f001 fb31 	bl	800a0b4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8008a52:	4b50      	ldr	r3, [pc, #320]	; (8008b94 <HAL_ADC_MspInit+0x270>)
 8008a54:	4a50      	ldr	r2, [pc, #320]	; (8008b98 <HAL_ADC_MspInit+0x274>)
 8008a56:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8008a58:	4b4e      	ldr	r3, [pc, #312]	; (8008b94 <HAL_ADC_MspInit+0x270>)
 8008a5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008a5e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008a60:	4b4c      	ldr	r3, [pc, #304]	; (8008b94 <HAL_ADC_MspInit+0x270>)
 8008a62:	2200      	movs	r2, #0
 8008a64:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8008a66:	4b4b      	ldr	r3, [pc, #300]	; (8008b94 <HAL_ADC_MspInit+0x270>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8008a6c:	4b49      	ldr	r3, [pc, #292]	; (8008b94 <HAL_ADC_MspInit+0x270>)
 8008a6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008a72:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008a74:	4b47      	ldr	r3, [pc, #284]	; (8008b94 <HAL_ADC_MspInit+0x270>)
 8008a76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a7a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008a7c:	4b45      	ldr	r3, [pc, #276]	; (8008b94 <HAL_ADC_MspInit+0x270>)
 8008a7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008a82:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8008a84:	4b43      	ldr	r3, [pc, #268]	; (8008b94 <HAL_ADC_MspInit+0x270>)
 8008a86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a8a:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8008a8c:	4b41      	ldr	r3, [pc, #260]	; (8008b94 <HAL_ADC_MspInit+0x270>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008a92:	4b40      	ldr	r3, [pc, #256]	; (8008b94 <HAL_ADC_MspInit+0x270>)
 8008a94:	2200      	movs	r2, #0
 8008a96:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8008a98:	483e      	ldr	r0, [pc, #248]	; (8008b94 <HAL_ADC_MspInit+0x270>)
 8008a9a:	f000 ff9b 	bl	80099d4 <HAL_DMA_Init>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <HAL_ADC_MspInit+0x184>
      Error_Handler();
 8008aa4:	f7ff ff10 	bl	80088c8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	4a3a      	ldr	r2, [pc, #232]	; (8008b94 <HAL_ADC_MspInit+0x270>)
 8008aac:	639a      	str	r2, [r3, #56]	; 0x38
 8008aae:	4a39      	ldr	r2, [pc, #228]	; (8008b94 <HAL_ADC_MspInit+0x270>)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008ab4:	e05d      	b.n	8008b72 <HAL_ADC_MspInit+0x24e>
  else if(hadc->Instance==ADC3)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4a38      	ldr	r2, [pc, #224]	; (8008b9c <HAL_ADC_MspInit+0x278>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d158      	bne.n	8008b72 <HAL_ADC_MspInit+0x24e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	613b      	str	r3, [r7, #16]
 8008ac4:	4b2e      	ldr	r3, [pc, #184]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 8008ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac8:	4a2d      	ldr	r2, [pc, #180]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 8008aca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ace:	6453      	str	r3, [r2, #68]	; 0x44
 8008ad0:	4b2b      	ldr	r3, [pc, #172]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 8008ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ad8:	613b      	str	r3, [r7, #16]
 8008ada:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008adc:	2300      	movs	r3, #0
 8008ade:	60fb      	str	r3, [r7, #12]
 8008ae0:	4b27      	ldr	r3, [pc, #156]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 8008ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae4:	4a26      	ldr	r2, [pc, #152]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 8008ae6:	f043 0301 	orr.w	r3, r3, #1
 8008aea:	6313      	str	r3, [r2, #48]	; 0x30
 8008aec:	4b24      	ldr	r3, [pc, #144]	; (8008b80 <HAL_ADC_MspInit+0x25c>)
 8008aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af0:	f003 0301 	and.w	r3, r3, #1
 8008af4:	60fb      	str	r3, [r7, #12]
 8008af6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008af8:	2301      	movs	r3, #1
 8008afa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008afc:	2303      	movs	r3, #3
 8008afe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b00:	2300      	movs	r3, #0
 8008b02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b08:	4619      	mov	r1, r3
 8008b0a:	481e      	ldr	r0, [pc, #120]	; (8008b84 <HAL_ADC_MspInit+0x260>)
 8008b0c:	f001 fad2 	bl	800a0b4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8008b10:	4b23      	ldr	r3, [pc, #140]	; (8008ba0 <HAL_ADC_MspInit+0x27c>)
 8008b12:	4a24      	ldr	r2, [pc, #144]	; (8008ba4 <HAL_ADC_MspInit+0x280>)
 8008b14:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8008b16:	4b22      	ldr	r3, [pc, #136]	; (8008ba0 <HAL_ADC_MspInit+0x27c>)
 8008b18:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008b1c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008b1e:	4b20      	ldr	r3, [pc, #128]	; (8008ba0 <HAL_ADC_MspInit+0x27c>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b24:	4b1e      	ldr	r3, [pc, #120]	; (8008ba0 <HAL_ADC_MspInit+0x27c>)
 8008b26:	2200      	movs	r2, #0
 8008b28:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8008b2a:	4b1d      	ldr	r3, [pc, #116]	; (8008ba0 <HAL_ADC_MspInit+0x27c>)
 8008b2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008b30:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8008b32:	4b1b      	ldr	r3, [pc, #108]	; (8008ba0 <HAL_ADC_MspInit+0x27c>)
 8008b34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b38:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008b3a:	4b19      	ldr	r3, [pc, #100]	; (8008ba0 <HAL_ADC_MspInit+0x27c>)
 8008b3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008b40:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8008b42:	4b17      	ldr	r3, [pc, #92]	; (8008ba0 <HAL_ADC_MspInit+0x27c>)
 8008b44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b48:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8008b4a:	4b15      	ldr	r3, [pc, #84]	; (8008ba0 <HAL_ADC_MspInit+0x27c>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008b50:	4b13      	ldr	r3, [pc, #76]	; (8008ba0 <HAL_ADC_MspInit+0x27c>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8008b56:	4812      	ldr	r0, [pc, #72]	; (8008ba0 <HAL_ADC_MspInit+0x27c>)
 8008b58:	f000 ff3c 	bl	80099d4 <HAL_DMA_Init>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <HAL_ADC_MspInit+0x242>
      Error_Handler();
 8008b62:	f7ff feb1 	bl	80088c8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4a0d      	ldr	r2, [pc, #52]	; (8008ba0 <HAL_ADC_MspInit+0x27c>)
 8008b6a:	639a      	str	r2, [r3, #56]	; 0x38
 8008b6c:	4a0c      	ldr	r2, [pc, #48]	; (8008ba0 <HAL_ADC_MspInit+0x27c>)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6393      	str	r3, [r2, #56]	; 0x38
}
 8008b72:	bf00      	nop
 8008b74:	3738      	adds	r7, #56	; 0x38
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	40012000 	.word	0x40012000
 8008b80:	40023800 	.word	0x40023800
 8008b84:	40020000 	.word	0x40020000
 8008b88:	20000554 	.word	0x20000554
 8008b8c:	40026410 	.word	0x40026410
 8008b90:	40012100 	.word	0x40012100
 8008b94:	200005b8 	.word	0x200005b8
 8008b98:	40026440 	.word	0x40026440
 8008b9c:	40012200 	.word	0x40012200
 8008ba0:	20000238 	.word	0x20000238
 8008ba4:	40026428 	.word	0x40026428

08008ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a0b      	ldr	r2, [pc, #44]	; (8008be4 <HAL_TIM_Base_MspInit+0x3c>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d10d      	bne.n	8008bd6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008bba:	2300      	movs	r3, #0
 8008bbc:	60fb      	str	r3, [r7, #12]
 8008bbe:	4b0a      	ldr	r3, [pc, #40]	; (8008be8 <HAL_TIM_Base_MspInit+0x40>)
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc2:	4a09      	ldr	r2, [pc, #36]	; (8008be8 <HAL_TIM_Base_MspInit+0x40>)
 8008bc4:	f043 0302 	orr.w	r3, r3, #2
 8008bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8008bca:	4b07      	ldr	r3, [pc, #28]	; (8008be8 <HAL_TIM_Base_MspInit+0x40>)
 8008bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bce:	f003 0302 	and.w	r3, r3, #2
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8008bd6:	bf00      	nop
 8008bd8:	3714      	adds	r7, #20
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be0:	4770      	bx	lr
 8008be2:	bf00      	nop
 8008be4:	40000400 	.word	0x40000400
 8008be8:	40023800 	.word	0x40023800

08008bec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b088      	sub	sp, #32
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bf4:	f107 030c 	add.w	r3, r7, #12
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	605a      	str	r2, [r3, #4]
 8008bfe:	609a      	str	r2, [r3, #8]
 8008c00:	60da      	str	r2, [r3, #12]
 8008c02:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a12      	ldr	r2, [pc, #72]	; (8008c54 <HAL_TIM_MspPostInit+0x68>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d11d      	bne.n	8008c4a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60bb      	str	r3, [r7, #8]
 8008c12:	4b11      	ldr	r3, [pc, #68]	; (8008c58 <HAL_TIM_MspPostInit+0x6c>)
 8008c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c16:	4a10      	ldr	r2, [pc, #64]	; (8008c58 <HAL_TIM_MspPostInit+0x6c>)
 8008c18:	f043 0301 	orr.w	r3, r3, #1
 8008c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8008c1e:	4b0e      	ldr	r3, [pc, #56]	; (8008c58 <HAL_TIM_MspPostInit+0x6c>)
 8008c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c22:	f003 0301 	and.w	r3, r3, #1
 8008c26:	60bb      	str	r3, [r7, #8]
 8008c28:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008c2a:	2340      	movs	r3, #64	; 0x40
 8008c2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008c2e:	2302      	movs	r3, #2
 8008c30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c32:	2300      	movs	r3, #0
 8008c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008c36:	2300      	movs	r3, #0
 8008c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c3e:	f107 030c 	add.w	r3, r7, #12
 8008c42:	4619      	mov	r1, r3
 8008c44:	4805      	ldr	r0, [pc, #20]	; (8008c5c <HAL_TIM_MspPostInit+0x70>)
 8008c46:	f001 fa35 	bl	800a0b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8008c4a:	bf00      	nop
 8008c4c:	3720      	adds	r7, #32
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	40000400 	.word	0x40000400
 8008c58:	40023800 	.word	0x40023800
 8008c5c:	40020000 	.word	0x40020000

08008c60 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b086      	sub	sp, #24
 8008c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8008c66:	1d3b      	adds	r3, r7, #4
 8008c68:	2200      	movs	r2, #0
 8008c6a:	601a      	str	r2, [r3, #0]
 8008c6c:	605a      	str	r2, [r3, #4]
 8008c6e:	609a      	str	r2, [r3, #8]
 8008c70:	60da      	str	r2, [r3, #12]
 8008c72:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8008c74:	4b2c      	ldr	r3, [pc, #176]	; (8008d28 <HAL_FSMC_MspInit+0xc8>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d151      	bne.n	8008d20 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8008c7c:	4b2a      	ldr	r3, [pc, #168]	; (8008d28 <HAL_FSMC_MspInit+0xc8>)
 8008c7e:	2201      	movs	r2, #1
 8008c80:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8008c82:	2300      	movs	r3, #0
 8008c84:	603b      	str	r3, [r7, #0]
 8008c86:	4b29      	ldr	r3, [pc, #164]	; (8008d2c <HAL_FSMC_MspInit+0xcc>)
 8008c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8a:	4a28      	ldr	r2, [pc, #160]	; (8008d2c <HAL_FSMC_MspInit+0xcc>)
 8008c8c:	f043 0301 	orr.w	r3, r3, #1
 8008c90:	6393      	str	r3, [r2, #56]	; 0x38
 8008c92:	4b26      	ldr	r3, [pc, #152]	; (8008d2c <HAL_FSMC_MspInit+0xcc>)
 8008c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	603b      	str	r3, [r7, #0]
 8008c9c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ca2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ca4:	2302      	movs	r3, #2
 8008ca6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cac:	2303      	movs	r3, #3
 8008cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8008cb0:	230c      	movs	r3, #12
 8008cb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008cb4:	1d3b      	adds	r3, r7, #4
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	481d      	ldr	r0, [pc, #116]	; (8008d30 <HAL_FSMC_MspInit+0xd0>)
 8008cba:	f001 f9fb 	bl	800a0b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8008cbe:	f64f 7380 	movw	r3, #65408	; 0xff80
 8008cc2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cc4:	2302      	movs	r3, #2
 8008cc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8008cd0:	230c      	movs	r3, #12
 8008cd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008cd4:	1d3b      	adds	r3, r7, #4
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	4816      	ldr	r0, [pc, #88]	; (8008d34 <HAL_FSMC_MspInit+0xd4>)
 8008cda:	f001 f9eb 	bl	800a0b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8008cde:	f24c 7333 	movw	r3, #50995	; 0xc733
 8008ce2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ce4:	2302      	movs	r3, #2
 8008ce6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cec:	2303      	movs	r3, #3
 8008cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8008cf0:	230c      	movs	r3, #12
 8008cf2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008cf4:	1d3b      	adds	r3, r7, #4
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	480f      	ldr	r0, [pc, #60]	; (8008d38 <HAL_FSMC_MspInit+0xd8>)
 8008cfa:	f001 f9db 	bl	800a0b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008cfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d02:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d04:	2302      	movs	r3, #2
 8008d06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d0c:	2303      	movs	r3, #3
 8008d0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8008d10:	230c      	movs	r3, #12
 8008d12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008d14:	1d3b      	adds	r3, r7, #4
 8008d16:	4619      	mov	r1, r3
 8008d18:	4808      	ldr	r0, [pc, #32]	; (8008d3c <HAL_FSMC_MspInit+0xdc>)
 8008d1a:	f001 f9cb 	bl	800a0b4 <HAL_GPIO_Init>
 8008d1e:	e000      	b.n	8008d22 <HAL_FSMC_MspInit+0xc2>
    return;
 8008d20:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8008d22:	3718      	adds	r7, #24
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	20000114 	.word	0x20000114
 8008d2c:	40023800 	.word	0x40023800
 8008d30:	40021400 	.word	0x40021400
 8008d34:	40021000 	.word	0x40021000
 8008d38:	40020c00 	.word	0x40020c00
 8008d3c:	40021800 	.word	0x40021800

08008d40 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b082      	sub	sp, #8
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8008d48:	f7ff ff8a 	bl	8008c60 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8008d4c:	bf00      	nop
 8008d4e:	3708      	adds	r7, #8
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8008d58:	f001 ffae 	bl	800acb8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008d5c:	e7fe      	b.n	8008d5c <NMI_Handler+0x8>

08008d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d5e:	b480      	push	{r7}
 8008d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d62:	e7fe      	b.n	8008d62 <HardFault_Handler+0x4>

08008d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008d64:	b480      	push	{r7}
 8008d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d68:	e7fe      	b.n	8008d68 <MemManage_Handler+0x4>

08008d6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008d6a:	b480      	push	{r7}
 8008d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008d6e:	e7fe      	b.n	8008d6e <BusFault_Handler+0x4>

08008d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008d70:	b480      	push	{r7}
 8008d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008d74:	e7fe      	b.n	8008d74 <UsageFault_Handler+0x4>

08008d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008d76:	b480      	push	{r7}
 8008d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008d7a:	bf00      	nop
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008d84:	b480      	push	{r7}
 8008d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008d88:	bf00      	nop
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr

08008d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008d92:	b480      	push	{r7}
 8008d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008d96:	bf00      	nop
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008da4:	f000 f8ae 	bl	8008f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008da8:	bf00      	nop
 8008daa:	bd80      	pop	{r7, pc}

08008dac <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008db0:	4802      	ldr	r0, [pc, #8]	; (8008dbc <DMA2_Stream0_IRQHandler+0x10>)
 8008db2:	f000 ff15 	bl	8009be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008db6:	bf00      	nop
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	20000554 	.word	0x20000554

08008dc0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8008dc4:	4802      	ldr	r0, [pc, #8]	; (8008dd0 <DMA2_Stream1_IRQHandler+0x10>)
 8008dc6:	f000 ff0b 	bl	8009be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8008dca:	bf00      	nop
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	20000238 	.word	0x20000238

08008dd4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8008dd8:	4802      	ldr	r0, [pc, #8]	; (8008de4 <DMA2_Stream2_IRQHandler+0x10>)
 8008dda:	f000 ff01 	bl	8009be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8008dde:	bf00      	nop
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	200005b8 	.word	0x200005b8

08008de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008dec:	4b06      	ldr	r3, [pc, #24]	; (8008e08 <SystemInit+0x20>)
 8008dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008df2:	4a05      	ldr	r2, [pc, #20]	; (8008e08 <SystemInit+0x20>)
 8008df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008dfc:	bf00      	nop
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	e000ed00 	.word	0xe000ed00

08008e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008e44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8008e10:	480d      	ldr	r0, [pc, #52]	; (8008e48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8008e12:	490e      	ldr	r1, [pc, #56]	; (8008e4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8008e14:	4a0e      	ldr	r2, [pc, #56]	; (8008e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8008e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008e18:	e002      	b.n	8008e20 <LoopCopyDataInit>

08008e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008e1e:	3304      	adds	r3, #4

08008e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008e24:	d3f9      	bcc.n	8008e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008e26:	4a0b      	ldr	r2, [pc, #44]	; (8008e54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8008e28:	4c0b      	ldr	r4, [pc, #44]	; (8008e58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8008e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008e2c:	e001      	b.n	8008e32 <LoopFillZerobss>

08008e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008e30:	3204      	adds	r2, #4

08008e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008e34:	d3fb      	bcc.n	8008e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008e36:	f7ff ffd7 	bl	8008de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e3a:	f002 fef9 	bl	800bc30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008e3e:	f7fe f84b 	bl	8006ed8 <main>
  bx  lr    
 8008e42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008e44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008e4c:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8008e50:	08010730 	.word	0x08010730
  ldr r2, =_sbss
 8008e54:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 8008e58:	2000061c 	.word	0x2000061c

08008e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008e5c:	e7fe      	b.n	8008e5c <ADC_IRQHandler>
	...

08008e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e64:	4b0e      	ldr	r3, [pc, #56]	; (8008ea0 <HAL_Init+0x40>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a0d      	ldr	r2, [pc, #52]	; (8008ea0 <HAL_Init+0x40>)
 8008e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008e70:	4b0b      	ldr	r3, [pc, #44]	; (8008ea0 <HAL_Init+0x40>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a0a      	ldr	r2, [pc, #40]	; (8008ea0 <HAL_Init+0x40>)
 8008e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008e7c:	4b08      	ldr	r3, [pc, #32]	; (8008ea0 <HAL_Init+0x40>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a07      	ldr	r2, [pc, #28]	; (8008ea0 <HAL_Init+0x40>)
 8008e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e88:	2003      	movs	r0, #3
 8008e8a:	f000 fd61 	bl	8009950 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008e8e:	2000      	movs	r0, #0
 8008e90:	f000 f808 	bl	8008ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008e94:	f7ff fd1e 	bl	80088d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	40023c00 	.word	0x40023c00

08008ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b082      	sub	sp, #8
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008eac:	4b12      	ldr	r3, [pc, #72]	; (8008ef8 <HAL_InitTick+0x54>)
 8008eae:	681a      	ldr	r2, [r3, #0]
 8008eb0:	4b12      	ldr	r3, [pc, #72]	; (8008efc <HAL_InitTick+0x58>)
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 fd79 	bl	80099ba <HAL_SYSTICK_Config>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d001      	beq.n	8008ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e00e      	b.n	8008ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b0f      	cmp	r3, #15
 8008ed6:	d80a      	bhi.n	8008eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008ed8:	2200      	movs	r2, #0
 8008eda:	6879      	ldr	r1, [r7, #4]
 8008edc:	f04f 30ff 	mov.w	r0, #4294967295
 8008ee0:	f000 fd41 	bl	8009966 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ee4:	4a06      	ldr	r2, [pc, #24]	; (8008f00 <HAL_InitTick+0x5c>)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
 8008eec:	e000      	b.n	8008ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	20000048 	.word	0x20000048
 8008efc:	20000050 	.word	0x20000050
 8008f00:	2000004c 	.word	0x2000004c

08008f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008f04:	b480      	push	{r7}
 8008f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008f08:	4b06      	ldr	r3, [pc, #24]	; (8008f24 <HAL_IncTick+0x20>)
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	4b06      	ldr	r3, [pc, #24]	; (8008f28 <HAL_IncTick+0x24>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4413      	add	r3, r2
 8008f14:	4a04      	ldr	r2, [pc, #16]	; (8008f28 <HAL_IncTick+0x24>)
 8008f16:	6013      	str	r3, [r2, #0]
}
 8008f18:	bf00      	nop
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr
 8008f22:	bf00      	nop
 8008f24:	20000050 	.word	0x20000050
 8008f28:	20000618 	.word	0x20000618

08008f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8008f30:	4b03      	ldr	r3, [pc, #12]	; (8008f40 <HAL_GetTick+0x14>)
 8008f32:	681b      	ldr	r3, [r3, #0]
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
 8008f3e:	bf00      	nop
 8008f40:	20000618 	.word	0x20000618

08008f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f4c:	f7ff ffee 	bl	8008f2c <HAL_GetTick>
 8008f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f5c:	d005      	beq.n	8008f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f5e:	4b0a      	ldr	r3, [pc, #40]	; (8008f88 <HAL_Delay+0x44>)
 8008f60:	781b      	ldrb	r3, [r3, #0]
 8008f62:	461a      	mov	r2, r3
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	4413      	add	r3, r2
 8008f68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008f6a:	bf00      	nop
 8008f6c:	f7ff ffde 	bl	8008f2c <HAL_GetTick>
 8008f70:	4602      	mov	r2, r0
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d8f7      	bhi.n	8008f6c <HAL_Delay+0x28>
  {
  }
}
 8008f7c:	bf00      	nop
 8008f7e:	bf00      	nop
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop
 8008f88:	20000050 	.word	0x20000050

08008f8c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e033      	b.n	800900a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d109      	bne.n	8008fbe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f7ff fcba 	bl	8008924 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc2:	f003 0310 	and.w	r3, r3, #16
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d118      	bne.n	8008ffc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008fd2:	f023 0302 	bic.w	r3, r3, #2
 8008fd6:	f043 0202 	orr.w	r2, r3, #2
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fa68 	bl	80094b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fee:	f023 0303 	bic.w	r3, r3, #3
 8008ff2:	f043 0201 	orr.w	r2, r3, #1
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	641a      	str	r2, [r3, #64]	; 0x40
 8008ffa:	e001      	b.n	8009000 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009008:	7bfb      	ldrb	r3, [r7, #15]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3710      	adds	r7, #16
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
	...

08009014 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009020:	2300      	movs	r3, #0
 8009022:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800902a:	2b01      	cmp	r3, #1
 800902c:	d101      	bne.n	8009032 <HAL_ADC_Start_DMA+0x1e>
 800902e:	2302      	movs	r3, #2
 8009030:	e0e9      	b.n	8009206 <HAL_ADC_Start_DMA+0x1f2>
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f003 0301 	and.w	r3, r3, #1
 8009044:	2b01      	cmp	r3, #1
 8009046:	d018      	beq.n	800907a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	689a      	ldr	r2, [r3, #8]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f042 0201 	orr.w	r2, r2, #1
 8009056:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009058:	4b6d      	ldr	r3, [pc, #436]	; (8009210 <HAL_ADC_Start_DMA+0x1fc>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a6d      	ldr	r2, [pc, #436]	; (8009214 <HAL_ADC_Start_DMA+0x200>)
 800905e:	fba2 2303 	umull	r2, r3, r2, r3
 8009062:	0c9a      	lsrs	r2, r3, #18
 8009064:	4613      	mov	r3, r2
 8009066:	005b      	lsls	r3, r3, #1
 8009068:	4413      	add	r3, r2
 800906a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800906c:	e002      	b.n	8009074 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	3b01      	subs	r3, #1
 8009072:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d1f9      	bne.n	800906e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	689b      	ldr	r3, [r3, #8]
 8009080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009084:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009088:	d107      	bne.n	800909a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009098:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f003 0301 	and.w	r3, r3, #1
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	f040 80a1 	bne.w	80091ec <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80090b2:	f023 0301 	bic.w	r3, r3, #1
 80090b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d007      	beq.n	80090dc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80090d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090e8:	d106      	bne.n	80090f8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ee:	f023 0206 	bic.w	r2, r3, #6
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	645a      	str	r2, [r3, #68]	; 0x44
 80090f6:	e002      	b.n	80090fe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	2200      	movs	r2, #0
 80090fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	2200      	movs	r2, #0
 8009102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009106:	4b44      	ldr	r3, [pc, #272]	; (8009218 <HAL_ADC_Start_DMA+0x204>)
 8009108:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910e:	4a43      	ldr	r2, [pc, #268]	; (800921c <HAL_ADC_Start_DMA+0x208>)
 8009110:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009116:	4a42      	ldr	r2, [pc, #264]	; (8009220 <HAL_ADC_Start_DMA+0x20c>)
 8009118:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911e:	4a41      	ldr	r2, [pc, #260]	; (8009224 <HAL_ADC_Start_DMA+0x210>)
 8009120:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800912a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	685a      	ldr	r2, [r3, #4]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800913a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	689a      	ldr	r2, [r3, #8]
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800914a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	334c      	adds	r3, #76	; 0x4c
 8009156:	4619      	mov	r1, r3
 8009158:	68ba      	ldr	r2, [r7, #8]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f000 fce8 	bl	8009b30 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	f003 031f 	and.w	r3, r3, #31
 8009168:	2b00      	cmp	r3, #0
 800916a:	d12a      	bne.n	80091c2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a2d      	ldr	r2, [pc, #180]	; (8009228 <HAL_ADC_Start_DMA+0x214>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d015      	beq.n	80091a2 <HAL_ADC_Start_DMA+0x18e>
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a2c      	ldr	r2, [pc, #176]	; (800922c <HAL_ADC_Start_DMA+0x218>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d105      	bne.n	800918c <HAL_ADC_Start_DMA+0x178>
 8009180:	4b25      	ldr	r3, [pc, #148]	; (8009218 <HAL_ADC_Start_DMA+0x204>)
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	f003 031f 	and.w	r3, r3, #31
 8009188:	2b00      	cmp	r3, #0
 800918a:	d00a      	beq.n	80091a2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a27      	ldr	r2, [pc, #156]	; (8009230 <HAL_ADC_Start_DMA+0x21c>)
 8009192:	4293      	cmp	r3, r2
 8009194:	d136      	bne.n	8009204 <HAL_ADC_Start_DMA+0x1f0>
 8009196:	4b20      	ldr	r3, [pc, #128]	; (8009218 <HAL_ADC_Start_DMA+0x204>)
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	f003 0310 	and.w	r3, r3, #16
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d130      	bne.n	8009204 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d129      	bne.n	8009204 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689a      	ldr	r2, [r3, #8]
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80091be:	609a      	str	r2, [r3, #8]
 80091c0:	e020      	b.n	8009204 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a18      	ldr	r2, [pc, #96]	; (8009228 <HAL_ADC_Start_DMA+0x214>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d11b      	bne.n	8009204 <HAL_ADC_Start_DMA+0x1f0>
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	689b      	ldr	r3, [r3, #8]
 80091d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d114      	bne.n	8009204 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	689a      	ldr	r2, [r3, #8]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80091e8:	609a      	str	r2, [r3, #8]
 80091ea:	e00b      	b.n	8009204 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f0:	f043 0210 	orr.w	r2, r3, #16
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091fc:	f043 0201 	orr.w	r2, r3, #1
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3718      	adds	r7, #24
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	20000048 	.word	0x20000048
 8009214:	431bde83 	.word	0x431bde83
 8009218:	40012300 	.word	0x40012300
 800921c:	080096ad 	.word	0x080096ad
 8009220:	08009767 	.word	0x08009767
 8009224:	08009783 	.word	0x08009783
 8009228:	40012000 	.word	0x40012000
 800922c:	40012100 	.word	0x40012100
 8009230:	40012200 	.word	0x40012200

08009234 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800923c:	bf00      	nop
 800923e:	370c      	adds	r7, #12
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009270:	b480      	push	{r7}
 8009272:	b085      	sub	sp, #20
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800927a:	2300      	movs	r3, #0
 800927c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009284:	2b01      	cmp	r3, #1
 8009286:	d101      	bne.n	800928c <HAL_ADC_ConfigChannel+0x1c>
 8009288:	2302      	movs	r3, #2
 800928a:	e105      	b.n	8009498 <HAL_ADC_ConfigChannel+0x228>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2201      	movs	r2, #1
 8009290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2b09      	cmp	r3, #9
 800929a:	d925      	bls.n	80092e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68d9      	ldr	r1, [r3, #12]
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	b29b      	uxth	r3, r3
 80092a8:	461a      	mov	r2, r3
 80092aa:	4613      	mov	r3, r2
 80092ac:	005b      	lsls	r3, r3, #1
 80092ae:	4413      	add	r3, r2
 80092b0:	3b1e      	subs	r3, #30
 80092b2:	2207      	movs	r2, #7
 80092b4:	fa02 f303 	lsl.w	r3, r2, r3
 80092b8:	43da      	mvns	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	400a      	ands	r2, r1
 80092c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68d9      	ldr	r1, [r3, #12]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	4618      	mov	r0, r3
 80092d4:	4603      	mov	r3, r0
 80092d6:	005b      	lsls	r3, r3, #1
 80092d8:	4403      	add	r3, r0
 80092da:	3b1e      	subs	r3, #30
 80092dc:	409a      	lsls	r2, r3
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	430a      	orrs	r2, r1
 80092e4:	60da      	str	r2, [r3, #12]
 80092e6:	e022      	b.n	800932e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6919      	ldr	r1, [r3, #16]
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	b29b      	uxth	r3, r3
 80092f4:	461a      	mov	r2, r3
 80092f6:	4613      	mov	r3, r2
 80092f8:	005b      	lsls	r3, r3, #1
 80092fa:	4413      	add	r3, r2
 80092fc:	2207      	movs	r2, #7
 80092fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009302:	43da      	mvns	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	400a      	ands	r2, r1
 800930a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6919      	ldr	r1, [r3, #16]
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	689a      	ldr	r2, [r3, #8]
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	b29b      	uxth	r3, r3
 800931c:	4618      	mov	r0, r3
 800931e:	4603      	mov	r3, r0
 8009320:	005b      	lsls	r3, r3, #1
 8009322:	4403      	add	r3, r0
 8009324:	409a      	lsls	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	430a      	orrs	r2, r1
 800932c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	2b06      	cmp	r3, #6
 8009334:	d824      	bhi.n	8009380 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	685a      	ldr	r2, [r3, #4]
 8009340:	4613      	mov	r3, r2
 8009342:	009b      	lsls	r3, r3, #2
 8009344:	4413      	add	r3, r2
 8009346:	3b05      	subs	r3, #5
 8009348:	221f      	movs	r2, #31
 800934a:	fa02 f303 	lsl.w	r3, r2, r3
 800934e:	43da      	mvns	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	400a      	ands	r2, r1
 8009356:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	b29b      	uxth	r3, r3
 8009364:	4618      	mov	r0, r3
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	4613      	mov	r3, r2
 800936c:	009b      	lsls	r3, r3, #2
 800936e:	4413      	add	r3, r2
 8009370:	3b05      	subs	r3, #5
 8009372:	fa00 f203 	lsl.w	r2, r0, r3
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	430a      	orrs	r2, r1
 800937c:	635a      	str	r2, [r3, #52]	; 0x34
 800937e:	e04c      	b.n	800941a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	685b      	ldr	r3, [r3, #4]
 8009384:	2b0c      	cmp	r3, #12
 8009386:	d824      	bhi.n	80093d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	685a      	ldr	r2, [r3, #4]
 8009392:	4613      	mov	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	3b23      	subs	r3, #35	; 0x23
 800939a:	221f      	movs	r2, #31
 800939c:	fa02 f303 	lsl.w	r3, r2, r3
 80093a0:	43da      	mvns	r2, r3
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	400a      	ands	r2, r1
 80093a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	4618      	mov	r0, r3
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	685a      	ldr	r2, [r3, #4]
 80093bc:	4613      	mov	r3, r2
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	4413      	add	r3, r2
 80093c2:	3b23      	subs	r3, #35	; 0x23
 80093c4:	fa00 f203 	lsl.w	r2, r0, r3
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	430a      	orrs	r2, r1
 80093ce:	631a      	str	r2, [r3, #48]	; 0x30
 80093d0:	e023      	b.n	800941a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	4613      	mov	r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	3b41      	subs	r3, #65	; 0x41
 80093e4:	221f      	movs	r2, #31
 80093e6:	fa02 f303 	lsl.w	r3, r2, r3
 80093ea:	43da      	mvns	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	400a      	ands	r2, r1
 80093f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	b29b      	uxth	r3, r3
 8009400:	4618      	mov	r0, r3
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	685a      	ldr	r2, [r3, #4]
 8009406:	4613      	mov	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4413      	add	r3, r2
 800940c:	3b41      	subs	r3, #65	; 0x41
 800940e:	fa00 f203 	lsl.w	r2, r0, r3
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800941a:	4b22      	ldr	r3, [pc, #136]	; (80094a4 <HAL_ADC_ConfigChannel+0x234>)
 800941c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a21      	ldr	r2, [pc, #132]	; (80094a8 <HAL_ADC_ConfigChannel+0x238>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d109      	bne.n	800943c <HAL_ADC_ConfigChannel+0x1cc>
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	2b12      	cmp	r3, #18
 800942e:	d105      	bne.n	800943c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a19      	ldr	r2, [pc, #100]	; (80094a8 <HAL_ADC_ConfigChannel+0x238>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d123      	bne.n	800948e <HAL_ADC_ConfigChannel+0x21e>
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	2b10      	cmp	r3, #16
 800944c:	d003      	beq.n	8009456 <HAL_ADC_ConfigChannel+0x1e6>
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	2b11      	cmp	r3, #17
 8009454:	d11b      	bne.n	800948e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009462:	683b      	ldr	r3, [r7, #0]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	2b10      	cmp	r3, #16
 8009468:	d111      	bne.n	800948e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800946a:	4b10      	ldr	r3, [pc, #64]	; (80094ac <HAL_ADC_ConfigChannel+0x23c>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a10      	ldr	r2, [pc, #64]	; (80094b0 <HAL_ADC_ConfigChannel+0x240>)
 8009470:	fba2 2303 	umull	r2, r3, r2, r3
 8009474:	0c9a      	lsrs	r2, r3, #18
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	005b      	lsls	r3, r3, #1
 800947e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009480:	e002      	b.n	8009488 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	3b01      	subs	r3, #1
 8009486:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1f9      	bne.n	8009482 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3714      	adds	r7, #20
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr
 80094a4:	40012300 	.word	0x40012300
 80094a8:	40012000 	.word	0x40012000
 80094ac:	20000048 	.word	0x20000048
 80094b0:	431bde83 	.word	0x431bde83

080094b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b085      	sub	sp, #20
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80094bc:	4b79      	ldr	r3, [pc, #484]	; (80096a4 <ADC_Init+0x1f0>)
 80094be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	685b      	ldr	r3, [r3, #4]
 80094c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	685a      	ldr	r2, [r3, #4]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	431a      	orrs	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	685a      	ldr	r2, [r3, #4]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6859      	ldr	r1, [r3, #4]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	691b      	ldr	r3, [r3, #16]
 80094f4:	021a      	lsls	r2, r3, #8
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	430a      	orrs	r2, r1
 80094fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	685a      	ldr	r2, [r3, #4]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800950c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	6859      	ldr	r1, [r3, #4]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	689a      	ldr	r2, [r3, #8]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689a      	ldr	r2, [r3, #8]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800952e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6899      	ldr	r1, [r3, #8]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	68da      	ldr	r2, [r3, #12]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	430a      	orrs	r2, r1
 8009540:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009546:	4a58      	ldr	r2, [pc, #352]	; (80096a8 <ADC_Init+0x1f4>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d022      	beq.n	8009592 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	689a      	ldr	r2, [r3, #8]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800955a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6899      	ldr	r1, [r3, #8]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	430a      	orrs	r2, r1
 800956c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800957c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	6899      	ldr	r1, [r3, #8]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	430a      	orrs	r2, r1
 800958e:	609a      	str	r2, [r3, #8]
 8009590:	e00f      	b.n	80095b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	689a      	ldr	r2, [r3, #8]
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80095a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689a      	ldr	r2, [r3, #8]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80095b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689a      	ldr	r2, [r3, #8]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f022 0202 	bic.w	r2, r2, #2
 80095c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	6899      	ldr	r1, [r3, #8]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	7e1b      	ldrb	r3, [r3, #24]
 80095cc:	005a      	lsls	r2, r3, #1
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	430a      	orrs	r2, r1
 80095d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d01b      	beq.n	8009618 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	685a      	ldr	r2, [r3, #4]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	685a      	ldr	r2, [r3, #4]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80095fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	6859      	ldr	r1, [r3, #4]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	3b01      	subs	r3, #1
 800960c:	035a      	lsls	r2, r3, #13
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	430a      	orrs	r2, r1
 8009614:	605a      	str	r2, [r3, #4]
 8009616:	e007      	b.n	8009628 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	685a      	ldr	r2, [r3, #4]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009626:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009636:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	3b01      	subs	r3, #1
 8009644:	051a      	lsls	r2, r3, #20
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	430a      	orrs	r2, r1
 800964c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	689a      	ldr	r2, [r3, #8]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800965c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	6899      	ldr	r1, [r3, #8]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800966a:	025a      	lsls	r2, r3, #9
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	430a      	orrs	r2, r1
 8009672:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	689a      	ldr	r2, [r3, #8]
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009682:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	6899      	ldr	r1, [r3, #8]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	695b      	ldr	r3, [r3, #20]
 800968e:	029a      	lsls	r2, r3, #10
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	430a      	orrs	r2, r1
 8009696:	609a      	str	r2, [r3, #8]
}
 8009698:	bf00      	nop
 800969a:	3714      	adds	r7, #20
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	40012300 	.word	0x40012300
 80096a8:	0f000001 	.word	0x0f000001

080096ac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096be:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d13c      	bne.n	8009740 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d12b      	bne.n	8009738 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d127      	bne.n	8009738 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d006      	beq.n	8009704 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009700:	2b00      	cmp	r3, #0
 8009702:	d119      	bne.n	8009738 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685a      	ldr	r2, [r3, #4]
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f022 0220 	bic.w	r2, r2, #32
 8009712:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009718:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009728:	2b00      	cmp	r3, #0
 800972a:	d105      	bne.n	8009738 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009730:	f043 0201 	orr.w	r2, r3, #1
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009738:	68f8      	ldr	r0, [r7, #12]
 800973a:	f7ff fd7b 	bl	8009234 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800973e:	e00e      	b.n	800975e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009744:	f003 0310 	and.w	r3, r3, #16
 8009748:	2b00      	cmp	r3, #0
 800974a:	d003      	beq.n	8009754 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f7ff fd85 	bl	800925c <HAL_ADC_ErrorCallback>
}
 8009752:	e004      	b.n	800975e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	4798      	blx	r3
}
 800975e:	bf00      	nop
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009772:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009774:	68f8      	ldr	r0, [r7, #12]
 8009776:	f7ff fd67 	bl	8009248 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800977a:	bf00      	nop
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009782:	b580      	push	{r7, lr}
 8009784:	b084      	sub	sp, #16
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2240      	movs	r2, #64	; 0x40
 8009794:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800979a:	f043 0204 	orr.w	r2, r3, #4
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80097a2:	68f8      	ldr	r0, [r7, #12]
 80097a4:	f7ff fd5a 	bl	800925c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80097a8:	bf00      	nop
 80097aa:	3710      	adds	r7, #16
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80097b0:	b480      	push	{r7}
 80097b2:	b085      	sub	sp, #20
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f003 0307 	and.w	r3, r3, #7
 80097be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80097c0:	4b0c      	ldr	r3, [pc, #48]	; (80097f4 <__NVIC_SetPriorityGrouping+0x44>)
 80097c2:	68db      	ldr	r3, [r3, #12]
 80097c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80097cc:	4013      	ands	r3, r2
 80097ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80097d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80097dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80097e2:	4a04      	ldr	r2, [pc, #16]	; (80097f4 <__NVIC_SetPriorityGrouping+0x44>)
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	60d3      	str	r3, [r2, #12]
}
 80097e8:	bf00      	nop
 80097ea:	3714      	adds	r7, #20
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr
 80097f4:	e000ed00 	.word	0xe000ed00

080097f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80097f8:	b480      	push	{r7}
 80097fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80097fc:	4b04      	ldr	r3, [pc, #16]	; (8009810 <__NVIC_GetPriorityGrouping+0x18>)
 80097fe:	68db      	ldr	r3, [r3, #12]
 8009800:	0a1b      	lsrs	r3, r3, #8
 8009802:	f003 0307 	and.w	r3, r3, #7
}
 8009806:	4618      	mov	r0, r3
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr
 8009810:	e000ed00 	.word	0xe000ed00

08009814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009814:	b480      	push	{r7}
 8009816:	b083      	sub	sp, #12
 8009818:	af00      	add	r7, sp, #0
 800981a:	4603      	mov	r3, r0
 800981c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800981e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009822:	2b00      	cmp	r3, #0
 8009824:	db0b      	blt.n	800983e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009826:	79fb      	ldrb	r3, [r7, #7]
 8009828:	f003 021f 	and.w	r2, r3, #31
 800982c:	4907      	ldr	r1, [pc, #28]	; (800984c <__NVIC_EnableIRQ+0x38>)
 800982e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009832:	095b      	lsrs	r3, r3, #5
 8009834:	2001      	movs	r0, #1
 8009836:	fa00 f202 	lsl.w	r2, r0, r2
 800983a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800983e:	bf00      	nop
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	e000e100 	.word	0xe000e100

08009850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	4603      	mov	r3, r0
 8009858:	6039      	str	r1, [r7, #0]
 800985a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800985c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009860:	2b00      	cmp	r3, #0
 8009862:	db0a      	blt.n	800987a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	b2da      	uxtb	r2, r3
 8009868:	490c      	ldr	r1, [pc, #48]	; (800989c <__NVIC_SetPriority+0x4c>)
 800986a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800986e:	0112      	lsls	r2, r2, #4
 8009870:	b2d2      	uxtb	r2, r2
 8009872:	440b      	add	r3, r1
 8009874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009878:	e00a      	b.n	8009890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	b2da      	uxtb	r2, r3
 800987e:	4908      	ldr	r1, [pc, #32]	; (80098a0 <__NVIC_SetPriority+0x50>)
 8009880:	79fb      	ldrb	r3, [r7, #7]
 8009882:	f003 030f 	and.w	r3, r3, #15
 8009886:	3b04      	subs	r3, #4
 8009888:	0112      	lsls	r2, r2, #4
 800988a:	b2d2      	uxtb	r2, r2
 800988c:	440b      	add	r3, r1
 800988e:	761a      	strb	r2, [r3, #24]
}
 8009890:	bf00      	nop
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr
 800989c:	e000e100 	.word	0xe000e100
 80098a0:	e000ed00 	.word	0xe000ed00

080098a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b089      	sub	sp, #36	; 0x24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f003 0307 	and.w	r3, r3, #7
 80098b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80098b8:	69fb      	ldr	r3, [r7, #28]
 80098ba:	f1c3 0307 	rsb	r3, r3, #7
 80098be:	2b04      	cmp	r3, #4
 80098c0:	bf28      	it	cs
 80098c2:	2304      	movcs	r3, #4
 80098c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	3304      	adds	r3, #4
 80098ca:	2b06      	cmp	r3, #6
 80098cc:	d902      	bls.n	80098d4 <NVIC_EncodePriority+0x30>
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	3b03      	subs	r3, #3
 80098d2:	e000      	b.n	80098d6 <NVIC_EncodePriority+0x32>
 80098d4:	2300      	movs	r3, #0
 80098d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098d8:	f04f 32ff 	mov.w	r2, #4294967295
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	fa02 f303 	lsl.w	r3, r2, r3
 80098e2:	43da      	mvns	r2, r3
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	401a      	ands	r2, r3
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80098ec:	f04f 31ff 	mov.w	r1, #4294967295
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	fa01 f303 	lsl.w	r3, r1, r3
 80098f6:	43d9      	mvns	r1, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80098fc:	4313      	orrs	r3, r2
         );
}
 80098fe:	4618      	mov	r0, r3
 8009900:	3724      	adds	r7, #36	; 0x24
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
	...

0800990c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	3b01      	subs	r3, #1
 8009918:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800991c:	d301      	bcc.n	8009922 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800991e:	2301      	movs	r3, #1
 8009920:	e00f      	b.n	8009942 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009922:	4a0a      	ldr	r2, [pc, #40]	; (800994c <SysTick_Config+0x40>)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	3b01      	subs	r3, #1
 8009928:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800992a:	210f      	movs	r1, #15
 800992c:	f04f 30ff 	mov.w	r0, #4294967295
 8009930:	f7ff ff8e 	bl	8009850 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009934:	4b05      	ldr	r3, [pc, #20]	; (800994c <SysTick_Config+0x40>)
 8009936:	2200      	movs	r2, #0
 8009938:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800993a:	4b04      	ldr	r3, [pc, #16]	; (800994c <SysTick_Config+0x40>)
 800993c:	2207      	movs	r2, #7
 800993e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009940:	2300      	movs	r3, #0
}
 8009942:	4618      	mov	r0, r3
 8009944:	3708      	adds	r7, #8
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	e000e010 	.word	0xe000e010

08009950 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7ff ff29 	bl	80097b0 <__NVIC_SetPriorityGrouping>
}
 800995e:	bf00      	nop
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}

08009966 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009966:	b580      	push	{r7, lr}
 8009968:	b086      	sub	sp, #24
 800996a:	af00      	add	r7, sp, #0
 800996c:	4603      	mov	r3, r0
 800996e:	60b9      	str	r1, [r7, #8]
 8009970:	607a      	str	r2, [r7, #4]
 8009972:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009974:	2300      	movs	r3, #0
 8009976:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009978:	f7ff ff3e 	bl	80097f8 <__NVIC_GetPriorityGrouping>
 800997c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800997e:	687a      	ldr	r2, [r7, #4]
 8009980:	68b9      	ldr	r1, [r7, #8]
 8009982:	6978      	ldr	r0, [r7, #20]
 8009984:	f7ff ff8e 	bl	80098a4 <NVIC_EncodePriority>
 8009988:	4602      	mov	r2, r0
 800998a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800998e:	4611      	mov	r1, r2
 8009990:	4618      	mov	r0, r3
 8009992:	f7ff ff5d 	bl	8009850 <__NVIC_SetPriority>
}
 8009996:	bf00      	nop
 8009998:	3718      	adds	r7, #24
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b082      	sub	sp, #8
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	4603      	mov	r3, r0
 80099a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80099a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099ac:	4618      	mov	r0, r3
 80099ae:	f7ff ff31 	bl	8009814 <__NVIC_EnableIRQ>
}
 80099b2:	bf00      	nop
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}

080099ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80099ba:	b580      	push	{r7, lr}
 80099bc:	b082      	sub	sp, #8
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7ff ffa2 	bl	800990c <SysTick_Config>
 80099c8:	4603      	mov	r3, r0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3708      	adds	r7, #8
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
	...

080099d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80099dc:	2300      	movs	r3, #0
 80099de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80099e0:	f7ff faa4 	bl	8008f2c <HAL_GetTick>
 80099e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d101      	bne.n	80099f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80099ec:	2301      	movs	r3, #1
 80099ee:	e099      	b.n	8009b24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2202      	movs	r2, #2
 80099f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f022 0201 	bic.w	r2, r2, #1
 8009a0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009a10:	e00f      	b.n	8009a32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009a12:	f7ff fa8b 	bl	8008f2c <HAL_GetTick>
 8009a16:	4602      	mov	r2, r0
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	2b05      	cmp	r3, #5
 8009a1e:	d908      	bls.n	8009a32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	2220      	movs	r2, #32
 8009a24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2203      	movs	r2, #3
 8009a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009a2e:	2303      	movs	r3, #3
 8009a30:	e078      	b.n	8009b24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 0301 	and.w	r3, r3, #1
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1e8      	bne.n	8009a12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009a48:	697a      	ldr	r2, [r7, #20]
 8009a4a:	4b38      	ldr	r3, [pc, #224]	; (8009b2c <HAL_DMA_Init+0x158>)
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009a5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	699b      	ldr	r3, [r3, #24]
 8009a70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6a1b      	ldr	r3, [r3, #32]
 8009a7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	4313      	orrs	r3, r2
 8009a82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	2b04      	cmp	r3, #4
 8009a8a:	d107      	bne.n	8009a9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a94:	4313      	orrs	r3, r2
 8009a96:	697a      	ldr	r2, [r7, #20]
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	697a      	ldr	r2, [r7, #20]
 8009aa2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	695b      	ldr	r3, [r3, #20]
 8009aaa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	f023 0307 	bic.w	r3, r3, #7
 8009ab2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab8:	697a      	ldr	r2, [r7, #20]
 8009aba:	4313      	orrs	r3, r2
 8009abc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac2:	2b04      	cmp	r3, #4
 8009ac4:	d117      	bne.n	8009af6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aca:	697a      	ldr	r2, [r7, #20]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00e      	beq.n	8009af6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 fa6f 	bl	8009fbc <DMA_CheckFifoParam>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d008      	beq.n	8009af6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2240      	movs	r2, #64	; 0x40
 8009ae8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009af2:	2301      	movs	r3, #1
 8009af4:	e016      	b.n	8009b24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	697a      	ldr	r2, [r7, #20]
 8009afc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fa26 	bl	8009f50 <DMA_CalcBaseAndBitshift>
 8009b04:	4603      	mov	r3, r0
 8009b06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b0c:	223f      	movs	r2, #63	; 0x3f
 8009b0e:	409a      	lsls	r2, r3
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3718      	adds	r7, #24
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	f010803f 	.word	0xf010803f

08009b30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b086      	sub	sp, #24
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	60f8      	str	r0, [r7, #12]
 8009b38:	60b9      	str	r1, [r7, #8]
 8009b3a:	607a      	str	r2, [r7, #4]
 8009b3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d101      	bne.n	8009b56 <HAL_DMA_Start_IT+0x26>
 8009b52:	2302      	movs	r3, #2
 8009b54:	e040      	b.n	8009bd8 <HAL_DMA_Start_IT+0xa8>
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2201      	movs	r2, #1
 8009b5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009b64:	b2db      	uxtb	r3, r3
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d12f      	bne.n	8009bca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	68b9      	ldr	r1, [r7, #8]
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f000 f9b8 	bl	8009ef4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b88:	223f      	movs	r2, #63	; 0x3f
 8009b8a:	409a      	lsls	r2, r3
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	681a      	ldr	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f042 0216 	orr.w	r2, r2, #22
 8009b9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d007      	beq.n	8009bb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f042 0208 	orr.w	r2, r2, #8
 8009bb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681a      	ldr	r2, [r3, #0]
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f042 0201 	orr.w	r2, r2, #1
 8009bc6:	601a      	str	r2, [r3, #0]
 8009bc8:	e005      	b.n	8009bd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009bd2:	2302      	movs	r3, #2
 8009bd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3718      	adds	r7, #24
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009be8:	2300      	movs	r3, #0
 8009bea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009bec:	4b92      	ldr	r3, [pc, #584]	; (8009e38 <HAL_DMA_IRQHandler+0x258>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4a92      	ldr	r2, [pc, #584]	; (8009e3c <HAL_DMA_IRQHandler+0x25c>)
 8009bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bf6:	0a9b      	lsrs	r3, r3, #10
 8009bf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c0a:	2208      	movs	r2, #8
 8009c0c:	409a      	lsls	r2, r3
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4013      	ands	r3, r2
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d01a      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0304 	and.w	r3, r3, #4
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d013      	beq.n	8009c4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f022 0204 	bic.w	r2, r2, #4
 8009c32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c38:	2208      	movs	r2, #8
 8009c3a:	409a      	lsls	r2, r3
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c44:	f043 0201 	orr.w	r2, r3, #1
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c50:	2201      	movs	r2, #1
 8009c52:	409a      	lsls	r2, r3
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	4013      	ands	r3, r2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d012      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	695b      	ldr	r3, [r3, #20]
 8009c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00b      	beq.n	8009c82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c6e:	2201      	movs	r2, #1
 8009c70:	409a      	lsls	r2, r3
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c7a:	f043 0202 	orr.w	r2, r3, #2
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c86:	2204      	movs	r2, #4
 8009c88:	409a      	lsls	r2, r3
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d012      	beq.n	8009cb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f003 0302 	and.w	r3, r3, #2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d00b      	beq.n	8009cb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ca4:	2204      	movs	r2, #4
 8009ca6:	409a      	lsls	r2, r3
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cb0:	f043 0204 	orr.w	r2, r3, #4
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cbc:	2210      	movs	r2, #16
 8009cbe:	409a      	lsls	r2, r3
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	4013      	ands	r3, r2
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d043      	beq.n	8009d50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f003 0308 	and.w	r3, r3, #8
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d03c      	beq.n	8009d50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009cda:	2210      	movs	r2, #16
 8009cdc:	409a      	lsls	r2, r3
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d018      	beq.n	8009d22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d108      	bne.n	8009d10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d024      	beq.n	8009d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	4798      	blx	r3
 8009d0e:	e01f      	b.n	8009d50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d01b      	beq.n	8009d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	4798      	blx	r3
 8009d20:	e016      	b.n	8009d50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d107      	bne.n	8009d40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	681a      	ldr	r2, [r3, #0]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f022 0208 	bic.w	r2, r2, #8
 8009d3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d003      	beq.n	8009d50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d54:	2220      	movs	r2, #32
 8009d56:	409a      	lsls	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 808e 	beq.w	8009e7e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f003 0310 	and.w	r3, r3, #16
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	f000 8086 	beq.w	8009e7e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009d76:	2220      	movs	r2, #32
 8009d78:	409a      	lsls	r2, r3
 8009d7a:	693b      	ldr	r3, [r7, #16]
 8009d7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b05      	cmp	r3, #5
 8009d88:	d136      	bne.n	8009df8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f022 0216 	bic.w	r2, r2, #22
 8009d98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	695a      	ldr	r2, [r3, #20]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009da8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d103      	bne.n	8009dba <HAL_DMA_IRQHandler+0x1da>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d007      	beq.n	8009dca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f022 0208 	bic.w	r2, r2, #8
 8009dc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009dce:	223f      	movs	r2, #63	; 0x3f
 8009dd0:	409a      	lsls	r2, r3
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d07d      	beq.n	8009eea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	4798      	blx	r3
        }
        return;
 8009df6:	e078      	b.n	8009eea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d01c      	beq.n	8009e40 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d108      	bne.n	8009e26 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d030      	beq.n	8009e7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e20:	6878      	ldr	r0, [r7, #4]
 8009e22:	4798      	blx	r3
 8009e24:	e02b      	b.n	8009e7e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d027      	beq.n	8009e7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	4798      	blx	r3
 8009e36:	e022      	b.n	8009e7e <HAL_DMA_IRQHandler+0x29e>
 8009e38:	20000048 	.word	0x20000048
 8009e3c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10f      	bne.n	8009e6e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f022 0210 	bic.w	r2, r2, #16
 8009e5c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d003      	beq.n	8009e7e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d032      	beq.n	8009eec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d022      	beq.n	8009ed8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2205      	movs	r2, #5
 8009e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f022 0201 	bic.w	r2, r2, #1
 8009ea8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	3301      	adds	r3, #1
 8009eae:	60bb      	str	r3, [r7, #8]
 8009eb0:	697a      	ldr	r2, [r7, #20]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d307      	bcc.n	8009ec6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	f003 0301 	and.w	r3, r3, #1
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1f2      	bne.n	8009eaa <HAL_DMA_IRQHandler+0x2ca>
 8009ec4:	e000      	b.n	8009ec8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009ec6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d005      	beq.n	8009eec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	4798      	blx	r3
 8009ee8:	e000      	b.n	8009eec <HAL_DMA_IRQHandler+0x30c>
        return;
 8009eea:	bf00      	nop
    }
  }
}
 8009eec:	3718      	adds	r7, #24
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	bd80      	pop	{r7, pc}
 8009ef2:	bf00      	nop

08009ef4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
 8009f00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009f10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	683a      	ldr	r2, [r7, #0]
 8009f18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	689b      	ldr	r3, [r3, #8]
 8009f1e:	2b40      	cmp	r3, #64	; 0x40
 8009f20:	d108      	bne.n	8009f34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009f32:	e007      	b.n	8009f44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	68ba      	ldr	r2, [r7, #8]
 8009f3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	60da      	str	r2, [r3, #12]
}
 8009f44:	bf00      	nop
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	3b10      	subs	r3, #16
 8009f60:	4a14      	ldr	r2, [pc, #80]	; (8009fb4 <DMA_CalcBaseAndBitshift+0x64>)
 8009f62:	fba2 2303 	umull	r2, r3, r2, r3
 8009f66:	091b      	lsrs	r3, r3, #4
 8009f68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009f6a:	4a13      	ldr	r2, [pc, #76]	; (8009fb8 <DMA_CalcBaseAndBitshift+0x68>)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4413      	add	r3, r2
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d909      	bls.n	8009f92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009f86:	f023 0303 	bic.w	r3, r3, #3
 8009f8a:	1d1a      	adds	r2, r3, #4
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	659a      	str	r2, [r3, #88]	; 0x58
 8009f90:	e007      	b.n	8009fa2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009f9a:	f023 0303 	bic.w	r3, r3, #3
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	3714      	adds	r7, #20
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	aaaaaaab 	.word	0xaaaaaaab
 8009fb8:	08010718 	.word	0x08010718

08009fbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	699b      	ldr	r3, [r3, #24]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d11f      	bne.n	800a016 <DMA_CheckFifoParam+0x5a>
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	2b03      	cmp	r3, #3
 8009fda:	d856      	bhi.n	800a08a <DMA_CheckFifoParam+0xce>
 8009fdc:	a201      	add	r2, pc, #4	; (adr r2, 8009fe4 <DMA_CheckFifoParam+0x28>)
 8009fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe2:	bf00      	nop
 8009fe4:	08009ff5 	.word	0x08009ff5
 8009fe8:	0800a007 	.word	0x0800a007
 8009fec:	08009ff5 	.word	0x08009ff5
 8009ff0:	0800a08b 	.word	0x0800a08b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d046      	beq.n	800a08e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a004:	e043      	b.n	800a08e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a00e:	d140      	bne.n	800a092 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800a010:	2301      	movs	r3, #1
 800a012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a014:	e03d      	b.n	800a092 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a01e:	d121      	bne.n	800a064 <DMA_CheckFifoParam+0xa8>
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	2b03      	cmp	r3, #3
 800a024:	d837      	bhi.n	800a096 <DMA_CheckFifoParam+0xda>
 800a026:	a201      	add	r2, pc, #4	; (adr r2, 800a02c <DMA_CheckFifoParam+0x70>)
 800a028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02c:	0800a03d 	.word	0x0800a03d
 800a030:	0800a043 	.word	0x0800a043
 800a034:	0800a03d 	.word	0x0800a03d
 800a038:	0800a055 	.word	0x0800a055
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	73fb      	strb	r3, [r7, #15]
      break;
 800a040:	e030      	b.n	800a0a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a046:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d025      	beq.n	800a09a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a052:	e022      	b.n	800a09a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a058:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a05c:	d11f      	bne.n	800a09e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800a05e:	2301      	movs	r3, #1
 800a060:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a062:	e01c      	b.n	800a09e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2b02      	cmp	r3, #2
 800a068:	d903      	bls.n	800a072 <DMA_CheckFifoParam+0xb6>
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	2b03      	cmp	r3, #3
 800a06e:	d003      	beq.n	800a078 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a070:	e018      	b.n	800a0a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	73fb      	strb	r3, [r7, #15]
      break;
 800a076:	e015      	b.n	800a0a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00e      	beq.n	800a0a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800a084:	2301      	movs	r3, #1
 800a086:	73fb      	strb	r3, [r7, #15]
      break;
 800a088:	e00b      	b.n	800a0a2 <DMA_CheckFifoParam+0xe6>
      break;
 800a08a:	bf00      	nop
 800a08c:	e00a      	b.n	800a0a4 <DMA_CheckFifoParam+0xe8>
      break;
 800a08e:	bf00      	nop
 800a090:	e008      	b.n	800a0a4 <DMA_CheckFifoParam+0xe8>
      break;
 800a092:	bf00      	nop
 800a094:	e006      	b.n	800a0a4 <DMA_CheckFifoParam+0xe8>
      break;
 800a096:	bf00      	nop
 800a098:	e004      	b.n	800a0a4 <DMA_CheckFifoParam+0xe8>
      break;
 800a09a:	bf00      	nop
 800a09c:	e002      	b.n	800a0a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800a09e:	bf00      	nop
 800a0a0:	e000      	b.n	800a0a4 <DMA_CheckFifoParam+0xe8>
      break;
 800a0a2:	bf00      	nop
    }
  } 
  
  return status; 
 800a0a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3714      	adds	r7, #20
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop

0800a0b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b089      	sub	sp, #36	; 0x24
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	61fb      	str	r3, [r7, #28]
 800a0ce:	e16b      	b.n	800a3a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	697a      	ldr	r2, [r7, #20]
 800a0e0:	4013      	ands	r3, r2
 800a0e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a0e4:	693a      	ldr	r2, [r7, #16]
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	429a      	cmp	r2, r3
 800a0ea:	f040 815a 	bne.w	800a3a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	f003 0303 	and.w	r3, r3, #3
 800a0f6:	2b01      	cmp	r3, #1
 800a0f8:	d005      	beq.n	800a106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800a102:	2b02      	cmp	r3, #2
 800a104:	d130      	bne.n	800a168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	005b      	lsls	r3, r3, #1
 800a110:	2203      	movs	r2, #3
 800a112:	fa02 f303 	lsl.w	r3, r2, r3
 800a116:	43db      	mvns	r3, r3
 800a118:	69ba      	ldr	r2, [r7, #24]
 800a11a:	4013      	ands	r3, r2
 800a11c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	68da      	ldr	r2, [r3, #12]
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	005b      	lsls	r3, r3, #1
 800a126:	fa02 f303 	lsl.w	r3, r2, r3
 800a12a:	69ba      	ldr	r2, [r7, #24]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	69ba      	ldr	r2, [r7, #24]
 800a134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a13c:	2201      	movs	r2, #1
 800a13e:	69fb      	ldr	r3, [r7, #28]
 800a140:	fa02 f303 	lsl.w	r3, r2, r3
 800a144:	43db      	mvns	r3, r3
 800a146:	69ba      	ldr	r2, [r7, #24]
 800a148:	4013      	ands	r3, r2
 800a14a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	091b      	lsrs	r3, r3, #4
 800a152:	f003 0201 	and.w	r2, r3, #1
 800a156:	69fb      	ldr	r3, [r7, #28]
 800a158:	fa02 f303 	lsl.w	r3, r2, r3
 800a15c:	69ba      	ldr	r2, [r7, #24]
 800a15e:	4313      	orrs	r3, r2
 800a160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f003 0303 	and.w	r3, r3, #3
 800a170:	2b03      	cmp	r3, #3
 800a172:	d017      	beq.n	800a1a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	68db      	ldr	r3, [r3, #12]
 800a178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	005b      	lsls	r3, r3, #1
 800a17e:	2203      	movs	r2, #3
 800a180:	fa02 f303 	lsl.w	r3, r2, r3
 800a184:	43db      	mvns	r3, r3
 800a186:	69ba      	ldr	r2, [r7, #24]
 800a188:	4013      	ands	r3, r2
 800a18a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	689a      	ldr	r2, [r3, #8]
 800a190:	69fb      	ldr	r3, [r7, #28]
 800a192:	005b      	lsls	r3, r3, #1
 800a194:	fa02 f303 	lsl.w	r3, r2, r3
 800a198:	69ba      	ldr	r2, [r7, #24]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	69ba      	ldr	r2, [r7, #24]
 800a1a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	f003 0303 	and.w	r3, r3, #3
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	d123      	bne.n	800a1f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a1b0:	69fb      	ldr	r3, [r7, #28]
 800a1b2:	08da      	lsrs	r2, r3, #3
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3208      	adds	r2, #8
 800a1b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	f003 0307 	and.w	r3, r3, #7
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	220f      	movs	r2, #15
 800a1c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a1cc:	43db      	mvns	r3, r3
 800a1ce:	69ba      	ldr	r2, [r7, #24]
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	691a      	ldr	r2, [r3, #16]
 800a1d8:	69fb      	ldr	r3, [r7, #28]
 800a1da:	f003 0307 	and.w	r3, r3, #7
 800a1de:	009b      	lsls	r3, r3, #2
 800a1e0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e4:	69ba      	ldr	r2, [r7, #24]
 800a1e6:	4313      	orrs	r3, r2
 800a1e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	08da      	lsrs	r2, r3, #3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	3208      	adds	r2, #8
 800a1f2:	69b9      	ldr	r1, [r7, #24]
 800a1f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	2203      	movs	r2, #3
 800a204:	fa02 f303 	lsl.w	r3, r2, r3
 800a208:	43db      	mvns	r3, r3
 800a20a:	69ba      	ldr	r2, [r7, #24]
 800a20c:	4013      	ands	r3, r2
 800a20e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	685b      	ldr	r3, [r3, #4]
 800a214:	f003 0203 	and.w	r2, r3, #3
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	005b      	lsls	r3, r3, #1
 800a21c:	fa02 f303 	lsl.w	r3, r2, r3
 800a220:	69ba      	ldr	r2, [r7, #24]
 800a222:	4313      	orrs	r3, r2
 800a224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	69ba      	ldr	r2, [r7, #24]
 800a22a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 80b4 	beq.w	800a3a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a23a:	2300      	movs	r3, #0
 800a23c:	60fb      	str	r3, [r7, #12]
 800a23e:	4b60      	ldr	r3, [pc, #384]	; (800a3c0 <HAL_GPIO_Init+0x30c>)
 800a240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a242:	4a5f      	ldr	r2, [pc, #380]	; (800a3c0 <HAL_GPIO_Init+0x30c>)
 800a244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a248:	6453      	str	r3, [r2, #68]	; 0x44
 800a24a:	4b5d      	ldr	r3, [pc, #372]	; (800a3c0 <HAL_GPIO_Init+0x30c>)
 800a24c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a24e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a252:	60fb      	str	r3, [r7, #12]
 800a254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a256:	4a5b      	ldr	r2, [pc, #364]	; (800a3c4 <HAL_GPIO_Init+0x310>)
 800a258:	69fb      	ldr	r3, [r7, #28]
 800a25a:	089b      	lsrs	r3, r3, #2
 800a25c:	3302      	adds	r3, #2
 800a25e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a264:	69fb      	ldr	r3, [r7, #28]
 800a266:	f003 0303 	and.w	r3, r3, #3
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	220f      	movs	r2, #15
 800a26e:	fa02 f303 	lsl.w	r3, r2, r3
 800a272:	43db      	mvns	r3, r3
 800a274:	69ba      	ldr	r2, [r7, #24]
 800a276:	4013      	ands	r3, r2
 800a278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	4a52      	ldr	r2, [pc, #328]	; (800a3c8 <HAL_GPIO_Init+0x314>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d02b      	beq.n	800a2da <HAL_GPIO_Init+0x226>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	4a51      	ldr	r2, [pc, #324]	; (800a3cc <HAL_GPIO_Init+0x318>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d025      	beq.n	800a2d6 <HAL_GPIO_Init+0x222>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	4a50      	ldr	r2, [pc, #320]	; (800a3d0 <HAL_GPIO_Init+0x31c>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d01f      	beq.n	800a2d2 <HAL_GPIO_Init+0x21e>
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	4a4f      	ldr	r2, [pc, #316]	; (800a3d4 <HAL_GPIO_Init+0x320>)
 800a296:	4293      	cmp	r3, r2
 800a298:	d019      	beq.n	800a2ce <HAL_GPIO_Init+0x21a>
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	4a4e      	ldr	r2, [pc, #312]	; (800a3d8 <HAL_GPIO_Init+0x324>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d013      	beq.n	800a2ca <HAL_GPIO_Init+0x216>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	4a4d      	ldr	r2, [pc, #308]	; (800a3dc <HAL_GPIO_Init+0x328>)
 800a2a6:	4293      	cmp	r3, r2
 800a2a8:	d00d      	beq.n	800a2c6 <HAL_GPIO_Init+0x212>
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	4a4c      	ldr	r2, [pc, #304]	; (800a3e0 <HAL_GPIO_Init+0x32c>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d007      	beq.n	800a2c2 <HAL_GPIO_Init+0x20e>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	4a4b      	ldr	r2, [pc, #300]	; (800a3e4 <HAL_GPIO_Init+0x330>)
 800a2b6:	4293      	cmp	r3, r2
 800a2b8:	d101      	bne.n	800a2be <HAL_GPIO_Init+0x20a>
 800a2ba:	2307      	movs	r3, #7
 800a2bc:	e00e      	b.n	800a2dc <HAL_GPIO_Init+0x228>
 800a2be:	2308      	movs	r3, #8
 800a2c0:	e00c      	b.n	800a2dc <HAL_GPIO_Init+0x228>
 800a2c2:	2306      	movs	r3, #6
 800a2c4:	e00a      	b.n	800a2dc <HAL_GPIO_Init+0x228>
 800a2c6:	2305      	movs	r3, #5
 800a2c8:	e008      	b.n	800a2dc <HAL_GPIO_Init+0x228>
 800a2ca:	2304      	movs	r3, #4
 800a2cc:	e006      	b.n	800a2dc <HAL_GPIO_Init+0x228>
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	e004      	b.n	800a2dc <HAL_GPIO_Init+0x228>
 800a2d2:	2302      	movs	r3, #2
 800a2d4:	e002      	b.n	800a2dc <HAL_GPIO_Init+0x228>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e000      	b.n	800a2dc <HAL_GPIO_Init+0x228>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	69fa      	ldr	r2, [r7, #28]
 800a2de:	f002 0203 	and.w	r2, r2, #3
 800a2e2:	0092      	lsls	r2, r2, #2
 800a2e4:	4093      	lsls	r3, r2
 800a2e6:	69ba      	ldr	r2, [r7, #24]
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a2ec:	4935      	ldr	r1, [pc, #212]	; (800a3c4 <HAL_GPIO_Init+0x310>)
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	089b      	lsrs	r3, r3, #2
 800a2f2:	3302      	adds	r3, #2
 800a2f4:	69ba      	ldr	r2, [r7, #24]
 800a2f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a2fa:	4b3b      	ldr	r3, [pc, #236]	; (800a3e8 <HAL_GPIO_Init+0x334>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	43db      	mvns	r3, r3
 800a304:	69ba      	ldr	r2, [r7, #24]
 800a306:	4013      	ands	r3, r2
 800a308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	685b      	ldr	r3, [r3, #4]
 800a30e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a312:	2b00      	cmp	r3, #0
 800a314:	d003      	beq.n	800a31e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800a316:	69ba      	ldr	r2, [r7, #24]
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	4313      	orrs	r3, r2
 800a31c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a31e:	4a32      	ldr	r2, [pc, #200]	; (800a3e8 <HAL_GPIO_Init+0x334>)
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a324:	4b30      	ldr	r3, [pc, #192]	; (800a3e8 <HAL_GPIO_Init+0x334>)
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a32a:	693b      	ldr	r3, [r7, #16]
 800a32c:	43db      	mvns	r3, r3
 800a32e:	69ba      	ldr	r2, [r7, #24]
 800a330:	4013      	ands	r3, r2
 800a332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d003      	beq.n	800a348 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800a340:	69ba      	ldr	r2, [r7, #24]
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	4313      	orrs	r3, r2
 800a346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a348:	4a27      	ldr	r2, [pc, #156]	; (800a3e8 <HAL_GPIO_Init+0x334>)
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a34e:	4b26      	ldr	r3, [pc, #152]	; (800a3e8 <HAL_GPIO_Init+0x334>)
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a354:	693b      	ldr	r3, [r7, #16]
 800a356:	43db      	mvns	r3, r3
 800a358:	69ba      	ldr	r2, [r7, #24]
 800a35a:	4013      	ands	r3, r2
 800a35c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a366:	2b00      	cmp	r3, #0
 800a368:	d003      	beq.n	800a372 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800a36a:	69ba      	ldr	r2, [r7, #24]
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	4313      	orrs	r3, r2
 800a370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a372:	4a1d      	ldr	r2, [pc, #116]	; (800a3e8 <HAL_GPIO_Init+0x334>)
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a378:	4b1b      	ldr	r3, [pc, #108]	; (800a3e8 <HAL_GPIO_Init+0x334>)
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	43db      	mvns	r3, r3
 800a382:	69ba      	ldr	r2, [r7, #24]
 800a384:	4013      	ands	r3, r2
 800a386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a390:	2b00      	cmp	r3, #0
 800a392:	d003      	beq.n	800a39c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800a394:	69ba      	ldr	r2, [r7, #24]
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	4313      	orrs	r3, r2
 800a39a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a39c:	4a12      	ldr	r2, [pc, #72]	; (800a3e8 <HAL_GPIO_Init+0x334>)
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a3a2:	69fb      	ldr	r3, [r7, #28]
 800a3a4:	3301      	adds	r3, #1
 800a3a6:	61fb      	str	r3, [r7, #28]
 800a3a8:	69fb      	ldr	r3, [r7, #28]
 800a3aa:	2b0f      	cmp	r3, #15
 800a3ac:	f67f ae90 	bls.w	800a0d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a3b0:	bf00      	nop
 800a3b2:	bf00      	nop
 800a3b4:	3724      	adds	r7, #36	; 0x24
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	40023800 	.word	0x40023800
 800a3c4:	40013800 	.word	0x40013800
 800a3c8:	40020000 	.word	0x40020000
 800a3cc:	40020400 	.word	0x40020400
 800a3d0:	40020800 	.word	0x40020800
 800a3d4:	40020c00 	.word	0x40020c00
 800a3d8:	40021000 	.word	0x40021000
 800a3dc:	40021400 	.word	0x40021400
 800a3e0:	40021800 	.word	0x40021800
 800a3e4:	40021c00 	.word	0x40021c00
 800a3e8:	40013c00 	.word	0x40013c00

0800a3ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	807b      	strh	r3, [r7, #2]
 800a3f8:	4613      	mov	r3, r2
 800a3fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a3fc:	787b      	ldrb	r3, [r7, #1]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d003      	beq.n	800a40a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a402:	887a      	ldrh	r2, [r7, #2]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a408:	e003      	b.n	800a412 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a40a:	887b      	ldrh	r3, [r7, #2]
 800a40c:	041a      	lsls	r2, r3, #16
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	619a      	str	r2, [r3, #24]
}
 800a412:	bf00      	nop
 800a414:	370c      	adds	r7, #12
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
	...

0800a420 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d101      	bne.n	800a432 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e264      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d075      	beq.n	800a52a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a43e:	4ba3      	ldr	r3, [pc, #652]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	f003 030c 	and.w	r3, r3, #12
 800a446:	2b04      	cmp	r3, #4
 800a448:	d00c      	beq.n	800a464 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a44a:	4ba0      	ldr	r3, [pc, #640]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a452:	2b08      	cmp	r3, #8
 800a454:	d112      	bne.n	800a47c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a456:	4b9d      	ldr	r3, [pc, #628]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a45e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a462:	d10b      	bne.n	800a47c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a464:	4b99      	ldr	r3, [pc, #612]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d05b      	beq.n	800a528 <HAL_RCC_OscConfig+0x108>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	685b      	ldr	r3, [r3, #4]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d157      	bne.n	800a528 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e23f      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a484:	d106      	bne.n	800a494 <HAL_RCC_OscConfig+0x74>
 800a486:	4b91      	ldr	r3, [pc, #580]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4a90      	ldr	r2, [pc, #576]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a48c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a490:	6013      	str	r3, [r2, #0]
 800a492:	e01d      	b.n	800a4d0 <HAL_RCC_OscConfig+0xb0>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	685b      	ldr	r3, [r3, #4]
 800a498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a49c:	d10c      	bne.n	800a4b8 <HAL_RCC_OscConfig+0x98>
 800a49e:	4b8b      	ldr	r3, [pc, #556]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a8a      	ldr	r2, [pc, #552]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a4a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a4a8:	6013      	str	r3, [r2, #0]
 800a4aa:	4b88      	ldr	r3, [pc, #544]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	4a87      	ldr	r2, [pc, #540]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a4b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4b4:	6013      	str	r3, [r2, #0]
 800a4b6:	e00b      	b.n	800a4d0 <HAL_RCC_OscConfig+0xb0>
 800a4b8:	4b84      	ldr	r3, [pc, #528]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4a83      	ldr	r2, [pc, #524]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a4be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4c2:	6013      	str	r3, [r2, #0]
 800a4c4:	4b81      	ldr	r3, [pc, #516]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a80      	ldr	r2, [pc, #512]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a4ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d013      	beq.n	800a500 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4d8:	f7fe fd28 	bl	8008f2c <HAL_GetTick>
 800a4dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4de:	e008      	b.n	800a4f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a4e0:	f7fe fd24 	bl	8008f2c <HAL_GetTick>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	693b      	ldr	r3, [r7, #16]
 800a4e8:	1ad3      	subs	r3, r2, r3
 800a4ea:	2b64      	cmp	r3, #100	; 0x64
 800a4ec:	d901      	bls.n	800a4f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a4ee:	2303      	movs	r3, #3
 800a4f0:	e204      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a4f2:	4b76      	ldr	r3, [pc, #472]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d0f0      	beq.n	800a4e0 <HAL_RCC_OscConfig+0xc0>
 800a4fe:	e014      	b.n	800a52a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a500:	f7fe fd14 	bl	8008f2c <HAL_GetTick>
 800a504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a506:	e008      	b.n	800a51a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a508:	f7fe fd10 	bl	8008f2c <HAL_GetTick>
 800a50c:	4602      	mov	r2, r0
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	2b64      	cmp	r3, #100	; 0x64
 800a514:	d901      	bls.n	800a51a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e1f0      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a51a:	4b6c      	ldr	r3, [pc, #432]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1f0      	bne.n	800a508 <HAL_RCC_OscConfig+0xe8>
 800a526:	e000      	b.n	800a52a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 0302 	and.w	r3, r3, #2
 800a532:	2b00      	cmp	r3, #0
 800a534:	d063      	beq.n	800a5fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a536:	4b65      	ldr	r3, [pc, #404]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	f003 030c 	and.w	r3, r3, #12
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00b      	beq.n	800a55a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a542:	4b62      	ldr	r3, [pc, #392]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a544:	689b      	ldr	r3, [r3, #8]
 800a546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a54a:	2b08      	cmp	r3, #8
 800a54c:	d11c      	bne.n	800a588 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a54e:	4b5f      	ldr	r3, [pc, #380]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a556:	2b00      	cmp	r3, #0
 800a558:	d116      	bne.n	800a588 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a55a:	4b5c      	ldr	r3, [pc, #368]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f003 0302 	and.w	r3, r3, #2
 800a562:	2b00      	cmp	r3, #0
 800a564:	d005      	beq.n	800a572 <HAL_RCC_OscConfig+0x152>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	2b01      	cmp	r3, #1
 800a56c:	d001      	beq.n	800a572 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a56e:	2301      	movs	r3, #1
 800a570:	e1c4      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a572:	4b56      	ldr	r3, [pc, #344]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	00db      	lsls	r3, r3, #3
 800a580:	4952      	ldr	r1, [pc, #328]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a582:	4313      	orrs	r3, r2
 800a584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a586:	e03a      	b.n	800a5fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	68db      	ldr	r3, [r3, #12]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d020      	beq.n	800a5d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a590:	4b4f      	ldr	r3, [pc, #316]	; (800a6d0 <HAL_RCC_OscConfig+0x2b0>)
 800a592:	2201      	movs	r2, #1
 800a594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a596:	f7fe fcc9 	bl	8008f2c <HAL_GetTick>
 800a59a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a59c:	e008      	b.n	800a5b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a59e:	f7fe fcc5 	bl	8008f2c <HAL_GetTick>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	1ad3      	subs	r3, r2, r3
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	d901      	bls.n	800a5b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	e1a5      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5b0:	4b46      	ldr	r3, [pc, #280]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 0302 	and.w	r3, r3, #2
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d0f0      	beq.n	800a59e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5bc:	4b43      	ldr	r3, [pc, #268]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	00db      	lsls	r3, r3, #3
 800a5ca:	4940      	ldr	r1, [pc, #256]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	600b      	str	r3, [r1, #0]
 800a5d0:	e015      	b.n	800a5fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a5d2:	4b3f      	ldr	r3, [pc, #252]	; (800a6d0 <HAL_RCC_OscConfig+0x2b0>)
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5d8:	f7fe fca8 	bl	8008f2c <HAL_GetTick>
 800a5dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5de:	e008      	b.n	800a5f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a5e0:	f7fe fca4 	bl	8008f2c <HAL_GetTick>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d901      	bls.n	800a5f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e184      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a5f2:	4b36      	ldr	r3, [pc, #216]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 0302 	and.w	r3, r3, #2
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1f0      	bne.n	800a5e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f003 0308 	and.w	r3, r3, #8
 800a606:	2b00      	cmp	r3, #0
 800a608:	d030      	beq.n	800a66c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	695b      	ldr	r3, [r3, #20]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d016      	beq.n	800a640 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a612:	4b30      	ldr	r3, [pc, #192]	; (800a6d4 <HAL_RCC_OscConfig+0x2b4>)
 800a614:	2201      	movs	r2, #1
 800a616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a618:	f7fe fc88 	bl	8008f2c <HAL_GetTick>
 800a61c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a61e:	e008      	b.n	800a632 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a620:	f7fe fc84 	bl	8008f2c <HAL_GetTick>
 800a624:	4602      	mov	r2, r0
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d901      	bls.n	800a632 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a62e:	2303      	movs	r3, #3
 800a630:	e164      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a632:	4b26      	ldr	r3, [pc, #152]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a636:	f003 0302 	and.w	r3, r3, #2
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d0f0      	beq.n	800a620 <HAL_RCC_OscConfig+0x200>
 800a63e:	e015      	b.n	800a66c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a640:	4b24      	ldr	r3, [pc, #144]	; (800a6d4 <HAL_RCC_OscConfig+0x2b4>)
 800a642:	2200      	movs	r2, #0
 800a644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a646:	f7fe fc71 	bl	8008f2c <HAL_GetTick>
 800a64a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a64c:	e008      	b.n	800a660 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a64e:	f7fe fc6d 	bl	8008f2c <HAL_GetTick>
 800a652:	4602      	mov	r2, r0
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	2b02      	cmp	r3, #2
 800a65a:	d901      	bls.n	800a660 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a65c:	2303      	movs	r3, #3
 800a65e:	e14d      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a660:	4b1a      	ldr	r3, [pc, #104]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a662:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a664:	f003 0302 	and.w	r3, r3, #2
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1f0      	bne.n	800a64e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0304 	and.w	r3, r3, #4
 800a674:	2b00      	cmp	r3, #0
 800a676:	f000 80a0 	beq.w	800a7ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a67a:	2300      	movs	r3, #0
 800a67c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a67e:	4b13      	ldr	r3, [pc, #76]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a686:	2b00      	cmp	r3, #0
 800a688:	d10f      	bne.n	800a6aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a68a:	2300      	movs	r3, #0
 800a68c:	60bb      	str	r3, [r7, #8]
 800a68e:	4b0f      	ldr	r3, [pc, #60]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a692:	4a0e      	ldr	r2, [pc, #56]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a698:	6413      	str	r3, [r2, #64]	; 0x40
 800a69a:	4b0c      	ldr	r3, [pc, #48]	; (800a6cc <HAL_RCC_OscConfig+0x2ac>)
 800a69c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a69e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6a2:	60bb      	str	r3, [r7, #8]
 800a6a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a6a6:	2301      	movs	r3, #1
 800a6a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6aa:	4b0b      	ldr	r3, [pc, #44]	; (800a6d8 <HAL_RCC_OscConfig+0x2b8>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d121      	bne.n	800a6fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a6b6:	4b08      	ldr	r3, [pc, #32]	; (800a6d8 <HAL_RCC_OscConfig+0x2b8>)
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a07      	ldr	r2, [pc, #28]	; (800a6d8 <HAL_RCC_OscConfig+0x2b8>)
 800a6bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a6c2:	f7fe fc33 	bl	8008f2c <HAL_GetTick>
 800a6c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6c8:	e011      	b.n	800a6ee <HAL_RCC_OscConfig+0x2ce>
 800a6ca:	bf00      	nop
 800a6cc:	40023800 	.word	0x40023800
 800a6d0:	42470000 	.word	0x42470000
 800a6d4:	42470e80 	.word	0x42470e80
 800a6d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a6dc:	f7fe fc26 	bl	8008f2c <HAL_GetTick>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	2b02      	cmp	r3, #2
 800a6e8:	d901      	bls.n	800a6ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a6ea:	2303      	movs	r3, #3
 800a6ec:	e106      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6ee:	4b85      	ldr	r3, [pc, #532]	; (800a904 <HAL_RCC_OscConfig+0x4e4>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d0f0      	beq.n	800a6dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	689b      	ldr	r3, [r3, #8]
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d106      	bne.n	800a710 <HAL_RCC_OscConfig+0x2f0>
 800a702:	4b81      	ldr	r3, [pc, #516]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a706:	4a80      	ldr	r2, [pc, #512]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a708:	f043 0301 	orr.w	r3, r3, #1
 800a70c:	6713      	str	r3, [r2, #112]	; 0x70
 800a70e:	e01c      	b.n	800a74a <HAL_RCC_OscConfig+0x32a>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	2b05      	cmp	r3, #5
 800a716:	d10c      	bne.n	800a732 <HAL_RCC_OscConfig+0x312>
 800a718:	4b7b      	ldr	r3, [pc, #492]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a71a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a71c:	4a7a      	ldr	r2, [pc, #488]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a71e:	f043 0304 	orr.w	r3, r3, #4
 800a722:	6713      	str	r3, [r2, #112]	; 0x70
 800a724:	4b78      	ldr	r3, [pc, #480]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a728:	4a77      	ldr	r2, [pc, #476]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a72a:	f043 0301 	orr.w	r3, r3, #1
 800a72e:	6713      	str	r3, [r2, #112]	; 0x70
 800a730:	e00b      	b.n	800a74a <HAL_RCC_OscConfig+0x32a>
 800a732:	4b75      	ldr	r3, [pc, #468]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a736:	4a74      	ldr	r2, [pc, #464]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a738:	f023 0301 	bic.w	r3, r3, #1
 800a73c:	6713      	str	r3, [r2, #112]	; 0x70
 800a73e:	4b72      	ldr	r3, [pc, #456]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a742:	4a71      	ldr	r2, [pc, #452]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a744:	f023 0304 	bic.w	r3, r3, #4
 800a748:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d015      	beq.n	800a77e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a752:	f7fe fbeb 	bl	8008f2c <HAL_GetTick>
 800a756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a758:	e00a      	b.n	800a770 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a75a:	f7fe fbe7 	bl	8008f2c <HAL_GetTick>
 800a75e:	4602      	mov	r2, r0
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	1ad3      	subs	r3, r2, r3
 800a764:	f241 3288 	movw	r2, #5000	; 0x1388
 800a768:	4293      	cmp	r3, r2
 800a76a:	d901      	bls.n	800a770 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a76c:	2303      	movs	r3, #3
 800a76e:	e0c5      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a770:	4b65      	ldr	r3, [pc, #404]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a774:	f003 0302 	and.w	r3, r3, #2
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d0ee      	beq.n	800a75a <HAL_RCC_OscConfig+0x33a>
 800a77c:	e014      	b.n	800a7a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a77e:	f7fe fbd5 	bl	8008f2c <HAL_GetTick>
 800a782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a784:	e00a      	b.n	800a79c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a786:	f7fe fbd1 	bl	8008f2c <HAL_GetTick>
 800a78a:	4602      	mov	r2, r0
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	f241 3288 	movw	r2, #5000	; 0x1388
 800a794:	4293      	cmp	r3, r2
 800a796:	d901      	bls.n	800a79c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a798:	2303      	movs	r3, #3
 800a79a:	e0af      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a79c:	4b5a      	ldr	r3, [pc, #360]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a79e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7a0:	f003 0302 	and.w	r3, r3, #2
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1ee      	bne.n	800a786 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a7a8:	7dfb      	ldrb	r3, [r7, #23]
 800a7aa:	2b01      	cmp	r3, #1
 800a7ac:	d105      	bne.n	800a7ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7ae:	4b56      	ldr	r3, [pc, #344]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7b2:	4a55      	ldr	r2, [pc, #340]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a7b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	699b      	ldr	r3, [r3, #24]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f000 809b 	beq.w	800a8fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a7c4:	4b50      	ldr	r3, [pc, #320]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a7c6:	689b      	ldr	r3, [r3, #8]
 800a7c8:	f003 030c 	and.w	r3, r3, #12
 800a7cc:	2b08      	cmp	r3, #8
 800a7ce:	d05c      	beq.n	800a88a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	699b      	ldr	r3, [r3, #24]
 800a7d4:	2b02      	cmp	r3, #2
 800a7d6:	d141      	bne.n	800a85c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a7d8:	4b4c      	ldr	r3, [pc, #304]	; (800a90c <HAL_RCC_OscConfig+0x4ec>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a7de:	f7fe fba5 	bl	8008f2c <HAL_GetTick>
 800a7e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7e4:	e008      	b.n	800a7f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a7e6:	f7fe fba1 	bl	8008f2c <HAL_GetTick>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	693b      	ldr	r3, [r7, #16]
 800a7ee:	1ad3      	subs	r3, r2, r3
 800a7f0:	2b02      	cmp	r3, #2
 800a7f2:	d901      	bls.n	800a7f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a7f4:	2303      	movs	r3, #3
 800a7f6:	e081      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a7f8:	4b43      	ldr	r3, [pc, #268]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a800:	2b00      	cmp	r3, #0
 800a802:	d1f0      	bne.n	800a7e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	69da      	ldr	r2, [r3, #28]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6a1b      	ldr	r3, [r3, #32]
 800a80c:	431a      	orrs	r2, r3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a812:	019b      	lsls	r3, r3, #6
 800a814:	431a      	orrs	r2, r3
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a81a:	085b      	lsrs	r3, r3, #1
 800a81c:	3b01      	subs	r3, #1
 800a81e:	041b      	lsls	r3, r3, #16
 800a820:	431a      	orrs	r2, r3
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a826:	061b      	lsls	r3, r3, #24
 800a828:	4937      	ldr	r1, [pc, #220]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a82a:	4313      	orrs	r3, r2
 800a82c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a82e:	4b37      	ldr	r3, [pc, #220]	; (800a90c <HAL_RCC_OscConfig+0x4ec>)
 800a830:	2201      	movs	r2, #1
 800a832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a834:	f7fe fb7a 	bl	8008f2c <HAL_GetTick>
 800a838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a83a:	e008      	b.n	800a84e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a83c:	f7fe fb76 	bl	8008f2c <HAL_GetTick>
 800a840:	4602      	mov	r2, r0
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	1ad3      	subs	r3, r2, r3
 800a846:	2b02      	cmp	r3, #2
 800a848:	d901      	bls.n	800a84e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a84a:	2303      	movs	r3, #3
 800a84c:	e056      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a84e:	4b2e      	ldr	r3, [pc, #184]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d0f0      	beq.n	800a83c <HAL_RCC_OscConfig+0x41c>
 800a85a:	e04e      	b.n	800a8fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a85c:	4b2b      	ldr	r3, [pc, #172]	; (800a90c <HAL_RCC_OscConfig+0x4ec>)
 800a85e:	2200      	movs	r2, #0
 800a860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a862:	f7fe fb63 	bl	8008f2c <HAL_GetTick>
 800a866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a868:	e008      	b.n	800a87c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a86a:	f7fe fb5f 	bl	8008f2c <HAL_GetTick>
 800a86e:	4602      	mov	r2, r0
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	2b02      	cmp	r3, #2
 800a876:	d901      	bls.n	800a87c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a878:	2303      	movs	r3, #3
 800a87a:	e03f      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a87c:	4b22      	ldr	r3, [pc, #136]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1f0      	bne.n	800a86a <HAL_RCC_OscConfig+0x44a>
 800a888:	e037      	b.n	800a8fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d101      	bne.n	800a896 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a892:	2301      	movs	r3, #1
 800a894:	e032      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a896:	4b1c      	ldr	r3, [pc, #112]	; (800a908 <HAL_RCC_OscConfig+0x4e8>)
 800a898:	685b      	ldr	r3, [r3, #4]
 800a89a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	699b      	ldr	r3, [r3, #24]
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d028      	beq.n	800a8f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d121      	bne.n	800a8f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d11a      	bne.n	800a8f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	687a      	ldr	r2, [r7, #4]
 800a8ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a8cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d111      	bne.n	800a8f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8dc:	085b      	lsrs	r3, r3, #1
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a8e2:	429a      	cmp	r2, r3
 800a8e4:	d107      	bne.n	800a8f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a8f2:	429a      	cmp	r2, r3
 800a8f4:	d001      	beq.n	800a8fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e000      	b.n	800a8fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3718      	adds	r7, #24
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	40007000 	.word	0x40007000
 800a908:	40023800 	.word	0x40023800
 800a90c:	42470060 	.word	0x42470060

0800a910 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d101      	bne.n	800a924 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a920:	2301      	movs	r3, #1
 800a922:	e0cc      	b.n	800aabe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a924:	4b68      	ldr	r3, [pc, #416]	; (800aac8 <HAL_RCC_ClockConfig+0x1b8>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	f003 0307 	and.w	r3, r3, #7
 800a92c:	683a      	ldr	r2, [r7, #0]
 800a92e:	429a      	cmp	r2, r3
 800a930:	d90c      	bls.n	800a94c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a932:	4b65      	ldr	r3, [pc, #404]	; (800aac8 <HAL_RCC_ClockConfig+0x1b8>)
 800a934:	683a      	ldr	r2, [r7, #0]
 800a936:	b2d2      	uxtb	r2, r2
 800a938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a93a:	4b63      	ldr	r3, [pc, #396]	; (800aac8 <HAL_RCC_ClockConfig+0x1b8>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f003 0307 	and.w	r3, r3, #7
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	429a      	cmp	r2, r3
 800a946:	d001      	beq.n	800a94c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a948:	2301      	movs	r3, #1
 800a94a:	e0b8      	b.n	800aabe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 0302 	and.w	r3, r3, #2
 800a954:	2b00      	cmp	r3, #0
 800a956:	d020      	beq.n	800a99a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f003 0304 	and.w	r3, r3, #4
 800a960:	2b00      	cmp	r3, #0
 800a962:	d005      	beq.n	800a970 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a964:	4b59      	ldr	r3, [pc, #356]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800a966:	689b      	ldr	r3, [r3, #8]
 800a968:	4a58      	ldr	r2, [pc, #352]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800a96a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a96e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 0308 	and.w	r3, r3, #8
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d005      	beq.n	800a988 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a97c:	4b53      	ldr	r3, [pc, #332]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800a97e:	689b      	ldr	r3, [r3, #8]
 800a980:	4a52      	ldr	r2, [pc, #328]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800a982:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a986:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a988:	4b50      	ldr	r3, [pc, #320]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	494d      	ldr	r1, [pc, #308]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800a996:	4313      	orrs	r3, r2
 800a998:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d044      	beq.n	800aa30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	d107      	bne.n	800a9be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9ae:	4b47      	ldr	r3, [pc, #284]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d119      	bne.n	800a9ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e07f      	b.n	800aabe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	2b02      	cmp	r3, #2
 800a9c4:	d003      	beq.n	800a9ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a9ca:	2b03      	cmp	r3, #3
 800a9cc:	d107      	bne.n	800a9de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a9ce:	4b3f      	ldr	r3, [pc, #252]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d109      	bne.n	800a9ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e06f      	b.n	800aabe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a9de:	4b3b      	ldr	r3, [pc, #236]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f003 0302 	and.w	r3, r3, #2
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d101      	bne.n	800a9ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e067      	b.n	800aabe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a9ee:	4b37      	ldr	r3, [pc, #220]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800a9f0:	689b      	ldr	r3, [r3, #8]
 800a9f2:	f023 0203 	bic.w	r2, r3, #3
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	685b      	ldr	r3, [r3, #4]
 800a9fa:	4934      	ldr	r1, [pc, #208]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800a9fc:	4313      	orrs	r3, r2
 800a9fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aa00:	f7fe fa94 	bl	8008f2c <HAL_GetTick>
 800aa04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa06:	e00a      	b.n	800aa1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa08:	f7fe fa90 	bl	8008f2c <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d901      	bls.n	800aa1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e04f      	b.n	800aabe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa1e:	4b2b      	ldr	r3, [pc, #172]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f003 020c 	and.w	r2, r3, #12
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	d1eb      	bne.n	800aa08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aa30:	4b25      	ldr	r3, [pc, #148]	; (800aac8 <HAL_RCC_ClockConfig+0x1b8>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	f003 0307 	and.w	r3, r3, #7
 800aa38:	683a      	ldr	r2, [r7, #0]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	d20c      	bcs.n	800aa58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa3e:	4b22      	ldr	r3, [pc, #136]	; (800aac8 <HAL_RCC_ClockConfig+0x1b8>)
 800aa40:	683a      	ldr	r2, [r7, #0]
 800aa42:	b2d2      	uxtb	r2, r2
 800aa44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa46:	4b20      	ldr	r3, [pc, #128]	; (800aac8 <HAL_RCC_ClockConfig+0x1b8>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f003 0307 	and.w	r3, r3, #7
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	429a      	cmp	r2, r3
 800aa52:	d001      	beq.n	800aa58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	e032      	b.n	800aabe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f003 0304 	and.w	r3, r3, #4
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d008      	beq.n	800aa76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa64:	4b19      	ldr	r3, [pc, #100]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800aa66:	689b      	ldr	r3, [r3, #8]
 800aa68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	68db      	ldr	r3, [r3, #12]
 800aa70:	4916      	ldr	r1, [pc, #88]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800aa72:	4313      	orrs	r3, r2
 800aa74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 0308 	and.w	r3, r3, #8
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d009      	beq.n	800aa96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aa82:	4b12      	ldr	r3, [pc, #72]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	00db      	lsls	r3, r3, #3
 800aa90:	490e      	ldr	r1, [pc, #56]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800aa92:	4313      	orrs	r3, r2
 800aa94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aa96:	f000 f82d 	bl	800aaf4 <HAL_RCC_GetSysClockFreq>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	4b0b      	ldr	r3, [pc, #44]	; (800aacc <HAL_RCC_ClockConfig+0x1bc>)
 800aa9e:	689b      	ldr	r3, [r3, #8]
 800aaa0:	091b      	lsrs	r3, r3, #4
 800aaa2:	f003 030f 	and.w	r3, r3, #15
 800aaa6:	490a      	ldr	r1, [pc, #40]	; (800aad0 <HAL_RCC_ClockConfig+0x1c0>)
 800aaa8:	5ccb      	ldrb	r3, [r1, r3]
 800aaaa:	fa22 f303 	lsr.w	r3, r2, r3
 800aaae:	4a09      	ldr	r2, [pc, #36]	; (800aad4 <HAL_RCC_ClockConfig+0x1c4>)
 800aab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800aab2:	4b09      	ldr	r3, [pc, #36]	; (800aad8 <HAL_RCC_ClockConfig+0x1c8>)
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7fe f9f4 	bl	8008ea4 <HAL_InitTick>

  return HAL_OK;
 800aabc:	2300      	movs	r3, #0
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	3710      	adds	r7, #16
 800aac2:	46bd      	mov	sp, r7
 800aac4:	bd80      	pop	{r7, pc}
 800aac6:	bf00      	nop
 800aac8:	40023c00 	.word	0x40023c00
 800aacc:	40023800 	.word	0x40023800
 800aad0:	08010708 	.word	0x08010708
 800aad4:	20000048 	.word	0x20000048
 800aad8:	2000004c 	.word	0x2000004c

0800aadc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800aadc:	b480      	push	{r7}
 800aade:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800aae0:	4b03      	ldr	r3, [pc, #12]	; (800aaf0 <HAL_RCC_EnableCSS+0x14>)
 800aae2:	2201      	movs	r2, #1
 800aae4:	601a      	str	r2, [r3, #0]
}
 800aae6:	bf00      	nop
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	4247004c 	.word	0x4247004c

0800aaf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aaf4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800aaf8:	b084      	sub	sp, #16
 800aafa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800aafc:	2300      	movs	r3, #0
 800aafe:	607b      	str	r3, [r7, #4]
 800ab00:	2300      	movs	r3, #0
 800ab02:	60fb      	str	r3, [r7, #12]
 800ab04:	2300      	movs	r3, #0
 800ab06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab0c:	4b67      	ldr	r3, [pc, #412]	; (800acac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	f003 030c 	and.w	r3, r3, #12
 800ab14:	2b08      	cmp	r3, #8
 800ab16:	d00d      	beq.n	800ab34 <HAL_RCC_GetSysClockFreq+0x40>
 800ab18:	2b08      	cmp	r3, #8
 800ab1a:	f200 80bd 	bhi.w	800ac98 <HAL_RCC_GetSysClockFreq+0x1a4>
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d002      	beq.n	800ab28 <HAL_RCC_GetSysClockFreq+0x34>
 800ab22:	2b04      	cmp	r3, #4
 800ab24:	d003      	beq.n	800ab2e <HAL_RCC_GetSysClockFreq+0x3a>
 800ab26:	e0b7      	b.n	800ac98 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ab28:	4b61      	ldr	r3, [pc, #388]	; (800acb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ab2a:	60bb      	str	r3, [r7, #8]
       break;
 800ab2c:	e0b7      	b.n	800ac9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ab2e:	4b61      	ldr	r3, [pc, #388]	; (800acb4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800ab30:	60bb      	str	r3, [r7, #8]
      break;
 800ab32:	e0b4      	b.n	800ac9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ab34:	4b5d      	ldr	r3, [pc, #372]	; (800acac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ab3e:	4b5b      	ldr	r3, [pc, #364]	; (800acac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d04d      	beq.n	800abe6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab4a:	4b58      	ldr	r3, [pc, #352]	; (800acac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	099b      	lsrs	r3, r3, #6
 800ab50:	461a      	mov	r2, r3
 800ab52:	f04f 0300 	mov.w	r3, #0
 800ab56:	f240 10ff 	movw	r0, #511	; 0x1ff
 800ab5a:	f04f 0100 	mov.w	r1, #0
 800ab5e:	ea02 0800 	and.w	r8, r2, r0
 800ab62:	ea03 0901 	and.w	r9, r3, r1
 800ab66:	4640      	mov	r0, r8
 800ab68:	4649      	mov	r1, r9
 800ab6a:	f04f 0200 	mov.w	r2, #0
 800ab6e:	f04f 0300 	mov.w	r3, #0
 800ab72:	014b      	lsls	r3, r1, #5
 800ab74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ab78:	0142      	lsls	r2, r0, #5
 800ab7a:	4610      	mov	r0, r2
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	ebb0 0008 	subs.w	r0, r0, r8
 800ab82:	eb61 0109 	sbc.w	r1, r1, r9
 800ab86:	f04f 0200 	mov.w	r2, #0
 800ab8a:	f04f 0300 	mov.w	r3, #0
 800ab8e:	018b      	lsls	r3, r1, #6
 800ab90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ab94:	0182      	lsls	r2, r0, #6
 800ab96:	1a12      	subs	r2, r2, r0
 800ab98:	eb63 0301 	sbc.w	r3, r3, r1
 800ab9c:	f04f 0000 	mov.w	r0, #0
 800aba0:	f04f 0100 	mov.w	r1, #0
 800aba4:	00d9      	lsls	r1, r3, #3
 800aba6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800abaa:	00d0      	lsls	r0, r2, #3
 800abac:	4602      	mov	r2, r0
 800abae:	460b      	mov	r3, r1
 800abb0:	eb12 0208 	adds.w	r2, r2, r8
 800abb4:	eb43 0309 	adc.w	r3, r3, r9
 800abb8:	f04f 0000 	mov.w	r0, #0
 800abbc:	f04f 0100 	mov.w	r1, #0
 800abc0:	0259      	lsls	r1, r3, #9
 800abc2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800abc6:	0250      	lsls	r0, r2, #9
 800abc8:	4602      	mov	r2, r0
 800abca:	460b      	mov	r3, r1
 800abcc:	4610      	mov	r0, r2
 800abce:	4619      	mov	r1, r3
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	461a      	mov	r2, r3
 800abd4:	f04f 0300 	mov.w	r3, #0
 800abd8:	f7f5 ffd2 	bl	8000b80 <__aeabi_uldivmod>
 800abdc:	4602      	mov	r2, r0
 800abde:	460b      	mov	r3, r1
 800abe0:	4613      	mov	r3, r2
 800abe2:	60fb      	str	r3, [r7, #12]
 800abe4:	e04a      	b.n	800ac7c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800abe6:	4b31      	ldr	r3, [pc, #196]	; (800acac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	099b      	lsrs	r3, r3, #6
 800abec:	461a      	mov	r2, r3
 800abee:	f04f 0300 	mov.w	r3, #0
 800abf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800abf6:	f04f 0100 	mov.w	r1, #0
 800abfa:	ea02 0400 	and.w	r4, r2, r0
 800abfe:	ea03 0501 	and.w	r5, r3, r1
 800ac02:	4620      	mov	r0, r4
 800ac04:	4629      	mov	r1, r5
 800ac06:	f04f 0200 	mov.w	r2, #0
 800ac0a:	f04f 0300 	mov.w	r3, #0
 800ac0e:	014b      	lsls	r3, r1, #5
 800ac10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800ac14:	0142      	lsls	r2, r0, #5
 800ac16:	4610      	mov	r0, r2
 800ac18:	4619      	mov	r1, r3
 800ac1a:	1b00      	subs	r0, r0, r4
 800ac1c:	eb61 0105 	sbc.w	r1, r1, r5
 800ac20:	f04f 0200 	mov.w	r2, #0
 800ac24:	f04f 0300 	mov.w	r3, #0
 800ac28:	018b      	lsls	r3, r1, #6
 800ac2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800ac2e:	0182      	lsls	r2, r0, #6
 800ac30:	1a12      	subs	r2, r2, r0
 800ac32:	eb63 0301 	sbc.w	r3, r3, r1
 800ac36:	f04f 0000 	mov.w	r0, #0
 800ac3a:	f04f 0100 	mov.w	r1, #0
 800ac3e:	00d9      	lsls	r1, r3, #3
 800ac40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ac44:	00d0      	lsls	r0, r2, #3
 800ac46:	4602      	mov	r2, r0
 800ac48:	460b      	mov	r3, r1
 800ac4a:	1912      	adds	r2, r2, r4
 800ac4c:	eb45 0303 	adc.w	r3, r5, r3
 800ac50:	f04f 0000 	mov.w	r0, #0
 800ac54:	f04f 0100 	mov.w	r1, #0
 800ac58:	0299      	lsls	r1, r3, #10
 800ac5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800ac5e:	0290      	lsls	r0, r2, #10
 800ac60:	4602      	mov	r2, r0
 800ac62:	460b      	mov	r3, r1
 800ac64:	4610      	mov	r0, r2
 800ac66:	4619      	mov	r1, r3
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	f04f 0300 	mov.w	r3, #0
 800ac70:	f7f5 ff86 	bl	8000b80 <__aeabi_uldivmod>
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4613      	mov	r3, r2
 800ac7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ac7c:	4b0b      	ldr	r3, [pc, #44]	; (800acac <HAL_RCC_GetSysClockFreq+0x1b8>)
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	0c1b      	lsrs	r3, r3, #16
 800ac82:	f003 0303 	and.w	r3, r3, #3
 800ac86:	3301      	adds	r3, #1
 800ac88:	005b      	lsls	r3, r3, #1
 800ac8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	683b      	ldr	r3, [r7, #0]
 800ac90:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac94:	60bb      	str	r3, [r7, #8]
      break;
 800ac96:	e002      	b.n	800ac9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ac98:	4b05      	ldr	r3, [pc, #20]	; (800acb0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800ac9a:	60bb      	str	r3, [r7, #8]
      break;
 800ac9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ac9e:	68bb      	ldr	r3, [r7, #8]
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3710      	adds	r7, #16
 800aca4:	46bd      	mov	sp, r7
 800aca6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800acaa:	bf00      	nop
 800acac:	40023800 	.word	0x40023800
 800acb0:	00f42400 	.word	0x00f42400
 800acb4:	007a1200 	.word	0x007a1200

0800acb8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800acbc:	4b06      	ldr	r3, [pc, #24]	; (800acd8 <HAL_RCC_NMI_IRQHandler+0x20>)
 800acbe:	68db      	ldr	r3, [r3, #12]
 800acc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acc4:	2b80      	cmp	r3, #128	; 0x80
 800acc6:	d104      	bne.n	800acd2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800acc8:	f000 f80a 	bl	800ace0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800accc:	4b03      	ldr	r3, [pc, #12]	; (800acdc <HAL_RCC_NMI_IRQHandler+0x24>)
 800acce:	2280      	movs	r2, #128	; 0x80
 800acd0:	701a      	strb	r2, [r3, #0]
  }
}
 800acd2:	bf00      	nop
 800acd4:	bd80      	pop	{r7, pc}
 800acd6:	bf00      	nop
 800acd8:	40023800 	.word	0x40023800
 800acdc:	4002380e 	.word	0x4002380e

0800ace0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800ace0:	b480      	push	{r7}
 800ace2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800ace4:	bf00      	nop
 800ace6:	46bd      	mov	sp, r7
 800ace8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acec:	4770      	bx	lr

0800acee <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800acee:	b580      	push	{r7, lr}
 800acf0:	b084      	sub	sp, #16
 800acf2:	af00      	add	r7, sp, #0
 800acf4:	60f8      	str	r0, [r7, #12]
 800acf6:	60b9      	str	r1, [r7, #8]
 800acf8:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d101      	bne.n	800ad04 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e034      	b.n	800ad6e <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800ad0a:	b2db      	uxtb	r3, r3
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d106      	bne.n	800ad1e <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800ad18:	68f8      	ldr	r0, [r7, #12]
 800ad1a:	f7fe f811 	bl	8008d40 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	3308      	adds	r3, #8
 800ad26:	4619      	mov	r1, r3
 800ad28:	4610      	mov	r0, r2
 800ad2a:	f000 feab 	bl	800ba84 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	6818      	ldr	r0, [r3, #0]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	461a      	mov	r2, r3
 800ad38:	68b9      	ldr	r1, [r7, #8]
 800ad3a:	f000 fef5 	bl	800bb28 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	6858      	ldr	r0, [r3, #4]
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	689a      	ldr	r2, [r3, #8]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad4a:	6879      	ldr	r1, [r7, #4]
 800ad4c:	f000 ff2a 	bl	800bba4 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	68fa      	ldr	r2, [r7, #12]
 800ad56:	6892      	ldr	r2, [r2, #8]
 800ad58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	6892      	ldr	r2, [r2, #8]
 800ad64:	f041 0101 	orr.w	r1, r1, #1
 800ad68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800ad6c:	2300      	movs	r3, #0
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3710      	adds	r7, #16
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}

0800ad76 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ad76:	b580      	push	{r7, lr}
 800ad78:	b082      	sub	sp, #8
 800ad7a:	af00      	add	r7, sp, #0
 800ad7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d101      	bne.n	800ad88 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	e041      	b.n	800ae0c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d106      	bne.n	800ada2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f7fd ff03 	bl	8008ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2202      	movs	r2, #2
 800ada6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	3304      	adds	r3, #4
 800adb2:	4619      	mov	r1, r3
 800adb4:	4610      	mov	r0, r2
 800adb6:	f000 fad9 	bl	800b36c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2201      	movs	r2, #1
 800adbe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2201      	movs	r2, #1
 800adc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	2201      	movs	r2, #1
 800adce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2201      	movs	r2, #1
 800add6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	2201      	movs	r2, #1
 800adde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2201      	movs	r2, #1
 800ade6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2201      	movs	r2, #1
 800adee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2201      	movs	r2, #1
 800adf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2201      	movs	r2, #1
 800adfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2201      	movs	r2, #1
 800ae06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ae0a:	2300      	movs	r3, #0
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3708      	adds	r7, #8
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d101      	bne.n	800ae26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ae22:	2301      	movs	r3, #1
 800ae24:	e041      	b.n	800aeaa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d106      	bne.n	800ae40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f000 f839 	bl	800aeb2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	2202      	movs	r2, #2
 800ae44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681a      	ldr	r2, [r3, #0]
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	3304      	adds	r3, #4
 800ae50:	4619      	mov	r1, r3
 800ae52:	4610      	mov	r0, r2
 800ae54:	f000 fa8a 	bl	800b36c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	2201      	movs	r2, #1
 800ae5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2201      	movs	r2, #1
 800ae64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2201      	movs	r2, #1
 800ae74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2201      	movs	r2, #1
 800ae8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2201      	movs	r2, #1
 800ae9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}

0800aeb2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800aeb2:	b480      	push	{r7}
 800aeb4:	b083      	sub	sp, #12
 800aeb6:	af00      	add	r7, sp, #0
 800aeb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800aeba:	bf00      	nop
 800aebc:	370c      	adds	r7, #12
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
	...

0800aec8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
 800aed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d109      	bne.n	800aeec <HAL_TIM_PWM_Start+0x24>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aede:	b2db      	uxtb	r3, r3
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	bf14      	ite	ne
 800aee4:	2301      	movne	r3, #1
 800aee6:	2300      	moveq	r3, #0
 800aee8:	b2db      	uxtb	r3, r3
 800aeea:	e022      	b.n	800af32 <HAL_TIM_PWM_Start+0x6a>
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	2b04      	cmp	r3, #4
 800aef0:	d109      	bne.n	800af06 <HAL_TIM_PWM_Start+0x3e>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	bf14      	ite	ne
 800aefe:	2301      	movne	r3, #1
 800af00:	2300      	moveq	r3, #0
 800af02:	b2db      	uxtb	r3, r3
 800af04:	e015      	b.n	800af32 <HAL_TIM_PWM_Start+0x6a>
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	2b08      	cmp	r3, #8
 800af0a:	d109      	bne.n	800af20 <HAL_TIM_PWM_Start+0x58>
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af12:	b2db      	uxtb	r3, r3
 800af14:	2b01      	cmp	r3, #1
 800af16:	bf14      	ite	ne
 800af18:	2301      	movne	r3, #1
 800af1a:	2300      	moveq	r3, #0
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	e008      	b.n	800af32 <HAL_TIM_PWM_Start+0x6a>
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af26:	b2db      	uxtb	r3, r3
 800af28:	2b01      	cmp	r3, #1
 800af2a:	bf14      	ite	ne
 800af2c:	2301      	movne	r3, #1
 800af2e:	2300      	moveq	r3, #0
 800af30:	b2db      	uxtb	r3, r3
 800af32:	2b00      	cmp	r3, #0
 800af34:	d001      	beq.n	800af3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	e07c      	b.n	800b034 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d104      	bne.n	800af4a <HAL_TIM_PWM_Start+0x82>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2202      	movs	r2, #2
 800af44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800af48:	e013      	b.n	800af72 <HAL_TIM_PWM_Start+0xaa>
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	2b04      	cmp	r3, #4
 800af4e:	d104      	bne.n	800af5a <HAL_TIM_PWM_Start+0x92>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2202      	movs	r2, #2
 800af54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800af58:	e00b      	b.n	800af72 <HAL_TIM_PWM_Start+0xaa>
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	2b08      	cmp	r3, #8
 800af5e:	d104      	bne.n	800af6a <HAL_TIM_PWM_Start+0xa2>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2202      	movs	r2, #2
 800af64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800af68:	e003      	b.n	800af72 <HAL_TIM_PWM_Start+0xaa>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2202      	movs	r2, #2
 800af6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2201      	movs	r2, #1
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 fce0 	bl	800b940 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4a2d      	ldr	r2, [pc, #180]	; (800b03c <HAL_TIM_PWM_Start+0x174>)
 800af86:	4293      	cmp	r3, r2
 800af88:	d004      	beq.n	800af94 <HAL_TIM_PWM_Start+0xcc>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4a2c      	ldr	r2, [pc, #176]	; (800b040 <HAL_TIM_PWM_Start+0x178>)
 800af90:	4293      	cmp	r3, r2
 800af92:	d101      	bne.n	800af98 <HAL_TIM_PWM_Start+0xd0>
 800af94:	2301      	movs	r3, #1
 800af96:	e000      	b.n	800af9a <HAL_TIM_PWM_Start+0xd2>
 800af98:	2300      	movs	r3, #0
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d007      	beq.n	800afae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800afac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	4a22      	ldr	r2, [pc, #136]	; (800b03c <HAL_TIM_PWM_Start+0x174>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d022      	beq.n	800affe <HAL_TIM_PWM_Start+0x136>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afc0:	d01d      	beq.n	800affe <HAL_TIM_PWM_Start+0x136>
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	4a1f      	ldr	r2, [pc, #124]	; (800b044 <HAL_TIM_PWM_Start+0x17c>)
 800afc8:	4293      	cmp	r3, r2
 800afca:	d018      	beq.n	800affe <HAL_TIM_PWM_Start+0x136>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a1d      	ldr	r2, [pc, #116]	; (800b048 <HAL_TIM_PWM_Start+0x180>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d013      	beq.n	800affe <HAL_TIM_PWM_Start+0x136>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a1c      	ldr	r2, [pc, #112]	; (800b04c <HAL_TIM_PWM_Start+0x184>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d00e      	beq.n	800affe <HAL_TIM_PWM_Start+0x136>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a16      	ldr	r2, [pc, #88]	; (800b040 <HAL_TIM_PWM_Start+0x178>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d009      	beq.n	800affe <HAL_TIM_PWM_Start+0x136>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4a18      	ldr	r2, [pc, #96]	; (800b050 <HAL_TIM_PWM_Start+0x188>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d004      	beq.n	800affe <HAL_TIM_PWM_Start+0x136>
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	4a16      	ldr	r2, [pc, #88]	; (800b054 <HAL_TIM_PWM_Start+0x18c>)
 800affa:	4293      	cmp	r3, r2
 800affc:	d111      	bne.n	800b022 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	689b      	ldr	r3, [r3, #8]
 800b004:	f003 0307 	and.w	r3, r3, #7
 800b008:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2b06      	cmp	r3, #6
 800b00e:	d010      	beq.n	800b032 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f042 0201 	orr.w	r2, r2, #1
 800b01e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b020:	e007      	b.n	800b032 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	681a      	ldr	r2, [r3, #0]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f042 0201 	orr.w	r2, r2, #1
 800b030:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b032:	2300      	movs	r3, #0
}
 800b034:	4618      	mov	r0, r3
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}
 800b03c:	40010000 	.word	0x40010000
 800b040:	40010400 	.word	0x40010400
 800b044:	40000400 	.word	0x40000400
 800b048:	40000800 	.word	0x40000800
 800b04c:	40000c00 	.word	0x40000c00
 800b050:	40014000 	.word	0x40014000
 800b054:	40001800 	.word	0x40001800

0800b058 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b086      	sub	sp, #24
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d101      	bne.n	800b076 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b072:	2302      	movs	r3, #2
 800b074:	e0ae      	b.n	800b1d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2201      	movs	r2, #1
 800b07a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2b0c      	cmp	r3, #12
 800b082:	f200 809f 	bhi.w	800b1c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b086:	a201      	add	r2, pc, #4	; (adr r2, 800b08c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b08c:	0800b0c1 	.word	0x0800b0c1
 800b090:	0800b1c5 	.word	0x0800b1c5
 800b094:	0800b1c5 	.word	0x0800b1c5
 800b098:	0800b1c5 	.word	0x0800b1c5
 800b09c:	0800b101 	.word	0x0800b101
 800b0a0:	0800b1c5 	.word	0x0800b1c5
 800b0a4:	0800b1c5 	.word	0x0800b1c5
 800b0a8:	0800b1c5 	.word	0x0800b1c5
 800b0ac:	0800b143 	.word	0x0800b143
 800b0b0:	0800b1c5 	.word	0x0800b1c5
 800b0b4:	0800b1c5 	.word	0x0800b1c5
 800b0b8:	0800b1c5 	.word	0x0800b1c5
 800b0bc:	0800b183 	.word	0x0800b183
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	68b9      	ldr	r1, [r7, #8]
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	f000 f9f0 	bl	800b4ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	699a      	ldr	r2, [r3, #24]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f042 0208 	orr.w	r2, r2, #8
 800b0da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	699a      	ldr	r2, [r3, #24]
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f022 0204 	bic.w	r2, r2, #4
 800b0ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	6999      	ldr	r1, [r3, #24]
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	691a      	ldr	r2, [r3, #16]
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	430a      	orrs	r2, r1
 800b0fc:	619a      	str	r2, [r3, #24]
      break;
 800b0fe:	e064      	b.n	800b1ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	68b9      	ldr	r1, [r7, #8]
 800b106:	4618      	mov	r0, r3
 800b108:	f000 fa40 	bl	800b58c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	699a      	ldr	r2, [r3, #24]
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b11a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	699a      	ldr	r2, [r3, #24]
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b12a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	6999      	ldr	r1, [r3, #24]
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	691b      	ldr	r3, [r3, #16]
 800b136:	021a      	lsls	r2, r3, #8
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	430a      	orrs	r2, r1
 800b13e:	619a      	str	r2, [r3, #24]
      break;
 800b140:	e043      	b.n	800b1ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	68b9      	ldr	r1, [r7, #8]
 800b148:	4618      	mov	r0, r3
 800b14a:	f000 fa95 	bl	800b678 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	69da      	ldr	r2, [r3, #28]
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f042 0208 	orr.w	r2, r2, #8
 800b15c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	69da      	ldr	r2, [r3, #28]
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f022 0204 	bic.w	r2, r2, #4
 800b16c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	69d9      	ldr	r1, [r3, #28]
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	691a      	ldr	r2, [r3, #16]
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	430a      	orrs	r2, r1
 800b17e:	61da      	str	r2, [r3, #28]
      break;
 800b180:	e023      	b.n	800b1ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b182:	68fb      	ldr	r3, [r7, #12]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	68b9      	ldr	r1, [r7, #8]
 800b188:	4618      	mov	r0, r3
 800b18a:	f000 fae9 	bl	800b760 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	69da      	ldr	r2, [r3, #28]
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b19c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	69da      	ldr	r2, [r3, #28]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b1ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	69d9      	ldr	r1, [r3, #28]
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	021a      	lsls	r2, r3, #8
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	430a      	orrs	r2, r1
 800b1c0:	61da      	str	r2, [r3, #28]
      break;
 800b1c2:	e002      	b.n	800b1ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b1c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3718      	adds	r7, #24
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b084      	sub	sp, #16
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1f0:	2b01      	cmp	r3, #1
 800b1f2:	d101      	bne.n	800b1f8 <HAL_TIM_ConfigClockSource+0x1c>
 800b1f4:	2302      	movs	r3, #2
 800b1f6:	e0b4      	b.n	800b362 <HAL_TIM_ConfigClockSource+0x186>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	2201      	movs	r2, #1
 800b1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2202      	movs	r2, #2
 800b204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b21e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68ba      	ldr	r2, [r7, #8]
 800b226:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b230:	d03e      	beq.n	800b2b0 <HAL_TIM_ConfigClockSource+0xd4>
 800b232:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b236:	f200 8087 	bhi.w	800b348 <HAL_TIM_ConfigClockSource+0x16c>
 800b23a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b23e:	f000 8086 	beq.w	800b34e <HAL_TIM_ConfigClockSource+0x172>
 800b242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b246:	d87f      	bhi.n	800b348 <HAL_TIM_ConfigClockSource+0x16c>
 800b248:	2b70      	cmp	r3, #112	; 0x70
 800b24a:	d01a      	beq.n	800b282 <HAL_TIM_ConfigClockSource+0xa6>
 800b24c:	2b70      	cmp	r3, #112	; 0x70
 800b24e:	d87b      	bhi.n	800b348 <HAL_TIM_ConfigClockSource+0x16c>
 800b250:	2b60      	cmp	r3, #96	; 0x60
 800b252:	d050      	beq.n	800b2f6 <HAL_TIM_ConfigClockSource+0x11a>
 800b254:	2b60      	cmp	r3, #96	; 0x60
 800b256:	d877      	bhi.n	800b348 <HAL_TIM_ConfigClockSource+0x16c>
 800b258:	2b50      	cmp	r3, #80	; 0x50
 800b25a:	d03c      	beq.n	800b2d6 <HAL_TIM_ConfigClockSource+0xfa>
 800b25c:	2b50      	cmp	r3, #80	; 0x50
 800b25e:	d873      	bhi.n	800b348 <HAL_TIM_ConfigClockSource+0x16c>
 800b260:	2b40      	cmp	r3, #64	; 0x40
 800b262:	d058      	beq.n	800b316 <HAL_TIM_ConfigClockSource+0x13a>
 800b264:	2b40      	cmp	r3, #64	; 0x40
 800b266:	d86f      	bhi.n	800b348 <HAL_TIM_ConfigClockSource+0x16c>
 800b268:	2b30      	cmp	r3, #48	; 0x30
 800b26a:	d064      	beq.n	800b336 <HAL_TIM_ConfigClockSource+0x15a>
 800b26c:	2b30      	cmp	r3, #48	; 0x30
 800b26e:	d86b      	bhi.n	800b348 <HAL_TIM_ConfigClockSource+0x16c>
 800b270:	2b20      	cmp	r3, #32
 800b272:	d060      	beq.n	800b336 <HAL_TIM_ConfigClockSource+0x15a>
 800b274:	2b20      	cmp	r3, #32
 800b276:	d867      	bhi.n	800b348 <HAL_TIM_ConfigClockSource+0x16c>
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d05c      	beq.n	800b336 <HAL_TIM_ConfigClockSource+0x15a>
 800b27c:	2b10      	cmp	r3, #16
 800b27e:	d05a      	beq.n	800b336 <HAL_TIM_ConfigClockSource+0x15a>
 800b280:	e062      	b.n	800b348 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6818      	ldr	r0, [r3, #0]
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	6899      	ldr	r1, [r3, #8]
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	685a      	ldr	r2, [r3, #4]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	68db      	ldr	r3, [r3, #12]
 800b292:	f000 fb35 	bl	800b900 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b2a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	68ba      	ldr	r2, [r7, #8]
 800b2ac:	609a      	str	r2, [r3, #8]
      break;
 800b2ae:	e04f      	b.n	800b350 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6818      	ldr	r0, [r3, #0]
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	6899      	ldr	r1, [r3, #8]
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	68db      	ldr	r3, [r3, #12]
 800b2c0:	f000 fb1e 	bl	800b900 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	689a      	ldr	r2, [r3, #8]
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b2d2:	609a      	str	r2, [r3, #8]
      break;
 800b2d4:	e03c      	b.n	800b350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6818      	ldr	r0, [r3, #0]
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	6859      	ldr	r1, [r3, #4]
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	68db      	ldr	r3, [r3, #12]
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	f000 fa92 	bl	800b80c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	2150      	movs	r1, #80	; 0x50
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 faeb 	bl	800b8ca <TIM_ITRx_SetConfig>
      break;
 800b2f4:	e02c      	b.n	800b350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6818      	ldr	r0, [r3, #0]
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	6859      	ldr	r1, [r3, #4]
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	68db      	ldr	r3, [r3, #12]
 800b302:	461a      	mov	r2, r3
 800b304:	f000 fab1 	bl	800b86a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	2160      	movs	r1, #96	; 0x60
 800b30e:	4618      	mov	r0, r3
 800b310:	f000 fadb 	bl	800b8ca <TIM_ITRx_SetConfig>
      break;
 800b314:	e01c      	b.n	800b350 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6818      	ldr	r0, [r3, #0]
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	6859      	ldr	r1, [r3, #4]
 800b31e:	683b      	ldr	r3, [r7, #0]
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	461a      	mov	r2, r3
 800b324:	f000 fa72 	bl	800b80c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2140      	movs	r1, #64	; 0x40
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 facb 	bl	800b8ca <TIM_ITRx_SetConfig>
      break;
 800b334:	e00c      	b.n	800b350 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681a      	ldr	r2, [r3, #0]
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	4619      	mov	r1, r3
 800b340:	4610      	mov	r0, r2
 800b342:	f000 fac2 	bl	800b8ca <TIM_ITRx_SetConfig>
      break;
 800b346:	e003      	b.n	800b350 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	73fb      	strb	r3, [r7, #15]
      break;
 800b34c:	e000      	b.n	800b350 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b34e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2201      	movs	r2, #1
 800b354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b360:	7bfb      	ldrb	r3, [r7, #15]
}
 800b362:	4618      	mov	r0, r3
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
	...

0800b36c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b36c:	b480      	push	{r7}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
 800b374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a40      	ldr	r2, [pc, #256]	; (800b480 <TIM_Base_SetConfig+0x114>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d013      	beq.n	800b3ac <TIM_Base_SetConfig+0x40>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b38a:	d00f      	beq.n	800b3ac <TIM_Base_SetConfig+0x40>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a3d      	ldr	r2, [pc, #244]	; (800b484 <TIM_Base_SetConfig+0x118>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d00b      	beq.n	800b3ac <TIM_Base_SetConfig+0x40>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a3c      	ldr	r2, [pc, #240]	; (800b488 <TIM_Base_SetConfig+0x11c>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d007      	beq.n	800b3ac <TIM_Base_SetConfig+0x40>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a3b      	ldr	r2, [pc, #236]	; (800b48c <TIM_Base_SetConfig+0x120>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d003      	beq.n	800b3ac <TIM_Base_SetConfig+0x40>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a3a      	ldr	r2, [pc, #232]	; (800b490 <TIM_Base_SetConfig+0x124>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d108      	bne.n	800b3be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	685b      	ldr	r3, [r3, #4]
 800b3b8:	68fa      	ldr	r2, [r7, #12]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	4a2f      	ldr	r2, [pc, #188]	; (800b480 <TIM_Base_SetConfig+0x114>)
 800b3c2:	4293      	cmp	r3, r2
 800b3c4:	d02b      	beq.n	800b41e <TIM_Base_SetConfig+0xb2>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3cc:	d027      	beq.n	800b41e <TIM_Base_SetConfig+0xb2>
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	4a2c      	ldr	r2, [pc, #176]	; (800b484 <TIM_Base_SetConfig+0x118>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d023      	beq.n	800b41e <TIM_Base_SetConfig+0xb2>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4a2b      	ldr	r2, [pc, #172]	; (800b488 <TIM_Base_SetConfig+0x11c>)
 800b3da:	4293      	cmp	r3, r2
 800b3dc:	d01f      	beq.n	800b41e <TIM_Base_SetConfig+0xb2>
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	4a2a      	ldr	r2, [pc, #168]	; (800b48c <TIM_Base_SetConfig+0x120>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d01b      	beq.n	800b41e <TIM_Base_SetConfig+0xb2>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4a29      	ldr	r2, [pc, #164]	; (800b490 <TIM_Base_SetConfig+0x124>)
 800b3ea:	4293      	cmp	r3, r2
 800b3ec:	d017      	beq.n	800b41e <TIM_Base_SetConfig+0xb2>
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	4a28      	ldr	r2, [pc, #160]	; (800b494 <TIM_Base_SetConfig+0x128>)
 800b3f2:	4293      	cmp	r3, r2
 800b3f4:	d013      	beq.n	800b41e <TIM_Base_SetConfig+0xb2>
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	4a27      	ldr	r2, [pc, #156]	; (800b498 <TIM_Base_SetConfig+0x12c>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d00f      	beq.n	800b41e <TIM_Base_SetConfig+0xb2>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	4a26      	ldr	r2, [pc, #152]	; (800b49c <TIM_Base_SetConfig+0x130>)
 800b402:	4293      	cmp	r3, r2
 800b404:	d00b      	beq.n	800b41e <TIM_Base_SetConfig+0xb2>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4a25      	ldr	r2, [pc, #148]	; (800b4a0 <TIM_Base_SetConfig+0x134>)
 800b40a:	4293      	cmp	r3, r2
 800b40c:	d007      	beq.n	800b41e <TIM_Base_SetConfig+0xb2>
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	4a24      	ldr	r2, [pc, #144]	; (800b4a4 <TIM_Base_SetConfig+0x138>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d003      	beq.n	800b41e <TIM_Base_SetConfig+0xb2>
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	4a23      	ldr	r2, [pc, #140]	; (800b4a8 <TIM_Base_SetConfig+0x13c>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d108      	bne.n	800b430 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b424:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	68db      	ldr	r3, [r3, #12]
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	4313      	orrs	r3, r2
 800b42e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	695b      	ldr	r3, [r3, #20]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	68fa      	ldr	r2, [r7, #12]
 800b442:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	689a      	ldr	r2, [r3, #8]
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	4a0a      	ldr	r2, [pc, #40]	; (800b480 <TIM_Base_SetConfig+0x114>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d003      	beq.n	800b464 <TIM_Base_SetConfig+0xf8>
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	4a0c      	ldr	r2, [pc, #48]	; (800b490 <TIM_Base_SetConfig+0x124>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d103      	bne.n	800b46c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	691a      	ldr	r2, [r3, #16]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	2201      	movs	r2, #1
 800b470:	615a      	str	r2, [r3, #20]
}
 800b472:	bf00      	nop
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
 800b47e:	bf00      	nop
 800b480:	40010000 	.word	0x40010000
 800b484:	40000400 	.word	0x40000400
 800b488:	40000800 	.word	0x40000800
 800b48c:	40000c00 	.word	0x40000c00
 800b490:	40010400 	.word	0x40010400
 800b494:	40014000 	.word	0x40014000
 800b498:	40014400 	.word	0x40014400
 800b49c:	40014800 	.word	0x40014800
 800b4a0:	40001800 	.word	0x40001800
 800b4a4:	40001c00 	.word	0x40001c00
 800b4a8:	40002000 	.word	0x40002000

0800b4ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b087      	sub	sp, #28
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6a1b      	ldr	r3, [r3, #32]
 800b4ba:	f023 0201 	bic.w	r2, r3, #1
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	6a1b      	ldr	r3, [r3, #32]
 800b4c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	685b      	ldr	r3, [r3, #4]
 800b4cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	699b      	ldr	r3, [r3, #24]
 800b4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	f023 0303 	bic.w	r3, r3, #3
 800b4e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	4313      	orrs	r3, r2
 800b4ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f023 0302 	bic.w	r3, r3, #2
 800b4f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	689b      	ldr	r3, [r3, #8]
 800b4fa:	697a      	ldr	r2, [r7, #20]
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	4a20      	ldr	r2, [pc, #128]	; (800b584 <TIM_OC1_SetConfig+0xd8>)
 800b504:	4293      	cmp	r3, r2
 800b506:	d003      	beq.n	800b510 <TIM_OC1_SetConfig+0x64>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	4a1f      	ldr	r2, [pc, #124]	; (800b588 <TIM_OC1_SetConfig+0xdc>)
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d10c      	bne.n	800b52a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	f023 0308 	bic.w	r3, r3, #8
 800b516:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	68db      	ldr	r3, [r3, #12]
 800b51c:	697a      	ldr	r2, [r7, #20]
 800b51e:	4313      	orrs	r3, r2
 800b520:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f023 0304 	bic.w	r3, r3, #4
 800b528:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	4a15      	ldr	r2, [pc, #84]	; (800b584 <TIM_OC1_SetConfig+0xd8>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d003      	beq.n	800b53a <TIM_OC1_SetConfig+0x8e>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	4a14      	ldr	r2, [pc, #80]	; (800b588 <TIM_OC1_SetConfig+0xdc>)
 800b536:	4293      	cmp	r3, r2
 800b538:	d111      	bne.n	800b55e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	695b      	ldr	r3, [r3, #20]
 800b54e:	693a      	ldr	r2, [r7, #16]
 800b550:	4313      	orrs	r3, r2
 800b552:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b554:	683b      	ldr	r3, [r7, #0]
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	693a      	ldr	r2, [r7, #16]
 800b55a:	4313      	orrs	r3, r2
 800b55c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	693a      	ldr	r2, [r7, #16]
 800b562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	685a      	ldr	r2, [r3, #4]
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	697a      	ldr	r2, [r7, #20]
 800b576:	621a      	str	r2, [r3, #32]
}
 800b578:	bf00      	nop
 800b57a:	371c      	adds	r7, #28
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr
 800b584:	40010000 	.word	0x40010000
 800b588:	40010400 	.word	0x40010400

0800b58c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b087      	sub	sp, #28
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a1b      	ldr	r3, [r3, #32]
 800b59a:	f023 0210 	bic.w	r2, r3, #16
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a1b      	ldr	r3, [r3, #32]
 800b5a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	685b      	ldr	r3, [r3, #4]
 800b5ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	699b      	ldr	r3, [r3, #24]
 800b5b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	021b      	lsls	r3, r3, #8
 800b5ca:	68fa      	ldr	r2, [r7, #12]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b5d0:	697b      	ldr	r3, [r7, #20]
 800b5d2:	f023 0320 	bic.w	r3, r3, #32
 800b5d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	011b      	lsls	r3, r3, #4
 800b5de:	697a      	ldr	r2, [r7, #20]
 800b5e0:	4313      	orrs	r3, r2
 800b5e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	4a22      	ldr	r2, [pc, #136]	; (800b670 <TIM_OC2_SetConfig+0xe4>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d003      	beq.n	800b5f4 <TIM_OC2_SetConfig+0x68>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	4a21      	ldr	r2, [pc, #132]	; (800b674 <TIM_OC2_SetConfig+0xe8>)
 800b5f0:	4293      	cmp	r3, r2
 800b5f2:	d10d      	bne.n	800b610 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b5f4:	697b      	ldr	r3, [r7, #20]
 800b5f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	011b      	lsls	r3, r3, #4
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	4313      	orrs	r3, r2
 800b606:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b60e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	4a17      	ldr	r2, [pc, #92]	; (800b670 <TIM_OC2_SetConfig+0xe4>)
 800b614:	4293      	cmp	r3, r2
 800b616:	d003      	beq.n	800b620 <TIM_OC2_SetConfig+0x94>
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a16      	ldr	r2, [pc, #88]	; (800b674 <TIM_OC2_SetConfig+0xe8>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d113      	bne.n	800b648 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b620:	693b      	ldr	r3, [r7, #16]
 800b622:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b626:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b62e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	695b      	ldr	r3, [r3, #20]
 800b634:	009b      	lsls	r3, r3, #2
 800b636:	693a      	ldr	r2, [r7, #16]
 800b638:	4313      	orrs	r3, r2
 800b63a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	699b      	ldr	r3, [r3, #24]
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	693a      	ldr	r2, [r7, #16]
 800b644:	4313      	orrs	r3, r2
 800b646:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	693a      	ldr	r2, [r7, #16]
 800b64c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	68fa      	ldr	r2, [r7, #12]
 800b652:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	685a      	ldr	r2, [r3, #4]
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	697a      	ldr	r2, [r7, #20]
 800b660:	621a      	str	r2, [r3, #32]
}
 800b662:	bf00      	nop
 800b664:	371c      	adds	r7, #28
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	40010000 	.word	0x40010000
 800b674:	40010400 	.word	0x40010400

0800b678 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b678:	b480      	push	{r7}
 800b67a:	b087      	sub	sp, #28
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
 800b680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6a1b      	ldr	r3, [r3, #32]
 800b686:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	6a1b      	ldr	r3, [r3, #32]
 800b692:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	69db      	ldr	r3, [r3, #28]
 800b69e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f023 0303 	bic.w	r3, r3, #3
 800b6ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b6c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	021b      	lsls	r3, r3, #8
 800b6c8:	697a      	ldr	r2, [r7, #20]
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4a21      	ldr	r2, [pc, #132]	; (800b758 <TIM_OC3_SetConfig+0xe0>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d003      	beq.n	800b6de <TIM_OC3_SetConfig+0x66>
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	4a20      	ldr	r2, [pc, #128]	; (800b75c <TIM_OC3_SetConfig+0xe4>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d10d      	bne.n	800b6fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b6e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	021b      	lsls	r3, r3, #8
 800b6ec:	697a      	ldr	r2, [r7, #20]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b6f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a16      	ldr	r2, [pc, #88]	; (800b758 <TIM_OC3_SetConfig+0xe0>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d003      	beq.n	800b70a <TIM_OC3_SetConfig+0x92>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a15      	ldr	r2, [pc, #84]	; (800b75c <TIM_OC3_SetConfig+0xe4>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d113      	bne.n	800b732 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	695b      	ldr	r3, [r3, #20]
 800b71e:	011b      	lsls	r3, r3, #4
 800b720:	693a      	ldr	r2, [r7, #16]
 800b722:	4313      	orrs	r3, r2
 800b724:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	699b      	ldr	r3, [r3, #24]
 800b72a:	011b      	lsls	r3, r3, #4
 800b72c:	693a      	ldr	r2, [r7, #16]
 800b72e:	4313      	orrs	r3, r2
 800b730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	693a      	ldr	r2, [r7, #16]
 800b736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	685a      	ldr	r2, [r3, #4]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	697a      	ldr	r2, [r7, #20]
 800b74a:	621a      	str	r2, [r3, #32]
}
 800b74c:	bf00      	nop
 800b74e:	371c      	adds	r7, #28
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr
 800b758:	40010000 	.word	0x40010000
 800b75c:	40010400 	.word	0x40010400

0800b760 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b760:	b480      	push	{r7}
 800b762:	b087      	sub	sp, #28
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6a1b      	ldr	r3, [r3, #32]
 800b76e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	6a1b      	ldr	r3, [r3, #32]
 800b77a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	685b      	ldr	r3, [r3, #4]
 800b780:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	69db      	ldr	r3, [r3, #28]
 800b786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b78e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	021b      	lsls	r3, r3, #8
 800b79e:	68fa      	ldr	r2, [r7, #12]
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b7aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	031b      	lsls	r3, r3, #12
 800b7b2:	693a      	ldr	r2, [r7, #16]
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	4a12      	ldr	r2, [pc, #72]	; (800b804 <TIM_OC4_SetConfig+0xa4>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d003      	beq.n	800b7c8 <TIM_OC4_SetConfig+0x68>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	4a11      	ldr	r2, [pc, #68]	; (800b808 <TIM_OC4_SetConfig+0xa8>)
 800b7c4:	4293      	cmp	r3, r2
 800b7c6:	d109      	bne.n	800b7dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b7ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	695b      	ldr	r3, [r3, #20]
 800b7d4:	019b      	lsls	r3, r3, #6
 800b7d6:	697a      	ldr	r2, [r7, #20]
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	697a      	ldr	r2, [r7, #20]
 800b7e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	68fa      	ldr	r2, [r7, #12]
 800b7e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	685a      	ldr	r2, [r3, #4]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	693a      	ldr	r2, [r7, #16]
 800b7f4:	621a      	str	r2, [r3, #32]
}
 800b7f6:	bf00      	nop
 800b7f8:	371c      	adds	r7, #28
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	40010000 	.word	0x40010000
 800b808:	40010400 	.word	0x40010400

0800b80c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b80c:	b480      	push	{r7}
 800b80e:	b087      	sub	sp, #28
 800b810:	af00      	add	r7, sp, #0
 800b812:	60f8      	str	r0, [r7, #12]
 800b814:	60b9      	str	r1, [r7, #8]
 800b816:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	6a1b      	ldr	r3, [r3, #32]
 800b81c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6a1b      	ldr	r3, [r3, #32]
 800b822:	f023 0201 	bic.w	r2, r3, #1
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	699b      	ldr	r3, [r3, #24]
 800b82e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b830:	693b      	ldr	r3, [r7, #16]
 800b832:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b836:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	011b      	lsls	r3, r3, #4
 800b83c:	693a      	ldr	r2, [r7, #16]
 800b83e:	4313      	orrs	r3, r2
 800b840:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b842:	697b      	ldr	r3, [r7, #20]
 800b844:	f023 030a 	bic.w	r3, r3, #10
 800b848:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	4313      	orrs	r3, r2
 800b850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	693a      	ldr	r2, [r7, #16]
 800b856:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	697a      	ldr	r2, [r7, #20]
 800b85c:	621a      	str	r2, [r3, #32]
}
 800b85e:	bf00      	nop
 800b860:	371c      	adds	r7, #28
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b86a:	b480      	push	{r7}
 800b86c:	b087      	sub	sp, #28
 800b86e:	af00      	add	r7, sp, #0
 800b870:	60f8      	str	r0, [r7, #12]
 800b872:	60b9      	str	r1, [r7, #8]
 800b874:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6a1b      	ldr	r3, [r3, #32]
 800b87a:	f023 0210 	bic.w	r2, r3, #16
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	699b      	ldr	r3, [r3, #24]
 800b886:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6a1b      	ldr	r3, [r3, #32]
 800b88c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b894:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	031b      	lsls	r3, r3, #12
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	4313      	orrs	r3, r2
 800b89e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b8a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	011b      	lsls	r3, r3, #4
 800b8ac:	693a      	ldr	r2, [r7, #16]
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	697a      	ldr	r2, [r7, #20]
 800b8b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	693a      	ldr	r2, [r7, #16]
 800b8bc:	621a      	str	r2, [r3, #32]
}
 800b8be:	bf00      	nop
 800b8c0:	371c      	adds	r7, #28
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr

0800b8ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b8ca:	b480      	push	{r7}
 800b8cc:	b085      	sub	sp, #20
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
 800b8d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b8e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b8e2:	683a      	ldr	r2, [r7, #0]
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	4313      	orrs	r3, r2
 800b8e8:	f043 0307 	orr.w	r3, r3, #7
 800b8ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	68fa      	ldr	r2, [r7, #12]
 800b8f2:	609a      	str	r2, [r3, #8]
}
 800b8f4:	bf00      	nop
 800b8f6:	3714      	adds	r7, #20
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fe:	4770      	bx	lr

0800b900 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b900:	b480      	push	{r7}
 800b902:	b087      	sub	sp, #28
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
 800b90c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	689b      	ldr	r3, [r3, #8]
 800b912:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b914:	697b      	ldr	r3, [r7, #20]
 800b916:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b91a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	021a      	lsls	r2, r3, #8
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	431a      	orrs	r2, r3
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	4313      	orrs	r3, r2
 800b928:	697a      	ldr	r2, [r7, #20]
 800b92a:	4313      	orrs	r3, r2
 800b92c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	697a      	ldr	r2, [r7, #20]
 800b932:	609a      	str	r2, [r3, #8]
}
 800b934:	bf00      	nop
 800b936:	371c      	adds	r7, #28
 800b938:	46bd      	mov	sp, r7
 800b93a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93e:	4770      	bx	lr

0800b940 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b940:	b480      	push	{r7}
 800b942:	b087      	sub	sp, #28
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	f003 031f 	and.w	r3, r3, #31
 800b952:	2201      	movs	r2, #1
 800b954:	fa02 f303 	lsl.w	r3, r2, r3
 800b958:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6a1a      	ldr	r2, [r3, #32]
 800b95e:	697b      	ldr	r3, [r7, #20]
 800b960:	43db      	mvns	r3, r3
 800b962:	401a      	ands	r2, r3
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	6a1a      	ldr	r2, [r3, #32]
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	f003 031f 	and.w	r3, r3, #31
 800b972:	6879      	ldr	r1, [r7, #4]
 800b974:	fa01 f303 	lsl.w	r3, r1, r3
 800b978:	431a      	orrs	r2, r3
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	621a      	str	r2, [r3, #32]
}
 800b97e:	bf00      	nop
 800b980:	371c      	adds	r7, #28
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
	...

0800b98c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b085      	sub	sp, #20
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d101      	bne.n	800b9a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9a0:	2302      	movs	r3, #2
 800b9a2:	e05a      	b.n	800ba5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	2202      	movs	r2, #2
 800b9b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	685b      	ldr	r3, [r3, #4]
 800b9ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	689b      	ldr	r3, [r3, #8]
 800b9c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a21      	ldr	r2, [pc, #132]	; (800ba68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b9e4:	4293      	cmp	r3, r2
 800b9e6:	d022      	beq.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9f0:	d01d      	beq.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	4a1d      	ldr	r2, [pc, #116]	; (800ba6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b9f8:	4293      	cmp	r3, r2
 800b9fa:	d018      	beq.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a1b      	ldr	r2, [pc, #108]	; (800ba70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d013      	beq.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	4a1a      	ldr	r2, [pc, #104]	; (800ba74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d00e      	beq.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4a18      	ldr	r2, [pc, #96]	; (800ba78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ba16:	4293      	cmp	r3, r2
 800ba18:	d009      	beq.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	4a17      	ldr	r2, [pc, #92]	; (800ba7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d004      	beq.n	800ba2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a15      	ldr	r2, [pc, #84]	; (800ba80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ba2a:	4293      	cmp	r3, r2
 800ba2c:	d10c      	bne.n	800ba48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	685b      	ldr	r3, [r3, #4]
 800ba3a:	68ba      	ldr	r2, [r7, #8]
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2201      	movs	r2, #1
 800ba4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2200      	movs	r2, #0
 800ba54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba58:	2300      	movs	r3, #0
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3714      	adds	r7, #20
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba64:	4770      	bx	lr
 800ba66:	bf00      	nop
 800ba68:	40010000 	.word	0x40010000
 800ba6c:	40000400 	.word	0x40000400
 800ba70:	40000800 	.word	0x40000800
 800ba74:	40000c00 	.word	0x40000c00
 800ba78:	40010400 	.word	0x40010400
 800ba7c:	40014000 	.word	0x40014000
 800ba80:	40001800 	.word	0x40001800

0800ba84 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	681a      	ldr	r2, [r3, #0]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba9c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	4b20      	ldr	r3, [pc, #128]	; (800bb24 <FSMC_NORSRAM_Init+0xa0>)
 800baa2:	4013      	ands	r3, r2
 800baa4:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800baae:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800bab0:	683b      	ldr	r3, [r7, #0]
 800bab2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800bab4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800baba:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800bac0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800bac6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800bacc:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800bad2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800bad8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800bade:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800bae4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800baea:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800baf0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800baf2:	68fa      	ldr	r2, [r7, #12]
 800baf4:	4313      	orrs	r3, r2
 800baf6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	2b08      	cmp	r3, #8
 800bafe:	d103      	bne.n	800bb08 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb06:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800bb08:	683b      	ldr	r3, [r7, #0]
 800bb0a:	681a      	ldr	r2, [r3, #0]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	68f9      	ldr	r1, [r7, #12]
 800bb10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800bb14:	2300      	movs	r3, #0
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3714      	adds	r7, #20
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb20:	4770      	bx	lr
 800bb22:	bf00      	nop
 800bb24:	fff00080 	.word	0xfff00080

0800bb28 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b087      	sub	sp, #28
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800bb34:	2300      	movs	r3, #0
 800bb36:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	1c5a      	adds	r2, r3, #1
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb42:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800bb44:	697b      	ldr	r3, [r7, #20]
 800bb46:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800bb4a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bb4c:	68bb      	ldr	r3, [r7, #8]
 800bb4e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	685b      	ldr	r3, [r3, #4]
 800bb54:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bb56:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	689b      	ldr	r3, [r3, #8]
 800bb5c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800bb5e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	68db      	ldr	r3, [r3, #12]
 800bb64:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800bb66:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	691b      	ldr	r3, [r3, #16]
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bb70:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	695b      	ldr	r3, [r3, #20]
 800bb76:	3b02      	subs	r3, #2
 800bb78:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800bb7a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bb80:	4313      	orrs	r3, r2
 800bb82:	697a      	ldr	r2, [r7, #20]
 800bb84:	4313      	orrs	r3, r2
 800bb86:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	1c5a      	adds	r2, r3, #1
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	6979      	ldr	r1, [r7, #20]
 800bb90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	371c      	adds	r7, #28
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba0:	4770      	bx	lr
	...

0800bba4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800bba4:	b480      	push	{r7}
 800bba6:	b087      	sub	sp, #28
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	60b9      	str	r1, [r7, #8]
 800bbae:	607a      	str	r2, [r7, #4]
 800bbb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bbbc:	d122      	bne.n	800bc04 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbc6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800bbc8:	697a      	ldr	r2, [r7, #20]
 800bbca:	4b15      	ldr	r3, [pc, #84]	; (800bc20 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800bbcc:	4013      	ands	r3, r2
 800bbce:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bbd0:	68bb      	ldr	r3, [r7, #8]
 800bbd2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800bbd4:	68bb      	ldr	r3, [r7, #8]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bbda:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	689b      	ldr	r3, [r3, #8]
 800bbe0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800bbe2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	68db      	ldr	r3, [r3, #12]
 800bbe8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800bbea:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bbf0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bbf2:	697a      	ldr	r2, [r7, #20]
 800bbf4:	4313      	orrs	r3, r2
 800bbf6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	687a      	ldr	r2, [r7, #4]
 800bbfc:	6979      	ldr	r1, [r7, #20]
 800bbfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bc02:	e005      	b.n	800bc10 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	687a      	ldr	r2, [r7, #4]
 800bc08:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bc0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	371c      	adds	r7, #28
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr
 800bc1e:	bf00      	nop
 800bc20:	cff00000 	.word	0xcff00000

0800bc24 <__errno>:
 800bc24:	4b01      	ldr	r3, [pc, #4]	; (800bc2c <__errno+0x8>)
 800bc26:	6818      	ldr	r0, [r3, #0]
 800bc28:	4770      	bx	lr
 800bc2a:	bf00      	nop
 800bc2c:	20000054 	.word	0x20000054

0800bc30 <__libc_init_array>:
 800bc30:	b570      	push	{r4, r5, r6, lr}
 800bc32:	4d0d      	ldr	r5, [pc, #52]	; (800bc68 <__libc_init_array+0x38>)
 800bc34:	4c0d      	ldr	r4, [pc, #52]	; (800bc6c <__libc_init_array+0x3c>)
 800bc36:	1b64      	subs	r4, r4, r5
 800bc38:	10a4      	asrs	r4, r4, #2
 800bc3a:	2600      	movs	r6, #0
 800bc3c:	42a6      	cmp	r6, r4
 800bc3e:	d109      	bne.n	800bc54 <__libc_init_array+0x24>
 800bc40:	4d0b      	ldr	r5, [pc, #44]	; (800bc70 <__libc_init_array+0x40>)
 800bc42:	4c0c      	ldr	r4, [pc, #48]	; (800bc74 <__libc_init_array+0x44>)
 800bc44:	f000 f908 	bl	800be58 <_init>
 800bc48:	1b64      	subs	r4, r4, r5
 800bc4a:	10a4      	asrs	r4, r4, #2
 800bc4c:	2600      	movs	r6, #0
 800bc4e:	42a6      	cmp	r6, r4
 800bc50:	d105      	bne.n	800bc5e <__libc_init_array+0x2e>
 800bc52:	bd70      	pop	{r4, r5, r6, pc}
 800bc54:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc58:	4798      	blx	r3
 800bc5a:	3601      	adds	r6, #1
 800bc5c:	e7ee      	b.n	800bc3c <__libc_init_array+0xc>
 800bc5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc62:	4798      	blx	r3
 800bc64:	3601      	adds	r6, #1
 800bc66:	e7f2      	b.n	800bc4e <__libc_init_array+0x1e>
 800bc68:	08010728 	.word	0x08010728
 800bc6c:	08010728 	.word	0x08010728
 800bc70:	08010728 	.word	0x08010728
 800bc74:	0801072c 	.word	0x0801072c

0800bc78 <memset>:
 800bc78:	4402      	add	r2, r0
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	d100      	bne.n	800bc82 <memset+0xa>
 800bc80:	4770      	bx	lr
 800bc82:	f803 1b01 	strb.w	r1, [r3], #1
 800bc86:	e7f9      	b.n	800bc7c <memset+0x4>

0800bc88 <sqrt>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	ed2d 8b02 	vpush	{d8}
 800bc8e:	ec55 4b10 	vmov	r4, r5, d0
 800bc92:	f000 f82d 	bl	800bcf0 <__ieee754_sqrt>
 800bc96:	4b15      	ldr	r3, [pc, #84]	; (800bcec <sqrt+0x64>)
 800bc98:	eeb0 8a40 	vmov.f32	s16, s0
 800bc9c:	eef0 8a60 	vmov.f32	s17, s1
 800bca0:	f993 3000 	ldrsb.w	r3, [r3]
 800bca4:	3301      	adds	r3, #1
 800bca6:	d019      	beq.n	800bcdc <sqrt+0x54>
 800bca8:	4622      	mov	r2, r4
 800bcaa:	462b      	mov	r3, r5
 800bcac:	4620      	mov	r0, r4
 800bcae:	4629      	mov	r1, r5
 800bcb0:	f7f4 fee0 	bl	8000a74 <__aeabi_dcmpun>
 800bcb4:	b990      	cbnz	r0, 800bcdc <sqrt+0x54>
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	2300      	movs	r3, #0
 800bcba:	4620      	mov	r0, r4
 800bcbc:	4629      	mov	r1, r5
 800bcbe:	f7f4 feb1 	bl	8000a24 <__aeabi_dcmplt>
 800bcc2:	b158      	cbz	r0, 800bcdc <sqrt+0x54>
 800bcc4:	f7ff ffae 	bl	800bc24 <__errno>
 800bcc8:	2321      	movs	r3, #33	; 0x21
 800bcca:	6003      	str	r3, [r0, #0]
 800bccc:	2200      	movs	r2, #0
 800bcce:	2300      	movs	r3, #0
 800bcd0:	4610      	mov	r0, r2
 800bcd2:	4619      	mov	r1, r3
 800bcd4:	f7f4 fd5e 	bl	8000794 <__aeabi_ddiv>
 800bcd8:	ec41 0b18 	vmov	d8, r0, r1
 800bcdc:	eeb0 0a48 	vmov.f32	s0, s16
 800bce0:	eef0 0a68 	vmov.f32	s1, s17
 800bce4:	ecbd 8b02 	vpop	{d8}
 800bce8:	bd38      	pop	{r3, r4, r5, pc}
 800bcea:	bf00      	nop
 800bcec:	200000b8 	.word	0x200000b8

0800bcf0 <__ieee754_sqrt>:
 800bcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcf4:	ec55 4b10 	vmov	r4, r5, d0
 800bcf8:	4e56      	ldr	r6, [pc, #344]	; (800be54 <__ieee754_sqrt+0x164>)
 800bcfa:	43ae      	bics	r6, r5
 800bcfc:	ee10 0a10 	vmov	r0, s0
 800bd00:	ee10 3a10 	vmov	r3, s0
 800bd04:	4629      	mov	r1, r5
 800bd06:	462a      	mov	r2, r5
 800bd08:	d110      	bne.n	800bd2c <__ieee754_sqrt+0x3c>
 800bd0a:	ee10 2a10 	vmov	r2, s0
 800bd0e:	462b      	mov	r3, r5
 800bd10:	f7f4 fc16 	bl	8000540 <__aeabi_dmul>
 800bd14:	4602      	mov	r2, r0
 800bd16:	460b      	mov	r3, r1
 800bd18:	4620      	mov	r0, r4
 800bd1a:	4629      	mov	r1, r5
 800bd1c:	f7f4 fa5a 	bl	80001d4 <__adddf3>
 800bd20:	4604      	mov	r4, r0
 800bd22:	460d      	mov	r5, r1
 800bd24:	ec45 4b10 	vmov	d0, r4, r5
 800bd28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd2c:	2d00      	cmp	r5, #0
 800bd2e:	dc10      	bgt.n	800bd52 <__ieee754_sqrt+0x62>
 800bd30:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bd34:	4330      	orrs	r0, r6
 800bd36:	d0f5      	beq.n	800bd24 <__ieee754_sqrt+0x34>
 800bd38:	b15d      	cbz	r5, 800bd52 <__ieee754_sqrt+0x62>
 800bd3a:	ee10 2a10 	vmov	r2, s0
 800bd3e:	462b      	mov	r3, r5
 800bd40:	ee10 0a10 	vmov	r0, s0
 800bd44:	f7f4 fa44 	bl	80001d0 <__aeabi_dsub>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	f7f4 fd22 	bl	8000794 <__aeabi_ddiv>
 800bd50:	e7e6      	b.n	800bd20 <__ieee754_sqrt+0x30>
 800bd52:	1509      	asrs	r1, r1, #20
 800bd54:	d076      	beq.n	800be44 <__ieee754_sqrt+0x154>
 800bd56:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800bd5a:	07ce      	lsls	r6, r1, #31
 800bd5c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800bd60:	bf5e      	ittt	pl
 800bd62:	0fda      	lsrpl	r2, r3, #31
 800bd64:	005b      	lslpl	r3, r3, #1
 800bd66:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800bd6a:	0fda      	lsrs	r2, r3, #31
 800bd6c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800bd70:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800bd74:	2000      	movs	r0, #0
 800bd76:	106d      	asrs	r5, r5, #1
 800bd78:	005b      	lsls	r3, r3, #1
 800bd7a:	f04f 0e16 	mov.w	lr, #22
 800bd7e:	4684      	mov	ip, r0
 800bd80:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bd84:	eb0c 0401 	add.w	r4, ip, r1
 800bd88:	4294      	cmp	r4, r2
 800bd8a:	bfde      	ittt	le
 800bd8c:	1b12      	suble	r2, r2, r4
 800bd8e:	eb04 0c01 	addle.w	ip, r4, r1
 800bd92:	1840      	addle	r0, r0, r1
 800bd94:	0052      	lsls	r2, r2, #1
 800bd96:	f1be 0e01 	subs.w	lr, lr, #1
 800bd9a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bd9e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800bda2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bda6:	d1ed      	bne.n	800bd84 <__ieee754_sqrt+0x94>
 800bda8:	4671      	mov	r1, lr
 800bdaa:	2720      	movs	r7, #32
 800bdac:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800bdb0:	4562      	cmp	r2, ip
 800bdb2:	eb04 060e 	add.w	r6, r4, lr
 800bdb6:	dc02      	bgt.n	800bdbe <__ieee754_sqrt+0xce>
 800bdb8:	d113      	bne.n	800bde2 <__ieee754_sqrt+0xf2>
 800bdba:	429e      	cmp	r6, r3
 800bdbc:	d811      	bhi.n	800bde2 <__ieee754_sqrt+0xf2>
 800bdbe:	2e00      	cmp	r6, #0
 800bdc0:	eb06 0e04 	add.w	lr, r6, r4
 800bdc4:	da43      	bge.n	800be4e <__ieee754_sqrt+0x15e>
 800bdc6:	f1be 0f00 	cmp.w	lr, #0
 800bdca:	db40      	blt.n	800be4e <__ieee754_sqrt+0x15e>
 800bdcc:	f10c 0801 	add.w	r8, ip, #1
 800bdd0:	eba2 020c 	sub.w	r2, r2, ip
 800bdd4:	429e      	cmp	r6, r3
 800bdd6:	bf88      	it	hi
 800bdd8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800bddc:	1b9b      	subs	r3, r3, r6
 800bdde:	4421      	add	r1, r4
 800bde0:	46c4      	mov	ip, r8
 800bde2:	0052      	lsls	r2, r2, #1
 800bde4:	3f01      	subs	r7, #1
 800bde6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800bdea:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800bdee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bdf2:	d1dd      	bne.n	800bdb0 <__ieee754_sqrt+0xc0>
 800bdf4:	4313      	orrs	r3, r2
 800bdf6:	d006      	beq.n	800be06 <__ieee754_sqrt+0x116>
 800bdf8:	1c4c      	adds	r4, r1, #1
 800bdfa:	bf13      	iteet	ne
 800bdfc:	3101      	addne	r1, #1
 800bdfe:	3001      	addeq	r0, #1
 800be00:	4639      	moveq	r1, r7
 800be02:	f021 0101 	bicne.w	r1, r1, #1
 800be06:	1043      	asrs	r3, r0, #1
 800be08:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800be0c:	0849      	lsrs	r1, r1, #1
 800be0e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800be12:	07c2      	lsls	r2, r0, #31
 800be14:	bf48      	it	mi
 800be16:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800be1a:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800be1e:	460c      	mov	r4, r1
 800be20:	463d      	mov	r5, r7
 800be22:	e77f      	b.n	800bd24 <__ieee754_sqrt+0x34>
 800be24:	0ada      	lsrs	r2, r3, #11
 800be26:	3815      	subs	r0, #21
 800be28:	055b      	lsls	r3, r3, #21
 800be2a:	2a00      	cmp	r2, #0
 800be2c:	d0fa      	beq.n	800be24 <__ieee754_sqrt+0x134>
 800be2e:	02d7      	lsls	r7, r2, #11
 800be30:	d50a      	bpl.n	800be48 <__ieee754_sqrt+0x158>
 800be32:	f1c1 0420 	rsb	r4, r1, #32
 800be36:	fa23 f404 	lsr.w	r4, r3, r4
 800be3a:	1e4d      	subs	r5, r1, #1
 800be3c:	408b      	lsls	r3, r1
 800be3e:	4322      	orrs	r2, r4
 800be40:	1b41      	subs	r1, r0, r5
 800be42:	e788      	b.n	800bd56 <__ieee754_sqrt+0x66>
 800be44:	4608      	mov	r0, r1
 800be46:	e7f0      	b.n	800be2a <__ieee754_sqrt+0x13a>
 800be48:	0052      	lsls	r2, r2, #1
 800be4a:	3101      	adds	r1, #1
 800be4c:	e7ef      	b.n	800be2e <__ieee754_sqrt+0x13e>
 800be4e:	46e0      	mov	r8, ip
 800be50:	e7be      	b.n	800bdd0 <__ieee754_sqrt+0xe0>
 800be52:	bf00      	nop
 800be54:	7ff00000 	.word	0x7ff00000

0800be58 <_init>:
 800be58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be5a:	bf00      	nop
 800be5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be5e:	bc08      	pop	{r3}
 800be60:	469e      	mov	lr, r3
 800be62:	4770      	bx	lr

0800be64 <_fini>:
 800be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be66:	bf00      	nop
 800be68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be6a:	bc08      	pop	{r3}
 800be6c:	469e      	mov	lr, r3
 800be6e:	4770      	bx	lr
