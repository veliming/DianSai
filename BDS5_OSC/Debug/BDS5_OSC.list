
BDS5_OSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00014134  08009cc0  08009cc0  00019cc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ddf4  0801ddf4  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  0801ddf4  0801ddf4  0002ddf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ddfc  0801ddfc  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ddfc  0801ddfc  0002ddfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801de00  0801de00  0002de00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0801de04  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006168  200001e4  0801dfe8  000301e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000634c  0801dfe8  0003634c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158c2  00000000  00000000  00030212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003195  00000000  00000000  00045ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00048c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  00049d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003f75  00000000  00000000  0004adb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013da0  00000000  00000000  0004ed25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2dc4  00000000  00000000  00062ac5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c3  00000000  00000000  00135889  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a9c  00000000  00000000  0013594c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000302f  00000000  00000000  0013b3e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ca8 	.word	0x08009ca8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08009ca8 	.word	0x08009ca8

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	f47f afd5 	bne.w	80001e0 <arm_bitreversal_32_0>
 8000236:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800023a:	4770      	bx	lr

0800023c <arm_bitreversal_16>:
 800023c:	1c4b      	adds	r3, r1, #1
 800023e:	2b01      	cmp	r3, #1
 8000240:	bf98      	it	ls
 8000242:	4770      	bxls	lr
 8000244:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	1c91      	adds	r1, r2, #2
 800024a:	089b      	lsrs	r3, r3, #2

0800024c <arm_bitreversal_16_0>:
 800024c:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000250:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000254:	880a      	ldrh	r2, [r1, #0]
 8000256:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 800025a:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025e:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000262:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000266:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 800026a:	f8d9 7000 	ldr.w	r7, [r9]
 800026e:	f8d8 6000 	ldr.w	r6, [r8]
 8000272:	6815      	ldr	r5, [r2, #0]
 8000274:	f8dc 4000 	ldr.w	r4, [ip]
 8000278:	f8c9 6000 	str.w	r6, [r9]
 800027c:	f8c8 7000 	str.w	r7, [r8]
 8000280:	f8cc 5000 	str.w	r5, [ip]
 8000284:	6014      	str	r4, [r2, #0]
 8000286:	3108      	adds	r1, #8
 8000288:	3b01      	subs	r3, #1
 800028a:	f47f afdf 	bne.w	800024c <arm_bitreversal_16_0>
 800028e:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000292:	4770      	bx	lr

08000294 <strlen>:
 8000294:	4603      	mov	r3, r0
 8000296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800029a:	2a00      	cmp	r2, #0
 800029c:	d1fb      	bne.n	8000296 <strlen+0x2>
 800029e:	1a18      	subs	r0, r3, r0
 80002a0:	3801      	subs	r0, #1
 80002a2:	4770      	bx	lr
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_drsub>:
 8000350:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000354:	e002      	b.n	800035c <__adddf3>
 8000356:	bf00      	nop

08000358 <__aeabi_dsub>:
 8000358:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800035c <__adddf3>:
 800035c:	b530      	push	{r4, r5, lr}
 800035e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000362:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	bf1f      	itttt	ne
 8000372:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000376:	ea55 0c02 	orrsne.w	ip, r5, r2
 800037a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800037e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000382:	f000 80e2 	beq.w	800054a <__adddf3+0x1ee>
 8000386:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800038a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800038e:	bfb8      	it	lt
 8000390:	426d      	neglt	r5, r5
 8000392:	dd0c      	ble.n	80003ae <__adddf3+0x52>
 8000394:	442c      	add	r4, r5
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	ea82 0000 	eor.w	r0, r2, r0
 80003a2:	ea83 0101 	eor.w	r1, r3, r1
 80003a6:	ea80 0202 	eor.w	r2, r0, r2
 80003aa:	ea81 0303 	eor.w	r3, r1, r3
 80003ae:	2d36      	cmp	r5, #54	; 0x36
 80003b0:	bf88      	it	hi
 80003b2:	bd30      	pophi	{r4, r5, pc}
 80003b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003c4:	d002      	beq.n	80003cc <__adddf3+0x70>
 80003c6:	4240      	negs	r0, r0
 80003c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003d8:	d002      	beq.n	80003e0 <__adddf3+0x84>
 80003da:	4252      	negs	r2, r2
 80003dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003e0:	ea94 0f05 	teq	r4, r5
 80003e4:	f000 80a7 	beq.w	8000536 <__adddf3+0x1da>
 80003e8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80003f0:	db0d      	blt.n	800040e <__adddf3+0xb2>
 80003f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003f6:	fa22 f205 	lsr.w	r2, r2, r5
 80003fa:	1880      	adds	r0, r0, r2
 80003fc:	f141 0100 	adc.w	r1, r1, #0
 8000400:	fa03 f20e 	lsl.w	r2, r3, lr
 8000404:	1880      	adds	r0, r0, r2
 8000406:	fa43 f305 	asr.w	r3, r3, r5
 800040a:	4159      	adcs	r1, r3
 800040c:	e00e      	b.n	800042c <__adddf3+0xd0>
 800040e:	f1a5 0520 	sub.w	r5, r5, #32
 8000412:	f10e 0e20 	add.w	lr, lr, #32
 8000416:	2a01      	cmp	r2, #1
 8000418:	fa03 fc0e 	lsl.w	ip, r3, lr
 800041c:	bf28      	it	cs
 800041e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000422:	fa43 f305 	asr.w	r3, r3, r5
 8000426:	18c0      	adds	r0, r0, r3
 8000428:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800042c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000430:	d507      	bpl.n	8000442 <__adddf3+0xe6>
 8000432:	f04f 0e00 	mov.w	lr, #0
 8000436:	f1dc 0c00 	rsbs	ip, ip, #0
 800043a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800043e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000442:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000446:	d31b      	bcc.n	8000480 <__adddf3+0x124>
 8000448:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800044c:	d30c      	bcc.n	8000468 <__adddf3+0x10c>
 800044e:	0849      	lsrs	r1, r1, #1
 8000450:	ea5f 0030 	movs.w	r0, r0, rrx
 8000454:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000458:	f104 0401 	add.w	r4, r4, #1
 800045c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000460:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000464:	f080 809a 	bcs.w	800059c <__adddf3+0x240>
 8000468:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800046c:	bf08      	it	eq
 800046e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000472:	f150 0000 	adcs.w	r0, r0, #0
 8000476:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800047a:	ea41 0105 	orr.w	r1, r1, r5
 800047e:	bd30      	pop	{r4, r5, pc}
 8000480:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000484:	4140      	adcs	r0, r0
 8000486:	eb41 0101 	adc.w	r1, r1, r1
 800048a:	3c01      	subs	r4, #1
 800048c:	bf28      	it	cs
 800048e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000492:	d2e9      	bcs.n	8000468 <__adddf3+0x10c>
 8000494:	f091 0f00 	teq	r1, #0
 8000498:	bf04      	itt	eq
 800049a:	4601      	moveq	r1, r0
 800049c:	2000      	moveq	r0, #0
 800049e:	fab1 f381 	clz	r3, r1
 80004a2:	bf08      	it	eq
 80004a4:	3320      	addeq	r3, #32
 80004a6:	f1a3 030b 	sub.w	r3, r3, #11
 80004aa:	f1b3 0220 	subs.w	r2, r3, #32
 80004ae:	da0c      	bge.n	80004ca <__adddf3+0x16e>
 80004b0:	320c      	adds	r2, #12
 80004b2:	dd08      	ble.n	80004c6 <__adddf3+0x16a>
 80004b4:	f102 0c14 	add.w	ip, r2, #20
 80004b8:	f1c2 020c 	rsb	r2, r2, #12
 80004bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004c0:	fa21 f102 	lsr.w	r1, r1, r2
 80004c4:	e00c      	b.n	80004e0 <__adddf3+0x184>
 80004c6:	f102 0214 	add.w	r2, r2, #20
 80004ca:	bfd8      	it	le
 80004cc:	f1c2 0c20 	rsble	ip, r2, #32
 80004d0:	fa01 f102 	lsl.w	r1, r1, r2
 80004d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004d8:	bfdc      	itt	le
 80004da:	ea41 010c 	orrle.w	r1, r1, ip
 80004de:	4090      	lslle	r0, r2
 80004e0:	1ae4      	subs	r4, r4, r3
 80004e2:	bfa2      	ittt	ge
 80004e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004e8:	4329      	orrge	r1, r5
 80004ea:	bd30      	popge	{r4, r5, pc}
 80004ec:	ea6f 0404 	mvn.w	r4, r4
 80004f0:	3c1f      	subs	r4, #31
 80004f2:	da1c      	bge.n	800052e <__adddf3+0x1d2>
 80004f4:	340c      	adds	r4, #12
 80004f6:	dc0e      	bgt.n	8000516 <__adddf3+0x1ba>
 80004f8:	f104 0414 	add.w	r4, r4, #20
 80004fc:	f1c4 0220 	rsb	r2, r4, #32
 8000500:	fa20 f004 	lsr.w	r0, r0, r4
 8000504:	fa01 f302 	lsl.w	r3, r1, r2
 8000508:	ea40 0003 	orr.w	r0, r0, r3
 800050c:	fa21 f304 	lsr.w	r3, r1, r4
 8000510:	ea45 0103 	orr.w	r1, r5, r3
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f1c4 040c 	rsb	r4, r4, #12
 800051a:	f1c4 0220 	rsb	r2, r4, #32
 800051e:	fa20 f002 	lsr.w	r0, r0, r2
 8000522:	fa01 f304 	lsl.w	r3, r1, r4
 8000526:	ea40 0003 	orr.w	r0, r0, r3
 800052a:	4629      	mov	r1, r5
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	fa21 f004 	lsr.w	r0, r1, r4
 8000532:	4629      	mov	r1, r5
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f094 0f00 	teq	r4, #0
 800053a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800053e:	bf06      	itte	eq
 8000540:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000544:	3401      	addeq	r4, #1
 8000546:	3d01      	subne	r5, #1
 8000548:	e74e      	b.n	80003e8 <__adddf3+0x8c>
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf18      	it	ne
 8000550:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000554:	d029      	beq.n	80005aa <__adddf3+0x24e>
 8000556:	ea94 0f05 	teq	r4, r5
 800055a:	bf08      	it	eq
 800055c:	ea90 0f02 	teqeq	r0, r2
 8000560:	d005      	beq.n	800056e <__adddf3+0x212>
 8000562:	ea54 0c00 	orrs.w	ip, r4, r0
 8000566:	bf04      	itt	eq
 8000568:	4619      	moveq	r1, r3
 800056a:	4610      	moveq	r0, r2
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	ea91 0f03 	teq	r1, r3
 8000572:	bf1e      	ittt	ne
 8000574:	2100      	movne	r1, #0
 8000576:	2000      	movne	r0, #0
 8000578:	bd30      	popne	{r4, r5, pc}
 800057a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800057e:	d105      	bne.n	800058c <__adddf3+0x230>
 8000580:	0040      	lsls	r0, r0, #1
 8000582:	4149      	adcs	r1, r1
 8000584:	bf28      	it	cs
 8000586:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800058a:	bd30      	pop	{r4, r5, pc}
 800058c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000590:	bf3c      	itt	cc
 8000592:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000596:	bd30      	popcc	{r4, r5, pc}
 8000598:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800059c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf1a      	itte	ne
 80005b0:	4619      	movne	r1, r3
 80005b2:	4610      	movne	r0, r2
 80005b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005b8:	bf1c      	itt	ne
 80005ba:	460b      	movne	r3, r1
 80005bc:	4602      	movne	r2, r0
 80005be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005c2:	bf06      	itte	eq
 80005c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005c8:	ea91 0f03 	teqeq	r1, r3
 80005cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005d0:	bd30      	pop	{r4, r5, pc}
 80005d2:	bf00      	nop

080005d4 <__aeabi_ui2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005e8:	f04f 0500 	mov.w	r5, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	e750      	b.n	8000494 <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_i2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800060c:	bf48      	it	mi
 800060e:	4240      	negmi	r0, r0
 8000610:	f04f 0100 	mov.w	r1, #0
 8000614:	e73e      	b.n	8000494 <__adddf3+0x138>
 8000616:	bf00      	nop

08000618 <__aeabi_f2d>:
 8000618:	0042      	lsls	r2, r0, #1
 800061a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800061e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000622:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000626:	bf1f      	itttt	ne
 8000628:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800062c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000630:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000634:	4770      	bxne	lr
 8000636:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800063a:	bf08      	it	eq
 800063c:	4770      	bxeq	lr
 800063e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000642:	bf04      	itt	eq
 8000644:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000648:	4770      	bxeq	lr
 800064a:	b530      	push	{r4, r5, lr}
 800064c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000650:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000654:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000658:	e71c      	b.n	8000494 <__adddf3+0x138>
 800065a:	bf00      	nop

0800065c <__aeabi_ul2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f04f 0500 	mov.w	r5, #0
 800066a:	e00a      	b.n	8000682 <__aeabi_l2d+0x16>

0800066c <__aeabi_l2d>:
 800066c:	ea50 0201 	orrs.w	r2, r0, r1
 8000670:	bf08      	it	eq
 8000672:	4770      	bxeq	lr
 8000674:	b530      	push	{r4, r5, lr}
 8000676:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800067a:	d502      	bpl.n	8000682 <__aeabi_l2d+0x16>
 800067c:	4240      	negs	r0, r0
 800067e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000682:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000686:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800068a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800068e:	f43f aed8 	beq.w	8000442 <__adddf3+0xe6>
 8000692:	f04f 0203 	mov.w	r2, #3
 8000696:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800069a:	bf18      	it	ne
 800069c:	3203      	addne	r2, #3
 800069e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006a2:	bf18      	it	ne
 80006a4:	3203      	addne	r2, #3
 80006a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006aa:	f1c2 0320 	rsb	r3, r2, #32
 80006ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ba:	ea40 000e 	orr.w	r0, r0, lr
 80006be:	fa21 f102 	lsr.w	r1, r1, r2
 80006c2:	4414      	add	r4, r2
 80006c4:	e6bd      	b.n	8000442 <__adddf3+0xe6>
 80006c6:	bf00      	nop

080006c8 <__aeabi_dmul>:
 80006c8:	b570      	push	{r4, r5, r6, lr}
 80006ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006d6:	bf1d      	ittte	ne
 80006d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006dc:	ea94 0f0c 	teqne	r4, ip
 80006e0:	ea95 0f0c 	teqne	r5, ip
 80006e4:	f000 f8de 	bleq	80008a4 <__aeabi_dmul+0x1dc>
 80006e8:	442c      	add	r4, r5
 80006ea:	ea81 0603 	eor.w	r6, r1, r3
 80006ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006fa:	bf18      	it	ne
 80006fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000700:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000704:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000708:	d038      	beq.n	800077c <__aeabi_dmul+0xb4>
 800070a:	fba0 ce02 	umull	ip, lr, r0, r2
 800070e:	f04f 0500 	mov.w	r5, #0
 8000712:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000716:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800071a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800071e:	f04f 0600 	mov.w	r6, #0
 8000722:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000726:	f09c 0f00 	teq	ip, #0
 800072a:	bf18      	it	ne
 800072c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000730:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000734:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000738:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800073c:	d204      	bcs.n	8000748 <__aeabi_dmul+0x80>
 800073e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000742:	416d      	adcs	r5, r5
 8000744:	eb46 0606 	adc.w	r6, r6, r6
 8000748:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800074c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000750:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000754:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000758:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800075c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000760:	bf88      	it	hi
 8000762:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000766:	d81e      	bhi.n	80007a6 <__aeabi_dmul+0xde>
 8000768:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800076c:	bf08      	it	eq
 800076e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000772:	f150 0000 	adcs.w	r0, r0, #0
 8000776:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000780:	ea46 0101 	orr.w	r1, r6, r1
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000790:	bfc2      	ittt	gt
 8000792:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000796:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800079a:	bd70      	popgt	{r4, r5, r6, pc}
 800079c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007a0:	f04f 0e00 	mov.w	lr, #0
 80007a4:	3c01      	subs	r4, #1
 80007a6:	f300 80ab 	bgt.w	8000900 <__aeabi_dmul+0x238>
 80007aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ae:	bfde      	ittt	le
 80007b0:	2000      	movle	r0, #0
 80007b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007b6:	bd70      	pople	{r4, r5, r6, pc}
 80007b8:	f1c4 0400 	rsb	r4, r4, #0
 80007bc:	3c20      	subs	r4, #32
 80007be:	da35      	bge.n	800082c <__aeabi_dmul+0x164>
 80007c0:	340c      	adds	r4, #12
 80007c2:	dc1b      	bgt.n	80007fc <__aeabi_dmul+0x134>
 80007c4:	f104 0414 	add.w	r4, r4, #20
 80007c8:	f1c4 0520 	rsb	r5, r4, #32
 80007cc:	fa00 f305 	lsl.w	r3, r0, r5
 80007d0:	fa20 f004 	lsr.w	r0, r0, r4
 80007d4:	fa01 f205 	lsl.w	r2, r1, r5
 80007d8:	ea40 0002 	orr.w	r0, r0, r2
 80007dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007e8:	fa21 f604 	lsr.w	r6, r1, r4
 80007ec:	eb42 0106 	adc.w	r1, r2, r6
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 040c 	rsb	r4, r4, #12
 8000800:	f1c4 0520 	rsb	r5, r4, #32
 8000804:	fa00 f304 	lsl.w	r3, r0, r4
 8000808:	fa20 f005 	lsr.w	r0, r0, r5
 800080c:	fa01 f204 	lsl.w	r2, r1, r4
 8000810:	ea40 0002 	orr.w	r0, r0, r2
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800081c:	f141 0100 	adc.w	r1, r1, #0
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 0520 	rsb	r5, r4, #32
 8000830:	fa00 f205 	lsl.w	r2, r0, r5
 8000834:	ea4e 0e02 	orr.w	lr, lr, r2
 8000838:	fa20 f304 	lsr.w	r3, r0, r4
 800083c:	fa01 f205 	lsl.w	r2, r1, r5
 8000840:	ea43 0302 	orr.w	r3, r3, r2
 8000844:	fa21 f004 	lsr.w	r0, r1, r4
 8000848:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800084c:	fa21 f204 	lsr.w	r2, r1, r4
 8000850:	ea20 0002 	bic.w	r0, r0, r2
 8000854:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000858:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800085c:	bf08      	it	eq
 800085e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	f094 0f00 	teq	r4, #0
 8000868:	d10f      	bne.n	800088a <__aeabi_dmul+0x1c2>
 800086a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800086e:	0040      	lsls	r0, r0, #1
 8000870:	eb41 0101 	adc.w	r1, r1, r1
 8000874:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000878:	bf08      	it	eq
 800087a:	3c01      	subeq	r4, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1a6>
 800087e:	ea41 0106 	orr.w	r1, r1, r6
 8000882:	f095 0f00 	teq	r5, #0
 8000886:	bf18      	it	ne
 8000888:	4770      	bxne	lr
 800088a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800088e:	0052      	lsls	r2, r2, #1
 8000890:	eb43 0303 	adc.w	r3, r3, r3
 8000894:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3d01      	subeq	r5, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1c6>
 800089e:	ea43 0306 	orr.w	r3, r3, r6
 80008a2:	4770      	bx	lr
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ac:	bf18      	it	ne
 80008ae:	ea95 0f0c 	teqne	r5, ip
 80008b2:	d00c      	beq.n	80008ce <__aeabi_dmul+0x206>
 80008b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b8:	bf18      	it	ne
 80008ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008be:	d1d1      	bne.n	8000864 <__aeabi_dmul+0x19c>
 80008c0:	ea81 0103 	eor.w	r1, r1, r3
 80008c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008c8:	f04f 0000 	mov.w	r0, #0
 80008cc:	bd70      	pop	{r4, r5, r6, pc}
 80008ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d2:	bf06      	itte	eq
 80008d4:	4610      	moveq	r0, r2
 80008d6:	4619      	moveq	r1, r3
 80008d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008dc:	d019      	beq.n	8000912 <__aeabi_dmul+0x24a>
 80008de:	ea94 0f0c 	teq	r4, ip
 80008e2:	d102      	bne.n	80008ea <__aeabi_dmul+0x222>
 80008e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008e8:	d113      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	d105      	bne.n	80008fc <__aeabi_dmul+0x234>
 80008f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008f4:	bf1c      	itt	ne
 80008f6:	4610      	movne	r0, r2
 80008f8:	4619      	movne	r1, r3
 80008fa:	d10a      	bne.n	8000912 <__aeabi_dmul+0x24a>
 80008fc:	ea81 0103 	eor.w	r1, r1, r3
 8000900:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000904:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000908:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800090c:	f04f 0000 	mov.w	r0, #0
 8000910:	bd70      	pop	{r4, r5, r6, pc}
 8000912:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000916:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800091a:	bd70      	pop	{r4, r5, r6, pc}

0800091c <__aeabi_ddiv>:
 800091c:	b570      	push	{r4, r5, r6, lr}
 800091e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000922:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000926:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800092a:	bf1d      	ittte	ne
 800092c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000930:	ea94 0f0c 	teqne	r4, ip
 8000934:	ea95 0f0c 	teqne	r5, ip
 8000938:	f000 f8a7 	bleq	8000a8a <__aeabi_ddiv+0x16e>
 800093c:	eba4 0405 	sub.w	r4, r4, r5
 8000940:	ea81 0e03 	eor.w	lr, r1, r3
 8000944:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000948:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800094c:	f000 8088 	beq.w	8000a60 <__aeabi_ddiv+0x144>
 8000950:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000954:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000958:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800095c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000960:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000964:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000968:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800096c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000970:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000974:	429d      	cmp	r5, r3
 8000976:	bf08      	it	eq
 8000978:	4296      	cmpeq	r6, r2
 800097a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800097e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000982:	d202      	bcs.n	800098a <__aeabi_ddiv+0x6e>
 8000984:	085b      	lsrs	r3, r3, #1
 8000986:	ea4f 0232 	mov.w	r2, r2, rrx
 800098a:	1ab6      	subs	r6, r6, r2
 800098c:	eb65 0503 	sbc.w	r5, r5, r3
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800099a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009c8:	085b      	lsrs	r3, r3, #1
 80009ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009fc:	d018      	beq.n	8000a30 <__aeabi_ddiv+0x114>
 80009fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a02:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a06:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a0a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a0e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a12:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a16:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a1a:	d1c0      	bne.n	800099e <__aeabi_ddiv+0x82>
 8000a1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a20:	d10b      	bne.n	8000a3a <__aeabi_ddiv+0x11e>
 8000a22:	ea41 0100 	orr.w	r1, r1, r0
 8000a26:	f04f 0000 	mov.w	r0, #0
 8000a2a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a2e:	e7b6      	b.n	800099e <__aeabi_ddiv+0x82>
 8000a30:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a34:	bf04      	itt	eq
 8000a36:	4301      	orreq	r1, r0
 8000a38:	2000      	moveq	r0, #0
 8000a3a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a3e:	bf88      	it	hi
 8000a40:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a44:	f63f aeaf 	bhi.w	80007a6 <__aeabi_dmul+0xde>
 8000a48:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a4c:	bf04      	itt	eq
 8000a4e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a56:	f150 0000 	adcs.w	r0, r0, #0
 8000a5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a5e:	bd70      	pop	{r4, r5, r6, pc}
 8000a60:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a64:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a68:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a6c:	bfc2      	ittt	gt
 8000a6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a76:	bd70      	popgt	{r4, r5, r6, pc}
 8000a78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7c:	f04f 0e00 	mov.w	lr, #0
 8000a80:	3c01      	subs	r4, #1
 8000a82:	e690      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a84:	ea45 0e06 	orr.w	lr, r5, r6
 8000a88:	e68d      	b.n	80007a6 <__aeabi_dmul+0xde>
 8000a8a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a8e:	ea94 0f0c 	teq	r4, ip
 8000a92:	bf08      	it	eq
 8000a94:	ea95 0f0c 	teqeq	r5, ip
 8000a98:	f43f af3b 	beq.w	8000912 <__aeabi_dmul+0x24a>
 8000a9c:	ea94 0f0c 	teq	r4, ip
 8000aa0:	d10a      	bne.n	8000ab8 <__aeabi_ddiv+0x19c>
 8000aa2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000aa6:	f47f af34 	bne.w	8000912 <__aeabi_dmul+0x24a>
 8000aaa:	ea95 0f0c 	teq	r5, ip
 8000aae:	f47f af25 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	e72c      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000ab8:	ea95 0f0c 	teq	r5, ip
 8000abc:	d106      	bne.n	8000acc <__aeabi_ddiv+0x1b0>
 8000abe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ac2:	f43f aefd 	beq.w	80008c0 <__aeabi_dmul+0x1f8>
 8000ac6:	4610      	mov	r0, r2
 8000ac8:	4619      	mov	r1, r3
 8000aca:	e722      	b.n	8000912 <__aeabi_dmul+0x24a>
 8000acc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ad0:	bf18      	it	ne
 8000ad2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ad6:	f47f aec5 	bne.w	8000864 <__aeabi_dmul+0x19c>
 8000ada:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ade:	f47f af0d 	bne.w	80008fc <__aeabi_dmul+0x234>
 8000ae2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ae6:	f47f aeeb 	bne.w	80008c0 <__aeabi_dmul+0x1f8>
 8000aea:	e712      	b.n	8000912 <__aeabi_dmul+0x24a>

08000aec <__gedf2>:
 8000aec:	f04f 3cff 	mov.w	ip, #4294967295
 8000af0:	e006      	b.n	8000b00 <__cmpdf2+0x4>
 8000af2:	bf00      	nop

08000af4 <__ledf2>:
 8000af4:	f04f 0c01 	mov.w	ip, #1
 8000af8:	e002      	b.n	8000b00 <__cmpdf2+0x4>
 8000afa:	bf00      	nop

08000afc <__cmpdf2>:
 8000afc:	f04f 0c01 	mov.w	ip, #1
 8000b00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	bf18      	it	ne
 8000b12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b16:	d01b      	beq.n	8000b50 <__cmpdf2+0x54>
 8000b18:	b001      	add	sp, #4
 8000b1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b1e:	bf0c      	ite	eq
 8000b20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b24:	ea91 0f03 	teqne	r1, r3
 8000b28:	bf02      	ittt	eq
 8000b2a:	ea90 0f02 	teqeq	r0, r2
 8000b2e:	2000      	moveq	r0, #0
 8000b30:	4770      	bxeq	lr
 8000b32:	f110 0f00 	cmn.w	r0, #0
 8000b36:	ea91 0f03 	teq	r1, r3
 8000b3a:	bf58      	it	pl
 8000b3c:	4299      	cmppl	r1, r3
 8000b3e:	bf08      	it	eq
 8000b40:	4290      	cmpeq	r0, r2
 8000b42:	bf2c      	ite	cs
 8000b44:	17d8      	asrcs	r0, r3, #31
 8000b46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b4a:	f040 0001 	orr.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__cmpdf2+0x64>
 8000b5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5e:	d107      	bne.n	8000b70 <__cmpdf2+0x74>
 8000b60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b68:	d1d6      	bne.n	8000b18 <__cmpdf2+0x1c>
 8000b6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6e:	d0d3      	beq.n	8000b18 <__cmpdf2+0x1c>
 8000b70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdrcmple>:
 8000b78:	4684      	mov	ip, r0
 8000b7a:	4610      	mov	r0, r2
 8000b7c:	4662      	mov	r2, ip
 8000b7e:	468c      	mov	ip, r1
 8000b80:	4619      	mov	r1, r3
 8000b82:	4663      	mov	r3, ip
 8000b84:	e000      	b.n	8000b88 <__aeabi_cdcmpeq>
 8000b86:	bf00      	nop

08000b88 <__aeabi_cdcmpeq>:
 8000b88:	b501      	push	{r0, lr}
 8000b8a:	f7ff ffb7 	bl	8000afc <__cmpdf2>
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	bf48      	it	mi
 8000b92:	f110 0f00 	cmnmi.w	r0, #0
 8000b96:	bd01      	pop	{r0, pc}

08000b98 <__aeabi_dcmpeq>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff fff4 	bl	8000b88 <__aeabi_cdcmpeq>
 8000ba0:	bf0c      	ite	eq
 8000ba2:	2001      	moveq	r0, #1
 8000ba4:	2000      	movne	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_dcmplt>:
 8000bac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb0:	f7ff ffea 	bl	8000b88 <__aeabi_cdcmpeq>
 8000bb4:	bf34      	ite	cc
 8000bb6:	2001      	movcc	r0, #1
 8000bb8:	2000      	movcs	r0, #0
 8000bba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_dcmple>:
 8000bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc4:	f7ff ffe0 	bl	8000b88 <__aeabi_cdcmpeq>
 8000bc8:	bf94      	ite	ls
 8000bca:	2001      	movls	r0, #1
 8000bcc:	2000      	movhi	r0, #0
 8000bce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_dcmpge>:
 8000bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd8:	f7ff ffce 	bl	8000b78 <__aeabi_cdrcmple>
 8000bdc:	bf94      	ite	ls
 8000bde:	2001      	movls	r0, #1
 8000be0:	2000      	movhi	r0, #0
 8000be2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be6:	bf00      	nop

08000be8 <__aeabi_dcmpgt>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff ffc4 	bl	8000b78 <__aeabi_cdrcmple>
 8000bf0:	bf34      	ite	cc
 8000bf2:	2001      	movcc	r0, #1
 8000bf4:	2000      	movcs	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_dcmpun>:
 8000bfc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x10>
 8000c06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c0a:	d10a      	bne.n	8000c22 <__aeabi_dcmpun+0x26>
 8000c0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c14:	d102      	bne.n	8000c1c <__aeabi_dcmpun+0x20>
 8000c16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_dcmpun+0x26>
 8000c1c:	f04f 0000 	mov.w	r0, #0
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0001 	mov.w	r0, #1
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2iz>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c30:	d215      	bcs.n	8000c5e <__aeabi_d2iz+0x36>
 8000c32:	d511      	bpl.n	8000c58 <__aeabi_d2iz+0x30>
 8000c34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c3c:	d912      	bls.n	8000c64 <__aeabi_d2iz+0x3c>
 8000c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c52:	bf18      	it	ne
 8000c54:	4240      	negne	r0, r0
 8000c56:	4770      	bx	lr
 8000c58:	f04f 0000 	mov.w	r0, #0
 8000c5c:	4770      	bx	lr
 8000c5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c62:	d105      	bne.n	8000c70 <__aeabi_d2iz+0x48>
 8000c64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	bf08      	it	eq
 8000c6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c6e:	4770      	bx	lr
 8000c70:	f04f 0000 	mov.w	r0, #0
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_d2uiz>:
 8000c78:	004a      	lsls	r2, r1, #1
 8000c7a:	d211      	bcs.n	8000ca0 <__aeabi_d2uiz+0x28>
 8000c7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c80:	d211      	bcs.n	8000ca6 <__aeabi_d2uiz+0x2e>
 8000c82:	d50d      	bpl.n	8000ca0 <__aeabi_d2uiz+0x28>
 8000c84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c8c:	d40e      	bmi.n	8000cac <__aeabi_d2uiz+0x34>
 8000c8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000caa:	d102      	bne.n	8000cb2 <__aeabi_d2uiz+0x3a>
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	4770      	bx	lr
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2f>:
 8000cb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cc0:	bf24      	itt	cs
 8000cc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cca:	d90d      	bls.n	8000ce8 <__aeabi_d2f+0x30>
 8000ccc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cec:	d121      	bne.n	8000d32 <__aeabi_d2f+0x7a>
 8000cee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000cf2:	bfbc      	itt	lt
 8000cf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000cf8:	4770      	bxlt	lr
 8000cfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d02:	f1c2 0218 	rsb	r2, r2, #24
 8000d06:	f1c2 0c20 	rsb	ip, r2, #32
 8000d0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d12:	bf18      	it	ne
 8000d14:	f040 0001 	orrne.w	r0, r0, #1
 8000d18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d24:	ea40 000c 	orr.w	r0, r0, ip
 8000d28:	fa23 f302 	lsr.w	r3, r3, r2
 8000d2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d30:	e7cc      	b.n	8000ccc <__aeabi_d2f+0x14>
 8000d32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d36:	d107      	bne.n	8000d48 <__aeabi_d2f+0x90>
 8000d38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d46:	4770      	bxne	lr
 8000d48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <__aeabi_uldivmod>:
 8000d58:	b953      	cbnz	r3, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5a:	b94a      	cbnz	r2, 8000d70 <__aeabi_uldivmod+0x18>
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	bf08      	it	eq
 8000d60:	2800      	cmpeq	r0, #0
 8000d62:	bf1c      	itt	ne
 8000d64:	f04f 31ff 	movne.w	r1, #4294967295
 8000d68:	f04f 30ff 	movne.w	r0, #4294967295
 8000d6c:	f000 b9a4 	b.w	80010b8 <__aeabi_idiv0>
 8000d70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d78:	f000 f83c 	bl	8000df4 <__udivmoddi4>
 8000d7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d84:	b004      	add	sp, #16
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_d2lz>:
 8000d88:	b538      	push	{r3, r4, r5, lr}
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4604      	mov	r4, r0
 8000d90:	460d      	mov	r5, r1
 8000d92:	f7ff ff0b 	bl	8000bac <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x1c>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4620      	mov	r0, r4
 8000da6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fc81 	bl	80006c8 <__aeabi_dmul>
 8000dc6:	f7ff ff57 	bl	8000c78 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fc02 	bl	80005d4 <__aeabi_ui2d>
 8000dd0:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f7ff fc78 	bl	80006c8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff faba 	bl	8000358 <__aeabi_dsub>
 8000de4:	f7ff ff48 	bl	8000c78 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <__udivmoddi4>:
 8000df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df8:	9d08      	ldr	r5, [sp, #32]
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	468c      	mov	ip, r1
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f040 8083 	bne.w	8000f0a <__udivmoddi4+0x116>
 8000e04:	428a      	cmp	r2, r1
 8000e06:	4617      	mov	r7, r2
 8000e08:	d947      	bls.n	8000e9a <__udivmoddi4+0xa6>
 8000e0a:	fab2 f282 	clz	r2, r2
 8000e0e:	b142      	cbz	r2, 8000e22 <__udivmoddi4+0x2e>
 8000e10:	f1c2 0020 	rsb	r0, r2, #32
 8000e14:	fa24 f000 	lsr.w	r0, r4, r0
 8000e18:	4091      	lsls	r1, r2
 8000e1a:	4097      	lsls	r7, r2
 8000e1c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e20:	4094      	lsls	r4, r2
 8000e22:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e26:	0c23      	lsrs	r3, r4, #16
 8000e28:	fbbc f6f8 	udiv	r6, ip, r8
 8000e2c:	fa1f fe87 	uxth.w	lr, r7
 8000e30:	fb08 c116 	mls	r1, r8, r6, ip
 8000e34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e38:	fb06 f10e 	mul.w	r1, r6, lr
 8000e3c:	4299      	cmp	r1, r3
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x60>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e46:	f080 8119 	bcs.w	800107c <__udivmoddi4+0x288>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 8116 	bls.w	800107c <__udivmoddi4+0x288>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b2a4      	uxth	r4, r4
 8000e58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e5c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e68:	45a6      	cmp	lr, r4
 8000e6a:	d909      	bls.n	8000e80 <__udivmoddi4+0x8c>
 8000e6c:	193c      	adds	r4, r7, r4
 8000e6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e72:	f080 8105 	bcs.w	8001080 <__udivmoddi4+0x28c>
 8000e76:	45a6      	cmp	lr, r4
 8000e78:	f240 8102 	bls.w	8001080 <__udivmoddi4+0x28c>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	443c      	add	r4, r7
 8000e80:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e84:	eba4 040e 	sub.w	r4, r4, lr
 8000e88:	2600      	movs	r6, #0
 8000e8a:	b11d      	cbz	r5, 8000e94 <__udivmoddi4+0xa0>
 8000e8c:	40d4      	lsrs	r4, r2
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e9c5 4300 	strd	r4, r3, [r5]
 8000e94:	4631      	mov	r1, r6
 8000e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9a:	b902      	cbnz	r2, 8000e9e <__udivmoddi4+0xaa>
 8000e9c:	deff      	udf	#255	; 0xff
 8000e9e:	fab2 f282 	clz	r2, r2
 8000ea2:	2a00      	cmp	r2, #0
 8000ea4:	d150      	bne.n	8000f48 <__udivmoddi4+0x154>
 8000ea6:	1bcb      	subs	r3, r1, r7
 8000ea8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eac:	fa1f f887 	uxth.w	r8, r7
 8000eb0:	2601      	movs	r6, #1
 8000eb2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000eb6:	0c21      	lsrs	r1, r4, #16
 8000eb8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ebc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec0:	fb08 f30c 	mul.w	r3, r8, ip
 8000ec4:	428b      	cmp	r3, r1
 8000ec6:	d907      	bls.n	8000ed8 <__udivmoddi4+0xe4>
 8000ec8:	1879      	adds	r1, r7, r1
 8000eca:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ece:	d202      	bcs.n	8000ed6 <__udivmoddi4+0xe2>
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	f200 80e9 	bhi.w	80010a8 <__udivmoddi4+0x2b4>
 8000ed6:	4684      	mov	ip, r0
 8000ed8:	1ac9      	subs	r1, r1, r3
 8000eda:	b2a3      	uxth	r3, r4
 8000edc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ee8:	fb08 f800 	mul.w	r8, r8, r0
 8000eec:	45a0      	cmp	r8, r4
 8000eee:	d907      	bls.n	8000f00 <__udivmoddi4+0x10c>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x10a>
 8000ef8:	45a0      	cmp	r8, r4
 8000efa:	f200 80d9 	bhi.w	80010b0 <__udivmoddi4+0x2bc>
 8000efe:	4618      	mov	r0, r3
 8000f00:	eba4 0408 	sub.w	r4, r4, r8
 8000f04:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000f08:	e7bf      	b.n	8000e8a <__udivmoddi4+0x96>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d909      	bls.n	8000f22 <__udivmoddi4+0x12e>
 8000f0e:	2d00      	cmp	r5, #0
 8000f10:	f000 80b1 	beq.w	8001076 <__udivmoddi4+0x282>
 8000f14:	2600      	movs	r6, #0
 8000f16:	e9c5 0100 	strd	r0, r1, [r5]
 8000f1a:	4630      	mov	r0, r6
 8000f1c:	4631      	mov	r1, r6
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	fab3 f683 	clz	r6, r3
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	d14a      	bne.n	8000fc0 <__udivmoddi4+0x1cc>
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	d302      	bcc.n	8000f34 <__udivmoddi4+0x140>
 8000f2e:	4282      	cmp	r2, r0
 8000f30:	f200 80b8 	bhi.w	80010a4 <__udivmoddi4+0x2b0>
 8000f34:	1a84      	subs	r4, r0, r2
 8000f36:	eb61 0103 	sbc.w	r1, r1, r3
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	468c      	mov	ip, r1
 8000f3e:	2d00      	cmp	r5, #0
 8000f40:	d0a8      	beq.n	8000e94 <__udivmoddi4+0xa0>
 8000f42:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f46:	e7a5      	b.n	8000e94 <__udivmoddi4+0xa0>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f50:	4097      	lsls	r7, r2
 8000f52:	fa01 f002 	lsl.w	r0, r1, r2
 8000f56:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f5a:	40d9      	lsrs	r1, r3
 8000f5c:	4330      	orrs	r0, r6
 8000f5e:	0c03      	lsrs	r3, r0, #16
 8000f60:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f64:	fa1f f887 	uxth.w	r8, r7
 8000f68:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f70:	fb06 f108 	mul.w	r1, r6, r8
 8000f74:	4299      	cmp	r1, r3
 8000f76:	fa04 f402 	lsl.w	r4, r4, r2
 8000f7a:	d909      	bls.n	8000f90 <__udivmoddi4+0x19c>
 8000f7c:	18fb      	adds	r3, r7, r3
 8000f7e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f82:	f080 808d 	bcs.w	80010a0 <__udivmoddi4+0x2ac>
 8000f86:	4299      	cmp	r1, r3
 8000f88:	f240 808a 	bls.w	80010a0 <__udivmoddi4+0x2ac>
 8000f8c:	3e02      	subs	r6, #2
 8000f8e:	443b      	add	r3, r7
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b281      	uxth	r1, r0
 8000f94:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f98:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa0:	fb00 f308 	mul.w	r3, r0, r8
 8000fa4:	428b      	cmp	r3, r1
 8000fa6:	d907      	bls.n	8000fb8 <__udivmoddi4+0x1c4>
 8000fa8:	1879      	adds	r1, r7, r1
 8000faa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fae:	d273      	bcs.n	8001098 <__udivmoddi4+0x2a4>
 8000fb0:	428b      	cmp	r3, r1
 8000fb2:	d971      	bls.n	8001098 <__udivmoddi4+0x2a4>
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	4439      	add	r1, r7
 8000fb8:	1acb      	subs	r3, r1, r3
 8000fba:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fbe:	e778      	b.n	8000eb2 <__udivmoddi4+0xbe>
 8000fc0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fc4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fc8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fcc:	431c      	orrs	r4, r3
 8000fce:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fd2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fd6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fda:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fde:	431f      	orrs	r7, r3
 8000fe0:	0c3b      	lsrs	r3, r7, #16
 8000fe2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe6:	fa1f f884 	uxth.w	r8, r4
 8000fea:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ff2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ff6:	458a      	cmp	sl, r1
 8000ff8:	fa02 f206 	lsl.w	r2, r2, r6
 8000ffc:	fa00 f306 	lsl.w	r3, r0, r6
 8001000:	d908      	bls.n	8001014 <__udivmoddi4+0x220>
 8001002:	1861      	adds	r1, r4, r1
 8001004:	f109 30ff 	add.w	r0, r9, #4294967295
 8001008:	d248      	bcs.n	800109c <__udivmoddi4+0x2a8>
 800100a:	458a      	cmp	sl, r1
 800100c:	d946      	bls.n	800109c <__udivmoddi4+0x2a8>
 800100e:	f1a9 0902 	sub.w	r9, r9, #2
 8001012:	4421      	add	r1, r4
 8001014:	eba1 010a 	sub.w	r1, r1, sl
 8001018:	b2bf      	uxth	r7, r7
 800101a:	fbb1 f0fe 	udiv	r0, r1, lr
 800101e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001022:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001026:	fb00 f808 	mul.w	r8, r0, r8
 800102a:	45b8      	cmp	r8, r7
 800102c:	d907      	bls.n	800103e <__udivmoddi4+0x24a>
 800102e:	19e7      	adds	r7, r4, r7
 8001030:	f100 31ff 	add.w	r1, r0, #4294967295
 8001034:	d22e      	bcs.n	8001094 <__udivmoddi4+0x2a0>
 8001036:	45b8      	cmp	r8, r7
 8001038:	d92c      	bls.n	8001094 <__udivmoddi4+0x2a0>
 800103a:	3802      	subs	r0, #2
 800103c:	4427      	add	r7, r4
 800103e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001042:	eba7 0708 	sub.w	r7, r7, r8
 8001046:	fba0 8902 	umull	r8, r9, r0, r2
 800104a:	454f      	cmp	r7, r9
 800104c:	46c6      	mov	lr, r8
 800104e:	4649      	mov	r1, r9
 8001050:	d31a      	bcc.n	8001088 <__udivmoddi4+0x294>
 8001052:	d017      	beq.n	8001084 <__udivmoddi4+0x290>
 8001054:	b15d      	cbz	r5, 800106e <__udivmoddi4+0x27a>
 8001056:	ebb3 020e 	subs.w	r2, r3, lr
 800105a:	eb67 0701 	sbc.w	r7, r7, r1
 800105e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001062:	40f2      	lsrs	r2, r6
 8001064:	ea4c 0202 	orr.w	r2, ip, r2
 8001068:	40f7      	lsrs	r7, r6
 800106a:	e9c5 2700 	strd	r2, r7, [r5]
 800106e:	2600      	movs	r6, #0
 8001070:	4631      	mov	r1, r6
 8001072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001076:	462e      	mov	r6, r5
 8001078:	4628      	mov	r0, r5
 800107a:	e70b      	b.n	8000e94 <__udivmoddi4+0xa0>
 800107c:	4606      	mov	r6, r0
 800107e:	e6e9      	b.n	8000e54 <__udivmoddi4+0x60>
 8001080:	4618      	mov	r0, r3
 8001082:	e6fd      	b.n	8000e80 <__udivmoddi4+0x8c>
 8001084:	4543      	cmp	r3, r8
 8001086:	d2e5      	bcs.n	8001054 <__udivmoddi4+0x260>
 8001088:	ebb8 0e02 	subs.w	lr, r8, r2
 800108c:	eb69 0104 	sbc.w	r1, r9, r4
 8001090:	3801      	subs	r0, #1
 8001092:	e7df      	b.n	8001054 <__udivmoddi4+0x260>
 8001094:	4608      	mov	r0, r1
 8001096:	e7d2      	b.n	800103e <__udivmoddi4+0x24a>
 8001098:	4660      	mov	r0, ip
 800109a:	e78d      	b.n	8000fb8 <__udivmoddi4+0x1c4>
 800109c:	4681      	mov	r9, r0
 800109e:	e7b9      	b.n	8001014 <__udivmoddi4+0x220>
 80010a0:	4666      	mov	r6, ip
 80010a2:	e775      	b.n	8000f90 <__udivmoddi4+0x19c>
 80010a4:	4630      	mov	r0, r6
 80010a6:	e74a      	b.n	8000f3e <__udivmoddi4+0x14a>
 80010a8:	f1ac 0c02 	sub.w	ip, ip, #2
 80010ac:	4439      	add	r1, r7
 80010ae:	e713      	b.n	8000ed8 <__udivmoddi4+0xe4>
 80010b0:	3802      	subs	r0, #2
 80010b2:	443c      	add	r4, r7
 80010b4:	e724      	b.n	8000f00 <__udivmoddi4+0x10c>
 80010b6:	bf00      	nop

080010b8 <__aeabi_idiv0>:
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop

080010bc <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08e      	sub	sp, #56	; 0x38
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]
 80010d2:	615a      	str	r2, [r3, #20]
 80010d4:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80010d6:	463b      	mov	r3, r7
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]
 80010e4:	615a      	str	r2, [r3, #20]
 80010e6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80010e8:	4b2f      	ldr	r3, [pc, #188]	; (80011a8 <MX_FSMC_Init+0xec>)
 80010ea:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80010ee:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80010f0:	4b2d      	ldr	r3, [pc, #180]	; (80011a8 <MX_FSMC_Init+0xec>)
 80010f2:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <MX_FSMC_Init+0xf0>)
 80010f4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 80010f6:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <MX_FSMC_Init+0xec>)
 80010f8:	2206      	movs	r2, #6
 80010fa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80010fc:	4b2a      	ldr	r3, [pc, #168]	; (80011a8 <MX_FSMC_Init+0xec>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001102:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <MX_FSMC_Init+0xec>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001108:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <MX_FSMC_Init+0xec>)
 800110a:	2210      	movs	r2, #16
 800110c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800110e:	4b26      	ldr	r3, [pc, #152]	; (80011a8 <MX_FSMC_Init+0xec>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001114:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <MX_FSMC_Init+0xec>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800111a:	4b23      	ldr	r3, [pc, #140]	; (80011a8 <MX_FSMC_Init+0xec>)
 800111c:	2200      	movs	r2, #0
 800111e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001120:	4b21      	ldr	r3, [pc, #132]	; (80011a8 <MX_FSMC_Init+0xec>)
 8001122:	2200      	movs	r2, #0
 8001124:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001126:	4b20      	ldr	r3, [pc, #128]	; (80011a8 <MX_FSMC_Init+0xec>)
 8001128:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800112c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <MX_FSMC_Init+0xec>)
 8001130:	2200      	movs	r2, #0
 8001132:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8001134:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_FSMC_Init+0xec>)
 8001136:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800113a:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_FSMC_Init+0xec>)
 800113e:	2200      	movs	r2, #0
 8001140:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_FSMC_Init+0xec>)
 8001144:	2200      	movs	r2, #0
 8001146:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_FSMC_Init+0xec>)
 800114a:	2200      	movs	r2, #0
 800114c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800114e:	230f      	movs	r3, #15
 8001150:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8001152:	230f      	movs	r3, #15
 8001154:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001156:	233c      	movs	r3, #60	; 0x3c
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 800115e:	2310      	movs	r3, #16
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8001162:	2311      	movs	r3, #17
 8001164:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001166:	2300      	movs	r3, #0
 8001168:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 800116a:	2309      	movs	r3, #9
 800116c:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800116e:	230f      	movs	r3, #15
 8001170:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 8;
 8001172:	2308      	movs	r3, #8
 8001174:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800117a:	2310      	movs	r3, #16
 800117c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800117e:	2311      	movs	r3, #17
 8001180:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001186:	463a      	mov	r2, r7
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <MX_FSMC_Init+0xec>)
 8001190:	f001 fe10 	bl	8002db4 <HAL_SRAM_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800119a:	f000 faa5 	bl	80016e8 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800119e:	bf00      	nop
 80011a0:	3738      	adds	r7, #56	; 0x38
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000210 	.word	0x20000210
 80011ac:	a0000104 	.word	0xa0000104

080011b0 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b086      	sub	sp, #24
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80011c4:	4b2c      	ldr	r3, [pc, #176]	; (8001278 <HAL_FSMC_MspInit+0xc8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d151      	bne.n	8001270 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 80011cc:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <HAL_FSMC_MspInit+0xc8>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4b29      	ldr	r3, [pc, #164]	; (800127c <HAL_FSMC_MspInit+0xcc>)
 80011d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011da:	4a28      	ldr	r2, [pc, #160]	; (800127c <HAL_FSMC_MspInit+0xcc>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6393      	str	r3, [r2, #56]	; 0x38
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <HAL_FSMC_MspInit+0xcc>)
 80011e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001200:	230c      	movs	r3, #12
 8001202:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	4619      	mov	r1, r3
 8001208:	481d      	ldr	r0, [pc, #116]	; (8001280 <HAL_FSMC_MspInit+0xd0>)
 800120a:	f000 fef9 	bl	8002000 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800120e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001212:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800121c:	2303      	movs	r3, #3
 800121e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001220:	230c      	movs	r3, #12
 8001222:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	4619      	mov	r1, r3
 8001228:	4816      	ldr	r0, [pc, #88]	; (8001284 <HAL_FSMC_MspInit+0xd4>)
 800122a:	f000 fee9 	bl	8002000 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800122e:	f24c 7333 	movw	r3, #50995	; 0xc733
 8001232:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2302      	movs	r3, #2
 8001236:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123c:	2303      	movs	r3, #3
 800123e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001240:	230c      	movs	r3, #12
 8001242:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	4619      	mov	r1, r3
 8001248:	480f      	ldr	r0, [pc, #60]	; (8001288 <HAL_FSMC_MspInit+0xd8>)
 800124a:	f000 fed9 	bl	8002000 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125c:	2303      	movs	r3, #3
 800125e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001260:	230c      	movs	r3, #12
 8001262:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	4619      	mov	r1, r3
 8001268:	4808      	ldr	r0, [pc, #32]	; (800128c <HAL_FSMC_MspInit+0xdc>)
 800126a:	f000 fec9 	bl	8002000 <HAL_GPIO_Init>
 800126e:	e000      	b.n	8001272 <HAL_FSMC_MspInit+0xc2>
    return;
 8001270:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001272:	3718      	adds	r7, #24
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000200 	.word	0x20000200
 800127c:	40023800 	.word	0x40023800
 8001280:	40021400 	.word	0x40021400
 8001284:	40021000 	.word	0x40021000
 8001288:	40020c00 	.word	0x40020c00
 800128c:	40021800 	.word	0x40021800

08001290 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001298:	f7ff ff8a 	bl	80011b0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08e      	sub	sp, #56	; 0x38
 80012a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]
 80012be:	4b7e      	ldr	r3, [pc, #504]	; (80014b8 <MX_GPIO_Init+0x214>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a7d      	ldr	r2, [pc, #500]	; (80014b8 <MX_GPIO_Init+0x214>)
 80012c4:	f043 0310 	orr.w	r3, r3, #16
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b7b      	ldr	r3, [pc, #492]	; (80014b8 <MX_GPIO_Init+0x214>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0310 	and.w	r3, r3, #16
 80012d2:	623b      	str	r3, [r7, #32]
 80012d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	4b77      	ldr	r3, [pc, #476]	; (80014b8 <MX_GPIO_Init+0x214>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a76      	ldr	r2, [pc, #472]	; (80014b8 <MX_GPIO_Init+0x214>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b74      	ldr	r3, [pc, #464]	; (80014b8 <MX_GPIO_Init+0x214>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	61fb      	str	r3, [r7, #28]
 80012f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	4b70      	ldr	r3, [pc, #448]	; (80014b8 <MX_GPIO_Init+0x214>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a6f      	ldr	r2, [pc, #444]	; (80014b8 <MX_GPIO_Init+0x214>)
 80012fc:	f043 0320 	orr.w	r3, r3, #32
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b6d      	ldr	r3, [pc, #436]	; (80014b8 <MX_GPIO_Init+0x214>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	617b      	str	r3, [r7, #20]
 8001312:	4b69      	ldr	r3, [pc, #420]	; (80014b8 <MX_GPIO_Init+0x214>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a68      	ldr	r2, [pc, #416]	; (80014b8 <MX_GPIO_Init+0x214>)
 8001318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b66      	ldr	r3, [pc, #408]	; (80014b8 <MX_GPIO_Init+0x214>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	4b62      	ldr	r3, [pc, #392]	; (80014b8 <MX_GPIO_Init+0x214>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a61      	ldr	r2, [pc, #388]	; (80014b8 <MX_GPIO_Init+0x214>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b5f      	ldr	r3, [pc, #380]	; (80014b8 <MX_GPIO_Init+0x214>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	613b      	str	r3, [r7, #16]
 8001344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	4b5b      	ldr	r3, [pc, #364]	; (80014b8 <MX_GPIO_Init+0x214>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a5a      	ldr	r2, [pc, #360]	; (80014b8 <MX_GPIO_Init+0x214>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b58      	ldr	r3, [pc, #352]	; (80014b8 <MX_GPIO_Init+0x214>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	60fb      	str	r3, [r7, #12]
 8001360:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	60bb      	str	r3, [r7, #8]
 8001366:	4b54      	ldr	r3, [pc, #336]	; (80014b8 <MX_GPIO_Init+0x214>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	4a53      	ldr	r2, [pc, #332]	; (80014b8 <MX_GPIO_Init+0x214>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	6313      	str	r3, [r2, #48]	; 0x30
 8001372:	4b51      	ldr	r3, [pc, #324]	; (80014b8 <MX_GPIO_Init+0x214>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
 8001382:	4b4d      	ldr	r3, [pc, #308]	; (80014b8 <MX_GPIO_Init+0x214>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a4c      	ldr	r2, [pc, #304]	; (80014b8 <MX_GPIO_Init+0x214>)
 8001388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b4a      	ldr	r3, [pc, #296]	; (80014b8 <MX_GPIO_Init+0x214>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TCS_GPIO_Port, TCS_Pin, GPIO_PIN_RESET);
 800139a:	2200      	movs	r2, #0
 800139c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a0:	4846      	ldr	r0, [pc, #280]	; (80014bc <MX_GPIO_Init+0x218>)
 80013a2:	f000 ffc9 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin|LED2_Pin|TDIN_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80013ac:	4844      	ldr	r0, [pc, #272]	; (80014c0 <MX_GPIO_Init+0x21c>)
 80013ae:	f000 ffc3 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TCLK_Pin|LCD_BL_Pin|IIC_SCL_Pin|IIC_SDA_Pin, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	f248 3101 	movw	r1, #33537	; 0x8301
 80013b8:	4842      	ldr	r0, [pc, #264]	; (80014c4 <MX_GPIO_Init+0x220>)
 80013ba:	f000 ffbd 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013c4:	4840      	ldr	r0, [pc, #256]	; (80014c8 <MX_GPIO_Init+0x224>)
 80013c6:	f000 ffb7 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin|KEY2_Pin;
 80013ca:	231c      	movs	r3, #28
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013da:	4619      	mov	r1, r3
 80013dc:	483b      	ldr	r0, [pc, #236]	; (80014cc <MX_GPIO_Init+0x228>)
 80013de:	f000 fe0f 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TCS_Pin;
 80013e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TCS_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f8:	4619      	mov	r1, r3
 80013fa:	4830      	ldr	r0, [pc, #192]	; (80014bc <MX_GPIO_Init+0x218>)
 80013fc:	f000 fe00 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 8001400:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001406:	2301      	movs	r3, #1
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800140a:	2301      	movs	r3, #1
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140e:	2303      	movs	r3, #3
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4829      	ldr	r0, [pc, #164]	; (80014c0 <MX_GPIO_Init+0x21c>)
 800141a:	f000 fdf1 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TCLK_Pin|IIC_SCL_Pin|IIC_SDA_Pin;
 800141e:	f240 3301 	movw	r3, #769	; 0x301
 8001422:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001424:	2301      	movs	r3, #1
 8001426:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001428:	2301      	movs	r3, #1
 800142a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001434:	4619      	mov	r1, r3
 8001436:	4823      	ldr	r0, [pc, #140]	; (80014c4 <MX_GPIO_Init+0x220>)
 8001438:	f000 fde2 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PEN_Pin|DOUT_Pin;
 800143c:	2306      	movs	r3, #6
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001440:	2300      	movs	r3, #0
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001444:	2301      	movs	r3, #1
 8001446:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001448:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800144c:	4619      	mov	r1, r3
 800144e:	481d      	ldr	r0, [pc, #116]	; (80014c4 <MX_GPIO_Init+0x220>)
 8001450:	f000 fdd6 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TDIN_Pin;
 8001454:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001458:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001462:	2303      	movs	r3, #3
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TDIN_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146a:	4619      	mov	r1, r3
 800146c:	4814      	ldr	r0, [pc, #80]	; (80014c0 <MX_GPIO_Init+0x21c>)
 800146e:	f000 fdc7 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800147c:	2301      	movs	r3, #1
 800147e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001480:	2301      	movs	r3, #1
 8001482:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001488:	4619      	mov	r1, r3
 800148a:	480e      	ldr	r0, [pc, #56]	; (80014c4 <MX_GPIO_Init+0x220>)
 800148c:	f000 fdb8 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	2303      	movs	r3, #3
 80014a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80014a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a6:	4619      	mov	r1, r3
 80014a8:	4807      	ldr	r0, [pc, #28]	; (80014c8 <MX_GPIO_Init+0x224>)
 80014aa:	f000 fda9 	bl	8002000 <HAL_GPIO_Init>

}
 80014ae:	bf00      	nop
 80014b0:	3738      	adds	r7, #56	; 0x38
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023800 	.word	0x40023800
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40021400 	.word	0x40021400
 80014c4:	40020400 	.word	0x40020400
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40021000 	.word	0x40021000

080014d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d4:	f000 fc3c 	bl	8001d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d8:	f000 f80e 	bl	80014f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014dc:	f7ff fee2 	bl	80012a4 <MX_GPIO_Init>
  MX_FSMC_Init();
 80014e0:	f7ff fdec 	bl	80010bc <MX_FSMC_Init>
  MX_TIM3_Init();
 80014e4:	f000 fab2 	bl	8001a4c <MX_TIM3_Init>
  MX_SPI3_Init();
 80014e8:	f000 f904 	bl	80016f4 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80014ec:	f000 fb82 	bl	8001bf4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  arm_rfft_fast_f32_app();
 80014f0:	f000 f86e 	bl	80015d0 <arm_rfft_fast_f32_app>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <main+0x24>
	...

080014f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b094      	sub	sp, #80	; 0x50
 80014fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fe:	f107 0320 	add.w	r3, r7, #32
 8001502:	2230      	movs	r2, #48	; 0x30
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f003 ff5c 	bl	80053c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	4b29      	ldr	r3, [pc, #164]	; (80015c8 <SystemClock_Config+0xd0>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	4a28      	ldr	r2, [pc, #160]	; (80015c8 <SystemClock_Config+0xd0>)
 8001526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152a:	6413      	str	r3, [r2, #64]	; 0x40
 800152c:	4b26      	ldr	r3, [pc, #152]	; (80015c8 <SystemClock_Config+0xd0>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001538:	2300      	movs	r3, #0
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	4b23      	ldr	r3, [pc, #140]	; (80015cc <SystemClock_Config+0xd4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a22      	ldr	r2, [pc, #136]	; (80015cc <SystemClock_Config+0xd4>)
 8001542:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	4b20      	ldr	r3, [pc, #128]	; (80015cc <SystemClock_Config+0xd4>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001554:	2301      	movs	r3, #1
 8001556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001558:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155e:	2302      	movs	r3, #2
 8001560:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001562:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001568:	2304      	movs	r3, #4
 800156a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800156c:	23a8      	movs	r3, #168	; 0xa8
 800156e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001570:	2302      	movs	r3, #2
 8001572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001574:	2304      	movs	r3, #4
 8001576:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001578:	f107 0320 	add.w	r3, r7, #32
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fef5 	bl	800236c <HAL_RCC_OscConfig>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001588:	f000 f8ae 	bl	80016e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158c:	230f      	movs	r3, #15
 800158e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001590:	2302      	movs	r3, #2
 8001592:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001598:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800159c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800159e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	2105      	movs	r1, #5
 80015aa:	4618      	mov	r0, r3
 80015ac:	f001 f956 	bl	800285c <HAL_RCC_ClockConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015b6:	f000 f897 	bl	80016e8 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80015ba:	f001 fa35 	bl	8002a28 <HAL_RCC_EnableCSS>
}
 80015be:	bf00      	nop
 80015c0:	3750      	adds	r7, #80	; 0x50
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40007000 	.word	0x40007000

080015d0 <arm_rfft_fast_f32_app>:

/* USER CODE BEGIN 4 */
void arm_rfft_fast_f32_app(void)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
  uint16_t i;
  arm_rfft_fast_instance_f32 S;

  /* 实数序列FFT长度 */
  uint16_t fftSize = NPT;
 80015d6:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80015da:	83bb      	strh	r3, [r7, #28]
  /* 正变换 */
    uint8_t ifftFlag = 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	76fb      	strb	r3, [r7, #27]

  /* 初始化结构体S中的参数 */
   arm_rfft_fast_init_f32(&S, fftSize);
 80015e0:	8bba      	ldrh	r2, [r7, #28]
 80015e2:	463b      	mov	r3, r7
 80015e4:	4611      	mov	r1, r2
 80015e6:	4618      	mov	r0, r3
 80015e8:	f002 fd7a 	bl	80040e0 <arm_rfft_fast_init_f32>

    /* 按照实部，虚部，实部，虚部..... 的顺序存储数据 */
  for(i=0; i<fftSize; i++)
 80015ec:	2300      	movs	r3, #0
 80015ee:	83fb      	strh	r3, [r7, #30]
 80015f0:	e034      	b.n	800165c <arm_rfft_fast_f32_app+0x8c>
  {
    /*3种频率 50Hz 2500Hz 2550Hz */
    testInput_f32[i] = 1000*arm_sin_f32(PI2*i*50.0/Fs) ;
 80015f2:	8bfb      	ldrh	r3, [r7, #30]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe fffd 	bl	80005f4 <__aeabi_i2d>
 80015fa:	a339      	add	r3, pc, #228	; (adr r3, 80016e0 <arm_rfft_fast_f32_app+0x110>)
 80015fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001600:	f7ff f862 	bl	80006c8 <__aeabi_dmul>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4610      	mov	r0, r2
 800160a:	4619      	mov	r1, r3
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <arm_rfft_fast_f32_app+0xf8>)
 8001612:	f7ff f859 	bl	80006c8 <__aeabi_dmul>
 8001616:	4602      	mov	r2, r0
 8001618:	460b      	mov	r3, r1
 800161a:	4610      	mov	r0, r2
 800161c:	4619      	mov	r1, r3
 800161e:	a328      	add	r3, pc, #160	; (adr r3, 80016c0 <arm_rfft_fast_f32_app+0xf0>)
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	f7ff f97a 	bl	800091c <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4610      	mov	r0, r2
 800162e:	4619      	mov	r1, r3
 8001630:	f7ff fb42 	bl	8000cb8 <__aeabi_d2f>
 8001634:	4603      	mov	r3, r0
 8001636:	ee00 3a10 	vmov	s0, r3
 800163a:	f003 fb63 	bl	8004d04 <arm_sin_f32>
 800163e:	eef0 7a40 	vmov.f32	s15, s0
 8001642:	8bfb      	ldrh	r3, [r7, #30]
 8001644:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80016cc <arm_rfft_fast_f32_app+0xfc>
 8001648:	ee67 7a87 	vmul.f32	s15, s15, s14
 800164c:	4a20      	ldr	r2, [pc, #128]	; (80016d0 <arm_rfft_fast_f32_app+0x100>)
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<fftSize; i++)
 8001656:	8bfb      	ldrh	r3, [r7, #30]
 8001658:	3301      	adds	r3, #1
 800165a:	83fb      	strh	r3, [r7, #30]
 800165c:	8bfa      	ldrh	r2, [r7, #30]
 800165e:	8bbb      	ldrh	r3, [r7, #28]
 8001660:	429a      	cmp	r2, r3
 8001662:	d3c6      	bcc.n	80015f2 <arm_rfft_fast_f32_app+0x22>
  }

  /* 1024点实序列快速FFT */
  arm_rfft_fast_f32(&S, testInput_f32, testOutput_f32, ifftFlag);
 8001664:	7efb      	ldrb	r3, [r7, #27]
 8001666:	4638      	mov	r0, r7
 8001668:	4a1a      	ldr	r2, [pc, #104]	; (80016d4 <arm_rfft_fast_f32_app+0x104>)
 800166a:	4919      	ldr	r1, [pc, #100]	; (80016d0 <arm_rfft_fast_f32_app+0x100>)
 800166c:	f002 fdbc 	bl	80041e8 <arm_rfft_fast_f32>

  /* 为了方便跟函数arm_cfft_f32计算的结果做对比，这里求解了1024组模值，实际函数arm_rfft_fast_f32
     只求解出了512组
  */
   arm_cmplx_mag_f32(testOutput_f32, testOutput, fftSize);
 8001670:	8bbb      	ldrh	r3, [r7, #28]
 8001672:	461a      	mov	r2, r3
 8001674:	4918      	ldr	r1, [pc, #96]	; (80016d8 <arm_rfft_fast_f32_app+0x108>)
 8001676:	4817      	ldr	r0, [pc, #92]	; (80016d4 <arm_rfft_fast_f32_app+0x104>)
 8001678:	f003 fa52 	bl	8004b20 <arm_cmplx_mag_f32>

  /* 串口打印求解的模值 */
  for(i=0; i<fftSize/2; i++)
 800167c:	2300      	movs	r3, #0
 800167e:	83fb      	strh	r3, [r7, #30]
 8001680:	e011      	b.n	80016a6 <arm_rfft_fast_f32_app+0xd6>
  {
    printf("%d  %f\r\n", i,testOutput[i]);
 8001682:	8bfc      	ldrh	r4, [r7, #30]
 8001684:	8bfb      	ldrh	r3, [r7, #30]
 8001686:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <arm_rfft_fast_f32_app+0x108>)
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ffc2 	bl	8000618 <__aeabi_f2d>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4621      	mov	r1, r4
 800169a:	4810      	ldr	r0, [pc, #64]	; (80016dc <arm_rfft_fast_f32_app+0x10c>)
 800169c:	f004 fd14 	bl	80060c8 <iprintf>
  for(i=0; i<fftSize/2; i++)
 80016a0:	8bfb      	ldrh	r3, [r7, #30]
 80016a2:	3301      	adds	r3, #1
 80016a4:	83fb      	strh	r3, [r7, #30]
 80016a6:	8bbb      	ldrh	r3, [r7, #28]
 80016a8:	085b      	lsrs	r3, r3, #1
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	8bfa      	ldrh	r2, [r7, #30]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d3e7      	bcc.n	8001682 <arm_rfft_fast_f32_app+0xb2>
  }
}
 80016b2:	bf00      	nop
 80016b4:	bf00      	nop
 80016b6:	3724      	adds	r7, #36	; 0x24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd90      	pop	{r4, r7, pc}
 80016bc:	f3af 8000 	nop.w
 80016c0:	00000000 	.word	0x00000000
 80016c4:	409ffc00 	.word	0x409ffc00
 80016c8:	40490000 	.word	0x40490000
 80016cc:	447a0000 	.word	0x447a0000
 80016d0:	20004258 	.word	0x20004258
 80016d4:	20000260 	.word	0x20000260
 80016d8:	2000225c 	.word	0x2000225c
 80016dc:	08009cc0 	.word	0x08009cc0
 80016e0:	54442d1c 	.word	0x54442d1c
 80016e4:	401921fb 	.word	0x401921fb

080016e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ec:	b672      	cpsid	i
}
 80016ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f0:	e7fe      	b.n	80016f0 <Error_Handler+0x8>
	...

080016f4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <MX_SPI3_Init+0x68>)
 80016fa:	4a19      	ldr	r2, [pc, #100]	; (8001760 <MX_SPI3_Init+0x6c>)
 80016fc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80016fe:	4b17      	ldr	r3, [pc, #92]	; (800175c <MX_SPI3_Init+0x68>)
 8001700:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001704:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <MX_SPI3_Init+0x68>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <MX_SPI3_Init+0x68>)
 800170e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001712:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <MX_SPI3_Init+0x68>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800171a:	4b10      	ldr	r3, [pc, #64]	; (800175c <MX_SPI3_Init+0x68>)
 800171c:	2201      	movs	r2, #1
 800171e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <MX_SPI3_Init+0x68>)
 8001722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001726:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001728:	4b0c      	ldr	r3, [pc, #48]	; (800175c <MX_SPI3_Init+0x68>)
 800172a:	2218      	movs	r2, #24
 800172c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800172e:	4b0b      	ldr	r3, [pc, #44]	; (800175c <MX_SPI3_Init+0x68>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001734:	4b09      	ldr	r3, [pc, #36]	; (800175c <MX_SPI3_Init+0x68>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173a:	4b08      	ldr	r3, [pc, #32]	; (800175c <MX_SPI3_Init+0x68>)
 800173c:	2200      	movs	r2, #0
 800173e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <MX_SPI3_Init+0x68>)
 8001742:	220a      	movs	r2, #10
 8001744:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <MX_SPI3_Init+0x68>)
 8001748:	f001 faab 	bl	8002ca2 <HAL_SPI_Init>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001752:	f7ff ffc9 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20006254 	.word	0x20006254
 8001760:	40003c00 	.word	0x40003c00

08001764 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a19      	ldr	r2, [pc, #100]	; (80017e8 <HAL_SPI_MspInit+0x84>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d12c      	bne.n	80017e0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b18      	ldr	r3, [pc, #96]	; (80017ec <HAL_SPI_MspInit+0x88>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	4a17      	ldr	r2, [pc, #92]	; (80017ec <HAL_SPI_MspInit+0x88>)
 8001790:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001794:	6413      	str	r3, [r2, #64]	; 0x40
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <HAL_SPI_MspInit+0x88>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <HAL_SPI_MspInit+0x88>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a10      	ldr	r2, [pc, #64]	; (80017ec <HAL_SPI_MspInit+0x88>)
 80017ac:	f043 0304 	orr.w	r3, r3, #4
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <HAL_SPI_MspInit+0x88>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017be:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c4:	2302      	movs	r3, #2
 80017c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c8:	2300      	movs	r3, #0
 80017ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017cc:	2303      	movs	r3, #3
 80017ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017d0:	2306      	movs	r3, #6
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4619      	mov	r1, r3
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <HAL_SPI_MspInit+0x8c>)
 80017dc:	f000 fc10 	bl	8002000 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80017e0:	bf00      	nop
 80017e2:	3728      	adds	r7, #40	; 0x28
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40003c00 	.word	0x40003c00
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020800 	.word	0x40020800

080017f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_MspInit+0x4c>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	4a0f      	ldr	r2, [pc, #60]	; (8001840 <HAL_MspInit+0x4c>)
 8001804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001808:	6453      	str	r3, [r2, #68]	; 0x44
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_MspInit+0x4c>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001812:	607b      	str	r3, [r7, #4]
 8001814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_MspInit+0x4c>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	4a08      	ldr	r2, [pc, #32]	; (8001840 <HAL_MspInit+0x4c>)
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001824:	6413      	str	r3, [r2, #64]	; 0x40
 8001826:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_MspInit+0x4c>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001848:	f001 fa10 	bl	8002c6c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800184c:	e7fe      	b.n	800184c <NMI_Handler+0x8>

0800184e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <MemManage_Handler+0x4>

0800185a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <BusFault_Handler+0x4>

08001860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <UsageFault_Handler+0x4>

08001866 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001894:	f000 faae 	bl	8001df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}

0800189c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
	return 1;
 80018a0:	2301      	movs	r3, #1
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <_kill>:

int _kill(int pid, int sig)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018b6:	f003 fd5b 	bl	8005370 <__errno>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2216      	movs	r2, #22
 80018be:	601a      	str	r2, [r3, #0]
	return -1;
 80018c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <_exit>:

void _exit (int status)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018d4:	f04f 31ff 	mov.w	r1, #4294967295
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ffe7 	bl	80018ac <_kill>
	while (1) {}		/* Make sure we hang here */
 80018de:	e7fe      	b.n	80018de <_exit+0x12>

080018e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e00a      	b.n	8001908 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018f2:	f3af 8000 	nop.w
 80018f6:	4601      	mov	r1, r0
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	1c5a      	adds	r2, r3, #1
 80018fc:	60ba      	str	r2, [r7, #8]
 80018fe:	b2ca      	uxtb	r2, r1
 8001900:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	3301      	adds	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	429a      	cmp	r2, r3
 800190e:	dbf0      	blt.n	80018f2 <_read+0x12>
	}

return len;
 8001910:	687b      	ldr	r3, [r7, #4]
}
 8001912:	4618      	mov	r0, r3
 8001914:	3718      	adds	r7, #24
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e009      	b.n	8001940 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	60ba      	str	r2, [r7, #8]
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f000 f9cf 	bl	8001cd8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	3301      	adds	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	429a      	cmp	r2, r3
 8001946:	dbf1      	blt.n	800192c <_write+0x12>
	}
	return len;
 8001948:	687b      	ldr	r3, [r7, #4]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3718      	adds	r7, #24
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}

08001952 <_close>:

int _close(int file)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
	return -1;
 800195a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
 8001972:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800197a:	605a      	str	r2, [r3, #4]
	return 0;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <_isatty>:

int _isatty(int file)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
	return 1;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	60f8      	str	r0, [r7, #12]
 80019a8:	60b9      	str	r1, [r7, #8]
 80019aa:	607a      	str	r2, [r7, #4]
	return 0;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3714      	adds	r7, #20
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c4:	4a14      	ldr	r2, [pc, #80]	; (8001a18 <_sbrk+0x5c>)
 80019c6:	4b15      	ldr	r3, [pc, #84]	; (8001a1c <_sbrk+0x60>)
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019d0:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <_sbrk+0x64>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d102      	bne.n	80019de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <_sbrk+0x64>)
 80019da:	4a12      	ldr	r2, [pc, #72]	; (8001a24 <_sbrk+0x68>)
 80019dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <_sbrk+0x64>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4413      	add	r3, r2
 80019e6:	693a      	ldr	r2, [r7, #16]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d207      	bcs.n	80019fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019ec:	f003 fcc0 	bl	8005370 <__errno>
 80019f0:	4603      	mov	r3, r0
 80019f2:	220c      	movs	r2, #12
 80019f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	e009      	b.n	8001a10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a02:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <_sbrk+0x64>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4413      	add	r3, r2
 8001a0a:	4a05      	ldr	r2, [pc, #20]	; (8001a20 <_sbrk+0x64>)
 8001a0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3718      	adds	r7, #24
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20020000 	.word	0x20020000
 8001a1c:	00000400 	.word	0x00000400
 8001a20:	20000204 	.word	0x20000204
 8001a24:	20006350 	.word	0x20006350

08001a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <SystemInit+0x20>)
 8001a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <SystemInit+0x20>)
 8001a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b08e      	sub	sp, #56	; 0x38
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	605a      	str	r2, [r3, #4]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a60:	f107 0320 	add.w	r3, r7, #32
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
 8001a78:	615a      	str	r2, [r3, #20]
 8001a7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <MX_TIM3_Init+0xe8>)
 8001a7e:	4a2e      	ldr	r2, [pc, #184]	; (8001b38 <MX_TIM3_Init+0xec>)
 8001a80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5-1;
 8001a82:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <MX_TIM3_Init+0xe8>)
 8001a84:	2204      	movs	r2, #4
 8001a86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a88:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <MX_TIM3_Init+0xe8>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 840-1;
 8001a8e:	4b29      	ldr	r3, [pc, #164]	; (8001b34 <MX_TIM3_Init+0xe8>)
 8001a90:	f240 3247 	movw	r2, #839	; 0x347
 8001a94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <MX_TIM3_Init+0xe8>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9c:	4b25      	ldr	r3, [pc, #148]	; (8001b34 <MX_TIM3_Init+0xe8>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001aa2:	4824      	ldr	r0, [pc, #144]	; (8001b34 <MX_TIM3_Init+0xe8>)
 8001aa4:	f001 f9ca 	bl	8002e3c <HAL_TIM_Base_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001aae:	f7ff fe1b 	bl	80016e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ab8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001abc:	4619      	mov	r1, r3
 8001abe:	481d      	ldr	r0, [pc, #116]	; (8001b34 <MX_TIM3_Init+0xe8>)
 8001ac0:	f001 fb22 	bl	8003108 <HAL_TIM_ConfigClockSource>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001aca:	f7ff fe0d 	bl	80016e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ace:	4819      	ldr	r0, [pc, #100]	; (8001b34 <MX_TIM3_Init+0xe8>)
 8001ad0:	f001 fa03 	bl	8002eda <HAL_TIM_PWM_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001ada:	f7ff fe05 	bl	80016e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ade:	2320      	movs	r3, #32
 8001ae0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ae6:	f107 0320 	add.w	r3, r7, #32
 8001aea:	4619      	mov	r1, r3
 8001aec:	4811      	ldr	r0, [pc, #68]	; (8001b34 <MX_TIM3_Init+0xe8>)
 8001aee:	f001 feb9 	bl	8003864 <HAL_TIMEx_MasterConfigSynchronization>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001af8:	f7ff fdf6 	bl	80016e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001afc:	2360      	movs	r3, #96	; 0x60
 8001afe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 420;
 8001b00:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
 8001b04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	2200      	movs	r2, #0
 8001b12:	4619      	mov	r1, r3
 8001b14:	4807      	ldr	r0, [pc, #28]	; (8001b34 <MX_TIM3_Init+0xe8>)
 8001b16:	f001 fa39 	bl	8002f8c <HAL_TIM_PWM_ConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b20:	f7ff fde2 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b24:	4803      	ldr	r0, [pc, #12]	; (8001b34 <MX_TIM3_Init+0xe8>)
 8001b26:	f000 f82b 	bl	8001b80 <HAL_TIM_MspPostInit>

}
 8001b2a:	bf00      	nop
 8001b2c:	3738      	adds	r7, #56	; 0x38
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200062ac 	.word	0x200062ac
 8001b38:	40000400 	.word	0x40000400

08001b3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0b      	ldr	r2, [pc, #44]	; (8001b78 <HAL_TIM_Base_MspInit+0x3c>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d10d      	bne.n	8001b6a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_TIM_Base_MspInit+0x40>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <HAL_TIM_Base_MspInit+0x40>)
 8001b58:	f043 0302 	orr.w	r3, r3, #2
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <HAL_TIM_Base_MspInit+0x40>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40000400 	.word	0x40000400
 8001b7c:	40023800 	.word	0x40023800

08001b80 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b088      	sub	sp, #32
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b88:	f107 030c 	add.w	r3, r7, #12
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	605a      	str	r2, [r3, #4]
 8001b92:	609a      	str	r2, [r3, #8]
 8001b94:	60da      	str	r2, [r3, #12]
 8001b96:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <HAL_TIM_MspPostInit+0x68>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d11d      	bne.n	8001bde <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
 8001ba6:	4b11      	ldr	r3, [pc, #68]	; (8001bec <HAL_TIM_MspPostInit+0x6c>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a10      	ldr	r2, [pc, #64]	; (8001bec <HAL_TIM_MspPostInit+0x6c>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <HAL_TIM_MspPostInit+0x6c>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bbe:	2340      	movs	r3, #64	; 0x40
 8001bc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4805      	ldr	r0, [pc, #20]	; (8001bf0 <HAL_TIM_MspPostInit+0x70>)
 8001bda:	f000 fa11 	bl	8002000 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bde:	bf00      	nop
 8001be0:	3720      	adds	r7, #32
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40000400 	.word	0x40000400
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40020000 	.word	0x40020000

08001bf4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001bfa:	4a12      	ldr	r2, [pc, #72]	; (8001c44 <MX_USART2_UART_Init+0x50>)
 8001bfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001c00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c06:	4b0e      	ldr	r3, [pc, #56]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c0c:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c18:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c1e:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c2a:	4805      	ldr	r0, [pc, #20]	; (8001c40 <MX_USART2_UART_Init+0x4c>)
 8001c2c:	f001 fe96 	bl	800395c <HAL_UART_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c36:	f7ff fd57 	bl	80016e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200062f4 	.word	0x200062f4
 8001c44:	40004400 	.word	0x40004400

08001c48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b08a      	sub	sp, #40	; 0x28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c50:	f107 0314 	add.w	r3, r7, #20
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
 8001c5c:	60da      	str	r2, [r3, #12]
 8001c5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a19      	ldr	r2, [pc, #100]	; (8001ccc <HAL_UART_MspInit+0x84>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d12b      	bne.n	8001cc2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	4b18      	ldr	r3, [pc, #96]	; (8001cd0 <HAL_UART_MspInit+0x88>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	4a17      	ldr	r2, [pc, #92]	; (8001cd0 <HAL_UART_MspInit+0x88>)
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c78:	6413      	str	r3, [r2, #64]	; 0x40
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <HAL_UART_MspInit+0x88>)
 8001c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <HAL_UART_MspInit+0x88>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	4a10      	ldr	r2, [pc, #64]	; (8001cd0 <HAL_UART_MspInit+0x88>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6313      	str	r3, [r2, #48]	; 0x30
 8001c96:	4b0e      	ldr	r3, [pc, #56]	; (8001cd0 <HAL_UART_MspInit+0x88>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ca2:	230c      	movs	r3, #12
 8001ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cb2:	2307      	movs	r3, #7
 8001cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb6:	f107 0314 	add.w	r3, r7, #20
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <HAL_UART_MspInit+0x8c>)
 8001cbe:	f000 f99f 	bl	8002000 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	3728      	adds	r7, #40	; 0x28
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40004400 	.word	0x40004400
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40020000 	.word	0x40020000

08001cd8 <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8001ce0:	1d39      	adds	r1, r7, #4
 8001ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	4803      	ldr	r0, [pc, #12]	; (8001cf8 <__io_putchar+0x20>)
 8001cea:	f001 fe84 	bl	80039f6 <HAL_UART_Transmit>
  return ch;
 8001cee:	687b      	ldr	r3, [r7, #4]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200062f4 	.word	0x200062f4

08001cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d00:	480d      	ldr	r0, [pc, #52]	; (8001d38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d02:	490e      	ldr	r1, [pc, #56]	; (8001d3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d04:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d08:	e002      	b.n	8001d10 <LoopCopyDataInit>

08001d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0e:	3304      	adds	r3, #4

08001d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d14:	d3f9      	bcc.n	8001d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d16:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d18:	4c0b      	ldr	r4, [pc, #44]	; (8001d48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d1c:	e001      	b.n	8001d22 <LoopFillZerobss>

08001d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d20:	3204      	adds	r2, #4

08001d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d24:	d3fb      	bcc.n	8001d1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d26:	f7ff fe7f 	bl	8001a28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d2a:	f003 fb27 	bl	800537c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2e:	f7ff fbcf 	bl	80014d0 <main>
  bx  lr    
 8001d32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d3c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001d40:	0801de04 	.word	0x0801de04
  ldr r2, =_sbss
 8001d44:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001d48:	2000634c 	.word	0x2000634c

08001d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d4c:	e7fe      	b.n	8001d4c <ADC_IRQHandler>
	...

08001d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <HAL_Init+0x40>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <HAL_Init+0x40>)
 8001d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_Init+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <HAL_Init+0x40>)
 8001d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <HAL_Init+0x40>)
 8001d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f000 f90d 	bl	8001f98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f000 f808 	bl	8001d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d84:	f7ff fd36 	bl	80017f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023c00 	.word	0x40023c00

08001d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_InitTick+0x54>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_InitTick+0x58>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f917 	bl	8001fe6 <HAL_SYSTICK_Config>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00e      	b.n	8001de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	d80a      	bhi.n	8001dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f000 f8ed 	bl	8001fae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd4:	4a06      	ldr	r2, [pc, #24]	; (8001df0 <HAL_InitTick+0x5c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e000      	b.n	8001de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000000 	.word	0x20000000
 8001dec:	20000008 	.word	0x20000008
 8001df0:	20000004 	.word	0x20000004

08001df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_IncTick+0x20>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_IncTick+0x24>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <HAL_IncTick+0x24>)
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	20000008 	.word	0x20000008
 8001e18:	20006338 	.word	0x20006338

08001e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <HAL_GetTick+0x14>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20006338 	.word	0x20006338

08001e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e50:	4013      	ands	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e66:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	60d3      	str	r3, [r2, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <__NVIC_GetPriorityGrouping+0x18>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 0307 	and.w	r3, r3, #7
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	db0a      	blt.n	8001ec2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	b2da      	uxtb	r2, r3
 8001eb0:	490c      	ldr	r1, [pc, #48]	; (8001ee4 <__NVIC_SetPriority+0x4c>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	0112      	lsls	r2, r2, #4
 8001eb8:	b2d2      	uxtb	r2, r2
 8001eba:	440b      	add	r3, r1
 8001ebc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ec0:	e00a      	b.n	8001ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4908      	ldr	r1, [pc, #32]	; (8001ee8 <__NVIC_SetPriority+0x50>)
 8001ec8:	79fb      	ldrb	r3, [r7, #7]
 8001eca:	f003 030f 	and.w	r3, r3, #15
 8001ece:	3b04      	subs	r3, #4
 8001ed0:	0112      	lsls	r2, r2, #4
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	440b      	add	r3, r1
 8001ed6:	761a      	strb	r2, [r3, #24]
}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	e000e100 	.word	0xe000e100
 8001ee8:	e000ed00 	.word	0xe000ed00

08001eec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b089      	sub	sp, #36	; 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f1c3 0307 	rsb	r3, r3, #7
 8001f06:	2b04      	cmp	r3, #4
 8001f08:	bf28      	it	cs
 8001f0a:	2304      	movcs	r3, #4
 8001f0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3304      	adds	r3, #4
 8001f12:	2b06      	cmp	r3, #6
 8001f14:	d902      	bls.n	8001f1c <NVIC_EncodePriority+0x30>
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	3b03      	subs	r3, #3
 8001f1a:	e000      	b.n	8001f1e <NVIC_EncodePriority+0x32>
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f20:	f04f 32ff 	mov.w	r2, #4294967295
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	43da      	mvns	r2, r3
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	401a      	ands	r2, r3
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f34:	f04f 31ff 	mov.w	r1, #4294967295
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3e:	43d9      	mvns	r1, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f44:	4313      	orrs	r3, r2
         );
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3724      	adds	r7, #36	; 0x24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
	...

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f64:	d301      	bcc.n	8001f6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f66:	2301      	movs	r3, #1
 8001f68:	e00f      	b.n	8001f8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6a:	4a0a      	ldr	r2, [pc, #40]	; (8001f94 <SysTick_Config+0x40>)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f72:	210f      	movs	r1, #15
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f7ff ff8e 	bl	8001e98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <SysTick_Config+0x40>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f82:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <SysTick_Config+0x40>)
 8001f84:	2207      	movs	r2, #7
 8001f86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f88:	2300      	movs	r3, #0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	e000e010 	.word	0xe000e010

08001f98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ff47 	bl	8001e34 <__NVIC_SetPriorityGrouping>
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fc0:	f7ff ff5c 	bl	8001e7c <__NVIC_GetPriorityGrouping>
 8001fc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	68b9      	ldr	r1, [r7, #8]
 8001fca:	6978      	ldr	r0, [r7, #20]
 8001fcc:	f7ff ff8e 	bl	8001eec <NVIC_EncodePriority>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fd6:	4611      	mov	r1, r2
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff ff5d 	bl	8001e98 <__NVIC_SetPriority>
}
 8001fde:	bf00      	nop
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ffb0 	bl	8001f54 <SysTick_Config>
 8001ff4:	4603      	mov	r3, r0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800200e:	2300      	movs	r3, #0
 8002010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
 800201a:	e16b      	b.n	80022f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800201c:	2201      	movs	r2, #1
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	697a      	ldr	r2, [r7, #20]
 800202c:	4013      	ands	r3, r2
 800202e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	429a      	cmp	r2, r3
 8002036:	f040 815a 	bne.w	80022ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b01      	cmp	r3, #1
 8002044:	d005      	beq.n	8002052 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800204e:	2b02      	cmp	r3, #2
 8002050:	d130      	bne.n	80020b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	2203      	movs	r2, #3
 800205e:	fa02 f303 	lsl.w	r3, r2, r3
 8002062:	43db      	mvns	r3, r3
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4013      	ands	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4313      	orrs	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002088:	2201      	movs	r2, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	091b      	lsrs	r3, r3, #4
 800209e:	f003 0201 	and.w	r2, r3, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b03      	cmp	r3, #3
 80020be:	d017      	beq.n	80020f0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	689a      	ldr	r2, [r3, #8]
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	f003 0303 	and.w	r3, r3, #3
 80020f8:	2b02      	cmp	r3, #2
 80020fa:	d123      	bne.n	8002144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	08da      	lsrs	r2, r3, #3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3208      	adds	r2, #8
 8002104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	220f      	movs	r2, #15
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	691a      	ldr	r2, [r3, #16]
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 0307 	and.w	r3, r3, #7
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	69ba      	ldr	r2, [r7, #24]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	08da      	lsrs	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3208      	adds	r2, #8
 800213e:	69b9      	ldr	r1, [r7, #24]
 8002140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f003 0203 	and.w	r2, r3, #3
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4313      	orrs	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80b4 	beq.w	80022ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b60      	ldr	r3, [pc, #384]	; (800230c <HAL_GPIO_Init+0x30c>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	4a5f      	ldr	r2, [pc, #380]	; (800230c <HAL_GPIO_Init+0x30c>)
 8002190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002194:	6453      	str	r3, [r2, #68]	; 0x44
 8002196:	4b5d      	ldr	r3, [pc, #372]	; (800230c <HAL_GPIO_Init+0x30c>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a2:	4a5b      	ldr	r2, [pc, #364]	; (8002310 <HAL_GPIO_Init+0x310>)
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	089b      	lsrs	r3, r3, #2
 80021a8:	3302      	adds	r3, #2
 80021aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	220f      	movs	r2, #15
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a52      	ldr	r2, [pc, #328]	; (8002314 <HAL_GPIO_Init+0x314>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d02b      	beq.n	8002226 <HAL_GPIO_Init+0x226>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a51      	ldr	r2, [pc, #324]	; (8002318 <HAL_GPIO_Init+0x318>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d025      	beq.n	8002222 <HAL_GPIO_Init+0x222>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a50      	ldr	r2, [pc, #320]	; (800231c <HAL_GPIO_Init+0x31c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d01f      	beq.n	800221e <HAL_GPIO_Init+0x21e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4f      	ldr	r2, [pc, #316]	; (8002320 <HAL_GPIO_Init+0x320>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d019      	beq.n	800221a <HAL_GPIO_Init+0x21a>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4e      	ldr	r2, [pc, #312]	; (8002324 <HAL_GPIO_Init+0x324>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d013      	beq.n	8002216 <HAL_GPIO_Init+0x216>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a4d      	ldr	r2, [pc, #308]	; (8002328 <HAL_GPIO_Init+0x328>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d00d      	beq.n	8002212 <HAL_GPIO_Init+0x212>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4c      	ldr	r2, [pc, #304]	; (800232c <HAL_GPIO_Init+0x32c>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d007      	beq.n	800220e <HAL_GPIO_Init+0x20e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a4b      	ldr	r2, [pc, #300]	; (8002330 <HAL_GPIO_Init+0x330>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d101      	bne.n	800220a <HAL_GPIO_Init+0x20a>
 8002206:	2307      	movs	r3, #7
 8002208:	e00e      	b.n	8002228 <HAL_GPIO_Init+0x228>
 800220a:	2308      	movs	r3, #8
 800220c:	e00c      	b.n	8002228 <HAL_GPIO_Init+0x228>
 800220e:	2306      	movs	r3, #6
 8002210:	e00a      	b.n	8002228 <HAL_GPIO_Init+0x228>
 8002212:	2305      	movs	r3, #5
 8002214:	e008      	b.n	8002228 <HAL_GPIO_Init+0x228>
 8002216:	2304      	movs	r3, #4
 8002218:	e006      	b.n	8002228 <HAL_GPIO_Init+0x228>
 800221a:	2303      	movs	r3, #3
 800221c:	e004      	b.n	8002228 <HAL_GPIO_Init+0x228>
 800221e:	2302      	movs	r3, #2
 8002220:	e002      	b.n	8002228 <HAL_GPIO_Init+0x228>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_GPIO_Init+0x228>
 8002226:	2300      	movs	r3, #0
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	f002 0203 	and.w	r2, r2, #3
 800222e:	0092      	lsls	r2, r2, #2
 8002230:	4093      	lsls	r3, r2
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002238:	4935      	ldr	r1, [pc, #212]	; (8002310 <HAL_GPIO_Init+0x310>)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	089b      	lsrs	r3, r3, #2
 800223e:	3302      	adds	r3, #2
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <HAL_GPIO_Init+0x334>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800226a:	4a32      	ldr	r2, [pc, #200]	; (8002334 <HAL_GPIO_Init+0x334>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002270:	4b30      	ldr	r3, [pc, #192]	; (8002334 <HAL_GPIO_Init+0x334>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002294:	4a27      	ldr	r2, [pc, #156]	; (8002334 <HAL_GPIO_Init+0x334>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800229a:	4b26      	ldr	r3, [pc, #152]	; (8002334 <HAL_GPIO_Init+0x334>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022be:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <HAL_GPIO_Init+0x334>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c4:	4b1b      	ldr	r3, [pc, #108]	; (8002334 <HAL_GPIO_Init+0x334>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e8:	4a12      	ldr	r2, [pc, #72]	; (8002334 <HAL_GPIO_Init+0x334>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3301      	adds	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	2b0f      	cmp	r3, #15
 80022f8:	f67f ae90 	bls.w	800201c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3724      	adds	r7, #36	; 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	40013800 	.word	0x40013800
 8002314:	40020000 	.word	0x40020000
 8002318:	40020400 	.word	0x40020400
 800231c:	40020800 	.word	0x40020800
 8002320:	40020c00 	.word	0x40020c00
 8002324:	40021000 	.word	0x40021000
 8002328:	40021400 	.word	0x40021400
 800232c:	40021800 	.word	0x40021800
 8002330:	40021c00 	.word	0x40021c00
 8002334:	40013c00 	.word	0x40013c00

08002338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
 8002344:	4613      	mov	r3, r2
 8002346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002348:	787b      	ldrb	r3, [r7, #1]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002354:	e003      	b.n	800235e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002356:	887b      	ldrh	r3, [r7, #2]
 8002358:	041a      	lsls	r2, r3, #16
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	619a      	str	r2, [r3, #24]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e264      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0301 	and.w	r3, r3, #1
 8002386:	2b00      	cmp	r3, #0
 8002388:	d075      	beq.n	8002476 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800238a:	4ba3      	ldr	r3, [pc, #652]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b04      	cmp	r3, #4
 8002394:	d00c      	beq.n	80023b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002396:	4ba0      	ldr	r3, [pc, #640]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d112      	bne.n	80023c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023a2:	4b9d      	ldr	r3, [pc, #628]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ae:	d10b      	bne.n	80023c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b0:	4b99      	ldr	r3, [pc, #612]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d05b      	beq.n	8002474 <HAL_RCC_OscConfig+0x108>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d157      	bne.n	8002474 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e23f      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023d0:	d106      	bne.n	80023e0 <HAL_RCC_OscConfig+0x74>
 80023d2:	4b91      	ldr	r3, [pc, #580]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a90      	ldr	r2, [pc, #576]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	e01d      	b.n	800241c <HAL_RCC_OscConfig+0xb0>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x98>
 80023ea:	4b8b      	ldr	r3, [pc, #556]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a8a      	ldr	r2, [pc, #552]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b88      	ldr	r3, [pc, #544]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a87      	ldr	r2, [pc, #540]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80023fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e00b      	b.n	800241c <HAL_RCC_OscConfig+0xb0>
 8002404:	4b84      	ldr	r3, [pc, #528]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a83      	ldr	r2, [pc, #524]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 800240a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800240e:	6013      	str	r3, [r2, #0]
 8002410:	4b81      	ldr	r3, [pc, #516]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a80      	ldr	r2, [pc, #512]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 8002416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800241a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d013      	beq.n	800244c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002424:	f7ff fcfa 	bl	8001e1c <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	e008      	b.n	800243e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800242c:	f7ff fcf6 	bl	8001e1c <HAL_GetTick>
 8002430:	4602      	mov	r2, r0
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	2b64      	cmp	r3, #100	; 0x64
 8002438:	d901      	bls.n	800243e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800243a:	2303      	movs	r3, #3
 800243c:	e204      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800243e:	4b76      	ldr	r3, [pc, #472]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d0f0      	beq.n	800242c <HAL_RCC_OscConfig+0xc0>
 800244a:	e014      	b.n	8002476 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7ff fce6 	bl	8001e1c <HAL_GetTick>
 8002450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002454:	f7ff fce2 	bl	8001e1c <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	; 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e1f0      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002466:	4b6c      	ldr	r3, [pc, #432]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f0      	bne.n	8002454 <HAL_RCC_OscConfig+0xe8>
 8002472:	e000      	b.n	8002476 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d063      	beq.n	800254a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002482:	4b65      	ldr	r3, [pc, #404]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 030c 	and.w	r3, r3, #12
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00b      	beq.n	80024a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800248e:	4b62      	ldr	r3, [pc, #392]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002496:	2b08      	cmp	r3, #8
 8002498:	d11c      	bne.n	80024d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800249a:	4b5f      	ldr	r3, [pc, #380]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d116      	bne.n	80024d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024a6:	4b5c      	ldr	r3, [pc, #368]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d005      	beq.n	80024be <HAL_RCC_OscConfig+0x152>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d001      	beq.n	80024be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e1c4      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024be:	4b56      	ldr	r3, [pc, #344]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	4952      	ldr	r1, [pc, #328]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024d2:	e03a      	b.n	800254a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d020      	beq.n	800251e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024dc:	4b4f      	ldr	r3, [pc, #316]	; (800261c <HAL_RCC_OscConfig+0x2b0>)
 80024de:	2201      	movs	r2, #1
 80024e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e2:	f7ff fc9b 	bl	8001e1c <HAL_GetTick>
 80024e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e8:	e008      	b.n	80024fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ea:	f7ff fc97 	bl	8001e1c <HAL_GetTick>
 80024ee:	4602      	mov	r2, r0
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d901      	bls.n	80024fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024f8:	2303      	movs	r3, #3
 80024fa:	e1a5      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fc:	4b46      	ldr	r3, [pc, #280]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f0      	beq.n	80024ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002508:	4b43      	ldr	r3, [pc, #268]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4940      	ldr	r1, [pc, #256]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	4313      	orrs	r3, r2
 800251a:	600b      	str	r3, [r1, #0]
 800251c:	e015      	b.n	800254a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800251e:	4b3f      	ldr	r3, [pc, #252]	; (800261c <HAL_RCC_OscConfig+0x2b0>)
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7ff fc7a 	bl	8001e1c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800252c:	f7ff fc76 	bl	8001e1c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e184      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800253e:	4b36      	ldr	r3, [pc, #216]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0302 	and.w	r3, r3, #2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b00      	cmp	r3, #0
 8002554:	d030      	beq.n	80025b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d016      	beq.n	800258c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800255e:	4b30      	ldr	r3, [pc, #192]	; (8002620 <HAL_RCC_OscConfig+0x2b4>)
 8002560:	2201      	movs	r2, #1
 8002562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002564:	f7ff fc5a 	bl	8001e1c <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800256c:	f7ff fc56 	bl	8001e1c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b02      	cmp	r3, #2
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e164      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800257e:	4b26      	ldr	r3, [pc, #152]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0x200>
 800258a:	e015      	b.n	80025b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258c:	4b24      	ldr	r3, [pc, #144]	; (8002620 <HAL_RCC_OscConfig+0x2b4>)
 800258e:	2200      	movs	r2, #0
 8002590:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002592:	f7ff fc43 	bl	8001e1c <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800259a:	f7ff fc3f 	bl	8001e1c <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e14d      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ac:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80025ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f000 80a0 	beq.w	8002706 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c6:	2300      	movs	r3, #0
 80025c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ca:	4b13      	ldr	r3, [pc, #76]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10f      	bne.n	80025f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	4a0e      	ldr	r2, [pc, #56]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e4:	6413      	str	r3, [r2, #64]	; 0x40
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f2:	2301      	movs	r3, #1
 80025f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <HAL_RCC_OscConfig+0x2b8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d121      	bne.n	8002646 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <HAL_RCC_OscConfig+0x2b8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a07      	ldr	r2, [pc, #28]	; (8002624 <HAL_RCC_OscConfig+0x2b8>)
 8002608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260e:	f7ff fc05 	bl	8001e1c <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002614:	e011      	b.n	800263a <HAL_RCC_OscConfig+0x2ce>
 8002616:	bf00      	nop
 8002618:	40023800 	.word	0x40023800
 800261c:	42470000 	.word	0x42470000
 8002620:	42470e80 	.word	0x42470e80
 8002624:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002628:	f7ff fbf8 	bl	8001e1c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e106      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263a:	4b85      	ldr	r3, [pc, #532]	; (8002850 <HAL_RCC_OscConfig+0x4e4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d106      	bne.n	800265c <HAL_RCC_OscConfig+0x2f0>
 800264e:	4b81      	ldr	r3, [pc, #516]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 8002650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002652:	4a80      	ldr	r2, [pc, #512]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 8002654:	f043 0301 	orr.w	r3, r3, #1
 8002658:	6713      	str	r3, [r2, #112]	; 0x70
 800265a:	e01c      	b.n	8002696 <HAL_RCC_OscConfig+0x32a>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b05      	cmp	r3, #5
 8002662:	d10c      	bne.n	800267e <HAL_RCC_OscConfig+0x312>
 8002664:	4b7b      	ldr	r3, [pc, #492]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	4a7a      	ldr	r2, [pc, #488]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 800266a:	f043 0304 	orr.w	r3, r3, #4
 800266e:	6713      	str	r3, [r2, #112]	; 0x70
 8002670:	4b78      	ldr	r3, [pc, #480]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	4a77      	ldr	r2, [pc, #476]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6713      	str	r3, [r2, #112]	; 0x70
 800267c:	e00b      	b.n	8002696 <HAL_RCC_OscConfig+0x32a>
 800267e:	4b75      	ldr	r3, [pc, #468]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 8002680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002682:	4a74      	ldr	r2, [pc, #464]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 8002684:	f023 0301 	bic.w	r3, r3, #1
 8002688:	6713      	str	r3, [r2, #112]	; 0x70
 800268a:	4b72      	ldr	r3, [pc, #456]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 800268c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800268e:	4a71      	ldr	r2, [pc, #452]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 8002690:	f023 0304 	bic.w	r3, r3, #4
 8002694:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d015      	beq.n	80026ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800269e:	f7ff fbbd 	bl	8001e1c <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a4:	e00a      	b.n	80026bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026a6:	f7ff fbb9 	bl	8001e1c <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e0c5      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026bc:	4b65      	ldr	r3, [pc, #404]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 80026be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0ee      	beq.n	80026a6 <HAL_RCC_OscConfig+0x33a>
 80026c8:	e014      	b.n	80026f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ca:	f7ff fba7 	bl	8001e1c <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d0:	e00a      	b.n	80026e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7ff fba3 	bl	8001e1c <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e0af      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026e8:	4b5a      	ldr	r3, [pc, #360]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d1ee      	bne.n	80026d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026f4:	7dfb      	ldrb	r3, [r7, #23]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d105      	bne.n	8002706 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026fa:	4b56      	ldr	r3, [pc, #344]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	4a55      	ldr	r2, [pc, #340]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 8002700:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002704:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 809b 	beq.w	8002846 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002710:	4b50      	ldr	r3, [pc, #320]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 030c 	and.w	r3, r3, #12
 8002718:	2b08      	cmp	r3, #8
 800271a:	d05c      	beq.n	80027d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	699b      	ldr	r3, [r3, #24]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d141      	bne.n	80027a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002724:	4b4c      	ldr	r3, [pc, #304]	; (8002858 <HAL_RCC_OscConfig+0x4ec>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800272a:	f7ff fb77 	bl	8001e1c <HAL_GetTick>
 800272e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002730:	e008      	b.n	8002744 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002732:	f7ff fb73 	bl	8001e1c <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d901      	bls.n	8002744 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e081      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002744:	4b43      	ldr	r3, [pc, #268]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d1f0      	bne.n	8002732 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69da      	ldr	r2, [r3, #28]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	019b      	lsls	r3, r3, #6
 8002760:	431a      	orrs	r2, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	085b      	lsrs	r3, r3, #1
 8002768:	3b01      	subs	r3, #1
 800276a:	041b      	lsls	r3, r3, #16
 800276c:	431a      	orrs	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002772:	061b      	lsls	r3, r3, #24
 8002774:	4937      	ldr	r1, [pc, #220]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 8002776:	4313      	orrs	r3, r2
 8002778:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800277a:	4b37      	ldr	r3, [pc, #220]	; (8002858 <HAL_RCC_OscConfig+0x4ec>)
 800277c:	2201      	movs	r2, #1
 800277e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002780:	f7ff fb4c 	bl	8001e1c <HAL_GetTick>
 8002784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002788:	f7ff fb48 	bl	8001e1c <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e056      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	4b2e      	ldr	r3, [pc, #184]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x41c>
 80027a6:	e04e      	b.n	8002846 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a8:	4b2b      	ldr	r3, [pc, #172]	; (8002858 <HAL_RCC_OscConfig+0x4ec>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ae:	f7ff fb35 	bl	8001e1c <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b6:	f7ff fb31 	bl	8001e1c <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e03f      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c8:	4b22      	ldr	r3, [pc, #136]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x44a>
 80027d4:	e037      	b.n	8002846 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e032      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027e2:	4b1c      	ldr	r3, [pc, #112]	; (8002854 <HAL_RCC_OscConfig+0x4e8>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d028      	beq.n	8002842 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d121      	bne.n	8002842 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002808:	429a      	cmp	r2, r3
 800280a:	d11a      	bne.n	8002842 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002812:	4013      	ands	r3, r2
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002818:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800281a:	4293      	cmp	r3, r2
 800281c:	d111      	bne.n	8002842 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	085b      	lsrs	r3, r3, #1
 800282a:	3b01      	subs	r3, #1
 800282c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d107      	bne.n	8002842 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40007000 	.word	0x40007000
 8002854:	40023800 	.word	0x40023800
 8002858:	42470060 	.word	0x42470060

0800285c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d101      	bne.n	8002870 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0cc      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002870:	4b68      	ldr	r3, [pc, #416]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d90c      	bls.n	8002898 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b65      	ldr	r3, [pc, #404]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 8002880:	683a      	ldr	r2, [r7, #0]
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002886:	4b63      	ldr	r3, [pc, #396]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d001      	beq.n	8002898 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0b8      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0302 	and.w	r3, r3, #2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d020      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0304 	and.w	r3, r3, #4
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028b0:	4b59      	ldr	r3, [pc, #356]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4a58      	ldr	r2, [pc, #352]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028c8:	4b53      	ldr	r3, [pc, #332]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4a52      	ldr	r2, [pc, #328]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028d4:	4b50      	ldr	r3, [pc, #320]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	494d      	ldr	r1, [pc, #308]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d044      	beq.n	800297c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fa:	4b47      	ldr	r3, [pc, #284]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d119      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e07f      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b02      	cmp	r3, #2
 8002910:	d003      	beq.n	800291a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002916:	2b03      	cmp	r3, #3
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291a:	4b3f      	ldr	r3, [pc, #252]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e06f      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800292a:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e067      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800293a:	4b37      	ldr	r3, [pc, #220]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f023 0203 	bic.w	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4934      	ldr	r1, [pc, #208]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	4313      	orrs	r3, r2
 800294a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800294c:	f7ff fa66 	bl	8001e1c <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	e00a      	b.n	800296a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f7ff fa62 	bl	8001e1c <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e04f      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 020c 	and.w	r2, r3, #12
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	429a      	cmp	r2, r3
 800297a:	d1eb      	bne.n	8002954 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800297c:	4b25      	ldr	r3, [pc, #148]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d20c      	bcs.n	80029a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298a:	4b22      	ldr	r3, [pc, #136]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	4b20      	ldr	r3, [pc, #128]	; (8002a14 <HAL_RCC_ClockConfig+0x1b8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e032      	b.n	8002a0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0304 	and.w	r3, r3, #4
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d008      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029b0:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4916      	ldr	r1, [pc, #88]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0308 	and.w	r3, r3, #8
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d009      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	490e      	ldr	r1, [pc, #56]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	4313      	orrs	r3, r2
 80029e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029e2:	f000 f82d 	bl	8002a40 <HAL_RCC_GetSysClockFreq>
 80029e6:	4602      	mov	r2, r0
 80029e8:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	490a      	ldr	r1, [pc, #40]	; (8002a1c <HAL_RCC_ClockConfig+0x1c0>)
 80029f4:	5ccb      	ldrb	r3, [r1, r3]
 80029f6:	fa22 f303 	lsr.w	r3, r2, r3
 80029fa:	4a09      	ldr	r2, [pc, #36]	; (8002a20 <HAL_RCC_ClockConfig+0x1c4>)
 80029fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029fe:	4b09      	ldr	r3, [pc, #36]	; (8002a24 <HAL_RCC_ClockConfig+0x1c8>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff f9c6 	bl	8001d94 <HAL_InitTick>

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40023c00 	.word	0x40023c00
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	08009ccc 	.word	0x08009ccc
 8002a20:	20000000 	.word	0x20000000
 8002a24:	20000004 	.word	0x20000004

08002a28 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <HAL_RCC_EnableCSS+0x14>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	601a      	str	r2, [r3, #0]
}
 8002a32:	bf00      	nop
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	4247004c 	.word	0x4247004c

08002a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a40:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	607b      	str	r3, [r7, #4]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	2300      	movs	r3, #0
 8002a52:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a58:	4b67      	ldr	r3, [pc, #412]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f003 030c 	and.w	r3, r3, #12
 8002a60:	2b08      	cmp	r3, #8
 8002a62:	d00d      	beq.n	8002a80 <HAL_RCC_GetSysClockFreq+0x40>
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	f200 80bd 	bhi.w	8002be4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d002      	beq.n	8002a74 <HAL_RCC_GetSysClockFreq+0x34>
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d003      	beq.n	8002a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a72:	e0b7      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a74:	4b61      	ldr	r3, [pc, #388]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a76:	60bb      	str	r3, [r7, #8]
       break;
 8002a78:	e0b7      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a7a:	4b61      	ldr	r3, [pc, #388]	; (8002c00 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002a7c:	60bb      	str	r3, [r7, #8]
      break;
 8002a7e:	e0b4      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a80:	4b5d      	ldr	r3, [pc, #372]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a88:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a8a:	4b5b      	ldr	r3, [pc, #364]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d04d      	beq.n	8002b32 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a96:	4b58      	ldr	r3, [pc, #352]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	099b      	lsrs	r3, r3, #6
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002aa6:	f04f 0100 	mov.w	r1, #0
 8002aaa:	ea02 0800 	and.w	r8, r2, r0
 8002aae:	ea03 0901 	and.w	r9, r3, r1
 8002ab2:	4640      	mov	r0, r8
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	014b      	lsls	r3, r1, #5
 8002ac0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ac4:	0142      	lsls	r2, r0, #5
 8002ac6:	4610      	mov	r0, r2
 8002ac8:	4619      	mov	r1, r3
 8002aca:	ebb0 0008 	subs.w	r0, r0, r8
 8002ace:	eb61 0109 	sbc.w	r1, r1, r9
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	018b      	lsls	r3, r1, #6
 8002adc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ae0:	0182      	lsls	r2, r0, #6
 8002ae2:	1a12      	subs	r2, r2, r0
 8002ae4:	eb63 0301 	sbc.w	r3, r3, r1
 8002ae8:	f04f 0000 	mov.w	r0, #0
 8002aec:	f04f 0100 	mov.w	r1, #0
 8002af0:	00d9      	lsls	r1, r3, #3
 8002af2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002af6:	00d0      	lsls	r0, r2, #3
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	eb12 0208 	adds.w	r2, r2, r8
 8002b00:	eb43 0309 	adc.w	r3, r3, r9
 8002b04:	f04f 0000 	mov.w	r0, #0
 8002b08:	f04f 0100 	mov.w	r1, #0
 8002b0c:	0259      	lsls	r1, r3, #9
 8002b0e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b12:	0250      	lsls	r0, r2, #9
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	f7fe f918 	bl	8000d58 <__aeabi_uldivmod>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	e04a      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b32:	4b31      	ldr	r3, [pc, #196]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	099b      	lsrs	r3, r3, #6
 8002b38:	461a      	mov	r2, r3
 8002b3a:	f04f 0300 	mov.w	r3, #0
 8002b3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b42:	f04f 0100 	mov.w	r1, #0
 8002b46:	ea02 0400 	and.w	r4, r2, r0
 8002b4a:	ea03 0501 	and.w	r5, r3, r1
 8002b4e:	4620      	mov	r0, r4
 8002b50:	4629      	mov	r1, r5
 8002b52:	f04f 0200 	mov.w	r2, #0
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	014b      	lsls	r3, r1, #5
 8002b5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b60:	0142      	lsls	r2, r0, #5
 8002b62:	4610      	mov	r0, r2
 8002b64:	4619      	mov	r1, r3
 8002b66:	1b00      	subs	r0, r0, r4
 8002b68:	eb61 0105 	sbc.w	r1, r1, r5
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	018b      	lsls	r3, r1, #6
 8002b76:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b7a:	0182      	lsls	r2, r0, #6
 8002b7c:	1a12      	subs	r2, r2, r0
 8002b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b82:	f04f 0000 	mov.w	r0, #0
 8002b86:	f04f 0100 	mov.w	r1, #0
 8002b8a:	00d9      	lsls	r1, r3, #3
 8002b8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b90:	00d0      	lsls	r0, r2, #3
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	1912      	adds	r2, r2, r4
 8002b98:	eb45 0303 	adc.w	r3, r5, r3
 8002b9c:	f04f 0000 	mov.w	r0, #0
 8002ba0:	f04f 0100 	mov.w	r1, #0
 8002ba4:	0299      	lsls	r1, r3, #10
 8002ba6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002baa:	0290      	lsls	r0, r2, #10
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	f7fe f8cc 	bl	8000d58 <__aeabi_uldivmod>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be0:	60bb      	str	r3, [r7, #8]
      break;
 8002be2:	e002      	b.n	8002bea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002be4:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002be6:	60bb      	str	r3, [r7, #8]
      break;
 8002be8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bea:	68bb      	ldr	r3, [r7, #8]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3710      	adds	r7, #16
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	00f42400 	.word	0x00f42400
 8002c00:	007a1200 	.word	0x007a1200

08002c04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	20000000 	.word	0x20000000

08002c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c20:	f7ff fff0 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c24:	4602      	mov	r2, r0
 8002c26:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	0a9b      	lsrs	r3, r3, #10
 8002c2c:	f003 0307 	and.w	r3, r3, #7
 8002c30:	4903      	ldr	r1, [pc, #12]	; (8002c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c32:	5ccb      	ldrb	r3, [r1, r3]
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40023800 	.word	0x40023800
 8002c40:	08009cdc 	.word	0x08009cdc

08002c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c48:	f7ff ffdc 	bl	8002c04 <HAL_RCC_GetHCLKFreq>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	0b5b      	lsrs	r3, r3, #13
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	4903      	ldr	r1, [pc, #12]	; (8002c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c5a:	5ccb      	ldrb	r3, [r1, r3]
 8002c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40023800 	.word	0x40023800
 8002c68:	08009cdc 	.word	0x08009cdc

08002c6c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_RCC_NMI_IRQHandler+0x20>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c78:	2b80      	cmp	r3, #128	; 0x80
 8002c7a:	d104      	bne.n	8002c86 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8002c7c:	f000 f80a 	bl	8002c94 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002c80:	4b03      	ldr	r3, [pc, #12]	; (8002c90 <HAL_RCC_NMI_IRQHandler+0x24>)
 8002c82:	2280      	movs	r2, #128	; 0x80
 8002c84:	701a      	strb	r2, [r3, #0]
  }
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	4002380e 	.word	0x4002380e

08002c94 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e07b      	b.n	8002dac <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d108      	bne.n	8002cce <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cc4:	d009      	beq.n	8002cda <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	61da      	str	r2, [r3, #28]
 8002ccc:	e005      	b.n	8002cda <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d106      	bne.n	8002cfa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7fe fd35 	bl	8001764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d10:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5e:	ea42 0103 	orr.w	r1, r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	0c1b      	lsrs	r3, r3, #16
 8002d78:	f003 0104 	and.w	r1, r3, #4
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	f003 0210 	and.w	r2, r3, #16
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	69da      	ldr	r2, [r3, #28]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d9a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002daa:	2300      	movs	r3, #0
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	60f8      	str	r0, [r7, #12]
 8002dbc:	60b9      	str	r1, [r7, #8]
 8002dbe:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d101      	bne.n	8002dca <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e034      	b.n	8002e34 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f7fe fa56 	bl	8001290 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3308      	adds	r3, #8
 8002dec:	4619      	mov	r1, r3
 8002dee:	4610      	mov	r0, r2
 8002df0:	f001 f8a6 	bl	8003f40 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6818      	ldr	r0, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68b9      	ldr	r1, [r7, #8]
 8002e00:	f001 f8f0 	bl	8003fe4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6858      	ldr	r0, [r3, #4]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	f001 f925 	bl	8004060 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	6892      	ldr	r2, [r2, #8]
 8002e1e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	6892      	ldr	r2, [r2, #8]
 8002e2a:	f041 0101 	orr.w	r1, r1, #1
 8002e2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e041      	b.n	8002ed2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7fe fe6a 	bl	8001b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3304      	adds	r3, #4
 8002e78:	4619      	mov	r1, r3
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	f000 fa08 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b082      	sub	sp, #8
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e041      	b.n	8002f70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d106      	bne.n	8002f06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 f839 	bl	8002f78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	3304      	adds	r3, #4
 8002f16:	4619      	mov	r1, r3
 8002f18:	4610      	mov	r0, r2
 8002f1a:	f000 f9b9 	bl	8003290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2201      	movs	r2, #1
 8002f22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2201      	movs	r2, #1
 8002f32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d101      	bne.n	8002fa6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	e0ac      	b.n	8003100 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2b0c      	cmp	r3, #12
 8002fb2:	f200 809f 	bhi.w	80030f4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002fb6:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	08002ff1 	.word	0x08002ff1
 8002fc0:	080030f5 	.word	0x080030f5
 8002fc4:	080030f5 	.word	0x080030f5
 8002fc8:	080030f5 	.word	0x080030f5
 8002fcc:	08003031 	.word	0x08003031
 8002fd0:	080030f5 	.word	0x080030f5
 8002fd4:	080030f5 	.word	0x080030f5
 8002fd8:	080030f5 	.word	0x080030f5
 8002fdc:	08003073 	.word	0x08003073
 8002fe0:	080030f5 	.word	0x080030f5
 8002fe4:	080030f5 	.word	0x080030f5
 8002fe8:	080030f5 	.word	0x080030f5
 8002fec:	080030b3 	.word	0x080030b3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68b9      	ldr	r1, [r7, #8]
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f000 f9ea 	bl	80033d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699a      	ldr	r2, [r3, #24]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0208 	orr.w	r2, r2, #8
 800300a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0204 	bic.w	r2, r2, #4
 800301a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6999      	ldr	r1, [r3, #24]
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	691a      	ldr	r2, [r3, #16]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	619a      	str	r2, [r3, #24]
      break;
 800302e:	e062      	b.n	80030f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68b9      	ldr	r1, [r7, #8]
 8003036:	4618      	mov	r0, r3
 8003038:	f000 fa3a 	bl	80034b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800304a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	699a      	ldr	r2, [r3, #24]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800305a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6999      	ldr	r1, [r3, #24]
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	021a      	lsls	r2, r3, #8
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	619a      	str	r2, [r3, #24]
      break;
 8003070:	e041      	b.n	80030f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fa8f 	bl	800359c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	69da      	ldr	r2, [r3, #28]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 0208 	orr.w	r2, r2, #8
 800308c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	69da      	ldr	r2, [r3, #28]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0204 	bic.w	r2, r2, #4
 800309c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69d9      	ldr	r1, [r3, #28]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	691a      	ldr	r2, [r3, #16]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	61da      	str	r2, [r3, #28]
      break;
 80030b0:	e021      	b.n	80030f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68b9      	ldr	r1, [r7, #8]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fae3 	bl	8003684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69da      	ldr	r2, [r3, #28]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69da      	ldr	r2, [r3, #28]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69d9      	ldr	r1, [r3, #28]
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	021a      	lsls	r2, r3, #8
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	61da      	str	r2, [r3, #28]
      break;
 80030f2:	e000      	b.n	80030f6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80030f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003118:	2b01      	cmp	r3, #1
 800311a:	d101      	bne.n	8003120 <HAL_TIM_ConfigClockSource+0x18>
 800311c:	2302      	movs	r3, #2
 800311e:	e0b3      	b.n	8003288 <HAL_TIM_ConfigClockSource+0x180>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2202      	movs	r2, #2
 800312c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800313e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003146:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003158:	d03e      	beq.n	80031d8 <HAL_TIM_ConfigClockSource+0xd0>
 800315a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800315e:	f200 8087 	bhi.w	8003270 <HAL_TIM_ConfigClockSource+0x168>
 8003162:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003166:	f000 8085 	beq.w	8003274 <HAL_TIM_ConfigClockSource+0x16c>
 800316a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316e:	d87f      	bhi.n	8003270 <HAL_TIM_ConfigClockSource+0x168>
 8003170:	2b70      	cmp	r3, #112	; 0x70
 8003172:	d01a      	beq.n	80031aa <HAL_TIM_ConfigClockSource+0xa2>
 8003174:	2b70      	cmp	r3, #112	; 0x70
 8003176:	d87b      	bhi.n	8003270 <HAL_TIM_ConfigClockSource+0x168>
 8003178:	2b60      	cmp	r3, #96	; 0x60
 800317a:	d050      	beq.n	800321e <HAL_TIM_ConfigClockSource+0x116>
 800317c:	2b60      	cmp	r3, #96	; 0x60
 800317e:	d877      	bhi.n	8003270 <HAL_TIM_ConfigClockSource+0x168>
 8003180:	2b50      	cmp	r3, #80	; 0x50
 8003182:	d03c      	beq.n	80031fe <HAL_TIM_ConfigClockSource+0xf6>
 8003184:	2b50      	cmp	r3, #80	; 0x50
 8003186:	d873      	bhi.n	8003270 <HAL_TIM_ConfigClockSource+0x168>
 8003188:	2b40      	cmp	r3, #64	; 0x40
 800318a:	d058      	beq.n	800323e <HAL_TIM_ConfigClockSource+0x136>
 800318c:	2b40      	cmp	r3, #64	; 0x40
 800318e:	d86f      	bhi.n	8003270 <HAL_TIM_ConfigClockSource+0x168>
 8003190:	2b30      	cmp	r3, #48	; 0x30
 8003192:	d064      	beq.n	800325e <HAL_TIM_ConfigClockSource+0x156>
 8003194:	2b30      	cmp	r3, #48	; 0x30
 8003196:	d86b      	bhi.n	8003270 <HAL_TIM_ConfigClockSource+0x168>
 8003198:	2b20      	cmp	r3, #32
 800319a:	d060      	beq.n	800325e <HAL_TIM_ConfigClockSource+0x156>
 800319c:	2b20      	cmp	r3, #32
 800319e:	d867      	bhi.n	8003270 <HAL_TIM_ConfigClockSource+0x168>
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d05c      	beq.n	800325e <HAL_TIM_ConfigClockSource+0x156>
 80031a4:	2b10      	cmp	r3, #16
 80031a6:	d05a      	beq.n	800325e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80031a8:	e062      	b.n	8003270 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6818      	ldr	r0, [r3, #0]
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	6899      	ldr	r1, [r3, #8]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f000 fb33 	bl	8003824 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	609a      	str	r2, [r3, #8]
      break;
 80031d6:	e04e      	b.n	8003276 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	6899      	ldr	r1, [r3, #8]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685a      	ldr	r2, [r3, #4]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f000 fb1c 	bl	8003824 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031fa:	609a      	str	r2, [r3, #8]
      break;
 80031fc:	e03b      	b.n	8003276 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6859      	ldr	r1, [r3, #4]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	461a      	mov	r2, r3
 800320c:	f000 fa90 	bl	8003730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2150      	movs	r1, #80	; 0x50
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fae9 	bl	80037ee <TIM_ITRx_SetConfig>
      break;
 800321c:	e02b      	b.n	8003276 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	6859      	ldr	r1, [r3, #4]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	461a      	mov	r2, r3
 800322c:	f000 faaf 	bl	800378e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2160      	movs	r1, #96	; 0x60
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fad9 	bl	80037ee <TIM_ITRx_SetConfig>
      break;
 800323c:	e01b      	b.n	8003276 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6859      	ldr	r1, [r3, #4]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	461a      	mov	r2, r3
 800324c:	f000 fa70 	bl	8003730 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2140      	movs	r1, #64	; 0x40
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fac9 	bl	80037ee <TIM_ITRx_SetConfig>
      break;
 800325c:	e00b      	b.n	8003276 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4619      	mov	r1, r3
 8003268:	4610      	mov	r0, r2
 800326a:	f000 fac0 	bl	80037ee <TIM_ITRx_SetConfig>
        break;
 800326e:	e002      	b.n	8003276 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003270:	bf00      	nop
 8003272:	e000      	b.n	8003276 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003274:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a40      	ldr	r2, [pc, #256]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d013      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ae:	d00f      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a3d      	ldr	r2, [pc, #244]	; (80033a8 <TIM_Base_SetConfig+0x118>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00b      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a3c      	ldr	r2, [pc, #240]	; (80033ac <TIM_Base_SetConfig+0x11c>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d007      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a3b      	ldr	r2, [pc, #236]	; (80033b0 <TIM_Base_SetConfig+0x120>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d003      	beq.n	80032d0 <TIM_Base_SetConfig+0x40>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a3a      	ldr	r2, [pc, #232]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d108      	bne.n	80032e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2f      	ldr	r2, [pc, #188]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d02b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032f0:	d027      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a2c      	ldr	r2, [pc, #176]	; (80033a8 <TIM_Base_SetConfig+0x118>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d023      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a2b      	ldr	r2, [pc, #172]	; (80033ac <TIM_Base_SetConfig+0x11c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01f      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a2a      	ldr	r2, [pc, #168]	; (80033b0 <TIM_Base_SetConfig+0x120>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d01b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d017      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a28      	ldr	r2, [pc, #160]	; (80033b8 <TIM_Base_SetConfig+0x128>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d013      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a27      	ldr	r2, [pc, #156]	; (80033bc <TIM_Base_SetConfig+0x12c>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d00f      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a26      	ldr	r2, [pc, #152]	; (80033c0 <TIM_Base_SetConfig+0x130>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00b      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a25      	ldr	r2, [pc, #148]	; (80033c4 <TIM_Base_SetConfig+0x134>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d007      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a24      	ldr	r2, [pc, #144]	; (80033c8 <TIM_Base_SetConfig+0x138>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d003      	beq.n	8003342 <TIM_Base_SetConfig+0xb2>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a23      	ldr	r2, [pc, #140]	; (80033cc <TIM_Base_SetConfig+0x13c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d108      	bne.n	8003354 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	689a      	ldr	r2, [r3, #8]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <TIM_Base_SetConfig+0x114>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d003      	beq.n	8003388 <TIM_Base_SetConfig+0xf8>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a0c      	ldr	r2, [pc, #48]	; (80033b4 <TIM_Base_SetConfig+0x124>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d103      	bne.n	8003390 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	691a      	ldr	r2, [r3, #16]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	615a      	str	r2, [r3, #20]
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40000800 	.word	0x40000800
 80033b0:	40000c00 	.word	0x40000c00
 80033b4:	40010400 	.word	0x40010400
 80033b8:	40014000 	.word	0x40014000
 80033bc:	40014400 	.word	0x40014400
 80033c0:	40014800 	.word	0x40014800
 80033c4:	40001800 	.word	0x40001800
 80033c8:	40001c00 	.word	0x40001c00
 80033cc:	40002000 	.word	0x40002000

080033d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f023 0201 	bic.w	r2, r3, #1
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0303 	bic.w	r3, r3, #3
 8003406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f023 0302 	bic.w	r3, r3, #2
 8003418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	4313      	orrs	r3, r2
 8003422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a20      	ldr	r2, [pc, #128]	; (80034a8 <TIM_OC1_SetConfig+0xd8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d003      	beq.n	8003434 <TIM_OC1_SetConfig+0x64>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	4a1f      	ldr	r2, [pc, #124]	; (80034ac <TIM_OC1_SetConfig+0xdc>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d10c      	bne.n	800344e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0308 	bic.w	r3, r3, #8
 800343a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4313      	orrs	r3, r2
 8003444:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f023 0304 	bic.w	r3, r3, #4
 800344c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <TIM_OC1_SetConfig+0xd8>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d003      	beq.n	800345e <TIM_OC1_SetConfig+0x8e>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a14      	ldr	r2, [pc, #80]	; (80034ac <TIM_OC1_SetConfig+0xdc>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d111      	bne.n	8003482 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800346c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	693a      	ldr	r2, [r7, #16]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	4313      	orrs	r3, r2
 8003480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685a      	ldr	r2, [r3, #4]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	621a      	str	r2, [r3, #32]
}
 800349c:	bf00      	nop
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40010000 	.word	0x40010000
 80034ac:	40010400 	.word	0x40010400

080034b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	f023 0210 	bic.w	r2, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f023 0320 	bic.w	r3, r3, #32
 80034fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a22      	ldr	r2, [pc, #136]	; (8003594 <TIM_OC2_SetConfig+0xe4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_OC2_SetConfig+0x68>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a21      	ldr	r2, [pc, #132]	; (8003598 <TIM_OC2_SetConfig+0xe8>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d10d      	bne.n	8003534 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800351e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	4313      	orrs	r3, r2
 800352a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003532:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a17      	ldr	r2, [pc, #92]	; (8003594 <TIM_OC2_SetConfig+0xe4>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d003      	beq.n	8003544 <TIM_OC2_SetConfig+0x94>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a16      	ldr	r2, [pc, #88]	; (8003598 <TIM_OC2_SetConfig+0xe8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d113      	bne.n	800356c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800354a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685a      	ldr	r2, [r3, #4]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	697a      	ldr	r2, [r7, #20]
 8003584:	621a      	str	r2, [r3, #32]
}
 8003586:	bf00      	nop
 8003588:	371c      	adds	r7, #28
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40010000 	.word	0x40010000
 8003598:	40010400 	.word	0x40010400

0800359c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0303 	bic.w	r3, r3, #3
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	021b      	lsls	r3, r3, #8
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a21      	ldr	r2, [pc, #132]	; (800367c <TIM_OC3_SetConfig+0xe0>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d003      	beq.n	8003602 <TIM_OC3_SetConfig+0x66>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a20      	ldr	r2, [pc, #128]	; (8003680 <TIM_OC3_SetConfig+0xe4>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d10d      	bne.n	800361e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	021b      	lsls	r3, r3, #8
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	4313      	orrs	r3, r2
 8003614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800361c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a16      	ldr	r2, [pc, #88]	; (800367c <TIM_OC3_SetConfig+0xe0>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_OC3_SetConfig+0x92>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a15      	ldr	r2, [pc, #84]	; (8003680 <TIM_OC3_SetConfig+0xe4>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d113      	bne.n	8003656 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003634:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800363c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	011b      	lsls	r3, r3, #4
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	68fa      	ldr	r2, [r7, #12]
 8003660:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	685a      	ldr	r2, [r3, #4]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	621a      	str	r2, [r3, #32]
}
 8003670:	bf00      	nop
 8003672:	371c      	adds	r7, #28
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	40010000 	.word	0x40010000
 8003680:	40010400 	.word	0x40010400

08003684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	021b      	lsls	r3, r3, #8
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	031b      	lsls	r3, r3, #12
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a12      	ldr	r2, [pc, #72]	; (8003728 <TIM_OC4_SetConfig+0xa4>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d003      	beq.n	80036ec <TIM_OC4_SetConfig+0x68>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a11      	ldr	r2, [pc, #68]	; (800372c <TIM_OC4_SetConfig+0xa8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d109      	bne.n	8003700 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	695b      	ldr	r3, [r3, #20]
 80036f8:	019b      	lsls	r3, r3, #6
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	621a      	str	r2, [r3, #32]
}
 800371a:	bf00      	nop
 800371c:	371c      	adds	r7, #28
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	40010000 	.word	0x40010000
 800372c:	40010400 	.word	0x40010400

08003730 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	f023 0201 	bic.w	r2, r3, #1
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800375a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	011b      	lsls	r3, r3, #4
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4313      	orrs	r3, r2
 8003764:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f023 030a 	bic.w	r3, r3, #10
 800376c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	697a      	ldr	r2, [r7, #20]
 8003780:	621a      	str	r2, [r3, #32]
}
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800378e:	b480      	push	{r7}
 8003790:	b087      	sub	sp, #28
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f023 0210 	bic.w	r2, r3, #16
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	031b      	lsls	r3, r3, #12
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	621a      	str	r2, [r3, #32]
}
 80037e2:	bf00      	nop
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b085      	sub	sp, #20
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003804:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	4313      	orrs	r3, r2
 800380c:	f043 0307 	orr.w	r3, r3, #7
 8003810:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	609a      	str	r2, [r3, #8]
}
 8003818:	bf00      	nop
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003824:	b480      	push	{r7}
 8003826:	b087      	sub	sp, #28
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800383e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	021a      	lsls	r2, r3, #8
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	431a      	orrs	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4313      	orrs	r3, r2
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	4313      	orrs	r3, r2
 8003850:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	697a      	ldr	r2, [r7, #20]
 8003856:	609a      	str	r2, [r3, #8]
}
 8003858:	bf00      	nop
 800385a:	371c      	adds	r7, #28
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003878:	2302      	movs	r3, #2
 800387a:	e05a      	b.n	8003932 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a21      	ldr	r2, [pc, #132]	; (8003940 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d022      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c8:	d01d      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a1d      	ldr	r2, [pc, #116]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d018      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d013      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a1a      	ldr	r2, [pc, #104]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00e      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a18      	ldr	r2, [pc, #96]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d009      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a17      	ldr	r2, [pc, #92]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d004      	beq.n	8003906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a15      	ldr	r2, [pc, #84]	; (8003958 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d10c      	bne.n	8003920 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800390c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	4313      	orrs	r3, r2
 8003916:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	40010000 	.word	0x40010000
 8003944:	40000400 	.word	0x40000400
 8003948:	40000800 	.word	0x40000800
 800394c:	40000c00 	.word	0x40000c00
 8003950:	40010400 	.word	0x40010400
 8003954:	40014000 	.word	0x40014000
 8003958:	40001800 	.word	0x40001800

0800395c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e03f      	b.n	80039ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7fe f960 	bl	8001c48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2224      	movs	r2, #36	; 0x24
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68da      	ldr	r2, [r3, #12]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800399e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f905 	bl	8003bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	691a      	ldr	r2, [r3, #16]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68da      	ldr	r2, [r3, #12]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2220      	movs	r2, #32
 80039e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2220      	movs	r2, #32
 80039e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3708      	adds	r7, #8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}

080039f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b08a      	sub	sp, #40	; 0x28
 80039fa:	af02      	add	r7, sp, #8
 80039fc:	60f8      	str	r0, [r7, #12]
 80039fe:	60b9      	str	r1, [r7, #8]
 8003a00:	603b      	str	r3, [r7, #0]
 8003a02:	4613      	mov	r3, r2
 8003a04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b20      	cmp	r3, #32
 8003a14:	d17c      	bne.n	8003b10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_UART_Transmit+0x2c>
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e075      	b.n	8003b12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d101      	bne.n	8003a34 <HAL_UART_Transmit+0x3e>
 8003a30:	2302      	movs	r3, #2
 8003a32:	e06e      	b.n	8003b12 <HAL_UART_Transmit+0x11c>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2221      	movs	r2, #33	; 0x21
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a4a:	f7fe f9e7 	bl	8001e1c <HAL_GetTick>
 8003a4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	88fa      	ldrh	r2, [r7, #6]
 8003a54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	88fa      	ldrh	r2, [r7, #6]
 8003a5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a64:	d108      	bne.n	8003a78 <HAL_UART_Transmit+0x82>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d104      	bne.n	8003a78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	61bb      	str	r3, [r7, #24]
 8003a76:	e003      	b.n	8003a80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003a88:	e02a      	b.n	8003ae0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2200      	movs	r2, #0
 8003a92:	2180      	movs	r1, #128	; 0x80
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 f840 	bl	8003b1a <UART_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e036      	b.n	8003b12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10b      	bne.n	8003ac2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	881b      	ldrh	r3, [r3, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ab8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	3302      	adds	r3, #2
 8003abe:	61bb      	str	r3, [r7, #24]
 8003ac0:	e007      	b.n	8003ad2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1cf      	bne.n	8003a8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	2200      	movs	r2, #0
 8003af2:	2140      	movs	r1, #64	; 0x40
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 f810 	bl	8003b1a <UART_WaitOnFlagUntilTimeout>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e006      	b.n	8003b12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e000      	b.n	8003b12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003b10:	2302      	movs	r3, #2
  }
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3720      	adds	r7, #32
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	603b      	str	r3, [r7, #0]
 8003b26:	4613      	mov	r3, r2
 8003b28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b2a:	e02c      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b32:	d028      	beq.n	8003b86 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d007      	beq.n	8003b4a <UART_WaitOnFlagUntilTimeout+0x30>
 8003b3a:	f7fe f96f 	bl	8001e1c <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d21d      	bcs.n	8003b86 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68da      	ldr	r2, [r3, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003b58:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695a      	ldr	r2, [r3, #20]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0201 	bic.w	r2, r2, #1
 8003b68:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003b82:	2303      	movs	r3, #3
 8003b84:	e00f      	b.n	8003ba6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	bf0c      	ite	eq
 8003b96:	2301      	moveq	r3, #1
 8003b98:	2300      	movne	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d0c3      	beq.n	8003b2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb4:	b09f      	sub	sp, #124	; 0x7c
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc6:	68d9      	ldr	r1, [r3, #12]
 8003bc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	ea40 0301 	orr.w	r3, r0, r1
 8003bd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bf4:	f021 010c 	bic.w	r1, r1, #12
 8003bf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bfe:	430b      	orrs	r3, r1
 8003c00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c0e:	6999      	ldr	r1, [r3, #24]
 8003c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	ea40 0301 	orr.w	r3, r0, r1
 8003c18:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4bc5      	ldr	r3, [pc, #788]	; (8003f34 <UART_SetConfig+0x384>)
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d004      	beq.n	8003c2e <UART_SetConfig+0x7e>
 8003c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4bc3      	ldr	r3, [pc, #780]	; (8003f38 <UART_SetConfig+0x388>)
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d103      	bne.n	8003c36 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c2e:	f7ff f809 	bl	8002c44 <HAL_RCC_GetPCLK2Freq>
 8003c32:	6778      	str	r0, [r7, #116]	; 0x74
 8003c34:	e002      	b.n	8003c3c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c36:	f7fe fff1 	bl	8002c1c <HAL_RCC_GetPCLK1Freq>
 8003c3a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c44:	f040 80b6 	bne.w	8003db4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c4a:	461c      	mov	r4, r3
 8003c4c:	f04f 0500 	mov.w	r5, #0
 8003c50:	4622      	mov	r2, r4
 8003c52:	462b      	mov	r3, r5
 8003c54:	1891      	adds	r1, r2, r2
 8003c56:	6439      	str	r1, [r7, #64]	; 0x40
 8003c58:	415b      	adcs	r3, r3
 8003c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c5c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c60:	1912      	adds	r2, r2, r4
 8003c62:	eb45 0303 	adc.w	r3, r5, r3
 8003c66:	f04f 0000 	mov.w	r0, #0
 8003c6a:	f04f 0100 	mov.w	r1, #0
 8003c6e:	00d9      	lsls	r1, r3, #3
 8003c70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c74:	00d0      	lsls	r0, r2, #3
 8003c76:	4602      	mov	r2, r0
 8003c78:	460b      	mov	r3, r1
 8003c7a:	1911      	adds	r1, r2, r4
 8003c7c:	6639      	str	r1, [r7, #96]	; 0x60
 8003c7e:	416b      	adcs	r3, r5
 8003c80:	667b      	str	r3, [r7, #100]	; 0x64
 8003c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	461a      	mov	r2, r3
 8003c88:	f04f 0300 	mov.w	r3, #0
 8003c8c:	1891      	adds	r1, r2, r2
 8003c8e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c90:	415b      	adcs	r3, r3
 8003c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c94:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c98:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003c9c:	f7fd f85c 	bl	8000d58 <__aeabi_uldivmod>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4ba5      	ldr	r3, [pc, #660]	; (8003f3c <UART_SetConfig+0x38c>)
 8003ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	011e      	lsls	r6, r3, #4
 8003cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cb0:	461c      	mov	r4, r3
 8003cb2:	f04f 0500 	mov.w	r5, #0
 8003cb6:	4622      	mov	r2, r4
 8003cb8:	462b      	mov	r3, r5
 8003cba:	1891      	adds	r1, r2, r2
 8003cbc:	6339      	str	r1, [r7, #48]	; 0x30
 8003cbe:	415b      	adcs	r3, r3
 8003cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003cc2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003cc6:	1912      	adds	r2, r2, r4
 8003cc8:	eb45 0303 	adc.w	r3, r5, r3
 8003ccc:	f04f 0000 	mov.w	r0, #0
 8003cd0:	f04f 0100 	mov.w	r1, #0
 8003cd4:	00d9      	lsls	r1, r3, #3
 8003cd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cda:	00d0      	lsls	r0, r2, #3
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	1911      	adds	r1, r2, r4
 8003ce2:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ce4:	416b      	adcs	r3, r5
 8003ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ce8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	461a      	mov	r2, r3
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	1891      	adds	r1, r2, r2
 8003cf4:	62b9      	str	r1, [r7, #40]	; 0x28
 8003cf6:	415b      	adcs	r3, r3
 8003cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cfa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cfe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d02:	f7fd f829 	bl	8000d58 <__aeabi_uldivmod>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4b8c      	ldr	r3, [pc, #560]	; (8003f3c <UART_SetConfig+0x38c>)
 8003d0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	2164      	movs	r1, #100	; 0x64
 8003d14:	fb01 f303 	mul.w	r3, r1, r3
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	3332      	adds	r3, #50	; 0x32
 8003d1e:	4a87      	ldr	r2, [pc, #540]	; (8003f3c <UART_SetConfig+0x38c>)
 8003d20:	fba2 2303 	umull	r2, r3, r2, r3
 8003d24:	095b      	lsrs	r3, r3, #5
 8003d26:	005b      	lsls	r3, r3, #1
 8003d28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d2c:	441e      	add	r6, r3
 8003d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d30:	4618      	mov	r0, r3
 8003d32:	f04f 0100 	mov.w	r1, #0
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	1894      	adds	r4, r2, r2
 8003d3c:	623c      	str	r4, [r7, #32]
 8003d3e:	415b      	adcs	r3, r3
 8003d40:	627b      	str	r3, [r7, #36]	; 0x24
 8003d42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d46:	1812      	adds	r2, r2, r0
 8003d48:	eb41 0303 	adc.w	r3, r1, r3
 8003d4c:	f04f 0400 	mov.w	r4, #0
 8003d50:	f04f 0500 	mov.w	r5, #0
 8003d54:	00dd      	lsls	r5, r3, #3
 8003d56:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d5a:	00d4      	lsls	r4, r2, #3
 8003d5c:	4622      	mov	r2, r4
 8003d5e:	462b      	mov	r3, r5
 8003d60:	1814      	adds	r4, r2, r0
 8003d62:	653c      	str	r4, [r7, #80]	; 0x50
 8003d64:	414b      	adcs	r3, r1
 8003d66:	657b      	str	r3, [r7, #84]	; 0x54
 8003d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	461a      	mov	r2, r3
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	1891      	adds	r1, r2, r2
 8003d74:	61b9      	str	r1, [r7, #24]
 8003d76:	415b      	adcs	r3, r3
 8003d78:	61fb      	str	r3, [r7, #28]
 8003d7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d7e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003d82:	f7fc ffe9 	bl	8000d58 <__aeabi_uldivmod>
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4b6c      	ldr	r3, [pc, #432]	; (8003f3c <UART_SetConfig+0x38c>)
 8003d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	2164      	movs	r1, #100	; 0x64
 8003d94:	fb01 f303 	mul.w	r3, r1, r3
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	3332      	adds	r3, #50	; 0x32
 8003d9e:	4a67      	ldr	r2, [pc, #412]	; (8003f3c <UART_SetConfig+0x38c>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	095b      	lsrs	r3, r3, #5
 8003da6:	f003 0207 	and.w	r2, r3, #7
 8003daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4432      	add	r2, r6
 8003db0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003db2:	e0b9      	b.n	8003f28 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003db4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db6:	461c      	mov	r4, r3
 8003db8:	f04f 0500 	mov.w	r5, #0
 8003dbc:	4622      	mov	r2, r4
 8003dbe:	462b      	mov	r3, r5
 8003dc0:	1891      	adds	r1, r2, r2
 8003dc2:	6139      	str	r1, [r7, #16]
 8003dc4:	415b      	adcs	r3, r3
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003dcc:	1912      	adds	r2, r2, r4
 8003dce:	eb45 0303 	adc.w	r3, r5, r3
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f04f 0100 	mov.w	r1, #0
 8003dda:	00d9      	lsls	r1, r3, #3
 8003ddc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003de0:	00d0      	lsls	r0, r2, #3
 8003de2:	4602      	mov	r2, r0
 8003de4:	460b      	mov	r3, r1
 8003de6:	eb12 0804 	adds.w	r8, r2, r4
 8003dea:	eb43 0905 	adc.w	r9, r3, r5
 8003dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f04f 0100 	mov.w	r1, #0
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	008b      	lsls	r3, r1, #2
 8003e02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e06:	0082      	lsls	r2, r0, #2
 8003e08:	4640      	mov	r0, r8
 8003e0a:	4649      	mov	r1, r9
 8003e0c:	f7fc ffa4 	bl	8000d58 <__aeabi_uldivmod>
 8003e10:	4602      	mov	r2, r0
 8003e12:	460b      	mov	r3, r1
 8003e14:	4b49      	ldr	r3, [pc, #292]	; (8003f3c <UART_SetConfig+0x38c>)
 8003e16:	fba3 2302 	umull	r2, r3, r3, r2
 8003e1a:	095b      	lsrs	r3, r3, #5
 8003e1c:	011e      	lsls	r6, r3, #4
 8003e1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e20:	4618      	mov	r0, r3
 8003e22:	f04f 0100 	mov.w	r1, #0
 8003e26:	4602      	mov	r2, r0
 8003e28:	460b      	mov	r3, r1
 8003e2a:	1894      	adds	r4, r2, r2
 8003e2c:	60bc      	str	r4, [r7, #8]
 8003e2e:	415b      	adcs	r3, r3
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e36:	1812      	adds	r2, r2, r0
 8003e38:	eb41 0303 	adc.w	r3, r1, r3
 8003e3c:	f04f 0400 	mov.w	r4, #0
 8003e40:	f04f 0500 	mov.w	r5, #0
 8003e44:	00dd      	lsls	r5, r3, #3
 8003e46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e4a:	00d4      	lsls	r4, r2, #3
 8003e4c:	4622      	mov	r2, r4
 8003e4e:	462b      	mov	r3, r5
 8003e50:	1814      	adds	r4, r2, r0
 8003e52:	64bc      	str	r4, [r7, #72]	; 0x48
 8003e54:	414b      	adcs	r3, r1
 8003e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f04f 0100 	mov.w	r1, #0
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	008b      	lsls	r3, r1, #2
 8003e6c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e70:	0082      	lsls	r2, r0, #2
 8003e72:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003e76:	f7fc ff6f 	bl	8000d58 <__aeabi_uldivmod>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4b2f      	ldr	r3, [pc, #188]	; (8003f3c <UART_SetConfig+0x38c>)
 8003e80:	fba3 1302 	umull	r1, r3, r3, r2
 8003e84:	095b      	lsrs	r3, r3, #5
 8003e86:	2164      	movs	r1, #100	; 0x64
 8003e88:	fb01 f303 	mul.w	r3, r1, r3
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	3332      	adds	r3, #50	; 0x32
 8003e92:	4a2a      	ldr	r2, [pc, #168]	; (8003f3c <UART_SetConfig+0x38c>)
 8003e94:	fba2 2303 	umull	r2, r3, r2, r3
 8003e98:	095b      	lsrs	r3, r3, #5
 8003e9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e9e:	441e      	add	r6, r3
 8003ea0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f04f 0100 	mov.w	r1, #0
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	1894      	adds	r4, r2, r2
 8003eae:	603c      	str	r4, [r7, #0]
 8003eb0:	415b      	adcs	r3, r3
 8003eb2:	607b      	str	r3, [r7, #4]
 8003eb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eb8:	1812      	adds	r2, r2, r0
 8003eba:	eb41 0303 	adc.w	r3, r1, r3
 8003ebe:	f04f 0400 	mov.w	r4, #0
 8003ec2:	f04f 0500 	mov.w	r5, #0
 8003ec6:	00dd      	lsls	r5, r3, #3
 8003ec8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ecc:	00d4      	lsls	r4, r2, #3
 8003ece:	4622      	mov	r2, r4
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	eb12 0a00 	adds.w	sl, r2, r0
 8003ed6:	eb43 0b01 	adc.w	fp, r3, r1
 8003eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f04f 0100 	mov.w	r1, #0
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	008b      	lsls	r3, r1, #2
 8003eee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ef2:	0082      	lsls	r2, r0, #2
 8003ef4:	4650      	mov	r0, sl
 8003ef6:	4659      	mov	r1, fp
 8003ef8:	f7fc ff2e 	bl	8000d58 <__aeabi_uldivmod>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4b0e      	ldr	r3, [pc, #56]	; (8003f3c <UART_SetConfig+0x38c>)
 8003f02:	fba3 1302 	umull	r1, r3, r3, r2
 8003f06:	095b      	lsrs	r3, r3, #5
 8003f08:	2164      	movs	r1, #100	; 0x64
 8003f0a:	fb01 f303 	mul.w	r3, r1, r3
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	3332      	adds	r3, #50	; 0x32
 8003f14:	4a09      	ldr	r2, [pc, #36]	; (8003f3c <UART_SetConfig+0x38c>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	f003 020f 	and.w	r2, r3, #15
 8003f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4432      	add	r2, r6
 8003f26:	609a      	str	r2, [r3, #8]
}
 8003f28:	bf00      	nop
 8003f2a:	377c      	adds	r7, #124	; 0x7c
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f32:	bf00      	nop
 8003f34:	40011000 	.word	0x40011000
 8003f38:	40011400 	.word	0x40011400
 8003f3c:	51eb851f 	.word	0x51eb851f

08003f40 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f58:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	4b20      	ldr	r3, [pc, #128]	; (8003fe0 <FSMC_NORSRAM_Init+0xa0>)
 8003f5e:	4013      	ands	r3, r2
 8003f60:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8003f6a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8003f70:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8003f76:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8003f7c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8003f82:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8003f88:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8003f8e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8003f94:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8003f9a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8003fa0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8003fa6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8003fac:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d103      	bne.n	8003fc4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fc2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68f9      	ldr	r1, [r7, #12]
 8003fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	fff00080 	.word	0xfff00080

08003fe4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b087      	sub	sp, #28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	1c5a      	adds	r2, r3, #1
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ffe:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004006:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004012:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800401a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004022:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	3b01      	subs	r3, #1
 800402a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800402c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	695b      	ldr	r3, [r3, #20]
 8004032:	3b02      	subs	r3, #2
 8004034:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004036:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800403c:	4313      	orrs	r3, r2
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4313      	orrs	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	1c5a      	adds	r2, r3, #1
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6979      	ldr	r1, [r7, #20]
 800404c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
	...

08004060 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004078:	d122      	bne.n	80040c0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004082:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	4b15      	ldr	r3, [pc, #84]	; (80040dc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8004088:	4013      	ands	r3, r2
 800408a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004096:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800409e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80040a6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80040ac:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6979      	ldr	r1, [r7, #20]
 80040ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80040be:	e005      	b.n	80040cc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80040c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	cff00000 	.word	0xcff00000

080040e0 <arm_rfft_fast_init_f32>:
 80040e0:	084b      	lsrs	r3, r1, #1
 80040e2:	2b80      	cmp	r3, #128	; 0x80
 80040e4:	b410      	push	{r4}
 80040e6:	8201      	strh	r1, [r0, #16]
 80040e8:	8003      	strh	r3, [r0, #0]
 80040ea:	d047      	beq.n	800417c <arm_rfft_fast_init_f32+0x9c>
 80040ec:	d917      	bls.n	800411e <arm_rfft_fast_init_f32+0x3e>
 80040ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f2:	d03d      	beq.n	8004170 <arm_rfft_fast_init_f32+0x90>
 80040f4:	d929      	bls.n	800414a <arm_rfft_fast_init_f32+0x6a>
 80040f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040fa:	d020      	beq.n	800413e <arm_rfft_fast_init_f32+0x5e>
 80040fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004100:	d113      	bne.n	800412a <arm_rfft_fast_init_f32+0x4a>
 8004102:	4921      	ldr	r1, [pc, #132]	; (8004188 <arm_rfft_fast_init_f32+0xa8>)
 8004104:	4a21      	ldr	r2, [pc, #132]	; (800418c <arm_rfft_fast_init_f32+0xac>)
 8004106:	4b22      	ldr	r3, [pc, #136]	; (8004190 <arm_rfft_fast_init_f32+0xb0>)
 8004108:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 800410c:	8184      	strh	r4, [r0, #12]
 800410e:	6081      	str	r1, [r0, #8]
 8004110:	6042      	str	r2, [r0, #4]
 8004112:	6143      	str	r3, [r0, #20]
 8004114:	2000      	movs	r0, #0
 8004116:	b240      	sxtb	r0, r0
 8004118:	f85d 4b04 	ldr.w	r4, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	2b20      	cmp	r3, #32
 8004120:	d01c      	beq.n	800415c <arm_rfft_fast_init_f32+0x7c>
 8004122:	2b40      	cmp	r3, #64	; 0x40
 8004124:	d006      	beq.n	8004134 <arm_rfft_fast_init_f32+0x54>
 8004126:	2b10      	cmp	r3, #16
 8004128:	d01d      	beq.n	8004166 <arm_rfft_fast_init_f32+0x86>
 800412a:	20ff      	movs	r0, #255	; 0xff
 800412c:	b240      	sxtb	r0, r0
 800412e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	2438      	movs	r4, #56	; 0x38
 8004136:	4917      	ldr	r1, [pc, #92]	; (8004194 <arm_rfft_fast_init_f32+0xb4>)
 8004138:	4a17      	ldr	r2, [pc, #92]	; (8004198 <arm_rfft_fast_init_f32+0xb8>)
 800413a:	4b18      	ldr	r3, [pc, #96]	; (800419c <arm_rfft_fast_init_f32+0xbc>)
 800413c:	e7e6      	b.n	800410c <arm_rfft_fast_init_f32+0x2c>
 800413e:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 8004142:	4917      	ldr	r1, [pc, #92]	; (80041a0 <arm_rfft_fast_init_f32+0xc0>)
 8004144:	4a17      	ldr	r2, [pc, #92]	; (80041a4 <arm_rfft_fast_init_f32+0xc4>)
 8004146:	4b18      	ldr	r3, [pc, #96]	; (80041a8 <arm_rfft_fast_init_f32+0xc8>)
 8004148:	e7e0      	b.n	800410c <arm_rfft_fast_init_f32+0x2c>
 800414a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800414e:	d1ec      	bne.n	800412a <arm_rfft_fast_init_f32+0x4a>
 8004150:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8004154:	4915      	ldr	r1, [pc, #84]	; (80041ac <arm_rfft_fast_init_f32+0xcc>)
 8004156:	4a16      	ldr	r2, [pc, #88]	; (80041b0 <arm_rfft_fast_init_f32+0xd0>)
 8004158:	4b16      	ldr	r3, [pc, #88]	; (80041b4 <arm_rfft_fast_init_f32+0xd4>)
 800415a:	e7d7      	b.n	800410c <arm_rfft_fast_init_f32+0x2c>
 800415c:	2430      	movs	r4, #48	; 0x30
 800415e:	4916      	ldr	r1, [pc, #88]	; (80041b8 <arm_rfft_fast_init_f32+0xd8>)
 8004160:	4a16      	ldr	r2, [pc, #88]	; (80041bc <arm_rfft_fast_init_f32+0xdc>)
 8004162:	4b17      	ldr	r3, [pc, #92]	; (80041c0 <arm_rfft_fast_init_f32+0xe0>)
 8004164:	e7d2      	b.n	800410c <arm_rfft_fast_init_f32+0x2c>
 8004166:	2414      	movs	r4, #20
 8004168:	4916      	ldr	r1, [pc, #88]	; (80041c4 <arm_rfft_fast_init_f32+0xe4>)
 800416a:	4a17      	ldr	r2, [pc, #92]	; (80041c8 <arm_rfft_fast_init_f32+0xe8>)
 800416c:	4b17      	ldr	r3, [pc, #92]	; (80041cc <arm_rfft_fast_init_f32+0xec>)
 800416e:	e7cd      	b.n	800410c <arm_rfft_fast_init_f32+0x2c>
 8004170:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8004174:	4916      	ldr	r1, [pc, #88]	; (80041d0 <arm_rfft_fast_init_f32+0xf0>)
 8004176:	4a17      	ldr	r2, [pc, #92]	; (80041d4 <arm_rfft_fast_init_f32+0xf4>)
 8004178:	4b17      	ldr	r3, [pc, #92]	; (80041d8 <arm_rfft_fast_init_f32+0xf8>)
 800417a:	e7c7      	b.n	800410c <arm_rfft_fast_init_f32+0x2c>
 800417c:	24d0      	movs	r4, #208	; 0xd0
 800417e:	4917      	ldr	r1, [pc, #92]	; (80041dc <arm_rfft_fast_init_f32+0xfc>)
 8004180:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <arm_rfft_fast_init_f32+0x100>)
 8004182:	4b18      	ldr	r3, [pc, #96]	; (80041e4 <arm_rfft_fast_init_f32+0x104>)
 8004184:	e7c2      	b.n	800410c <arm_rfft_fast_init_f32+0x2c>
 8004186:	bf00      	nop
 8004188:	080192f0 	.word	0x080192f0
 800418c:	08009ce4 	.word	0x08009ce4
 8004190:	0800fe54 	.word	0x0800fe54
 8004194:	0800dde4 	.word	0x0800dde4
 8004198:	0801b0b0 	.word	0x0801b0b0
 800419c:	0801d5a0 	.word	0x0801d5a0
 80041a0:	080167d4 	.word	0x080167d4
 80041a4:	080146d4 	.word	0x080146d4
 80041a8:	0800de54 	.word	0x0800de54
 80041ac:	0801d230 	.word	0x0801d230
 80041b0:	08013e54 	.word	0x08013e54
 80041b4:	0801b2b0 	.word	0x0801b2b0
 80041b8:	0801768c 	.word	0x0801768c
 80041bc:	080166d4 	.word	0x080166d4
 80041c0:	0800dce4 	.word	0x0800dce4
 80041c4:	080175e4 	.word	0x080175e4
 80041c8:	08014654 	.word	0x08014654
 80041cc:	0801760c 	.word	0x0801760c
 80041d0:	0801bab0 	.word	0x0801bab0
 80041d4:	080182f0 	.word	0x080182f0
 80041d8:	0801be30 	.word	0x0801be30
 80041dc:	0801d7a0 	.word	0x0801d7a0
 80041e0:	08017ef0 	.word	0x08017ef0
 80041e4:	0801ce30 	.word	0x0801ce30

080041e8 <arm_rfft_fast_f32>:
 80041e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041ec:	8a07      	ldrh	r7, [r0, #16]
 80041ee:	087f      	lsrs	r7, r7, #1
 80041f0:	4682      	mov	sl, r0
 80041f2:	4691      	mov	r9, r2
 80041f4:	8007      	strh	r7, [r0, #0]
 80041f6:	4688      	mov	r8, r1
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d15e      	bne.n	80042ba <arm_rfft_fast_f32+0xd2>
 80041fc:	461a      	mov	r2, r3
 80041fe:	2301      	movs	r3, #1
 8004200:	f000 fc0e 	bl	8004a20 <arm_cfft_f32>
 8004204:	ed98 7a00 	vldr	s14, [r8]
 8004208:	edd8 7a01 	vldr	s15, [r8, #4]
 800420c:	f8ba 4000 	ldrh.w	r4, [sl]
 8004210:	f8da 0014 	ldr.w	r0, [sl, #20]
 8004214:	ee37 7a07 	vadd.f32	s14, s14, s14
 8004218:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800421c:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8004220:	ee77 6a27 	vadd.f32	s13, s14, s15
 8004224:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004228:	ee66 6a84 	vmul.f32	s13, s13, s8
 800422c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004230:	3c01      	subs	r4, #1
 8004232:	edc9 6a00 	vstr	s13, [r9]
 8004236:	edc9 7a01 	vstr	s15, [r9, #4]
 800423a:	3008      	adds	r0, #8
 800423c:	f109 0208 	add.w	r2, r9, #8
 8004240:	eb08 05c4 	add.w	r5, r8, r4, lsl #3
 8004244:	f108 0308 	add.w	r3, r8, #8
 8004248:	4629      	mov	r1, r5
 800424a:	edd3 7a00 	vldr	s15, [r3]
 800424e:	edd1 4a00 	vldr	s9, [r1]
 8004252:	edd5 5a01 	vldr	s11, [r5, #4]
 8004256:	edd0 6a00 	vldr	s13, [r0]
 800425a:	ed93 5a01 	vldr	s10, [r3, #4]
 800425e:	ed90 7a01 	vldr	s14, [r0, #4]
 8004262:	ee34 6ae7 	vsub.f32	s12, s9, s15
 8004266:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800426a:	ee66 3a86 	vmul.f32	s7, s13, s12
 800426e:	ee75 7a85 	vadd.f32	s15, s11, s10
 8004272:	ee27 6a06 	vmul.f32	s12, s14, s12
 8004276:	ee75 5a65 	vsub.f32	s11, s10, s11
 800427a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800427e:	ee73 4aa4 	vadd.f32	s9, s7, s9
 8004282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004286:	ee36 6a25 	vadd.f32	s12, s12, s11
 800428a:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800428e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004292:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004296:	ee66 6a84 	vmul.f32	s13, s13, s8
 800429a:	3c01      	subs	r4, #1
 800429c:	edc2 7a00 	vstr	s15, [r2]
 80042a0:	edc2 6a01 	vstr	s13, [r2, #4]
 80042a4:	f1a5 0508 	sub.w	r5, r5, #8
 80042a8:	f103 0308 	add.w	r3, r3, #8
 80042ac:	f100 0008 	add.w	r0, r0, #8
 80042b0:	f102 0208 	add.w	r2, r2, #8
 80042b4:	d1c8      	bne.n	8004248 <arm_rfft_fast_f32+0x60>
 80042b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ba:	ed91 7a00 	vldr	s14, [r1]
 80042be:	edd1 7a01 	vldr	s15, [r1, #4]
 80042c2:	6945      	ldr	r5, [r0, #20]
 80042c4:	ee77 6a27 	vadd.f32	s13, s14, s15
 80042c8:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 80042cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042d0:	ee66 6a84 	vmul.f32	s13, s13, s8
 80042d4:	ee67 7a84 	vmul.f32	s15, s15, s8
 80042d8:	4616      	mov	r6, r2
 80042da:	ee16 1a90 	vmov	r1, s13
 80042de:	3f01      	subs	r7, #1
 80042e0:	f846 1b08 	str.w	r1, [r6], #8
 80042e4:	3508      	adds	r5, #8
 80042e6:	eb08 0cc7 	add.w	ip, r8, r7, lsl #3
 80042ea:	edc2 7a01 	vstr	s15, [r2, #4]
 80042ee:	f108 0408 	add.w	r4, r8, #8
 80042f2:	b3b7      	cbz	r7, 8004362 <arm_rfft_fast_f32+0x17a>
 80042f4:	4662      	mov	r2, ip
 80042f6:	edd4 7a00 	vldr	s15, [r4]
 80042fa:	edd2 4a00 	vldr	s9, [r2]
 80042fe:	eddc 5a01 	vldr	s11, [ip, #4]
 8004302:	edd5 6a00 	vldr	s13, [r5]
 8004306:	ed94 5a01 	vldr	s10, [r4, #4]
 800430a:	ed95 7a01 	vldr	s14, [r5, #4]
 800430e:	ee37 6ae4 	vsub.f32	s12, s15, s9
 8004312:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8004316:	ee66 3a86 	vmul.f32	s7, s13, s12
 800431a:	ee75 7a85 	vadd.f32	s15, s11, s10
 800431e:	ee27 6a06 	vmul.f32	s12, s14, s12
 8004322:	ee75 5a65 	vsub.f32	s11, s10, s11
 8004326:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800432a:	ee74 4ae3 	vsub.f32	s9, s9, s7
 800432e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004332:	ee36 6a25 	vadd.f32	s12, s12, s11
 8004336:	ee74 7ac7 	vsub.f32	s15, s9, s14
 800433a:	ee76 6a66 	vsub.f32	s13, s12, s13
 800433e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8004342:	ee66 6a84 	vmul.f32	s13, s13, s8
 8004346:	3f01      	subs	r7, #1
 8004348:	edc6 7a00 	vstr	s15, [r6]
 800434c:	edc6 6a01 	vstr	s13, [r6, #4]
 8004350:	f1ac 0c08 	sub.w	ip, ip, #8
 8004354:	f104 0408 	add.w	r4, r4, #8
 8004358:	f105 0508 	add.w	r5, r5, #8
 800435c:	f106 0608 	add.w	r6, r6, #8
 8004360:	d1c8      	bne.n	80042f4 <arm_rfft_fast_f32+0x10c>
 8004362:	4650      	mov	r0, sl
 8004364:	4649      	mov	r1, r9
 8004366:	461a      	mov	r2, r3
 8004368:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800436c:	2301      	movs	r3, #1
 800436e:	f000 bb57 	b.w	8004a20 <arm_cfft_f32>
 8004372:	bf00      	nop

08004374 <arm_cfft_radix8by2_f32>:
 8004374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004378:	ed2d 8b08 	vpush	{d8-d11}
 800437c:	4680      	mov	r8, r0
 800437e:	4608      	mov	r0, r1
 8004380:	f8b8 b000 	ldrh.w	fp, [r8]
 8004384:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004388:	ea4f 015b 	mov.w	r1, fp, lsr #1
 800438c:	008d      	lsls	r5, r1, #2
 800438e:	eb00 098b 	add.w	r9, r0, fp, lsl #2
 8004392:	ea5f 0bdb 	movs.w	fp, fp, lsr #3
 8004396:	eb00 0605 	add.w	r6, r0, r5
 800439a:	b081      	sub	sp, #4
 800439c:	444d      	add	r5, r9
 800439e:	f000 80ba 	beq.w	8004516 <arm_cfft_radix8by2_f32+0x1a2>
 80043a2:	f100 0a10 	add.w	sl, r0, #16
 80043a6:	f106 0c10 	add.w	ip, r6, #16
 80043aa:	f109 0e10 	add.w	lr, r9, #16
 80043ae:	f105 0710 	add.w	r7, r5, #16
 80043b2:	4604      	mov	r4, r0
 80043b4:	464b      	mov	r3, r9
 80043b6:	ed1a 0a04 	vldr	s0, [sl, #-16]
 80043ba:	ed1c 7a04 	vldr	s14, [ip, #-16]
 80043be:	ed1e 1a04 	vldr	s2, [lr, #-16]
 80043c2:	ed57 2a04 	vldr	s5, [r7, #-16]
 80043c6:	ed95 2a01 	vldr	s4, [r5, #4]
 80043ca:	ed95 4a02 	vldr	s8, [r5, #8]
 80043ce:	edd5 4a03 	vldr	s9, [r5, #12]
 80043d2:	edd4 0a01 	vldr	s1, [r4, #4]
 80043d6:	edd4 3a03 	vldr	s7, [r4, #12]
 80043da:	edd3 1a01 	vldr	s3, [r3, #4]
 80043de:	ed93 5a02 	vldr	s10, [r3, #8]
 80043e2:	edd6 6a01 	vldr	s13, [r6, #4]
 80043e6:	edd6 7a02 	vldr	s15, [r6, #8]
 80043ea:	ed94 3a02 	vldr	s6, [r4, #8]
 80043ee:	edd3 5a03 	vldr	s11, [r3, #12]
 80043f2:	ed96 6a03 	vldr	s12, [r6, #12]
 80043f6:	ee70 ba01 	vadd.f32	s23, s0, s2
 80043fa:	ee36 8a24 	vadd.f32	s16, s12, s9
 80043fe:	ee30 baa1 	vadd.f32	s22, s1, s3
 8004402:	ee33 aaa5 	vadd.f32	s20, s7, s11
 8004406:	ee77 9a22 	vadd.f32	s19, s14, s5
 800440a:	ee36 9a82 	vadd.f32	s18, s13, s4
 800440e:	ee77 8a84 	vadd.f32	s17, s15, s8
 8004412:	ee73 aa05 	vadd.f32	s21, s6, s10
 8004416:	ed4a ba04 	vstr	s23, [sl, #-16]
 800441a:	ed84 ba01 	vstr	s22, [r4, #4]
 800441e:	edc4 aa02 	vstr	s21, [r4, #8]
 8004422:	ed84 aa03 	vstr	s20, [r4, #12]
 8004426:	ed4c 9a04 	vstr	s19, [ip, #-16]
 800442a:	ed86 8a03 	vstr	s16, [r6, #12]
 800442e:	ed86 9a01 	vstr	s18, [r6, #4]
 8004432:	edc6 8a02 	vstr	s17, [r6, #8]
 8004436:	ee30 1a41 	vsub.f32	s2, s0, s2
 800443a:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800443e:	ee32 2a66 	vsub.f32	s4, s4, s13
 8004442:	ed92 7a00 	vldr	s14, [r2]
 8004446:	edd2 6a01 	vldr	s13, [r2, #4]
 800444a:	ee70 1ae1 	vsub.f32	s3, s1, s3
 800444e:	ee21 8a07 	vmul.f32	s16, s2, s14
 8004452:	ee61 0aa6 	vmul.f32	s1, s3, s13
 8004456:	ee21 1a26 	vmul.f32	s2, s2, s13
 800445a:	ee61 1a87 	vmul.f32	s3, s3, s14
 800445e:	ee22 0aa6 	vmul.f32	s0, s5, s13
 8004462:	ee62 6a26 	vmul.f32	s13, s4, s13
 8004466:	ee22 2a07 	vmul.f32	s4, s4, s14
 800446a:	ee22 7a87 	vmul.f32	s14, s5, s14
 800446e:	ee78 0a20 	vadd.f32	s1, s16, s1
 8004472:	ee36 7a87 	vadd.f32	s14, s13, s14
 8004476:	ee71 1ac1 	vsub.f32	s3, s3, s2
 800447a:	ee30 2a42 	vsub.f32	s4, s0, s4
 800447e:	ed4e 0a04 	vstr	s1, [lr, #-16]
 8004482:	edc3 1a01 	vstr	s3, [r3, #4]
 8004486:	ed07 2a04 	vstr	s4, [r7, #-16]
 800448a:	ed85 7a01 	vstr	s14, [r5, #4]
 800448e:	ed92 7a03 	vldr	s14, [r2, #12]
 8004492:	ee73 5ae5 	vsub.f32	s11, s7, s11
 8004496:	ee74 6a67 	vsub.f32	s13, s8, s15
 800449a:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800449e:	edd2 7a02 	vldr	s15, [r2, #8]
 80044a2:	ee33 5a45 	vsub.f32	s10, s6, s10
 80044a6:	ee65 4a87 	vmul.f32	s9, s11, s14
 80044aa:	ee65 3a27 	vmul.f32	s7, s10, s15
 80044ae:	ee65 5aa7 	vmul.f32	s11, s11, s15
 80044b2:	ee25 5a07 	vmul.f32	s10, s10, s14
 80044b6:	ee26 4a87 	vmul.f32	s8, s13, s14
 80044ba:	ee26 7a07 	vmul.f32	s14, s12, s14
 80044be:	ee26 6a27 	vmul.f32	s12, s12, s15
 80044c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80044c6:	ee73 4aa4 	vadd.f32	s9, s7, s9
 80044ca:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80044ce:	ee34 6a46 	vsub.f32	s12, s8, s12
 80044d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044d6:	f1bb 0b01 	subs.w	fp, fp, #1
 80044da:	edc3 4a02 	vstr	s9, [r3, #8]
 80044de:	f10a 0a10 	add.w	sl, sl, #16
 80044e2:	edc3 5a03 	vstr	s11, [r3, #12]
 80044e6:	f104 0410 	add.w	r4, r4, #16
 80044ea:	ed85 6a02 	vstr	s12, [r5, #8]
 80044ee:	edc5 7a03 	vstr	s15, [r5, #12]
 80044f2:	f10c 0c10 	add.w	ip, ip, #16
 80044f6:	f106 0610 	add.w	r6, r6, #16
 80044fa:	f10e 0e10 	add.w	lr, lr, #16
 80044fe:	f107 0710 	add.w	r7, r7, #16
 8004502:	f102 0210 	add.w	r2, r2, #16
 8004506:	f103 0310 	add.w	r3, r3, #16
 800450a:	f105 0510 	add.w	r5, r5, #16
 800450e:	f47f af52 	bne.w	80043b6 <arm_cfft_radix8by2_f32+0x42>
 8004512:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004516:	b28c      	uxth	r4, r1
 8004518:	4621      	mov	r1, r4
 800451a:	2302      	movs	r3, #2
 800451c:	f000 fc2e 	bl	8004d7c <arm_radix8_butterfly_f32>
 8004520:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004524:	4648      	mov	r0, r9
 8004526:	4621      	mov	r1, r4
 8004528:	2302      	movs	r3, #2
 800452a:	b001      	add	sp, #4
 800452c:	ecbd 8b08 	vpop	{d8-d11}
 8004530:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004534:	f000 bc22 	b.w	8004d7c <arm_radix8_butterfly_f32>

08004538 <arm_cfft_radix8by4_f32>:
 8004538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800453c:	ed2d 8b0a 	vpush	{d8-d12}
 8004540:	b091      	sub	sp, #68	; 0x44
 8004542:	8802      	ldrh	r2, [r0, #0]
 8004544:	9109      	str	r1, [sp, #36]	; 0x24
 8004546:	edd1 4a00 	vldr	s9, [r1]
 800454a:	900a      	str	r0, [sp, #40]	; 0x28
 800454c:	6841      	ldr	r1, [r0, #4]
 800454e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004550:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8004552:	edd0 3a01 	vldr	s7, [r0, #4]
 8004556:	0852      	lsrs	r2, r2, #1
 8004558:	0093      	lsls	r3, r2, #2
 800455a:	4418      	add	r0, r3
 800455c:	9004      	str	r0, [sp, #16]
 800455e:	4418      	add	r0, r3
 8004560:	ed90 5a00 	vldr	s10, [r0]
 8004564:	9c04      	ldr	r4, [sp, #16]
 8004566:	edd0 5a01 	vldr	s11, [r0, #4]
 800456a:	ed94 7a00 	vldr	s14, [r4]
 800456e:	9005      	str	r0, [sp, #20]
 8004570:	ee34 4a85 	vadd.f32	s8, s9, s10
 8004574:	4418      	add	r0, r3
 8004576:	edd0 7a00 	vldr	s15, [r0]
 800457a:	ed94 6a01 	vldr	s12, [r4, #4]
 800457e:	edd0 6a01 	vldr	s13, [r0, #4]
 8004582:	9402      	str	r4, [sp, #8]
 8004584:	ee34 3a07 	vadd.f32	s6, s8, s14
 8004588:	ee34 5ac5 	vsub.f32	s10, s9, s10
 800458c:	ee37 3a83 	vadd.f32	s6, s15, s6
 8004590:	ee73 4aa5 	vadd.f32	s9, s7, s11
 8004594:	ee13 ba10 	vmov	fp, s6
 8004598:	f845 bb08 	str.w	fp, [r5], #8
 800459c:	ee73 5ae5 	vsub.f32	s11, s7, s11
 80045a0:	ed94 3a01 	vldr	s6, [r4, #4]
 80045a4:	ed90 2a01 	vldr	s4, [r0, #4]
 80045a8:	9c05      	ldr	r4, [sp, #20]
 80045aa:	f8dd b008 	ldr.w	fp, [sp, #8]
 80045ae:	9008      	str	r0, [sp, #32]
 80045b0:	ee76 3a05 	vadd.f32	s7, s12, s10
 80045b4:	ee34 3a83 	vadd.f32	s6, s9, s6
 80045b8:	ee73 3ae6 	vsub.f32	s7, s7, s13
 80045bc:	9506      	str	r5, [sp, #24]
 80045be:	9407      	str	r4, [sp, #28]
 80045c0:	9003      	str	r0, [sp, #12]
 80045c2:	1f05      	subs	r5, r0, #4
 80045c4:	ee13 4a90 	vmov	r4, s7
 80045c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045ca:	ee33 3a02 	vadd.f32	s6, s6, s4
 80045ce:	ee34 4a47 	vsub.f32	s8, s8, s14
 80045d2:	ed80 3a01 	vstr	s6, [r0, #4]
 80045d6:	ee74 4ac6 	vsub.f32	s9, s9, s12
 80045da:	f84b 4b08 	str.w	r4, [fp], #8
 80045de:	ee35 6a46 	vsub.f32	s12, s10, s12
 80045e2:	ee75 2ac7 	vsub.f32	s5, s11, s14
 80045e6:	0852      	lsrs	r2, r2, #1
 80045e8:	920f      	str	r2, [sp, #60]	; 0x3c
 80045ea:	ee34 4a67 	vsub.f32	s8, s8, s15
 80045ee:	f8cd b008 	str.w	fp, [sp, #8]
 80045f2:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80045f6:	9c04      	ldr	r4, [sp, #16]
 80045f8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80045fc:	ee32 6aa7 	vadd.f32	s12, s5, s15
 8004600:	f101 0008 	add.w	r0, r1, #8
 8004604:	ed84 6a01 	vstr	s12, [r4, #4]
 8004608:	900e      	str	r0, [sp, #56]	; 0x38
 800460a:	9c07      	ldr	r4, [sp, #28]
 800460c:	ee14 0a10 	vmov	r0, s8
 8004610:	f101 0b10 	add.w	fp, r1, #16
 8004614:	3118      	adds	r1, #24
 8004616:	f844 0b08 	str.w	r0, [r4], #8
 800461a:	ee35 7a87 	vadd.f32	s14, s11, s14
 800461e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8004622:	910c      	str	r1, [sp, #48]	; 0x30
 8004624:	f8dd b014 	ldr.w	fp, [sp, #20]
 8004628:	9903      	ldr	r1, [sp, #12]
 800462a:	edcb 4a01 	vstr	s9, [fp, #4]
 800462e:	ee16 0a90 	vmov	r0, s13
 8004632:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004636:	f841 0b08 	str.w	r0, [r1], #8
 800463a:	3a02      	subs	r2, #2
 800463c:	9407      	str	r4, [sp, #28]
 800463e:	9c08      	ldr	r4, [sp, #32]
 8004640:	9103      	str	r1, [sp, #12]
 8004642:	0852      	lsrs	r2, r2, #1
 8004644:	442b      	add	r3, r5
 8004646:	edc4 7a01 	vstr	s15, [r4, #4]
 800464a:	920d      	str	r2, [sp, #52]	; 0x34
 800464c:	f000 8143 	beq.w	80048d6 <arm_cfft_radix8by4_f32+0x39e>
 8004650:	46dc      	mov	ip, fp
 8004652:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8004656:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800465a:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 800465e:	f10b 0410 	add.w	r4, fp, #16
 8004662:	f8dd b014 	ldr.w	fp, [sp, #20]
 8004666:	f10b 0010 	add.w	r0, fp, #16
 800466a:	f8dd b010 	ldr.w	fp, [sp, #16]
 800466e:	f1ab 0904 	sub.w	r9, fp, #4
 8004672:	46d8      	mov	r8, fp
 8004674:	4693      	mov	fp, r2
 8004676:	e88d 0820 	stmia.w	sp, {r5, fp}
 800467a:	9a02      	ldr	r2, [sp, #8]
 800467c:	f1ac 0604 	sub.w	r6, ip, #4
 8004680:	4657      	mov	r7, sl
 8004682:	ed50 5a02 	vldr	s11, [r0, #-8]
 8004686:	ed54 8a02 	vldr	s17, [r4, #-8]
 800468a:	ed92 6a00 	vldr	s12, [r2]
 800468e:	edd1 6a00 	vldr	s13, [r1]
 8004692:	ed50 7a01 	vldr	s15, [r0, #-4]
 8004696:	ed14 8a01 	vldr	s16, [r4, #-4]
 800469a:	edd1 2a01 	vldr	s5, [r1, #4]
 800469e:	ed92 2a01 	vldr	s4, [r2, #4]
 80046a2:	9d00      	ldr	r5, [sp, #0]
 80046a4:	ee78 9aa5 	vadd.f32	s19, s17, s11
 80046a8:	ee78 8ae5 	vsub.f32	s17, s17, s11
 80046ac:	ee39 5a86 	vadd.f32	s10, s19, s12
 80046b0:	ee38 7a27 	vadd.f32	s14, s16, s15
 80046b4:	ee76 5a85 	vadd.f32	s11, s13, s10
 80046b8:	ee38 8a67 	vsub.f32	s16, s16, s15
 80046bc:	ed44 5a02 	vstr	s11, [r4, #-8]
 80046c0:	edd2 7a01 	vldr	s15, [r2, #4]
 80046c4:	edd1 5a01 	vldr	s11, [r1, #4]
 80046c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046cc:	ee32 ba28 	vadd.f32	s22, s4, s17
 80046d0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80046d4:	ee78 aa46 	vsub.f32	s21, s16, s12
 80046d8:	ed44 7a01 	vstr	s15, [r4, #-4]
 80046dc:	edd5 4a00 	vldr	s9, [r5]
 80046e0:	ed18 0a01 	vldr	s0, [r8, #-4]
 80046e4:	ed1c 5a01 	vldr	s10, [ip, #-4]
 80046e8:	edd3 1a00 	vldr	s3, [r3]
 80046ec:	ed55 5a01 	vldr	s11, [r5, #-4]
 80046f0:	ed19 1a01 	vldr	s2, [r9, #-4]
 80046f4:	ed56 3a01 	vldr	s7, [r6, #-4]
 80046f8:	ed13 3a01 	vldr	s6, [r3, #-4]
 80046fc:	ee30 9a24 	vadd.f32	s18, s0, s9
 8004700:	ee30 0a64 	vsub.f32	s0, s0, s9
 8004704:	ee39 4a05 	vadd.f32	s8, s18, s10
 8004708:	ee71 7a25 	vadd.f32	s15, s2, s11
 800470c:	ee71 4a84 	vadd.f32	s9, s3, s8
 8004710:	ee31 1a65 	vsub.f32	s2, s2, s11
 8004714:	ed48 4a01 	vstr	s9, [r8, #-4]
 8004718:	ed16 4a01 	vldr	s8, [r6, #-4]
 800471c:	ed53 4a01 	vldr	s9, [r3, #-4]
 8004720:	ee37 4a84 	vadd.f32	s8, s15, s8
 8004724:	ee3b ba62 	vsub.f32	s22, s22, s5
 8004728:	ee74 5a24 	vadd.f32	s11, s8, s9
 800472c:	ee7a aaa6 	vadd.f32	s21, s21, s13
 8004730:	ed49 5a01 	vstr	s11, [r9, #-4]
 8004734:	ed5a 4a01 	vldr	s9, [sl, #-4]
 8004738:	ed1a 4a02 	vldr	s8, [sl, #-8]
 800473c:	ee75 0a61 	vsub.f32	s1, s10, s3
 8004740:	ee6a baa4 	vmul.f32	s23, s21, s9
 8004744:	ee2b ca04 	vmul.f32	s24, s22, s8
 8004748:	ee30 aa63 	vsub.f32	s20, s0, s7
 800474c:	ee70 5a81 	vadd.f32	s11, s1, s2
 8004750:	ee3a aa03 	vadd.f32	s20, s20, s6
 8004754:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8004758:	ee2b ba24 	vmul.f32	s22, s22, s9
 800475c:	ee6a ba24 	vmul.f32	s23, s20, s9
 8004760:	ee6a aa84 	vmul.f32	s21, s21, s8
 8004764:	ee2a aa04 	vmul.f32	s20, s20, s8
 8004768:	ee1c ba10 	vmov	fp, s24
 800476c:	ee25 4a84 	vmul.f32	s8, s11, s8
 8004770:	ee65 5aa4 	vmul.f32	s11, s11, s9
 8004774:	f842 bb08 	str.w	fp, [r2], #8
 8004778:	ee75 5a8a 	vadd.f32	s11, s11, s20
 800477c:	ee3b 4ac4 	vsub.f32	s8, s23, s8
 8004780:	ee7a aacb 	vsub.f32	s21, s21, s22
 8004784:	ee39 5a45 	vsub.f32	s10, s18, s10
 8004788:	ee77 7ae3 	vsub.f32	s15, s15, s7
 800478c:	ed42 aa01 	vstr	s21, [r2, #-4]
 8004790:	ed0c 4a01 	vstr	s8, [ip, #-4]
 8004794:	ed46 5a01 	vstr	s11, [r6, #-4]
 8004798:	edd7 5a00 	vldr	s11, [r7]
 800479c:	ee79 9ac6 	vsub.f32	s19, s19, s12
 80047a0:	ee75 1a61 	vsub.f32	s3, s10, s3
 80047a4:	ee77 7ac3 	vsub.f32	s15, s15, s6
 80047a8:	ed97 5a01 	vldr	s10, [r7, #4]
 80047ac:	ee37 7a42 	vsub.f32	s14, s14, s4
 80047b0:	ee79 4ae6 	vsub.f32	s9, s19, s13
 80047b4:	ee37 7a62 	vsub.f32	s14, s14, s5
 80047b8:	ee61 9ae5 	vnmul.f32	s19, s3, s11
 80047bc:	ee27 4a85 	vmul.f32	s8, s15, s10
 80047c0:	ee24 aaa5 	vmul.f32	s20, s9, s11
 80047c4:	ee27 9a05 	vmul.f32	s18, s14, s10
 80047c8:	ee64 4a85 	vmul.f32	s9, s9, s10
 80047cc:	ee27 7a25 	vmul.f32	s14, s14, s11
 80047d0:	ee39 4ac4 	vsub.f32	s8, s19, s8
 80047d4:	ee37 7a64 	vsub.f32	s14, s14, s9
 80047d8:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80047dc:	ee61 1a85 	vmul.f32	s3, s3, s10
 80047e0:	ee14 ba10 	vmov	fp, s8
 80047e4:	ee3a 9a09 	vadd.f32	s18, s20, s18
 80047e8:	ee71 1ae5 	vsub.f32	s3, s3, s11
 80047ec:	ed00 9a02 	vstr	s18, [r0, #-8]
 80047f0:	ed00 7a01 	vstr	s14, [r0, #-4]
 80047f4:	f845 b908 	str.w	fp, [r5], #-8
 80047f8:	ee38 6a06 	vadd.f32	s12, s16, s12
 80047fc:	ee38 2ac2 	vsub.f32	s4, s17, s4
 8004800:	edc5 1a01 	vstr	s3, [r5, #4]
 8004804:	edde 7a00 	vldr	s15, [lr]
 8004808:	ed9e 7a01 	vldr	s14, [lr, #4]
 800480c:	9500      	str	r5, [sp, #0]
 800480e:	ee72 2a82 	vadd.f32	s5, s5, s4
 8004812:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004816:	ee73 3a63 	vsub.f32	s7, s6, s7
 800481a:	ee22 5aa7 	vmul.f32	s10, s5, s15
 800481e:	ee73 3ac0 	vsub.f32	s7, s7, s0
 8004822:	ee26 6a87 	vmul.f32	s12, s13, s14
 8004826:	ee70 5ac1 	vsub.f32	s11, s1, s2
 800482a:	ee63 4a87 	vmul.f32	s9, s7, s14
 800482e:	ee35 6a06 	vadd.f32	s12, s10, s12
 8004832:	ee25 5aa7 	vmul.f32	s10, s11, s15
 8004836:	ee62 2a87 	vmul.f32	s5, s5, s14
 800483a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800483e:	ee16 5a10 	vmov	r5, s12
 8004842:	ee34 5ac5 	vsub.f32	s10, s9, s10
 8004846:	f841 5b08 	str.w	r5, [r1], #8
 800484a:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800484e:	ee25 7a87 	vmul.f32	s14, s11, s14
 8004852:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8004856:	ee15 ba10 	vmov	fp, s10
 800485a:	9d01      	ldr	r5, [sp, #4]
 800485c:	ed41 6a01 	vstr	s13, [r1, #-4]
 8004860:	ee77 3a27 	vadd.f32	s7, s14, s15
 8004864:	f843 b908 	str.w	fp, [r3], #-8
 8004868:	3d01      	subs	r5, #1
 800486a:	f104 0408 	add.w	r4, r4, #8
 800486e:	f1a8 0808 	sub.w	r8, r8, #8
 8004872:	f1a9 0908 	sub.w	r9, r9, #8
 8004876:	f10a 0a08 	add.w	sl, sl, #8
 800487a:	f1ac 0c08 	sub.w	ip, ip, #8
 800487e:	f1a6 0608 	sub.w	r6, r6, #8
 8004882:	f107 0710 	add.w	r7, r7, #16
 8004886:	f100 0008 	add.w	r0, r0, #8
 800488a:	f10e 0e18 	add.w	lr, lr, #24
 800488e:	edc3 3a01 	vstr	s7, [r3, #4]
 8004892:	9501      	str	r5, [sp, #4]
 8004894:	f47f aef5 	bne.w	8004682 <arm_cfft_radix8by4_f32+0x14a>
 8004898:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 800489c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800489e:	9906      	ldr	r1, [sp, #24]
 80048a0:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80048a2:	9d02      	ldr	r5, [sp, #8]
 80048a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048a8:	eb00 100b 	add.w	r0, r0, fp, lsl #4
 80048ac:	4419      	add	r1, r3
 80048ae:	eb0b 024b 	add.w	r2, fp, fp, lsl #1
 80048b2:	900b      	str	r0, [sp, #44]	; 0x2c
 80048b4:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80048b8:	9803      	ldr	r0, [sp, #12]
 80048ba:	9106      	str	r1, [sp, #24]
 80048bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80048be:	441c      	add	r4, r3
 80048c0:	441d      	add	r5, r3
 80048c2:	449b      	add	fp, r3
 80048c4:	4418      	add	r0, r3
 80048c6:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80048ca:	940e      	str	r4, [sp, #56]	; 0x38
 80048cc:	9502      	str	r5, [sp, #8]
 80048ce:	f8cd b01c 	str.w	fp, [sp, #28]
 80048d2:	9003      	str	r0, [sp, #12]
 80048d4:	910c      	str	r1, [sp, #48]	; 0x30
 80048d6:	9a06      	ldr	r2, [sp, #24]
 80048d8:	9b07      	ldr	r3, [sp, #28]
 80048da:	ed92 3a00 	vldr	s6, [r2]
 80048de:	edd3 5a00 	vldr	s11, [r3]
 80048e2:	9c02      	ldr	r4, [sp, #8]
 80048e4:	9d03      	ldr	r5, [sp, #12]
 80048e6:	ed94 7a00 	vldr	s14, [r4]
 80048ea:	edd5 7a00 	vldr	s15, [r5]
 80048ee:	edd2 4a01 	vldr	s9, [r2, #4]
 80048f2:	ed93 5a01 	vldr	s10, [r3, #4]
 80048f6:	ed94 6a01 	vldr	s12, [r4, #4]
 80048fa:	edd5 6a01 	vldr	s13, [r5, #4]
 80048fe:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8004902:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004904:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004906:	ee33 4a25 	vadd.f32	s8, s6, s11
 800490a:	ee73 5a65 	vsub.f32	s11, s6, s11
 800490e:	ee74 2a07 	vadd.f32	s5, s8, s14
 8004912:	ee74 3a85 	vadd.f32	s7, s9, s10
 8004916:	ee37 3aa2 	vadd.f32	s6, s15, s5
 800491a:	ee34 5ac5 	vsub.f32	s10, s9, s10
 800491e:	ed82 3a00 	vstr	s6, [r2]
 8004922:	edd4 4a01 	vldr	s9, [r4, #4]
 8004926:	ed95 3a01 	vldr	s6, [r5, #4]
 800492a:	ee73 4aa4 	vadd.f32	s9, s7, s9
 800492e:	ee36 2a25 	vadd.f32	s4, s12, s11
 8004932:	ee74 4a83 	vadd.f32	s9, s9, s6
 8004936:	ee35 3a47 	vsub.f32	s6, s10, s14
 800493a:	edc2 4a01 	vstr	s9, [r2, #4]
 800493e:	eddb 4a00 	vldr	s9, [fp]
 8004942:	eddb 2a01 	vldr	s5, [fp, #4]
 8004946:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004948:	ee33 3a27 	vadd.f32	s6, s6, s15
 800494c:	ee32 2a66 	vsub.f32	s4, s4, s13
 8004950:	ee34 4a47 	vsub.f32	s8, s8, s14
 8004954:	ee62 1a24 	vmul.f32	s3, s4, s9
 8004958:	ee22 2a22 	vmul.f32	s4, s4, s5
 800495c:	ee63 4a24 	vmul.f32	s9, s6, s9
 8004960:	ee63 2a22 	vmul.f32	s5, s6, s5
 8004964:	ee74 4ac2 	vsub.f32	s9, s9, s4
 8004968:	ee71 2aa2 	vadd.f32	s5, s3, s5
 800496c:	ee73 3ac6 	vsub.f32	s7, s7, s12
 8004970:	edc4 2a00 	vstr	s5, [r4]
 8004974:	edc4 4a01 	vstr	s9, [r4, #4]
 8004978:	ed90 3a00 	vldr	s6, [r0]
 800497c:	edd0 4a01 	vldr	s9, [r0, #4]
 8004980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004982:	ee34 4a67 	vsub.f32	s8, s8, s15
 8004986:	ee73 3ae6 	vsub.f32	s7, s7, s13
 800498a:	ee64 2a03 	vmul.f32	s5, s8, s6
 800498e:	ee23 3a83 	vmul.f32	s6, s7, s6
 8004992:	ee63 3aa4 	vmul.f32	s7, s7, s9
 8004996:	ee64 4a24 	vmul.f32	s9, s8, s9
 800499a:	ee72 3aa3 	vadd.f32	s7, s5, s7
 800499e:	ee73 4a64 	vsub.f32	s9, s6, s9
 80049a2:	ee35 7a07 	vadd.f32	s14, s10, s14
 80049a6:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80049aa:	edc3 3a00 	vstr	s7, [r3]
 80049ae:	edc3 4a01 	vstr	s9, [r3, #4]
 80049b2:	edd1 5a01 	vldr	s11, [r1, #4]
 80049b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049ba:	ee76 6a86 	vadd.f32	s13, s13, s12
 80049be:	ed91 7a00 	vldr	s14, [r1]
 80049c2:	ee26 6a87 	vmul.f32	s12, s13, s14
 80049c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80049ca:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80049ce:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80049d2:	ee77 6a66 	vsub.f32	s13, s14, s13
 80049d6:	ee76 7a27 	vadd.f32	s15, s12, s15
 80049da:	edc5 6a01 	vstr	s13, [r5, #4]
 80049de:	edc5 7a00 	vstr	s15, [r5]
 80049e2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80049e4:	b294      	uxth	r4, r2
 80049e6:	4621      	mov	r1, r4
 80049e8:	686a      	ldr	r2, [r5, #4]
 80049ea:	2304      	movs	r3, #4
 80049ec:	f000 f9c6 	bl	8004d7c <arm_radix8_butterfly_f32>
 80049f0:	9804      	ldr	r0, [sp, #16]
 80049f2:	686a      	ldr	r2, [r5, #4]
 80049f4:	4621      	mov	r1, r4
 80049f6:	2304      	movs	r3, #4
 80049f8:	f000 f9c0 	bl	8004d7c <arm_radix8_butterfly_f32>
 80049fc:	9805      	ldr	r0, [sp, #20]
 80049fe:	686a      	ldr	r2, [r5, #4]
 8004a00:	4621      	mov	r1, r4
 8004a02:	2304      	movs	r3, #4
 8004a04:	f000 f9ba 	bl	8004d7c <arm_radix8_butterfly_f32>
 8004a08:	9808      	ldr	r0, [sp, #32]
 8004a0a:	686a      	ldr	r2, [r5, #4]
 8004a0c:	4621      	mov	r1, r4
 8004a0e:	2304      	movs	r3, #4
 8004a10:	b011      	add	sp, #68	; 0x44
 8004a12:	ecbd 8b0a 	vpop	{d8-d12}
 8004a16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a1a:	f000 b9af 	b.w	8004d7c <arm_radix8_butterfly_f32>
 8004a1e:	bf00      	nop

08004a20 <arm_cfft_f32>:
 8004a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a24:	2a01      	cmp	r2, #1
 8004a26:	4607      	mov	r7, r0
 8004a28:	4690      	mov	r8, r2
 8004a2a:	4689      	mov	r9, r1
 8004a2c:	469a      	mov	sl, r3
 8004a2e:	8804      	ldrh	r4, [r0, #0]
 8004a30:	d05a      	beq.n	8004ae8 <arm_cfft_f32+0xc8>
 8004a32:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8004a36:	d052      	beq.n	8004ade <arm_cfft_f32+0xbe>
 8004a38:	d917      	bls.n	8004a6a <arm_cfft_f32+0x4a>
 8004a3a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004a3e:	d01b      	beq.n	8004a78 <arm_cfft_f32+0x58>
 8004a40:	d962      	bls.n	8004b08 <arm_cfft_f32+0xe8>
 8004a42:	f5b4 6f00 	cmp.w	r4, #2048	; 0x800
 8004a46:	d04a      	beq.n	8004ade <arm_cfft_f32+0xbe>
 8004a48:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8004a4c:	d105      	bne.n	8004a5a <arm_cfft_f32+0x3a>
 8004a4e:	4648      	mov	r0, r9
 8004a50:	4621      	mov	r1, r4
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	2301      	movs	r3, #1
 8004a56:	f000 f991 	bl	8004d7c <arm_radix8_butterfly_f32>
 8004a5a:	f1ba 0f00 	cmp.w	sl, #0
 8004a5e:	d112      	bne.n	8004a86 <arm_cfft_f32+0x66>
 8004a60:	f1b8 0f01 	cmp.w	r8, #1
 8004a64:	d017      	beq.n	8004a96 <arm_cfft_f32+0x76>
 8004a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a6a:	2c20      	cmp	r4, #32
 8004a6c:	d037      	beq.n	8004ade <arm_cfft_f32+0xbe>
 8004a6e:	d94f      	bls.n	8004b10 <arm_cfft_f32+0xf0>
 8004a70:	2c40      	cmp	r4, #64	; 0x40
 8004a72:	d0ec      	beq.n	8004a4e <arm_cfft_f32+0x2e>
 8004a74:	2c80      	cmp	r4, #128	; 0x80
 8004a76:	d1f0      	bne.n	8004a5a <arm_cfft_f32+0x3a>
 8004a78:	4638      	mov	r0, r7
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	f7ff fc7a 	bl	8004374 <arm_cfft_radix8by2_f32>
 8004a80:	f1ba 0f00 	cmp.w	sl, #0
 8004a84:	d0ec      	beq.n	8004a60 <arm_cfft_f32+0x40>
 8004a86:	4648      	mov	r0, r9
 8004a88:	89b9      	ldrh	r1, [r7, #12]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	f7fb fba0 	bl	80001d0 <arm_bitreversal_32>
 8004a90:	f1b8 0f01 	cmp.w	r8, #1
 8004a94:	d1e7      	bne.n	8004a66 <arm_cfft_f32+0x46>
 8004a96:	ee07 4a10 	vmov	s14, r4
 8004a9a:	eef8 7a47 	vcvt.f32.u32	s15, s14
 8004a9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aa2:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8004aa6:	2c00      	cmp	r4, #0
 8004aa8:	d0dd      	beq.n	8004a66 <arm_cfft_f32+0x46>
 8004aaa:	f109 0308 	add.w	r3, r9, #8
 8004aae:	f109 0104 	add.w	r1, r9, #4
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	3201      	adds	r2, #1
 8004ab6:	4294      	cmp	r4, r2
 8004ab8:	f103 0308 	add.w	r3, r3, #8
 8004abc:	ed13 7a04 	vldr	s14, [r3, #-16]
 8004ac0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ac4:	ed03 7a04 	vstr	s14, [r3, #-16]
 8004ac8:	ed91 7a00 	vldr	s14, [r1]
 8004acc:	ee27 7a67 	vnmul.f32	s14, s14, s15
 8004ad0:	ee17 0a10 	vmov	r0, s14
 8004ad4:	f841 0b08 	str.w	r0, [r1], #8
 8004ad8:	d8ec      	bhi.n	8004ab4 <arm_cfft_f32+0x94>
 8004ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ade:	4638      	mov	r0, r7
 8004ae0:	4649      	mov	r1, r9
 8004ae2:	f7ff fd29 	bl	8004538 <arm_cfft_radix8by4_f32>
 8004ae6:	e7b8      	b.n	8004a5a <arm_cfft_f32+0x3a>
 8004ae8:	b1ac      	cbz	r4, 8004b16 <arm_cfft_f32+0xf6>
 8004aea:	f101 050c 	add.w	r5, r1, #12
 8004aee:	2600      	movs	r6, #0
 8004af0:	ed55 7a02 	vldr	s15, [r5, #-8]
 8004af4:	3601      	adds	r6, #1
 8004af6:	eef1 7a67 	vneg.f32	s15, s15
 8004afa:	42b4      	cmp	r4, r6
 8004afc:	ed45 7a02 	vstr	s15, [r5, #-8]
 8004b00:	f105 0508 	add.w	r5, r5, #8
 8004b04:	d8f4      	bhi.n	8004af0 <arm_cfft_f32+0xd0>
 8004b06:	e794      	b.n	8004a32 <arm_cfft_f32+0x12>
 8004b08:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 8004b0c:	d09f      	beq.n	8004a4e <arm_cfft_f32+0x2e>
 8004b0e:	e7a4      	b.n	8004a5a <arm_cfft_f32+0x3a>
 8004b10:	2c10      	cmp	r4, #16
 8004b12:	d0b1      	beq.n	8004a78 <arm_cfft_f32+0x58>
 8004b14:	e7a1      	b.n	8004a5a <arm_cfft_f32+0x3a>
 8004b16:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8004b1a:	d88e      	bhi.n	8004a3a <arm_cfft_f32+0x1a>
 8004b1c:	e7a5      	b.n	8004a6a <arm_cfft_f32+0x4a>
 8004b1e:	bf00      	nop

08004b20 <arm_cmplx_mag_f32>:
 8004b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b24:	ea5f 0992 	movs.w	r9, r2, lsr #2
 8004b28:	b085      	sub	sp, #20
 8004b2a:	f000 8086 	beq.w	8004c3a <arm_cmplx_mag_f32+0x11a>
 8004b2e:	f04f 0800 	mov.w	r8, #0
 8004b32:	f101 0710 	add.w	r7, r1, #16
 8004b36:	4604      	mov	r4, r0
 8004b38:	f101 050c 	add.w	r5, r1, #12
 8004b3c:	464e      	mov	r6, r9
 8004b3e:	e05c      	b.n	8004bfa <arm_cmplx_mag_f32+0xda>
 8004b40:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004b44:	eeb4 0a40 	vcmp.f32	s0, s0
 8004b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4c:	f040 80a7 	bne.w	8004c9e <arm_cmplx_mag_f32+0x17e>
 8004b50:	ed07 0a04 	vstr	s0, [r7, #-16]
 8004b54:	ed94 7a02 	vldr	s14, [r4, #8]
 8004b58:	edd4 7a03 	vldr	s15, [r4, #12]
 8004b5c:	ee27 7a07 	vmul.f32	s14, s14, s14
 8004b60:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b70:	f340 8092 	ble.w	8004c98 <arm_cmplx_mag_f32+0x178>
 8004b74:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004b78:	eeb4 0a40 	vcmp.f32	s0, s0
 8004b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b80:	f040 80b5 	bne.w	8004cee <arm_cmplx_mag_f32+0x1ce>
 8004b84:	ed05 0a02 	vstr	s0, [r5, #-8]
 8004b88:	ed94 7a04 	vldr	s14, [r4, #16]
 8004b8c:	edd4 7a05 	vldr	s15, [r4, #20]
 8004b90:	ee27 7a07 	vmul.f32	s14, s14, s14
 8004b94:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba4:	dd75      	ble.n	8004c92 <arm_cmplx_mag_f32+0x172>
 8004ba6:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004baa:	eeb4 0a40 	vcmp.f32	s0, s0
 8004bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb2:	f040 8091 	bne.w	8004cd8 <arm_cmplx_mag_f32+0x1b8>
 8004bb6:	ed05 0a01 	vstr	s0, [r5, #-4]
 8004bba:	ed94 7a06 	vldr	s14, [r4, #24]
 8004bbe:	edd4 7a07 	vldr	s15, [r4, #28]
 8004bc2:	ee27 7a07 	vmul.f32	s14, s14, s14
 8004bc6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd6:	dd22      	ble.n	8004c1e <arm_cmplx_mag_f32+0xfe>
 8004bd8:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004bdc:	eeb4 0a40 	vcmp.f32	s0, s0
 8004be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be4:	d16d      	bne.n	8004cc2 <arm_cmplx_mag_f32+0x1a2>
 8004be6:	3e01      	subs	r6, #1
 8004be8:	ed85 0a00 	vstr	s0, [r5]
 8004bec:	f107 0710 	add.w	r7, r7, #16
 8004bf0:	f104 0420 	add.w	r4, r4, #32
 8004bf4:	f105 0510 	add.w	r5, r5, #16
 8004bf8:	d01b      	beq.n	8004c32 <arm_cmplx_mag_f32+0x112>
 8004bfa:	ed94 7a00 	vldr	s14, [r4]
 8004bfe:	edd4 7a01 	vldr	s15, [r4, #4]
 8004c02:	ee27 7a07 	vmul.f32	s14, s14, s14
 8004c06:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c16:	dc93      	bgt.n	8004b40 <arm_cmplx_mag_f32+0x20>
 8004c18:	f847 8c10 	str.w	r8, [r7, #-16]
 8004c1c:	e79a      	b.n	8004b54 <arm_cmplx_mag_f32+0x34>
 8004c1e:	3e01      	subs	r6, #1
 8004c20:	f8c5 8000 	str.w	r8, [r5]
 8004c24:	f107 0710 	add.w	r7, r7, #16
 8004c28:	f104 0420 	add.w	r4, r4, #32
 8004c2c:	f105 0510 	add.w	r5, r5, #16
 8004c30:	d1e3      	bne.n	8004bfa <arm_cmplx_mag_f32+0xda>
 8004c32:	eb00 1049 	add.w	r0, r0, r9, lsl #5
 8004c36:	eb01 1109 	add.w	r1, r1, r9, lsl #4
 8004c3a:	f012 0503 	ands.w	r5, r2, #3
 8004c3e:	d025      	beq.n	8004c8c <arm_cmplx_mag_f32+0x16c>
 8004c40:	2600      	movs	r6, #0
 8004c42:	4604      	mov	r4, r0
 8004c44:	e00c      	b.n	8004c60 <arm_cmplx_mag_f32+0x140>
 8004c46:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8004c4a:	eeb4 0a40 	vcmp.f32	s0, s0
 8004c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c52:	d12f      	bne.n	8004cb4 <arm_cmplx_mag_f32+0x194>
 8004c54:	3d01      	subs	r5, #1
 8004c56:	ed01 0a01 	vstr	s0, [r1, #-4]
 8004c5a:	f104 0408 	add.w	r4, r4, #8
 8004c5e:	d015      	beq.n	8004c8c <arm_cmplx_mag_f32+0x16c>
 8004c60:	ed94 7a00 	vldr	s14, [r4]
 8004c64:	edd4 7a01 	vldr	s15, [r4, #4]
 8004c68:	ee27 7a07 	vmul.f32	s14, s14, s14
 8004c6c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004c70:	3104      	adds	r1, #4
 8004c72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c7e:	dce2      	bgt.n	8004c46 <arm_cmplx_mag_f32+0x126>
 8004c80:	3d01      	subs	r5, #1
 8004c82:	f841 6c04 	str.w	r6, [r1, #-4]
 8004c86:	f104 0408 	add.w	r4, r4, #8
 8004c8a:	d1e9      	bne.n	8004c60 <arm_cmplx_mag_f32+0x140>
 8004c8c:	b005      	add	sp, #20
 8004c8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c92:	f845 8c04 	str.w	r8, [r5, #-4]
 8004c96:	e790      	b.n	8004bba <arm_cmplx_mag_f32+0x9a>
 8004c98:	f845 8c08 	str.w	r8, [r5, #-8]
 8004c9c:	e774      	b.n	8004b88 <arm_cmplx_mag_f32+0x68>
 8004c9e:	eeb0 0a67 	vmov.f32	s0, s15
 8004ca2:	9003      	str	r0, [sp, #12]
 8004ca4:	9101      	str	r1, [sp, #4]
 8004ca6:	9202      	str	r2, [sp, #8]
 8004ca8:	f004 ffd4 	bl	8009c54 <sqrtf>
 8004cac:	9a02      	ldr	r2, [sp, #8]
 8004cae:	9901      	ldr	r1, [sp, #4]
 8004cb0:	9803      	ldr	r0, [sp, #12]
 8004cb2:	e74d      	b.n	8004b50 <arm_cmplx_mag_f32+0x30>
 8004cb4:	eeb0 0a67 	vmov.f32	s0, s15
 8004cb8:	9101      	str	r1, [sp, #4]
 8004cba:	f004 ffcb 	bl	8009c54 <sqrtf>
 8004cbe:	9901      	ldr	r1, [sp, #4]
 8004cc0:	e7c8      	b.n	8004c54 <arm_cmplx_mag_f32+0x134>
 8004cc2:	eeb0 0a67 	vmov.f32	s0, s15
 8004cc6:	9003      	str	r0, [sp, #12]
 8004cc8:	9101      	str	r1, [sp, #4]
 8004cca:	9202      	str	r2, [sp, #8]
 8004ccc:	f004 ffc2 	bl	8009c54 <sqrtf>
 8004cd0:	9a02      	ldr	r2, [sp, #8]
 8004cd2:	9901      	ldr	r1, [sp, #4]
 8004cd4:	9803      	ldr	r0, [sp, #12]
 8004cd6:	e786      	b.n	8004be6 <arm_cmplx_mag_f32+0xc6>
 8004cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8004cdc:	9003      	str	r0, [sp, #12]
 8004cde:	9101      	str	r1, [sp, #4]
 8004ce0:	9202      	str	r2, [sp, #8]
 8004ce2:	f004 ffb7 	bl	8009c54 <sqrtf>
 8004ce6:	9a02      	ldr	r2, [sp, #8]
 8004ce8:	9901      	ldr	r1, [sp, #4]
 8004cea:	9803      	ldr	r0, [sp, #12]
 8004cec:	e763      	b.n	8004bb6 <arm_cmplx_mag_f32+0x96>
 8004cee:	eeb0 0a67 	vmov.f32	s0, s15
 8004cf2:	9003      	str	r0, [sp, #12]
 8004cf4:	9101      	str	r1, [sp, #4]
 8004cf6:	9202      	str	r2, [sp, #8]
 8004cf8:	f004 ffac 	bl	8009c54 <sqrtf>
 8004cfc:	9a02      	ldr	r2, [sp, #8]
 8004cfe:	9901      	ldr	r1, [sp, #4]
 8004d00:	9803      	ldr	r0, [sp, #12]
 8004d02:	e73f      	b.n	8004b84 <arm_cmplx_mag_f32+0x64>

08004d04 <arm_sin_f32>:
 8004d04:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8004d70 <arm_sin_f32+0x6c>
 8004d08:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004d0c:	ee20 7a07 	vmul.f32	s14, s0, s14
 8004d10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d14:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8004d18:	d504      	bpl.n	8004d24 <arm_sin_f32+0x20>
 8004d1a:	ee17 3a90 	vmov	r3, s15
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	ee07 3a90 	vmov	s15, r3
 8004d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d28:	eddf 6a12 	vldr	s13, [pc, #72]	; 8004d74 <arm_sin_f32+0x70>
 8004d2c:	4a12      	ldr	r2, [pc, #72]	; (8004d78 <arm_sin_f32+0x74>)
 8004d2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d32:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004d36:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004d3a:	eefc 6ae7 	vcvt.u32.f32	s13, s15
 8004d3e:	ee16 3a90 	vmov	r3, s13
 8004d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d46:	ee06 3a90 	vmov	s13, r3
 8004d4a:	eeb8 7a66 	vcvt.f32.u32	s14, s13
 8004d4e:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8004d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004d56:	edd1 6a00 	vldr	s13, [r1]
 8004d5a:	ed91 7a01 	vldr	s14, [r1, #4]
 8004d5e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004d66:	ee20 0a26 	vmul.f32	s0, s0, s13
 8004d6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8004d6e:	4770      	bx	lr
 8004d70:	3e22f983 	.word	0x3e22f983
 8004d74:	44000000 	.word	0x44000000
 8004d78:	080176ec 	.word	0x080176ec

08004d7c <arm_radix8_butterfly_f32>:
 8004d7c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d80:	ed2d 8b10 	vpush	{d8-d15}
 8004d84:	b09c      	sub	sp, #112	; 0x70
 8004d86:	eddf aacb 	vldr	s21, [pc, #812]	; 80050b4 <arm_radix8_butterfly_f32+0x338>
 8004d8a:	9019      	str	r0, [sp, #100]	; 0x64
 8004d8c:	3004      	adds	r0, #4
 8004d8e:	921a      	str	r2, [sp, #104]	; 0x68
 8004d90:	9306      	str	r3, [sp, #24]
 8004d92:	468a      	mov	sl, r1
 8004d94:	901b      	str	r0, [sp, #108]	; 0x6c
 8004d96:	4688      	mov	r8, r1
 8004d98:	ea4f 01da 	mov.w	r1, sl, lsr #3
 8004d9c:	00cb      	lsls	r3, r1, #3
 8004d9e:	004a      	lsls	r2, r1, #1
 8004da0:	9111      	str	r1, [sp, #68]	; 0x44
 8004da2:	9307      	str	r3, [sp, #28]
 8004da4:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004da6:	9e07      	ldr	r6, [sp, #28]
 8004da8:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8004daa:	9208      	str	r2, [sp, #32]
 8004dac:	440a      	add	r2, r1
 8004dae:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 8004db2:	462b      	mov	r3, r5
 8004db4:	0112      	lsls	r2, r2, #4
 8004db6:	4433      	add	r3, r6
 8004db8:	9203      	str	r2, [sp, #12]
 8004dba:	4631      	mov	r1, r6
 8004dbc:	ea4f 1907 	mov.w	r9, r7, lsl #4
 8004dc0:	f04f 0c00 	mov.w	ip, #0
 8004dc4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004dc6:	f8cd c004 	str.w	ip, [sp, #4]
 8004dca:	3004      	adds	r0, #4
 8004dcc:	4419      	add	r1, r3
 8004dce:	017c      	lsls	r4, r7, #5
 8004dd0:	ea4f 0bca 	mov.w	fp, sl, lsl #3
 8004dd4:	f8cd a010 	str.w	sl, [sp, #16]
 8004dd8:	f8cd 9008 	str.w	r9, [sp, #8]
 8004ddc:	f8cd 8014 	str.w	r8, [sp, #20]
 8004de0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004de4:	9e03      	ldr	r6, [sp, #12]
 8004de6:	ed93 aa00 	vldr	s20, [r3]
 8004dea:	ed50 0a01 	vldr	s1, [r0, #-4]
 8004dee:	ed12 5a01 	vldr	s10, [r2, #-4]
 8004df2:	edd1 7a00 	vldr	s15, [r1]
 8004df6:	9f01      	ldr	r7, [sp, #4]
 8004df8:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004dfc:	4488      	add	r8, r1
 8004dfe:	191d      	adds	r5, r3, r4
 8004e00:	441e      	add	r6, r3
 8004e02:	eb01 0904 	add.w	r9, r1, r4
 8004e06:	edd8 9a00 	vldr	s19, [r8]
 8004e0a:	ed95 6a00 	vldr	s12, [r5]
 8004e0e:	edd6 6a00 	vldr	s13, [r6]
 8004e12:	ed99 9a00 	vldr	s18, [r9]
 8004e16:	950a      	str	r5, [sp, #40]	; 0x28
 8004e18:	ee35 0a29 	vadd.f32	s0, s10, s19
 8004e1c:	ee7a 1a06 	vadd.f32	s3, s20, s12
 8004e20:	ee37 2a89 	vadd.f32	s4, s15, s18
 8004e24:	ee70 3aa6 	vadd.f32	s7, s1, s13
 8004e28:	ee70 5a02 	vadd.f32	s11, s0, s4
 8004e2c:	ee31 7aa3 	vadd.f32	s14, s3, s7
 8004e30:	9d02      	ldr	r5, [sp, #8]
 8004e32:	9609      	str	r6, [sp, #36]	; 0x24
 8004e34:	ee75 4a87 	vadd.f32	s9, s11, s14
 8004e38:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8004e3c:	ed42 4a01 	vstr	s9, [r2, #-4]
 8004e40:	4405      	add	r5, r0
 8004e42:	ed88 7a00 	vstr	s14, [r8]
 8004e46:	1906      	adds	r6, r0, r4
 8004e48:	edd3 8a01 	vldr	s17, [r3, #4]
 8004e4c:	ed96 3a00 	vldr	s6, [r6]
 8004e50:	edd5 2a00 	vldr	s5, [r5]
 8004e54:	ed90 1a00 	vldr	s2, [r0]
 8004e58:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8004e5c:	ed92 7a00 	vldr	s14, [r2]
 8004e60:	edd1 5a01 	vldr	s11, [r1, #4]
 8004e64:	ee3a aa46 	vsub.f32	s20, s20, s12
 8004e68:	ee70 0ae6 	vsub.f32	s1, s1, s13
 8004e6c:	ee38 6ae2 	vsub.f32	s12, s17, s5
 8004e70:	ee71 6a43 	vsub.f32	s13, s2, s6
 8004e74:	eb02 0a04 	add.w	sl, r2, r4
 8004e78:	4490      	add	r8, r2
 8004e7a:	edda 4a00 	vldr	s9, [sl]
 8004e7e:	ed98 8a00 	vldr	s16, [r8]
 8004e82:	ee36 4a26 	vadd.f32	s8, s12, s13
 8004e86:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004e8a:	ee3a 6a60 	vsub.f32	s12, s20, s1
 8004e8e:	ee31 1a03 	vadd.f32	s2, s2, s6
 8004e92:	ee35 5a69 	vsub.f32	s10, s10, s19
 8004e96:	ee37 3a24 	vadd.f32	s6, s14, s9
 8004e9a:	ee78 2aa2 	vadd.f32	s5, s17, s5
 8004e9e:	ee37 7a64 	vsub.f32	s14, s14, s9
 8004ea2:	ee24 4a2a 	vmul.f32	s8, s8, s21
 8004ea6:	ee75 4a88 	vadd.f32	s9, s11, s16
 8004eaa:	ee26 6a2a 	vmul.f32	s12, s12, s21
 8004eae:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8004eb2:	ee7a 0a20 	vadd.f32	s1, s20, s1
 8004eb6:	ee77 7ac9 	vsub.f32	s15, s15, s18
 8004eba:	ee66 6aaa 	vmul.f32	s13, s13, s21
 8004ebe:	ee60 0aaa 	vmul.f32	s1, s1, s21
 8004ec2:	ee30 2a42 	vsub.f32	s4, s0, s4
 8004ec6:	ee71 3ae3 	vsub.f32	s7, s3, s7
 8004eca:	ee72 1a81 	vadd.f32	s3, s5, s2
 8004ece:	ee72 2ac1 	vsub.f32	s5, s5, s2
 8004ed2:	ee33 1a24 	vadd.f32	s2, s6, s9
 8004ed6:	ee33 3a64 	vsub.f32	s6, s6, s9
 8004eda:	ee75 4a84 	vadd.f32	s9, s11, s8
 8004ede:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8004ee2:	ee35 4a06 	vadd.f32	s8, s10, s12
 8004ee6:	ee31 aa21 	vadd.f32	s20, s2, s3
 8004eea:	ee35 5a46 	vsub.f32	s10, s10, s12
 8004eee:	ee72 9a22 	vadd.f32	s19, s4, s5
 8004ef2:	ee37 6a26 	vadd.f32	s12, s14, s13
 8004ef6:	ee33 9a63 	vsub.f32	s18, s6, s7
 8004efa:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004efe:	ee74 8a24 	vadd.f32	s17, s8, s9
 8004f02:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8004f06:	ee71 1a61 	vsub.f32	s3, s2, s3
 8004f0a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8004f0e:	ee72 2a62 	vsub.f32	s5, s4, s5
 8004f12:	ee73 3a23 	vadd.f32	s7, s6, s7
 8004f16:	4467      	add	r7, ip
 8004f18:	ed82 aa00 	vstr	s20, [r2]
 8004f1c:	ee35 8a25 	vadd.f32	s16, s10, s11
 8004f20:	edca 1a00 	vstr	s3, [sl]
 8004f24:	ee36 0a66 	vsub.f32	s0, s12, s13
 8004f28:	edc1 9a00 	vstr	s19, [r1]
 8004f2c:	ee77 0a67 	vsub.f32	s1, s14, s15
 8004f30:	edc9 2a00 	vstr	s5, [r9]
 8004f34:	9701      	str	r7, [sp, #4]
 8004f36:	ed81 9a01 	vstr	s18, [r1, #4]
 8004f3a:	ee74 4a64 	vsub.f32	s9, s8, s9
 8004f3e:	ee75 5a65 	vsub.f32	s11, s10, s11
 8004f42:	ee76 6a26 	vadd.f32	s13, s12, s13
 8004f46:	edc8 3a00 	vstr	s7, [r8]
 8004f4a:	edc3 8a00 	vstr	s17, [r3]
 8004f4e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004f50:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8004f54:	edc7 4a00 	vstr	s9, [r7]
 8004f58:	ed8c 8a00 	vstr	s16, [ip]
 8004f5c:	ed40 5a01 	vstr	s11, [r0, #-4]
 8004f60:	ed83 0a01 	vstr	s0, [r3, #4]
 8004f64:	edc6 6a00 	vstr	s13, [r6]
 8004f68:	edc5 0a00 	vstr	s1, [r5]
 8004f6c:	9e01      	ldr	r6, [sp, #4]
 8004f6e:	9d05      	ldr	r5, [sp, #20]
 8004f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004f74:	42b5      	cmp	r5, r6
 8004f76:	edc0 7a00 	vstr	s15, [r0]
 8004f7a:	445a      	add	r2, fp
 8004f7c:	4459      	add	r1, fp
 8004f7e:	445b      	add	r3, fp
 8004f80:	4458      	add	r0, fp
 8004f82:	f63f af2d 	bhi.w	8004de0 <arm_radix8_butterfly_f32+0x64>
 8004f86:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8004f88:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004f8c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004f90:	2f07      	cmp	r7, #7
 8004f92:	46a8      	mov	r8, r5
 8004f94:	f240 81e6 	bls.w	8005364 <arm_radix8_butterfly_f32+0x5e8>
 8004f98:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004f9c:	9808      	ldr	r0, [sp, #32]
 8004f9e:	9e07      	ldr	r6, [sp, #28]
 8004fa0:	eb0c 054c 	add.w	r5, ip, ip, lsl #1
 8004fa4:	4664      	mov	r4, ip
 8004fa6:	442c      	add	r4, r5
 8004fa8:	1c42      	adds	r2, r0, #1
 8004faa:	4660      	mov	r0, ip
 8004fac:	4420      	add	r0, r4
 8004fae:	4661      	mov	r1, ip
 8004fb0:	4401      	add	r1, r0
 8004fb2:	448c      	add	ip, r1
 8004fb4:	eb02 0247 	add.w	r2, r2, r7, lsl #1
 8004fb8:	463b      	mov	r3, r7
 8004fba:	00c0      	lsls	r0, r0, #3
 8004fbc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8004fc0:	4413      	add	r3, r2
 8004fc2:	9018      	str	r0, [sp, #96]	; 0x60
 8004fc4:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 8004fc8:	9806      	ldr	r0, [sp, #24]
 8004fca:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 8004fce:	441f      	add	r7, r3
 8004fd0:	360c      	adds	r6, #12
 8004fd2:	00c9      	lsls	r1, r1, #3
 8004fd4:	9117      	str	r1, [sp, #92]	; 0x5c
 8004fd6:	00ed      	lsls	r5, r5, #3
 8004fd8:	eb0c 02c2 	add.w	r2, ip, r2, lsl #3
 8004fdc:	eb0c 07c7 	add.w	r7, ip, r7, lsl #3
 8004fe0:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 8004fe4:	00c0      	lsls	r0, r0, #3
 8004fe6:	44b4      	add	ip, r6
 8004fe8:	9515      	str	r5, [sp, #84]	; 0x54
 8004fea:	9012      	str	r0, [sp, #72]	; 0x48
 8004fec:	9906      	ldr	r1, [sp, #24]
 8004fee:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8004ff0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004ff2:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8004ff6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8004ff8:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
 8004ffc:	4435      	add	r5, r6
 8004ffe:	4484      	add	ip, r0
 8005000:	0109      	lsls	r1, r1, #4
 8005002:	3204      	adds	r2, #4
 8005004:	3704      	adds	r7, #4
 8005006:	9113      	str	r1, [sp, #76]	; 0x4c
 8005008:	9509      	str	r5, [sp, #36]	; 0x24
 800500a:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 800500e:	920f      	str	r2, [sp, #60]	; 0x3c
 8005010:	970c      	str	r7, [sp, #48]	; 0x30
 8005012:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005014:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005016:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8005018:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800501a:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800501c:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
 8005020:	9812      	ldr	r0, [sp, #72]	; 0x48
 8005022:	00e4      	lsls	r4, r4, #3
 8005024:	4411      	add	r1, r2
 8005026:	3304      	adds	r3, #4
 8005028:	4425      	add	r5, r4
 800502a:	443e      	add	r6, r7
 800502c:	4484      	add	ip, r0
 800502e:	930d      	str	r3, [sp, #52]	; 0x34
 8005030:	910b      	str	r1, [sp, #44]	; 0x2c
 8005032:	9508      	str	r5, [sp, #32]
 8005034:	9414      	str	r4, [sp, #80]	; 0x50
 8005036:	9606      	str	r6, [sp, #24]
 8005038:	f8cd c014 	str.w	ip, [sp, #20]
 800503c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800503e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005040:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005042:	4411      	add	r1, r2
 8005044:	330c      	adds	r3, #12
 8005046:	2501      	movs	r5, #1
 8005048:	9107      	str	r1, [sp, #28]
 800504a:	9310      	str	r3, [sp, #64]	; 0x40
 800504c:	9504      	str	r5, [sp, #16]
 800504e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005050:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005054:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005058:	9808      	ldr	r0, [sp, #32]
 800505a:	9e05      	ldr	r6, [sp, #20]
 800505c:	9f07      	ldr	r7, [sp, #28]
 800505e:	ed91 1a01 	vldr	s2, [r1, #4]
 8005062:	ed92 4a01 	vldr	s8, [r2, #4]
 8005066:	edd3 7a01 	vldr	s15, [r3, #4]
 800506a:	eddc ea00 	vldr	s29, [ip]
 800506e:	ed90 ea00 	vldr	s28, [r0]
 8005072:	edd1 da00 	vldr	s27, [r1]
 8005076:	ed92 da00 	vldr	s26, [r2]
 800507a:	edd3 ca00 	vldr	s25, [r3]
 800507e:	ed9c ba01 	vldr	s22, [ip, #4]
 8005082:	ed90 aa01 	vldr	s20, [r0, #4]
 8005086:	edd6 fa00 	vldr	s31, [r6]
 800508a:	ed97 fa00 	vldr	s30, [r7]
 800508e:	ed96 ca01 	vldr	s24, [r6, #4]
 8005092:	edd7 ba01 	vldr	s23, [r7, #4]
 8005096:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8005098:	990d      	ldr	r1, [sp, #52]	; 0x34
 800509a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800509c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800509e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80050a0:	f8dd c010 	ldr.w	ip, [sp, #16]
 80050a4:	ed8d 1a01 	vstr	s2, [sp, #4]
 80050a8:	ed8d 4a02 	vstr	s8, [sp, #8]
 80050ac:	edcd 7a03 	vstr	s15, [sp, #12]
 80050b0:	e002      	b.n	80050b8 <arm_radix8_butterfly_f32+0x33c>
 80050b2:	bf00      	nop
 80050b4:	3f3504f3 	.word	0x3f3504f3
 80050b8:	eb03 0709 	add.w	r7, r3, r9
 80050bc:	eb02 0509 	add.w	r5, r2, r9
 80050c0:	eb01 0609 	add.w	r6, r1, r9
 80050c4:	ed53 0a01 	vldr	s1, [r3, #-4]
 80050c8:	ed51 4a01 	vldr	s9, [r1, #-4]
 80050cc:	ed17 0a01 	vldr	s0, [r7, #-4]
 80050d0:	ed14 6a01 	vldr	s12, [r4, #-4]
 80050d4:	ed50 6a01 	vldr	s13, [r0, #-4]
 80050d8:	ed55 1a01 	vldr	s3, [r5, #-4]
 80050dc:	ed16 4a01 	vldr	s8, [r6, #-4]
 80050e0:	ed12 1a01 	vldr	s2, [r2, #-4]
 80050e4:	ed93 3a00 	vldr	s6, [r3]
 80050e8:	ee30 2aa6 	vadd.f32	s4, s1, s13
 80050ec:	ee31 5a24 	vadd.f32	s10, s2, s9
 80050f0:	ee70 2a06 	vadd.f32	s5, s0, s12
 80050f4:	ee71 5a84 	vadd.f32	s11, s3, s8
 80050f8:	ee32 7a22 	vadd.f32	s14, s4, s5
 80050fc:	ee75 7a25 	vadd.f32	s15, s10, s11
 8005100:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8005104:	ee37 4a27 	vadd.f32	s8, s14, s15
 8005108:	ee31 1a64 	vsub.f32	s2, s2, s9
 800510c:	ed03 4a01 	vstr	s8, [r3, #-4]
 8005110:	edd2 9a00 	vldr	s19, [r2]
 8005114:	edd5 8a00 	vldr	s17, [r5]
 8005118:	ed91 9a00 	vldr	s18, [r1]
 800511c:	ed96 8a00 	vldr	s16, [r6]
 8005120:	edd0 3a00 	vldr	s7, [r0]
 8005124:	ed97 4a00 	vldr	s8, [r7]
 8005128:	edd4 4a00 	vldr	s9, [r4]
 800512c:	ee30 6a46 	vsub.f32	s12, s0, s12
 8005130:	ee70 6ae6 	vsub.f32	s13, s1, s13
 8005134:	ee39 0ac9 	vsub.f32	s0, s19, s18
 8005138:	ee78 0ac8 	vsub.f32	s1, s17, s16
 800513c:	ee39 9a89 	vadd.f32	s18, s19, s18
 8005140:	ee38 8a88 	vadd.f32	s16, s17, s16
 8005144:	ee71 9a21 	vadd.f32	s19, s2, s3
 8005148:	ee70 8a60 	vsub.f32	s17, s0, s1
 800514c:	ee71 1a61 	vsub.f32	s3, s2, s3
 8005150:	ee70 0a20 	vadd.f32	s1, s0, s1
 8005154:	ee33 1a23 	vadd.f32	s2, s6, s7
 8005158:	ee73 3a63 	vsub.f32	s7, s6, s7
 800515c:	ee34 3a24 	vadd.f32	s6, s8, s9
 8005160:	ee39 0a08 	vadd.f32	s0, s18, s16
 8005164:	ee74 4a64 	vsub.f32	s9, s8, s9
 8005168:	ee68 8aaa 	vmul.f32	s17, s17, s21
 800516c:	ee69 9aaa 	vmul.f32	s19, s19, s21
 8005170:	ee61 1aaa 	vmul.f32	s3, s3, s21
 8005174:	ee75 5a65 	vsub.f32	s11, s10, s11
 8005178:	ee60 0aaa 	vmul.f32	s1, s1, s21
 800517c:	ee31 5a03 	vadd.f32	s10, s2, s6
 8005180:	ee36 4aa1 	vadd.f32	s8, s13, s3
 8005184:	ee39 9a48 	vsub.f32	s18, s18, s16
 8005188:	ee31 1a43 	vsub.f32	s2, s2, s6
 800518c:	ee76 6ae1 	vsub.f32	s13, s13, s3
 8005190:	ee72 2a62 	vsub.f32	s5, s4, s5
 8005194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005198:	ee33 2aa8 	vadd.f32	s4, s7, s17
 800519c:	ee35 7a40 	vsub.f32	s14, s10, s0
 80051a0:	ee73 3ae8 	vsub.f32	s7, s7, s17
 80051a4:	ee76 8a29 	vadd.f32	s17, s12, s19
 80051a8:	ee36 6a69 	vsub.f32	s12, s12, s19
 80051ac:	ee74 9aa0 	vadd.f32	s19, s9, s1
 80051b0:	ee74 0ae0 	vsub.f32	s1, s9, s1
 80051b4:	ee72 1a89 	vadd.f32	s3, s5, s18
 80051b8:	ee31 8a65 	vsub.f32	s16, s2, s11
 80051bc:	ee72 4a68 	vsub.f32	s9, s4, s17
 80051c0:	ee36 3aa0 	vadd.f32	s6, s13, s1
 80051c4:	ee32 2a28 	vadd.f32	s4, s4, s17
 80051c8:	ee76 0ae0 	vsub.f32	s1, s13, s1
 80051cc:	ee74 8a29 	vadd.f32	s17, s8, s19
 80051d0:	ee73 6ac6 	vsub.f32	s13, s7, s12
 80051d4:	ee74 9a69 	vsub.f32	s19, s8, s19
 80051d8:	ee33 6a86 	vadd.f32	s12, s7, s12
 80051dc:	ee2a 4a07 	vmul.f32	s8, s20, s14
 80051e0:	ee6e 3a27 	vmul.f32	s7, s28, s15
 80051e4:	ee72 2ac9 	vsub.f32	s5, s5, s18
 80051e8:	ee71 5a25 	vadd.f32	s11, s2, s11
 80051ec:	ee6a 7a27 	vmul.f32	s15, s20, s15
 80051f0:	ed9d 1a02 	vldr	s2, [sp, #8]
 80051f4:	ee35 0a00 	vadd.f32	s0, s10, s0
 80051f8:	ee73 3a84 	vadd.f32	s7, s7, s8
 80051fc:	ee2f 5a21 	vmul.f32	s10, s30, s3
 8005200:	ee2b 4a88 	vmul.f32	s8, s23, s16
 8005204:	ee2e 7a07 	vmul.f32	s14, s28, s14
 8005208:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 800520c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005210:	ee35 5a04 	vadd.f32	s10, s10, s8
 8005214:	ee6d 7a22 	vmul.f32	s15, s26, s5
 8005218:	ee21 4a25 	vmul.f32	s8, s2, s11
 800521c:	ee2f 8a08 	vmul.f32	s16, s30, s16
 8005220:	ee61 2a22 	vmul.f32	s5, s2, s5
 8005224:	ee6d 5a25 	vmul.f32	s11, s26, s11
 8005228:	ee38 8a61 	vsub.f32	s16, s16, s3
 800522c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8005230:	ee6c 1a24 	vmul.f32	s3, s24, s9
 8005234:	ed9d 4a03 	vldr	s8, [sp, #12]
 8005238:	ed83 0a00 	vstr	s0, [r3]
 800523c:	ee2f 1aa8 	vmul.f32	s2, s31, s17
 8005240:	ee75 2ae2 	vsub.f32	s5, s11, s5
 8005244:	ee6c 8a28 	vmul.f32	s17, s24, s17
 8005248:	ee6c 5aa9 	vmul.f32	s11, s25, s19
 800524c:	ee31 1a21 	vadd.f32	s2, s2, s3
 8005250:	ee64 9a29 	vmul.f32	s19, s8, s19
 8005254:	ee64 1a02 	vmul.f32	s3, s8, s4
 8005258:	ee6f 4aa4 	vmul.f32	s9, s31, s9
 800525c:	ed9d 4a01 	vldr	s8, [sp, #4]
 8005260:	ed40 3a01 	vstr	s7, [r0, #-4]
 8005264:	ee2c 2a82 	vmul.f32	s4, s25, s4
 8005268:	ee74 4ae8 	vsub.f32	s9, s9, s17
 800526c:	ee2d 9a83 	vmul.f32	s18, s27, s6
 8005270:	ee64 8a26 	vmul.f32	s17, s8, s13
 8005274:	ee24 3a03 	vmul.f32	s6, s8, s6
 8005278:	ee72 9a69 	vsub.f32	s19, s4, s19
 800527c:	ee2b 4a06 	vmul.f32	s8, s22, s12
 8005280:	ee2e 2aa0 	vmul.f32	s4, s29, s1
 8005284:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8005288:	ee6b 0a20 	vmul.f32	s1, s22, s1
 800528c:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8005290:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8005294:	ee39 9a28 	vadd.f32	s18, s18, s17
 8005298:	ee36 3ac3 	vsub.f32	s6, s13, s6
 800529c:	ee32 2a04 	vadd.f32	s4, s4, s8
 80052a0:	ee76 0a60 	vsub.f32	s1, s12, s1
 80052a4:	44d4      	add	ip, sl
 80052a6:	45e0      	cmp	r8, ip
 80052a8:	ed80 7a00 	vstr	s14, [r0]
 80052ac:	445b      	add	r3, fp
 80052ae:	ed07 5a01 	vstr	s10, [r7, #-4]
 80052b2:	ed87 8a00 	vstr	s16, [r7]
 80052b6:	4458      	add	r0, fp
 80052b8:	ed44 7a01 	vstr	s15, [r4, #-4]
 80052bc:	edc4 2a00 	vstr	s5, [r4]
 80052c0:	ed02 1a01 	vstr	s2, [r2, #-4]
 80052c4:	edc2 4a00 	vstr	s9, [r2]
 80052c8:	445c      	add	r4, fp
 80052ca:	ed46 5a01 	vstr	s11, [r6, #-4]
 80052ce:	edc6 9a00 	vstr	s19, [r6]
 80052d2:	445a      	add	r2, fp
 80052d4:	ed01 9a01 	vstr	s18, [r1, #-4]
 80052d8:	ed81 3a00 	vstr	s6, [r1]
 80052dc:	ed05 2a01 	vstr	s4, [r5, #-4]
 80052e0:	4459      	add	r1, fp
 80052e2:	edc5 0a00 	vstr	s1, [r5]
 80052e6:	f63f aee7 	bhi.w	80050b8 <arm_radix8_butterfly_f32+0x33c>
 80052ea:	9804      	ldr	r0, [sp, #16]
 80052ec:	9905      	ldr	r1, [sp, #20]
 80052ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80052f0:	9b07      	ldr	r3, [sp, #28]
 80052f2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80052f4:	9e06      	ldr	r6, [sp, #24]
 80052f6:	9f15      	ldr	r7, [sp, #84]	; 0x54
 80052f8:	f8dd c020 	ldr.w	ip, [sp, #32]
 80052fc:	4411      	add	r1, r2
 80052fe:	442b      	add	r3, r5
 8005300:	443e      	add	r6, r7
 8005302:	3001      	adds	r0, #1
 8005304:	9004      	str	r0, [sp, #16]
 8005306:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005308:	9814      	ldr	r0, [sp, #80]	; 0x50
 800530a:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800530c:	9105      	str	r1, [sp, #20]
 800530e:	9307      	str	r3, [sp, #28]
 8005310:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005312:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005314:	9606      	str	r6, [sp, #24]
 8005316:	9f16      	ldr	r7, [sp, #88]	; 0x58
 8005318:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800531a:	4484      	add	ip, r0
 800531c:	4411      	add	r1, r2
 800531e:	442b      	add	r3, r5
 8005320:	443e      	add	r6, r7
 8005322:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005324:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005326:	f8cd c020 	str.w	ip, [sp, #32]
 800532a:	910b      	str	r1, [sp, #44]	; 0x2c
 800532c:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8005330:	990e      	ldr	r1, [sp, #56]	; 0x38
 8005332:	930a      	str	r3, [sp, #40]	; 0x28
 8005334:	9609      	str	r6, [sp, #36]	; 0x24
 8005336:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005338:	9d04      	ldr	r5, [sp, #16]
 800533a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800533c:	f10c 0c08 	add.w	ip, ip, #8
 8005340:	3008      	adds	r0, #8
 8005342:	3108      	adds	r1, #8
 8005344:	3208      	adds	r2, #8
 8005346:	3308      	adds	r3, #8
 8005348:	42b5      	cmp	r5, r6
 800534a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
 800534e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005350:	910e      	str	r1, [sp, #56]	; 0x38
 8005352:	920d      	str	r2, [sp, #52]	; 0x34
 8005354:	930c      	str	r3, [sp, #48]	; 0x30
 8005356:	f47f ae7a 	bne.w	800504e <arm_radix8_butterfly_f32+0x2d2>
 800535a:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800535c:	b2bf      	uxth	r7, r7
 800535e:	9706      	str	r7, [sp, #24]
 8005360:	46aa      	mov	sl, r5
 8005362:	e519      	b.n	8004d98 <arm_radix8_butterfly_f32+0x1c>
 8005364:	b01c      	add	sp, #112	; 0x70
 8005366:	ecbd 8b10 	vpop	{d8-d15}
 800536a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800536e:	4770      	bx	lr

08005370 <__errno>:
 8005370:	4b01      	ldr	r3, [pc, #4]	; (8005378 <__errno+0x8>)
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	2000000c 	.word	0x2000000c

0800537c <__libc_init_array>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	4d0d      	ldr	r5, [pc, #52]	; (80053b4 <__libc_init_array+0x38>)
 8005380:	4c0d      	ldr	r4, [pc, #52]	; (80053b8 <__libc_init_array+0x3c>)
 8005382:	1b64      	subs	r4, r4, r5
 8005384:	10a4      	asrs	r4, r4, #2
 8005386:	2600      	movs	r6, #0
 8005388:	42a6      	cmp	r6, r4
 800538a:	d109      	bne.n	80053a0 <__libc_init_array+0x24>
 800538c:	4d0b      	ldr	r5, [pc, #44]	; (80053bc <__libc_init_array+0x40>)
 800538e:	4c0c      	ldr	r4, [pc, #48]	; (80053c0 <__libc_init_array+0x44>)
 8005390:	f004 fc8a 	bl	8009ca8 <_init>
 8005394:	1b64      	subs	r4, r4, r5
 8005396:	10a4      	asrs	r4, r4, #2
 8005398:	2600      	movs	r6, #0
 800539a:	42a6      	cmp	r6, r4
 800539c:	d105      	bne.n	80053aa <__libc_init_array+0x2e>
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a4:	4798      	blx	r3
 80053a6:	3601      	adds	r6, #1
 80053a8:	e7ee      	b.n	8005388 <__libc_init_array+0xc>
 80053aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ae:	4798      	blx	r3
 80053b0:	3601      	adds	r6, #1
 80053b2:	e7f2      	b.n	800539a <__libc_init_array+0x1e>
 80053b4:	0801ddfc 	.word	0x0801ddfc
 80053b8:	0801ddfc 	.word	0x0801ddfc
 80053bc:	0801ddfc 	.word	0x0801ddfc
 80053c0:	0801de00 	.word	0x0801de00

080053c4 <memset>:
 80053c4:	4402      	add	r2, r0
 80053c6:	4603      	mov	r3, r0
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d100      	bne.n	80053ce <memset+0xa>
 80053cc:	4770      	bx	lr
 80053ce:	f803 1b01 	strb.w	r1, [r3], #1
 80053d2:	e7f9      	b.n	80053c8 <memset+0x4>

080053d4 <__cvt>:
 80053d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053d8:	ec55 4b10 	vmov	r4, r5, d0
 80053dc:	2d00      	cmp	r5, #0
 80053de:	460e      	mov	r6, r1
 80053e0:	4619      	mov	r1, r3
 80053e2:	462b      	mov	r3, r5
 80053e4:	bfbb      	ittet	lt
 80053e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80053ea:	461d      	movlt	r5, r3
 80053ec:	2300      	movge	r3, #0
 80053ee:	232d      	movlt	r3, #45	; 0x2d
 80053f0:	700b      	strb	r3, [r1, #0]
 80053f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80053f8:	4691      	mov	r9, r2
 80053fa:	f023 0820 	bic.w	r8, r3, #32
 80053fe:	bfbc      	itt	lt
 8005400:	4622      	movlt	r2, r4
 8005402:	4614      	movlt	r4, r2
 8005404:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005408:	d005      	beq.n	8005416 <__cvt+0x42>
 800540a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800540e:	d100      	bne.n	8005412 <__cvt+0x3e>
 8005410:	3601      	adds	r6, #1
 8005412:	2102      	movs	r1, #2
 8005414:	e000      	b.n	8005418 <__cvt+0x44>
 8005416:	2103      	movs	r1, #3
 8005418:	ab03      	add	r3, sp, #12
 800541a:	9301      	str	r3, [sp, #4]
 800541c:	ab02      	add	r3, sp, #8
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	ec45 4b10 	vmov	d0, r4, r5
 8005424:	4653      	mov	r3, sl
 8005426:	4632      	mov	r2, r6
 8005428:	f001 fdce 	bl	8006fc8 <_dtoa_r>
 800542c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005430:	4607      	mov	r7, r0
 8005432:	d102      	bne.n	800543a <__cvt+0x66>
 8005434:	f019 0f01 	tst.w	r9, #1
 8005438:	d022      	beq.n	8005480 <__cvt+0xac>
 800543a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800543e:	eb07 0906 	add.w	r9, r7, r6
 8005442:	d110      	bne.n	8005466 <__cvt+0x92>
 8005444:	783b      	ldrb	r3, [r7, #0]
 8005446:	2b30      	cmp	r3, #48	; 0x30
 8005448:	d10a      	bne.n	8005460 <__cvt+0x8c>
 800544a:	2200      	movs	r2, #0
 800544c:	2300      	movs	r3, #0
 800544e:	4620      	mov	r0, r4
 8005450:	4629      	mov	r1, r5
 8005452:	f7fb fba1 	bl	8000b98 <__aeabi_dcmpeq>
 8005456:	b918      	cbnz	r0, 8005460 <__cvt+0x8c>
 8005458:	f1c6 0601 	rsb	r6, r6, #1
 800545c:	f8ca 6000 	str.w	r6, [sl]
 8005460:	f8da 3000 	ldr.w	r3, [sl]
 8005464:	4499      	add	r9, r3
 8005466:	2200      	movs	r2, #0
 8005468:	2300      	movs	r3, #0
 800546a:	4620      	mov	r0, r4
 800546c:	4629      	mov	r1, r5
 800546e:	f7fb fb93 	bl	8000b98 <__aeabi_dcmpeq>
 8005472:	b108      	cbz	r0, 8005478 <__cvt+0xa4>
 8005474:	f8cd 900c 	str.w	r9, [sp, #12]
 8005478:	2230      	movs	r2, #48	; 0x30
 800547a:	9b03      	ldr	r3, [sp, #12]
 800547c:	454b      	cmp	r3, r9
 800547e:	d307      	bcc.n	8005490 <__cvt+0xbc>
 8005480:	9b03      	ldr	r3, [sp, #12]
 8005482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005484:	1bdb      	subs	r3, r3, r7
 8005486:	4638      	mov	r0, r7
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	b004      	add	sp, #16
 800548c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005490:	1c59      	adds	r1, r3, #1
 8005492:	9103      	str	r1, [sp, #12]
 8005494:	701a      	strb	r2, [r3, #0]
 8005496:	e7f0      	b.n	800547a <__cvt+0xa6>

08005498 <__exponent>:
 8005498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800549a:	4603      	mov	r3, r0
 800549c:	2900      	cmp	r1, #0
 800549e:	bfb8      	it	lt
 80054a0:	4249      	neglt	r1, r1
 80054a2:	f803 2b02 	strb.w	r2, [r3], #2
 80054a6:	bfb4      	ite	lt
 80054a8:	222d      	movlt	r2, #45	; 0x2d
 80054aa:	222b      	movge	r2, #43	; 0x2b
 80054ac:	2909      	cmp	r1, #9
 80054ae:	7042      	strb	r2, [r0, #1]
 80054b0:	dd2a      	ble.n	8005508 <__exponent+0x70>
 80054b2:	f10d 0407 	add.w	r4, sp, #7
 80054b6:	46a4      	mov	ip, r4
 80054b8:	270a      	movs	r7, #10
 80054ba:	46a6      	mov	lr, r4
 80054bc:	460a      	mov	r2, r1
 80054be:	fb91 f6f7 	sdiv	r6, r1, r7
 80054c2:	fb07 1516 	mls	r5, r7, r6, r1
 80054c6:	3530      	adds	r5, #48	; 0x30
 80054c8:	2a63      	cmp	r2, #99	; 0x63
 80054ca:	f104 34ff 	add.w	r4, r4, #4294967295
 80054ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80054d2:	4631      	mov	r1, r6
 80054d4:	dcf1      	bgt.n	80054ba <__exponent+0x22>
 80054d6:	3130      	adds	r1, #48	; 0x30
 80054d8:	f1ae 0502 	sub.w	r5, lr, #2
 80054dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80054e0:	1c44      	adds	r4, r0, #1
 80054e2:	4629      	mov	r1, r5
 80054e4:	4561      	cmp	r1, ip
 80054e6:	d30a      	bcc.n	80054fe <__exponent+0x66>
 80054e8:	f10d 0209 	add.w	r2, sp, #9
 80054ec:	eba2 020e 	sub.w	r2, r2, lr
 80054f0:	4565      	cmp	r5, ip
 80054f2:	bf88      	it	hi
 80054f4:	2200      	movhi	r2, #0
 80054f6:	4413      	add	r3, r2
 80054f8:	1a18      	subs	r0, r3, r0
 80054fa:	b003      	add	sp, #12
 80054fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005502:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005506:	e7ed      	b.n	80054e4 <__exponent+0x4c>
 8005508:	2330      	movs	r3, #48	; 0x30
 800550a:	3130      	adds	r1, #48	; 0x30
 800550c:	7083      	strb	r3, [r0, #2]
 800550e:	70c1      	strb	r1, [r0, #3]
 8005510:	1d03      	adds	r3, r0, #4
 8005512:	e7f1      	b.n	80054f8 <__exponent+0x60>

08005514 <_printf_float>:
 8005514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005518:	ed2d 8b02 	vpush	{d8}
 800551c:	b08d      	sub	sp, #52	; 0x34
 800551e:	460c      	mov	r4, r1
 8005520:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005524:	4616      	mov	r6, r2
 8005526:	461f      	mov	r7, r3
 8005528:	4605      	mov	r5, r0
 800552a:	f002 ff9d 	bl	8008468 <_localeconv_r>
 800552e:	f8d0 a000 	ldr.w	sl, [r0]
 8005532:	4650      	mov	r0, sl
 8005534:	f7fa feae 	bl	8000294 <strlen>
 8005538:	2300      	movs	r3, #0
 800553a:	930a      	str	r3, [sp, #40]	; 0x28
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	9305      	str	r3, [sp, #20]
 8005540:	f8d8 3000 	ldr.w	r3, [r8]
 8005544:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005548:	3307      	adds	r3, #7
 800554a:	f023 0307 	bic.w	r3, r3, #7
 800554e:	f103 0208 	add.w	r2, r3, #8
 8005552:	f8c8 2000 	str.w	r2, [r8]
 8005556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800555e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005562:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005566:	9307      	str	r3, [sp, #28]
 8005568:	f8cd 8018 	str.w	r8, [sp, #24]
 800556c:	ee08 0a10 	vmov	s16, r0
 8005570:	4b9f      	ldr	r3, [pc, #636]	; (80057f0 <_printf_float+0x2dc>)
 8005572:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005576:	f04f 32ff 	mov.w	r2, #4294967295
 800557a:	f7fb fb3f 	bl	8000bfc <__aeabi_dcmpun>
 800557e:	bb88      	cbnz	r0, 80055e4 <_printf_float+0xd0>
 8005580:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005584:	4b9a      	ldr	r3, [pc, #616]	; (80057f0 <_printf_float+0x2dc>)
 8005586:	f04f 32ff 	mov.w	r2, #4294967295
 800558a:	f7fb fb19 	bl	8000bc0 <__aeabi_dcmple>
 800558e:	bb48      	cbnz	r0, 80055e4 <_printf_float+0xd0>
 8005590:	2200      	movs	r2, #0
 8005592:	2300      	movs	r3, #0
 8005594:	4640      	mov	r0, r8
 8005596:	4649      	mov	r1, r9
 8005598:	f7fb fb08 	bl	8000bac <__aeabi_dcmplt>
 800559c:	b110      	cbz	r0, 80055a4 <_printf_float+0x90>
 800559e:	232d      	movs	r3, #45	; 0x2d
 80055a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a4:	4b93      	ldr	r3, [pc, #588]	; (80057f4 <_printf_float+0x2e0>)
 80055a6:	4894      	ldr	r0, [pc, #592]	; (80057f8 <_printf_float+0x2e4>)
 80055a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80055ac:	bf94      	ite	ls
 80055ae:	4698      	movls	r8, r3
 80055b0:	4680      	movhi	r8, r0
 80055b2:	2303      	movs	r3, #3
 80055b4:	6123      	str	r3, [r4, #16]
 80055b6:	9b05      	ldr	r3, [sp, #20]
 80055b8:	f023 0204 	bic.w	r2, r3, #4
 80055bc:	6022      	str	r2, [r4, #0]
 80055be:	f04f 0900 	mov.w	r9, #0
 80055c2:	9700      	str	r7, [sp, #0]
 80055c4:	4633      	mov	r3, r6
 80055c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80055c8:	4621      	mov	r1, r4
 80055ca:	4628      	mov	r0, r5
 80055cc:	f000 f9d8 	bl	8005980 <_printf_common>
 80055d0:	3001      	adds	r0, #1
 80055d2:	f040 8090 	bne.w	80056f6 <_printf_float+0x1e2>
 80055d6:	f04f 30ff 	mov.w	r0, #4294967295
 80055da:	b00d      	add	sp, #52	; 0x34
 80055dc:	ecbd 8b02 	vpop	{d8}
 80055e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e4:	4642      	mov	r2, r8
 80055e6:	464b      	mov	r3, r9
 80055e8:	4640      	mov	r0, r8
 80055ea:	4649      	mov	r1, r9
 80055ec:	f7fb fb06 	bl	8000bfc <__aeabi_dcmpun>
 80055f0:	b140      	cbz	r0, 8005604 <_printf_float+0xf0>
 80055f2:	464b      	mov	r3, r9
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bfbc      	itt	lt
 80055f8:	232d      	movlt	r3, #45	; 0x2d
 80055fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80055fe:	487f      	ldr	r0, [pc, #508]	; (80057fc <_printf_float+0x2e8>)
 8005600:	4b7f      	ldr	r3, [pc, #508]	; (8005800 <_printf_float+0x2ec>)
 8005602:	e7d1      	b.n	80055a8 <_printf_float+0x94>
 8005604:	6863      	ldr	r3, [r4, #4]
 8005606:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800560a:	9206      	str	r2, [sp, #24]
 800560c:	1c5a      	adds	r2, r3, #1
 800560e:	d13f      	bne.n	8005690 <_printf_float+0x17c>
 8005610:	2306      	movs	r3, #6
 8005612:	6063      	str	r3, [r4, #4]
 8005614:	9b05      	ldr	r3, [sp, #20]
 8005616:	6861      	ldr	r1, [r4, #4]
 8005618:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800561c:	2300      	movs	r3, #0
 800561e:	9303      	str	r3, [sp, #12]
 8005620:	ab0a      	add	r3, sp, #40	; 0x28
 8005622:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005626:	ab09      	add	r3, sp, #36	; 0x24
 8005628:	ec49 8b10 	vmov	d0, r8, r9
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	6022      	str	r2, [r4, #0]
 8005630:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005634:	4628      	mov	r0, r5
 8005636:	f7ff fecd 	bl	80053d4 <__cvt>
 800563a:	9b06      	ldr	r3, [sp, #24]
 800563c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800563e:	2b47      	cmp	r3, #71	; 0x47
 8005640:	4680      	mov	r8, r0
 8005642:	d108      	bne.n	8005656 <_printf_float+0x142>
 8005644:	1cc8      	adds	r0, r1, #3
 8005646:	db02      	blt.n	800564e <_printf_float+0x13a>
 8005648:	6863      	ldr	r3, [r4, #4]
 800564a:	4299      	cmp	r1, r3
 800564c:	dd41      	ble.n	80056d2 <_printf_float+0x1be>
 800564e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005652:	fa5f fb8b 	uxtb.w	fp, fp
 8005656:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800565a:	d820      	bhi.n	800569e <_printf_float+0x18a>
 800565c:	3901      	subs	r1, #1
 800565e:	465a      	mov	r2, fp
 8005660:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005664:	9109      	str	r1, [sp, #36]	; 0x24
 8005666:	f7ff ff17 	bl	8005498 <__exponent>
 800566a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800566c:	1813      	adds	r3, r2, r0
 800566e:	2a01      	cmp	r2, #1
 8005670:	4681      	mov	r9, r0
 8005672:	6123      	str	r3, [r4, #16]
 8005674:	dc02      	bgt.n	800567c <_printf_float+0x168>
 8005676:	6822      	ldr	r2, [r4, #0]
 8005678:	07d2      	lsls	r2, r2, #31
 800567a:	d501      	bpl.n	8005680 <_printf_float+0x16c>
 800567c:	3301      	adds	r3, #1
 800567e:	6123      	str	r3, [r4, #16]
 8005680:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005684:	2b00      	cmp	r3, #0
 8005686:	d09c      	beq.n	80055c2 <_printf_float+0xae>
 8005688:	232d      	movs	r3, #45	; 0x2d
 800568a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800568e:	e798      	b.n	80055c2 <_printf_float+0xae>
 8005690:	9a06      	ldr	r2, [sp, #24]
 8005692:	2a47      	cmp	r2, #71	; 0x47
 8005694:	d1be      	bne.n	8005614 <_printf_float+0x100>
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1bc      	bne.n	8005614 <_printf_float+0x100>
 800569a:	2301      	movs	r3, #1
 800569c:	e7b9      	b.n	8005612 <_printf_float+0xfe>
 800569e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80056a2:	d118      	bne.n	80056d6 <_printf_float+0x1c2>
 80056a4:	2900      	cmp	r1, #0
 80056a6:	6863      	ldr	r3, [r4, #4]
 80056a8:	dd0b      	ble.n	80056c2 <_printf_float+0x1ae>
 80056aa:	6121      	str	r1, [r4, #16]
 80056ac:	b913      	cbnz	r3, 80056b4 <_printf_float+0x1a0>
 80056ae:	6822      	ldr	r2, [r4, #0]
 80056b0:	07d0      	lsls	r0, r2, #31
 80056b2:	d502      	bpl.n	80056ba <_printf_float+0x1a6>
 80056b4:	3301      	adds	r3, #1
 80056b6:	440b      	add	r3, r1
 80056b8:	6123      	str	r3, [r4, #16]
 80056ba:	65a1      	str	r1, [r4, #88]	; 0x58
 80056bc:	f04f 0900 	mov.w	r9, #0
 80056c0:	e7de      	b.n	8005680 <_printf_float+0x16c>
 80056c2:	b913      	cbnz	r3, 80056ca <_printf_float+0x1b6>
 80056c4:	6822      	ldr	r2, [r4, #0]
 80056c6:	07d2      	lsls	r2, r2, #31
 80056c8:	d501      	bpl.n	80056ce <_printf_float+0x1ba>
 80056ca:	3302      	adds	r3, #2
 80056cc:	e7f4      	b.n	80056b8 <_printf_float+0x1a4>
 80056ce:	2301      	movs	r3, #1
 80056d0:	e7f2      	b.n	80056b8 <_printf_float+0x1a4>
 80056d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80056d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056d8:	4299      	cmp	r1, r3
 80056da:	db05      	blt.n	80056e8 <_printf_float+0x1d4>
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	6121      	str	r1, [r4, #16]
 80056e0:	07d8      	lsls	r0, r3, #31
 80056e2:	d5ea      	bpl.n	80056ba <_printf_float+0x1a6>
 80056e4:	1c4b      	adds	r3, r1, #1
 80056e6:	e7e7      	b.n	80056b8 <_printf_float+0x1a4>
 80056e8:	2900      	cmp	r1, #0
 80056ea:	bfd4      	ite	le
 80056ec:	f1c1 0202 	rsble	r2, r1, #2
 80056f0:	2201      	movgt	r2, #1
 80056f2:	4413      	add	r3, r2
 80056f4:	e7e0      	b.n	80056b8 <_printf_float+0x1a4>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	055a      	lsls	r2, r3, #21
 80056fa:	d407      	bmi.n	800570c <_printf_float+0x1f8>
 80056fc:	6923      	ldr	r3, [r4, #16]
 80056fe:	4642      	mov	r2, r8
 8005700:	4631      	mov	r1, r6
 8005702:	4628      	mov	r0, r5
 8005704:	47b8      	blx	r7
 8005706:	3001      	adds	r0, #1
 8005708:	d12c      	bne.n	8005764 <_printf_float+0x250>
 800570a:	e764      	b.n	80055d6 <_printf_float+0xc2>
 800570c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005710:	f240 80e0 	bls.w	80058d4 <_printf_float+0x3c0>
 8005714:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005718:	2200      	movs	r2, #0
 800571a:	2300      	movs	r3, #0
 800571c:	f7fb fa3c 	bl	8000b98 <__aeabi_dcmpeq>
 8005720:	2800      	cmp	r0, #0
 8005722:	d034      	beq.n	800578e <_printf_float+0x27a>
 8005724:	4a37      	ldr	r2, [pc, #220]	; (8005804 <_printf_float+0x2f0>)
 8005726:	2301      	movs	r3, #1
 8005728:	4631      	mov	r1, r6
 800572a:	4628      	mov	r0, r5
 800572c:	47b8      	blx	r7
 800572e:	3001      	adds	r0, #1
 8005730:	f43f af51 	beq.w	80055d6 <_printf_float+0xc2>
 8005734:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005738:	429a      	cmp	r2, r3
 800573a:	db02      	blt.n	8005742 <_printf_float+0x22e>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	07d8      	lsls	r0, r3, #31
 8005740:	d510      	bpl.n	8005764 <_printf_float+0x250>
 8005742:	ee18 3a10 	vmov	r3, s16
 8005746:	4652      	mov	r2, sl
 8005748:	4631      	mov	r1, r6
 800574a:	4628      	mov	r0, r5
 800574c:	47b8      	blx	r7
 800574e:	3001      	adds	r0, #1
 8005750:	f43f af41 	beq.w	80055d6 <_printf_float+0xc2>
 8005754:	f04f 0800 	mov.w	r8, #0
 8005758:	f104 091a 	add.w	r9, r4, #26
 800575c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800575e:	3b01      	subs	r3, #1
 8005760:	4543      	cmp	r3, r8
 8005762:	dc09      	bgt.n	8005778 <_printf_float+0x264>
 8005764:	6823      	ldr	r3, [r4, #0]
 8005766:	079b      	lsls	r3, r3, #30
 8005768:	f100 8105 	bmi.w	8005976 <_printf_float+0x462>
 800576c:	68e0      	ldr	r0, [r4, #12]
 800576e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005770:	4298      	cmp	r0, r3
 8005772:	bfb8      	it	lt
 8005774:	4618      	movlt	r0, r3
 8005776:	e730      	b.n	80055da <_printf_float+0xc6>
 8005778:	2301      	movs	r3, #1
 800577a:	464a      	mov	r2, r9
 800577c:	4631      	mov	r1, r6
 800577e:	4628      	mov	r0, r5
 8005780:	47b8      	blx	r7
 8005782:	3001      	adds	r0, #1
 8005784:	f43f af27 	beq.w	80055d6 <_printf_float+0xc2>
 8005788:	f108 0801 	add.w	r8, r8, #1
 800578c:	e7e6      	b.n	800575c <_printf_float+0x248>
 800578e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005790:	2b00      	cmp	r3, #0
 8005792:	dc39      	bgt.n	8005808 <_printf_float+0x2f4>
 8005794:	4a1b      	ldr	r2, [pc, #108]	; (8005804 <_printf_float+0x2f0>)
 8005796:	2301      	movs	r3, #1
 8005798:	4631      	mov	r1, r6
 800579a:	4628      	mov	r0, r5
 800579c:	47b8      	blx	r7
 800579e:	3001      	adds	r0, #1
 80057a0:	f43f af19 	beq.w	80055d6 <_printf_float+0xc2>
 80057a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057a8:	4313      	orrs	r3, r2
 80057aa:	d102      	bne.n	80057b2 <_printf_float+0x29e>
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	07d9      	lsls	r1, r3, #31
 80057b0:	d5d8      	bpl.n	8005764 <_printf_float+0x250>
 80057b2:	ee18 3a10 	vmov	r3, s16
 80057b6:	4652      	mov	r2, sl
 80057b8:	4631      	mov	r1, r6
 80057ba:	4628      	mov	r0, r5
 80057bc:	47b8      	blx	r7
 80057be:	3001      	adds	r0, #1
 80057c0:	f43f af09 	beq.w	80055d6 <_printf_float+0xc2>
 80057c4:	f04f 0900 	mov.w	r9, #0
 80057c8:	f104 0a1a 	add.w	sl, r4, #26
 80057cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ce:	425b      	negs	r3, r3
 80057d0:	454b      	cmp	r3, r9
 80057d2:	dc01      	bgt.n	80057d8 <_printf_float+0x2c4>
 80057d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057d6:	e792      	b.n	80056fe <_printf_float+0x1ea>
 80057d8:	2301      	movs	r3, #1
 80057da:	4652      	mov	r2, sl
 80057dc:	4631      	mov	r1, r6
 80057de:	4628      	mov	r0, r5
 80057e0:	47b8      	blx	r7
 80057e2:	3001      	adds	r0, #1
 80057e4:	f43f aef7 	beq.w	80055d6 <_printf_float+0xc2>
 80057e8:	f109 0901 	add.w	r9, r9, #1
 80057ec:	e7ee      	b.n	80057cc <_printf_float+0x2b8>
 80057ee:	bf00      	nop
 80057f0:	7fefffff 	.word	0x7fefffff
 80057f4:	0801d944 	.word	0x0801d944
 80057f8:	0801d948 	.word	0x0801d948
 80057fc:	0801d950 	.word	0x0801d950
 8005800:	0801d94c 	.word	0x0801d94c
 8005804:	0801d954 	.word	0x0801d954
 8005808:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800580a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800580c:	429a      	cmp	r2, r3
 800580e:	bfa8      	it	ge
 8005810:	461a      	movge	r2, r3
 8005812:	2a00      	cmp	r2, #0
 8005814:	4691      	mov	r9, r2
 8005816:	dc37      	bgt.n	8005888 <_printf_float+0x374>
 8005818:	f04f 0b00 	mov.w	fp, #0
 800581c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005820:	f104 021a 	add.w	r2, r4, #26
 8005824:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005826:	9305      	str	r3, [sp, #20]
 8005828:	eba3 0309 	sub.w	r3, r3, r9
 800582c:	455b      	cmp	r3, fp
 800582e:	dc33      	bgt.n	8005898 <_printf_float+0x384>
 8005830:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005834:	429a      	cmp	r2, r3
 8005836:	db3b      	blt.n	80058b0 <_printf_float+0x39c>
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	07da      	lsls	r2, r3, #31
 800583c:	d438      	bmi.n	80058b0 <_printf_float+0x39c>
 800583e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005840:	9b05      	ldr	r3, [sp, #20]
 8005842:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	eba2 0901 	sub.w	r9, r2, r1
 800584a:	4599      	cmp	r9, r3
 800584c:	bfa8      	it	ge
 800584e:	4699      	movge	r9, r3
 8005850:	f1b9 0f00 	cmp.w	r9, #0
 8005854:	dc35      	bgt.n	80058c2 <_printf_float+0x3ae>
 8005856:	f04f 0800 	mov.w	r8, #0
 800585a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800585e:	f104 0a1a 	add.w	sl, r4, #26
 8005862:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005866:	1a9b      	subs	r3, r3, r2
 8005868:	eba3 0309 	sub.w	r3, r3, r9
 800586c:	4543      	cmp	r3, r8
 800586e:	f77f af79 	ble.w	8005764 <_printf_float+0x250>
 8005872:	2301      	movs	r3, #1
 8005874:	4652      	mov	r2, sl
 8005876:	4631      	mov	r1, r6
 8005878:	4628      	mov	r0, r5
 800587a:	47b8      	blx	r7
 800587c:	3001      	adds	r0, #1
 800587e:	f43f aeaa 	beq.w	80055d6 <_printf_float+0xc2>
 8005882:	f108 0801 	add.w	r8, r8, #1
 8005886:	e7ec      	b.n	8005862 <_printf_float+0x34e>
 8005888:	4613      	mov	r3, r2
 800588a:	4631      	mov	r1, r6
 800588c:	4642      	mov	r2, r8
 800588e:	4628      	mov	r0, r5
 8005890:	47b8      	blx	r7
 8005892:	3001      	adds	r0, #1
 8005894:	d1c0      	bne.n	8005818 <_printf_float+0x304>
 8005896:	e69e      	b.n	80055d6 <_printf_float+0xc2>
 8005898:	2301      	movs	r3, #1
 800589a:	4631      	mov	r1, r6
 800589c:	4628      	mov	r0, r5
 800589e:	9205      	str	r2, [sp, #20]
 80058a0:	47b8      	blx	r7
 80058a2:	3001      	adds	r0, #1
 80058a4:	f43f ae97 	beq.w	80055d6 <_printf_float+0xc2>
 80058a8:	9a05      	ldr	r2, [sp, #20]
 80058aa:	f10b 0b01 	add.w	fp, fp, #1
 80058ae:	e7b9      	b.n	8005824 <_printf_float+0x310>
 80058b0:	ee18 3a10 	vmov	r3, s16
 80058b4:	4652      	mov	r2, sl
 80058b6:	4631      	mov	r1, r6
 80058b8:	4628      	mov	r0, r5
 80058ba:	47b8      	blx	r7
 80058bc:	3001      	adds	r0, #1
 80058be:	d1be      	bne.n	800583e <_printf_float+0x32a>
 80058c0:	e689      	b.n	80055d6 <_printf_float+0xc2>
 80058c2:	9a05      	ldr	r2, [sp, #20]
 80058c4:	464b      	mov	r3, r9
 80058c6:	4442      	add	r2, r8
 80058c8:	4631      	mov	r1, r6
 80058ca:	4628      	mov	r0, r5
 80058cc:	47b8      	blx	r7
 80058ce:	3001      	adds	r0, #1
 80058d0:	d1c1      	bne.n	8005856 <_printf_float+0x342>
 80058d2:	e680      	b.n	80055d6 <_printf_float+0xc2>
 80058d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058d6:	2a01      	cmp	r2, #1
 80058d8:	dc01      	bgt.n	80058de <_printf_float+0x3ca>
 80058da:	07db      	lsls	r3, r3, #31
 80058dc:	d538      	bpl.n	8005950 <_printf_float+0x43c>
 80058de:	2301      	movs	r3, #1
 80058e0:	4642      	mov	r2, r8
 80058e2:	4631      	mov	r1, r6
 80058e4:	4628      	mov	r0, r5
 80058e6:	47b8      	blx	r7
 80058e8:	3001      	adds	r0, #1
 80058ea:	f43f ae74 	beq.w	80055d6 <_printf_float+0xc2>
 80058ee:	ee18 3a10 	vmov	r3, s16
 80058f2:	4652      	mov	r2, sl
 80058f4:	4631      	mov	r1, r6
 80058f6:	4628      	mov	r0, r5
 80058f8:	47b8      	blx	r7
 80058fa:	3001      	adds	r0, #1
 80058fc:	f43f ae6b 	beq.w	80055d6 <_printf_float+0xc2>
 8005900:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005904:	2200      	movs	r2, #0
 8005906:	2300      	movs	r3, #0
 8005908:	f7fb f946 	bl	8000b98 <__aeabi_dcmpeq>
 800590c:	b9d8      	cbnz	r0, 8005946 <_printf_float+0x432>
 800590e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005910:	f108 0201 	add.w	r2, r8, #1
 8005914:	3b01      	subs	r3, #1
 8005916:	4631      	mov	r1, r6
 8005918:	4628      	mov	r0, r5
 800591a:	47b8      	blx	r7
 800591c:	3001      	adds	r0, #1
 800591e:	d10e      	bne.n	800593e <_printf_float+0x42a>
 8005920:	e659      	b.n	80055d6 <_printf_float+0xc2>
 8005922:	2301      	movs	r3, #1
 8005924:	4652      	mov	r2, sl
 8005926:	4631      	mov	r1, r6
 8005928:	4628      	mov	r0, r5
 800592a:	47b8      	blx	r7
 800592c:	3001      	adds	r0, #1
 800592e:	f43f ae52 	beq.w	80055d6 <_printf_float+0xc2>
 8005932:	f108 0801 	add.w	r8, r8, #1
 8005936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005938:	3b01      	subs	r3, #1
 800593a:	4543      	cmp	r3, r8
 800593c:	dcf1      	bgt.n	8005922 <_printf_float+0x40e>
 800593e:	464b      	mov	r3, r9
 8005940:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005944:	e6dc      	b.n	8005700 <_printf_float+0x1ec>
 8005946:	f04f 0800 	mov.w	r8, #0
 800594a:	f104 0a1a 	add.w	sl, r4, #26
 800594e:	e7f2      	b.n	8005936 <_printf_float+0x422>
 8005950:	2301      	movs	r3, #1
 8005952:	4642      	mov	r2, r8
 8005954:	e7df      	b.n	8005916 <_printf_float+0x402>
 8005956:	2301      	movs	r3, #1
 8005958:	464a      	mov	r2, r9
 800595a:	4631      	mov	r1, r6
 800595c:	4628      	mov	r0, r5
 800595e:	47b8      	blx	r7
 8005960:	3001      	adds	r0, #1
 8005962:	f43f ae38 	beq.w	80055d6 <_printf_float+0xc2>
 8005966:	f108 0801 	add.w	r8, r8, #1
 800596a:	68e3      	ldr	r3, [r4, #12]
 800596c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800596e:	1a5b      	subs	r3, r3, r1
 8005970:	4543      	cmp	r3, r8
 8005972:	dcf0      	bgt.n	8005956 <_printf_float+0x442>
 8005974:	e6fa      	b.n	800576c <_printf_float+0x258>
 8005976:	f04f 0800 	mov.w	r8, #0
 800597a:	f104 0919 	add.w	r9, r4, #25
 800597e:	e7f4      	b.n	800596a <_printf_float+0x456>

08005980 <_printf_common>:
 8005980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005984:	4616      	mov	r6, r2
 8005986:	4699      	mov	r9, r3
 8005988:	688a      	ldr	r2, [r1, #8]
 800598a:	690b      	ldr	r3, [r1, #16]
 800598c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005990:	4293      	cmp	r3, r2
 8005992:	bfb8      	it	lt
 8005994:	4613      	movlt	r3, r2
 8005996:	6033      	str	r3, [r6, #0]
 8005998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800599c:	4607      	mov	r7, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	b10a      	cbz	r2, 80059a6 <_printf_common+0x26>
 80059a2:	3301      	adds	r3, #1
 80059a4:	6033      	str	r3, [r6, #0]
 80059a6:	6823      	ldr	r3, [r4, #0]
 80059a8:	0699      	lsls	r1, r3, #26
 80059aa:	bf42      	ittt	mi
 80059ac:	6833      	ldrmi	r3, [r6, #0]
 80059ae:	3302      	addmi	r3, #2
 80059b0:	6033      	strmi	r3, [r6, #0]
 80059b2:	6825      	ldr	r5, [r4, #0]
 80059b4:	f015 0506 	ands.w	r5, r5, #6
 80059b8:	d106      	bne.n	80059c8 <_printf_common+0x48>
 80059ba:	f104 0a19 	add.w	sl, r4, #25
 80059be:	68e3      	ldr	r3, [r4, #12]
 80059c0:	6832      	ldr	r2, [r6, #0]
 80059c2:	1a9b      	subs	r3, r3, r2
 80059c4:	42ab      	cmp	r3, r5
 80059c6:	dc26      	bgt.n	8005a16 <_printf_common+0x96>
 80059c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80059cc:	1e13      	subs	r3, r2, #0
 80059ce:	6822      	ldr	r2, [r4, #0]
 80059d0:	bf18      	it	ne
 80059d2:	2301      	movne	r3, #1
 80059d4:	0692      	lsls	r2, r2, #26
 80059d6:	d42b      	bmi.n	8005a30 <_printf_common+0xb0>
 80059d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80059dc:	4649      	mov	r1, r9
 80059de:	4638      	mov	r0, r7
 80059e0:	47c0      	blx	r8
 80059e2:	3001      	adds	r0, #1
 80059e4:	d01e      	beq.n	8005a24 <_printf_common+0xa4>
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	68e5      	ldr	r5, [r4, #12]
 80059ea:	6832      	ldr	r2, [r6, #0]
 80059ec:	f003 0306 	and.w	r3, r3, #6
 80059f0:	2b04      	cmp	r3, #4
 80059f2:	bf08      	it	eq
 80059f4:	1aad      	subeq	r5, r5, r2
 80059f6:	68a3      	ldr	r3, [r4, #8]
 80059f8:	6922      	ldr	r2, [r4, #16]
 80059fa:	bf0c      	ite	eq
 80059fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a00:	2500      	movne	r5, #0
 8005a02:	4293      	cmp	r3, r2
 8005a04:	bfc4      	itt	gt
 8005a06:	1a9b      	subgt	r3, r3, r2
 8005a08:	18ed      	addgt	r5, r5, r3
 8005a0a:	2600      	movs	r6, #0
 8005a0c:	341a      	adds	r4, #26
 8005a0e:	42b5      	cmp	r5, r6
 8005a10:	d11a      	bne.n	8005a48 <_printf_common+0xc8>
 8005a12:	2000      	movs	r0, #0
 8005a14:	e008      	b.n	8005a28 <_printf_common+0xa8>
 8005a16:	2301      	movs	r3, #1
 8005a18:	4652      	mov	r2, sl
 8005a1a:	4649      	mov	r1, r9
 8005a1c:	4638      	mov	r0, r7
 8005a1e:	47c0      	blx	r8
 8005a20:	3001      	adds	r0, #1
 8005a22:	d103      	bne.n	8005a2c <_printf_common+0xac>
 8005a24:	f04f 30ff 	mov.w	r0, #4294967295
 8005a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a2c:	3501      	adds	r5, #1
 8005a2e:	e7c6      	b.n	80059be <_printf_common+0x3e>
 8005a30:	18e1      	adds	r1, r4, r3
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	2030      	movs	r0, #48	; 0x30
 8005a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005a3a:	4422      	add	r2, r4
 8005a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005a40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005a44:	3302      	adds	r3, #2
 8005a46:	e7c7      	b.n	80059d8 <_printf_common+0x58>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	4649      	mov	r1, r9
 8005a4e:	4638      	mov	r0, r7
 8005a50:	47c0      	blx	r8
 8005a52:	3001      	adds	r0, #1
 8005a54:	d0e6      	beq.n	8005a24 <_printf_common+0xa4>
 8005a56:	3601      	adds	r6, #1
 8005a58:	e7d9      	b.n	8005a0e <_printf_common+0x8e>
	...

08005a5c <_printf_i>:
 8005a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a60:	460c      	mov	r4, r1
 8005a62:	4691      	mov	r9, r2
 8005a64:	7e27      	ldrb	r7, [r4, #24]
 8005a66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005a68:	2f78      	cmp	r7, #120	; 0x78
 8005a6a:	4680      	mov	r8, r0
 8005a6c:	469a      	mov	sl, r3
 8005a6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a72:	d807      	bhi.n	8005a84 <_printf_i+0x28>
 8005a74:	2f62      	cmp	r7, #98	; 0x62
 8005a76:	d80a      	bhi.n	8005a8e <_printf_i+0x32>
 8005a78:	2f00      	cmp	r7, #0
 8005a7a:	f000 80d8 	beq.w	8005c2e <_printf_i+0x1d2>
 8005a7e:	2f58      	cmp	r7, #88	; 0x58
 8005a80:	f000 80a3 	beq.w	8005bca <_printf_i+0x16e>
 8005a84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005a8c:	e03a      	b.n	8005b04 <_printf_i+0xa8>
 8005a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005a92:	2b15      	cmp	r3, #21
 8005a94:	d8f6      	bhi.n	8005a84 <_printf_i+0x28>
 8005a96:	a001      	add	r0, pc, #4	; (adr r0, 8005a9c <_printf_i+0x40>)
 8005a98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005a9c:	08005af5 	.word	0x08005af5
 8005aa0:	08005b09 	.word	0x08005b09
 8005aa4:	08005a85 	.word	0x08005a85
 8005aa8:	08005a85 	.word	0x08005a85
 8005aac:	08005a85 	.word	0x08005a85
 8005ab0:	08005a85 	.word	0x08005a85
 8005ab4:	08005b09 	.word	0x08005b09
 8005ab8:	08005a85 	.word	0x08005a85
 8005abc:	08005a85 	.word	0x08005a85
 8005ac0:	08005a85 	.word	0x08005a85
 8005ac4:	08005a85 	.word	0x08005a85
 8005ac8:	08005c15 	.word	0x08005c15
 8005acc:	08005b39 	.word	0x08005b39
 8005ad0:	08005bf7 	.word	0x08005bf7
 8005ad4:	08005a85 	.word	0x08005a85
 8005ad8:	08005a85 	.word	0x08005a85
 8005adc:	08005c37 	.word	0x08005c37
 8005ae0:	08005a85 	.word	0x08005a85
 8005ae4:	08005b39 	.word	0x08005b39
 8005ae8:	08005a85 	.word	0x08005a85
 8005aec:	08005a85 	.word	0x08005a85
 8005af0:	08005bff 	.word	0x08005bff
 8005af4:	680b      	ldr	r3, [r1, #0]
 8005af6:	1d1a      	adds	r2, r3, #4
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	600a      	str	r2, [r1, #0]
 8005afc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b04:	2301      	movs	r3, #1
 8005b06:	e0a3      	b.n	8005c50 <_printf_i+0x1f4>
 8005b08:	6825      	ldr	r5, [r4, #0]
 8005b0a:	6808      	ldr	r0, [r1, #0]
 8005b0c:	062e      	lsls	r6, r5, #24
 8005b0e:	f100 0304 	add.w	r3, r0, #4
 8005b12:	d50a      	bpl.n	8005b2a <_printf_i+0xce>
 8005b14:	6805      	ldr	r5, [r0, #0]
 8005b16:	600b      	str	r3, [r1, #0]
 8005b18:	2d00      	cmp	r5, #0
 8005b1a:	da03      	bge.n	8005b24 <_printf_i+0xc8>
 8005b1c:	232d      	movs	r3, #45	; 0x2d
 8005b1e:	426d      	negs	r5, r5
 8005b20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b24:	485e      	ldr	r0, [pc, #376]	; (8005ca0 <_printf_i+0x244>)
 8005b26:	230a      	movs	r3, #10
 8005b28:	e019      	b.n	8005b5e <_printf_i+0x102>
 8005b2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005b2e:	6805      	ldr	r5, [r0, #0]
 8005b30:	600b      	str	r3, [r1, #0]
 8005b32:	bf18      	it	ne
 8005b34:	b22d      	sxthne	r5, r5
 8005b36:	e7ef      	b.n	8005b18 <_printf_i+0xbc>
 8005b38:	680b      	ldr	r3, [r1, #0]
 8005b3a:	6825      	ldr	r5, [r4, #0]
 8005b3c:	1d18      	adds	r0, r3, #4
 8005b3e:	6008      	str	r0, [r1, #0]
 8005b40:	0628      	lsls	r0, r5, #24
 8005b42:	d501      	bpl.n	8005b48 <_printf_i+0xec>
 8005b44:	681d      	ldr	r5, [r3, #0]
 8005b46:	e002      	b.n	8005b4e <_printf_i+0xf2>
 8005b48:	0669      	lsls	r1, r5, #25
 8005b4a:	d5fb      	bpl.n	8005b44 <_printf_i+0xe8>
 8005b4c:	881d      	ldrh	r5, [r3, #0]
 8005b4e:	4854      	ldr	r0, [pc, #336]	; (8005ca0 <_printf_i+0x244>)
 8005b50:	2f6f      	cmp	r7, #111	; 0x6f
 8005b52:	bf0c      	ite	eq
 8005b54:	2308      	moveq	r3, #8
 8005b56:	230a      	movne	r3, #10
 8005b58:	2100      	movs	r1, #0
 8005b5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005b5e:	6866      	ldr	r6, [r4, #4]
 8005b60:	60a6      	str	r6, [r4, #8]
 8005b62:	2e00      	cmp	r6, #0
 8005b64:	bfa2      	ittt	ge
 8005b66:	6821      	ldrge	r1, [r4, #0]
 8005b68:	f021 0104 	bicge.w	r1, r1, #4
 8005b6c:	6021      	strge	r1, [r4, #0]
 8005b6e:	b90d      	cbnz	r5, 8005b74 <_printf_i+0x118>
 8005b70:	2e00      	cmp	r6, #0
 8005b72:	d04d      	beq.n	8005c10 <_printf_i+0x1b4>
 8005b74:	4616      	mov	r6, r2
 8005b76:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b7a:	fb03 5711 	mls	r7, r3, r1, r5
 8005b7e:	5dc7      	ldrb	r7, [r0, r7]
 8005b80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b84:	462f      	mov	r7, r5
 8005b86:	42bb      	cmp	r3, r7
 8005b88:	460d      	mov	r5, r1
 8005b8a:	d9f4      	bls.n	8005b76 <_printf_i+0x11a>
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d10b      	bne.n	8005ba8 <_printf_i+0x14c>
 8005b90:	6823      	ldr	r3, [r4, #0]
 8005b92:	07df      	lsls	r7, r3, #31
 8005b94:	d508      	bpl.n	8005ba8 <_printf_i+0x14c>
 8005b96:	6923      	ldr	r3, [r4, #16]
 8005b98:	6861      	ldr	r1, [r4, #4]
 8005b9a:	4299      	cmp	r1, r3
 8005b9c:	bfde      	ittt	le
 8005b9e:	2330      	movle	r3, #48	; 0x30
 8005ba0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ba4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ba8:	1b92      	subs	r2, r2, r6
 8005baa:	6122      	str	r2, [r4, #16]
 8005bac:	f8cd a000 	str.w	sl, [sp]
 8005bb0:	464b      	mov	r3, r9
 8005bb2:	aa03      	add	r2, sp, #12
 8005bb4:	4621      	mov	r1, r4
 8005bb6:	4640      	mov	r0, r8
 8005bb8:	f7ff fee2 	bl	8005980 <_printf_common>
 8005bbc:	3001      	adds	r0, #1
 8005bbe:	d14c      	bne.n	8005c5a <_printf_i+0x1fe>
 8005bc0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc4:	b004      	add	sp, #16
 8005bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bca:	4835      	ldr	r0, [pc, #212]	; (8005ca0 <_printf_i+0x244>)
 8005bcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	680e      	ldr	r6, [r1, #0]
 8005bd4:	061f      	lsls	r7, r3, #24
 8005bd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005bda:	600e      	str	r6, [r1, #0]
 8005bdc:	d514      	bpl.n	8005c08 <_printf_i+0x1ac>
 8005bde:	07d9      	lsls	r1, r3, #31
 8005be0:	bf44      	itt	mi
 8005be2:	f043 0320 	orrmi.w	r3, r3, #32
 8005be6:	6023      	strmi	r3, [r4, #0]
 8005be8:	b91d      	cbnz	r5, 8005bf2 <_printf_i+0x196>
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	f023 0320 	bic.w	r3, r3, #32
 8005bf0:	6023      	str	r3, [r4, #0]
 8005bf2:	2310      	movs	r3, #16
 8005bf4:	e7b0      	b.n	8005b58 <_printf_i+0xfc>
 8005bf6:	6823      	ldr	r3, [r4, #0]
 8005bf8:	f043 0320 	orr.w	r3, r3, #32
 8005bfc:	6023      	str	r3, [r4, #0]
 8005bfe:	2378      	movs	r3, #120	; 0x78
 8005c00:	4828      	ldr	r0, [pc, #160]	; (8005ca4 <_printf_i+0x248>)
 8005c02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c06:	e7e3      	b.n	8005bd0 <_printf_i+0x174>
 8005c08:	065e      	lsls	r6, r3, #25
 8005c0a:	bf48      	it	mi
 8005c0c:	b2ad      	uxthmi	r5, r5
 8005c0e:	e7e6      	b.n	8005bde <_printf_i+0x182>
 8005c10:	4616      	mov	r6, r2
 8005c12:	e7bb      	b.n	8005b8c <_printf_i+0x130>
 8005c14:	680b      	ldr	r3, [r1, #0]
 8005c16:	6826      	ldr	r6, [r4, #0]
 8005c18:	6960      	ldr	r0, [r4, #20]
 8005c1a:	1d1d      	adds	r5, r3, #4
 8005c1c:	600d      	str	r5, [r1, #0]
 8005c1e:	0635      	lsls	r5, r6, #24
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	d501      	bpl.n	8005c28 <_printf_i+0x1cc>
 8005c24:	6018      	str	r0, [r3, #0]
 8005c26:	e002      	b.n	8005c2e <_printf_i+0x1d2>
 8005c28:	0671      	lsls	r1, r6, #25
 8005c2a:	d5fb      	bpl.n	8005c24 <_printf_i+0x1c8>
 8005c2c:	8018      	strh	r0, [r3, #0]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	6123      	str	r3, [r4, #16]
 8005c32:	4616      	mov	r6, r2
 8005c34:	e7ba      	b.n	8005bac <_printf_i+0x150>
 8005c36:	680b      	ldr	r3, [r1, #0]
 8005c38:	1d1a      	adds	r2, r3, #4
 8005c3a:	600a      	str	r2, [r1, #0]
 8005c3c:	681e      	ldr	r6, [r3, #0]
 8005c3e:	6862      	ldr	r2, [r4, #4]
 8005c40:	2100      	movs	r1, #0
 8005c42:	4630      	mov	r0, r6
 8005c44:	f7fa fb34 	bl	80002b0 <memchr>
 8005c48:	b108      	cbz	r0, 8005c4e <_printf_i+0x1f2>
 8005c4a:	1b80      	subs	r0, r0, r6
 8005c4c:	6060      	str	r0, [r4, #4]
 8005c4e:	6863      	ldr	r3, [r4, #4]
 8005c50:	6123      	str	r3, [r4, #16]
 8005c52:	2300      	movs	r3, #0
 8005c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c58:	e7a8      	b.n	8005bac <_printf_i+0x150>
 8005c5a:	6923      	ldr	r3, [r4, #16]
 8005c5c:	4632      	mov	r2, r6
 8005c5e:	4649      	mov	r1, r9
 8005c60:	4640      	mov	r0, r8
 8005c62:	47d0      	blx	sl
 8005c64:	3001      	adds	r0, #1
 8005c66:	d0ab      	beq.n	8005bc0 <_printf_i+0x164>
 8005c68:	6823      	ldr	r3, [r4, #0]
 8005c6a:	079b      	lsls	r3, r3, #30
 8005c6c:	d413      	bmi.n	8005c96 <_printf_i+0x23a>
 8005c6e:	68e0      	ldr	r0, [r4, #12]
 8005c70:	9b03      	ldr	r3, [sp, #12]
 8005c72:	4298      	cmp	r0, r3
 8005c74:	bfb8      	it	lt
 8005c76:	4618      	movlt	r0, r3
 8005c78:	e7a4      	b.n	8005bc4 <_printf_i+0x168>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4632      	mov	r2, r6
 8005c7e:	4649      	mov	r1, r9
 8005c80:	4640      	mov	r0, r8
 8005c82:	47d0      	blx	sl
 8005c84:	3001      	adds	r0, #1
 8005c86:	d09b      	beq.n	8005bc0 <_printf_i+0x164>
 8005c88:	3501      	adds	r5, #1
 8005c8a:	68e3      	ldr	r3, [r4, #12]
 8005c8c:	9903      	ldr	r1, [sp, #12]
 8005c8e:	1a5b      	subs	r3, r3, r1
 8005c90:	42ab      	cmp	r3, r5
 8005c92:	dcf2      	bgt.n	8005c7a <_printf_i+0x21e>
 8005c94:	e7eb      	b.n	8005c6e <_printf_i+0x212>
 8005c96:	2500      	movs	r5, #0
 8005c98:	f104 0619 	add.w	r6, r4, #25
 8005c9c:	e7f5      	b.n	8005c8a <_printf_i+0x22e>
 8005c9e:	bf00      	nop
 8005ca0:	0801d956 	.word	0x0801d956
 8005ca4:	0801d967 	.word	0x0801d967

08005ca8 <_scanf_float>:
 8005ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cac:	b087      	sub	sp, #28
 8005cae:	4617      	mov	r7, r2
 8005cb0:	9303      	str	r3, [sp, #12]
 8005cb2:	688b      	ldr	r3, [r1, #8]
 8005cb4:	1e5a      	subs	r2, r3, #1
 8005cb6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005cba:	bf83      	ittte	hi
 8005cbc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005cc0:	195b      	addhi	r3, r3, r5
 8005cc2:	9302      	strhi	r3, [sp, #8]
 8005cc4:	2300      	movls	r3, #0
 8005cc6:	bf86      	itte	hi
 8005cc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005ccc:	608b      	strhi	r3, [r1, #8]
 8005cce:	9302      	strls	r3, [sp, #8]
 8005cd0:	680b      	ldr	r3, [r1, #0]
 8005cd2:	468b      	mov	fp, r1
 8005cd4:	2500      	movs	r5, #0
 8005cd6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005cda:	f84b 3b1c 	str.w	r3, [fp], #28
 8005cde:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005ce2:	4680      	mov	r8, r0
 8005ce4:	460c      	mov	r4, r1
 8005ce6:	465e      	mov	r6, fp
 8005ce8:	46aa      	mov	sl, r5
 8005cea:	46a9      	mov	r9, r5
 8005cec:	9501      	str	r5, [sp, #4]
 8005cee:	68a2      	ldr	r2, [r4, #8]
 8005cf0:	b152      	cbz	r2, 8005d08 <_scanf_float+0x60>
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	2b4e      	cmp	r3, #78	; 0x4e
 8005cf8:	d864      	bhi.n	8005dc4 <_scanf_float+0x11c>
 8005cfa:	2b40      	cmp	r3, #64	; 0x40
 8005cfc:	d83c      	bhi.n	8005d78 <_scanf_float+0xd0>
 8005cfe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005d02:	b2c8      	uxtb	r0, r1
 8005d04:	280e      	cmp	r0, #14
 8005d06:	d93a      	bls.n	8005d7e <_scanf_float+0xd6>
 8005d08:	f1b9 0f00 	cmp.w	r9, #0
 8005d0c:	d003      	beq.n	8005d16 <_scanf_float+0x6e>
 8005d0e:	6823      	ldr	r3, [r4, #0]
 8005d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d14:	6023      	str	r3, [r4, #0]
 8005d16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d1a:	f1ba 0f01 	cmp.w	sl, #1
 8005d1e:	f200 8113 	bhi.w	8005f48 <_scanf_float+0x2a0>
 8005d22:	455e      	cmp	r6, fp
 8005d24:	f200 8105 	bhi.w	8005f32 <_scanf_float+0x28a>
 8005d28:	2501      	movs	r5, #1
 8005d2a:	4628      	mov	r0, r5
 8005d2c:	b007      	add	sp, #28
 8005d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d32:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005d36:	2a0d      	cmp	r2, #13
 8005d38:	d8e6      	bhi.n	8005d08 <_scanf_float+0x60>
 8005d3a:	a101      	add	r1, pc, #4	; (adr r1, 8005d40 <_scanf_float+0x98>)
 8005d3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005d40:	08005e7f 	.word	0x08005e7f
 8005d44:	08005d09 	.word	0x08005d09
 8005d48:	08005d09 	.word	0x08005d09
 8005d4c:	08005d09 	.word	0x08005d09
 8005d50:	08005edf 	.word	0x08005edf
 8005d54:	08005eb7 	.word	0x08005eb7
 8005d58:	08005d09 	.word	0x08005d09
 8005d5c:	08005d09 	.word	0x08005d09
 8005d60:	08005e8d 	.word	0x08005e8d
 8005d64:	08005d09 	.word	0x08005d09
 8005d68:	08005d09 	.word	0x08005d09
 8005d6c:	08005d09 	.word	0x08005d09
 8005d70:	08005d09 	.word	0x08005d09
 8005d74:	08005e45 	.word	0x08005e45
 8005d78:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005d7c:	e7db      	b.n	8005d36 <_scanf_float+0x8e>
 8005d7e:	290e      	cmp	r1, #14
 8005d80:	d8c2      	bhi.n	8005d08 <_scanf_float+0x60>
 8005d82:	a001      	add	r0, pc, #4	; (adr r0, 8005d88 <_scanf_float+0xe0>)
 8005d84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005d88:	08005e37 	.word	0x08005e37
 8005d8c:	08005d09 	.word	0x08005d09
 8005d90:	08005e37 	.word	0x08005e37
 8005d94:	08005ecb 	.word	0x08005ecb
 8005d98:	08005d09 	.word	0x08005d09
 8005d9c:	08005de5 	.word	0x08005de5
 8005da0:	08005e21 	.word	0x08005e21
 8005da4:	08005e21 	.word	0x08005e21
 8005da8:	08005e21 	.word	0x08005e21
 8005dac:	08005e21 	.word	0x08005e21
 8005db0:	08005e21 	.word	0x08005e21
 8005db4:	08005e21 	.word	0x08005e21
 8005db8:	08005e21 	.word	0x08005e21
 8005dbc:	08005e21 	.word	0x08005e21
 8005dc0:	08005e21 	.word	0x08005e21
 8005dc4:	2b6e      	cmp	r3, #110	; 0x6e
 8005dc6:	d809      	bhi.n	8005ddc <_scanf_float+0x134>
 8005dc8:	2b60      	cmp	r3, #96	; 0x60
 8005dca:	d8b2      	bhi.n	8005d32 <_scanf_float+0x8a>
 8005dcc:	2b54      	cmp	r3, #84	; 0x54
 8005dce:	d077      	beq.n	8005ec0 <_scanf_float+0x218>
 8005dd0:	2b59      	cmp	r3, #89	; 0x59
 8005dd2:	d199      	bne.n	8005d08 <_scanf_float+0x60>
 8005dd4:	2d07      	cmp	r5, #7
 8005dd6:	d197      	bne.n	8005d08 <_scanf_float+0x60>
 8005dd8:	2508      	movs	r5, #8
 8005dda:	e029      	b.n	8005e30 <_scanf_float+0x188>
 8005ddc:	2b74      	cmp	r3, #116	; 0x74
 8005dde:	d06f      	beq.n	8005ec0 <_scanf_float+0x218>
 8005de0:	2b79      	cmp	r3, #121	; 0x79
 8005de2:	e7f6      	b.n	8005dd2 <_scanf_float+0x12a>
 8005de4:	6821      	ldr	r1, [r4, #0]
 8005de6:	05c8      	lsls	r0, r1, #23
 8005de8:	d51a      	bpl.n	8005e20 <_scanf_float+0x178>
 8005dea:	9b02      	ldr	r3, [sp, #8]
 8005dec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005df0:	6021      	str	r1, [r4, #0]
 8005df2:	f109 0901 	add.w	r9, r9, #1
 8005df6:	b11b      	cbz	r3, 8005e00 <_scanf_float+0x158>
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	3201      	adds	r2, #1
 8005dfc:	9302      	str	r3, [sp, #8]
 8005dfe:	60a2      	str	r2, [r4, #8]
 8005e00:	68a3      	ldr	r3, [r4, #8]
 8005e02:	3b01      	subs	r3, #1
 8005e04:	60a3      	str	r3, [r4, #8]
 8005e06:	6923      	ldr	r3, [r4, #16]
 8005e08:	3301      	adds	r3, #1
 8005e0a:	6123      	str	r3, [r4, #16]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	607b      	str	r3, [r7, #4]
 8005e14:	f340 8084 	ble.w	8005f20 <_scanf_float+0x278>
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	603b      	str	r3, [r7, #0]
 8005e1e:	e766      	b.n	8005cee <_scanf_float+0x46>
 8005e20:	eb1a 0f05 	cmn.w	sl, r5
 8005e24:	f47f af70 	bne.w	8005d08 <_scanf_float+0x60>
 8005e28:	6822      	ldr	r2, [r4, #0]
 8005e2a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005e2e:	6022      	str	r2, [r4, #0]
 8005e30:	f806 3b01 	strb.w	r3, [r6], #1
 8005e34:	e7e4      	b.n	8005e00 <_scanf_float+0x158>
 8005e36:	6822      	ldr	r2, [r4, #0]
 8005e38:	0610      	lsls	r0, r2, #24
 8005e3a:	f57f af65 	bpl.w	8005d08 <_scanf_float+0x60>
 8005e3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e42:	e7f4      	b.n	8005e2e <_scanf_float+0x186>
 8005e44:	f1ba 0f00 	cmp.w	sl, #0
 8005e48:	d10e      	bne.n	8005e68 <_scanf_float+0x1c0>
 8005e4a:	f1b9 0f00 	cmp.w	r9, #0
 8005e4e:	d10e      	bne.n	8005e6e <_scanf_float+0x1c6>
 8005e50:	6822      	ldr	r2, [r4, #0]
 8005e52:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e56:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005e5a:	d108      	bne.n	8005e6e <_scanf_float+0x1c6>
 8005e5c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005e60:	6022      	str	r2, [r4, #0]
 8005e62:	f04f 0a01 	mov.w	sl, #1
 8005e66:	e7e3      	b.n	8005e30 <_scanf_float+0x188>
 8005e68:	f1ba 0f02 	cmp.w	sl, #2
 8005e6c:	d055      	beq.n	8005f1a <_scanf_float+0x272>
 8005e6e:	2d01      	cmp	r5, #1
 8005e70:	d002      	beq.n	8005e78 <_scanf_float+0x1d0>
 8005e72:	2d04      	cmp	r5, #4
 8005e74:	f47f af48 	bne.w	8005d08 <_scanf_float+0x60>
 8005e78:	3501      	adds	r5, #1
 8005e7a:	b2ed      	uxtb	r5, r5
 8005e7c:	e7d8      	b.n	8005e30 <_scanf_float+0x188>
 8005e7e:	f1ba 0f01 	cmp.w	sl, #1
 8005e82:	f47f af41 	bne.w	8005d08 <_scanf_float+0x60>
 8005e86:	f04f 0a02 	mov.w	sl, #2
 8005e8a:	e7d1      	b.n	8005e30 <_scanf_float+0x188>
 8005e8c:	b97d      	cbnz	r5, 8005eae <_scanf_float+0x206>
 8005e8e:	f1b9 0f00 	cmp.w	r9, #0
 8005e92:	f47f af3c 	bne.w	8005d0e <_scanf_float+0x66>
 8005e96:	6822      	ldr	r2, [r4, #0]
 8005e98:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005e9c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005ea0:	f47f af39 	bne.w	8005d16 <_scanf_float+0x6e>
 8005ea4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005ea8:	6022      	str	r2, [r4, #0]
 8005eaa:	2501      	movs	r5, #1
 8005eac:	e7c0      	b.n	8005e30 <_scanf_float+0x188>
 8005eae:	2d03      	cmp	r5, #3
 8005eb0:	d0e2      	beq.n	8005e78 <_scanf_float+0x1d0>
 8005eb2:	2d05      	cmp	r5, #5
 8005eb4:	e7de      	b.n	8005e74 <_scanf_float+0x1cc>
 8005eb6:	2d02      	cmp	r5, #2
 8005eb8:	f47f af26 	bne.w	8005d08 <_scanf_float+0x60>
 8005ebc:	2503      	movs	r5, #3
 8005ebe:	e7b7      	b.n	8005e30 <_scanf_float+0x188>
 8005ec0:	2d06      	cmp	r5, #6
 8005ec2:	f47f af21 	bne.w	8005d08 <_scanf_float+0x60>
 8005ec6:	2507      	movs	r5, #7
 8005ec8:	e7b2      	b.n	8005e30 <_scanf_float+0x188>
 8005eca:	6822      	ldr	r2, [r4, #0]
 8005ecc:	0591      	lsls	r1, r2, #22
 8005ece:	f57f af1b 	bpl.w	8005d08 <_scanf_float+0x60>
 8005ed2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005ed6:	6022      	str	r2, [r4, #0]
 8005ed8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005edc:	e7a8      	b.n	8005e30 <_scanf_float+0x188>
 8005ede:	6822      	ldr	r2, [r4, #0]
 8005ee0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005ee4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005ee8:	d006      	beq.n	8005ef8 <_scanf_float+0x250>
 8005eea:	0550      	lsls	r0, r2, #21
 8005eec:	f57f af0c 	bpl.w	8005d08 <_scanf_float+0x60>
 8005ef0:	f1b9 0f00 	cmp.w	r9, #0
 8005ef4:	f43f af0f 	beq.w	8005d16 <_scanf_float+0x6e>
 8005ef8:	0591      	lsls	r1, r2, #22
 8005efa:	bf58      	it	pl
 8005efc:	9901      	ldrpl	r1, [sp, #4]
 8005efe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f02:	bf58      	it	pl
 8005f04:	eba9 0101 	subpl.w	r1, r9, r1
 8005f08:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005f0c:	bf58      	it	pl
 8005f0e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005f12:	6022      	str	r2, [r4, #0]
 8005f14:	f04f 0900 	mov.w	r9, #0
 8005f18:	e78a      	b.n	8005e30 <_scanf_float+0x188>
 8005f1a:	f04f 0a03 	mov.w	sl, #3
 8005f1e:	e787      	b.n	8005e30 <_scanf_float+0x188>
 8005f20:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005f24:	4639      	mov	r1, r7
 8005f26:	4640      	mov	r0, r8
 8005f28:	4798      	blx	r3
 8005f2a:	2800      	cmp	r0, #0
 8005f2c:	f43f aedf 	beq.w	8005cee <_scanf_float+0x46>
 8005f30:	e6ea      	b.n	8005d08 <_scanf_float+0x60>
 8005f32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f3a:	463a      	mov	r2, r7
 8005f3c:	4640      	mov	r0, r8
 8005f3e:	4798      	blx	r3
 8005f40:	6923      	ldr	r3, [r4, #16]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	6123      	str	r3, [r4, #16]
 8005f46:	e6ec      	b.n	8005d22 <_scanf_float+0x7a>
 8005f48:	1e6b      	subs	r3, r5, #1
 8005f4a:	2b06      	cmp	r3, #6
 8005f4c:	d825      	bhi.n	8005f9a <_scanf_float+0x2f2>
 8005f4e:	2d02      	cmp	r5, #2
 8005f50:	d836      	bhi.n	8005fc0 <_scanf_float+0x318>
 8005f52:	455e      	cmp	r6, fp
 8005f54:	f67f aee8 	bls.w	8005d28 <_scanf_float+0x80>
 8005f58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f5c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005f60:	463a      	mov	r2, r7
 8005f62:	4640      	mov	r0, r8
 8005f64:	4798      	blx	r3
 8005f66:	6923      	ldr	r3, [r4, #16]
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	6123      	str	r3, [r4, #16]
 8005f6c:	e7f1      	b.n	8005f52 <_scanf_float+0x2aa>
 8005f6e:	9802      	ldr	r0, [sp, #8]
 8005f70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005f74:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005f78:	9002      	str	r0, [sp, #8]
 8005f7a:	463a      	mov	r2, r7
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	4798      	blx	r3
 8005f80:	6923      	ldr	r3, [r4, #16]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	6123      	str	r3, [r4, #16]
 8005f86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f8a:	fa5f fa8a 	uxtb.w	sl, sl
 8005f8e:	f1ba 0f02 	cmp.w	sl, #2
 8005f92:	d1ec      	bne.n	8005f6e <_scanf_float+0x2c6>
 8005f94:	3d03      	subs	r5, #3
 8005f96:	b2ed      	uxtb	r5, r5
 8005f98:	1b76      	subs	r6, r6, r5
 8005f9a:	6823      	ldr	r3, [r4, #0]
 8005f9c:	05da      	lsls	r2, r3, #23
 8005f9e:	d52f      	bpl.n	8006000 <_scanf_float+0x358>
 8005fa0:	055b      	lsls	r3, r3, #21
 8005fa2:	d510      	bpl.n	8005fc6 <_scanf_float+0x31e>
 8005fa4:	455e      	cmp	r6, fp
 8005fa6:	f67f aebf 	bls.w	8005d28 <_scanf_float+0x80>
 8005faa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005fb2:	463a      	mov	r2, r7
 8005fb4:	4640      	mov	r0, r8
 8005fb6:	4798      	blx	r3
 8005fb8:	6923      	ldr	r3, [r4, #16]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	6123      	str	r3, [r4, #16]
 8005fbe:	e7f1      	b.n	8005fa4 <_scanf_float+0x2fc>
 8005fc0:	46aa      	mov	sl, r5
 8005fc2:	9602      	str	r6, [sp, #8]
 8005fc4:	e7df      	b.n	8005f86 <_scanf_float+0x2de>
 8005fc6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005fca:	6923      	ldr	r3, [r4, #16]
 8005fcc:	2965      	cmp	r1, #101	; 0x65
 8005fce:	f103 33ff 	add.w	r3, r3, #4294967295
 8005fd2:	f106 35ff 	add.w	r5, r6, #4294967295
 8005fd6:	6123      	str	r3, [r4, #16]
 8005fd8:	d00c      	beq.n	8005ff4 <_scanf_float+0x34c>
 8005fda:	2945      	cmp	r1, #69	; 0x45
 8005fdc:	d00a      	beq.n	8005ff4 <_scanf_float+0x34c>
 8005fde:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005fe2:	463a      	mov	r2, r7
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	4798      	blx	r3
 8005fe8:	6923      	ldr	r3, [r4, #16]
 8005fea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	1eb5      	subs	r5, r6, #2
 8005ff2:	6123      	str	r3, [r4, #16]
 8005ff4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005ff8:	463a      	mov	r2, r7
 8005ffa:	4640      	mov	r0, r8
 8005ffc:	4798      	blx	r3
 8005ffe:	462e      	mov	r6, r5
 8006000:	6825      	ldr	r5, [r4, #0]
 8006002:	f015 0510 	ands.w	r5, r5, #16
 8006006:	d158      	bne.n	80060ba <_scanf_float+0x412>
 8006008:	7035      	strb	r5, [r6, #0]
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006014:	d11c      	bne.n	8006050 <_scanf_float+0x3a8>
 8006016:	9b01      	ldr	r3, [sp, #4]
 8006018:	454b      	cmp	r3, r9
 800601a:	eba3 0209 	sub.w	r2, r3, r9
 800601e:	d124      	bne.n	800606a <_scanf_float+0x3c2>
 8006020:	2200      	movs	r2, #0
 8006022:	4659      	mov	r1, fp
 8006024:	4640      	mov	r0, r8
 8006026:	f000 feb5 	bl	8006d94 <_strtod_r>
 800602a:	9b03      	ldr	r3, [sp, #12]
 800602c:	6821      	ldr	r1, [r4, #0]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f011 0f02 	tst.w	r1, #2
 8006034:	ec57 6b10 	vmov	r6, r7, d0
 8006038:	f103 0204 	add.w	r2, r3, #4
 800603c:	d020      	beq.n	8006080 <_scanf_float+0x3d8>
 800603e:	9903      	ldr	r1, [sp, #12]
 8006040:	600a      	str	r2, [r1, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	e9c3 6700 	strd	r6, r7, [r3]
 8006048:	68e3      	ldr	r3, [r4, #12]
 800604a:	3301      	adds	r3, #1
 800604c:	60e3      	str	r3, [r4, #12]
 800604e:	e66c      	b.n	8005d2a <_scanf_float+0x82>
 8006050:	9b04      	ldr	r3, [sp, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0e4      	beq.n	8006020 <_scanf_float+0x378>
 8006056:	9905      	ldr	r1, [sp, #20]
 8006058:	230a      	movs	r3, #10
 800605a:	462a      	mov	r2, r5
 800605c:	3101      	adds	r1, #1
 800605e:	4640      	mov	r0, r8
 8006060:	f000 ff22 	bl	8006ea8 <_strtol_r>
 8006064:	9b04      	ldr	r3, [sp, #16]
 8006066:	9e05      	ldr	r6, [sp, #20]
 8006068:	1ac2      	subs	r2, r0, r3
 800606a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800606e:	429e      	cmp	r6, r3
 8006070:	bf28      	it	cs
 8006072:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006076:	4912      	ldr	r1, [pc, #72]	; (80060c0 <_scanf_float+0x418>)
 8006078:	4630      	mov	r0, r6
 800607a:	f000 f843 	bl	8006104 <siprintf>
 800607e:	e7cf      	b.n	8006020 <_scanf_float+0x378>
 8006080:	f011 0f04 	tst.w	r1, #4
 8006084:	9903      	ldr	r1, [sp, #12]
 8006086:	600a      	str	r2, [r1, #0]
 8006088:	d1db      	bne.n	8006042 <_scanf_float+0x39a>
 800608a:	f8d3 8000 	ldr.w	r8, [r3]
 800608e:	ee10 2a10 	vmov	r2, s0
 8006092:	ee10 0a10 	vmov	r0, s0
 8006096:	463b      	mov	r3, r7
 8006098:	4639      	mov	r1, r7
 800609a:	f7fa fdaf 	bl	8000bfc <__aeabi_dcmpun>
 800609e:	b128      	cbz	r0, 80060ac <_scanf_float+0x404>
 80060a0:	4808      	ldr	r0, [pc, #32]	; (80060c4 <_scanf_float+0x41c>)
 80060a2:	f000 f829 	bl	80060f8 <nanf>
 80060a6:	ed88 0a00 	vstr	s0, [r8]
 80060aa:	e7cd      	b.n	8006048 <_scanf_float+0x3a0>
 80060ac:	4630      	mov	r0, r6
 80060ae:	4639      	mov	r1, r7
 80060b0:	f7fa fe02 	bl	8000cb8 <__aeabi_d2f>
 80060b4:	f8c8 0000 	str.w	r0, [r8]
 80060b8:	e7c6      	b.n	8006048 <_scanf_float+0x3a0>
 80060ba:	2500      	movs	r5, #0
 80060bc:	e635      	b.n	8005d2a <_scanf_float+0x82>
 80060be:	bf00      	nop
 80060c0:	0801d978 	.word	0x0801d978
 80060c4:	0801ddf0 	.word	0x0801ddf0

080060c8 <iprintf>:
 80060c8:	b40f      	push	{r0, r1, r2, r3}
 80060ca:	4b0a      	ldr	r3, [pc, #40]	; (80060f4 <iprintf+0x2c>)
 80060cc:	b513      	push	{r0, r1, r4, lr}
 80060ce:	681c      	ldr	r4, [r3, #0]
 80060d0:	b124      	cbz	r4, 80060dc <iprintf+0x14>
 80060d2:	69a3      	ldr	r3, [r4, #24]
 80060d4:	b913      	cbnz	r3, 80060dc <iprintf+0x14>
 80060d6:	4620      	mov	r0, r4
 80060d8:	f001 fdba 	bl	8007c50 <__sinit>
 80060dc:	ab05      	add	r3, sp, #20
 80060de:	9a04      	ldr	r2, [sp, #16]
 80060e0:	68a1      	ldr	r1, [r4, #8]
 80060e2:	9301      	str	r3, [sp, #4]
 80060e4:	4620      	mov	r0, r4
 80060e6:	f003 f8e9 	bl	80092bc <_vfiprintf_r>
 80060ea:	b002      	add	sp, #8
 80060ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060f0:	b004      	add	sp, #16
 80060f2:	4770      	bx	lr
 80060f4:	2000000c 	.word	0x2000000c

080060f8 <nanf>:
 80060f8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006100 <nanf+0x8>
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	7fc00000 	.word	0x7fc00000

08006104 <siprintf>:
 8006104:	b40e      	push	{r1, r2, r3}
 8006106:	b500      	push	{lr}
 8006108:	b09c      	sub	sp, #112	; 0x70
 800610a:	ab1d      	add	r3, sp, #116	; 0x74
 800610c:	9002      	str	r0, [sp, #8]
 800610e:	9006      	str	r0, [sp, #24]
 8006110:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006114:	4809      	ldr	r0, [pc, #36]	; (800613c <siprintf+0x38>)
 8006116:	9107      	str	r1, [sp, #28]
 8006118:	9104      	str	r1, [sp, #16]
 800611a:	4909      	ldr	r1, [pc, #36]	; (8006140 <siprintf+0x3c>)
 800611c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006120:	9105      	str	r1, [sp, #20]
 8006122:	6800      	ldr	r0, [r0, #0]
 8006124:	9301      	str	r3, [sp, #4]
 8006126:	a902      	add	r1, sp, #8
 8006128:	f002 ff9e 	bl	8009068 <_svfiprintf_r>
 800612c:	9b02      	ldr	r3, [sp, #8]
 800612e:	2200      	movs	r2, #0
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	b01c      	add	sp, #112	; 0x70
 8006134:	f85d eb04 	ldr.w	lr, [sp], #4
 8006138:	b003      	add	sp, #12
 800613a:	4770      	bx	lr
 800613c:	2000000c 	.word	0x2000000c
 8006140:	ffff0208 	.word	0xffff0208

08006144 <sulp>:
 8006144:	b570      	push	{r4, r5, r6, lr}
 8006146:	4604      	mov	r4, r0
 8006148:	460d      	mov	r5, r1
 800614a:	ec45 4b10 	vmov	d0, r4, r5
 800614e:	4616      	mov	r6, r2
 8006150:	f002 fd26 	bl	8008ba0 <__ulp>
 8006154:	ec51 0b10 	vmov	r0, r1, d0
 8006158:	b17e      	cbz	r6, 800617a <sulp+0x36>
 800615a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800615e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006162:	2b00      	cmp	r3, #0
 8006164:	dd09      	ble.n	800617a <sulp+0x36>
 8006166:	051b      	lsls	r3, r3, #20
 8006168:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800616c:	2400      	movs	r4, #0
 800616e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006172:	4622      	mov	r2, r4
 8006174:	462b      	mov	r3, r5
 8006176:	f7fa faa7 	bl	80006c8 <__aeabi_dmul>
 800617a:	bd70      	pop	{r4, r5, r6, pc}
 800617c:	0000      	movs	r0, r0
	...

08006180 <_strtod_l>:
 8006180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006184:	b0a3      	sub	sp, #140	; 0x8c
 8006186:	461f      	mov	r7, r3
 8006188:	2300      	movs	r3, #0
 800618a:	931e      	str	r3, [sp, #120]	; 0x78
 800618c:	4ba4      	ldr	r3, [pc, #656]	; (8006420 <_strtod_l+0x2a0>)
 800618e:	9219      	str	r2, [sp, #100]	; 0x64
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	9307      	str	r3, [sp, #28]
 8006194:	4604      	mov	r4, r0
 8006196:	4618      	mov	r0, r3
 8006198:	4688      	mov	r8, r1
 800619a:	f7fa f87b 	bl	8000294 <strlen>
 800619e:	f04f 0a00 	mov.w	sl, #0
 80061a2:	4605      	mov	r5, r0
 80061a4:	f04f 0b00 	mov.w	fp, #0
 80061a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80061ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80061ae:	781a      	ldrb	r2, [r3, #0]
 80061b0:	2a2b      	cmp	r2, #43	; 0x2b
 80061b2:	d04c      	beq.n	800624e <_strtod_l+0xce>
 80061b4:	d839      	bhi.n	800622a <_strtod_l+0xaa>
 80061b6:	2a0d      	cmp	r2, #13
 80061b8:	d832      	bhi.n	8006220 <_strtod_l+0xa0>
 80061ba:	2a08      	cmp	r2, #8
 80061bc:	d832      	bhi.n	8006224 <_strtod_l+0xa4>
 80061be:	2a00      	cmp	r2, #0
 80061c0:	d03c      	beq.n	800623c <_strtod_l+0xbc>
 80061c2:	2300      	movs	r3, #0
 80061c4:	930e      	str	r3, [sp, #56]	; 0x38
 80061c6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80061c8:	7833      	ldrb	r3, [r6, #0]
 80061ca:	2b30      	cmp	r3, #48	; 0x30
 80061cc:	f040 80b4 	bne.w	8006338 <_strtod_l+0x1b8>
 80061d0:	7873      	ldrb	r3, [r6, #1]
 80061d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80061d6:	2b58      	cmp	r3, #88	; 0x58
 80061d8:	d16c      	bne.n	80062b4 <_strtod_l+0x134>
 80061da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	ab1e      	add	r3, sp, #120	; 0x78
 80061e0:	9702      	str	r7, [sp, #8]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	4a8f      	ldr	r2, [pc, #572]	; (8006424 <_strtod_l+0x2a4>)
 80061e6:	ab1f      	add	r3, sp, #124	; 0x7c
 80061e8:	a91d      	add	r1, sp, #116	; 0x74
 80061ea:	4620      	mov	r0, r4
 80061ec:	f001 fe34 	bl	8007e58 <__gethex>
 80061f0:	f010 0707 	ands.w	r7, r0, #7
 80061f4:	4605      	mov	r5, r0
 80061f6:	d005      	beq.n	8006204 <_strtod_l+0x84>
 80061f8:	2f06      	cmp	r7, #6
 80061fa:	d12a      	bne.n	8006252 <_strtod_l+0xd2>
 80061fc:	3601      	adds	r6, #1
 80061fe:	2300      	movs	r3, #0
 8006200:	961d      	str	r6, [sp, #116]	; 0x74
 8006202:	930e      	str	r3, [sp, #56]	; 0x38
 8006204:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006206:	2b00      	cmp	r3, #0
 8006208:	f040 8596 	bne.w	8006d38 <_strtod_l+0xbb8>
 800620c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800620e:	b1db      	cbz	r3, 8006248 <_strtod_l+0xc8>
 8006210:	4652      	mov	r2, sl
 8006212:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006216:	ec43 2b10 	vmov	d0, r2, r3
 800621a:	b023      	add	sp, #140	; 0x8c
 800621c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006220:	2a20      	cmp	r2, #32
 8006222:	d1ce      	bne.n	80061c2 <_strtod_l+0x42>
 8006224:	3301      	adds	r3, #1
 8006226:	931d      	str	r3, [sp, #116]	; 0x74
 8006228:	e7c0      	b.n	80061ac <_strtod_l+0x2c>
 800622a:	2a2d      	cmp	r2, #45	; 0x2d
 800622c:	d1c9      	bne.n	80061c2 <_strtod_l+0x42>
 800622e:	2201      	movs	r2, #1
 8006230:	920e      	str	r2, [sp, #56]	; 0x38
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	921d      	str	r2, [sp, #116]	; 0x74
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1c4      	bne.n	80061c6 <_strtod_l+0x46>
 800623c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800623e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006242:	2b00      	cmp	r3, #0
 8006244:	f040 8576 	bne.w	8006d34 <_strtod_l+0xbb4>
 8006248:	4652      	mov	r2, sl
 800624a:	465b      	mov	r3, fp
 800624c:	e7e3      	b.n	8006216 <_strtod_l+0x96>
 800624e:	2200      	movs	r2, #0
 8006250:	e7ee      	b.n	8006230 <_strtod_l+0xb0>
 8006252:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006254:	b13a      	cbz	r2, 8006266 <_strtod_l+0xe6>
 8006256:	2135      	movs	r1, #53	; 0x35
 8006258:	a820      	add	r0, sp, #128	; 0x80
 800625a:	f002 fdac 	bl	8008db6 <__copybits>
 800625e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006260:	4620      	mov	r0, r4
 8006262:	f002 f971 	bl	8008548 <_Bfree>
 8006266:	3f01      	subs	r7, #1
 8006268:	2f05      	cmp	r7, #5
 800626a:	d807      	bhi.n	800627c <_strtod_l+0xfc>
 800626c:	e8df f007 	tbb	[pc, r7]
 8006270:	1d180b0e 	.word	0x1d180b0e
 8006274:	030e      	.short	0x030e
 8006276:	f04f 0b00 	mov.w	fp, #0
 800627a:	46da      	mov	sl, fp
 800627c:	0728      	lsls	r0, r5, #28
 800627e:	d5c1      	bpl.n	8006204 <_strtod_l+0x84>
 8006280:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006284:	e7be      	b.n	8006204 <_strtod_l+0x84>
 8006286:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800628a:	e7f7      	b.n	800627c <_strtod_l+0xfc>
 800628c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006290:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006292:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006296:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800629a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800629e:	e7ed      	b.n	800627c <_strtod_l+0xfc>
 80062a0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006428 <_strtod_l+0x2a8>
 80062a4:	f04f 0a00 	mov.w	sl, #0
 80062a8:	e7e8      	b.n	800627c <_strtod_l+0xfc>
 80062aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80062ae:	f04f 3aff 	mov.w	sl, #4294967295
 80062b2:	e7e3      	b.n	800627c <_strtod_l+0xfc>
 80062b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	921d      	str	r2, [sp, #116]	; 0x74
 80062ba:	785b      	ldrb	r3, [r3, #1]
 80062bc:	2b30      	cmp	r3, #48	; 0x30
 80062be:	d0f9      	beq.n	80062b4 <_strtod_l+0x134>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d09f      	beq.n	8006204 <_strtod_l+0x84>
 80062c4:	2301      	movs	r3, #1
 80062c6:	f04f 0900 	mov.w	r9, #0
 80062ca:	9304      	str	r3, [sp, #16]
 80062cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80062ce:	930a      	str	r3, [sp, #40]	; 0x28
 80062d0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80062d4:	464f      	mov	r7, r9
 80062d6:	220a      	movs	r2, #10
 80062d8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80062da:	7806      	ldrb	r6, [r0, #0]
 80062dc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80062e0:	b2d9      	uxtb	r1, r3
 80062e2:	2909      	cmp	r1, #9
 80062e4:	d92a      	bls.n	800633c <_strtod_l+0x1bc>
 80062e6:	9907      	ldr	r1, [sp, #28]
 80062e8:	462a      	mov	r2, r5
 80062ea:	f003 f974 	bl	80095d6 <strncmp>
 80062ee:	b398      	cbz	r0, 8006358 <_strtod_l+0x1d8>
 80062f0:	2000      	movs	r0, #0
 80062f2:	4633      	mov	r3, r6
 80062f4:	463d      	mov	r5, r7
 80062f6:	9007      	str	r0, [sp, #28]
 80062f8:	4602      	mov	r2, r0
 80062fa:	2b65      	cmp	r3, #101	; 0x65
 80062fc:	d001      	beq.n	8006302 <_strtod_l+0x182>
 80062fe:	2b45      	cmp	r3, #69	; 0x45
 8006300:	d118      	bne.n	8006334 <_strtod_l+0x1b4>
 8006302:	b91d      	cbnz	r5, 800630c <_strtod_l+0x18c>
 8006304:	9b04      	ldr	r3, [sp, #16]
 8006306:	4303      	orrs	r3, r0
 8006308:	d098      	beq.n	800623c <_strtod_l+0xbc>
 800630a:	2500      	movs	r5, #0
 800630c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8006310:	f108 0301 	add.w	r3, r8, #1
 8006314:	931d      	str	r3, [sp, #116]	; 0x74
 8006316:	f898 3001 	ldrb.w	r3, [r8, #1]
 800631a:	2b2b      	cmp	r3, #43	; 0x2b
 800631c:	d075      	beq.n	800640a <_strtod_l+0x28a>
 800631e:	2b2d      	cmp	r3, #45	; 0x2d
 8006320:	d07b      	beq.n	800641a <_strtod_l+0x29a>
 8006322:	f04f 0c00 	mov.w	ip, #0
 8006326:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800632a:	2909      	cmp	r1, #9
 800632c:	f240 8082 	bls.w	8006434 <_strtod_l+0x2b4>
 8006330:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006334:	2600      	movs	r6, #0
 8006336:	e09d      	b.n	8006474 <_strtod_l+0x2f4>
 8006338:	2300      	movs	r3, #0
 800633a:	e7c4      	b.n	80062c6 <_strtod_l+0x146>
 800633c:	2f08      	cmp	r7, #8
 800633e:	bfd8      	it	le
 8006340:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006342:	f100 0001 	add.w	r0, r0, #1
 8006346:	bfda      	itte	le
 8006348:	fb02 3301 	mlale	r3, r2, r1, r3
 800634c:	9309      	strle	r3, [sp, #36]	; 0x24
 800634e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006352:	3701      	adds	r7, #1
 8006354:	901d      	str	r0, [sp, #116]	; 0x74
 8006356:	e7bf      	b.n	80062d8 <_strtod_l+0x158>
 8006358:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800635a:	195a      	adds	r2, r3, r5
 800635c:	921d      	str	r2, [sp, #116]	; 0x74
 800635e:	5d5b      	ldrb	r3, [r3, r5]
 8006360:	2f00      	cmp	r7, #0
 8006362:	d037      	beq.n	80063d4 <_strtod_l+0x254>
 8006364:	9007      	str	r0, [sp, #28]
 8006366:	463d      	mov	r5, r7
 8006368:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800636c:	2a09      	cmp	r2, #9
 800636e:	d912      	bls.n	8006396 <_strtod_l+0x216>
 8006370:	2201      	movs	r2, #1
 8006372:	e7c2      	b.n	80062fa <_strtod_l+0x17a>
 8006374:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	921d      	str	r2, [sp, #116]	; 0x74
 800637a:	785b      	ldrb	r3, [r3, #1]
 800637c:	3001      	adds	r0, #1
 800637e:	2b30      	cmp	r3, #48	; 0x30
 8006380:	d0f8      	beq.n	8006374 <_strtod_l+0x1f4>
 8006382:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006386:	2a08      	cmp	r2, #8
 8006388:	f200 84db 	bhi.w	8006d42 <_strtod_l+0xbc2>
 800638c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800638e:	9007      	str	r0, [sp, #28]
 8006390:	2000      	movs	r0, #0
 8006392:	920a      	str	r2, [sp, #40]	; 0x28
 8006394:	4605      	mov	r5, r0
 8006396:	3b30      	subs	r3, #48	; 0x30
 8006398:	f100 0201 	add.w	r2, r0, #1
 800639c:	d014      	beq.n	80063c8 <_strtod_l+0x248>
 800639e:	9907      	ldr	r1, [sp, #28]
 80063a0:	4411      	add	r1, r2
 80063a2:	9107      	str	r1, [sp, #28]
 80063a4:	462a      	mov	r2, r5
 80063a6:	eb00 0e05 	add.w	lr, r0, r5
 80063aa:	210a      	movs	r1, #10
 80063ac:	4572      	cmp	r2, lr
 80063ae:	d113      	bne.n	80063d8 <_strtod_l+0x258>
 80063b0:	182a      	adds	r2, r5, r0
 80063b2:	2a08      	cmp	r2, #8
 80063b4:	f105 0501 	add.w	r5, r5, #1
 80063b8:	4405      	add	r5, r0
 80063ba:	dc1c      	bgt.n	80063f6 <_strtod_l+0x276>
 80063bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80063be:	220a      	movs	r2, #10
 80063c0:	fb02 3301 	mla	r3, r2, r1, r3
 80063c4:	9309      	str	r3, [sp, #36]	; 0x24
 80063c6:	2200      	movs	r2, #0
 80063c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063ca:	1c59      	adds	r1, r3, #1
 80063cc:	911d      	str	r1, [sp, #116]	; 0x74
 80063ce:	785b      	ldrb	r3, [r3, #1]
 80063d0:	4610      	mov	r0, r2
 80063d2:	e7c9      	b.n	8006368 <_strtod_l+0x1e8>
 80063d4:	4638      	mov	r0, r7
 80063d6:	e7d2      	b.n	800637e <_strtod_l+0x1fe>
 80063d8:	2a08      	cmp	r2, #8
 80063da:	dc04      	bgt.n	80063e6 <_strtod_l+0x266>
 80063dc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80063de:	434e      	muls	r6, r1
 80063e0:	9609      	str	r6, [sp, #36]	; 0x24
 80063e2:	3201      	adds	r2, #1
 80063e4:	e7e2      	b.n	80063ac <_strtod_l+0x22c>
 80063e6:	f102 0c01 	add.w	ip, r2, #1
 80063ea:	f1bc 0f10 	cmp.w	ip, #16
 80063ee:	bfd8      	it	le
 80063f0:	fb01 f909 	mulle.w	r9, r1, r9
 80063f4:	e7f5      	b.n	80063e2 <_strtod_l+0x262>
 80063f6:	2d10      	cmp	r5, #16
 80063f8:	bfdc      	itt	le
 80063fa:	220a      	movle	r2, #10
 80063fc:	fb02 3909 	mlale	r9, r2, r9, r3
 8006400:	e7e1      	b.n	80063c6 <_strtod_l+0x246>
 8006402:	2300      	movs	r3, #0
 8006404:	9307      	str	r3, [sp, #28]
 8006406:	2201      	movs	r2, #1
 8006408:	e77c      	b.n	8006304 <_strtod_l+0x184>
 800640a:	f04f 0c00 	mov.w	ip, #0
 800640e:	f108 0302 	add.w	r3, r8, #2
 8006412:	931d      	str	r3, [sp, #116]	; 0x74
 8006414:	f898 3002 	ldrb.w	r3, [r8, #2]
 8006418:	e785      	b.n	8006326 <_strtod_l+0x1a6>
 800641a:	f04f 0c01 	mov.w	ip, #1
 800641e:	e7f6      	b.n	800640e <_strtod_l+0x28e>
 8006420:	0801dc34 	.word	0x0801dc34
 8006424:	0801d980 	.word	0x0801d980
 8006428:	7ff00000 	.word	0x7ff00000
 800642c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800642e:	1c59      	adds	r1, r3, #1
 8006430:	911d      	str	r1, [sp, #116]	; 0x74
 8006432:	785b      	ldrb	r3, [r3, #1]
 8006434:	2b30      	cmp	r3, #48	; 0x30
 8006436:	d0f9      	beq.n	800642c <_strtod_l+0x2ac>
 8006438:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800643c:	2908      	cmp	r1, #8
 800643e:	f63f af79 	bhi.w	8006334 <_strtod_l+0x1b4>
 8006442:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006446:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006448:	9308      	str	r3, [sp, #32]
 800644a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800644c:	1c59      	adds	r1, r3, #1
 800644e:	911d      	str	r1, [sp, #116]	; 0x74
 8006450:	785b      	ldrb	r3, [r3, #1]
 8006452:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006456:	2e09      	cmp	r6, #9
 8006458:	d937      	bls.n	80064ca <_strtod_l+0x34a>
 800645a:	9e08      	ldr	r6, [sp, #32]
 800645c:	1b89      	subs	r1, r1, r6
 800645e:	2908      	cmp	r1, #8
 8006460:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006464:	dc02      	bgt.n	800646c <_strtod_l+0x2ec>
 8006466:	4576      	cmp	r6, lr
 8006468:	bfa8      	it	ge
 800646a:	4676      	movge	r6, lr
 800646c:	f1bc 0f00 	cmp.w	ip, #0
 8006470:	d000      	beq.n	8006474 <_strtod_l+0x2f4>
 8006472:	4276      	negs	r6, r6
 8006474:	2d00      	cmp	r5, #0
 8006476:	d14f      	bne.n	8006518 <_strtod_l+0x398>
 8006478:	9904      	ldr	r1, [sp, #16]
 800647a:	4301      	orrs	r1, r0
 800647c:	f47f aec2 	bne.w	8006204 <_strtod_l+0x84>
 8006480:	2a00      	cmp	r2, #0
 8006482:	f47f aedb 	bne.w	800623c <_strtod_l+0xbc>
 8006486:	2b69      	cmp	r3, #105	; 0x69
 8006488:	d027      	beq.n	80064da <_strtod_l+0x35a>
 800648a:	dc24      	bgt.n	80064d6 <_strtod_l+0x356>
 800648c:	2b49      	cmp	r3, #73	; 0x49
 800648e:	d024      	beq.n	80064da <_strtod_l+0x35a>
 8006490:	2b4e      	cmp	r3, #78	; 0x4e
 8006492:	f47f aed3 	bne.w	800623c <_strtod_l+0xbc>
 8006496:	499e      	ldr	r1, [pc, #632]	; (8006710 <_strtod_l+0x590>)
 8006498:	a81d      	add	r0, sp, #116	; 0x74
 800649a:	f001 ff35 	bl	8008308 <__match>
 800649e:	2800      	cmp	r0, #0
 80064a0:	f43f aecc 	beq.w	800623c <_strtod_l+0xbc>
 80064a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b28      	cmp	r3, #40	; 0x28
 80064aa:	d12d      	bne.n	8006508 <_strtod_l+0x388>
 80064ac:	4999      	ldr	r1, [pc, #612]	; (8006714 <_strtod_l+0x594>)
 80064ae:	aa20      	add	r2, sp, #128	; 0x80
 80064b0:	a81d      	add	r0, sp, #116	; 0x74
 80064b2:	f001 ff3d 	bl	8008330 <__hexnan>
 80064b6:	2805      	cmp	r0, #5
 80064b8:	d126      	bne.n	8006508 <_strtod_l+0x388>
 80064ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064bc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80064c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80064c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80064c8:	e69c      	b.n	8006204 <_strtod_l+0x84>
 80064ca:	210a      	movs	r1, #10
 80064cc:	fb01 3e0e 	mla	lr, r1, lr, r3
 80064d0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80064d4:	e7b9      	b.n	800644a <_strtod_l+0x2ca>
 80064d6:	2b6e      	cmp	r3, #110	; 0x6e
 80064d8:	e7db      	b.n	8006492 <_strtod_l+0x312>
 80064da:	498f      	ldr	r1, [pc, #572]	; (8006718 <_strtod_l+0x598>)
 80064dc:	a81d      	add	r0, sp, #116	; 0x74
 80064de:	f001 ff13 	bl	8008308 <__match>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	f43f aeaa 	beq.w	800623c <_strtod_l+0xbc>
 80064e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064ea:	498c      	ldr	r1, [pc, #560]	; (800671c <_strtod_l+0x59c>)
 80064ec:	3b01      	subs	r3, #1
 80064ee:	a81d      	add	r0, sp, #116	; 0x74
 80064f0:	931d      	str	r3, [sp, #116]	; 0x74
 80064f2:	f001 ff09 	bl	8008308 <__match>
 80064f6:	b910      	cbnz	r0, 80064fe <_strtod_l+0x37e>
 80064f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064fa:	3301      	adds	r3, #1
 80064fc:	931d      	str	r3, [sp, #116]	; 0x74
 80064fe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800672c <_strtod_l+0x5ac>
 8006502:	f04f 0a00 	mov.w	sl, #0
 8006506:	e67d      	b.n	8006204 <_strtod_l+0x84>
 8006508:	4885      	ldr	r0, [pc, #532]	; (8006720 <_strtod_l+0x5a0>)
 800650a:	f003 f809 	bl	8009520 <nan>
 800650e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006512:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8006516:	e675      	b.n	8006204 <_strtod_l+0x84>
 8006518:	9b07      	ldr	r3, [sp, #28]
 800651a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800651c:	1af3      	subs	r3, r6, r3
 800651e:	2f00      	cmp	r7, #0
 8006520:	bf08      	it	eq
 8006522:	462f      	moveq	r7, r5
 8006524:	2d10      	cmp	r5, #16
 8006526:	9308      	str	r3, [sp, #32]
 8006528:	46a8      	mov	r8, r5
 800652a:	bfa8      	it	ge
 800652c:	f04f 0810 	movge.w	r8, #16
 8006530:	f7fa f850 	bl	80005d4 <__aeabi_ui2d>
 8006534:	2d09      	cmp	r5, #9
 8006536:	4682      	mov	sl, r0
 8006538:	468b      	mov	fp, r1
 800653a:	dd13      	ble.n	8006564 <_strtod_l+0x3e4>
 800653c:	4b79      	ldr	r3, [pc, #484]	; (8006724 <_strtod_l+0x5a4>)
 800653e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006542:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006546:	f7fa f8bf 	bl	80006c8 <__aeabi_dmul>
 800654a:	4682      	mov	sl, r0
 800654c:	4648      	mov	r0, r9
 800654e:	468b      	mov	fp, r1
 8006550:	f7fa f840 	bl	80005d4 <__aeabi_ui2d>
 8006554:	4602      	mov	r2, r0
 8006556:	460b      	mov	r3, r1
 8006558:	4650      	mov	r0, sl
 800655a:	4659      	mov	r1, fp
 800655c:	f7f9 fefe 	bl	800035c <__adddf3>
 8006560:	4682      	mov	sl, r0
 8006562:	468b      	mov	fp, r1
 8006564:	2d0f      	cmp	r5, #15
 8006566:	dc38      	bgt.n	80065da <_strtod_l+0x45a>
 8006568:	9b08      	ldr	r3, [sp, #32]
 800656a:	2b00      	cmp	r3, #0
 800656c:	f43f ae4a 	beq.w	8006204 <_strtod_l+0x84>
 8006570:	dd24      	ble.n	80065bc <_strtod_l+0x43c>
 8006572:	2b16      	cmp	r3, #22
 8006574:	dc0b      	bgt.n	800658e <_strtod_l+0x40e>
 8006576:	4d6b      	ldr	r5, [pc, #428]	; (8006724 <_strtod_l+0x5a4>)
 8006578:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800657c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006580:	4652      	mov	r2, sl
 8006582:	465b      	mov	r3, fp
 8006584:	f7fa f8a0 	bl	80006c8 <__aeabi_dmul>
 8006588:	4682      	mov	sl, r0
 800658a:	468b      	mov	fp, r1
 800658c:	e63a      	b.n	8006204 <_strtod_l+0x84>
 800658e:	9a08      	ldr	r2, [sp, #32]
 8006590:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006594:	4293      	cmp	r3, r2
 8006596:	db20      	blt.n	80065da <_strtod_l+0x45a>
 8006598:	4c62      	ldr	r4, [pc, #392]	; (8006724 <_strtod_l+0x5a4>)
 800659a:	f1c5 050f 	rsb	r5, r5, #15
 800659e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80065a2:	4652      	mov	r2, sl
 80065a4:	465b      	mov	r3, fp
 80065a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065aa:	f7fa f88d 	bl	80006c8 <__aeabi_dmul>
 80065ae:	9b08      	ldr	r3, [sp, #32]
 80065b0:	1b5d      	subs	r5, r3, r5
 80065b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80065b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80065ba:	e7e3      	b.n	8006584 <_strtod_l+0x404>
 80065bc:	9b08      	ldr	r3, [sp, #32]
 80065be:	3316      	adds	r3, #22
 80065c0:	db0b      	blt.n	80065da <_strtod_l+0x45a>
 80065c2:	9b07      	ldr	r3, [sp, #28]
 80065c4:	4a57      	ldr	r2, [pc, #348]	; (8006724 <_strtod_l+0x5a4>)
 80065c6:	1b9e      	subs	r6, r3, r6
 80065c8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80065cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80065d0:	4650      	mov	r0, sl
 80065d2:	4659      	mov	r1, fp
 80065d4:	f7fa f9a2 	bl	800091c <__aeabi_ddiv>
 80065d8:	e7d6      	b.n	8006588 <_strtod_l+0x408>
 80065da:	9b08      	ldr	r3, [sp, #32]
 80065dc:	eba5 0808 	sub.w	r8, r5, r8
 80065e0:	4498      	add	r8, r3
 80065e2:	f1b8 0f00 	cmp.w	r8, #0
 80065e6:	dd71      	ble.n	80066cc <_strtod_l+0x54c>
 80065e8:	f018 030f 	ands.w	r3, r8, #15
 80065ec:	d00a      	beq.n	8006604 <_strtod_l+0x484>
 80065ee:	494d      	ldr	r1, [pc, #308]	; (8006724 <_strtod_l+0x5a4>)
 80065f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80065f4:	4652      	mov	r2, sl
 80065f6:	465b      	mov	r3, fp
 80065f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80065fc:	f7fa f864 	bl	80006c8 <__aeabi_dmul>
 8006600:	4682      	mov	sl, r0
 8006602:	468b      	mov	fp, r1
 8006604:	f038 080f 	bics.w	r8, r8, #15
 8006608:	d04d      	beq.n	80066a6 <_strtod_l+0x526>
 800660a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800660e:	dd22      	ble.n	8006656 <_strtod_l+0x4d6>
 8006610:	2500      	movs	r5, #0
 8006612:	462e      	mov	r6, r5
 8006614:	9509      	str	r5, [sp, #36]	; 0x24
 8006616:	9507      	str	r5, [sp, #28]
 8006618:	2322      	movs	r3, #34	; 0x22
 800661a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800672c <_strtod_l+0x5ac>
 800661e:	6023      	str	r3, [r4, #0]
 8006620:	f04f 0a00 	mov.w	sl, #0
 8006624:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006626:	2b00      	cmp	r3, #0
 8006628:	f43f adec 	beq.w	8006204 <_strtod_l+0x84>
 800662c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800662e:	4620      	mov	r0, r4
 8006630:	f001 ff8a 	bl	8008548 <_Bfree>
 8006634:	9907      	ldr	r1, [sp, #28]
 8006636:	4620      	mov	r0, r4
 8006638:	f001 ff86 	bl	8008548 <_Bfree>
 800663c:	4631      	mov	r1, r6
 800663e:	4620      	mov	r0, r4
 8006640:	f001 ff82 	bl	8008548 <_Bfree>
 8006644:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006646:	4620      	mov	r0, r4
 8006648:	f001 ff7e 	bl	8008548 <_Bfree>
 800664c:	4629      	mov	r1, r5
 800664e:	4620      	mov	r0, r4
 8006650:	f001 ff7a 	bl	8008548 <_Bfree>
 8006654:	e5d6      	b.n	8006204 <_strtod_l+0x84>
 8006656:	2300      	movs	r3, #0
 8006658:	ea4f 1828 	mov.w	r8, r8, asr #4
 800665c:	4650      	mov	r0, sl
 800665e:	4659      	mov	r1, fp
 8006660:	4699      	mov	r9, r3
 8006662:	f1b8 0f01 	cmp.w	r8, #1
 8006666:	dc21      	bgt.n	80066ac <_strtod_l+0x52c>
 8006668:	b10b      	cbz	r3, 800666e <_strtod_l+0x4ee>
 800666a:	4682      	mov	sl, r0
 800666c:	468b      	mov	fp, r1
 800666e:	4b2e      	ldr	r3, [pc, #184]	; (8006728 <_strtod_l+0x5a8>)
 8006670:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006674:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006678:	4652      	mov	r2, sl
 800667a:	465b      	mov	r3, fp
 800667c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006680:	f7fa f822 	bl	80006c8 <__aeabi_dmul>
 8006684:	4b29      	ldr	r3, [pc, #164]	; (800672c <_strtod_l+0x5ac>)
 8006686:	460a      	mov	r2, r1
 8006688:	400b      	ands	r3, r1
 800668a:	4929      	ldr	r1, [pc, #164]	; (8006730 <_strtod_l+0x5b0>)
 800668c:	428b      	cmp	r3, r1
 800668e:	4682      	mov	sl, r0
 8006690:	d8be      	bhi.n	8006610 <_strtod_l+0x490>
 8006692:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006696:	428b      	cmp	r3, r1
 8006698:	bf86      	itte	hi
 800669a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006734 <_strtod_l+0x5b4>
 800669e:	f04f 3aff 	movhi.w	sl, #4294967295
 80066a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80066a6:	2300      	movs	r3, #0
 80066a8:	9304      	str	r3, [sp, #16]
 80066aa:	e081      	b.n	80067b0 <_strtod_l+0x630>
 80066ac:	f018 0f01 	tst.w	r8, #1
 80066b0:	d007      	beq.n	80066c2 <_strtod_l+0x542>
 80066b2:	4b1d      	ldr	r3, [pc, #116]	; (8006728 <_strtod_l+0x5a8>)
 80066b4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	f7fa f804 	bl	80006c8 <__aeabi_dmul>
 80066c0:	2301      	movs	r3, #1
 80066c2:	f109 0901 	add.w	r9, r9, #1
 80066c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80066ca:	e7ca      	b.n	8006662 <_strtod_l+0x4e2>
 80066cc:	d0eb      	beq.n	80066a6 <_strtod_l+0x526>
 80066ce:	f1c8 0800 	rsb	r8, r8, #0
 80066d2:	f018 020f 	ands.w	r2, r8, #15
 80066d6:	d00a      	beq.n	80066ee <_strtod_l+0x56e>
 80066d8:	4b12      	ldr	r3, [pc, #72]	; (8006724 <_strtod_l+0x5a4>)
 80066da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066de:	4650      	mov	r0, sl
 80066e0:	4659      	mov	r1, fp
 80066e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e6:	f7fa f919 	bl	800091c <__aeabi_ddiv>
 80066ea:	4682      	mov	sl, r0
 80066ec:	468b      	mov	fp, r1
 80066ee:	ea5f 1828 	movs.w	r8, r8, asr #4
 80066f2:	d0d8      	beq.n	80066a6 <_strtod_l+0x526>
 80066f4:	f1b8 0f1f 	cmp.w	r8, #31
 80066f8:	dd1e      	ble.n	8006738 <_strtod_l+0x5b8>
 80066fa:	2500      	movs	r5, #0
 80066fc:	462e      	mov	r6, r5
 80066fe:	9509      	str	r5, [sp, #36]	; 0x24
 8006700:	9507      	str	r5, [sp, #28]
 8006702:	2322      	movs	r3, #34	; 0x22
 8006704:	f04f 0a00 	mov.w	sl, #0
 8006708:	f04f 0b00 	mov.w	fp, #0
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	e789      	b.n	8006624 <_strtod_l+0x4a4>
 8006710:	0801d951 	.word	0x0801d951
 8006714:	0801d994 	.word	0x0801d994
 8006718:	0801d949 	.word	0x0801d949
 800671c:	0801dad4 	.word	0x0801dad4
 8006720:	0801ddf0 	.word	0x0801ddf0
 8006724:	0801dcd0 	.word	0x0801dcd0
 8006728:	0801dca8 	.word	0x0801dca8
 800672c:	7ff00000 	.word	0x7ff00000
 8006730:	7ca00000 	.word	0x7ca00000
 8006734:	7fefffff 	.word	0x7fefffff
 8006738:	f018 0310 	ands.w	r3, r8, #16
 800673c:	bf18      	it	ne
 800673e:	236a      	movne	r3, #106	; 0x6a
 8006740:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006af8 <_strtod_l+0x978>
 8006744:	9304      	str	r3, [sp, #16]
 8006746:	4650      	mov	r0, sl
 8006748:	4659      	mov	r1, fp
 800674a:	2300      	movs	r3, #0
 800674c:	f018 0f01 	tst.w	r8, #1
 8006750:	d004      	beq.n	800675c <_strtod_l+0x5dc>
 8006752:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006756:	f7f9 ffb7 	bl	80006c8 <__aeabi_dmul>
 800675a:	2301      	movs	r3, #1
 800675c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006760:	f109 0908 	add.w	r9, r9, #8
 8006764:	d1f2      	bne.n	800674c <_strtod_l+0x5cc>
 8006766:	b10b      	cbz	r3, 800676c <_strtod_l+0x5ec>
 8006768:	4682      	mov	sl, r0
 800676a:	468b      	mov	fp, r1
 800676c:	9b04      	ldr	r3, [sp, #16]
 800676e:	b1bb      	cbz	r3, 80067a0 <_strtod_l+0x620>
 8006770:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006774:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006778:	2b00      	cmp	r3, #0
 800677a:	4659      	mov	r1, fp
 800677c:	dd10      	ble.n	80067a0 <_strtod_l+0x620>
 800677e:	2b1f      	cmp	r3, #31
 8006780:	f340 8128 	ble.w	80069d4 <_strtod_l+0x854>
 8006784:	2b34      	cmp	r3, #52	; 0x34
 8006786:	bfde      	ittt	le
 8006788:	3b20      	suble	r3, #32
 800678a:	f04f 32ff 	movle.w	r2, #4294967295
 800678e:	fa02 f303 	lslle.w	r3, r2, r3
 8006792:	f04f 0a00 	mov.w	sl, #0
 8006796:	bfcc      	ite	gt
 8006798:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800679c:	ea03 0b01 	andle.w	fp, r3, r1
 80067a0:	2200      	movs	r2, #0
 80067a2:	2300      	movs	r3, #0
 80067a4:	4650      	mov	r0, sl
 80067a6:	4659      	mov	r1, fp
 80067a8:	f7fa f9f6 	bl	8000b98 <__aeabi_dcmpeq>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d1a4      	bne.n	80066fa <_strtod_l+0x57a>
 80067b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067b6:	462b      	mov	r3, r5
 80067b8:	463a      	mov	r2, r7
 80067ba:	4620      	mov	r0, r4
 80067bc:	f001 ff30 	bl	8008620 <__s2b>
 80067c0:	9009      	str	r0, [sp, #36]	; 0x24
 80067c2:	2800      	cmp	r0, #0
 80067c4:	f43f af24 	beq.w	8006610 <_strtod_l+0x490>
 80067c8:	9b07      	ldr	r3, [sp, #28]
 80067ca:	1b9e      	subs	r6, r3, r6
 80067cc:	9b08      	ldr	r3, [sp, #32]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	bfb4      	ite	lt
 80067d2:	4633      	movlt	r3, r6
 80067d4:	2300      	movge	r3, #0
 80067d6:	9310      	str	r3, [sp, #64]	; 0x40
 80067d8:	9b08      	ldr	r3, [sp, #32]
 80067da:	2500      	movs	r5, #0
 80067dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80067e0:	9318      	str	r3, [sp, #96]	; 0x60
 80067e2:	462e      	mov	r6, r5
 80067e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067e6:	4620      	mov	r0, r4
 80067e8:	6859      	ldr	r1, [r3, #4]
 80067ea:	f001 fe6d 	bl	80084c8 <_Balloc>
 80067ee:	9007      	str	r0, [sp, #28]
 80067f0:	2800      	cmp	r0, #0
 80067f2:	f43f af11 	beq.w	8006618 <_strtod_l+0x498>
 80067f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067f8:	691a      	ldr	r2, [r3, #16]
 80067fa:	3202      	adds	r2, #2
 80067fc:	f103 010c 	add.w	r1, r3, #12
 8006800:	0092      	lsls	r2, r2, #2
 8006802:	300c      	adds	r0, #12
 8006804:	f001 fe52 	bl	80084ac <memcpy>
 8006808:	ec4b ab10 	vmov	d0, sl, fp
 800680c:	aa20      	add	r2, sp, #128	; 0x80
 800680e:	a91f      	add	r1, sp, #124	; 0x7c
 8006810:	4620      	mov	r0, r4
 8006812:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8006816:	f002 fa3f 	bl	8008c98 <__d2b>
 800681a:	901e      	str	r0, [sp, #120]	; 0x78
 800681c:	2800      	cmp	r0, #0
 800681e:	f43f aefb 	beq.w	8006618 <_strtod_l+0x498>
 8006822:	2101      	movs	r1, #1
 8006824:	4620      	mov	r0, r4
 8006826:	f001 ff95 	bl	8008754 <__i2b>
 800682a:	4606      	mov	r6, r0
 800682c:	2800      	cmp	r0, #0
 800682e:	f43f aef3 	beq.w	8006618 <_strtod_l+0x498>
 8006832:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006834:	9904      	ldr	r1, [sp, #16]
 8006836:	2b00      	cmp	r3, #0
 8006838:	bfab      	itete	ge
 800683a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800683c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800683e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006840:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006844:	bfac      	ite	ge
 8006846:	eb03 0902 	addge.w	r9, r3, r2
 800684a:	1ad7      	sublt	r7, r2, r3
 800684c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800684e:	eba3 0801 	sub.w	r8, r3, r1
 8006852:	4490      	add	r8, r2
 8006854:	4ba3      	ldr	r3, [pc, #652]	; (8006ae4 <_strtod_l+0x964>)
 8006856:	f108 38ff 	add.w	r8, r8, #4294967295
 800685a:	4598      	cmp	r8, r3
 800685c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006860:	f280 80cc 	bge.w	80069fc <_strtod_l+0x87c>
 8006864:	eba3 0308 	sub.w	r3, r3, r8
 8006868:	2b1f      	cmp	r3, #31
 800686a:	eba2 0203 	sub.w	r2, r2, r3
 800686e:	f04f 0101 	mov.w	r1, #1
 8006872:	f300 80b6 	bgt.w	80069e2 <_strtod_l+0x862>
 8006876:	fa01 f303 	lsl.w	r3, r1, r3
 800687a:	9311      	str	r3, [sp, #68]	; 0x44
 800687c:	2300      	movs	r3, #0
 800687e:	930c      	str	r3, [sp, #48]	; 0x30
 8006880:	eb09 0802 	add.w	r8, r9, r2
 8006884:	9b04      	ldr	r3, [sp, #16]
 8006886:	45c1      	cmp	r9, r8
 8006888:	4417      	add	r7, r2
 800688a:	441f      	add	r7, r3
 800688c:	464b      	mov	r3, r9
 800688e:	bfa8      	it	ge
 8006890:	4643      	movge	r3, r8
 8006892:	42bb      	cmp	r3, r7
 8006894:	bfa8      	it	ge
 8006896:	463b      	movge	r3, r7
 8006898:	2b00      	cmp	r3, #0
 800689a:	bfc2      	ittt	gt
 800689c:	eba8 0803 	subgt.w	r8, r8, r3
 80068a0:	1aff      	subgt	r7, r7, r3
 80068a2:	eba9 0903 	subgt.w	r9, r9, r3
 80068a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	dd17      	ble.n	80068dc <_strtod_l+0x75c>
 80068ac:	4631      	mov	r1, r6
 80068ae:	461a      	mov	r2, r3
 80068b0:	4620      	mov	r0, r4
 80068b2:	f002 f80b 	bl	80088cc <__pow5mult>
 80068b6:	4606      	mov	r6, r0
 80068b8:	2800      	cmp	r0, #0
 80068ba:	f43f aead 	beq.w	8006618 <_strtod_l+0x498>
 80068be:	4601      	mov	r1, r0
 80068c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80068c2:	4620      	mov	r0, r4
 80068c4:	f001 ff5c 	bl	8008780 <__multiply>
 80068c8:	900f      	str	r0, [sp, #60]	; 0x3c
 80068ca:	2800      	cmp	r0, #0
 80068cc:	f43f aea4 	beq.w	8006618 <_strtod_l+0x498>
 80068d0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80068d2:	4620      	mov	r0, r4
 80068d4:	f001 fe38 	bl	8008548 <_Bfree>
 80068d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068da:	931e      	str	r3, [sp, #120]	; 0x78
 80068dc:	f1b8 0f00 	cmp.w	r8, #0
 80068e0:	f300 8091 	bgt.w	8006a06 <_strtod_l+0x886>
 80068e4:	9b08      	ldr	r3, [sp, #32]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	dd08      	ble.n	80068fc <_strtod_l+0x77c>
 80068ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80068ec:	9907      	ldr	r1, [sp, #28]
 80068ee:	4620      	mov	r0, r4
 80068f0:	f001 ffec 	bl	80088cc <__pow5mult>
 80068f4:	9007      	str	r0, [sp, #28]
 80068f6:	2800      	cmp	r0, #0
 80068f8:	f43f ae8e 	beq.w	8006618 <_strtod_l+0x498>
 80068fc:	2f00      	cmp	r7, #0
 80068fe:	dd08      	ble.n	8006912 <_strtod_l+0x792>
 8006900:	9907      	ldr	r1, [sp, #28]
 8006902:	463a      	mov	r2, r7
 8006904:	4620      	mov	r0, r4
 8006906:	f002 f83b 	bl	8008980 <__lshift>
 800690a:	9007      	str	r0, [sp, #28]
 800690c:	2800      	cmp	r0, #0
 800690e:	f43f ae83 	beq.w	8006618 <_strtod_l+0x498>
 8006912:	f1b9 0f00 	cmp.w	r9, #0
 8006916:	dd08      	ble.n	800692a <_strtod_l+0x7aa>
 8006918:	4631      	mov	r1, r6
 800691a:	464a      	mov	r2, r9
 800691c:	4620      	mov	r0, r4
 800691e:	f002 f82f 	bl	8008980 <__lshift>
 8006922:	4606      	mov	r6, r0
 8006924:	2800      	cmp	r0, #0
 8006926:	f43f ae77 	beq.w	8006618 <_strtod_l+0x498>
 800692a:	9a07      	ldr	r2, [sp, #28]
 800692c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800692e:	4620      	mov	r0, r4
 8006930:	f002 f8ae 	bl	8008a90 <__mdiff>
 8006934:	4605      	mov	r5, r0
 8006936:	2800      	cmp	r0, #0
 8006938:	f43f ae6e 	beq.w	8006618 <_strtod_l+0x498>
 800693c:	68c3      	ldr	r3, [r0, #12]
 800693e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006940:	2300      	movs	r3, #0
 8006942:	60c3      	str	r3, [r0, #12]
 8006944:	4631      	mov	r1, r6
 8006946:	f002 f887 	bl	8008a58 <__mcmp>
 800694a:	2800      	cmp	r0, #0
 800694c:	da65      	bge.n	8006a1a <_strtod_l+0x89a>
 800694e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006950:	ea53 030a 	orrs.w	r3, r3, sl
 8006954:	f040 8087 	bne.w	8006a66 <_strtod_l+0x8e6>
 8006958:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800695c:	2b00      	cmp	r3, #0
 800695e:	f040 8082 	bne.w	8006a66 <_strtod_l+0x8e6>
 8006962:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006966:	0d1b      	lsrs	r3, r3, #20
 8006968:	051b      	lsls	r3, r3, #20
 800696a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800696e:	d97a      	bls.n	8006a66 <_strtod_l+0x8e6>
 8006970:	696b      	ldr	r3, [r5, #20]
 8006972:	b913      	cbnz	r3, 800697a <_strtod_l+0x7fa>
 8006974:	692b      	ldr	r3, [r5, #16]
 8006976:	2b01      	cmp	r3, #1
 8006978:	dd75      	ble.n	8006a66 <_strtod_l+0x8e6>
 800697a:	4629      	mov	r1, r5
 800697c:	2201      	movs	r2, #1
 800697e:	4620      	mov	r0, r4
 8006980:	f001 fffe 	bl	8008980 <__lshift>
 8006984:	4631      	mov	r1, r6
 8006986:	4605      	mov	r5, r0
 8006988:	f002 f866 	bl	8008a58 <__mcmp>
 800698c:	2800      	cmp	r0, #0
 800698e:	dd6a      	ble.n	8006a66 <_strtod_l+0x8e6>
 8006990:	9904      	ldr	r1, [sp, #16]
 8006992:	4a55      	ldr	r2, [pc, #340]	; (8006ae8 <_strtod_l+0x968>)
 8006994:	465b      	mov	r3, fp
 8006996:	2900      	cmp	r1, #0
 8006998:	f000 8085 	beq.w	8006aa6 <_strtod_l+0x926>
 800699c:	ea02 010b 	and.w	r1, r2, fp
 80069a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80069a4:	dc7f      	bgt.n	8006aa6 <_strtod_l+0x926>
 80069a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80069aa:	f77f aeaa 	ble.w	8006702 <_strtod_l+0x582>
 80069ae:	4a4f      	ldr	r2, [pc, #316]	; (8006aec <_strtod_l+0x96c>)
 80069b0:	2300      	movs	r3, #0
 80069b2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80069b6:	4650      	mov	r0, sl
 80069b8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80069bc:	4659      	mov	r1, fp
 80069be:	f7f9 fe83 	bl	80006c8 <__aeabi_dmul>
 80069c2:	460b      	mov	r3, r1
 80069c4:	4303      	orrs	r3, r0
 80069c6:	bf08      	it	eq
 80069c8:	2322      	moveq	r3, #34	; 0x22
 80069ca:	4682      	mov	sl, r0
 80069cc:	468b      	mov	fp, r1
 80069ce:	bf08      	it	eq
 80069d0:	6023      	streq	r3, [r4, #0]
 80069d2:	e62b      	b.n	800662c <_strtod_l+0x4ac>
 80069d4:	f04f 32ff 	mov.w	r2, #4294967295
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	ea03 0a0a 	and.w	sl, r3, sl
 80069e0:	e6de      	b.n	80067a0 <_strtod_l+0x620>
 80069e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80069e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80069ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80069ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80069f2:	fa01 f308 	lsl.w	r3, r1, r8
 80069f6:	930c      	str	r3, [sp, #48]	; 0x30
 80069f8:	9111      	str	r1, [sp, #68]	; 0x44
 80069fa:	e741      	b.n	8006880 <_strtod_l+0x700>
 80069fc:	2300      	movs	r3, #0
 80069fe:	930c      	str	r3, [sp, #48]	; 0x30
 8006a00:	2301      	movs	r3, #1
 8006a02:	9311      	str	r3, [sp, #68]	; 0x44
 8006a04:	e73c      	b.n	8006880 <_strtod_l+0x700>
 8006a06:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006a08:	4642      	mov	r2, r8
 8006a0a:	4620      	mov	r0, r4
 8006a0c:	f001 ffb8 	bl	8008980 <__lshift>
 8006a10:	901e      	str	r0, [sp, #120]	; 0x78
 8006a12:	2800      	cmp	r0, #0
 8006a14:	f47f af66 	bne.w	80068e4 <_strtod_l+0x764>
 8006a18:	e5fe      	b.n	8006618 <_strtod_l+0x498>
 8006a1a:	465f      	mov	r7, fp
 8006a1c:	d16e      	bne.n	8006afc <_strtod_l+0x97c>
 8006a1e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006a20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a24:	b342      	cbz	r2, 8006a78 <_strtod_l+0x8f8>
 8006a26:	4a32      	ldr	r2, [pc, #200]	; (8006af0 <_strtod_l+0x970>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d128      	bne.n	8006a7e <_strtod_l+0x8fe>
 8006a2c:	9b04      	ldr	r3, [sp, #16]
 8006a2e:	4650      	mov	r0, sl
 8006a30:	b1eb      	cbz	r3, 8006a6e <_strtod_l+0x8ee>
 8006a32:	4a2d      	ldr	r2, [pc, #180]	; (8006ae8 <_strtod_l+0x968>)
 8006a34:	403a      	ands	r2, r7
 8006a36:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006a3a:	f04f 31ff 	mov.w	r1, #4294967295
 8006a3e:	d819      	bhi.n	8006a74 <_strtod_l+0x8f4>
 8006a40:	0d12      	lsrs	r2, r2, #20
 8006a42:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006a46:	fa01 f303 	lsl.w	r3, r1, r3
 8006a4a:	4298      	cmp	r0, r3
 8006a4c:	d117      	bne.n	8006a7e <_strtod_l+0x8fe>
 8006a4e:	4b29      	ldr	r3, [pc, #164]	; (8006af4 <_strtod_l+0x974>)
 8006a50:	429f      	cmp	r7, r3
 8006a52:	d102      	bne.n	8006a5a <_strtod_l+0x8da>
 8006a54:	3001      	adds	r0, #1
 8006a56:	f43f addf 	beq.w	8006618 <_strtod_l+0x498>
 8006a5a:	4b23      	ldr	r3, [pc, #140]	; (8006ae8 <_strtod_l+0x968>)
 8006a5c:	403b      	ands	r3, r7
 8006a5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006a62:	f04f 0a00 	mov.w	sl, #0
 8006a66:	9b04      	ldr	r3, [sp, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1a0      	bne.n	80069ae <_strtod_l+0x82e>
 8006a6c:	e5de      	b.n	800662c <_strtod_l+0x4ac>
 8006a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006a72:	e7ea      	b.n	8006a4a <_strtod_l+0x8ca>
 8006a74:	460b      	mov	r3, r1
 8006a76:	e7e8      	b.n	8006a4a <_strtod_l+0x8ca>
 8006a78:	ea53 030a 	orrs.w	r3, r3, sl
 8006a7c:	d088      	beq.n	8006990 <_strtod_l+0x810>
 8006a7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006a80:	b1db      	cbz	r3, 8006aba <_strtod_l+0x93a>
 8006a82:	423b      	tst	r3, r7
 8006a84:	d0ef      	beq.n	8006a66 <_strtod_l+0x8e6>
 8006a86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a88:	9a04      	ldr	r2, [sp, #16]
 8006a8a:	4650      	mov	r0, sl
 8006a8c:	4659      	mov	r1, fp
 8006a8e:	b1c3      	cbz	r3, 8006ac2 <_strtod_l+0x942>
 8006a90:	f7ff fb58 	bl	8006144 <sulp>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a9c:	f7f9 fc5e 	bl	800035c <__adddf3>
 8006aa0:	4682      	mov	sl, r0
 8006aa2:	468b      	mov	fp, r1
 8006aa4:	e7df      	b.n	8006a66 <_strtod_l+0x8e6>
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006aac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006ab0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006ab4:	f04f 3aff 	mov.w	sl, #4294967295
 8006ab8:	e7d5      	b.n	8006a66 <_strtod_l+0x8e6>
 8006aba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006abc:	ea13 0f0a 	tst.w	r3, sl
 8006ac0:	e7e0      	b.n	8006a84 <_strtod_l+0x904>
 8006ac2:	f7ff fb3f 	bl	8006144 <sulp>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006ace:	f7f9 fc43 	bl	8000358 <__aeabi_dsub>
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	4682      	mov	sl, r0
 8006ad8:	468b      	mov	fp, r1
 8006ada:	f7fa f85d 	bl	8000b98 <__aeabi_dcmpeq>
 8006ade:	2800      	cmp	r0, #0
 8006ae0:	d0c1      	beq.n	8006a66 <_strtod_l+0x8e6>
 8006ae2:	e60e      	b.n	8006702 <_strtod_l+0x582>
 8006ae4:	fffffc02 	.word	0xfffffc02
 8006ae8:	7ff00000 	.word	0x7ff00000
 8006aec:	39500000 	.word	0x39500000
 8006af0:	000fffff 	.word	0x000fffff
 8006af4:	7fefffff 	.word	0x7fefffff
 8006af8:	0801d9a8 	.word	0x0801d9a8
 8006afc:	4631      	mov	r1, r6
 8006afe:	4628      	mov	r0, r5
 8006b00:	f002 f926 	bl	8008d50 <__ratio>
 8006b04:	ec59 8b10 	vmov	r8, r9, d0
 8006b08:	ee10 0a10 	vmov	r0, s0
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006b12:	4649      	mov	r1, r9
 8006b14:	f7fa f854 	bl	8000bc0 <__aeabi_dcmple>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d07c      	beq.n	8006c16 <_strtod_l+0xa96>
 8006b1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d04c      	beq.n	8006bbc <_strtod_l+0xa3c>
 8006b22:	4b95      	ldr	r3, [pc, #596]	; (8006d78 <_strtod_l+0xbf8>)
 8006b24:	2200      	movs	r2, #0
 8006b26:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006b2a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006d78 <_strtod_l+0xbf8>
 8006b2e:	f04f 0800 	mov.w	r8, #0
 8006b32:	4b92      	ldr	r3, [pc, #584]	; (8006d7c <_strtod_l+0xbfc>)
 8006b34:	403b      	ands	r3, r7
 8006b36:	9311      	str	r3, [sp, #68]	; 0x44
 8006b38:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006b3a:	4b91      	ldr	r3, [pc, #580]	; (8006d80 <_strtod_l+0xc00>)
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	f040 80b2 	bne.w	8006ca6 <_strtod_l+0xb26>
 8006b42:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b4a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006b4e:	ec4b ab10 	vmov	d0, sl, fp
 8006b52:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006b56:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006b5a:	f002 f821 	bl	8008ba0 <__ulp>
 8006b5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006b62:	ec53 2b10 	vmov	r2, r3, d0
 8006b66:	f7f9 fdaf 	bl	80006c8 <__aeabi_dmul>
 8006b6a:	4652      	mov	r2, sl
 8006b6c:	465b      	mov	r3, fp
 8006b6e:	f7f9 fbf5 	bl	800035c <__adddf3>
 8006b72:	460b      	mov	r3, r1
 8006b74:	4981      	ldr	r1, [pc, #516]	; (8006d7c <_strtod_l+0xbfc>)
 8006b76:	4a83      	ldr	r2, [pc, #524]	; (8006d84 <_strtod_l+0xc04>)
 8006b78:	4019      	ands	r1, r3
 8006b7a:	4291      	cmp	r1, r2
 8006b7c:	4682      	mov	sl, r0
 8006b7e:	d95e      	bls.n	8006c3e <_strtod_l+0xabe>
 8006b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b82:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d103      	bne.n	8006b92 <_strtod_l+0xa12>
 8006b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b8c:	3301      	adds	r3, #1
 8006b8e:	f43f ad43 	beq.w	8006618 <_strtod_l+0x498>
 8006b92:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006d90 <_strtod_l+0xc10>
 8006b96:	f04f 3aff 	mov.w	sl, #4294967295
 8006b9a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f001 fcd3 	bl	8008548 <_Bfree>
 8006ba2:	9907      	ldr	r1, [sp, #28]
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f001 fccf 	bl	8008548 <_Bfree>
 8006baa:	4631      	mov	r1, r6
 8006bac:	4620      	mov	r0, r4
 8006bae:	f001 fccb 	bl	8008548 <_Bfree>
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	4620      	mov	r0, r4
 8006bb6:	f001 fcc7 	bl	8008548 <_Bfree>
 8006bba:	e613      	b.n	80067e4 <_strtod_l+0x664>
 8006bbc:	f1ba 0f00 	cmp.w	sl, #0
 8006bc0:	d11b      	bne.n	8006bfa <_strtod_l+0xa7a>
 8006bc2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bc6:	b9f3      	cbnz	r3, 8006c06 <_strtod_l+0xa86>
 8006bc8:	4b6b      	ldr	r3, [pc, #428]	; (8006d78 <_strtod_l+0xbf8>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	4640      	mov	r0, r8
 8006bce:	4649      	mov	r1, r9
 8006bd0:	f7f9 ffec 	bl	8000bac <__aeabi_dcmplt>
 8006bd4:	b9d0      	cbnz	r0, 8006c0c <_strtod_l+0xa8c>
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	4649      	mov	r1, r9
 8006bda:	4b6b      	ldr	r3, [pc, #428]	; (8006d88 <_strtod_l+0xc08>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	f7f9 fd73 	bl	80006c8 <__aeabi_dmul>
 8006be2:	4680      	mov	r8, r0
 8006be4:	4689      	mov	r9, r1
 8006be6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006bea:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006bee:	931b      	str	r3, [sp, #108]	; 0x6c
 8006bf0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006bf4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006bf8:	e79b      	b.n	8006b32 <_strtod_l+0x9b2>
 8006bfa:	f1ba 0f01 	cmp.w	sl, #1
 8006bfe:	d102      	bne.n	8006c06 <_strtod_l+0xa86>
 8006c00:	2f00      	cmp	r7, #0
 8006c02:	f43f ad7e 	beq.w	8006702 <_strtod_l+0x582>
 8006c06:	4b61      	ldr	r3, [pc, #388]	; (8006d8c <_strtod_l+0xc0c>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	e78c      	b.n	8006b26 <_strtod_l+0x9a6>
 8006c0c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006d88 <_strtod_l+0xc08>
 8006c10:	f04f 0800 	mov.w	r8, #0
 8006c14:	e7e7      	b.n	8006be6 <_strtod_l+0xa66>
 8006c16:	4b5c      	ldr	r3, [pc, #368]	; (8006d88 <_strtod_l+0xc08>)
 8006c18:	4640      	mov	r0, r8
 8006c1a:	4649      	mov	r1, r9
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f7f9 fd53 	bl	80006c8 <__aeabi_dmul>
 8006c22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006c24:	4680      	mov	r8, r0
 8006c26:	4689      	mov	r9, r1
 8006c28:	b933      	cbnz	r3, 8006c38 <_strtod_l+0xab8>
 8006c2a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006c2e:	9012      	str	r0, [sp, #72]	; 0x48
 8006c30:	9313      	str	r3, [sp, #76]	; 0x4c
 8006c32:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006c36:	e7dd      	b.n	8006bf4 <_strtod_l+0xa74>
 8006c38:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006c3c:	e7f9      	b.n	8006c32 <_strtod_l+0xab2>
 8006c3e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006c42:	9b04      	ldr	r3, [sp, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1a8      	bne.n	8006b9a <_strtod_l+0xa1a>
 8006c48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006c4e:	0d1b      	lsrs	r3, r3, #20
 8006c50:	051b      	lsls	r3, r3, #20
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d1a1      	bne.n	8006b9a <_strtod_l+0xa1a>
 8006c56:	4640      	mov	r0, r8
 8006c58:	4649      	mov	r1, r9
 8006c5a:	f7fa f895 	bl	8000d88 <__aeabi_d2lz>
 8006c5e:	f7f9 fd05 	bl	800066c <__aeabi_l2d>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	4640      	mov	r0, r8
 8006c68:	4649      	mov	r1, r9
 8006c6a:	f7f9 fb75 	bl	8000358 <__aeabi_dsub>
 8006c6e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006c70:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006c74:	ea43 030a 	orr.w	r3, r3, sl
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	4680      	mov	r8, r0
 8006c7c:	4689      	mov	r9, r1
 8006c7e:	d053      	beq.n	8006d28 <_strtod_l+0xba8>
 8006c80:	a335      	add	r3, pc, #212	; (adr r3, 8006d58 <_strtod_l+0xbd8>)
 8006c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c86:	f7f9 ff91 	bl	8000bac <__aeabi_dcmplt>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	f47f acce 	bne.w	800662c <_strtod_l+0x4ac>
 8006c90:	a333      	add	r3, pc, #204	; (adr r3, 8006d60 <_strtod_l+0xbe0>)
 8006c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c96:	4640      	mov	r0, r8
 8006c98:	4649      	mov	r1, r9
 8006c9a:	f7f9 ffa5 	bl	8000be8 <__aeabi_dcmpgt>
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	f43f af7b 	beq.w	8006b9a <_strtod_l+0xa1a>
 8006ca4:	e4c2      	b.n	800662c <_strtod_l+0x4ac>
 8006ca6:	9b04      	ldr	r3, [sp, #16]
 8006ca8:	b333      	cbz	r3, 8006cf8 <_strtod_l+0xb78>
 8006caa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006cac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006cb0:	d822      	bhi.n	8006cf8 <_strtod_l+0xb78>
 8006cb2:	a32d      	add	r3, pc, #180	; (adr r3, 8006d68 <_strtod_l+0xbe8>)
 8006cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb8:	4640      	mov	r0, r8
 8006cba:	4649      	mov	r1, r9
 8006cbc:	f7f9 ff80 	bl	8000bc0 <__aeabi_dcmple>
 8006cc0:	b1a0      	cbz	r0, 8006cec <_strtod_l+0xb6c>
 8006cc2:	4649      	mov	r1, r9
 8006cc4:	4640      	mov	r0, r8
 8006cc6:	f7f9 ffd7 	bl	8000c78 <__aeabi_d2uiz>
 8006cca:	2801      	cmp	r0, #1
 8006ccc:	bf38      	it	cc
 8006cce:	2001      	movcc	r0, #1
 8006cd0:	f7f9 fc80 	bl	80005d4 <__aeabi_ui2d>
 8006cd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006cd6:	4680      	mov	r8, r0
 8006cd8:	4689      	mov	r9, r1
 8006cda:	bb13      	cbnz	r3, 8006d22 <_strtod_l+0xba2>
 8006cdc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ce0:	9014      	str	r0, [sp, #80]	; 0x50
 8006ce2:	9315      	str	r3, [sp, #84]	; 0x54
 8006ce4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006ce8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006cf0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	930d      	str	r3, [sp, #52]	; 0x34
 8006cf8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006cfc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006d00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006d04:	f001 ff4c 	bl	8008ba0 <__ulp>
 8006d08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d0c:	ec53 2b10 	vmov	r2, r3, d0
 8006d10:	f7f9 fcda 	bl	80006c8 <__aeabi_dmul>
 8006d14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006d18:	f7f9 fb20 	bl	800035c <__adddf3>
 8006d1c:	4682      	mov	sl, r0
 8006d1e:	468b      	mov	fp, r1
 8006d20:	e78f      	b.n	8006c42 <_strtod_l+0xac2>
 8006d22:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006d26:	e7dd      	b.n	8006ce4 <_strtod_l+0xb64>
 8006d28:	a311      	add	r3, pc, #68	; (adr r3, 8006d70 <_strtod_l+0xbf0>)
 8006d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d2e:	f7f9 ff3d 	bl	8000bac <__aeabi_dcmplt>
 8006d32:	e7b4      	b.n	8006c9e <_strtod_l+0xb1e>
 8006d34:	2300      	movs	r3, #0
 8006d36:	930e      	str	r3, [sp, #56]	; 0x38
 8006d38:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006d3a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006d3c:	6013      	str	r3, [r2, #0]
 8006d3e:	f7ff ba65 	b.w	800620c <_strtod_l+0x8c>
 8006d42:	2b65      	cmp	r3, #101	; 0x65
 8006d44:	f43f ab5d 	beq.w	8006402 <_strtod_l+0x282>
 8006d48:	2b45      	cmp	r3, #69	; 0x45
 8006d4a:	f43f ab5a 	beq.w	8006402 <_strtod_l+0x282>
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f7ff bb92 	b.w	8006478 <_strtod_l+0x2f8>
 8006d54:	f3af 8000 	nop.w
 8006d58:	94a03595 	.word	0x94a03595
 8006d5c:	3fdfffff 	.word	0x3fdfffff
 8006d60:	35afe535 	.word	0x35afe535
 8006d64:	3fe00000 	.word	0x3fe00000
 8006d68:	ffc00000 	.word	0xffc00000
 8006d6c:	41dfffff 	.word	0x41dfffff
 8006d70:	94a03595 	.word	0x94a03595
 8006d74:	3fcfffff 	.word	0x3fcfffff
 8006d78:	3ff00000 	.word	0x3ff00000
 8006d7c:	7ff00000 	.word	0x7ff00000
 8006d80:	7fe00000 	.word	0x7fe00000
 8006d84:	7c9fffff 	.word	0x7c9fffff
 8006d88:	3fe00000 	.word	0x3fe00000
 8006d8c:	bff00000 	.word	0xbff00000
 8006d90:	7fefffff 	.word	0x7fefffff

08006d94 <_strtod_r>:
 8006d94:	4b01      	ldr	r3, [pc, #4]	; (8006d9c <_strtod_r+0x8>)
 8006d96:	f7ff b9f3 	b.w	8006180 <_strtod_l>
 8006d9a:	bf00      	nop
 8006d9c:	20000074 	.word	0x20000074

08006da0 <_strtol_l.isra.0>:
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da6:	d001      	beq.n	8006dac <_strtol_l.isra.0+0xc>
 8006da8:	2b24      	cmp	r3, #36	; 0x24
 8006daa:	d906      	bls.n	8006dba <_strtol_l.isra.0+0x1a>
 8006dac:	f7fe fae0 	bl	8005370 <__errno>
 8006db0:	2316      	movs	r3, #22
 8006db2:	6003      	str	r3, [r0, #0]
 8006db4:	2000      	movs	r0, #0
 8006db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dba:	4f3a      	ldr	r7, [pc, #232]	; (8006ea4 <_strtol_l.isra.0+0x104>)
 8006dbc:	468e      	mov	lr, r1
 8006dbe:	4676      	mov	r6, lr
 8006dc0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006dc4:	5de5      	ldrb	r5, [r4, r7]
 8006dc6:	f015 0508 	ands.w	r5, r5, #8
 8006dca:	d1f8      	bne.n	8006dbe <_strtol_l.isra.0+0x1e>
 8006dcc:	2c2d      	cmp	r4, #45	; 0x2d
 8006dce:	d134      	bne.n	8006e3a <_strtol_l.isra.0+0x9a>
 8006dd0:	f89e 4000 	ldrb.w	r4, [lr]
 8006dd4:	f04f 0801 	mov.w	r8, #1
 8006dd8:	f106 0e02 	add.w	lr, r6, #2
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d05c      	beq.n	8006e9a <_strtol_l.isra.0+0xfa>
 8006de0:	2b10      	cmp	r3, #16
 8006de2:	d10c      	bne.n	8006dfe <_strtol_l.isra.0+0x5e>
 8006de4:	2c30      	cmp	r4, #48	; 0x30
 8006de6:	d10a      	bne.n	8006dfe <_strtol_l.isra.0+0x5e>
 8006de8:	f89e 4000 	ldrb.w	r4, [lr]
 8006dec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006df0:	2c58      	cmp	r4, #88	; 0x58
 8006df2:	d14d      	bne.n	8006e90 <_strtol_l.isra.0+0xf0>
 8006df4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006df8:	2310      	movs	r3, #16
 8006dfa:	f10e 0e02 	add.w	lr, lr, #2
 8006dfe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006e02:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006e06:	2600      	movs	r6, #0
 8006e08:	fbbc f9f3 	udiv	r9, ip, r3
 8006e0c:	4635      	mov	r5, r6
 8006e0e:	fb03 ca19 	mls	sl, r3, r9, ip
 8006e12:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006e16:	2f09      	cmp	r7, #9
 8006e18:	d818      	bhi.n	8006e4c <_strtol_l.isra.0+0xac>
 8006e1a:	463c      	mov	r4, r7
 8006e1c:	42a3      	cmp	r3, r4
 8006e1e:	dd24      	ble.n	8006e6a <_strtol_l.isra.0+0xca>
 8006e20:	2e00      	cmp	r6, #0
 8006e22:	db1f      	blt.n	8006e64 <_strtol_l.isra.0+0xc4>
 8006e24:	45a9      	cmp	r9, r5
 8006e26:	d31d      	bcc.n	8006e64 <_strtol_l.isra.0+0xc4>
 8006e28:	d101      	bne.n	8006e2e <_strtol_l.isra.0+0x8e>
 8006e2a:	45a2      	cmp	sl, r4
 8006e2c:	db1a      	blt.n	8006e64 <_strtol_l.isra.0+0xc4>
 8006e2e:	fb05 4503 	mla	r5, r5, r3, r4
 8006e32:	2601      	movs	r6, #1
 8006e34:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006e38:	e7eb      	b.n	8006e12 <_strtol_l.isra.0+0x72>
 8006e3a:	2c2b      	cmp	r4, #43	; 0x2b
 8006e3c:	bf08      	it	eq
 8006e3e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006e42:	46a8      	mov	r8, r5
 8006e44:	bf08      	it	eq
 8006e46:	f106 0e02 	addeq.w	lr, r6, #2
 8006e4a:	e7c7      	b.n	8006ddc <_strtol_l.isra.0+0x3c>
 8006e4c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006e50:	2f19      	cmp	r7, #25
 8006e52:	d801      	bhi.n	8006e58 <_strtol_l.isra.0+0xb8>
 8006e54:	3c37      	subs	r4, #55	; 0x37
 8006e56:	e7e1      	b.n	8006e1c <_strtol_l.isra.0+0x7c>
 8006e58:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006e5c:	2f19      	cmp	r7, #25
 8006e5e:	d804      	bhi.n	8006e6a <_strtol_l.isra.0+0xca>
 8006e60:	3c57      	subs	r4, #87	; 0x57
 8006e62:	e7db      	b.n	8006e1c <_strtol_l.isra.0+0x7c>
 8006e64:	f04f 36ff 	mov.w	r6, #4294967295
 8006e68:	e7e4      	b.n	8006e34 <_strtol_l.isra.0+0x94>
 8006e6a:	2e00      	cmp	r6, #0
 8006e6c:	da05      	bge.n	8006e7a <_strtol_l.isra.0+0xda>
 8006e6e:	2322      	movs	r3, #34	; 0x22
 8006e70:	6003      	str	r3, [r0, #0]
 8006e72:	4665      	mov	r5, ip
 8006e74:	b942      	cbnz	r2, 8006e88 <_strtol_l.isra.0+0xe8>
 8006e76:	4628      	mov	r0, r5
 8006e78:	e79d      	b.n	8006db6 <_strtol_l.isra.0+0x16>
 8006e7a:	f1b8 0f00 	cmp.w	r8, #0
 8006e7e:	d000      	beq.n	8006e82 <_strtol_l.isra.0+0xe2>
 8006e80:	426d      	negs	r5, r5
 8006e82:	2a00      	cmp	r2, #0
 8006e84:	d0f7      	beq.n	8006e76 <_strtol_l.isra.0+0xd6>
 8006e86:	b10e      	cbz	r6, 8006e8c <_strtol_l.isra.0+0xec>
 8006e88:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006e8c:	6011      	str	r1, [r2, #0]
 8006e8e:	e7f2      	b.n	8006e76 <_strtol_l.isra.0+0xd6>
 8006e90:	2430      	movs	r4, #48	; 0x30
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1b3      	bne.n	8006dfe <_strtol_l.isra.0+0x5e>
 8006e96:	2308      	movs	r3, #8
 8006e98:	e7b1      	b.n	8006dfe <_strtol_l.isra.0+0x5e>
 8006e9a:	2c30      	cmp	r4, #48	; 0x30
 8006e9c:	d0a4      	beq.n	8006de8 <_strtol_l.isra.0+0x48>
 8006e9e:	230a      	movs	r3, #10
 8006ea0:	e7ad      	b.n	8006dfe <_strtol_l.isra.0+0x5e>
 8006ea2:	bf00      	nop
 8006ea4:	0801d9d1 	.word	0x0801d9d1

08006ea8 <_strtol_r>:
 8006ea8:	f7ff bf7a 	b.w	8006da0 <_strtol_l.isra.0>

08006eac <quorem>:
 8006eac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb0:	6903      	ldr	r3, [r0, #16]
 8006eb2:	690c      	ldr	r4, [r1, #16]
 8006eb4:	42a3      	cmp	r3, r4
 8006eb6:	4607      	mov	r7, r0
 8006eb8:	f2c0 8081 	blt.w	8006fbe <quorem+0x112>
 8006ebc:	3c01      	subs	r4, #1
 8006ebe:	f101 0814 	add.w	r8, r1, #20
 8006ec2:	f100 0514 	add.w	r5, r0, #20
 8006ec6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006eca:	9301      	str	r3, [sp, #4]
 8006ecc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ed0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006edc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ee0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006ee4:	d331      	bcc.n	8006f4a <quorem+0x9e>
 8006ee6:	f04f 0e00 	mov.w	lr, #0
 8006eea:	4640      	mov	r0, r8
 8006eec:	46ac      	mov	ip, r5
 8006eee:	46f2      	mov	sl, lr
 8006ef0:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ef4:	b293      	uxth	r3, r2
 8006ef6:	fb06 e303 	mla	r3, r6, r3, lr
 8006efa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006efe:	b29b      	uxth	r3, r3
 8006f00:	ebaa 0303 	sub.w	r3, sl, r3
 8006f04:	0c12      	lsrs	r2, r2, #16
 8006f06:	f8dc a000 	ldr.w	sl, [ip]
 8006f0a:	fb06 e202 	mla	r2, r6, r2, lr
 8006f0e:	fa13 f38a 	uxtah	r3, r3, sl
 8006f12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006f16:	fa1f fa82 	uxth.w	sl, r2
 8006f1a:	f8dc 2000 	ldr.w	r2, [ip]
 8006f1e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8006f22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f26:	b29b      	uxth	r3, r3
 8006f28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f2c:	4581      	cmp	r9, r0
 8006f2e:	f84c 3b04 	str.w	r3, [ip], #4
 8006f32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f36:	d2db      	bcs.n	8006ef0 <quorem+0x44>
 8006f38:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f3c:	b92b      	cbnz	r3, 8006f4a <quorem+0x9e>
 8006f3e:	9b01      	ldr	r3, [sp, #4]
 8006f40:	3b04      	subs	r3, #4
 8006f42:	429d      	cmp	r5, r3
 8006f44:	461a      	mov	r2, r3
 8006f46:	d32e      	bcc.n	8006fa6 <quorem+0xfa>
 8006f48:	613c      	str	r4, [r7, #16]
 8006f4a:	4638      	mov	r0, r7
 8006f4c:	f001 fd84 	bl	8008a58 <__mcmp>
 8006f50:	2800      	cmp	r0, #0
 8006f52:	db24      	blt.n	8006f9e <quorem+0xf2>
 8006f54:	3601      	adds	r6, #1
 8006f56:	4628      	mov	r0, r5
 8006f58:	f04f 0c00 	mov.w	ip, #0
 8006f5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f60:	f8d0 e000 	ldr.w	lr, [r0]
 8006f64:	b293      	uxth	r3, r2
 8006f66:	ebac 0303 	sub.w	r3, ip, r3
 8006f6a:	0c12      	lsrs	r2, r2, #16
 8006f6c:	fa13 f38e 	uxtah	r3, r3, lr
 8006f70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006f74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f7e:	45c1      	cmp	r9, r8
 8006f80:	f840 3b04 	str.w	r3, [r0], #4
 8006f84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006f88:	d2e8      	bcs.n	8006f5c <quorem+0xb0>
 8006f8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f92:	b922      	cbnz	r2, 8006f9e <quorem+0xf2>
 8006f94:	3b04      	subs	r3, #4
 8006f96:	429d      	cmp	r5, r3
 8006f98:	461a      	mov	r2, r3
 8006f9a:	d30a      	bcc.n	8006fb2 <quorem+0x106>
 8006f9c:	613c      	str	r4, [r7, #16]
 8006f9e:	4630      	mov	r0, r6
 8006fa0:	b003      	add	sp, #12
 8006fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fa6:	6812      	ldr	r2, [r2, #0]
 8006fa8:	3b04      	subs	r3, #4
 8006faa:	2a00      	cmp	r2, #0
 8006fac:	d1cc      	bne.n	8006f48 <quorem+0x9c>
 8006fae:	3c01      	subs	r4, #1
 8006fb0:	e7c7      	b.n	8006f42 <quorem+0x96>
 8006fb2:	6812      	ldr	r2, [r2, #0]
 8006fb4:	3b04      	subs	r3, #4
 8006fb6:	2a00      	cmp	r2, #0
 8006fb8:	d1f0      	bne.n	8006f9c <quorem+0xf0>
 8006fba:	3c01      	subs	r4, #1
 8006fbc:	e7eb      	b.n	8006f96 <quorem+0xea>
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	e7ee      	b.n	8006fa0 <quorem+0xf4>
 8006fc2:	0000      	movs	r0, r0
 8006fc4:	0000      	movs	r0, r0
	...

08006fc8 <_dtoa_r>:
 8006fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fcc:	ed2d 8b02 	vpush	{d8}
 8006fd0:	ec57 6b10 	vmov	r6, r7, d0
 8006fd4:	b095      	sub	sp, #84	; 0x54
 8006fd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006fd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006fdc:	9105      	str	r1, [sp, #20]
 8006fde:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	9209      	str	r2, [sp, #36]	; 0x24
 8006fe6:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fe8:	b975      	cbnz	r5, 8007008 <_dtoa_r+0x40>
 8006fea:	2010      	movs	r0, #16
 8006fec:	f001 fa44 	bl	8008478 <malloc>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	6260      	str	r0, [r4, #36]	; 0x24
 8006ff4:	b920      	cbnz	r0, 8007000 <_dtoa_r+0x38>
 8006ff6:	4bb2      	ldr	r3, [pc, #712]	; (80072c0 <_dtoa_r+0x2f8>)
 8006ff8:	21ea      	movs	r1, #234	; 0xea
 8006ffa:	48b2      	ldr	r0, [pc, #712]	; (80072c4 <_dtoa_r+0x2fc>)
 8006ffc:	f002 fbde 	bl	80097bc <__assert_func>
 8007000:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007004:	6005      	str	r5, [r0, #0]
 8007006:	60c5      	str	r5, [r0, #12]
 8007008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800700a:	6819      	ldr	r1, [r3, #0]
 800700c:	b151      	cbz	r1, 8007024 <_dtoa_r+0x5c>
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	604a      	str	r2, [r1, #4]
 8007012:	2301      	movs	r3, #1
 8007014:	4093      	lsls	r3, r2
 8007016:	608b      	str	r3, [r1, #8]
 8007018:	4620      	mov	r0, r4
 800701a:	f001 fa95 	bl	8008548 <_Bfree>
 800701e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007020:	2200      	movs	r2, #0
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	1e3b      	subs	r3, r7, #0
 8007026:	bfb9      	ittee	lt
 8007028:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800702c:	9303      	strlt	r3, [sp, #12]
 800702e:	2300      	movge	r3, #0
 8007030:	f8c8 3000 	strge.w	r3, [r8]
 8007034:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007038:	4ba3      	ldr	r3, [pc, #652]	; (80072c8 <_dtoa_r+0x300>)
 800703a:	bfbc      	itt	lt
 800703c:	2201      	movlt	r2, #1
 800703e:	f8c8 2000 	strlt.w	r2, [r8]
 8007042:	ea33 0309 	bics.w	r3, r3, r9
 8007046:	d11b      	bne.n	8007080 <_dtoa_r+0xb8>
 8007048:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800704a:	f242 730f 	movw	r3, #9999	; 0x270f
 800704e:	6013      	str	r3, [r2, #0]
 8007050:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007054:	4333      	orrs	r3, r6
 8007056:	f000 857a 	beq.w	8007b4e <_dtoa_r+0xb86>
 800705a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800705c:	b963      	cbnz	r3, 8007078 <_dtoa_r+0xb0>
 800705e:	4b9b      	ldr	r3, [pc, #620]	; (80072cc <_dtoa_r+0x304>)
 8007060:	e024      	b.n	80070ac <_dtoa_r+0xe4>
 8007062:	4b9b      	ldr	r3, [pc, #620]	; (80072d0 <_dtoa_r+0x308>)
 8007064:	9300      	str	r3, [sp, #0]
 8007066:	3308      	adds	r3, #8
 8007068:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	9800      	ldr	r0, [sp, #0]
 800706e:	b015      	add	sp, #84	; 0x54
 8007070:	ecbd 8b02 	vpop	{d8}
 8007074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007078:	4b94      	ldr	r3, [pc, #592]	; (80072cc <_dtoa_r+0x304>)
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	3303      	adds	r3, #3
 800707e:	e7f3      	b.n	8007068 <_dtoa_r+0xa0>
 8007080:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007084:	2200      	movs	r2, #0
 8007086:	ec51 0b17 	vmov	r0, r1, d7
 800708a:	2300      	movs	r3, #0
 800708c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007090:	f7f9 fd82 	bl	8000b98 <__aeabi_dcmpeq>
 8007094:	4680      	mov	r8, r0
 8007096:	b158      	cbz	r0, 80070b0 <_dtoa_r+0xe8>
 8007098:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800709a:	2301      	movs	r3, #1
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	f000 8551 	beq.w	8007b48 <_dtoa_r+0xb80>
 80070a6:	488b      	ldr	r0, [pc, #556]	; (80072d4 <_dtoa_r+0x30c>)
 80070a8:	6018      	str	r0, [r3, #0]
 80070aa:	1e43      	subs	r3, r0, #1
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	e7dd      	b.n	800706c <_dtoa_r+0xa4>
 80070b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80070b4:	aa12      	add	r2, sp, #72	; 0x48
 80070b6:	a913      	add	r1, sp, #76	; 0x4c
 80070b8:	4620      	mov	r0, r4
 80070ba:	f001 fded 	bl	8008c98 <__d2b>
 80070be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80070c2:	4683      	mov	fp, r0
 80070c4:	2d00      	cmp	r5, #0
 80070c6:	d07c      	beq.n	80071c2 <_dtoa_r+0x1fa>
 80070c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80070ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80070d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80070da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80070de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070e2:	4b7d      	ldr	r3, [pc, #500]	; (80072d8 <_dtoa_r+0x310>)
 80070e4:	2200      	movs	r2, #0
 80070e6:	4630      	mov	r0, r6
 80070e8:	4639      	mov	r1, r7
 80070ea:	f7f9 f935 	bl	8000358 <__aeabi_dsub>
 80070ee:	a36e      	add	r3, pc, #440	; (adr r3, 80072a8 <_dtoa_r+0x2e0>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f7f9 fae8 	bl	80006c8 <__aeabi_dmul>
 80070f8:	a36d      	add	r3, pc, #436	; (adr r3, 80072b0 <_dtoa_r+0x2e8>)
 80070fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070fe:	f7f9 f92d 	bl	800035c <__adddf3>
 8007102:	4606      	mov	r6, r0
 8007104:	4628      	mov	r0, r5
 8007106:	460f      	mov	r7, r1
 8007108:	f7f9 fa74 	bl	80005f4 <__aeabi_i2d>
 800710c:	a36a      	add	r3, pc, #424	; (adr r3, 80072b8 <_dtoa_r+0x2f0>)
 800710e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007112:	f7f9 fad9 	bl	80006c8 <__aeabi_dmul>
 8007116:	4602      	mov	r2, r0
 8007118:	460b      	mov	r3, r1
 800711a:	4630      	mov	r0, r6
 800711c:	4639      	mov	r1, r7
 800711e:	f7f9 f91d 	bl	800035c <__adddf3>
 8007122:	4606      	mov	r6, r0
 8007124:	460f      	mov	r7, r1
 8007126:	f7f9 fd7f 	bl	8000c28 <__aeabi_d2iz>
 800712a:	2200      	movs	r2, #0
 800712c:	4682      	mov	sl, r0
 800712e:	2300      	movs	r3, #0
 8007130:	4630      	mov	r0, r6
 8007132:	4639      	mov	r1, r7
 8007134:	f7f9 fd3a 	bl	8000bac <__aeabi_dcmplt>
 8007138:	b148      	cbz	r0, 800714e <_dtoa_r+0x186>
 800713a:	4650      	mov	r0, sl
 800713c:	f7f9 fa5a 	bl	80005f4 <__aeabi_i2d>
 8007140:	4632      	mov	r2, r6
 8007142:	463b      	mov	r3, r7
 8007144:	f7f9 fd28 	bl	8000b98 <__aeabi_dcmpeq>
 8007148:	b908      	cbnz	r0, 800714e <_dtoa_r+0x186>
 800714a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800714e:	f1ba 0f16 	cmp.w	sl, #22
 8007152:	d854      	bhi.n	80071fe <_dtoa_r+0x236>
 8007154:	4b61      	ldr	r3, [pc, #388]	; (80072dc <_dtoa_r+0x314>)
 8007156:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800715e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007162:	f7f9 fd23 	bl	8000bac <__aeabi_dcmplt>
 8007166:	2800      	cmp	r0, #0
 8007168:	d04b      	beq.n	8007202 <_dtoa_r+0x23a>
 800716a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800716e:	2300      	movs	r3, #0
 8007170:	930e      	str	r3, [sp, #56]	; 0x38
 8007172:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007174:	1b5d      	subs	r5, r3, r5
 8007176:	1e6b      	subs	r3, r5, #1
 8007178:	9304      	str	r3, [sp, #16]
 800717a:	bf43      	ittte	mi
 800717c:	2300      	movmi	r3, #0
 800717e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007182:	9304      	strmi	r3, [sp, #16]
 8007184:	f04f 0800 	movpl.w	r8, #0
 8007188:	f1ba 0f00 	cmp.w	sl, #0
 800718c:	db3b      	blt.n	8007206 <_dtoa_r+0x23e>
 800718e:	9b04      	ldr	r3, [sp, #16]
 8007190:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007194:	4453      	add	r3, sl
 8007196:	9304      	str	r3, [sp, #16]
 8007198:	2300      	movs	r3, #0
 800719a:	9306      	str	r3, [sp, #24]
 800719c:	9b05      	ldr	r3, [sp, #20]
 800719e:	2b09      	cmp	r3, #9
 80071a0:	d869      	bhi.n	8007276 <_dtoa_r+0x2ae>
 80071a2:	2b05      	cmp	r3, #5
 80071a4:	bfc4      	itt	gt
 80071a6:	3b04      	subgt	r3, #4
 80071a8:	9305      	strgt	r3, [sp, #20]
 80071aa:	9b05      	ldr	r3, [sp, #20]
 80071ac:	f1a3 0302 	sub.w	r3, r3, #2
 80071b0:	bfcc      	ite	gt
 80071b2:	2500      	movgt	r5, #0
 80071b4:	2501      	movle	r5, #1
 80071b6:	2b03      	cmp	r3, #3
 80071b8:	d869      	bhi.n	800728e <_dtoa_r+0x2c6>
 80071ba:	e8df f003 	tbb	[pc, r3]
 80071be:	4e2c      	.short	0x4e2c
 80071c0:	5a4c      	.short	0x5a4c
 80071c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80071c6:	441d      	add	r5, r3
 80071c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071cc:	2b20      	cmp	r3, #32
 80071ce:	bfc1      	itttt	gt
 80071d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80071d8:	fa09 f303 	lslgt.w	r3, r9, r3
 80071dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80071e0:	bfda      	itte	le
 80071e2:	f1c3 0320 	rsble	r3, r3, #32
 80071e6:	fa06 f003 	lslle.w	r0, r6, r3
 80071ea:	4318      	orrgt	r0, r3
 80071ec:	f7f9 f9f2 	bl	80005d4 <__aeabi_ui2d>
 80071f0:	2301      	movs	r3, #1
 80071f2:	4606      	mov	r6, r0
 80071f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80071f8:	3d01      	subs	r5, #1
 80071fa:	9310      	str	r3, [sp, #64]	; 0x40
 80071fc:	e771      	b.n	80070e2 <_dtoa_r+0x11a>
 80071fe:	2301      	movs	r3, #1
 8007200:	e7b6      	b.n	8007170 <_dtoa_r+0x1a8>
 8007202:	900e      	str	r0, [sp, #56]	; 0x38
 8007204:	e7b5      	b.n	8007172 <_dtoa_r+0x1aa>
 8007206:	f1ca 0300 	rsb	r3, sl, #0
 800720a:	9306      	str	r3, [sp, #24]
 800720c:	2300      	movs	r3, #0
 800720e:	eba8 080a 	sub.w	r8, r8, sl
 8007212:	930d      	str	r3, [sp, #52]	; 0x34
 8007214:	e7c2      	b.n	800719c <_dtoa_r+0x1d4>
 8007216:	2300      	movs	r3, #0
 8007218:	9308      	str	r3, [sp, #32]
 800721a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800721c:	2b00      	cmp	r3, #0
 800721e:	dc39      	bgt.n	8007294 <_dtoa_r+0x2cc>
 8007220:	f04f 0901 	mov.w	r9, #1
 8007224:	f8cd 9004 	str.w	r9, [sp, #4]
 8007228:	464b      	mov	r3, r9
 800722a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800722e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007230:	2200      	movs	r2, #0
 8007232:	6042      	str	r2, [r0, #4]
 8007234:	2204      	movs	r2, #4
 8007236:	f102 0614 	add.w	r6, r2, #20
 800723a:	429e      	cmp	r6, r3
 800723c:	6841      	ldr	r1, [r0, #4]
 800723e:	d92f      	bls.n	80072a0 <_dtoa_r+0x2d8>
 8007240:	4620      	mov	r0, r4
 8007242:	f001 f941 	bl	80084c8 <_Balloc>
 8007246:	9000      	str	r0, [sp, #0]
 8007248:	2800      	cmp	r0, #0
 800724a:	d14b      	bne.n	80072e4 <_dtoa_r+0x31c>
 800724c:	4b24      	ldr	r3, [pc, #144]	; (80072e0 <_dtoa_r+0x318>)
 800724e:	4602      	mov	r2, r0
 8007250:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007254:	e6d1      	b.n	8006ffa <_dtoa_r+0x32>
 8007256:	2301      	movs	r3, #1
 8007258:	e7de      	b.n	8007218 <_dtoa_r+0x250>
 800725a:	2300      	movs	r3, #0
 800725c:	9308      	str	r3, [sp, #32]
 800725e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007260:	eb0a 0903 	add.w	r9, sl, r3
 8007264:	f109 0301 	add.w	r3, r9, #1
 8007268:	2b01      	cmp	r3, #1
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	bfb8      	it	lt
 800726e:	2301      	movlt	r3, #1
 8007270:	e7dd      	b.n	800722e <_dtoa_r+0x266>
 8007272:	2301      	movs	r3, #1
 8007274:	e7f2      	b.n	800725c <_dtoa_r+0x294>
 8007276:	2501      	movs	r5, #1
 8007278:	2300      	movs	r3, #0
 800727a:	9305      	str	r3, [sp, #20]
 800727c:	9508      	str	r5, [sp, #32]
 800727e:	f04f 39ff 	mov.w	r9, #4294967295
 8007282:	2200      	movs	r2, #0
 8007284:	f8cd 9004 	str.w	r9, [sp, #4]
 8007288:	2312      	movs	r3, #18
 800728a:	9209      	str	r2, [sp, #36]	; 0x24
 800728c:	e7cf      	b.n	800722e <_dtoa_r+0x266>
 800728e:	2301      	movs	r3, #1
 8007290:	9308      	str	r3, [sp, #32]
 8007292:	e7f4      	b.n	800727e <_dtoa_r+0x2b6>
 8007294:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007298:	f8cd 9004 	str.w	r9, [sp, #4]
 800729c:	464b      	mov	r3, r9
 800729e:	e7c6      	b.n	800722e <_dtoa_r+0x266>
 80072a0:	3101      	adds	r1, #1
 80072a2:	6041      	str	r1, [r0, #4]
 80072a4:	0052      	lsls	r2, r2, #1
 80072a6:	e7c6      	b.n	8007236 <_dtoa_r+0x26e>
 80072a8:	636f4361 	.word	0x636f4361
 80072ac:	3fd287a7 	.word	0x3fd287a7
 80072b0:	8b60c8b3 	.word	0x8b60c8b3
 80072b4:	3fc68a28 	.word	0x3fc68a28
 80072b8:	509f79fb 	.word	0x509f79fb
 80072bc:	3fd34413 	.word	0x3fd34413
 80072c0:	0801dade 	.word	0x0801dade
 80072c4:	0801daf5 	.word	0x0801daf5
 80072c8:	7ff00000 	.word	0x7ff00000
 80072cc:	0801dada 	.word	0x0801dada
 80072d0:	0801dad1 	.word	0x0801dad1
 80072d4:	0801d955 	.word	0x0801d955
 80072d8:	3ff80000 	.word	0x3ff80000
 80072dc:	0801dcd0 	.word	0x0801dcd0
 80072e0:	0801db54 	.word	0x0801db54
 80072e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072e6:	9a00      	ldr	r2, [sp, #0]
 80072e8:	601a      	str	r2, [r3, #0]
 80072ea:	9b01      	ldr	r3, [sp, #4]
 80072ec:	2b0e      	cmp	r3, #14
 80072ee:	f200 80ad 	bhi.w	800744c <_dtoa_r+0x484>
 80072f2:	2d00      	cmp	r5, #0
 80072f4:	f000 80aa 	beq.w	800744c <_dtoa_r+0x484>
 80072f8:	f1ba 0f00 	cmp.w	sl, #0
 80072fc:	dd36      	ble.n	800736c <_dtoa_r+0x3a4>
 80072fe:	4ac3      	ldr	r2, [pc, #780]	; (800760c <_dtoa_r+0x644>)
 8007300:	f00a 030f 	and.w	r3, sl, #15
 8007304:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007308:	ed93 7b00 	vldr	d7, [r3]
 800730c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007310:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007314:	eeb0 8a47 	vmov.f32	s16, s14
 8007318:	eef0 8a67 	vmov.f32	s17, s15
 800731c:	d016      	beq.n	800734c <_dtoa_r+0x384>
 800731e:	4bbc      	ldr	r3, [pc, #752]	; (8007610 <_dtoa_r+0x648>)
 8007320:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007324:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007328:	f7f9 faf8 	bl	800091c <__aeabi_ddiv>
 800732c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007330:	f007 070f 	and.w	r7, r7, #15
 8007334:	2503      	movs	r5, #3
 8007336:	4eb6      	ldr	r6, [pc, #728]	; (8007610 <_dtoa_r+0x648>)
 8007338:	b957      	cbnz	r7, 8007350 <_dtoa_r+0x388>
 800733a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800733e:	ec53 2b18 	vmov	r2, r3, d8
 8007342:	f7f9 faeb 	bl	800091c <__aeabi_ddiv>
 8007346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800734a:	e029      	b.n	80073a0 <_dtoa_r+0x3d8>
 800734c:	2502      	movs	r5, #2
 800734e:	e7f2      	b.n	8007336 <_dtoa_r+0x36e>
 8007350:	07f9      	lsls	r1, r7, #31
 8007352:	d508      	bpl.n	8007366 <_dtoa_r+0x39e>
 8007354:	ec51 0b18 	vmov	r0, r1, d8
 8007358:	e9d6 2300 	ldrd	r2, r3, [r6]
 800735c:	f7f9 f9b4 	bl	80006c8 <__aeabi_dmul>
 8007360:	ec41 0b18 	vmov	d8, r0, r1
 8007364:	3501      	adds	r5, #1
 8007366:	107f      	asrs	r7, r7, #1
 8007368:	3608      	adds	r6, #8
 800736a:	e7e5      	b.n	8007338 <_dtoa_r+0x370>
 800736c:	f000 80a6 	beq.w	80074bc <_dtoa_r+0x4f4>
 8007370:	f1ca 0600 	rsb	r6, sl, #0
 8007374:	4ba5      	ldr	r3, [pc, #660]	; (800760c <_dtoa_r+0x644>)
 8007376:	4fa6      	ldr	r7, [pc, #664]	; (8007610 <_dtoa_r+0x648>)
 8007378:	f006 020f 	and.w	r2, r6, #15
 800737c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007384:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007388:	f7f9 f99e 	bl	80006c8 <__aeabi_dmul>
 800738c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007390:	1136      	asrs	r6, r6, #4
 8007392:	2300      	movs	r3, #0
 8007394:	2502      	movs	r5, #2
 8007396:	2e00      	cmp	r6, #0
 8007398:	f040 8085 	bne.w	80074a6 <_dtoa_r+0x4de>
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1d2      	bne.n	8007346 <_dtoa_r+0x37e>
 80073a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 808c 	beq.w	80074c0 <_dtoa_r+0x4f8>
 80073a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073ac:	4b99      	ldr	r3, [pc, #612]	; (8007614 <_dtoa_r+0x64c>)
 80073ae:	2200      	movs	r2, #0
 80073b0:	4630      	mov	r0, r6
 80073b2:	4639      	mov	r1, r7
 80073b4:	f7f9 fbfa 	bl	8000bac <__aeabi_dcmplt>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	f000 8081 	beq.w	80074c0 <_dtoa_r+0x4f8>
 80073be:	9b01      	ldr	r3, [sp, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d07d      	beq.n	80074c0 <_dtoa_r+0x4f8>
 80073c4:	f1b9 0f00 	cmp.w	r9, #0
 80073c8:	dd3c      	ble.n	8007444 <_dtoa_r+0x47c>
 80073ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80073ce:	9307      	str	r3, [sp, #28]
 80073d0:	2200      	movs	r2, #0
 80073d2:	4b91      	ldr	r3, [pc, #580]	; (8007618 <_dtoa_r+0x650>)
 80073d4:	4630      	mov	r0, r6
 80073d6:	4639      	mov	r1, r7
 80073d8:	f7f9 f976 	bl	80006c8 <__aeabi_dmul>
 80073dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073e0:	3501      	adds	r5, #1
 80073e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80073e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80073ea:	4628      	mov	r0, r5
 80073ec:	f7f9 f902 	bl	80005f4 <__aeabi_i2d>
 80073f0:	4632      	mov	r2, r6
 80073f2:	463b      	mov	r3, r7
 80073f4:	f7f9 f968 	bl	80006c8 <__aeabi_dmul>
 80073f8:	4b88      	ldr	r3, [pc, #544]	; (800761c <_dtoa_r+0x654>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	f7f8 ffae 	bl	800035c <__adddf3>
 8007400:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007408:	9303      	str	r3, [sp, #12]
 800740a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800740c:	2b00      	cmp	r3, #0
 800740e:	d15c      	bne.n	80074ca <_dtoa_r+0x502>
 8007410:	4b83      	ldr	r3, [pc, #524]	; (8007620 <_dtoa_r+0x658>)
 8007412:	2200      	movs	r2, #0
 8007414:	4630      	mov	r0, r6
 8007416:	4639      	mov	r1, r7
 8007418:	f7f8 ff9e 	bl	8000358 <__aeabi_dsub>
 800741c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007420:	4606      	mov	r6, r0
 8007422:	460f      	mov	r7, r1
 8007424:	f7f9 fbe0 	bl	8000be8 <__aeabi_dcmpgt>
 8007428:	2800      	cmp	r0, #0
 800742a:	f040 8296 	bne.w	800795a <_dtoa_r+0x992>
 800742e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007432:	4630      	mov	r0, r6
 8007434:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007438:	4639      	mov	r1, r7
 800743a:	f7f9 fbb7 	bl	8000bac <__aeabi_dcmplt>
 800743e:	2800      	cmp	r0, #0
 8007440:	f040 8288 	bne.w	8007954 <_dtoa_r+0x98c>
 8007444:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007448:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800744c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800744e:	2b00      	cmp	r3, #0
 8007450:	f2c0 8158 	blt.w	8007704 <_dtoa_r+0x73c>
 8007454:	f1ba 0f0e 	cmp.w	sl, #14
 8007458:	f300 8154 	bgt.w	8007704 <_dtoa_r+0x73c>
 800745c:	4b6b      	ldr	r3, [pc, #428]	; (800760c <_dtoa_r+0x644>)
 800745e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007462:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007468:	2b00      	cmp	r3, #0
 800746a:	f280 80e3 	bge.w	8007634 <_dtoa_r+0x66c>
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	2b00      	cmp	r3, #0
 8007472:	f300 80df 	bgt.w	8007634 <_dtoa_r+0x66c>
 8007476:	f040 826d 	bne.w	8007954 <_dtoa_r+0x98c>
 800747a:	4b69      	ldr	r3, [pc, #420]	; (8007620 <_dtoa_r+0x658>)
 800747c:	2200      	movs	r2, #0
 800747e:	4640      	mov	r0, r8
 8007480:	4649      	mov	r1, r9
 8007482:	f7f9 f921 	bl	80006c8 <__aeabi_dmul>
 8007486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800748a:	f7f9 fba3 	bl	8000bd4 <__aeabi_dcmpge>
 800748e:	9e01      	ldr	r6, [sp, #4]
 8007490:	4637      	mov	r7, r6
 8007492:	2800      	cmp	r0, #0
 8007494:	f040 8243 	bne.w	800791e <_dtoa_r+0x956>
 8007498:	9d00      	ldr	r5, [sp, #0]
 800749a:	2331      	movs	r3, #49	; 0x31
 800749c:	f805 3b01 	strb.w	r3, [r5], #1
 80074a0:	f10a 0a01 	add.w	sl, sl, #1
 80074a4:	e23f      	b.n	8007926 <_dtoa_r+0x95e>
 80074a6:	07f2      	lsls	r2, r6, #31
 80074a8:	d505      	bpl.n	80074b6 <_dtoa_r+0x4ee>
 80074aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ae:	f7f9 f90b 	bl	80006c8 <__aeabi_dmul>
 80074b2:	3501      	adds	r5, #1
 80074b4:	2301      	movs	r3, #1
 80074b6:	1076      	asrs	r6, r6, #1
 80074b8:	3708      	adds	r7, #8
 80074ba:	e76c      	b.n	8007396 <_dtoa_r+0x3ce>
 80074bc:	2502      	movs	r5, #2
 80074be:	e76f      	b.n	80073a0 <_dtoa_r+0x3d8>
 80074c0:	9b01      	ldr	r3, [sp, #4]
 80074c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80074c6:	930c      	str	r3, [sp, #48]	; 0x30
 80074c8:	e78d      	b.n	80073e6 <_dtoa_r+0x41e>
 80074ca:	9900      	ldr	r1, [sp, #0]
 80074cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80074ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80074d0:	4b4e      	ldr	r3, [pc, #312]	; (800760c <_dtoa_r+0x644>)
 80074d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074d6:	4401      	add	r1, r0
 80074d8:	9102      	str	r1, [sp, #8]
 80074da:	9908      	ldr	r1, [sp, #32]
 80074dc:	eeb0 8a47 	vmov.f32	s16, s14
 80074e0:	eef0 8a67 	vmov.f32	s17, s15
 80074e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074ec:	2900      	cmp	r1, #0
 80074ee:	d045      	beq.n	800757c <_dtoa_r+0x5b4>
 80074f0:	494c      	ldr	r1, [pc, #304]	; (8007624 <_dtoa_r+0x65c>)
 80074f2:	2000      	movs	r0, #0
 80074f4:	f7f9 fa12 	bl	800091c <__aeabi_ddiv>
 80074f8:	ec53 2b18 	vmov	r2, r3, d8
 80074fc:	f7f8 ff2c 	bl	8000358 <__aeabi_dsub>
 8007500:	9d00      	ldr	r5, [sp, #0]
 8007502:	ec41 0b18 	vmov	d8, r0, r1
 8007506:	4639      	mov	r1, r7
 8007508:	4630      	mov	r0, r6
 800750a:	f7f9 fb8d 	bl	8000c28 <__aeabi_d2iz>
 800750e:	900c      	str	r0, [sp, #48]	; 0x30
 8007510:	f7f9 f870 	bl	80005f4 <__aeabi_i2d>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	4630      	mov	r0, r6
 800751a:	4639      	mov	r1, r7
 800751c:	f7f8 ff1c 	bl	8000358 <__aeabi_dsub>
 8007520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007522:	3330      	adds	r3, #48	; 0x30
 8007524:	f805 3b01 	strb.w	r3, [r5], #1
 8007528:	ec53 2b18 	vmov	r2, r3, d8
 800752c:	4606      	mov	r6, r0
 800752e:	460f      	mov	r7, r1
 8007530:	f7f9 fb3c 	bl	8000bac <__aeabi_dcmplt>
 8007534:	2800      	cmp	r0, #0
 8007536:	d165      	bne.n	8007604 <_dtoa_r+0x63c>
 8007538:	4632      	mov	r2, r6
 800753a:	463b      	mov	r3, r7
 800753c:	4935      	ldr	r1, [pc, #212]	; (8007614 <_dtoa_r+0x64c>)
 800753e:	2000      	movs	r0, #0
 8007540:	f7f8 ff0a 	bl	8000358 <__aeabi_dsub>
 8007544:	ec53 2b18 	vmov	r2, r3, d8
 8007548:	f7f9 fb30 	bl	8000bac <__aeabi_dcmplt>
 800754c:	2800      	cmp	r0, #0
 800754e:	f040 80b9 	bne.w	80076c4 <_dtoa_r+0x6fc>
 8007552:	9b02      	ldr	r3, [sp, #8]
 8007554:	429d      	cmp	r5, r3
 8007556:	f43f af75 	beq.w	8007444 <_dtoa_r+0x47c>
 800755a:	4b2f      	ldr	r3, [pc, #188]	; (8007618 <_dtoa_r+0x650>)
 800755c:	ec51 0b18 	vmov	r0, r1, d8
 8007560:	2200      	movs	r2, #0
 8007562:	f7f9 f8b1 	bl	80006c8 <__aeabi_dmul>
 8007566:	4b2c      	ldr	r3, [pc, #176]	; (8007618 <_dtoa_r+0x650>)
 8007568:	ec41 0b18 	vmov	d8, r0, r1
 800756c:	2200      	movs	r2, #0
 800756e:	4630      	mov	r0, r6
 8007570:	4639      	mov	r1, r7
 8007572:	f7f9 f8a9 	bl	80006c8 <__aeabi_dmul>
 8007576:	4606      	mov	r6, r0
 8007578:	460f      	mov	r7, r1
 800757a:	e7c4      	b.n	8007506 <_dtoa_r+0x53e>
 800757c:	ec51 0b17 	vmov	r0, r1, d7
 8007580:	f7f9 f8a2 	bl	80006c8 <__aeabi_dmul>
 8007584:	9b02      	ldr	r3, [sp, #8]
 8007586:	9d00      	ldr	r5, [sp, #0]
 8007588:	930c      	str	r3, [sp, #48]	; 0x30
 800758a:	ec41 0b18 	vmov	d8, r0, r1
 800758e:	4639      	mov	r1, r7
 8007590:	4630      	mov	r0, r6
 8007592:	f7f9 fb49 	bl	8000c28 <__aeabi_d2iz>
 8007596:	9011      	str	r0, [sp, #68]	; 0x44
 8007598:	f7f9 f82c 	bl	80005f4 <__aeabi_i2d>
 800759c:	4602      	mov	r2, r0
 800759e:	460b      	mov	r3, r1
 80075a0:	4630      	mov	r0, r6
 80075a2:	4639      	mov	r1, r7
 80075a4:	f7f8 fed8 	bl	8000358 <__aeabi_dsub>
 80075a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80075aa:	3330      	adds	r3, #48	; 0x30
 80075ac:	f805 3b01 	strb.w	r3, [r5], #1
 80075b0:	9b02      	ldr	r3, [sp, #8]
 80075b2:	429d      	cmp	r5, r3
 80075b4:	4606      	mov	r6, r0
 80075b6:	460f      	mov	r7, r1
 80075b8:	f04f 0200 	mov.w	r2, #0
 80075bc:	d134      	bne.n	8007628 <_dtoa_r+0x660>
 80075be:	4b19      	ldr	r3, [pc, #100]	; (8007624 <_dtoa_r+0x65c>)
 80075c0:	ec51 0b18 	vmov	r0, r1, d8
 80075c4:	f7f8 feca 	bl	800035c <__adddf3>
 80075c8:	4602      	mov	r2, r0
 80075ca:	460b      	mov	r3, r1
 80075cc:	4630      	mov	r0, r6
 80075ce:	4639      	mov	r1, r7
 80075d0:	f7f9 fb0a 	bl	8000be8 <__aeabi_dcmpgt>
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d175      	bne.n	80076c4 <_dtoa_r+0x6fc>
 80075d8:	ec53 2b18 	vmov	r2, r3, d8
 80075dc:	4911      	ldr	r1, [pc, #68]	; (8007624 <_dtoa_r+0x65c>)
 80075de:	2000      	movs	r0, #0
 80075e0:	f7f8 feba 	bl	8000358 <__aeabi_dsub>
 80075e4:	4602      	mov	r2, r0
 80075e6:	460b      	mov	r3, r1
 80075e8:	4630      	mov	r0, r6
 80075ea:	4639      	mov	r1, r7
 80075ec:	f7f9 fade 	bl	8000bac <__aeabi_dcmplt>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f43f af27 	beq.w	8007444 <_dtoa_r+0x47c>
 80075f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075f8:	1e6b      	subs	r3, r5, #1
 80075fa:	930c      	str	r3, [sp, #48]	; 0x30
 80075fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007600:	2b30      	cmp	r3, #48	; 0x30
 8007602:	d0f8      	beq.n	80075f6 <_dtoa_r+0x62e>
 8007604:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007608:	e04a      	b.n	80076a0 <_dtoa_r+0x6d8>
 800760a:	bf00      	nop
 800760c:	0801dcd0 	.word	0x0801dcd0
 8007610:	0801dca8 	.word	0x0801dca8
 8007614:	3ff00000 	.word	0x3ff00000
 8007618:	40240000 	.word	0x40240000
 800761c:	401c0000 	.word	0x401c0000
 8007620:	40140000 	.word	0x40140000
 8007624:	3fe00000 	.word	0x3fe00000
 8007628:	4baf      	ldr	r3, [pc, #700]	; (80078e8 <_dtoa_r+0x920>)
 800762a:	f7f9 f84d 	bl	80006c8 <__aeabi_dmul>
 800762e:	4606      	mov	r6, r0
 8007630:	460f      	mov	r7, r1
 8007632:	e7ac      	b.n	800758e <_dtoa_r+0x5c6>
 8007634:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007638:	9d00      	ldr	r5, [sp, #0]
 800763a:	4642      	mov	r2, r8
 800763c:	464b      	mov	r3, r9
 800763e:	4630      	mov	r0, r6
 8007640:	4639      	mov	r1, r7
 8007642:	f7f9 f96b 	bl	800091c <__aeabi_ddiv>
 8007646:	f7f9 faef 	bl	8000c28 <__aeabi_d2iz>
 800764a:	9002      	str	r0, [sp, #8]
 800764c:	f7f8 ffd2 	bl	80005f4 <__aeabi_i2d>
 8007650:	4642      	mov	r2, r8
 8007652:	464b      	mov	r3, r9
 8007654:	f7f9 f838 	bl	80006c8 <__aeabi_dmul>
 8007658:	4602      	mov	r2, r0
 800765a:	460b      	mov	r3, r1
 800765c:	4630      	mov	r0, r6
 800765e:	4639      	mov	r1, r7
 8007660:	f7f8 fe7a 	bl	8000358 <__aeabi_dsub>
 8007664:	9e02      	ldr	r6, [sp, #8]
 8007666:	9f01      	ldr	r7, [sp, #4]
 8007668:	3630      	adds	r6, #48	; 0x30
 800766a:	f805 6b01 	strb.w	r6, [r5], #1
 800766e:	9e00      	ldr	r6, [sp, #0]
 8007670:	1bae      	subs	r6, r5, r6
 8007672:	42b7      	cmp	r7, r6
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	d137      	bne.n	80076ea <_dtoa_r+0x722>
 800767a:	f7f8 fe6f 	bl	800035c <__adddf3>
 800767e:	4642      	mov	r2, r8
 8007680:	464b      	mov	r3, r9
 8007682:	4606      	mov	r6, r0
 8007684:	460f      	mov	r7, r1
 8007686:	f7f9 faaf 	bl	8000be8 <__aeabi_dcmpgt>
 800768a:	b9c8      	cbnz	r0, 80076c0 <_dtoa_r+0x6f8>
 800768c:	4642      	mov	r2, r8
 800768e:	464b      	mov	r3, r9
 8007690:	4630      	mov	r0, r6
 8007692:	4639      	mov	r1, r7
 8007694:	f7f9 fa80 	bl	8000b98 <__aeabi_dcmpeq>
 8007698:	b110      	cbz	r0, 80076a0 <_dtoa_r+0x6d8>
 800769a:	9b02      	ldr	r3, [sp, #8]
 800769c:	07d9      	lsls	r1, r3, #31
 800769e:	d40f      	bmi.n	80076c0 <_dtoa_r+0x6f8>
 80076a0:	4620      	mov	r0, r4
 80076a2:	4659      	mov	r1, fp
 80076a4:	f000 ff50 	bl	8008548 <_Bfree>
 80076a8:	2300      	movs	r3, #0
 80076aa:	702b      	strb	r3, [r5, #0]
 80076ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076ae:	f10a 0001 	add.w	r0, sl, #1
 80076b2:	6018      	str	r0, [r3, #0]
 80076b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	f43f acd8 	beq.w	800706c <_dtoa_r+0xa4>
 80076bc:	601d      	str	r5, [r3, #0]
 80076be:	e4d5      	b.n	800706c <_dtoa_r+0xa4>
 80076c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80076c4:	462b      	mov	r3, r5
 80076c6:	461d      	mov	r5, r3
 80076c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80076cc:	2a39      	cmp	r2, #57	; 0x39
 80076ce:	d108      	bne.n	80076e2 <_dtoa_r+0x71a>
 80076d0:	9a00      	ldr	r2, [sp, #0]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d1f7      	bne.n	80076c6 <_dtoa_r+0x6fe>
 80076d6:	9a07      	ldr	r2, [sp, #28]
 80076d8:	9900      	ldr	r1, [sp, #0]
 80076da:	3201      	adds	r2, #1
 80076dc:	9207      	str	r2, [sp, #28]
 80076de:	2230      	movs	r2, #48	; 0x30
 80076e0:	700a      	strb	r2, [r1, #0]
 80076e2:	781a      	ldrb	r2, [r3, #0]
 80076e4:	3201      	adds	r2, #1
 80076e6:	701a      	strb	r2, [r3, #0]
 80076e8:	e78c      	b.n	8007604 <_dtoa_r+0x63c>
 80076ea:	4b7f      	ldr	r3, [pc, #508]	; (80078e8 <_dtoa_r+0x920>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	f7f8 ffeb 	bl	80006c8 <__aeabi_dmul>
 80076f2:	2200      	movs	r2, #0
 80076f4:	2300      	movs	r3, #0
 80076f6:	4606      	mov	r6, r0
 80076f8:	460f      	mov	r7, r1
 80076fa:	f7f9 fa4d 	bl	8000b98 <__aeabi_dcmpeq>
 80076fe:	2800      	cmp	r0, #0
 8007700:	d09b      	beq.n	800763a <_dtoa_r+0x672>
 8007702:	e7cd      	b.n	80076a0 <_dtoa_r+0x6d8>
 8007704:	9a08      	ldr	r2, [sp, #32]
 8007706:	2a00      	cmp	r2, #0
 8007708:	f000 80c4 	beq.w	8007894 <_dtoa_r+0x8cc>
 800770c:	9a05      	ldr	r2, [sp, #20]
 800770e:	2a01      	cmp	r2, #1
 8007710:	f300 80a8 	bgt.w	8007864 <_dtoa_r+0x89c>
 8007714:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007716:	2a00      	cmp	r2, #0
 8007718:	f000 80a0 	beq.w	800785c <_dtoa_r+0x894>
 800771c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007720:	9e06      	ldr	r6, [sp, #24]
 8007722:	4645      	mov	r5, r8
 8007724:	9a04      	ldr	r2, [sp, #16]
 8007726:	2101      	movs	r1, #1
 8007728:	441a      	add	r2, r3
 800772a:	4620      	mov	r0, r4
 800772c:	4498      	add	r8, r3
 800772e:	9204      	str	r2, [sp, #16]
 8007730:	f001 f810 	bl	8008754 <__i2b>
 8007734:	4607      	mov	r7, r0
 8007736:	2d00      	cmp	r5, #0
 8007738:	dd0b      	ble.n	8007752 <_dtoa_r+0x78a>
 800773a:	9b04      	ldr	r3, [sp, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	dd08      	ble.n	8007752 <_dtoa_r+0x78a>
 8007740:	42ab      	cmp	r3, r5
 8007742:	9a04      	ldr	r2, [sp, #16]
 8007744:	bfa8      	it	ge
 8007746:	462b      	movge	r3, r5
 8007748:	eba8 0803 	sub.w	r8, r8, r3
 800774c:	1aed      	subs	r5, r5, r3
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	9304      	str	r3, [sp, #16]
 8007752:	9b06      	ldr	r3, [sp, #24]
 8007754:	b1fb      	cbz	r3, 8007796 <_dtoa_r+0x7ce>
 8007756:	9b08      	ldr	r3, [sp, #32]
 8007758:	2b00      	cmp	r3, #0
 800775a:	f000 809f 	beq.w	800789c <_dtoa_r+0x8d4>
 800775e:	2e00      	cmp	r6, #0
 8007760:	dd11      	ble.n	8007786 <_dtoa_r+0x7be>
 8007762:	4639      	mov	r1, r7
 8007764:	4632      	mov	r2, r6
 8007766:	4620      	mov	r0, r4
 8007768:	f001 f8b0 	bl	80088cc <__pow5mult>
 800776c:	465a      	mov	r2, fp
 800776e:	4601      	mov	r1, r0
 8007770:	4607      	mov	r7, r0
 8007772:	4620      	mov	r0, r4
 8007774:	f001 f804 	bl	8008780 <__multiply>
 8007778:	4659      	mov	r1, fp
 800777a:	9007      	str	r0, [sp, #28]
 800777c:	4620      	mov	r0, r4
 800777e:	f000 fee3 	bl	8008548 <_Bfree>
 8007782:	9b07      	ldr	r3, [sp, #28]
 8007784:	469b      	mov	fp, r3
 8007786:	9b06      	ldr	r3, [sp, #24]
 8007788:	1b9a      	subs	r2, r3, r6
 800778a:	d004      	beq.n	8007796 <_dtoa_r+0x7ce>
 800778c:	4659      	mov	r1, fp
 800778e:	4620      	mov	r0, r4
 8007790:	f001 f89c 	bl	80088cc <__pow5mult>
 8007794:	4683      	mov	fp, r0
 8007796:	2101      	movs	r1, #1
 8007798:	4620      	mov	r0, r4
 800779a:	f000 ffdb 	bl	8008754 <__i2b>
 800779e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	4606      	mov	r6, r0
 80077a4:	dd7c      	ble.n	80078a0 <_dtoa_r+0x8d8>
 80077a6:	461a      	mov	r2, r3
 80077a8:	4601      	mov	r1, r0
 80077aa:	4620      	mov	r0, r4
 80077ac:	f001 f88e 	bl	80088cc <__pow5mult>
 80077b0:	9b05      	ldr	r3, [sp, #20]
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	4606      	mov	r6, r0
 80077b6:	dd76      	ble.n	80078a6 <_dtoa_r+0x8de>
 80077b8:	2300      	movs	r3, #0
 80077ba:	9306      	str	r3, [sp, #24]
 80077bc:	6933      	ldr	r3, [r6, #16]
 80077be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80077c2:	6918      	ldr	r0, [r3, #16]
 80077c4:	f000 ff76 	bl	80086b4 <__hi0bits>
 80077c8:	f1c0 0020 	rsb	r0, r0, #32
 80077cc:	9b04      	ldr	r3, [sp, #16]
 80077ce:	4418      	add	r0, r3
 80077d0:	f010 001f 	ands.w	r0, r0, #31
 80077d4:	f000 8086 	beq.w	80078e4 <_dtoa_r+0x91c>
 80077d8:	f1c0 0320 	rsb	r3, r0, #32
 80077dc:	2b04      	cmp	r3, #4
 80077de:	dd7f      	ble.n	80078e0 <_dtoa_r+0x918>
 80077e0:	f1c0 001c 	rsb	r0, r0, #28
 80077e4:	9b04      	ldr	r3, [sp, #16]
 80077e6:	4403      	add	r3, r0
 80077e8:	4480      	add	r8, r0
 80077ea:	4405      	add	r5, r0
 80077ec:	9304      	str	r3, [sp, #16]
 80077ee:	f1b8 0f00 	cmp.w	r8, #0
 80077f2:	dd05      	ble.n	8007800 <_dtoa_r+0x838>
 80077f4:	4659      	mov	r1, fp
 80077f6:	4642      	mov	r2, r8
 80077f8:	4620      	mov	r0, r4
 80077fa:	f001 f8c1 	bl	8008980 <__lshift>
 80077fe:	4683      	mov	fp, r0
 8007800:	9b04      	ldr	r3, [sp, #16]
 8007802:	2b00      	cmp	r3, #0
 8007804:	dd05      	ble.n	8007812 <_dtoa_r+0x84a>
 8007806:	4631      	mov	r1, r6
 8007808:	461a      	mov	r2, r3
 800780a:	4620      	mov	r0, r4
 800780c:	f001 f8b8 	bl	8008980 <__lshift>
 8007810:	4606      	mov	r6, r0
 8007812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007814:	2b00      	cmp	r3, #0
 8007816:	d069      	beq.n	80078ec <_dtoa_r+0x924>
 8007818:	4631      	mov	r1, r6
 800781a:	4658      	mov	r0, fp
 800781c:	f001 f91c 	bl	8008a58 <__mcmp>
 8007820:	2800      	cmp	r0, #0
 8007822:	da63      	bge.n	80078ec <_dtoa_r+0x924>
 8007824:	2300      	movs	r3, #0
 8007826:	4659      	mov	r1, fp
 8007828:	220a      	movs	r2, #10
 800782a:	4620      	mov	r0, r4
 800782c:	f000 feae 	bl	800858c <__multadd>
 8007830:	9b08      	ldr	r3, [sp, #32]
 8007832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007836:	4683      	mov	fp, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 818f 	beq.w	8007b5c <_dtoa_r+0xb94>
 800783e:	4639      	mov	r1, r7
 8007840:	2300      	movs	r3, #0
 8007842:	220a      	movs	r2, #10
 8007844:	4620      	mov	r0, r4
 8007846:	f000 fea1 	bl	800858c <__multadd>
 800784a:	f1b9 0f00 	cmp.w	r9, #0
 800784e:	4607      	mov	r7, r0
 8007850:	f300 808e 	bgt.w	8007970 <_dtoa_r+0x9a8>
 8007854:	9b05      	ldr	r3, [sp, #20]
 8007856:	2b02      	cmp	r3, #2
 8007858:	dc50      	bgt.n	80078fc <_dtoa_r+0x934>
 800785a:	e089      	b.n	8007970 <_dtoa_r+0x9a8>
 800785c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800785e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007862:	e75d      	b.n	8007720 <_dtoa_r+0x758>
 8007864:	9b01      	ldr	r3, [sp, #4]
 8007866:	1e5e      	subs	r6, r3, #1
 8007868:	9b06      	ldr	r3, [sp, #24]
 800786a:	42b3      	cmp	r3, r6
 800786c:	bfbf      	itttt	lt
 800786e:	9b06      	ldrlt	r3, [sp, #24]
 8007870:	9606      	strlt	r6, [sp, #24]
 8007872:	1af2      	sublt	r2, r6, r3
 8007874:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007876:	bfb6      	itet	lt
 8007878:	189b      	addlt	r3, r3, r2
 800787a:	1b9e      	subge	r6, r3, r6
 800787c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800787e:	9b01      	ldr	r3, [sp, #4]
 8007880:	bfb8      	it	lt
 8007882:	2600      	movlt	r6, #0
 8007884:	2b00      	cmp	r3, #0
 8007886:	bfb5      	itete	lt
 8007888:	eba8 0503 	sublt.w	r5, r8, r3
 800788c:	9b01      	ldrge	r3, [sp, #4]
 800788e:	2300      	movlt	r3, #0
 8007890:	4645      	movge	r5, r8
 8007892:	e747      	b.n	8007724 <_dtoa_r+0x75c>
 8007894:	9e06      	ldr	r6, [sp, #24]
 8007896:	9f08      	ldr	r7, [sp, #32]
 8007898:	4645      	mov	r5, r8
 800789a:	e74c      	b.n	8007736 <_dtoa_r+0x76e>
 800789c:	9a06      	ldr	r2, [sp, #24]
 800789e:	e775      	b.n	800778c <_dtoa_r+0x7c4>
 80078a0:	9b05      	ldr	r3, [sp, #20]
 80078a2:	2b01      	cmp	r3, #1
 80078a4:	dc18      	bgt.n	80078d8 <_dtoa_r+0x910>
 80078a6:	9b02      	ldr	r3, [sp, #8]
 80078a8:	b9b3      	cbnz	r3, 80078d8 <_dtoa_r+0x910>
 80078aa:	9b03      	ldr	r3, [sp, #12]
 80078ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078b0:	b9a3      	cbnz	r3, 80078dc <_dtoa_r+0x914>
 80078b2:	9b03      	ldr	r3, [sp, #12]
 80078b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80078b8:	0d1b      	lsrs	r3, r3, #20
 80078ba:	051b      	lsls	r3, r3, #20
 80078bc:	b12b      	cbz	r3, 80078ca <_dtoa_r+0x902>
 80078be:	9b04      	ldr	r3, [sp, #16]
 80078c0:	3301      	adds	r3, #1
 80078c2:	9304      	str	r3, [sp, #16]
 80078c4:	f108 0801 	add.w	r8, r8, #1
 80078c8:	2301      	movs	r3, #1
 80078ca:	9306      	str	r3, [sp, #24]
 80078cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	f47f af74 	bne.w	80077bc <_dtoa_r+0x7f4>
 80078d4:	2001      	movs	r0, #1
 80078d6:	e779      	b.n	80077cc <_dtoa_r+0x804>
 80078d8:	2300      	movs	r3, #0
 80078da:	e7f6      	b.n	80078ca <_dtoa_r+0x902>
 80078dc:	9b02      	ldr	r3, [sp, #8]
 80078de:	e7f4      	b.n	80078ca <_dtoa_r+0x902>
 80078e0:	d085      	beq.n	80077ee <_dtoa_r+0x826>
 80078e2:	4618      	mov	r0, r3
 80078e4:	301c      	adds	r0, #28
 80078e6:	e77d      	b.n	80077e4 <_dtoa_r+0x81c>
 80078e8:	40240000 	.word	0x40240000
 80078ec:	9b01      	ldr	r3, [sp, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	dc38      	bgt.n	8007964 <_dtoa_r+0x99c>
 80078f2:	9b05      	ldr	r3, [sp, #20]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	dd35      	ble.n	8007964 <_dtoa_r+0x99c>
 80078f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80078fc:	f1b9 0f00 	cmp.w	r9, #0
 8007900:	d10d      	bne.n	800791e <_dtoa_r+0x956>
 8007902:	4631      	mov	r1, r6
 8007904:	464b      	mov	r3, r9
 8007906:	2205      	movs	r2, #5
 8007908:	4620      	mov	r0, r4
 800790a:	f000 fe3f 	bl	800858c <__multadd>
 800790e:	4601      	mov	r1, r0
 8007910:	4606      	mov	r6, r0
 8007912:	4658      	mov	r0, fp
 8007914:	f001 f8a0 	bl	8008a58 <__mcmp>
 8007918:	2800      	cmp	r0, #0
 800791a:	f73f adbd 	bgt.w	8007498 <_dtoa_r+0x4d0>
 800791e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007920:	9d00      	ldr	r5, [sp, #0]
 8007922:	ea6f 0a03 	mvn.w	sl, r3
 8007926:	f04f 0800 	mov.w	r8, #0
 800792a:	4631      	mov	r1, r6
 800792c:	4620      	mov	r0, r4
 800792e:	f000 fe0b 	bl	8008548 <_Bfree>
 8007932:	2f00      	cmp	r7, #0
 8007934:	f43f aeb4 	beq.w	80076a0 <_dtoa_r+0x6d8>
 8007938:	f1b8 0f00 	cmp.w	r8, #0
 800793c:	d005      	beq.n	800794a <_dtoa_r+0x982>
 800793e:	45b8      	cmp	r8, r7
 8007940:	d003      	beq.n	800794a <_dtoa_r+0x982>
 8007942:	4641      	mov	r1, r8
 8007944:	4620      	mov	r0, r4
 8007946:	f000 fdff 	bl	8008548 <_Bfree>
 800794a:	4639      	mov	r1, r7
 800794c:	4620      	mov	r0, r4
 800794e:	f000 fdfb 	bl	8008548 <_Bfree>
 8007952:	e6a5      	b.n	80076a0 <_dtoa_r+0x6d8>
 8007954:	2600      	movs	r6, #0
 8007956:	4637      	mov	r7, r6
 8007958:	e7e1      	b.n	800791e <_dtoa_r+0x956>
 800795a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800795c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007960:	4637      	mov	r7, r6
 8007962:	e599      	b.n	8007498 <_dtoa_r+0x4d0>
 8007964:	9b08      	ldr	r3, [sp, #32]
 8007966:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 80fd 	beq.w	8007b6a <_dtoa_r+0xba2>
 8007970:	2d00      	cmp	r5, #0
 8007972:	dd05      	ble.n	8007980 <_dtoa_r+0x9b8>
 8007974:	4639      	mov	r1, r7
 8007976:	462a      	mov	r2, r5
 8007978:	4620      	mov	r0, r4
 800797a:	f001 f801 	bl	8008980 <__lshift>
 800797e:	4607      	mov	r7, r0
 8007980:	9b06      	ldr	r3, [sp, #24]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d05c      	beq.n	8007a40 <_dtoa_r+0xa78>
 8007986:	6879      	ldr	r1, [r7, #4]
 8007988:	4620      	mov	r0, r4
 800798a:	f000 fd9d 	bl	80084c8 <_Balloc>
 800798e:	4605      	mov	r5, r0
 8007990:	b928      	cbnz	r0, 800799e <_dtoa_r+0x9d6>
 8007992:	4b80      	ldr	r3, [pc, #512]	; (8007b94 <_dtoa_r+0xbcc>)
 8007994:	4602      	mov	r2, r0
 8007996:	f240 21ea 	movw	r1, #746	; 0x2ea
 800799a:	f7ff bb2e 	b.w	8006ffa <_dtoa_r+0x32>
 800799e:	693a      	ldr	r2, [r7, #16]
 80079a0:	3202      	adds	r2, #2
 80079a2:	0092      	lsls	r2, r2, #2
 80079a4:	f107 010c 	add.w	r1, r7, #12
 80079a8:	300c      	adds	r0, #12
 80079aa:	f000 fd7f 	bl	80084ac <memcpy>
 80079ae:	2201      	movs	r2, #1
 80079b0:	4629      	mov	r1, r5
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 ffe4 	bl	8008980 <__lshift>
 80079b8:	9b00      	ldr	r3, [sp, #0]
 80079ba:	3301      	adds	r3, #1
 80079bc:	9301      	str	r3, [sp, #4]
 80079be:	9b00      	ldr	r3, [sp, #0]
 80079c0:	444b      	add	r3, r9
 80079c2:	9307      	str	r3, [sp, #28]
 80079c4:	9b02      	ldr	r3, [sp, #8]
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	46b8      	mov	r8, r7
 80079cc:	9306      	str	r3, [sp, #24]
 80079ce:	4607      	mov	r7, r0
 80079d0:	9b01      	ldr	r3, [sp, #4]
 80079d2:	4631      	mov	r1, r6
 80079d4:	3b01      	subs	r3, #1
 80079d6:	4658      	mov	r0, fp
 80079d8:	9302      	str	r3, [sp, #8]
 80079da:	f7ff fa67 	bl	8006eac <quorem>
 80079de:	4603      	mov	r3, r0
 80079e0:	3330      	adds	r3, #48	; 0x30
 80079e2:	9004      	str	r0, [sp, #16]
 80079e4:	4641      	mov	r1, r8
 80079e6:	4658      	mov	r0, fp
 80079e8:	9308      	str	r3, [sp, #32]
 80079ea:	f001 f835 	bl	8008a58 <__mcmp>
 80079ee:	463a      	mov	r2, r7
 80079f0:	4681      	mov	r9, r0
 80079f2:	4631      	mov	r1, r6
 80079f4:	4620      	mov	r0, r4
 80079f6:	f001 f84b 	bl	8008a90 <__mdiff>
 80079fa:	68c2      	ldr	r2, [r0, #12]
 80079fc:	9b08      	ldr	r3, [sp, #32]
 80079fe:	4605      	mov	r5, r0
 8007a00:	bb02      	cbnz	r2, 8007a44 <_dtoa_r+0xa7c>
 8007a02:	4601      	mov	r1, r0
 8007a04:	4658      	mov	r0, fp
 8007a06:	f001 f827 	bl	8008a58 <__mcmp>
 8007a0a:	9b08      	ldr	r3, [sp, #32]
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	4629      	mov	r1, r5
 8007a10:	4620      	mov	r0, r4
 8007a12:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007a16:	f000 fd97 	bl	8008548 <_Bfree>
 8007a1a:	9b05      	ldr	r3, [sp, #20]
 8007a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a1e:	9d01      	ldr	r5, [sp, #4]
 8007a20:	ea43 0102 	orr.w	r1, r3, r2
 8007a24:	9b06      	ldr	r3, [sp, #24]
 8007a26:	430b      	orrs	r3, r1
 8007a28:	9b08      	ldr	r3, [sp, #32]
 8007a2a:	d10d      	bne.n	8007a48 <_dtoa_r+0xa80>
 8007a2c:	2b39      	cmp	r3, #57	; 0x39
 8007a2e:	d029      	beq.n	8007a84 <_dtoa_r+0xabc>
 8007a30:	f1b9 0f00 	cmp.w	r9, #0
 8007a34:	dd01      	ble.n	8007a3a <_dtoa_r+0xa72>
 8007a36:	9b04      	ldr	r3, [sp, #16]
 8007a38:	3331      	adds	r3, #49	; 0x31
 8007a3a:	9a02      	ldr	r2, [sp, #8]
 8007a3c:	7013      	strb	r3, [r2, #0]
 8007a3e:	e774      	b.n	800792a <_dtoa_r+0x962>
 8007a40:	4638      	mov	r0, r7
 8007a42:	e7b9      	b.n	80079b8 <_dtoa_r+0x9f0>
 8007a44:	2201      	movs	r2, #1
 8007a46:	e7e2      	b.n	8007a0e <_dtoa_r+0xa46>
 8007a48:	f1b9 0f00 	cmp.w	r9, #0
 8007a4c:	db06      	blt.n	8007a5c <_dtoa_r+0xa94>
 8007a4e:	9905      	ldr	r1, [sp, #20]
 8007a50:	ea41 0909 	orr.w	r9, r1, r9
 8007a54:	9906      	ldr	r1, [sp, #24]
 8007a56:	ea59 0101 	orrs.w	r1, r9, r1
 8007a5a:	d120      	bne.n	8007a9e <_dtoa_r+0xad6>
 8007a5c:	2a00      	cmp	r2, #0
 8007a5e:	ddec      	ble.n	8007a3a <_dtoa_r+0xa72>
 8007a60:	4659      	mov	r1, fp
 8007a62:	2201      	movs	r2, #1
 8007a64:	4620      	mov	r0, r4
 8007a66:	9301      	str	r3, [sp, #4]
 8007a68:	f000 ff8a 	bl	8008980 <__lshift>
 8007a6c:	4631      	mov	r1, r6
 8007a6e:	4683      	mov	fp, r0
 8007a70:	f000 fff2 	bl	8008a58 <__mcmp>
 8007a74:	2800      	cmp	r0, #0
 8007a76:	9b01      	ldr	r3, [sp, #4]
 8007a78:	dc02      	bgt.n	8007a80 <_dtoa_r+0xab8>
 8007a7a:	d1de      	bne.n	8007a3a <_dtoa_r+0xa72>
 8007a7c:	07da      	lsls	r2, r3, #31
 8007a7e:	d5dc      	bpl.n	8007a3a <_dtoa_r+0xa72>
 8007a80:	2b39      	cmp	r3, #57	; 0x39
 8007a82:	d1d8      	bne.n	8007a36 <_dtoa_r+0xa6e>
 8007a84:	9a02      	ldr	r2, [sp, #8]
 8007a86:	2339      	movs	r3, #57	; 0x39
 8007a88:	7013      	strb	r3, [r2, #0]
 8007a8a:	462b      	mov	r3, r5
 8007a8c:	461d      	mov	r5, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a94:	2a39      	cmp	r2, #57	; 0x39
 8007a96:	d050      	beq.n	8007b3a <_dtoa_r+0xb72>
 8007a98:	3201      	adds	r2, #1
 8007a9a:	701a      	strb	r2, [r3, #0]
 8007a9c:	e745      	b.n	800792a <_dtoa_r+0x962>
 8007a9e:	2a00      	cmp	r2, #0
 8007aa0:	dd03      	ble.n	8007aaa <_dtoa_r+0xae2>
 8007aa2:	2b39      	cmp	r3, #57	; 0x39
 8007aa4:	d0ee      	beq.n	8007a84 <_dtoa_r+0xabc>
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	e7c7      	b.n	8007a3a <_dtoa_r+0xa72>
 8007aaa:	9a01      	ldr	r2, [sp, #4]
 8007aac:	9907      	ldr	r1, [sp, #28]
 8007aae:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007ab2:	428a      	cmp	r2, r1
 8007ab4:	d02a      	beq.n	8007b0c <_dtoa_r+0xb44>
 8007ab6:	4659      	mov	r1, fp
 8007ab8:	2300      	movs	r3, #0
 8007aba:	220a      	movs	r2, #10
 8007abc:	4620      	mov	r0, r4
 8007abe:	f000 fd65 	bl	800858c <__multadd>
 8007ac2:	45b8      	cmp	r8, r7
 8007ac4:	4683      	mov	fp, r0
 8007ac6:	f04f 0300 	mov.w	r3, #0
 8007aca:	f04f 020a 	mov.w	r2, #10
 8007ace:	4641      	mov	r1, r8
 8007ad0:	4620      	mov	r0, r4
 8007ad2:	d107      	bne.n	8007ae4 <_dtoa_r+0xb1c>
 8007ad4:	f000 fd5a 	bl	800858c <__multadd>
 8007ad8:	4680      	mov	r8, r0
 8007ada:	4607      	mov	r7, r0
 8007adc:	9b01      	ldr	r3, [sp, #4]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	9301      	str	r3, [sp, #4]
 8007ae2:	e775      	b.n	80079d0 <_dtoa_r+0xa08>
 8007ae4:	f000 fd52 	bl	800858c <__multadd>
 8007ae8:	4639      	mov	r1, r7
 8007aea:	4680      	mov	r8, r0
 8007aec:	2300      	movs	r3, #0
 8007aee:	220a      	movs	r2, #10
 8007af0:	4620      	mov	r0, r4
 8007af2:	f000 fd4b 	bl	800858c <__multadd>
 8007af6:	4607      	mov	r7, r0
 8007af8:	e7f0      	b.n	8007adc <_dtoa_r+0xb14>
 8007afa:	f1b9 0f00 	cmp.w	r9, #0
 8007afe:	9a00      	ldr	r2, [sp, #0]
 8007b00:	bfcc      	ite	gt
 8007b02:	464d      	movgt	r5, r9
 8007b04:	2501      	movle	r5, #1
 8007b06:	4415      	add	r5, r2
 8007b08:	f04f 0800 	mov.w	r8, #0
 8007b0c:	4659      	mov	r1, fp
 8007b0e:	2201      	movs	r2, #1
 8007b10:	4620      	mov	r0, r4
 8007b12:	9301      	str	r3, [sp, #4]
 8007b14:	f000 ff34 	bl	8008980 <__lshift>
 8007b18:	4631      	mov	r1, r6
 8007b1a:	4683      	mov	fp, r0
 8007b1c:	f000 ff9c 	bl	8008a58 <__mcmp>
 8007b20:	2800      	cmp	r0, #0
 8007b22:	dcb2      	bgt.n	8007a8a <_dtoa_r+0xac2>
 8007b24:	d102      	bne.n	8007b2c <_dtoa_r+0xb64>
 8007b26:	9b01      	ldr	r3, [sp, #4]
 8007b28:	07db      	lsls	r3, r3, #31
 8007b2a:	d4ae      	bmi.n	8007a8a <_dtoa_r+0xac2>
 8007b2c:	462b      	mov	r3, r5
 8007b2e:	461d      	mov	r5, r3
 8007b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b34:	2a30      	cmp	r2, #48	; 0x30
 8007b36:	d0fa      	beq.n	8007b2e <_dtoa_r+0xb66>
 8007b38:	e6f7      	b.n	800792a <_dtoa_r+0x962>
 8007b3a:	9a00      	ldr	r2, [sp, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d1a5      	bne.n	8007a8c <_dtoa_r+0xac4>
 8007b40:	f10a 0a01 	add.w	sl, sl, #1
 8007b44:	2331      	movs	r3, #49	; 0x31
 8007b46:	e779      	b.n	8007a3c <_dtoa_r+0xa74>
 8007b48:	4b13      	ldr	r3, [pc, #76]	; (8007b98 <_dtoa_r+0xbd0>)
 8007b4a:	f7ff baaf 	b.w	80070ac <_dtoa_r+0xe4>
 8007b4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	f47f aa86 	bne.w	8007062 <_dtoa_r+0x9a>
 8007b56:	4b11      	ldr	r3, [pc, #68]	; (8007b9c <_dtoa_r+0xbd4>)
 8007b58:	f7ff baa8 	b.w	80070ac <_dtoa_r+0xe4>
 8007b5c:	f1b9 0f00 	cmp.w	r9, #0
 8007b60:	dc03      	bgt.n	8007b6a <_dtoa_r+0xba2>
 8007b62:	9b05      	ldr	r3, [sp, #20]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	f73f aec9 	bgt.w	80078fc <_dtoa_r+0x934>
 8007b6a:	9d00      	ldr	r5, [sp, #0]
 8007b6c:	4631      	mov	r1, r6
 8007b6e:	4658      	mov	r0, fp
 8007b70:	f7ff f99c 	bl	8006eac <quorem>
 8007b74:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007b78:	f805 3b01 	strb.w	r3, [r5], #1
 8007b7c:	9a00      	ldr	r2, [sp, #0]
 8007b7e:	1aaa      	subs	r2, r5, r2
 8007b80:	4591      	cmp	r9, r2
 8007b82:	ddba      	ble.n	8007afa <_dtoa_r+0xb32>
 8007b84:	4659      	mov	r1, fp
 8007b86:	2300      	movs	r3, #0
 8007b88:	220a      	movs	r2, #10
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f000 fcfe 	bl	800858c <__multadd>
 8007b90:	4683      	mov	fp, r0
 8007b92:	e7eb      	b.n	8007b6c <_dtoa_r+0xba4>
 8007b94:	0801db54 	.word	0x0801db54
 8007b98:	0801d954 	.word	0x0801d954
 8007b9c:	0801dad1 	.word	0x0801dad1

08007ba0 <std>:
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	b510      	push	{r4, lr}
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8007baa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bae:	6083      	str	r3, [r0, #8]
 8007bb0:	8181      	strh	r1, [r0, #12]
 8007bb2:	6643      	str	r3, [r0, #100]	; 0x64
 8007bb4:	81c2      	strh	r2, [r0, #14]
 8007bb6:	6183      	str	r3, [r0, #24]
 8007bb8:	4619      	mov	r1, r3
 8007bba:	2208      	movs	r2, #8
 8007bbc:	305c      	adds	r0, #92	; 0x5c
 8007bbe:	f7fd fc01 	bl	80053c4 <memset>
 8007bc2:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <std+0x38>)
 8007bc4:	6263      	str	r3, [r4, #36]	; 0x24
 8007bc6:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <std+0x3c>)
 8007bc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bca:	4b05      	ldr	r3, [pc, #20]	; (8007be0 <std+0x40>)
 8007bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bce:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <std+0x44>)
 8007bd0:	6224      	str	r4, [r4, #32]
 8007bd2:	6323      	str	r3, [r4, #48]	; 0x30
 8007bd4:	bd10      	pop	{r4, pc}
 8007bd6:	bf00      	nop
 8007bd8:	08009551 	.word	0x08009551
 8007bdc:	08009573 	.word	0x08009573
 8007be0:	080095ab 	.word	0x080095ab
 8007be4:	080095cf 	.word	0x080095cf

08007be8 <_cleanup_r>:
 8007be8:	4901      	ldr	r1, [pc, #4]	; (8007bf0 <_cleanup_r+0x8>)
 8007bea:	f000 b8af 	b.w	8007d4c <_fwalk_reent>
 8007bee:	bf00      	nop
 8007bf0:	08009925 	.word	0x08009925

08007bf4 <__sfmoreglue>:
 8007bf4:	b570      	push	{r4, r5, r6, lr}
 8007bf6:	1e4a      	subs	r2, r1, #1
 8007bf8:	2568      	movs	r5, #104	; 0x68
 8007bfa:	4355      	muls	r5, r2
 8007bfc:	460e      	mov	r6, r1
 8007bfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c02:	f001 f97b 	bl	8008efc <_malloc_r>
 8007c06:	4604      	mov	r4, r0
 8007c08:	b140      	cbz	r0, 8007c1c <__sfmoreglue+0x28>
 8007c0a:	2100      	movs	r1, #0
 8007c0c:	e9c0 1600 	strd	r1, r6, [r0]
 8007c10:	300c      	adds	r0, #12
 8007c12:	60a0      	str	r0, [r4, #8]
 8007c14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c18:	f7fd fbd4 	bl	80053c4 <memset>
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	bd70      	pop	{r4, r5, r6, pc}

08007c20 <__sfp_lock_acquire>:
 8007c20:	4801      	ldr	r0, [pc, #4]	; (8007c28 <__sfp_lock_acquire+0x8>)
 8007c22:	f000 bc26 	b.w	8008472 <__retarget_lock_acquire_recursive>
 8007c26:	bf00      	nop
 8007c28:	20006344 	.word	0x20006344

08007c2c <__sfp_lock_release>:
 8007c2c:	4801      	ldr	r0, [pc, #4]	; (8007c34 <__sfp_lock_release+0x8>)
 8007c2e:	f000 bc21 	b.w	8008474 <__retarget_lock_release_recursive>
 8007c32:	bf00      	nop
 8007c34:	20006344 	.word	0x20006344

08007c38 <__sinit_lock_acquire>:
 8007c38:	4801      	ldr	r0, [pc, #4]	; (8007c40 <__sinit_lock_acquire+0x8>)
 8007c3a:	f000 bc1a 	b.w	8008472 <__retarget_lock_acquire_recursive>
 8007c3e:	bf00      	nop
 8007c40:	2000633f 	.word	0x2000633f

08007c44 <__sinit_lock_release>:
 8007c44:	4801      	ldr	r0, [pc, #4]	; (8007c4c <__sinit_lock_release+0x8>)
 8007c46:	f000 bc15 	b.w	8008474 <__retarget_lock_release_recursive>
 8007c4a:	bf00      	nop
 8007c4c:	2000633f 	.word	0x2000633f

08007c50 <__sinit>:
 8007c50:	b510      	push	{r4, lr}
 8007c52:	4604      	mov	r4, r0
 8007c54:	f7ff fff0 	bl	8007c38 <__sinit_lock_acquire>
 8007c58:	69a3      	ldr	r3, [r4, #24]
 8007c5a:	b11b      	cbz	r3, 8007c64 <__sinit+0x14>
 8007c5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c60:	f7ff bff0 	b.w	8007c44 <__sinit_lock_release>
 8007c64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c68:	6523      	str	r3, [r4, #80]	; 0x50
 8007c6a:	4b13      	ldr	r3, [pc, #76]	; (8007cb8 <__sinit+0x68>)
 8007c6c:	4a13      	ldr	r2, [pc, #76]	; (8007cbc <__sinit+0x6c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c72:	42a3      	cmp	r3, r4
 8007c74:	bf04      	itt	eq
 8007c76:	2301      	moveq	r3, #1
 8007c78:	61a3      	streq	r3, [r4, #24]
 8007c7a:	4620      	mov	r0, r4
 8007c7c:	f000 f820 	bl	8007cc0 <__sfp>
 8007c80:	6060      	str	r0, [r4, #4]
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 f81c 	bl	8007cc0 <__sfp>
 8007c88:	60a0      	str	r0, [r4, #8]
 8007c8a:	4620      	mov	r0, r4
 8007c8c:	f000 f818 	bl	8007cc0 <__sfp>
 8007c90:	2200      	movs	r2, #0
 8007c92:	60e0      	str	r0, [r4, #12]
 8007c94:	2104      	movs	r1, #4
 8007c96:	6860      	ldr	r0, [r4, #4]
 8007c98:	f7ff ff82 	bl	8007ba0 <std>
 8007c9c:	68a0      	ldr	r0, [r4, #8]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	2109      	movs	r1, #9
 8007ca2:	f7ff ff7d 	bl	8007ba0 <std>
 8007ca6:	68e0      	ldr	r0, [r4, #12]
 8007ca8:	2202      	movs	r2, #2
 8007caa:	2112      	movs	r1, #18
 8007cac:	f7ff ff78 	bl	8007ba0 <std>
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	61a3      	str	r3, [r4, #24]
 8007cb4:	e7d2      	b.n	8007c5c <__sinit+0xc>
 8007cb6:	bf00      	nop
 8007cb8:	0801d940 	.word	0x0801d940
 8007cbc:	08007be9 	.word	0x08007be9

08007cc0 <__sfp>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	4607      	mov	r7, r0
 8007cc4:	f7ff ffac 	bl	8007c20 <__sfp_lock_acquire>
 8007cc8:	4b1e      	ldr	r3, [pc, #120]	; (8007d44 <__sfp+0x84>)
 8007cca:	681e      	ldr	r6, [r3, #0]
 8007ccc:	69b3      	ldr	r3, [r6, #24]
 8007cce:	b913      	cbnz	r3, 8007cd6 <__sfp+0x16>
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	f7ff ffbd 	bl	8007c50 <__sinit>
 8007cd6:	3648      	adds	r6, #72	; 0x48
 8007cd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	d503      	bpl.n	8007ce8 <__sfp+0x28>
 8007ce0:	6833      	ldr	r3, [r6, #0]
 8007ce2:	b30b      	cbz	r3, 8007d28 <__sfp+0x68>
 8007ce4:	6836      	ldr	r6, [r6, #0]
 8007ce6:	e7f7      	b.n	8007cd8 <__sfp+0x18>
 8007ce8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cec:	b9d5      	cbnz	r5, 8007d24 <__sfp+0x64>
 8007cee:	4b16      	ldr	r3, [pc, #88]	; (8007d48 <__sfp+0x88>)
 8007cf0:	60e3      	str	r3, [r4, #12]
 8007cf2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007cf6:	6665      	str	r5, [r4, #100]	; 0x64
 8007cf8:	f000 fbba 	bl	8008470 <__retarget_lock_init_recursive>
 8007cfc:	f7ff ff96 	bl	8007c2c <__sfp_lock_release>
 8007d00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d08:	6025      	str	r5, [r4, #0]
 8007d0a:	61a5      	str	r5, [r4, #24]
 8007d0c:	2208      	movs	r2, #8
 8007d0e:	4629      	mov	r1, r5
 8007d10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d14:	f7fd fb56 	bl	80053c4 <memset>
 8007d18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d20:	4620      	mov	r0, r4
 8007d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d24:	3468      	adds	r4, #104	; 0x68
 8007d26:	e7d9      	b.n	8007cdc <__sfp+0x1c>
 8007d28:	2104      	movs	r1, #4
 8007d2a:	4638      	mov	r0, r7
 8007d2c:	f7ff ff62 	bl	8007bf4 <__sfmoreglue>
 8007d30:	4604      	mov	r4, r0
 8007d32:	6030      	str	r0, [r6, #0]
 8007d34:	2800      	cmp	r0, #0
 8007d36:	d1d5      	bne.n	8007ce4 <__sfp+0x24>
 8007d38:	f7ff ff78 	bl	8007c2c <__sfp_lock_release>
 8007d3c:	230c      	movs	r3, #12
 8007d3e:	603b      	str	r3, [r7, #0]
 8007d40:	e7ee      	b.n	8007d20 <__sfp+0x60>
 8007d42:	bf00      	nop
 8007d44:	0801d940 	.word	0x0801d940
 8007d48:	ffff0001 	.word	0xffff0001

08007d4c <_fwalk_reent>:
 8007d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d50:	4606      	mov	r6, r0
 8007d52:	4688      	mov	r8, r1
 8007d54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d58:	2700      	movs	r7, #0
 8007d5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d5e:	f1b9 0901 	subs.w	r9, r9, #1
 8007d62:	d505      	bpl.n	8007d70 <_fwalk_reent+0x24>
 8007d64:	6824      	ldr	r4, [r4, #0]
 8007d66:	2c00      	cmp	r4, #0
 8007d68:	d1f7      	bne.n	8007d5a <_fwalk_reent+0xe>
 8007d6a:	4638      	mov	r0, r7
 8007d6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d70:	89ab      	ldrh	r3, [r5, #12]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d907      	bls.n	8007d86 <_fwalk_reent+0x3a>
 8007d76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	d003      	beq.n	8007d86 <_fwalk_reent+0x3a>
 8007d7e:	4629      	mov	r1, r5
 8007d80:	4630      	mov	r0, r6
 8007d82:	47c0      	blx	r8
 8007d84:	4307      	orrs	r7, r0
 8007d86:	3568      	adds	r5, #104	; 0x68
 8007d88:	e7e9      	b.n	8007d5e <_fwalk_reent+0x12>

08007d8a <rshift>:
 8007d8a:	6903      	ldr	r3, [r0, #16]
 8007d8c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007d90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d94:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007d98:	f100 0414 	add.w	r4, r0, #20
 8007d9c:	dd45      	ble.n	8007e2a <rshift+0xa0>
 8007d9e:	f011 011f 	ands.w	r1, r1, #31
 8007da2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007da6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007daa:	d10c      	bne.n	8007dc6 <rshift+0x3c>
 8007dac:	f100 0710 	add.w	r7, r0, #16
 8007db0:	4629      	mov	r1, r5
 8007db2:	42b1      	cmp	r1, r6
 8007db4:	d334      	bcc.n	8007e20 <rshift+0x96>
 8007db6:	1a9b      	subs	r3, r3, r2
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	1eea      	subs	r2, r5, #3
 8007dbc:	4296      	cmp	r6, r2
 8007dbe:	bf38      	it	cc
 8007dc0:	2300      	movcc	r3, #0
 8007dc2:	4423      	add	r3, r4
 8007dc4:	e015      	b.n	8007df2 <rshift+0x68>
 8007dc6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007dca:	f1c1 0820 	rsb	r8, r1, #32
 8007dce:	40cf      	lsrs	r7, r1
 8007dd0:	f105 0e04 	add.w	lr, r5, #4
 8007dd4:	46a1      	mov	r9, r4
 8007dd6:	4576      	cmp	r6, lr
 8007dd8:	46f4      	mov	ip, lr
 8007dda:	d815      	bhi.n	8007e08 <rshift+0x7e>
 8007ddc:	1a9b      	subs	r3, r3, r2
 8007dde:	009a      	lsls	r2, r3, #2
 8007de0:	3a04      	subs	r2, #4
 8007de2:	3501      	adds	r5, #1
 8007de4:	42ae      	cmp	r6, r5
 8007de6:	bf38      	it	cc
 8007de8:	2200      	movcc	r2, #0
 8007dea:	18a3      	adds	r3, r4, r2
 8007dec:	50a7      	str	r7, [r4, r2]
 8007dee:	b107      	cbz	r7, 8007df2 <rshift+0x68>
 8007df0:	3304      	adds	r3, #4
 8007df2:	1b1a      	subs	r2, r3, r4
 8007df4:	42a3      	cmp	r3, r4
 8007df6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007dfa:	bf08      	it	eq
 8007dfc:	2300      	moveq	r3, #0
 8007dfe:	6102      	str	r2, [r0, #16]
 8007e00:	bf08      	it	eq
 8007e02:	6143      	streq	r3, [r0, #20]
 8007e04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e08:	f8dc c000 	ldr.w	ip, [ip]
 8007e0c:	fa0c fc08 	lsl.w	ip, ip, r8
 8007e10:	ea4c 0707 	orr.w	r7, ip, r7
 8007e14:	f849 7b04 	str.w	r7, [r9], #4
 8007e18:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007e1c:	40cf      	lsrs	r7, r1
 8007e1e:	e7da      	b.n	8007dd6 <rshift+0x4c>
 8007e20:	f851 cb04 	ldr.w	ip, [r1], #4
 8007e24:	f847 cf04 	str.w	ip, [r7, #4]!
 8007e28:	e7c3      	b.n	8007db2 <rshift+0x28>
 8007e2a:	4623      	mov	r3, r4
 8007e2c:	e7e1      	b.n	8007df2 <rshift+0x68>

08007e2e <__hexdig_fun>:
 8007e2e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007e32:	2b09      	cmp	r3, #9
 8007e34:	d802      	bhi.n	8007e3c <__hexdig_fun+0xe>
 8007e36:	3820      	subs	r0, #32
 8007e38:	b2c0      	uxtb	r0, r0
 8007e3a:	4770      	bx	lr
 8007e3c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007e40:	2b05      	cmp	r3, #5
 8007e42:	d801      	bhi.n	8007e48 <__hexdig_fun+0x1a>
 8007e44:	3847      	subs	r0, #71	; 0x47
 8007e46:	e7f7      	b.n	8007e38 <__hexdig_fun+0xa>
 8007e48:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007e4c:	2b05      	cmp	r3, #5
 8007e4e:	d801      	bhi.n	8007e54 <__hexdig_fun+0x26>
 8007e50:	3827      	subs	r0, #39	; 0x27
 8007e52:	e7f1      	b.n	8007e38 <__hexdig_fun+0xa>
 8007e54:	2000      	movs	r0, #0
 8007e56:	4770      	bx	lr

08007e58 <__gethex>:
 8007e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e5c:	ed2d 8b02 	vpush	{d8}
 8007e60:	b089      	sub	sp, #36	; 0x24
 8007e62:	ee08 0a10 	vmov	s16, r0
 8007e66:	9304      	str	r3, [sp, #16]
 8007e68:	4bbc      	ldr	r3, [pc, #752]	; (800815c <__gethex+0x304>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	9301      	str	r3, [sp, #4]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	468b      	mov	fp, r1
 8007e72:	4690      	mov	r8, r2
 8007e74:	f7f8 fa0e 	bl	8000294 <strlen>
 8007e78:	9b01      	ldr	r3, [sp, #4]
 8007e7a:	f8db 2000 	ldr.w	r2, [fp]
 8007e7e:	4403      	add	r3, r0
 8007e80:	4682      	mov	sl, r0
 8007e82:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007e86:	9305      	str	r3, [sp, #20]
 8007e88:	1c93      	adds	r3, r2, #2
 8007e8a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007e8e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007e92:	32fe      	adds	r2, #254	; 0xfe
 8007e94:	18d1      	adds	r1, r2, r3
 8007e96:	461f      	mov	r7, r3
 8007e98:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007e9c:	9100      	str	r1, [sp, #0]
 8007e9e:	2830      	cmp	r0, #48	; 0x30
 8007ea0:	d0f8      	beq.n	8007e94 <__gethex+0x3c>
 8007ea2:	f7ff ffc4 	bl	8007e2e <__hexdig_fun>
 8007ea6:	4604      	mov	r4, r0
 8007ea8:	2800      	cmp	r0, #0
 8007eaa:	d13a      	bne.n	8007f22 <__gethex+0xca>
 8007eac:	9901      	ldr	r1, [sp, #4]
 8007eae:	4652      	mov	r2, sl
 8007eb0:	4638      	mov	r0, r7
 8007eb2:	f001 fb90 	bl	80095d6 <strncmp>
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	d168      	bne.n	8007f8e <__gethex+0x136>
 8007ebc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007ec0:	eb07 060a 	add.w	r6, r7, sl
 8007ec4:	f7ff ffb3 	bl	8007e2e <__hexdig_fun>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d062      	beq.n	8007f92 <__gethex+0x13a>
 8007ecc:	4633      	mov	r3, r6
 8007ece:	7818      	ldrb	r0, [r3, #0]
 8007ed0:	2830      	cmp	r0, #48	; 0x30
 8007ed2:	461f      	mov	r7, r3
 8007ed4:	f103 0301 	add.w	r3, r3, #1
 8007ed8:	d0f9      	beq.n	8007ece <__gethex+0x76>
 8007eda:	f7ff ffa8 	bl	8007e2e <__hexdig_fun>
 8007ede:	2301      	movs	r3, #1
 8007ee0:	fab0 f480 	clz	r4, r0
 8007ee4:	0964      	lsrs	r4, r4, #5
 8007ee6:	4635      	mov	r5, r6
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	463a      	mov	r2, r7
 8007eec:	4616      	mov	r6, r2
 8007eee:	3201      	adds	r2, #1
 8007ef0:	7830      	ldrb	r0, [r6, #0]
 8007ef2:	f7ff ff9c 	bl	8007e2e <__hexdig_fun>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d1f8      	bne.n	8007eec <__gethex+0x94>
 8007efa:	9901      	ldr	r1, [sp, #4]
 8007efc:	4652      	mov	r2, sl
 8007efe:	4630      	mov	r0, r6
 8007f00:	f001 fb69 	bl	80095d6 <strncmp>
 8007f04:	b980      	cbnz	r0, 8007f28 <__gethex+0xd0>
 8007f06:	b94d      	cbnz	r5, 8007f1c <__gethex+0xc4>
 8007f08:	eb06 050a 	add.w	r5, r6, sl
 8007f0c:	462a      	mov	r2, r5
 8007f0e:	4616      	mov	r6, r2
 8007f10:	3201      	adds	r2, #1
 8007f12:	7830      	ldrb	r0, [r6, #0]
 8007f14:	f7ff ff8b 	bl	8007e2e <__hexdig_fun>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	d1f8      	bne.n	8007f0e <__gethex+0xb6>
 8007f1c:	1bad      	subs	r5, r5, r6
 8007f1e:	00ad      	lsls	r5, r5, #2
 8007f20:	e004      	b.n	8007f2c <__gethex+0xd4>
 8007f22:	2400      	movs	r4, #0
 8007f24:	4625      	mov	r5, r4
 8007f26:	e7e0      	b.n	8007eea <__gethex+0x92>
 8007f28:	2d00      	cmp	r5, #0
 8007f2a:	d1f7      	bne.n	8007f1c <__gethex+0xc4>
 8007f2c:	7833      	ldrb	r3, [r6, #0]
 8007f2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007f32:	2b50      	cmp	r3, #80	; 0x50
 8007f34:	d13b      	bne.n	8007fae <__gethex+0x156>
 8007f36:	7873      	ldrb	r3, [r6, #1]
 8007f38:	2b2b      	cmp	r3, #43	; 0x2b
 8007f3a:	d02c      	beq.n	8007f96 <__gethex+0x13e>
 8007f3c:	2b2d      	cmp	r3, #45	; 0x2d
 8007f3e:	d02e      	beq.n	8007f9e <__gethex+0x146>
 8007f40:	1c71      	adds	r1, r6, #1
 8007f42:	f04f 0900 	mov.w	r9, #0
 8007f46:	7808      	ldrb	r0, [r1, #0]
 8007f48:	f7ff ff71 	bl	8007e2e <__hexdig_fun>
 8007f4c:	1e43      	subs	r3, r0, #1
 8007f4e:	b2db      	uxtb	r3, r3
 8007f50:	2b18      	cmp	r3, #24
 8007f52:	d82c      	bhi.n	8007fae <__gethex+0x156>
 8007f54:	f1a0 0210 	sub.w	r2, r0, #16
 8007f58:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007f5c:	f7ff ff67 	bl	8007e2e <__hexdig_fun>
 8007f60:	1e43      	subs	r3, r0, #1
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	2b18      	cmp	r3, #24
 8007f66:	d91d      	bls.n	8007fa4 <__gethex+0x14c>
 8007f68:	f1b9 0f00 	cmp.w	r9, #0
 8007f6c:	d000      	beq.n	8007f70 <__gethex+0x118>
 8007f6e:	4252      	negs	r2, r2
 8007f70:	4415      	add	r5, r2
 8007f72:	f8cb 1000 	str.w	r1, [fp]
 8007f76:	b1e4      	cbz	r4, 8007fb2 <__gethex+0x15a>
 8007f78:	9b00      	ldr	r3, [sp, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	bf14      	ite	ne
 8007f7e:	2700      	movne	r7, #0
 8007f80:	2706      	moveq	r7, #6
 8007f82:	4638      	mov	r0, r7
 8007f84:	b009      	add	sp, #36	; 0x24
 8007f86:	ecbd 8b02 	vpop	{d8}
 8007f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f8e:	463e      	mov	r6, r7
 8007f90:	4625      	mov	r5, r4
 8007f92:	2401      	movs	r4, #1
 8007f94:	e7ca      	b.n	8007f2c <__gethex+0xd4>
 8007f96:	f04f 0900 	mov.w	r9, #0
 8007f9a:	1cb1      	adds	r1, r6, #2
 8007f9c:	e7d3      	b.n	8007f46 <__gethex+0xee>
 8007f9e:	f04f 0901 	mov.w	r9, #1
 8007fa2:	e7fa      	b.n	8007f9a <__gethex+0x142>
 8007fa4:	230a      	movs	r3, #10
 8007fa6:	fb03 0202 	mla	r2, r3, r2, r0
 8007faa:	3a10      	subs	r2, #16
 8007fac:	e7d4      	b.n	8007f58 <__gethex+0x100>
 8007fae:	4631      	mov	r1, r6
 8007fb0:	e7df      	b.n	8007f72 <__gethex+0x11a>
 8007fb2:	1bf3      	subs	r3, r6, r7
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	4621      	mov	r1, r4
 8007fb8:	2b07      	cmp	r3, #7
 8007fba:	dc0b      	bgt.n	8007fd4 <__gethex+0x17c>
 8007fbc:	ee18 0a10 	vmov	r0, s16
 8007fc0:	f000 fa82 	bl	80084c8 <_Balloc>
 8007fc4:	4604      	mov	r4, r0
 8007fc6:	b940      	cbnz	r0, 8007fda <__gethex+0x182>
 8007fc8:	4b65      	ldr	r3, [pc, #404]	; (8008160 <__gethex+0x308>)
 8007fca:	4602      	mov	r2, r0
 8007fcc:	21de      	movs	r1, #222	; 0xde
 8007fce:	4865      	ldr	r0, [pc, #404]	; (8008164 <__gethex+0x30c>)
 8007fd0:	f001 fbf4 	bl	80097bc <__assert_func>
 8007fd4:	3101      	adds	r1, #1
 8007fd6:	105b      	asrs	r3, r3, #1
 8007fd8:	e7ee      	b.n	8007fb8 <__gethex+0x160>
 8007fda:	f100 0914 	add.w	r9, r0, #20
 8007fde:	f04f 0b00 	mov.w	fp, #0
 8007fe2:	f1ca 0301 	rsb	r3, sl, #1
 8007fe6:	f8cd 9008 	str.w	r9, [sp, #8]
 8007fea:	f8cd b000 	str.w	fp, [sp]
 8007fee:	9306      	str	r3, [sp, #24]
 8007ff0:	42b7      	cmp	r7, r6
 8007ff2:	d340      	bcc.n	8008076 <__gethex+0x21e>
 8007ff4:	9802      	ldr	r0, [sp, #8]
 8007ff6:	9b00      	ldr	r3, [sp, #0]
 8007ff8:	f840 3b04 	str.w	r3, [r0], #4
 8007ffc:	eba0 0009 	sub.w	r0, r0, r9
 8008000:	1080      	asrs	r0, r0, #2
 8008002:	0146      	lsls	r6, r0, #5
 8008004:	6120      	str	r0, [r4, #16]
 8008006:	4618      	mov	r0, r3
 8008008:	f000 fb54 	bl	80086b4 <__hi0bits>
 800800c:	1a30      	subs	r0, r6, r0
 800800e:	f8d8 6000 	ldr.w	r6, [r8]
 8008012:	42b0      	cmp	r0, r6
 8008014:	dd63      	ble.n	80080de <__gethex+0x286>
 8008016:	1b87      	subs	r7, r0, r6
 8008018:	4639      	mov	r1, r7
 800801a:	4620      	mov	r0, r4
 800801c:	f000 feee 	bl	8008dfc <__any_on>
 8008020:	4682      	mov	sl, r0
 8008022:	b1a8      	cbz	r0, 8008050 <__gethex+0x1f8>
 8008024:	1e7b      	subs	r3, r7, #1
 8008026:	1159      	asrs	r1, r3, #5
 8008028:	f003 021f 	and.w	r2, r3, #31
 800802c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008030:	f04f 0a01 	mov.w	sl, #1
 8008034:	fa0a f202 	lsl.w	r2, sl, r2
 8008038:	420a      	tst	r2, r1
 800803a:	d009      	beq.n	8008050 <__gethex+0x1f8>
 800803c:	4553      	cmp	r3, sl
 800803e:	dd05      	ble.n	800804c <__gethex+0x1f4>
 8008040:	1eb9      	subs	r1, r7, #2
 8008042:	4620      	mov	r0, r4
 8008044:	f000 feda 	bl	8008dfc <__any_on>
 8008048:	2800      	cmp	r0, #0
 800804a:	d145      	bne.n	80080d8 <__gethex+0x280>
 800804c:	f04f 0a02 	mov.w	sl, #2
 8008050:	4639      	mov	r1, r7
 8008052:	4620      	mov	r0, r4
 8008054:	f7ff fe99 	bl	8007d8a <rshift>
 8008058:	443d      	add	r5, r7
 800805a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800805e:	42ab      	cmp	r3, r5
 8008060:	da4c      	bge.n	80080fc <__gethex+0x2a4>
 8008062:	ee18 0a10 	vmov	r0, s16
 8008066:	4621      	mov	r1, r4
 8008068:	f000 fa6e 	bl	8008548 <_Bfree>
 800806c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800806e:	2300      	movs	r3, #0
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	27a3      	movs	r7, #163	; 0xa3
 8008074:	e785      	b.n	8007f82 <__gethex+0x12a>
 8008076:	1e73      	subs	r3, r6, #1
 8008078:	9a05      	ldr	r2, [sp, #20]
 800807a:	9303      	str	r3, [sp, #12]
 800807c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008080:	4293      	cmp	r3, r2
 8008082:	d019      	beq.n	80080b8 <__gethex+0x260>
 8008084:	f1bb 0f20 	cmp.w	fp, #32
 8008088:	d107      	bne.n	800809a <__gethex+0x242>
 800808a:	9b02      	ldr	r3, [sp, #8]
 800808c:	9a00      	ldr	r2, [sp, #0]
 800808e:	f843 2b04 	str.w	r2, [r3], #4
 8008092:	9302      	str	r3, [sp, #8]
 8008094:	2300      	movs	r3, #0
 8008096:	9300      	str	r3, [sp, #0]
 8008098:	469b      	mov	fp, r3
 800809a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800809e:	f7ff fec6 	bl	8007e2e <__hexdig_fun>
 80080a2:	9b00      	ldr	r3, [sp, #0]
 80080a4:	f000 000f 	and.w	r0, r0, #15
 80080a8:	fa00 f00b 	lsl.w	r0, r0, fp
 80080ac:	4303      	orrs	r3, r0
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	f10b 0b04 	add.w	fp, fp, #4
 80080b4:	9b03      	ldr	r3, [sp, #12]
 80080b6:	e00d      	b.n	80080d4 <__gethex+0x27c>
 80080b8:	9b03      	ldr	r3, [sp, #12]
 80080ba:	9a06      	ldr	r2, [sp, #24]
 80080bc:	4413      	add	r3, r2
 80080be:	42bb      	cmp	r3, r7
 80080c0:	d3e0      	bcc.n	8008084 <__gethex+0x22c>
 80080c2:	4618      	mov	r0, r3
 80080c4:	9901      	ldr	r1, [sp, #4]
 80080c6:	9307      	str	r3, [sp, #28]
 80080c8:	4652      	mov	r2, sl
 80080ca:	f001 fa84 	bl	80095d6 <strncmp>
 80080ce:	9b07      	ldr	r3, [sp, #28]
 80080d0:	2800      	cmp	r0, #0
 80080d2:	d1d7      	bne.n	8008084 <__gethex+0x22c>
 80080d4:	461e      	mov	r6, r3
 80080d6:	e78b      	b.n	8007ff0 <__gethex+0x198>
 80080d8:	f04f 0a03 	mov.w	sl, #3
 80080dc:	e7b8      	b.n	8008050 <__gethex+0x1f8>
 80080de:	da0a      	bge.n	80080f6 <__gethex+0x29e>
 80080e0:	1a37      	subs	r7, r6, r0
 80080e2:	4621      	mov	r1, r4
 80080e4:	ee18 0a10 	vmov	r0, s16
 80080e8:	463a      	mov	r2, r7
 80080ea:	f000 fc49 	bl	8008980 <__lshift>
 80080ee:	1bed      	subs	r5, r5, r7
 80080f0:	4604      	mov	r4, r0
 80080f2:	f100 0914 	add.w	r9, r0, #20
 80080f6:	f04f 0a00 	mov.w	sl, #0
 80080fa:	e7ae      	b.n	800805a <__gethex+0x202>
 80080fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008100:	42a8      	cmp	r0, r5
 8008102:	dd72      	ble.n	80081ea <__gethex+0x392>
 8008104:	1b45      	subs	r5, r0, r5
 8008106:	42ae      	cmp	r6, r5
 8008108:	dc36      	bgt.n	8008178 <__gethex+0x320>
 800810a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d02a      	beq.n	8008168 <__gethex+0x310>
 8008112:	2b03      	cmp	r3, #3
 8008114:	d02c      	beq.n	8008170 <__gethex+0x318>
 8008116:	2b01      	cmp	r3, #1
 8008118:	d115      	bne.n	8008146 <__gethex+0x2ee>
 800811a:	42ae      	cmp	r6, r5
 800811c:	d113      	bne.n	8008146 <__gethex+0x2ee>
 800811e:	2e01      	cmp	r6, #1
 8008120:	d10b      	bne.n	800813a <__gethex+0x2e2>
 8008122:	9a04      	ldr	r2, [sp, #16]
 8008124:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	2301      	movs	r3, #1
 800812c:	6123      	str	r3, [r4, #16]
 800812e:	f8c9 3000 	str.w	r3, [r9]
 8008132:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008134:	2762      	movs	r7, #98	; 0x62
 8008136:	601c      	str	r4, [r3, #0]
 8008138:	e723      	b.n	8007f82 <__gethex+0x12a>
 800813a:	1e71      	subs	r1, r6, #1
 800813c:	4620      	mov	r0, r4
 800813e:	f000 fe5d 	bl	8008dfc <__any_on>
 8008142:	2800      	cmp	r0, #0
 8008144:	d1ed      	bne.n	8008122 <__gethex+0x2ca>
 8008146:	ee18 0a10 	vmov	r0, s16
 800814a:	4621      	mov	r1, r4
 800814c:	f000 f9fc 	bl	8008548 <_Bfree>
 8008150:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008152:	2300      	movs	r3, #0
 8008154:	6013      	str	r3, [r2, #0]
 8008156:	2750      	movs	r7, #80	; 0x50
 8008158:	e713      	b.n	8007f82 <__gethex+0x12a>
 800815a:	bf00      	nop
 800815c:	0801dc34 	.word	0x0801dc34
 8008160:	0801db54 	.word	0x0801db54
 8008164:	0801dbc8 	.word	0x0801dbc8
 8008168:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1eb      	bne.n	8008146 <__gethex+0x2ee>
 800816e:	e7d8      	b.n	8008122 <__gethex+0x2ca>
 8008170:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1d5      	bne.n	8008122 <__gethex+0x2ca>
 8008176:	e7e6      	b.n	8008146 <__gethex+0x2ee>
 8008178:	1e6f      	subs	r7, r5, #1
 800817a:	f1ba 0f00 	cmp.w	sl, #0
 800817e:	d131      	bne.n	80081e4 <__gethex+0x38c>
 8008180:	b127      	cbz	r7, 800818c <__gethex+0x334>
 8008182:	4639      	mov	r1, r7
 8008184:	4620      	mov	r0, r4
 8008186:	f000 fe39 	bl	8008dfc <__any_on>
 800818a:	4682      	mov	sl, r0
 800818c:	117b      	asrs	r3, r7, #5
 800818e:	2101      	movs	r1, #1
 8008190:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008194:	f007 071f 	and.w	r7, r7, #31
 8008198:	fa01 f707 	lsl.w	r7, r1, r7
 800819c:	421f      	tst	r7, r3
 800819e:	4629      	mov	r1, r5
 80081a0:	4620      	mov	r0, r4
 80081a2:	bf18      	it	ne
 80081a4:	f04a 0a02 	orrne.w	sl, sl, #2
 80081a8:	1b76      	subs	r6, r6, r5
 80081aa:	f7ff fdee 	bl	8007d8a <rshift>
 80081ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80081b2:	2702      	movs	r7, #2
 80081b4:	f1ba 0f00 	cmp.w	sl, #0
 80081b8:	d048      	beq.n	800824c <__gethex+0x3f4>
 80081ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d015      	beq.n	80081ee <__gethex+0x396>
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d017      	beq.n	80081f6 <__gethex+0x39e>
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d109      	bne.n	80081de <__gethex+0x386>
 80081ca:	f01a 0f02 	tst.w	sl, #2
 80081ce:	d006      	beq.n	80081de <__gethex+0x386>
 80081d0:	f8d9 0000 	ldr.w	r0, [r9]
 80081d4:	ea4a 0a00 	orr.w	sl, sl, r0
 80081d8:	f01a 0f01 	tst.w	sl, #1
 80081dc:	d10e      	bne.n	80081fc <__gethex+0x3a4>
 80081de:	f047 0710 	orr.w	r7, r7, #16
 80081e2:	e033      	b.n	800824c <__gethex+0x3f4>
 80081e4:	f04f 0a01 	mov.w	sl, #1
 80081e8:	e7d0      	b.n	800818c <__gethex+0x334>
 80081ea:	2701      	movs	r7, #1
 80081ec:	e7e2      	b.n	80081b4 <__gethex+0x35c>
 80081ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081f0:	f1c3 0301 	rsb	r3, r3, #1
 80081f4:	9315      	str	r3, [sp, #84]	; 0x54
 80081f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d0f0      	beq.n	80081de <__gethex+0x386>
 80081fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008200:	f104 0314 	add.w	r3, r4, #20
 8008204:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008208:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800820c:	f04f 0c00 	mov.w	ip, #0
 8008210:	4618      	mov	r0, r3
 8008212:	f853 2b04 	ldr.w	r2, [r3], #4
 8008216:	f1b2 3fff 	cmp.w	r2, #4294967295
 800821a:	d01c      	beq.n	8008256 <__gethex+0x3fe>
 800821c:	3201      	adds	r2, #1
 800821e:	6002      	str	r2, [r0, #0]
 8008220:	2f02      	cmp	r7, #2
 8008222:	f104 0314 	add.w	r3, r4, #20
 8008226:	d13f      	bne.n	80082a8 <__gethex+0x450>
 8008228:	f8d8 2000 	ldr.w	r2, [r8]
 800822c:	3a01      	subs	r2, #1
 800822e:	42b2      	cmp	r2, r6
 8008230:	d10a      	bne.n	8008248 <__gethex+0x3f0>
 8008232:	1171      	asrs	r1, r6, #5
 8008234:	2201      	movs	r2, #1
 8008236:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800823a:	f006 061f 	and.w	r6, r6, #31
 800823e:	fa02 f606 	lsl.w	r6, r2, r6
 8008242:	421e      	tst	r6, r3
 8008244:	bf18      	it	ne
 8008246:	4617      	movne	r7, r2
 8008248:	f047 0720 	orr.w	r7, r7, #32
 800824c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800824e:	601c      	str	r4, [r3, #0]
 8008250:	9b04      	ldr	r3, [sp, #16]
 8008252:	601d      	str	r5, [r3, #0]
 8008254:	e695      	b.n	8007f82 <__gethex+0x12a>
 8008256:	4299      	cmp	r1, r3
 8008258:	f843 cc04 	str.w	ip, [r3, #-4]
 800825c:	d8d8      	bhi.n	8008210 <__gethex+0x3b8>
 800825e:	68a3      	ldr	r3, [r4, #8]
 8008260:	459b      	cmp	fp, r3
 8008262:	db19      	blt.n	8008298 <__gethex+0x440>
 8008264:	6861      	ldr	r1, [r4, #4]
 8008266:	ee18 0a10 	vmov	r0, s16
 800826a:	3101      	adds	r1, #1
 800826c:	f000 f92c 	bl	80084c8 <_Balloc>
 8008270:	4681      	mov	r9, r0
 8008272:	b918      	cbnz	r0, 800827c <__gethex+0x424>
 8008274:	4b1a      	ldr	r3, [pc, #104]	; (80082e0 <__gethex+0x488>)
 8008276:	4602      	mov	r2, r0
 8008278:	2184      	movs	r1, #132	; 0x84
 800827a:	e6a8      	b.n	8007fce <__gethex+0x176>
 800827c:	6922      	ldr	r2, [r4, #16]
 800827e:	3202      	adds	r2, #2
 8008280:	f104 010c 	add.w	r1, r4, #12
 8008284:	0092      	lsls	r2, r2, #2
 8008286:	300c      	adds	r0, #12
 8008288:	f000 f910 	bl	80084ac <memcpy>
 800828c:	4621      	mov	r1, r4
 800828e:	ee18 0a10 	vmov	r0, s16
 8008292:	f000 f959 	bl	8008548 <_Bfree>
 8008296:	464c      	mov	r4, r9
 8008298:	6923      	ldr	r3, [r4, #16]
 800829a:	1c5a      	adds	r2, r3, #1
 800829c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082a0:	6122      	str	r2, [r4, #16]
 80082a2:	2201      	movs	r2, #1
 80082a4:	615a      	str	r2, [r3, #20]
 80082a6:	e7bb      	b.n	8008220 <__gethex+0x3c8>
 80082a8:	6922      	ldr	r2, [r4, #16]
 80082aa:	455a      	cmp	r2, fp
 80082ac:	dd0b      	ble.n	80082c6 <__gethex+0x46e>
 80082ae:	2101      	movs	r1, #1
 80082b0:	4620      	mov	r0, r4
 80082b2:	f7ff fd6a 	bl	8007d8a <rshift>
 80082b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082ba:	3501      	adds	r5, #1
 80082bc:	42ab      	cmp	r3, r5
 80082be:	f6ff aed0 	blt.w	8008062 <__gethex+0x20a>
 80082c2:	2701      	movs	r7, #1
 80082c4:	e7c0      	b.n	8008248 <__gethex+0x3f0>
 80082c6:	f016 061f 	ands.w	r6, r6, #31
 80082ca:	d0fa      	beq.n	80082c2 <__gethex+0x46a>
 80082cc:	449a      	add	sl, r3
 80082ce:	f1c6 0620 	rsb	r6, r6, #32
 80082d2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80082d6:	f000 f9ed 	bl	80086b4 <__hi0bits>
 80082da:	42b0      	cmp	r0, r6
 80082dc:	dbe7      	blt.n	80082ae <__gethex+0x456>
 80082de:	e7f0      	b.n	80082c2 <__gethex+0x46a>
 80082e0:	0801db54 	.word	0x0801db54

080082e4 <L_shift>:
 80082e4:	f1c2 0208 	rsb	r2, r2, #8
 80082e8:	0092      	lsls	r2, r2, #2
 80082ea:	b570      	push	{r4, r5, r6, lr}
 80082ec:	f1c2 0620 	rsb	r6, r2, #32
 80082f0:	6843      	ldr	r3, [r0, #4]
 80082f2:	6804      	ldr	r4, [r0, #0]
 80082f4:	fa03 f506 	lsl.w	r5, r3, r6
 80082f8:	432c      	orrs	r4, r5
 80082fa:	40d3      	lsrs	r3, r2
 80082fc:	6004      	str	r4, [r0, #0]
 80082fe:	f840 3f04 	str.w	r3, [r0, #4]!
 8008302:	4288      	cmp	r0, r1
 8008304:	d3f4      	bcc.n	80082f0 <L_shift+0xc>
 8008306:	bd70      	pop	{r4, r5, r6, pc}

08008308 <__match>:
 8008308:	b530      	push	{r4, r5, lr}
 800830a:	6803      	ldr	r3, [r0, #0]
 800830c:	3301      	adds	r3, #1
 800830e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008312:	b914      	cbnz	r4, 800831a <__match+0x12>
 8008314:	6003      	str	r3, [r0, #0]
 8008316:	2001      	movs	r0, #1
 8008318:	bd30      	pop	{r4, r5, pc}
 800831a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800831e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008322:	2d19      	cmp	r5, #25
 8008324:	bf98      	it	ls
 8008326:	3220      	addls	r2, #32
 8008328:	42a2      	cmp	r2, r4
 800832a:	d0f0      	beq.n	800830e <__match+0x6>
 800832c:	2000      	movs	r0, #0
 800832e:	e7f3      	b.n	8008318 <__match+0x10>

08008330 <__hexnan>:
 8008330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008334:	680b      	ldr	r3, [r1, #0]
 8008336:	6801      	ldr	r1, [r0, #0]
 8008338:	115e      	asrs	r6, r3, #5
 800833a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800833e:	f013 031f 	ands.w	r3, r3, #31
 8008342:	b087      	sub	sp, #28
 8008344:	bf18      	it	ne
 8008346:	3604      	addne	r6, #4
 8008348:	2500      	movs	r5, #0
 800834a:	1f37      	subs	r7, r6, #4
 800834c:	4682      	mov	sl, r0
 800834e:	4690      	mov	r8, r2
 8008350:	9301      	str	r3, [sp, #4]
 8008352:	f846 5c04 	str.w	r5, [r6, #-4]
 8008356:	46b9      	mov	r9, r7
 8008358:	463c      	mov	r4, r7
 800835a:	9502      	str	r5, [sp, #8]
 800835c:	46ab      	mov	fp, r5
 800835e:	784a      	ldrb	r2, [r1, #1]
 8008360:	1c4b      	adds	r3, r1, #1
 8008362:	9303      	str	r3, [sp, #12]
 8008364:	b342      	cbz	r2, 80083b8 <__hexnan+0x88>
 8008366:	4610      	mov	r0, r2
 8008368:	9105      	str	r1, [sp, #20]
 800836a:	9204      	str	r2, [sp, #16]
 800836c:	f7ff fd5f 	bl	8007e2e <__hexdig_fun>
 8008370:	2800      	cmp	r0, #0
 8008372:	d14f      	bne.n	8008414 <__hexnan+0xe4>
 8008374:	9a04      	ldr	r2, [sp, #16]
 8008376:	9905      	ldr	r1, [sp, #20]
 8008378:	2a20      	cmp	r2, #32
 800837a:	d818      	bhi.n	80083ae <__hexnan+0x7e>
 800837c:	9b02      	ldr	r3, [sp, #8]
 800837e:	459b      	cmp	fp, r3
 8008380:	dd13      	ble.n	80083aa <__hexnan+0x7a>
 8008382:	454c      	cmp	r4, r9
 8008384:	d206      	bcs.n	8008394 <__hexnan+0x64>
 8008386:	2d07      	cmp	r5, #7
 8008388:	dc04      	bgt.n	8008394 <__hexnan+0x64>
 800838a:	462a      	mov	r2, r5
 800838c:	4649      	mov	r1, r9
 800838e:	4620      	mov	r0, r4
 8008390:	f7ff ffa8 	bl	80082e4 <L_shift>
 8008394:	4544      	cmp	r4, r8
 8008396:	d950      	bls.n	800843a <__hexnan+0x10a>
 8008398:	2300      	movs	r3, #0
 800839a:	f1a4 0904 	sub.w	r9, r4, #4
 800839e:	f844 3c04 	str.w	r3, [r4, #-4]
 80083a2:	f8cd b008 	str.w	fp, [sp, #8]
 80083a6:	464c      	mov	r4, r9
 80083a8:	461d      	mov	r5, r3
 80083aa:	9903      	ldr	r1, [sp, #12]
 80083ac:	e7d7      	b.n	800835e <__hexnan+0x2e>
 80083ae:	2a29      	cmp	r2, #41	; 0x29
 80083b0:	d156      	bne.n	8008460 <__hexnan+0x130>
 80083b2:	3102      	adds	r1, #2
 80083b4:	f8ca 1000 	str.w	r1, [sl]
 80083b8:	f1bb 0f00 	cmp.w	fp, #0
 80083bc:	d050      	beq.n	8008460 <__hexnan+0x130>
 80083be:	454c      	cmp	r4, r9
 80083c0:	d206      	bcs.n	80083d0 <__hexnan+0xa0>
 80083c2:	2d07      	cmp	r5, #7
 80083c4:	dc04      	bgt.n	80083d0 <__hexnan+0xa0>
 80083c6:	462a      	mov	r2, r5
 80083c8:	4649      	mov	r1, r9
 80083ca:	4620      	mov	r0, r4
 80083cc:	f7ff ff8a 	bl	80082e4 <L_shift>
 80083d0:	4544      	cmp	r4, r8
 80083d2:	d934      	bls.n	800843e <__hexnan+0x10e>
 80083d4:	f1a8 0204 	sub.w	r2, r8, #4
 80083d8:	4623      	mov	r3, r4
 80083da:	f853 1b04 	ldr.w	r1, [r3], #4
 80083de:	f842 1f04 	str.w	r1, [r2, #4]!
 80083e2:	429f      	cmp	r7, r3
 80083e4:	d2f9      	bcs.n	80083da <__hexnan+0xaa>
 80083e6:	1b3b      	subs	r3, r7, r4
 80083e8:	f023 0303 	bic.w	r3, r3, #3
 80083ec:	3304      	adds	r3, #4
 80083ee:	3401      	adds	r4, #1
 80083f0:	3e03      	subs	r6, #3
 80083f2:	42b4      	cmp	r4, r6
 80083f4:	bf88      	it	hi
 80083f6:	2304      	movhi	r3, #4
 80083f8:	4443      	add	r3, r8
 80083fa:	2200      	movs	r2, #0
 80083fc:	f843 2b04 	str.w	r2, [r3], #4
 8008400:	429f      	cmp	r7, r3
 8008402:	d2fb      	bcs.n	80083fc <__hexnan+0xcc>
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	b91b      	cbnz	r3, 8008410 <__hexnan+0xe0>
 8008408:	4547      	cmp	r7, r8
 800840a:	d127      	bne.n	800845c <__hexnan+0x12c>
 800840c:	2301      	movs	r3, #1
 800840e:	603b      	str	r3, [r7, #0]
 8008410:	2005      	movs	r0, #5
 8008412:	e026      	b.n	8008462 <__hexnan+0x132>
 8008414:	3501      	adds	r5, #1
 8008416:	2d08      	cmp	r5, #8
 8008418:	f10b 0b01 	add.w	fp, fp, #1
 800841c:	dd06      	ble.n	800842c <__hexnan+0xfc>
 800841e:	4544      	cmp	r4, r8
 8008420:	d9c3      	bls.n	80083aa <__hexnan+0x7a>
 8008422:	2300      	movs	r3, #0
 8008424:	f844 3c04 	str.w	r3, [r4, #-4]
 8008428:	2501      	movs	r5, #1
 800842a:	3c04      	subs	r4, #4
 800842c:	6822      	ldr	r2, [r4, #0]
 800842e:	f000 000f 	and.w	r0, r0, #15
 8008432:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008436:	6022      	str	r2, [r4, #0]
 8008438:	e7b7      	b.n	80083aa <__hexnan+0x7a>
 800843a:	2508      	movs	r5, #8
 800843c:	e7b5      	b.n	80083aa <__hexnan+0x7a>
 800843e:	9b01      	ldr	r3, [sp, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d0df      	beq.n	8008404 <__hexnan+0xd4>
 8008444:	f04f 32ff 	mov.w	r2, #4294967295
 8008448:	f1c3 0320 	rsb	r3, r3, #32
 800844c:	fa22 f303 	lsr.w	r3, r2, r3
 8008450:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008454:	401a      	ands	r2, r3
 8008456:	f846 2c04 	str.w	r2, [r6, #-4]
 800845a:	e7d3      	b.n	8008404 <__hexnan+0xd4>
 800845c:	3f04      	subs	r7, #4
 800845e:	e7d1      	b.n	8008404 <__hexnan+0xd4>
 8008460:	2004      	movs	r0, #4
 8008462:	b007      	add	sp, #28
 8008464:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008468 <_localeconv_r>:
 8008468:	4800      	ldr	r0, [pc, #0]	; (800846c <_localeconv_r+0x4>)
 800846a:	4770      	bx	lr
 800846c:	20000164 	.word	0x20000164

08008470 <__retarget_lock_init_recursive>:
 8008470:	4770      	bx	lr

08008472 <__retarget_lock_acquire_recursive>:
 8008472:	4770      	bx	lr

08008474 <__retarget_lock_release_recursive>:
 8008474:	4770      	bx	lr
	...

08008478 <malloc>:
 8008478:	4b02      	ldr	r3, [pc, #8]	; (8008484 <malloc+0xc>)
 800847a:	4601      	mov	r1, r0
 800847c:	6818      	ldr	r0, [r3, #0]
 800847e:	f000 bd3d 	b.w	8008efc <_malloc_r>
 8008482:	bf00      	nop
 8008484:	2000000c 	.word	0x2000000c

08008488 <__ascii_mbtowc>:
 8008488:	b082      	sub	sp, #8
 800848a:	b901      	cbnz	r1, 800848e <__ascii_mbtowc+0x6>
 800848c:	a901      	add	r1, sp, #4
 800848e:	b142      	cbz	r2, 80084a2 <__ascii_mbtowc+0x1a>
 8008490:	b14b      	cbz	r3, 80084a6 <__ascii_mbtowc+0x1e>
 8008492:	7813      	ldrb	r3, [r2, #0]
 8008494:	600b      	str	r3, [r1, #0]
 8008496:	7812      	ldrb	r2, [r2, #0]
 8008498:	1e10      	subs	r0, r2, #0
 800849a:	bf18      	it	ne
 800849c:	2001      	movne	r0, #1
 800849e:	b002      	add	sp, #8
 80084a0:	4770      	bx	lr
 80084a2:	4610      	mov	r0, r2
 80084a4:	e7fb      	b.n	800849e <__ascii_mbtowc+0x16>
 80084a6:	f06f 0001 	mvn.w	r0, #1
 80084aa:	e7f8      	b.n	800849e <__ascii_mbtowc+0x16>

080084ac <memcpy>:
 80084ac:	440a      	add	r2, r1
 80084ae:	4291      	cmp	r1, r2
 80084b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80084b4:	d100      	bne.n	80084b8 <memcpy+0xc>
 80084b6:	4770      	bx	lr
 80084b8:	b510      	push	{r4, lr}
 80084ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084c2:	4291      	cmp	r1, r2
 80084c4:	d1f9      	bne.n	80084ba <memcpy+0xe>
 80084c6:	bd10      	pop	{r4, pc}

080084c8 <_Balloc>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80084cc:	4604      	mov	r4, r0
 80084ce:	460d      	mov	r5, r1
 80084d0:	b976      	cbnz	r6, 80084f0 <_Balloc+0x28>
 80084d2:	2010      	movs	r0, #16
 80084d4:	f7ff ffd0 	bl	8008478 <malloc>
 80084d8:	4602      	mov	r2, r0
 80084da:	6260      	str	r0, [r4, #36]	; 0x24
 80084dc:	b920      	cbnz	r0, 80084e8 <_Balloc+0x20>
 80084de:	4b18      	ldr	r3, [pc, #96]	; (8008540 <_Balloc+0x78>)
 80084e0:	4818      	ldr	r0, [pc, #96]	; (8008544 <_Balloc+0x7c>)
 80084e2:	2166      	movs	r1, #102	; 0x66
 80084e4:	f001 f96a 	bl	80097bc <__assert_func>
 80084e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80084ec:	6006      	str	r6, [r0, #0]
 80084ee:	60c6      	str	r6, [r0, #12]
 80084f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80084f2:	68f3      	ldr	r3, [r6, #12]
 80084f4:	b183      	cbz	r3, 8008518 <_Balloc+0x50>
 80084f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80084fe:	b9b8      	cbnz	r0, 8008530 <_Balloc+0x68>
 8008500:	2101      	movs	r1, #1
 8008502:	fa01 f605 	lsl.w	r6, r1, r5
 8008506:	1d72      	adds	r2, r6, #5
 8008508:	0092      	lsls	r2, r2, #2
 800850a:	4620      	mov	r0, r4
 800850c:	f000 fc97 	bl	8008e3e <_calloc_r>
 8008510:	b160      	cbz	r0, 800852c <_Balloc+0x64>
 8008512:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008516:	e00e      	b.n	8008536 <_Balloc+0x6e>
 8008518:	2221      	movs	r2, #33	; 0x21
 800851a:	2104      	movs	r1, #4
 800851c:	4620      	mov	r0, r4
 800851e:	f000 fc8e 	bl	8008e3e <_calloc_r>
 8008522:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008524:	60f0      	str	r0, [r6, #12]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d1e4      	bne.n	80084f6 <_Balloc+0x2e>
 800852c:	2000      	movs	r0, #0
 800852e:	bd70      	pop	{r4, r5, r6, pc}
 8008530:	6802      	ldr	r2, [r0, #0]
 8008532:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008536:	2300      	movs	r3, #0
 8008538:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800853c:	e7f7      	b.n	800852e <_Balloc+0x66>
 800853e:	bf00      	nop
 8008540:	0801dade 	.word	0x0801dade
 8008544:	0801dc48 	.word	0x0801dc48

08008548 <_Bfree>:
 8008548:	b570      	push	{r4, r5, r6, lr}
 800854a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800854c:	4605      	mov	r5, r0
 800854e:	460c      	mov	r4, r1
 8008550:	b976      	cbnz	r6, 8008570 <_Bfree+0x28>
 8008552:	2010      	movs	r0, #16
 8008554:	f7ff ff90 	bl	8008478 <malloc>
 8008558:	4602      	mov	r2, r0
 800855a:	6268      	str	r0, [r5, #36]	; 0x24
 800855c:	b920      	cbnz	r0, 8008568 <_Bfree+0x20>
 800855e:	4b09      	ldr	r3, [pc, #36]	; (8008584 <_Bfree+0x3c>)
 8008560:	4809      	ldr	r0, [pc, #36]	; (8008588 <_Bfree+0x40>)
 8008562:	218a      	movs	r1, #138	; 0x8a
 8008564:	f001 f92a 	bl	80097bc <__assert_func>
 8008568:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800856c:	6006      	str	r6, [r0, #0]
 800856e:	60c6      	str	r6, [r0, #12]
 8008570:	b13c      	cbz	r4, 8008582 <_Bfree+0x3a>
 8008572:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008574:	6862      	ldr	r2, [r4, #4]
 8008576:	68db      	ldr	r3, [r3, #12]
 8008578:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800857c:	6021      	str	r1, [r4, #0]
 800857e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008582:	bd70      	pop	{r4, r5, r6, pc}
 8008584:	0801dade 	.word	0x0801dade
 8008588:	0801dc48 	.word	0x0801dc48

0800858c <__multadd>:
 800858c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008590:	690e      	ldr	r6, [r1, #16]
 8008592:	4607      	mov	r7, r0
 8008594:	4698      	mov	r8, r3
 8008596:	460c      	mov	r4, r1
 8008598:	f101 0014 	add.w	r0, r1, #20
 800859c:	2300      	movs	r3, #0
 800859e:	6805      	ldr	r5, [r0, #0]
 80085a0:	b2a9      	uxth	r1, r5
 80085a2:	fb02 8101 	mla	r1, r2, r1, r8
 80085a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80085aa:	0c2d      	lsrs	r5, r5, #16
 80085ac:	fb02 c505 	mla	r5, r2, r5, ip
 80085b0:	b289      	uxth	r1, r1
 80085b2:	3301      	adds	r3, #1
 80085b4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80085b8:	429e      	cmp	r6, r3
 80085ba:	f840 1b04 	str.w	r1, [r0], #4
 80085be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80085c2:	dcec      	bgt.n	800859e <__multadd+0x12>
 80085c4:	f1b8 0f00 	cmp.w	r8, #0
 80085c8:	d022      	beq.n	8008610 <__multadd+0x84>
 80085ca:	68a3      	ldr	r3, [r4, #8]
 80085cc:	42b3      	cmp	r3, r6
 80085ce:	dc19      	bgt.n	8008604 <__multadd+0x78>
 80085d0:	6861      	ldr	r1, [r4, #4]
 80085d2:	4638      	mov	r0, r7
 80085d4:	3101      	adds	r1, #1
 80085d6:	f7ff ff77 	bl	80084c8 <_Balloc>
 80085da:	4605      	mov	r5, r0
 80085dc:	b928      	cbnz	r0, 80085ea <__multadd+0x5e>
 80085de:	4602      	mov	r2, r0
 80085e0:	4b0d      	ldr	r3, [pc, #52]	; (8008618 <__multadd+0x8c>)
 80085e2:	480e      	ldr	r0, [pc, #56]	; (800861c <__multadd+0x90>)
 80085e4:	21b5      	movs	r1, #181	; 0xb5
 80085e6:	f001 f8e9 	bl	80097bc <__assert_func>
 80085ea:	6922      	ldr	r2, [r4, #16]
 80085ec:	3202      	adds	r2, #2
 80085ee:	f104 010c 	add.w	r1, r4, #12
 80085f2:	0092      	lsls	r2, r2, #2
 80085f4:	300c      	adds	r0, #12
 80085f6:	f7ff ff59 	bl	80084ac <memcpy>
 80085fa:	4621      	mov	r1, r4
 80085fc:	4638      	mov	r0, r7
 80085fe:	f7ff ffa3 	bl	8008548 <_Bfree>
 8008602:	462c      	mov	r4, r5
 8008604:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008608:	3601      	adds	r6, #1
 800860a:	f8c3 8014 	str.w	r8, [r3, #20]
 800860e:	6126      	str	r6, [r4, #16]
 8008610:	4620      	mov	r0, r4
 8008612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008616:	bf00      	nop
 8008618:	0801db54 	.word	0x0801db54
 800861c:	0801dc48 	.word	0x0801dc48

08008620 <__s2b>:
 8008620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008624:	460c      	mov	r4, r1
 8008626:	4615      	mov	r5, r2
 8008628:	461f      	mov	r7, r3
 800862a:	2209      	movs	r2, #9
 800862c:	3308      	adds	r3, #8
 800862e:	4606      	mov	r6, r0
 8008630:	fb93 f3f2 	sdiv	r3, r3, r2
 8008634:	2100      	movs	r1, #0
 8008636:	2201      	movs	r2, #1
 8008638:	429a      	cmp	r2, r3
 800863a:	db09      	blt.n	8008650 <__s2b+0x30>
 800863c:	4630      	mov	r0, r6
 800863e:	f7ff ff43 	bl	80084c8 <_Balloc>
 8008642:	b940      	cbnz	r0, 8008656 <__s2b+0x36>
 8008644:	4602      	mov	r2, r0
 8008646:	4b19      	ldr	r3, [pc, #100]	; (80086ac <__s2b+0x8c>)
 8008648:	4819      	ldr	r0, [pc, #100]	; (80086b0 <__s2b+0x90>)
 800864a:	21ce      	movs	r1, #206	; 0xce
 800864c:	f001 f8b6 	bl	80097bc <__assert_func>
 8008650:	0052      	lsls	r2, r2, #1
 8008652:	3101      	adds	r1, #1
 8008654:	e7f0      	b.n	8008638 <__s2b+0x18>
 8008656:	9b08      	ldr	r3, [sp, #32]
 8008658:	6143      	str	r3, [r0, #20]
 800865a:	2d09      	cmp	r5, #9
 800865c:	f04f 0301 	mov.w	r3, #1
 8008660:	6103      	str	r3, [r0, #16]
 8008662:	dd16      	ble.n	8008692 <__s2b+0x72>
 8008664:	f104 0909 	add.w	r9, r4, #9
 8008668:	46c8      	mov	r8, r9
 800866a:	442c      	add	r4, r5
 800866c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008670:	4601      	mov	r1, r0
 8008672:	3b30      	subs	r3, #48	; 0x30
 8008674:	220a      	movs	r2, #10
 8008676:	4630      	mov	r0, r6
 8008678:	f7ff ff88 	bl	800858c <__multadd>
 800867c:	45a0      	cmp	r8, r4
 800867e:	d1f5      	bne.n	800866c <__s2b+0x4c>
 8008680:	f1a5 0408 	sub.w	r4, r5, #8
 8008684:	444c      	add	r4, r9
 8008686:	1b2d      	subs	r5, r5, r4
 8008688:	1963      	adds	r3, r4, r5
 800868a:	42bb      	cmp	r3, r7
 800868c:	db04      	blt.n	8008698 <__s2b+0x78>
 800868e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008692:	340a      	adds	r4, #10
 8008694:	2509      	movs	r5, #9
 8008696:	e7f6      	b.n	8008686 <__s2b+0x66>
 8008698:	f814 3b01 	ldrb.w	r3, [r4], #1
 800869c:	4601      	mov	r1, r0
 800869e:	3b30      	subs	r3, #48	; 0x30
 80086a0:	220a      	movs	r2, #10
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7ff ff72 	bl	800858c <__multadd>
 80086a8:	e7ee      	b.n	8008688 <__s2b+0x68>
 80086aa:	bf00      	nop
 80086ac:	0801db54 	.word	0x0801db54
 80086b0:	0801dc48 	.word	0x0801dc48

080086b4 <__hi0bits>:
 80086b4:	0c03      	lsrs	r3, r0, #16
 80086b6:	041b      	lsls	r3, r3, #16
 80086b8:	b9d3      	cbnz	r3, 80086f0 <__hi0bits+0x3c>
 80086ba:	0400      	lsls	r0, r0, #16
 80086bc:	2310      	movs	r3, #16
 80086be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80086c2:	bf04      	itt	eq
 80086c4:	0200      	lsleq	r0, r0, #8
 80086c6:	3308      	addeq	r3, #8
 80086c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80086cc:	bf04      	itt	eq
 80086ce:	0100      	lsleq	r0, r0, #4
 80086d0:	3304      	addeq	r3, #4
 80086d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80086d6:	bf04      	itt	eq
 80086d8:	0080      	lsleq	r0, r0, #2
 80086da:	3302      	addeq	r3, #2
 80086dc:	2800      	cmp	r0, #0
 80086de:	db05      	blt.n	80086ec <__hi0bits+0x38>
 80086e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80086e4:	f103 0301 	add.w	r3, r3, #1
 80086e8:	bf08      	it	eq
 80086ea:	2320      	moveq	r3, #32
 80086ec:	4618      	mov	r0, r3
 80086ee:	4770      	bx	lr
 80086f0:	2300      	movs	r3, #0
 80086f2:	e7e4      	b.n	80086be <__hi0bits+0xa>

080086f4 <__lo0bits>:
 80086f4:	6803      	ldr	r3, [r0, #0]
 80086f6:	f013 0207 	ands.w	r2, r3, #7
 80086fa:	4601      	mov	r1, r0
 80086fc:	d00b      	beq.n	8008716 <__lo0bits+0x22>
 80086fe:	07da      	lsls	r2, r3, #31
 8008700:	d424      	bmi.n	800874c <__lo0bits+0x58>
 8008702:	0798      	lsls	r0, r3, #30
 8008704:	bf49      	itett	mi
 8008706:	085b      	lsrmi	r3, r3, #1
 8008708:	089b      	lsrpl	r3, r3, #2
 800870a:	2001      	movmi	r0, #1
 800870c:	600b      	strmi	r3, [r1, #0]
 800870e:	bf5c      	itt	pl
 8008710:	600b      	strpl	r3, [r1, #0]
 8008712:	2002      	movpl	r0, #2
 8008714:	4770      	bx	lr
 8008716:	b298      	uxth	r0, r3
 8008718:	b9b0      	cbnz	r0, 8008748 <__lo0bits+0x54>
 800871a:	0c1b      	lsrs	r3, r3, #16
 800871c:	2010      	movs	r0, #16
 800871e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008722:	bf04      	itt	eq
 8008724:	0a1b      	lsreq	r3, r3, #8
 8008726:	3008      	addeq	r0, #8
 8008728:	071a      	lsls	r2, r3, #28
 800872a:	bf04      	itt	eq
 800872c:	091b      	lsreq	r3, r3, #4
 800872e:	3004      	addeq	r0, #4
 8008730:	079a      	lsls	r2, r3, #30
 8008732:	bf04      	itt	eq
 8008734:	089b      	lsreq	r3, r3, #2
 8008736:	3002      	addeq	r0, #2
 8008738:	07da      	lsls	r2, r3, #31
 800873a:	d403      	bmi.n	8008744 <__lo0bits+0x50>
 800873c:	085b      	lsrs	r3, r3, #1
 800873e:	f100 0001 	add.w	r0, r0, #1
 8008742:	d005      	beq.n	8008750 <__lo0bits+0x5c>
 8008744:	600b      	str	r3, [r1, #0]
 8008746:	4770      	bx	lr
 8008748:	4610      	mov	r0, r2
 800874a:	e7e8      	b.n	800871e <__lo0bits+0x2a>
 800874c:	2000      	movs	r0, #0
 800874e:	4770      	bx	lr
 8008750:	2020      	movs	r0, #32
 8008752:	4770      	bx	lr

08008754 <__i2b>:
 8008754:	b510      	push	{r4, lr}
 8008756:	460c      	mov	r4, r1
 8008758:	2101      	movs	r1, #1
 800875a:	f7ff feb5 	bl	80084c8 <_Balloc>
 800875e:	4602      	mov	r2, r0
 8008760:	b928      	cbnz	r0, 800876e <__i2b+0x1a>
 8008762:	4b05      	ldr	r3, [pc, #20]	; (8008778 <__i2b+0x24>)
 8008764:	4805      	ldr	r0, [pc, #20]	; (800877c <__i2b+0x28>)
 8008766:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800876a:	f001 f827 	bl	80097bc <__assert_func>
 800876e:	2301      	movs	r3, #1
 8008770:	6144      	str	r4, [r0, #20]
 8008772:	6103      	str	r3, [r0, #16]
 8008774:	bd10      	pop	{r4, pc}
 8008776:	bf00      	nop
 8008778:	0801db54 	.word	0x0801db54
 800877c:	0801dc48 	.word	0x0801dc48

08008780 <__multiply>:
 8008780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008784:	4614      	mov	r4, r2
 8008786:	690a      	ldr	r2, [r1, #16]
 8008788:	6923      	ldr	r3, [r4, #16]
 800878a:	429a      	cmp	r2, r3
 800878c:	bfb8      	it	lt
 800878e:	460b      	movlt	r3, r1
 8008790:	460d      	mov	r5, r1
 8008792:	bfbc      	itt	lt
 8008794:	4625      	movlt	r5, r4
 8008796:	461c      	movlt	r4, r3
 8008798:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800879c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80087a0:	68ab      	ldr	r3, [r5, #8]
 80087a2:	6869      	ldr	r1, [r5, #4]
 80087a4:	eb0a 0709 	add.w	r7, sl, r9
 80087a8:	42bb      	cmp	r3, r7
 80087aa:	b085      	sub	sp, #20
 80087ac:	bfb8      	it	lt
 80087ae:	3101      	addlt	r1, #1
 80087b0:	f7ff fe8a 	bl	80084c8 <_Balloc>
 80087b4:	b930      	cbnz	r0, 80087c4 <__multiply+0x44>
 80087b6:	4602      	mov	r2, r0
 80087b8:	4b42      	ldr	r3, [pc, #264]	; (80088c4 <__multiply+0x144>)
 80087ba:	4843      	ldr	r0, [pc, #268]	; (80088c8 <__multiply+0x148>)
 80087bc:	f240 115d 	movw	r1, #349	; 0x15d
 80087c0:	f000 fffc 	bl	80097bc <__assert_func>
 80087c4:	f100 0614 	add.w	r6, r0, #20
 80087c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80087cc:	4633      	mov	r3, r6
 80087ce:	2200      	movs	r2, #0
 80087d0:	4543      	cmp	r3, r8
 80087d2:	d31e      	bcc.n	8008812 <__multiply+0x92>
 80087d4:	f105 0c14 	add.w	ip, r5, #20
 80087d8:	f104 0314 	add.w	r3, r4, #20
 80087dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80087e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80087e4:	9202      	str	r2, [sp, #8]
 80087e6:	ebac 0205 	sub.w	r2, ip, r5
 80087ea:	3a15      	subs	r2, #21
 80087ec:	f022 0203 	bic.w	r2, r2, #3
 80087f0:	3204      	adds	r2, #4
 80087f2:	f105 0115 	add.w	r1, r5, #21
 80087f6:	458c      	cmp	ip, r1
 80087f8:	bf38      	it	cc
 80087fa:	2204      	movcc	r2, #4
 80087fc:	9201      	str	r2, [sp, #4]
 80087fe:	9a02      	ldr	r2, [sp, #8]
 8008800:	9303      	str	r3, [sp, #12]
 8008802:	429a      	cmp	r2, r3
 8008804:	d808      	bhi.n	8008818 <__multiply+0x98>
 8008806:	2f00      	cmp	r7, #0
 8008808:	dc55      	bgt.n	80088b6 <__multiply+0x136>
 800880a:	6107      	str	r7, [r0, #16]
 800880c:	b005      	add	sp, #20
 800880e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008812:	f843 2b04 	str.w	r2, [r3], #4
 8008816:	e7db      	b.n	80087d0 <__multiply+0x50>
 8008818:	f8b3 a000 	ldrh.w	sl, [r3]
 800881c:	f1ba 0f00 	cmp.w	sl, #0
 8008820:	d020      	beq.n	8008864 <__multiply+0xe4>
 8008822:	f105 0e14 	add.w	lr, r5, #20
 8008826:	46b1      	mov	r9, r6
 8008828:	2200      	movs	r2, #0
 800882a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800882e:	f8d9 b000 	ldr.w	fp, [r9]
 8008832:	b2a1      	uxth	r1, r4
 8008834:	fa1f fb8b 	uxth.w	fp, fp
 8008838:	fb0a b101 	mla	r1, sl, r1, fp
 800883c:	4411      	add	r1, r2
 800883e:	f8d9 2000 	ldr.w	r2, [r9]
 8008842:	0c24      	lsrs	r4, r4, #16
 8008844:	0c12      	lsrs	r2, r2, #16
 8008846:	fb0a 2404 	mla	r4, sl, r4, r2
 800884a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800884e:	b289      	uxth	r1, r1
 8008850:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008854:	45f4      	cmp	ip, lr
 8008856:	f849 1b04 	str.w	r1, [r9], #4
 800885a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800885e:	d8e4      	bhi.n	800882a <__multiply+0xaa>
 8008860:	9901      	ldr	r1, [sp, #4]
 8008862:	5072      	str	r2, [r6, r1]
 8008864:	9a03      	ldr	r2, [sp, #12]
 8008866:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800886a:	3304      	adds	r3, #4
 800886c:	f1b9 0f00 	cmp.w	r9, #0
 8008870:	d01f      	beq.n	80088b2 <__multiply+0x132>
 8008872:	6834      	ldr	r4, [r6, #0]
 8008874:	f105 0114 	add.w	r1, r5, #20
 8008878:	46b6      	mov	lr, r6
 800887a:	f04f 0a00 	mov.w	sl, #0
 800887e:	880a      	ldrh	r2, [r1, #0]
 8008880:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008884:	fb09 b202 	mla	r2, r9, r2, fp
 8008888:	4492      	add	sl, r2
 800888a:	b2a4      	uxth	r4, r4
 800888c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008890:	f84e 4b04 	str.w	r4, [lr], #4
 8008894:	f851 4b04 	ldr.w	r4, [r1], #4
 8008898:	f8be 2000 	ldrh.w	r2, [lr]
 800889c:	0c24      	lsrs	r4, r4, #16
 800889e:	fb09 2404 	mla	r4, r9, r4, r2
 80088a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80088a6:	458c      	cmp	ip, r1
 80088a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80088ac:	d8e7      	bhi.n	800887e <__multiply+0xfe>
 80088ae:	9a01      	ldr	r2, [sp, #4]
 80088b0:	50b4      	str	r4, [r6, r2]
 80088b2:	3604      	adds	r6, #4
 80088b4:	e7a3      	b.n	80087fe <__multiply+0x7e>
 80088b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1a5      	bne.n	800880a <__multiply+0x8a>
 80088be:	3f01      	subs	r7, #1
 80088c0:	e7a1      	b.n	8008806 <__multiply+0x86>
 80088c2:	bf00      	nop
 80088c4:	0801db54 	.word	0x0801db54
 80088c8:	0801dc48 	.word	0x0801dc48

080088cc <__pow5mult>:
 80088cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d0:	4615      	mov	r5, r2
 80088d2:	f012 0203 	ands.w	r2, r2, #3
 80088d6:	4606      	mov	r6, r0
 80088d8:	460f      	mov	r7, r1
 80088da:	d007      	beq.n	80088ec <__pow5mult+0x20>
 80088dc:	4c25      	ldr	r4, [pc, #148]	; (8008974 <__pow5mult+0xa8>)
 80088de:	3a01      	subs	r2, #1
 80088e0:	2300      	movs	r3, #0
 80088e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80088e6:	f7ff fe51 	bl	800858c <__multadd>
 80088ea:	4607      	mov	r7, r0
 80088ec:	10ad      	asrs	r5, r5, #2
 80088ee:	d03d      	beq.n	800896c <__pow5mult+0xa0>
 80088f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80088f2:	b97c      	cbnz	r4, 8008914 <__pow5mult+0x48>
 80088f4:	2010      	movs	r0, #16
 80088f6:	f7ff fdbf 	bl	8008478 <malloc>
 80088fa:	4602      	mov	r2, r0
 80088fc:	6270      	str	r0, [r6, #36]	; 0x24
 80088fe:	b928      	cbnz	r0, 800890c <__pow5mult+0x40>
 8008900:	4b1d      	ldr	r3, [pc, #116]	; (8008978 <__pow5mult+0xac>)
 8008902:	481e      	ldr	r0, [pc, #120]	; (800897c <__pow5mult+0xb0>)
 8008904:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008908:	f000 ff58 	bl	80097bc <__assert_func>
 800890c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008910:	6004      	str	r4, [r0, #0]
 8008912:	60c4      	str	r4, [r0, #12]
 8008914:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008918:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800891c:	b94c      	cbnz	r4, 8008932 <__pow5mult+0x66>
 800891e:	f240 2171 	movw	r1, #625	; 0x271
 8008922:	4630      	mov	r0, r6
 8008924:	f7ff ff16 	bl	8008754 <__i2b>
 8008928:	2300      	movs	r3, #0
 800892a:	f8c8 0008 	str.w	r0, [r8, #8]
 800892e:	4604      	mov	r4, r0
 8008930:	6003      	str	r3, [r0, #0]
 8008932:	f04f 0900 	mov.w	r9, #0
 8008936:	07eb      	lsls	r3, r5, #31
 8008938:	d50a      	bpl.n	8008950 <__pow5mult+0x84>
 800893a:	4639      	mov	r1, r7
 800893c:	4622      	mov	r2, r4
 800893e:	4630      	mov	r0, r6
 8008940:	f7ff ff1e 	bl	8008780 <__multiply>
 8008944:	4639      	mov	r1, r7
 8008946:	4680      	mov	r8, r0
 8008948:	4630      	mov	r0, r6
 800894a:	f7ff fdfd 	bl	8008548 <_Bfree>
 800894e:	4647      	mov	r7, r8
 8008950:	106d      	asrs	r5, r5, #1
 8008952:	d00b      	beq.n	800896c <__pow5mult+0xa0>
 8008954:	6820      	ldr	r0, [r4, #0]
 8008956:	b938      	cbnz	r0, 8008968 <__pow5mult+0x9c>
 8008958:	4622      	mov	r2, r4
 800895a:	4621      	mov	r1, r4
 800895c:	4630      	mov	r0, r6
 800895e:	f7ff ff0f 	bl	8008780 <__multiply>
 8008962:	6020      	str	r0, [r4, #0]
 8008964:	f8c0 9000 	str.w	r9, [r0]
 8008968:	4604      	mov	r4, r0
 800896a:	e7e4      	b.n	8008936 <__pow5mult+0x6a>
 800896c:	4638      	mov	r0, r7
 800896e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008972:	bf00      	nop
 8008974:	0801dd98 	.word	0x0801dd98
 8008978:	0801dade 	.word	0x0801dade
 800897c:	0801dc48 	.word	0x0801dc48

08008980 <__lshift>:
 8008980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008984:	460c      	mov	r4, r1
 8008986:	6849      	ldr	r1, [r1, #4]
 8008988:	6923      	ldr	r3, [r4, #16]
 800898a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800898e:	68a3      	ldr	r3, [r4, #8]
 8008990:	4607      	mov	r7, r0
 8008992:	4691      	mov	r9, r2
 8008994:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008998:	f108 0601 	add.w	r6, r8, #1
 800899c:	42b3      	cmp	r3, r6
 800899e:	db0b      	blt.n	80089b8 <__lshift+0x38>
 80089a0:	4638      	mov	r0, r7
 80089a2:	f7ff fd91 	bl	80084c8 <_Balloc>
 80089a6:	4605      	mov	r5, r0
 80089a8:	b948      	cbnz	r0, 80089be <__lshift+0x3e>
 80089aa:	4602      	mov	r2, r0
 80089ac:	4b28      	ldr	r3, [pc, #160]	; (8008a50 <__lshift+0xd0>)
 80089ae:	4829      	ldr	r0, [pc, #164]	; (8008a54 <__lshift+0xd4>)
 80089b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80089b4:	f000 ff02 	bl	80097bc <__assert_func>
 80089b8:	3101      	adds	r1, #1
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	e7ee      	b.n	800899c <__lshift+0x1c>
 80089be:	2300      	movs	r3, #0
 80089c0:	f100 0114 	add.w	r1, r0, #20
 80089c4:	f100 0210 	add.w	r2, r0, #16
 80089c8:	4618      	mov	r0, r3
 80089ca:	4553      	cmp	r3, sl
 80089cc:	db33      	blt.n	8008a36 <__lshift+0xb6>
 80089ce:	6920      	ldr	r0, [r4, #16]
 80089d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80089d4:	f104 0314 	add.w	r3, r4, #20
 80089d8:	f019 091f 	ands.w	r9, r9, #31
 80089dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80089e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80089e4:	d02b      	beq.n	8008a3e <__lshift+0xbe>
 80089e6:	f1c9 0e20 	rsb	lr, r9, #32
 80089ea:	468a      	mov	sl, r1
 80089ec:	2200      	movs	r2, #0
 80089ee:	6818      	ldr	r0, [r3, #0]
 80089f0:	fa00 f009 	lsl.w	r0, r0, r9
 80089f4:	4302      	orrs	r2, r0
 80089f6:	f84a 2b04 	str.w	r2, [sl], #4
 80089fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80089fe:	459c      	cmp	ip, r3
 8008a00:	fa22 f20e 	lsr.w	r2, r2, lr
 8008a04:	d8f3      	bhi.n	80089ee <__lshift+0x6e>
 8008a06:	ebac 0304 	sub.w	r3, ip, r4
 8008a0a:	3b15      	subs	r3, #21
 8008a0c:	f023 0303 	bic.w	r3, r3, #3
 8008a10:	3304      	adds	r3, #4
 8008a12:	f104 0015 	add.w	r0, r4, #21
 8008a16:	4584      	cmp	ip, r0
 8008a18:	bf38      	it	cc
 8008a1a:	2304      	movcc	r3, #4
 8008a1c:	50ca      	str	r2, [r1, r3]
 8008a1e:	b10a      	cbz	r2, 8008a24 <__lshift+0xa4>
 8008a20:	f108 0602 	add.w	r6, r8, #2
 8008a24:	3e01      	subs	r6, #1
 8008a26:	4638      	mov	r0, r7
 8008a28:	612e      	str	r6, [r5, #16]
 8008a2a:	4621      	mov	r1, r4
 8008a2c:	f7ff fd8c 	bl	8008548 <_Bfree>
 8008a30:	4628      	mov	r0, r5
 8008a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a36:	f842 0f04 	str.w	r0, [r2, #4]!
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	e7c5      	b.n	80089ca <__lshift+0x4a>
 8008a3e:	3904      	subs	r1, #4
 8008a40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a44:	f841 2f04 	str.w	r2, [r1, #4]!
 8008a48:	459c      	cmp	ip, r3
 8008a4a:	d8f9      	bhi.n	8008a40 <__lshift+0xc0>
 8008a4c:	e7ea      	b.n	8008a24 <__lshift+0xa4>
 8008a4e:	bf00      	nop
 8008a50:	0801db54 	.word	0x0801db54
 8008a54:	0801dc48 	.word	0x0801dc48

08008a58 <__mcmp>:
 8008a58:	b530      	push	{r4, r5, lr}
 8008a5a:	6902      	ldr	r2, [r0, #16]
 8008a5c:	690c      	ldr	r4, [r1, #16]
 8008a5e:	1b12      	subs	r2, r2, r4
 8008a60:	d10e      	bne.n	8008a80 <__mcmp+0x28>
 8008a62:	f100 0314 	add.w	r3, r0, #20
 8008a66:	3114      	adds	r1, #20
 8008a68:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008a6c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008a70:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008a74:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008a78:	42a5      	cmp	r5, r4
 8008a7a:	d003      	beq.n	8008a84 <__mcmp+0x2c>
 8008a7c:	d305      	bcc.n	8008a8a <__mcmp+0x32>
 8008a7e:	2201      	movs	r2, #1
 8008a80:	4610      	mov	r0, r2
 8008a82:	bd30      	pop	{r4, r5, pc}
 8008a84:	4283      	cmp	r3, r0
 8008a86:	d3f3      	bcc.n	8008a70 <__mcmp+0x18>
 8008a88:	e7fa      	b.n	8008a80 <__mcmp+0x28>
 8008a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a8e:	e7f7      	b.n	8008a80 <__mcmp+0x28>

08008a90 <__mdiff>:
 8008a90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a94:	460c      	mov	r4, r1
 8008a96:	4606      	mov	r6, r0
 8008a98:	4611      	mov	r1, r2
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	4617      	mov	r7, r2
 8008a9e:	f7ff ffdb 	bl	8008a58 <__mcmp>
 8008aa2:	1e05      	subs	r5, r0, #0
 8008aa4:	d110      	bne.n	8008ac8 <__mdiff+0x38>
 8008aa6:	4629      	mov	r1, r5
 8008aa8:	4630      	mov	r0, r6
 8008aaa:	f7ff fd0d 	bl	80084c8 <_Balloc>
 8008aae:	b930      	cbnz	r0, 8008abe <__mdiff+0x2e>
 8008ab0:	4b39      	ldr	r3, [pc, #228]	; (8008b98 <__mdiff+0x108>)
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	f240 2132 	movw	r1, #562	; 0x232
 8008ab8:	4838      	ldr	r0, [pc, #224]	; (8008b9c <__mdiff+0x10c>)
 8008aba:	f000 fe7f 	bl	80097bc <__assert_func>
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ac8:	bfa4      	itt	ge
 8008aca:	463b      	movge	r3, r7
 8008acc:	4627      	movge	r7, r4
 8008ace:	4630      	mov	r0, r6
 8008ad0:	6879      	ldr	r1, [r7, #4]
 8008ad2:	bfa6      	itte	ge
 8008ad4:	461c      	movge	r4, r3
 8008ad6:	2500      	movge	r5, #0
 8008ad8:	2501      	movlt	r5, #1
 8008ada:	f7ff fcf5 	bl	80084c8 <_Balloc>
 8008ade:	b920      	cbnz	r0, 8008aea <__mdiff+0x5a>
 8008ae0:	4b2d      	ldr	r3, [pc, #180]	; (8008b98 <__mdiff+0x108>)
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008ae8:	e7e6      	b.n	8008ab8 <__mdiff+0x28>
 8008aea:	693e      	ldr	r6, [r7, #16]
 8008aec:	60c5      	str	r5, [r0, #12]
 8008aee:	6925      	ldr	r5, [r4, #16]
 8008af0:	f107 0114 	add.w	r1, r7, #20
 8008af4:	f104 0914 	add.w	r9, r4, #20
 8008af8:	f100 0e14 	add.w	lr, r0, #20
 8008afc:	f107 0210 	add.w	r2, r7, #16
 8008b00:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008b04:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008b08:	46f2      	mov	sl, lr
 8008b0a:	2700      	movs	r7, #0
 8008b0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008b14:	fa1f f883 	uxth.w	r8, r3
 8008b18:	fa17 f78b 	uxtah	r7, r7, fp
 8008b1c:	0c1b      	lsrs	r3, r3, #16
 8008b1e:	eba7 0808 	sub.w	r8, r7, r8
 8008b22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008b26:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008b2a:	fa1f f888 	uxth.w	r8, r8
 8008b2e:	141f      	asrs	r7, r3, #16
 8008b30:	454d      	cmp	r5, r9
 8008b32:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008b36:	f84a 3b04 	str.w	r3, [sl], #4
 8008b3a:	d8e7      	bhi.n	8008b0c <__mdiff+0x7c>
 8008b3c:	1b2b      	subs	r3, r5, r4
 8008b3e:	3b15      	subs	r3, #21
 8008b40:	f023 0303 	bic.w	r3, r3, #3
 8008b44:	3304      	adds	r3, #4
 8008b46:	3415      	adds	r4, #21
 8008b48:	42a5      	cmp	r5, r4
 8008b4a:	bf38      	it	cc
 8008b4c:	2304      	movcc	r3, #4
 8008b4e:	4419      	add	r1, r3
 8008b50:	4473      	add	r3, lr
 8008b52:	469e      	mov	lr, r3
 8008b54:	460d      	mov	r5, r1
 8008b56:	4565      	cmp	r5, ip
 8008b58:	d30e      	bcc.n	8008b78 <__mdiff+0xe8>
 8008b5a:	f10c 0203 	add.w	r2, ip, #3
 8008b5e:	1a52      	subs	r2, r2, r1
 8008b60:	f022 0203 	bic.w	r2, r2, #3
 8008b64:	3903      	subs	r1, #3
 8008b66:	458c      	cmp	ip, r1
 8008b68:	bf38      	it	cc
 8008b6a:	2200      	movcc	r2, #0
 8008b6c:	441a      	add	r2, r3
 8008b6e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008b72:	b17b      	cbz	r3, 8008b94 <__mdiff+0x104>
 8008b74:	6106      	str	r6, [r0, #16]
 8008b76:	e7a5      	b.n	8008ac4 <__mdiff+0x34>
 8008b78:	f855 8b04 	ldr.w	r8, [r5], #4
 8008b7c:	fa17 f488 	uxtah	r4, r7, r8
 8008b80:	1422      	asrs	r2, r4, #16
 8008b82:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008b86:	b2a4      	uxth	r4, r4
 8008b88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008b8c:	f84e 4b04 	str.w	r4, [lr], #4
 8008b90:	1417      	asrs	r7, r2, #16
 8008b92:	e7e0      	b.n	8008b56 <__mdiff+0xc6>
 8008b94:	3e01      	subs	r6, #1
 8008b96:	e7ea      	b.n	8008b6e <__mdiff+0xde>
 8008b98:	0801db54 	.word	0x0801db54
 8008b9c:	0801dc48 	.word	0x0801dc48

08008ba0 <__ulp>:
 8008ba0:	b082      	sub	sp, #8
 8008ba2:	ed8d 0b00 	vstr	d0, [sp]
 8008ba6:	9b01      	ldr	r3, [sp, #4]
 8008ba8:	4912      	ldr	r1, [pc, #72]	; (8008bf4 <__ulp+0x54>)
 8008baa:	4019      	ands	r1, r3
 8008bac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008bb0:	2900      	cmp	r1, #0
 8008bb2:	dd05      	ble.n	8008bc0 <__ulp+0x20>
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	ec43 2b10 	vmov	d0, r2, r3
 8008bbc:	b002      	add	sp, #8
 8008bbe:	4770      	bx	lr
 8008bc0:	4249      	negs	r1, r1
 8008bc2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008bc6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008bca:	f04f 0200 	mov.w	r2, #0
 8008bce:	f04f 0300 	mov.w	r3, #0
 8008bd2:	da04      	bge.n	8008bde <__ulp+0x3e>
 8008bd4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008bd8:	fa41 f300 	asr.w	r3, r1, r0
 8008bdc:	e7ec      	b.n	8008bb8 <__ulp+0x18>
 8008bde:	f1a0 0114 	sub.w	r1, r0, #20
 8008be2:	291e      	cmp	r1, #30
 8008be4:	bfda      	itte	le
 8008be6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008bea:	fa20 f101 	lsrle.w	r1, r0, r1
 8008bee:	2101      	movgt	r1, #1
 8008bf0:	460a      	mov	r2, r1
 8008bf2:	e7e1      	b.n	8008bb8 <__ulp+0x18>
 8008bf4:	7ff00000 	.word	0x7ff00000

08008bf8 <__b2d>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	6905      	ldr	r5, [r0, #16]
 8008bfc:	f100 0714 	add.w	r7, r0, #20
 8008c00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008c04:	1f2e      	subs	r6, r5, #4
 8008c06:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f7ff fd52 	bl	80086b4 <__hi0bits>
 8008c10:	f1c0 0320 	rsb	r3, r0, #32
 8008c14:	280a      	cmp	r0, #10
 8008c16:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008c94 <__b2d+0x9c>
 8008c1a:	600b      	str	r3, [r1, #0]
 8008c1c:	dc14      	bgt.n	8008c48 <__b2d+0x50>
 8008c1e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008c22:	fa24 f10e 	lsr.w	r1, r4, lr
 8008c26:	42b7      	cmp	r7, r6
 8008c28:	ea41 030c 	orr.w	r3, r1, ip
 8008c2c:	bf34      	ite	cc
 8008c2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008c32:	2100      	movcs	r1, #0
 8008c34:	3015      	adds	r0, #21
 8008c36:	fa04 f000 	lsl.w	r0, r4, r0
 8008c3a:	fa21 f10e 	lsr.w	r1, r1, lr
 8008c3e:	ea40 0201 	orr.w	r2, r0, r1
 8008c42:	ec43 2b10 	vmov	d0, r2, r3
 8008c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c48:	42b7      	cmp	r7, r6
 8008c4a:	bf3a      	itte	cc
 8008c4c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008c50:	f1a5 0608 	subcc.w	r6, r5, #8
 8008c54:	2100      	movcs	r1, #0
 8008c56:	380b      	subs	r0, #11
 8008c58:	d017      	beq.n	8008c8a <__b2d+0x92>
 8008c5a:	f1c0 0c20 	rsb	ip, r0, #32
 8008c5e:	fa04 f500 	lsl.w	r5, r4, r0
 8008c62:	42be      	cmp	r6, r7
 8008c64:	fa21 f40c 	lsr.w	r4, r1, ip
 8008c68:	ea45 0504 	orr.w	r5, r5, r4
 8008c6c:	bf8c      	ite	hi
 8008c6e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008c72:	2400      	movls	r4, #0
 8008c74:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008c78:	fa01 f000 	lsl.w	r0, r1, r0
 8008c7c:	fa24 f40c 	lsr.w	r4, r4, ip
 8008c80:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c84:	ea40 0204 	orr.w	r2, r0, r4
 8008c88:	e7db      	b.n	8008c42 <__b2d+0x4a>
 8008c8a:	ea44 030c 	orr.w	r3, r4, ip
 8008c8e:	460a      	mov	r2, r1
 8008c90:	e7d7      	b.n	8008c42 <__b2d+0x4a>
 8008c92:	bf00      	nop
 8008c94:	3ff00000 	.word	0x3ff00000

08008c98 <__d2b>:
 8008c98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c9c:	4689      	mov	r9, r1
 8008c9e:	2101      	movs	r1, #1
 8008ca0:	ec57 6b10 	vmov	r6, r7, d0
 8008ca4:	4690      	mov	r8, r2
 8008ca6:	f7ff fc0f 	bl	80084c8 <_Balloc>
 8008caa:	4604      	mov	r4, r0
 8008cac:	b930      	cbnz	r0, 8008cbc <__d2b+0x24>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	4b25      	ldr	r3, [pc, #148]	; (8008d48 <__d2b+0xb0>)
 8008cb2:	4826      	ldr	r0, [pc, #152]	; (8008d4c <__d2b+0xb4>)
 8008cb4:	f240 310a 	movw	r1, #778	; 0x30a
 8008cb8:	f000 fd80 	bl	80097bc <__assert_func>
 8008cbc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008cc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008cc4:	bb35      	cbnz	r5, 8008d14 <__d2b+0x7c>
 8008cc6:	2e00      	cmp	r6, #0
 8008cc8:	9301      	str	r3, [sp, #4]
 8008cca:	d028      	beq.n	8008d1e <__d2b+0x86>
 8008ccc:	4668      	mov	r0, sp
 8008cce:	9600      	str	r6, [sp, #0]
 8008cd0:	f7ff fd10 	bl	80086f4 <__lo0bits>
 8008cd4:	9900      	ldr	r1, [sp, #0]
 8008cd6:	b300      	cbz	r0, 8008d1a <__d2b+0x82>
 8008cd8:	9a01      	ldr	r2, [sp, #4]
 8008cda:	f1c0 0320 	rsb	r3, r0, #32
 8008cde:	fa02 f303 	lsl.w	r3, r2, r3
 8008ce2:	430b      	orrs	r3, r1
 8008ce4:	40c2      	lsrs	r2, r0
 8008ce6:	6163      	str	r3, [r4, #20]
 8008ce8:	9201      	str	r2, [sp, #4]
 8008cea:	9b01      	ldr	r3, [sp, #4]
 8008cec:	61a3      	str	r3, [r4, #24]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	bf14      	ite	ne
 8008cf2:	2202      	movne	r2, #2
 8008cf4:	2201      	moveq	r2, #1
 8008cf6:	6122      	str	r2, [r4, #16]
 8008cf8:	b1d5      	cbz	r5, 8008d30 <__d2b+0x98>
 8008cfa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008cfe:	4405      	add	r5, r0
 8008d00:	f8c9 5000 	str.w	r5, [r9]
 8008d04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d08:	f8c8 0000 	str.w	r0, [r8]
 8008d0c:	4620      	mov	r0, r4
 8008d0e:	b003      	add	sp, #12
 8008d10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d18:	e7d5      	b.n	8008cc6 <__d2b+0x2e>
 8008d1a:	6161      	str	r1, [r4, #20]
 8008d1c:	e7e5      	b.n	8008cea <__d2b+0x52>
 8008d1e:	a801      	add	r0, sp, #4
 8008d20:	f7ff fce8 	bl	80086f4 <__lo0bits>
 8008d24:	9b01      	ldr	r3, [sp, #4]
 8008d26:	6163      	str	r3, [r4, #20]
 8008d28:	2201      	movs	r2, #1
 8008d2a:	6122      	str	r2, [r4, #16]
 8008d2c:	3020      	adds	r0, #32
 8008d2e:	e7e3      	b.n	8008cf8 <__d2b+0x60>
 8008d30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008d34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d38:	f8c9 0000 	str.w	r0, [r9]
 8008d3c:	6918      	ldr	r0, [r3, #16]
 8008d3e:	f7ff fcb9 	bl	80086b4 <__hi0bits>
 8008d42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008d46:	e7df      	b.n	8008d08 <__d2b+0x70>
 8008d48:	0801db54 	.word	0x0801db54
 8008d4c:	0801dc48 	.word	0x0801dc48

08008d50 <__ratio>:
 8008d50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d54:	4688      	mov	r8, r1
 8008d56:	4669      	mov	r1, sp
 8008d58:	4681      	mov	r9, r0
 8008d5a:	f7ff ff4d 	bl	8008bf8 <__b2d>
 8008d5e:	a901      	add	r1, sp, #4
 8008d60:	4640      	mov	r0, r8
 8008d62:	ec55 4b10 	vmov	r4, r5, d0
 8008d66:	f7ff ff47 	bl	8008bf8 <__b2d>
 8008d6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008d72:	eba3 0c02 	sub.w	ip, r3, r2
 8008d76:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008d7a:	1a9b      	subs	r3, r3, r2
 8008d7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008d80:	ec51 0b10 	vmov	r0, r1, d0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	bfd6      	itet	le
 8008d88:	460a      	movle	r2, r1
 8008d8a:	462a      	movgt	r2, r5
 8008d8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d90:	468b      	mov	fp, r1
 8008d92:	462f      	mov	r7, r5
 8008d94:	bfd4      	ite	le
 8008d96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008d9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008d9e:	4620      	mov	r0, r4
 8008da0:	ee10 2a10 	vmov	r2, s0
 8008da4:	465b      	mov	r3, fp
 8008da6:	4639      	mov	r1, r7
 8008da8:	f7f7 fdb8 	bl	800091c <__aeabi_ddiv>
 8008dac:	ec41 0b10 	vmov	d0, r0, r1
 8008db0:	b003      	add	sp, #12
 8008db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008db6 <__copybits>:
 8008db6:	3901      	subs	r1, #1
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	1149      	asrs	r1, r1, #5
 8008dbc:	6914      	ldr	r4, [r2, #16]
 8008dbe:	3101      	adds	r1, #1
 8008dc0:	f102 0314 	add.w	r3, r2, #20
 8008dc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008dc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008dcc:	1f05      	subs	r5, r0, #4
 8008dce:	42a3      	cmp	r3, r4
 8008dd0:	d30c      	bcc.n	8008dec <__copybits+0x36>
 8008dd2:	1aa3      	subs	r3, r4, r2
 8008dd4:	3b11      	subs	r3, #17
 8008dd6:	f023 0303 	bic.w	r3, r3, #3
 8008dda:	3211      	adds	r2, #17
 8008ddc:	42a2      	cmp	r2, r4
 8008dde:	bf88      	it	hi
 8008de0:	2300      	movhi	r3, #0
 8008de2:	4418      	add	r0, r3
 8008de4:	2300      	movs	r3, #0
 8008de6:	4288      	cmp	r0, r1
 8008de8:	d305      	bcc.n	8008df6 <__copybits+0x40>
 8008dea:	bd70      	pop	{r4, r5, r6, pc}
 8008dec:	f853 6b04 	ldr.w	r6, [r3], #4
 8008df0:	f845 6f04 	str.w	r6, [r5, #4]!
 8008df4:	e7eb      	b.n	8008dce <__copybits+0x18>
 8008df6:	f840 3b04 	str.w	r3, [r0], #4
 8008dfa:	e7f4      	b.n	8008de6 <__copybits+0x30>

08008dfc <__any_on>:
 8008dfc:	f100 0214 	add.w	r2, r0, #20
 8008e00:	6900      	ldr	r0, [r0, #16]
 8008e02:	114b      	asrs	r3, r1, #5
 8008e04:	4298      	cmp	r0, r3
 8008e06:	b510      	push	{r4, lr}
 8008e08:	db11      	blt.n	8008e2e <__any_on+0x32>
 8008e0a:	dd0a      	ble.n	8008e22 <__any_on+0x26>
 8008e0c:	f011 011f 	ands.w	r1, r1, #31
 8008e10:	d007      	beq.n	8008e22 <__any_on+0x26>
 8008e12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008e16:	fa24 f001 	lsr.w	r0, r4, r1
 8008e1a:	fa00 f101 	lsl.w	r1, r0, r1
 8008e1e:	428c      	cmp	r4, r1
 8008e20:	d10b      	bne.n	8008e3a <__any_on+0x3e>
 8008e22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d803      	bhi.n	8008e32 <__any_on+0x36>
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	bd10      	pop	{r4, pc}
 8008e2e:	4603      	mov	r3, r0
 8008e30:	e7f7      	b.n	8008e22 <__any_on+0x26>
 8008e32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e36:	2900      	cmp	r1, #0
 8008e38:	d0f5      	beq.n	8008e26 <__any_on+0x2a>
 8008e3a:	2001      	movs	r0, #1
 8008e3c:	e7f6      	b.n	8008e2c <__any_on+0x30>

08008e3e <_calloc_r>:
 8008e3e:	b513      	push	{r0, r1, r4, lr}
 8008e40:	434a      	muls	r2, r1
 8008e42:	4611      	mov	r1, r2
 8008e44:	9201      	str	r2, [sp, #4]
 8008e46:	f000 f859 	bl	8008efc <_malloc_r>
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	b118      	cbz	r0, 8008e56 <_calloc_r+0x18>
 8008e4e:	9a01      	ldr	r2, [sp, #4]
 8008e50:	2100      	movs	r1, #0
 8008e52:	f7fc fab7 	bl	80053c4 <memset>
 8008e56:	4620      	mov	r0, r4
 8008e58:	b002      	add	sp, #8
 8008e5a:	bd10      	pop	{r4, pc}

08008e5c <_free_r>:
 8008e5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e5e:	2900      	cmp	r1, #0
 8008e60:	d048      	beq.n	8008ef4 <_free_r+0x98>
 8008e62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e66:	9001      	str	r0, [sp, #4]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e6e:	bfb8      	it	lt
 8008e70:	18e4      	addlt	r4, r4, r3
 8008e72:	f000 fe35 	bl	8009ae0 <__malloc_lock>
 8008e76:	4a20      	ldr	r2, [pc, #128]	; (8008ef8 <_free_r+0x9c>)
 8008e78:	9801      	ldr	r0, [sp, #4]
 8008e7a:	6813      	ldr	r3, [r2, #0]
 8008e7c:	4615      	mov	r5, r2
 8008e7e:	b933      	cbnz	r3, 8008e8e <_free_r+0x32>
 8008e80:	6063      	str	r3, [r4, #4]
 8008e82:	6014      	str	r4, [r2, #0]
 8008e84:	b003      	add	sp, #12
 8008e86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e8a:	f000 be2f 	b.w	8009aec <__malloc_unlock>
 8008e8e:	42a3      	cmp	r3, r4
 8008e90:	d90b      	bls.n	8008eaa <_free_r+0x4e>
 8008e92:	6821      	ldr	r1, [r4, #0]
 8008e94:	1862      	adds	r2, r4, r1
 8008e96:	4293      	cmp	r3, r2
 8008e98:	bf04      	itt	eq
 8008e9a:	681a      	ldreq	r2, [r3, #0]
 8008e9c:	685b      	ldreq	r3, [r3, #4]
 8008e9e:	6063      	str	r3, [r4, #4]
 8008ea0:	bf04      	itt	eq
 8008ea2:	1852      	addeq	r2, r2, r1
 8008ea4:	6022      	streq	r2, [r4, #0]
 8008ea6:	602c      	str	r4, [r5, #0]
 8008ea8:	e7ec      	b.n	8008e84 <_free_r+0x28>
 8008eaa:	461a      	mov	r2, r3
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	b10b      	cbz	r3, 8008eb4 <_free_r+0x58>
 8008eb0:	42a3      	cmp	r3, r4
 8008eb2:	d9fa      	bls.n	8008eaa <_free_r+0x4e>
 8008eb4:	6811      	ldr	r1, [r2, #0]
 8008eb6:	1855      	adds	r5, r2, r1
 8008eb8:	42a5      	cmp	r5, r4
 8008eba:	d10b      	bne.n	8008ed4 <_free_r+0x78>
 8008ebc:	6824      	ldr	r4, [r4, #0]
 8008ebe:	4421      	add	r1, r4
 8008ec0:	1854      	adds	r4, r2, r1
 8008ec2:	42a3      	cmp	r3, r4
 8008ec4:	6011      	str	r1, [r2, #0]
 8008ec6:	d1dd      	bne.n	8008e84 <_free_r+0x28>
 8008ec8:	681c      	ldr	r4, [r3, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	6053      	str	r3, [r2, #4]
 8008ece:	4421      	add	r1, r4
 8008ed0:	6011      	str	r1, [r2, #0]
 8008ed2:	e7d7      	b.n	8008e84 <_free_r+0x28>
 8008ed4:	d902      	bls.n	8008edc <_free_r+0x80>
 8008ed6:	230c      	movs	r3, #12
 8008ed8:	6003      	str	r3, [r0, #0]
 8008eda:	e7d3      	b.n	8008e84 <_free_r+0x28>
 8008edc:	6825      	ldr	r5, [r4, #0]
 8008ede:	1961      	adds	r1, r4, r5
 8008ee0:	428b      	cmp	r3, r1
 8008ee2:	bf04      	itt	eq
 8008ee4:	6819      	ldreq	r1, [r3, #0]
 8008ee6:	685b      	ldreq	r3, [r3, #4]
 8008ee8:	6063      	str	r3, [r4, #4]
 8008eea:	bf04      	itt	eq
 8008eec:	1949      	addeq	r1, r1, r5
 8008eee:	6021      	streq	r1, [r4, #0]
 8008ef0:	6054      	str	r4, [r2, #4]
 8008ef2:	e7c7      	b.n	8008e84 <_free_r+0x28>
 8008ef4:	b003      	add	sp, #12
 8008ef6:	bd30      	pop	{r4, r5, pc}
 8008ef8:	20000208 	.word	0x20000208

08008efc <_malloc_r>:
 8008efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efe:	1ccd      	adds	r5, r1, #3
 8008f00:	f025 0503 	bic.w	r5, r5, #3
 8008f04:	3508      	adds	r5, #8
 8008f06:	2d0c      	cmp	r5, #12
 8008f08:	bf38      	it	cc
 8008f0a:	250c      	movcc	r5, #12
 8008f0c:	2d00      	cmp	r5, #0
 8008f0e:	4606      	mov	r6, r0
 8008f10:	db01      	blt.n	8008f16 <_malloc_r+0x1a>
 8008f12:	42a9      	cmp	r1, r5
 8008f14:	d903      	bls.n	8008f1e <_malloc_r+0x22>
 8008f16:	230c      	movs	r3, #12
 8008f18:	6033      	str	r3, [r6, #0]
 8008f1a:	2000      	movs	r0, #0
 8008f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f1e:	f000 fddf 	bl	8009ae0 <__malloc_lock>
 8008f22:	4921      	ldr	r1, [pc, #132]	; (8008fa8 <_malloc_r+0xac>)
 8008f24:	680a      	ldr	r2, [r1, #0]
 8008f26:	4614      	mov	r4, r2
 8008f28:	b99c      	cbnz	r4, 8008f52 <_malloc_r+0x56>
 8008f2a:	4f20      	ldr	r7, [pc, #128]	; (8008fac <_malloc_r+0xb0>)
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	b923      	cbnz	r3, 8008f3a <_malloc_r+0x3e>
 8008f30:	4621      	mov	r1, r4
 8008f32:	4630      	mov	r0, r6
 8008f34:	f000 fafc 	bl	8009530 <_sbrk_r>
 8008f38:	6038      	str	r0, [r7, #0]
 8008f3a:	4629      	mov	r1, r5
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f000 faf7 	bl	8009530 <_sbrk_r>
 8008f42:	1c43      	adds	r3, r0, #1
 8008f44:	d123      	bne.n	8008f8e <_malloc_r+0x92>
 8008f46:	230c      	movs	r3, #12
 8008f48:	6033      	str	r3, [r6, #0]
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	f000 fdce 	bl	8009aec <__malloc_unlock>
 8008f50:	e7e3      	b.n	8008f1a <_malloc_r+0x1e>
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	1b5b      	subs	r3, r3, r5
 8008f56:	d417      	bmi.n	8008f88 <_malloc_r+0x8c>
 8008f58:	2b0b      	cmp	r3, #11
 8008f5a:	d903      	bls.n	8008f64 <_malloc_r+0x68>
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	441c      	add	r4, r3
 8008f60:	6025      	str	r5, [r4, #0]
 8008f62:	e004      	b.n	8008f6e <_malloc_r+0x72>
 8008f64:	6863      	ldr	r3, [r4, #4]
 8008f66:	42a2      	cmp	r2, r4
 8008f68:	bf0c      	ite	eq
 8008f6a:	600b      	streq	r3, [r1, #0]
 8008f6c:	6053      	strne	r3, [r2, #4]
 8008f6e:	4630      	mov	r0, r6
 8008f70:	f000 fdbc 	bl	8009aec <__malloc_unlock>
 8008f74:	f104 000b 	add.w	r0, r4, #11
 8008f78:	1d23      	adds	r3, r4, #4
 8008f7a:	f020 0007 	bic.w	r0, r0, #7
 8008f7e:	1ac2      	subs	r2, r0, r3
 8008f80:	d0cc      	beq.n	8008f1c <_malloc_r+0x20>
 8008f82:	1a1b      	subs	r3, r3, r0
 8008f84:	50a3      	str	r3, [r4, r2]
 8008f86:	e7c9      	b.n	8008f1c <_malloc_r+0x20>
 8008f88:	4622      	mov	r2, r4
 8008f8a:	6864      	ldr	r4, [r4, #4]
 8008f8c:	e7cc      	b.n	8008f28 <_malloc_r+0x2c>
 8008f8e:	1cc4      	adds	r4, r0, #3
 8008f90:	f024 0403 	bic.w	r4, r4, #3
 8008f94:	42a0      	cmp	r0, r4
 8008f96:	d0e3      	beq.n	8008f60 <_malloc_r+0x64>
 8008f98:	1a21      	subs	r1, r4, r0
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	f000 fac8 	bl	8009530 <_sbrk_r>
 8008fa0:	3001      	adds	r0, #1
 8008fa2:	d1dd      	bne.n	8008f60 <_malloc_r+0x64>
 8008fa4:	e7cf      	b.n	8008f46 <_malloc_r+0x4a>
 8008fa6:	bf00      	nop
 8008fa8:	20000208 	.word	0x20000208
 8008fac:	2000020c 	.word	0x2000020c

08008fb0 <__ssputs_r>:
 8008fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fb4:	688e      	ldr	r6, [r1, #8]
 8008fb6:	429e      	cmp	r6, r3
 8008fb8:	4682      	mov	sl, r0
 8008fba:	460c      	mov	r4, r1
 8008fbc:	4690      	mov	r8, r2
 8008fbe:	461f      	mov	r7, r3
 8008fc0:	d838      	bhi.n	8009034 <__ssputs_r+0x84>
 8008fc2:	898a      	ldrh	r2, [r1, #12]
 8008fc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fc8:	d032      	beq.n	8009030 <__ssputs_r+0x80>
 8008fca:	6825      	ldr	r5, [r4, #0]
 8008fcc:	6909      	ldr	r1, [r1, #16]
 8008fce:	eba5 0901 	sub.w	r9, r5, r1
 8008fd2:	6965      	ldr	r5, [r4, #20]
 8008fd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fdc:	3301      	adds	r3, #1
 8008fde:	444b      	add	r3, r9
 8008fe0:	106d      	asrs	r5, r5, #1
 8008fe2:	429d      	cmp	r5, r3
 8008fe4:	bf38      	it	cc
 8008fe6:	461d      	movcc	r5, r3
 8008fe8:	0553      	lsls	r3, r2, #21
 8008fea:	d531      	bpl.n	8009050 <__ssputs_r+0xa0>
 8008fec:	4629      	mov	r1, r5
 8008fee:	f7ff ff85 	bl	8008efc <_malloc_r>
 8008ff2:	4606      	mov	r6, r0
 8008ff4:	b950      	cbnz	r0, 800900c <__ssputs_r+0x5c>
 8008ff6:	230c      	movs	r3, #12
 8008ff8:	f8ca 3000 	str.w	r3, [sl]
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009002:	81a3      	strh	r3, [r4, #12]
 8009004:	f04f 30ff 	mov.w	r0, #4294967295
 8009008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800900c:	6921      	ldr	r1, [r4, #16]
 800900e:	464a      	mov	r2, r9
 8009010:	f7ff fa4c 	bl	80084ac <memcpy>
 8009014:	89a3      	ldrh	r3, [r4, #12]
 8009016:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800901a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800901e:	81a3      	strh	r3, [r4, #12]
 8009020:	6126      	str	r6, [r4, #16]
 8009022:	6165      	str	r5, [r4, #20]
 8009024:	444e      	add	r6, r9
 8009026:	eba5 0509 	sub.w	r5, r5, r9
 800902a:	6026      	str	r6, [r4, #0]
 800902c:	60a5      	str	r5, [r4, #8]
 800902e:	463e      	mov	r6, r7
 8009030:	42be      	cmp	r6, r7
 8009032:	d900      	bls.n	8009036 <__ssputs_r+0x86>
 8009034:	463e      	mov	r6, r7
 8009036:	4632      	mov	r2, r6
 8009038:	6820      	ldr	r0, [r4, #0]
 800903a:	4641      	mov	r1, r8
 800903c:	f000 fd36 	bl	8009aac <memmove>
 8009040:	68a3      	ldr	r3, [r4, #8]
 8009042:	6822      	ldr	r2, [r4, #0]
 8009044:	1b9b      	subs	r3, r3, r6
 8009046:	4432      	add	r2, r6
 8009048:	60a3      	str	r3, [r4, #8]
 800904a:	6022      	str	r2, [r4, #0]
 800904c:	2000      	movs	r0, #0
 800904e:	e7db      	b.n	8009008 <__ssputs_r+0x58>
 8009050:	462a      	mov	r2, r5
 8009052:	f000 fd51 	bl	8009af8 <_realloc_r>
 8009056:	4606      	mov	r6, r0
 8009058:	2800      	cmp	r0, #0
 800905a:	d1e1      	bne.n	8009020 <__ssputs_r+0x70>
 800905c:	6921      	ldr	r1, [r4, #16]
 800905e:	4650      	mov	r0, sl
 8009060:	f7ff fefc 	bl	8008e5c <_free_r>
 8009064:	e7c7      	b.n	8008ff6 <__ssputs_r+0x46>
	...

08009068 <_svfiprintf_r>:
 8009068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	4698      	mov	r8, r3
 800906e:	898b      	ldrh	r3, [r1, #12]
 8009070:	061b      	lsls	r3, r3, #24
 8009072:	b09d      	sub	sp, #116	; 0x74
 8009074:	4607      	mov	r7, r0
 8009076:	460d      	mov	r5, r1
 8009078:	4614      	mov	r4, r2
 800907a:	d50e      	bpl.n	800909a <_svfiprintf_r+0x32>
 800907c:	690b      	ldr	r3, [r1, #16]
 800907e:	b963      	cbnz	r3, 800909a <_svfiprintf_r+0x32>
 8009080:	2140      	movs	r1, #64	; 0x40
 8009082:	f7ff ff3b 	bl	8008efc <_malloc_r>
 8009086:	6028      	str	r0, [r5, #0]
 8009088:	6128      	str	r0, [r5, #16]
 800908a:	b920      	cbnz	r0, 8009096 <_svfiprintf_r+0x2e>
 800908c:	230c      	movs	r3, #12
 800908e:	603b      	str	r3, [r7, #0]
 8009090:	f04f 30ff 	mov.w	r0, #4294967295
 8009094:	e0d1      	b.n	800923a <_svfiprintf_r+0x1d2>
 8009096:	2340      	movs	r3, #64	; 0x40
 8009098:	616b      	str	r3, [r5, #20]
 800909a:	2300      	movs	r3, #0
 800909c:	9309      	str	r3, [sp, #36]	; 0x24
 800909e:	2320      	movs	r3, #32
 80090a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80090a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80090a8:	2330      	movs	r3, #48	; 0x30
 80090aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009254 <_svfiprintf_r+0x1ec>
 80090ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80090b2:	f04f 0901 	mov.w	r9, #1
 80090b6:	4623      	mov	r3, r4
 80090b8:	469a      	mov	sl, r3
 80090ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090be:	b10a      	cbz	r2, 80090c4 <_svfiprintf_r+0x5c>
 80090c0:	2a25      	cmp	r2, #37	; 0x25
 80090c2:	d1f9      	bne.n	80090b8 <_svfiprintf_r+0x50>
 80090c4:	ebba 0b04 	subs.w	fp, sl, r4
 80090c8:	d00b      	beq.n	80090e2 <_svfiprintf_r+0x7a>
 80090ca:	465b      	mov	r3, fp
 80090cc:	4622      	mov	r2, r4
 80090ce:	4629      	mov	r1, r5
 80090d0:	4638      	mov	r0, r7
 80090d2:	f7ff ff6d 	bl	8008fb0 <__ssputs_r>
 80090d6:	3001      	adds	r0, #1
 80090d8:	f000 80aa 	beq.w	8009230 <_svfiprintf_r+0x1c8>
 80090dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090de:	445a      	add	r2, fp
 80090e0:	9209      	str	r2, [sp, #36]	; 0x24
 80090e2:	f89a 3000 	ldrb.w	r3, [sl]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 80a2 	beq.w	8009230 <_svfiprintf_r+0x1c8>
 80090ec:	2300      	movs	r3, #0
 80090ee:	f04f 32ff 	mov.w	r2, #4294967295
 80090f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090f6:	f10a 0a01 	add.w	sl, sl, #1
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	9307      	str	r3, [sp, #28]
 80090fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009102:	931a      	str	r3, [sp, #104]	; 0x68
 8009104:	4654      	mov	r4, sl
 8009106:	2205      	movs	r2, #5
 8009108:	f814 1b01 	ldrb.w	r1, [r4], #1
 800910c:	4851      	ldr	r0, [pc, #324]	; (8009254 <_svfiprintf_r+0x1ec>)
 800910e:	f7f7 f8cf 	bl	80002b0 <memchr>
 8009112:	9a04      	ldr	r2, [sp, #16]
 8009114:	b9d8      	cbnz	r0, 800914e <_svfiprintf_r+0xe6>
 8009116:	06d0      	lsls	r0, r2, #27
 8009118:	bf44      	itt	mi
 800911a:	2320      	movmi	r3, #32
 800911c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009120:	0711      	lsls	r1, r2, #28
 8009122:	bf44      	itt	mi
 8009124:	232b      	movmi	r3, #43	; 0x2b
 8009126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800912a:	f89a 3000 	ldrb.w	r3, [sl]
 800912e:	2b2a      	cmp	r3, #42	; 0x2a
 8009130:	d015      	beq.n	800915e <_svfiprintf_r+0xf6>
 8009132:	9a07      	ldr	r2, [sp, #28]
 8009134:	4654      	mov	r4, sl
 8009136:	2000      	movs	r0, #0
 8009138:	f04f 0c0a 	mov.w	ip, #10
 800913c:	4621      	mov	r1, r4
 800913e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009142:	3b30      	subs	r3, #48	; 0x30
 8009144:	2b09      	cmp	r3, #9
 8009146:	d94e      	bls.n	80091e6 <_svfiprintf_r+0x17e>
 8009148:	b1b0      	cbz	r0, 8009178 <_svfiprintf_r+0x110>
 800914a:	9207      	str	r2, [sp, #28]
 800914c:	e014      	b.n	8009178 <_svfiprintf_r+0x110>
 800914e:	eba0 0308 	sub.w	r3, r0, r8
 8009152:	fa09 f303 	lsl.w	r3, r9, r3
 8009156:	4313      	orrs	r3, r2
 8009158:	9304      	str	r3, [sp, #16]
 800915a:	46a2      	mov	sl, r4
 800915c:	e7d2      	b.n	8009104 <_svfiprintf_r+0x9c>
 800915e:	9b03      	ldr	r3, [sp, #12]
 8009160:	1d19      	adds	r1, r3, #4
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	9103      	str	r1, [sp, #12]
 8009166:	2b00      	cmp	r3, #0
 8009168:	bfbb      	ittet	lt
 800916a:	425b      	neglt	r3, r3
 800916c:	f042 0202 	orrlt.w	r2, r2, #2
 8009170:	9307      	strge	r3, [sp, #28]
 8009172:	9307      	strlt	r3, [sp, #28]
 8009174:	bfb8      	it	lt
 8009176:	9204      	strlt	r2, [sp, #16]
 8009178:	7823      	ldrb	r3, [r4, #0]
 800917a:	2b2e      	cmp	r3, #46	; 0x2e
 800917c:	d10c      	bne.n	8009198 <_svfiprintf_r+0x130>
 800917e:	7863      	ldrb	r3, [r4, #1]
 8009180:	2b2a      	cmp	r3, #42	; 0x2a
 8009182:	d135      	bne.n	80091f0 <_svfiprintf_r+0x188>
 8009184:	9b03      	ldr	r3, [sp, #12]
 8009186:	1d1a      	adds	r2, r3, #4
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	9203      	str	r2, [sp, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	bfb8      	it	lt
 8009190:	f04f 33ff 	movlt.w	r3, #4294967295
 8009194:	3402      	adds	r4, #2
 8009196:	9305      	str	r3, [sp, #20]
 8009198:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009264 <_svfiprintf_r+0x1fc>
 800919c:	7821      	ldrb	r1, [r4, #0]
 800919e:	2203      	movs	r2, #3
 80091a0:	4650      	mov	r0, sl
 80091a2:	f7f7 f885 	bl	80002b0 <memchr>
 80091a6:	b140      	cbz	r0, 80091ba <_svfiprintf_r+0x152>
 80091a8:	2340      	movs	r3, #64	; 0x40
 80091aa:	eba0 000a 	sub.w	r0, r0, sl
 80091ae:	fa03 f000 	lsl.w	r0, r3, r0
 80091b2:	9b04      	ldr	r3, [sp, #16]
 80091b4:	4303      	orrs	r3, r0
 80091b6:	3401      	adds	r4, #1
 80091b8:	9304      	str	r3, [sp, #16]
 80091ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091be:	4826      	ldr	r0, [pc, #152]	; (8009258 <_svfiprintf_r+0x1f0>)
 80091c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091c4:	2206      	movs	r2, #6
 80091c6:	f7f7 f873 	bl	80002b0 <memchr>
 80091ca:	2800      	cmp	r0, #0
 80091cc:	d038      	beq.n	8009240 <_svfiprintf_r+0x1d8>
 80091ce:	4b23      	ldr	r3, [pc, #140]	; (800925c <_svfiprintf_r+0x1f4>)
 80091d0:	bb1b      	cbnz	r3, 800921a <_svfiprintf_r+0x1b2>
 80091d2:	9b03      	ldr	r3, [sp, #12]
 80091d4:	3307      	adds	r3, #7
 80091d6:	f023 0307 	bic.w	r3, r3, #7
 80091da:	3308      	adds	r3, #8
 80091dc:	9303      	str	r3, [sp, #12]
 80091de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091e0:	4433      	add	r3, r6
 80091e2:	9309      	str	r3, [sp, #36]	; 0x24
 80091e4:	e767      	b.n	80090b6 <_svfiprintf_r+0x4e>
 80091e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ea:	460c      	mov	r4, r1
 80091ec:	2001      	movs	r0, #1
 80091ee:	e7a5      	b.n	800913c <_svfiprintf_r+0xd4>
 80091f0:	2300      	movs	r3, #0
 80091f2:	3401      	adds	r4, #1
 80091f4:	9305      	str	r3, [sp, #20]
 80091f6:	4619      	mov	r1, r3
 80091f8:	f04f 0c0a 	mov.w	ip, #10
 80091fc:	4620      	mov	r0, r4
 80091fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009202:	3a30      	subs	r2, #48	; 0x30
 8009204:	2a09      	cmp	r2, #9
 8009206:	d903      	bls.n	8009210 <_svfiprintf_r+0x1a8>
 8009208:	2b00      	cmp	r3, #0
 800920a:	d0c5      	beq.n	8009198 <_svfiprintf_r+0x130>
 800920c:	9105      	str	r1, [sp, #20]
 800920e:	e7c3      	b.n	8009198 <_svfiprintf_r+0x130>
 8009210:	fb0c 2101 	mla	r1, ip, r1, r2
 8009214:	4604      	mov	r4, r0
 8009216:	2301      	movs	r3, #1
 8009218:	e7f0      	b.n	80091fc <_svfiprintf_r+0x194>
 800921a:	ab03      	add	r3, sp, #12
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	462a      	mov	r2, r5
 8009220:	4b0f      	ldr	r3, [pc, #60]	; (8009260 <_svfiprintf_r+0x1f8>)
 8009222:	a904      	add	r1, sp, #16
 8009224:	4638      	mov	r0, r7
 8009226:	f7fc f975 	bl	8005514 <_printf_float>
 800922a:	1c42      	adds	r2, r0, #1
 800922c:	4606      	mov	r6, r0
 800922e:	d1d6      	bne.n	80091de <_svfiprintf_r+0x176>
 8009230:	89ab      	ldrh	r3, [r5, #12]
 8009232:	065b      	lsls	r3, r3, #25
 8009234:	f53f af2c 	bmi.w	8009090 <_svfiprintf_r+0x28>
 8009238:	9809      	ldr	r0, [sp, #36]	; 0x24
 800923a:	b01d      	add	sp, #116	; 0x74
 800923c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009240:	ab03      	add	r3, sp, #12
 8009242:	9300      	str	r3, [sp, #0]
 8009244:	462a      	mov	r2, r5
 8009246:	4b06      	ldr	r3, [pc, #24]	; (8009260 <_svfiprintf_r+0x1f8>)
 8009248:	a904      	add	r1, sp, #16
 800924a:	4638      	mov	r0, r7
 800924c:	f7fc fc06 	bl	8005a5c <_printf_i>
 8009250:	e7eb      	b.n	800922a <_svfiprintf_r+0x1c2>
 8009252:	bf00      	nop
 8009254:	0801dda4 	.word	0x0801dda4
 8009258:	0801ddae 	.word	0x0801ddae
 800925c:	08005515 	.word	0x08005515
 8009260:	08008fb1 	.word	0x08008fb1
 8009264:	0801ddaa 	.word	0x0801ddaa

08009268 <__sfputc_r>:
 8009268:	6893      	ldr	r3, [r2, #8]
 800926a:	3b01      	subs	r3, #1
 800926c:	2b00      	cmp	r3, #0
 800926e:	b410      	push	{r4}
 8009270:	6093      	str	r3, [r2, #8]
 8009272:	da08      	bge.n	8009286 <__sfputc_r+0x1e>
 8009274:	6994      	ldr	r4, [r2, #24]
 8009276:	42a3      	cmp	r3, r4
 8009278:	db01      	blt.n	800927e <__sfputc_r+0x16>
 800927a:	290a      	cmp	r1, #10
 800927c:	d103      	bne.n	8009286 <__sfputc_r+0x1e>
 800927e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009282:	f000 b9bb 	b.w	80095fc <__swbuf_r>
 8009286:	6813      	ldr	r3, [r2, #0]
 8009288:	1c58      	adds	r0, r3, #1
 800928a:	6010      	str	r0, [r2, #0]
 800928c:	7019      	strb	r1, [r3, #0]
 800928e:	4608      	mov	r0, r1
 8009290:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009294:	4770      	bx	lr

08009296 <__sfputs_r>:
 8009296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009298:	4606      	mov	r6, r0
 800929a:	460f      	mov	r7, r1
 800929c:	4614      	mov	r4, r2
 800929e:	18d5      	adds	r5, r2, r3
 80092a0:	42ac      	cmp	r4, r5
 80092a2:	d101      	bne.n	80092a8 <__sfputs_r+0x12>
 80092a4:	2000      	movs	r0, #0
 80092a6:	e007      	b.n	80092b8 <__sfputs_r+0x22>
 80092a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80092ac:	463a      	mov	r2, r7
 80092ae:	4630      	mov	r0, r6
 80092b0:	f7ff ffda 	bl	8009268 <__sfputc_r>
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	d1f3      	bne.n	80092a0 <__sfputs_r+0xa>
 80092b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080092bc <_vfiprintf_r>:
 80092bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092c0:	460d      	mov	r5, r1
 80092c2:	b09d      	sub	sp, #116	; 0x74
 80092c4:	4614      	mov	r4, r2
 80092c6:	4698      	mov	r8, r3
 80092c8:	4606      	mov	r6, r0
 80092ca:	b118      	cbz	r0, 80092d4 <_vfiprintf_r+0x18>
 80092cc:	6983      	ldr	r3, [r0, #24]
 80092ce:	b90b      	cbnz	r3, 80092d4 <_vfiprintf_r+0x18>
 80092d0:	f7fe fcbe 	bl	8007c50 <__sinit>
 80092d4:	4b89      	ldr	r3, [pc, #548]	; (80094fc <_vfiprintf_r+0x240>)
 80092d6:	429d      	cmp	r5, r3
 80092d8:	d11b      	bne.n	8009312 <_vfiprintf_r+0x56>
 80092da:	6875      	ldr	r5, [r6, #4]
 80092dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092de:	07d9      	lsls	r1, r3, #31
 80092e0:	d405      	bmi.n	80092ee <_vfiprintf_r+0x32>
 80092e2:	89ab      	ldrh	r3, [r5, #12]
 80092e4:	059a      	lsls	r2, r3, #22
 80092e6:	d402      	bmi.n	80092ee <_vfiprintf_r+0x32>
 80092e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ea:	f7ff f8c2 	bl	8008472 <__retarget_lock_acquire_recursive>
 80092ee:	89ab      	ldrh	r3, [r5, #12]
 80092f0:	071b      	lsls	r3, r3, #28
 80092f2:	d501      	bpl.n	80092f8 <_vfiprintf_r+0x3c>
 80092f4:	692b      	ldr	r3, [r5, #16]
 80092f6:	b9eb      	cbnz	r3, 8009334 <_vfiprintf_r+0x78>
 80092f8:	4629      	mov	r1, r5
 80092fa:	4630      	mov	r0, r6
 80092fc:	f000 f9f0 	bl	80096e0 <__swsetup_r>
 8009300:	b1c0      	cbz	r0, 8009334 <_vfiprintf_r+0x78>
 8009302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009304:	07dc      	lsls	r4, r3, #31
 8009306:	d50e      	bpl.n	8009326 <_vfiprintf_r+0x6a>
 8009308:	f04f 30ff 	mov.w	r0, #4294967295
 800930c:	b01d      	add	sp, #116	; 0x74
 800930e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009312:	4b7b      	ldr	r3, [pc, #492]	; (8009500 <_vfiprintf_r+0x244>)
 8009314:	429d      	cmp	r5, r3
 8009316:	d101      	bne.n	800931c <_vfiprintf_r+0x60>
 8009318:	68b5      	ldr	r5, [r6, #8]
 800931a:	e7df      	b.n	80092dc <_vfiprintf_r+0x20>
 800931c:	4b79      	ldr	r3, [pc, #484]	; (8009504 <_vfiprintf_r+0x248>)
 800931e:	429d      	cmp	r5, r3
 8009320:	bf08      	it	eq
 8009322:	68f5      	ldreq	r5, [r6, #12]
 8009324:	e7da      	b.n	80092dc <_vfiprintf_r+0x20>
 8009326:	89ab      	ldrh	r3, [r5, #12]
 8009328:	0598      	lsls	r0, r3, #22
 800932a:	d4ed      	bmi.n	8009308 <_vfiprintf_r+0x4c>
 800932c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800932e:	f7ff f8a1 	bl	8008474 <__retarget_lock_release_recursive>
 8009332:	e7e9      	b.n	8009308 <_vfiprintf_r+0x4c>
 8009334:	2300      	movs	r3, #0
 8009336:	9309      	str	r3, [sp, #36]	; 0x24
 8009338:	2320      	movs	r3, #32
 800933a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800933e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009342:	2330      	movs	r3, #48	; 0x30
 8009344:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009508 <_vfiprintf_r+0x24c>
 8009348:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800934c:	f04f 0901 	mov.w	r9, #1
 8009350:	4623      	mov	r3, r4
 8009352:	469a      	mov	sl, r3
 8009354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009358:	b10a      	cbz	r2, 800935e <_vfiprintf_r+0xa2>
 800935a:	2a25      	cmp	r2, #37	; 0x25
 800935c:	d1f9      	bne.n	8009352 <_vfiprintf_r+0x96>
 800935e:	ebba 0b04 	subs.w	fp, sl, r4
 8009362:	d00b      	beq.n	800937c <_vfiprintf_r+0xc0>
 8009364:	465b      	mov	r3, fp
 8009366:	4622      	mov	r2, r4
 8009368:	4629      	mov	r1, r5
 800936a:	4630      	mov	r0, r6
 800936c:	f7ff ff93 	bl	8009296 <__sfputs_r>
 8009370:	3001      	adds	r0, #1
 8009372:	f000 80aa 	beq.w	80094ca <_vfiprintf_r+0x20e>
 8009376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009378:	445a      	add	r2, fp
 800937a:	9209      	str	r2, [sp, #36]	; 0x24
 800937c:	f89a 3000 	ldrb.w	r3, [sl]
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 80a2 	beq.w	80094ca <_vfiprintf_r+0x20e>
 8009386:	2300      	movs	r3, #0
 8009388:	f04f 32ff 	mov.w	r2, #4294967295
 800938c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009390:	f10a 0a01 	add.w	sl, sl, #1
 8009394:	9304      	str	r3, [sp, #16]
 8009396:	9307      	str	r3, [sp, #28]
 8009398:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800939c:	931a      	str	r3, [sp, #104]	; 0x68
 800939e:	4654      	mov	r4, sl
 80093a0:	2205      	movs	r2, #5
 80093a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093a6:	4858      	ldr	r0, [pc, #352]	; (8009508 <_vfiprintf_r+0x24c>)
 80093a8:	f7f6 ff82 	bl	80002b0 <memchr>
 80093ac:	9a04      	ldr	r2, [sp, #16]
 80093ae:	b9d8      	cbnz	r0, 80093e8 <_vfiprintf_r+0x12c>
 80093b0:	06d1      	lsls	r1, r2, #27
 80093b2:	bf44      	itt	mi
 80093b4:	2320      	movmi	r3, #32
 80093b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093ba:	0713      	lsls	r3, r2, #28
 80093bc:	bf44      	itt	mi
 80093be:	232b      	movmi	r3, #43	; 0x2b
 80093c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093c4:	f89a 3000 	ldrb.w	r3, [sl]
 80093c8:	2b2a      	cmp	r3, #42	; 0x2a
 80093ca:	d015      	beq.n	80093f8 <_vfiprintf_r+0x13c>
 80093cc:	9a07      	ldr	r2, [sp, #28]
 80093ce:	4654      	mov	r4, sl
 80093d0:	2000      	movs	r0, #0
 80093d2:	f04f 0c0a 	mov.w	ip, #10
 80093d6:	4621      	mov	r1, r4
 80093d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80093dc:	3b30      	subs	r3, #48	; 0x30
 80093de:	2b09      	cmp	r3, #9
 80093e0:	d94e      	bls.n	8009480 <_vfiprintf_r+0x1c4>
 80093e2:	b1b0      	cbz	r0, 8009412 <_vfiprintf_r+0x156>
 80093e4:	9207      	str	r2, [sp, #28]
 80093e6:	e014      	b.n	8009412 <_vfiprintf_r+0x156>
 80093e8:	eba0 0308 	sub.w	r3, r0, r8
 80093ec:	fa09 f303 	lsl.w	r3, r9, r3
 80093f0:	4313      	orrs	r3, r2
 80093f2:	9304      	str	r3, [sp, #16]
 80093f4:	46a2      	mov	sl, r4
 80093f6:	e7d2      	b.n	800939e <_vfiprintf_r+0xe2>
 80093f8:	9b03      	ldr	r3, [sp, #12]
 80093fa:	1d19      	adds	r1, r3, #4
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	9103      	str	r1, [sp, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	bfbb      	ittet	lt
 8009404:	425b      	neglt	r3, r3
 8009406:	f042 0202 	orrlt.w	r2, r2, #2
 800940a:	9307      	strge	r3, [sp, #28]
 800940c:	9307      	strlt	r3, [sp, #28]
 800940e:	bfb8      	it	lt
 8009410:	9204      	strlt	r2, [sp, #16]
 8009412:	7823      	ldrb	r3, [r4, #0]
 8009414:	2b2e      	cmp	r3, #46	; 0x2e
 8009416:	d10c      	bne.n	8009432 <_vfiprintf_r+0x176>
 8009418:	7863      	ldrb	r3, [r4, #1]
 800941a:	2b2a      	cmp	r3, #42	; 0x2a
 800941c:	d135      	bne.n	800948a <_vfiprintf_r+0x1ce>
 800941e:	9b03      	ldr	r3, [sp, #12]
 8009420:	1d1a      	adds	r2, r3, #4
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	9203      	str	r2, [sp, #12]
 8009426:	2b00      	cmp	r3, #0
 8009428:	bfb8      	it	lt
 800942a:	f04f 33ff 	movlt.w	r3, #4294967295
 800942e:	3402      	adds	r4, #2
 8009430:	9305      	str	r3, [sp, #20]
 8009432:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009518 <_vfiprintf_r+0x25c>
 8009436:	7821      	ldrb	r1, [r4, #0]
 8009438:	2203      	movs	r2, #3
 800943a:	4650      	mov	r0, sl
 800943c:	f7f6 ff38 	bl	80002b0 <memchr>
 8009440:	b140      	cbz	r0, 8009454 <_vfiprintf_r+0x198>
 8009442:	2340      	movs	r3, #64	; 0x40
 8009444:	eba0 000a 	sub.w	r0, r0, sl
 8009448:	fa03 f000 	lsl.w	r0, r3, r0
 800944c:	9b04      	ldr	r3, [sp, #16]
 800944e:	4303      	orrs	r3, r0
 8009450:	3401      	adds	r4, #1
 8009452:	9304      	str	r3, [sp, #16]
 8009454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009458:	482c      	ldr	r0, [pc, #176]	; (800950c <_vfiprintf_r+0x250>)
 800945a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800945e:	2206      	movs	r2, #6
 8009460:	f7f6 ff26 	bl	80002b0 <memchr>
 8009464:	2800      	cmp	r0, #0
 8009466:	d03f      	beq.n	80094e8 <_vfiprintf_r+0x22c>
 8009468:	4b29      	ldr	r3, [pc, #164]	; (8009510 <_vfiprintf_r+0x254>)
 800946a:	bb1b      	cbnz	r3, 80094b4 <_vfiprintf_r+0x1f8>
 800946c:	9b03      	ldr	r3, [sp, #12]
 800946e:	3307      	adds	r3, #7
 8009470:	f023 0307 	bic.w	r3, r3, #7
 8009474:	3308      	adds	r3, #8
 8009476:	9303      	str	r3, [sp, #12]
 8009478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800947a:	443b      	add	r3, r7
 800947c:	9309      	str	r3, [sp, #36]	; 0x24
 800947e:	e767      	b.n	8009350 <_vfiprintf_r+0x94>
 8009480:	fb0c 3202 	mla	r2, ip, r2, r3
 8009484:	460c      	mov	r4, r1
 8009486:	2001      	movs	r0, #1
 8009488:	e7a5      	b.n	80093d6 <_vfiprintf_r+0x11a>
 800948a:	2300      	movs	r3, #0
 800948c:	3401      	adds	r4, #1
 800948e:	9305      	str	r3, [sp, #20]
 8009490:	4619      	mov	r1, r3
 8009492:	f04f 0c0a 	mov.w	ip, #10
 8009496:	4620      	mov	r0, r4
 8009498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800949c:	3a30      	subs	r2, #48	; 0x30
 800949e:	2a09      	cmp	r2, #9
 80094a0:	d903      	bls.n	80094aa <_vfiprintf_r+0x1ee>
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d0c5      	beq.n	8009432 <_vfiprintf_r+0x176>
 80094a6:	9105      	str	r1, [sp, #20]
 80094a8:	e7c3      	b.n	8009432 <_vfiprintf_r+0x176>
 80094aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80094ae:	4604      	mov	r4, r0
 80094b0:	2301      	movs	r3, #1
 80094b2:	e7f0      	b.n	8009496 <_vfiprintf_r+0x1da>
 80094b4:	ab03      	add	r3, sp, #12
 80094b6:	9300      	str	r3, [sp, #0]
 80094b8:	462a      	mov	r2, r5
 80094ba:	4b16      	ldr	r3, [pc, #88]	; (8009514 <_vfiprintf_r+0x258>)
 80094bc:	a904      	add	r1, sp, #16
 80094be:	4630      	mov	r0, r6
 80094c0:	f7fc f828 	bl	8005514 <_printf_float>
 80094c4:	4607      	mov	r7, r0
 80094c6:	1c78      	adds	r0, r7, #1
 80094c8:	d1d6      	bne.n	8009478 <_vfiprintf_r+0x1bc>
 80094ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094cc:	07d9      	lsls	r1, r3, #31
 80094ce:	d405      	bmi.n	80094dc <_vfiprintf_r+0x220>
 80094d0:	89ab      	ldrh	r3, [r5, #12]
 80094d2:	059a      	lsls	r2, r3, #22
 80094d4:	d402      	bmi.n	80094dc <_vfiprintf_r+0x220>
 80094d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80094d8:	f7fe ffcc 	bl	8008474 <__retarget_lock_release_recursive>
 80094dc:	89ab      	ldrh	r3, [r5, #12]
 80094de:	065b      	lsls	r3, r3, #25
 80094e0:	f53f af12 	bmi.w	8009308 <_vfiprintf_r+0x4c>
 80094e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094e6:	e711      	b.n	800930c <_vfiprintf_r+0x50>
 80094e8:	ab03      	add	r3, sp, #12
 80094ea:	9300      	str	r3, [sp, #0]
 80094ec:	462a      	mov	r2, r5
 80094ee:	4b09      	ldr	r3, [pc, #36]	; (8009514 <_vfiprintf_r+0x258>)
 80094f0:	a904      	add	r1, sp, #16
 80094f2:	4630      	mov	r0, r6
 80094f4:	f7fc fab2 	bl	8005a5c <_printf_i>
 80094f8:	e7e4      	b.n	80094c4 <_vfiprintf_r+0x208>
 80094fa:	bf00      	nop
 80094fc:	0801db88 	.word	0x0801db88
 8009500:	0801dba8 	.word	0x0801dba8
 8009504:	0801db68 	.word	0x0801db68
 8009508:	0801dda4 	.word	0x0801dda4
 800950c:	0801ddae 	.word	0x0801ddae
 8009510:	08005515 	.word	0x08005515
 8009514:	08009297 	.word	0x08009297
 8009518:	0801ddaa 	.word	0x0801ddaa
 800951c:	00000000 	.word	0x00000000

08009520 <nan>:
 8009520:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009528 <nan+0x8>
 8009524:	4770      	bx	lr
 8009526:	bf00      	nop
 8009528:	00000000 	.word	0x00000000
 800952c:	7ff80000 	.word	0x7ff80000

08009530 <_sbrk_r>:
 8009530:	b538      	push	{r3, r4, r5, lr}
 8009532:	4d06      	ldr	r5, [pc, #24]	; (800954c <_sbrk_r+0x1c>)
 8009534:	2300      	movs	r3, #0
 8009536:	4604      	mov	r4, r0
 8009538:	4608      	mov	r0, r1
 800953a:	602b      	str	r3, [r5, #0]
 800953c:	f7f8 fa3e 	bl	80019bc <_sbrk>
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	d102      	bne.n	800954a <_sbrk_r+0x1a>
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	b103      	cbz	r3, 800954a <_sbrk_r+0x1a>
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	bd38      	pop	{r3, r4, r5, pc}
 800954c:	20006348 	.word	0x20006348

08009550 <__sread>:
 8009550:	b510      	push	{r4, lr}
 8009552:	460c      	mov	r4, r1
 8009554:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009558:	f000 faf4 	bl	8009b44 <_read_r>
 800955c:	2800      	cmp	r0, #0
 800955e:	bfab      	itete	ge
 8009560:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009562:	89a3      	ldrhlt	r3, [r4, #12]
 8009564:	181b      	addge	r3, r3, r0
 8009566:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800956a:	bfac      	ite	ge
 800956c:	6563      	strge	r3, [r4, #84]	; 0x54
 800956e:	81a3      	strhlt	r3, [r4, #12]
 8009570:	bd10      	pop	{r4, pc}

08009572 <__swrite>:
 8009572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009576:	461f      	mov	r7, r3
 8009578:	898b      	ldrh	r3, [r1, #12]
 800957a:	05db      	lsls	r3, r3, #23
 800957c:	4605      	mov	r5, r0
 800957e:	460c      	mov	r4, r1
 8009580:	4616      	mov	r6, r2
 8009582:	d505      	bpl.n	8009590 <__swrite+0x1e>
 8009584:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009588:	2302      	movs	r3, #2
 800958a:	2200      	movs	r2, #0
 800958c:	f000 fa18 	bl	80099c0 <_lseek_r>
 8009590:	89a3      	ldrh	r3, [r4, #12]
 8009592:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009596:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800959a:	81a3      	strh	r3, [r4, #12]
 800959c:	4632      	mov	r2, r6
 800959e:	463b      	mov	r3, r7
 80095a0:	4628      	mov	r0, r5
 80095a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095a6:	f000 b889 	b.w	80096bc <_write_r>

080095aa <__sseek>:
 80095aa:	b510      	push	{r4, lr}
 80095ac:	460c      	mov	r4, r1
 80095ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b2:	f000 fa05 	bl	80099c0 <_lseek_r>
 80095b6:	1c43      	adds	r3, r0, #1
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	bf15      	itete	ne
 80095bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80095be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095c6:	81a3      	strheq	r3, [r4, #12]
 80095c8:	bf18      	it	ne
 80095ca:	81a3      	strhne	r3, [r4, #12]
 80095cc:	bd10      	pop	{r4, pc}

080095ce <__sclose>:
 80095ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095d2:	f000 b911 	b.w	80097f8 <_close_r>

080095d6 <strncmp>:
 80095d6:	b510      	push	{r4, lr}
 80095d8:	b16a      	cbz	r2, 80095f6 <strncmp+0x20>
 80095da:	3901      	subs	r1, #1
 80095dc:	1884      	adds	r4, r0, r2
 80095de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80095e2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d103      	bne.n	80095f2 <strncmp+0x1c>
 80095ea:	42a0      	cmp	r0, r4
 80095ec:	d001      	beq.n	80095f2 <strncmp+0x1c>
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d1f5      	bne.n	80095de <strncmp+0x8>
 80095f2:	1a98      	subs	r0, r3, r2
 80095f4:	bd10      	pop	{r4, pc}
 80095f6:	4610      	mov	r0, r2
 80095f8:	e7fc      	b.n	80095f4 <strncmp+0x1e>
	...

080095fc <__swbuf_r>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	460e      	mov	r6, r1
 8009600:	4614      	mov	r4, r2
 8009602:	4605      	mov	r5, r0
 8009604:	b118      	cbz	r0, 800960e <__swbuf_r+0x12>
 8009606:	6983      	ldr	r3, [r0, #24]
 8009608:	b90b      	cbnz	r3, 800960e <__swbuf_r+0x12>
 800960a:	f7fe fb21 	bl	8007c50 <__sinit>
 800960e:	4b21      	ldr	r3, [pc, #132]	; (8009694 <__swbuf_r+0x98>)
 8009610:	429c      	cmp	r4, r3
 8009612:	d12b      	bne.n	800966c <__swbuf_r+0x70>
 8009614:	686c      	ldr	r4, [r5, #4]
 8009616:	69a3      	ldr	r3, [r4, #24]
 8009618:	60a3      	str	r3, [r4, #8]
 800961a:	89a3      	ldrh	r3, [r4, #12]
 800961c:	071a      	lsls	r2, r3, #28
 800961e:	d52f      	bpl.n	8009680 <__swbuf_r+0x84>
 8009620:	6923      	ldr	r3, [r4, #16]
 8009622:	b36b      	cbz	r3, 8009680 <__swbuf_r+0x84>
 8009624:	6923      	ldr	r3, [r4, #16]
 8009626:	6820      	ldr	r0, [r4, #0]
 8009628:	1ac0      	subs	r0, r0, r3
 800962a:	6963      	ldr	r3, [r4, #20]
 800962c:	b2f6      	uxtb	r6, r6
 800962e:	4283      	cmp	r3, r0
 8009630:	4637      	mov	r7, r6
 8009632:	dc04      	bgt.n	800963e <__swbuf_r+0x42>
 8009634:	4621      	mov	r1, r4
 8009636:	4628      	mov	r0, r5
 8009638:	f000 f974 	bl	8009924 <_fflush_r>
 800963c:	bb30      	cbnz	r0, 800968c <__swbuf_r+0x90>
 800963e:	68a3      	ldr	r3, [r4, #8]
 8009640:	3b01      	subs	r3, #1
 8009642:	60a3      	str	r3, [r4, #8]
 8009644:	6823      	ldr	r3, [r4, #0]
 8009646:	1c5a      	adds	r2, r3, #1
 8009648:	6022      	str	r2, [r4, #0]
 800964a:	701e      	strb	r6, [r3, #0]
 800964c:	6963      	ldr	r3, [r4, #20]
 800964e:	3001      	adds	r0, #1
 8009650:	4283      	cmp	r3, r0
 8009652:	d004      	beq.n	800965e <__swbuf_r+0x62>
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	07db      	lsls	r3, r3, #31
 8009658:	d506      	bpl.n	8009668 <__swbuf_r+0x6c>
 800965a:	2e0a      	cmp	r6, #10
 800965c:	d104      	bne.n	8009668 <__swbuf_r+0x6c>
 800965e:	4621      	mov	r1, r4
 8009660:	4628      	mov	r0, r5
 8009662:	f000 f95f 	bl	8009924 <_fflush_r>
 8009666:	b988      	cbnz	r0, 800968c <__swbuf_r+0x90>
 8009668:	4638      	mov	r0, r7
 800966a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800966c:	4b0a      	ldr	r3, [pc, #40]	; (8009698 <__swbuf_r+0x9c>)
 800966e:	429c      	cmp	r4, r3
 8009670:	d101      	bne.n	8009676 <__swbuf_r+0x7a>
 8009672:	68ac      	ldr	r4, [r5, #8]
 8009674:	e7cf      	b.n	8009616 <__swbuf_r+0x1a>
 8009676:	4b09      	ldr	r3, [pc, #36]	; (800969c <__swbuf_r+0xa0>)
 8009678:	429c      	cmp	r4, r3
 800967a:	bf08      	it	eq
 800967c:	68ec      	ldreq	r4, [r5, #12]
 800967e:	e7ca      	b.n	8009616 <__swbuf_r+0x1a>
 8009680:	4621      	mov	r1, r4
 8009682:	4628      	mov	r0, r5
 8009684:	f000 f82c 	bl	80096e0 <__swsetup_r>
 8009688:	2800      	cmp	r0, #0
 800968a:	d0cb      	beq.n	8009624 <__swbuf_r+0x28>
 800968c:	f04f 37ff 	mov.w	r7, #4294967295
 8009690:	e7ea      	b.n	8009668 <__swbuf_r+0x6c>
 8009692:	bf00      	nop
 8009694:	0801db88 	.word	0x0801db88
 8009698:	0801dba8 	.word	0x0801dba8
 800969c:	0801db68 	.word	0x0801db68

080096a0 <__ascii_wctomb>:
 80096a0:	b149      	cbz	r1, 80096b6 <__ascii_wctomb+0x16>
 80096a2:	2aff      	cmp	r2, #255	; 0xff
 80096a4:	bf85      	ittet	hi
 80096a6:	238a      	movhi	r3, #138	; 0x8a
 80096a8:	6003      	strhi	r3, [r0, #0]
 80096aa:	700a      	strbls	r2, [r1, #0]
 80096ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80096b0:	bf98      	it	ls
 80096b2:	2001      	movls	r0, #1
 80096b4:	4770      	bx	lr
 80096b6:	4608      	mov	r0, r1
 80096b8:	4770      	bx	lr
	...

080096bc <_write_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4d07      	ldr	r5, [pc, #28]	; (80096dc <_write_r+0x20>)
 80096c0:	4604      	mov	r4, r0
 80096c2:	4608      	mov	r0, r1
 80096c4:	4611      	mov	r1, r2
 80096c6:	2200      	movs	r2, #0
 80096c8:	602a      	str	r2, [r5, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	f7f8 f925 	bl	800191a <_write>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d102      	bne.n	80096da <_write_r+0x1e>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	b103      	cbz	r3, 80096da <_write_r+0x1e>
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	20006348 	.word	0x20006348

080096e0 <__swsetup_r>:
 80096e0:	4b32      	ldr	r3, [pc, #200]	; (80097ac <__swsetup_r+0xcc>)
 80096e2:	b570      	push	{r4, r5, r6, lr}
 80096e4:	681d      	ldr	r5, [r3, #0]
 80096e6:	4606      	mov	r6, r0
 80096e8:	460c      	mov	r4, r1
 80096ea:	b125      	cbz	r5, 80096f6 <__swsetup_r+0x16>
 80096ec:	69ab      	ldr	r3, [r5, #24]
 80096ee:	b913      	cbnz	r3, 80096f6 <__swsetup_r+0x16>
 80096f0:	4628      	mov	r0, r5
 80096f2:	f7fe faad 	bl	8007c50 <__sinit>
 80096f6:	4b2e      	ldr	r3, [pc, #184]	; (80097b0 <__swsetup_r+0xd0>)
 80096f8:	429c      	cmp	r4, r3
 80096fa:	d10f      	bne.n	800971c <__swsetup_r+0x3c>
 80096fc:	686c      	ldr	r4, [r5, #4]
 80096fe:	89a3      	ldrh	r3, [r4, #12]
 8009700:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009704:	0719      	lsls	r1, r3, #28
 8009706:	d42c      	bmi.n	8009762 <__swsetup_r+0x82>
 8009708:	06dd      	lsls	r5, r3, #27
 800970a:	d411      	bmi.n	8009730 <__swsetup_r+0x50>
 800970c:	2309      	movs	r3, #9
 800970e:	6033      	str	r3, [r6, #0]
 8009710:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009714:	81a3      	strh	r3, [r4, #12]
 8009716:	f04f 30ff 	mov.w	r0, #4294967295
 800971a:	e03e      	b.n	800979a <__swsetup_r+0xba>
 800971c:	4b25      	ldr	r3, [pc, #148]	; (80097b4 <__swsetup_r+0xd4>)
 800971e:	429c      	cmp	r4, r3
 8009720:	d101      	bne.n	8009726 <__swsetup_r+0x46>
 8009722:	68ac      	ldr	r4, [r5, #8]
 8009724:	e7eb      	b.n	80096fe <__swsetup_r+0x1e>
 8009726:	4b24      	ldr	r3, [pc, #144]	; (80097b8 <__swsetup_r+0xd8>)
 8009728:	429c      	cmp	r4, r3
 800972a:	bf08      	it	eq
 800972c:	68ec      	ldreq	r4, [r5, #12]
 800972e:	e7e6      	b.n	80096fe <__swsetup_r+0x1e>
 8009730:	0758      	lsls	r0, r3, #29
 8009732:	d512      	bpl.n	800975a <__swsetup_r+0x7a>
 8009734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009736:	b141      	cbz	r1, 800974a <__swsetup_r+0x6a>
 8009738:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800973c:	4299      	cmp	r1, r3
 800973e:	d002      	beq.n	8009746 <__swsetup_r+0x66>
 8009740:	4630      	mov	r0, r6
 8009742:	f7ff fb8b 	bl	8008e5c <_free_r>
 8009746:	2300      	movs	r3, #0
 8009748:	6363      	str	r3, [r4, #52]	; 0x34
 800974a:	89a3      	ldrh	r3, [r4, #12]
 800974c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009750:	81a3      	strh	r3, [r4, #12]
 8009752:	2300      	movs	r3, #0
 8009754:	6063      	str	r3, [r4, #4]
 8009756:	6923      	ldr	r3, [r4, #16]
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	89a3      	ldrh	r3, [r4, #12]
 800975c:	f043 0308 	orr.w	r3, r3, #8
 8009760:	81a3      	strh	r3, [r4, #12]
 8009762:	6923      	ldr	r3, [r4, #16]
 8009764:	b94b      	cbnz	r3, 800977a <__swsetup_r+0x9a>
 8009766:	89a3      	ldrh	r3, [r4, #12]
 8009768:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800976c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009770:	d003      	beq.n	800977a <__swsetup_r+0x9a>
 8009772:	4621      	mov	r1, r4
 8009774:	4630      	mov	r0, r6
 8009776:	f000 f959 	bl	8009a2c <__smakebuf_r>
 800977a:	89a0      	ldrh	r0, [r4, #12]
 800977c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009780:	f010 0301 	ands.w	r3, r0, #1
 8009784:	d00a      	beq.n	800979c <__swsetup_r+0xbc>
 8009786:	2300      	movs	r3, #0
 8009788:	60a3      	str	r3, [r4, #8]
 800978a:	6963      	ldr	r3, [r4, #20]
 800978c:	425b      	negs	r3, r3
 800978e:	61a3      	str	r3, [r4, #24]
 8009790:	6923      	ldr	r3, [r4, #16]
 8009792:	b943      	cbnz	r3, 80097a6 <__swsetup_r+0xc6>
 8009794:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009798:	d1ba      	bne.n	8009710 <__swsetup_r+0x30>
 800979a:	bd70      	pop	{r4, r5, r6, pc}
 800979c:	0781      	lsls	r1, r0, #30
 800979e:	bf58      	it	pl
 80097a0:	6963      	ldrpl	r3, [r4, #20]
 80097a2:	60a3      	str	r3, [r4, #8]
 80097a4:	e7f4      	b.n	8009790 <__swsetup_r+0xb0>
 80097a6:	2000      	movs	r0, #0
 80097a8:	e7f7      	b.n	800979a <__swsetup_r+0xba>
 80097aa:	bf00      	nop
 80097ac:	2000000c 	.word	0x2000000c
 80097b0:	0801db88 	.word	0x0801db88
 80097b4:	0801dba8 	.word	0x0801dba8
 80097b8:	0801db68 	.word	0x0801db68

080097bc <__assert_func>:
 80097bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097be:	4614      	mov	r4, r2
 80097c0:	461a      	mov	r2, r3
 80097c2:	4b09      	ldr	r3, [pc, #36]	; (80097e8 <__assert_func+0x2c>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4605      	mov	r5, r0
 80097c8:	68d8      	ldr	r0, [r3, #12]
 80097ca:	b14c      	cbz	r4, 80097e0 <__assert_func+0x24>
 80097cc:	4b07      	ldr	r3, [pc, #28]	; (80097ec <__assert_func+0x30>)
 80097ce:	9100      	str	r1, [sp, #0]
 80097d0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097d4:	4906      	ldr	r1, [pc, #24]	; (80097f0 <__assert_func+0x34>)
 80097d6:	462b      	mov	r3, r5
 80097d8:	f000 f8e0 	bl	800999c <fiprintf>
 80097dc:	f000 f9c4 	bl	8009b68 <abort>
 80097e0:	4b04      	ldr	r3, [pc, #16]	; (80097f4 <__assert_func+0x38>)
 80097e2:	461c      	mov	r4, r3
 80097e4:	e7f3      	b.n	80097ce <__assert_func+0x12>
 80097e6:	bf00      	nop
 80097e8:	2000000c 	.word	0x2000000c
 80097ec:	0801ddb5 	.word	0x0801ddb5
 80097f0:	0801ddc2 	.word	0x0801ddc2
 80097f4:	0801ddf0 	.word	0x0801ddf0

080097f8 <_close_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	4d06      	ldr	r5, [pc, #24]	; (8009814 <_close_r+0x1c>)
 80097fc:	2300      	movs	r3, #0
 80097fe:	4604      	mov	r4, r0
 8009800:	4608      	mov	r0, r1
 8009802:	602b      	str	r3, [r5, #0]
 8009804:	f7f8 f8a5 	bl	8001952 <_close>
 8009808:	1c43      	adds	r3, r0, #1
 800980a:	d102      	bne.n	8009812 <_close_r+0x1a>
 800980c:	682b      	ldr	r3, [r5, #0]
 800980e:	b103      	cbz	r3, 8009812 <_close_r+0x1a>
 8009810:	6023      	str	r3, [r4, #0]
 8009812:	bd38      	pop	{r3, r4, r5, pc}
 8009814:	20006348 	.word	0x20006348

08009818 <__sflush_r>:
 8009818:	898a      	ldrh	r2, [r1, #12]
 800981a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800981e:	4605      	mov	r5, r0
 8009820:	0710      	lsls	r0, r2, #28
 8009822:	460c      	mov	r4, r1
 8009824:	d458      	bmi.n	80098d8 <__sflush_r+0xc0>
 8009826:	684b      	ldr	r3, [r1, #4]
 8009828:	2b00      	cmp	r3, #0
 800982a:	dc05      	bgt.n	8009838 <__sflush_r+0x20>
 800982c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800982e:	2b00      	cmp	r3, #0
 8009830:	dc02      	bgt.n	8009838 <__sflush_r+0x20>
 8009832:	2000      	movs	r0, #0
 8009834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800983a:	2e00      	cmp	r6, #0
 800983c:	d0f9      	beq.n	8009832 <__sflush_r+0x1a>
 800983e:	2300      	movs	r3, #0
 8009840:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009844:	682f      	ldr	r7, [r5, #0]
 8009846:	602b      	str	r3, [r5, #0]
 8009848:	d032      	beq.n	80098b0 <__sflush_r+0x98>
 800984a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800984c:	89a3      	ldrh	r3, [r4, #12]
 800984e:	075a      	lsls	r2, r3, #29
 8009850:	d505      	bpl.n	800985e <__sflush_r+0x46>
 8009852:	6863      	ldr	r3, [r4, #4]
 8009854:	1ac0      	subs	r0, r0, r3
 8009856:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009858:	b10b      	cbz	r3, 800985e <__sflush_r+0x46>
 800985a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800985c:	1ac0      	subs	r0, r0, r3
 800985e:	2300      	movs	r3, #0
 8009860:	4602      	mov	r2, r0
 8009862:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009864:	6a21      	ldr	r1, [r4, #32]
 8009866:	4628      	mov	r0, r5
 8009868:	47b0      	blx	r6
 800986a:	1c43      	adds	r3, r0, #1
 800986c:	89a3      	ldrh	r3, [r4, #12]
 800986e:	d106      	bne.n	800987e <__sflush_r+0x66>
 8009870:	6829      	ldr	r1, [r5, #0]
 8009872:	291d      	cmp	r1, #29
 8009874:	d82c      	bhi.n	80098d0 <__sflush_r+0xb8>
 8009876:	4a2a      	ldr	r2, [pc, #168]	; (8009920 <__sflush_r+0x108>)
 8009878:	40ca      	lsrs	r2, r1
 800987a:	07d6      	lsls	r6, r2, #31
 800987c:	d528      	bpl.n	80098d0 <__sflush_r+0xb8>
 800987e:	2200      	movs	r2, #0
 8009880:	6062      	str	r2, [r4, #4]
 8009882:	04d9      	lsls	r1, r3, #19
 8009884:	6922      	ldr	r2, [r4, #16]
 8009886:	6022      	str	r2, [r4, #0]
 8009888:	d504      	bpl.n	8009894 <__sflush_r+0x7c>
 800988a:	1c42      	adds	r2, r0, #1
 800988c:	d101      	bne.n	8009892 <__sflush_r+0x7a>
 800988e:	682b      	ldr	r3, [r5, #0]
 8009890:	b903      	cbnz	r3, 8009894 <__sflush_r+0x7c>
 8009892:	6560      	str	r0, [r4, #84]	; 0x54
 8009894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009896:	602f      	str	r7, [r5, #0]
 8009898:	2900      	cmp	r1, #0
 800989a:	d0ca      	beq.n	8009832 <__sflush_r+0x1a>
 800989c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098a0:	4299      	cmp	r1, r3
 80098a2:	d002      	beq.n	80098aa <__sflush_r+0x92>
 80098a4:	4628      	mov	r0, r5
 80098a6:	f7ff fad9 	bl	8008e5c <_free_r>
 80098aa:	2000      	movs	r0, #0
 80098ac:	6360      	str	r0, [r4, #52]	; 0x34
 80098ae:	e7c1      	b.n	8009834 <__sflush_r+0x1c>
 80098b0:	6a21      	ldr	r1, [r4, #32]
 80098b2:	2301      	movs	r3, #1
 80098b4:	4628      	mov	r0, r5
 80098b6:	47b0      	blx	r6
 80098b8:	1c41      	adds	r1, r0, #1
 80098ba:	d1c7      	bne.n	800984c <__sflush_r+0x34>
 80098bc:	682b      	ldr	r3, [r5, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d0c4      	beq.n	800984c <__sflush_r+0x34>
 80098c2:	2b1d      	cmp	r3, #29
 80098c4:	d001      	beq.n	80098ca <__sflush_r+0xb2>
 80098c6:	2b16      	cmp	r3, #22
 80098c8:	d101      	bne.n	80098ce <__sflush_r+0xb6>
 80098ca:	602f      	str	r7, [r5, #0]
 80098cc:	e7b1      	b.n	8009832 <__sflush_r+0x1a>
 80098ce:	89a3      	ldrh	r3, [r4, #12]
 80098d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098d4:	81a3      	strh	r3, [r4, #12]
 80098d6:	e7ad      	b.n	8009834 <__sflush_r+0x1c>
 80098d8:	690f      	ldr	r7, [r1, #16]
 80098da:	2f00      	cmp	r7, #0
 80098dc:	d0a9      	beq.n	8009832 <__sflush_r+0x1a>
 80098de:	0793      	lsls	r3, r2, #30
 80098e0:	680e      	ldr	r6, [r1, #0]
 80098e2:	bf08      	it	eq
 80098e4:	694b      	ldreq	r3, [r1, #20]
 80098e6:	600f      	str	r7, [r1, #0]
 80098e8:	bf18      	it	ne
 80098ea:	2300      	movne	r3, #0
 80098ec:	eba6 0807 	sub.w	r8, r6, r7
 80098f0:	608b      	str	r3, [r1, #8]
 80098f2:	f1b8 0f00 	cmp.w	r8, #0
 80098f6:	dd9c      	ble.n	8009832 <__sflush_r+0x1a>
 80098f8:	6a21      	ldr	r1, [r4, #32]
 80098fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098fc:	4643      	mov	r3, r8
 80098fe:	463a      	mov	r2, r7
 8009900:	4628      	mov	r0, r5
 8009902:	47b0      	blx	r6
 8009904:	2800      	cmp	r0, #0
 8009906:	dc06      	bgt.n	8009916 <__sflush_r+0xfe>
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800990e:	81a3      	strh	r3, [r4, #12]
 8009910:	f04f 30ff 	mov.w	r0, #4294967295
 8009914:	e78e      	b.n	8009834 <__sflush_r+0x1c>
 8009916:	4407      	add	r7, r0
 8009918:	eba8 0800 	sub.w	r8, r8, r0
 800991c:	e7e9      	b.n	80098f2 <__sflush_r+0xda>
 800991e:	bf00      	nop
 8009920:	20400001 	.word	0x20400001

08009924 <_fflush_r>:
 8009924:	b538      	push	{r3, r4, r5, lr}
 8009926:	690b      	ldr	r3, [r1, #16]
 8009928:	4605      	mov	r5, r0
 800992a:	460c      	mov	r4, r1
 800992c:	b913      	cbnz	r3, 8009934 <_fflush_r+0x10>
 800992e:	2500      	movs	r5, #0
 8009930:	4628      	mov	r0, r5
 8009932:	bd38      	pop	{r3, r4, r5, pc}
 8009934:	b118      	cbz	r0, 800993e <_fflush_r+0x1a>
 8009936:	6983      	ldr	r3, [r0, #24]
 8009938:	b90b      	cbnz	r3, 800993e <_fflush_r+0x1a>
 800993a:	f7fe f989 	bl	8007c50 <__sinit>
 800993e:	4b14      	ldr	r3, [pc, #80]	; (8009990 <_fflush_r+0x6c>)
 8009940:	429c      	cmp	r4, r3
 8009942:	d11b      	bne.n	800997c <_fflush_r+0x58>
 8009944:	686c      	ldr	r4, [r5, #4]
 8009946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d0ef      	beq.n	800992e <_fflush_r+0xa>
 800994e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009950:	07d0      	lsls	r0, r2, #31
 8009952:	d404      	bmi.n	800995e <_fflush_r+0x3a>
 8009954:	0599      	lsls	r1, r3, #22
 8009956:	d402      	bmi.n	800995e <_fflush_r+0x3a>
 8009958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800995a:	f7fe fd8a 	bl	8008472 <__retarget_lock_acquire_recursive>
 800995e:	4628      	mov	r0, r5
 8009960:	4621      	mov	r1, r4
 8009962:	f7ff ff59 	bl	8009818 <__sflush_r>
 8009966:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009968:	07da      	lsls	r2, r3, #31
 800996a:	4605      	mov	r5, r0
 800996c:	d4e0      	bmi.n	8009930 <_fflush_r+0xc>
 800996e:	89a3      	ldrh	r3, [r4, #12]
 8009970:	059b      	lsls	r3, r3, #22
 8009972:	d4dd      	bmi.n	8009930 <_fflush_r+0xc>
 8009974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009976:	f7fe fd7d 	bl	8008474 <__retarget_lock_release_recursive>
 800997a:	e7d9      	b.n	8009930 <_fflush_r+0xc>
 800997c:	4b05      	ldr	r3, [pc, #20]	; (8009994 <_fflush_r+0x70>)
 800997e:	429c      	cmp	r4, r3
 8009980:	d101      	bne.n	8009986 <_fflush_r+0x62>
 8009982:	68ac      	ldr	r4, [r5, #8]
 8009984:	e7df      	b.n	8009946 <_fflush_r+0x22>
 8009986:	4b04      	ldr	r3, [pc, #16]	; (8009998 <_fflush_r+0x74>)
 8009988:	429c      	cmp	r4, r3
 800998a:	bf08      	it	eq
 800998c:	68ec      	ldreq	r4, [r5, #12]
 800998e:	e7da      	b.n	8009946 <_fflush_r+0x22>
 8009990:	0801db88 	.word	0x0801db88
 8009994:	0801dba8 	.word	0x0801dba8
 8009998:	0801db68 	.word	0x0801db68

0800999c <fiprintf>:
 800999c:	b40e      	push	{r1, r2, r3}
 800999e:	b503      	push	{r0, r1, lr}
 80099a0:	4601      	mov	r1, r0
 80099a2:	ab03      	add	r3, sp, #12
 80099a4:	4805      	ldr	r0, [pc, #20]	; (80099bc <fiprintf+0x20>)
 80099a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80099aa:	6800      	ldr	r0, [r0, #0]
 80099ac:	9301      	str	r3, [sp, #4]
 80099ae:	f7ff fc85 	bl	80092bc <_vfiprintf_r>
 80099b2:	b002      	add	sp, #8
 80099b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80099b8:	b003      	add	sp, #12
 80099ba:	4770      	bx	lr
 80099bc:	2000000c 	.word	0x2000000c

080099c0 <_lseek_r>:
 80099c0:	b538      	push	{r3, r4, r5, lr}
 80099c2:	4d07      	ldr	r5, [pc, #28]	; (80099e0 <_lseek_r+0x20>)
 80099c4:	4604      	mov	r4, r0
 80099c6:	4608      	mov	r0, r1
 80099c8:	4611      	mov	r1, r2
 80099ca:	2200      	movs	r2, #0
 80099cc:	602a      	str	r2, [r5, #0]
 80099ce:	461a      	mov	r2, r3
 80099d0:	f7f7 ffe6 	bl	80019a0 <_lseek>
 80099d4:	1c43      	adds	r3, r0, #1
 80099d6:	d102      	bne.n	80099de <_lseek_r+0x1e>
 80099d8:	682b      	ldr	r3, [r5, #0]
 80099da:	b103      	cbz	r3, 80099de <_lseek_r+0x1e>
 80099dc:	6023      	str	r3, [r4, #0]
 80099de:	bd38      	pop	{r3, r4, r5, pc}
 80099e0:	20006348 	.word	0x20006348

080099e4 <__swhatbuf_r>:
 80099e4:	b570      	push	{r4, r5, r6, lr}
 80099e6:	460e      	mov	r6, r1
 80099e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099ec:	2900      	cmp	r1, #0
 80099ee:	b096      	sub	sp, #88	; 0x58
 80099f0:	4614      	mov	r4, r2
 80099f2:	461d      	mov	r5, r3
 80099f4:	da07      	bge.n	8009a06 <__swhatbuf_r+0x22>
 80099f6:	2300      	movs	r3, #0
 80099f8:	602b      	str	r3, [r5, #0]
 80099fa:	89b3      	ldrh	r3, [r6, #12]
 80099fc:	061a      	lsls	r2, r3, #24
 80099fe:	d410      	bmi.n	8009a22 <__swhatbuf_r+0x3e>
 8009a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a04:	e00e      	b.n	8009a24 <__swhatbuf_r+0x40>
 8009a06:	466a      	mov	r2, sp
 8009a08:	f000 f8b6 	bl	8009b78 <_fstat_r>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	dbf2      	blt.n	80099f6 <__swhatbuf_r+0x12>
 8009a10:	9a01      	ldr	r2, [sp, #4]
 8009a12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009a16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009a1a:	425a      	negs	r2, r3
 8009a1c:	415a      	adcs	r2, r3
 8009a1e:	602a      	str	r2, [r5, #0]
 8009a20:	e7ee      	b.n	8009a00 <__swhatbuf_r+0x1c>
 8009a22:	2340      	movs	r3, #64	; 0x40
 8009a24:	2000      	movs	r0, #0
 8009a26:	6023      	str	r3, [r4, #0]
 8009a28:	b016      	add	sp, #88	; 0x58
 8009a2a:	bd70      	pop	{r4, r5, r6, pc}

08009a2c <__smakebuf_r>:
 8009a2c:	898b      	ldrh	r3, [r1, #12]
 8009a2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009a30:	079d      	lsls	r5, r3, #30
 8009a32:	4606      	mov	r6, r0
 8009a34:	460c      	mov	r4, r1
 8009a36:	d507      	bpl.n	8009a48 <__smakebuf_r+0x1c>
 8009a38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a3c:	6023      	str	r3, [r4, #0]
 8009a3e:	6123      	str	r3, [r4, #16]
 8009a40:	2301      	movs	r3, #1
 8009a42:	6163      	str	r3, [r4, #20]
 8009a44:	b002      	add	sp, #8
 8009a46:	bd70      	pop	{r4, r5, r6, pc}
 8009a48:	ab01      	add	r3, sp, #4
 8009a4a:	466a      	mov	r2, sp
 8009a4c:	f7ff ffca 	bl	80099e4 <__swhatbuf_r>
 8009a50:	9900      	ldr	r1, [sp, #0]
 8009a52:	4605      	mov	r5, r0
 8009a54:	4630      	mov	r0, r6
 8009a56:	f7ff fa51 	bl	8008efc <_malloc_r>
 8009a5a:	b948      	cbnz	r0, 8009a70 <__smakebuf_r+0x44>
 8009a5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a60:	059a      	lsls	r2, r3, #22
 8009a62:	d4ef      	bmi.n	8009a44 <__smakebuf_r+0x18>
 8009a64:	f023 0303 	bic.w	r3, r3, #3
 8009a68:	f043 0302 	orr.w	r3, r3, #2
 8009a6c:	81a3      	strh	r3, [r4, #12]
 8009a6e:	e7e3      	b.n	8009a38 <__smakebuf_r+0xc>
 8009a70:	4b0d      	ldr	r3, [pc, #52]	; (8009aa8 <__smakebuf_r+0x7c>)
 8009a72:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	6020      	str	r0, [r4, #0]
 8009a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a7c:	81a3      	strh	r3, [r4, #12]
 8009a7e:	9b00      	ldr	r3, [sp, #0]
 8009a80:	6163      	str	r3, [r4, #20]
 8009a82:	9b01      	ldr	r3, [sp, #4]
 8009a84:	6120      	str	r0, [r4, #16]
 8009a86:	b15b      	cbz	r3, 8009aa0 <__smakebuf_r+0x74>
 8009a88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a8c:	4630      	mov	r0, r6
 8009a8e:	f000 f885 	bl	8009b9c <_isatty_r>
 8009a92:	b128      	cbz	r0, 8009aa0 <__smakebuf_r+0x74>
 8009a94:	89a3      	ldrh	r3, [r4, #12]
 8009a96:	f023 0303 	bic.w	r3, r3, #3
 8009a9a:	f043 0301 	orr.w	r3, r3, #1
 8009a9e:	81a3      	strh	r3, [r4, #12]
 8009aa0:	89a0      	ldrh	r0, [r4, #12]
 8009aa2:	4305      	orrs	r5, r0
 8009aa4:	81a5      	strh	r5, [r4, #12]
 8009aa6:	e7cd      	b.n	8009a44 <__smakebuf_r+0x18>
 8009aa8:	08007be9 	.word	0x08007be9

08009aac <memmove>:
 8009aac:	4288      	cmp	r0, r1
 8009aae:	b510      	push	{r4, lr}
 8009ab0:	eb01 0402 	add.w	r4, r1, r2
 8009ab4:	d902      	bls.n	8009abc <memmove+0x10>
 8009ab6:	4284      	cmp	r4, r0
 8009ab8:	4623      	mov	r3, r4
 8009aba:	d807      	bhi.n	8009acc <memmove+0x20>
 8009abc:	1e43      	subs	r3, r0, #1
 8009abe:	42a1      	cmp	r1, r4
 8009ac0:	d008      	beq.n	8009ad4 <memmove+0x28>
 8009ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009aca:	e7f8      	b.n	8009abe <memmove+0x12>
 8009acc:	4402      	add	r2, r0
 8009ace:	4601      	mov	r1, r0
 8009ad0:	428a      	cmp	r2, r1
 8009ad2:	d100      	bne.n	8009ad6 <memmove+0x2a>
 8009ad4:	bd10      	pop	{r4, pc}
 8009ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ade:	e7f7      	b.n	8009ad0 <memmove+0x24>

08009ae0 <__malloc_lock>:
 8009ae0:	4801      	ldr	r0, [pc, #4]	; (8009ae8 <__malloc_lock+0x8>)
 8009ae2:	f7fe bcc6 	b.w	8008472 <__retarget_lock_acquire_recursive>
 8009ae6:	bf00      	nop
 8009ae8:	20006340 	.word	0x20006340

08009aec <__malloc_unlock>:
 8009aec:	4801      	ldr	r0, [pc, #4]	; (8009af4 <__malloc_unlock+0x8>)
 8009aee:	f7fe bcc1 	b.w	8008474 <__retarget_lock_release_recursive>
 8009af2:	bf00      	nop
 8009af4:	20006340 	.word	0x20006340

08009af8 <_realloc_r>:
 8009af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afa:	4607      	mov	r7, r0
 8009afc:	4614      	mov	r4, r2
 8009afe:	460e      	mov	r6, r1
 8009b00:	b921      	cbnz	r1, 8009b0c <_realloc_r+0x14>
 8009b02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009b06:	4611      	mov	r1, r2
 8009b08:	f7ff b9f8 	b.w	8008efc <_malloc_r>
 8009b0c:	b922      	cbnz	r2, 8009b18 <_realloc_r+0x20>
 8009b0e:	f7ff f9a5 	bl	8008e5c <_free_r>
 8009b12:	4625      	mov	r5, r4
 8009b14:	4628      	mov	r0, r5
 8009b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b18:	f000 f850 	bl	8009bbc <_malloc_usable_size_r>
 8009b1c:	42a0      	cmp	r0, r4
 8009b1e:	d20f      	bcs.n	8009b40 <_realloc_r+0x48>
 8009b20:	4621      	mov	r1, r4
 8009b22:	4638      	mov	r0, r7
 8009b24:	f7ff f9ea 	bl	8008efc <_malloc_r>
 8009b28:	4605      	mov	r5, r0
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d0f2      	beq.n	8009b14 <_realloc_r+0x1c>
 8009b2e:	4631      	mov	r1, r6
 8009b30:	4622      	mov	r2, r4
 8009b32:	f7fe fcbb 	bl	80084ac <memcpy>
 8009b36:	4631      	mov	r1, r6
 8009b38:	4638      	mov	r0, r7
 8009b3a:	f7ff f98f 	bl	8008e5c <_free_r>
 8009b3e:	e7e9      	b.n	8009b14 <_realloc_r+0x1c>
 8009b40:	4635      	mov	r5, r6
 8009b42:	e7e7      	b.n	8009b14 <_realloc_r+0x1c>

08009b44 <_read_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4d07      	ldr	r5, [pc, #28]	; (8009b64 <_read_r+0x20>)
 8009b48:	4604      	mov	r4, r0
 8009b4a:	4608      	mov	r0, r1
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	2200      	movs	r2, #0
 8009b50:	602a      	str	r2, [r5, #0]
 8009b52:	461a      	mov	r2, r3
 8009b54:	f7f7 fec4 	bl	80018e0 <_read>
 8009b58:	1c43      	adds	r3, r0, #1
 8009b5a:	d102      	bne.n	8009b62 <_read_r+0x1e>
 8009b5c:	682b      	ldr	r3, [r5, #0]
 8009b5e:	b103      	cbz	r3, 8009b62 <_read_r+0x1e>
 8009b60:	6023      	str	r3, [r4, #0]
 8009b62:	bd38      	pop	{r3, r4, r5, pc}
 8009b64:	20006348 	.word	0x20006348

08009b68 <abort>:
 8009b68:	b508      	push	{r3, lr}
 8009b6a:	2006      	movs	r0, #6
 8009b6c:	f000 f856 	bl	8009c1c <raise>
 8009b70:	2001      	movs	r0, #1
 8009b72:	f7f7 feab 	bl	80018cc <_exit>
	...

08009b78 <_fstat_r>:
 8009b78:	b538      	push	{r3, r4, r5, lr}
 8009b7a:	4d07      	ldr	r5, [pc, #28]	; (8009b98 <_fstat_r+0x20>)
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	4604      	mov	r4, r0
 8009b80:	4608      	mov	r0, r1
 8009b82:	4611      	mov	r1, r2
 8009b84:	602b      	str	r3, [r5, #0]
 8009b86:	f7f7 fef0 	bl	800196a <_fstat>
 8009b8a:	1c43      	adds	r3, r0, #1
 8009b8c:	d102      	bne.n	8009b94 <_fstat_r+0x1c>
 8009b8e:	682b      	ldr	r3, [r5, #0]
 8009b90:	b103      	cbz	r3, 8009b94 <_fstat_r+0x1c>
 8009b92:	6023      	str	r3, [r4, #0]
 8009b94:	bd38      	pop	{r3, r4, r5, pc}
 8009b96:	bf00      	nop
 8009b98:	20006348 	.word	0x20006348

08009b9c <_isatty_r>:
 8009b9c:	b538      	push	{r3, r4, r5, lr}
 8009b9e:	4d06      	ldr	r5, [pc, #24]	; (8009bb8 <_isatty_r+0x1c>)
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	4604      	mov	r4, r0
 8009ba4:	4608      	mov	r0, r1
 8009ba6:	602b      	str	r3, [r5, #0]
 8009ba8:	f7f7 feef 	bl	800198a <_isatty>
 8009bac:	1c43      	adds	r3, r0, #1
 8009bae:	d102      	bne.n	8009bb6 <_isatty_r+0x1a>
 8009bb0:	682b      	ldr	r3, [r5, #0]
 8009bb2:	b103      	cbz	r3, 8009bb6 <_isatty_r+0x1a>
 8009bb4:	6023      	str	r3, [r4, #0]
 8009bb6:	bd38      	pop	{r3, r4, r5, pc}
 8009bb8:	20006348 	.word	0x20006348

08009bbc <_malloc_usable_size_r>:
 8009bbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bc0:	1f18      	subs	r0, r3, #4
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	bfbc      	itt	lt
 8009bc6:	580b      	ldrlt	r3, [r1, r0]
 8009bc8:	18c0      	addlt	r0, r0, r3
 8009bca:	4770      	bx	lr

08009bcc <_raise_r>:
 8009bcc:	291f      	cmp	r1, #31
 8009bce:	b538      	push	{r3, r4, r5, lr}
 8009bd0:	4604      	mov	r4, r0
 8009bd2:	460d      	mov	r5, r1
 8009bd4:	d904      	bls.n	8009be0 <_raise_r+0x14>
 8009bd6:	2316      	movs	r3, #22
 8009bd8:	6003      	str	r3, [r0, #0]
 8009bda:	f04f 30ff 	mov.w	r0, #4294967295
 8009bde:	bd38      	pop	{r3, r4, r5, pc}
 8009be0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009be2:	b112      	cbz	r2, 8009bea <_raise_r+0x1e>
 8009be4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009be8:	b94b      	cbnz	r3, 8009bfe <_raise_r+0x32>
 8009bea:	4620      	mov	r0, r4
 8009bec:	f000 f830 	bl	8009c50 <_getpid_r>
 8009bf0:	462a      	mov	r2, r5
 8009bf2:	4601      	mov	r1, r0
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bfa:	f000 b817 	b.w	8009c2c <_kill_r>
 8009bfe:	2b01      	cmp	r3, #1
 8009c00:	d00a      	beq.n	8009c18 <_raise_r+0x4c>
 8009c02:	1c59      	adds	r1, r3, #1
 8009c04:	d103      	bne.n	8009c0e <_raise_r+0x42>
 8009c06:	2316      	movs	r3, #22
 8009c08:	6003      	str	r3, [r0, #0]
 8009c0a:	2001      	movs	r0, #1
 8009c0c:	e7e7      	b.n	8009bde <_raise_r+0x12>
 8009c0e:	2400      	movs	r4, #0
 8009c10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c14:	4628      	mov	r0, r5
 8009c16:	4798      	blx	r3
 8009c18:	2000      	movs	r0, #0
 8009c1a:	e7e0      	b.n	8009bde <_raise_r+0x12>

08009c1c <raise>:
 8009c1c:	4b02      	ldr	r3, [pc, #8]	; (8009c28 <raise+0xc>)
 8009c1e:	4601      	mov	r1, r0
 8009c20:	6818      	ldr	r0, [r3, #0]
 8009c22:	f7ff bfd3 	b.w	8009bcc <_raise_r>
 8009c26:	bf00      	nop
 8009c28:	2000000c 	.word	0x2000000c

08009c2c <_kill_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4d07      	ldr	r5, [pc, #28]	; (8009c4c <_kill_r+0x20>)
 8009c30:	2300      	movs	r3, #0
 8009c32:	4604      	mov	r4, r0
 8009c34:	4608      	mov	r0, r1
 8009c36:	4611      	mov	r1, r2
 8009c38:	602b      	str	r3, [r5, #0]
 8009c3a:	f7f7 fe37 	bl	80018ac <_kill>
 8009c3e:	1c43      	adds	r3, r0, #1
 8009c40:	d102      	bne.n	8009c48 <_kill_r+0x1c>
 8009c42:	682b      	ldr	r3, [r5, #0]
 8009c44:	b103      	cbz	r3, 8009c48 <_kill_r+0x1c>
 8009c46:	6023      	str	r3, [r4, #0]
 8009c48:	bd38      	pop	{r3, r4, r5, pc}
 8009c4a:	bf00      	nop
 8009c4c:	20006348 	.word	0x20006348

08009c50 <_getpid_r>:
 8009c50:	f7f7 be24 	b.w	800189c <_getpid>

08009c54 <sqrtf>:
 8009c54:	b508      	push	{r3, lr}
 8009c56:	ed2d 8b02 	vpush	{d8}
 8009c5a:	eeb0 8a40 	vmov.f32	s16, s0
 8009c5e:	f000 f81f 	bl	8009ca0 <__ieee754_sqrtf>
 8009c62:	4b0d      	ldr	r3, [pc, #52]	; (8009c98 <sqrtf+0x44>)
 8009c64:	f993 3000 	ldrsb.w	r3, [r3]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	d011      	beq.n	8009c90 <sqrtf+0x3c>
 8009c6c:	eeb4 8a48 	vcmp.f32	s16, s16
 8009c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c74:	d60c      	bvs.n	8009c90 <sqrtf+0x3c>
 8009c76:	eddf 8a09 	vldr	s17, [pc, #36]	; 8009c9c <sqrtf+0x48>
 8009c7a:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8009c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c82:	d505      	bpl.n	8009c90 <sqrtf+0x3c>
 8009c84:	f7fb fb74 	bl	8005370 <__errno>
 8009c88:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009c8c:	2321      	movs	r3, #33	; 0x21
 8009c8e:	6003      	str	r3, [r0, #0]
 8009c90:	ecbd 8b02 	vpop	{d8}
 8009c94:	bd08      	pop	{r3, pc}
 8009c96:	bf00      	nop
 8009c98:	200001e0 	.word	0x200001e0
 8009c9c:	00000000 	.word	0x00000000

08009ca0 <__ieee754_sqrtf>:
 8009ca0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009ca4:	4770      	bx	lr
	...

08009ca8 <_init>:
 8009ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009caa:	bf00      	nop
 8009cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cae:	bc08      	pop	{r3}
 8009cb0:	469e      	mov	lr, r3
 8009cb2:	4770      	bx	lr

08009cb4 <_fini>:
 8009cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb6:	bf00      	nop
 8009cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cba:	bc08      	pop	{r3}
 8009cbc:	469e      	mov	lr, r3
 8009cbe:	4770      	bx	lr
