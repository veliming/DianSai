
BDS5_OSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010490  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004cf4  08010620  08010620  00020620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015314  08015314  000306fc  2**0
                  CONTENTS
  4 .ARM          00000008  08015314  08015314  00025314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801531c  0801531c  000306fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801531c  0801531c  0002531c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015320  08015320  00025320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006fc  20000000  08015324  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000095c  200006fc  08015a20  000306fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001058  08015a20  00031058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000306fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183c5  00000000  00000000  0003072c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003647  00000000  00000000  00048af1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  0004c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  0004d488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024db6  00000000  00000000  0004e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c65  00000000  00000000  00073416  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d328f  00000000  00000000  0008b07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015e30a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000656c  00000000  00000000  0015e360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200006fc 	.word	0x200006fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010608 	.word	0x08010608

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000700 	.word	0x20000700
 80001cc:	08010608 	.word	0x08010608

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	607b      	str	r3, [r7, #4]
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <MX_DMA_Init+0x5c>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a13      	ldr	r2, [pc, #76]	; (8001048 <MX_DMA_Init+0x5c>)
 8000ffc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b11      	ldr	r3, [pc, #68]	; (8001048 <MX_DMA_Init+0x5c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	200b      	movs	r0, #11
 8001014:	f007 fa0b 	bl	800842e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001018:	200b      	movs	r0, #11
 800101a:	f007 fa24 	bl	8008466 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800101e:	2200      	movs	r2, #0
 8001020:	2100      	movs	r1, #0
 8001022:	2010      	movs	r0, #16
 8001024:	f007 fa03 	bl	800842e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001028:	2010      	movs	r0, #16
 800102a:	f007 fa1c 	bl	8008466 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800102e:	2200      	movs	r2, #0
 8001030:	2100      	movs	r1, #0
 8001032:	2011      	movs	r0, #17
 8001034:	f007 f9fb 	bl	800842e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001038:	2011      	movs	r0, #17
 800103a:	f007 fa14 	bl	8008466 <HAL_NVIC_EnableIRQ>

}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800

0800104c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001052:	f107 031c 	add.w	r3, r7, #28
 8001056:	2200      	movs	r2, #0
 8001058:	601a      	str	r2, [r3, #0]
 800105a:	605a      	str	r2, [r3, #4]
 800105c:	609a      	str	r2, [r3, #8]
 800105e:	60da      	str	r2, [r3, #12]
 8001060:	611a      	str	r2, [r3, #16]
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
 8001074:	615a      	str	r2, [r3, #20]
 8001076:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001078:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <MX_FSMC_Init+0xec>)
 800107a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800107e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001080:	4b2d      	ldr	r3, [pc, #180]	; (8001138 <MX_FSMC_Init+0xec>)
 8001082:	4a2e      	ldr	r2, [pc, #184]	; (800113c <MX_FSMC_Init+0xf0>)
 8001084:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 8001086:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <MX_FSMC_Init+0xec>)
 8001088:	2206      	movs	r2, #6
 800108a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <MX_FSMC_Init+0xec>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001092:	4b29      	ldr	r3, [pc, #164]	; (8001138 <MX_FSMC_Init+0xec>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <MX_FSMC_Init+0xec>)
 800109a:	2210      	movs	r2, #16
 800109c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800109e:	4b26      	ldr	r3, [pc, #152]	; (8001138 <MX_FSMC_Init+0xec>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <MX_FSMC_Init+0xec>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80010aa:	4b23      	ldr	r3, [pc, #140]	; (8001138 <MX_FSMC_Init+0xec>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80010b0:	4b21      	ldr	r3, [pc, #132]	; (8001138 <MX_FSMC_Init+0xec>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80010b6:	4b20      	ldr	r3, [pc, #128]	; (8001138 <MX_FSMC_Init+0xec>)
 80010b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010bc:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80010be:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <MX_FSMC_Init+0xec>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80010c4:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <MX_FSMC_Init+0xec>)
 80010c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ca:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <MX_FSMC_Init+0xec>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <MX_FSMC_Init+0xec>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <MX_FSMC_Init+0xec>)
 80010da:	2200      	movs	r2, #0
 80010dc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80010de:	230f      	movs	r3, #15
 80010e0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80010e2:	230f      	movs	r3, #15
 80010e4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80010e6:	233c      	movs	r3, #60	; 0x3c
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80010ee:	2310      	movs	r3, #16
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80010f2:	2311      	movs	r3, #17
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80010f6:	2300      	movs	r3, #0
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 9;
 80010fa:	2309      	movs	r3, #9
 80010fc:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80010fe:	230f      	movs	r3, #15
 8001100:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 255;
 8001102:	23ff      	movs	r3, #255	; 0xff
 8001104:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800110a:	2310      	movs	r3, #16
 800110c:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800110e:	2311      	movs	r3, #17
 8001110:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8001112:	2300      	movs	r3, #0
 8001114:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001116:	463a      	mov	r2, r7
 8001118:	f107 031c 	add.w	r3, r7, #28
 800111c:	4619      	mov	r1, r3
 800111e:	4806      	ldr	r0, [pc, #24]	; (8001138 <MX_FSMC_Init+0xec>)
 8001120:	f009 f95c 	bl	800a3dc <HAL_SRAM_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800112a:	f000 fa4f 	bl	80015cc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800112e:	bf00      	nop
 8001130:	3738      	adds	r7, #56	; 0x38
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000073c 	.word	0x2000073c
 800113c:	a0000104 	.word	0xa0000104

08001140 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001154:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <HAL_FSMC_MspInit+0xc8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d151      	bne.n	8001200 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 800115c:	4b2a      	ldr	r3, [pc, #168]	; (8001208 <HAL_FSMC_MspInit+0xc8>)
 800115e:	2201      	movs	r2, #1
 8001160:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b29      	ldr	r3, [pc, #164]	; (800120c <HAL_FSMC_MspInit+0xcc>)
 8001168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800116a:	4a28      	ldr	r2, [pc, #160]	; (800120c <HAL_FSMC_MspInit+0xcc>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6393      	str	r3, [r2, #56]	; 0x38
 8001172:	4b26      	ldr	r3, [pc, #152]	; (800120c <HAL_FSMC_MspInit+0xcc>)
 8001174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800117e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001182:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118c:	2303      	movs	r3, #3
 800118e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001190:	230c      	movs	r3, #12
 8001192:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001194:	1d3b      	adds	r3, r7, #4
 8001196:	4619      	mov	r1, r3
 8001198:	481d      	ldr	r0, [pc, #116]	; (8001210 <HAL_FSMC_MspInit+0xd0>)
 800119a:	f007 fd81 	bl	8008ca0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800119e:	f64f 7380 	movw	r3, #65408	; 0xff80
 80011a2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80011b0:	230c      	movs	r3, #12
 80011b2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	4619      	mov	r1, r3
 80011b8:	4816      	ldr	r0, [pc, #88]	; (8001214 <HAL_FSMC_MspInit+0xd4>)
 80011ba:	f007 fd71 	bl	8008ca0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80011be:	f24c 7333 	movw	r3, #50995	; 0xc733
 80011c2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c4:	2302      	movs	r3, #2
 80011c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80011d0:	230c      	movs	r3, #12
 80011d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d4:	1d3b      	adds	r3, r7, #4
 80011d6:	4619      	mov	r1, r3
 80011d8:	480f      	ldr	r0, [pc, #60]	; (8001218 <HAL_FSMC_MspInit+0xd8>)
 80011da:	f007 fd61 	bl	8008ca0 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80011de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80011f0:	230c      	movs	r3, #12
 80011f2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011f4:	1d3b      	adds	r3, r7, #4
 80011f6:	4619      	mov	r1, r3
 80011f8:	4808      	ldr	r0, [pc, #32]	; (800121c <HAL_FSMC_MspInit+0xdc>)
 80011fa:	f007 fd51 	bl	8008ca0 <HAL_GPIO_Init>
 80011fe:	e000      	b.n	8001202 <HAL_FSMC_MspInit+0xc2>
    return;
 8001200:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20000718 	.word	0x20000718
 800120c:	40023800 	.word	0x40023800
 8001210:	40021400 	.word	0x40021400
 8001214:	40021000 	.word	0x40021000
 8001218:	40020c00 	.word	0x40020c00
 800121c:	40021800 	.word	0x40021800

08001220 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001228:	f7ff ff8a 	bl	8001140 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	623b      	str	r3, [r7, #32]
 800124e:	4b7e      	ldr	r3, [pc, #504]	; (8001448 <MX_GPIO_Init+0x214>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a7d      	ldr	r2, [pc, #500]	; (8001448 <MX_GPIO_Init+0x214>)
 8001254:	f043 0310 	orr.w	r3, r3, #16
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b7b      	ldr	r3, [pc, #492]	; (8001448 <MX_GPIO_Init+0x214>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	623b      	str	r3, [r7, #32]
 8001264:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	4b77      	ldr	r3, [pc, #476]	; (8001448 <MX_GPIO_Init+0x214>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a76      	ldr	r2, [pc, #472]	; (8001448 <MX_GPIO_Init+0x214>)
 8001270:	f043 0304 	orr.w	r3, r3, #4
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b74      	ldr	r3, [pc, #464]	; (8001448 <MX_GPIO_Init+0x214>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0304 	and.w	r3, r3, #4
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
 8001286:	4b70      	ldr	r3, [pc, #448]	; (8001448 <MX_GPIO_Init+0x214>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a6f      	ldr	r2, [pc, #444]	; (8001448 <MX_GPIO_Init+0x214>)
 800128c:	f043 0320 	orr.w	r3, r3, #32
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b6d      	ldr	r3, [pc, #436]	; (8001448 <MX_GPIO_Init+0x214>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0320 	and.w	r3, r3, #32
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	4b69      	ldr	r3, [pc, #420]	; (8001448 <MX_GPIO_Init+0x214>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a68      	ldr	r2, [pc, #416]	; (8001448 <MX_GPIO_Init+0x214>)
 80012a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b66      	ldr	r3, [pc, #408]	; (8001448 <MX_GPIO_Init+0x214>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	4b62      	ldr	r3, [pc, #392]	; (8001448 <MX_GPIO_Init+0x214>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a61      	ldr	r2, [pc, #388]	; (8001448 <MX_GPIO_Init+0x214>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b5f      	ldr	r3, [pc, #380]	; (8001448 <MX_GPIO_Init+0x214>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b5b      	ldr	r3, [pc, #364]	; (8001448 <MX_GPIO_Init+0x214>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a5a      	ldr	r2, [pc, #360]	; (8001448 <MX_GPIO_Init+0x214>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b58      	ldr	r3, [pc, #352]	; (8001448 <MX_GPIO_Init+0x214>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	4b54      	ldr	r3, [pc, #336]	; (8001448 <MX_GPIO_Init+0x214>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a53      	ldr	r2, [pc, #332]	; (8001448 <MX_GPIO_Init+0x214>)
 80012fc:	f043 0308 	orr.w	r3, r3, #8
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b51      	ldr	r3, [pc, #324]	; (8001448 <MX_GPIO_Init+0x214>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0308 	and.w	r3, r3, #8
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b4d      	ldr	r3, [pc, #308]	; (8001448 <MX_GPIO_Init+0x214>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a4c      	ldr	r2, [pc, #304]	; (8001448 <MX_GPIO_Init+0x214>)
 8001318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b4a      	ldr	r3, [pc, #296]	; (8001448 <MX_GPIO_Init+0x214>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TCS_GPIO_Port, TCS_Pin, GPIO_PIN_RESET);
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001330:	4846      	ldr	r0, [pc, #280]	; (800144c <MX_GPIO_Init+0x218>)
 8001332:	f007 fe51 	bl	8008fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin|LED2_Pin|TDIN_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 800133c:	4844      	ldr	r0, [pc, #272]	; (8001450 <MX_GPIO_Init+0x21c>)
 800133e:	f007 fe4b 	bl	8008fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TCLK_Pin|LCD_BL_Pin|IIC_SCL_Pin|IIC_SDA_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	f248 3101 	movw	r1, #33537	; 0x8301
 8001348:	4842      	ldr	r0, [pc, #264]	; (8001454 <MX_GPIO_Init+0x220>)
 800134a:	f007 fe45 	bl	8008fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_SET);
 800134e:	2201      	movs	r2, #1
 8001350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001354:	4840      	ldr	r0, [pc, #256]	; (8001458 <MX_GPIO_Init+0x224>)
 8001356:	f007 fe3f 	bl	8008fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin|KEY2_Pin;
 800135a:	231c      	movs	r3, #28
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800135e:	2300      	movs	r3, #0
 8001360:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001362:	2301      	movs	r3, #1
 8001364:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	4619      	mov	r1, r3
 800136c:	483b      	ldr	r0, [pc, #236]	; (800145c <MX_GPIO_Init+0x228>)
 800136e:	f007 fc97 	bl	8008ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TCS_Pin;
 8001372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001380:	2300      	movs	r3, #0
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TCS_GPIO_Port, &GPIO_InitStruct);
 8001384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001388:	4619      	mov	r1, r3
 800138a:	4830      	ldr	r0, [pc, #192]	; (800144c <MX_GPIO_Init+0x218>)
 800138c:	f007 fc88 	bl	8008ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 8001390:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001396:	2301      	movs	r3, #1
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800139a:	2301      	movs	r3, #1
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	4619      	mov	r1, r3
 80013a8:	4829      	ldr	r0, [pc, #164]	; (8001450 <MX_GPIO_Init+0x21c>)
 80013aa:	f007 fc79 	bl	8008ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TCLK_Pin|IIC_SCL_Pin|IIC_SDA_Pin;
 80013ae:	f240 3301 	movw	r3, #769	; 0x301
 80013b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013b8:	2301      	movs	r3, #1
 80013ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013bc:	2303      	movs	r3, #3
 80013be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c4:	4619      	mov	r1, r3
 80013c6:	4823      	ldr	r0, [pc, #140]	; (8001454 <MX_GPIO_Init+0x220>)
 80013c8:	f007 fc6a 	bl	8008ca0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PEN_Pin|DOUT_Pin;
 80013cc:	2306      	movs	r3, #6
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	4619      	mov	r1, r3
 80013de:	481d      	ldr	r0, [pc, #116]	; (8001454 <MX_GPIO_Init+0x220>)
 80013e0:	f007 fc5e 	bl	8008ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TDIN_Pin;
 80013e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(TDIN_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	4814      	ldr	r0, [pc, #80]	; (8001450 <MX_GPIO_Init+0x21c>)
 80013fe:	f007 fc4f 	bl	8008ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001402:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800140c:	2301      	movs	r3, #1
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001410:	2301      	movs	r3, #1
 8001412:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	4619      	mov	r1, r3
 800141a:	480e      	ldr	r0, [pc, #56]	; (8001454 <MX_GPIO_Init+0x220>)
 800141c:	f007 fc40 	bl	8008ca0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001420:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001426:	2301      	movs	r3, #1
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800142a:	2301      	movs	r3, #1
 800142c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142e:	2303      	movs	r3, #3
 8001430:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	4807      	ldr	r0, [pc, #28]	; (8001458 <MX_GPIO_Init+0x224>)
 800143a:	f007 fc31 	bl	8008ca0 <HAL_GPIO_Init>

}
 800143e:	bf00      	nop
 8001440:	3738      	adds	r7, #56	; 0x38
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40023800 	.word	0x40023800
 800144c:	40020800 	.word	0x40020800
 8001450:	40021400 	.word	0x40021400
 8001454:	40020400 	.word	0x40020400
 8001458:	40020000 	.word	0x40020000
 800145c:	40021000 	.word	0x40021000

08001460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001466:	f006 fe71 	bl	800814c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146a:	f000 f843 	bl	80014f4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(200);
 800146e:	20c8      	movs	r0, #200	; 0xc8
 8001470:	f006 fede 	bl	8008230 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001474:	f7ff fede 	bl	8001234 <MX_GPIO_Init>
  MX_DMA_Init();
 8001478:	f7ff fdb8 	bl	8000fec <MX_DMA_Init>
  MX_SPI3_Init();
 800147c:	f000 f8ee 	bl	800165c <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8001480:	f000 fd2a 	bl	8001ed8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001484:	f000 fc4a 	bl	8001d1c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001488:	f000 fc94 	bl	8001db4 <MX_TIM3_Init>
  MX_FSMC_Init();
 800148c:	f7ff fdde 	bl	800104c <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  LCD_Init();
 8001490:	f002 ff9a 	bl	80043c8 <LCD_Init>
  tp_dev.init();
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <main+0x74>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4798      	blx	r3
  POINT_COLOR=RED;
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <main+0x78>)
 800149c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80014a0:	801a      	strh	r2, [r3, #0]
  ADS8688_Init(&ads, &hspi3, SPI3_CS_GPIO_Port, SPI3_CS_Pin);
 80014a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80014a6:	4a0d      	ldr	r2, [pc, #52]	; (80014dc <main+0x7c>)
 80014a8:	490d      	ldr	r1, [pc, #52]	; (80014e0 <main+0x80>)
 80014aa:	480e      	ldr	r0, [pc, #56]	; (80014e4 <main+0x84>)
 80014ac:	f000 fdfb 	bl	80020a6 <ADS8688_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80014b0:	480d      	ldr	r0, [pc, #52]	; (80014e8 <main+0x88>)
 80014b2:	f009 f827 	bl	800a504 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <main+0x8c>)
 80014b8:	f009 f824 	bl	800a504 <HAL_TIM_Base_Start_IT>
  //TFT_Init();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  LCD_ShowString(0,0,200,24,24,(uint8_t*)"OSCILLOSCOPE");
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <main+0x90>)
 80014be:	9301      	str	r3, [sp, #4]
 80014c0:	2318      	movs	r3, #24
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	2318      	movs	r3, #24
 80014c6:	22c8      	movs	r2, #200	; 0xc8
 80014c8:	2100      	movs	r1, #0
 80014ca:	2000      	movs	r0, #0
 80014cc:	f006 fdf0 	bl	80080b0 <LCD_ShowString>
  while (1)
 80014d0:	e7fe      	b.n	80014d0 <main+0x70>
 80014d2:	bf00      	nop
 80014d4:	200004e4 	.word	0x200004e4
 80014d8:	20000730 	.word	0x20000730
 80014dc:	40020000 	.word	0x40020000
 80014e0:	20000de4 	.word	0x20000de4
 80014e4:	20000dd8 	.word	0x20000dd8
 80014e8:	20000f48 	.word	0x20000f48
 80014ec:	20000f00 	.word	0x20000f00
 80014f0:	08010620 	.word	0x08010620

080014f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b094      	sub	sp, #80	; 0x50
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0320 	add.w	r3, r7, #32
 80014fe:	2230      	movs	r2, #48	; 0x30
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f00a fb78 	bl	800bbf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	f107 030c 	add.w	r3, r7, #12
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
 8001510:	605a      	str	r2, [r3, #4]
 8001512:	609a      	str	r2, [r3, #8]
 8001514:	60da      	str	r2, [r3, #12]
 8001516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <SystemClock_Config+0xd0>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001520:	4a28      	ldr	r2, [pc, #160]	; (80015c4 <SystemClock_Config+0xd0>)
 8001522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001526:	6413      	str	r3, [r2, #64]	; 0x40
 8001528:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <SystemClock_Config+0xd0>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001534:	2300      	movs	r3, #0
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	4b23      	ldr	r3, [pc, #140]	; (80015c8 <SystemClock_Config+0xd4>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a22      	ldr	r2, [pc, #136]	; (80015c8 <SystemClock_Config+0xd4>)
 800153e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b20      	ldr	r3, [pc, #128]	; (80015c8 <SystemClock_Config+0xd4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001550:	2301      	movs	r3, #1
 8001552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155a:	2302      	movs	r3, #2
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800155e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001564:	2304      	movs	r3, #4
 8001566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001568:	23a8      	movs	r3, #168	; 0xa8
 800156a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800156c:	2302      	movs	r3, #2
 800156e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001570:	2304      	movs	r3, #4
 8001572:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001574:	f107 0320 	add.w	r3, r7, #32
 8001578:	4618      	mov	r0, r3
 800157a:	f007 fd47 	bl	800900c <HAL_RCC_OscConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001584:	f000 f822 	bl	80015cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001588:	230f      	movs	r3, #15
 800158a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800158c:	2302      	movs	r3, #2
 800158e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001594:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001598:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800159a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	2105      	movs	r1, #5
 80015a6:	4618      	mov	r0, r3
 80015a8:	f007 ffa8 	bl	80094fc <HAL_RCC_ClockConfig>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80015b2:	f000 f80b 	bl	80015cc <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80015b6:	f008 f887 	bl	80096c8 <HAL_RCC_EnableCSS>
}
 80015ba:	bf00      	nop
 80015bc:	3750      	adds	r7, #80	; 0x50
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40007000 	.word	0x40007000

080015cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <delay_us>:
    {
        ;
    } while (--t);
}
void delay_us(u32 nus)
{
 80015dc:	b480      	push	{r7}
 80015de:	b089      	sub	sp, #36	; 0x24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
    u32 ticks;
    u32 told, tnow, tcnt = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61bb      	str	r3, [r7, #24]
    u32 reload = SysTick->LOAD; //LOAD的值
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <delay_us+0x78>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	617b      	str	r3, [r7, #20]
    ticks = nus * fac_us;       //需要的节拍数
 80015ee:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <delay_us+0x7c>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	fb02 f303 	mul.w	r3, r2, r3
 80015fa:	613b      	str	r3, [r7, #16]
    told = SysTick->VAL;        //刚进⼊时的计数器值
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <delay_us+0x78>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <delay_us+0x78>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	60fb      	str	r3, [r7, #12]
        if (tnow != told)
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	429a      	cmp	r2, r3
 800160e:	d0f8      	beq.n	8001602 <delay_us+0x26>
        {
            if (tnow < told)
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	429a      	cmp	r2, r3
 8001616:	d206      	bcs.n	8001626 <delay_us+0x4a>
                tcnt += told - tnow; //这⾥注意⼀下SYSTICK是⼀个递减的计数器就可以了.
 8001618:	69fa      	ldr	r2, [r7, #28]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4413      	add	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
 8001624:	e007      	b.n	8001636 <delay_us+0x5a>
            else
                tcnt += reload - tnow + told;
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1ad2      	subs	r2, r2, r3
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	4413      	add	r3, r2
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4413      	add	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
            told = tnow;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	429a      	cmp	r2, r3
 8001640:	d200      	bcs.n	8001644 <delay_us+0x68>
        tnow = SysTick->VAL;
 8001642:	e7de      	b.n	8001602 <delay_us+0x26>
                break; //时间超过/等于要延迟的时间,则退出.
 8001644:	bf00      	nop
        }
    };
}
 8001646:	bf00      	nop
 8001648:	3724      	adds	r7, #36	; 0x24
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	e000e010 	.word	0xe000e010
 8001658:	20000727 	.word	0x20000727

0800165c <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_rx;
DMA_HandleTypeDef hdma_spi3_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001660:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <MX_SPI3_Init+0x68>)
 8001662:	4a19      	ldr	r2, [pc, #100]	; (80016c8 <MX_SPI3_Init+0x6c>)
 8001664:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001666:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <MX_SPI3_Init+0x68>)
 8001668:	f44f 7282 	mov.w	r2, #260	; 0x104
 800166c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <MX_SPI3_Init+0x68>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_16BIT;
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <MX_SPI3_Init+0x68>)
 8001676:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800167a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_SPI3_Init+0x68>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <MX_SPI3_Init+0x68>)
 8001684:	2201      	movs	r2, #1
 8001686:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_SPI3_Init+0x68>)
 800168a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800168e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_SPI3_Init+0x68>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_SPI3_Init+0x68>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_SPI3_Init+0x68>)
 800169e:	2200      	movs	r2, #0
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_SPI3_Init+0x68>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_SPI3_Init+0x68>)
 80016aa:	220a      	movs	r2, #10
 80016ac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_SPI3_Init+0x68>)
 80016b0:	f008 f92c 	bl	800990c <HAL_SPI_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80016ba:	f7ff ff87 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000de4 	.word	0x20000de4
 80016c8:	40003c00 	.word	0x40003c00

080016cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	60da      	str	r2, [r3, #12]
 80016e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a4a      	ldr	r2, [pc, #296]	; (8001814 <HAL_SPI_MspInit+0x148>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	f040 808d 	bne.w	800180a <HAL_SPI_MspInit+0x13e>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	4b48      	ldr	r3, [pc, #288]	; (8001818 <HAL_SPI_MspInit+0x14c>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	4a47      	ldr	r2, [pc, #284]	; (8001818 <HAL_SPI_MspInit+0x14c>)
 80016fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001700:	4b45      	ldr	r3, [pc, #276]	; (8001818 <HAL_SPI_MspInit+0x14c>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	4b41      	ldr	r3, [pc, #260]	; (8001818 <HAL_SPI_MspInit+0x14c>)
 8001712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001714:	4a40      	ldr	r2, [pc, #256]	; (8001818 <HAL_SPI_MspInit+0x14c>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6313      	str	r3, [r2, #48]	; 0x30
 800171c:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <HAL_SPI_MspInit+0x14c>)
 800171e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001728:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800172c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	2300      	movs	r3, #0
 8001734:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001736:	2303      	movs	r3, #3
 8001738:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800173a:	2306      	movs	r3, #6
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	4835      	ldr	r0, [pc, #212]	; (800181c <HAL_SPI_MspInit+0x150>)
 8001746:	f007 faab 	bl	8008ca0 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Stream0;
 800174a:	4b35      	ldr	r3, [pc, #212]	; (8001820 <HAL_SPI_MspInit+0x154>)
 800174c:	4a35      	ldr	r2, [pc, #212]	; (8001824 <HAL_SPI_MspInit+0x158>)
 800174e:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8001750:	4b33      	ldr	r3, [pc, #204]	; (8001820 <HAL_SPI_MspInit+0x154>)
 8001752:	2200      	movs	r2, #0
 8001754:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001756:	4b32      	ldr	r3, [pc, #200]	; (8001820 <HAL_SPI_MspInit+0x154>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800175c:	4b30      	ldr	r3, [pc, #192]	; (8001820 <HAL_SPI_MspInit+0x154>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001762:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <HAL_SPI_MspInit+0x154>)
 8001764:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001768:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800176a:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_SPI_MspInit+0x154>)
 800176c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001770:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001772:	4b2b      	ldr	r3, [pc, #172]	; (8001820 <HAL_SPI_MspInit+0x154>)
 8001774:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001778:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 800177a:	4b29      	ldr	r3, [pc, #164]	; (8001820 <HAL_SPI_MspInit+0x154>)
 800177c:	2200      	movs	r2, #0
 800177e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001780:	4b27      	ldr	r3, [pc, #156]	; (8001820 <HAL_SPI_MspInit+0x154>)
 8001782:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001786:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001788:	4b25      	ldr	r3, [pc, #148]	; (8001820 <HAL_SPI_MspInit+0x154>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800178e:	4824      	ldr	r0, [pc, #144]	; (8001820 <HAL_SPI_MspInit+0x154>)
 8001790:	f006 fe84 	bl	800849c <HAL_DMA_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_SPI_MspInit+0xd2>
    {
      Error_Handler();
 800179a:	f7ff ff17 	bl	80015cc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a1f      	ldr	r2, [pc, #124]	; (8001820 <HAL_SPI_MspInit+0x154>)
 80017a2:	64da      	str	r2, [r3, #76]	; 0x4c
 80017a4:	4a1e      	ldr	r2, [pc, #120]	; (8001820 <HAL_SPI_MspInit+0x154>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80017aa:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <HAL_SPI_MspInit+0x15c>)
 80017ac:	4a1f      	ldr	r2, [pc, #124]	; (800182c <HAL_SPI_MspInit+0x160>)
 80017ae:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_SPI_MspInit+0x15c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017b6:	4b1c      	ldr	r3, [pc, #112]	; (8001828 <HAL_SPI_MspInit+0x15c>)
 80017b8:	2240      	movs	r2, #64	; 0x40
 80017ba:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <HAL_SPI_MspInit+0x15c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017c2:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_SPI_MspInit+0x15c>)
 80017c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017c8:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80017ca:	4b17      	ldr	r3, [pc, #92]	; (8001828 <HAL_SPI_MspInit+0x15c>)
 80017cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80017d0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_SPI_MspInit+0x15c>)
 80017d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017d8:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_SPI_MspInit+0x15c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_SPI_MspInit+0x15c>)
 80017e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017e6:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <HAL_SPI_MspInit+0x15c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80017ee:	480e      	ldr	r0, [pc, #56]	; (8001828 <HAL_SPI_MspInit+0x15c>)
 80017f0:	f006 fe54 	bl	800849c <HAL_DMA_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_SPI_MspInit+0x132>
    {
      Error_Handler();
 80017fa:	f7ff fee7 	bl	80015cc <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_SPI_MspInit+0x15c>)
 8001802:	649a      	str	r2, [r3, #72]	; 0x48
 8001804:	4a08      	ldr	r2, [pc, #32]	; (8001828 <HAL_SPI_MspInit+0x15c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	; 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40003c00 	.word	0x40003c00
 8001818:	40023800 	.word	0x40023800
 800181c:	40020800 	.word	0x40020800
 8001820:	20000e9c 	.word	0x20000e9c
 8001824:	40026010 	.word	0x40026010
 8001828:	20000e3c 	.word	0x20000e3c
 800182c:	40026088 	.word	0x40026088

08001830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	4b10      	ldr	r3, [pc, #64]	; (800187c <HAL_MspInit+0x4c>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a0f      	ldr	r2, [pc, #60]	; (800187c <HAL_MspInit+0x4c>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_MspInit+0x4c>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	603b      	str	r3, [r7, #0]
 8001856:	4b09      	ldr	r3, [pc, #36]	; (800187c <HAL_MspInit+0x4c>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	4a08      	ldr	r2, [pc, #32]	; (800187c <HAL_MspInit+0x4c>)
 800185c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001860:	6413      	str	r3, [r2, #64]	; 0x40
 8001862:	4b06      	ldr	r3, [pc, #24]	; (800187c <HAL_MspInit+0x4c>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186a:	603b      	str	r3, [r7, #0]
 800186c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800186e:	2005      	movs	r0, #5
 8001870:	f006 fdd2 	bl	8008418 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800

08001880 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <NMI_Handler+0x4>

08001886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <MemManage_Handler+0x4>

08001892 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <BusFault_Handler+0x4>

08001898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <UsageFault_Handler+0x4>

0800189e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018cc:	f006 fc90 	bl	80081f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <DMA1_Stream0_IRQHandler+0x10>)
 80018da:	f006 ff77 	bl	80087cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000e9c 	.word	0x20000e9c

080018e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80018ec:	4811      	ldr	r0, [pc, #68]	; (8001934 <DMA1_Stream5_IRQHandler+0x4c>)
 80018ee:	f006 ff6d 	bl	80087cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */
  if(CH==0)
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <DMA1_Stream5_IRQHandler+0x50>)
 80018f4:	f993 3000 	ldrsb.w	r3, [r3]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d10a      	bne.n	8001912 <DMA1_Stream5_IRQHandler+0x2a>
  {
	  PAout(15) = 1;
 80018fc:	4b0f      	ldr	r3, [pc, #60]	; (800193c <DMA1_Stream5_IRQHandler+0x54>)
 80018fe:	2201      	movs	r2, #1
 8001900:	601a      	str	r2, [r3, #0]
  	  ads_data[0] = *(u16*)(&rxbuf[0][2]) ;
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <DMA1_Stream5_IRQHandler+0x58>)
 8001904:	881a      	ldrh	r2, [r3, #0]
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <DMA1_Stream5_IRQHandler+0x5c>)
 8001908:	801a      	strh	r2, [r3, #0]
  	  CH = 1;
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <DMA1_Stream5_IRQHandler+0x50>)
 800190c:	2201      	movs	r2, #1
 800190e:	701a      	strb	r2, [r3, #0]
	  PAout(15) = 1;
	  ads_data[1] = *(u16*)(&rxbuf[0][2]) ;
	  CH = 0;
  }
  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001910:	e00e      	b.n	8001930 <DMA1_Stream5_IRQHandler+0x48>
  else if(CH==1)
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <DMA1_Stream5_IRQHandler+0x50>)
 8001914:	f993 3000 	ldrsb.w	r3, [r3]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d109      	bne.n	8001930 <DMA1_Stream5_IRQHandler+0x48>
	  PAout(15) = 1;
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <DMA1_Stream5_IRQHandler+0x54>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]
	  ads_data[1] = *(u16*)(&rxbuf[0][2]) ;
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <DMA1_Stream5_IRQHandler+0x58>)
 8001924:	881a      	ldrh	r2, [r3, #0]
 8001926:	4b07      	ldr	r3, [pc, #28]	; (8001944 <DMA1_Stream5_IRQHandler+0x5c>)
 8001928:	805a      	strh	r2, [r3, #2]
	  CH = 0;
 800192a:	4b03      	ldr	r3, [pc, #12]	; (8001938 <DMA1_Stream5_IRQHandler+0x50>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
}
 8001930:	bf00      	nop
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000e3c 	.word	0x20000e3c
 8001938:	20000728 	.word	0x20000728
 800193c:	424002bc 	.word	0x424002bc
 8001940:	2000071e 	.word	0x2000071e
 8001944:	2000078c 	.word	0x2000078c

08001948 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800194c:	4802      	ldr	r0, [pc, #8]	; (8001958 <DMA1_Stream6_IRQHandler+0x10>)
 800194e:	f006 ff3d 	bl	80087cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001952:	bf00      	nop
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	20000f90 	.word	0x20000f90

0800195c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001960:	4868      	ldr	r0, [pc, #416]	; (8001b04 <TIM2_IRQHandler+0x1a8>)
 8001962:	f008 fe3f 	bl	800a5e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  PAout(15) = 0;
 8001966:	4b68      	ldr	r3, [pc, #416]	; (8001b08 <TIM2_IRQHandler+0x1ac>)
 8001968:	2200      	movs	r2, #0
 800196a:	601a      	str	r2, [r3, #0]
  HAL_SPI_TransmitReceive_DMA(&hspi3, txbuf, rxbuf[0], 2);
 800196c:	2302      	movs	r3, #2
 800196e:	4a67      	ldr	r2, [pc, #412]	; (8001b0c <TIM2_IRQHandler+0x1b0>)
 8001970:	4967      	ldr	r1, [pc, #412]	; (8001b10 <TIM2_IRQHandler+0x1b4>)
 8001972:	4868      	ldr	r0, [pc, #416]	; (8001b14 <TIM2_IRQHandler+0x1b8>)
 8001974:	f008 f9f6 	bl	8009d64 <HAL_SPI_TransmitReceive_DMA>

  //volt[0] = (((float)(ads_data[0]+3-32767))*10.24/65535.0);
  //volt[1] = (((float)(ads_data[1]-32767))*10.24/65535.0);
  if((ads_data[0]>Level_Trigger_two)&&CH0_ON==1&&TriggerCH==0)
 8001978:	4b67      	ldr	r3, [pc, #412]	; (8001b18 <TIM2_IRQHandler+0x1bc>)
 800197a:	881a      	ldrh	r2, [r3, #0]
 800197c:	4b67      	ldr	r3, [pc, #412]	; (8001b1c <TIM2_IRQHandler+0x1c0>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	429a      	cmp	r2, r3
 8001982:	d90b      	bls.n	800199c <TIM2_IRQHandler+0x40>
 8001984:	4b66      	ldr	r3, [pc, #408]	; (8001b20 <TIM2_IRQHandler+0x1c4>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d107      	bne.n	800199c <TIM2_IRQHandler+0x40>
 800198c:	4b65      	ldr	r3, [pc, #404]	; (8001b24 <TIM2_IRQHandler+0x1c8>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d103      	bne.n	800199c <TIM2_IRQHandler+0x40>
  {
	  saveflag=1;
 8001994:	4b64      	ldr	r3, [pc, #400]	; (8001b28 <TIM2_IRQHandler+0x1cc>)
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	e010      	b.n	80019be <TIM2_IRQHandler+0x62>
  }
  else if((ads_data[1]>Level_Trigger_two)&&CH1_ON==1&&TriggerCH==1)
 800199c:	4b5e      	ldr	r3, [pc, #376]	; (8001b18 <TIM2_IRQHandler+0x1bc>)
 800199e:	885a      	ldrh	r2, [r3, #2]
 80019a0:	4b5e      	ldr	r3, [pc, #376]	; (8001b1c <TIM2_IRQHandler+0x1c0>)
 80019a2:	881b      	ldrh	r3, [r3, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d90a      	bls.n	80019be <TIM2_IRQHandler+0x62>
 80019a8:	4b60      	ldr	r3, [pc, #384]	; (8001b2c <TIM2_IRQHandler+0x1d0>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d106      	bne.n	80019be <TIM2_IRQHandler+0x62>
 80019b0:	4b5c      	ldr	r3, [pc, #368]	; (8001b24 <TIM2_IRQHandler+0x1c8>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d102      	bne.n	80019be <TIM2_IRQHandler+0x62>
  {
	  saveflag=1;
 80019b8:	4b5b      	ldr	r3, [pc, #364]	; (8001b28 <TIM2_IRQHandler+0x1cc>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
  }
  else{}


  if(saveflag==1&&CH0_ON==1&&CH1_ON==1)
 80019be:	4b5a      	ldr	r3, [pc, #360]	; (8001b28 <TIM2_IRQHandler+0x1cc>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d122      	bne.n	8001a0c <TIM2_IRQHandler+0xb0>
 80019c6:	4b56      	ldr	r3, [pc, #344]	; (8001b20 <TIM2_IRQHandler+0x1c4>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d11e      	bne.n	8001a0c <TIM2_IRQHandler+0xb0>
 80019ce:	4b57      	ldr	r3, [pc, #348]	; (8001b2c <TIM2_IRQHandler+0x1d0>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d11a      	bne.n	8001a0c <TIM2_IRQHandler+0xb0>
  {
	  CH0_num[savenum]=ads_data[0]>>8;
 80019d6:	4b50      	ldr	r3, [pc, #320]	; (8001b18 <TIM2_IRQHandler+0x1bc>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	0a1b      	lsrs	r3, r3, #8
 80019dc:	b299      	uxth	r1, r3
 80019de:	4b54      	ldr	r3, [pc, #336]	; (8001b30 <TIM2_IRQHandler+0x1d4>)
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	b2c9      	uxtb	r1, r1
 80019e6:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <TIM2_IRQHandler+0x1d8>)
 80019e8:	5499      	strb	r1, [r3, r2]
	  CH1_num[savenum]=ads_data[1]>>8;
 80019ea:	4b4b      	ldr	r3, [pc, #300]	; (8001b18 <TIM2_IRQHandler+0x1bc>)
 80019ec:	885b      	ldrh	r3, [r3, #2]
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	b299      	uxth	r1, r3
 80019f2:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <TIM2_IRQHandler+0x1d4>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	461a      	mov	r2, r3
 80019f8:	b2c9      	uxtb	r1, r1
 80019fa:	4b4f      	ldr	r3, [pc, #316]	; (8001b38 <TIM2_IRQHandler+0x1dc>)
 80019fc:	5499      	strb	r1, [r3, r2]
	  savenum++;
 80019fe:	4b4c      	ldr	r3, [pc, #304]	; (8001b30 <TIM2_IRQHandler+0x1d4>)
 8001a00:	881b      	ldrh	r3, [r3, #0]
 8001a02:	3301      	adds	r3, #1
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	4b4a      	ldr	r3, [pc, #296]	; (8001b30 <TIM2_IRQHandler+0x1d4>)
 8001a08:	801a      	strh	r2, [r3, #0]
 8001a0a:	e038      	b.n	8001a7e <TIM2_IRQHandler+0x122>
  }
  else if(saveflag==1&&CH0_ON==1&&CH1_ON==0)
 8001a0c:	4b46      	ldr	r3, [pc, #280]	; (8001b28 <TIM2_IRQHandler+0x1cc>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d118      	bne.n	8001a46 <TIM2_IRQHandler+0xea>
 8001a14:	4b42      	ldr	r3, [pc, #264]	; (8001b20 <TIM2_IRQHandler+0x1c4>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d114      	bne.n	8001a46 <TIM2_IRQHandler+0xea>
 8001a1c:	4b43      	ldr	r3, [pc, #268]	; (8001b2c <TIM2_IRQHandler+0x1d0>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d110      	bne.n	8001a46 <TIM2_IRQHandler+0xea>
  {
	  CH0_num[savenum]=ads_data[0]>>8;
 8001a24:	4b3c      	ldr	r3, [pc, #240]	; (8001b18 <TIM2_IRQHandler+0x1bc>)
 8001a26:	881b      	ldrh	r3, [r3, #0]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	b299      	uxth	r1, r3
 8001a2c:	4b40      	ldr	r3, [pc, #256]	; (8001b30 <TIM2_IRQHandler+0x1d4>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	b2c9      	uxtb	r1, r1
 8001a34:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <TIM2_IRQHandler+0x1d8>)
 8001a36:	5499      	strb	r1, [r3, r2]
	  savenum++;
 8001a38:	4b3d      	ldr	r3, [pc, #244]	; (8001b30 <TIM2_IRQHandler+0x1d4>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	4b3b      	ldr	r3, [pc, #236]	; (8001b30 <TIM2_IRQHandler+0x1d4>)
 8001a42:	801a      	strh	r2, [r3, #0]
 8001a44:	e01b      	b.n	8001a7e <TIM2_IRQHandler+0x122>
  }
  else if(saveflag==1&&CH0_ON==0&&CH1_ON==1)
 8001a46:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <TIM2_IRQHandler+0x1cc>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d117      	bne.n	8001a7e <TIM2_IRQHandler+0x122>
 8001a4e:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <TIM2_IRQHandler+0x1c4>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d113      	bne.n	8001a7e <TIM2_IRQHandler+0x122>
 8001a56:	4b35      	ldr	r3, [pc, #212]	; (8001b2c <TIM2_IRQHandler+0x1d0>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d10f      	bne.n	8001a7e <TIM2_IRQHandler+0x122>
  {
	  CH1_num[savenum]=ads_data[1]>>8;
 8001a5e:	4b2e      	ldr	r3, [pc, #184]	; (8001b18 <TIM2_IRQHandler+0x1bc>)
 8001a60:	885b      	ldrh	r3, [r3, #2]
 8001a62:	0a1b      	lsrs	r3, r3, #8
 8001a64:	b299      	uxth	r1, r3
 8001a66:	4b32      	ldr	r3, [pc, #200]	; (8001b30 <TIM2_IRQHandler+0x1d4>)
 8001a68:	881b      	ldrh	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	b2c9      	uxtb	r1, r1
 8001a6e:	4b32      	ldr	r3, [pc, #200]	; (8001b38 <TIM2_IRQHandler+0x1dc>)
 8001a70:	5499      	strb	r1, [r3, r2]
	  savenum++;
 8001a72:	4b2f      	ldr	r3, [pc, #188]	; (8001b30 <TIM2_IRQHandler+0x1d4>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	3301      	adds	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	4b2d      	ldr	r3, [pc, #180]	; (8001b30 <TIM2_IRQHandler+0x1d4>)
 8001a7c:	801a      	strh	r2, [r3, #0]
  }
  else{}

  if(savenum>=410)
 8001a7e:	4b2c      	ldr	r3, [pc, #176]	; (8001b30 <TIM2_IRQHandler+0x1d4>)
 8001a80:	881b      	ldrh	r3, [r3, #0]
 8001a82:	f5b3 7fcd 	cmp.w	r3, #410	; 0x19a
 8001a86:	d33b      	bcc.n	8001b00 <TIM2_IRQHandler+0x1a4>
  {
	  saveflag=0;
 8001a88:	4b27      	ldr	r3, [pc, #156]	; (8001b28 <TIM2_IRQHandler+0x1cc>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
	  savenum=10;
 8001a8e:	4b28      	ldr	r3, [pc, #160]	; (8001b30 <TIM2_IRQHandler+0x1d4>)
 8001a90:	220a      	movs	r2, #10
 8001a92:	801a      	strh	r2, [r3, #0]
	  if(CH0_ON&&CH1_ON==0)
 8001a94:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <TIM2_IRQHandler+0x1c4>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00a      	beq.n	8001ab2 <TIM2_IRQHandler+0x156>
 8001a9c:	4b23      	ldr	r3, [pc, #140]	; (8001b2c <TIM2_IRQHandler+0x1d0>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d106      	bne.n	8001ab2 <TIM2_IRQHandler+0x156>
	  {
		  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&CH0_num[0], 414);
 8001aa4:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8001aa8:	4922      	ldr	r1, [pc, #136]	; (8001b34 <TIM2_IRQHandler+0x1d8>)
 8001aaa:	4824      	ldr	r0, [pc, #144]	; (8001b3c <TIM2_IRQHandler+0x1e0>)
 8001aac:	f009 f9b0 	bl	800ae10 <HAL_UART_Transmit_DMA>
 8001ab0:	e026      	b.n	8001b00 <TIM2_IRQHandler+0x1a4>
	  }
	  else if(CH0_ON==0&&CH1_ON==1)
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <TIM2_IRQHandler+0x1c4>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10a      	bne.n	8001ad0 <TIM2_IRQHandler+0x174>
 8001aba:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <TIM2_IRQHandler+0x1d0>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d106      	bne.n	8001ad0 <TIM2_IRQHandler+0x174>
	  {
		  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&CH1_num[0], 414);
 8001ac2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8001ac6:	491c      	ldr	r1, [pc, #112]	; (8001b38 <TIM2_IRQHandler+0x1dc>)
 8001ac8:	481c      	ldr	r0, [pc, #112]	; (8001b3c <TIM2_IRQHandler+0x1e0>)
 8001aca:	f009 f9a1 	bl	800ae10 <HAL_UART_Transmit_DMA>
 8001ace:	e017      	b.n	8001b00 <TIM2_IRQHandler+0x1a4>
	  }
	  else if(CH0_ON==1&&CH1_ON==1)
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <TIM2_IRQHandler+0x1c4>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d113      	bne.n	8001b00 <TIM2_IRQHandler+0x1a4>
 8001ad8:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <TIM2_IRQHandler+0x1d0>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d10f      	bne.n	8001b00 <TIM2_IRQHandler+0x1a4>
	  {
		  memcpy(CH0_num+414*sizeof(uint8_t),CH1_num,sizeof(CH1_num));
 8001ae0:	4a17      	ldr	r2, [pc, #92]	; (8001b40 <TIM2_IRQHandler+0x1e4>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	; (8001b38 <TIM2_IRQHandler+0x1dc>)
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	f44f 73cf 	mov.w	r3, #414	; 0x19e
 8001aec:	461a      	mov	r2, r3
 8001aee:	f00a f875 	bl	800bbdc <memcpy>
		  HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&CH0_num[0] , 828);
 8001af2:	f44f 724f 	mov.w	r2, #828	; 0x33c
 8001af6:	490f      	ldr	r1, [pc, #60]	; (8001b34 <TIM2_IRQHandler+0x1d8>)
 8001af8:	4810      	ldr	r0, [pc, #64]	; (8001b3c <TIM2_IRQHandler+0x1e0>)
 8001afa:	f009 f989 	bl	800ae10 <HAL_UART_Transmit_DMA>




  /* USER CODE END TIM2_IRQn 1 */
}
 8001afe:	e7ff      	b.n	8001b00 <TIM2_IRQHandler+0x1a4>
 8001b00:	bf00      	nop
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20000f48 	.word	0x20000f48
 8001b08:	424002bc 	.word	0x424002bc
 8001b0c:	2000071c 	.word	0x2000071c
 8001b10:	20000724 	.word	0x20000724
 8001b14:	20000de4 	.word	0x20000de4
 8001b18:	2000078c 	.word	0x2000078c
 8001b1c:	20000002 	.word	0x20000002
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000726 	.word	0x20000726
 8001b28:	20000efc 	.word	0x20000efc
 8001b2c:	20000001 	.word	0x20000001
 8001b30:	200004de 	.word	0x200004de
 8001b34:	20000004 	.word	0x20000004
 8001b38:	20000340 	.word	0x20000340
 8001b3c:	20000ff0 	.word	0x20000ff0
 8001b40:	200001a2 	.word	0x200001a2

08001b44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <TIM3_IRQHandler+0x10>)
 8001b4a:	f008 fd4b 	bl	800a5e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000f00 	.word	0x20000f00

08001b58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <USART2_IRQHandler+0x10>)
 8001b5e:	f009 f9c3 	bl	800aee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000ff0 	.word	0x20000ff0

08001b6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
	return 1;
 8001b70:	2301      	movs	r3, #1
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_kill>:

int _kill(int pid, int sig)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b86:	f009 ffff 	bl	800bb88 <__errno>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2216      	movs	r2, #22
 8001b8e:	601a      	str	r2, [r3, #0]
	return -1;
 8001b90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3708      	adds	r7, #8
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <_exit>:

void _exit (int status)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ffe7 	bl	8001b7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bae:	e7fe      	b.n	8001bae <_exit+0x12>

08001bb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	e00a      	b.n	8001bd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bc2:	f3af 8000 	nop.w
 8001bc6:	4601      	mov	r1, r0
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	60ba      	str	r2, [r7, #8]
 8001bce:	b2ca      	uxtb	r2, r1
 8001bd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	617b      	str	r3, [r7, #20]
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	dbf0      	blt.n	8001bc2 <_read+0x12>
	}

return len;
 8001be0:	687b      	ldr	r3, [r7, #4]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}

08001bea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b086      	sub	sp, #24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	617b      	str	r3, [r7, #20]
 8001bfa:	e009      	b.n	8001c10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	1c5a      	adds	r2, r3, #1
 8001c00:	60ba      	str	r2, [r7, #8]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f000 fa13 	bl	8002030 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	dbf1      	blt.n	8001bfc <_write+0x12>
	}
	return len;
 8001c18:	687b      	ldr	r3, [r7, #4]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_close>:

int _close(int file)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
	return -1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr

08001c3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	b083      	sub	sp, #12
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
 8001c42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c4a:	605a      	str	r2, [r3, #4]
	return 0;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <_isatty>:

int _isatty(int file)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
	return 1;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b085      	sub	sp, #20
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
	return 0;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c94:	4a14      	ldr	r2, [pc, #80]	; (8001ce8 <_sbrk+0x5c>)
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <_sbrk+0x60>)
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <_sbrk+0x64>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d102      	bne.n	8001cae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <_sbrk+0x64>)
 8001caa:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <_sbrk+0x68>)
 8001cac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <_sbrk+0x64>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d207      	bcs.n	8001ccc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cbc:	f009 ff64 	bl	800bb88 <__errno>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	220c      	movs	r2, #12
 8001cc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cca:	e009      	b.n	8001ce0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <_sbrk+0x64>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cd2:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <_sbrk+0x64>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	4a05      	ldr	r2, [pc, #20]	; (8001cf0 <_sbrk+0x64>)
 8001cdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cde:	68fb      	ldr	r3, [r7, #12]
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3718      	adds	r7, #24
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20020000 	.word	0x20020000
 8001cec:	00000400 	.word	0x00000400
 8001cf0:	2000072c 	.word	0x2000072c
 8001cf4:	20001058 	.word	0x20001058

08001cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <SystemInit+0x20>)
 8001cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <SystemInit+0x20>)
 8001d04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed00 	.word	0xe000ed00

08001d1c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d30:	463b      	mov	r3, r7
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d38:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d42:	2231      	movs	r2, #49	; 0x31
 8001d44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 43-1;
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d4e:	222a      	movs	r2, #42	; 0x2a
 8001d50:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d5e:	4814      	ldr	r0, [pc, #80]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d60:	f008 fb80 	bl	800a464 <HAL_TIM_Base_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001d6a:	f7ff fc2f 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d74:	f107 0308 	add.w	r3, r7, #8
 8001d78:	4619      	mov	r1, r3
 8001d7a:	480d      	ldr	r0, [pc, #52]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d7c:	f008 fd3a 	bl	800a7f4 <HAL_TIM_ConfigClockSource>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001d86:	f7ff fc21 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d92:	463b      	mov	r3, r7
 8001d94:	4619      	mov	r1, r3
 8001d96:	4806      	ldr	r0, [pc, #24]	; (8001db0 <MX_TIM2_Init+0x94>)
 8001d98:	f008 ff5c 	bl	800ac54 <HAL_TIMEx_MasterConfigSynchronization>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001da2:	f7ff fc13 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001da6:	bf00      	nop
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000f48 	.word	0x20000f48

08001db4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dba:	f107 0308 	add.w	r3, r7, #8
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	609a      	str	r2, [r3, #8]
 8001dc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc8:	463b      	mov	r3, r7
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
 8001dce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dd0:	4b1d      	ldr	r3, [pc, #116]	; (8001e48 <MX_TIM3_Init+0x94>)
 8001dd2:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <MX_TIM3_Init+0x98>)
 8001dd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16800-1;
 8001dd6:	4b1c      	ldr	r3, [pc, #112]	; (8001e48 <MX_TIM3_Init+0x94>)
 8001dd8:	f244 129f 	movw	r2, #16799	; 0x419f
 8001ddc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dde:	4b1a      	ldr	r3, [pc, #104]	; (8001e48 <MX_TIM3_Init+0x94>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001de4:	4b18      	ldr	r3, [pc, #96]	; (8001e48 <MX_TIM3_Init+0x94>)
 8001de6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dec:	4b16      	ldr	r3, [pc, #88]	; (8001e48 <MX_TIM3_Init+0x94>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <MX_TIM3_Init+0x94>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001df8:	4813      	ldr	r0, [pc, #76]	; (8001e48 <MX_TIM3_Init+0x94>)
 8001dfa:	f008 fb33 	bl	800a464 <HAL_TIM_Base_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001e04:	f7ff fbe2 	bl	80015cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e0e:	f107 0308 	add.w	r3, r7, #8
 8001e12:	4619      	mov	r1, r3
 8001e14:	480c      	ldr	r0, [pc, #48]	; (8001e48 <MX_TIM3_Init+0x94>)
 8001e16:	f008 fced 	bl	800a7f4 <HAL_TIM_ConfigClockSource>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001e20:	f7ff fbd4 	bl	80015cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4805      	ldr	r0, [pc, #20]	; (8001e48 <MX_TIM3_Init+0x94>)
 8001e32:	f008 ff0f 	bl	800ac54 <HAL_TIMEx_MasterConfigSynchronization>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001e3c:	f7ff fbc6 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e40:	bf00      	nop
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000f00 	.word	0x20000f00
 8001e4c:	40000400 	.word	0x40000400

08001e50 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e60:	d116      	bne.n	8001e90 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <HAL_TIM_Base_MspInit+0x80>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	4a19      	ldr	r2, [pc, #100]	; (8001ed0 <HAL_TIM_Base_MspInit+0x80>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6413      	str	r3, [r2, #64]	; 0x40
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_TIM_Base_MspInit+0x80>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 8001e7e:	2201      	movs	r2, #1
 8001e80:	2100      	movs	r1, #0
 8001e82:	201c      	movs	r0, #28
 8001e84:	f006 fad3 	bl	800842e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e88:	201c      	movs	r0, #28
 8001e8a:	f006 faec 	bl	8008466 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e8e:	e01a      	b.n	8001ec6 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <HAL_TIM_Base_MspInit+0x84>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d115      	bne.n	8001ec6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <HAL_TIM_Base_MspInit+0x80>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <HAL_TIM_Base_MspInit+0x80>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eaa:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <HAL_TIM_Base_MspInit+0x80>)
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	60bb      	str	r3, [r7, #8]
 8001eb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	2100      	movs	r1, #0
 8001eba:	201d      	movs	r0, #29
 8001ebc:	f006 fab7 	bl	800842e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ec0:	201d      	movs	r0, #29
 8001ec2:	f006 fad0 	bl	8008466 <HAL_NVIC_EnableIRQ>
}
 8001ec6:	bf00      	nop
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40000400 	.word	0x40000400

08001ed8 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <MX_USART2_UART_Init+0x50>)
 8001ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001ee2:	4b10      	ldr	r3, [pc, #64]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001ee4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eea:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001efc:	4b09      	ldr	r3, [pc, #36]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001efe:	220c      	movs	r2, #12
 8001f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f02:	4b08      	ldr	r3, [pc, #32]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f08:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f0e:	4805      	ldr	r0, [pc, #20]	; (8001f24 <MX_USART2_UART_Init+0x4c>)
 8001f10:	f008 ff30 	bl	800ad74 <HAL_UART_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f1a:	f7ff fb57 	bl	80015cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f1e:	bf00      	nop
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	20000ff0 	.word	0x20000ff0
 8001f28:	40004400 	.word	0x40004400

08001f2c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b08a      	sub	sp, #40	; 0x28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	609a      	str	r2, [r3, #8]
 8001f40:	60da      	str	r2, [r3, #12]
 8001f42:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a34      	ldr	r2, [pc, #208]	; (800201c <HAL_UART_MspInit+0xf0>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d162      	bne.n	8002014 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b33      	ldr	r3, [pc, #204]	; (8002020 <HAL_UART_MspInit+0xf4>)
 8001f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f56:	4a32      	ldr	r2, [pc, #200]	; (8002020 <HAL_UART_MspInit+0xf4>)
 8001f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f5e:	4b30      	ldr	r3, [pc, #192]	; (8002020 <HAL_UART_MspInit+0xf4>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b2c      	ldr	r3, [pc, #176]	; (8002020 <HAL_UART_MspInit+0xf4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a2b      	ldr	r2, [pc, #172]	; (8002020 <HAL_UART_MspInit+0xf4>)
 8001f74:	f043 0301 	orr.w	r3, r3, #1
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b29      	ldr	r3, [pc, #164]	; (8002020 <HAL_UART_MspInit+0xf4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f86:	230c      	movs	r3, #12
 8001f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f92:	2303      	movs	r3, #3
 8001f94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f96:	2307      	movs	r3, #7
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4820      	ldr	r0, [pc, #128]	; (8002024 <HAL_UART_MspInit+0xf8>)
 8001fa2:	f006 fe7d 	bl	8008ca0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001fa6:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001fa8:	4a20      	ldr	r2, [pc, #128]	; (800202c <HAL_UART_MspInit+0x100>)
 8001faa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001fac:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001fae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001fb2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001fb6:	2240      	movs	r2, #64	; 0x40
 8001fb8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fba:	4b1b      	ldr	r3, [pc, #108]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001fc0:	4b19      	ldr	r3, [pc, #100]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fc8:	4b17      	ldr	r3, [pc, #92]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001fd4:	4b14      	ldr	r3, [pc, #80]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001fda:	4b13      	ldr	r3, [pc, #76]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001fdc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fe0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fe2:	4b11      	ldr	r3, [pc, #68]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001fe8:	480f      	ldr	r0, [pc, #60]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001fea:	f006 fa57 	bl	800849c <HAL_DMA_Init>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d001      	beq.n	8001ff8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001ff4:	f7ff faea 	bl	80015cc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8001ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_UART_MspInit+0xfc>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002004:	2200      	movs	r2, #0
 8002006:	2100      	movs	r1, #0
 8002008:	2026      	movs	r0, #38	; 0x26
 800200a:	f006 fa10 	bl	800842e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800200e:	2026      	movs	r0, #38	; 0x26
 8002010:	f006 fa29 	bl	8008466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002014:	bf00      	nop
 8002016:	3728      	adds	r7, #40	; 0x28
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40004400 	.word	0x40004400
 8002020:	40023800 	.word	0x40023800
 8002024:	40020000 	.word	0x40020000
 8002028:	20000f90 	.word	0x20000f90
 800202c:	400260a0 	.word	0x400260a0

08002030 <__io_putchar>:
#ifdef __GNUC__

#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)

PUTCHAR_PROTOTYPE
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_DMA(&huart2, (uint8_t*)&ch, 1);
 8002038:	1d3b      	adds	r3, r7, #4
 800203a:	2201      	movs	r2, #1
 800203c:	4619      	mov	r1, r3
 800203e:	4804      	ldr	r0, [pc, #16]	; (8002050 <__io_putchar+0x20>)
 8002040:	f008 fee6 	bl	800ae10 <HAL_UART_Transmit_DMA>
  return ch;
 8002044:	687b      	ldr	r3, [r7, #4]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000ff0 	.word	0x20000ff0

08002054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002054:	f8df d034 	ldr.w	sp, [pc, #52]	; 800208c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002058:	480d      	ldr	r0, [pc, #52]	; (8002090 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800205a:	490e      	ldr	r1, [pc, #56]	; (8002094 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800205c:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800205e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002060:	e002      	b.n	8002068 <LoopCopyDataInit>

08002062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002066:	3304      	adds	r3, #4

08002068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800206a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800206c:	d3f9      	bcc.n	8002062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800206e:	4a0b      	ldr	r2, [pc, #44]	; (800209c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002070:	4c0b      	ldr	r4, [pc, #44]	; (80020a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002074:	e001      	b.n	800207a <LoopFillZerobss>

08002076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002078:	3204      	adds	r2, #4

0800207a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800207a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800207c:	d3fb      	bcc.n	8002076 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800207e:	f7ff fe3b 	bl	8001cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002082:	f009 fd87 	bl	800bb94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002086:	f7ff f9eb 	bl	8001460 <main>
  bx  lr    
 800208a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800208c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002094:	200006fc 	.word	0x200006fc
  ldr r2, =_sidata
 8002098:	08015324 	.word	0x08015324
  ldr r2, =_sbss
 800209c:	200006fc 	.word	0x200006fc
  ldr r4, =_ebss
 80020a0:	20001058 	.word	0x20001058

080020a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a4:	e7fe      	b.n	80020a4 <ADC_IRQHandler>

080020a6 <ADS8688_Init>:
#include "ADS8688.h"

/*
 * INITIALISATION
 */
uint8_t ADS8688_Init(ADS8688 *ads, SPI_HandleTypeDef *spiHandle, GPIO_TypeDef *csPinBank, uint16_t csPin) {
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
 80020b2:	807b      	strh	r3, [r7, #2]
/* Store interface parameters in struct */
	ads->spiHandle 		= spiHandle;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	601a      	str	r2, [r3, #0]
	ads->csPinBank 	= csPinBank;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	605a      	str	r2, [r3, #4]
	ads->csPin 		= csPin;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	887a      	ldrh	r2, [r7, #2]
 80020c4:	811a      	strh	r2, [r3, #8]

	uint8_t ads_data[2] = {0};
 80020c6:	2300      	movs	r3, #0
 80020c8:	82bb      	strh	r3, [r7, #20]
	uint8_t state = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	75fb      	strb	r3, [r7, #23]
	// reset all registers to default
	state += ADS_Cmd_Write(ads, RST, ads_data);
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	461a      	mov	r2, r3
 80020d4:	2185      	movs	r1, #133	; 0x85
 80020d6:	68f8      	ldr	r0, [r7, #12]
 80020d8:	f000 f8b8 	bl	800224c <ADS_Cmd_Write>
 80020dc:	4603      	mov	r3, r0
 80020de:	461a      	mov	r2, r3
 80020e0:	7dfb      	ldrb	r3, [r7, #23]
 80020e2:	4413      	add	r3, r2
 80020e4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(100);
 80020e6:	2064      	movs	r0, #100	; 0x64
 80020e8:	f006 f8a2 	bl	8008230 <HAL_Delay>
	// send a no_op message to the ADS to enter IDLE mode
	state += ADS_Cmd_Write(ads, NO_OP, ads_data);
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	461a      	mov	r2, r3
 80020f2:	2100      	movs	r1, #0
 80020f4:	68f8      	ldr	r0, [r7, #12]
 80020f6:	f000 f8a9 	bl	800224c <ADS_Cmd_Write>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
 8002100:	4413      	add	r3, r2
 8002102:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8002104:	200a      	movs	r0, #10
 8002106:	f006 f893 	bl	8008230 <HAL_Delay>
	// enable auto transmit for all inputs(datasheet page 54) or as many as you want
	// if you want only some of the inputs enabled, make sure to power down the unused ones
	ads_data[0] = 0x03;
 800210a:	2303      	movs	r3, #3
 800210c:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, AUTO_SEQ_EN, ads_data);
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	461a      	mov	r2, r3
 8002114:	2101      	movs	r1, #1
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 f85d 	bl	80021d6 <ADS_Prog_Write>
 800211c:	4603      	mov	r3, r0
 800211e:	461a      	mov	r2, r3
 8002120:	7dfb      	ldrb	r3, [r7, #23]
 8002122:	4413      	add	r3, r2
 8002124:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8002126:	200a      	movs	r0, #10
 8002128:	f006 f882 	bl	8008230 <HAL_Delay>
	// set the desired features such as device id (if multiple devices are used), alarm enable/disable and output format
	ads_data[0] = 0x03; // here i chose id = 0, alarm = disabled and SDO_format = 3 (datasheet page 56)
 800212c:	2303      	movs	r3, #3
 800212e:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, F_S, ads_data);
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	461a      	mov	r2, r3
 8002136:	2103      	movs	r1, #3
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 f84c 	bl	80021d6 <ADS_Prog_Write>
 800213e:	4603      	mov	r3, r0
 8002140:	461a      	mov	r2, r3
 8002142:	7dfb      	ldrb	r3, [r7, #23]
 8002144:	4413      	add	r3, r2
 8002146:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 8002148:	200a      	movs	r0, #10
 800214a:	f006 f871 	bl	8008230 <HAL_Delay>
	// set all channels ranges(page 57)
	// 0x05 -> Input range is set to 0 to 2.5 x VREF (for VREF=5 volts, this means 0-10 volts range)
	// 0x06 -> Input range is set to 0 to 1.25 x VREF (for VREF=5 volts, this means 0-5 volts range)
	ads_data[0] = IR_5V;
 800214e:	2301      	movs	r3, #1
 8002150:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHIR_0, ads_data);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	461a      	mov	r2, r3
 8002158:	2105      	movs	r1, #5
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f83b 	bl	80021d6 <ADS_Prog_Write>
 8002160:	4603      	mov	r3, r0
 8002162:	461a      	mov	r2, r3
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	4413      	add	r3, r2
 8002168:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800216a:	200a      	movs	r0, #10
 800216c:	f006 f860 	bl	8008230 <HAL_Delay>
	ads_data[0] = IR_5V;
 8002170:	2301      	movs	r3, #1
 8002172:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CHIR_1, ads_data);
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	461a      	mov	r2, r3
 800217a:	2106      	movs	r1, #6
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 f82a 	bl	80021d6 <ADS_Prog_Write>
 8002182:	4603      	mov	r3, r0
 8002184:	461a      	mov	r2, r3
 8002186:	7dfb      	ldrb	r3, [r7, #23]
 8002188:	4413      	add	r3, r2
 800218a:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 800218c:	200a      	movs	r0, #10
 800218e:	f006 f84f 	bl	8008230 <HAL_Delay>
	ads_data[0] = 0xfc;
 8002192:	23fc      	movs	r3, #252	; 0xfc
 8002194:	753b      	strb	r3, [r7, #20]
	state += ADS_Prog_Write(ads, CH_PD, ads_data);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	461a      	mov	r2, r3
 800219c:	2102      	movs	r1, #2
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f819 	bl	80021d6 <ADS_Prog_Write>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	7dfb      	ldrb	r3, [r7, #23]
 80021aa:	4413      	add	r3, r2
 80021ac:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(10);
 80021ae:	200a      	movs	r0, #10
 80021b0:	f006 f83e 	bl	8008230 <HAL_Delay>
	// start the auto transmission by entering the appropriate state
	state += ADS_Cmd_Write(ads, AUTO_RST, ads_data);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	461a      	mov	r2, r3
 80021ba:	21a0      	movs	r1, #160	; 0xa0
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 f845 	bl	800224c <ADS_Cmd_Write>
 80021c2:	4603      	mov	r3, r0
 80021c4:	461a      	mov	r2, r3
 80021c6:	7dfb      	ldrb	r3, [r7, #23]
 80021c8:	4413      	add	r3, r2
 80021ca:	75fb      	strb	r3, [r7, #23]

	return state;
 80021cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <ADS_Prog_Write>:
	data[1] = rxbuf[3];
	return ret;
}

// after the write, data should contain the data (byte) written to the addressed register (check equality for evaluation)
HAL_StatusTypeDef ADS_Prog_Write(ADS8688 *ads, uint8_t addr, uint8_t *data) {
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b088      	sub	sp, #32
 80021da:	af02      	add	r7, sp, #8
 80021dc:	60f8      	str	r0, [r7, #12]
 80021de:	460b      	mov	r3, r1
 80021e0:	607a      	str	r2, [r7, #4]
 80021e2:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	uint8_t txbuf[2] = {data[0], (addr << 1 | 0x01)}; // [15:9]->address[6:0], [8]->1, [7:0]->data[7:0] (stm32 uses little endian so reverse it)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	753b      	strb	r3, [r7, #20]
 80021ea:	7afb      	ldrb	r3, [r7, #11]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	b25b      	sxtb	r3, r3
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	b25b      	sxtb	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	757b      	strb	r3, [r7, #21]
	uint8_t rxbuf[4];

	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_RESET);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6858      	ldr	r0, [r3, #4]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	891b      	ldrh	r3, [r3, #8]
 8002202:	2200      	movs	r2, #0
 8002204:	4619      	mov	r1, r3
 8002206:	f006 fee7 	bl	8008fd8 <HAL_GPIO_WritePin>
	ret = HAL_SPI_TransmitReceive(ads->spiHandle, txbuf, rxbuf, 2, 10);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	f107 0210 	add.w	r2, r7, #16
 8002212:	f107 0114 	add.w	r1, r7, #20
 8002216:	230a      	movs	r3, #10
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	2302      	movs	r3, #2
 800221c:	f007 fbff 	bl	8009a1e <HAL_SPI_TransmitReceive>
 8002220:	4603      	mov	r3, r0
 8002222:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_SET);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6858      	ldr	r0, [r3, #4]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	891b      	ldrh	r3, [r3, #8]
 800222c:	2201      	movs	r2, #1
 800222e:	4619      	mov	r1, r3
 8002230:	f006 fed2 	bl	8008fd8 <HAL_GPIO_WritePin>

	data[0] = rxbuf[3];
 8002234:	7cfa      	ldrb	r2, [r7, #19]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	3301      	adds	r3, #1
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
	return ret;
 8002242:	7dfb      	ldrb	r3, [r7, #23]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3718      	adds	r7, #24
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <ADS_Cmd_Write>:

HAL_StatusTypeDef ADS_Cmd_Write(ADS8688 *ads, uint8_t cmd, uint8_t *data) {
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af02      	add	r7, sp, #8
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	460b      	mov	r3, r1
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef ret;
	uint8_t txbuf[2] = {0x00,cmd}; // [15:9]->address[6:0], [8]->1, [7:0]->data[7:0] (stm32 uses little endian so reverse it)
 800225a:	2300      	movs	r3, #0
 800225c:	753b      	strb	r3, [r7, #20]
 800225e:	7afb      	ldrb	r3, [r7, #11]
 8002260:	757b      	strb	r3, [r7, #21]
	uint8_t rxbuf[4];

	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_RESET);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6858      	ldr	r0, [r3, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	891b      	ldrh	r3, [r3, #8]
 800226a:	2200      	movs	r2, #0
 800226c:	4619      	mov	r1, r3
 800226e:	f006 feb3 	bl	8008fd8 <HAL_GPIO_WritePin>
	ret = HAL_SPI_TransmitReceive(ads->spiHandle, txbuf, rxbuf, 2, 10);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	f107 0210 	add.w	r2, r7, #16
 800227a:	f107 0114 	add.w	r1, r7, #20
 800227e:	230a      	movs	r3, #10
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	2302      	movs	r3, #2
 8002284:	f007 fbcb 	bl	8009a1e <HAL_SPI_TransmitReceive>
 8002288:	4603      	mov	r3, r0
 800228a:	75fb      	strb	r3, [r7, #23]
	//ret = HAL_SPI_TransmitReceive_DMA(ads->spiHandle, txbuf, rxbuf, 2);
	HAL_GPIO_WritePin(ads->csPinBank, ads->csPin, GPIO_PIN_SET);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6858      	ldr	r0, [r3, #4]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	891b      	ldrh	r3, [r3, #8]
 8002294:	2201      	movs	r2, #1
 8002296:	4619      	mov	r1, r3
 8002298:	f006 fe9e 	bl	8008fd8 <HAL_GPIO_WritePin>

	data[0] = rxbuf[2];
 800229c:	7cba      	ldrb	r2, [r7, #18]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	701a      	strb	r2, [r3, #0]
	data[1] = rxbuf[3];
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3301      	adds	r3, #1
 80022a6:	7cfa      	ldrb	r2, [r7, #19]
 80022a8:	701a      	strb	r2, [r3, #0]
	return ret;
 80022aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <IIC_Init>:


//myiic.c_op
//初始化IIC
void IIC_Init(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
//   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;//普通输出模式
//   GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;//推挽输出
//   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;//100MHz
//   GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;//上拉
//   GPIO_Init(GPIOB, &GPIO_InitStructure);//初始化
	IIC_SCL=1;
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <IIC_Init+0x1c>)
 80022ba:	2201      	movs	r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
	IIC_SDA=1;
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <IIC_Init+0x20>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
}
 80022c4:	bf00      	nop
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	424082a0 	.word	0x424082a0
 80022d4:	424082a4 	.word	0x424082a4

080022d8 <IIC_Start>:
//产生IIC起始信号
void IIC_Start(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	SDA_OUT();     //sda线输出
 80022dc:	4b0f      	ldr	r3, [pc, #60]	; (800231c <IIC_Start+0x44>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0e      	ldr	r2, [pc, #56]	; (800231c <IIC_Start+0x44>)
 80022e2:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <IIC_Start+0x44>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0b      	ldr	r2, [pc, #44]	; (800231c <IIC_Start+0x44>)
 80022ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f2:	6013      	str	r3, [r2, #0]
	IIC_SDA=1;
 80022f4:	4b0a      	ldr	r3, [pc, #40]	; (8002320 <IIC_Start+0x48>)
 80022f6:	2201      	movs	r2, #1
 80022f8:	601a      	str	r2, [r3, #0]
	IIC_SCL=1;
 80022fa:	4b0a      	ldr	r3, [pc, #40]	; (8002324 <IIC_Start+0x4c>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
	delay_us(4);
 8002300:	2004      	movs	r0, #4
 8002302:	f7ff f96b 	bl	80015dc <delay_us>
 	IIC_SDA=0;//START:when CLK is high,DATA change form high to low
 8002306:	4b06      	ldr	r3, [pc, #24]	; (8002320 <IIC_Start+0x48>)
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 	delay_us(4);
 800230c:	2004      	movs	r0, #4
 800230e:	f7ff f965 	bl	80015dc <delay_us>
	IIC_SCL=0;//钳住I2C总线，准备发送或接收数据
 8002312:	4b04      	ldr	r3, [pc, #16]	; (8002324 <IIC_Start+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40020400 	.word	0x40020400
 8002320:	424082a4 	.word	0x424082a4
 8002324:	424082a0 	.word	0x424082a0

08002328 <IIC_Stop>:
//产生IIC停止信号
void IIC_Stop(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
	SDA_OUT();//sda线输出
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <IIC_Stop+0x44>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0e      	ldr	r2, [pc, #56]	; (800236c <IIC_Stop+0x44>)
 8002332:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	4b0c      	ldr	r3, [pc, #48]	; (800236c <IIC_Stop+0x44>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <IIC_Stop+0x44>)
 800233e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002342:	6013      	str	r3, [r2, #0]
	IIC_SCL=0;
 8002344:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <IIC_Stop+0x48>)
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
	IIC_SDA=0;//STOP:when CLK is high DATA change form low to high
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <IIC_Stop+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
	delay_us(4);
 8002350:	2004      	movs	r0, #4
 8002352:	f7ff f943 	bl	80015dc <delay_us>
	IIC_SCL=1;
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <IIC_Stop+0x48>)
 8002358:	2201      	movs	r2, #1
 800235a:	601a      	str	r2, [r3, #0]
	IIC_SDA=1;//发送I2C总线结束信号
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <IIC_Stop+0x4c>)
 800235e:	2201      	movs	r2, #1
 8002360:	601a      	str	r2, [r3, #0]
	delay_us(4);
 8002362:	2004      	movs	r0, #4
 8002364:	f7ff f93a 	bl	80015dc <delay_us>
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40020400 	.word	0x40020400
 8002370:	424082a0 	.word	0x424082a0
 8002374:	424082a4 	.word	0x424082a4

08002378 <IIC_Wait_Ack>:
//等待应答信号到来
//返回值：1，接收应答失败
//        0，接收应答成功
u8 IIC_Wait_Ack(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
	u8 ucErrTime=0;
 800237e:	2300      	movs	r3, #0
 8002380:	71fb      	strb	r3, [r7, #7]
	SDA_IN();      //SDA设置为输入
 8002382:	4b16      	ldr	r3, [pc, #88]	; (80023dc <IIC_Wait_Ack+0x64>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a15      	ldr	r2, [pc, #84]	; (80023dc <IIC_Wait_Ack+0x64>)
 8002388:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 800238c:	6013      	str	r3, [r2, #0]
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <IIC_Wait_Ack+0x64>)
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <IIC_Wait_Ack+0x64>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	6013      	str	r3, [r2, #0]
	IIC_SDA=1;HAL_Delay(1);
 8002396:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <IIC_Wait_Ack+0x68>)
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	2001      	movs	r0, #1
 800239e:	f005 ff47 	bl	8008230 <HAL_Delay>
	IIC_SCL=1;HAL_Delay(1);
 80023a2:	4b10      	ldr	r3, [pc, #64]	; (80023e4 <IIC_Wait_Ack+0x6c>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	2001      	movs	r0, #1
 80023aa:	f005 ff41 	bl	8008230 <HAL_Delay>
	while(READ_SDA)
 80023ae:	e009      	b.n	80023c4 <IIC_Wait_Ack+0x4c>
	{
		ucErrTime++;
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	3301      	adds	r3, #1
 80023b4:	71fb      	strb	r3, [r7, #7]
		if(ucErrTime>250)
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	2bfa      	cmp	r3, #250	; 0xfa
 80023ba:	d903      	bls.n	80023c4 <IIC_Wait_Ack+0x4c>
		{
			IIC_Stop();
 80023bc:	f7ff ffb4 	bl	8002328 <IIC_Stop>
			return 1;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e007      	b.n	80023d4 <IIC_Wait_Ack+0x5c>
	while(READ_SDA)
 80023c4:	4b08      	ldr	r3, [pc, #32]	; (80023e8 <IIC_Wait_Ack+0x70>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f1      	bne.n	80023b0 <IIC_Wait_Ack+0x38>
		}
	}
	IIC_SCL=0;//时钟输出0
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <IIC_Wait_Ack+0x6c>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]
	return 0;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40020400 	.word	0x40020400
 80023e0:	424082a4 	.word	0x424082a4
 80023e4:	424082a0 	.word	0x424082a0
 80023e8:	42408224 	.word	0x42408224

080023ec <IIC_Ack>:
//产生ACK应答
void IIC_Ack(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	IIC_SCL=0;
 80023f0:	4b0f      	ldr	r3, [pc, #60]	; (8002430 <IIC_Ack+0x44>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
	SDA_OUT();
 80023f6:	4b0f      	ldr	r3, [pc, #60]	; (8002434 <IIC_Ack+0x48>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a0e      	ldr	r2, [pc, #56]	; (8002434 <IIC_Ack+0x48>)
 80023fc:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <IIC_Ack+0x48>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a0b      	ldr	r2, [pc, #44]	; (8002434 <IIC_Ack+0x48>)
 8002408:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800240c:	6013      	str	r3, [r2, #0]
	IIC_SDA=0;
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <IIC_Ack+0x4c>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
	delay_us(2);
 8002414:	2002      	movs	r0, #2
 8002416:	f7ff f8e1 	bl	80015dc <delay_us>
	IIC_SCL=1;
 800241a:	4b05      	ldr	r3, [pc, #20]	; (8002430 <IIC_Ack+0x44>)
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]
	delay_us(2);
 8002420:	2002      	movs	r0, #2
 8002422:	f7ff f8db 	bl	80015dc <delay_us>
	IIC_SCL=0;
 8002426:	4b02      	ldr	r3, [pc, #8]	; (8002430 <IIC_Ack+0x44>)
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
}
 800242c:	bf00      	nop
 800242e:	bd80      	pop	{r7, pc}
 8002430:	424082a0 	.word	0x424082a0
 8002434:	40020400 	.word	0x40020400
 8002438:	424082a4 	.word	0x424082a4

0800243c <IIC_NAck>:
//不产生ACK应答
void IIC_NAck(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
	IIC_SCL=0;
 8002440:	4b0f      	ldr	r3, [pc, #60]	; (8002480 <IIC_NAck+0x44>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]
	SDA_OUT();
 8002446:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <IIC_NAck+0x48>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a0e      	ldr	r2, [pc, #56]	; (8002484 <IIC_NAck+0x48>)
 800244c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002450:	6013      	str	r3, [r2, #0]
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <IIC_NAck+0x48>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <IIC_NAck+0x48>)
 8002458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245c:	6013      	str	r3, [r2, #0]
	IIC_SDA=1;
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <IIC_NAck+0x4c>)
 8002460:	2201      	movs	r2, #1
 8002462:	601a      	str	r2, [r3, #0]
	delay_us(2);
 8002464:	2002      	movs	r0, #2
 8002466:	f7ff f8b9 	bl	80015dc <delay_us>
	IIC_SCL=1;
 800246a:	4b05      	ldr	r3, [pc, #20]	; (8002480 <IIC_NAck+0x44>)
 800246c:	2201      	movs	r2, #1
 800246e:	601a      	str	r2, [r3, #0]
	delay_us(2);
 8002470:	2002      	movs	r0, #2
 8002472:	f7ff f8b3 	bl	80015dc <delay_us>
	IIC_SCL=0;
 8002476:	4b02      	ldr	r3, [pc, #8]	; (8002480 <IIC_NAck+0x44>)
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	424082a0 	.word	0x424082a0
 8002484:	40020400 	.word	0x40020400
 8002488:	424082a4 	.word	0x424082a4

0800248c <IIC_Send_Byte>:
//IIC发送一个字节
//返回从机有无应答
//1，有应答
//0，无应答
void IIC_Send_Byte(u8 txd)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
    u8 t;
	SDA_OUT();
 8002496:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <IIC_Send_Byte+0x74>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a19      	ldr	r2, [pc, #100]	; (8002500 <IIC_Send_Byte+0x74>)
 800249c:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	4b17      	ldr	r3, [pc, #92]	; (8002500 <IIC_Send_Byte+0x74>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a16      	ldr	r2, [pc, #88]	; (8002500 <IIC_Send_Byte+0x74>)
 80024a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024ac:	6013      	str	r3, [r2, #0]
    IIC_SCL=0;//拉低时钟开始数据传输
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <IIC_Send_Byte+0x78>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
    for(t=0;t<8;t++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	e019      	b.n	80024ee <IIC_Send_Byte+0x62>
    {
        IIC_SDA=(txd&0x80)>>7;
 80024ba:	79fb      	ldrb	r3, [r7, #7]
 80024bc:	09db      	lsrs	r3, r3, #7
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <IIC_Send_Byte+0x7c>)
 80024c2:	601a      	str	r2, [r3, #0]
        txd<<=1;
 80024c4:	79fb      	ldrb	r3, [r7, #7]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	71fb      	strb	r3, [r7, #7]
		delay_us(2);   //对TEA5767这三个延时都是必须的
 80024ca:	2002      	movs	r0, #2
 80024cc:	f7ff f886 	bl	80015dc <delay_us>
		IIC_SCL=1;
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <IIC_Send_Byte+0x78>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
		delay_us(2);
 80024d6:	2002      	movs	r0, #2
 80024d8:	f7ff f880 	bl	80015dc <delay_us>
		IIC_SCL=0;
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <IIC_Send_Byte+0x78>)
 80024de:	2200      	movs	r2, #0
 80024e0:	601a      	str	r2, [r3, #0]
		delay_us(2);
 80024e2:	2002      	movs	r0, #2
 80024e4:	f7ff f87a 	bl	80015dc <delay_us>
    for(t=0;t<8;t++)
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	3301      	adds	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b07      	cmp	r3, #7
 80024f2:	d9e2      	bls.n	80024ba <IIC_Send_Byte+0x2e>
    }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40020400 	.word	0x40020400
 8002504:	424082a0 	.word	0x424082a0
 8002508:	424082a4 	.word	0x424082a4

0800250c <IIC_Read_Byte>:
//读1个字节，ack=1时，发送ACK，ack=0，发送nACK
u8 IIC_Read_Byte(unsigned char ack)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	71fb      	strb	r3, [r7, #7]
	unsigned char i,receive=0;
 8002516:	2300      	movs	r3, #0
 8002518:	73bb      	strb	r3, [r7, #14]
	SDA_IN();//SDA设置为输入
 800251a:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <IIC_Read_Byte+0x7c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a1a      	ldr	r2, [pc, #104]	; (8002588 <IIC_Read_Byte+0x7c>)
 8002520:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b18      	ldr	r3, [pc, #96]	; (8002588 <IIC_Read_Byte+0x7c>)
 8002528:	4a17      	ldr	r2, [pc, #92]	; (8002588 <IIC_Read_Byte+0x7c>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6013      	str	r3, [r2, #0]
    for(i=0;i<8;i++ )
 800252e:	2300      	movs	r3, #0
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	e018      	b.n	8002566 <IIC_Read_Byte+0x5a>
	{
        IIC_SCL=0;
 8002534:	4b15      	ldr	r3, [pc, #84]	; (800258c <IIC_Read_Byte+0x80>)
 8002536:	2200      	movs	r2, #0
 8002538:	601a      	str	r2, [r3, #0]
        delay_us(2);
 800253a:	2002      	movs	r0, #2
 800253c:	f7ff f84e 	bl	80015dc <delay_us>
		IIC_SCL=1;
 8002540:	4b12      	ldr	r3, [pc, #72]	; (800258c <IIC_Read_Byte+0x80>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]
        receive<<=1;
 8002546:	7bbb      	ldrb	r3, [r7, #14]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	73bb      	strb	r3, [r7, #14]
        if(READ_SDA)receive++;
 800254c:	4b10      	ldr	r3, [pc, #64]	; (8002590 <IIC_Read_Byte+0x84>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d002      	beq.n	800255a <IIC_Read_Byte+0x4e>
 8002554:	7bbb      	ldrb	r3, [r7, #14]
 8002556:	3301      	adds	r3, #1
 8002558:	73bb      	strb	r3, [r7, #14]
        delay_us(1);
 800255a:	2001      	movs	r0, #1
 800255c:	f7ff f83e 	bl	80015dc <delay_us>
    for(i=0;i<8;i++ )
 8002560:	7bfb      	ldrb	r3, [r7, #15]
 8002562:	3301      	adds	r3, #1
 8002564:	73fb      	strb	r3, [r7, #15]
 8002566:	7bfb      	ldrb	r3, [r7, #15]
 8002568:	2b07      	cmp	r3, #7
 800256a:	d9e3      	bls.n	8002534 <IIC_Read_Byte+0x28>
    }
    if (!ack)
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d102      	bne.n	8002578 <IIC_Read_Byte+0x6c>
        IIC_NAck();//发送nACK
 8002572:	f7ff ff63 	bl	800243c <IIC_NAck>
 8002576:	e001      	b.n	800257c <IIC_Read_Byte+0x70>
    else
        IIC_Ack(); //发送ACK
 8002578:	f7ff ff38 	bl	80023ec <IIC_Ack>
    return receive;
 800257c:	7bbb      	ldrb	r3, [r7, #14]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40020400 	.word	0x40020400
 800258c:	424082a0 	.word	0x424082a0
 8002590:	42408224 	.word	0x42408224

08002594 <AT24CXX_Init>:


//24cxx.c_op
//初始化IIC接口
void AT24CXX_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	IIC_Init();//IIC初始化
 8002598:	f7ff fe8c 	bl	80022b4 <IIC_Init>
}
 800259c:	bf00      	nop
 800259e:	bd80      	pop	{r7, pc}

080025a0 <AT24CXX_ReadOneByte>:
//在AT24CXX指定地址读出一个数据
//ReadAddr:开始读数的地址
//返回值  :读到的数据
u8 AT24CXX_ReadOneByte(u16 ReadAddr)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	4603      	mov	r3, r0
 80025a8:	80fb      	strh	r3, [r7, #6]
	u8 temp=0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	73fb      	strb	r3, [r7, #15]
    IIC_Start();
 80025ae:	f7ff fe93 	bl	80022d8 <IIC_Start>
	if(EE_TYPE>AT24C16)
	{
		IIC_Send_Byte(0XA0);	   //发送写命令
		IIC_Wait_Ack();
		IIC_Send_Byte(ReadAddr>>8);//发送高地址
	}else IIC_Send_Byte(0XA0+((ReadAddr/256)<<1));   //发送器件地址0XA0,写数据
 80025b2:	88fb      	ldrh	r3, [r7, #6]
 80025b4:	0a1b      	lsrs	r3, r3, #8
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	3b60      	subs	r3, #96	; 0x60
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff ff62 	bl	800248c <IIC_Send_Byte>
	IIC_Wait_Ack();
 80025c8:	f7ff fed6 	bl	8002378 <IIC_Wait_Ack>
    IIC_Send_Byte(ReadAddr%256);   //发送低地址
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff5b 	bl	800248c <IIC_Send_Byte>
	IIC_Wait_Ack();
 80025d6:	f7ff fecf 	bl	8002378 <IIC_Wait_Ack>
	IIC_Start();
 80025da:	f7ff fe7d 	bl	80022d8 <IIC_Start>
	IIC_Send_Byte(0XA1);           //进入接收模式
 80025de:	20a1      	movs	r0, #161	; 0xa1
 80025e0:	f7ff ff54 	bl	800248c <IIC_Send_Byte>
	IIC_Wait_Ack();
 80025e4:	f7ff fec8 	bl	8002378 <IIC_Wait_Ack>
    temp=IIC_Read_Byte(0);
 80025e8:	2000      	movs	r0, #0
 80025ea:	f7ff ff8f 	bl	800250c <IIC_Read_Byte>
 80025ee:	4603      	mov	r3, r0
 80025f0:	73fb      	strb	r3, [r7, #15]
    IIC_Stop();//产生一个停止条件
 80025f2:	f7ff fe99 	bl	8002328 <IIC_Stop>
	return temp;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <AT24CXX_WriteOneByte>:
//在AT24CXX指定地址写入一个数据
//WriteAddr  :写入数据的目的地址
//DataToWrite:要写入的数据
void AT24CXX_WriteOneByte(u16 WriteAddr,u8 DataToWrite)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	460a      	mov	r2, r1
 800260a:	80fb      	strh	r3, [r7, #6]
 800260c:	4613      	mov	r3, r2
 800260e:	717b      	strb	r3, [r7, #5]
    IIC_Start();
 8002610:	f7ff fe62 	bl	80022d8 <IIC_Start>
	if(EE_TYPE>AT24C16)
	{
		IIC_Send_Byte(0XA0);	    //发送写命令
		IIC_Wait_Ack();
		IIC_Send_Byte(WriteAddr>>8);//发送高地址
	}else IIC_Send_Byte(0XA0+((WriteAddr/256)<<1));   //发送器件地址0XA0,写数据
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	b29b      	uxth	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	b2db      	uxtb	r3, r3
 8002620:	3b60      	subs	r3, #96	; 0x60
 8002622:	b2db      	uxtb	r3, r3
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff31 	bl	800248c <IIC_Send_Byte>
	IIC_Wait_Ack();
 800262a:	f7ff fea5 	bl	8002378 <IIC_Wait_Ack>
    IIC_Send_Byte(WriteAddr%256);   //发送低地址
 800262e:	88fb      	ldrh	r3, [r7, #6]
 8002630:	b2db      	uxtb	r3, r3
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ff2a 	bl	800248c <IIC_Send_Byte>
	IIC_Wait_Ack();
 8002638:	f7ff fe9e 	bl	8002378 <IIC_Wait_Ack>
	IIC_Send_Byte(DataToWrite);     //发送字节
 800263c:	797b      	ldrb	r3, [r7, #5]
 800263e:	4618      	mov	r0, r3
 8002640:	f7ff ff24 	bl	800248c <IIC_Send_Byte>
	IIC_Wait_Ack();
 8002644:	f7ff fe98 	bl	8002378 <IIC_Wait_Ack>
    IIC_Stop();//产生一个停止条件
 8002648:	f7ff fe6e 	bl	8002328 <IIC_Stop>
	//delay_ms(10);
	HAL_Delay(10);
 800264c:	200a      	movs	r0, #10
 800264e:	f005 fdef 	bl	8008230 <HAL_Delay>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <AT24CXX_WriteLenByte>:
//该函数用于写入16bit或者32bit的数据.
//WriteAddr  :开始写入的地址
//DataToWrite:数据数组首地址
//Len        :要写入数据的长度2,4
void AT24CXX_WriteLenByte(u16 WriteAddr,u32 DataToWrite,u8 Len)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b084      	sub	sp, #16
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	6039      	str	r1, [r7, #0]
 8002664:	80fb      	strh	r3, [r7, #6]
 8002666:	4613      	mov	r3, r2
 8002668:	717b      	strb	r3, [r7, #5]
	u8 t;
	for(t=0;t<Len;t++)
 800266a:	2300      	movs	r3, #0
 800266c:	73fb      	strb	r3, [r7, #15]
 800266e:	e010      	b.n	8002692 <AT24CXX_WriteLenByte+0x38>
	{
		AT24CXX_WriteOneByte(WriteAddr+t,(DataToWrite>>(8*t))&0xff);
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	b29a      	uxth	r2, r3
 8002674:	88fb      	ldrh	r3, [r7, #6]
 8002676:	4413      	add	r3, r2
 8002678:	b298      	uxth	r0, r3
 800267a:	7bfb      	ldrb	r3, [r7, #15]
 800267c:	00db      	lsls	r3, r3, #3
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
 8002684:	b2db      	uxtb	r3, r3
 8002686:	4619      	mov	r1, r3
 8002688:	f7ff ffba 	bl	8002600 <AT24CXX_WriteOneByte>
	for(t=0;t<Len;t++)
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	3301      	adds	r3, #1
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	797b      	ldrb	r3, [r7, #5]
 8002696:	429a      	cmp	r2, r3
 8002698:	d3ea      	bcc.n	8002670 <AT24CXX_WriteLenByte+0x16>
	}
}
 800269a:	bf00      	nop
 800269c:	bf00      	nop
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <AT24CXX_ReadLenByte>:
//该函数用于读出16bit或者32bit的数据.
//ReadAddr   :开始读出的地址
//返回值     :数据
//Len        :要读出数据的长度2,4
u32 AT24CXX_ReadLenByte(u16 ReadAddr,u8 Len)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	4603      	mov	r3, r0
 80026ac:	460a      	mov	r2, r1
 80026ae:	80fb      	strh	r3, [r7, #6]
 80026b0:	4613      	mov	r3, r2
 80026b2:	717b      	strb	r3, [r7, #5]
	u8 t;
	u32 temp=0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	60bb      	str	r3, [r7, #8]
	for(t=0;t<Len;t++)
 80026b8:	2300      	movs	r3, #0
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	e018      	b.n	80026f0 <AT24CXX_ReadLenByte+0x4c>
	{
		temp<<=8;
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	60bb      	str	r3, [r7, #8]
		temp+=AT24CXX_ReadOneByte(ReadAddr+Len-t-1);
 80026c4:	797b      	ldrb	r3, [r7, #5]
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	4413      	add	r3, r2
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	1ad3      	subs	r3, r2, r3
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29b      	uxth	r3, r3
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff ff60 	bl	80025a0 <AT24CXX_ReadOneByte>
 80026e0:	4603      	mov	r3, r0
 80026e2:	461a      	mov	r2, r3
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	4413      	add	r3, r2
 80026e8:	60bb      	str	r3, [r7, #8]
	for(t=0;t<Len;t++)
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
 80026ec:	3301      	adds	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
 80026f0:	7bfa      	ldrb	r2, [r7, #15]
 80026f2:	797b      	ldrb	r3, [r7, #5]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d3e2      	bcc.n	80026be <AT24CXX_ReadLenByte+0x1a>
	}
	return temp;
 80026f8:	68bb      	ldr	r3, [r7, #8]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <TP_Write_Byte>:

//SPI写数据
//向触摸屏IC写入1byte数据
//num:要写入的数据
void TP_Write_Byte(u8 num)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	71fb      	strb	r3, [r7, #7]
	u8 count = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	73fb      	strb	r3, [r7, #15]
	for (count = 0; count < 8; count++)
 8002712:	2300      	movs	r3, #0
 8002714:	73fb      	strb	r3, [r7, #15]
 8002716:	e019      	b.n	800274c <TP_Write_Byte+0x48>
	{
		if (num & 0x80)
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	2b00      	cmp	r3, #0
 800271e:	da03      	bge.n	8002728 <TP_Write_Byte+0x24>
			TDIN = 1;
 8002720:	4b0e      	ldr	r3, [pc, #56]	; (800275c <TP_Write_Byte+0x58>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]
 8002726:	e002      	b.n	800272e <TP_Write_Byte+0x2a>
		else
			TDIN = 0;
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <TP_Write_Byte+0x58>)
 800272a:	2200      	movs	r2, #0
 800272c:	601a      	str	r2, [r3, #0]
		num <<= 1;
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	005b      	lsls	r3, r3, #1
 8002732:	71fb      	strb	r3, [r7, #7]
		TCLK = 0;
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <TP_Write_Byte+0x5c>)
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
		delay_us(1);
 800273a:	2001      	movs	r0, #1
 800273c:	f7fe ff4e 	bl	80015dc <delay_us>
		TCLK = 1; //上升沿有效
 8002740:	4b07      	ldr	r3, [pc, #28]	; (8002760 <TP_Write_Byte+0x5c>)
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]
	for (count = 0; count < 8; count++)
 8002746:	7bfb      	ldrb	r3, [r7, #15]
 8002748:	3301      	adds	r3, #1
 800274a:	73fb      	strb	r3, [r7, #15]
 800274c:	7bfb      	ldrb	r3, [r7, #15]
 800274e:	2b07      	cmp	r3, #7
 8002750:	d9e2      	bls.n	8002718 <TP_Write_Byte+0x14>
	}
}
 8002752:	bf00      	nop
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	424282ac 	.word	0x424282ac
 8002760:	42408280 	.word	0x42408280

08002764 <TP_Read_AD>:
//SPI读数据
//从触摸屏IC读取adc值
//CMD:指令
//返回值:读到的数据
u16 TP_Read_AD(u8 CMD)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
	u8 count = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
	u16 Num = 0;
 8002772:	2300      	movs	r3, #0
 8002774:	81bb      	strh	r3, [r7, #12]
	TCLK = 0;			//先拉低时钟
 8002776:	4b23      	ldr	r3, [pc, #140]	; (8002804 <TP_Read_AD+0xa0>)
 8002778:	2200      	movs	r2, #0
 800277a:	601a      	str	r2, [r3, #0]
	TDIN = 0;			//拉低数据线
 800277c:	4b22      	ldr	r3, [pc, #136]	; (8002808 <TP_Read_AD+0xa4>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
	TCS = 0;			//选中触摸屏IC
 8002782:	4b22      	ldr	r3, [pc, #136]	; (800280c <TP_Read_AD+0xa8>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
	TP_Write_Byte(CMD); //发送命令字
 8002788:	79fb      	ldrb	r3, [r7, #7]
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff ffba 	bl	8002704 <TP_Write_Byte>
	delay_us(6);		//ADS7846的转换时间最长为6us
 8002790:	2006      	movs	r0, #6
 8002792:	f7fe ff23 	bl	80015dc <delay_us>
	TCLK = 0;
 8002796:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <TP_Read_AD+0xa0>)
 8002798:	2200      	movs	r2, #0
 800279a:	601a      	str	r2, [r3, #0]
	delay_us(1);
 800279c:	2001      	movs	r0, #1
 800279e:	f7fe ff1d 	bl	80015dc <delay_us>
	TCLK = 1; //给1个时钟，清除BUSY
 80027a2:	4b18      	ldr	r3, [pc, #96]	; (8002804 <TP_Read_AD+0xa0>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
	delay_us(1);
 80027a8:	2001      	movs	r0, #1
 80027aa:	f7fe ff17 	bl	80015dc <delay_us>
	TCLK = 0;
 80027ae:	4b15      	ldr	r3, [pc, #84]	; (8002804 <TP_Read_AD+0xa0>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
	for (count = 0; count < 16; count++) //读出16位数据,只有高12位有效
 80027b4:	2300      	movs	r3, #0
 80027b6:	73fb      	strb	r3, [r7, #15]
 80027b8:	e015      	b.n	80027e6 <TP_Read_AD+0x82>
	{
		Num <<= 1;
 80027ba:	89bb      	ldrh	r3, [r7, #12]
 80027bc:	005b      	lsls	r3, r3, #1
 80027be:	81bb      	strh	r3, [r7, #12]
		TCLK = 0; //下降沿有效
 80027c0:	4b10      	ldr	r3, [pc, #64]	; (8002804 <TP_Read_AD+0xa0>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
		delay_us(1);
 80027c6:	2001      	movs	r0, #1
 80027c8:	f7fe ff08 	bl	80015dc <delay_us>
		TCLK = 1;
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <TP_Read_AD+0xa0>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
		if (DOUT)
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <TP_Read_AD+0xac>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <TP_Read_AD+0x7c>
			Num++;
 80027da:	89bb      	ldrh	r3, [r7, #12]
 80027dc:	3301      	adds	r3, #1
 80027de:	81bb      	strh	r3, [r7, #12]
	for (count = 0; count < 16; count++) //读出16位数据,只有高12位有效
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	3301      	adds	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b0f      	cmp	r3, #15
 80027ea:	d9e6      	bls.n	80027ba <TP_Read_AD+0x56>
	}
	Num >>= 4; //只有高12位有效.
 80027ec:	89bb      	ldrh	r3, [r7, #12]
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	81bb      	strh	r3, [r7, #12]
	TCS = 1;   //释放片选
 80027f2:	4b06      	ldr	r3, [pc, #24]	; (800280c <TP_Read_AD+0xa8>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	601a      	str	r2, [r3, #0]
	return (Num);
 80027f8:	89bb      	ldrh	r3, [r7, #12]
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3710      	adds	r7, #16
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	42408280 	.word	0x42408280
 8002808:	424282ac 	.word	0x424282ac
 800280c:	424102b4 	.word	0x424102b4
 8002810:	42408208 	.word	0x42408208

08002814 <TP_Read_XOY>:
//xy:指令（CMD_RDX/CMD_RDY）
//返回值:读到的数据
#define READ_TIMES 5 //读取次数
#define LOST_VAL 1	 //丢弃值
u16 TP_Read_XOY(u8 xy)
{
 8002814:	b590      	push	{r4, r7, lr}
 8002816:	b089      	sub	sp, #36	; 0x24
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	71fb      	strb	r3, [r7, #7]
	u16 i, j;
	u16 buf[READ_TIMES];
	u16 sum = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	837b      	strh	r3, [r7, #26]
	u16 temp;
	for (i = 0; i < READ_TIMES; i++)
 8002822:	2300      	movs	r3, #0
 8002824:	83fb      	strh	r3, [r7, #30]
 8002826:	e00f      	b.n	8002848 <TP_Read_XOY+0x34>
		buf[i] = TP_Read_AD(xy);
 8002828:	8bfc      	ldrh	r4, [r7, #30]
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff ff99 	bl	8002764 <TP_Read_AD>
 8002832:	4603      	mov	r3, r0
 8002834:	461a      	mov	r2, r3
 8002836:	0063      	lsls	r3, r4, #1
 8002838:	f107 0120 	add.w	r1, r7, #32
 800283c:	440b      	add	r3, r1
 800283e:	f823 2c14 	strh.w	r2, [r3, #-20]
	for (i = 0; i < READ_TIMES; i++)
 8002842:	8bfb      	ldrh	r3, [r7, #30]
 8002844:	3301      	adds	r3, #1
 8002846:	83fb      	strh	r3, [r7, #30]
 8002848:	8bfb      	ldrh	r3, [r7, #30]
 800284a:	2b04      	cmp	r3, #4
 800284c:	d9ec      	bls.n	8002828 <TP_Read_XOY+0x14>
	for (i = 0; i < READ_TIMES - 1; i++) //排序
 800284e:	2300      	movs	r3, #0
 8002850:	83fb      	strh	r3, [r7, #30]
 8002852:	e03b      	b.n	80028cc <TP_Read_XOY+0xb8>
	{
		for (j = i + 1; j < READ_TIMES; j++)
 8002854:	8bfb      	ldrh	r3, [r7, #30]
 8002856:	3301      	adds	r3, #1
 8002858:	83bb      	strh	r3, [r7, #28]
 800285a:	e031      	b.n	80028c0 <TP_Read_XOY+0xac>
		{
			if (buf[i] > buf[j]) //升序排列
 800285c:	8bfb      	ldrh	r3, [r7, #30]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	f107 0220 	add.w	r2, r7, #32
 8002864:	4413      	add	r3, r2
 8002866:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 800286a:	8bbb      	ldrh	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	f107 0120 	add.w	r1, r7, #32
 8002872:	440b      	add	r3, r1
 8002874:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8002878:	429a      	cmp	r2, r3
 800287a:	d91e      	bls.n	80028ba <TP_Read_XOY+0xa6>
			{
				temp = buf[i];
 800287c:	8bfb      	ldrh	r3, [r7, #30]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	f107 0220 	add.w	r2, r7, #32
 8002884:	4413      	add	r3, r2
 8002886:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800288a:	833b      	strh	r3, [r7, #24]
				buf[i] = buf[j];
 800288c:	8bbb      	ldrh	r3, [r7, #28]
 800288e:	8bfa      	ldrh	r2, [r7, #30]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	f107 0120 	add.w	r1, r7, #32
 8002896:	440b      	add	r3, r1
 8002898:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 800289c:	0053      	lsls	r3, r2, #1
 800289e:	f107 0220 	add.w	r2, r7, #32
 80028a2:	4413      	add	r3, r2
 80028a4:	460a      	mov	r2, r1
 80028a6:	f823 2c14 	strh.w	r2, [r3, #-20]
				buf[j] = temp;
 80028aa:	8bbb      	ldrh	r3, [r7, #28]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	f107 0220 	add.w	r2, r7, #32
 80028b2:	4413      	add	r3, r2
 80028b4:	8b3a      	ldrh	r2, [r7, #24]
 80028b6:	f823 2c14 	strh.w	r2, [r3, #-20]
		for (j = i + 1; j < READ_TIMES; j++)
 80028ba:	8bbb      	ldrh	r3, [r7, #28]
 80028bc:	3301      	adds	r3, #1
 80028be:	83bb      	strh	r3, [r7, #28]
 80028c0:	8bbb      	ldrh	r3, [r7, #28]
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d9ca      	bls.n	800285c <TP_Read_XOY+0x48>
	for (i = 0; i < READ_TIMES - 1; i++) //排序
 80028c6:	8bfb      	ldrh	r3, [r7, #30]
 80028c8:	3301      	adds	r3, #1
 80028ca:	83fb      	strh	r3, [r7, #30]
 80028cc:	8bfb      	ldrh	r3, [r7, #30]
 80028ce:	2b03      	cmp	r3, #3
 80028d0:	d9c0      	bls.n	8002854 <TP_Read_XOY+0x40>
			}
		}
	}
	sum = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	837b      	strh	r3, [r7, #26]
	for (i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++)
 80028d6:	2301      	movs	r3, #1
 80028d8:	83fb      	strh	r3, [r7, #30]
 80028da:	e00c      	b.n	80028f6 <TP_Read_XOY+0xe2>
		sum += buf[i];
 80028dc:	8bfb      	ldrh	r3, [r7, #30]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	f107 0220 	add.w	r2, r7, #32
 80028e4:	4413      	add	r3, r2
 80028e6:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 80028ea:	8b7b      	ldrh	r3, [r7, #26]
 80028ec:	4413      	add	r3, r2
 80028ee:	837b      	strh	r3, [r7, #26]
	for (i = LOST_VAL; i < READ_TIMES - LOST_VAL; i++)
 80028f0:	8bfb      	ldrh	r3, [r7, #30]
 80028f2:	3301      	adds	r3, #1
 80028f4:	83fb      	strh	r3, [r7, #30]
 80028f6:	8bfb      	ldrh	r3, [r7, #30]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d9ef      	bls.n	80028dc <TP_Read_XOY+0xc8>
	temp = sum / (READ_TIMES - 2 * LOST_VAL);
 80028fc:	8b7b      	ldrh	r3, [r7, #26]
 80028fe:	4a05      	ldr	r2, [pc, #20]	; (8002914 <TP_Read_XOY+0x100>)
 8002900:	fba2 2303 	umull	r2, r3, r2, r3
 8002904:	085b      	lsrs	r3, r3, #1
 8002906:	833b      	strh	r3, [r7, #24]
	return temp;
 8002908:	8b3b      	ldrh	r3, [r7, #24]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3724      	adds	r7, #36	; 0x24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd90      	pop	{r4, r7, pc}
 8002912:	bf00      	nop
 8002914:	aaaaaaab 	.word	0xaaaaaaab

08002918 <TP_Read_XY>:
//读取x,y坐标
//最小值不能少于100.
//x,y:读取到的坐标值
//返回值:0,失败;1,成功。
u8 TP_Read_XY(u16 *x, u16 *y)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
	u16 xtemp, ytemp;
	xtemp = TP_Read_XOY(CMD_RDX);
 8002922:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <TP_Read_XY+0x3c>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ff74 	bl	8002814 <TP_Read_XOY>
 800292c:	4603      	mov	r3, r0
 800292e:	81fb      	strh	r3, [r7, #14]
	ytemp = TP_Read_XOY(CMD_RDY);
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <TP_Read_XY+0x40>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff6d 	bl	8002814 <TP_Read_XOY>
 800293a:	4603      	mov	r3, r0
 800293c:	81bb      	strh	r3, [r7, #12]
	//if(xtemp<100||ytemp<100)return 0;//读数失败
	*x = xtemp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	89fa      	ldrh	r2, [r7, #14]
 8002942:	801a      	strh	r2, [r3, #0]
	*y = ytemp;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	89ba      	ldrh	r2, [r7, #12]
 8002948:	801a      	strh	r2, [r3, #0]
	return 1; //读数成功
 800294a:	2301      	movs	r3, #1
}
 800294c:	4618      	mov	r0, r3
 800294e:	3710      	adds	r7, #16
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	20000518 	.word	0x20000518
 8002958:	20000519 	.word	0x20000519

0800295c <TP_Read_XY2>:
//该函数能大大提高准确度
//x,y:读取到的坐标值
//返回值:0,失败;1,成功。
#define ERR_RANGE 50 //误差范围
u8 TP_Read_XY2(u16 *x, u16 *y)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
	u16 x1, y1;
	u16 x2, y2;
	u8 flag;
	flag = TP_Read_XY(&x1, &y1);
 8002966:	f107 0212 	add.w	r2, r7, #18
 800296a:	f107 0314 	add.w	r3, r7, #20
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ffd1 	bl	8002918 <TP_Read_XY>
 8002976:	4603      	mov	r3, r0
 8002978:	75fb      	strb	r3, [r7, #23]
	if (flag == 0)
 800297a:	7dfb      	ldrb	r3, [r7, #23]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <TP_Read_XY2+0x28>
		return (0);
 8002980:	2300      	movs	r3, #0
 8002982:	e049      	b.n	8002a18 <TP_Read_XY2+0xbc>
	flag = TP_Read_XY(&x2, &y2);
 8002984:	f107 020e 	add.w	r2, r7, #14
 8002988:	f107 0310 	add.w	r3, r7, #16
 800298c:	4611      	mov	r1, r2
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff ffc2 	bl	8002918 <TP_Read_XY>
 8002994:	4603      	mov	r3, r0
 8002996:	75fb      	strb	r3, [r7, #23]
	if (flag == 0)
 8002998:	7dfb      	ldrb	r3, [r7, #23]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <TP_Read_XY2+0x46>
		return (0);
 800299e:	2300      	movs	r3, #0
 80029a0:	e03a      	b.n	8002a18 <TP_Read_XY2+0xbc>
	if (((x2 <= x1 && x1 < x2 + ERR_RANGE) || (x1 <= x2 && x2 < x1 + ERR_RANGE)) //前后两次采样在+-50内
 80029a2:	8a3a      	ldrh	r2, [r7, #16]
 80029a4:	8abb      	ldrh	r3, [r7, #20]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d804      	bhi.n	80029b4 <TP_Read_XY2+0x58>
 80029aa:	8a3b      	ldrh	r3, [r7, #16]
 80029ac:	3331      	adds	r3, #49	; 0x31
 80029ae:	8aba      	ldrh	r2, [r7, #20]
 80029b0:	4293      	cmp	r3, r2
 80029b2:	da08      	bge.n	80029c6 <TP_Read_XY2+0x6a>
 80029b4:	8aba      	ldrh	r2, [r7, #20]
 80029b6:	8a3b      	ldrh	r3, [r7, #16]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d82c      	bhi.n	8002a16 <TP_Read_XY2+0xba>
 80029bc:	8abb      	ldrh	r3, [r7, #20]
 80029be:	3331      	adds	r3, #49	; 0x31
 80029c0:	8a3a      	ldrh	r2, [r7, #16]
 80029c2:	4293      	cmp	r3, r2
 80029c4:	db27      	blt.n	8002a16 <TP_Read_XY2+0xba>
		&& ((y2 <= y1 && y1 < y2 + ERR_RANGE) || (y1 <= y2 && y2 < y1 + ERR_RANGE)))
 80029c6:	89fa      	ldrh	r2, [r7, #14]
 80029c8:	8a7b      	ldrh	r3, [r7, #18]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d804      	bhi.n	80029d8 <TP_Read_XY2+0x7c>
 80029ce:	89fb      	ldrh	r3, [r7, #14]
 80029d0:	3331      	adds	r3, #49	; 0x31
 80029d2:	8a7a      	ldrh	r2, [r7, #18]
 80029d4:	4293      	cmp	r3, r2
 80029d6:	da08      	bge.n	80029ea <TP_Read_XY2+0x8e>
 80029d8:	8a7a      	ldrh	r2, [r7, #18]
 80029da:	89fb      	ldrh	r3, [r7, #14]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d81a      	bhi.n	8002a16 <TP_Read_XY2+0xba>
 80029e0:	8a7b      	ldrh	r3, [r7, #18]
 80029e2:	3331      	adds	r3, #49	; 0x31
 80029e4:	89fa      	ldrh	r2, [r7, #14]
 80029e6:	4293      	cmp	r3, r2
 80029e8:	db15      	blt.n	8002a16 <TP_Read_XY2+0xba>
	{
		*x = (x1 + x2) / 2;
 80029ea:	8abb      	ldrh	r3, [r7, #20]
 80029ec:	461a      	mov	r2, r3
 80029ee:	8a3b      	ldrh	r3, [r7, #16]
 80029f0:	4413      	add	r3, r2
 80029f2:	0fda      	lsrs	r2, r3, #31
 80029f4:	4413      	add	r3, r2
 80029f6:	105b      	asrs	r3, r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	801a      	strh	r2, [r3, #0]
		*y = (y1 + y2) / 2;
 80029fe:	8a7b      	ldrh	r3, [r7, #18]
 8002a00:	461a      	mov	r2, r3
 8002a02:	89fb      	ldrh	r3, [r7, #14]
 8002a04:	4413      	add	r3, r2
 8002a06:	0fda      	lsrs	r2, r3, #31
 8002a08:	4413      	add	r3, r2
 8002a0a:	105b      	asrs	r3, r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	801a      	strh	r2, [r3, #0]
		return 1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <TP_Read_XY2+0xbc>
	}
	else
		return 0;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3718      	adds	r7, #24
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <TP_Drow_Touch_Point>:
//画一个触摸点
//用来校准用的
//x,y:坐标
//color:颜色
void TP_Drow_Touch_Point(u16 x, u16 y, u16 color)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	80fb      	strh	r3, [r7, #6]
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	80bb      	strh	r3, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	807b      	strh	r3, [r7, #2]
	POINT_COLOR = color;
 8002a32:	4a24      	ldr	r2, [pc, #144]	; (8002ac4 <TP_Drow_Touch_Point+0xa4>)
 8002a34:	887b      	ldrh	r3, [r7, #2]
 8002a36:	8013      	strh	r3, [r2, #0]
	LCD_DrawLine(x - 12, y, x + 13, y); //横线
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	3b0c      	subs	r3, #12
 8002a3c:	b298      	uxth	r0, r3
 8002a3e:	88fb      	ldrh	r3, [r7, #6]
 8002a40:	330d      	adds	r3, #13
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	88bb      	ldrh	r3, [r7, #4]
 8002a46:	88b9      	ldrh	r1, [r7, #4]
 8002a48:	f005 f8c6 	bl	8007bd8 <LCD_DrawLine>
	LCD_DrawLine(x, y - 12, x, y + 13); //竖线
 8002a4c:	88bb      	ldrh	r3, [r7, #4]
 8002a4e:	3b0c      	subs	r3, #12
 8002a50:	b299      	uxth	r1, r3
 8002a52:	88bb      	ldrh	r3, [r7, #4]
 8002a54:	330d      	adds	r3, #13
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	88fa      	ldrh	r2, [r7, #6]
 8002a5a:	88f8      	ldrh	r0, [r7, #6]
 8002a5c:	f005 f8bc 	bl	8007bd8 <LCD_DrawLine>
	LCD_DrawPoint(x + 1, y + 1);
 8002a60:	88fb      	ldrh	r3, [r7, #6]
 8002a62:	3301      	adds	r3, #1
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	88bb      	ldrh	r3, [r7, #4]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4610      	mov	r0, r2
 8002a70:	f001 fa36 	bl	8003ee0 <LCD_DrawPoint>
	LCD_DrawPoint(x - 1, y + 1);
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	88bb      	ldrh	r3, [r7, #4]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	4619      	mov	r1, r3
 8002a82:	4610      	mov	r0, r2
 8002a84:	f001 fa2c 	bl	8003ee0 <LCD_DrawPoint>
	LCD_DrawPoint(x + 1, y - 1);
 8002a88:	88fb      	ldrh	r3, [r7, #6]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	88bb      	ldrh	r3, [r7, #4]
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	4619      	mov	r1, r3
 8002a96:	4610      	mov	r0, r2
 8002a98:	f001 fa22 	bl	8003ee0 <LCD_DrawPoint>
	LCD_DrawPoint(x - 1, y - 1);
 8002a9c:	88fb      	ldrh	r3, [r7, #6]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	88bb      	ldrh	r3, [r7, #4]
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4610      	mov	r0, r2
 8002aac:	f001 fa18 	bl	8003ee0 <LCD_DrawPoint>
	LCD_Draw_Circle(x, y, 6); //画中心圈
 8002ab0:	88b9      	ldrh	r1, [r7, #4]
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	2206      	movs	r2, #6
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f005 f912 	bl	8007ce0 <LCD_Draw_Circle>
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	20000730 	.word	0x20000730

08002ac8 <TP_Scan>:
//触摸按键扫描
//tp:0,屏幕坐标;1,物理坐标(校准等特殊场合用)
//返回值:当前触屏状态.
//0,触屏无触摸;1,触屏有触摸
u8 TP_Scan(u8 tp)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
	if (PEN == 0) //有按键按下
 8002ad2:	4b42      	ldr	r3, [pc, #264]	; (8002bdc <TP_Scan+0x114>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d157      	bne.n	8002b8a <TP_Scan+0xc2>
	{
		if (tp)
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d004      	beq.n	8002aea <TP_Scan+0x22>
			TP_Read_XY2(&tp_dev.x[0], &tp_dev.y[0]);	  //读取物理坐标
 8002ae0:	493f      	ldr	r1, [pc, #252]	; (8002be0 <TP_Scan+0x118>)
 8002ae2:	4840      	ldr	r0, [pc, #256]	; (8002be4 <TP_Scan+0x11c>)
 8002ae4:	f7ff ff3a 	bl	800295c <TP_Read_XY2>
 8002ae8:	e03c      	b.n	8002b64 <TP_Scan+0x9c>
		else if (TP_Read_XY2(&tp_dev.x[0], &tp_dev.y[0])) //读取屏幕坐标
 8002aea:	493d      	ldr	r1, [pc, #244]	; (8002be0 <TP_Scan+0x118>)
 8002aec:	483d      	ldr	r0, [pc, #244]	; (8002be4 <TP_Scan+0x11c>)
 8002aee:	f7ff ff35 	bl	800295c <TP_Read_XY2>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d035      	beq.n	8002b64 <TP_Scan+0x9c>
		{
			tp_dev.x[0] = tp_dev.xfac * tp_dev.x[0] + tp_dev.xoff; //将结果转换为屏幕坐标
 8002af8:	4b3b      	ldr	r3, [pc, #236]	; (8002be8 <TP_Scan+0x120>)
 8002afa:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8002afe:	4b3a      	ldr	r3, [pc, #232]	; (8002be8 <TP_Scan+0x120>)
 8002b00:	899b      	ldrh	r3, [r3, #12]
 8002b02:	ee07 3a90 	vmov	s15, r3
 8002b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b0e:	4b36      	ldr	r3, [pc, #216]	; (8002be8 <TP_Scan+0x120>)
 8002b10:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002b14:	ee07 3a90 	vmov	s15, r3
 8002b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b24:	ee17 3a90 	vmov	r3, s15
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	4b2f      	ldr	r3, [pc, #188]	; (8002be8 <TP_Scan+0x120>)
 8002b2c:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0] = tp_dev.yfac * tp_dev.y[0] + tp_dev.yoff;
 8002b2e:	4b2e      	ldr	r3, [pc, #184]	; (8002be8 <TP_Scan+0x120>)
 8002b30:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002b34:	4b2c      	ldr	r3, [pc, #176]	; (8002be8 <TP_Scan+0x120>)
 8002b36:	8adb      	ldrh	r3, [r3, #22]
 8002b38:	ee07 3a90 	vmov	s15, r3
 8002b3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b40:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b44:	4b28      	ldr	r3, [pc, #160]	; (8002be8 <TP_Scan+0x120>)
 8002b46:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b5a:	ee17 3a90 	vmov	r3, s15
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	4b21      	ldr	r3, [pc, #132]	; (8002be8 <TP_Scan+0x120>)
 8002b62:	82da      	strh	r2, [r3, #22]
		}
		if ((tp_dev.sta & TP_PRES_DOWN) == 0) //之前没有被按下
 8002b64:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <TP_Scan+0x120>)
 8002b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	db2a      	blt.n	8002bc6 <TP_Scan+0xfe>
		{
			tp_dev.sta = TP_PRES_DOWN | TP_CATH_PRES; //按键按下
 8002b70:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <TP_Scan+0x120>)
 8002b72:	22c0      	movs	r2, #192	; 0xc0
 8002b74:	f883 2020 	strb.w	r2, [r3, #32]
			tp_dev.x[4] = tp_dev.x[0];				  //记录第一次按下时的坐标
 8002b78:	4b1b      	ldr	r3, [pc, #108]	; (8002be8 <TP_Scan+0x120>)
 8002b7a:	899a      	ldrh	r2, [r3, #12]
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	; (8002be8 <TP_Scan+0x120>)
 8002b7e:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4] = tp_dev.y[0];
 8002b80:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <TP_Scan+0x120>)
 8002b82:	8ada      	ldrh	r2, [r3, #22]
 8002b84:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <TP_Scan+0x120>)
 8002b86:	83da      	strh	r2, [r3, #30]
 8002b88:	e01d      	b.n	8002bc6 <TP_Scan+0xfe>
		}
	}
	else
	{
		if (tp_dev.sta & TP_PRES_DOWN) //之前是被按下的
 8002b8a:	4b17      	ldr	r3, [pc, #92]	; (8002be8 <TP_Scan+0x120>)
 8002b8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b90:	b25b      	sxtb	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	da09      	bge.n	8002baa <TP_Scan+0xe2>
		{
			tp_dev.sta &= ~(1 << 7); //标记按键松开
 8002b96:	4b14      	ldr	r3, [pc, #80]	; (8002be8 <TP_Scan+0x120>)
 8002b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <TP_Scan+0x120>)
 8002ba4:	f883 2020 	strb.w	r2, [r3, #32]
 8002ba8:	e00d      	b.n	8002bc6 <TP_Scan+0xfe>
		}
		else //之前就没有被按下
		{
			tp_dev.x[4] = 0;
 8002baa:	4b0f      	ldr	r3, [pc, #60]	; (8002be8 <TP_Scan+0x120>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	829a      	strh	r2, [r3, #20]
			tp_dev.y[4] = 0;
 8002bb0:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <TP_Scan+0x120>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	83da      	strh	r2, [r3, #30]
			tp_dev.x[0] = 0xffff;
 8002bb6:	4b0c      	ldr	r3, [pc, #48]	; (8002be8 <TP_Scan+0x120>)
 8002bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bbc:	819a      	strh	r2, [r3, #12]
			tp_dev.y[0] = 0xffff;
 8002bbe:	4b0a      	ldr	r3, [pc, #40]	; (8002be8 <TP_Scan+0x120>)
 8002bc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc4:	82da      	strh	r2, [r3, #22]
		}
	}
	return tp_dev.sta & TP_PRES_DOWN; //返回当前的触屏状态
 8002bc6:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <TP_Scan+0x120>)
 8002bc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002bd0:	b2db      	uxtb	r3, r3
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	42408204 	.word	0x42408204
 8002be0:	200004fa 	.word	0x200004fa
 8002be4:	200004f0 	.word	0x200004f0
 8002be8:	200004e4 	.word	0x200004e4

08002bec <TP_Save_Adjdata>:
//////////////////////////////////////////////////////////////////////////
//保存在EEPROM里面的地址区间基址,占用13个字节(RANGE:SAVE_ADDR_BASE~SAVE_ADDR_BASE+12)
#define SAVE_ADDR_BASE 40
//保存校准参数
void TP_Save_Adjdata(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
	s32 temp;
	//保存校正结果!
	temp = tp_dev.xfac * 100000000; //保存x校正因素
 8002bf2:	4b23      	ldr	r3, [pc, #140]	; (8002c80 <TP_Save_Adjdata+0x94>)
 8002bf4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002bf8:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002c84 <TP_Save_Adjdata+0x98>
 8002bfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c04:	ee17 3a90 	vmov	r3, s15
 8002c08:	607b      	str	r3, [r7, #4]
	AT24CXX_WriteLenByte(SAVE_ADDR_BASE, temp, 4);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	2028      	movs	r0, #40	; 0x28
 8002c12:	f7ff fd22 	bl	800265a <AT24CXX_WriteLenByte>
	temp = tp_dev.yfac * 100000000; //保存y校正因素
 8002c16:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <TP_Save_Adjdata+0x94>)
 8002c18:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002c1c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8002c84 <TP_Save_Adjdata+0x98>
 8002c20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c28:	ee17 3a90 	vmov	r3, s15
 8002c2c:	607b      	str	r3, [r7, #4]
	AT24CXX_WriteLenByte(SAVE_ADDR_BASE + 4, temp, 4);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2204      	movs	r2, #4
 8002c32:	4619      	mov	r1, r3
 8002c34:	202c      	movs	r0, #44	; 0x2c
 8002c36:	f7ff fd10 	bl	800265a <AT24CXX_WriteLenByte>
	//保存x偏移量
	AT24CXX_WriteLenByte(SAVE_ADDR_BASE + 8, tp_dev.xoff, 2);
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <TP_Save_Adjdata+0x94>)
 8002c3c:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8002c40:	2202      	movs	r2, #2
 8002c42:	4619      	mov	r1, r3
 8002c44:	2030      	movs	r0, #48	; 0x30
 8002c46:	f7ff fd08 	bl	800265a <AT24CXX_WriteLenByte>
	//保存y偏移量
	AT24CXX_WriteLenByte(SAVE_ADDR_BASE + 10, tp_dev.yoff, 2);
 8002c4a:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <TP_Save_Adjdata+0x94>)
 8002c4c:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 8002c50:	2202      	movs	r2, #2
 8002c52:	4619      	mov	r1, r3
 8002c54:	2032      	movs	r0, #50	; 0x32
 8002c56:	f7ff fd00 	bl	800265a <AT24CXX_WriteLenByte>
	//保存触屏类型
	AT24CXX_WriteOneByte(SAVE_ADDR_BASE + 12, tp_dev.touchtype);
 8002c5a:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <TP_Save_Adjdata+0x94>)
 8002c5c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c60:	4619      	mov	r1, r3
 8002c62:	2034      	movs	r0, #52	; 0x34
 8002c64:	f7ff fccc 	bl	8002600 <AT24CXX_WriteOneByte>
	temp = 0X0A; //标记校准过了
 8002c68:	230a      	movs	r3, #10
 8002c6a:	607b      	str	r3, [r7, #4]
	AT24CXX_WriteOneByte(SAVE_ADDR_BASE + 13, temp);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	b2db      	uxtb	r3, r3
 8002c70:	4619      	mov	r1, r3
 8002c72:	2035      	movs	r0, #53	; 0x35
 8002c74:	f7ff fcc4 	bl	8002600 <AT24CXX_WriteOneByte>
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200004e4 	.word	0x200004e4
 8002c84:	4cbebc20 	.word	0x4cbebc20

08002c88 <TP_Get_Adjdata>:
//得到保存在EEPROM里面的校准值
//返回值：1，成功获取数据
//        0，获取失败，要重新校准
u8 TP_Get_Adjdata(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
	s32 tempfac;
	tempfac = AT24CXX_ReadOneByte(SAVE_ADDR_BASE + 13); //读取标记字,看是否校准过！
 8002c8e:	2035      	movs	r0, #53	; 0x35
 8002c90:	f7ff fc86 	bl	80025a0 <AT24CXX_ReadOneByte>
 8002c94:	4603      	mov	r3, r0
 8002c96:	607b      	str	r3, [r7, #4]
	if (tempfac == 0X0A)								//触摸屏已经校准过了
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b0a      	cmp	r3, #10
 8002c9c:	d14f      	bne.n	8002d3e <TP_Get_Adjdata+0xb6>
	{
		tempfac = AT24CXX_ReadLenByte(SAVE_ADDR_BASE, 4);
 8002c9e:	2104      	movs	r1, #4
 8002ca0:	2028      	movs	r0, #40	; 0x28
 8002ca2:	f7ff fcff 	bl	80026a4 <AT24CXX_ReadLenByte>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	607b      	str	r3, [r7, #4]
		tp_dev.xfac = (float)tempfac / 100000000; //得到x校准参数
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	ee07 3a90 	vmov	s15, r3
 8002cb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cb4:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002d48 <TP_Get_Adjdata+0xc0>
 8002cb8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002cbc:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <TP_Get_Adjdata+0xc4>)
 8002cbe:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
		tempfac = AT24CXX_ReadLenByte(SAVE_ADDR_BASE + 4, 4);
 8002cc2:	2104      	movs	r1, #4
 8002cc4:	202c      	movs	r0, #44	; 0x2c
 8002cc6:	f7ff fced 	bl	80026a4 <AT24CXX_ReadLenByte>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	607b      	str	r3, [r7, #4]
		tp_dev.yfac = (float)tempfac / 100000000; //得到y校准参数
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	ee07 3a90 	vmov	s15, r3
 8002cd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002cd8:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002d48 <TP_Get_Adjdata+0xc0>
 8002cdc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002ce0:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <TP_Get_Adjdata+0xc4>)
 8002ce2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
												  //得到x偏移量
		tp_dev.xoff = AT24CXX_ReadLenByte(SAVE_ADDR_BASE + 8, 2);
 8002ce6:	2102      	movs	r1, #2
 8002ce8:	2030      	movs	r0, #48	; 0x30
 8002cea:	f7ff fcdb 	bl	80026a4 <AT24CXX_ReadLenByte>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	b21a      	sxth	r2, r3
 8002cf2:	4b16      	ldr	r3, [pc, #88]	; (8002d4c <TP_Get_Adjdata+0xc4>)
 8002cf4:	859a      	strh	r2, [r3, #44]	; 0x2c
		//得到y偏移量
		tp_dev.yoff = AT24CXX_ReadLenByte(SAVE_ADDR_BASE + 10, 2);
 8002cf6:	2102      	movs	r1, #2
 8002cf8:	2032      	movs	r0, #50	; 0x32
 8002cfa:	f7ff fcd3 	bl	80026a4 <AT24CXX_ReadLenByte>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	b21a      	sxth	r2, r3
 8002d02:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <TP_Get_Adjdata+0xc4>)
 8002d04:	85da      	strh	r2, [r3, #46]	; 0x2e
		tp_dev.touchtype = AT24CXX_ReadOneByte(SAVE_ADDR_BASE + 12); //读取触屏类型标记
 8002d06:	2034      	movs	r0, #52	; 0x34
 8002d08:	f7ff fc4a 	bl	80025a0 <AT24CXX_ReadOneByte>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	461a      	mov	r2, r3
 8002d10:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <TP_Get_Adjdata+0xc4>)
 8002d12:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		if (tp_dev.touchtype)										 //X,Y方向与屏幕相反
 8002d16:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <TP_Get_Adjdata+0xc4>)
 8002d18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d006      	beq.n	8002d2e <TP_Get_Adjdata+0xa6>
		{
			CMD_RDX = 0X90;
 8002d20:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <TP_Get_Adjdata+0xc8>)
 8002d22:	2290      	movs	r2, #144	; 0x90
 8002d24:	701a      	strb	r2, [r3, #0]
			CMD_RDY = 0XD0;
 8002d26:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <TP_Get_Adjdata+0xcc>)
 8002d28:	22d0      	movs	r2, #208	; 0xd0
 8002d2a:	701a      	strb	r2, [r3, #0]
 8002d2c:	e005      	b.n	8002d3a <TP_Get_Adjdata+0xb2>
		}
		else //X,Y方向与屏幕相同
		{
			CMD_RDX = 0XD0;
 8002d2e:	4b08      	ldr	r3, [pc, #32]	; (8002d50 <TP_Get_Adjdata+0xc8>)
 8002d30:	22d0      	movs	r2, #208	; 0xd0
 8002d32:	701a      	strb	r2, [r3, #0]
			CMD_RDY = 0X90;
 8002d34:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <TP_Get_Adjdata+0xcc>)
 8002d36:	2290      	movs	r2, #144	; 0x90
 8002d38:	701a      	strb	r2, [r3, #0]
		}
		return 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <TP_Get_Adjdata+0xb8>
	}
	return 0;
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	4cbebc20 	.word	0x4cbebc20
 8002d4c:	200004e4 	.word	0x200004e4
 8002d50:	20000518 	.word	0x20000518
 8002d54:	20000519 	.word	0x20000519

08002d58 <TP_Adj_Info_Show>:
//提示字符串
u8 *const TP_REMIND_MSG_TBL = "Please use the stylus click the cross on the screen.The cross will always move until the screen adjustment is completed.";

//提示校准结果(各个参数)
void TP_Adj_Info_Show(u16 x0, u16 y0, u16 x1, u16 y1, u16 x2, u16 y2, u16 x3, u16 y3, u16 fac)
{
 8002d58:	b590      	push	{r4, r7, lr}
 8002d5a:	b085      	sub	sp, #20
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	4604      	mov	r4, r0
 8002d60:	4608      	mov	r0, r1
 8002d62:	4611      	mov	r1, r2
 8002d64:	461a      	mov	r2, r3
 8002d66:	4623      	mov	r3, r4
 8002d68:	80fb      	strh	r3, [r7, #6]
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	80bb      	strh	r3, [r7, #4]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	807b      	strh	r3, [r7, #2]
 8002d72:	4613      	mov	r3, r2
 8002d74:	803b      	strh	r3, [r7, #0]
	POINT_COLOR = RED;
 8002d76:	4b5e      	ldr	r3, [pc, #376]	; (8002ef0 <TP_Adj_Info_Show+0x198>)
 8002d78:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002d7c:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(40, 160, lcddev.width, lcddev.height, 16, "x1:");
 8002d7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002d80:	881a      	ldrh	r2, [r3, #0]
 8002d82:	4b5c      	ldr	r3, [pc, #368]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002d84:	885b      	ldrh	r3, [r3, #2]
 8002d86:	495c      	ldr	r1, [pc, #368]	; (8002ef8 <TP_Adj_Info_Show+0x1a0>)
 8002d88:	9101      	str	r1, [sp, #4]
 8002d8a:	2110      	movs	r1, #16
 8002d8c:	9100      	str	r1, [sp, #0]
 8002d8e:	21a0      	movs	r1, #160	; 0xa0
 8002d90:	2028      	movs	r0, #40	; 0x28
 8002d92:	f005 f98d 	bl	80080b0 <LCD_ShowString>
	LCD_ShowString(40 + 80, 160, lcddev.width, lcddev.height, 16, "y1:");
 8002d96:	4b57      	ldr	r3, [pc, #348]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002d98:	881a      	ldrh	r2, [r3, #0]
 8002d9a:	4b56      	ldr	r3, [pc, #344]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002d9c:	885b      	ldrh	r3, [r3, #2]
 8002d9e:	4957      	ldr	r1, [pc, #348]	; (8002efc <TP_Adj_Info_Show+0x1a4>)
 8002da0:	9101      	str	r1, [sp, #4]
 8002da2:	2110      	movs	r1, #16
 8002da4:	9100      	str	r1, [sp, #0]
 8002da6:	21a0      	movs	r1, #160	; 0xa0
 8002da8:	2078      	movs	r0, #120	; 0x78
 8002daa:	f005 f981 	bl	80080b0 <LCD_ShowString>
	LCD_ShowString(40, 180, lcddev.width, lcddev.height, 16, "x2:");
 8002dae:	4b51      	ldr	r3, [pc, #324]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002db0:	881a      	ldrh	r2, [r3, #0]
 8002db2:	4b50      	ldr	r3, [pc, #320]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002db4:	885b      	ldrh	r3, [r3, #2]
 8002db6:	4952      	ldr	r1, [pc, #328]	; (8002f00 <TP_Adj_Info_Show+0x1a8>)
 8002db8:	9101      	str	r1, [sp, #4]
 8002dba:	2110      	movs	r1, #16
 8002dbc:	9100      	str	r1, [sp, #0]
 8002dbe:	21b4      	movs	r1, #180	; 0xb4
 8002dc0:	2028      	movs	r0, #40	; 0x28
 8002dc2:	f005 f975 	bl	80080b0 <LCD_ShowString>
	LCD_ShowString(40 + 80, 180, lcddev.width, lcddev.height, 16, "y2:");
 8002dc6:	4b4b      	ldr	r3, [pc, #300]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002dc8:	881a      	ldrh	r2, [r3, #0]
 8002dca:	4b4a      	ldr	r3, [pc, #296]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002dcc:	885b      	ldrh	r3, [r3, #2]
 8002dce:	494d      	ldr	r1, [pc, #308]	; (8002f04 <TP_Adj_Info_Show+0x1ac>)
 8002dd0:	9101      	str	r1, [sp, #4]
 8002dd2:	2110      	movs	r1, #16
 8002dd4:	9100      	str	r1, [sp, #0]
 8002dd6:	21b4      	movs	r1, #180	; 0xb4
 8002dd8:	2078      	movs	r0, #120	; 0x78
 8002dda:	f005 f969 	bl	80080b0 <LCD_ShowString>
	LCD_ShowString(40, 200, lcddev.width, lcddev.height, 16, "x3:");
 8002dde:	4b45      	ldr	r3, [pc, #276]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002de0:	881a      	ldrh	r2, [r3, #0]
 8002de2:	4b44      	ldr	r3, [pc, #272]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002de4:	885b      	ldrh	r3, [r3, #2]
 8002de6:	4948      	ldr	r1, [pc, #288]	; (8002f08 <TP_Adj_Info_Show+0x1b0>)
 8002de8:	9101      	str	r1, [sp, #4]
 8002dea:	2110      	movs	r1, #16
 8002dec:	9100      	str	r1, [sp, #0]
 8002dee:	21c8      	movs	r1, #200	; 0xc8
 8002df0:	2028      	movs	r0, #40	; 0x28
 8002df2:	f005 f95d 	bl	80080b0 <LCD_ShowString>
	LCD_ShowString(40 + 80, 200, lcddev.width, lcddev.height, 16, "y3:");
 8002df6:	4b3f      	ldr	r3, [pc, #252]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002df8:	881a      	ldrh	r2, [r3, #0]
 8002dfa:	4b3e      	ldr	r3, [pc, #248]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002dfc:	885b      	ldrh	r3, [r3, #2]
 8002dfe:	4943      	ldr	r1, [pc, #268]	; (8002f0c <TP_Adj_Info_Show+0x1b4>)
 8002e00:	9101      	str	r1, [sp, #4]
 8002e02:	2110      	movs	r1, #16
 8002e04:	9100      	str	r1, [sp, #0]
 8002e06:	21c8      	movs	r1, #200	; 0xc8
 8002e08:	2078      	movs	r0, #120	; 0x78
 8002e0a:	f005 f951 	bl	80080b0 <LCD_ShowString>
	LCD_ShowString(40, 220, lcddev.width, lcddev.height, 16, "x4:");
 8002e0e:	4b39      	ldr	r3, [pc, #228]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002e10:	881a      	ldrh	r2, [r3, #0]
 8002e12:	4b38      	ldr	r3, [pc, #224]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002e14:	885b      	ldrh	r3, [r3, #2]
 8002e16:	493e      	ldr	r1, [pc, #248]	; (8002f10 <TP_Adj_Info_Show+0x1b8>)
 8002e18:	9101      	str	r1, [sp, #4]
 8002e1a:	2110      	movs	r1, #16
 8002e1c:	9100      	str	r1, [sp, #0]
 8002e1e:	21dc      	movs	r1, #220	; 0xdc
 8002e20:	2028      	movs	r0, #40	; 0x28
 8002e22:	f005 f945 	bl	80080b0 <LCD_ShowString>
	LCD_ShowString(40 + 80, 220, lcddev.width, lcddev.height, 16, "y4:");
 8002e26:	4b33      	ldr	r3, [pc, #204]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002e28:	881a      	ldrh	r2, [r3, #0]
 8002e2a:	4b32      	ldr	r3, [pc, #200]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002e2c:	885b      	ldrh	r3, [r3, #2]
 8002e2e:	4939      	ldr	r1, [pc, #228]	; (8002f14 <TP_Adj_Info_Show+0x1bc>)
 8002e30:	9101      	str	r1, [sp, #4]
 8002e32:	2110      	movs	r1, #16
 8002e34:	9100      	str	r1, [sp, #0]
 8002e36:	21dc      	movs	r1, #220	; 0xdc
 8002e38:	2078      	movs	r0, #120	; 0x78
 8002e3a:	f005 f939 	bl	80080b0 <LCD_ShowString>
	LCD_ShowString(40, 240, lcddev.width, lcddev.height, 16, "fac is:");
 8002e3e:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002e40:	881a      	ldrh	r2, [r3, #0]
 8002e42:	4b2c      	ldr	r3, [pc, #176]	; (8002ef4 <TP_Adj_Info_Show+0x19c>)
 8002e44:	885b      	ldrh	r3, [r3, #2]
 8002e46:	4934      	ldr	r1, [pc, #208]	; (8002f18 <TP_Adj_Info_Show+0x1c0>)
 8002e48:	9101      	str	r1, [sp, #4]
 8002e4a:	2110      	movs	r1, #16
 8002e4c:	9100      	str	r1, [sp, #0]
 8002e4e:	21f0      	movs	r1, #240	; 0xf0
 8002e50:	2028      	movs	r0, #40	; 0x28
 8002e52:	f005 f92d 	bl	80080b0 <LCD_ShowString>
	LCD_ShowNum(40 + 24, 160, x0, 4, 16);	   //显示数值
 8002e56:	88fa      	ldrh	r2, [r7, #6]
 8002e58:	2310      	movs	r3, #16
 8002e5a:	9300      	str	r3, [sp, #0]
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	21a0      	movs	r1, #160	; 0xa0
 8002e60:	2040      	movs	r0, #64	; 0x40
 8002e62:	f005 f8b3 	bl	8007fcc <LCD_ShowNum>
	LCD_ShowNum(40 + 24 + 80, 160, y0, 4, 16); //显示数值
 8002e66:	88ba      	ldrh	r2, [r7, #4]
 8002e68:	2310      	movs	r3, #16
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2304      	movs	r3, #4
 8002e6e:	21a0      	movs	r1, #160	; 0xa0
 8002e70:	2090      	movs	r0, #144	; 0x90
 8002e72:	f005 f8ab 	bl	8007fcc <LCD_ShowNum>
	LCD_ShowNum(40 + 24, 180, x1, 4, 16);	   //显示数值
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	2310      	movs	r3, #16
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	21b4      	movs	r1, #180	; 0xb4
 8002e80:	2040      	movs	r0, #64	; 0x40
 8002e82:	f005 f8a3 	bl	8007fcc <LCD_ShowNum>
	LCD_ShowNum(40 + 24 + 80, 180, y1, 4, 16); //显示数值
 8002e86:	883a      	ldrh	r2, [r7, #0]
 8002e88:	2310      	movs	r3, #16
 8002e8a:	9300      	str	r3, [sp, #0]
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	21b4      	movs	r1, #180	; 0xb4
 8002e90:	2090      	movs	r0, #144	; 0x90
 8002e92:	f005 f89b 	bl	8007fcc <LCD_ShowNum>
	LCD_ShowNum(40 + 24, 200, x2, 4, 16);	   //显示数值
 8002e96:	8b3a      	ldrh	r2, [r7, #24]
 8002e98:	2310      	movs	r3, #16
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	21c8      	movs	r1, #200	; 0xc8
 8002ea0:	2040      	movs	r0, #64	; 0x40
 8002ea2:	f005 f893 	bl	8007fcc <LCD_ShowNum>
	LCD_ShowNum(40 + 24 + 80, 200, y2, 4, 16); //显示数值
 8002ea6:	8bba      	ldrh	r2, [r7, #28]
 8002ea8:	2310      	movs	r3, #16
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2304      	movs	r3, #4
 8002eae:	21c8      	movs	r1, #200	; 0xc8
 8002eb0:	2090      	movs	r0, #144	; 0x90
 8002eb2:	f005 f88b 	bl	8007fcc <LCD_ShowNum>
	LCD_ShowNum(40 + 24, 220, x3, 4, 16);	   //显示数值
 8002eb6:	8c3a      	ldrh	r2, [r7, #32]
 8002eb8:	2310      	movs	r3, #16
 8002eba:	9300      	str	r3, [sp, #0]
 8002ebc:	2304      	movs	r3, #4
 8002ebe:	21dc      	movs	r1, #220	; 0xdc
 8002ec0:	2040      	movs	r0, #64	; 0x40
 8002ec2:	f005 f883 	bl	8007fcc <LCD_ShowNum>
	LCD_ShowNum(40 + 24 + 80, 220, y3, 4, 16); //显示数值
 8002ec6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002ec8:	2310      	movs	r3, #16
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	2304      	movs	r3, #4
 8002ece:	21dc      	movs	r1, #220	; 0xdc
 8002ed0:	2090      	movs	r0, #144	; 0x90
 8002ed2:	f005 f87b 	bl	8007fcc <LCD_ShowNum>
	LCD_ShowNum(40 + 56, 240, fac, 3, 16);	   //显示数值,该数值必须在95~105范围之内.
 8002ed6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002ed8:	2310      	movs	r3, #16
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2303      	movs	r3, #3
 8002ede:	21f0      	movs	r1, #240	; 0xf0
 8002ee0:	2060      	movs	r0, #96	; 0x60
 8002ee2:	f005 f873 	bl	8007fcc <LCD_ShowNum>
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd90      	pop	{r4, r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000730 	.word	0x20000730
 8002ef4:	20001034 	.word	0x20001034
 8002ef8:	080106ac 	.word	0x080106ac
 8002efc:	080106b0 	.word	0x080106b0
 8002f00:	080106b4 	.word	0x080106b4
 8002f04:	080106b8 	.word	0x080106b8
 8002f08:	080106bc 	.word	0x080106bc
 8002f0c:	080106c0 	.word	0x080106c0
 8002f10:	080106c4 	.word	0x080106c4
 8002f14:	080106c8 	.word	0x080106c8
 8002f18:	080106cc 	.word	0x080106cc
 8002f1c:	00000000 	.word	0x00000000

08002f20 <TP_Adjust>:

//触摸屏校准代码
//得到四个校准参数
void TP_Adjust(void)
{
 8002f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f24:	b093      	sub	sp, #76	; 0x4c
 8002f26:	af06      	add	r7, sp, #24
	u16 pos_temp[4][2]; //坐标缓存值
	u8 cnt = 0;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	u16 d1, d2;
	u32 tem1, tem2;
	double fac;
	u16 outtime = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	85bb      	strh	r3, [r7, #44]	; 0x2c
	cnt = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	POINT_COLOR = BLUE;
 8002f38:	4bbd      	ldr	r3, [pc, #756]	; (8003230 <TP_Adjust+0x310>)
 8002f3a:	221f      	movs	r2, #31
 8002f3c:	801a      	strh	r2, [r3, #0]
	BACK_COLOR = WHITE;
 8002f3e:	4bbd      	ldr	r3, [pc, #756]	; (8003234 <TP_Adjust+0x314>)
 8002f40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f44:	801a      	strh	r2, [r3, #0]
	LCD_Clear(WHITE);  //清屏
 8002f46:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f4a:	f004 fdf7 	bl	8007b3c <LCD_Clear>
	POINT_COLOR = RED; //红色
 8002f4e:	4bb8      	ldr	r3, [pc, #736]	; (8003230 <TP_Adjust+0x310>)
 8002f50:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002f54:	801a      	strh	r2, [r3, #0]
	LCD_Clear(WHITE);  //清屏
 8002f56:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002f5a:	f004 fdef 	bl	8007b3c <LCD_Clear>
	POINT_COLOR = BLACK;
 8002f5e:	4bb4      	ldr	r3, [pc, #720]	; (8003230 <TP_Adjust+0x310>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	801a      	strh	r2, [r3, #0]
	LCD_ShowString(40, 40, 160, 100, 16, (u8 *)TP_REMIND_MSG_TBL); //显示提示信息
 8002f64:	4bb4      	ldr	r3, [pc, #720]	; (8003238 <TP_Adjust+0x318>)
 8002f66:	9301      	str	r3, [sp, #4]
 8002f68:	2310      	movs	r3, #16
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	2364      	movs	r3, #100	; 0x64
 8002f6e:	22a0      	movs	r2, #160	; 0xa0
 8002f70:	2128      	movs	r1, #40	; 0x28
 8002f72:	2028      	movs	r0, #40	; 0x28
 8002f74:	f005 f89c 	bl	80080b0 <LCD_ShowString>
	TP_Drow_Touch_Point(20, 20, RED);							   //画点1
 8002f78:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002f7c:	2114      	movs	r1, #20
 8002f7e:	2014      	movs	r0, #20
 8002f80:	f7ff fd4e 	bl	8002a20 <TP_Drow_Touch_Point>
	tp_dev.sta = 0;												   //消除触发信号
 8002f84:	4bad      	ldr	r3, [pc, #692]	; (800323c <TP_Adjust+0x31c>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 2020 	strb.w	r2, [r3, #32]
	tp_dev.xfac = 0;											   //xfac用来标记是否校准过,所以校准之前必须清掉!以免错误
 8002f8c:	4bab      	ldr	r3, [pc, #684]	; (800323c <TP_Adjust+0x31c>)
 8002f8e:	f04f 0200 	mov.w	r2, #0
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24
	while (1)													   //如果连续10秒钟没有按下,则自动退出
	{
		tp_dev.scan(1);							 //扫描物理坐标
 8002f94:	4ba9      	ldr	r3, [pc, #676]	; (800323c <TP_Adjust+0x31c>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2001      	movs	r0, #1
 8002f9a:	4798      	blx	r3
		if ((tp_dev.sta & 0xc0) == TP_CATH_PRES) //按键按下了一次(此时按键松开了.)
 8002f9c:	4ba7      	ldr	r3, [pc, #668]	; (800323c <TP_Adjust+0x31c>)
 8002f9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fa2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002fa6:	2b40      	cmp	r3, #64	; 0x40
 8002fa8:	f040 83b9 	bne.w	800371e <TP_Adjust+0x7fe>
		{
			outtime = 0;
 8002fac:	2300      	movs	r3, #0
 8002fae:	85bb      	strh	r3, [r7, #44]	; 0x2c
			tp_dev.sta &= ~(1 << 6); //标记按键已经被处理过了.
 8002fb0:	4ba2      	ldr	r3, [pc, #648]	; (800323c <TP_Adjust+0x31c>)
 8002fb2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	4b9f      	ldr	r3, [pc, #636]	; (800323c <TP_Adjust+0x31c>)
 8002fbe:	f883 2020 	strb.w	r2, [r3, #32]

			pos_temp[cnt][0] = tp_dev.x[0];
 8002fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fc6:	4a9d      	ldr	r2, [pc, #628]	; (800323c <TP_Adjust+0x31c>)
 8002fc8:	8992      	ldrh	r2, [r2, #12]
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002fd0:	440b      	add	r3, r1
 8002fd2:	f823 2c28 	strh.w	r2, [r3, #-40]
			pos_temp[cnt][1] = tp_dev.y[0];
 8002fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fda:	4a98      	ldr	r2, [pc, #608]	; (800323c <TP_Adjust+0x31c>)
 8002fdc:	8ad2      	ldrh	r2, [r2, #22]
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8002fe4:	440b      	add	r3, r1
 8002fe6:	f823 2c26 	strh.w	r2, [r3, #-38]
			cnt++;
 8002fea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch (cnt)
 8002ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	f200 8390 	bhi.w	8003720 <TP_Adjust+0x800>
 8003000:	a201      	add	r2, pc, #4	; (adr r2, 8003008 <TP_Adjust+0xe8>)
 8003002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003006:	bf00      	nop
 8003008:	08003019 	.word	0x08003019
 800300c:	0800303b 	.word	0x0800303b
 8003010:	08003065 	.word	0x08003065
 8003014:	08003095 	.word	0x08003095
			{
			case 1:
				TP_Drow_Touch_Point(20, 20, WHITE);				 //清除点1
 8003018:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800301c:	2114      	movs	r1, #20
 800301e:	2014      	movs	r0, #20
 8003020:	f7ff fcfe 	bl	8002a20 <TP_Drow_Touch_Point>
				TP_Drow_Touch_Point(lcddev.width - 20, 20, RED); //画点2
 8003024:	4b86      	ldr	r3, [pc, #536]	; (8003240 <TP_Adjust+0x320>)
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	3b14      	subs	r3, #20
 800302a:	b29b      	uxth	r3, r3
 800302c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003030:	2114      	movs	r1, #20
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff fcf4 	bl	8002a20 <TP_Drow_Touch_Point>
				break;
 8003038:	e372      	b.n	8003720 <TP_Adjust+0x800>
			case 2:
				TP_Drow_Touch_Point(lcddev.width - 20, 20, WHITE); //清除点2
 800303a:	4b81      	ldr	r3, [pc, #516]	; (8003240 <TP_Adjust+0x320>)
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	3b14      	subs	r3, #20
 8003040:	b29b      	uxth	r3, r3
 8003042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003046:	2114      	movs	r1, #20
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff fce9 	bl	8002a20 <TP_Drow_Touch_Point>
				TP_Drow_Touch_Point(20, lcddev.height - 20, RED);  //画点3
 800304e:	4b7c      	ldr	r3, [pc, #496]	; (8003240 <TP_Adjust+0x320>)
 8003050:	885b      	ldrh	r3, [r3, #2]
 8003052:	3b14      	subs	r3, #20
 8003054:	b29b      	uxth	r3, r3
 8003056:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800305a:	4619      	mov	r1, r3
 800305c:	2014      	movs	r0, #20
 800305e:	f7ff fcdf 	bl	8002a20 <TP_Drow_Touch_Point>
				break;
 8003062:	e35d      	b.n	8003720 <TP_Adjust+0x800>
			case 3:
				TP_Drow_Touch_Point(20, lcddev.height - 20, WHITE);				 //清除点3
 8003064:	4b76      	ldr	r3, [pc, #472]	; (8003240 <TP_Adjust+0x320>)
 8003066:	885b      	ldrh	r3, [r3, #2]
 8003068:	3b14      	subs	r3, #20
 800306a:	b29b      	uxth	r3, r3
 800306c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003070:	4619      	mov	r1, r3
 8003072:	2014      	movs	r0, #20
 8003074:	f7ff fcd4 	bl	8002a20 <TP_Drow_Touch_Point>
				TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, RED); //画点4
 8003078:	4b71      	ldr	r3, [pc, #452]	; (8003240 <TP_Adjust+0x320>)
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	3b14      	subs	r3, #20
 800307e:	b298      	uxth	r0, r3
 8003080:	4b6f      	ldr	r3, [pc, #444]	; (8003240 <TP_Adjust+0x320>)
 8003082:	885b      	ldrh	r3, [r3, #2]
 8003084:	3b14      	subs	r3, #20
 8003086:	b29b      	uxth	r3, r3
 8003088:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800308c:	4619      	mov	r1, r3
 800308e:	f7ff fcc7 	bl	8002a20 <TP_Drow_Touch_Point>
				break;
 8003092:	e345      	b.n	8003720 <TP_Adjust+0x800>
			case 4:											 //全部四个点已经得到
															 //对边相等
				tem1 = abs(pos_temp[0][0] - pos_temp[1][0]); //x1-x2
 8003094:	893b      	ldrh	r3, [r7, #8]
 8003096:	461a      	mov	r2, r3
 8003098:	89bb      	ldrh	r3, [r7, #12]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	bfb8      	it	lt
 80030a0:	425b      	neglt	r3, r3
 80030a2:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[0][1] - pos_temp[1][1]); //y1-y2
 80030a4:	897b      	ldrh	r3, [r7, #10]
 80030a6:	461a      	mov	r2, r3
 80030a8:	89fb      	ldrh	r3, [r7, #14]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bfb8      	it	lt
 80030b0:	425b      	neglt	r3, r3
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 80030b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030b6:	fb03 f303 	mul.w	r3, r3, r3
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 80030bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030be:	fb03 f303 	mul.w	r3, r3, r3
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24
				d1 = sqrt(tem1 + tem2); //得到1,2的距离
 80030c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	4413      	add	r3, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd fa1a 	bl	8000504 <__aeabi_ui2d>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	ec43 2b10 	vmov	d0, r2, r3
 80030d8:	f00d f9ae 	bl	8010438 <sqrt>
 80030dc:	ec53 2b10 	vmov	r2, r3, d0
 80030e0:	4610      	mov	r0, r2
 80030e2:	4619      	mov	r1, r3
 80030e4:	f7fd fd60 	bl	8000ba8 <__aeabi_d2uiz>
 80030e8:	4603      	mov	r3, r0
 80030ea:	847b      	strh	r3, [r7, #34]	; 0x22

				tem1 = abs(pos_temp[2][0] - pos_temp[3][0]); //x3-x4
 80030ec:	8a3b      	ldrh	r3, [r7, #16]
 80030ee:	461a      	mov	r2, r3
 80030f0:	8abb      	ldrh	r3, [r7, #20]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bfb8      	it	lt
 80030f8:	425b      	neglt	r3, r3
 80030fa:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[2][1] - pos_temp[3][1]); //y3-y4
 80030fc:	8a7b      	ldrh	r3, [r7, #18]
 80030fe:	461a      	mov	r2, r3
 8003100:	8afb      	ldrh	r3, [r7, #22]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b00      	cmp	r3, #0
 8003106:	bfb8      	it	lt
 8003108:	425b      	neglt	r3, r3
 800310a:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 800310c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800310e:	fb03 f303 	mul.w	r3, r3, r3
 8003112:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	fb03 f303 	mul.w	r3, r3, r3
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
				d2 = sqrt(tem1 + tem2); //得到3,4的距离
 800311c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003120:	4413      	add	r3, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd f9ee 	bl	8000504 <__aeabi_ui2d>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	ec43 2b10 	vmov	d0, r2, r3
 8003130:	f00d f982 	bl	8010438 <sqrt>
 8003134:	ec53 2b10 	vmov	r2, r3, d0
 8003138:	4610      	mov	r0, r2
 800313a:	4619      	mov	r1, r3
 800313c:	f7fd fd34 	bl	8000ba8 <__aeabi_d2uiz>
 8003140:	4603      	mov	r3, r0
 8003142:	843b      	strh	r3, [r7, #32]
				fac = (float)d1 / d2;
 8003144:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800314e:	8c3b      	ldrh	r3, [r7, #32]
 8003150:	ee07 3a90 	vmov	s15, r3
 8003154:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003158:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800315c:	ee16 0a90 	vmov	r0, s13
 8003160:	f7fd f9f2 	bl	8000548 <__aeabi_f2d>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	e9c7 2306 	strd	r2, r3, [r7, #24]
				if (fac < 0.95 || fac > 1.05 || d1 == 0 || d2 == 0) //不合格
 800316c:	a32c      	add	r3, pc, #176	; (adr r3, 8003220 <TP_Adjust+0x300>)
 800316e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003172:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003176:	f7fd fcb1 	bl	8000adc <__aeabi_dcmplt>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10f      	bne.n	80031a0 <TP_Adjust+0x280>
 8003180:	a329      	add	r3, pc, #164	; (adr r3, 8003228 <TP_Adjust+0x308>)
 8003182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003186:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800318a:	f7fd fcc5 	bl	8000b18 <__aeabi_dcmpgt>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d105      	bne.n	80031a0 <TP_Adjust+0x280>
 8003194:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <TP_Adjust+0x280>
 800319a:	8c3b      	ldrh	r3, [r7, #32]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d153      	bne.n	8003248 <TP_Adjust+0x328>
				{
					cnt = 0;
 80031a0:	2300      	movs	r3, #0
 80031a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE);																							 //清除点4
 80031a6:	4b26      	ldr	r3, [pc, #152]	; (8003240 <TP_Adjust+0x320>)
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	3b14      	subs	r3, #20
 80031ac:	b298      	uxth	r0, r3
 80031ae:	4b24      	ldr	r3, [pc, #144]	; (8003240 <TP_Adjust+0x320>)
 80031b0:	885b      	ldrh	r3, [r3, #2]
 80031b2:	3b14      	subs	r3, #20
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ba:	4619      	mov	r1, r3
 80031bc:	f7ff fc30 	bl	8002a20 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20, 20, RED);																															 //画点1
 80031c0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80031c4:	2114      	movs	r1, #20
 80031c6:	2014      	movs	r0, #20
 80031c8:	f7ff fc2a 	bl	8002a20 <TP_Drow_Touch_Point>
					TP_Adj_Info_Show(pos_temp[0][0], pos_temp[0][1], pos_temp[1][0], pos_temp[1][1], pos_temp[2][0], pos_temp[2][1], pos_temp[3][0], pos_temp[3][1], fac * 100); //显示数据
 80031cc:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 80031d0:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 80031d4:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 80031d8:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 80031dc:	8a3c      	ldrh	r4, [r7, #16]
 80031de:	8a7d      	ldrh	r5, [r7, #18]
 80031e0:	8abe      	ldrh	r6, [r7, #20]
 80031e2:	8afb      	ldrh	r3, [r7, #22]
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	4b16      	ldr	r3, [pc, #88]	; (8003244 <TP_Adjust+0x324>)
 80031ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80031f0:	f7fd fa02 	bl	80005f8 <__aeabi_dmul>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4610      	mov	r0, r2
 80031fa:	4619      	mov	r1, r3
 80031fc:	f7fd fcd4 	bl	8000ba8 <__aeabi_d2uiz>
 8003200:	4603      	mov	r3, r0
 8003202:	b29b      	uxth	r3, r3
 8003204:	9304      	str	r3, [sp, #16]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	9303      	str	r3, [sp, #12]
 800320a:	9602      	str	r6, [sp, #8]
 800320c:	9501      	str	r5, [sp, #4]
 800320e:	9400      	str	r4, [sp, #0]
 8003210:	465b      	mov	r3, fp
 8003212:	4652      	mov	r2, sl
 8003214:	4649      	mov	r1, r9
 8003216:	4640      	mov	r0, r8
 8003218:	f7ff fd9e 	bl	8002d58 <TP_Adj_Info_Show>
					continue;
 800321c:	e28e      	b.n	800373c <TP_Adjust+0x81c>
 800321e:	bf00      	nop
 8003220:	66666666 	.word	0x66666666
 8003224:	3fee6666 	.word	0x3fee6666
 8003228:	cccccccd 	.word	0xcccccccd
 800322c:	3ff0cccc 	.word	0x3ff0cccc
 8003230:	20000730 	.word	0x20000730
 8003234:	2000051a 	.word	0x2000051a
 8003238:	08010630 	.word	0x08010630
 800323c:	200004e4 	.word	0x200004e4
 8003240:	20001034 	.word	0x20001034
 8003244:	40590000 	.word	0x40590000
				}
				tem1 = abs(pos_temp[0][0] - pos_temp[2][0]); //x1-x3
 8003248:	893b      	ldrh	r3, [r7, #8]
 800324a:	461a      	mov	r2, r3
 800324c:	8a3b      	ldrh	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	bfb8      	it	lt
 8003254:	425b      	neglt	r3, r3
 8003256:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[0][1] - pos_temp[2][1]); //y1-y3
 8003258:	897b      	ldrh	r3, [r7, #10]
 800325a:	461a      	mov	r2, r3
 800325c:	8a7b      	ldrh	r3, [r7, #18]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	bfb8      	it	lt
 8003264:	425b      	neglt	r3, r3
 8003266:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	fb03 f303 	mul.w	r3, r3, r3
 800326e:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	fb03 f303 	mul.w	r3, r3, r3
 8003276:	627b      	str	r3, [r7, #36]	; 0x24
				d1 = sqrt(tem1 + tem2); //得到1,3的距离
 8003278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800327a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327c:	4413      	add	r3, r2
 800327e:	4618      	mov	r0, r3
 8003280:	f7fd f940 	bl	8000504 <__aeabi_ui2d>
 8003284:	4602      	mov	r2, r0
 8003286:	460b      	mov	r3, r1
 8003288:	ec43 2b10 	vmov	d0, r2, r3
 800328c:	f00d f8d4 	bl	8010438 <sqrt>
 8003290:	ec53 2b10 	vmov	r2, r3, d0
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	f7fd fc86 	bl	8000ba8 <__aeabi_d2uiz>
 800329c:	4603      	mov	r3, r0
 800329e:	847b      	strh	r3, [r7, #34]	; 0x22

				tem1 = abs(pos_temp[1][0] - pos_temp[3][0]); //x2-x4
 80032a0:	89bb      	ldrh	r3, [r7, #12]
 80032a2:	461a      	mov	r2, r3
 80032a4:	8abb      	ldrh	r3, [r7, #20]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	bfb8      	it	lt
 80032ac:	425b      	neglt	r3, r3
 80032ae:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[1][1] - pos_temp[3][1]); //y2-y4
 80032b0:	89fb      	ldrh	r3, [r7, #14]
 80032b2:	461a      	mov	r2, r3
 80032b4:	8afb      	ldrh	r3, [r7, #22]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	bfb8      	it	lt
 80032bc:	425b      	neglt	r3, r3
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	fb03 f303 	mul.w	r3, r3, r3
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	fb03 f303 	mul.w	r3, r3, r3
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
				d2 = sqrt(tem1 + tem2); //得到2,4的距离
 80032d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d4:	4413      	add	r3, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd f914 	bl	8000504 <__aeabi_ui2d>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	ec43 2b10 	vmov	d0, r2, r3
 80032e4:	f00d f8a8 	bl	8010438 <sqrt>
 80032e8:	ec53 2b10 	vmov	r2, r3, d0
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	f7fd fc5a 	bl	8000ba8 <__aeabi_d2uiz>
 80032f4:	4603      	mov	r3, r0
 80032f6:	843b      	strh	r3, [r7, #32]
				fac = (float)d1 / d2;
 80032f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003302:	8c3b      	ldrh	r3, [r7, #32]
 8003304:	ee07 3a90 	vmov	s15, r3
 8003308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800330c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003310:	ee16 0a90 	vmov	r0, s13
 8003314:	f7fd f918 	bl	8000548 <__aeabi_f2d>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	e9c7 2306 	strd	r2, r3, [r7, #24]
				if (fac < 0.95 || fac > 1.05) //不合格
 8003320:	a389      	add	r3, pc, #548	; (adr r3, 8003548 <TP_Adjust+0x628>)
 8003322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003326:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800332a:	f7fd fbd7 	bl	8000adc <__aeabi_dcmplt>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d109      	bne.n	8003348 <TP_Adjust+0x428>
 8003334:	a386      	add	r3, pc, #536	; (adr r3, 8003550 <TP_Adjust+0x630>)
 8003336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800333e:	f7fd fbeb 	bl	8000b18 <__aeabi_dcmpgt>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d03e      	beq.n	80033c6 <TP_Adjust+0x4a6>
				{
					cnt = 0;
 8003348:	2300      	movs	r3, #0
 800334a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE);																							 //清除点4
 800334e:	4b82      	ldr	r3, [pc, #520]	; (8003558 <TP_Adjust+0x638>)
 8003350:	881b      	ldrh	r3, [r3, #0]
 8003352:	3b14      	subs	r3, #20
 8003354:	b298      	uxth	r0, r3
 8003356:	4b80      	ldr	r3, [pc, #512]	; (8003558 <TP_Adjust+0x638>)
 8003358:	885b      	ldrh	r3, [r3, #2]
 800335a:	3b14      	subs	r3, #20
 800335c:	b29b      	uxth	r3, r3
 800335e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003362:	4619      	mov	r1, r3
 8003364:	f7ff fb5c 	bl	8002a20 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20, 20, RED);																															 //画点1
 8003368:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800336c:	2114      	movs	r1, #20
 800336e:	2014      	movs	r0, #20
 8003370:	f7ff fb56 	bl	8002a20 <TP_Drow_Touch_Point>
					TP_Adj_Info_Show(pos_temp[0][0], pos_temp[0][1], pos_temp[1][0], pos_temp[1][1], pos_temp[2][0], pos_temp[2][1], pos_temp[3][0], pos_temp[3][1], fac * 100); //显示数据
 8003374:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 8003378:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 800337c:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 8003380:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 8003384:	8a3c      	ldrh	r4, [r7, #16]
 8003386:	8a7d      	ldrh	r5, [r7, #18]
 8003388:	8abe      	ldrh	r6, [r7, #20]
 800338a:	8afb      	ldrh	r3, [r7, #22]
 800338c:	607b      	str	r3, [r7, #4]
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	4b72      	ldr	r3, [pc, #456]	; (800355c <TP_Adjust+0x63c>)
 8003394:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003398:	f7fd f92e 	bl	80005f8 <__aeabi_dmul>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	f7fd fc00 	bl	8000ba8 <__aeabi_d2uiz>
 80033a8:	4603      	mov	r3, r0
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	9304      	str	r3, [sp, #16]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	9303      	str	r3, [sp, #12]
 80033b2:	9602      	str	r6, [sp, #8]
 80033b4:	9501      	str	r5, [sp, #4]
 80033b6:	9400      	str	r4, [sp, #0]
 80033b8:	465b      	mov	r3, fp
 80033ba:	4652      	mov	r2, sl
 80033bc:	4649      	mov	r1, r9
 80033be:	4640      	mov	r0, r8
 80033c0:	f7ff fcca 	bl	8002d58 <TP_Adj_Info_Show>
					continue;
 80033c4:	e1ba      	b.n	800373c <TP_Adjust+0x81c>
				} //正确了

				//对角线相等
				tem1 = abs(pos_temp[1][0] - pos_temp[2][0]); //x1-x3
 80033c6:	89bb      	ldrh	r3, [r7, #12]
 80033c8:	461a      	mov	r2, r3
 80033ca:	8a3b      	ldrh	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	bfb8      	it	lt
 80033d2:	425b      	neglt	r3, r3
 80033d4:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[1][1] - pos_temp[2][1]); //y1-y3
 80033d6:	89fb      	ldrh	r3, [r7, #14]
 80033d8:	461a      	mov	r2, r3
 80033da:	8a7b      	ldrh	r3, [r7, #18]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	bfb8      	it	lt
 80033e2:	425b      	neglt	r3, r3
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 80033e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e8:	fb03 f303 	mul.w	r3, r3, r3
 80033ec:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	fb03 f303 	mul.w	r3, r3, r3
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
				d1 = sqrt(tem1 + tem2); //得到1,4的距离
 80033f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	4413      	add	r3, r2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fd f881 	bl	8000504 <__aeabi_ui2d>
 8003402:	4602      	mov	r2, r0
 8003404:	460b      	mov	r3, r1
 8003406:	ec43 2b10 	vmov	d0, r2, r3
 800340a:	f00d f815 	bl	8010438 <sqrt>
 800340e:	ec53 2b10 	vmov	r2, r3, d0
 8003412:	4610      	mov	r0, r2
 8003414:	4619      	mov	r1, r3
 8003416:	f7fd fbc7 	bl	8000ba8 <__aeabi_d2uiz>
 800341a:	4603      	mov	r3, r0
 800341c:	847b      	strh	r3, [r7, #34]	; 0x22

				tem1 = abs(pos_temp[0][0] - pos_temp[3][0]); //x2-x4
 800341e:	893b      	ldrh	r3, [r7, #8]
 8003420:	461a      	mov	r2, r3
 8003422:	8abb      	ldrh	r3, [r7, #20]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	bfb8      	it	lt
 800342a:	425b      	neglt	r3, r3
 800342c:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 = abs(pos_temp[0][1] - pos_temp[3][1]); //y2-y4
 800342e:	897b      	ldrh	r3, [r7, #10]
 8003430:	461a      	mov	r2, r3
 8003432:	8afb      	ldrh	r3, [r7, #22]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	bfb8      	it	lt
 800343a:	425b      	neglt	r3, r3
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
				tem1 *= tem1;
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	fb03 f303 	mul.w	r3, r3, r3
 8003444:	62bb      	str	r3, [r7, #40]	; 0x28
				tem2 *= tem2;
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	fb03 f303 	mul.w	r3, r3, r3
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
				d2 = sqrt(tem1 + tem2); //得到2,3的距离
 800344e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	4413      	add	r3, r2
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd f855 	bl	8000504 <__aeabi_ui2d>
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	ec43 2b10 	vmov	d0, r2, r3
 8003462:	f00c ffe9 	bl	8010438 <sqrt>
 8003466:	ec53 2b10 	vmov	r2, r3, d0
 800346a:	4610      	mov	r0, r2
 800346c:	4619      	mov	r1, r3
 800346e:	f7fd fb9b 	bl	8000ba8 <__aeabi_d2uiz>
 8003472:	4603      	mov	r3, r0
 8003474:	843b      	strh	r3, [r7, #32]
				fac = (float)d1 / d2;
 8003476:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003478:	ee07 3a90 	vmov	s15, r3
 800347c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003480:	8c3b      	ldrh	r3, [r7, #32]
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800348a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800348e:	ee16 0a90 	vmov	r0, s13
 8003492:	f7fd f859 	bl	8000548 <__aeabi_f2d>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	e9c7 2306 	strd	r2, r3, [r7, #24]
				if (fac < 0.95 || fac > 1.05) //不合格
 800349e:	a32a      	add	r3, pc, #168	; (adr r3, 8003548 <TP_Adjust+0x628>)
 80034a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034a8:	f7fd fb18 	bl	8000adc <__aeabi_dcmplt>
 80034ac:	4603      	mov	r3, r0
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d109      	bne.n	80034c6 <TP_Adjust+0x5a6>
 80034b2:	a327      	add	r3, pc, #156	; (adr r3, 8003550 <TP_Adjust+0x630>)
 80034b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034bc:	f7fd fb2c 	bl	8000b18 <__aeabi_dcmpgt>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d04c      	beq.n	8003560 <TP_Adjust+0x640>
				{
					cnt = 0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE);																							 //清除点4
 80034cc:	4b22      	ldr	r3, [pc, #136]	; (8003558 <TP_Adjust+0x638>)
 80034ce:	881b      	ldrh	r3, [r3, #0]
 80034d0:	3b14      	subs	r3, #20
 80034d2:	b298      	uxth	r0, r3
 80034d4:	4b20      	ldr	r3, [pc, #128]	; (8003558 <TP_Adjust+0x638>)
 80034d6:	885b      	ldrh	r3, [r3, #2]
 80034d8:	3b14      	subs	r3, #20
 80034da:	b29b      	uxth	r3, r3
 80034dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034e0:	4619      	mov	r1, r3
 80034e2:	f7ff fa9d 	bl	8002a20 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20, 20, RED);																															 //画点1
 80034e6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80034ea:	2114      	movs	r1, #20
 80034ec:	2014      	movs	r0, #20
 80034ee:	f7ff fa97 	bl	8002a20 <TP_Drow_Touch_Point>
					TP_Adj_Info_Show(pos_temp[0][0], pos_temp[0][1], pos_temp[1][0], pos_temp[1][1], pos_temp[2][0], pos_temp[2][1], pos_temp[3][0], pos_temp[3][1], fac * 100); //显示数据
 80034f2:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 80034f6:	f8b7 900a 	ldrh.w	r9, [r7, #10]
 80034fa:	f8b7 a00c 	ldrh.w	sl, [r7, #12]
 80034fe:	f8b7 b00e 	ldrh.w	fp, [r7, #14]
 8003502:	8a3c      	ldrh	r4, [r7, #16]
 8003504:	8a7d      	ldrh	r5, [r7, #18]
 8003506:	8abe      	ldrh	r6, [r7, #20]
 8003508:	8afb      	ldrh	r3, [r7, #22]
 800350a:	607b      	str	r3, [r7, #4]
 800350c:	f04f 0200 	mov.w	r2, #0
 8003510:	4b12      	ldr	r3, [pc, #72]	; (800355c <TP_Adjust+0x63c>)
 8003512:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003516:	f7fd f86f 	bl	80005f8 <__aeabi_dmul>
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	4610      	mov	r0, r2
 8003520:	4619      	mov	r1, r3
 8003522:	f7fd fb41 	bl	8000ba8 <__aeabi_d2uiz>
 8003526:	4603      	mov	r3, r0
 8003528:	b29b      	uxth	r3, r3
 800352a:	9304      	str	r3, [sp, #16]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	9303      	str	r3, [sp, #12]
 8003530:	9602      	str	r6, [sp, #8]
 8003532:	9501      	str	r5, [sp, #4]
 8003534:	9400      	str	r4, [sp, #0]
 8003536:	465b      	mov	r3, fp
 8003538:	4652      	mov	r2, sl
 800353a:	4649      	mov	r1, r9
 800353c:	4640      	mov	r0, r8
 800353e:	f7ff fc0b 	bl	8002d58 <TP_Adj_Info_Show>
					continue;
 8003542:	e0fb      	b.n	800373c <TP_Adjust+0x81c>
 8003544:	f3af 8000 	nop.w
 8003548:	66666666 	.word	0x66666666
 800354c:	3fee6666 	.word	0x3fee6666
 8003550:	cccccccd 	.word	0xcccccccd
 8003554:	3ff0cccc 	.word	0x3ff0cccc
 8003558:	20001034 	.word	0x20001034
 800355c:	40590000 	.word	0x40590000
				} //正确了
				//计算结果
				tp_dev.xfac = (float)(lcddev.width - 40) / (pos_temp[1][0] - pos_temp[0][0]);		//得到xfac
 8003560:	4b79      	ldr	r3, [pc, #484]	; (8003748 <TP_Adjust+0x828>)
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	3b28      	subs	r3, #40	; 0x28
 8003566:	ee07 3a90 	vmov	s15, r3
 800356a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800356e:	89bb      	ldrh	r3, [r7, #12]
 8003570:	461a      	mov	r2, r3
 8003572:	893b      	ldrh	r3, [r7, #8]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	ee07 3a90 	vmov	s15, r3
 800357a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800357e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003582:	4b72      	ldr	r3, [pc, #456]	; (800374c <TP_Adjust+0x82c>)
 8003584:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
				tp_dev.xoff = (lcddev.width - tp_dev.xfac * (pos_temp[1][0] + pos_temp[0][0])) / 2; //得到xoff
 8003588:	4b6f      	ldr	r3, [pc, #444]	; (8003748 <TP_Adjust+0x828>)
 800358a:	881b      	ldrh	r3, [r3, #0]
 800358c:	ee07 3a90 	vmov	s15, r3
 8003590:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003594:	4b6d      	ldr	r3, [pc, #436]	; (800374c <TP_Adjust+0x82c>)
 8003596:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800359a:	89bb      	ldrh	r3, [r7, #12]
 800359c:	461a      	mov	r2, r3
 800359e:	893b      	ldrh	r3, [r7, #8]
 80035a0:	4413      	add	r3, r2
 80035a2:	ee07 3a90 	vmov	s15, r3
 80035a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80035b2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80035b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80035be:	ee17 3a90 	vmov	r3, s15
 80035c2:	b21a      	sxth	r2, r3
 80035c4:	4b61      	ldr	r3, [pc, #388]	; (800374c <TP_Adjust+0x82c>)
 80035c6:	859a      	strh	r2, [r3, #44]	; 0x2c

				tp_dev.yfac = (float)(lcddev.height - 40) / (pos_temp[2][1] - pos_temp[0][1]);		 //得到yfac
 80035c8:	4b5f      	ldr	r3, [pc, #380]	; (8003748 <TP_Adjust+0x828>)
 80035ca:	885b      	ldrh	r3, [r3, #2]
 80035cc:	3b28      	subs	r3, #40	; 0x28
 80035ce:	ee07 3a90 	vmov	s15, r3
 80035d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80035d6:	8a7b      	ldrh	r3, [r7, #18]
 80035d8:	461a      	mov	r2, r3
 80035da:	897b      	ldrh	r3, [r7, #10]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	ee07 3a90 	vmov	s15, r3
 80035e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035ea:	4b58      	ldr	r3, [pc, #352]	; (800374c <TP_Adjust+0x82c>)
 80035ec:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
				tp_dev.yoff = (lcddev.height - tp_dev.yfac * (pos_temp[2][1] + pos_temp[0][1])) / 2; //得到yoff
 80035f0:	4b55      	ldr	r3, [pc, #340]	; (8003748 <TP_Adjust+0x828>)
 80035f2:	885b      	ldrh	r3, [r3, #2]
 80035f4:	ee07 3a90 	vmov	s15, r3
 80035f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035fc:	4b53      	ldr	r3, [pc, #332]	; (800374c <TP_Adjust+0x82c>)
 80035fe:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8003602:	8a7b      	ldrh	r3, [r7, #18]
 8003604:	461a      	mov	r2, r3
 8003606:	897b      	ldrh	r3, [r7, #10]
 8003608:	4413      	add	r3, r2
 800360a:	ee07 3a90 	vmov	s15, r3
 800360e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003612:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003616:	ee37 7a67 	vsub.f32	s14, s14, s15
 800361a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800361e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003622:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003626:	ee17 3a90 	vmov	r3, s15
 800362a:	b21a      	sxth	r2, r3
 800362c:	4b47      	ldr	r3, [pc, #284]	; (800374c <TP_Adjust+0x82c>)
 800362e:	85da      	strh	r2, [r3, #46]	; 0x2e
				if (abs(tp_dev.xfac) > 2 || abs(tp_dev.yfac) > 2)									 //触屏和预设的相反了.
 8003630:	4b46      	ldr	r3, [pc, #280]	; (800374c <TP_Adjust+0x82c>)
 8003632:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8003636:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800363a:	ee17 3a90 	vmov	r3, s15
 800363e:	2b00      	cmp	r3, #0
 8003640:	bfb8      	it	lt
 8003642:	425b      	neglt	r3, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	dc0b      	bgt.n	8003660 <TP_Adjust+0x740>
 8003648:	4b40      	ldr	r3, [pc, #256]	; (800374c <TP_Adjust+0x82c>)
 800364a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800364e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003652:	ee17 3a90 	vmov	r3, s15
 8003656:	2b00      	cmp	r3, #0
 8003658:	bfb8      	it	lt
 800365a:	425b      	neglt	r3, r3
 800365c:	2b02      	cmp	r3, #2
 800365e:	dd40      	ble.n	80036e2 <TP_Adjust+0x7c2>
				{
					cnt = 0;
 8003660:	2300      	movs	r3, #0
 8003662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					TP_Drow_Touch_Point(lcddev.width - 20, lcddev.height - 20, WHITE); //清除点4
 8003666:	4b38      	ldr	r3, [pc, #224]	; (8003748 <TP_Adjust+0x828>)
 8003668:	881b      	ldrh	r3, [r3, #0]
 800366a:	3b14      	subs	r3, #20
 800366c:	b298      	uxth	r0, r3
 800366e:	4b36      	ldr	r3, [pc, #216]	; (8003748 <TP_Adjust+0x828>)
 8003670:	885b      	ldrh	r3, [r3, #2]
 8003672:	3b14      	subs	r3, #20
 8003674:	b29b      	uxth	r3, r3
 8003676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800367a:	4619      	mov	r1, r3
 800367c:	f7ff f9d0 	bl	8002a20 <TP_Drow_Touch_Point>
					TP_Drow_Touch_Point(20, 20, RED);								   //画点1
 8003680:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8003684:	2114      	movs	r1, #20
 8003686:	2014      	movs	r0, #20
 8003688:	f7ff f9ca 	bl	8002a20 <TP_Drow_Touch_Point>
					LCD_ShowString(40, 26, lcddev.width, lcddev.height, 16, "TP Need readjust!");
 800368c:	4b2e      	ldr	r3, [pc, #184]	; (8003748 <TP_Adjust+0x828>)
 800368e:	881a      	ldrh	r2, [r3, #0]
 8003690:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <TP_Adjust+0x828>)
 8003692:	885b      	ldrh	r3, [r3, #2]
 8003694:	492e      	ldr	r1, [pc, #184]	; (8003750 <TP_Adjust+0x830>)
 8003696:	9101      	str	r1, [sp, #4]
 8003698:	2110      	movs	r1, #16
 800369a:	9100      	str	r1, [sp, #0]
 800369c:	211a      	movs	r1, #26
 800369e:	2028      	movs	r0, #40	; 0x28
 80036a0:	f004 fd06 	bl	80080b0 <LCD_ShowString>
					tp_dev.touchtype = !tp_dev.touchtype; //修改触屏类型.
 80036a4:	4b29      	ldr	r3, [pc, #164]	; (800374c <TP_Adjust+0x82c>)
 80036a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	bf0c      	ite	eq
 80036ae:	2301      	moveq	r3, #1
 80036b0:	2300      	movne	r3, #0
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b25      	ldr	r3, [pc, #148]	; (800374c <TP_Adjust+0x82c>)
 80036b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
					if (tp_dev.touchtype)				  //X,Y方向与屏幕相反
 80036bc:	4b23      	ldr	r3, [pc, #140]	; (800374c <TP_Adjust+0x82c>)
 80036be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d006      	beq.n	80036d4 <TP_Adjust+0x7b4>
					{
						CMD_RDX = 0X90;
 80036c6:	4b23      	ldr	r3, [pc, #140]	; (8003754 <TP_Adjust+0x834>)
 80036c8:	2290      	movs	r2, #144	; 0x90
 80036ca:	701a      	strb	r2, [r3, #0]
						CMD_RDY = 0XD0;
 80036cc:	4b22      	ldr	r3, [pc, #136]	; (8003758 <TP_Adjust+0x838>)
 80036ce:	22d0      	movs	r2, #208	; 0xd0
 80036d0:	701a      	strb	r2, [r3, #0]
					else //X,Y方向与屏幕相同
					{
						CMD_RDX = 0XD0;
						CMD_RDY = 0X90;
					}
					continue;
 80036d2:	e033      	b.n	800373c <TP_Adjust+0x81c>
						CMD_RDX = 0XD0;
 80036d4:	4b1f      	ldr	r3, [pc, #124]	; (8003754 <TP_Adjust+0x834>)
 80036d6:	22d0      	movs	r2, #208	; 0xd0
 80036d8:	701a      	strb	r2, [r3, #0]
						CMD_RDY = 0X90;
 80036da:	4b1f      	ldr	r3, [pc, #124]	; (8003758 <TP_Adjust+0x838>)
 80036dc:	2290      	movs	r2, #144	; 0x90
 80036de:	701a      	strb	r2, [r3, #0]
					continue;
 80036e0:	e02c      	b.n	800373c <TP_Adjust+0x81c>
				}
				POINT_COLOR = BLUE;
 80036e2:	4b1e      	ldr	r3, [pc, #120]	; (800375c <TP_Adjust+0x83c>)
 80036e4:	221f      	movs	r2, #31
 80036e6:	801a      	strh	r2, [r3, #0]
				LCD_Clear(WHITE);																	 //清屏
 80036e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80036ec:	f004 fa26 	bl	8007b3c <LCD_Clear>
				LCD_ShowString(35, 110, lcddev.width, lcddev.height, 16, "Touch Screen Adjust OK!"); //校正完成
 80036f0:	4b15      	ldr	r3, [pc, #84]	; (8003748 <TP_Adjust+0x828>)
 80036f2:	881a      	ldrh	r2, [r3, #0]
 80036f4:	4b14      	ldr	r3, [pc, #80]	; (8003748 <TP_Adjust+0x828>)
 80036f6:	885b      	ldrh	r3, [r3, #2]
 80036f8:	4919      	ldr	r1, [pc, #100]	; (8003760 <TP_Adjust+0x840>)
 80036fa:	9101      	str	r1, [sp, #4]
 80036fc:	2110      	movs	r1, #16
 80036fe:	9100      	str	r1, [sp, #0]
 8003700:	216e      	movs	r1, #110	; 0x6e
 8003702:	2023      	movs	r0, #35	; 0x23
 8003704:	f004 fcd4 	bl	80080b0 <LCD_ShowString>
				//delay_ms(1000);
				HAL_Delay(1000);
 8003708:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800370c:	f004 fd90 	bl	8008230 <HAL_Delay>
				TP_Save_Adjdata();
 8003710:	f7ff fa6c 	bl	8002bec <TP_Save_Adjdata>
				LCD_Clear(WHITE); //清屏
 8003714:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003718:	f004 fa10 	bl	8007b3c <LCD_Clear>
 800371c:	e00f      	b.n	800373e <TP_Adjust+0x81e>
				return;			  //校正完成
			}
		}
 800371e:	bf00      	nop
		//delay_ms(10);
		HAL_Delay(10);
 8003720:	200a      	movs	r0, #10
 8003722:	f004 fd85 	bl	8008230 <HAL_Delay>
		outtime++;
 8003726:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003728:	3301      	adds	r3, #1
 800372a:	85bb      	strh	r3, [r7, #44]	; 0x2c
		if (outtime > 1000)
 800372c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800372e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003732:	f67f ac2f 	bls.w	8002f94 <TP_Adjust+0x74>
		{
			TP_Get_Adjdata();
 8003736:	f7ff faa7 	bl	8002c88 <TP_Get_Adjdata>
			break;
 800373a:	e000      	b.n	800373e <TP_Adjust+0x81e>
		tp_dev.scan(1);							 //扫描物理坐标
 800373c:	e42a      	b.n	8002f94 <TP_Adjust+0x74>
		}
	}
}
 800373e:	3734      	adds	r7, #52	; 0x34
 8003740:	46bd      	mov	sp, r7
 8003742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003746:	bf00      	nop
 8003748:	20001034 	.word	0x20001034
 800374c:	200004e4 	.word	0x200004e4
 8003750:	080106d4 	.word	0x080106d4
 8003754:	20000518 	.word	0x20000518
 8003758:	20000519 	.word	0x20000519
 800375c:	20000730 	.word	0x20000730
 8003760:	080106e8 	.word	0x080106e8

08003764 <TP_Init>:
//触摸屏初始化
//返回值:0,没有进行校准
//       1,进行过校准
u8 TP_Init(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0

	// GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;	  //PF11设置推挽输出
	// GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT; //输出模式
	// GPIO_Init(GPIOF, &GPIO_InitStructure);		  //初始化

	TP_Read_XY(&tp_dev.x[0], &tp_dev.y[0]); //第一次读取初始化
 8003768:	490c      	ldr	r1, [pc, #48]	; (800379c <TP_Init+0x38>)
 800376a:	480d      	ldr	r0, [pc, #52]	; (80037a0 <TP_Init+0x3c>)
 800376c:	f7ff f8d4 	bl	8002918 <TP_Read_XY>
	AT24CXX_Init();							//初始化24CXX
 8003770:	f7fe ff10 	bl	8002594 <AT24CXX_Init>
	if (TP_Get_Adjdata())
 8003774:	f7ff fa88 	bl	8002c88 <TP_Get_Adjdata>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <TP_Init+0x1e>
		return 0; //已经校准
 800377e:	2300      	movs	r3, #0
 8003780:	e00a      	b.n	8003798 <TP_Init+0x34>
	else		  //未校准?
	{
		LCD_Clear(WHITE); //清屏
 8003782:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003786:	f004 f9d9 	bl	8007b3c <LCD_Clear>
		TP_Adjust();	  //屏幕校准
 800378a:	f7ff fbc9 	bl	8002f20 <TP_Adjust>
		TP_Save_Adjdata();
 800378e:	f7ff fa2d 	bl	8002bec <TP_Save_Adjdata>
	}
	TP_Get_Adjdata();
 8003792:	f7ff fa79 	bl	8002c88 <TP_Get_Adjdata>
	// }
	return 1;
 8003796:	2301      	movs	r3, #1
}
 8003798:	4618      	mov	r0, r3
 800379a:	bd80      	pop	{r7, pc}
 800379c:	200004fa 	.word	0x200004fa
 80037a0:	200004f0 	.word	0x200004f0

080037a4 <LCD_WR_REG>:
//默认为竖屏
_lcd_dev lcddev;
//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(__IO uint16_t regval)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	80fb      	strh	r3, [r7, #6]
	regval=regval;		//使用-O2优化的时候,必须插入的延时
 80037ae:	88fb      	ldrh	r3, [r7, #6]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=regval;//写入要写的寄存器序号
 80037b4:	4b04      	ldr	r3, [pc, #16]	; (80037c8 <LCD_WR_REG+0x24>)
 80037b6:	88fa      	ldrh	r2, [r7, #6]
 80037b8:	b292      	uxth	r2, r2
 80037ba:	801a      	strh	r2, [r3, #0]
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	6c00007e 	.word	0x6c00007e

080037cc <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(__IO uint16_t data)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	4603      	mov	r3, r0
 80037d4:	80fb      	strh	r3, [r7, #6]
	data=data;			//使用-O2优化的时候,必须插入的延时
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <LCD_WR_DATA+0x24>)
 80037de:	88fa      	ldrh	r2, [r7, #6]
 80037e0:	b292      	uxth	r2, r2
 80037e2:	805a      	strh	r2, [r3, #2]
}
 80037e4:	bf00      	nop
 80037e6:	370c      	adds	r7, #12
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	6c00007e 	.word	0x6c00007e

080037f4 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
uint16_t LCD_RD_DATA(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
	__IO uint16_t ram;			//防止被优化
	ram=LCD->LCD_RAM;
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <LCD_RD_DATA+0x20>)
 80037fc:	885b      	ldrh	r3, [r3, #2]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	80fb      	strh	r3, [r7, #6]
	return ram;
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	b29b      	uxth	r3, r3
}
 8003806:	4618      	mov	r0, r3
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr
 8003812:	bf00      	nop
 8003814:	6c00007e 	.word	0x6c00007e

08003818 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(uint16_t LCD_Reg,uint16_t LCD_RegValue)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	4603      	mov	r3, r0
 8003820:	460a      	mov	r2, r1
 8003822:	80fb      	strh	r3, [r7, #6]
 8003824:	4613      	mov	r3, r2
 8003826:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 8003828:	4a05      	ldr	r2, [pc, #20]	; (8003840 <LCD_WriteReg+0x28>)
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = LCD_RegValue;//写入数据
 800382e:	4a04      	ldr	r2, [pc, #16]	; (8003840 <LCD_WriteReg+0x28>)
 8003830:	88bb      	ldrh	r3, [r7, #4]
 8003832:	8053      	strh	r3, [r2, #2]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	6c00007e 	.word	0x6c00007e

08003844 <LCD_ReadReg>:
//读寄存器
//LCD_Reg:寄存器地址
//返回值:读到的数据
uint16_t LCD_ReadReg(uint16_t LCD_Reg)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	80fb      	strh	r3, [r7, #6]
	LCD_WR_REG(LCD_Reg);		//写入要读的寄存器序号
 800384e:	88fb      	ldrh	r3, [r7, #6]
 8003850:	4618      	mov	r0, r3
 8003852:	f7ff ffa7 	bl	80037a4 <LCD_WR_REG>
	delay_us(5);
 8003856:	2005      	movs	r0, #5
 8003858:	f7fd fec0 	bl	80015dc <delay_us>

	return LCD_RD_DATA();		//返回读到的值
 800385c:	f7ff ffca 	bl	80037f4 <LCD_RD_DATA>
 8003860:	4603      	mov	r3, r0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <LCD_WriteRAM_Prepare>:
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
 	LCD->LCD_REG=lcddev.wramcmd;
 8003870:	4b04      	ldr	r3, [pc, #16]	; (8003884 <LCD_WriteRAM_Prepare+0x18>)
 8003872:	4a05      	ldr	r2, [pc, #20]	; (8003888 <LCD_WriteRAM_Prepare+0x1c>)
 8003874:	8912      	ldrh	r2, [r2, #8]
 8003876:	801a      	strh	r2, [r3, #0]
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	6c00007e 	.word	0x6c00007e
 8003888:	20001034 	.word	0x20001034

0800388c <LCD_SetCursor>:
}
//设置光标位置
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	460a      	mov	r2, r1
 8003896:	80fb      	strh	r3, [r7, #6]
 8003898:	4613      	mov	r3, r2
 800389a:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 800389c:	4b92      	ldr	r3, [pc, #584]	; (8003ae8 <LCD_SetCursor+0x25c>)
 800389e:	889b      	ldrh	r3, [r3, #4]
 80038a0:	f249 3241 	movw	r2, #37697	; 0x9341
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d005      	beq.n	80038b4 <LCD_SetCursor+0x28>
 80038a8:	4b8f      	ldr	r3, [pc, #572]	; (8003ae8 <LCD_SetCursor+0x25c>)
 80038aa:	889b      	ldrh	r3, [r3, #4]
 80038ac:	f245 3210 	movw	r2, #21264	; 0x5310
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d122      	bne.n	80038fa <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 80038b4:	4b8c      	ldr	r3, [pc, #560]	; (8003ae8 <LCD_SetCursor+0x25c>)
 80038b6:	895b      	ldrh	r3, [r3, #10]
 80038b8:	4618      	mov	r0, r3
 80038ba:	f7ff ff73 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	0a1b      	lsrs	r3, r3, #8
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	4618      	mov	r0, r3
 80038c6:	f7ff ff81 	bl	80037cc <LCD_WR_DATA>
 80038ca:	88fb      	ldrh	r3, [r7, #6]
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff7b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80038d6:	4b84      	ldr	r3, [pc, #528]	; (8003ae8 <LCD_SetCursor+0x25c>)
 80038d8:	899b      	ldrh	r3, [r3, #12]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff ff62 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 80038e0:	88bb      	ldrh	r3, [r7, #4]
 80038e2:	0a1b      	lsrs	r3, r3, #8
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff ff70 	bl	80037cc <LCD_WR_DATA>
 80038ec:	88bb      	ldrh	r3, [r7, #4]
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff ff6a 	bl	80037cc <LCD_WR_DATA>
	{
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
		LCD_WriteReg(lcddev.setxcmd, Xpos);
		LCD_WriteReg(lcddev.setycmd, Ypos);
	}
}
 80038f8:	e0f1      	b.n	8003ade <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X6804)
 80038fa:	4b7b      	ldr	r3, [pc, #492]	; (8003ae8 <LCD_SetCursor+0x25c>)
 80038fc:	889b      	ldrh	r3, [r3, #4]
 80038fe:	f646 0204 	movw	r2, #26628	; 0x6804
 8003902:	4293      	cmp	r3, r2
 8003904:	d12d      	bne.n	8003962 <LCD_SetCursor+0xd6>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏时处理
 8003906:	4b78      	ldr	r3, [pc, #480]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003908:	799b      	ldrb	r3, [r3, #6]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d106      	bne.n	800391c <LCD_SetCursor+0x90>
 800390e:	4b76      	ldr	r3, [pc, #472]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003910:	881a      	ldrh	r2, [r3, #0]
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	1ad3      	subs	r3, r2, r3
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 800391c:	4b72      	ldr	r3, [pc, #456]	; (8003ae8 <LCD_SetCursor+0x25c>)
 800391e:	895b      	ldrh	r3, [r3, #10]
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff ff3f 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8003926:	88fb      	ldrh	r3, [r7, #6]
 8003928:	0a1b      	lsrs	r3, r3, #8
 800392a:	b29b      	uxth	r3, r3
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff ff4d 	bl	80037cc <LCD_WR_DATA>
 8003932:	88fb      	ldrh	r3, [r7, #6]
 8003934:	b2db      	uxtb	r3, r3
 8003936:	b29b      	uxth	r3, r3
 8003938:	4618      	mov	r0, r3
 800393a:	f7ff ff47 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800393e:	4b6a      	ldr	r3, [pc, #424]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003940:	899b      	ldrh	r3, [r3, #12]
 8003942:	4618      	mov	r0, r3
 8003944:	f7ff ff2e 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8003948:	88bb      	ldrh	r3, [r7, #4]
 800394a:	0a1b      	lsrs	r3, r3, #8
 800394c:	b29b      	uxth	r3, r3
 800394e:	4618      	mov	r0, r3
 8003950:	f7ff ff3c 	bl	80037cc <LCD_WR_DATA>
 8003954:	88bb      	ldrh	r3, [r7, #4]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	b29b      	uxth	r3, r3
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff ff36 	bl	80037cc <LCD_WR_DATA>
}
 8003960:	e0bd      	b.n	8003ade <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X1963)
 8003962:	4b61      	ldr	r3, [pc, #388]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003964:	889b      	ldrh	r3, [r3, #4]
 8003966:	f641 1263 	movw	r2, #6499	; 0x1963
 800396a:	4293      	cmp	r3, r2
 800396c:	d167      	bne.n	8003a3e <LCD_SetCursor+0x1b2>
		if(lcddev.dir==0)//x坐标需要变换
 800396e:	4b5e      	ldr	r3, [pc, #376]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003970:	799b      	ldrb	r3, [r3, #6]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d11e      	bne.n	80039b4 <LCD_SetCursor+0x128>
			Xpos=lcddev.width-1-Xpos;
 8003976:	4b5c      	ldr	r3, [pc, #368]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003978:	881a      	ldrh	r2, [r3, #0]
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 8003984:	4b58      	ldr	r3, [pc, #352]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003986:	895b      	ldrh	r3, [r3, #10]
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff0b 	bl	80037a4 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 800398e:	2000      	movs	r0, #0
 8003990:	f7ff ff1c 	bl	80037cc <LCD_WR_DATA>
 8003994:	2000      	movs	r0, #0
 8003996:	f7ff ff19 	bl	80037cc <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 800399a:	88fb      	ldrh	r3, [r7, #6]
 800399c:	0a1b      	lsrs	r3, r3, #8
 800399e:	b29b      	uxth	r3, r3
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7ff ff13 	bl	80037cc <LCD_WR_DATA>
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff0d 	bl	80037cc <LCD_WR_DATA>
 80039b2:	e021      	b.n	80039f8 <LCD_SetCursor+0x16c>
			LCD_WR_REG(lcddev.setxcmd);
 80039b4:	4b4c      	ldr	r3, [pc, #304]	; (8003ae8 <LCD_SetCursor+0x25c>)
 80039b6:	895b      	ldrh	r3, [r3, #10]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f7ff fef3 	bl	80037a4 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	0a1b      	lsrs	r3, r3, #8
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7ff ff01 	bl	80037cc <LCD_WR_DATA>
 80039ca:	88fb      	ldrh	r3, [r7, #6]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff fefb 	bl	80037cc <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 80039d6:	4b44      	ldr	r3, [pc, #272]	; (8003ae8 <LCD_SetCursor+0x25c>)
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	3b01      	subs	r3, #1
 80039dc:	121b      	asrs	r3, r3, #8
 80039de:	b29b      	uxth	r3, r3
 80039e0:	4618      	mov	r0, r3
 80039e2:	f7ff fef3 	bl	80037cc <LCD_WR_DATA>
 80039e6:	4b40      	ldr	r3, [pc, #256]	; (8003ae8 <LCD_SetCursor+0x25c>)
 80039e8:	881b      	ldrh	r3, [r3, #0]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	b2db      	uxtb	r3, r3
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7ff feea 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80039f8:	4b3b      	ldr	r3, [pc, #236]	; (8003ae8 <LCD_SetCursor+0x25c>)
 80039fa:	899b      	ldrh	r3, [r3, #12]
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7ff fed1 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8003a02:	88bb      	ldrh	r3, [r7, #4]
 8003a04:	0a1b      	lsrs	r3, r3, #8
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff fedf 	bl	80037cc <LCD_WR_DATA>
 8003a0e:	88bb      	ldrh	r3, [r7, #4]
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fed9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8003a1a:	4b33      	ldr	r3, [pc, #204]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003a1c:	885b      	ldrh	r3, [r3, #2]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	121b      	asrs	r3, r3, #8
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	4618      	mov	r0, r3
 8003a26:	f7ff fed1 	bl	80037cc <LCD_WR_DATA>
 8003a2a:	4b2f      	ldr	r3, [pc, #188]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003a2c:	885b      	ldrh	r3, [r3, #2]
 8003a2e:	3b01      	subs	r3, #1
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff fec8 	bl	80037cc <LCD_WR_DATA>
}
 8003a3c:	e04f      	b.n	8003ade <LCD_SetCursor+0x252>
	}else if(lcddev.id==0X5510)
 8003a3e:	4b2a      	ldr	r3, [pc, #168]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003a40:	889b      	ldrh	r3, [r3, #4]
 8003a42:	f245 5210 	movw	r2, #21776	; 0x5510
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d130      	bne.n	8003aac <LCD_SetCursor+0x220>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 8003a4a:	4b27      	ldr	r3, [pc, #156]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003a4c:	895b      	ldrh	r3, [r3, #10]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff fea8 	bl	80037a4 <LCD_WR_REG>
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	0a1b      	lsrs	r3, r3, #8
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff feb6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 8003a60:	4b21      	ldr	r3, [pc, #132]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003a62:	895b      	ldrh	r3, [r3, #10]
 8003a64:	3301      	adds	r3, #1
 8003a66:	b29b      	uxth	r3, r3
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff fe9b 	bl	80037a4 <LCD_WR_REG>
 8003a6e:	88fb      	ldrh	r3, [r7, #6]
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	4618      	mov	r0, r3
 8003a76:	f7ff fea9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003a7c:	899b      	ldrh	r3, [r3, #12]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7ff fe90 	bl	80037a4 <LCD_WR_REG>
 8003a84:	88bb      	ldrh	r3, [r7, #4]
 8003a86:	0a1b      	lsrs	r3, r3, #8
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fe9e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 8003a90:	4b15      	ldr	r3, [pc, #84]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003a92:	899b      	ldrh	r3, [r3, #12]
 8003a94:	3301      	adds	r3, #1
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff fe83 	bl	80037a4 <LCD_WR_REG>
 8003a9e:	88bb      	ldrh	r3, [r7, #4]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f7ff fe91 	bl	80037cc <LCD_WR_DATA>
}
 8003aaa:	e018      	b.n	8003ade <LCD_SetCursor+0x252>
		if(lcddev.dir==1)Xpos=lcddev.width-1-Xpos;//横屏其实就是调转x,y坐标
 8003aac:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003aae:	799b      	ldrb	r3, [r3, #6]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d106      	bne.n	8003ac2 <LCD_SetCursor+0x236>
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	88fb      	ldrh	r3, [r7, #6]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd, Xpos);
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003ac4:	895b      	ldrh	r3, [r3, #10]
 8003ac6:	88fa      	ldrh	r2, [r7, #6]
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff fea4 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd, Ypos);
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <LCD_SetCursor+0x25c>)
 8003ad2:	899b      	ldrh	r3, [r3, #12]
 8003ad4:	88ba      	ldrh	r2, [r7, #4]
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff fe9d 	bl	8003818 <LCD_WriteReg>
}
 8003ade:	bf00      	nop
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20001034 	.word	0x20001034

08003aec <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341/6804这两个奇葩),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9320/9325/9328/4531/4535/1505/b505/5408/9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(uint8_t dir)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	71fb      	strb	r3, [r7, #7]
	uint16_t regval=0;
 8003af6:	2300      	movs	r3, #0
 8003af8:	81fb      	strh	r3, [r7, #14]
	uint16_t dirreg=0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	81bb      	strh	r3, [r7, #12]
	uint16_t temp;
	if((lcddev.dir==1&&lcddev.id!=0X6804&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对6804和1963不改变扫描方向！竖屏时1963改变方向
 8003afe:	4b78      	ldr	r3, [pc, #480]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003b00:	799b      	ldrb	r3, [r3, #6]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d10b      	bne.n	8003b1e <LCD_Scan_Dir+0x32>
 8003b06:	4b76      	ldr	r3, [pc, #472]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003b08:	889b      	ldrh	r3, [r3, #4]
 8003b0a:	f646 0204 	movw	r2, #26628	; 0x6804
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d005      	beq.n	8003b1e <LCD_Scan_Dir+0x32>
 8003b12:	4b73      	ldr	r3, [pc, #460]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003b14:	889b      	ldrh	r3, [r3, #4]
 8003b16:	f641 1263 	movw	r2, #6499	; 0x1963
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d109      	bne.n	8003b32 <LCD_Scan_Dir+0x46>
 8003b1e:	4b70      	ldr	r3, [pc, #448]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003b20:	799b      	ldrb	r3, [r3, #6]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d134      	bne.n	8003b90 <LCD_Scan_Dir+0xa4>
 8003b26:	4b6e      	ldr	r3, [pc, #440]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003b28:	889b      	ldrh	r3, [r3, #4]
 8003b2a:	f641 1263 	movw	r2, #6499	; 0x1963
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d12e      	bne.n	8003b90 <LCD_Scan_Dir+0xa4>
	{
		switch(dir)//方向转换
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	2b07      	cmp	r3, #7
 8003b36:	d82c      	bhi.n	8003b92 <LCD_Scan_Dir+0xa6>
 8003b38:	a201      	add	r2, pc, #4	; (adr r2, 8003b40 <LCD_Scan_Dir+0x54>)
 8003b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3e:	bf00      	nop
 8003b40:	08003b61 	.word	0x08003b61
 8003b44:	08003b67 	.word	0x08003b67
 8003b48:	08003b6d 	.word	0x08003b6d
 8003b4c:	08003b73 	.word	0x08003b73
 8003b50:	08003b79 	.word	0x08003b79
 8003b54:	08003b7f 	.word	0x08003b7f
 8003b58:	08003b85 	.word	0x08003b85
 8003b5c:	08003b8b 	.word	0x08003b8b
		{
			case 0:dir=6;break;
 8003b60:	2306      	movs	r3, #6
 8003b62:	71fb      	strb	r3, [r7, #7]
 8003b64:	e015      	b.n	8003b92 <LCD_Scan_Dir+0xa6>
			case 1:dir=7;break;
 8003b66:	2307      	movs	r3, #7
 8003b68:	71fb      	strb	r3, [r7, #7]
 8003b6a:	e012      	b.n	8003b92 <LCD_Scan_Dir+0xa6>
			case 2:dir=4;break;
 8003b6c:	2304      	movs	r3, #4
 8003b6e:	71fb      	strb	r3, [r7, #7]
 8003b70:	e00f      	b.n	8003b92 <LCD_Scan_Dir+0xa6>
			case 3:dir=5;break;
 8003b72:	2305      	movs	r3, #5
 8003b74:	71fb      	strb	r3, [r7, #7]
 8003b76:	e00c      	b.n	8003b92 <LCD_Scan_Dir+0xa6>
			case 4:dir=1;break;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	71fb      	strb	r3, [r7, #7]
 8003b7c:	e009      	b.n	8003b92 <LCD_Scan_Dir+0xa6>
			case 5:dir=0;break;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	71fb      	strb	r3, [r7, #7]
 8003b82:	e006      	b.n	8003b92 <LCD_Scan_Dir+0xa6>
			case 6:dir=3;break;
 8003b84:	2303      	movs	r3, #3
 8003b86:	71fb      	strb	r3, [r7, #7]
 8003b88:	e003      	b.n	8003b92 <LCD_Scan_Dir+0xa6>
			case 7:dir=2;break;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	71fb      	strb	r3, [r7, #7]
 8003b8e:	e000      	b.n	8003b92 <LCD_Scan_Dir+0xa6>
		}
	}
 8003b90:	bf00      	nop
	if(lcddev.id==0x9341||lcddev.id==0X6804||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/6804/5310/5510/1963,特殊处理
 8003b92:	4b53      	ldr	r3, [pc, #332]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003b94:	889b      	ldrh	r3, [r3, #4]
 8003b96:	f249 3241 	movw	r2, #37697	; 0x9341
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d018      	beq.n	8003bd0 <LCD_Scan_Dir+0xe4>
 8003b9e:	4b50      	ldr	r3, [pc, #320]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003ba0:	889b      	ldrh	r3, [r3, #4]
 8003ba2:	f646 0204 	movw	r2, #26628	; 0x6804
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d012      	beq.n	8003bd0 <LCD_Scan_Dir+0xe4>
 8003baa:	4b4d      	ldr	r3, [pc, #308]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003bac:	889b      	ldrh	r3, [r3, #4]
 8003bae:	f245 3210 	movw	r2, #21264	; 0x5310
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00c      	beq.n	8003bd0 <LCD_Scan_Dir+0xe4>
 8003bb6:	4b4a      	ldr	r3, [pc, #296]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003bb8:	889b      	ldrh	r3, [r3, #4]
 8003bba:	f245 5210 	movw	r2, #21776	; 0x5510
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d006      	beq.n	8003bd0 <LCD_Scan_Dir+0xe4>
 8003bc2:	4b47      	ldr	r3, [pc, #284]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003bc4:	889b      	ldrh	r3, [r3, #4]
 8003bc6:	f641 1263 	movw	r2, #6499	; 0x1963
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	f040 813c 	bne.w	8003e48 <LCD_Scan_Dir+0x35c>
	{
		switch(dir)
 8003bd0:	79fb      	ldrb	r3, [r7, #7]
 8003bd2:	2b07      	cmp	r3, #7
 8003bd4:	d835      	bhi.n	8003c42 <LCD_Scan_Dir+0x156>
 8003bd6:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <LCD_Scan_Dir+0xf0>)
 8003bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bdc:	08003c43 	.word	0x08003c43
 8003be0:	08003bfd 	.word	0x08003bfd
 8003be4:	08003c07 	.word	0x08003c07
 8003be8:	08003c11 	.word	0x08003c11
 8003bec:	08003c1b 	.word	0x08003c1b
 8003bf0:	08003c25 	.word	0x08003c25
 8003bf4:	08003c2f 	.word	0x08003c2f
 8003bf8:	08003c39 	.word	0x08003c39
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 8003bfc:	89fb      	ldrh	r3, [r7, #14]
 8003bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c02:	81fb      	strh	r3, [r7, #14]
				break;
 8003c04:	e01d      	b.n	8003c42 <LCD_Scan_Dir+0x156>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 8003c06:	89fb      	ldrh	r3, [r7, #14]
 8003c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c0c:	81fb      	strh	r3, [r7, #14]
				break;
 8003c0e:	e018      	b.n	8003c42 <LCD_Scan_Dir+0x156>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 8003c10:	89fb      	ldrh	r3, [r7, #14]
 8003c12:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c16:	81fb      	strh	r3, [r7, #14]
				break;
 8003c18:	e013      	b.n	8003c42 <LCD_Scan_Dir+0x156>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 8003c1a:	89fb      	ldrh	r3, [r7, #14]
 8003c1c:	f043 0320 	orr.w	r3, r3, #32
 8003c20:	81fb      	strh	r3, [r7, #14]
				break;
 8003c22:	e00e      	b.n	8003c42 <LCD_Scan_Dir+0x156>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 8003c24:	89fb      	ldrh	r3, [r7, #14]
 8003c26:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003c2a:	81fb      	strh	r3, [r7, #14]
				break;
 8003c2c:	e009      	b.n	8003c42 <LCD_Scan_Dir+0x156>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 8003c2e:	89fb      	ldrh	r3, [r7, #14]
 8003c30:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8003c34:	81fb      	strh	r3, [r7, #14]
				break;
 8003c36:	e004      	b.n	8003c42 <LCD_Scan_Dir+0x156>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 8003c38:	89fb      	ldrh	r3, [r7, #14]
 8003c3a:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8003c3e:	81fb      	strh	r3, [r7, #14]
				break;
 8003c40:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 8003c42:	4b27      	ldr	r3, [pc, #156]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003c44:	889b      	ldrh	r3, [r3, #4]
 8003c46:	f245 5210 	movw	r2, #21776	; 0x5510
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d103      	bne.n	8003c56 <LCD_Scan_Dir+0x16a>
 8003c4e:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 8003c52:	81bb      	strh	r3, [r7, #12]
 8003c54:	e001      	b.n	8003c5a <LCD_Scan_Dir+0x16e>
		else dirreg=0X36;
 8003c56:	2336      	movs	r3, #54	; 0x36
 8003c58:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 8003c5a:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003c5c:	889b      	ldrh	r3, [r3, #4]
 8003c5e:	f245 3210 	movw	r2, #21264	; 0x5310
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00f      	beq.n	8003c86 <LCD_Scan_Dir+0x19a>
 8003c66:	4b1e      	ldr	r3, [pc, #120]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003c68:	889b      	ldrh	r3, [r3, #4]
 8003c6a:	f245 5210 	movw	r2, #21776	; 0x5510
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d009      	beq.n	8003c86 <LCD_Scan_Dir+0x19a>
 8003c72:	4b1b      	ldr	r3, [pc, #108]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003c74:	889b      	ldrh	r3, [r3, #4]
 8003c76:	f641 1263 	movw	r2, #6499	; 0x1963
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <LCD_Scan_Dir+0x19a>
 8003c7e:	89fb      	ldrh	r3, [r7, #14]
 8003c80:	f043 0308 	orr.w	r3, r3, #8
 8003c84:	81fb      	strh	r3, [r7, #14]
		if(lcddev.id==0X6804)regval|=0x02;//6804的BIT6和9341的反了
 8003c86:	4b16      	ldr	r3, [pc, #88]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003c88:	889b      	ldrh	r3, [r3, #4]
 8003c8a:	f646 0204 	movw	r2, #26628	; 0x6804
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d103      	bne.n	8003c9a <LCD_Scan_Dir+0x1ae>
 8003c92:	89fb      	ldrh	r3, [r7, #14]
 8003c94:	f043 0302 	orr.w	r3, r3, #2
 8003c98:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8003c9a:	89fa      	ldrh	r2, [r7, #14]
 8003c9c:	89bb      	ldrh	r3, [r7, #12]
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fdb9 	bl	8003818 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 8003ca6:	4b0e      	ldr	r3, [pc, #56]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003ca8:	889b      	ldrh	r3, [r3, #4]
 8003caa:	f641 1263 	movw	r2, #6499	; 0x1963
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d028      	beq.n	8003d04 <LCD_Scan_Dir+0x218>
		{
			if(regval&0X20)
 8003cb2:	89fb      	ldrh	r3, [r7, #14]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d013      	beq.n	8003ce4 <LCD_Scan_Dir+0x1f8>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 8003cbc:	4b08      	ldr	r3, [pc, #32]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003cbe:	881a      	ldrh	r2, [r3, #0]
 8003cc0:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003cc2:	885b      	ldrh	r3, [r3, #2]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d21d      	bcs.n	8003d04 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8003cce:	4b04      	ldr	r3, [pc, #16]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003cd0:	885a      	ldrh	r2, [r3, #2]
 8003cd2:	4b03      	ldr	r3, [pc, #12]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003cd4:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8003cd6:	4a02      	ldr	r2, [pc, #8]	; (8003ce0 <LCD_Scan_Dir+0x1f4>)
 8003cd8:	897b      	ldrh	r3, [r7, #10]
 8003cda:	8053      	strh	r3, [r2, #2]
 8003cdc:	e012      	b.n	8003d04 <LCD_Scan_Dir+0x218>
 8003cde:	bf00      	nop
 8003ce0:	20001034 	.word	0x20001034
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 8003ce4:	4b7d      	ldr	r3, [pc, #500]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003ce6:	881a      	ldrh	r2, [r3, #0]
 8003ce8:	4b7c      	ldr	r3, [pc, #496]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003cea:	885b      	ldrh	r3, [r3, #2]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d909      	bls.n	8003d04 <LCD_Scan_Dir+0x218>
				{
					temp=lcddev.width;
 8003cf0:	4b7a      	ldr	r3, [pc, #488]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 8003cf6:	4b79      	ldr	r3, [pc, #484]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003cf8:	885a      	ldrh	r2, [r3, #2]
 8003cfa:	4b78      	ldr	r3, [pc, #480]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003cfc:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 8003cfe:	4a77      	ldr	r2, [pc, #476]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003d00:	897b      	ldrh	r3, [r7, #10]
 8003d02:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 8003d04:	4b75      	ldr	r3, [pc, #468]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003d06:	889b      	ldrh	r3, [r3, #4]
 8003d08:	f245 5210 	movw	r2, #21776	; 0x5510
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d162      	bne.n	8003dd6 <LCD_Scan_Dir+0x2ea>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 8003d10:	4b72      	ldr	r3, [pc, #456]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003d12:	895b      	ldrh	r3, [r3, #10]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fd45 	bl	80037a4 <LCD_WR_REG>
 8003d1a:	2000      	movs	r0, #0
 8003d1c:	f7ff fd56 	bl	80037cc <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 8003d20:	4b6e      	ldr	r3, [pc, #440]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003d22:	895b      	ldrh	r3, [r3, #10]
 8003d24:	3301      	adds	r3, #1
 8003d26:	b29b      	uxth	r3, r3
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7ff fd3b 	bl	80037a4 <LCD_WR_REG>
 8003d2e:	2000      	movs	r0, #0
 8003d30:	f7ff fd4c 	bl	80037cc <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 8003d34:	4b69      	ldr	r3, [pc, #420]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003d36:	895b      	ldrh	r3, [r3, #10]
 8003d38:	3302      	adds	r3, #2
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff fd31 	bl	80037a4 <LCD_WR_REG>
 8003d42:	4b66      	ldr	r3, [pc, #408]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	3b01      	subs	r3, #1
 8003d48:	121b      	asrs	r3, r3, #8
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f7ff fd3d 	bl	80037cc <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8003d52:	4b62      	ldr	r3, [pc, #392]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003d54:	895b      	ldrh	r3, [r3, #10]
 8003d56:	3303      	adds	r3, #3
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f7ff fd22 	bl	80037a4 <LCD_WR_REG>
 8003d60:	4b5e      	ldr	r3, [pc, #376]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff fd2d 	bl	80037cc <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 8003d72:	4b5a      	ldr	r3, [pc, #360]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003d74:	899b      	ldrh	r3, [r3, #12]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fd14 	bl	80037a4 <LCD_WR_REG>
 8003d7c:	2000      	movs	r0, #0
 8003d7e:	f7ff fd25 	bl	80037cc <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 8003d82:	4b56      	ldr	r3, [pc, #344]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003d84:	899b      	ldrh	r3, [r3, #12]
 8003d86:	3301      	adds	r3, #1
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7ff fd0a 	bl	80037a4 <LCD_WR_REG>
 8003d90:	2000      	movs	r0, #0
 8003d92:	f7ff fd1b 	bl	80037cc <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 8003d96:	4b51      	ldr	r3, [pc, #324]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003d98:	899b      	ldrh	r3, [r3, #12]
 8003d9a:	3302      	adds	r3, #2
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff fd00 	bl	80037a4 <LCD_WR_REG>
 8003da4:	4b4d      	ldr	r3, [pc, #308]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003da6:	885b      	ldrh	r3, [r3, #2]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	121b      	asrs	r3, r3, #8
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7ff fd0c 	bl	80037cc <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8003db4:	4b49      	ldr	r3, [pc, #292]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003db6:	899b      	ldrh	r3, [r3, #12]
 8003db8:	3303      	adds	r3, #3
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7ff fcf1 	bl	80037a4 <LCD_WR_REG>
 8003dc2:	4b46      	ldr	r3, [pc, #280]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003dc4:	885b      	ldrh	r3, [r3, #2]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fcfc 	bl	80037cc <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8003dd4:	e07e      	b.n	8003ed4 <LCD_Scan_Dir+0x3e8>
		}else
		{
			LCD_WR_REG(lcddev.setxcmd);
 8003dd6:	4b41      	ldr	r3, [pc, #260]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003dd8:	895b      	ldrh	r3, [r3, #10]
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f7ff fce2 	bl	80037a4 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8003de0:	2000      	movs	r0, #0
 8003de2:	f7ff fcf3 	bl	80037cc <LCD_WR_DATA>
 8003de6:	2000      	movs	r0, #0
 8003de8:	f7ff fcf0 	bl	80037cc <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8003dec:	4b3b      	ldr	r3, [pc, #236]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003dee:	881b      	ldrh	r3, [r3, #0]
 8003df0:	3b01      	subs	r3, #1
 8003df2:	121b      	asrs	r3, r3, #8
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff fce8 	bl	80037cc <LCD_WR_DATA>
 8003dfc:	4b37      	ldr	r3, [pc, #220]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f7ff fcdf 	bl	80037cc <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 8003e0e:	4b33      	ldr	r3, [pc, #204]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003e10:	899b      	ldrh	r3, [r3, #12]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff fcc6 	bl	80037a4 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 8003e18:	2000      	movs	r0, #0
 8003e1a:	f7ff fcd7 	bl	80037cc <LCD_WR_DATA>
 8003e1e:	2000      	movs	r0, #0
 8003e20:	f7ff fcd4 	bl	80037cc <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8003e24:	4b2d      	ldr	r3, [pc, #180]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003e26:	885b      	ldrh	r3, [r3, #2]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	121b      	asrs	r3, r3, #8
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff fccc 	bl	80037cc <LCD_WR_DATA>
 8003e34:	4b29      	ldr	r3, [pc, #164]	; (8003edc <LCD_Scan_Dir+0x3f0>)
 8003e36:	885b      	ldrh	r3, [r3, #2]
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7ff fcc3 	bl	80037cc <LCD_WR_DATA>
		if(lcddev.id==0X5510)
 8003e46:	e045      	b.n	8003ed4 <LCD_Scan_Dir+0x3e8>
		}
  	}else
	{
		switch(dir)
 8003e48:	79fb      	ldrb	r3, [r7, #7]
 8003e4a:	2b07      	cmp	r3, #7
 8003e4c:	d835      	bhi.n	8003eba <LCD_Scan_Dir+0x3ce>
 8003e4e:	a201      	add	r2, pc, #4	; (adr r2, 8003e54 <LCD_Scan_Dir+0x368>)
 8003e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e54:	08003e75 	.word	0x08003e75
 8003e58:	08003e7f 	.word	0x08003e7f
 8003e5c:	08003e89 	.word	0x08003e89
 8003e60:	08003ebb 	.word	0x08003ebb
 8003e64:	08003e93 	.word	0x08003e93
 8003e68:	08003e9d 	.word	0x08003e9d
 8003e6c:	08003ea7 	.word	0x08003ea7
 8003e70:	08003eb1 	.word	0x08003eb1
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(1<<5)|(1<<4)|(0<<3);
 8003e74:	89fb      	ldrh	r3, [r7, #14]
 8003e76:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003e7a:	81fb      	strh	r3, [r7, #14]
				break;
 8003e7c:	e01d      	b.n	8003eba <LCD_Scan_Dir+0x3ce>
			case L2R_D2U://从左到右,从下到上
				regval|=(0<<5)|(1<<4)|(0<<3);
 8003e7e:	89fb      	ldrh	r3, [r7, #14]
 8003e80:	f043 0310 	orr.w	r3, r3, #16
 8003e84:	81fb      	strh	r3, [r7, #14]
				break;
 8003e86:	e018      	b.n	8003eba <LCD_Scan_Dir+0x3ce>
			case R2L_U2D://从右到左,从上到下
				regval|=(1<<5)|(0<<4)|(0<<3);
 8003e88:	89fb      	ldrh	r3, [r7, #14]
 8003e8a:	f043 0320 	orr.w	r3, r3, #32
 8003e8e:	81fb      	strh	r3, [r7, #14]
				break;
 8003e90:	e013      	b.n	8003eba <LCD_Scan_Dir+0x3ce>
			case R2L_D2U://从右到左,从下到上
				regval|=(0<<5)|(0<<4)|(0<<3);
				break;
			case U2D_L2R://从上到下,从左到右
				regval|=(1<<5)|(1<<4)|(1<<3);
 8003e92:	89fb      	ldrh	r3, [r7, #14]
 8003e94:	f043 0338 	orr.w	r3, r3, #56	; 0x38
 8003e98:	81fb      	strh	r3, [r7, #14]
				break;
 8003e9a:	e00e      	b.n	8003eba <LCD_Scan_Dir+0x3ce>
			case U2D_R2L://从上到下,从右到左
				regval|=(1<<5)|(0<<4)|(1<<3);
 8003e9c:	89fb      	ldrh	r3, [r7, #14]
 8003e9e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003ea2:	81fb      	strh	r3, [r7, #14]
				break;
 8003ea4:	e009      	b.n	8003eba <LCD_Scan_Dir+0x3ce>
			case D2U_L2R://从下到上,从左到右
				regval|=(0<<5)|(1<<4)|(1<<3);
 8003ea6:	89fb      	ldrh	r3, [r7, #14]
 8003ea8:	f043 0318 	orr.w	r3, r3, #24
 8003eac:	81fb      	strh	r3, [r7, #14]
				break;
 8003eae:	e004      	b.n	8003eba <LCD_Scan_Dir+0x3ce>
			case D2U_R2L://从下到上,从右到左
				regval|=(0<<5)|(0<<4)|(1<<3);
 8003eb0:	89fb      	ldrh	r3, [r7, #14]
 8003eb2:	f043 0308 	orr.w	r3, r3, #8
 8003eb6:	81fb      	strh	r3, [r7, #14]
				break;
 8003eb8:	bf00      	nop
		}
		dirreg=0X03;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	81bb      	strh	r3, [r7, #12]
		regval|=1<<12;
 8003ebe:	89fb      	ldrh	r3, [r7, #14]
 8003ec0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ec4:	81fb      	strh	r3, [r7, #14]
		LCD_WriteReg(dirreg,regval);
 8003ec6:	89fa      	ldrh	r2, [r7, #14]
 8003ec8:	89bb      	ldrh	r3, [r7, #12]
 8003eca:	4611      	mov	r1, r2
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff fca3 	bl	8003818 <LCD_WriteReg>
	}
}
 8003ed2:	bf00      	nop
 8003ed4:	bf00      	nop
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20001034 	.word	0x20001034

08003ee0 <LCD_DrawPoint>:
//画点
//x,y:坐标
//POINT_COLOR:此点的颜色
void LCD_DrawPoint(uint16_t x,uint16_t y)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	460a      	mov	r2, r1
 8003eea:	80fb      	strh	r3, [r7, #6]
 8003eec:	4613      	mov	r3, r2
 8003eee:	80bb      	strh	r3, [r7, #4]
	LCD_SetCursor(x,y);		//设置光标位置
 8003ef0:	88ba      	ldrh	r2, [r7, #4]
 8003ef2:	88fb      	ldrh	r3, [r7, #6]
 8003ef4:	4611      	mov	r1, r2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7ff fcc8 	bl	800388c <LCD_SetCursor>
	LCD_WriteRAM_Prepare();	//开始写入GRAM
 8003efc:	f7ff fcb6 	bl	800386c <LCD_WriteRAM_Prepare>
	LCD->LCD_RAM=POINT_COLOR;
 8003f00:	4b03      	ldr	r3, [pc, #12]	; (8003f10 <LCD_DrawPoint+0x30>)
 8003f02:	4a04      	ldr	r2, [pc, #16]	; (8003f14 <LCD_DrawPoint+0x34>)
 8003f04:	8812      	ldrh	r2, [r2, #0]
 8003f06:	805a      	strh	r2, [r3, #2]
}
 8003f08:	bf00      	nop
 8003f0a:	3708      	adds	r7, #8
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	6c00007e 	.word	0x6c00007e
 8003f14:	20000730 	.word	0x20000730

08003f18 <LCD_Fast_DrawPoint>:
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(uint16_t x,uint16_t y,uint16_t color)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	4603      	mov	r3, r0
 8003f20:	80fb      	strh	r3, [r7, #6]
 8003f22:	460b      	mov	r3, r1
 8003f24:	80bb      	strh	r3, [r7, #4]
 8003f26:	4613      	mov	r3, r2
 8003f28:	807b      	strh	r3, [r7, #2]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8003f2a:	4b85      	ldr	r3, [pc, #532]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 8003f2c:	889b      	ldrh	r3, [r3, #4]
 8003f2e:	f249 3241 	movw	r2, #37697	; 0x9341
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d005      	beq.n	8003f42 <LCD_Fast_DrawPoint+0x2a>
 8003f36:	4b82      	ldr	r3, [pc, #520]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 8003f38:	889b      	ldrh	r3, [r3, #4]
 8003f3a:	f245 3210 	movw	r2, #21264	; 0x5310
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d122      	bne.n	8003f88 <LCD_Fast_DrawPoint+0x70>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8003f42:	4b7f      	ldr	r3, [pc, #508]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 8003f44:	895b      	ldrh	r3, [r3, #10]
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7ff fc2c 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8003f4c:	88fb      	ldrh	r3, [r7, #6]
 8003f4e:	0a1b      	lsrs	r3, r3, #8
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff fc3a 	bl	80037cc <LCD_WR_DATA>
 8003f58:	88fb      	ldrh	r3, [r7, #6]
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff fc34 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8003f64:	4b76      	ldr	r3, [pc, #472]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 8003f66:	899b      	ldrh	r3, [r3, #12]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7ff fc1b 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8003f6e:	88bb      	ldrh	r3, [r7, #4]
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	4618      	mov	r0, r3
 8003f76:	f7ff fc29 	bl	80037cc <LCD_WR_DATA>
 8003f7a:	88bb      	ldrh	r3, [r7, #4]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fc23 	bl	80037cc <LCD_WR_DATA>
 8003f86:	e0cf      	b.n	8004128 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X5510)
 8003f88:	4b6d      	ldr	r3, [pc, #436]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 8003f8a:	889b      	ldrh	r3, [r3, #4]
 8003f8c:	f245 5210 	movw	r2, #21776	; 0x5510
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d130      	bne.n	8003ff6 <LCD_Fast_DrawPoint+0xde>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 8003f94:	4b6a      	ldr	r3, [pc, #424]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 8003f96:	895b      	ldrh	r3, [r3, #10]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff fc03 	bl	80037a4 <LCD_WR_REG>
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	0a1b      	lsrs	r3, r3, #8
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f7ff fc11 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 8003faa:	4b65      	ldr	r3, [pc, #404]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 8003fac:	895b      	ldrh	r3, [r3, #10]
 8003fae:	3301      	adds	r3, #1
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7ff fbf6 	bl	80037a4 <LCD_WR_REG>
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	b29b      	uxth	r3, r3
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fc04 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 8003fc4:	4b5e      	ldr	r3, [pc, #376]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 8003fc6:	899b      	ldrh	r3, [r3, #12]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff fbeb 	bl	80037a4 <LCD_WR_REG>
 8003fce:	88bb      	ldrh	r3, [r7, #4]
 8003fd0:	0a1b      	lsrs	r3, r3, #8
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7ff fbf9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 8003fda:	4b59      	ldr	r3, [pc, #356]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 8003fdc:	899b      	ldrh	r3, [r3, #12]
 8003fde:	3301      	adds	r3, #1
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7ff fbde 	bl	80037a4 <LCD_WR_REG>
 8003fe8:	88bb      	ldrh	r3, [r7, #4]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7ff fbec 	bl	80037cc <LCD_WR_DATA>
 8003ff4:	e098      	b.n	8004128 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X1963)
 8003ff6:	4b52      	ldr	r3, [pc, #328]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 8003ff8:	889b      	ldrh	r3, [r3, #4]
 8003ffa:	f641 1263 	movw	r2, #6499	; 0x1963
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d145      	bne.n	800408e <LCD_Fast_DrawPoint+0x176>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 8004002:	4b4f      	ldr	r3, [pc, #316]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 8004004:	799b      	ldrb	r3, [r3, #6]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <LCD_Fast_DrawPoint+0x100>
 800400a:	4b4d      	ldr	r3, [pc, #308]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 800400c:	881a      	ldrh	r2, [r3, #0]
 800400e:	88fb      	ldrh	r3, [r7, #6]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8004018:	4b49      	ldr	r3, [pc, #292]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 800401a:	895b      	ldrh	r3, [r3, #10]
 800401c:	4618      	mov	r0, r3
 800401e:	f7ff fbc1 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8004022:	88fb      	ldrh	r3, [r7, #6]
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	b29b      	uxth	r3, r3
 8004028:	4618      	mov	r0, r3
 800402a:	f7ff fbcf 	bl	80037cc <LCD_WR_DATA>
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	b29b      	uxth	r3, r3
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fbc9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 800403a:	88fb      	ldrh	r3, [r7, #6]
 800403c:	0a1b      	lsrs	r3, r3, #8
 800403e:	b29b      	uxth	r3, r3
 8004040:	4618      	mov	r0, r3
 8004042:	f7ff fbc3 	bl	80037cc <LCD_WR_DATA>
 8004046:	88fb      	ldrh	r3, [r7, #6]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	b29b      	uxth	r3, r3
 800404c:	4618      	mov	r0, r3
 800404e:	f7ff fbbd 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 8004052:	4b3b      	ldr	r3, [pc, #236]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 8004054:	899b      	ldrh	r3, [r3, #12]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fba4 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 800405c:	88bb      	ldrh	r3, [r7, #4]
 800405e:	0a1b      	lsrs	r3, r3, #8
 8004060:	b29b      	uxth	r3, r3
 8004062:	4618      	mov	r0, r3
 8004064:	f7ff fbb2 	bl	80037cc <LCD_WR_DATA>
 8004068:	88bb      	ldrh	r3, [r7, #4]
 800406a:	b2db      	uxtb	r3, r3
 800406c:	b29b      	uxth	r3, r3
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff fbac 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8004074:	88bb      	ldrh	r3, [r7, #4]
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	b29b      	uxth	r3, r3
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fba6 	bl	80037cc <LCD_WR_DATA>
 8004080:	88bb      	ldrh	r3, [r7, #4]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	b29b      	uxth	r3, r3
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fba0 	bl	80037cc <LCD_WR_DATA>
 800408c:	e04c      	b.n	8004128 <LCD_Fast_DrawPoint+0x210>
	}else if(lcddev.id==0X6804)
 800408e:	4b2c      	ldr	r3, [pc, #176]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 8004090:	889b      	ldrh	r3, [r3, #4]
 8004092:	f646 0204 	movw	r2, #26628	; 0x6804
 8004096:	4293      	cmp	r3, r2
 8004098:	d12d      	bne.n	80040f6 <LCD_Fast_DrawPoint+0x1de>
	{
		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏时处理
 800409a:	4b29      	ldr	r3, [pc, #164]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 800409c:	799b      	ldrb	r3, [r3, #6]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d106      	bne.n	80040b0 <LCD_Fast_DrawPoint+0x198>
 80040a2:	4b27      	ldr	r3, [pc, #156]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 80040a4:	881a      	ldrh	r2, [r3, #0]
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	3b01      	subs	r3, #1
 80040ae:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 80040b0:	4b23      	ldr	r3, [pc, #140]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 80040b2:	895b      	ldrh	r3, [r3, #10]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fb75 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 80040ba:	88fb      	ldrh	r3, [r7, #6]
 80040bc:	0a1b      	lsrs	r3, r3, #8
 80040be:	b29b      	uxth	r3, r3
 80040c0:	4618      	mov	r0, r3
 80040c2:	f7ff fb83 	bl	80037cc <LCD_WR_DATA>
 80040c6:	88fb      	ldrh	r3, [r7, #6]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7ff fb7d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80040d2:	4b1b      	ldr	r3, [pc, #108]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 80040d4:	899b      	ldrh	r3, [r3, #12]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff fb64 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80040dc:	88bb      	ldrh	r3, [r7, #4]
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	4618      	mov	r0, r3
 80040e4:	f7ff fb72 	bl	80037cc <LCD_WR_DATA>
 80040e8:	88bb      	ldrh	r3, [r7, #4]
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	4618      	mov	r0, r3
 80040f0:	f7ff fb6c 	bl	80037cc <LCD_WR_DATA>
 80040f4:	e018      	b.n	8004128 <LCD_Fast_DrawPoint+0x210>
	}else
	{
 		if(lcddev.dir==1)x=lcddev.width-1-x;//横屏其实就是调转x,y坐标
 80040f6:	4b12      	ldr	r3, [pc, #72]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 80040f8:	799b      	ldrb	r3, [r3, #6]
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d106      	bne.n	800410c <LCD_Fast_DrawPoint+0x1f4>
 80040fe:	4b10      	ldr	r3, [pc, #64]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 8004100:	881a      	ldrh	r2, [r3, #0]
 8004102:	88fb      	ldrh	r3, [r7, #6]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	80fb      	strh	r3, [r7, #6]
		LCD_WriteReg(lcddev.setxcmd,x);
 800410c:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 800410e:	895b      	ldrh	r3, [r3, #10]
 8004110:	88fa      	ldrh	r2, [r7, #6]
 8004112:	4611      	mov	r1, r2
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff fb7f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(lcddev.setycmd,y);
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 800411c:	899b      	ldrh	r3, [r3, #12]
 800411e:	88ba      	ldrh	r2, [r7, #4]
 8004120:	4611      	mov	r1, r2
 8004122:	4618      	mov	r0, r3
 8004124:	f7ff fb78 	bl	8003818 <LCD_WriteReg>
	}
	LCD->LCD_REG=lcddev.wramcmd;
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <LCD_Fast_DrawPoint+0x22c>)
 800412a:	4a05      	ldr	r2, [pc, #20]	; (8004140 <LCD_Fast_DrawPoint+0x228>)
 800412c:	8912      	ldrh	r2, [r2, #8]
 800412e:	801a      	strh	r2, [r3, #0]
	LCD->LCD_RAM=color;
 8004130:	4a04      	ldr	r2, [pc, #16]	; (8004144 <LCD_Fast_DrawPoint+0x22c>)
 8004132:	887b      	ldrh	r3, [r7, #2]
 8004134:	8053      	strh	r3, [r2, #2]
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	20001034 	.word	0x20001034
 8004144:	6c00007e 	.word	0x6c00007e

08004148 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(uint8_t pwm)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 8004152:	20be      	movs	r0, #190	; 0xbe
 8004154:	f7ff fb26 	bl	80037a4 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 8004158:	2005      	movs	r0, #5
 800415a:	f7ff fb37 	bl	80037cc <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 800415e:	79fb      	ldrb	r3, [r7, #7]
 8004160:	4618      	mov	r0, r3
 8004162:	f7fc f9df 	bl	8000524 <__aeabi_i2d>
 8004166:	a310      	add	r3, pc, #64	; (adr r3, 80041a8 <LCD_SSD_BackLightSet+0x60>)
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	f7fc fa44 	bl	80005f8 <__aeabi_dmul>
 8004170:	4602      	mov	r2, r0
 8004172:	460b      	mov	r3, r1
 8004174:	4610      	mov	r0, r2
 8004176:	4619      	mov	r1, r3
 8004178:	f7fc fd16 	bl	8000ba8 <__aeabi_d2uiz>
 800417c:	4603      	mov	r3, r0
 800417e:	b29b      	uxth	r3, r3
 8004180:	4618      	mov	r0, r3
 8004182:	f7ff fb23 	bl	80037cc <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 8004186:	2001      	movs	r0, #1
 8004188:	f7ff fb20 	bl	80037cc <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 800418c:	20ff      	movs	r0, #255	; 0xff
 800418e:	f7ff fb1d 	bl	80037cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 8004192:	2000      	movs	r0, #0
 8004194:	f7ff fb1a 	bl	80037cc <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 8004198:	2000      	movs	r0, #0
 800419a:	f7ff fb17 	bl	80037cc <LCD_WR_DATA>
}
 800419e:	bf00      	nop
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	66666666 	.word	0x66666666
 80041ac:	40046666 	.word	0x40046666

080041b0 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(uint8_t dir)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	4603      	mov	r3, r0
 80041b8:	71fb      	strb	r3, [r7, #7]
	if(dir==0)			//竖屏
 80041ba:	79fb      	ldrb	r3, [r7, #7]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d177      	bne.n	80042b0 <LCD_Display_Dir+0x100>
	{
		lcddev.dir=0;	//竖屏
 80041c0:	4b80      	ldr	r3, [pc, #512]	; (80043c4 <LCD_Display_Dir+0x214>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	719a      	strb	r2, [r3, #6]
		lcddev.width=240;
 80041c6:	4b7f      	ldr	r3, [pc, #508]	; (80043c4 <LCD_Display_Dir+0x214>)
 80041c8:	22f0      	movs	r2, #240	; 0xf0
 80041ca:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 80041cc:	4b7d      	ldr	r3, [pc, #500]	; (80043c4 <LCD_Display_Dir+0x214>)
 80041ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80041d2:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X6804||lcddev.id==0X5310)
 80041d4:	4b7b      	ldr	r3, [pc, #492]	; (80043c4 <LCD_Display_Dir+0x214>)
 80041d6:	889b      	ldrh	r3, [r3, #4]
 80041d8:	f249 3241 	movw	r2, #37697	; 0x9341
 80041dc:	4293      	cmp	r3, r2
 80041de:	d00b      	beq.n	80041f8 <LCD_Display_Dir+0x48>
 80041e0:	4b78      	ldr	r3, [pc, #480]	; (80043c4 <LCD_Display_Dir+0x214>)
 80041e2:	889b      	ldrh	r3, [r3, #4]
 80041e4:	f646 0204 	movw	r2, #26628	; 0x6804
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d005      	beq.n	80041f8 <LCD_Display_Dir+0x48>
 80041ec:	4b75      	ldr	r3, [pc, #468]	; (80043c4 <LCD_Display_Dir+0x214>)
 80041ee:	889b      	ldrh	r3, [r3, #4]
 80041f0:	f245 3210 	movw	r2, #21264	; 0x5310
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d11e      	bne.n	8004236 <LCD_Display_Dir+0x86>
		{
			lcddev.wramcmd=0X2C;
 80041f8:	4b72      	ldr	r3, [pc, #456]	; (80043c4 <LCD_Display_Dir+0x214>)
 80041fa:	222c      	movs	r2, #44	; 0x2c
 80041fc:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 80041fe:	4b71      	ldr	r3, [pc, #452]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004200:	222a      	movs	r2, #42	; 0x2a
 8004202:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8004204:	4b6f      	ldr	r3, [pc, #444]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004206:	222b      	movs	r2, #43	; 0x2b
 8004208:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 800420a:	4b6e      	ldr	r3, [pc, #440]	; (80043c4 <LCD_Display_Dir+0x214>)
 800420c:	889b      	ldrh	r3, [r3, #4]
 800420e:	f646 0204 	movw	r2, #26628	; 0x6804
 8004212:	4293      	cmp	r3, r2
 8004214:	d006      	beq.n	8004224 <LCD_Display_Dir+0x74>
 8004216:	4b6b      	ldr	r3, [pc, #428]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004218:	889b      	ldrh	r3, [r3, #4]
 800421a:	f245 3210 	movw	r2, #21264	; 0x5310
 800421e:	4293      	cmp	r3, r2
 8004220:	f040 80c7 	bne.w	80043b2 <LCD_Display_Dir+0x202>
			{
				lcddev.width=320;
 8004224:	4b67      	ldr	r3, [pc, #412]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004226:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800422a:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 800422c:	4b65      	ldr	r3, [pc, #404]	; (80043c4 <LCD_Display_Dir+0x214>)
 800422e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004232:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 8004234:	e0bd      	b.n	80043b2 <LCD_Display_Dir+0x202>
			}
		}else if(lcddev.id==0x5510)
 8004236:	4b63      	ldr	r3, [pc, #396]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004238:	889b      	ldrh	r3, [r3, #4]
 800423a:	f245 5210 	movw	r2, #21776	; 0x5510
 800423e:	4293      	cmp	r3, r2
 8004240:	d114      	bne.n	800426c <LCD_Display_Dir+0xbc>
		{
			lcddev.wramcmd=0X2C00;
 8004242:	4b60      	ldr	r3, [pc, #384]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004244:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8004248:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 800424a:	4b5e      	ldr	r3, [pc, #376]	; (80043c4 <LCD_Display_Dir+0x214>)
 800424c:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8004250:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 8004252:	4b5c      	ldr	r3, [pc, #368]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004254:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8004258:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 800425a:	4b5a      	ldr	r3, [pc, #360]	; (80043c4 <LCD_Display_Dir+0x214>)
 800425c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004260:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 8004262:	4b58      	ldr	r3, [pc, #352]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004264:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004268:	805a      	strh	r2, [r3, #2]
 800426a:	e0a3      	b.n	80043b4 <LCD_Display_Dir+0x204>
		}else if(lcddev.id==0X1963)
 800426c:	4b55      	ldr	r3, [pc, #340]	; (80043c4 <LCD_Display_Dir+0x214>)
 800426e:	889b      	ldrh	r3, [r3, #4]
 8004270:	f641 1263 	movw	r2, #6499	; 0x1963
 8004274:	4293      	cmp	r3, r2
 8004276:	d111      	bne.n	800429c <LCD_Display_Dir+0xec>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8004278:	4b52      	ldr	r3, [pc, #328]	; (80043c4 <LCD_Display_Dir+0x214>)
 800427a:	222c      	movs	r2, #44	; 0x2c
 800427c:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 800427e:	4b51      	ldr	r3, [pc, #324]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004280:	222b      	movs	r2, #43	; 0x2b
 8004282:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 8004284:	4b4f      	ldr	r3, [pc, #316]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004286:	222a      	movs	r2, #42	; 0x2a
 8004288:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 800428a:	4b4e      	ldr	r3, [pc, #312]	; (80043c4 <LCD_Display_Dir+0x214>)
 800428c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004290:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 8004292:	4b4c      	ldr	r3, [pc, #304]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004294:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004298:	805a      	strh	r2, [r3, #2]
 800429a:	e08b      	b.n	80043b4 <LCD_Display_Dir+0x204>
		}else
		{
			lcddev.wramcmd=0X22;
 800429c:	4b49      	ldr	r3, [pc, #292]	; (80043c4 <LCD_Display_Dir+0x214>)
 800429e:	2222      	movs	r2, #34	; 0x22
 80042a0:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X20;
 80042a2:	4b48      	ldr	r3, [pc, #288]	; (80043c4 <LCD_Display_Dir+0x214>)
 80042a4:	2220      	movs	r2, #32
 80042a6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X21;
 80042a8:	4b46      	ldr	r3, [pc, #280]	; (80043c4 <LCD_Display_Dir+0x214>)
 80042aa:	2221      	movs	r2, #33	; 0x21
 80042ac:	819a      	strh	r2, [r3, #12]
 80042ae:	e081      	b.n	80043b4 <LCD_Display_Dir+0x204>
		}
	}else 				//横屏
	{
		lcddev.dir=1;	//横屏
 80042b0:	4b44      	ldr	r3, [pc, #272]	; (80043c4 <LCD_Display_Dir+0x214>)
 80042b2:	2201      	movs	r2, #1
 80042b4:	719a      	strb	r2, [r3, #6]
		lcddev.width=320;
 80042b6:	4b43      	ldr	r3, [pc, #268]	; (80043c4 <LCD_Display_Dir+0x214>)
 80042b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80042bc:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 80042be:	4b41      	ldr	r3, [pc, #260]	; (80043c4 <LCD_Display_Dir+0x214>)
 80042c0:	22f0      	movs	r2, #240	; 0xf0
 80042c2:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 80042c4:	4b3f      	ldr	r3, [pc, #252]	; (80043c4 <LCD_Display_Dir+0x214>)
 80042c6:	889b      	ldrh	r3, [r3, #4]
 80042c8:	f249 3241 	movw	r2, #37697	; 0x9341
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d005      	beq.n	80042dc <LCD_Display_Dir+0x12c>
 80042d0:	4b3c      	ldr	r3, [pc, #240]	; (80043c4 <LCD_Display_Dir+0x214>)
 80042d2:	889b      	ldrh	r3, [r3, #4]
 80042d4:	f245 3210 	movw	r2, #21264	; 0x5310
 80042d8:	4293      	cmp	r3, r2
 80042da:	d109      	bne.n	80042f0 <LCD_Display_Dir+0x140>
		{
			lcddev.wramcmd=0X2C;
 80042dc:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <LCD_Display_Dir+0x214>)
 80042de:	222c      	movs	r2, #44	; 0x2c
 80042e0:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 80042e2:	4b38      	ldr	r3, [pc, #224]	; (80043c4 <LCD_Display_Dir+0x214>)
 80042e4:	222a      	movs	r2, #42	; 0x2a
 80042e6:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 80042e8:	4b36      	ldr	r3, [pc, #216]	; (80043c4 <LCD_Display_Dir+0x214>)
 80042ea:	222b      	movs	r2, #43	; 0x2b
 80042ec:	819a      	strh	r2, [r3, #12]
 80042ee:	e04b      	b.n	8004388 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X6804)
 80042f0:	4b34      	ldr	r3, [pc, #208]	; (80043c4 <LCD_Display_Dir+0x214>)
 80042f2:	889b      	ldrh	r3, [r3, #4]
 80042f4:	f646 0204 	movw	r2, #26628	; 0x6804
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d109      	bne.n	8004310 <LCD_Display_Dir+0x160>
		{
 			lcddev.wramcmd=0X2C;
 80042fc:	4b31      	ldr	r3, [pc, #196]	; (80043c4 <LCD_Display_Dir+0x214>)
 80042fe:	222c      	movs	r2, #44	; 0x2c
 8004300:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2B;
 8004302:	4b30      	ldr	r3, [pc, #192]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004304:	222b      	movs	r2, #43	; 0x2b
 8004306:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;
 8004308:	4b2e      	ldr	r3, [pc, #184]	; (80043c4 <LCD_Display_Dir+0x214>)
 800430a:	222a      	movs	r2, #42	; 0x2a
 800430c:	819a      	strh	r2, [r3, #12]
 800430e:	e03b      	b.n	8004388 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0x5510)
 8004310:	4b2c      	ldr	r3, [pc, #176]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004312:	889b      	ldrh	r3, [r3, #4]
 8004314:	f245 5210 	movw	r2, #21776	; 0x5510
 8004318:	4293      	cmp	r3, r2
 800431a:	d114      	bne.n	8004346 <LCD_Display_Dir+0x196>
		{
			lcddev.wramcmd=0X2C00;
 800431c:	4b29      	ldr	r3, [pc, #164]	; (80043c4 <LCD_Display_Dir+0x214>)
 800431e:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8004322:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8004324:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004326:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 800432a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 800432c:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <LCD_Display_Dir+0x214>)
 800432e:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8004332:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 8004334:	4b23      	ldr	r3, [pc, #140]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004336:	f44f 7248 	mov.w	r2, #800	; 0x320
 800433a:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 800433c:	4b21      	ldr	r3, [pc, #132]	; (80043c4 <LCD_Display_Dir+0x214>)
 800433e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004342:	805a      	strh	r2, [r3, #2]
 8004344:	e020      	b.n	8004388 <LCD_Display_Dir+0x1d8>
		}else if(lcddev.id==0X1963)
 8004346:	4b1f      	ldr	r3, [pc, #124]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004348:	889b      	ldrh	r3, [r3, #4]
 800434a:	f641 1263 	movw	r2, #6499	; 0x1963
 800434e:	4293      	cmp	r3, r2
 8004350:	d111      	bne.n	8004376 <LCD_Display_Dir+0x1c6>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8004352:	4b1c      	ldr	r3, [pc, #112]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004354:	222c      	movs	r2, #44	; 0x2c
 8004356:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 8004358:	4b1a      	ldr	r3, [pc, #104]	; (80043c4 <LCD_Display_Dir+0x214>)
 800435a:	222a      	movs	r2, #42	; 0x2a
 800435c:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 800435e:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004360:	222b      	movs	r2, #43	; 0x2b
 8004362:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 8004364:	4b17      	ldr	r3, [pc, #92]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004366:	f44f 7248 	mov.w	r2, #800	; 0x320
 800436a:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 800436c:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <LCD_Display_Dir+0x214>)
 800436e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8004372:	805a      	strh	r2, [r3, #2]
 8004374:	e008      	b.n	8004388 <LCD_Display_Dir+0x1d8>
		}else
		{
			lcddev.wramcmd=0X22;
 8004376:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004378:	2222      	movs	r2, #34	; 0x22
 800437a:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X21;
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <LCD_Display_Dir+0x214>)
 800437e:	2221      	movs	r2, #33	; 0x21
 8004380:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X20;
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004384:	2220      	movs	r2, #32
 8004386:	819a      	strh	r2, [r3, #12]
		}
		if(lcddev.id==0X6804||lcddev.id==0X5310)
 8004388:	4b0e      	ldr	r3, [pc, #56]	; (80043c4 <LCD_Display_Dir+0x214>)
 800438a:	889b      	ldrh	r3, [r3, #4]
 800438c:	f646 0204 	movw	r2, #26628	; 0x6804
 8004390:	4293      	cmp	r3, r2
 8004392:	d005      	beq.n	80043a0 <LCD_Display_Dir+0x1f0>
 8004394:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <LCD_Display_Dir+0x214>)
 8004396:	889b      	ldrh	r3, [r3, #4]
 8004398:	f245 3210 	movw	r2, #21264	; 0x5310
 800439c:	4293      	cmp	r3, r2
 800439e:	d109      	bne.n	80043b4 <LCD_Display_Dir+0x204>
		{
			lcddev.width=480;
 80043a0:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <LCD_Display_Dir+0x214>)
 80043a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80043a6:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 80043a8:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <LCD_Display_Dir+0x214>)
 80043aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80043ae:	805a      	strh	r2, [r3, #2]
 80043b0:	e000      	b.n	80043b4 <LCD_Display_Dir+0x204>
			if(lcddev.id==0X6804||lcddev.id==0X5310)
 80043b2:	bf00      	nop
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 80043b4:	2000      	movs	r0, #0
 80043b6:	f7ff fb99 	bl	8003aec <LCD_Scan_Dir>
}
 80043ba:	bf00      	nop
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20001034 	.word	0x20001034

080043c8 <LCD_Init>:
}
//初始化lcd
//该初始化函数可以初始化各种ILI93XX液晶,但是其他函数是基于ILI9320的!!!
//在其他型号的驱动芯片上没有测试!
void LCD_Init(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0

//  FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure);  //初始化FSMC配置

//  FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM4, ENABLE);  // 使能BANK1

 	HAL_Delay(50); // delay 50 ms
 80043cc:	2032      	movs	r0, #50	; 0x32
 80043ce:	f003 ff2f 	bl	8008230 <HAL_Delay>
 	LCD_WriteReg(0x0000,0x0001);
 80043d2:	2101      	movs	r1, #1
 80043d4:	2000      	movs	r0, #0
 80043d6:	f7ff fa1f 	bl	8003818 <LCD_WriteReg>
	HAL_Delay(50); // delay 50 ms
 80043da:	2032      	movs	r0, #50	; 0x32
 80043dc:	f003 ff28 	bl	8008230 <HAL_Delay>
  	lcddev.id = LCD_ReadReg(0x0000);
 80043e0:	2000      	movs	r0, #0
 80043e2:	f7ff fa2f 	bl	8003844 <LCD_ReadReg>
 80043e6:	4603      	mov	r3, r0
 80043e8:	461a      	mov	r2, r3
 80043ea:	4b96      	ldr	r3, [pc, #600]	; (8004644 <LCD_Init+0x27c>)
 80043ec:	809a      	strh	r2, [r3, #4]
   	if(lcddev.id<0XFF||lcddev.id==0XFFFF||lcddev.id==0X9300)//读到ID不正确,新增lcddev.id==0X9300判断，因为9341在未被复位的情况下会被读成9300
 80043ee:	4b95      	ldr	r3, [pc, #596]	; (8004644 <LCD_Init+0x27c>)
 80043f0:	889b      	ldrh	r3, [r3, #4]
 80043f2:	2bfe      	cmp	r3, #254	; 0xfe
 80043f4:	d90b      	bls.n	800440e <LCD_Init+0x46>
 80043f6:	4b93      	ldr	r3, [pc, #588]	; (8004644 <LCD_Init+0x27c>)
 80043f8:	889b      	ldrh	r3, [r3, #4]
 80043fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043fe:	4293      	cmp	r3, r2
 8004400:	d005      	beq.n	800440e <LCD_Init+0x46>
 8004402:	4b90      	ldr	r3, [pc, #576]	; (8004644 <LCD_Init+0x27c>)
 8004404:	889b      	ldrh	r3, [r3, #4]
 8004406:	f5b3 4f13 	cmp.w	r3, #37632	; 0x9300
 800440a:	f040 80e9 	bne.w	80045e0 <LCD_Init+0x218>
	{
 		//尝试9341 ID的读取
		LCD_WR_REG(0XD3);
 800440e:	20d3      	movs	r0, #211	; 0xd3
 8004410:	f7ff f9c8 	bl	80037a4 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();	//dummy read
 8004414:	f7ff f9ee 	bl	80037f4 <LCD_RD_DATA>
 8004418:	4603      	mov	r3, r0
 800441a:	461a      	mov	r2, r3
 800441c:	4b89      	ldr	r3, [pc, #548]	; (8004644 <LCD_Init+0x27c>)
 800441e:	809a      	strh	r2, [r3, #4]
 		lcddev.id=LCD_RD_DATA();	//读到0X00
 8004420:	f7ff f9e8 	bl	80037f4 <LCD_RD_DATA>
 8004424:	4603      	mov	r3, r0
 8004426:	461a      	mov	r2, r3
 8004428:	4b86      	ldr	r3, [pc, #536]	; (8004644 <LCD_Init+0x27c>)
 800442a:	809a      	strh	r2, [r3, #4]
  		lcddev.id=LCD_RD_DATA();   	//读取93
 800442c:	f7ff f9e2 	bl	80037f4 <LCD_RD_DATA>
 8004430:	4603      	mov	r3, r0
 8004432:	461a      	mov	r2, r3
 8004434:	4b83      	ldr	r3, [pc, #524]	; (8004644 <LCD_Init+0x27c>)
 8004436:	809a      	strh	r2, [r3, #4]
 		lcddev.id<<=8;
 8004438:	4b82      	ldr	r3, [pc, #520]	; (8004644 <LCD_Init+0x27c>)
 800443a:	889b      	ldrh	r3, [r3, #4]
 800443c:	021b      	lsls	r3, r3, #8
 800443e:	b29a      	uxth	r2, r3
 8004440:	4b80      	ldr	r3, [pc, #512]	; (8004644 <LCD_Init+0x27c>)
 8004442:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();  	//读取41
 8004444:	f7ff f9d6 	bl	80037f4 <LCD_RD_DATA>
 8004448:	4603      	mov	r3, r0
 800444a:	461a      	mov	r2, r3
 800444c:	4b7d      	ldr	r3, [pc, #500]	; (8004644 <LCD_Init+0x27c>)
 800444e:	889b      	ldrh	r3, [r3, #4]
 8004450:	4313      	orrs	r3, r2
 8004452:	b29a      	uxth	r2, r3
 8004454:	4b7b      	ldr	r3, [pc, #492]	; (8004644 <LCD_Init+0x27c>)
 8004456:	809a      	strh	r2, [r3, #4]
 		if(lcddev.id!=0X9341)		//非9341,尝试是不是6804
 8004458:	4b7a      	ldr	r3, [pc, #488]	; (8004644 <LCD_Init+0x27c>)
 800445a:	889b      	ldrh	r3, [r3, #4]
 800445c:	f249 3241 	movw	r2, #37697	; 0x9341
 8004460:	4293      	cmp	r3, r2
 8004462:	f000 80bd 	beq.w	80045e0 <LCD_Init+0x218>
		{
 			LCD_WR_REG(0XBF);
 8004466:	20bf      	movs	r0, #191	; 0xbf
 8004468:	f7ff f99c 	bl	80037a4 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA(); 	//dummy read
 800446c:	f7ff f9c2 	bl	80037f4 <LCD_RD_DATA>
 8004470:	4603      	mov	r3, r0
 8004472:	461a      	mov	r2, r3
 8004474:	4b73      	ldr	r3, [pc, #460]	; (8004644 <LCD_Init+0x27c>)
 8004476:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA();   	//读回0X01
 8004478:	f7ff f9bc 	bl	80037f4 <LCD_RD_DATA>
 800447c:	4603      	mov	r3, r0
 800447e:	461a      	mov	r2, r3
 8004480:	4b70      	ldr	r3, [pc, #448]	; (8004644 <LCD_Init+0x27c>)
 8004482:	809a      	strh	r2, [r3, #4]
	 		lcddev.id=LCD_RD_DATA(); 	//读回0XD0
 8004484:	f7ff f9b6 	bl	80037f4 <LCD_RD_DATA>
 8004488:	4603      	mov	r3, r0
 800448a:	461a      	mov	r2, r3
 800448c:	4b6d      	ldr	r3, [pc, #436]	; (8004644 <LCD_Init+0x27c>)
 800448e:	809a      	strh	r2, [r3, #4]
	  		lcddev.id=LCD_RD_DATA();	//这里读回0X68
 8004490:	f7ff f9b0 	bl	80037f4 <LCD_RD_DATA>
 8004494:	4603      	mov	r3, r0
 8004496:	461a      	mov	r2, r3
 8004498:	4b6a      	ldr	r3, [pc, #424]	; (8004644 <LCD_Init+0x27c>)
 800449a:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 800449c:	4b69      	ldr	r3, [pc, #420]	; (8004644 <LCD_Init+0x27c>)
 800449e:	889b      	ldrh	r3, [r3, #4]
 80044a0:	021b      	lsls	r3, r3, #8
 80044a2:	b29a      	uxth	r2, r3
 80044a4:	4b67      	ldr	r3, [pc, #412]	; (8004644 <LCD_Init+0x27c>)
 80044a6:	809a      	strh	r2, [r3, #4]
	  		lcddev.id|=LCD_RD_DATA();	//这里读回0X04
 80044a8:	f7ff f9a4 	bl	80037f4 <LCD_RD_DATA>
 80044ac:	4603      	mov	r3, r0
 80044ae:	461a      	mov	r2, r3
 80044b0:	4b64      	ldr	r3, [pc, #400]	; (8004644 <LCD_Init+0x27c>)
 80044b2:	889b      	ldrh	r3, [r3, #4]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	4b62      	ldr	r3, [pc, #392]	; (8004644 <LCD_Init+0x27c>)
 80044ba:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X6804)		//也不是6804,尝试看看是不是NT35310
 80044bc:	4b61      	ldr	r3, [pc, #388]	; (8004644 <LCD_Init+0x27c>)
 80044be:	889b      	ldrh	r3, [r3, #4]
 80044c0:	f646 0204 	movw	r2, #26628	; 0x6804
 80044c4:	4293      	cmp	r3, r2
 80044c6:	f000 808b 	beq.w	80045e0 <LCD_Init+0x218>
			{
				LCD_WR_REG(0XD4);
 80044ca:	20d4      	movs	r0, #212	; 0xd4
 80044cc:	f7ff f96a 	bl	80037a4 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();//dummy read
 80044d0:	f7ff f990 	bl	80037f4 <LCD_RD_DATA>
 80044d4:	4603      	mov	r3, r0
 80044d6:	461a      	mov	r2, r3
 80044d8:	4b5a      	ldr	r3, [pc, #360]	; (8004644 <LCD_Init+0x27c>)
 80044da:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X01
 80044dc:	f7ff f98a 	bl	80037f4 <LCD_RD_DATA>
 80044e0:	4603      	mov	r3, r0
 80044e2:	461a      	mov	r2, r3
 80044e4:	4b57      	ldr	r3, [pc, #348]	; (8004644 <LCD_Init+0x27c>)
 80044e6:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();//读回0X53
 80044e8:	f7ff f984 	bl	80037f4 <LCD_RD_DATA>
 80044ec:	4603      	mov	r3, r0
 80044ee:	461a      	mov	r2, r3
 80044f0:	4b54      	ldr	r3, [pc, #336]	; (8004644 <LCD_Init+0x27c>)
 80044f2:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 80044f4:	4b53      	ldr	r3, [pc, #332]	; (8004644 <LCD_Init+0x27c>)
 80044f6:	889b      	ldrh	r3, [r3, #4]
 80044f8:	021b      	lsls	r3, r3, #8
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	4b51      	ldr	r3, [pc, #324]	; (8004644 <LCD_Init+0x27c>)
 80044fe:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 8004500:	f7ff f978 	bl	80037f4 <LCD_RD_DATA>
 8004504:	4603      	mov	r3, r0
 8004506:	461a      	mov	r2, r3
 8004508:	4b4e      	ldr	r3, [pc, #312]	; (8004644 <LCD_Init+0x27c>)
 800450a:	889b      	ldrh	r3, [r3, #4]
 800450c:	4313      	orrs	r3, r2
 800450e:	b29a      	uxth	r2, r3
 8004510:	4b4c      	ldr	r3, [pc, #304]	; (8004644 <LCD_Init+0x27c>)
 8004512:	809a      	strh	r2, [r3, #4]
				if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8004514:	4b4b      	ldr	r3, [pc, #300]	; (8004644 <LCD_Init+0x27c>)
 8004516:	889b      	ldrh	r3, [r3, #4]
 8004518:	f245 3210 	movw	r2, #21264	; 0x5310
 800451c:	4293      	cmp	r3, r2
 800451e:	d05f      	beq.n	80045e0 <LCD_Init+0x218>
				{
					LCD_WR_REG(0XDA00);
 8004520:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 8004524:	f7ff f93e 	bl	80037a4 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X00
 8004528:	f7ff f964 	bl	80037f4 <LCD_RD_DATA>
 800452c:	4603      	mov	r3, r0
 800452e:	461a      	mov	r2, r3
 8004530:	4b44      	ldr	r3, [pc, #272]	; (8004644 <LCD_Init+0x27c>)
 8004532:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDB00);
 8004534:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 8004538:	f7ff f934 	bl	80037a4 <LCD_WR_REG>
					lcddev.id=LCD_RD_DATA();		//读回0X80
 800453c:	f7ff f95a 	bl	80037f4 <LCD_RD_DATA>
 8004540:	4603      	mov	r3, r0
 8004542:	461a      	mov	r2, r3
 8004544:	4b3f      	ldr	r3, [pc, #252]	; (8004644 <LCD_Init+0x27c>)
 8004546:	809a      	strh	r2, [r3, #4]
					lcddev.id<<=8;
 8004548:	4b3e      	ldr	r3, [pc, #248]	; (8004644 <LCD_Init+0x27c>)
 800454a:	889b      	ldrh	r3, [r3, #4]
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	b29a      	uxth	r2, r3
 8004550:	4b3c      	ldr	r3, [pc, #240]	; (8004644 <LCD_Init+0x27c>)
 8004552:	809a      	strh	r2, [r3, #4]
					LCD_WR_REG(0XDC00);
 8004554:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 8004558:	f7ff f924 	bl	80037a4 <LCD_WR_REG>
					lcddev.id|=LCD_RD_DATA();		//读回0X00
 800455c:	f7ff f94a 	bl	80037f4 <LCD_RD_DATA>
 8004560:	4603      	mov	r3, r0
 8004562:	461a      	mov	r2, r3
 8004564:	4b37      	ldr	r3, [pc, #220]	; (8004644 <LCD_Init+0x27c>)
 8004566:	889b      	ldrh	r3, [r3, #4]
 8004568:	4313      	orrs	r3, r2
 800456a:	b29a      	uxth	r2, r3
 800456c:	4b35      	ldr	r3, [pc, #212]	; (8004644 <LCD_Init+0x27c>)
 800456e:	809a      	strh	r2, [r3, #4]
					if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 8004570:	4b34      	ldr	r3, [pc, #208]	; (8004644 <LCD_Init+0x27c>)
 8004572:	889b      	ldrh	r3, [r3, #4]
 8004574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004578:	d103      	bne.n	8004582 <LCD_Init+0x1ba>
 800457a:	4b32      	ldr	r3, [pc, #200]	; (8004644 <LCD_Init+0x27c>)
 800457c:	f245 5210 	movw	r2, #21776	; 0x5510
 8004580:	809a      	strh	r2, [r3, #4]
					if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8004582:	4b30      	ldr	r3, [pc, #192]	; (8004644 <LCD_Init+0x27c>)
 8004584:	889b      	ldrh	r3, [r3, #4]
 8004586:	f245 5210 	movw	r2, #21776	; 0x5510
 800458a:	4293      	cmp	r3, r2
 800458c:	d028      	beq.n	80045e0 <LCD_Init+0x218>
					{
						LCD_WR_REG(0XA1);
 800458e:	20a1      	movs	r0, #161	; 0xa1
 8004590:	f7ff f908 	bl	80037a4 <LCD_WR_REG>
						lcddev.id=LCD_RD_DATA();
 8004594:	f7ff f92e 	bl	80037f4 <LCD_RD_DATA>
 8004598:	4603      	mov	r3, r0
 800459a:	461a      	mov	r2, r3
 800459c:	4b29      	ldr	r3, [pc, #164]	; (8004644 <LCD_Init+0x27c>)
 800459e:	809a      	strh	r2, [r3, #4]
						lcddev.id=LCD_RD_DATA();	//读回0X57
 80045a0:	f7ff f928 	bl	80037f4 <LCD_RD_DATA>
 80045a4:	4603      	mov	r3, r0
 80045a6:	461a      	mov	r2, r3
 80045a8:	4b26      	ldr	r3, [pc, #152]	; (8004644 <LCD_Init+0x27c>)
 80045aa:	809a      	strh	r2, [r3, #4]
						lcddev.id<<=8;
 80045ac:	4b25      	ldr	r3, [pc, #148]	; (8004644 <LCD_Init+0x27c>)
 80045ae:	889b      	ldrh	r3, [r3, #4]
 80045b0:	021b      	lsls	r3, r3, #8
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	4b23      	ldr	r3, [pc, #140]	; (8004644 <LCD_Init+0x27c>)
 80045b6:	809a      	strh	r2, [r3, #4]
						lcddev.id|=LCD_RD_DATA();	//读回0X61
 80045b8:	f7ff f91c 	bl	80037f4 <LCD_RD_DATA>
 80045bc:	4603      	mov	r3, r0
 80045be:	461a      	mov	r2, r3
 80045c0:	4b20      	ldr	r3, [pc, #128]	; (8004644 <LCD_Init+0x27c>)
 80045c2:	889b      	ldrh	r3, [r3, #4]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	b29a      	uxth	r2, r3
 80045c8:	4b1e      	ldr	r3, [pc, #120]	; (8004644 <LCD_Init+0x27c>)
 80045ca:	809a      	strh	r2, [r3, #4]
						if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 80045cc:	4b1d      	ldr	r3, [pc, #116]	; (8004644 <LCD_Init+0x27c>)
 80045ce:	889b      	ldrh	r3, [r3, #4]
 80045d0:	f245 7261 	movw	r2, #22369	; 0x5761
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d103      	bne.n	80045e0 <LCD_Init+0x218>
 80045d8:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <LCD_Init+0x27c>)
 80045da:	f641 1263 	movw	r2, #6499	; 0x1963
 80045de:	809a      	strh	r2, [r3, #4]
					}
				}
			}
 		}
	}
	if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//如果是这几个IC,则设置WR时序为最快
 80045e0:	4b18      	ldr	r3, [pc, #96]	; (8004644 <LCD_Init+0x27c>)
 80045e2:	889b      	ldrh	r3, [r3, #4]
 80045e4:	f249 3241 	movw	r2, #37697	; 0x9341
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d011      	beq.n	8004610 <LCD_Init+0x248>
 80045ec:	4b15      	ldr	r3, [pc, #84]	; (8004644 <LCD_Init+0x27c>)
 80045ee:	889b      	ldrh	r3, [r3, #4]
 80045f0:	f245 3210 	movw	r2, #21264	; 0x5310
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00b      	beq.n	8004610 <LCD_Init+0x248>
 80045f8:	4b12      	ldr	r3, [pc, #72]	; (8004644 <LCD_Init+0x27c>)
 80045fa:	889b      	ldrh	r3, [r3, #4]
 80045fc:	f245 5210 	movw	r2, #21776	; 0x5510
 8004600:	4293      	cmp	r3, r2
 8004602:	d005      	beq.n	8004610 <LCD_Init+0x248>
 8004604:	4b0f      	ldr	r3, [pc, #60]	; (8004644 <LCD_Init+0x27c>)
 8004606:	889b      	ldrh	r3, [r3, #4]
 8004608:	f641 1263 	movw	r2, #6499	; 0x1963
 800460c:	4293      	cmp	r3, r2
 800460e:	d11d      	bne.n	800464c <LCD_Init+0x284>
	{
		//重新配置写时序控制寄存器的时序
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//地址建立时间(ADDSET)清零
 8004610:	4b0d      	ldr	r3, [pc, #52]	; (8004648 <LCD_Init+0x280>)
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	4a0c      	ldr	r2, [pc, #48]	; (8004648 <LCD_Init+0x280>)
 8004616:	f023 030f 	bic.w	r3, r3, #15
 800461a:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//数据保存时间清零
 800461c:	4b0a      	ldr	r3, [pc, #40]	; (8004648 <LCD_Init+0x280>)
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	4a09      	ldr	r2, [pc, #36]	; (8004648 <LCD_Init+0x280>)
 8004622:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004626:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=3<<0;		//地址建立时间(ADDSET)为3个HCLK =18ns
 8004628:	4b07      	ldr	r3, [pc, #28]	; (8004648 <LCD_Init+0x280>)
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	4a06      	ldr	r2, [pc, #24]	; (8004648 <LCD_Init+0x280>)
 800462e:	f043 0303 	orr.w	r3, r3, #3
 8004632:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=2<<8; 	//数据保存时间(DATAST)为6ns*3个HCLK=18ns
 8004634:	4b04      	ldr	r3, [pc, #16]	; (8004648 <LCD_Init+0x280>)
 8004636:	699b      	ldr	r3, [r3, #24]
 8004638:	4a03      	ldr	r2, [pc, #12]	; (8004648 <LCD_Init+0x280>)
 800463a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800463e:	6193      	str	r3, [r2, #24]
 8004640:	e028      	b.n	8004694 <LCD_Init+0x2cc>
 8004642:	bf00      	nop
 8004644:	20001034 	.word	0x20001034
 8004648:	a0000104 	.word	0xa0000104
	}else if(lcddev.id==0X6804||lcddev.id==0XC505)	//6804/C505速度上不去,得降低
 800464c:	4ba0      	ldr	r3, [pc, #640]	; (80048d0 <LCD_Init+0x508>)
 800464e:	889b      	ldrh	r3, [r3, #4]
 8004650:	f646 0204 	movw	r2, #26628	; 0x6804
 8004654:	4293      	cmp	r3, r2
 8004656:	d005      	beq.n	8004664 <LCD_Init+0x29c>
 8004658:	4b9d      	ldr	r3, [pc, #628]	; (80048d0 <LCD_Init+0x508>)
 800465a:	889b      	ldrh	r3, [r3, #4]
 800465c:	f24c 5205 	movw	r2, #50437	; 0xc505
 8004660:	4293      	cmp	r3, r2
 8004662:	d117      	bne.n	8004694 <LCD_Init+0x2cc>
	{
		//重新配置写时序控制寄存器的时序
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//地址建立时间(ADDSET)清零
 8004664:	4b9b      	ldr	r3, [pc, #620]	; (80048d4 <LCD_Init+0x50c>)
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	4a9a      	ldr	r2, [pc, #616]	; (80048d4 <LCD_Init+0x50c>)
 800466a:	f023 030f 	bic.w	r3, r3, #15
 800466e:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//数据保存时间清零
 8004670:	4b98      	ldr	r3, [pc, #608]	; (80048d4 <LCD_Init+0x50c>)
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	4a97      	ldr	r2, [pc, #604]	; (80048d4 <LCD_Init+0x50c>)
 8004676:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800467a:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=10<<0;	//地址建立时间(ADDSET)为10个HCLK =60ns
 800467c:	4b95      	ldr	r3, [pc, #596]	; (80048d4 <LCD_Init+0x50c>)
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	4a94      	ldr	r2, [pc, #592]	; (80048d4 <LCD_Init+0x50c>)
 8004682:	f043 030a 	orr.w	r3, r3, #10
 8004686:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=12<<8; 	//数据保存时间(DATAST)为6ns*13个HCLK=78ns
 8004688:	4b92      	ldr	r3, [pc, #584]	; (80048d4 <LCD_Init+0x50c>)
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	4a91      	ldr	r2, [pc, #580]	; (80048d4 <LCD_Init+0x50c>)
 800468e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8004692:	6193      	str	r3, [r2, #24]
	}
// 	printf(" LCD ID:%x\r\n",lcddev.id); //打印LCD ID
	if(lcddev.id==0X9341)	//9341初始化
 8004694:	4b8e      	ldr	r3, [pc, #568]	; (80048d0 <LCD_Init+0x508>)
 8004696:	889b      	ldrh	r3, [r3, #4]
 8004698:	f249 3241 	movw	r2, #37697	; 0x9341
 800469c:	4293      	cmp	r3, r2
 800469e:	f040 811b 	bne.w	80048d8 <LCD_Init+0x510>
	{
		LCD_WR_REG(0xCF);
 80046a2:	20cf      	movs	r0, #207	; 0xcf
 80046a4:	f7ff f87e 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80046a8:	2000      	movs	r0, #0
 80046aa:	f7ff f88f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 80046ae:	20c1      	movs	r0, #193	; 0xc1
 80046b0:	f7ff f88c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 80046b4:	2030      	movs	r0, #48	; 0x30
 80046b6:	f7ff f889 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 80046ba:	20ed      	movs	r0, #237	; 0xed
 80046bc:	f7ff f872 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 80046c0:	2064      	movs	r0, #100	; 0x64
 80046c2:	f7ff f883 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 80046c6:	2003      	movs	r0, #3
 80046c8:	f7ff f880 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 80046cc:	2012      	movs	r0, #18
 80046ce:	f7ff f87d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 80046d2:	2081      	movs	r0, #129	; 0x81
 80046d4:	f7ff f87a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 80046d8:	20e8      	movs	r0, #232	; 0xe8
 80046da:	f7ff f863 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 80046de:	2085      	movs	r0, #133	; 0x85
 80046e0:	f7ff f874 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 80046e4:	2010      	movs	r0, #16
 80046e6:	f7ff f871 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 80046ea:	207a      	movs	r0, #122	; 0x7a
 80046ec:	f7ff f86e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 80046f0:	20cb      	movs	r0, #203	; 0xcb
 80046f2:	f7ff f857 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 80046f6:	2039      	movs	r0, #57	; 0x39
 80046f8:	f7ff f868 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 80046fc:	202c      	movs	r0, #44	; 0x2c
 80046fe:	f7ff f865 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004702:	2000      	movs	r0, #0
 8004704:	f7ff f862 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8004708:	2034      	movs	r0, #52	; 0x34
 800470a:	f7ff f85f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800470e:	2002      	movs	r0, #2
 8004710:	f7ff f85c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8004714:	20f7      	movs	r0, #247	; 0xf7
 8004716:	f7ff f845 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 800471a:	2020      	movs	r0, #32
 800471c:	f7ff f856 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 8004720:	20ea      	movs	r0, #234	; 0xea
 8004722:	f7ff f83f 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004726:	2000      	movs	r0, #0
 8004728:	f7ff f850 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800472c:	2000      	movs	r0, #0
 800472e:	f7ff f84d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 8004732:	20c0      	movs	r0, #192	; 0xc0
 8004734:	f7ff f836 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 8004738:	201b      	movs	r0, #27
 800473a:	f7ff f847 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 800473e:	20c1      	movs	r0, #193	; 0xc1
 8004740:	f7ff f830 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8004744:	2001      	movs	r0, #1
 8004746:	f7ff f841 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 800474a:	20c5      	movs	r0, #197	; 0xc5
 800474c:	f7ff f82a 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 8004750:	2030      	movs	r0, #48	; 0x30
 8004752:	f7ff f83b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 8004756:	2030      	movs	r0, #48	; 0x30
 8004758:	f7ff f838 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 800475c:	20c7      	movs	r0, #199	; 0xc7
 800475e:	f7ff f821 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 8004762:	20b7      	movs	r0, #183	; 0xb7
 8004764:	f7ff f832 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 8004768:	2036      	movs	r0, #54	; 0x36
 800476a:	f7ff f81b 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 800476e:	2048      	movs	r0, #72	; 0x48
 8004770:	f7ff f82c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 8004774:	203a      	movs	r0, #58	; 0x3a
 8004776:	f7ff f815 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 800477a:	2055      	movs	r0, #85	; 0x55
 800477c:	f7ff f826 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 8004780:	20b1      	movs	r0, #177	; 0xb1
 8004782:	f7ff f80f 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004786:	2000      	movs	r0, #0
 8004788:	f7ff f820 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 800478c:	201a      	movs	r0, #26
 800478e:	f7ff f81d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 8004792:	20b6      	movs	r0, #182	; 0xb6
 8004794:	f7ff f806 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8004798:	200a      	movs	r0, #10
 800479a:	f7ff f817 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 800479e:	20a2      	movs	r0, #162	; 0xa2
 80047a0:	f7ff f814 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 80047a4:	20f2      	movs	r0, #242	; 0xf2
 80047a6:	f7fe fffd 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80047aa:	2000      	movs	r0, #0
 80047ac:	f7ff f80e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 80047b0:	2026      	movs	r0, #38	; 0x26
 80047b2:	f7fe fff7 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 80047b6:	2001      	movs	r0, #1
 80047b8:	f7ff f808 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 80047bc:	20e0      	movs	r0, #224	; 0xe0
 80047be:	f7fe fff1 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 80047c2:	200f      	movs	r0, #15
 80047c4:	f7ff f802 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 80047c8:	202a      	movs	r0, #42	; 0x2a
 80047ca:	f7fe ffff 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 80047ce:	2028      	movs	r0, #40	; 0x28
 80047d0:	f7fe fffc 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 80047d4:	2008      	movs	r0, #8
 80047d6:	f7fe fff9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 80047da:	200e      	movs	r0, #14
 80047dc:	f7fe fff6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 80047e0:	2008      	movs	r0, #8
 80047e2:	f7fe fff3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 80047e6:	2054      	movs	r0, #84	; 0x54
 80047e8:	f7fe fff0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 80047ec:	20a9      	movs	r0, #169	; 0xa9
 80047ee:	f7fe ffed 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 80047f2:	2043      	movs	r0, #67	; 0x43
 80047f4:	f7fe ffea 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 80047f8:	200a      	movs	r0, #10
 80047fa:	f7fe ffe7 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 80047fe:	200f      	movs	r0, #15
 8004800:	f7fe ffe4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004804:	2000      	movs	r0, #0
 8004806:	f7fe ffe1 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800480a:	2000      	movs	r0, #0
 800480c:	f7fe ffde 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004810:	2000      	movs	r0, #0
 8004812:	f7fe ffdb 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004816:	2000      	movs	r0, #0
 8004818:	f7fe ffd8 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 800481c:	20e1      	movs	r0, #225	; 0xe1
 800481e:	f7fe ffc1 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004822:	2000      	movs	r0, #0
 8004824:	f7fe ffd2 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 8004828:	2015      	movs	r0, #21
 800482a:	f7fe ffcf 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 800482e:	2017      	movs	r0, #23
 8004830:	f7fe ffcc 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 8004834:	2007      	movs	r0, #7
 8004836:	f7fe ffc9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 800483a:	2011      	movs	r0, #17
 800483c:	f7fe ffc6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 8004840:	2006      	movs	r0, #6
 8004842:	f7fe ffc3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 8004846:	202b      	movs	r0, #43	; 0x2b
 8004848:	f7fe ffc0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 800484c:	2056      	movs	r0, #86	; 0x56
 800484e:	f7fe ffbd 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8004852:	203c      	movs	r0, #60	; 0x3c
 8004854:	f7fe ffba 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8004858:	2005      	movs	r0, #5
 800485a:	f7fe ffb7 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 800485e:	2010      	movs	r0, #16
 8004860:	f7fe ffb4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8004864:	200f      	movs	r0, #15
 8004866:	f7fe ffb1 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 800486a:	203f      	movs	r0, #63	; 0x3f
 800486c:	f7fe ffae 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8004870:	203f      	movs	r0, #63	; 0x3f
 8004872:	f7fe ffab 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8004876:	200f      	movs	r0, #15
 8004878:	f7fe ffa8 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 800487c:	202b      	movs	r0, #43	; 0x2b
 800487e:	f7fe ff91 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004882:	2000      	movs	r0, #0
 8004884:	f7fe ffa2 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004888:	2000      	movs	r0, #0
 800488a:	f7fe ff9f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 800488e:	2001      	movs	r0, #1
 8004890:	f7fe ff9c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 8004894:	203f      	movs	r0, #63	; 0x3f
 8004896:	f7fe ff99 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 800489a:	202a      	movs	r0, #42	; 0x2a
 800489c:	f7fe ff82 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80048a0:	2000      	movs	r0, #0
 80048a2:	f7fe ff93 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048a6:	2000      	movs	r0, #0
 80048a8:	f7fe ff90 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80048ac:	2000      	movs	r0, #0
 80048ae:	f7fe ff8d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 80048b2:	20ef      	movs	r0, #239	; 0xef
 80048b4:	f7fe ff8a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 80048b8:	2011      	movs	r0, #17
 80048ba:	f7fe ff73 	bl	80037a4 <LCD_WR_REG>
		HAL_Delay(120);
 80048be:	2078      	movs	r0, #120	; 0x78
 80048c0:	f003 fcb6 	bl	8008230 <HAL_Delay>
		LCD_WR_REG(0x29); //display on
 80048c4:	2029      	movs	r0, #41	; 0x29
 80048c6:	f7fe ff6d 	bl	80037a4 <LCD_WR_REG>
 80048ca:	f003 b924 	b.w	8007b16 <LCD_Init+0x374e>
 80048ce:	bf00      	nop
 80048d0:	20001034 	.word	0x20001034
 80048d4:	a0000104 	.word	0xa0000104
	}else if(lcddev.id==0x6804) //6804初始化
 80048d8:	4b58      	ldr	r3, [pc, #352]	; (8004a3c <LCD_Init+0x674>)
 80048da:	889b      	ldrh	r3, [r3, #4]
 80048dc:	f646 0204 	movw	r2, #26628	; 0x6804
 80048e0:	4293      	cmp	r3, r2
 80048e2:	f040 80ad 	bne.w	8004a40 <LCD_Init+0x678>
	{
		LCD_WR_REG(0X11);
 80048e6:	2011      	movs	r0, #17
 80048e8:	f7fe ff5c 	bl	80037a4 <LCD_WR_REG>
		HAL_Delay(20);
 80048ec:	2014      	movs	r0, #20
 80048ee:	f003 fc9f 	bl	8008230 <HAL_Delay>
		LCD_WR_REG(0XD0);//VCI1  VCL  VGH  VGL DDVDH VREG1OUT power amplitude setting
 80048f2:	20d0      	movs	r0, #208	; 0xd0
 80048f4:	f7fe ff56 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0X07);
 80048f8:	2007      	movs	r0, #7
 80048fa:	f7fe ff67 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X42);
 80048fe:	2042      	movs	r0, #66	; 0x42
 8004900:	f7fe ff64 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X1D);
 8004904:	201d      	movs	r0, #29
 8004906:	f7fe ff61 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0XD1);//VCOMH VCOM_AC amplitude setting
 800490a:	20d1      	movs	r0, #209	; 0xd1
 800490c:	f7fe ff4a 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8004910:	2000      	movs	r0, #0
 8004912:	f7fe ff5b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X1a);
 8004916:	201a      	movs	r0, #26
 8004918:	f7fe ff58 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X09);
 800491c:	2009      	movs	r0, #9
 800491e:	f7fe ff55 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0XD2);//Operational Amplifier Circuit Constant Current Adjust , charge pump frequency setting
 8004922:	20d2      	movs	r0, #210	; 0xd2
 8004924:	f7fe ff3e 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 8004928:	2001      	movs	r0, #1
 800492a:	f7fe ff4f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X22);
 800492e:	2022      	movs	r0, #34	; 0x22
 8004930:	f7fe ff4c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0XC0);//REV SM GS
 8004934:	20c0      	movs	r0, #192	; 0xc0
 8004936:	f7fe ff35 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0X10);
 800493a:	2010      	movs	r0, #16
 800493c:	f7fe ff46 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X3B);
 8004940:	203b      	movs	r0, #59	; 0x3b
 8004942:	f7fe ff43 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8004946:	2000      	movs	r0, #0
 8004948:	f7fe ff40 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X02);
 800494c:	2002      	movs	r0, #2
 800494e:	f7fe ff3d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X11);
 8004952:	2011      	movs	r0, #17
 8004954:	f7fe ff3a 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0XC5);// Frame rate setting = 72HZ  when setting 0x03
 8004958:	20c5      	movs	r0, #197	; 0xc5
 800495a:	f7fe ff23 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0X03);
 800495e:	2003      	movs	r0, #3
 8004960:	f7fe ff34 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0XC8);//Gamma setting
 8004964:	20c8      	movs	r0, #200	; 0xc8
 8004966:	f7fe ff1d 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 800496a:	2000      	movs	r0, #0
 800496c:	f7fe ff2e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 8004970:	2025      	movs	r0, #37	; 0x25
 8004972:	f7fe ff2b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X21);
 8004976:	2021      	movs	r0, #33	; 0x21
 8004978:	f7fe ff28 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X05);
 800497c:	2005      	movs	r0, #5
 800497e:	f7fe ff25 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8004982:	2000      	movs	r0, #0
 8004984:	f7fe ff22 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X0a);
 8004988:	200a      	movs	r0, #10
 800498a:	f7fe ff1f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X65);
 800498e:	2065      	movs	r0, #101	; 0x65
 8004990:	f7fe ff1c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X25);
 8004994:	2025      	movs	r0, #37	; 0x25
 8004996:	f7fe ff19 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X77);
 800499a:	2077      	movs	r0, #119	; 0x77
 800499c:	f7fe ff16 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X50);
 80049a0:	2050      	movs	r0, #80	; 0x50
 80049a2:	f7fe ff13 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X0f);
 80049a6:	200f      	movs	r0, #15
 80049a8:	f7fe ff10 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 80049ac:	2000      	movs	r0, #0
 80049ae:	f7fe ff0d 	bl	80037cc <LCD_WR_DATA>

   		LCD_WR_REG(0XF8);
 80049b2:	20f8      	movs	r0, #248	; 0xf8
 80049b4:	f7fe fef6 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0X01);
 80049b8:	2001      	movs	r0, #1
 80049ba:	f7fe ff07 	bl	80037cc <LCD_WR_DATA>

 		LCD_WR_REG(0XFE);
 80049be:	20fe      	movs	r0, #254	; 0xfe
 80049c0:	f7fe fef0 	bl	80037a4 <LCD_WR_REG>
 		LCD_WR_DATA(0X00);
 80049c4:	2000      	movs	r0, #0
 80049c6:	f7fe ff01 	bl	80037cc <LCD_WR_DATA>
 		LCD_WR_DATA(0X02);
 80049ca:	2002      	movs	r0, #2
 80049cc:	f7fe fefe 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0X20);//Exit invert mode
 80049d0:	2020      	movs	r0, #32
 80049d2:	f7fe fee7 	bl	80037a4 <LCD_WR_REG>

		LCD_WR_REG(0X36);
 80049d6:	2036      	movs	r0, #54	; 0x36
 80049d8:	f7fe fee4 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0X08);//原来是a
 80049dc:	2008      	movs	r0, #8
 80049de:	f7fe fef5 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0X3A);
 80049e2:	203a      	movs	r0, #58	; 0x3a
 80049e4:	f7fe fede 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0X55);//16位模式
 80049e8:	2055      	movs	r0, #85	; 0x55
 80049ea:	f7fe feef 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0X2B);
 80049ee:	202b      	movs	r0, #43	; 0x2b
 80049f0:	f7fe fed8 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 80049f4:	2000      	movs	r0, #0
 80049f6:	f7fe fee9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 80049fa:	2000      	movs	r0, #0
 80049fc:	f7fe fee6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 8004a00:	2001      	movs	r0, #1
 8004a02:	f7fe fee3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X3F);
 8004a06:	203f      	movs	r0, #63	; 0x3f
 8004a08:	f7fe fee0 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0X2A);
 8004a0c:	202a      	movs	r0, #42	; 0x2a
 8004a0e:	f7fe fec9 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0X00);
 8004a12:	2000      	movs	r0, #0
 8004a14:	f7fe feda 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X00);
 8004a18:	2000      	movs	r0, #0
 8004a1a:	f7fe fed7 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0X01);
 8004a1e:	2001      	movs	r0, #1
 8004a20:	f7fe fed4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0XDF);
 8004a24:	20df      	movs	r0, #223	; 0xdf
 8004a26:	f7fe fed1 	bl	80037cc <LCD_WR_DATA>
		HAL_Delay(120);
 8004a2a:	2078      	movs	r0, #120	; 0x78
 8004a2c:	f003 fc00 	bl	8008230 <HAL_Delay>
		LCD_WR_REG(0X29);
 8004a30:	2029      	movs	r0, #41	; 0x29
 8004a32:	f7fe feb7 	bl	80037a4 <LCD_WR_REG>
 8004a36:	f003 b86e 	b.w	8007b16 <LCD_Init+0x374e>
 8004a3a:	bf00      	nop
 8004a3c:	20001034 	.word	0x20001034
 	}else if(lcddev.id==0x5310)
 8004a40:	4b03      	ldr	r3, [pc, #12]	; (8004a50 <LCD_Init+0x688>)
 8004a42:	889b      	ldrh	r3, [r3, #4]
 8004a44:	f245 3210 	movw	r2, #21264	; 0x5310
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	f040 877c 	bne.w	8005946 <LCD_Init+0x157e>
 8004a4e:	e001      	b.n	8004a54 <LCD_Init+0x68c>
 8004a50:	20001034 	.word	0x20001034
	{
		LCD_WR_REG(0xED);
 8004a54:	20ed      	movs	r0, #237	; 0xed
 8004a56:	f7fe fea5 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8004a5a:	2001      	movs	r0, #1
 8004a5c:	f7fe feb6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 8004a60:	20fe      	movs	r0, #254	; 0xfe
 8004a62:	f7fe feb3 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 8004a66:	20ee      	movs	r0, #238	; 0xee
 8004a68:	f7fe fe9c 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 8004a6c:	20de      	movs	r0, #222	; 0xde
 8004a6e:	f7fe fead 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8004a72:	2021      	movs	r0, #33	; 0x21
 8004a74:	f7fe feaa 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 8004a78:	20f1      	movs	r0, #241	; 0xf1
 8004a7a:	f7fe fe93 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8004a7e:	2001      	movs	r0, #1
 8004a80:	f7fe fea4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 8004a84:	20df      	movs	r0, #223	; 0xdf
 8004a86:	f7fe fe8d 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 8004a8a:	2010      	movs	r0, #16
 8004a8c:	f7fe fe9e 	bl	80037cc <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8004a90:	20c4      	movs	r0, #196	; 0xc4
 8004a92:	f7fe fe87 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 8004a96:	208f      	movs	r0, #143	; 0x8f
 8004a98:	f7fe fe98 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8004a9c:	20c6      	movs	r0, #198	; 0xc6
 8004a9e:	f7fe fe81 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f7fe fe92 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8004aa8:	20e2      	movs	r0, #226	; 0xe2
 8004aaa:	f7fe fe8f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8004aae:	20e2      	movs	r0, #226	; 0xe2
 8004ab0:	f7fe fe8c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8004ab4:	20e2      	movs	r0, #226	; 0xe2
 8004ab6:	f7fe fe89 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 8004aba:	20bf      	movs	r0, #191	; 0xbf
 8004abc:	f7fe fe72 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8004ac0:	20aa      	movs	r0, #170	; 0xaa
 8004ac2:	f7fe fe83 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 8004ac6:	20b0      	movs	r0, #176	; 0xb0
 8004ac8:	f7fe fe6c 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 8004acc:	200d      	movs	r0, #13
 8004ace:	f7fe fe7d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004ad2:	2000      	movs	r0, #0
 8004ad4:	f7fe fe7a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 8004ad8:	200d      	movs	r0, #13
 8004ada:	f7fe fe77 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004ade:	2000      	movs	r0, #0
 8004ae0:	f7fe fe74 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8004ae4:	2011      	movs	r0, #17
 8004ae6:	f7fe fe71 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004aea:	2000      	movs	r0, #0
 8004aec:	f7fe fe6e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 8004af0:	2019      	movs	r0, #25
 8004af2:	f7fe fe6b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004af6:	2000      	movs	r0, #0
 8004af8:	f7fe fe68 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8004afc:	2021      	movs	r0, #33	; 0x21
 8004afe:	f7fe fe65 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004b02:	2000      	movs	r0, #0
 8004b04:	f7fe fe62 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8004b08:	202d      	movs	r0, #45	; 0x2d
 8004b0a:	f7fe fe5f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f7fe fe5c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 8004b14:	203d      	movs	r0, #61	; 0x3d
 8004b16:	f7fe fe59 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004b1a:	2000      	movs	r0, #0
 8004b1c:	f7fe fe56 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8004b20:	205d      	movs	r0, #93	; 0x5d
 8004b22:	f7fe fe53 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004b26:	2000      	movs	r0, #0
 8004b28:	f7fe fe50 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8004b2c:	205d      	movs	r0, #93	; 0x5d
 8004b2e:	f7fe fe4d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004b32:	2000      	movs	r0, #0
 8004b34:	f7fe fe4a 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 8004b38:	20b1      	movs	r0, #177	; 0xb1
 8004b3a:	f7fe fe33 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 8004b3e:	2080      	movs	r0, #128	; 0x80
 8004b40:	f7fe fe44 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004b44:	2000      	movs	r0, #0
 8004b46:	f7fe fe41 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8004b4a:	208b      	movs	r0, #139	; 0x8b
 8004b4c:	f7fe fe3e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004b50:	2000      	movs	r0, #0
 8004b52:	f7fe fe3b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8004b56:	2096      	movs	r0, #150	; 0x96
 8004b58:	f7fe fe38 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004b5c:	2000      	movs	r0, #0
 8004b5e:	f7fe fe35 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 8004b62:	20b2      	movs	r0, #178	; 0xb2
 8004b64:	f7fe fe1e 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004b68:	2000      	movs	r0, #0
 8004b6a:	f7fe fe2f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004b6e:	2000      	movs	r0, #0
 8004b70:	f7fe fe2c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8004b74:	2002      	movs	r0, #2
 8004b76:	f7fe fe29 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	f7fe fe26 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8004b80:	2003      	movs	r0, #3
 8004b82:	f7fe fe23 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004b86:	2000      	movs	r0, #0
 8004b88:	f7fe fe20 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 8004b8c:	20b3      	movs	r0, #179	; 0xb3
 8004b8e:	f7fe fe09 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004b92:	2000      	movs	r0, #0
 8004b94:	f7fe fe1a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004b98:	2000      	movs	r0, #0
 8004b9a:	f7fe fe17 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004b9e:	2000      	movs	r0, #0
 8004ba0:	f7fe fe14 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004ba4:	2000      	movs	r0, #0
 8004ba6:	f7fe fe11 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004baa:	2000      	movs	r0, #0
 8004bac:	f7fe fe0e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	f7fe fe0b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004bb6:	2000      	movs	r0, #0
 8004bb8:	f7fe fe08 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	f7fe fe05 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	f7fe fe02 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004bc8:	2000      	movs	r0, #0
 8004bca:	f7fe fdff 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004bce:	2000      	movs	r0, #0
 8004bd0:	f7fe fdfc 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	f7fe fdf9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004bda:	2000      	movs	r0, #0
 8004bdc:	f7fe fdf6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004be0:	2000      	movs	r0, #0
 8004be2:	f7fe fdf3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004be6:	2000      	movs	r0, #0
 8004be8:	f7fe fdf0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004bec:	2000      	movs	r0, #0
 8004bee:	f7fe fded 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004bf2:	2000      	movs	r0, #0
 8004bf4:	f7fe fdea 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004bf8:	2000      	movs	r0, #0
 8004bfa:	f7fe fde7 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004bfe:	2000      	movs	r0, #0
 8004c00:	f7fe fde4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004c04:	2000      	movs	r0, #0
 8004c06:	f7fe fde1 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004c0a:	2000      	movs	r0, #0
 8004c0c:	f7fe fdde 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004c10:	2000      	movs	r0, #0
 8004c12:	f7fe fddb 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004c16:	2000      	movs	r0, #0
 8004c18:	f7fe fdd8 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	f7fe fdd5 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 8004c22:	20b4      	movs	r0, #180	; 0xb4
 8004c24:	f7fe fdbe 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 8004c28:	208b      	movs	r0, #139	; 0x8b
 8004c2a:	f7fe fdcf 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004c2e:	2000      	movs	r0, #0
 8004c30:	f7fe fdcc 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8004c34:	2096      	movs	r0, #150	; 0x96
 8004c36:	f7fe fdc9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	f7fe fdc6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 8004c40:	20a1      	movs	r0, #161	; 0xa1
 8004c42:	f7fe fdc3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004c46:	2000      	movs	r0, #0
 8004c48:	f7fe fdc0 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 8004c4c:	20b5      	movs	r0, #181	; 0xb5
 8004c4e:	f7fe fda9 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 8004c52:	2002      	movs	r0, #2
 8004c54:	f7fe fdba 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004c58:	2000      	movs	r0, #0
 8004c5a:	f7fe fdb7 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8004c5e:	2003      	movs	r0, #3
 8004c60:	f7fe fdb4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004c64:	2000      	movs	r0, #0
 8004c66:	f7fe fdb1 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8004c6a:	2004      	movs	r0, #4
 8004c6c:	f7fe fdae 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004c70:	2000      	movs	r0, #0
 8004c72:	f7fe fdab 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 8004c76:	20b6      	movs	r0, #182	; 0xb6
 8004c78:	f7fe fd94 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	f7fe fda5 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004c82:	2000      	movs	r0, #0
 8004c84:	f7fe fda2 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 8004c88:	20b7      	movs	r0, #183	; 0xb7
 8004c8a:	f7fe fd8b 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004c8e:	2000      	movs	r0, #0
 8004c90:	f7fe fd9c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004c94:	2000      	movs	r0, #0
 8004c96:	f7fe fd99 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8004c9a:	203f      	movs	r0, #63	; 0x3f
 8004c9c:	f7fe fd96 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	f7fe fd93 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 8004ca6:	205e      	movs	r0, #94	; 0x5e
 8004ca8:	f7fe fd90 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004cac:	2000      	movs	r0, #0
 8004cae:	f7fe fd8d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8004cb2:	2064      	movs	r0, #100	; 0x64
 8004cb4:	f7fe fd8a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004cb8:	2000      	movs	r0, #0
 8004cba:	f7fe fd87 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 8004cbe:	208c      	movs	r0, #140	; 0x8c
 8004cc0:	f7fe fd84 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004cc4:	2000      	movs	r0, #0
 8004cc6:	f7fe fd81 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 8004cca:	20ac      	movs	r0, #172	; 0xac
 8004ccc:	f7fe fd7e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f7fe fd7b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8004cd6:	20dc      	movs	r0, #220	; 0xdc
 8004cd8:	f7fe fd78 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004cdc:	2000      	movs	r0, #0
 8004cde:	f7fe fd75 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 8004ce2:	2070      	movs	r0, #112	; 0x70
 8004ce4:	f7fe fd72 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004ce8:	2000      	movs	r0, #0
 8004cea:	f7fe fd6f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 8004cee:	2090      	movs	r0, #144	; 0x90
 8004cf0:	f7fe fd6c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	f7fe fd69 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 8004cfa:	20eb      	movs	r0, #235	; 0xeb
 8004cfc:	f7fe fd66 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004d00:	2000      	movs	r0, #0
 8004d02:	f7fe fd63 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8004d06:	20dc      	movs	r0, #220	; 0xdc
 8004d08:	f7fe fd60 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	f7fe fd5d 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 8004d12:	20b8      	movs	r0, #184	; 0xb8
 8004d14:	f7fe fd46 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004d18:	2000      	movs	r0, #0
 8004d1a:	f7fe fd57 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004d1e:	2000      	movs	r0, #0
 8004d20:	f7fe fd54 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004d24:	2000      	movs	r0, #0
 8004d26:	f7fe fd51 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004d2a:	2000      	movs	r0, #0
 8004d2c:	f7fe fd4e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004d30:	2000      	movs	r0, #0
 8004d32:	f7fe fd4b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004d36:	2000      	movs	r0, #0
 8004d38:	f7fe fd48 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004d3c:	2000      	movs	r0, #0
 8004d3e:	f7fe fd45 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004d42:	2000      	movs	r0, #0
 8004d44:	f7fe fd42 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 8004d48:	20ba      	movs	r0, #186	; 0xba
 8004d4a:	f7fe fd2b 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 8004d4e:	2024      	movs	r0, #36	; 0x24
 8004d50:	f7fe fd3c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004d54:	2000      	movs	r0, #0
 8004d56:	f7fe fd39 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004d5a:	2000      	movs	r0, #0
 8004d5c:	f7fe fd36 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004d60:	2000      	movs	r0, #0
 8004d62:	f7fe fd33 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 8004d66:	20c1      	movs	r0, #193	; 0xc1
 8004d68:	f7fe fd1c 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8004d6c:	2020      	movs	r0, #32
 8004d6e:	f7fe fd2d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004d72:	2000      	movs	r0, #0
 8004d74:	f7fe fd2a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8004d78:	2054      	movs	r0, #84	; 0x54
 8004d7a:	f7fe fd27 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004d7e:	2000      	movs	r0, #0
 8004d80:	f7fe fd24 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8004d84:	20ff      	movs	r0, #255	; 0xff
 8004d86:	f7fe fd21 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004d8a:	2000      	movs	r0, #0
 8004d8c:	f7fe fd1e 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 8004d90:	20c2      	movs	r0, #194	; 0xc2
 8004d92:	f7fe fd07 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8004d96:	200a      	movs	r0, #10
 8004d98:	f7fe fd18 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	f7fe fd15 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8004da2:	2004      	movs	r0, #4
 8004da4:	f7fe fd12 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004da8:	2000      	movs	r0, #0
 8004daa:	f7fe fd0f 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 8004dae:	20c3      	movs	r0, #195	; 0xc3
 8004db0:	f7fe fcf8 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 8004db4:	203c      	movs	r0, #60	; 0x3c
 8004db6:	f7fe fd09 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004dba:	2000      	movs	r0, #0
 8004dbc:	f7fe fd06 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 8004dc0:	203a      	movs	r0, #58	; 0x3a
 8004dc2:	f7fe fd03 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004dc6:	2000      	movs	r0, #0
 8004dc8:	f7fe fd00 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 8004dcc:	2039      	movs	r0, #57	; 0x39
 8004dce:	f7fe fcfd 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	f7fe fcfa 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 8004dd8:	2037      	movs	r0, #55	; 0x37
 8004dda:	f7fe fcf7 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004dde:	2000      	movs	r0, #0
 8004de0:	f7fe fcf4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8004de4:	203c      	movs	r0, #60	; 0x3c
 8004de6:	f7fe fcf1 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004dea:	2000      	movs	r0, #0
 8004dec:	f7fe fcee 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8004df0:	2036      	movs	r0, #54	; 0x36
 8004df2:	f7fe fceb 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004df6:	2000      	movs	r0, #0
 8004df8:	f7fe fce8 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8004dfc:	2032      	movs	r0, #50	; 0x32
 8004dfe:	f7fe fce5 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004e02:	2000      	movs	r0, #0
 8004e04:	f7fe fce2 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8004e08:	202f      	movs	r0, #47	; 0x2f
 8004e0a:	f7fe fcdf 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004e0e:	2000      	movs	r0, #0
 8004e10:	f7fe fcdc 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8004e14:	202c      	movs	r0, #44	; 0x2c
 8004e16:	f7fe fcd9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004e1a:	2000      	movs	r0, #0
 8004e1c:	f7fe fcd6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8004e20:	2029      	movs	r0, #41	; 0x29
 8004e22:	f7fe fcd3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004e26:	2000      	movs	r0, #0
 8004e28:	f7fe fcd0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8004e2c:	2026      	movs	r0, #38	; 0x26
 8004e2e:	f7fe fccd 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004e32:	2000      	movs	r0, #0
 8004e34:	f7fe fcca 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8004e38:	2024      	movs	r0, #36	; 0x24
 8004e3a:	f7fe fcc7 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004e3e:	2000      	movs	r0, #0
 8004e40:	f7fe fcc4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8004e44:	2024      	movs	r0, #36	; 0x24
 8004e46:	f7fe fcc1 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f7fe fcbe 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8004e50:	2023      	movs	r0, #35	; 0x23
 8004e52:	f7fe fcbb 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004e56:	2000      	movs	r0, #0
 8004e58:	f7fe fcb8 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8004e5c:	203c      	movs	r0, #60	; 0x3c
 8004e5e:	f7fe fcb5 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004e62:	2000      	movs	r0, #0
 8004e64:	f7fe fcb2 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8004e68:	2036      	movs	r0, #54	; 0x36
 8004e6a:	f7fe fcaf 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004e6e:	2000      	movs	r0, #0
 8004e70:	f7fe fcac 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8004e74:	2032      	movs	r0, #50	; 0x32
 8004e76:	f7fe fca9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	f7fe fca6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 8004e80:	202f      	movs	r0, #47	; 0x2f
 8004e82:	f7fe fca3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004e86:	2000      	movs	r0, #0
 8004e88:	f7fe fca0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8004e8c:	202c      	movs	r0, #44	; 0x2c
 8004e8e:	f7fe fc9d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004e92:	2000      	movs	r0, #0
 8004e94:	f7fe fc9a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8004e98:	2029      	movs	r0, #41	; 0x29
 8004e9a:	f7fe fc97 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	f7fe fc94 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8004ea4:	2026      	movs	r0, #38	; 0x26
 8004ea6:	f7fe fc91 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004eaa:	2000      	movs	r0, #0
 8004eac:	f7fe fc8e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8004eb0:	2024      	movs	r0, #36	; 0x24
 8004eb2:	f7fe fc8b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	f7fe fc88 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8004ebc:	2024      	movs	r0, #36	; 0x24
 8004ebe:	f7fe fc85 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004ec2:	2000      	movs	r0, #0
 8004ec4:	f7fe fc82 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8004ec8:	2023      	movs	r0, #35	; 0x23
 8004eca:	f7fe fc7f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004ece:	2000      	movs	r0, #0
 8004ed0:	f7fe fc7c 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 8004ed4:	20c4      	movs	r0, #196	; 0xc4
 8004ed6:	f7fe fc65 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 8004eda:	2062      	movs	r0, #98	; 0x62
 8004edc:	f7fe fc76 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	f7fe fc73 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8004ee6:	2005      	movs	r0, #5
 8004ee8:	f7fe fc70 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004eec:	2000      	movs	r0, #0
 8004eee:	f7fe fc6d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8004ef2:	2084      	movs	r0, #132	; 0x84
 8004ef4:	f7fe fc6a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004ef8:	2000      	movs	r0, #0
 8004efa:	f7fe fc67 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 8004efe:	20f0      	movs	r0, #240	; 0xf0
 8004f00:	f7fe fc64 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004f04:	2000      	movs	r0, #0
 8004f06:	f7fe fc61 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8004f0a:	2018      	movs	r0, #24
 8004f0c:	f7fe fc5e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004f10:	2000      	movs	r0, #0
 8004f12:	f7fe fc5b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 8004f16:	20a4      	movs	r0, #164	; 0xa4
 8004f18:	f7fe fc58 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004f1c:	2000      	movs	r0, #0
 8004f1e:	f7fe fc55 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8004f22:	2018      	movs	r0, #24
 8004f24:	f7fe fc52 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004f28:	2000      	movs	r0, #0
 8004f2a:	f7fe fc4f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8004f2e:	2050      	movs	r0, #80	; 0x50
 8004f30:	f7fe fc4c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004f34:	2000      	movs	r0, #0
 8004f36:	f7fe fc49 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 8004f3a:	200c      	movs	r0, #12
 8004f3c:	f7fe fc46 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004f40:	2000      	movs	r0, #0
 8004f42:	f7fe fc43 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8004f46:	2017      	movs	r0, #23
 8004f48:	f7fe fc40 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004f4c:	2000      	movs	r0, #0
 8004f4e:	f7fe fc3d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 8004f52:	2095      	movs	r0, #149	; 0x95
 8004f54:	f7fe fc3a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004f58:	2000      	movs	r0, #0
 8004f5a:	f7fe fc37 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8004f5e:	20f3      	movs	r0, #243	; 0xf3
 8004f60:	f7fe fc34 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004f64:	2000      	movs	r0, #0
 8004f66:	f7fe fc31 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 8004f6a:	20e6      	movs	r0, #230	; 0xe6
 8004f6c:	f7fe fc2e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004f70:	2000      	movs	r0, #0
 8004f72:	f7fe fc2b 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 8004f76:	20c5      	movs	r0, #197	; 0xc5
 8004f78:	f7fe fc14 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8004f7c:	2032      	movs	r0, #50	; 0x32
 8004f7e:	f7fe fc25 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004f82:	2000      	movs	r0, #0
 8004f84:	f7fe fc22 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8004f88:	2044      	movs	r0, #68	; 0x44
 8004f8a:	f7fe fc1f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004f8e:	2000      	movs	r0, #0
 8004f90:	f7fe fc1c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 8004f94:	2065      	movs	r0, #101	; 0x65
 8004f96:	f7fe fc19 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004f9a:	2000      	movs	r0, #0
 8004f9c:	f7fe fc16 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8004fa0:	2076      	movs	r0, #118	; 0x76
 8004fa2:	f7fe fc13 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	f7fe fc10 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8004fac:	2088      	movs	r0, #136	; 0x88
 8004fae:	f7fe fc0d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	f7fe fc0a 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8004fb8:	20c6      	movs	r0, #198	; 0xc6
 8004fba:	f7fe fbf3 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8004fbe:	2020      	movs	r0, #32
 8004fc0:	f7fe fc04 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	f7fe fc01 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8004fca:	2017      	movs	r0, #23
 8004fcc:	f7fe fbfe 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	f7fe fbfb 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	f7fe fbf8 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f7fe fbf5 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 8004fe2:	20c7      	movs	r0, #199	; 0xc7
 8004fe4:	f7fe fbde 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8004fe8:	2000      	movs	r0, #0
 8004fea:	f7fe fbef 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004fee:	2000      	movs	r0, #0
 8004ff0:	f7fe fbec 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004ff4:	2000      	movs	r0, #0
 8004ff6:	f7fe fbe9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	f7fe fbe6 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8005000:	20c8      	movs	r0, #200	; 0xc8
 8005002:	f7fe fbcf 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8005006:	2000      	movs	r0, #0
 8005008:	f7fe fbe0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800500c:	2000      	movs	r0, #0
 800500e:	f7fe fbdd 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005012:	2000      	movs	r0, #0
 8005014:	f7fe fbda 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005018:	2000      	movs	r0, #0
 800501a:	f7fe fbd7 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 800501e:	20c9      	movs	r0, #201	; 0xc9
 8005020:	f7fe fbc0 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8005024:	2000      	movs	r0, #0
 8005026:	f7fe fbd1 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800502a:	2000      	movs	r0, #0
 800502c:	f7fe fbce 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005030:	2000      	movs	r0, #0
 8005032:	f7fe fbcb 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005036:	2000      	movs	r0, #0
 8005038:	f7fe fbc8 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800503c:	2000      	movs	r0, #0
 800503e:	f7fe fbc5 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005042:	2000      	movs	r0, #0
 8005044:	f7fe fbc2 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005048:	2000      	movs	r0, #0
 800504a:	f7fe fbbf 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800504e:	2000      	movs	r0, #0
 8005050:	f7fe fbbc 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005054:	2000      	movs	r0, #0
 8005056:	f7fe fbb9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800505a:	2000      	movs	r0, #0
 800505c:	f7fe fbb6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005060:	2000      	movs	r0, #0
 8005062:	f7fe fbb3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005066:	2000      	movs	r0, #0
 8005068:	f7fe fbb0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800506c:	2000      	movs	r0, #0
 800506e:	f7fe fbad 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005072:	2000      	movs	r0, #0
 8005074:	f7fe fbaa 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005078:	2000      	movs	r0, #0
 800507a:	f7fe fba7 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800507e:	2000      	movs	r0, #0
 8005080:	f7fe fba4 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 8005084:	20e0      	movs	r0, #224	; 0xe0
 8005086:	f7fe fb8d 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 800508a:	2016      	movs	r0, #22
 800508c:	f7fe fb9e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005090:	2000      	movs	r0, #0
 8005092:	f7fe fb9b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8005096:	201c      	movs	r0, #28
 8005098:	f7fe fb98 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800509c:	2000      	movs	r0, #0
 800509e:	f7fe fb95 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 80050a2:	2021      	movs	r0, #33	; 0x21
 80050a4:	f7fe fb92 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80050a8:	2000      	movs	r0, #0
 80050aa:	f7fe fb8f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80050ae:	2036      	movs	r0, #54	; 0x36
 80050b0:	f7fe fb8c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80050b4:	2000      	movs	r0, #0
 80050b6:	f7fe fb89 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 80050ba:	2046      	movs	r0, #70	; 0x46
 80050bc:	f7fe fb86 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80050c0:	2000      	movs	r0, #0
 80050c2:	f7fe fb83 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80050c6:	2052      	movs	r0, #82	; 0x52
 80050c8:	f7fe fb80 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80050cc:	2000      	movs	r0, #0
 80050ce:	f7fe fb7d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80050d2:	2064      	movs	r0, #100	; 0x64
 80050d4:	f7fe fb7a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80050d8:	2000      	movs	r0, #0
 80050da:	f7fe fb77 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 80050de:	207a      	movs	r0, #122	; 0x7a
 80050e0:	f7fe fb74 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80050e4:	2000      	movs	r0, #0
 80050e6:	f7fe fb71 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 80050ea:	208b      	movs	r0, #139	; 0x8b
 80050ec:	f7fe fb6e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80050f0:	2000      	movs	r0, #0
 80050f2:	f7fe fb6b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80050f6:	2099      	movs	r0, #153	; 0x99
 80050f8:	f7fe fb68 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80050fc:	2000      	movs	r0, #0
 80050fe:	f7fe fb65 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8005102:	20a8      	movs	r0, #168	; 0xa8
 8005104:	f7fe fb62 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005108:	2000      	movs	r0, #0
 800510a:	f7fe fb5f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 800510e:	20b9      	movs	r0, #185	; 0xb9
 8005110:	f7fe fb5c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005114:	2000      	movs	r0, #0
 8005116:	f7fe fb59 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800511a:	20c4      	movs	r0, #196	; 0xc4
 800511c:	f7fe fb56 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005120:	2000      	movs	r0, #0
 8005122:	f7fe fb53 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8005126:	20ca      	movs	r0, #202	; 0xca
 8005128:	f7fe fb50 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800512c:	2000      	movs	r0, #0
 800512e:	f7fe fb4d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8005132:	20d2      	movs	r0, #210	; 0xd2
 8005134:	f7fe fb4a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005138:	2000      	movs	r0, #0
 800513a:	f7fe fb47 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 800513e:	20d9      	movs	r0, #217	; 0xd9
 8005140:	f7fe fb44 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005144:	2000      	movs	r0, #0
 8005146:	f7fe fb41 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 800514a:	20e0      	movs	r0, #224	; 0xe0
 800514c:	f7fe fb3e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005150:	2000      	movs	r0, #0
 8005152:	f7fe fb3b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8005156:	20f3      	movs	r0, #243	; 0xf3
 8005158:	f7fe fb38 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800515c:	2000      	movs	r0, #0
 800515e:	f7fe fb35 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 8005162:	20e1      	movs	r0, #225	; 0xe1
 8005164:	f7fe fb1e 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 8005168:	2016      	movs	r0, #22
 800516a:	f7fe fb2f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800516e:	2000      	movs	r0, #0
 8005170:	f7fe fb2c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 8005174:	201c      	movs	r0, #28
 8005176:	f7fe fb29 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800517a:	2000      	movs	r0, #0
 800517c:	f7fe fb26 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 8005180:	2022      	movs	r0, #34	; 0x22
 8005182:	f7fe fb23 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005186:	2000      	movs	r0, #0
 8005188:	f7fe fb20 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 800518c:	2036      	movs	r0, #54	; 0x36
 800518e:	f7fe fb1d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005192:	2000      	movs	r0, #0
 8005194:	f7fe fb1a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8005198:	2045      	movs	r0, #69	; 0x45
 800519a:	f7fe fb17 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800519e:	2000      	movs	r0, #0
 80051a0:	f7fe fb14 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 80051a4:	2052      	movs	r0, #82	; 0x52
 80051a6:	f7fe fb11 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80051aa:	2000      	movs	r0, #0
 80051ac:	f7fe fb0e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 80051b0:	2064      	movs	r0, #100	; 0x64
 80051b2:	f7fe fb0b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80051b6:	2000      	movs	r0, #0
 80051b8:	f7fe fb08 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 80051bc:	207a      	movs	r0, #122	; 0x7a
 80051be:	f7fe fb05 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80051c2:	2000      	movs	r0, #0
 80051c4:	f7fe fb02 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 80051c8:	208b      	movs	r0, #139	; 0x8b
 80051ca:	f7fe faff 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80051ce:	2000      	movs	r0, #0
 80051d0:	f7fe fafc 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80051d4:	2099      	movs	r0, #153	; 0x99
 80051d6:	f7fe faf9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80051da:	2000      	movs	r0, #0
 80051dc:	f7fe faf6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 80051e0:	20a8      	movs	r0, #168	; 0xa8
 80051e2:	f7fe faf3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80051e6:	2000      	movs	r0, #0
 80051e8:	f7fe faf0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 80051ec:	20b9      	movs	r0, #185	; 0xb9
 80051ee:	f7fe faed 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80051f2:	2000      	movs	r0, #0
 80051f4:	f7fe faea 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 80051f8:	20c4      	movs	r0, #196	; 0xc4
 80051fa:	f7fe fae7 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80051fe:	2000      	movs	r0, #0
 8005200:	f7fe fae4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8005204:	20ca      	movs	r0, #202	; 0xca
 8005206:	f7fe fae1 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800520a:	2000      	movs	r0, #0
 800520c:	f7fe fade 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8005210:	20d2      	movs	r0, #210	; 0xd2
 8005212:	f7fe fadb 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005216:	2000      	movs	r0, #0
 8005218:	f7fe fad8 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 800521c:	20d8      	movs	r0, #216	; 0xd8
 800521e:	f7fe fad5 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005222:	2000      	movs	r0, #0
 8005224:	f7fe fad2 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 8005228:	20e0      	movs	r0, #224	; 0xe0
 800522a:	f7fe facf 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800522e:	2000      	movs	r0, #0
 8005230:	f7fe facc 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8005234:	20f3      	movs	r0, #243	; 0xf3
 8005236:	f7fe fac9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800523a:	2000      	movs	r0, #0
 800523c:	f7fe fac6 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 8005240:	20e2      	movs	r0, #226	; 0xe2
 8005242:	f7fe faaf 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8005246:	2005      	movs	r0, #5
 8005248:	f7fe fac0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800524c:	2000      	movs	r0, #0
 800524e:	f7fe fabd 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 8005252:	200b      	movs	r0, #11
 8005254:	f7fe faba 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005258:	2000      	movs	r0, #0
 800525a:	f7fe fab7 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 800525e:	201b      	movs	r0, #27
 8005260:	f7fe fab4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005264:	2000      	movs	r0, #0
 8005266:	f7fe fab1 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 800526a:	2034      	movs	r0, #52	; 0x34
 800526c:	f7fe faae 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005270:	2000      	movs	r0, #0
 8005272:	f7fe faab 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8005276:	2044      	movs	r0, #68	; 0x44
 8005278:	f7fe faa8 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800527c:	2000      	movs	r0, #0
 800527e:	f7fe faa5 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 8005282:	204f      	movs	r0, #79	; 0x4f
 8005284:	f7fe faa2 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005288:	2000      	movs	r0, #0
 800528a:	f7fe fa9f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 800528e:	2061      	movs	r0, #97	; 0x61
 8005290:	f7fe fa9c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005294:	2000      	movs	r0, #0
 8005296:	f7fe fa99 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 800529a:	2079      	movs	r0, #121	; 0x79
 800529c:	f7fe fa96 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80052a0:	2000      	movs	r0, #0
 80052a2:	f7fe fa93 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80052a6:	2088      	movs	r0, #136	; 0x88
 80052a8:	f7fe fa90 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80052ac:	2000      	movs	r0, #0
 80052ae:	f7fe fa8d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80052b2:	2097      	movs	r0, #151	; 0x97
 80052b4:	f7fe fa8a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80052b8:	2000      	movs	r0, #0
 80052ba:	f7fe fa87 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 80052be:	20a6      	movs	r0, #166	; 0xa6
 80052c0:	f7fe fa84 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80052c4:	2000      	movs	r0, #0
 80052c6:	f7fe fa81 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80052ca:	20b7      	movs	r0, #183	; 0xb7
 80052cc:	f7fe fa7e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80052d0:	2000      	movs	r0, #0
 80052d2:	f7fe fa7b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 80052d6:	20c2      	movs	r0, #194	; 0xc2
 80052d8:	f7fe fa78 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80052dc:	2000      	movs	r0, #0
 80052de:	f7fe fa75 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 80052e2:	20c7      	movs	r0, #199	; 0xc7
 80052e4:	f7fe fa72 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80052e8:	2000      	movs	r0, #0
 80052ea:	f7fe fa6f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 80052ee:	20d1      	movs	r0, #209	; 0xd1
 80052f0:	f7fe fa6c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80052f4:	2000      	movs	r0, #0
 80052f6:	f7fe fa69 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 80052fa:	20d6      	movs	r0, #214	; 0xd6
 80052fc:	f7fe fa66 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005300:	2000      	movs	r0, #0
 8005302:	f7fe fa63 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8005306:	20dd      	movs	r0, #221	; 0xdd
 8005308:	f7fe fa60 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800530c:	2000      	movs	r0, #0
 800530e:	f7fe fa5d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8005312:	20f3      	movs	r0, #243	; 0xf3
 8005314:	f7fe fa5a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005318:	2000      	movs	r0, #0
 800531a:	f7fe fa57 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 800531e:	20e3      	movs	r0, #227	; 0xe3
 8005320:	f7fe fa40 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8005324:	2005      	movs	r0, #5
 8005326:	f7fe fa51 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800532a:	2000      	movs	r0, #0
 800532c:	f7fe fa4e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 8005330:	200a      	movs	r0, #10
 8005332:	f7fe fa4b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005336:	2000      	movs	r0, #0
 8005338:	f7fe fa48 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 800533c:	201c      	movs	r0, #28
 800533e:	f7fe fa45 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005342:	2000      	movs	r0, #0
 8005344:	f7fe fa42 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8005348:	2033      	movs	r0, #51	; 0x33
 800534a:	f7fe fa3f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800534e:	2000      	movs	r0, #0
 8005350:	f7fe fa3c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8005354:	2044      	movs	r0, #68	; 0x44
 8005356:	f7fe fa39 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800535a:	2000      	movs	r0, #0
 800535c:	f7fe fa36 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8005360:	2050      	movs	r0, #80	; 0x50
 8005362:	f7fe fa33 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005366:	2000      	movs	r0, #0
 8005368:	f7fe fa30 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 800536c:	2062      	movs	r0, #98	; 0x62
 800536e:	f7fe fa2d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005372:	2000      	movs	r0, #0
 8005374:	f7fe fa2a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 8005378:	2078      	movs	r0, #120	; 0x78
 800537a:	f7fe fa27 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800537e:	2000      	movs	r0, #0
 8005380:	f7fe fa24 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8005384:	2088      	movs	r0, #136	; 0x88
 8005386:	f7fe fa21 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800538a:	2000      	movs	r0, #0
 800538c:	f7fe fa1e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8005390:	2097      	movs	r0, #151	; 0x97
 8005392:	f7fe fa1b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005396:	2000      	movs	r0, #0
 8005398:	f7fe fa18 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 800539c:	20a6      	movs	r0, #166	; 0xa6
 800539e:	f7fe fa15 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80053a2:	2000      	movs	r0, #0
 80053a4:	f7fe fa12 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 80053a8:	20b7      	movs	r0, #183	; 0xb7
 80053aa:	f7fe fa0f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80053ae:	2000      	movs	r0, #0
 80053b0:	f7fe fa0c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 80053b4:	20c2      	movs	r0, #194	; 0xc2
 80053b6:	f7fe fa09 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80053ba:	2000      	movs	r0, #0
 80053bc:	f7fe fa06 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 80053c0:	20c7      	movs	r0, #199	; 0xc7
 80053c2:	f7fe fa03 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80053c6:	2000      	movs	r0, #0
 80053c8:	f7fe fa00 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 80053cc:	20d1      	movs	r0, #209	; 0xd1
 80053ce:	f7fe f9fd 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80053d2:	2000      	movs	r0, #0
 80053d4:	f7fe f9fa 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 80053d8:	20d5      	movs	r0, #213	; 0xd5
 80053da:	f7fe f9f7 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80053de:	2000      	movs	r0, #0
 80053e0:	f7fe f9f4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 80053e4:	20dd      	movs	r0, #221	; 0xdd
 80053e6:	f7fe f9f1 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80053ea:	2000      	movs	r0, #0
 80053ec:	f7fe f9ee 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80053f0:	20f3      	movs	r0, #243	; 0xf3
 80053f2:	f7fe f9eb 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80053f6:	2000      	movs	r0, #0
 80053f8:	f7fe f9e8 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 80053fc:	20e4      	movs	r0, #228	; 0xe4
 80053fe:	f7fe f9d1 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8005402:	2001      	movs	r0, #1
 8005404:	f7fe f9e2 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005408:	2000      	movs	r0, #0
 800540a:	f7fe f9df 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 800540e:	2001      	movs	r0, #1
 8005410:	f7fe f9dc 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005414:	2000      	movs	r0, #0
 8005416:	f7fe f9d9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800541a:	2002      	movs	r0, #2
 800541c:	f7fe f9d6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005420:	2000      	movs	r0, #0
 8005422:	f7fe f9d3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8005426:	202a      	movs	r0, #42	; 0x2a
 8005428:	f7fe f9d0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800542c:	2000      	movs	r0, #0
 800542e:	f7fe f9cd 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8005432:	203c      	movs	r0, #60	; 0x3c
 8005434:	f7fe f9ca 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005438:	2000      	movs	r0, #0
 800543a:	f7fe f9c7 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 800543e:	204b      	movs	r0, #75	; 0x4b
 8005440:	f7fe f9c4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005444:	2000      	movs	r0, #0
 8005446:	f7fe f9c1 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 800544a:	205d      	movs	r0, #93	; 0x5d
 800544c:	f7fe f9be 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005450:	2000      	movs	r0, #0
 8005452:	f7fe f9bb 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8005456:	2074      	movs	r0, #116	; 0x74
 8005458:	f7fe f9b8 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800545c:	2000      	movs	r0, #0
 800545e:	f7fe f9b5 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8005462:	2084      	movs	r0, #132	; 0x84
 8005464:	f7fe f9b2 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005468:	2000      	movs	r0, #0
 800546a:	f7fe f9af 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 800546e:	2093      	movs	r0, #147	; 0x93
 8005470:	f7fe f9ac 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005474:	2000      	movs	r0, #0
 8005476:	f7fe f9a9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 800547a:	20a2      	movs	r0, #162	; 0xa2
 800547c:	f7fe f9a6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005480:	2000      	movs	r0, #0
 8005482:	f7fe f9a3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8005486:	20b3      	movs	r0, #179	; 0xb3
 8005488:	f7fe f9a0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800548c:	2000      	movs	r0, #0
 800548e:	f7fe f99d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8005492:	20be      	movs	r0, #190	; 0xbe
 8005494:	f7fe f99a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005498:	2000      	movs	r0, #0
 800549a:	f7fe f997 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800549e:	20c4      	movs	r0, #196	; 0xc4
 80054a0:	f7fe f994 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80054a4:	2000      	movs	r0, #0
 80054a6:	f7fe f991 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80054aa:	20cd      	movs	r0, #205	; 0xcd
 80054ac:	f7fe f98e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80054b0:	2000      	movs	r0, #0
 80054b2:	f7fe f98b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80054b6:	20d3      	movs	r0, #211	; 0xd3
 80054b8:	f7fe f988 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80054bc:	2000      	movs	r0, #0
 80054be:	f7fe f985 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 80054c2:	20dd      	movs	r0, #221	; 0xdd
 80054c4:	f7fe f982 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80054c8:	2000      	movs	r0, #0
 80054ca:	f7fe f97f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80054ce:	20f3      	movs	r0, #243	; 0xf3
 80054d0:	f7fe f97c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80054d4:	2000      	movs	r0, #0
 80054d6:	f7fe f979 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 80054da:	20e5      	movs	r0, #229	; 0xe5
 80054dc:	f7fe f962 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80054e0:	2000      	movs	r0, #0
 80054e2:	f7fe f973 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80054e6:	2000      	movs	r0, #0
 80054e8:	f7fe f970 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80054ec:	2000      	movs	r0, #0
 80054ee:	f7fe f96d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80054f2:	2000      	movs	r0, #0
 80054f4:	f7fe f96a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 80054f8:	2002      	movs	r0, #2
 80054fa:	f7fe f967 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80054fe:	2000      	movs	r0, #0
 8005500:	f7fe f964 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8005504:	2029      	movs	r0, #41	; 0x29
 8005506:	f7fe f961 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800550a:	2000      	movs	r0, #0
 800550c:	f7fe f95e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8005510:	203c      	movs	r0, #60	; 0x3c
 8005512:	f7fe f95b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005516:	2000      	movs	r0, #0
 8005518:	f7fe f958 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 800551c:	204b      	movs	r0, #75	; 0x4b
 800551e:	f7fe f955 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005522:	2000      	movs	r0, #0
 8005524:	f7fe f952 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8005528:	205d      	movs	r0, #93	; 0x5d
 800552a:	f7fe f94f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800552e:	2000      	movs	r0, #0
 8005530:	f7fe f94c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8005534:	2074      	movs	r0, #116	; 0x74
 8005536:	f7fe f949 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800553a:	2000      	movs	r0, #0
 800553c:	f7fe f946 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8005540:	2084      	movs	r0, #132	; 0x84
 8005542:	f7fe f943 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005546:	2000      	movs	r0, #0
 8005548:	f7fe f940 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 800554c:	2093      	movs	r0, #147	; 0x93
 800554e:	f7fe f93d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005552:	2000      	movs	r0, #0
 8005554:	f7fe f93a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8005558:	20a2      	movs	r0, #162	; 0xa2
 800555a:	f7fe f937 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800555e:	2000      	movs	r0, #0
 8005560:	f7fe f934 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 8005564:	20b3      	movs	r0, #179	; 0xb3
 8005566:	f7fe f931 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800556a:	2000      	movs	r0, #0
 800556c:	f7fe f92e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 8005570:	20be      	movs	r0, #190	; 0xbe
 8005572:	f7fe f92b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005576:	2000      	movs	r0, #0
 8005578:	f7fe f928 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800557c:	20c4      	movs	r0, #196	; 0xc4
 800557e:	f7fe f925 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005582:	2000      	movs	r0, #0
 8005584:	f7fe f922 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 8005588:	20cd      	movs	r0, #205	; 0xcd
 800558a:	f7fe f91f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800558e:	2000      	movs	r0, #0
 8005590:	f7fe f91c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 8005594:	20d3      	movs	r0, #211	; 0xd3
 8005596:	f7fe f919 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800559a:	2000      	movs	r0, #0
 800559c:	f7fe f916 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 80055a0:	20dc      	movs	r0, #220	; 0xdc
 80055a2:	f7fe f913 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80055a6:	2000      	movs	r0, #0
 80055a8:	f7fe f910 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80055ac:	20f3      	movs	r0, #243	; 0xf3
 80055ae:	f7fe f90d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80055b2:	2000      	movs	r0, #0
 80055b4:	f7fe f90a 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 80055b8:	20e6      	movs	r0, #230	; 0xe6
 80055ba:	f7fe f8f3 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 80055be:	2011      	movs	r0, #17
 80055c0:	f7fe f904 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80055c4:	2000      	movs	r0, #0
 80055c6:	f7fe f901 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 80055ca:	2034      	movs	r0, #52	; 0x34
 80055cc:	f7fe f8fe 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80055d0:	2000      	movs	r0, #0
 80055d2:	f7fe f8fb 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 80055d6:	2056      	movs	r0, #86	; 0x56
 80055d8:	f7fe f8f8 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80055dc:	2000      	movs	r0, #0
 80055de:	f7fe f8f5 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 80055e2:	2076      	movs	r0, #118	; 0x76
 80055e4:	f7fe f8f2 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80055e8:	2000      	movs	r0, #0
 80055ea:	f7fe f8ef 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 80055ee:	2077      	movs	r0, #119	; 0x77
 80055f0:	f7fe f8ec 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80055f4:	2000      	movs	r0, #0
 80055f6:	f7fe f8e9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80055fa:	2066      	movs	r0, #102	; 0x66
 80055fc:	f7fe f8e6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005600:	2000      	movs	r0, #0
 8005602:	f7fe f8e3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8005606:	2088      	movs	r0, #136	; 0x88
 8005608:	f7fe f8e0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800560c:	2000      	movs	r0, #0
 800560e:	f7fe f8dd 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8005612:	2099      	movs	r0, #153	; 0x99
 8005614:	f7fe f8da 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005618:	2000      	movs	r0, #0
 800561a:	f7fe f8d7 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 800561e:	20bb      	movs	r0, #187	; 0xbb
 8005620:	f7fe f8d4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005624:	2000      	movs	r0, #0
 8005626:	f7fe f8d1 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800562a:	2099      	movs	r0, #153	; 0x99
 800562c:	f7fe f8ce 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005630:	2000      	movs	r0, #0
 8005632:	f7fe f8cb 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8005636:	2066      	movs	r0, #102	; 0x66
 8005638:	f7fe f8c8 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800563c:	2000      	movs	r0, #0
 800563e:	f7fe f8c5 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8005642:	2055      	movs	r0, #85	; 0x55
 8005644:	f7fe f8c2 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005648:	2000      	movs	r0, #0
 800564a:	f7fe f8bf 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 800564e:	2055      	movs	r0, #85	; 0x55
 8005650:	f7fe f8bc 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005654:	2000      	movs	r0, #0
 8005656:	f7fe f8b9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 800565a:	2045      	movs	r0, #69	; 0x45
 800565c:	f7fe f8b6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005660:	2000      	movs	r0, #0
 8005662:	f7fe f8b3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8005666:	2043      	movs	r0, #67	; 0x43
 8005668:	f7fe f8b0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800566c:	2000      	movs	r0, #0
 800566e:	f7fe f8ad 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8005672:	2044      	movs	r0, #68	; 0x44
 8005674:	f7fe f8aa 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005678:	2000      	movs	r0, #0
 800567a:	f7fe f8a7 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 800567e:	20e7      	movs	r0, #231	; 0xe7
 8005680:	f7fe f890 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 8005684:	2032      	movs	r0, #50	; 0x32
 8005686:	f7fe f8a1 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800568a:	2000      	movs	r0, #0
 800568c:	f7fe f89e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8005690:	2055      	movs	r0, #85	; 0x55
 8005692:	f7fe f89b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005696:	2000      	movs	r0, #0
 8005698:	f7fe f898 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 800569c:	2076      	movs	r0, #118	; 0x76
 800569e:	f7fe f895 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80056a2:	2000      	movs	r0, #0
 80056a4:	f7fe f892 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80056a8:	2066      	movs	r0, #102	; 0x66
 80056aa:	f7fe f88f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80056ae:	2000      	movs	r0, #0
 80056b0:	f7fe f88c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 80056b4:	2067      	movs	r0, #103	; 0x67
 80056b6:	f7fe f889 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80056ba:	2000      	movs	r0, #0
 80056bc:	f7fe f886 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 80056c0:	2067      	movs	r0, #103	; 0x67
 80056c2:	f7fe f883 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80056c6:	2000      	movs	r0, #0
 80056c8:	f7fe f880 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 80056cc:	2087      	movs	r0, #135	; 0x87
 80056ce:	f7fe f87d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80056d2:	2000      	movs	r0, #0
 80056d4:	f7fe f87a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80056d8:	2099      	movs	r0, #153	; 0x99
 80056da:	f7fe f877 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80056de:	2000      	movs	r0, #0
 80056e0:	f7fe f874 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 80056e4:	20bb      	movs	r0, #187	; 0xbb
 80056e6:	f7fe f871 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80056ea:	2000      	movs	r0, #0
 80056ec:	f7fe f86e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80056f0:	2099      	movs	r0, #153	; 0x99
 80056f2:	f7fe f86b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80056f6:	2000      	movs	r0, #0
 80056f8:	f7fe f868 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 80056fc:	2077      	movs	r0, #119	; 0x77
 80056fe:	f7fe f865 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005702:	2000      	movs	r0, #0
 8005704:	f7fe f862 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8005708:	2044      	movs	r0, #68	; 0x44
 800570a:	f7fe f85f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800570e:	2000      	movs	r0, #0
 8005710:	f7fe f85c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8005714:	2056      	movs	r0, #86	; 0x56
 8005716:	f7fe f859 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800571a:	2000      	movs	r0, #0
 800571c:	f7fe f856 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8005720:	2023      	movs	r0, #35	; 0x23
 8005722:	f7fe f853 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005726:	2000      	movs	r0, #0
 8005728:	f7fe f850 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 800572c:	2033      	movs	r0, #51	; 0x33
 800572e:	f7fe f84d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005732:	2000      	movs	r0, #0
 8005734:	f7fe f84a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 8005738:	2045      	movs	r0, #69	; 0x45
 800573a:	f7fe f847 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800573e:	2000      	movs	r0, #0
 8005740:	f7fe f844 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 8005744:	20e8      	movs	r0, #232	; 0xe8
 8005746:	f7fe f82d 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800574a:	2000      	movs	r0, #0
 800574c:	f7fe f83e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005750:	2000      	movs	r0, #0
 8005752:	f7fe f83b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8005756:	2099      	movs	r0, #153	; 0x99
 8005758:	f7fe f838 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800575c:	2000      	movs	r0, #0
 800575e:	f7fe f835 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8005762:	2087      	movs	r0, #135	; 0x87
 8005764:	f7fe f832 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005768:	2000      	movs	r0, #0
 800576a:	f7fe f82f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 800576e:	2088      	movs	r0, #136	; 0x88
 8005770:	f7fe f82c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005774:	2000      	movs	r0, #0
 8005776:	f7fe f829 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 800577a:	2077      	movs	r0, #119	; 0x77
 800577c:	f7fe f826 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005780:	2000      	movs	r0, #0
 8005782:	f7fe f823 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8005786:	2066      	movs	r0, #102	; 0x66
 8005788:	f7fe f820 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800578c:	2000      	movs	r0, #0
 800578e:	f7fe f81d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8005792:	2088      	movs	r0, #136	; 0x88
 8005794:	f7fe f81a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005798:	2000      	movs	r0, #0
 800579a:	f7fe f817 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 800579e:	20aa      	movs	r0, #170	; 0xaa
 80057a0:	f7fe f814 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80057a4:	2000      	movs	r0, #0
 80057a6:	f7fe f811 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 80057aa:	20bb      	movs	r0, #187	; 0xbb
 80057ac:	f7fe f80e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80057b0:	2000      	movs	r0, #0
 80057b2:	f7fe f80b 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80057b6:	2099      	movs	r0, #153	; 0x99
 80057b8:	f7fe f808 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80057bc:	2000      	movs	r0, #0
 80057be:	f7fe f805 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80057c2:	2066      	movs	r0, #102	; 0x66
 80057c4:	f7fe f802 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80057c8:	2000      	movs	r0, #0
 80057ca:	f7fd ffff 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80057ce:	2055      	movs	r0, #85	; 0x55
 80057d0:	f7fd fffc 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80057d4:	2000      	movs	r0, #0
 80057d6:	f7fd fff9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80057da:	2055      	movs	r0, #85	; 0x55
 80057dc:	f7fd fff6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80057e0:	2000      	movs	r0, #0
 80057e2:	f7fd fff3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80057e6:	2044      	movs	r0, #68	; 0x44
 80057e8:	f7fd fff0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80057ec:	2000      	movs	r0, #0
 80057ee:	f7fd ffed 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80057f2:	2044      	movs	r0, #68	; 0x44
 80057f4:	f7fd ffea 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80057f8:	2000      	movs	r0, #0
 80057fa:	f7fd ffe7 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80057fe:	2055      	movs	r0, #85	; 0x55
 8005800:	f7fd ffe4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005804:	2000      	movs	r0, #0
 8005806:	f7fd ffe1 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 800580a:	20e9      	movs	r0, #233	; 0xe9
 800580c:	f7fd ffca 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8005810:	20aa      	movs	r0, #170	; 0xaa
 8005812:	f7fd ffdb 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005816:	2000      	movs	r0, #0
 8005818:	f7fd ffd8 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800581c:	2000      	movs	r0, #0
 800581e:	f7fd ffd5 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005822:	2000      	movs	r0, #0
 8005824:	f7fd ffd2 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 8005828:	2000      	movs	r0, #0
 800582a:	f7fd ffbb 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 800582e:	20aa      	movs	r0, #170	; 0xaa
 8005830:	f7fd ffcc 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 8005834:	20cf      	movs	r0, #207	; 0xcf
 8005836:	f7fd ffb5 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800583a:	2000      	movs	r0, #0
 800583c:	f7fd ffc6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005840:	2000      	movs	r0, #0
 8005842:	f7fd ffc3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005846:	2000      	movs	r0, #0
 8005848:	f7fd ffc0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800584c:	2000      	movs	r0, #0
 800584e:	f7fd ffbd 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005852:	2000      	movs	r0, #0
 8005854:	f7fd ffba 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005858:	2000      	movs	r0, #0
 800585a:	f7fd ffb7 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800585e:	2000      	movs	r0, #0
 8005860:	f7fd ffb4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005864:	2000      	movs	r0, #0
 8005866:	f7fd ffb1 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800586a:	2000      	movs	r0, #0
 800586c:	f7fd ffae 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005870:	2000      	movs	r0, #0
 8005872:	f7fd ffab 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005876:	2000      	movs	r0, #0
 8005878:	f7fd ffa8 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800587c:	2000      	movs	r0, #0
 800587e:	f7fd ffa5 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005882:	2000      	movs	r0, #0
 8005884:	f7fd ffa2 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005888:	2000      	movs	r0, #0
 800588a:	f7fd ff9f 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800588e:	2000      	movs	r0, #0
 8005890:	f7fd ff9c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8005894:	2000      	movs	r0, #0
 8005896:	f7fd ff99 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800589a:	2000      	movs	r0, #0
 800589c:	f7fd ff96 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 80058a0:	20f0      	movs	r0, #240	; 0xf0
 80058a2:	f7fd ff7f 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80058a6:	2000      	movs	r0, #0
 80058a8:	f7fd ff90 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 80058ac:	2050      	movs	r0, #80	; 0x50
 80058ae:	f7fd ff8d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80058b2:	2000      	movs	r0, #0
 80058b4:	f7fd ff8a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80058b8:	2000      	movs	r0, #0
 80058ba:	f7fd ff87 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80058be:	2000      	movs	r0, #0
 80058c0:	f7fd ff84 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 80058c4:	20f3      	movs	r0, #243	; 0xf3
 80058c6:	f7fd ff6d 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80058ca:	2000      	movs	r0, #0
 80058cc:	f7fd ff7e 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 80058d0:	20f9      	movs	r0, #249	; 0xf9
 80058d2:	f7fd ff67 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 80058d6:	2006      	movs	r0, #6
 80058d8:	f7fd ff78 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 80058dc:	2010      	movs	r0, #16
 80058de:	f7fd ff75 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 80058e2:	2029      	movs	r0, #41	; 0x29
 80058e4:	f7fd ff72 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80058e8:	2000      	movs	r0, #0
 80058ea:	f7fd ff6f 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 80058ee:	203a      	movs	r0, #58	; 0x3a
 80058f0:	f7fd ff58 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 80058f4:	2055      	movs	r0, #85	; 0x55
 80058f6:	f7fd ff69 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 80058fa:	2011      	movs	r0, #17
 80058fc:	f7fd ff52 	bl	80037a4 <LCD_WR_REG>
		HAL_Delay(100);
 8005900:	2064      	movs	r0, #100	; 0x64
 8005902:	f002 fc95 	bl	8008230 <HAL_Delay>
		LCD_WR_REG(0x29);
 8005906:	2029      	movs	r0, #41	; 0x29
 8005908:	f7fd ff4c 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 800590c:	2035      	movs	r0, #53	; 0x35
 800590e:	f7fd ff49 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8005912:	2000      	movs	r0, #0
 8005914:	f7fd ff5a 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 8005918:	2051      	movs	r0, #81	; 0x51
 800591a:	f7fd ff43 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 800591e:	20ff      	movs	r0, #255	; 0xff
 8005920:	f7fd ff54 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8005924:	2053      	movs	r0, #83	; 0x53
 8005926:	f7fd ff3d 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 800592a:	202c      	movs	r0, #44	; 0x2c
 800592c:	f7fd ff4e 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 8005930:	2055      	movs	r0, #85	; 0x55
 8005932:	f7fd ff37 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 8005936:	2082      	movs	r0, #130	; 0x82
 8005938:	f7fd ff48 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 800593c:	202c      	movs	r0, #44	; 0x2c
 800593e:	f7fd ff31 	bl	80037a4 <LCD_WR_REG>
 8005942:	f002 b8e8 	b.w	8007b16 <LCD_Init+0x374e>
	}else if(lcddev.id==0x5510)
 8005946:	4b04      	ldr	r3, [pc, #16]	; (8005958 <LCD_Init+0x1590>)
 8005948:	889b      	ldrh	r3, [r3, #4]
 800594a:	f245 5210 	movw	r2, #21776	; 0x5510
 800594e:	4293      	cmp	r3, r2
 8005950:	f040 8782 	bne.w	8006858 <LCD_Init+0x2490>
 8005954:	e002      	b.n	800595c <LCD_Init+0x1594>
 8005956:	bf00      	nop
 8005958:	20001034 	.word	0x20001034
	{
		LCD_WriteReg(0xF000,0x55);
 800595c:	2155      	movs	r1, #85	; 0x55
 800595e:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8005962:	f7fd ff59 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8005966:	21aa      	movs	r1, #170	; 0xaa
 8005968:	f24f 0001 	movw	r0, #61441	; 0xf001
 800596c:	f7fd ff54 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8005970:	2152      	movs	r1, #82	; 0x52
 8005972:	f24f 0002 	movw	r0, #61442	; 0xf002
 8005976:	f7fd ff4f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 800597a:	2108      	movs	r1, #8
 800597c:	f24f 0003 	movw	r0, #61443	; 0xf003
 8005980:	f7fd ff4a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 8005984:	2101      	movs	r1, #1
 8005986:	f24f 0004 	movw	r0, #61444	; 0xf004
 800598a:	f7fd ff45 	bl	8003818 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 800598e:	210d      	movs	r1, #13
 8005990:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8005994:	f7fd ff40 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 8005998:	210d      	movs	r1, #13
 800599a:	f24b 0001 	movw	r0, #45057	; 0xb001
 800599e:	f7fd ff3b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 80059a2:	210d      	movs	r1, #13
 80059a4:	f24b 0002 	movw	r0, #45058	; 0xb002
 80059a8:	f7fd ff36 	bl	8003818 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 80059ac:	2134      	movs	r1, #52	; 0x34
 80059ae:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80059b2:	f7fd ff31 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 80059b6:	2134      	movs	r1, #52	; 0x34
 80059b8:	f24b 6001 	movw	r0, #46593	; 0xb601
 80059bc:	f7fd ff2c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 80059c0:	2134      	movs	r1, #52	; 0x34
 80059c2:	f24b 6002 	movw	r0, #46594	; 0xb602
 80059c6:	f7fd ff27 	bl	8003818 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 80059ca:	210d      	movs	r1, #13
 80059cc:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80059d0:	f7fd ff22 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 80059d4:	210d      	movs	r1, #13
 80059d6:	f24b 1001 	movw	r0, #45313	; 0xb101
 80059da:	f7fd ff1d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 80059de:	210d      	movs	r1, #13
 80059e0:	f24b 1002 	movw	r0, #45314	; 0xb102
 80059e4:	f7fd ff18 	bl	8003818 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 80059e8:	2134      	movs	r1, #52	; 0x34
 80059ea:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80059ee:	f7fd ff13 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 80059f2:	2134      	movs	r1, #52	; 0x34
 80059f4:	f24b 7001 	movw	r0, #46849	; 0xb701
 80059f8:	f7fd ff0e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 80059fc:	2134      	movs	r1, #52	; 0x34
 80059fe:	f24b 7002 	movw	r0, #46850	; 0xb702
 8005a02:	f7fd ff09 	bl	8003818 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 8005a06:	2100      	movs	r1, #0
 8005a08:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8005a0c:	f7fd ff04 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8005a10:	2100      	movs	r1, #0
 8005a12:	f24b 2001 	movw	r0, #45569	; 0xb201
 8005a16:	f7fd feff 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	f24b 2002 	movw	r0, #45570	; 0xb202
 8005a20:	f7fd fefa 	bl	8003818 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8005a24:	2124      	movs	r1, #36	; 0x24
 8005a26:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8005a2a:	f7fd fef5 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 8005a2e:	2124      	movs	r1, #36	; 0x24
 8005a30:	f64b 0001 	movw	r0, #47105	; 0xb801
 8005a34:	f7fd fef0 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8005a38:	2124      	movs	r1, #36	; 0x24
 8005a3a:	f64b 0002 	movw	r0, #47106	; 0xb802
 8005a3e:	f7fd feeb 	bl	8003818 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 8005a42:	2101      	movs	r1, #1
 8005a44:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8005a48:	f7fd fee6 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 8005a4c:	210f      	movs	r1, #15
 8005a4e:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8005a52:	f7fd fee1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 8005a56:	210f      	movs	r1, #15
 8005a58:	f24b 3001 	movw	r0, #45825	; 0xb301
 8005a5c:	f7fd fedc 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 8005a60:	210f      	movs	r1, #15
 8005a62:	f24b 3002 	movw	r0, #45826	; 0xb302
 8005a66:	f7fd fed7 	bl	8003818 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 8005a6a:	2134      	movs	r1, #52	; 0x34
 8005a6c:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8005a70:	f7fd fed2 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 8005a74:	2134      	movs	r1, #52	; 0x34
 8005a76:	f64b 1001 	movw	r0, #47361	; 0xb901
 8005a7a:	f7fd fecd 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 8005a7e:	2134      	movs	r1, #52	; 0x34
 8005a80:	f64b 1002 	movw	r0, #47362	; 0xb902
 8005a84:	f7fd fec8 	bl	8003818 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 8005a88:	2108      	movs	r1, #8
 8005a8a:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8005a8e:	f7fd fec3 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 8005a92:	2108      	movs	r1, #8
 8005a94:	f24b 5001 	movw	r0, #46337	; 0xb501
 8005a98:	f7fd febe 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 8005a9c:	2108      	movs	r1, #8
 8005a9e:	f24b 5002 	movw	r0, #46338	; 0xb502
 8005aa2:	f7fd feb9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 8005aa6:	2103      	movs	r1, #3
 8005aa8:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8005aac:	f7fd feb4 	bl	8003818 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 8005ab0:	2124      	movs	r1, #36	; 0x24
 8005ab2:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8005ab6:	f7fd feaf 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 8005aba:	2124      	movs	r1, #36	; 0x24
 8005abc:	f64b 2001 	movw	r0, #47617	; 0xba01
 8005ac0:	f7fd feaa 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8005ac4:	2124      	movs	r1, #36	; 0x24
 8005ac6:	f64b 2002 	movw	r0, #47618	; 0xba02
 8005aca:	f7fd fea5 	bl	8003818 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 8005ace:	2100      	movs	r1, #0
 8005ad0:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8005ad4:	f7fd fea0 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 8005ad8:	2178      	movs	r1, #120	; 0x78
 8005ada:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8005ade:	f7fd fe9b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8005ae8:	f7fd fe96 	bl	8003818 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 8005aec:	2100      	movs	r1, #0
 8005aee:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8005af2:	f7fd fe91 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 8005af6:	2178      	movs	r1, #120	; 0x78
 8005af8:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8005afc:	f7fd fe8c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8005b00:	2100      	movs	r1, #0
 8005b02:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8005b06:	f7fd fe87 	bl	8003818 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8005b10:	f7fd fe82 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 8005b14:	2164      	movs	r1, #100	; 0x64
 8005b16:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8005b1a:	f7fd fe7d 	bl	8003818 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 8005b1e:	2100      	movs	r1, #0
 8005b20:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8005b24:	f7fd fe78 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8005b28:	2133      	movs	r1, #51	; 0x33
 8005b2a:	f24d 1001 	movw	r0, #53505	; 0xd101
 8005b2e:	f7fd fe73 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 8005b32:	2100      	movs	r1, #0
 8005b34:	f24d 1002 	movw	r0, #53506	; 0xd102
 8005b38:	f7fd fe6e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 8005b3c:	2134      	movs	r1, #52	; 0x34
 8005b3e:	f24d 1003 	movw	r0, #53507	; 0xd103
 8005b42:	f7fd fe69 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 8005b46:	2100      	movs	r1, #0
 8005b48:	f24d 1004 	movw	r0, #53508	; 0xd104
 8005b4c:	f7fd fe64 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 8005b50:	213a      	movs	r1, #58	; 0x3a
 8005b52:	f24d 1005 	movw	r0, #53509	; 0xd105
 8005b56:	f7fd fe5f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	f24d 1006 	movw	r0, #53510	; 0xd106
 8005b60:	f7fd fe5a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 8005b64:	214a      	movs	r1, #74	; 0x4a
 8005b66:	f24d 1007 	movw	r0, #53511	; 0xd107
 8005b6a:	f7fd fe55 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 8005b6e:	2100      	movs	r1, #0
 8005b70:	f24d 1008 	movw	r0, #53512	; 0xd108
 8005b74:	f7fd fe50 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 8005b78:	215c      	movs	r1, #92	; 0x5c
 8005b7a:	f24d 1009 	movw	r0, #53513	; 0xd109
 8005b7e:	f7fd fe4b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 8005b82:	2100      	movs	r1, #0
 8005b84:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8005b88:	f7fd fe46 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 8005b8c:	2181      	movs	r1, #129	; 0x81
 8005b8e:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8005b92:	f7fd fe41 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 8005b96:	2100      	movs	r1, #0
 8005b98:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8005b9c:	f7fd fe3c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 8005ba0:	21a6      	movs	r1, #166	; 0xa6
 8005ba2:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8005ba6:	f7fd fe37 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 8005baa:	2100      	movs	r1, #0
 8005bac:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8005bb0:	f7fd fe32 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8005bb4:	21e5      	movs	r1, #229	; 0xe5
 8005bb6:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8005bba:	f7fd fe2d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 8005bbe:	2101      	movs	r1, #1
 8005bc0:	f24d 1010 	movw	r0, #53520	; 0xd110
 8005bc4:	f7fd fe28 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 8005bc8:	2113      	movs	r1, #19
 8005bca:	f24d 1011 	movw	r0, #53521	; 0xd111
 8005bce:	f7fd fe23 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	f24d 1012 	movw	r0, #53522	; 0xd112
 8005bd8:	f7fd fe1e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 8005bdc:	2154      	movs	r1, #84	; 0x54
 8005bde:	f24d 1013 	movw	r0, #53523	; 0xd113
 8005be2:	f7fd fe19 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 8005be6:	2101      	movs	r1, #1
 8005be8:	f24d 1014 	movw	r0, #53524	; 0xd114
 8005bec:	f7fd fe14 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8005bf0:	2182      	movs	r1, #130	; 0x82
 8005bf2:	f24d 1015 	movw	r0, #53525	; 0xd115
 8005bf6:	f7fd fe0f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 8005bfa:	2101      	movs	r1, #1
 8005bfc:	f24d 1016 	movw	r0, #53526	; 0xd116
 8005c00:	f7fd fe0a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8005c04:	21ca      	movs	r1, #202	; 0xca
 8005c06:	f24d 1017 	movw	r0, #53527	; 0xd117
 8005c0a:	f7fd fe05 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 8005c0e:	2102      	movs	r1, #2
 8005c10:	f24d 1018 	movw	r0, #53528	; 0xd118
 8005c14:	f7fd fe00 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8005c18:	2100      	movs	r1, #0
 8005c1a:	f24d 1019 	movw	r0, #53529	; 0xd119
 8005c1e:	f7fd fdfb 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 8005c22:	2102      	movs	r1, #2
 8005c24:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8005c28:	f7fd fdf6 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 8005c2c:	2101      	movs	r1, #1
 8005c2e:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8005c32:	f7fd fdf1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 8005c36:	2102      	movs	r1, #2
 8005c38:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8005c3c:	f7fd fdec 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 8005c40:	2134      	movs	r1, #52	; 0x34
 8005c42:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8005c46:	f7fd fde7 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 8005c4a:	2102      	movs	r1, #2
 8005c4c:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8005c50:	f7fd fde2 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 8005c54:	2167      	movs	r1, #103	; 0x67
 8005c56:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8005c5a:	f7fd fddd 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 8005c5e:	2102      	movs	r1, #2
 8005c60:	f24d 1020 	movw	r0, #53536	; 0xd120
 8005c64:	f7fd fdd8 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 8005c68:	2184      	movs	r1, #132	; 0x84
 8005c6a:	f24d 1021 	movw	r0, #53537	; 0xd121
 8005c6e:	f7fd fdd3 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 8005c72:	2102      	movs	r1, #2
 8005c74:	f24d 1022 	movw	r0, #53538	; 0xd122
 8005c78:	f7fd fdce 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 8005c7c:	21a4      	movs	r1, #164	; 0xa4
 8005c7e:	f24d 1023 	movw	r0, #53539	; 0xd123
 8005c82:	f7fd fdc9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 8005c86:	2102      	movs	r1, #2
 8005c88:	f24d 1024 	movw	r0, #53540	; 0xd124
 8005c8c:	f7fd fdc4 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 8005c90:	21b7      	movs	r1, #183	; 0xb7
 8005c92:	f24d 1025 	movw	r0, #53541	; 0xd125
 8005c96:	f7fd fdbf 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 8005c9a:	2102      	movs	r1, #2
 8005c9c:	f24d 1026 	movw	r0, #53542	; 0xd126
 8005ca0:	f7fd fdba 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 8005ca4:	21cf      	movs	r1, #207	; 0xcf
 8005ca6:	f24d 1027 	movw	r0, #53543	; 0xd127
 8005caa:	f7fd fdb5 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 8005cae:	2102      	movs	r1, #2
 8005cb0:	f24d 1028 	movw	r0, #53544	; 0xd128
 8005cb4:	f7fd fdb0 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 8005cb8:	21de      	movs	r1, #222	; 0xde
 8005cba:	f24d 1029 	movw	r0, #53545	; 0xd129
 8005cbe:	f7fd fdab 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8005cc2:	2102      	movs	r1, #2
 8005cc4:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8005cc8:	f7fd fda6 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 8005ccc:	21f2      	movs	r1, #242	; 0xf2
 8005cce:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8005cd2:	f7fd fda1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 8005cd6:	2102      	movs	r1, #2
 8005cd8:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8005cdc:	f7fd fd9c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8005ce0:	21fe      	movs	r1, #254	; 0xfe
 8005ce2:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8005ce6:	f7fd fd97 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 8005cea:	2103      	movs	r1, #3
 8005cec:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8005cf0:	f7fd fd92 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8005cf4:	2110      	movs	r1, #16
 8005cf6:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8005cfa:	f7fd fd8d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 8005cfe:	2103      	movs	r1, #3
 8005d00:	f24d 1030 	movw	r0, #53552	; 0xd130
 8005d04:	f7fd fd88 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8005d08:	2133      	movs	r1, #51	; 0x33
 8005d0a:	f24d 1031 	movw	r0, #53553	; 0xd131
 8005d0e:	f7fd fd83 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 8005d12:	2103      	movs	r1, #3
 8005d14:	f24d 1032 	movw	r0, #53554	; 0xd132
 8005d18:	f7fd fd7e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 8005d1c:	216d      	movs	r1, #109	; 0x6d
 8005d1e:	f24d 1033 	movw	r0, #53555	; 0xd133
 8005d22:	f7fd fd79 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 8005d26:	2100      	movs	r1, #0
 8005d28:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8005d2c:	f7fd fd74 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8005d30:	2133      	movs	r1, #51	; 0x33
 8005d32:	f24d 2001 	movw	r0, #53761	; 0xd201
 8005d36:	f7fd fd6f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	f24d 2002 	movw	r0, #53762	; 0xd202
 8005d40:	f7fd fd6a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 8005d44:	2134      	movs	r1, #52	; 0x34
 8005d46:	f24d 2003 	movw	r0, #53763	; 0xd203
 8005d4a:	f7fd fd65 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 8005d4e:	2100      	movs	r1, #0
 8005d50:	f24d 2004 	movw	r0, #53764	; 0xd204
 8005d54:	f7fd fd60 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 8005d58:	213a      	movs	r1, #58	; 0x3a
 8005d5a:	f24d 2005 	movw	r0, #53765	; 0xd205
 8005d5e:	f7fd fd5b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 8005d62:	2100      	movs	r1, #0
 8005d64:	f24d 2006 	movw	r0, #53766	; 0xd206
 8005d68:	f7fd fd56 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 8005d6c:	214a      	movs	r1, #74	; 0x4a
 8005d6e:	f24d 2007 	movw	r0, #53767	; 0xd207
 8005d72:	f7fd fd51 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 8005d76:	2100      	movs	r1, #0
 8005d78:	f24d 2008 	movw	r0, #53768	; 0xd208
 8005d7c:	f7fd fd4c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 8005d80:	215c      	movs	r1, #92	; 0x5c
 8005d82:	f24d 2009 	movw	r0, #53769	; 0xd209
 8005d86:	f7fd fd47 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 8005d8a:	2100      	movs	r1, #0
 8005d8c:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8005d90:	f7fd fd42 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 8005d94:	2181      	movs	r1, #129	; 0x81
 8005d96:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8005d9a:	f7fd fd3d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 8005d9e:	2100      	movs	r1, #0
 8005da0:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8005da4:	f7fd fd38 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 8005da8:	21a6      	movs	r1, #166	; 0xa6
 8005daa:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8005dae:	f7fd fd33 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 8005db2:	2100      	movs	r1, #0
 8005db4:	f24d 200e 	movw	r0, #53774	; 0xd20e
 8005db8:	f7fd fd2e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 8005dbc:	21e5      	movs	r1, #229	; 0xe5
 8005dbe:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8005dc2:	f7fd fd29 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	f24d 2010 	movw	r0, #53776	; 0xd210
 8005dcc:	f7fd fd24 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8005dd0:	2113      	movs	r1, #19
 8005dd2:	f24d 2011 	movw	r0, #53777	; 0xd211
 8005dd6:	f7fd fd1f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 8005dda:	2101      	movs	r1, #1
 8005ddc:	f24d 2012 	movw	r0, #53778	; 0xd212
 8005de0:	f7fd fd1a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8005de4:	2154      	movs	r1, #84	; 0x54
 8005de6:	f24d 2013 	movw	r0, #53779	; 0xd213
 8005dea:	f7fd fd15 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 8005dee:	2101      	movs	r1, #1
 8005df0:	f24d 2014 	movw	r0, #53780	; 0xd214
 8005df4:	f7fd fd10 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 8005df8:	2182      	movs	r1, #130	; 0x82
 8005dfa:	f24d 2015 	movw	r0, #53781	; 0xd215
 8005dfe:	f7fd fd0b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8005e02:	2101      	movs	r1, #1
 8005e04:	f24d 2016 	movw	r0, #53782	; 0xd216
 8005e08:	f7fd fd06 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 8005e0c:	21ca      	movs	r1, #202	; 0xca
 8005e0e:	f24d 2017 	movw	r0, #53783	; 0xd217
 8005e12:	f7fd fd01 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 8005e16:	2102      	movs	r1, #2
 8005e18:	f24d 2018 	movw	r0, #53784	; 0xd218
 8005e1c:	f7fd fcfc 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8005e20:	2100      	movs	r1, #0
 8005e22:	f24d 2019 	movw	r0, #53785	; 0xd219
 8005e26:	f7fd fcf7 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 8005e2a:	2102      	movs	r1, #2
 8005e2c:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8005e30:	f7fd fcf2 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 8005e34:	2101      	movs	r1, #1
 8005e36:	f24d 201b 	movw	r0, #53787	; 0xd21b
 8005e3a:	f7fd fced 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 8005e3e:	2102      	movs	r1, #2
 8005e40:	f24d 201c 	movw	r0, #53788	; 0xd21c
 8005e44:	f7fd fce8 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 8005e48:	2134      	movs	r1, #52	; 0x34
 8005e4a:	f24d 201d 	movw	r0, #53789	; 0xd21d
 8005e4e:	f7fd fce3 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 8005e52:	2102      	movs	r1, #2
 8005e54:	f24d 201e 	movw	r0, #53790	; 0xd21e
 8005e58:	f7fd fcde 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 8005e5c:	2167      	movs	r1, #103	; 0x67
 8005e5e:	f24d 201f 	movw	r0, #53791	; 0xd21f
 8005e62:	f7fd fcd9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 8005e66:	2102      	movs	r1, #2
 8005e68:	f24d 2020 	movw	r0, #53792	; 0xd220
 8005e6c:	f7fd fcd4 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 8005e70:	2184      	movs	r1, #132	; 0x84
 8005e72:	f24d 2021 	movw	r0, #53793	; 0xd221
 8005e76:	f7fd fccf 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 8005e7a:	2102      	movs	r1, #2
 8005e7c:	f24d 2022 	movw	r0, #53794	; 0xd222
 8005e80:	f7fd fcca 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 8005e84:	21a4      	movs	r1, #164	; 0xa4
 8005e86:	f24d 2023 	movw	r0, #53795	; 0xd223
 8005e8a:	f7fd fcc5 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 8005e8e:	2102      	movs	r1, #2
 8005e90:	f24d 2024 	movw	r0, #53796	; 0xd224
 8005e94:	f7fd fcc0 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 8005e98:	21b7      	movs	r1, #183	; 0xb7
 8005e9a:	f24d 2025 	movw	r0, #53797	; 0xd225
 8005e9e:	f7fd fcbb 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 8005ea2:	2102      	movs	r1, #2
 8005ea4:	f24d 2026 	movw	r0, #53798	; 0xd226
 8005ea8:	f7fd fcb6 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 8005eac:	21cf      	movs	r1, #207	; 0xcf
 8005eae:	f24d 2027 	movw	r0, #53799	; 0xd227
 8005eb2:	f7fd fcb1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 8005eb6:	2102      	movs	r1, #2
 8005eb8:	f24d 2028 	movw	r0, #53800	; 0xd228
 8005ebc:	f7fd fcac 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8005ec0:	21de      	movs	r1, #222	; 0xde
 8005ec2:	f24d 2029 	movw	r0, #53801	; 0xd229
 8005ec6:	f7fd fca7 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 8005eca:	2102      	movs	r1, #2
 8005ecc:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8005ed0:	f7fd fca2 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8005ed4:	21f2      	movs	r1, #242	; 0xf2
 8005ed6:	f24d 202b 	movw	r0, #53803	; 0xd22b
 8005eda:	f7fd fc9d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 8005ede:	2102      	movs	r1, #2
 8005ee0:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8005ee4:	f7fd fc98 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 8005ee8:	21fe      	movs	r1, #254	; 0xfe
 8005eea:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8005eee:	f7fd fc93 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8005ef2:	2103      	movs	r1, #3
 8005ef4:	f24d 202e 	movw	r0, #53806	; 0xd22e
 8005ef8:	f7fd fc8e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 8005efc:	2110      	movs	r1, #16
 8005efe:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8005f02:	f7fd fc89 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 8005f06:	2103      	movs	r1, #3
 8005f08:	f24d 2030 	movw	r0, #53808	; 0xd230
 8005f0c:	f7fd fc84 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8005f10:	2133      	movs	r1, #51	; 0x33
 8005f12:	f24d 2031 	movw	r0, #53809	; 0xd231
 8005f16:	f7fd fc7f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 8005f1a:	2103      	movs	r1, #3
 8005f1c:	f24d 2032 	movw	r0, #53810	; 0xd232
 8005f20:	f7fd fc7a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 8005f24:	216d      	movs	r1, #109	; 0x6d
 8005f26:	f24d 2033 	movw	r0, #53811	; 0xd233
 8005f2a:	f7fd fc75 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 8005f2e:	2100      	movs	r1, #0
 8005f30:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8005f34:	f7fd fc70 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 8005f38:	2133      	movs	r1, #51	; 0x33
 8005f3a:	f24d 3001 	movw	r0, #54017	; 0xd301
 8005f3e:	f7fd fc6b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 8005f42:	2100      	movs	r1, #0
 8005f44:	f24d 3002 	movw	r0, #54018	; 0xd302
 8005f48:	f7fd fc66 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 8005f4c:	2134      	movs	r1, #52	; 0x34
 8005f4e:	f24d 3003 	movw	r0, #54019	; 0xd303
 8005f52:	f7fd fc61 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 8005f56:	2100      	movs	r1, #0
 8005f58:	f24d 3004 	movw	r0, #54020	; 0xd304
 8005f5c:	f7fd fc5c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 8005f60:	213a      	movs	r1, #58	; 0x3a
 8005f62:	f24d 3005 	movw	r0, #54021	; 0xd305
 8005f66:	f7fd fc57 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	f24d 3006 	movw	r0, #54022	; 0xd306
 8005f70:	f7fd fc52 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 8005f74:	214a      	movs	r1, #74	; 0x4a
 8005f76:	f24d 3007 	movw	r0, #54023	; 0xd307
 8005f7a:	f7fd fc4d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 8005f7e:	2100      	movs	r1, #0
 8005f80:	f24d 3008 	movw	r0, #54024	; 0xd308
 8005f84:	f7fd fc48 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 8005f88:	215c      	movs	r1, #92	; 0x5c
 8005f8a:	f24d 3009 	movw	r0, #54025	; 0xd309
 8005f8e:	f7fd fc43 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 8005f92:	2100      	movs	r1, #0
 8005f94:	f24d 300a 	movw	r0, #54026	; 0xd30a
 8005f98:	f7fd fc3e 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 8005f9c:	2181      	movs	r1, #129	; 0x81
 8005f9e:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8005fa2:	f7fd fc39 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8005fac:	f7fd fc34 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 8005fb0:	21a6      	movs	r1, #166	; 0xa6
 8005fb2:	f24d 300d 	movw	r0, #54029	; 0xd30d
 8005fb6:	f7fd fc2f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 8005fba:	2100      	movs	r1, #0
 8005fbc:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8005fc0:	f7fd fc2a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 8005fc4:	21e5      	movs	r1, #229	; 0xe5
 8005fc6:	f24d 300f 	movw	r0, #54031	; 0xd30f
 8005fca:	f7fd fc25 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 8005fce:	2101      	movs	r1, #1
 8005fd0:	f24d 3010 	movw	r0, #54032	; 0xd310
 8005fd4:	f7fd fc20 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 8005fd8:	2113      	movs	r1, #19
 8005fda:	f24d 3011 	movw	r0, #54033	; 0xd311
 8005fde:	f7fd fc1b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8005fe2:	2101      	movs	r1, #1
 8005fe4:	f24d 3012 	movw	r0, #54034	; 0xd312
 8005fe8:	f7fd fc16 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 8005fec:	2154      	movs	r1, #84	; 0x54
 8005fee:	f24d 3013 	movw	r0, #54035	; 0xd313
 8005ff2:	f7fd fc11 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	f24d 3014 	movw	r0, #54036	; 0xd314
 8005ffc:	f7fd fc0c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8006000:	2182      	movs	r1, #130	; 0x82
 8006002:	f24d 3015 	movw	r0, #54037	; 0xd315
 8006006:	f7fd fc07 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 800600a:	2101      	movs	r1, #1
 800600c:	f24d 3016 	movw	r0, #54038	; 0xd316
 8006010:	f7fd fc02 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 8006014:	21ca      	movs	r1, #202	; 0xca
 8006016:	f24d 3017 	movw	r0, #54039	; 0xd317
 800601a:	f7fd fbfd 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 800601e:	2102      	movs	r1, #2
 8006020:	f24d 3018 	movw	r0, #54040	; 0xd318
 8006024:	f7fd fbf8 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 8006028:	2100      	movs	r1, #0
 800602a:	f24d 3019 	movw	r0, #54041	; 0xd319
 800602e:	f7fd fbf3 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 8006032:	2102      	movs	r1, #2
 8006034:	f24d 301a 	movw	r0, #54042	; 0xd31a
 8006038:	f7fd fbee 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 800603c:	2101      	movs	r1, #1
 800603e:	f24d 301b 	movw	r0, #54043	; 0xd31b
 8006042:	f7fd fbe9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 8006046:	2102      	movs	r1, #2
 8006048:	f24d 301c 	movw	r0, #54044	; 0xd31c
 800604c:	f7fd fbe4 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 8006050:	2134      	movs	r1, #52	; 0x34
 8006052:	f24d 301d 	movw	r0, #54045	; 0xd31d
 8006056:	f7fd fbdf 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 800605a:	2102      	movs	r1, #2
 800605c:	f24d 301e 	movw	r0, #54046	; 0xd31e
 8006060:	f7fd fbda 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 8006064:	2167      	movs	r1, #103	; 0x67
 8006066:	f24d 301f 	movw	r0, #54047	; 0xd31f
 800606a:	f7fd fbd5 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 800606e:	2102      	movs	r1, #2
 8006070:	f24d 3020 	movw	r0, #54048	; 0xd320
 8006074:	f7fd fbd0 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 8006078:	2184      	movs	r1, #132	; 0x84
 800607a:	f24d 3021 	movw	r0, #54049	; 0xd321
 800607e:	f7fd fbcb 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 8006082:	2102      	movs	r1, #2
 8006084:	f24d 3022 	movw	r0, #54050	; 0xd322
 8006088:	f7fd fbc6 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 800608c:	21a4      	movs	r1, #164	; 0xa4
 800608e:	f24d 3023 	movw	r0, #54051	; 0xd323
 8006092:	f7fd fbc1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 8006096:	2102      	movs	r1, #2
 8006098:	f24d 3024 	movw	r0, #54052	; 0xd324
 800609c:	f7fd fbbc 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 80060a0:	21b7      	movs	r1, #183	; 0xb7
 80060a2:	f24d 3025 	movw	r0, #54053	; 0xd325
 80060a6:	f7fd fbb7 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 80060aa:	2102      	movs	r1, #2
 80060ac:	f24d 3026 	movw	r0, #54054	; 0xd326
 80060b0:	f7fd fbb2 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 80060b4:	21cf      	movs	r1, #207	; 0xcf
 80060b6:	f24d 3027 	movw	r0, #54055	; 0xd327
 80060ba:	f7fd fbad 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 80060be:	2102      	movs	r1, #2
 80060c0:	f24d 3028 	movw	r0, #54056	; 0xd328
 80060c4:	f7fd fba8 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 80060c8:	21de      	movs	r1, #222	; 0xde
 80060ca:	f24d 3029 	movw	r0, #54057	; 0xd329
 80060ce:	f7fd fba3 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 80060d2:	2102      	movs	r1, #2
 80060d4:	f24d 302a 	movw	r0, #54058	; 0xd32a
 80060d8:	f7fd fb9e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 80060dc:	21f2      	movs	r1, #242	; 0xf2
 80060de:	f24d 302b 	movw	r0, #54059	; 0xd32b
 80060e2:	f7fd fb99 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 80060e6:	2102      	movs	r1, #2
 80060e8:	f24d 302c 	movw	r0, #54060	; 0xd32c
 80060ec:	f7fd fb94 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 80060f0:	21fe      	movs	r1, #254	; 0xfe
 80060f2:	f24d 302d 	movw	r0, #54061	; 0xd32d
 80060f6:	f7fd fb8f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 80060fa:	2103      	movs	r1, #3
 80060fc:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8006100:	f7fd fb8a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8006104:	2110      	movs	r1, #16
 8006106:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800610a:	f7fd fb85 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 800610e:	2103      	movs	r1, #3
 8006110:	f24d 3030 	movw	r0, #54064	; 0xd330
 8006114:	f7fd fb80 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 8006118:	2133      	movs	r1, #51	; 0x33
 800611a:	f24d 3031 	movw	r0, #54065	; 0xd331
 800611e:	f7fd fb7b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 8006122:	2103      	movs	r1, #3
 8006124:	f24d 3032 	movw	r0, #54066	; 0xd332
 8006128:	f7fd fb76 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 800612c:	216d      	movs	r1, #109	; 0x6d
 800612e:	f24d 3033 	movw	r0, #54067	; 0xd333
 8006132:	f7fd fb71 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 8006136:	2100      	movs	r1, #0
 8006138:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 800613c:	f7fd fb6c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 8006140:	2133      	movs	r1, #51	; 0x33
 8006142:	f24d 4001 	movw	r0, #54273	; 0xd401
 8006146:	f7fd fb67 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 800614a:	2100      	movs	r1, #0
 800614c:	f24d 4002 	movw	r0, #54274	; 0xd402
 8006150:	f7fd fb62 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 8006154:	2134      	movs	r1, #52	; 0x34
 8006156:	f24d 4003 	movw	r0, #54275	; 0xd403
 800615a:	f7fd fb5d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 800615e:	2100      	movs	r1, #0
 8006160:	f24d 4004 	movw	r0, #54276	; 0xd404
 8006164:	f7fd fb58 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 8006168:	213a      	movs	r1, #58	; 0x3a
 800616a:	f24d 4005 	movw	r0, #54277	; 0xd405
 800616e:	f7fd fb53 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 8006172:	2100      	movs	r1, #0
 8006174:	f24d 4006 	movw	r0, #54278	; 0xd406
 8006178:	f7fd fb4e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 800617c:	214a      	movs	r1, #74	; 0x4a
 800617e:	f24d 4007 	movw	r0, #54279	; 0xd407
 8006182:	f7fd fb49 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 8006186:	2100      	movs	r1, #0
 8006188:	f24d 4008 	movw	r0, #54280	; 0xd408
 800618c:	f7fd fb44 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 8006190:	215c      	movs	r1, #92	; 0x5c
 8006192:	f24d 4009 	movw	r0, #54281	; 0xd409
 8006196:	f7fd fb3f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 800619a:	2100      	movs	r1, #0
 800619c:	f24d 400a 	movw	r0, #54282	; 0xd40a
 80061a0:	f7fd fb3a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 80061a4:	2181      	movs	r1, #129	; 0x81
 80061a6:	f24d 400b 	movw	r0, #54283	; 0xd40b
 80061aa:	f7fd fb35 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 80061ae:	2100      	movs	r1, #0
 80061b0:	f24d 400c 	movw	r0, #54284	; 0xd40c
 80061b4:	f7fd fb30 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 80061b8:	21a6      	movs	r1, #166	; 0xa6
 80061ba:	f24d 400d 	movw	r0, #54285	; 0xd40d
 80061be:	f7fd fb2b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 80061c2:	2100      	movs	r1, #0
 80061c4:	f24d 400e 	movw	r0, #54286	; 0xd40e
 80061c8:	f7fd fb26 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 80061cc:	21e5      	movs	r1, #229	; 0xe5
 80061ce:	f24d 400f 	movw	r0, #54287	; 0xd40f
 80061d2:	f7fd fb21 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 80061d6:	2101      	movs	r1, #1
 80061d8:	f24d 4010 	movw	r0, #54288	; 0xd410
 80061dc:	f7fd fb1c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 80061e0:	2113      	movs	r1, #19
 80061e2:	f24d 4011 	movw	r0, #54289	; 0xd411
 80061e6:	f7fd fb17 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 80061ea:	2101      	movs	r1, #1
 80061ec:	f24d 4012 	movw	r0, #54290	; 0xd412
 80061f0:	f7fd fb12 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 80061f4:	2154      	movs	r1, #84	; 0x54
 80061f6:	f24d 4013 	movw	r0, #54291	; 0xd413
 80061fa:	f7fd fb0d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 80061fe:	2101      	movs	r1, #1
 8006200:	f24d 4014 	movw	r0, #54292	; 0xd414
 8006204:	f7fd fb08 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 8006208:	2182      	movs	r1, #130	; 0x82
 800620a:	f24d 4015 	movw	r0, #54293	; 0xd415
 800620e:	f7fd fb03 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 8006212:	2101      	movs	r1, #1
 8006214:	f24d 4016 	movw	r0, #54294	; 0xd416
 8006218:	f7fd fafe 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 800621c:	21ca      	movs	r1, #202	; 0xca
 800621e:	f24d 4017 	movw	r0, #54295	; 0xd417
 8006222:	f7fd faf9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 8006226:	2102      	movs	r1, #2
 8006228:	f24d 4018 	movw	r0, #54296	; 0xd418
 800622c:	f7fd faf4 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8006230:	2100      	movs	r1, #0
 8006232:	f24d 4019 	movw	r0, #54297	; 0xd419
 8006236:	f7fd faef 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 800623a:	2102      	movs	r1, #2
 800623c:	f24d 401a 	movw	r0, #54298	; 0xd41a
 8006240:	f7fd faea 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 8006244:	2101      	movs	r1, #1
 8006246:	f24d 401b 	movw	r0, #54299	; 0xd41b
 800624a:	f7fd fae5 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 800624e:	2102      	movs	r1, #2
 8006250:	f24d 401c 	movw	r0, #54300	; 0xd41c
 8006254:	f7fd fae0 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 8006258:	2134      	movs	r1, #52	; 0x34
 800625a:	f24d 401d 	movw	r0, #54301	; 0xd41d
 800625e:	f7fd fadb 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 8006262:	2102      	movs	r1, #2
 8006264:	f24d 401e 	movw	r0, #54302	; 0xd41e
 8006268:	f7fd fad6 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 800626c:	2167      	movs	r1, #103	; 0x67
 800626e:	f24d 401f 	movw	r0, #54303	; 0xd41f
 8006272:	f7fd fad1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 8006276:	2102      	movs	r1, #2
 8006278:	f24d 4020 	movw	r0, #54304	; 0xd420
 800627c:	f7fd facc 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 8006280:	2184      	movs	r1, #132	; 0x84
 8006282:	f24d 4021 	movw	r0, #54305	; 0xd421
 8006286:	f7fd fac7 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 800628a:	2102      	movs	r1, #2
 800628c:	f24d 4022 	movw	r0, #54306	; 0xd422
 8006290:	f7fd fac2 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 8006294:	21a4      	movs	r1, #164	; 0xa4
 8006296:	f24d 4023 	movw	r0, #54307	; 0xd423
 800629a:	f7fd fabd 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 800629e:	2102      	movs	r1, #2
 80062a0:	f24d 4024 	movw	r0, #54308	; 0xd424
 80062a4:	f7fd fab8 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 80062a8:	21b7      	movs	r1, #183	; 0xb7
 80062aa:	f24d 4025 	movw	r0, #54309	; 0xd425
 80062ae:	f7fd fab3 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 80062b2:	2102      	movs	r1, #2
 80062b4:	f24d 4026 	movw	r0, #54310	; 0xd426
 80062b8:	f7fd faae 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 80062bc:	21cf      	movs	r1, #207	; 0xcf
 80062be:	f24d 4027 	movw	r0, #54311	; 0xd427
 80062c2:	f7fd faa9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 80062c6:	2102      	movs	r1, #2
 80062c8:	f24d 4028 	movw	r0, #54312	; 0xd428
 80062cc:	f7fd faa4 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 80062d0:	21de      	movs	r1, #222	; 0xde
 80062d2:	f24d 4029 	movw	r0, #54313	; 0xd429
 80062d6:	f7fd fa9f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 80062da:	2102      	movs	r1, #2
 80062dc:	f24d 402a 	movw	r0, #54314	; 0xd42a
 80062e0:	f7fd fa9a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 80062e4:	21f2      	movs	r1, #242	; 0xf2
 80062e6:	f24d 402b 	movw	r0, #54315	; 0xd42b
 80062ea:	f7fd fa95 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 80062ee:	2102      	movs	r1, #2
 80062f0:	f24d 402c 	movw	r0, #54316	; 0xd42c
 80062f4:	f7fd fa90 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 80062f8:	21fe      	movs	r1, #254	; 0xfe
 80062fa:	f24d 402d 	movw	r0, #54317	; 0xd42d
 80062fe:	f7fd fa8b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 8006302:	2103      	movs	r1, #3
 8006304:	f24d 402e 	movw	r0, #54318	; 0xd42e
 8006308:	f7fd fa86 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 800630c:	2110      	movs	r1, #16
 800630e:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8006312:	f7fd fa81 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 8006316:	2103      	movs	r1, #3
 8006318:	f24d 4030 	movw	r0, #54320	; 0xd430
 800631c:	f7fd fa7c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 8006320:	2133      	movs	r1, #51	; 0x33
 8006322:	f24d 4031 	movw	r0, #54321	; 0xd431
 8006326:	f7fd fa77 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 800632a:	2103      	movs	r1, #3
 800632c:	f24d 4032 	movw	r0, #54322	; 0xd432
 8006330:	f7fd fa72 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 8006334:	216d      	movs	r1, #109	; 0x6d
 8006336:	f24d 4033 	movw	r0, #54323	; 0xd433
 800633a:	f7fd fa6d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 800633e:	2100      	movs	r1, #0
 8006340:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 8006344:	f7fd fa68 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 8006348:	2133      	movs	r1, #51	; 0x33
 800634a:	f24d 5001 	movw	r0, #54529	; 0xd501
 800634e:	f7fd fa63 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 8006352:	2100      	movs	r1, #0
 8006354:	f24d 5002 	movw	r0, #54530	; 0xd502
 8006358:	f7fd fa5e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 800635c:	2134      	movs	r1, #52	; 0x34
 800635e:	f24d 5003 	movw	r0, #54531	; 0xd503
 8006362:	f7fd fa59 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 8006366:	2100      	movs	r1, #0
 8006368:	f24d 5004 	movw	r0, #54532	; 0xd504
 800636c:	f7fd fa54 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 8006370:	213a      	movs	r1, #58	; 0x3a
 8006372:	f24d 5005 	movw	r0, #54533	; 0xd505
 8006376:	f7fd fa4f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 800637a:	2100      	movs	r1, #0
 800637c:	f24d 5006 	movw	r0, #54534	; 0xd506
 8006380:	f7fd fa4a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 8006384:	214a      	movs	r1, #74	; 0x4a
 8006386:	f24d 5007 	movw	r0, #54535	; 0xd507
 800638a:	f7fd fa45 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 800638e:	2100      	movs	r1, #0
 8006390:	f24d 5008 	movw	r0, #54536	; 0xd508
 8006394:	f7fd fa40 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 8006398:	215c      	movs	r1, #92	; 0x5c
 800639a:	f24d 5009 	movw	r0, #54537	; 0xd509
 800639e:	f7fd fa3b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 80063a2:	2100      	movs	r1, #0
 80063a4:	f24d 500a 	movw	r0, #54538	; 0xd50a
 80063a8:	f7fd fa36 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 80063ac:	2181      	movs	r1, #129	; 0x81
 80063ae:	f24d 500b 	movw	r0, #54539	; 0xd50b
 80063b2:	f7fd fa31 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 80063b6:	2100      	movs	r1, #0
 80063b8:	f24d 500c 	movw	r0, #54540	; 0xd50c
 80063bc:	f7fd fa2c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 80063c0:	21a6      	movs	r1, #166	; 0xa6
 80063c2:	f24d 500d 	movw	r0, #54541	; 0xd50d
 80063c6:	f7fd fa27 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 80063ca:	2100      	movs	r1, #0
 80063cc:	f24d 500e 	movw	r0, #54542	; 0xd50e
 80063d0:	f7fd fa22 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 80063d4:	21e5      	movs	r1, #229	; 0xe5
 80063d6:	f24d 500f 	movw	r0, #54543	; 0xd50f
 80063da:	f7fd fa1d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 80063de:	2101      	movs	r1, #1
 80063e0:	f24d 5010 	movw	r0, #54544	; 0xd510
 80063e4:	f7fd fa18 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 80063e8:	2113      	movs	r1, #19
 80063ea:	f24d 5011 	movw	r0, #54545	; 0xd511
 80063ee:	f7fd fa13 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 80063f2:	2101      	movs	r1, #1
 80063f4:	f24d 5012 	movw	r0, #54546	; 0xd512
 80063f8:	f7fd fa0e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 80063fc:	2154      	movs	r1, #84	; 0x54
 80063fe:	f24d 5013 	movw	r0, #54547	; 0xd513
 8006402:	f7fd fa09 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 8006406:	2101      	movs	r1, #1
 8006408:	f24d 5014 	movw	r0, #54548	; 0xd514
 800640c:	f7fd fa04 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8006410:	2182      	movs	r1, #130	; 0x82
 8006412:	f24d 5015 	movw	r0, #54549	; 0xd515
 8006416:	f7fd f9ff 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 800641a:	2101      	movs	r1, #1
 800641c:	f24d 5016 	movw	r0, #54550	; 0xd516
 8006420:	f7fd f9fa 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 8006424:	21ca      	movs	r1, #202	; 0xca
 8006426:	f24d 5017 	movw	r0, #54551	; 0xd517
 800642a:	f7fd f9f5 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 800642e:	2102      	movs	r1, #2
 8006430:	f24d 5018 	movw	r0, #54552	; 0xd518
 8006434:	f7fd f9f0 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 8006438:	2100      	movs	r1, #0
 800643a:	f24d 5019 	movw	r0, #54553	; 0xd519
 800643e:	f7fd f9eb 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 8006442:	2102      	movs	r1, #2
 8006444:	f24d 501a 	movw	r0, #54554	; 0xd51a
 8006448:	f7fd f9e6 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 800644c:	2101      	movs	r1, #1
 800644e:	f24d 501b 	movw	r0, #54555	; 0xd51b
 8006452:	f7fd f9e1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 8006456:	2102      	movs	r1, #2
 8006458:	f24d 501c 	movw	r0, #54556	; 0xd51c
 800645c:	f7fd f9dc 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 8006460:	2134      	movs	r1, #52	; 0x34
 8006462:	f24d 501d 	movw	r0, #54557	; 0xd51d
 8006466:	f7fd f9d7 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 800646a:	2102      	movs	r1, #2
 800646c:	f24d 501e 	movw	r0, #54558	; 0xd51e
 8006470:	f7fd f9d2 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 8006474:	2167      	movs	r1, #103	; 0x67
 8006476:	f24d 501f 	movw	r0, #54559	; 0xd51f
 800647a:	f7fd f9cd 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 800647e:	2102      	movs	r1, #2
 8006480:	f24d 5020 	movw	r0, #54560	; 0xd520
 8006484:	f7fd f9c8 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 8006488:	2184      	movs	r1, #132	; 0x84
 800648a:	f24d 5021 	movw	r0, #54561	; 0xd521
 800648e:	f7fd f9c3 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 8006492:	2102      	movs	r1, #2
 8006494:	f24d 5022 	movw	r0, #54562	; 0xd522
 8006498:	f7fd f9be 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 800649c:	21a4      	movs	r1, #164	; 0xa4
 800649e:	f24d 5023 	movw	r0, #54563	; 0xd523
 80064a2:	f7fd f9b9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 80064a6:	2102      	movs	r1, #2
 80064a8:	f24d 5024 	movw	r0, #54564	; 0xd524
 80064ac:	f7fd f9b4 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 80064b0:	21b7      	movs	r1, #183	; 0xb7
 80064b2:	f24d 5025 	movw	r0, #54565	; 0xd525
 80064b6:	f7fd f9af 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 80064ba:	2102      	movs	r1, #2
 80064bc:	f24d 5026 	movw	r0, #54566	; 0xd526
 80064c0:	f7fd f9aa 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 80064c4:	21cf      	movs	r1, #207	; 0xcf
 80064c6:	f24d 5027 	movw	r0, #54567	; 0xd527
 80064ca:	f7fd f9a5 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 80064ce:	2102      	movs	r1, #2
 80064d0:	f24d 5028 	movw	r0, #54568	; 0xd528
 80064d4:	f7fd f9a0 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 80064d8:	21de      	movs	r1, #222	; 0xde
 80064da:	f24d 5029 	movw	r0, #54569	; 0xd529
 80064de:	f7fd f99b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 80064e2:	2102      	movs	r1, #2
 80064e4:	f24d 502a 	movw	r0, #54570	; 0xd52a
 80064e8:	f7fd f996 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 80064ec:	21f2      	movs	r1, #242	; 0xf2
 80064ee:	f24d 502b 	movw	r0, #54571	; 0xd52b
 80064f2:	f7fd f991 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 80064f6:	2102      	movs	r1, #2
 80064f8:	f24d 502c 	movw	r0, #54572	; 0xd52c
 80064fc:	f7fd f98c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8006500:	21fe      	movs	r1, #254	; 0xfe
 8006502:	f24d 502d 	movw	r0, #54573	; 0xd52d
 8006506:	f7fd f987 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 800650a:	2103      	movs	r1, #3
 800650c:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8006510:	f7fd f982 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8006514:	2110      	movs	r1, #16
 8006516:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800651a:	f7fd f97d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 800651e:	2103      	movs	r1, #3
 8006520:	f24d 5030 	movw	r0, #54576	; 0xd530
 8006524:	f7fd f978 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 8006528:	2133      	movs	r1, #51	; 0x33
 800652a:	f24d 5031 	movw	r0, #54577	; 0xd531
 800652e:	f7fd f973 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 8006532:	2103      	movs	r1, #3
 8006534:	f24d 5032 	movw	r0, #54578	; 0xd532
 8006538:	f7fd f96e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 800653c:	216d      	movs	r1, #109	; 0x6d
 800653e:	f24d 5033 	movw	r0, #54579	; 0xd533
 8006542:	f7fd f969 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 8006546:	2100      	movs	r1, #0
 8006548:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 800654c:	f7fd f964 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 8006550:	2133      	movs	r1, #51	; 0x33
 8006552:	f24d 6001 	movw	r0, #54785	; 0xd601
 8006556:	f7fd f95f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 800655a:	2100      	movs	r1, #0
 800655c:	f24d 6002 	movw	r0, #54786	; 0xd602
 8006560:	f7fd f95a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 8006564:	2134      	movs	r1, #52	; 0x34
 8006566:	f24d 6003 	movw	r0, #54787	; 0xd603
 800656a:	f7fd f955 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 800656e:	2100      	movs	r1, #0
 8006570:	f24d 6004 	movw	r0, #54788	; 0xd604
 8006574:	f7fd f950 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 8006578:	213a      	movs	r1, #58	; 0x3a
 800657a:	f24d 6005 	movw	r0, #54789	; 0xd605
 800657e:	f7fd f94b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 8006582:	2100      	movs	r1, #0
 8006584:	f24d 6006 	movw	r0, #54790	; 0xd606
 8006588:	f7fd f946 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 800658c:	214a      	movs	r1, #74	; 0x4a
 800658e:	f24d 6007 	movw	r0, #54791	; 0xd607
 8006592:	f7fd f941 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 8006596:	2100      	movs	r1, #0
 8006598:	f24d 6008 	movw	r0, #54792	; 0xd608
 800659c:	f7fd f93c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 80065a0:	215c      	movs	r1, #92	; 0x5c
 80065a2:	f24d 6009 	movw	r0, #54793	; 0xd609
 80065a6:	f7fd f937 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 80065aa:	2100      	movs	r1, #0
 80065ac:	f24d 600a 	movw	r0, #54794	; 0xd60a
 80065b0:	f7fd f932 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 80065b4:	2181      	movs	r1, #129	; 0x81
 80065b6:	f24d 600b 	movw	r0, #54795	; 0xd60b
 80065ba:	f7fd f92d 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 80065be:	2100      	movs	r1, #0
 80065c0:	f24d 600c 	movw	r0, #54796	; 0xd60c
 80065c4:	f7fd f928 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 80065c8:	21a6      	movs	r1, #166	; 0xa6
 80065ca:	f24d 600d 	movw	r0, #54797	; 0xd60d
 80065ce:	f7fd f923 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 80065d2:	2100      	movs	r1, #0
 80065d4:	f24d 600e 	movw	r0, #54798	; 0xd60e
 80065d8:	f7fd f91e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 80065dc:	21e5      	movs	r1, #229	; 0xe5
 80065de:	f24d 600f 	movw	r0, #54799	; 0xd60f
 80065e2:	f7fd f919 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 80065e6:	2101      	movs	r1, #1
 80065e8:	f24d 6010 	movw	r0, #54800	; 0xd610
 80065ec:	f7fd f914 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 80065f0:	2113      	movs	r1, #19
 80065f2:	f24d 6011 	movw	r0, #54801	; 0xd611
 80065f6:	f7fd f90f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 80065fa:	2101      	movs	r1, #1
 80065fc:	f24d 6012 	movw	r0, #54802	; 0xd612
 8006600:	f7fd f90a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8006604:	2154      	movs	r1, #84	; 0x54
 8006606:	f24d 6013 	movw	r0, #54803	; 0xd613
 800660a:	f7fd f905 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 800660e:	2101      	movs	r1, #1
 8006610:	f24d 6014 	movw	r0, #54804	; 0xd614
 8006614:	f7fd f900 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 8006618:	2182      	movs	r1, #130	; 0x82
 800661a:	f24d 6015 	movw	r0, #54805	; 0xd615
 800661e:	f7fd f8fb 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 8006622:	2101      	movs	r1, #1
 8006624:	f24d 6016 	movw	r0, #54806	; 0xd616
 8006628:	f7fd f8f6 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 800662c:	21ca      	movs	r1, #202	; 0xca
 800662e:	f24d 6017 	movw	r0, #54807	; 0xd617
 8006632:	f7fd f8f1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 8006636:	2102      	movs	r1, #2
 8006638:	f24d 6018 	movw	r0, #54808	; 0xd618
 800663c:	f7fd f8ec 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 8006640:	2100      	movs	r1, #0
 8006642:	f24d 6019 	movw	r0, #54809	; 0xd619
 8006646:	f7fd f8e7 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 800664a:	2102      	movs	r1, #2
 800664c:	f24d 601a 	movw	r0, #54810	; 0xd61a
 8006650:	f7fd f8e2 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 8006654:	2101      	movs	r1, #1
 8006656:	f24d 601b 	movw	r0, #54811	; 0xd61b
 800665a:	f7fd f8dd 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 800665e:	2102      	movs	r1, #2
 8006660:	f24d 601c 	movw	r0, #54812	; 0xd61c
 8006664:	f7fd f8d8 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 8006668:	2134      	movs	r1, #52	; 0x34
 800666a:	f24d 601d 	movw	r0, #54813	; 0xd61d
 800666e:	f7fd f8d3 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 8006672:	2102      	movs	r1, #2
 8006674:	f24d 601e 	movw	r0, #54814	; 0xd61e
 8006678:	f7fd f8ce 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 800667c:	2167      	movs	r1, #103	; 0x67
 800667e:	f24d 601f 	movw	r0, #54815	; 0xd61f
 8006682:	f7fd f8c9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 8006686:	2102      	movs	r1, #2
 8006688:	f24d 6020 	movw	r0, #54816	; 0xd620
 800668c:	f7fd f8c4 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 8006690:	2184      	movs	r1, #132	; 0x84
 8006692:	f24d 6021 	movw	r0, #54817	; 0xd621
 8006696:	f7fd f8bf 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 800669a:	2102      	movs	r1, #2
 800669c:	f24d 6022 	movw	r0, #54818	; 0xd622
 80066a0:	f7fd f8ba 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 80066a4:	21a4      	movs	r1, #164	; 0xa4
 80066a6:	f24d 6023 	movw	r0, #54819	; 0xd623
 80066aa:	f7fd f8b5 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 80066ae:	2102      	movs	r1, #2
 80066b0:	f24d 6024 	movw	r0, #54820	; 0xd624
 80066b4:	f7fd f8b0 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 80066b8:	21b7      	movs	r1, #183	; 0xb7
 80066ba:	f24d 6025 	movw	r0, #54821	; 0xd625
 80066be:	f7fd f8ab 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 80066c2:	2102      	movs	r1, #2
 80066c4:	f24d 6026 	movw	r0, #54822	; 0xd626
 80066c8:	f7fd f8a6 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 80066cc:	21cf      	movs	r1, #207	; 0xcf
 80066ce:	f24d 6027 	movw	r0, #54823	; 0xd627
 80066d2:	f7fd f8a1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 80066d6:	2102      	movs	r1, #2
 80066d8:	f24d 6028 	movw	r0, #54824	; 0xd628
 80066dc:	f7fd f89c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 80066e0:	21de      	movs	r1, #222	; 0xde
 80066e2:	f24d 6029 	movw	r0, #54825	; 0xd629
 80066e6:	f7fd f897 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 80066ea:	2102      	movs	r1, #2
 80066ec:	f24d 602a 	movw	r0, #54826	; 0xd62a
 80066f0:	f7fd f892 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 80066f4:	21f2      	movs	r1, #242	; 0xf2
 80066f6:	f24d 602b 	movw	r0, #54827	; 0xd62b
 80066fa:	f7fd f88d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 80066fe:	2102      	movs	r1, #2
 8006700:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8006704:	f7fd f888 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 8006708:	21fe      	movs	r1, #254	; 0xfe
 800670a:	f24d 602d 	movw	r0, #54829	; 0xd62d
 800670e:	f7fd f883 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 8006712:	2103      	movs	r1, #3
 8006714:	f24d 602e 	movw	r0, #54830	; 0xd62e
 8006718:	f7fd f87e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 800671c:	2110      	movs	r1, #16
 800671e:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8006722:	f7fd f879 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 8006726:	2103      	movs	r1, #3
 8006728:	f24d 6030 	movw	r0, #54832	; 0xd630
 800672c:	f7fd f874 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 8006730:	2133      	movs	r1, #51	; 0x33
 8006732:	f24d 6031 	movw	r0, #54833	; 0xd631
 8006736:	f7fd f86f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 800673a:	2103      	movs	r1, #3
 800673c:	f24d 6032 	movw	r0, #54834	; 0xd632
 8006740:	f7fd f86a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 8006744:	216d      	movs	r1, #109	; 0x6d
 8006746:	f24d 6033 	movw	r0, #54835	; 0xd633
 800674a:	f7fd f865 	bl	8003818 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 800674e:	2155      	movs	r1, #85	; 0x55
 8006750:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8006754:	f7fd f860 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8006758:	21aa      	movs	r1, #170	; 0xaa
 800675a:	f24f 0001 	movw	r0, #61441	; 0xf001
 800675e:	f7fd f85b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8006762:	2152      	movs	r1, #82	; 0x52
 8006764:	f24f 0002 	movw	r0, #61442	; 0xf002
 8006768:	f7fd f856 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 800676c:	2108      	movs	r1, #8
 800676e:	f24f 0003 	movw	r0, #61443	; 0xf003
 8006772:	f7fd f851 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 8006776:	2100      	movs	r1, #0
 8006778:	f24f 0004 	movw	r0, #61444	; 0xf004
 800677c:	f7fd f84c 	bl	8003818 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 8006780:	21cc      	movs	r1, #204	; 0xcc
 8006782:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8006786:	f7fd f847 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 800678a:	2100      	movs	r1, #0
 800678c:	f24b 1001 	movw	r0, #45313	; 0xb101
 8006790:	f7fd f842 	bl	8003818 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 8006794:	2105      	movs	r1, #5
 8006796:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 800679a:	f7fd f83d 	bl	8003818 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 800679e:	2170      	movs	r1, #112	; 0x70
 80067a0:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 80067a4:	f7fd f838 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 80067a8:	2170      	movs	r1, #112	; 0x70
 80067aa:	f24b 7001 	movw	r0, #46849	; 0xb701
 80067ae:	f7fd f833 	bl	8003818 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 80067b2:	2101      	movs	r1, #1
 80067b4:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 80067b8:	f7fd f82e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 80067bc:	2103      	movs	r1, #3
 80067be:	f64b 0001 	movw	r0, #47105	; 0xb801
 80067c2:	f7fd f829 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 80067c6:	2103      	movs	r1, #3
 80067c8:	f64b 0002 	movw	r0, #47106	; 0xb802
 80067cc:	f7fd f824 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 80067d0:	2103      	movs	r1, #3
 80067d2:	f64b 0003 	movw	r0, #47107	; 0xb803
 80067d6:	f7fd f81f 	bl	8003818 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 80067da:	2102      	movs	r1, #2
 80067dc:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 80067e0:	f7fd f81a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 80067e4:	2100      	movs	r1, #0
 80067e6:	f64b 4001 	movw	r0, #48129	; 0xbc01
 80067ea:	f7fd f815 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 80067ee:	2100      	movs	r1, #0
 80067f0:	f64b 4002 	movw	r0, #48130	; 0xbc02
 80067f4:	f7fd f810 	bl	8003818 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 80067f8:	21d0      	movs	r1, #208	; 0xd0
 80067fa:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 80067fe:	f7fd f80b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8006802:	2102      	movs	r1, #2
 8006804:	f64c 1001 	movw	r0, #51457	; 0xc901
 8006808:	f7fd f806 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 800680c:	2150      	movs	r1, #80	; 0x50
 800680e:	f64c 1002 	movw	r0, #51458	; 0xc902
 8006812:	f7fd f801 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 8006816:	2150      	movs	r1, #80	; 0x50
 8006818:	f64c 1003 	movw	r0, #51459	; 0xc903
 800681c:	f7fc fffc 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 8006820:	2150      	movs	r1, #80	; 0x50
 8006822:	f64c 1004 	movw	r0, #51460	; 0xc904
 8006826:	f7fc fff7 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 800682a:	2100      	movs	r1, #0
 800682c:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8006830:	f7fc fff2 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8006834:	2155      	movs	r1, #85	; 0x55
 8006836:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 800683a:	f7fc ffed 	bl	8003818 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 800683e:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8006842:	f7fc ffaf 	bl	80037a4 <LCD_WR_REG>
		delay_us(120);
 8006846:	2078      	movs	r0, #120	; 0x78
 8006848:	f7fa fec8 	bl	80015dc <delay_us>
		LCD_WR_REG(0x2900);
 800684c:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8006850:	f7fc ffa8 	bl	80037a4 <LCD_WR_REG>
 8006854:	f001 b95f 	b.w	8007b16 <LCD_Init+0x374e>
	}else if(lcddev.id==0x9325)//9325
 8006858:	4bec      	ldr	r3, [pc, #944]	; (8006c0c <LCD_Init+0x2844>)
 800685a:	889b      	ldrh	r3, [r3, #4]
 800685c:	f249 3225 	movw	r2, #37669	; 0x9325
 8006860:	4293      	cmp	r3, r2
 8006862:	f040 80d7 	bne.w	8006a14 <LCD_Init+0x264c>
	{
		LCD_WriteReg(0x00E5,0x78F0);
 8006866:	f647 01f0 	movw	r1, #30960	; 0x78f0
 800686a:	20e5      	movs	r0, #229	; 0xe5
 800686c:	f7fc ffd4 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0001,0x0100);
 8006870:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006874:	2001      	movs	r0, #1
 8006876:	f7fc ffcf 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 800687a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800687e:	2002      	movs	r0, #2
 8006880:	f7fc ffca 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0003,0x1030);
 8006884:	f241 0130 	movw	r1, #4144	; 0x1030
 8006888:	2003      	movs	r0, #3
 800688a:	f7fc ffc5 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0004,0x0000);
 800688e:	2100      	movs	r1, #0
 8006890:	2004      	movs	r0, #4
 8006892:	f7fc ffc1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8006896:	f240 2102 	movw	r1, #514	; 0x202
 800689a:	2008      	movs	r0, #8
 800689c:	f7fc ffbc 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0009,0x0000);
 80068a0:	2100      	movs	r1, #0
 80068a2:	2009      	movs	r0, #9
 80068a4:	f7fc ffb8 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x000A,0x0000);
 80068a8:	2100      	movs	r1, #0
 80068aa:	200a      	movs	r0, #10
 80068ac:	f7fc ffb4 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x000C,0x0000);
 80068b0:	2100      	movs	r1, #0
 80068b2:	200c      	movs	r0, #12
 80068b4:	f7fc ffb0 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x000D,0x0000);
 80068b8:	2100      	movs	r1, #0
 80068ba:	200d      	movs	r0, #13
 80068bc:	f7fc ffac 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x000F,0x0000);
 80068c0:	2100      	movs	r1, #0
 80068c2:	200f      	movs	r0, #15
 80068c4:	f7fc ffa8 	bl	8003818 <LCD_WriteReg>
		//power on sequence VGHVGL
		LCD_WriteReg(0x0010,0x0000);
 80068c8:	2100      	movs	r1, #0
 80068ca:	2010      	movs	r0, #16
 80068cc:	f7fc ffa4 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 80068d0:	2107      	movs	r1, #7
 80068d2:	2011      	movs	r0, #17
 80068d4:	f7fc ffa0 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 80068d8:	2100      	movs	r1, #0
 80068da:	2012      	movs	r0, #18
 80068dc:	f7fc ff9c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 80068e0:	2100      	movs	r1, #0
 80068e2:	2013      	movs	r0, #19
 80068e4:	f7fc ff98 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0000);
 80068e8:	2100      	movs	r1, #0
 80068ea:	2007      	movs	r0, #7
 80068ec:	f7fc ff94 	bl	8003818 <LCD_WriteReg>
		//vgh
		LCD_WriteReg(0x0010,0x1690);
 80068f0:	f241 6190 	movw	r1, #5776	; 0x1690
 80068f4:	2010      	movs	r0, #16
 80068f6:	f7fc ff8f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0227);
 80068fa:	f240 2127 	movw	r1, #551	; 0x227
 80068fe:	2011      	movs	r0, #17
 8006900:	f7fc ff8a 	bl	8003818 <LCD_WriteReg>
		//delayms(100);
		//vregiout
		LCD_WriteReg(0x0012,0x009D); //0x001b
 8006904:	219d      	movs	r1, #157	; 0x9d
 8006906:	2012      	movs	r0, #18
 8006908:	f7fc ff86 	bl	8003818 <LCD_WriteReg>
		//delayms(100);
		//vom amplitude
		LCD_WriteReg(0x0013,0x1900);
 800690c:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 8006910:	2013      	movs	r0, #19
 8006912:	f7fc ff81 	bl	8003818 <LCD_WriteReg>
		//delayms(100);
		//vom H
		LCD_WriteReg(0x0029,0x0025);
 8006916:	2125      	movs	r1, #37	; 0x25
 8006918:	2029      	movs	r0, #41	; 0x29
 800691a:	f7fc ff7d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x002B,0x000D);
 800691e:	210d      	movs	r1, #13
 8006920:	202b      	movs	r0, #43	; 0x2b
 8006922:	f7fc ff79 	bl	8003818 <LCD_WriteReg>
		//gamma
		LCD_WriteReg(0x0030,0x0007);
 8006926:	2107      	movs	r1, #7
 8006928:	2030      	movs	r0, #48	; 0x30
 800692a:	f7fc ff75 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0303);
 800692e:	f240 3103 	movw	r1, #771	; 0x303
 8006932:	2031      	movs	r0, #49	; 0x31
 8006934:	f7fc ff70 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0003);// 0006
 8006938:	2103      	movs	r1, #3
 800693a:	2032      	movs	r0, #50	; 0x32
 800693c:	f7fc ff6c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0206);
 8006940:	f240 2106 	movw	r1, #518	; 0x206
 8006944:	2035      	movs	r0, #53	; 0x35
 8006946:	f7fc ff67 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x0008);
 800694a:	2108      	movs	r1, #8
 800694c:	2036      	movs	r0, #54	; 0x36
 800694e:	f7fc ff63 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0406);
 8006952:	f240 4106 	movw	r1, #1030	; 0x406
 8006956:	2037      	movs	r0, #55	; 0x37
 8006958:	f7fc ff5e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0304);//0200
 800695c:	f44f 7141 	mov.w	r1, #772	; 0x304
 8006960:	2038      	movs	r0, #56	; 0x38
 8006962:	f7fc ff59 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0007);
 8006966:	2107      	movs	r1, #7
 8006968:	2039      	movs	r0, #57	; 0x39
 800696a:	f7fc ff55 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x003C,0x0602);// 0504
 800696e:	f240 6102 	movw	r1, #1538	; 0x602
 8006972:	203c      	movs	r0, #60	; 0x3c
 8006974:	f7fc ff50 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x003D,0x0008);
 8006978:	2108      	movs	r1, #8
 800697a:	203d      	movs	r0, #61	; 0x3d
 800697c:	f7fc ff4c 	bl	8003818 <LCD_WriteReg>
		//ram
		LCD_WriteReg(0x0050,0x0000);
 8006980:	2100      	movs	r1, #0
 8006982:	2050      	movs	r0, #80	; 0x50
 8006984:	f7fc ff48 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00EF);
 8006988:	21ef      	movs	r1, #239	; 0xef
 800698a:	2051      	movs	r0, #81	; 0x51
 800698c:	f7fc ff44 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 8006990:	2100      	movs	r1, #0
 8006992:	2052      	movs	r0, #82	; 0x52
 8006994:	f7fc ff40 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013F);
 8006998:	f240 113f 	movw	r1, #319	; 0x13f
 800699c:	2053      	movs	r0, #83	; 0x53
 800699e:	f7fc ff3b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0xA700);
 80069a2:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 80069a6:	2060      	movs	r0, #96	; 0x60
 80069a8:	f7fc ff36 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 80069ac:	2101      	movs	r1, #1
 80069ae:	2061      	movs	r0, #97	; 0x61
 80069b0:	f7fc ff32 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x006A,0x0000);
 80069b4:	2100      	movs	r1, #0
 80069b6:	206a      	movs	r0, #106	; 0x6a
 80069b8:	f7fc ff2e 	bl	8003818 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0080,0x0000);
 80069bc:	2100      	movs	r1, #0
 80069be:	2080      	movs	r0, #128	; 0x80
 80069c0:	f7fc ff2a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0081,0x0000);
 80069c4:	2100      	movs	r1, #0
 80069c6:	2081      	movs	r0, #129	; 0x81
 80069c8:	f7fc ff26 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0082,0x0000);
 80069cc:	2100      	movs	r1, #0
 80069ce:	2082      	movs	r0, #130	; 0x82
 80069d0:	f7fc ff22 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0083,0x0000);
 80069d4:	2100      	movs	r1, #0
 80069d6:	2083      	movs	r0, #131	; 0x83
 80069d8:	f7fc ff1e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0084,0x0000);
 80069dc:	2100      	movs	r1, #0
 80069de:	2084      	movs	r0, #132	; 0x84
 80069e0:	f7fc ff1a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0085,0x0000);
 80069e4:	2100      	movs	r1, #0
 80069e6:	2085      	movs	r0, #133	; 0x85
 80069e8:	f7fc ff16 	bl	8003818 <LCD_WriteReg>
		//
		LCD_WriteReg(0x0090,0x0010);
 80069ec:	2110      	movs	r1, #16
 80069ee:	2090      	movs	r0, #144	; 0x90
 80069f0:	f7fc ff12 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 80069f4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80069f8:	2092      	movs	r0, #146	; 0x92
 80069fa:	f7fc ff0d 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0x0007,0x0133);
 80069fe:	f240 1133 	movw	r1, #307	; 0x133
 8006a02:	2007      	movs	r0, #7
 8006a04:	f7fc ff08 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x0022);//
 8006a08:	2122      	movs	r1, #34	; 0x22
 8006a0a:	2000      	movs	r0, #0
 8006a0c:	f7fc ff04 	bl	8003818 <LCD_WriteReg>
 8006a10:	f001 b881 	b.w	8007b16 <LCD_Init+0x374e>
	}else if(lcddev.id==0x9328)//ILI9328   OK
 8006a14:	4b7d      	ldr	r3, [pc, #500]	; (8006c0c <LCD_Init+0x2844>)
 8006a16:	889b      	ldrh	r3, [r3, #4]
 8006a18:	f249 3228 	movw	r2, #37672	; 0x9328
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	f040 80f7 	bne.w	8006c10 <LCD_Init+0x2848>
	{
  		LCD_WriteReg(0x00EC,0x108F);// internal timeing
 8006a22:	f241 018f 	movw	r1, #4239	; 0x108f
 8006a26:	20ec      	movs	r0, #236	; 0xec
 8006a28:	f7fc fef6 	bl	8003818 <LCD_WriteReg>
 		LCD_WriteReg(0x00EF,0x1234);// ADD
 8006a2c:	f241 2134 	movw	r1, #4660	; 0x1234
 8006a30:	20ef      	movs	r0, #239	; 0xef
 8006a32:	f7fc fef1 	bl	8003818 <LCD_WriteReg>
		//LCD_WriteReg(0x00e7,0x0010);
        //LCD_WriteReg(0x0000,0x0001);//开启内部时钟
        LCD_WriteReg(0x0001,0x0100);
 8006a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a3a:	2001      	movs	r0, #1
 8006a3c:	f7fc feec 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);//电源开启
 8006a40:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006a44:	2002      	movs	r0, #2
 8006a46:	f7fc fee7 	bl	8003818 <LCD_WriteReg>
		// 1  1   0    D->U	L->R
		// 0  0   1	   R->L U->D
		// 1  0   1    U->D	R->L
		// 0  1   1    L->R U->D 正常就用这个.
		// 1  1   1	   U->D	L->R
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(0<<3) );//65K
 8006a4a:	f241 0130 	movw	r1, #4144	; 0x1030
 8006a4e:	2003      	movs	r0, #3
 8006a50:	f7fc fee2 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 8006a54:	2100      	movs	r1, #0
 8006a56:	2004      	movs	r0, #4
 8006a58:	f7fc fede 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x0202);
 8006a5c:	f240 2102 	movw	r1, #514	; 0x202
 8006a60:	2008      	movs	r0, #8
 8006a62:	f7fc fed9 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0009,0x0000);
 8006a66:	2100      	movs	r1, #0
 8006a68:	2009      	movs	r0, #9
 8006a6a:	f7fc fed5 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x000a,0x0000);//display setting
 8006a6e:	2100      	movs	r1, #0
 8006a70:	200a      	movs	r0, #10
 8006a72:	f7fc fed1 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x000c,0x0001);//display setting
 8006a76:	2101      	movs	r1, #1
 8006a78:	200c      	movs	r0, #12
 8006a7a:	f7fc fecd 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x000d,0x0000);//0f3c
 8006a7e:	2100      	movs	r1, #0
 8006a80:	200d      	movs	r0, #13
 8006a82:	f7fc fec9 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x000f,0x0000);
 8006a86:	2100      	movs	r1, #0
 8006a88:	200f      	movs	r0, #15
 8006a8a:	f7fc fec5 	bl	8003818 <LCD_WriteReg>
		//电源配置
        LCD_WriteReg(0x0010,0x0000);
 8006a8e:	2100      	movs	r1, #0
 8006a90:	2010      	movs	r0, #16
 8006a92:	f7fc fec1 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0007);
 8006a96:	2107      	movs	r1, #7
 8006a98:	2011      	movs	r0, #17
 8006a9a:	f7fc febd 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x0000);
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	2012      	movs	r0, #18
 8006aa2:	f7fc feb9 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0000);
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	2013      	movs	r0, #19
 8006aaa:	f7fc feb5 	bl	8003818 <LCD_WriteReg>
     	LCD_WriteReg(0x0007,0x0001);
 8006aae:	2101      	movs	r1, #1
 8006ab0:	2007      	movs	r0, #7
 8006ab2:	f7fc feb1 	bl	8003818 <LCD_WriteReg>
       	HAL_Delay(50);
 8006ab6:	2032      	movs	r0, #50	; 0x32
 8006ab8:	f001 fbba 	bl	8008230 <HAL_Delay>
        LCD_WriteReg(0x0010,0x1490);
 8006abc:	f241 4190 	movw	r1, #5264	; 0x1490
 8006ac0:	2010      	movs	r0, #16
 8006ac2:	f7fc fea9 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0227);
 8006ac6:	f240 2127 	movw	r1, #551	; 0x227
 8006aca:	2011      	movs	r0, #17
 8006acc:	f7fc fea4 	bl	8003818 <LCD_WriteReg>
        HAL_Delay(50);
 8006ad0:	2032      	movs	r0, #50	; 0x32
 8006ad2:	f001 fbad 	bl	8008230 <HAL_Delay>
        LCD_WriteReg(0x0012,0x008A);
 8006ad6:	218a      	movs	r1, #138	; 0x8a
 8006ad8:	2012      	movs	r0, #18
 8006ada:	f7fc fe9d 	bl	8003818 <LCD_WriteReg>
        HAL_Delay(50);
 8006ade:	2032      	movs	r0, #50	; 0x32
 8006ae0:	f001 fba6 	bl	8008230 <HAL_Delay>
        LCD_WriteReg(0x0013,0x1a00);
 8006ae4:	f44f 51d0 	mov.w	r1, #6656	; 0x1a00
 8006ae8:	2013      	movs	r0, #19
 8006aea:	f7fc fe95 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x0006);
 8006aee:	2106      	movs	r1, #6
 8006af0:	2029      	movs	r0, #41	; 0x29
 8006af2:	f7fc fe91 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x002b,0x000d);
 8006af6:	210d      	movs	r1, #13
 8006af8:	202b      	movs	r0, #43	; 0x2b
 8006afa:	f7fc fe8d 	bl	8003818 <LCD_WriteReg>
        HAL_Delay(50);
 8006afe:	2032      	movs	r0, #50	; 0x32
 8006b00:	f001 fb96 	bl	8008230 <HAL_Delay>
        LCD_WriteReg(0x0020,0x0000);
 8006b04:	2100      	movs	r1, #0
 8006b06:	2020      	movs	r0, #32
 8006b08:	f7fc fe86 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	2021      	movs	r0, #33	; 0x21
 8006b10:	f7fc fe82 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(50);
 8006b14:	2032      	movs	r0, #50	; 0x32
 8006b16:	f001 fb8b 	bl	8008230 <HAL_Delay>
		//伽马校正
        LCD_WriteReg(0x0030,0x0000);
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	2030      	movs	r0, #48	; 0x30
 8006b1e:	f7fc fe7b 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0604);
 8006b22:	f240 6104 	movw	r1, #1540	; 0x604
 8006b26:	2031      	movs	r0, #49	; 0x31
 8006b28:	f7fc fe76 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0305);
 8006b2c:	f240 3105 	movw	r1, #773	; 0x305
 8006b30:	2032      	movs	r0, #50	; 0x32
 8006b32:	f7fc fe71 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0000);
 8006b36:	2100      	movs	r1, #0
 8006b38:	2035      	movs	r0, #53	; 0x35
 8006b3a:	f7fc fe6d 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x0C09);
 8006b3e:	f640 4109 	movw	r1, #3081	; 0xc09
 8006b42:	2036      	movs	r0, #54	; 0x36
 8006b44:	f7fc fe68 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0204);
 8006b48:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006b4c:	2037      	movs	r0, #55	; 0x37
 8006b4e:	f7fc fe63 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0301);
 8006b52:	f240 3101 	movw	r1, #769	; 0x301
 8006b56:	2038      	movs	r0, #56	; 0x38
 8006b58:	f7fc fe5e 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0707);
 8006b5c:	f240 7107 	movw	r1, #1799	; 0x707
 8006b60:	2039      	movs	r0, #57	; 0x39
 8006b62:	f7fc fe59 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x003c,0x0000);
 8006b66:	2100      	movs	r1, #0
 8006b68:	203c      	movs	r0, #60	; 0x3c
 8006b6a:	f7fc fe55 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x003d,0x0a0a);
 8006b6e:	f640 210a 	movw	r1, #2570	; 0xa0a
 8006b72:	203d      	movs	r0, #61	; 0x3d
 8006b74:	f7fc fe50 	bl	8003818 <LCD_WriteReg>
        HAL_Delay(50);
 8006b78:	2032      	movs	r0, #50	; 0x32
 8006b7a:	f001 fb59 	bl	8008230 <HAL_Delay>
        LCD_WriteReg(0x0050,0x0000); //水平GRAM起始位置
 8006b7e:	2100      	movs	r1, #0
 8006b80:	2050      	movs	r0, #80	; 0x50
 8006b82:	f7fc fe49 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00ef); //水平GRAM终止位置
 8006b86:	21ef      	movs	r1, #239	; 0xef
 8006b88:	2051      	movs	r0, #81	; 0x51
 8006b8a:	f7fc fe45 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000); //垂直GRAM起始位置
 8006b8e:	2100      	movs	r1, #0
 8006b90:	2052      	movs	r0, #82	; 0x52
 8006b92:	f7fc fe41 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013f); //垂直GRAM终止位置
 8006b96:	f240 113f 	movw	r1, #319	; 0x13f
 8006b9a:	2053      	movs	r0, #83	; 0x53
 8006b9c:	f7fc fe3c 	bl	8003818 <LCD_WriteReg>

         LCD_WriteReg(0x0060,0xa700);
 8006ba0:	f44f 4127 	mov.w	r1, #42752	; 0xa700
 8006ba4:	2060      	movs	r0, #96	; 0x60
 8006ba6:	f7fc fe37 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 8006baa:	2101      	movs	r1, #1
 8006bac:	2061      	movs	r0, #97	; 0x61
 8006bae:	f7fc fe33 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x006a,0x0000);
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	206a      	movs	r0, #106	; 0x6a
 8006bb6:	f7fc fe2f 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8006bba:	2100      	movs	r1, #0
 8006bbc:	2080      	movs	r0, #128	; 0x80
 8006bbe:	f7fc fe2b 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0081,0x0000);
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	2081      	movs	r0, #129	; 0x81
 8006bc6:	f7fc fe27 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8006bca:	2100      	movs	r1, #0
 8006bcc:	2082      	movs	r0, #130	; 0x82
 8006bce:	f7fc fe23 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	2083      	movs	r0, #131	; 0x83
 8006bd6:	f7fc fe1f 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8006bda:	2100      	movs	r1, #0
 8006bdc:	2084      	movs	r0, #132	; 0x84
 8006bde:	f7fc fe1b 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 8006be2:	2100      	movs	r1, #0
 8006be4:	2085      	movs	r0, #133	; 0x85
 8006be6:	f7fc fe17 	bl	8003818 <LCD_WriteReg>

        LCD_WriteReg(0x0090,0x0010);
 8006bea:	2110      	movs	r1, #16
 8006bec:	2090      	movs	r0, #144	; 0x90
 8006bee:	f7fc fe13 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0600);
 8006bf2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006bf6:	2092      	movs	r0, #146	; 0x92
 8006bf8:	f7fc fe0e 	bl	8003818 <LCD_WriteReg>
        //开启显示设置
        LCD_WriteReg(0x0007,0x0133);
 8006bfc:	f240 1133 	movw	r1, #307	; 0x133
 8006c00:	2007      	movs	r0, #7
 8006c02:	f7fc fe09 	bl	8003818 <LCD_WriteReg>
 8006c06:	f000 bf86 	b.w	8007b16 <LCD_Init+0x374e>
 8006c0a:	bf00      	nop
 8006c0c:	20001034 	.word	0x20001034
	}else if(lcddev.id==0x9320)//测试OK.
 8006c10:	4bce      	ldr	r3, [pc, #824]	; (8006f4c <LCD_Init+0x2b84>)
 8006c12:	889b      	ldrh	r3, [r3, #4]
 8006c14:	f249 3220 	movw	r2, #37664	; 0x9320
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	f040 80ad 	bne.w	8006d78 <LCD_Init+0x29b0>
	{
		LCD_WriteReg(0x00,0x0000);
 8006c1e:	2100      	movs	r1, #0
 8006c20:	2000      	movs	r0, #0
 8006c22:	f7fc fdf9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x01,0x0100);	//Driver Output Contral.
 8006c26:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c2a:	2001      	movs	r0, #1
 8006c2c:	f7fc fdf4 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);	//LCD Driver Waveform Contral.
 8006c30:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006c34:	2002      	movs	r0, #2
 8006c36:	f7fc fdef 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode Set.
 8006c3a:	f241 0130 	movw	r1, #4144	; 0x1030
 8006c3e:	2003      	movs	r0, #3
 8006c40:	f7fc fdea 	bl	8003818 <LCD_WriteReg>
		//LCD_WriteReg(0x03,0x1018);	//Entry Mode Set.

		LCD_WriteReg(0x04,0x0000);	//Scalling Contral.
 8006c44:	2100      	movs	r1, #0
 8006c46:	2004      	movs	r0, #4
 8006c48:	f7fc fde6 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0202);	//Display Contral 2.(0x0207)
 8006c4c:	f240 2102 	movw	r1, #514	; 0x202
 8006c50:	2008      	movs	r0, #8
 8006c52:	f7fc fde1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000);	//Display Contral 3.(0x0000)
 8006c56:	2100      	movs	r1, #0
 8006c58:	2009      	movs	r0, #9
 8006c5a:	f7fc fddd 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0a,0x0000);	//Frame Cycle Contal.(0x0000)
 8006c5e:	2100      	movs	r1, #0
 8006c60:	200a      	movs	r0, #10
 8006c62:	f7fc fdd9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0c,(1<<0));	//Extern Display Interface Contral 1.(0x0000)
 8006c66:	2101      	movs	r1, #1
 8006c68:	200c      	movs	r0, #12
 8006c6a:	f7fc fdd5 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0d,0x0000);	//Frame Maker Position.
 8006c6e:	2100      	movs	r1, #0
 8006c70:	200d      	movs	r0, #13
 8006c72:	f7fc fdd1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0f,0x0000);	//Extern Display Interface Contral 2.
 8006c76:	2100      	movs	r1, #0
 8006c78:	200f      	movs	r0, #15
 8006c7a:	f7fc fdcd 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(50);
 8006c7e:	2032      	movs	r0, #50	; 0x32
 8006c80:	f001 fad6 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0x07,0x0101);	//Display Contral.
 8006c84:	f240 1101 	movw	r1, #257	; 0x101
 8006c88:	2007      	movs	r0, #7
 8006c8a:	f7fc fdc5 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(50);
 8006c8e:	2032      	movs	r0, #50	; 0x32
 8006c90:	f001 face 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0x10,(1<<12)|(0<<8)|(1<<7)|(1<<6)|(0<<4));	//Power Control 1.(0x16b0)
 8006c94:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
 8006c98:	2010      	movs	r0, #16
 8006c9a:	f7fc fdbd 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0007);								//Power Control 2.(0x0001)
 8006c9e:	2107      	movs	r1, #7
 8006ca0:	2011      	movs	r0, #17
 8006ca2:	f7fc fdb9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x12,(1<<8)|(1<<4)|(0<<0));				//Power Control 3.(0x0138)
 8006ca6:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006caa:	2012      	movs	r0, #18
 8006cac:	f7fc fdb4 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0b00);								//Power Control 4.
 8006cb0:	f44f 6130 	mov.w	r1, #2816	; 0xb00
 8006cb4:	2013      	movs	r0, #19
 8006cb6:	f7fc fdaf 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0000);								//Power Control 7.
 8006cba:	2100      	movs	r1, #0
 8006cbc:	2029      	movs	r0, #41	; 0x29
 8006cbe:	f7fc fdab 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0x2b,(1<<14)|(1<<4));
 8006cc2:	f244 0110 	movw	r1, #16400	; 0x4010
 8006cc6:	202b      	movs	r0, #43	; 0x2b
 8006cc8:	f7fc fda6 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x50,0);	//Set X Star
 8006ccc:	2100      	movs	r1, #0
 8006cce:	2050      	movs	r0, #80	; 0x50
 8006cd0:	f7fc fda2 	bl	8003818 <LCD_WriteReg>
		//水平GRAM终止位置Set X End.
		LCD_WriteReg(0x51,239);	//Set Y Star
 8006cd4:	21ef      	movs	r1, #239	; 0xef
 8006cd6:	2051      	movs	r0, #81	; 0x51
 8006cd8:	f7fc fd9e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x52,0);	//Set Y End.t.
 8006cdc:	2100      	movs	r1, #0
 8006cde:	2052      	movs	r0, #82	; 0x52
 8006ce0:	f7fc fd9a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x53,319);	//
 8006ce4:	f240 113f 	movw	r1, #319	; 0x13f
 8006ce8:	2053      	movs	r0, #83	; 0x53
 8006cea:	f7fc fd95 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0x60,0x2700);	//Driver Output Control.
 8006cee:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006cf2:	2060      	movs	r0, #96	; 0x60
 8006cf4:	f7fc fd90 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x61,0x0001);	//Driver Output Control.
 8006cf8:	2101      	movs	r1, #1
 8006cfa:	2061      	movs	r0, #97	; 0x61
 8006cfc:	f7fc fd8c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x6a,0x0000);	//Vertical Srcoll Control.
 8006d00:	2100      	movs	r1, #0
 8006d02:	206a      	movs	r0, #106	; 0x6a
 8006d04:	f7fc fd88 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0x80,0x0000);	//Display Position? Partial Display 1.
 8006d08:	2100      	movs	r1, #0
 8006d0a:	2080      	movs	r0, #128	; 0x80
 8006d0c:	f7fc fd84 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000);	//RAM Address Start? Partial Display 1.
 8006d10:	2100      	movs	r1, #0
 8006d12:	2081      	movs	r0, #129	; 0x81
 8006d14:	f7fc fd80 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000);	//RAM Address End-Partial Display 1.
 8006d18:	2100      	movs	r1, #0
 8006d1a:	2082      	movs	r0, #130	; 0x82
 8006d1c:	f7fc fd7c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000);	//Displsy Position? Partial Display 2.
 8006d20:	2100      	movs	r1, #0
 8006d22:	2083      	movs	r0, #131	; 0x83
 8006d24:	f7fc fd78 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000);	//RAM Address Start? Partial Display 2.
 8006d28:	2100      	movs	r1, #0
 8006d2a:	2084      	movs	r0, #132	; 0x84
 8006d2c:	f7fc fd74 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000);	//RAM Address End? Partial Display 2.
 8006d30:	2100      	movs	r1, #0
 8006d32:	2085      	movs	r0, #133	; 0x85
 8006d34:	f7fc fd70 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0x90,(0<<7)|(16<<0));	//Frame Cycle Contral.(0x0013)
 8006d38:	2110      	movs	r1, #16
 8006d3a:	2090      	movs	r0, #144	; 0x90
 8006d3c:	f7fc fd6c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);	//Panel Interface Contral 2.(0x0000)
 8006d40:	2100      	movs	r1, #0
 8006d42:	2092      	movs	r0, #146	; 0x92
 8006d44:	f7fc fd68 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0001);	//Panel Interface Contral 3.
 8006d48:	2101      	movs	r1, #1
 8006d4a:	2093      	movs	r0, #147	; 0x93
 8006d4c:	f7fc fd64 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);	//Frame Cycle Contral.(0x0110)
 8006d50:	f44f 7188 	mov.w	r1, #272	; 0x110
 8006d54:	2095      	movs	r0, #149	; 0x95
 8006d56:	f7fc fd5f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x97,(0<<8));	//
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	2097      	movs	r0, #151	; 0x97
 8006d5e:	f7fc fd5b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x98,0x0000);	//Frame Cycle Contral.
 8006d62:	2100      	movs	r1, #0
 8006d64:	2098      	movs	r0, #152	; 0x98
 8006d66:	f7fc fd57 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);	//(0x0173)
 8006d6a:	f240 1173 	movw	r1, #371	; 0x173
 8006d6e:	2007      	movs	r0, #7
 8006d70:	f7fc fd52 	bl	8003818 <LCD_WriteReg>
 8006d74:	f000 becf 	b.w	8007b16 <LCD_Init+0x374e>
	}else if(lcddev.id==0X9331)//OK |/|/|
 8006d78:	4b74      	ldr	r3, [pc, #464]	; (8006f4c <LCD_Init+0x2b84>)
 8006d7a:	889b      	ldrh	r3, [r3, #4]
 8006d7c:	f249 3231 	movw	r2, #37681	; 0x9331
 8006d80:	4293      	cmp	r3, r2
 8006d82:	f040 80e5 	bne.w	8006f50 <LCD_Init+0x2b88>
	{
		LCD_WriteReg(0x00E7, 0x1014);
 8006d86:	f241 0114 	movw	r1, #4116	; 0x1014
 8006d8a:	20e7      	movs	r0, #231	; 0xe7
 8006d8c:	f7fc fd44 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0001, 0x0100); // set SS and SM bit
 8006d90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d94:	2001      	movs	r0, #1
 8006d96:	f7fc fd3f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200); // set 1 line inversion
 8006d9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d9e:	2002      	movs	r0, #2
 8006da0:	f7fc fd3a 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0003,(1<<12)|(3<<4)|(1<<3));//65K
 8006da4:	f241 0138 	movw	r1, #4152	; 0x1038
 8006da8:	2003      	movs	r0, #3
 8006daa:	f7fc fd35 	bl	8003818 <LCD_WriteReg>
		//LCD_WriteReg(0x0003, 0x1030); // set GRAM write direction and BGR=1.
		LCD_WriteReg(0x0008, 0x0202); // set the back porch and front porch
 8006dae:	f240 2102 	movw	r1, #514	; 0x202
 8006db2:	2008      	movs	r0, #8
 8006db4:	f7fc fd30 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0009, 0x0000); // set non-display area refresh cycle ISC[3:0]
 8006db8:	2100      	movs	r1, #0
 8006dba:	2009      	movs	r0, #9
 8006dbc:	f7fc fd2c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x000A, 0x0000); // FMARK function
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	200a      	movs	r0, #10
 8006dc4:	f7fc fd28 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000); // RGB interface setting
 8006dc8:	2100      	movs	r1, #0
 8006dca:	200c      	movs	r0, #12
 8006dcc:	f7fc fd24 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x000D, 0x0000); // Frame marker Position
 8006dd0:	2100      	movs	r1, #0
 8006dd2:	200d      	movs	r0, #13
 8006dd4:	f7fc fd20 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000); // RGB interface polarity
 8006dd8:	2100      	movs	r1, #0
 8006dda:	200f      	movs	r0, #15
 8006ddc:	f7fc fd1c 	bl	8003818 <LCD_WriteReg>
		//*************Power On sequence ****************//
		LCD_WriteReg(0x0010, 0x0000); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8006de0:	2100      	movs	r1, #0
 8006de2:	2010      	movs	r0, #16
 8006de4:	f7fc fd18 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0007); // DC1[2:0], DC0[2:0], VC[2:0]
 8006de8:	2107      	movs	r1, #7
 8006dea:	2011      	movs	r0, #17
 8006dec:	f7fc fd14 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x0000); // VREG1OUT voltage
 8006df0:	2100      	movs	r1, #0
 8006df2:	2012      	movs	r0, #18
 8006df4:	f7fc fd10 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0000); // VDV[4:0] for VCOM amplitude
 8006df8:	2100      	movs	r1, #0
 8006dfa:	2013      	movs	r0, #19
 8006dfc:	f7fc fd0c 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(200); // Dis-charge capacitor power voltage
 8006e00:	20c8      	movs	r0, #200	; 0xc8
 8006e02:	f001 fa15 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0x0010, 0x1690); // SAP, BT[3:0], AP, DSTB, SLP, STB
 8006e06:	f241 6190 	movw	r1, #5776	; 0x1690
 8006e0a:	2010      	movs	r0, #16
 8006e0c:	f7fc fd04 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0011, 0x0227); // DC1[2:0], DC0[2:0], VC[2:0]
 8006e10:	f240 2127 	movw	r1, #551	; 0x227
 8006e14:	2011      	movs	r0, #17
 8006e16:	f7fc fcff 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006e1a:	2032      	movs	r0, #50	; 0x32
 8006e1c:	f001 fa08 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0x0012, 0x000C); // Internal reference voltage= Vci;
 8006e20:	210c      	movs	r1, #12
 8006e22:	2012      	movs	r0, #18
 8006e24:	f7fc fcf8 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006e28:	2032      	movs	r0, #50	; 0x32
 8006e2a:	f001 fa01 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0x0013, 0x0800); // Set VDV[4:0] for VCOM amplitude
 8006e2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e32:	2013      	movs	r0, #19
 8006e34:	f7fc fcf0 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0029, 0x0011); // Set VCM[5:0] for VCOMH
 8006e38:	2111      	movs	r1, #17
 8006e3a:	2029      	movs	r0, #41	; 0x29
 8006e3c:	f7fc fcec 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x002B, 0x000B); // Set Frame Rate
 8006e40:	210b      	movs	r1, #11
 8006e42:	202b      	movs	r0, #43	; 0x2b
 8006e44:	f7fc fce8 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(50); // Delay 50ms
 8006e48:	2032      	movs	r0, #50	; 0x32
 8006e4a:	f001 f9f1 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0x0020, 0x0000); // GRAM horizontal Address
 8006e4e:	2100      	movs	r1, #0
 8006e50:	2020      	movs	r0, #32
 8006e52:	f7fc fce1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x013f); // GRAM Vertical Address
 8006e56:	f240 113f 	movw	r1, #319	; 0x13f
 8006e5a:	2021      	movs	r0, #33	; 0x21
 8006e5c:	f7fc fcdc 	bl	8003818 <LCD_WriteReg>
		// ----------- Adjust the Gamma Curve ----------//
		LCD_WriteReg(0x0030, 0x0000);
 8006e60:	2100      	movs	r1, #0
 8006e62:	2030      	movs	r0, #48	; 0x30
 8006e64:	f7fc fcd8 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0031, 0x0106);
 8006e68:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006e6c:	2031      	movs	r0, #49	; 0x31
 8006e6e:	f7fc fcd3 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0032, 0x0000);
 8006e72:	2100      	movs	r1, #0
 8006e74:	2032      	movs	r0, #50	; 0x32
 8006e76:	f7fc fccf 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0035, 0x0204);
 8006e7a:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006e7e:	2035      	movs	r0, #53	; 0x35
 8006e80:	f7fc fcca 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0036, 0x160A);
 8006e84:	f241 610a 	movw	r1, #5642	; 0x160a
 8006e88:	2036      	movs	r0, #54	; 0x36
 8006e8a:	f7fc fcc5 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0037, 0x0707);
 8006e8e:	f240 7107 	movw	r1, #1799	; 0x707
 8006e92:	2037      	movs	r0, #55	; 0x37
 8006e94:	f7fc fcc0 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0038, 0x0106);
 8006e98:	f44f 7183 	mov.w	r1, #262	; 0x106
 8006e9c:	2038      	movs	r0, #56	; 0x38
 8006e9e:	f7fc fcbb 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0039, 0x0707);
 8006ea2:	f240 7107 	movw	r1, #1799	; 0x707
 8006ea6:	2039      	movs	r0, #57	; 0x39
 8006ea8:	f7fc fcb6 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x003C, 0x0402);
 8006eac:	f240 4102 	movw	r1, #1026	; 0x402
 8006eb0:	203c      	movs	r0, #60	; 0x3c
 8006eb2:	f7fc fcb1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x003D, 0x0C0F);
 8006eb6:	f640 410f 	movw	r1, #3087	; 0xc0f
 8006eba:	203d      	movs	r0, #61	; 0x3d
 8006ebc:	f7fc fcac 	bl	8003818 <LCD_WriteReg>
		//------------------ Set GRAM area ---------------//
		LCD_WriteReg(0x0050, 0x0000); // Horizontal GRAM Start Address
 8006ec0:	2100      	movs	r1, #0
 8006ec2:	2050      	movs	r0, #80	; 0x50
 8006ec4:	f7fc fca8 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0x00EF); // Horizontal GRAM End Address
 8006ec8:	21ef      	movs	r1, #239	; 0xef
 8006eca:	2051      	movs	r0, #81	; 0x51
 8006ecc:	f7fc fca4 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000); // Vertical GRAM Start Address
 8006ed0:	2100      	movs	r1, #0
 8006ed2:	2052      	movs	r0, #82	; 0x52
 8006ed4:	f7fc fca0 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F); // Vertical GRAM Start Address
 8006ed8:	f240 113f 	movw	r1, #319	; 0x13f
 8006edc:	2053      	movs	r0, #83	; 0x53
 8006ede:	f7fc fc9b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0060, 0x2700); // Gate Scan Line
 8006ee2:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8006ee6:	2060      	movs	r0, #96	; 0x60
 8006ee8:	f7fc fc96 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0001); // NDL,VLE, REV
 8006eec:	2101      	movs	r1, #1
 8006eee:	2061      	movs	r0, #97	; 0x61
 8006ef0:	f7fc fc92 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000); // set scrolling line
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	206a      	movs	r0, #106	; 0x6a
 8006ef8:	f7fc fc8e 	bl	8003818 <LCD_WriteReg>
		//-------------- Partial Display Control ---------//
		LCD_WriteReg(0x0080, 0x0000);
 8006efc:	2100      	movs	r1, #0
 8006efe:	2080      	movs	r0, #128	; 0x80
 8006f00:	f7fc fc8a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0081, 0x0000);
 8006f04:	2100      	movs	r1, #0
 8006f06:	2081      	movs	r0, #129	; 0x81
 8006f08:	f7fc fc86 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0082, 0x0000);
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	2082      	movs	r0, #130	; 0x82
 8006f10:	f7fc fc82 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0083, 0x0000);
 8006f14:	2100      	movs	r1, #0
 8006f16:	2083      	movs	r0, #131	; 0x83
 8006f18:	f7fc fc7e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0084, 0x0000);
 8006f1c:	2100      	movs	r1, #0
 8006f1e:	2084      	movs	r0, #132	; 0x84
 8006f20:	f7fc fc7a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0085, 0x0000);
 8006f24:	2100      	movs	r1, #0
 8006f26:	2085      	movs	r0, #133	; 0x85
 8006f28:	f7fc fc76 	bl	8003818 <LCD_WriteReg>
		//-------------- Panel Control -------------------//
		LCD_WriteReg(0x0090, 0x0010);
 8006f2c:	2110      	movs	r1, #16
 8006f2e:	2090      	movs	r0, #144	; 0x90
 8006f30:	f7fc fc72 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0092, 0x0600);
 8006f34:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f38:	2092      	movs	r0, #146	; 0x92
 8006f3a:	f7fc fc6d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0133); // 262K color and display ON
 8006f3e:	f240 1133 	movw	r1, #307	; 0x133
 8006f42:	2007      	movs	r0, #7
 8006f44:	f7fc fc68 	bl	8003818 <LCD_WriteReg>
 8006f48:	f000 bde5 	b.w	8007b16 <LCD_Init+0x374e>
 8006f4c:	20001034 	.word	0x20001034
	}else if(lcddev.id==0x5408)
 8006f50:	4be2      	ldr	r3, [pc, #904]	; (80072dc <LCD_Init+0x2f14>)
 8006f52:	889b      	ldrh	r3, [r3, #4]
 8006f54:	f245 4208 	movw	r2, #21512	; 0x5408
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	f040 80a3 	bne.w	80070a4 <LCD_Init+0x2cdc>
	{
		LCD_WriteReg(0x01,0x0100);
 8006f5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f62:	2001      	movs	r0, #1
 8006f64:	f7fc fc58 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x02,0x0700);//LCD Driving Waveform Contral
 8006f68:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8006f6c:	2002      	movs	r0, #2
 8006f6e:	f7fc fc53 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x03,0x1030);//Entry Mode设置
 8006f72:	f241 0130 	movw	r1, #4144	; 0x1030
 8006f76:	2003      	movs	r0, #3
 8006f78:	f7fc fc4e 	bl	8003818 <LCD_WriteReg>
		//指针从左至右自上而下的自动增模式
		//Normal Mode(Window Mode disable)
		//RGB格式
		//16位数据2次传输的8总线设置
		LCD_WriteReg(0x04,0x0000); //Scalling Control register
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	2004      	movs	r0, #4
 8006f80:	f7fc fc4a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x08,0x0207); //Display Control 2
 8006f84:	f240 2107 	movw	r1, #519	; 0x207
 8006f88:	2008      	movs	r0, #8
 8006f8a:	f7fc fc45 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x09,0x0000); //Display Control 3
 8006f8e:	2100      	movs	r1, #0
 8006f90:	2009      	movs	r0, #9
 8006f92:	f7fc fc41 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0A,0x0000); //Frame Cycle Control
 8006f96:	2100      	movs	r1, #0
 8006f98:	200a      	movs	r0, #10
 8006f9a:	f7fc fc3d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0C,0x0000); //External Display Interface Control 1
 8006f9e:	2100      	movs	r1, #0
 8006fa0:	200c      	movs	r0, #12
 8006fa2:	f7fc fc39 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0D,0x0000); //Frame Maker Position
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	200d      	movs	r0, #13
 8006faa:	f7fc fc35 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0F,0x0000); //External Display Interface Control 2
 8006fae:	2100      	movs	r1, #0
 8006fb0:	200f      	movs	r0, #15
 8006fb2:	f7fc fc31 	bl	8003818 <LCD_WriteReg>
 		HAL_Delay(20);
 8006fb6:	2014      	movs	r0, #20
 8006fb8:	f001 f93a 	bl	8008230 <HAL_Delay>
		//TFT 液晶彩色图像显示方法14
		LCD_WriteReg(0x10,0x16B0); //0x14B0 //Power Control 1
 8006fbc:	f241 61b0 	movw	r1, #5808	; 0x16b0
 8006fc0:	2010      	movs	r0, #16
 8006fc2:	f7fc fc29 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x11,0x0001); //0x0007 //Power Control 2
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	2011      	movs	r0, #17
 8006fca:	f7fc fc25 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x17,0x0001); //0x0000 //Power Control 3
 8006fce:	2101      	movs	r1, #1
 8006fd0:	2017      	movs	r0, #23
 8006fd2:	f7fc fc21 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x12,0x0138); //0x013B //Power Control 4
 8006fd6:	f44f 719c 	mov.w	r1, #312	; 0x138
 8006fda:	2012      	movs	r0, #18
 8006fdc:	f7fc fc1c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x13,0x0800); //0x0800 //Power Control 5
 8006fe0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006fe4:	2013      	movs	r0, #19
 8006fe6:	f7fc fc17 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x29,0x0009); //NVM read data 2
 8006fea:	2109      	movs	r1, #9
 8006fec:	2029      	movs	r0, #41	; 0x29
 8006fee:	f7fc fc13 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x2a,0x0009); //NVM read data 3
 8006ff2:	2109      	movs	r1, #9
 8006ff4:	202a      	movs	r0, #42	; 0x2a
 8006ff6:	f7fc fc0f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0xa4,0x0000);
 8006ffa:	2100      	movs	r1, #0
 8006ffc:	20a4      	movs	r0, #164	; 0xa4
 8006ffe:	f7fc fc0b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x50,0x0000); //设置操作窗口的X轴开始列
 8007002:	2100      	movs	r1, #0
 8007004:	2050      	movs	r0, #80	; 0x50
 8007006:	f7fc fc07 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x51,0x00EF); //设置操作窗口的X轴结束列
 800700a:	21ef      	movs	r1, #239	; 0xef
 800700c:	2051      	movs	r0, #81	; 0x51
 800700e:	f7fc fc03 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x52,0x0000); //设置操作窗口的Y轴开始行
 8007012:	2100      	movs	r1, #0
 8007014:	2052      	movs	r0, #82	; 0x52
 8007016:	f7fc fbff 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x53,0x013F); //设置操作窗口的Y轴结束行
 800701a:	f240 113f 	movw	r1, #319	; 0x13f
 800701e:	2053      	movs	r0, #83	; 0x53
 8007020:	f7fc fbfa 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x60,0x2700); //Driver Output Control
 8007024:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007028:	2060      	movs	r0, #96	; 0x60
 800702a:	f7fc fbf5 	bl	8003818 <LCD_WriteReg>
		//设置屏幕的点数以及扫描的起始行
		LCD_WriteReg(0x61,0x0001); //Driver Output Control
 800702e:	2101      	movs	r1, #1
 8007030:	2061      	movs	r0, #97	; 0x61
 8007032:	f7fc fbf1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x6A,0x0000); //Vertical Scroll Control
 8007036:	2100      	movs	r1, #0
 8007038:	206a      	movs	r0, #106	; 0x6a
 800703a:	f7fc fbed 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x80,0x0000); //Display Position – Partial Display 1
 800703e:	2100      	movs	r1, #0
 8007040:	2080      	movs	r0, #128	; 0x80
 8007042:	f7fc fbe9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x81,0x0000); //RAM Address Start – Partial Display 1
 8007046:	2100      	movs	r1, #0
 8007048:	2081      	movs	r0, #129	; 0x81
 800704a:	f7fc fbe5 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x82,0x0000); //RAM address End - Partial Display 1
 800704e:	2100      	movs	r1, #0
 8007050:	2082      	movs	r0, #130	; 0x82
 8007052:	f7fc fbe1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x83,0x0000); //Display Position – Partial Display 2
 8007056:	2100      	movs	r1, #0
 8007058:	2083      	movs	r0, #131	; 0x83
 800705a:	f7fc fbdd 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x84,0x0000); //RAM Address Start – Partial Display 2
 800705e:	2100      	movs	r1, #0
 8007060:	2084      	movs	r0, #132	; 0x84
 8007062:	f7fc fbd9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x85,0x0000); //RAM address End – Partail Display2
 8007066:	2100      	movs	r1, #0
 8007068:	2085      	movs	r0, #133	; 0x85
 800706a:	f7fc fbd5 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x90,0x0013); //Frame Cycle Control
 800706e:	2113      	movs	r1, #19
 8007070:	2090      	movs	r0, #144	; 0x90
 8007072:	f7fc fbd1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x92,0x0000);  //Panel Interface Control 2
 8007076:	2100      	movs	r1, #0
 8007078:	2092      	movs	r0, #146	; 0x92
 800707a:	f7fc fbcd 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x93,0x0003); //Panel Interface control 3
 800707e:	2103      	movs	r1, #3
 8007080:	2093      	movs	r0, #147	; 0x93
 8007082:	f7fc fbc9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x95,0x0110);  //Frame Cycle Control
 8007086:	f44f 7188 	mov.w	r1, #272	; 0x110
 800708a:	2095      	movs	r0, #149	; 0x95
 800708c:	f7fc fbc4 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x07,0x0173);
 8007090:	f240 1173 	movw	r1, #371	; 0x173
 8007094:	2007      	movs	r0, #7
 8007096:	f7fc fbbf 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(50);
 800709a:	2032      	movs	r0, #50	; 0x32
 800709c:	f001 f8c8 	bl	8008230 <HAL_Delay>
 80070a0:	f000 bd39 	b.w	8007b16 <LCD_Init+0x374e>
	}
	else if(lcddev.id==0x1505)//OK
 80070a4:	4b8d      	ldr	r3, [pc, #564]	; (80072dc <LCD_Init+0x2f14>)
 80070a6:	889b      	ldrh	r3, [r3, #4]
 80070a8:	f241 5205 	movw	r2, #5381	; 0x1505
 80070ac:	4293      	cmp	r3, r2
 80070ae:	f040 8117 	bne.w	80072e0 <LCD_Init+0x2f18>
	{
		// second release on 3/5  ,luminance is acceptable,water wave appear during camera preview
        LCD_WriteReg(0x0007,0x0000);
 80070b2:	2100      	movs	r1, #0
 80070b4:	2007      	movs	r0, #7
 80070b6:	f7fc fbaf 	bl	8003818 <LCD_WriteReg>
        HAL_Delay(50);
 80070ba:	2032      	movs	r0, #50	; 0x32
 80070bc:	f001 f8b8 	bl	8008230 <HAL_Delay>
        LCD_WriteReg(0x0012,0x011C);//0x011A   why need to set several times?
 80070c0:	f44f 718e 	mov.w	r1, #284	; 0x11c
 80070c4:	2012      	movs	r0, #18
 80070c6:	f7fc fba7 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x00A4,0x0001);//NVM
 80070ca:	2101      	movs	r1, #1
 80070cc:	20a4      	movs	r0, #164	; 0xa4
 80070ce:	f7fc fba3 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0008,0x000F);
 80070d2:	210f      	movs	r1, #15
 80070d4:	2008      	movs	r0, #8
 80070d6:	f7fc fb9f 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x000A,0x0008);
 80070da:	2108      	movs	r1, #8
 80070dc:	200a      	movs	r0, #10
 80070de:	f7fc fb9b 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x000D,0x0008);
 80070e2:	2108      	movs	r1, #8
 80070e4:	200d      	movs	r0, #13
 80070e6:	f7fc fb97 	bl	8003818 <LCD_WriteReg>
  		//伽马校正
        LCD_WriteReg(0x0030,0x0707);
 80070ea:	f240 7107 	movw	r1, #1799	; 0x707
 80070ee:	2030      	movs	r0, #48	; 0x30
 80070f0:	f7fc fb92 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0031,0x0007); //0x0707
 80070f4:	2107      	movs	r1, #7
 80070f6:	2031      	movs	r0, #49	; 0x31
 80070f8:	f7fc fb8e 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0032,0x0603);
 80070fc:	f240 6103 	movw	r1, #1539	; 0x603
 8007100:	2032      	movs	r0, #50	; 0x32
 8007102:	f7fc fb89 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0033,0x0700);
 8007106:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800710a:	2033      	movs	r0, #51	; 0x33
 800710c:	f7fc fb84 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0034,0x0202);
 8007110:	f240 2102 	movw	r1, #514	; 0x202
 8007114:	2034      	movs	r0, #52	; 0x34
 8007116:	f7fc fb7f 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0035,0x0002); //?0x0606
 800711a:	2102      	movs	r1, #2
 800711c:	2035      	movs	r0, #53	; 0x35
 800711e:	f7fc fb7b 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0036,0x1F0F);
 8007122:	f641 710f 	movw	r1, #7951	; 0x1f0f
 8007126:	2036      	movs	r0, #54	; 0x36
 8007128:	f7fc fb76 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0037,0x0707); //0x0f0f  0x0105
 800712c:	f240 7107 	movw	r1, #1799	; 0x707
 8007130:	2037      	movs	r0, #55	; 0x37
 8007132:	f7fc fb71 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0038,0x0000);
 8007136:	2100      	movs	r1, #0
 8007138:	2038      	movs	r0, #56	; 0x38
 800713a:	f7fc fb6d 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0039,0x0000);
 800713e:	2100      	movs	r1, #0
 8007140:	2039      	movs	r0, #57	; 0x39
 8007142:	f7fc fb69 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x003A,0x0707);
 8007146:	f240 7107 	movw	r1, #1799	; 0x707
 800714a:	203a      	movs	r0, #58	; 0x3a
 800714c:	f7fc fb64 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x003B,0x0000); //0x0303
 8007150:	2100      	movs	r1, #0
 8007152:	203b      	movs	r0, #59	; 0x3b
 8007154:	f7fc fb60 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x003C,0x0007); //?0x0707
 8007158:	2107      	movs	r1, #7
 800715a:	203c      	movs	r0, #60	; 0x3c
 800715c:	f7fc fb5c 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x003D,0x0000); //0x1313//0x1f08
 8007160:	2100      	movs	r1, #0
 8007162:	203d      	movs	r0, #61	; 0x3d
 8007164:	f7fc fb58 	bl	8003818 <LCD_WriteReg>
        HAL_Delay(50);
 8007168:	2032      	movs	r0, #50	; 0x32
 800716a:	f001 f861 	bl	8008230 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0001);
 800716e:	2101      	movs	r1, #1
 8007170:	2007      	movs	r0, #7
 8007172:	f7fc fb51 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0017,0x0001);//开启电源
 8007176:	2101      	movs	r1, #1
 8007178:	2017      	movs	r0, #23
 800717a:	f7fc fb4d 	bl	8003818 <LCD_WriteReg>
        HAL_Delay(50);
 800717e:	2032      	movs	r0, #50	; 0x32
 8007180:	f001 f856 	bl	8008230 <HAL_Delay>
  		//电源配置
        LCD_WriteReg(0x0010,0x17A0);
 8007184:	f44f 51bd 	mov.w	r1, #6048	; 0x17a0
 8007188:	2010      	movs	r0, #16
 800718a:	f7fc fb45 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0011,0x0217);//reference voltage VC[2:0]   Vciout = 1.00*Vcivl
 800718e:	f240 2117 	movw	r1, #535	; 0x217
 8007192:	2011      	movs	r0, #17
 8007194:	f7fc fb40 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x011E);//0x011c  //Vreg1out = Vcilvl*1.80   is it the same as Vgama1out ?
 8007198:	f44f 718f 	mov.w	r1, #286	; 0x11e
 800719c:	2012      	movs	r0, #18
 800719e:	f7fc fb3b 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0013,0x0F00);//VDV[4:0]-->VCOM Amplitude VcomL = VcomH - Vcom Ampl
 80071a2:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80071a6:	2013      	movs	r0, #19
 80071a8:	f7fc fb36 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x002A,0x0000);
 80071ac:	2100      	movs	r1, #0
 80071ae:	202a      	movs	r0, #42	; 0x2a
 80071b0:	f7fc fb32 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0029,0x000A);//0x0001F  Vcomh = VCM1[4:0]*Vreg1out    gate source voltage??
 80071b4:	210a      	movs	r1, #10
 80071b6:	2029      	movs	r0, #41	; 0x29
 80071b8:	f7fc fb2e 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0012,0x013E);// 0x013C  power supply on
 80071bc:	f44f 719f 	mov.w	r1, #318	; 0x13e
 80071c0:	2012      	movs	r0, #18
 80071c2:	f7fc fb29 	bl	8003818 <LCD_WriteReg>
        //Coordinates Control//
        LCD_WriteReg(0x0050,0x0000);//0x0e00
 80071c6:	2100      	movs	r1, #0
 80071c8:	2050      	movs	r0, #80	; 0x50
 80071ca:	f7fc fb25 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0051,0x00EF);
 80071ce:	21ef      	movs	r1, #239	; 0xef
 80071d0:	2051      	movs	r0, #81	; 0x51
 80071d2:	f7fc fb21 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0052,0x0000);
 80071d6:	2100      	movs	r1, #0
 80071d8:	2052      	movs	r0, #82	; 0x52
 80071da:	f7fc fb1d 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0053,0x013F);
 80071de:	f240 113f 	movw	r1, #319	; 0x13f
 80071e2:	2053      	movs	r0, #83	; 0x53
 80071e4:	f7fc fb18 	bl	8003818 <LCD_WriteReg>
    	//Pannel Image Control//
        LCD_WriteReg(0x0060,0x2700);
 80071e8:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80071ec:	2060      	movs	r0, #96	; 0x60
 80071ee:	f7fc fb13 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0061,0x0001);
 80071f2:	2101      	movs	r1, #1
 80071f4:	2061      	movs	r0, #97	; 0x61
 80071f6:	f7fc fb0f 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x006A,0x0000);
 80071fa:	2100      	movs	r1, #0
 80071fc:	206a      	movs	r0, #106	; 0x6a
 80071fe:	f7fc fb0b 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0080,0x0000);
 8007202:	2100      	movs	r1, #0
 8007204:	2080      	movs	r0, #128	; 0x80
 8007206:	f7fc fb07 	bl	8003818 <LCD_WriteReg>
    	//Partial Image Control//
        LCD_WriteReg(0x0081,0x0000);
 800720a:	2100      	movs	r1, #0
 800720c:	2081      	movs	r0, #129	; 0x81
 800720e:	f7fc fb03 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0082,0x0000);
 8007212:	2100      	movs	r1, #0
 8007214:	2082      	movs	r0, #130	; 0x82
 8007216:	f7fc faff 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0083,0x0000);
 800721a:	2100      	movs	r1, #0
 800721c:	2083      	movs	r0, #131	; 0x83
 800721e:	f7fc fafb 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0084,0x0000);
 8007222:	2100      	movs	r1, #0
 8007224:	2084      	movs	r0, #132	; 0x84
 8007226:	f7fc faf7 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0085,0x0000);
 800722a:	2100      	movs	r1, #0
 800722c:	2085      	movs	r0, #133	; 0x85
 800722e:	f7fc faf3 	bl	8003818 <LCD_WriteReg>
  		//Panel Interface Control//
        LCD_WriteReg(0x0090,0x0013);//0x0010 frenqucy
 8007232:	2113      	movs	r1, #19
 8007234:	2090      	movs	r0, #144	; 0x90
 8007236:	f7fc faef 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0092,0x0300);
 800723a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800723e:	2092      	movs	r0, #146	; 0x92
 8007240:	f7fc faea 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0093,0x0005);
 8007244:	2105      	movs	r1, #5
 8007246:	2093      	movs	r0, #147	; 0x93
 8007248:	f7fc fae6 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0095,0x0000);
 800724c:	2100      	movs	r1, #0
 800724e:	2095      	movs	r0, #149	; 0x95
 8007250:	f7fc fae2 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0097,0x0000);
 8007254:	2100      	movs	r1, #0
 8007256:	2097      	movs	r0, #151	; 0x97
 8007258:	f7fc fade 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0098,0x0000);
 800725c:	2100      	movs	r1, #0
 800725e:	2098      	movs	r0, #152	; 0x98
 8007260:	f7fc fada 	bl	8003818 <LCD_WriteReg>

        LCD_WriteReg(0x0001,0x0100);
 8007264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007268:	2001      	movs	r0, #1
 800726a:	f7fc fad5 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0002,0x0700);
 800726e:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8007272:	2002      	movs	r0, #2
 8007274:	f7fc fad0 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 8007278:	f241 0138 	movw	r1, #4152	; 0x1038
 800727c:	2003      	movs	r0, #3
 800727e:	f7fc facb 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0004,0x0000);
 8007282:	2100      	movs	r1, #0
 8007284:	2004      	movs	r0, #4
 8007286:	f7fc fac7 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x000C,0x0000);
 800728a:	2100      	movs	r1, #0
 800728c:	200c      	movs	r0, #12
 800728e:	f7fc fac3 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x000F,0x0000);
 8007292:	2100      	movs	r1, #0
 8007294:	200f      	movs	r0, #15
 8007296:	f7fc fabf 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0020,0x0000);
 800729a:	2100      	movs	r1, #0
 800729c:	2020      	movs	r0, #32
 800729e:	f7fc fabb 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0021,0x0000);
 80072a2:	2100      	movs	r1, #0
 80072a4:	2021      	movs	r0, #33	; 0x21
 80072a6:	f7fc fab7 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0007,0x0021);
 80072aa:	2121      	movs	r1, #33	; 0x21
 80072ac:	2007      	movs	r0, #7
 80072ae:	f7fc fab3 	bl	8003818 <LCD_WriteReg>
        HAL_Delay(20);
 80072b2:	2014      	movs	r0, #20
 80072b4:	f000 ffbc 	bl	8008230 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0061);
 80072b8:	2161      	movs	r1, #97	; 0x61
 80072ba:	2007      	movs	r0, #7
 80072bc:	f7fc faac 	bl	8003818 <LCD_WriteReg>
        HAL_Delay(20);
 80072c0:	2014      	movs	r0, #20
 80072c2:	f000 ffb5 	bl	8008230 <HAL_Delay>
        LCD_WriteReg(0x0007,0x0173);
 80072c6:	f240 1173 	movw	r1, #371	; 0x173
 80072ca:	2007      	movs	r0, #7
 80072cc:	f7fc faa4 	bl	8003818 <LCD_WriteReg>
        HAL_Delay(20);
 80072d0:	2014      	movs	r0, #20
 80072d2:	f000 ffad 	bl	8008230 <HAL_Delay>
 80072d6:	f000 bc1e 	b.w	8007b16 <LCD_Init+0x374e>
 80072da:	bf00      	nop
 80072dc:	20001034 	.word	0x20001034
	}else if(lcddev.id==0xB505)
 80072e0:	4bef      	ldr	r3, [pc, #956]	; (80076a0 <LCD_Init+0x32d8>)
 80072e2:	889b      	ldrh	r3, [r3, #4]
 80072e4:	f24b 5205 	movw	r2, #46341	; 0xb505
 80072e8:	4293      	cmp	r3, r2
 80072ea:	f040 8102 	bne.w	80074f2 <LCD_Init+0x312a>
	{
		LCD_WriteReg(0x0000,0x0000);
 80072ee:	2100      	movs	r1, #0
 80072f0:	2000      	movs	r0, #0
 80072f2:	f7fc fa91 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 80072f6:	2100      	movs	r1, #0
 80072f8:	2000      	movs	r0, #0
 80072fa:	f7fc fa8d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 80072fe:	2100      	movs	r1, #0
 8007300:	2000      	movs	r0, #0
 8007302:	f7fc fa89 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8007306:	2100      	movs	r1, #0
 8007308:	2000      	movs	r0, #0
 800730a:	f7fc fa85 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0x00a4,0x0001);
 800730e:	2101      	movs	r1, #1
 8007310:	20a4      	movs	r0, #164	; 0xa4
 8007312:	f7fc fa81 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(20);
 8007316:	2014      	movs	r0, #20
 8007318:	f000 ff8a 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 800731c:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007320:	2060      	movs	r0, #96	; 0x60
 8007322:	f7fc fa79 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8007326:	f240 2102 	movw	r1, #514	; 0x202
 800732a:	2008      	movs	r0, #8
 800732c:	f7fc fa74 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0214);
 8007330:	f44f 7105 	mov.w	r1, #532	; 0x214
 8007334:	2030      	movs	r0, #48	; 0x30
 8007336:	f7fc fa6f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x3715);
 800733a:	f243 7115 	movw	r1, #14101	; 0x3715
 800733e:	2031      	movs	r0, #49	; 0x31
 8007340:	f7fc fa6a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0604);
 8007344:	f240 6104 	movw	r1, #1540	; 0x604
 8007348:	2032      	movs	r0, #50	; 0x32
 800734a:	f7fc fa65 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0e16);
 800734e:	f640 6116 	movw	r1, #3606	; 0xe16
 8007352:	2033      	movs	r0, #51	; 0x33
 8007354:	f7fc fa60 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x2211);
 8007358:	f242 2111 	movw	r1, #8721	; 0x2211
 800735c:	2034      	movs	r0, #52	; 0x34
 800735e:	f7fc fa5b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x1500);
 8007362:	f44f 51a8 	mov.w	r1, #5376	; 0x1500
 8007366:	2035      	movs	r0, #53	; 0x35
 8007368:	f7fc fa56 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x8507);
 800736c:	f248 5107 	movw	r1, #34055	; 0x8507
 8007370:	2036      	movs	r0, #54	; 0x36
 8007372:	f7fc fa51 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x1407);
 8007376:	f241 4107 	movw	r1, #5127	; 0x1407
 800737a:	2037      	movs	r0, #55	; 0x37
 800737c:	f7fc fa4c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x1403);
 8007380:	f241 4103 	movw	r1, #5123	; 0x1403
 8007384:	2038      	movs	r0, #56	; 0x38
 8007386:	f7fc fa47 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0020);
 800738a:	2120      	movs	r1, #32
 800738c:	2039      	movs	r0, #57	; 0x39
 800738e:	f7fc fa43 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0x0090,0x001a);
 8007392:	211a      	movs	r1, #26
 8007394:	2090      	movs	r0, #144	; 0x90
 8007396:	f7fc fa3f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0010,0x0000);
 800739a:	2100      	movs	r1, #0
 800739c:	2010      	movs	r0, #16
 800739e:	f7fc fa3b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0007);
 80073a2:	2107      	movs	r1, #7
 80073a4:	2011      	movs	r0, #17
 80073a6:	f7fc fa37 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0012,0x0000);
 80073aa:	2100      	movs	r1, #0
 80073ac:	2012      	movs	r0, #18
 80073ae:	f7fc fa33 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0013,0x0000);
 80073b2:	2100      	movs	r1, #0
 80073b4:	2013      	movs	r0, #19
 80073b6:	f7fc fa2f 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(20);
 80073ba:	2014      	movs	r0, #20
 80073bc:	f000 ff38 	bl	8008230 <HAL_Delay>

		LCD_WriteReg(0x0010,0x0730);
 80073c0:	f44f 61e6 	mov.w	r1, #1840	; 0x730
 80073c4:	2010      	movs	r0, #16
 80073c6:	f7fc fa27 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0137);
 80073ca:	f240 1137 	movw	r1, #311	; 0x137
 80073ce:	2011      	movs	r0, #17
 80073d0:	f7fc fa22 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(20);
 80073d4:	2014      	movs	r0, #20
 80073d6:	f000 ff2b 	bl	8008230 <HAL_Delay>

		LCD_WriteReg(0x0012,0x01b8);
 80073da:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
 80073de:	2012      	movs	r0, #18
 80073e0:	f7fc fa1a 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(20);
 80073e4:	2014      	movs	r0, #20
 80073e6:	f000 ff23 	bl	8008230 <HAL_Delay>

		LCD_WriteReg(0x0013,0x0f00);
 80073ea:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80073ee:	2013      	movs	r0, #19
 80073f0:	f7fc fa12 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x002a,0x0080);
 80073f4:	2180      	movs	r1, #128	; 0x80
 80073f6:	202a      	movs	r0, #42	; 0x2a
 80073f8:	f7fc fa0e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0029,0x0048);
 80073fc:	2148      	movs	r1, #72	; 0x48
 80073fe:	2029      	movs	r0, #41	; 0x29
 8007400:	f7fc fa0a 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(20);
 8007404:	2014      	movs	r0, #20
 8007406:	f000 ff13 	bl	8008230 <HAL_Delay>

		LCD_WriteReg(0x0001,0x0100);
 800740a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800740e:	2001      	movs	r0, #1
 8007410:	f7fc fa02 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0002,0x0700);
 8007414:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8007418:	2002      	movs	r0, #2
 800741a:	f7fc f9fd 	bl	8003818 <LCD_WriteReg>
        LCD_WriteReg(0x0003,0x1038);//扫描方向 上->下  左->右
 800741e:	f241 0138 	movw	r1, #4152	; 0x1038
 8007422:	2003      	movs	r0, #3
 8007424:	f7fc f9f8 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0202);
 8007428:	f240 2102 	movw	r1, #514	; 0x202
 800742c:	2008      	movs	r0, #8
 800742e:	f7fc f9f3 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x000a,0x0000);
 8007432:	2100      	movs	r1, #0
 8007434:	200a      	movs	r0, #10
 8007436:	f7fc f9ef 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x000c,0x0000);
 800743a:	2100      	movs	r1, #0
 800743c:	200c      	movs	r0, #12
 800743e:	f7fc f9eb 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x000d,0x0000);
 8007442:	2100      	movs	r1, #0
 8007444:	200d      	movs	r0, #13
 8007446:	f7fc f9e7 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x000e,0x0030);
 800744a:	2130      	movs	r1, #48	; 0x30
 800744c:	200e      	movs	r0, #14
 800744e:	f7fc f9e3 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0050,0x0000);
 8007452:	2100      	movs	r1, #0
 8007454:	2050      	movs	r0, #80	; 0x50
 8007456:	f7fc f9df 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0051,0x00ef);
 800745a:	21ef      	movs	r1, #239	; 0xef
 800745c:	2051      	movs	r0, #81	; 0x51
 800745e:	f7fc f9db 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0052,0x0000);
 8007462:	2100      	movs	r1, #0
 8007464:	2052      	movs	r0, #82	; 0x52
 8007466:	f7fc f9d7 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0053,0x013f);
 800746a:	f240 113f 	movw	r1, #319	; 0x13f
 800746e:	2053      	movs	r0, #83	; 0x53
 8007470:	f7fc f9d2 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0060,0x2700);
 8007474:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007478:	2060      	movs	r0, #96	; 0x60
 800747a:	f7fc f9cd 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0061,0x0001);
 800747e:	2101      	movs	r1, #1
 8007480:	2061      	movs	r0, #97	; 0x61
 8007482:	f7fc f9c9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x006a,0x0000);
 8007486:	2100      	movs	r1, #0
 8007488:	206a      	movs	r0, #106	; 0x6a
 800748a:	f7fc f9c5 	bl	8003818 <LCD_WriteReg>
		//LCD_WriteReg(0x0080,0x0000);
		//LCD_WriteReg(0x0081,0x0000);
		LCD_WriteReg(0x0090,0X0011);
 800748e:	2111      	movs	r1, #17
 8007490:	2090      	movs	r0, #144	; 0x90
 8007492:	f7fc f9c1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0600);
 8007496:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800749a:	2092      	movs	r0, #146	; 0x92
 800749c:	f7fc f9bc 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0093,0x0402);
 80074a0:	f240 4102 	movw	r1, #1026	; 0x402
 80074a4:	2093      	movs	r0, #147	; 0x93
 80074a6:	f7fc f9b7 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0094,0x0002);
 80074aa:	2102      	movs	r1, #2
 80074ac:	2094      	movs	r0, #148	; 0x94
 80074ae:	f7fc f9b3 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(20);
 80074b2:	2014      	movs	r0, #20
 80074b4:	f000 febc 	bl	8008230 <HAL_Delay>

		LCD_WriteReg(0x0007,0x0001);
 80074b8:	2101      	movs	r1, #1
 80074ba:	2007      	movs	r0, #7
 80074bc:	f7fc f9ac 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(20);
 80074c0:	2014      	movs	r0, #20
 80074c2:	f000 feb5 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0x0007,0x0061);
 80074c6:	2161      	movs	r1, #97	; 0x61
 80074c8:	2007      	movs	r0, #7
 80074ca:	f7fc f9a5 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0007,0x0173);
 80074ce:	f240 1173 	movw	r1, #371	; 0x173
 80074d2:	2007      	movs	r0, #7
 80074d4:	f7fc f9a0 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0x0020,0x0000);
 80074d8:	2100      	movs	r1, #0
 80074da:	2020      	movs	r0, #32
 80074dc:	f7fc f99c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0021,0x0000);
 80074e0:	2100      	movs	r1, #0
 80074e2:	2021      	movs	r0, #33	; 0x21
 80074e4:	f7fc f998 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x00,0x22);
 80074e8:	2122      	movs	r1, #34	; 0x22
 80074ea:	2000      	movs	r0, #0
 80074ec:	f7fc f994 	bl	8003818 <LCD_WriteReg>
 80074f0:	e311      	b.n	8007b16 <LCD_Init+0x374e>
	}else if(lcddev.id==0xC505)
 80074f2:	4b6b      	ldr	r3, [pc, #428]	; (80076a0 <LCD_Init+0x32d8>)
 80074f4:	889b      	ldrh	r3, [r3, #4]
 80074f6:	f24c 5205 	movw	r2, #50437	; 0xc505
 80074fa:	4293      	cmp	r3, r2
 80074fc:	f040 80d2 	bne.w	80076a4 <LCD_Init+0x32dc>
	{
		LCD_WriteReg(0x0000,0x0000);
 8007500:	2100      	movs	r1, #0
 8007502:	2000      	movs	r0, #0
 8007504:	f7fc f988 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8007508:	2100      	movs	r1, #0
 800750a:	2000      	movs	r0, #0
 800750c:	f7fc f984 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(20);
 8007510:	2014      	movs	r0, #20
 8007512:	f000 fe8d 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0x0000,0x0000);
 8007516:	2100      	movs	r1, #0
 8007518:	2000      	movs	r0, #0
 800751a:	f7fc f97d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800751e:	2100      	movs	r1, #0
 8007520:	2000      	movs	r0, #0
 8007522:	f7fc f979 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 8007526:	2100      	movs	r1, #0
 8007528:	2000      	movs	r0, #0
 800752a:	f7fc f975 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0000,0x0000);
 800752e:	2100      	movs	r1, #0
 8007530:	2000      	movs	r0, #0
 8007532:	f7fc f971 	bl	8003818 <LCD_WriteReg>
 		LCD_WriteReg(0x00a4,0x0001);
 8007536:	2101      	movs	r1, #1
 8007538:	20a4      	movs	r0, #164	; 0xa4
 800753a:	f7fc f96d 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(20);
 800753e:	2014      	movs	r0, #20
 8007540:	f000 fe76 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0x0060,0x2700);
 8007544:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 8007548:	2060      	movs	r0, #96	; 0x60
 800754a:	f7fc f965 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0008,0x0806);
 800754e:	f640 0106 	movw	r1, #2054	; 0x806
 8007552:	2008      	movs	r0, #8
 8007554:	f7fc f960 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0x0030,0x0703);//gamma setting
 8007558:	f240 7103 	movw	r1, #1795	; 0x703
 800755c:	2030      	movs	r0, #48	; 0x30
 800755e:	f7fc f95b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0031,0x0001);
 8007562:	2101      	movs	r1, #1
 8007564:	2031      	movs	r0, #49	; 0x31
 8007566:	f7fc f957 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0032,0x0004);
 800756a:	2104      	movs	r1, #4
 800756c:	2032      	movs	r0, #50	; 0x32
 800756e:	f7fc f953 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0033,0x0102);
 8007572:	f44f 7181 	mov.w	r1, #258	; 0x102
 8007576:	2033      	movs	r0, #51	; 0x33
 8007578:	f7fc f94e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0034,0x0300);
 800757c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007580:	2034      	movs	r0, #52	; 0x34
 8007582:	f7fc f949 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0035,0x0103);
 8007586:	f240 1103 	movw	r1, #259	; 0x103
 800758a:	2035      	movs	r0, #53	; 0x35
 800758c:	f7fc f944 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0036,0x001F);
 8007590:	211f      	movs	r1, #31
 8007592:	2036      	movs	r0, #54	; 0x36
 8007594:	f7fc f940 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0037,0x0703);
 8007598:	f240 7103 	movw	r1, #1795	; 0x703
 800759c:	2037      	movs	r0, #55	; 0x37
 800759e:	f7fc f93b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0038,0x0001);
 80075a2:	2101      	movs	r1, #1
 80075a4:	2038      	movs	r0, #56	; 0x38
 80075a6:	f7fc f937 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0039,0x0004);
 80075aa:	2104      	movs	r1, #4
 80075ac:	2039      	movs	r0, #57	; 0x39
 80075ae:	f7fc f933 	bl	8003818 <LCD_WriteReg>



		LCD_WriteReg(0x0090, 0x0015);	//80Hz
 80075b2:	2115      	movs	r1, #21
 80075b4:	2090      	movs	r0, #144	; 0x90
 80075b6:	f7fc f92f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0010, 0X0410);	//BT,AP
 80075ba:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80075be:	2010      	movs	r0, #16
 80075c0:	f7fc f92a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0011,0x0247);	//DC1,DC0,VC
 80075c4:	f240 2147 	movw	r1, #583	; 0x247
 80075c8:	2011      	movs	r0, #17
 80075ca:	f7fc f925 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0012, 0x01BC);
 80075ce:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 80075d2:	2012      	movs	r0, #18
 80075d4:	f7fc f920 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0013, 0x0e00);
 80075d8:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 80075dc:	2013      	movs	r0, #19
 80075de:	f7fc f91b 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(120);
 80075e2:	2078      	movs	r0, #120	; 0x78
 80075e4:	f000 fe24 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0x0001, 0x0100);
 80075e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075ec:	2001      	movs	r0, #1
 80075ee:	f7fc f913 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0002, 0x0200);
 80075f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80075f6:	2002      	movs	r0, #2
 80075f8:	f7fc f90e 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0003, 0x1030);
 80075fc:	f241 0130 	movw	r1, #4144	; 0x1030
 8007600:	2003      	movs	r0, #3
 8007602:	f7fc f909 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0x000A, 0x0008);
 8007606:	2108      	movs	r1, #8
 8007608:	200a      	movs	r0, #10
 800760a:	f7fc f905 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x000C, 0x0000);
 800760e:	2100      	movs	r1, #0
 8007610:	200c      	movs	r0, #12
 8007612:	f7fc f901 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0x000E, 0x0020);
 8007616:	2120      	movs	r1, #32
 8007618:	200e      	movs	r0, #14
 800761a:	f7fc f8fd 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x000F, 0x0000);
 800761e:	2100      	movs	r1, #0
 8007620:	200f      	movs	r0, #15
 8007622:	f7fc f8f9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0020, 0x0000);	//H Start
 8007626:	2100      	movs	r1, #0
 8007628:	2020      	movs	r0, #32
 800762a:	f7fc f8f5 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0021, 0x0000);	//V Start
 800762e:	2100      	movs	r1, #0
 8007630:	2021      	movs	r0, #33	; 0x21
 8007632:	f7fc f8f1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x002A,0x003D);	//vcom2
 8007636:	213d      	movs	r1, #61	; 0x3d
 8007638:	202a      	movs	r0, #42	; 0x2a
 800763a:	f7fc f8ed 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(20);
 800763e:	2014      	movs	r0, #20
 8007640:	f000 fdf6 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0x0029, 0x002d);
 8007644:	212d      	movs	r1, #45	; 0x2d
 8007646:	2029      	movs	r0, #41	; 0x29
 8007648:	f7fc f8e6 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0050, 0x0000);
 800764c:	2100      	movs	r1, #0
 800764e:	2050      	movs	r0, #80	; 0x50
 8007650:	f7fc f8e2 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0051, 0xD0EF);
 8007654:	f24d 01ef 	movw	r1, #53487	; 0xd0ef
 8007658:	2051      	movs	r0, #81	; 0x51
 800765a:	f7fc f8dd 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0052, 0x0000);
 800765e:	2100      	movs	r1, #0
 8007660:	2052      	movs	r0, #82	; 0x52
 8007662:	f7fc f8d9 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0053, 0x013F);
 8007666:	f240 113f 	movw	r1, #319	; 0x13f
 800766a:	2053      	movs	r0, #83	; 0x53
 800766c:	f7fc f8d4 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0061, 0x0000);
 8007670:	2100      	movs	r1, #0
 8007672:	2061      	movs	r0, #97	; 0x61
 8007674:	f7fc f8d0 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x006A, 0x0000);
 8007678:	2100      	movs	r1, #0
 800767a:	206a      	movs	r0, #106	; 0x6a
 800767c:	f7fc f8cc 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0092,0x0300);
 8007680:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007684:	2092      	movs	r0, #146	; 0x92
 8007686:	f7fc f8c7 	bl	8003818 <LCD_WriteReg>

 		LCD_WriteReg(0x0093, 0x0005);
 800768a:	2105      	movs	r1, #5
 800768c:	2093      	movs	r0, #147	; 0x93
 800768e:	f7fc f8c3 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0x0007, 0x0100);
 8007692:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007696:	2007      	movs	r0, #7
 8007698:	f7fc f8be 	bl	8003818 <LCD_WriteReg>
 800769c:	e23b      	b.n	8007b16 <LCD_Init+0x374e>
 800769e:	bf00      	nop
 80076a0:	20001034 	.word	0x20001034
	}else if(lcddev.id==0x4531)//OK |/|/|
 80076a4:	4bbb      	ldr	r3, [pc, #748]	; (8007994 <LCD_Init+0x35cc>)
 80076a6:	889b      	ldrh	r3, [r3, #4]
 80076a8:	f244 5231 	movw	r2, #17713	; 0x4531
 80076ac:	4293      	cmp	r3, r2
 80076ae:	f040 80ba 	bne.w	8007826 <LCD_Init+0x345e>
	{
		LCD_WriteReg(0X00,0X0001);
 80076b2:	2101      	movs	r1, #1
 80076b4:	2000      	movs	r0, #0
 80076b6:	f7fc f8af 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(10);
 80076ba:	200a      	movs	r0, #10
 80076bc:	f000 fdb8 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0X10,0X1628);
 80076c0:	f241 6128 	movw	r1, #5672	; 0x1628
 80076c4:	2010      	movs	r0, #16
 80076c6:	f7fc f8a7 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X000e);//0x0006
 80076ca:	210e      	movs	r1, #14
 80076cc:	2012      	movs	r0, #18
 80076ce:	f7fc f8a3 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X0A39);
 80076d2:	f640 2139 	movw	r1, #2617	; 0xa39
 80076d6:	2013      	movs	r0, #19
 80076d8:	f7fc f89e 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(10);
 80076dc:	200a      	movs	r0, #10
 80076de:	f000 fda7 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0X11,0X0040);
 80076e2:	2140      	movs	r1, #64	; 0x40
 80076e4:	2011      	movs	r0, #17
 80076e6:	f7fc f897 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X15,0X0050);
 80076ea:	2150      	movs	r1, #80	; 0x50
 80076ec:	2015      	movs	r0, #21
 80076ee:	f7fc f893 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(10);
 80076f2:	200a      	movs	r0, #10
 80076f4:	f000 fd9c 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0X12,0X001e);//16
 80076f8:	211e      	movs	r1, #30
 80076fa:	2012      	movs	r0, #18
 80076fc:	f7fc f88c 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(10);
 8007700:	200a      	movs	r0, #10
 8007702:	f000 fd95 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0X10,0X1620);
 8007706:	f44f 51b1 	mov.w	r1, #5664	; 0x1620
 800770a:	2010      	movs	r0, #16
 800770c:	f7fc f884 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X13,0X2A39);
 8007710:	f642 2139 	movw	r1, #10809	; 0x2a39
 8007714:	2013      	movs	r0, #19
 8007716:	f7fc f87f 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(10);
 800771a:	200a      	movs	r0, #10
 800771c:	f000 fd88 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0X01,0X0100);
 8007720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007724:	2001      	movs	r0, #1
 8007726:	f7fc f877 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 800772a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800772e:	2002      	movs	r0, #2
 8007730:	f7fc f872 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1038);//改变方向的
 8007734:	f241 0138 	movw	r1, #4152	; 0x1038
 8007738:	2003      	movs	r0, #3
 800773a:	f7fc f86d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0202);
 800773e:	f240 2102 	movw	r1, #514	; 0x202
 8007742:	2008      	movs	r0, #8
 8007744:	f7fc f868 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 8007748:	2108      	movs	r1, #8
 800774a:	200a      	movs	r0, #10
 800774c:	f7fc f864 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X30,0X0000);
 8007750:	2100      	movs	r1, #0
 8007752:	2030      	movs	r0, #48	; 0x30
 8007754:	f7fc f860 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 8007758:	f240 4102 	movw	r1, #1026	; 0x402
 800775c:	2031      	movs	r0, #49	; 0x31
 800775e:	f7fc f85b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0106);
 8007762:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007766:	2032      	movs	r0, #50	; 0x32
 8007768:	f7fc f856 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0503);
 800776c:	f240 5103 	movw	r1, #1283	; 0x503
 8007770:	2033      	movs	r0, #51	; 0x33
 8007772:	f7fc f851 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0104);
 8007776:	f44f 7182 	mov.w	r1, #260	; 0x104
 800777a:	2034      	movs	r0, #52	; 0x34
 800777c:	f7fc f84c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0301);
 8007780:	f240 3101 	movw	r1, #769	; 0x301
 8007784:	2035      	movs	r0, #53	; 0x35
 8007786:	f7fc f847 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 800778a:	f240 7107 	movw	r1, #1799	; 0x707
 800778e:	2036      	movs	r0, #54	; 0x36
 8007790:	f7fc f842 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 8007794:	f240 3105 	movw	r1, #773	; 0x305
 8007798:	2037      	movs	r0, #55	; 0x37
 800779a:	f7fc f83d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0208);
 800779e:	f44f 7102 	mov.w	r1, #520	; 0x208
 80077a2:	2038      	movs	r0, #56	; 0x38
 80077a4:	f7fc f838 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0F0B);
 80077a8:	f640 710b 	movw	r1, #3851	; 0xf0b
 80077ac:	2039      	movs	r0, #57	; 0x39
 80077ae:	f7fc f833 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X41,0X0002);
 80077b2:	2102      	movs	r1, #2
 80077b4:	2041      	movs	r0, #65	; 0x41
 80077b6:	f7fc f82f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X60,0X2700);
 80077ba:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 80077be:	2060      	movs	r0, #96	; 0x60
 80077c0:	f7fc f82a 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 80077c4:	2101      	movs	r1, #1
 80077c6:	2061      	movs	r0, #97	; 0x61
 80077c8:	f7fc f826 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X0210);
 80077cc:	f44f 7104 	mov.w	r1, #528	; 0x210
 80077d0:	2090      	movs	r0, #144	; 0x90
 80077d2:	f7fc f821 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X010A);
 80077d6:	f44f 7185 	mov.w	r1, #266	; 0x10a
 80077da:	2092      	movs	r0, #146	; 0x92
 80077dc:	f7fc f81c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0004);
 80077e0:	2104      	movs	r1, #4
 80077e2:	2093      	movs	r0, #147	; 0x93
 80077e4:	f7fc f818 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0100);
 80077e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80077ec:	20a0      	movs	r0, #160	; 0xa0
 80077ee:	f7fc f813 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 80077f2:	2101      	movs	r1, #1
 80077f4:	2007      	movs	r0, #7
 80077f6:	f7fc f80f 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 80077fa:	2121      	movs	r1, #33	; 0x21
 80077fc:	2007      	movs	r0, #7
 80077fe:	f7fc f80b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 8007802:	2123      	movs	r1, #35	; 0x23
 8007804:	2007      	movs	r0, #7
 8007806:	f7fc f807 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 800780a:	2133      	movs	r1, #51	; 0x33
 800780c:	2007      	movs	r0, #7
 800780e:	f7fc f803 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 8007812:	f240 1133 	movw	r1, #307	; 0x133
 8007816:	2007      	movs	r0, #7
 8007818:	f7fb fffe 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0XA0,0X0000);
 800781c:	2100      	movs	r1, #0
 800781e:	20a0      	movs	r0, #160	; 0xa0
 8007820:	f7fb fffa 	bl	8003818 <LCD_WriteReg>
 8007824:	e177      	b.n	8007b16 <LCD_Init+0x374e>
	}else if(lcddev.id==0x4535)
 8007826:	4b5b      	ldr	r3, [pc, #364]	; (8007994 <LCD_Init+0x35cc>)
 8007828:	889b      	ldrh	r3, [r3, #4]
 800782a:	f244 5235 	movw	r2, #17717	; 0x4535
 800782e:	4293      	cmp	r3, r2
 8007830:	f040 80b2 	bne.w	8007998 <LCD_Init+0x35d0>
	{
		LCD_WriteReg(0X15,0X0030);
 8007834:	2130      	movs	r1, #48	; 0x30
 8007836:	2015      	movs	r0, #21
 8007838:	f7fb ffee 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X9A,0X0010);
 800783c:	2110      	movs	r1, #16
 800783e:	209a      	movs	r0, #154	; 0x9a
 8007840:	f7fb ffea 	bl	8003818 <LCD_WriteReg>
 		LCD_WriteReg(0X11,0X0020);
 8007844:	2120      	movs	r1, #32
 8007846:	2011      	movs	r0, #17
 8007848:	f7fb ffe6 	bl	8003818 <LCD_WriteReg>
 		LCD_WriteReg(0X10,0X3428);
 800784c:	f243 4128 	movw	r1, #13352	; 0x3428
 8007850:	2010      	movs	r0, #16
 8007852:	f7fb ffe1 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X12,0X0002);//16
 8007856:	2102      	movs	r1, #2
 8007858:	2012      	movs	r0, #18
 800785a:	f7fb ffdd 	bl	8003818 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X1038);
 800785e:	f241 0138 	movw	r1, #4152	; 0x1038
 8007862:	2013      	movs	r0, #19
 8007864:	f7fb ffd8 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(40);
 8007868:	2028      	movs	r0, #40	; 0x28
 800786a:	f000 fce1 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0X12,0X0012);//16
 800786e:	2112      	movs	r1, #18
 8007870:	2012      	movs	r0, #18
 8007872:	f7fb ffd1 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(40);
 8007876:	2028      	movs	r0, #40	; 0x28
 8007878:	f000 fcda 	bl	8008230 <HAL_Delay>
  		LCD_WriteReg(0X10,0X3420);
 800787c:	f243 4120 	movw	r1, #13344	; 0x3420
 8007880:	2010      	movs	r0, #16
 8007882:	f7fb ffc9 	bl	8003818 <LCD_WriteReg>
 		LCD_WriteReg(0X13,0X3038);
 8007886:	f243 0138 	movw	r1, #12344	; 0x3038
 800788a:	2013      	movs	r0, #19
 800788c:	f7fb ffc4 	bl	8003818 <LCD_WriteReg>
		HAL_Delay(70);
 8007890:	2046      	movs	r0, #70	; 0x46
 8007892:	f000 fccd 	bl	8008230 <HAL_Delay>
		LCD_WriteReg(0X30,0X0000);
 8007896:	2100      	movs	r1, #0
 8007898:	2030      	movs	r0, #48	; 0x30
 800789a:	f7fb ffbd 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X31,0X0402);
 800789e:	f240 4102 	movw	r1, #1026	; 0x402
 80078a2:	2031      	movs	r0, #49	; 0x31
 80078a4:	f7fb ffb8 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X32,0X0307);
 80078a8:	f240 3107 	movw	r1, #775	; 0x307
 80078ac:	2032      	movs	r0, #50	; 0x32
 80078ae:	f7fb ffb3 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X33,0X0304);
 80078b2:	f44f 7141 	mov.w	r1, #772	; 0x304
 80078b6:	2033      	movs	r0, #51	; 0x33
 80078b8:	f7fb ffae 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X34,0X0004);
 80078bc:	2104      	movs	r1, #4
 80078be:	2034      	movs	r0, #52	; 0x34
 80078c0:	f7fb ffaa 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X35,0X0401);
 80078c4:	f240 4101 	movw	r1, #1025	; 0x401
 80078c8:	2035      	movs	r0, #53	; 0x35
 80078ca:	f7fb ffa5 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X36,0X0707);
 80078ce:	f240 7107 	movw	r1, #1799	; 0x707
 80078d2:	2036      	movs	r0, #54	; 0x36
 80078d4:	f7fb ffa0 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X37,0X0305);
 80078d8:	f240 3105 	movw	r1, #773	; 0x305
 80078dc:	2037      	movs	r0, #55	; 0x37
 80078de:	f7fb ff9b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X38,0X0610);
 80078e2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80078e6:	2038      	movs	r0, #56	; 0x38
 80078e8:	f7fb ff96 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X39,0X0610);
 80078ec:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 80078f0:	2039      	movs	r0, #57	; 0x39
 80078f2:	f7fb ff91 	bl	8003818 <LCD_WriteReg>

		LCD_WriteReg(0X01,0X0100);
 80078f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078fa:	2001      	movs	r0, #1
 80078fc:	f7fb ff8c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X02,0X0300);
 8007900:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007904:	2002      	movs	r0, #2
 8007906:	f7fb ff87 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X03,0X1030);//改变方向的
 800790a:	f241 0130 	movw	r1, #4144	; 0x1030
 800790e:	2003      	movs	r0, #3
 8007910:	f7fb ff82 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X08,0X0808);
 8007914:	f640 0108 	movw	r1, #2056	; 0x808
 8007918:	2008      	movs	r0, #8
 800791a:	f7fb ff7d 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X0A,0X0008);
 800791e:	2108      	movs	r1, #8
 8007920:	200a      	movs	r0, #10
 8007922:	f7fb ff79 	bl	8003818 <LCD_WriteReg>
 		LCD_WriteReg(0X60,0X2700);
 8007926:	f44f 511c 	mov.w	r1, #9984	; 0x2700
 800792a:	2060      	movs	r0, #96	; 0x60
 800792c:	f7fb ff74 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X61,0X0001);
 8007930:	2101      	movs	r1, #1
 8007932:	2061      	movs	r0, #97	; 0x61
 8007934:	f7fb ff70 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X90,0X013E);
 8007938:	f44f 719f 	mov.w	r1, #318	; 0x13e
 800793c:	2090      	movs	r0, #144	; 0x90
 800793e:	f7fb ff6b 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X92,0X0100);
 8007942:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007946:	2092      	movs	r0, #146	; 0x92
 8007948:	f7fb ff66 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X93,0X0100);
 800794c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007950:	2093      	movs	r0, #147	; 0x93
 8007952:	f7fb ff61 	bl	8003818 <LCD_WriteReg>
 		LCD_WriteReg(0XA0,0X3000);
 8007956:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800795a:	20a0      	movs	r0, #160	; 0xa0
 800795c:	f7fb ff5c 	bl	8003818 <LCD_WriteReg>
 		LCD_WriteReg(0XA3,0X0010);
 8007960:	2110      	movs	r1, #16
 8007962:	20a3      	movs	r0, #163	; 0xa3
 8007964:	f7fb ff58 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0001);
 8007968:	2101      	movs	r1, #1
 800796a:	2007      	movs	r0, #7
 800796c:	f7fb ff54 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0021);
 8007970:	2121      	movs	r1, #33	; 0x21
 8007972:	2007      	movs	r0, #7
 8007974:	f7fb ff50 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0023);
 8007978:	2123      	movs	r1, #35	; 0x23
 800797a:	2007      	movs	r0, #7
 800797c:	f7fb ff4c 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0033);
 8007980:	2133      	movs	r1, #51	; 0x33
 8007982:	2007      	movs	r0, #7
 8007984:	f7fb ff48 	bl	8003818 <LCD_WriteReg>
		LCD_WriteReg(0X07,0X0133);
 8007988:	f240 1133 	movw	r1, #307	; 0x133
 800798c:	2007      	movs	r0, #7
 800798e:	f7fb ff43 	bl	8003818 <LCD_WriteReg>
 8007992:	e0c0      	b.n	8007b16 <LCD_Init+0x374e>
 8007994:	20001034 	.word	0x20001034
	}else if(lcddev.id==0X1963)
 8007998:	4b66      	ldr	r3, [pc, #408]	; (8007b34 <LCD_Init+0x376c>)
 800799a:	889b      	ldrh	r3, [r3, #4]
 800799c:	f641 1263 	movw	r2, #6499	; 0x1963
 80079a0:	4293      	cmp	r3, r2
 80079a2:	f040 80b8 	bne.w	8007b16 <LCD_Init+0x374e>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 80079a6:	20e2      	movs	r0, #226	; 0xe2
 80079a8:	f7fb fefc 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 80079ac:	201d      	movs	r0, #29
 80079ae:	f7fb ff0d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 80079b2:	2002      	movs	r0, #2
 80079b4:	f7fb ff0a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 80079b8:	2004      	movs	r0, #4
 80079ba:	f7fb ff07 	bl	80037cc <LCD_WR_DATA>
		delay_us(100);
 80079be:	2064      	movs	r0, #100	; 0x64
 80079c0:	f7f9 fe0c 	bl	80015dc <delay_us>
		LCD_WR_REG(0xE0);		// Start PLL command
 80079c4:	20e0      	movs	r0, #224	; 0xe0
 80079c6:	f7fb feed 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 80079ca:	2001      	movs	r0, #1
 80079cc:	f7fb fefe 	bl	80037cc <LCD_WR_DATA>
		HAL_Delay(10);
 80079d0:	200a      	movs	r0, #10
 80079d2:	f000 fc2d 	bl	8008230 <HAL_Delay>
		LCD_WR_REG(0xE0);		// Start PLL command again
 80079d6:	20e0      	movs	r0, #224	; 0xe0
 80079d8:	f7fb fee4 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 80079dc:	2003      	movs	r0, #3
 80079de:	f7fb fef5 	bl	80037cc <LCD_WR_DATA>
		HAL_Delay(12);
 80079e2:	200c      	movs	r0, #12
 80079e4:	f000 fc24 	bl	8008230 <HAL_Delay>
		LCD_WR_REG(0x01);		//软复位
 80079e8:	2001      	movs	r0, #1
 80079ea:	f7fb fedb 	bl	80037a4 <LCD_WR_REG>
		HAL_Delay(10);
 80079ee:	200a      	movs	r0, #10
 80079f0:	f000 fc1e 	bl	8008230 <HAL_Delay>

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 80079f4:	20e6      	movs	r0, #230	; 0xe6
 80079f6:	f7fb fed5 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 80079fa:	202f      	movs	r0, #47	; 0x2f
 80079fc:	f7fb fee6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8007a00:	20ff      	movs	r0, #255	; 0xff
 8007a02:	f7fb fee3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8007a06:	20ff      	movs	r0, #255	; 0xff
 8007a08:	f7fb fee0 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 8007a0c:	20b0      	movs	r0, #176	; 0xb0
 8007a0e:	f7fb fec9 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8007a12:	2020      	movs	r0, #32
 8007a14:	f7fb feda 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 8007a18:	2000      	movs	r0, #0
 8007a1a:	f7fb fed7 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 8007a1e:	2003      	movs	r0, #3
 8007a20:	f7fb fed4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8007a24:	f240 301f 	movw	r0, #799	; 0x31f
 8007a28:	f7fb fed0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 8007a2c:	2001      	movs	r0, #1
 8007a2e:	f7fb fecd 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8007a32:	f240 10df 	movw	r0, #479	; 0x1df
 8007a36:	f7fb fec9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	f7fb fec6 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 8007a40:	20b4      	movs	r0, #180	; 0xb4
 8007a42:	f7fb feaf 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8007a46:	2004      	movs	r0, #4
 8007a48:	f7fb fec0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 8007a4c:	f240 401f 	movw	r0, #1055	; 0x41f
 8007a50:	f7fb febc 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 8007a54:	2000      	movs	r0, #0
 8007a56:	f7fb feb9 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 8007a5a:	202e      	movs	r0, #46	; 0x2e
 8007a5c:	f7fb feb6 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8007a60:	2000      	movs	r0, #0
 8007a62:	f7fb feb3 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007a66:	2000      	movs	r0, #0
 8007a68:	f7fb feb0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	f7fb fead 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007a72:	2000      	movs	r0, #0
 8007a74:	f7fb feaa 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 8007a78:	20b6      	movs	r0, #182	; 0xb6
 8007a7a:	f7fb fe93 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8007a7e:	2002      	movs	r0, #2
 8007a80:	f7fb fea4 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 8007a84:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8007a88:	f7fb fea0 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	f7fb fe9d 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 8007a92:	2017      	movs	r0, #23
 8007a94:	f7fb fe9a 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8007a98:	2015      	movs	r0, #21
 8007a9a:	f7fb fe97 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	f7fb fe94 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	f7fb fe91 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 8007aaa:	20f0      	movs	r0, #240	; 0xf0
 8007aac:	f7fb fe7a 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 8007ab0:	2003      	movs	r0, #3
 8007ab2:	f7fb fe8b 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 8007ab6:	2029      	movs	r0, #41	; 0x29
 8007ab8:	f7fb fe74 	bl	80037a4 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8007abc:	20d0      	movs	r0, #208	; 0xd0
 8007abe:	f7fb fe71 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8007ac2:	2000      	movs	r0, #0
 8007ac4:	f7fb fe82 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 8007ac8:	20be      	movs	r0, #190	; 0xbe
 8007aca:	f7fb fe6b 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8007ace:	2005      	movs	r0, #5
 8007ad0:	f7fb fe7c 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8007ad4:	20fe      	movs	r0, #254	; 0xfe
 8007ad6:	f7fb fe79 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 8007ada:	2001      	movs	r0, #1
 8007adc:	f7fb fe76 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 8007ae0:	2000      	movs	r0, #0
 8007ae2:	f7fb fe73 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 8007ae6:	2000      	movs	r0, #0
 8007ae8:	f7fb fe70 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 8007aec:	2000      	movs	r0, #0
 8007aee:	f7fb fe6d 	bl	80037cc <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8007af2:	20b8      	movs	r0, #184	; 0xb8
 8007af4:	f7fb fe56 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8007af8:	2003      	movs	r0, #3
 8007afa:	f7fb fe67 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 8007afe:	2001      	movs	r0, #1
 8007b00:	f7fb fe64 	bl	80037cc <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 8007b04:	20ba      	movs	r0, #186	; 0xba
 8007b06:	f7fb fe4d 	bl	80037a4 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	f7fb fe5e 	bl	80037cc <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 8007b10:	2064      	movs	r0, #100	; 0x64
 8007b12:	f7fc fb19 	bl	8004148 <LCD_SSD_BackLightSet>
	}
	LCD_Display_Dir(1);		//默认为横屏
 8007b16:	2001      	movs	r0, #1
 8007b18:	f7fc fb4a 	bl	80041b0 <LCD_Display_Dir>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);				//点亮背光
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007b22:	4805      	ldr	r0, [pc, #20]	; (8007b38 <LCD_Init+0x3770>)
 8007b24:	f001 fa58 	bl	8008fd8 <HAL_GPIO_WritePin>
	LCD_Clear(WHITE);
 8007b28:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007b2c:	f000 f806 	bl	8007b3c <LCD_Clear>
}
 8007b30:	bf00      	nop
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	20001034 	.word	0x20001034
 8007b38:	40020400 	.word	0x40020400

08007b3c <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(uint16_t color)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	4603      	mov	r3, r0
 8007b44:	80fb      	strh	r3, [r7, #6]
	uint32_t index=0;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
	uint32_t totalpoint=lcddev.width;
 8007b4a:	4b21      	ldr	r3, [pc, #132]	; (8007bd0 <LCD_Clear+0x94>)
 8007b4c:	881b      	ldrh	r3, [r3, #0]
 8007b4e:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 8007b50:	4b1f      	ldr	r3, [pc, #124]	; (8007bd0 <LCD_Clear+0x94>)
 8007b52:	885b      	ldrh	r3, [r3, #2]
 8007b54:	461a      	mov	r2, r3
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	fb02 f303 	mul.w	r3, r2, r3
 8007b5c:	60bb      	str	r3, [r7, #8]
	if((lcddev.id==0X6804)&&(lcddev.dir==1))//6804横屏的时候特殊处理
 8007b5e:	4b1c      	ldr	r3, [pc, #112]	; (8007bd0 <LCD_Clear+0x94>)
 8007b60:	889b      	ldrh	r3, [r3, #4]
 8007b62:	f646 0204 	movw	r2, #26628	; 0x6804
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d11a      	bne.n	8007ba0 <LCD_Clear+0x64>
 8007b6a:	4b19      	ldr	r3, [pc, #100]	; (8007bd0 <LCD_Clear+0x94>)
 8007b6c:	799b      	ldrb	r3, [r3, #6]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d116      	bne.n	8007ba0 <LCD_Clear+0x64>
	{
 		lcddev.dir=0;
 8007b72:	4b17      	ldr	r3, [pc, #92]	; (8007bd0 <LCD_Clear+0x94>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	719a      	strb	r2, [r3, #6]
 		lcddev.setxcmd=0X2A;
 8007b78:	4b15      	ldr	r3, [pc, #84]	; (8007bd0 <LCD_Clear+0x94>)
 8007b7a:	222a      	movs	r2, #42	; 0x2a
 8007b7c:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2B;
 8007b7e:	4b14      	ldr	r3, [pc, #80]	; (8007bd0 <LCD_Clear+0x94>)
 8007b80:	222b      	movs	r2, #43	; 0x2b
 8007b82:	819a      	strh	r2, [r3, #12]
		LCD_SetCursor(0x00,0x0000);		//设置光标位置
 8007b84:	2100      	movs	r1, #0
 8007b86:	2000      	movs	r0, #0
 8007b88:	f7fb fe80 	bl	800388c <LCD_SetCursor>
 		lcddev.dir=1;
 8007b8c:	4b10      	ldr	r3, [pc, #64]	; (8007bd0 <LCD_Clear+0x94>)
 8007b8e:	2201      	movs	r2, #1
 8007b90:	719a      	strb	r2, [r3, #6]
  		lcddev.setxcmd=0X2B;
 8007b92:	4b0f      	ldr	r3, [pc, #60]	; (8007bd0 <LCD_Clear+0x94>)
 8007b94:	222b      	movs	r2, #43	; 0x2b
 8007b96:	815a      	strh	r2, [r3, #10]
		lcddev.setycmd=0X2A;
 8007b98:	4b0d      	ldr	r3, [pc, #52]	; (8007bd0 <LCD_Clear+0x94>)
 8007b9a:	222a      	movs	r2, #42	; 0x2a
 8007b9c:	819a      	strh	r2, [r3, #12]
 8007b9e:	e003      	b.n	8007ba8 <LCD_Clear+0x6c>
 	}else LCD_SetCursor(0x00,0x0000);	//设置光标位置
 8007ba0:	2100      	movs	r1, #0
 8007ba2:	2000      	movs	r0, #0
 8007ba4:	f7fb fe72 	bl	800388c <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 8007ba8:	f7fb fe60 	bl	800386c <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 8007bac:	2300      	movs	r3, #0
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	e005      	b.n	8007bbe <LCD_Clear+0x82>
	{
		LCD->LCD_RAM=color;
 8007bb2:	4a08      	ldr	r2, [pc, #32]	; (8007bd4 <LCD_Clear+0x98>)
 8007bb4:	88fb      	ldrh	r3, [r7, #6]
 8007bb6:	8053      	strh	r3, [r2, #2]
	for(index=0;index<totalpoint;index++)
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	68fa      	ldr	r2, [r7, #12]
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d3f5      	bcc.n	8007bb2 <LCD_Clear+0x76>
	}
}
 8007bc6:	bf00      	nop
 8007bc8:	bf00      	nop
 8007bca:	3710      	adds	r7, #16
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20001034 	.word	0x20001034
 8007bd4:	6c00007e 	.word	0x6c00007e

08007bd8 <LCD_DrawLine>:
}
//画线
//x1,y1:起点坐标
//x2,y2:终点坐标
void LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8007bd8:	b590      	push	{r4, r7, lr}
 8007bda:	b08d      	sub	sp, #52	; 0x34
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	4604      	mov	r4, r0
 8007be0:	4608      	mov	r0, r1
 8007be2:	4611      	mov	r1, r2
 8007be4:	461a      	mov	r2, r3
 8007be6:	4623      	mov	r3, r4
 8007be8:	80fb      	strh	r3, [r7, #6]
 8007bea:	4603      	mov	r3, r0
 8007bec:	80bb      	strh	r3, [r7, #4]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	807b      	strh	r3, [r7, #2]
 8007bf2:	4613      	mov	r3, r2
 8007bf4:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1; //计算坐标增量
 8007bfe:	887a      	ldrh	r2, [r7, #2]
 8007c00:	88fb      	ldrh	r3, [r7, #6]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 8007c06:	883a      	ldrh	r2, [r7, #0]
 8007c08:	88bb      	ldrh	r3, [r7, #4]
 8007c0a:	1ad3      	subs	r3, r2, r3
 8007c0c:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 8007c0e:	88fb      	ldrh	r3, [r7, #6]
 8007c10:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 8007c12:	88bb      	ldrh	r3, [r7, #4]
 8007c14:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1; //设置单步方向
 8007c16:	6a3b      	ldr	r3, [r7, #32]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dd02      	ble.n	8007c22 <LCD_DrawLine+0x4a>
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	617b      	str	r3, [r7, #20]
 8007c20:	e00b      	b.n	8007c3a <LCD_DrawLine+0x62>
	else if(delta_x==0)incx=0;//垂直线
 8007c22:	6a3b      	ldr	r3, [r7, #32]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d102      	bne.n	8007c2e <LCD_DrawLine+0x56>
 8007c28:	2300      	movs	r3, #0
 8007c2a:	617b      	str	r3, [r7, #20]
 8007c2c:	e005      	b.n	8007c3a <LCD_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8007c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c32:	617b      	str	r3, [r7, #20]
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	425b      	negs	r3, r3
 8007c38:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	dd02      	ble.n	8007c46 <LCD_DrawLine+0x6e>
 8007c40:	2301      	movs	r3, #1
 8007c42:	613b      	str	r3, [r7, #16]
 8007c44:	e00b      	b.n	8007c5e <LCD_DrawLine+0x86>
	else if(delta_y==0)incy=0;//水平线
 8007c46:	69fb      	ldr	r3, [r7, #28]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d102      	bne.n	8007c52 <LCD_DrawLine+0x7a>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	613b      	str	r3, [r7, #16]
 8007c50:	e005      	b.n	8007c5e <LCD_DrawLine+0x86>
	else{incy=-1;delta_y=-delta_y;}
 8007c52:	f04f 33ff 	mov.w	r3, #4294967295
 8007c56:	613b      	str	r3, [r7, #16]
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	425b      	negs	r3, r3
 8007c5c:	61fb      	str	r3, [r7, #28]
	if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴
 8007c5e:	6a3a      	ldr	r2, [r7, #32]
 8007c60:	69fb      	ldr	r3, [r7, #28]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	dd02      	ble.n	8007c6c <LCD_DrawLine+0x94>
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	61bb      	str	r3, [r7, #24]
 8007c6a:	e001      	b.n	8007c70 <LCD_DrawLine+0x98>
	else distance=delta_y;
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	61bb      	str	r3, [r7, #24]
	for(t=0;t<=distance+1;t++ )//画线输出
 8007c70:	2300      	movs	r3, #0
 8007c72:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007c74:	e02a      	b.n	8007ccc <LCD_DrawLine+0xf4>
	{
		LCD_DrawPoint(uRow,uCol);//画点
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	b292      	uxth	r2, r2
 8007c7e:	4611      	mov	r1, r2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7fc f92d 	bl	8003ee0 <LCD_DrawPoint>
		xerr+=delta_x ;
 8007c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y ;
 8007c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	4413      	add	r3, r2
 8007c94:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8007c96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	dd07      	ble.n	8007cae <LCD_DrawLine+0xd6>
		{
			xerr-=distance;
 8007c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007ca0:	69bb      	ldr	r3, [r7, #24]
 8007ca2:	1ad3      	subs	r3, r2, r3
 8007ca4:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	4413      	add	r3, r2
 8007cac:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 8007cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb0:	69bb      	ldr	r3, [r7, #24]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	dd07      	ble.n	8007cc6 <LCD_DrawLine+0xee>
		{
			yerr-=distance;
 8007cb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	1ad3      	subs	r3, r2, r3
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 8007cbe:	68ba      	ldr	r2, [r7, #8]
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	4413      	add	r3, r2
 8007cc4:	60bb      	str	r3, [r7, #8]
	for(t=0;t<=distance+1;t++ )//画线输出
 8007cc6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007cc8:	3301      	adds	r3, #1
 8007cca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007ccc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007cce:	69bb      	ldr	r3, [r7, #24]
 8007cd0:	3301      	adds	r3, #1
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	ddcf      	ble.n	8007c76 <LCD_DrawLine+0x9e>
		}
	}
}
 8007cd6:	bf00      	nop
 8007cd8:	bf00      	nop
 8007cda:	3734      	adds	r7, #52	; 0x34
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd90      	pop	{r4, r7, pc}

08007ce0 <LCD_Draw_Circle>:
}
//在指定位置画一个指定大小的圆
//(x,y):中心点
//r    :半径
void LCD_Draw_Circle(uint16_t x0,uint16_t y0,uint8_t r)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b086      	sub	sp, #24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	80fb      	strh	r3, [r7, #6]
 8007cea:	460b      	mov	r3, r1
 8007cec:	80bb      	strh	r3, [r7, #4]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	70fb      	strb	r3, [r7, #3]
	int a,b;
	int di;
	a=0;b=r;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	617b      	str	r3, [r7, #20]
 8007cf6:	78fb      	ldrb	r3, [r7, #3]
 8007cf8:	613b      	str	r3, [r7, #16]
	di=3-(r<<1);             //判断下个点位置的标志
 8007cfa:	78fb      	ldrb	r3, [r7, #3]
 8007cfc:	005b      	lsls	r3, r3, #1
 8007cfe:	f1c3 0303 	rsb	r3, r3, #3
 8007d02:	60fb      	str	r3, [r7, #12]
	while(a<=b)
 8007d04:	e07f      	b.n	8007e06 <LCD_Draw_Circle+0x126>
	{
		LCD_DrawPoint(x0+a,y0-b);             //5
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	88fb      	ldrh	r3, [r7, #6]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	b298      	uxth	r0, r3
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	88ba      	ldrh	r2, [r7, #4]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	f7fc f8e0 	bl	8003ee0 <LCD_DrawPoint>
 		LCD_DrawPoint(x0+b,y0-a);             //0
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	88fb      	ldrh	r3, [r7, #6]
 8007d26:	4413      	add	r3, r2
 8007d28:	b298      	uxth	r0, r3
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	b29b      	uxth	r3, r3
 8007d2e:	88ba      	ldrh	r2, [r7, #4]
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	4619      	mov	r1, r3
 8007d36:	f7fc f8d3 	bl	8003ee0 <LCD_DrawPoint>
		LCD_DrawPoint(x0+b,y0+a);             //4
 8007d3a:	693b      	ldr	r3, [r7, #16]
 8007d3c:	b29a      	uxth	r2, r3
 8007d3e:	88fb      	ldrh	r3, [r7, #6]
 8007d40:	4413      	add	r3, r2
 8007d42:	b298      	uxth	r0, r3
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	b29a      	uxth	r2, r3
 8007d48:	88bb      	ldrh	r3, [r7, #4]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	4619      	mov	r1, r3
 8007d50:	f7fc f8c6 	bl	8003ee0 <LCD_DrawPoint>
		LCD_DrawPoint(x0+a,y0+b);             //6
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	b29a      	uxth	r2, r3
 8007d58:	88fb      	ldrh	r3, [r7, #6]
 8007d5a:	4413      	add	r3, r2
 8007d5c:	b298      	uxth	r0, r3
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	88bb      	ldrh	r3, [r7, #4]
 8007d64:	4413      	add	r3, r2
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	4619      	mov	r1, r3
 8007d6a:	f7fc f8b9 	bl	8003ee0 <LCD_DrawPoint>
		LCD_DrawPoint(x0-a,y0+b);             //1
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	88fa      	ldrh	r2, [r7, #6]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	b298      	uxth	r0, r3
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	b29a      	uxth	r2, r3
 8007d7c:	88bb      	ldrh	r3, [r7, #4]
 8007d7e:	4413      	add	r3, r2
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	4619      	mov	r1, r3
 8007d84:	f7fc f8ac 	bl	8003ee0 <LCD_DrawPoint>
 		LCD_DrawPoint(x0-b,y0+a);
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	88fa      	ldrh	r2, [r7, #6]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	b298      	uxth	r0, r3
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	88bb      	ldrh	r3, [r7, #4]
 8007d98:	4413      	add	r3, r2
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	f7fc f89f 	bl	8003ee0 <LCD_DrawPoint>
		LCD_DrawPoint(x0-a,y0-b);             //2
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	88fa      	ldrh	r2, [r7, #6]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	b298      	uxth	r0, r3
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	88ba      	ldrh	r2, [r7, #4]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	4619      	mov	r1, r3
 8007db8:	f7fc f892 	bl	8003ee0 <LCD_DrawPoint>
  		LCD_DrawPoint(x0-b,y0-a);             //7
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	88fa      	ldrh	r2, [r7, #6]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	b298      	uxth	r0, r3
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	88ba      	ldrh	r2, [r7, #4]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	f7fc f885 	bl	8003ee0 <LCD_DrawPoint>
		a++;
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	3301      	adds	r3, #1
 8007dda:	617b      	str	r3, [r7, #20]
		//使用Bresenham算法画圆
		if(di<0)di +=4*a+6;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	da06      	bge.n	8007df0 <LCD_Draw_Circle+0x110>
 8007de2:	697b      	ldr	r3, [r7, #20]
 8007de4:	009b      	lsls	r3, r3, #2
 8007de6:	3306      	adds	r3, #6
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	4413      	add	r3, r2
 8007dec:	60fb      	str	r3, [r7, #12]
 8007dee:	e00a      	b.n	8007e06 <LCD_Draw_Circle+0x126>
		else
		{
			di+=10+4*(a-b);
 8007df0:	697a      	ldr	r2, [r7, #20]
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	330a      	adds	r3, #10
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	4413      	add	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
			b--;
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	3b01      	subs	r3, #1
 8007e04:	613b      	str	r3, [r7, #16]
	while(a<=b)
 8007e06:	697a      	ldr	r2, [r7, #20]
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	f77f af7b 	ble.w	8007d06 <LCD_Draw_Circle+0x26>
		}
	}
}
 8007e10:	bf00      	nop
 8007e12:	bf00      	nop
 8007e14:	3718      	adds	r7, #24
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
	...

08007e1c <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(uint16_t x,uint16_t y,uint8_t num,uint8_t size,uint8_t mode)
{
 8007e1c:	b590      	push	{r4, r7, lr}
 8007e1e:	b085      	sub	sp, #20
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	4604      	mov	r4, r0
 8007e24:	4608      	mov	r0, r1
 8007e26:	4611      	mov	r1, r2
 8007e28:	461a      	mov	r2, r3
 8007e2a:	4623      	mov	r3, r4
 8007e2c:	80fb      	strh	r3, [r7, #6]
 8007e2e:	4603      	mov	r3, r0
 8007e30:	80bb      	strh	r3, [r7, #4]
 8007e32:	460b      	mov	r3, r1
 8007e34:	70fb      	strb	r3, [r7, #3]
 8007e36:	4613      	mov	r3, r2
 8007e38:	70bb      	strb	r3, [r7, #2]
    uint8_t temp,t1,t;
	uint16_t y0=y;
 8007e3a:	88bb      	ldrh	r3, [r7, #4]
 8007e3c:	817b      	strh	r3, [r7, #10]
	uint8_t csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 8007e3e:	78bb      	ldrb	r3, [r7, #2]
 8007e40:	08db      	lsrs	r3, r3, #3
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	461a      	mov	r2, r3
 8007e46:	78bb      	ldrb	r3, [r7, #2]
 8007e48:	f003 0307 	and.w	r3, r3, #7
 8007e4c:	b2db      	uxtb	r3, r3
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	bf14      	ite	ne
 8007e52:	2301      	movne	r3, #1
 8007e54:	2300      	moveq	r3, #0
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	4413      	add	r3, r2
 8007e5a:	b2da      	uxtb	r2, r3
 8007e5c:	78bb      	ldrb	r3, [r7, #2]
 8007e5e:	085b      	lsrs	r3, r3, #1
 8007e60:	b2db      	uxtb	r3, r3
 8007e62:	fb12 f303 	smulbb	r3, r2, r3
 8007e66:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	3b20      	subs	r3, #32
 8007e6c:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 8007e6e:	2300      	movs	r3, #0
 8007e70:	737b      	strb	r3, [r7, #13]
 8007e72:	e075      	b.n	8007f60 <LCD_ShowChar+0x144>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 8007e74:	78bb      	ldrb	r3, [r7, #2]
 8007e76:	2b0c      	cmp	r3, #12
 8007e78:	d10b      	bne.n	8007e92 <LCD_ShowChar+0x76>
 8007e7a:	78fa      	ldrb	r2, [r7, #3]
 8007e7c:	7b79      	ldrb	r1, [r7, #13]
 8007e7e:	483e      	ldr	r0, [pc, #248]	; (8007f78 <LCD_ShowChar+0x15c>)
 8007e80:	4613      	mov	r3, r2
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	4413      	add	r3, r2
 8007e86:	009b      	lsls	r3, r3, #2
 8007e88:	4403      	add	r3, r0
 8007e8a:	440b      	add	r3, r1
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	73fb      	strb	r3, [r7, #15]
 8007e90:	e025      	b.n	8007ede <LCD_ShowChar+0xc2>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 8007e92:	78bb      	ldrb	r3, [r7, #2]
 8007e94:	2b10      	cmp	r3, #16
 8007e96:	d108      	bne.n	8007eaa <LCD_ShowChar+0x8e>
 8007e98:	78fa      	ldrb	r2, [r7, #3]
 8007e9a:	7b7b      	ldrb	r3, [r7, #13]
 8007e9c:	4937      	ldr	r1, [pc, #220]	; (8007f7c <LCD_ShowChar+0x160>)
 8007e9e:	0112      	lsls	r2, r2, #4
 8007ea0:	440a      	add	r2, r1
 8007ea2:	4413      	add	r3, r2
 8007ea4:	781b      	ldrb	r3, [r3, #0]
 8007ea6:	73fb      	strb	r3, [r7, #15]
 8007ea8:	e019      	b.n	8007ede <LCD_ShowChar+0xc2>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 8007eaa:	78bb      	ldrb	r3, [r7, #2]
 8007eac:	2b18      	cmp	r3, #24
 8007eae:	d10b      	bne.n	8007ec8 <LCD_ShowChar+0xac>
 8007eb0:	78fa      	ldrb	r2, [r7, #3]
 8007eb2:	7b79      	ldrb	r1, [r7, #13]
 8007eb4:	4832      	ldr	r0, [pc, #200]	; (8007f80 <LCD_ShowChar+0x164>)
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	00db      	lsls	r3, r3, #3
 8007eba:	4413      	add	r3, r2
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4403      	add	r3, r0
 8007ec0:	440b      	add	r3, r1
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	73fb      	strb	r3, [r7, #15]
 8007ec6:	e00a      	b.n	8007ede <LCD_ShowChar+0xc2>
		else if(size==36)temp=asc2_3216[num][t];	//调用3616字体
 8007ec8:	78bb      	ldrb	r3, [r7, #2]
 8007eca:	2b24      	cmp	r3, #36	; 0x24
 8007ecc:	d14d      	bne.n	8007f6a <LCD_ShowChar+0x14e>
 8007ece:	78fa      	ldrb	r2, [r7, #3]
 8007ed0:	7b7b      	ldrb	r3, [r7, #13]
 8007ed2:	492c      	ldr	r1, [pc, #176]	; (8007f84 <LCD_ShowChar+0x168>)
 8007ed4:	01d2      	lsls	r2, r2, #7
 8007ed6:	440a      	add	r2, r1
 8007ed8:	4413      	add	r3, r2
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 8007ede:	2300      	movs	r3, #0
 8007ee0:	73bb      	strb	r3, [r7, #14]
 8007ee2:	e035      	b.n	8007f50 <LCD_ShowChar+0x134>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 8007ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	da07      	bge.n	8007efc <LCD_ShowChar+0xe0>
 8007eec:	4b26      	ldr	r3, [pc, #152]	; (8007f88 <LCD_ShowChar+0x16c>)
 8007eee:	881a      	ldrh	r2, [r3, #0]
 8007ef0:	88b9      	ldrh	r1, [r7, #4]
 8007ef2:	88fb      	ldrh	r3, [r7, #6]
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fc f80f 	bl	8003f18 <LCD_Fast_DrawPoint>
 8007efa:	e00a      	b.n	8007f12 <LCD_ShowChar+0xf6>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 8007efc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d106      	bne.n	8007f12 <LCD_ShowChar+0xf6>
 8007f04:	4b21      	ldr	r3, [pc, #132]	; (8007f8c <LCD_ShowChar+0x170>)
 8007f06:	881a      	ldrh	r2, [r3, #0]
 8007f08:	88b9      	ldrh	r1, [r7, #4]
 8007f0a:	88fb      	ldrh	r3, [r7, #6]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fc f803 	bl	8003f18 <LCD_Fast_DrawPoint>
			temp<<=1;
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	005b      	lsls	r3, r3, #1
 8007f16:	73fb      	strb	r3, [r7, #15]
			y++;
 8007f18:	88bb      	ldrh	r3, [r7, #4]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 8007f1e:	4b1c      	ldr	r3, [pc, #112]	; (8007f90 <LCD_ShowChar+0x174>)
 8007f20:	885b      	ldrh	r3, [r3, #2]
 8007f22:	88ba      	ldrh	r2, [r7, #4]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d222      	bcs.n	8007f6e <LCD_ShowChar+0x152>
			if((y-y0)==size)
 8007f28:	88ba      	ldrh	r2, [r7, #4]
 8007f2a:	897b      	ldrh	r3, [r7, #10]
 8007f2c:	1ad2      	subs	r2, r2, r3
 8007f2e:	78bb      	ldrb	r3, [r7, #2]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	d10a      	bne.n	8007f4a <LCD_ShowChar+0x12e>
			{
				y=y0;
 8007f34:	897b      	ldrh	r3, [r7, #10]
 8007f36:	80bb      	strh	r3, [r7, #4]
				x++;
 8007f38:	88fb      	ldrh	r3, [r7, #6]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 8007f3e:	4b14      	ldr	r3, [pc, #80]	; (8007f90 <LCD_ShowChar+0x174>)
 8007f40:	881b      	ldrh	r3, [r3, #0]
 8007f42:	88fa      	ldrh	r2, [r7, #6]
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d307      	bcc.n	8007f58 <LCD_ShowChar+0x13c>
 8007f48:	e012      	b.n	8007f70 <LCD_ShowChar+0x154>
		for(t1=0;t1<8;t1++)
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	73bb      	strb	r3, [r7, #14]
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	2b07      	cmp	r3, #7
 8007f54:	d9c6      	bls.n	8007ee4 <LCD_ShowChar+0xc8>
 8007f56:	e000      	b.n	8007f5a <LCD_ShowChar+0x13e>
				break;
 8007f58:	bf00      	nop
	for(t=0;t<csize;t++)
 8007f5a:	7b7b      	ldrb	r3, [r7, #13]
 8007f5c:	3301      	adds	r3, #1
 8007f5e:	737b      	strb	r3, [r7, #13]
 8007f60:	7b7a      	ldrb	r2, [r7, #13]
 8007f62:	7a7b      	ldrb	r3, [r7, #9]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d385      	bcc.n	8007e74 <LCD_ShowChar+0x58>
 8007f68:	e002      	b.n	8007f70 <LCD_ShowChar+0x154>
		else return;								//没有的字库
 8007f6a:	bf00      	nop
 8007f6c:	e000      	b.n	8007f70 <LCD_ShowChar+0x154>
			if(y>=lcddev.height)return;		//超区域了
 8007f6e:	bf00      	nop
			}
		}
	}
}
 8007f70:	3714      	adds	r7, #20
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd90      	pop	{r4, r7, pc}
 8007f76:	bf00      	nop
 8007f78:	08010718 	.word	0x08010718
 8007f7c:	08010b8c 	.word	0x08010b8c
 8007f80:	0801117c 	.word	0x0801117c
 8007f84:	08011ed8 	.word	0x08011ed8
 8007f88:	20000730 	.word	0x20000730
 8007f8c:	2000051a 	.word	0x2000051a
 8007f90:	20001034 	.word	0x20001034

08007f94 <LCD_Pow>:
//m^n函数
//返回值:m^n次方.
uint32_t LCD_Pow(uint8_t m,uint8_t n)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	460a      	mov	r2, r1
 8007f9e:	71fb      	strb	r3, [r7, #7]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8007fa8:	e004      	b.n	8007fb4 <LCD_Pow+0x20>
 8007faa:	79fa      	ldrb	r2, [r7, #7]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	fb02 f303 	mul.w	r3, r2, r3
 8007fb2:	60fb      	str	r3, [r7, #12]
 8007fb4:	79bb      	ldrb	r3, [r7, #6]
 8007fb6:	1e5a      	subs	r2, r3, #1
 8007fb8:	71ba      	strb	r2, [r7, #6]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d1f5      	bne.n	8007faa <LCD_Pow+0x16>
	return result;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <LCD_ShowNum>:
//len :数字的位数
//size:字体大小
//color:颜色
//num:数值(0~4294967295);
void LCD_ShowNum(uint16_t x,uint16_t y,uint32_t num,uint8_t len,uint8_t size)
{
 8007fcc:	b590      	push	{r4, r7, lr}
 8007fce:	b089      	sub	sp, #36	; 0x24
 8007fd0:	af02      	add	r7, sp, #8
 8007fd2:	60ba      	str	r2, [r7, #8]
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	81fb      	strh	r3, [r7, #14]
 8007fda:	460b      	mov	r3, r1
 8007fdc:	81bb      	strh	r3, [r7, #12]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	71fb      	strb	r3, [r7, #7]
	uint8_t t,temp;
	uint8_t enshow=0;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	75bb      	strb	r3, [r7, #22]
	for(t=0;t<len;t++)
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	75fb      	strb	r3, [r7, #23]
 8007fea:	e055      	b.n	8008098 <LCD_ShowNum+0xcc>
	{
		temp=(num/LCD_Pow(10,len-t-1))%10;
 8007fec:	79fa      	ldrb	r2, [r7, #7]
 8007fee:	7dfb      	ldrb	r3, [r7, #23]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	200a      	movs	r0, #10
 8007ffc:	f7ff ffca 	bl	8007f94 <LCD_Pow>
 8008000:	4602      	mov	r2, r0
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	fbb3 f1f2 	udiv	r1, r3, r2
 8008008:	4b28      	ldr	r3, [pc, #160]	; (80080ac <LCD_ShowNum+0xe0>)
 800800a:	fba3 2301 	umull	r2, r3, r3, r1
 800800e:	08da      	lsrs	r2, r3, #3
 8008010:	4613      	mov	r3, r2
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	005b      	lsls	r3, r3, #1
 8008018:	1aca      	subs	r2, r1, r3
 800801a:	4613      	mov	r3, r2
 800801c:	757b      	strb	r3, [r7, #21]
		if(enshow==0&&t<(len-1))
 800801e:	7dbb      	ldrb	r3, [r7, #22]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d11f      	bne.n	8008064 <LCD_ShowNum+0x98>
 8008024:	7dfa      	ldrb	r2, [r7, #23]
 8008026:	79fb      	ldrb	r3, [r7, #7]
 8008028:	3b01      	subs	r3, #1
 800802a:	429a      	cmp	r2, r3
 800802c:	da1a      	bge.n	8008064 <LCD_ShowNum+0x98>
		{
			if(temp==0)
 800802e:	7d7b      	ldrb	r3, [r7, #21]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d115      	bne.n	8008060 <LCD_ShowNum+0x94>
			{
				LCD_ShowChar(x+(size/2)*t,y,' ',size,0);
 8008034:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008038:	085b      	lsrs	r3, r3, #1
 800803a:	b2db      	uxtb	r3, r3
 800803c:	b29a      	uxth	r2, r3
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	b29b      	uxth	r3, r3
 8008042:	fb12 f303 	smulbb	r3, r2, r3
 8008046:	b29a      	uxth	r2, r3
 8008048:	89fb      	ldrh	r3, [r7, #14]
 800804a:	4413      	add	r3, r2
 800804c:	b298      	uxth	r0, r3
 800804e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008052:	89b9      	ldrh	r1, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	9200      	str	r2, [sp, #0]
 8008058:	2220      	movs	r2, #32
 800805a:	f7ff fedf 	bl	8007e1c <LCD_ShowChar>
				continue;
 800805e:	e018      	b.n	8008092 <LCD_ShowNum+0xc6>
			}else enshow=1;
 8008060:	2301      	movs	r3, #1
 8008062:	75bb      	strb	r3, [r7, #22]

		}
	 	LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,0);
 8008064:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008068:	085b      	lsrs	r3, r3, #1
 800806a:	b2db      	uxtb	r3, r3
 800806c:	b29a      	uxth	r2, r3
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	b29b      	uxth	r3, r3
 8008072:	fb12 f303 	smulbb	r3, r2, r3
 8008076:	b29a      	uxth	r2, r3
 8008078:	89fb      	ldrh	r3, [r7, #14]
 800807a:	4413      	add	r3, r2
 800807c:	b298      	uxth	r0, r3
 800807e:	7d7b      	ldrb	r3, [r7, #21]
 8008080:	3330      	adds	r3, #48	; 0x30
 8008082:	b2da      	uxtb	r2, r3
 8008084:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008088:	89b9      	ldrh	r1, [r7, #12]
 800808a:	2400      	movs	r4, #0
 800808c:	9400      	str	r4, [sp, #0]
 800808e:	f7ff fec5 	bl	8007e1c <LCD_ShowChar>
	for(t=0;t<len;t++)
 8008092:	7dfb      	ldrb	r3, [r7, #23]
 8008094:	3301      	adds	r3, #1
 8008096:	75fb      	strb	r3, [r7, #23]
 8008098:	7dfa      	ldrb	r2, [r7, #23]
 800809a:	79fb      	ldrb	r3, [r7, #7]
 800809c:	429a      	cmp	r2, r3
 800809e:	d3a5      	bcc.n	8007fec <LCD_ShowNum+0x20>
	}
}
 80080a0:	bf00      	nop
 80080a2:	bf00      	nop
 80080a4:	371c      	adds	r7, #28
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd90      	pop	{r4, r7, pc}
 80080aa:	bf00      	nop
 80080ac:	cccccccd 	.word	0xcccccccd

080080b0 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(uint16_t x,uint16_t y,uint16_t width,uint16_t height,uint8_t size,uint8_t *p)
{
 80080b0:	b590      	push	{r4, r7, lr}
 80080b2:	b087      	sub	sp, #28
 80080b4:	af02      	add	r7, sp, #8
 80080b6:	4604      	mov	r4, r0
 80080b8:	4608      	mov	r0, r1
 80080ba:	4611      	mov	r1, r2
 80080bc:	461a      	mov	r2, r3
 80080be:	4623      	mov	r3, r4
 80080c0:	80fb      	strh	r3, [r7, #6]
 80080c2:	4603      	mov	r3, r0
 80080c4:	80bb      	strh	r3, [r7, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	807b      	strh	r3, [r7, #2]
 80080ca:	4613      	mov	r3, r2
 80080cc:	803b      	strh	r3, [r7, #0]
	uint8_t x0=x;
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	73fb      	strb	r3, [r7, #15]
	width+=x;
 80080d2:	887a      	ldrh	r2, [r7, #2]
 80080d4:	88fb      	ldrh	r3, [r7, #6]
 80080d6:	4413      	add	r3, r2
 80080d8:	807b      	strh	r3, [r7, #2]
	height+=y;
 80080da:	883a      	ldrh	r2, [r7, #0]
 80080dc:	88bb      	ldrh	r3, [r7, #4]
 80080de:	4413      	add	r3, r2
 80080e0:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 80080e2:	e024      	b.n	800812e <LCD_ShowString+0x7e>
    {
        if(x>=width){x=x0;y+=size;}
 80080e4:	88fa      	ldrh	r2, [r7, #6]
 80080e6:	887b      	ldrh	r3, [r7, #2]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d307      	bcc.n	80080fc <LCD_ShowString+0x4c>
 80080ec:	7bfb      	ldrb	r3, [r7, #15]
 80080ee:	80fb      	strh	r3, [r7, #6]
 80080f0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	88bb      	ldrh	r3, [r7, #4]
 80080f8:	4413      	add	r3, r2
 80080fa:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 80080fc:	88ba      	ldrh	r2, [r7, #4]
 80080fe:	883b      	ldrh	r3, [r7, #0]
 8008100:	429a      	cmp	r2, r3
 8008102:	d21d      	bcs.n	8008140 <LCD_ShowString+0x90>
        LCD_ShowChar(x,y,*p,size,1);
 8008104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008106:	781a      	ldrb	r2, [r3, #0]
 8008108:	f897 3020 	ldrb.w	r3, [r7, #32]
 800810c:	88b9      	ldrh	r1, [r7, #4]
 800810e:	88f8      	ldrh	r0, [r7, #6]
 8008110:	2401      	movs	r4, #1
 8008112:	9400      	str	r4, [sp, #0]
 8008114:	f7ff fe82 	bl	8007e1c <LCD_ShowChar>
        x+=size/2;
 8008118:	f897 3020 	ldrb.w	r3, [r7, #32]
 800811c:	085b      	lsrs	r3, r3, #1
 800811e:	b2db      	uxtb	r3, r3
 8008120:	b29a      	uxth	r2, r3
 8008122:	88fb      	ldrh	r3, [r7, #6]
 8008124:	4413      	add	r3, r2
 8008126:	80fb      	strh	r3, [r7, #6]
        p++;
 8008128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812a:	3301      	adds	r3, #1
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 800812e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	2b7e      	cmp	r3, #126	; 0x7e
 8008134:	d805      	bhi.n	8008142 <LCD_ShowString+0x92>
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	2b1f      	cmp	r3, #31
 800813c:	d8d2      	bhi.n	80080e4 <LCD_ShowString+0x34>
    }
}
 800813e:	e000      	b.n	8008142 <LCD_ShowString+0x92>
        if(y>=height)break;//退出
 8008140:	bf00      	nop
}
 8008142:	bf00      	nop
 8008144:	3714      	adds	r7, #20
 8008146:	46bd      	mov	sp, r7
 8008148:	bd90      	pop	{r4, r7, pc}
	...

0800814c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008150:	4b0e      	ldr	r3, [pc, #56]	; (800818c <HAL_Init+0x40>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a0d      	ldr	r2, [pc, #52]	; (800818c <HAL_Init+0x40>)
 8008156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800815a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800815c:	4b0b      	ldr	r3, [pc, #44]	; (800818c <HAL_Init+0x40>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a0a      	ldr	r2, [pc, #40]	; (800818c <HAL_Init+0x40>)
 8008162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008168:	4b08      	ldr	r3, [pc, #32]	; (800818c <HAL_Init+0x40>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	4a07      	ldr	r2, [pc, #28]	; (800818c <HAL_Init+0x40>)
 800816e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008174:	2003      	movs	r0, #3
 8008176:	f000 f94f 	bl	8008418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800817a:	2000      	movs	r0, #0
 800817c:	f000 f808 	bl	8008190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008180:	f7f9 fb56 	bl	8001830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	40023c00 	.word	0x40023c00

08008190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008198:	4b12      	ldr	r3, [pc, #72]	; (80081e4 <HAL_InitTick+0x54>)
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	4b12      	ldr	r3, [pc, #72]	; (80081e8 <HAL_InitTick+0x58>)
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	4619      	mov	r1, r3
 80081a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80081a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80081aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 f967 	bl	8008482 <HAL_SYSTICK_Config>
 80081b4:	4603      	mov	r3, r0
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d001      	beq.n	80081be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80081ba:	2301      	movs	r3, #1
 80081bc:	e00e      	b.n	80081dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2b0f      	cmp	r3, #15
 80081c2:	d80a      	bhi.n	80081da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80081c4:	2200      	movs	r2, #0
 80081c6:	6879      	ldr	r1, [r7, #4]
 80081c8:	f04f 30ff 	mov.w	r0, #4294967295
 80081cc:	f000 f92f 	bl	800842e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80081d0:	4a06      	ldr	r2, [pc, #24]	; (80081ec <HAL_InitTick+0x5c>)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	e000      	b.n	80081dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80081da:	2301      	movs	r3, #1
}
 80081dc:	4618      	mov	r0, r3
 80081de:	3708      	adds	r7, #8
 80081e0:	46bd      	mov	sp, r7
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	200004e0 	.word	0x200004e0
 80081e8:	20000520 	.word	0x20000520
 80081ec:	2000051c 	.word	0x2000051c

080081f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80081f4:	4b06      	ldr	r3, [pc, #24]	; (8008210 <HAL_IncTick+0x20>)
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	461a      	mov	r2, r3
 80081fa:	4b06      	ldr	r3, [pc, #24]	; (8008214 <HAL_IncTick+0x24>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4413      	add	r3, r2
 8008200:	4a04      	ldr	r2, [pc, #16]	; (8008214 <HAL_IncTick+0x24>)
 8008202:	6013      	str	r3, [r2, #0]
}
 8008204:	bf00      	nop
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	20000520 	.word	0x20000520
 8008214:	20001044 	.word	0x20001044

08008218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008218:	b480      	push	{r7}
 800821a:	af00      	add	r7, sp, #0
  return uwTick;
 800821c:	4b03      	ldr	r3, [pc, #12]	; (800822c <HAL_GetTick+0x14>)
 800821e:	681b      	ldr	r3, [r3, #0]
}
 8008220:	4618      	mov	r0, r3
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	20001044 	.word	0x20001044

08008230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b084      	sub	sp, #16
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008238:	f7ff ffee 	bl	8008218 <HAL_GetTick>
 800823c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008248:	d005      	beq.n	8008256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800824a:	4b0a      	ldr	r3, [pc, #40]	; (8008274 <HAL_Delay+0x44>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	4413      	add	r3, r2
 8008254:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008256:	bf00      	nop
 8008258:	f7ff ffde 	bl	8008218 <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	429a      	cmp	r2, r3
 8008266:	d8f7      	bhi.n	8008258 <HAL_Delay+0x28>
  {
  }
}
 8008268:	bf00      	nop
 800826a:	bf00      	nop
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20000520 	.word	0x20000520

08008278 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008278:	b480      	push	{r7}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f003 0307 	and.w	r3, r3, #7
 8008286:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008288:	4b0c      	ldr	r3, [pc, #48]	; (80082bc <__NVIC_SetPriorityGrouping+0x44>)
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008294:	4013      	ands	r3, r2
 8008296:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80082a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80082a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80082aa:	4a04      	ldr	r2, [pc, #16]	; (80082bc <__NVIC_SetPriorityGrouping+0x44>)
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	60d3      	str	r3, [r2, #12]
}
 80082b0:	bf00      	nop
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr
 80082bc:	e000ed00 	.word	0xe000ed00

080082c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80082c0:	b480      	push	{r7}
 80082c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082c4:	4b04      	ldr	r3, [pc, #16]	; (80082d8 <__NVIC_GetPriorityGrouping+0x18>)
 80082c6:	68db      	ldr	r3, [r3, #12]
 80082c8:	0a1b      	lsrs	r3, r3, #8
 80082ca:	f003 0307 	and.w	r3, r3, #7
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	e000ed00 	.word	0xe000ed00

080082dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	4603      	mov	r3, r0
 80082e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	db0b      	blt.n	8008306 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	f003 021f 	and.w	r2, r3, #31
 80082f4:	4907      	ldr	r1, [pc, #28]	; (8008314 <__NVIC_EnableIRQ+0x38>)
 80082f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082fa:	095b      	lsrs	r3, r3, #5
 80082fc:	2001      	movs	r0, #1
 80082fe:	fa00 f202 	lsl.w	r2, r0, r2
 8008302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	e000e100 	.word	0xe000e100

08008318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	4603      	mov	r3, r0
 8008320:	6039      	str	r1, [r7, #0]
 8008322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008328:	2b00      	cmp	r3, #0
 800832a:	db0a      	blt.n	8008342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	b2da      	uxtb	r2, r3
 8008330:	490c      	ldr	r1, [pc, #48]	; (8008364 <__NVIC_SetPriority+0x4c>)
 8008332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008336:	0112      	lsls	r2, r2, #4
 8008338:	b2d2      	uxtb	r2, r2
 800833a:	440b      	add	r3, r1
 800833c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008340:	e00a      	b.n	8008358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	b2da      	uxtb	r2, r3
 8008346:	4908      	ldr	r1, [pc, #32]	; (8008368 <__NVIC_SetPriority+0x50>)
 8008348:	79fb      	ldrb	r3, [r7, #7]
 800834a:	f003 030f 	and.w	r3, r3, #15
 800834e:	3b04      	subs	r3, #4
 8008350:	0112      	lsls	r2, r2, #4
 8008352:	b2d2      	uxtb	r2, r2
 8008354:	440b      	add	r3, r1
 8008356:	761a      	strb	r2, [r3, #24]
}
 8008358:	bf00      	nop
 800835a:	370c      	adds	r7, #12
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr
 8008364:	e000e100 	.word	0xe000e100
 8008368:	e000ed00 	.word	0xe000ed00

0800836c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800836c:	b480      	push	{r7}
 800836e:	b089      	sub	sp, #36	; 0x24
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f003 0307 	and.w	r3, r3, #7
 800837e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008380:	69fb      	ldr	r3, [r7, #28]
 8008382:	f1c3 0307 	rsb	r3, r3, #7
 8008386:	2b04      	cmp	r3, #4
 8008388:	bf28      	it	cs
 800838a:	2304      	movcs	r3, #4
 800838c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800838e:	69fb      	ldr	r3, [r7, #28]
 8008390:	3304      	adds	r3, #4
 8008392:	2b06      	cmp	r3, #6
 8008394:	d902      	bls.n	800839c <NVIC_EncodePriority+0x30>
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	3b03      	subs	r3, #3
 800839a:	e000      	b.n	800839e <NVIC_EncodePriority+0x32>
 800839c:	2300      	movs	r3, #0
 800839e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083a0:	f04f 32ff 	mov.w	r2, #4294967295
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	fa02 f303 	lsl.w	r3, r2, r3
 80083aa:	43da      	mvns	r2, r3
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	401a      	ands	r2, r3
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083b4:	f04f 31ff 	mov.w	r1, #4294967295
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	fa01 f303 	lsl.w	r3, r1, r3
 80083be:	43d9      	mvns	r1, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083c4:	4313      	orrs	r3, r2
         );
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3724      	adds	r7, #36	; 0x24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr
	...

080083d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3b01      	subs	r3, #1
 80083e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083e4:	d301      	bcc.n	80083ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80083e6:	2301      	movs	r3, #1
 80083e8:	e00f      	b.n	800840a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80083ea:	4a0a      	ldr	r2, [pc, #40]	; (8008414 <SysTick_Config+0x40>)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	3b01      	subs	r3, #1
 80083f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80083f2:	210f      	movs	r1, #15
 80083f4:	f04f 30ff 	mov.w	r0, #4294967295
 80083f8:	f7ff ff8e 	bl	8008318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80083fc:	4b05      	ldr	r3, [pc, #20]	; (8008414 <SysTick_Config+0x40>)
 80083fe:	2200      	movs	r2, #0
 8008400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008402:	4b04      	ldr	r3, [pc, #16]	; (8008414 <SysTick_Config+0x40>)
 8008404:	2207      	movs	r2, #7
 8008406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008408:	2300      	movs	r3, #0
}
 800840a:	4618      	mov	r0, r3
 800840c:	3708      	adds	r7, #8
 800840e:	46bd      	mov	sp, r7
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	e000e010 	.word	0xe000e010

08008418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7ff ff29 	bl	8008278 <__NVIC_SetPriorityGrouping>
}
 8008426:	bf00      	nop
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800842e:	b580      	push	{r7, lr}
 8008430:	b086      	sub	sp, #24
 8008432:	af00      	add	r7, sp, #0
 8008434:	4603      	mov	r3, r0
 8008436:	60b9      	str	r1, [r7, #8]
 8008438:	607a      	str	r2, [r7, #4]
 800843a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800843c:	2300      	movs	r3, #0
 800843e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008440:	f7ff ff3e 	bl	80082c0 <__NVIC_GetPriorityGrouping>
 8008444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	68b9      	ldr	r1, [r7, #8]
 800844a:	6978      	ldr	r0, [r7, #20]
 800844c:	f7ff ff8e 	bl	800836c <NVIC_EncodePriority>
 8008450:	4602      	mov	r2, r0
 8008452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008456:	4611      	mov	r1, r2
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff ff5d 	bl	8008318 <__NVIC_SetPriority>
}
 800845e:	bf00      	nop
 8008460:	3718      	adds	r7, #24
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b082      	sub	sp, #8
 800846a:	af00      	add	r7, sp, #0
 800846c:	4603      	mov	r3, r0
 800846e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008474:	4618      	mov	r0, r3
 8008476:	f7ff ff31 	bl	80082dc <__NVIC_EnableIRQ>
}
 800847a:	bf00      	nop
 800847c:	3708      	adds	r7, #8
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008482:	b580      	push	{r7, lr}
 8008484:	b082      	sub	sp, #8
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f7ff ffa2 	bl	80083d4 <SysTick_Config>
 8008490:	4603      	mov	r3, r0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
	...

0800849c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80084a4:	2300      	movs	r3, #0
 80084a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80084a8:	f7ff feb6 	bl	8008218 <HAL_GetTick>
 80084ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e099      	b.n	80085ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2202      	movs	r2, #2
 80084c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 0201 	bic.w	r2, r2, #1
 80084d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084d8:	e00f      	b.n	80084fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80084da:	f7ff fe9d 	bl	8008218 <HAL_GetTick>
 80084de:	4602      	mov	r2, r0
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	1ad3      	subs	r3, r2, r3
 80084e4:	2b05      	cmp	r3, #5
 80084e6:	d908      	bls.n	80084fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2220      	movs	r2, #32
 80084ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2203      	movs	r2, #3
 80084f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e078      	b.n	80085ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0301 	and.w	r3, r3, #1
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1e8      	bne.n	80084da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	4b38      	ldr	r3, [pc, #224]	; (80085f4 <HAL_DMA_Init+0x158>)
 8008514:	4013      	ands	r3, r2
 8008516:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008526:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	691b      	ldr	r3, [r3, #16]
 800852c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008532:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	699b      	ldr	r3, [r3, #24]
 8008538:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800853e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	4313      	orrs	r3, r2
 800854a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	2b04      	cmp	r3, #4
 8008552:	d107      	bne.n	8008564 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855c:	4313      	orrs	r3, r2
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	4313      	orrs	r3, r2
 8008562:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	697a      	ldr	r2, [r7, #20]
 800856a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	695b      	ldr	r3, [r3, #20]
 8008572:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	f023 0307 	bic.w	r3, r3, #7
 800857a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858a:	2b04      	cmp	r3, #4
 800858c:	d117      	bne.n	80085be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	4313      	orrs	r3, r2
 8008596:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00e      	beq.n	80085be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 fb01 	bl	8008ba8 <DMA_CheckFifoParam>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d008      	beq.n	80085be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2240      	movs	r2, #64	; 0x40
 80085b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80085ba:	2301      	movs	r3, #1
 80085bc:	e016      	b.n	80085ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fab8 	bl	8008b3c <DMA_CalcBaseAndBitshift>
 80085cc:	4603      	mov	r3, r0
 80085ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085d4:	223f      	movs	r2, #63	; 0x3f
 80085d6:	409a      	lsls	r2, r3
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80085ea:	2300      	movs	r3, #0
}
 80085ec:	4618      	mov	r0, r3
 80085ee:	3718      	adds	r7, #24
 80085f0:	46bd      	mov	sp, r7
 80085f2:	bd80      	pop	{r7, pc}
 80085f4:	f010803f 	.word	0xf010803f

080085f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800860e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008616:	2b01      	cmp	r3, #1
 8008618:	d101      	bne.n	800861e <HAL_DMA_Start_IT+0x26>
 800861a:	2302      	movs	r3, #2
 800861c:	e040      	b.n	80086a0 <HAL_DMA_Start_IT+0xa8>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800862c:	b2db      	uxtb	r3, r3
 800862e:	2b01      	cmp	r3, #1
 8008630:	d12f      	bne.n	8008692 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	2202      	movs	r2, #2
 8008636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	68b9      	ldr	r1, [r7, #8]
 8008646:	68f8      	ldr	r0, [r7, #12]
 8008648:	f000 fa4a 	bl	8008ae0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008650:	223f      	movs	r2, #63	; 0x3f
 8008652:	409a      	lsls	r2, r3
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f042 0216 	orr.w	r2, r2, #22
 8008666:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866c:	2b00      	cmp	r3, #0
 800866e:	d007      	beq.n	8008680 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f042 0208 	orr.w	r2, r2, #8
 800867e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	681a      	ldr	r2, [r3, #0]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0201 	orr.w	r2, r2, #1
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	e005      	b.n	800869e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800869a:	2302      	movs	r3, #2
 800869c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800869e:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	3718      	adds	r7, #24
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}

080086a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80086b6:	f7ff fdaf 	bl	8008218 <HAL_GetTick>
 80086ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d008      	beq.n	80086da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2280      	movs	r2, #128	; 0x80
 80086cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2200      	movs	r2, #0
 80086d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
 80086d8:	e052      	b.n	8008780 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f022 0216 	bic.w	r2, r2, #22
 80086e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	695a      	ldr	r2, [r3, #20]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d103      	bne.n	800870a <HAL_DMA_Abort+0x62>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008706:	2b00      	cmp	r3, #0
 8008708:	d007      	beq.n	800871a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	681a      	ldr	r2, [r3, #0]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f022 0208 	bic.w	r2, r2, #8
 8008718:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681a      	ldr	r2, [r3, #0]
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f022 0201 	bic.w	r2, r2, #1
 8008728:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800872a:	e013      	b.n	8008754 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800872c:	f7ff fd74 	bl	8008218 <HAL_GetTick>
 8008730:	4602      	mov	r2, r0
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	1ad3      	subs	r3, r2, r3
 8008736:	2b05      	cmp	r3, #5
 8008738:	d90c      	bls.n	8008754 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2220      	movs	r2, #32
 800873e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2203      	movs	r2, #3
 800874c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e015      	b.n	8008780 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0301 	and.w	r3, r3, #1
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1e4      	bne.n	800872c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008766:	223f      	movs	r2, #63	; 0x3f
 8008768:	409a      	lsls	r2, r3
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2201      	movs	r2, #1
 800877a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800877e:	2300      	movs	r3, #0
}
 8008780:	4618      	mov	r0, r3
 8008782:	3710      	adds	r7, #16
 8008784:	46bd      	mov	sp, r7
 8008786:	bd80      	pop	{r7, pc}

08008788 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008796:	b2db      	uxtb	r3, r3
 8008798:	2b02      	cmp	r3, #2
 800879a:	d004      	beq.n	80087a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2280      	movs	r2, #128	; 0x80
 80087a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	e00c      	b.n	80087c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2205      	movs	r2, #5
 80087aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	681a      	ldr	r2, [r3, #0]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f022 0201 	bic.w	r2, r2, #1
 80087bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr

080087cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80087d4:	2300      	movs	r3, #0
 80087d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80087d8:	4b92      	ldr	r3, [pc, #584]	; (8008a24 <HAL_DMA_IRQHandler+0x258>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a92      	ldr	r2, [pc, #584]	; (8008a28 <HAL_DMA_IRQHandler+0x25c>)
 80087de:	fba2 2303 	umull	r2, r3, r2, r3
 80087e2:	0a9b      	lsrs	r3, r3, #10
 80087e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087f6:	2208      	movs	r2, #8
 80087f8:	409a      	lsls	r2, r3
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	4013      	ands	r3, r2
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d01a      	beq.n	8008838 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f003 0304 	and.w	r3, r3, #4
 800880c:	2b00      	cmp	r3, #0
 800880e:	d013      	beq.n	8008838 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f022 0204 	bic.w	r2, r2, #4
 800881e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008824:	2208      	movs	r2, #8
 8008826:	409a      	lsls	r2, r3
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008830:	f043 0201 	orr.w	r2, r3, #1
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800883c:	2201      	movs	r2, #1
 800883e:	409a      	lsls	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	4013      	ands	r3, r2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d012      	beq.n	800886e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00b      	beq.n	800886e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800885a:	2201      	movs	r2, #1
 800885c:	409a      	lsls	r2, r3
 800885e:	693b      	ldr	r3, [r7, #16]
 8008860:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008866:	f043 0202 	orr.w	r2, r3, #2
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008872:	2204      	movs	r2, #4
 8008874:	409a      	lsls	r2, r3
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	4013      	ands	r3, r2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d012      	beq.n	80088a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 0302 	and.w	r3, r3, #2
 8008888:	2b00      	cmp	r3, #0
 800888a:	d00b      	beq.n	80088a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008890:	2204      	movs	r2, #4
 8008892:	409a      	lsls	r2, r3
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800889c:	f043 0204 	orr.w	r2, r3, #4
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088a8:	2210      	movs	r2, #16
 80088aa:	409a      	lsls	r2, r3
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	4013      	ands	r3, r2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d043      	beq.n	800893c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f003 0308 	and.w	r3, r3, #8
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d03c      	beq.n	800893c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088c6:	2210      	movs	r2, #16
 80088c8:	409a      	lsls	r2, r3
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d018      	beq.n	800890e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d108      	bne.n	80088fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d024      	beq.n	800893c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	4798      	blx	r3
 80088fa:	e01f      	b.n	800893c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008900:	2b00      	cmp	r3, #0
 8008902:	d01b      	beq.n	800893c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	4798      	blx	r3
 800890c:	e016      	b.n	800893c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008918:	2b00      	cmp	r3, #0
 800891a:	d107      	bne.n	800892c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681a      	ldr	r2, [r3, #0]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f022 0208 	bic.w	r2, r2, #8
 800892a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008940:	2220      	movs	r2, #32
 8008942:	409a      	lsls	r2, r3
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	4013      	ands	r3, r2
 8008948:	2b00      	cmp	r3, #0
 800894a:	f000 808e 	beq.w	8008a6a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0310 	and.w	r3, r3, #16
 8008958:	2b00      	cmp	r3, #0
 800895a:	f000 8086 	beq.w	8008a6a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008962:	2220      	movs	r2, #32
 8008964:	409a      	lsls	r2, r3
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b05      	cmp	r3, #5
 8008974:	d136      	bne.n	80089e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f022 0216 	bic.w	r2, r2, #22
 8008984:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	695a      	ldr	r2, [r3, #20]
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008994:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800899a:	2b00      	cmp	r3, #0
 800899c:	d103      	bne.n	80089a6 <HAL_DMA_IRQHandler+0x1da>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d007      	beq.n	80089b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f022 0208 	bic.w	r2, r2, #8
 80089b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089ba:	223f      	movs	r2, #63	; 0x3f
 80089bc:	409a      	lsls	r2, r3
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d07d      	beq.n	8008ad6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	4798      	blx	r3
        }
        return;
 80089e2:	e078      	b.n	8008ad6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d01c      	beq.n	8008a2c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d108      	bne.n	8008a12 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d030      	beq.n	8008a6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	4798      	blx	r3
 8008a10:	e02b      	b.n	8008a6a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d027      	beq.n	8008a6a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	4798      	blx	r3
 8008a22:	e022      	b.n	8008a6a <HAL_DMA_IRQHandler+0x29e>
 8008a24:	200004e0 	.word	0x200004e0
 8008a28:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d10f      	bne.n	8008a5a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f022 0210 	bic.w	r2, r2, #16
 8008a48:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	2201      	movs	r2, #1
 8008a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d032      	beq.n	8008ad8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d022      	beq.n	8008ac4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2205      	movs	r2, #5
 8008a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	f022 0201 	bic.w	r2, r2, #1
 8008a94:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	3301      	adds	r3, #1
 8008a9a:	60bb      	str	r3, [r7, #8]
 8008a9c:	697a      	ldr	r2, [r7, #20]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d307      	bcc.n	8008ab2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0301 	and.w	r3, r3, #1
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d1f2      	bne.n	8008a96 <HAL_DMA_IRQHandler+0x2ca>
 8008ab0:	e000      	b.n	8008ab4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8008ab2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d005      	beq.n	8008ad8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ad0:	6878      	ldr	r0, [r7, #4]
 8008ad2:	4798      	blx	r3
 8008ad4:	e000      	b.n	8008ad8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008ad6:	bf00      	nop
    }
  }
}
 8008ad8:	3718      	adds	r7, #24
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop

08008ae0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b085      	sub	sp, #20
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008afc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	2b40      	cmp	r3, #64	; 0x40
 8008b0c:	d108      	bne.n	8008b20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	68ba      	ldr	r2, [r7, #8]
 8008b1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008b1e:	e007      	b.n	8008b30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	68ba      	ldr	r2, [r7, #8]
 8008b26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	687a      	ldr	r2, [r7, #4]
 8008b2e:	60da      	str	r2, [r3, #12]
}
 8008b30:	bf00      	nop
 8008b32:	3714      	adds	r7, #20
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	3b10      	subs	r3, #16
 8008b4c:	4a14      	ldr	r2, [pc, #80]	; (8008ba0 <DMA_CalcBaseAndBitshift+0x64>)
 8008b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b52:	091b      	lsrs	r3, r3, #4
 8008b54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008b56:	4a13      	ldr	r2, [pc, #76]	; (8008ba4 <DMA_CalcBaseAndBitshift+0x68>)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	781b      	ldrb	r3, [r3, #0]
 8008b5e:	461a      	mov	r2, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2b03      	cmp	r3, #3
 8008b68:	d909      	bls.n	8008b7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008b72:	f023 0303 	bic.w	r3, r3, #3
 8008b76:	1d1a      	adds	r2, r3, #4
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	659a      	str	r2, [r3, #88]	; 0x58
 8008b7c:	e007      	b.n	8008b8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008b86:	f023 0303 	bic.w	r3, r3, #3
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3714      	adds	r7, #20
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	aaaaaaab 	.word	0xaaaaaaab
 8008ba4:	08014e58 	.word	0x08014e58

08008ba8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	699b      	ldr	r3, [r3, #24]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d11f      	bne.n	8008c02 <DMA_CheckFifoParam+0x5a>
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	2b03      	cmp	r3, #3
 8008bc6:	d856      	bhi.n	8008c76 <DMA_CheckFifoParam+0xce>
 8008bc8:	a201      	add	r2, pc, #4	; (adr r2, 8008bd0 <DMA_CheckFifoParam+0x28>)
 8008bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bce:	bf00      	nop
 8008bd0:	08008be1 	.word	0x08008be1
 8008bd4:	08008bf3 	.word	0x08008bf3
 8008bd8:	08008be1 	.word	0x08008be1
 8008bdc:	08008c77 	.word	0x08008c77
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008be4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d046      	beq.n	8008c7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008bf0:	e043      	b.n	8008c7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008bfa:	d140      	bne.n	8008c7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c00:	e03d      	b.n	8008c7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	699b      	ldr	r3, [r3, #24]
 8008c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c0a:	d121      	bne.n	8008c50 <DMA_CheckFifoParam+0xa8>
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	2b03      	cmp	r3, #3
 8008c10:	d837      	bhi.n	8008c82 <DMA_CheckFifoParam+0xda>
 8008c12:	a201      	add	r2, pc, #4	; (adr r2, 8008c18 <DMA_CheckFifoParam+0x70>)
 8008c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c18:	08008c29 	.word	0x08008c29
 8008c1c:	08008c2f 	.word	0x08008c2f
 8008c20:	08008c29 	.word	0x08008c29
 8008c24:	08008c41 	.word	0x08008c41
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c2c:	e030      	b.n	8008c90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d025      	beq.n	8008c86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c3e:	e022      	b.n	8008c86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c48:	d11f      	bne.n	8008c8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008c4e:	e01c      	b.n	8008c8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d903      	bls.n	8008c5e <DMA_CheckFifoParam+0xb6>
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	2b03      	cmp	r3, #3
 8008c5a:	d003      	beq.n	8008c64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008c5c:	e018      	b.n	8008c90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008c5e:	2301      	movs	r3, #1
 8008c60:	73fb      	strb	r3, [r7, #15]
      break;
 8008c62:	e015      	b.n	8008c90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d00e      	beq.n	8008c8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	73fb      	strb	r3, [r7, #15]
      break;
 8008c74:	e00b      	b.n	8008c8e <DMA_CheckFifoParam+0xe6>
      break;
 8008c76:	bf00      	nop
 8008c78:	e00a      	b.n	8008c90 <DMA_CheckFifoParam+0xe8>
      break;
 8008c7a:	bf00      	nop
 8008c7c:	e008      	b.n	8008c90 <DMA_CheckFifoParam+0xe8>
      break;
 8008c7e:	bf00      	nop
 8008c80:	e006      	b.n	8008c90 <DMA_CheckFifoParam+0xe8>
      break;
 8008c82:	bf00      	nop
 8008c84:	e004      	b.n	8008c90 <DMA_CheckFifoParam+0xe8>
      break;
 8008c86:	bf00      	nop
 8008c88:	e002      	b.n	8008c90 <DMA_CheckFifoParam+0xe8>
      break;   
 8008c8a:	bf00      	nop
 8008c8c:	e000      	b.n	8008c90 <DMA_CheckFifoParam+0xe8>
      break;
 8008c8e:	bf00      	nop
    }
  } 
  
  return status; 
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop

08008ca0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b089      	sub	sp, #36	; 0x24
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008caa:	2300      	movs	r3, #0
 8008cac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	61fb      	str	r3, [r7, #28]
 8008cba:	e16b      	b.n	8008f94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	69fb      	ldr	r3, [r7, #28]
 8008cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	4013      	ands	r3, r2
 8008cce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008cd0:	693a      	ldr	r2, [r7, #16]
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	f040 815a 	bne.w	8008f8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f003 0303 	and.w	r3, r3, #3
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d005      	beq.n	8008cf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008cee:	2b02      	cmp	r3, #2
 8008cf0:	d130      	bne.n	8008d54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	005b      	lsls	r3, r3, #1
 8008cfc:	2203      	movs	r2, #3
 8008cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008d02:	43db      	mvns	r3, r3
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	4013      	ands	r3, r2
 8008d08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	68da      	ldr	r2, [r3, #12]
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	005b      	lsls	r3, r3, #1
 8008d12:	fa02 f303 	lsl.w	r3, r2, r3
 8008d16:	69ba      	ldr	r2, [r7, #24]
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	69ba      	ldr	r2, [r7, #24]
 8008d20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008d28:	2201      	movs	r2, #1
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d30:	43db      	mvns	r3, r3
 8008d32:	69ba      	ldr	r2, [r7, #24]
 8008d34:	4013      	ands	r3, r2
 8008d36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	091b      	lsrs	r3, r3, #4
 8008d3e:	f003 0201 	and.w	r2, r3, #1
 8008d42:	69fb      	ldr	r3, [r7, #28]
 8008d44:	fa02 f303 	lsl.w	r3, r2, r3
 8008d48:	69ba      	ldr	r2, [r7, #24]
 8008d4a:	4313      	orrs	r3, r2
 8008d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	69ba      	ldr	r2, [r7, #24]
 8008d52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	f003 0303 	and.w	r3, r3, #3
 8008d5c:	2b03      	cmp	r3, #3
 8008d5e:	d017      	beq.n	8008d90 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	005b      	lsls	r3, r3, #1
 8008d6a:	2203      	movs	r2, #3
 8008d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d70:	43db      	mvns	r3, r3
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	4013      	ands	r3, r2
 8008d76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	689a      	ldr	r2, [r3, #8]
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	005b      	lsls	r3, r3, #1
 8008d80:	fa02 f303 	lsl.w	r3, r2, r3
 8008d84:	69ba      	ldr	r2, [r7, #24]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	69ba      	ldr	r2, [r7, #24]
 8008d8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	f003 0303 	and.w	r3, r3, #3
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d123      	bne.n	8008de4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	08da      	lsrs	r2, r3, #3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	3208      	adds	r2, #8
 8008da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008da8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	f003 0307 	and.w	r3, r3, #7
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	220f      	movs	r2, #15
 8008db4:	fa02 f303 	lsl.w	r3, r2, r3
 8008db8:	43db      	mvns	r3, r3
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	4013      	ands	r3, r2
 8008dbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	691a      	ldr	r2, [r3, #16]
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	f003 0307 	and.w	r3, r3, #7
 8008dca:	009b      	lsls	r3, r3, #2
 8008dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8008dd0:	69ba      	ldr	r2, [r7, #24]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	08da      	lsrs	r2, r3, #3
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	3208      	adds	r2, #8
 8008dde:	69b9      	ldr	r1, [r7, #24]
 8008de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	005b      	lsls	r3, r3, #1
 8008dee:	2203      	movs	r2, #3
 8008df0:	fa02 f303 	lsl.w	r3, r2, r3
 8008df4:	43db      	mvns	r3, r3
 8008df6:	69ba      	ldr	r2, [r7, #24]
 8008df8:	4013      	ands	r3, r2
 8008dfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f003 0203 	and.w	r2, r3, #3
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	005b      	lsls	r3, r3, #1
 8008e08:	fa02 f303 	lsl.w	r3, r2, r3
 8008e0c:	69ba      	ldr	r2, [r7, #24]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	69ba      	ldr	r2, [r7, #24]
 8008e16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 80b4 	beq.w	8008f8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]
 8008e2a:	4b60      	ldr	r3, [pc, #384]	; (8008fac <HAL_GPIO_Init+0x30c>)
 8008e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e2e:	4a5f      	ldr	r2, [pc, #380]	; (8008fac <HAL_GPIO_Init+0x30c>)
 8008e30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e34:	6453      	str	r3, [r2, #68]	; 0x44
 8008e36:	4b5d      	ldr	r3, [pc, #372]	; (8008fac <HAL_GPIO_Init+0x30c>)
 8008e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e42:	4a5b      	ldr	r2, [pc, #364]	; (8008fb0 <HAL_GPIO_Init+0x310>)
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	089b      	lsrs	r3, r3, #2
 8008e48:	3302      	adds	r3, #2
 8008e4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	f003 0303 	and.w	r3, r3, #3
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	220f      	movs	r2, #15
 8008e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5e:	43db      	mvns	r3, r3
 8008e60:	69ba      	ldr	r2, [r7, #24]
 8008e62:	4013      	ands	r3, r2
 8008e64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a52      	ldr	r2, [pc, #328]	; (8008fb4 <HAL_GPIO_Init+0x314>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d02b      	beq.n	8008ec6 <HAL_GPIO_Init+0x226>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a51      	ldr	r2, [pc, #324]	; (8008fb8 <HAL_GPIO_Init+0x318>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d025      	beq.n	8008ec2 <HAL_GPIO_Init+0x222>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a50      	ldr	r2, [pc, #320]	; (8008fbc <HAL_GPIO_Init+0x31c>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d01f      	beq.n	8008ebe <HAL_GPIO_Init+0x21e>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a4f      	ldr	r2, [pc, #316]	; (8008fc0 <HAL_GPIO_Init+0x320>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d019      	beq.n	8008eba <HAL_GPIO_Init+0x21a>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a4e      	ldr	r2, [pc, #312]	; (8008fc4 <HAL_GPIO_Init+0x324>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d013      	beq.n	8008eb6 <HAL_GPIO_Init+0x216>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	4a4d      	ldr	r2, [pc, #308]	; (8008fc8 <HAL_GPIO_Init+0x328>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d00d      	beq.n	8008eb2 <HAL_GPIO_Init+0x212>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	4a4c      	ldr	r2, [pc, #304]	; (8008fcc <HAL_GPIO_Init+0x32c>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d007      	beq.n	8008eae <HAL_GPIO_Init+0x20e>
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4a4b      	ldr	r2, [pc, #300]	; (8008fd0 <HAL_GPIO_Init+0x330>)
 8008ea2:	4293      	cmp	r3, r2
 8008ea4:	d101      	bne.n	8008eaa <HAL_GPIO_Init+0x20a>
 8008ea6:	2307      	movs	r3, #7
 8008ea8:	e00e      	b.n	8008ec8 <HAL_GPIO_Init+0x228>
 8008eaa:	2308      	movs	r3, #8
 8008eac:	e00c      	b.n	8008ec8 <HAL_GPIO_Init+0x228>
 8008eae:	2306      	movs	r3, #6
 8008eb0:	e00a      	b.n	8008ec8 <HAL_GPIO_Init+0x228>
 8008eb2:	2305      	movs	r3, #5
 8008eb4:	e008      	b.n	8008ec8 <HAL_GPIO_Init+0x228>
 8008eb6:	2304      	movs	r3, #4
 8008eb8:	e006      	b.n	8008ec8 <HAL_GPIO_Init+0x228>
 8008eba:	2303      	movs	r3, #3
 8008ebc:	e004      	b.n	8008ec8 <HAL_GPIO_Init+0x228>
 8008ebe:	2302      	movs	r3, #2
 8008ec0:	e002      	b.n	8008ec8 <HAL_GPIO_Init+0x228>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	e000      	b.n	8008ec8 <HAL_GPIO_Init+0x228>
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	69fa      	ldr	r2, [r7, #28]
 8008eca:	f002 0203 	and.w	r2, r2, #3
 8008ece:	0092      	lsls	r2, r2, #2
 8008ed0:	4093      	lsls	r3, r2
 8008ed2:	69ba      	ldr	r2, [r7, #24]
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008ed8:	4935      	ldr	r1, [pc, #212]	; (8008fb0 <HAL_GPIO_Init+0x310>)
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	089b      	lsrs	r3, r3, #2
 8008ede:	3302      	adds	r3, #2
 8008ee0:	69ba      	ldr	r2, [r7, #24]
 8008ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008ee6:	4b3b      	ldr	r3, [pc, #236]	; (8008fd4 <HAL_GPIO_Init+0x334>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	43db      	mvns	r3, r3
 8008ef0:	69ba      	ldr	r2, [r7, #24]
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d003      	beq.n	8008f0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008f02:	69ba      	ldr	r2, [r7, #24]
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008f0a:	4a32      	ldr	r2, [pc, #200]	; (8008fd4 <HAL_GPIO_Init+0x334>)
 8008f0c:	69bb      	ldr	r3, [r7, #24]
 8008f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008f10:	4b30      	ldr	r3, [pc, #192]	; (8008fd4 <HAL_GPIO_Init+0x334>)
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	43db      	mvns	r3, r3
 8008f1a:	69ba      	ldr	r2, [r7, #24]
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d003      	beq.n	8008f34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008f2c:	69ba      	ldr	r2, [r7, #24]
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	4313      	orrs	r3, r2
 8008f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008f34:	4a27      	ldr	r2, [pc, #156]	; (8008fd4 <HAL_GPIO_Init+0x334>)
 8008f36:	69bb      	ldr	r3, [r7, #24]
 8008f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008f3a:	4b26      	ldr	r3, [pc, #152]	; (8008fd4 <HAL_GPIO_Init+0x334>)
 8008f3c:	689b      	ldr	r3, [r3, #8]
 8008f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	43db      	mvns	r3, r3
 8008f44:	69ba      	ldr	r2, [r7, #24]
 8008f46:	4013      	ands	r3, r2
 8008f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d003      	beq.n	8008f5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008f56:	69ba      	ldr	r2, [r7, #24]
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008f5e:	4a1d      	ldr	r2, [pc, #116]	; (8008fd4 <HAL_GPIO_Init+0x334>)
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008f64:	4b1b      	ldr	r3, [pc, #108]	; (8008fd4 <HAL_GPIO_Init+0x334>)
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	43db      	mvns	r3, r3
 8008f6e:	69ba      	ldr	r2, [r7, #24]
 8008f70:	4013      	ands	r3, r2
 8008f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d003      	beq.n	8008f88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008f80:	69ba      	ldr	r2, [r7, #24]
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008f88:	4a12      	ldr	r2, [pc, #72]	; (8008fd4 <HAL_GPIO_Init+0x334>)
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	3301      	adds	r3, #1
 8008f92:	61fb      	str	r3, [r7, #28]
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	2b0f      	cmp	r3, #15
 8008f98:	f67f ae90 	bls.w	8008cbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008f9c:	bf00      	nop
 8008f9e:	bf00      	nop
 8008fa0:	3724      	adds	r7, #36	; 0x24
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr
 8008faa:	bf00      	nop
 8008fac:	40023800 	.word	0x40023800
 8008fb0:	40013800 	.word	0x40013800
 8008fb4:	40020000 	.word	0x40020000
 8008fb8:	40020400 	.word	0x40020400
 8008fbc:	40020800 	.word	0x40020800
 8008fc0:	40020c00 	.word	0x40020c00
 8008fc4:	40021000 	.word	0x40021000
 8008fc8:	40021400 	.word	0x40021400
 8008fcc:	40021800 	.word	0x40021800
 8008fd0:	40021c00 	.word	0x40021c00
 8008fd4:	40013c00 	.word	0x40013c00

08008fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	b083      	sub	sp, #12
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	460b      	mov	r3, r1
 8008fe2:	807b      	strh	r3, [r7, #2]
 8008fe4:	4613      	mov	r3, r2
 8008fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008fe8:	787b      	ldrb	r3, [r7, #1]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d003      	beq.n	8008ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008fee:	887a      	ldrh	r2, [r7, #2]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008ff4:	e003      	b.n	8008ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008ff6:	887b      	ldrh	r3, [r7, #2]
 8008ff8:	041a      	lsls	r2, r3, #16
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	619a      	str	r2, [r3, #24]
}
 8008ffe:	bf00      	nop
 8009000:	370c      	adds	r7, #12
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr
	...

0800900c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b086      	sub	sp, #24
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d101      	bne.n	800901e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800901a:	2301      	movs	r3, #1
 800901c:	e264      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0301 	and.w	r3, r3, #1
 8009026:	2b00      	cmp	r3, #0
 8009028:	d075      	beq.n	8009116 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800902a:	4ba3      	ldr	r3, [pc, #652]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	f003 030c 	and.w	r3, r3, #12
 8009032:	2b04      	cmp	r3, #4
 8009034:	d00c      	beq.n	8009050 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009036:	4ba0      	ldr	r3, [pc, #640]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 8009038:	689b      	ldr	r3, [r3, #8]
 800903a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800903e:	2b08      	cmp	r3, #8
 8009040:	d112      	bne.n	8009068 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009042:	4b9d      	ldr	r3, [pc, #628]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800904a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800904e:	d10b      	bne.n	8009068 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009050:	4b99      	ldr	r3, [pc, #612]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009058:	2b00      	cmp	r3, #0
 800905a:	d05b      	beq.n	8009114 <HAL_RCC_OscConfig+0x108>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	685b      	ldr	r3, [r3, #4]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d157      	bne.n	8009114 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e23f      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009070:	d106      	bne.n	8009080 <HAL_RCC_OscConfig+0x74>
 8009072:	4b91      	ldr	r3, [pc, #580]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a90      	ldr	r2, [pc, #576]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 8009078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	e01d      	b.n	80090bc <HAL_RCC_OscConfig+0xb0>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009088:	d10c      	bne.n	80090a4 <HAL_RCC_OscConfig+0x98>
 800908a:	4b8b      	ldr	r3, [pc, #556]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a8a      	ldr	r2, [pc, #552]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 8009090:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009094:	6013      	str	r3, [r2, #0]
 8009096:	4b88      	ldr	r3, [pc, #544]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a87      	ldr	r2, [pc, #540]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 800909c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	e00b      	b.n	80090bc <HAL_RCC_OscConfig+0xb0>
 80090a4:	4b84      	ldr	r3, [pc, #528]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a83      	ldr	r2, [pc, #524]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 80090aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80090ae:	6013      	str	r3, [r2, #0]
 80090b0:	4b81      	ldr	r3, [pc, #516]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a80      	ldr	r2, [pc, #512]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 80090b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80090ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d013      	beq.n	80090ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090c4:	f7ff f8a8 	bl	8008218 <HAL_GetTick>
 80090c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090ca:	e008      	b.n	80090de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090cc:	f7ff f8a4 	bl	8008218 <HAL_GetTick>
 80090d0:	4602      	mov	r2, r0
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	1ad3      	subs	r3, r2, r3
 80090d6:	2b64      	cmp	r3, #100	; 0x64
 80090d8:	d901      	bls.n	80090de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80090da:	2303      	movs	r3, #3
 80090dc:	e204      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090de:	4b76      	ldr	r3, [pc, #472]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d0f0      	beq.n	80090cc <HAL_RCC_OscConfig+0xc0>
 80090ea:	e014      	b.n	8009116 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090ec:	f7ff f894 	bl	8008218 <HAL_GetTick>
 80090f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090f2:	e008      	b.n	8009106 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090f4:	f7ff f890 	bl	8008218 <HAL_GetTick>
 80090f8:	4602      	mov	r2, r0
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	1ad3      	subs	r3, r2, r3
 80090fe:	2b64      	cmp	r3, #100	; 0x64
 8009100:	d901      	bls.n	8009106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	e1f0      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009106:	4b6c      	ldr	r3, [pc, #432]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1f0      	bne.n	80090f4 <HAL_RCC_OscConfig+0xe8>
 8009112:	e000      	b.n	8009116 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009114:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 0302 	and.w	r3, r3, #2
 800911e:	2b00      	cmp	r3, #0
 8009120:	d063      	beq.n	80091ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009122:	4b65      	ldr	r3, [pc, #404]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	f003 030c 	and.w	r3, r3, #12
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00b      	beq.n	8009146 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800912e:	4b62      	ldr	r3, [pc, #392]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009136:	2b08      	cmp	r3, #8
 8009138:	d11c      	bne.n	8009174 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800913a:	4b5f      	ldr	r3, [pc, #380]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d116      	bne.n	8009174 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009146:	4b5c      	ldr	r3, [pc, #368]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	2b00      	cmp	r3, #0
 8009150:	d005      	beq.n	800915e <HAL_RCC_OscConfig+0x152>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68db      	ldr	r3, [r3, #12]
 8009156:	2b01      	cmp	r3, #1
 8009158:	d001      	beq.n	800915e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e1c4      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800915e:	4b56      	ldr	r3, [pc, #344]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	00db      	lsls	r3, r3, #3
 800916c:	4952      	ldr	r1, [pc, #328]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 800916e:	4313      	orrs	r3, r2
 8009170:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009172:	e03a      	b.n	80091ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d020      	beq.n	80091be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800917c:	4b4f      	ldr	r3, [pc, #316]	; (80092bc <HAL_RCC_OscConfig+0x2b0>)
 800917e:	2201      	movs	r2, #1
 8009180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009182:	f7ff f849 	bl	8008218 <HAL_GetTick>
 8009186:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009188:	e008      	b.n	800919c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800918a:	f7ff f845 	bl	8008218 <HAL_GetTick>
 800918e:	4602      	mov	r2, r0
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	2b02      	cmp	r3, #2
 8009196:	d901      	bls.n	800919c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	e1a5      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800919c:	4b46      	ldr	r3, [pc, #280]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 0302 	and.w	r3, r3, #2
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d0f0      	beq.n	800918a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80091a8:	4b43      	ldr	r3, [pc, #268]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	00db      	lsls	r3, r3, #3
 80091b6:	4940      	ldr	r1, [pc, #256]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 80091b8:	4313      	orrs	r3, r2
 80091ba:	600b      	str	r3, [r1, #0]
 80091bc:	e015      	b.n	80091ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80091be:	4b3f      	ldr	r3, [pc, #252]	; (80092bc <HAL_RCC_OscConfig+0x2b0>)
 80091c0:	2200      	movs	r2, #0
 80091c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091c4:	f7ff f828 	bl	8008218 <HAL_GetTick>
 80091c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091ca:	e008      	b.n	80091de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80091cc:	f7ff f824 	bl	8008218 <HAL_GetTick>
 80091d0:	4602      	mov	r2, r0
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	1ad3      	subs	r3, r2, r3
 80091d6:	2b02      	cmp	r3, #2
 80091d8:	d901      	bls.n	80091de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80091da:	2303      	movs	r3, #3
 80091dc:	e184      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80091de:	4b36      	ldr	r3, [pc, #216]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0302 	and.w	r3, r3, #2
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1f0      	bne.n	80091cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 0308 	and.w	r3, r3, #8
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d030      	beq.n	8009258 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	695b      	ldr	r3, [r3, #20]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d016      	beq.n	800922c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091fe:	4b30      	ldr	r3, [pc, #192]	; (80092c0 <HAL_RCC_OscConfig+0x2b4>)
 8009200:	2201      	movs	r2, #1
 8009202:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009204:	f7ff f808 	bl	8008218 <HAL_GetTick>
 8009208:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800920a:	e008      	b.n	800921e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800920c:	f7ff f804 	bl	8008218 <HAL_GetTick>
 8009210:	4602      	mov	r2, r0
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	1ad3      	subs	r3, r2, r3
 8009216:	2b02      	cmp	r3, #2
 8009218:	d901      	bls.n	800921e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800921a:	2303      	movs	r3, #3
 800921c:	e164      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800921e:	4b26      	ldr	r3, [pc, #152]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 8009220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009222:	f003 0302 	and.w	r3, r3, #2
 8009226:	2b00      	cmp	r3, #0
 8009228:	d0f0      	beq.n	800920c <HAL_RCC_OscConfig+0x200>
 800922a:	e015      	b.n	8009258 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800922c:	4b24      	ldr	r3, [pc, #144]	; (80092c0 <HAL_RCC_OscConfig+0x2b4>)
 800922e:	2200      	movs	r2, #0
 8009230:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009232:	f7fe fff1 	bl	8008218 <HAL_GetTick>
 8009236:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009238:	e008      	b.n	800924c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800923a:	f7fe ffed 	bl	8008218 <HAL_GetTick>
 800923e:	4602      	mov	r2, r0
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	1ad3      	subs	r3, r2, r3
 8009244:	2b02      	cmp	r3, #2
 8009246:	d901      	bls.n	800924c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009248:	2303      	movs	r3, #3
 800924a:	e14d      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800924c:	4b1a      	ldr	r3, [pc, #104]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 800924e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009250:	f003 0302 	and.w	r3, r3, #2
 8009254:	2b00      	cmp	r3, #0
 8009256:	d1f0      	bne.n	800923a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0304 	and.w	r3, r3, #4
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 80a0 	beq.w	80093a6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009266:	2300      	movs	r3, #0
 8009268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800926a:	4b13      	ldr	r3, [pc, #76]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 800926c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800926e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d10f      	bne.n	8009296 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009276:	2300      	movs	r3, #0
 8009278:	60bb      	str	r3, [r7, #8]
 800927a:	4b0f      	ldr	r3, [pc, #60]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 800927c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927e:	4a0e      	ldr	r2, [pc, #56]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 8009280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009284:	6413      	str	r3, [r2, #64]	; 0x40
 8009286:	4b0c      	ldr	r3, [pc, #48]	; (80092b8 <HAL_RCC_OscConfig+0x2ac>)
 8009288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800928a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800928e:	60bb      	str	r3, [r7, #8]
 8009290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009292:	2301      	movs	r3, #1
 8009294:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009296:	4b0b      	ldr	r3, [pc, #44]	; (80092c4 <HAL_RCC_OscConfig+0x2b8>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d121      	bne.n	80092e6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80092a2:	4b08      	ldr	r3, [pc, #32]	; (80092c4 <HAL_RCC_OscConfig+0x2b8>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	4a07      	ldr	r2, [pc, #28]	; (80092c4 <HAL_RCC_OscConfig+0x2b8>)
 80092a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80092ae:	f7fe ffb3 	bl	8008218 <HAL_GetTick>
 80092b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092b4:	e011      	b.n	80092da <HAL_RCC_OscConfig+0x2ce>
 80092b6:	bf00      	nop
 80092b8:	40023800 	.word	0x40023800
 80092bc:	42470000 	.word	0x42470000
 80092c0:	42470e80 	.word	0x42470e80
 80092c4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092c8:	f7fe ffa6 	bl	8008218 <HAL_GetTick>
 80092cc:	4602      	mov	r2, r0
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	1ad3      	subs	r3, r2, r3
 80092d2:	2b02      	cmp	r3, #2
 80092d4:	d901      	bls.n	80092da <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80092d6:	2303      	movs	r3, #3
 80092d8:	e106      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80092da:	4b85      	ldr	r3, [pc, #532]	; (80094f0 <HAL_RCC_OscConfig+0x4e4>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d0f0      	beq.n	80092c8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d106      	bne.n	80092fc <HAL_RCC_OscConfig+0x2f0>
 80092ee:	4b81      	ldr	r3, [pc, #516]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 80092f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092f2:	4a80      	ldr	r2, [pc, #512]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 80092f4:	f043 0301 	orr.w	r3, r3, #1
 80092f8:	6713      	str	r3, [r2, #112]	; 0x70
 80092fa:	e01c      	b.n	8009336 <HAL_RCC_OscConfig+0x32a>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	2b05      	cmp	r3, #5
 8009302:	d10c      	bne.n	800931e <HAL_RCC_OscConfig+0x312>
 8009304:	4b7b      	ldr	r3, [pc, #492]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 8009306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009308:	4a7a      	ldr	r2, [pc, #488]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 800930a:	f043 0304 	orr.w	r3, r3, #4
 800930e:	6713      	str	r3, [r2, #112]	; 0x70
 8009310:	4b78      	ldr	r3, [pc, #480]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 8009312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009314:	4a77      	ldr	r2, [pc, #476]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 8009316:	f043 0301 	orr.w	r3, r3, #1
 800931a:	6713      	str	r3, [r2, #112]	; 0x70
 800931c:	e00b      	b.n	8009336 <HAL_RCC_OscConfig+0x32a>
 800931e:	4b75      	ldr	r3, [pc, #468]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 8009320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009322:	4a74      	ldr	r2, [pc, #464]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 8009324:	f023 0301 	bic.w	r3, r3, #1
 8009328:	6713      	str	r3, [r2, #112]	; 0x70
 800932a:	4b72      	ldr	r3, [pc, #456]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 800932c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800932e:	4a71      	ldr	r2, [pc, #452]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 8009330:	f023 0304 	bic.w	r3, r3, #4
 8009334:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	689b      	ldr	r3, [r3, #8]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d015      	beq.n	800936a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800933e:	f7fe ff6b 	bl	8008218 <HAL_GetTick>
 8009342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009344:	e00a      	b.n	800935c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009346:	f7fe ff67 	bl	8008218 <HAL_GetTick>
 800934a:	4602      	mov	r2, r0
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	1ad3      	subs	r3, r2, r3
 8009350:	f241 3288 	movw	r2, #5000	; 0x1388
 8009354:	4293      	cmp	r3, r2
 8009356:	d901      	bls.n	800935c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009358:	2303      	movs	r3, #3
 800935a:	e0c5      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800935c:	4b65      	ldr	r3, [pc, #404]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 800935e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009360:	f003 0302 	and.w	r3, r3, #2
 8009364:	2b00      	cmp	r3, #0
 8009366:	d0ee      	beq.n	8009346 <HAL_RCC_OscConfig+0x33a>
 8009368:	e014      	b.n	8009394 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800936a:	f7fe ff55 	bl	8008218 <HAL_GetTick>
 800936e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009370:	e00a      	b.n	8009388 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009372:	f7fe ff51 	bl	8008218 <HAL_GetTick>
 8009376:	4602      	mov	r2, r0
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	1ad3      	subs	r3, r2, r3
 800937c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009380:	4293      	cmp	r3, r2
 8009382:	d901      	bls.n	8009388 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e0af      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009388:	4b5a      	ldr	r3, [pc, #360]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 800938a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800938c:	f003 0302 	and.w	r3, r3, #2
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1ee      	bne.n	8009372 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009394:	7dfb      	ldrb	r3, [r7, #23]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d105      	bne.n	80093a6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800939a:	4b56      	ldr	r3, [pc, #344]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 800939c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939e:	4a55      	ldr	r2, [pc, #340]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 80093a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80093a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	f000 809b 	beq.w	80094e6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80093b0:	4b50      	ldr	r3, [pc, #320]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 80093b2:	689b      	ldr	r3, [r3, #8]
 80093b4:	f003 030c 	and.w	r3, r3, #12
 80093b8:	2b08      	cmp	r3, #8
 80093ba:	d05c      	beq.n	8009476 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	699b      	ldr	r3, [r3, #24]
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d141      	bne.n	8009448 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093c4:	4b4c      	ldr	r3, [pc, #304]	; (80094f8 <HAL_RCC_OscConfig+0x4ec>)
 80093c6:	2200      	movs	r2, #0
 80093c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093ca:	f7fe ff25 	bl	8008218 <HAL_GetTick>
 80093ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093d0:	e008      	b.n	80093e4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093d2:	f7fe ff21 	bl	8008218 <HAL_GetTick>
 80093d6:	4602      	mov	r2, r0
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	1ad3      	subs	r3, r2, r3
 80093dc:	2b02      	cmp	r3, #2
 80093de:	d901      	bls.n	80093e4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80093e0:	2303      	movs	r3, #3
 80093e2:	e081      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093e4:	4b43      	ldr	r3, [pc, #268]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d1f0      	bne.n	80093d2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	69da      	ldr	r2, [r3, #28]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6a1b      	ldr	r3, [r3, #32]
 80093f8:	431a      	orrs	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093fe:	019b      	lsls	r3, r3, #6
 8009400:	431a      	orrs	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009406:	085b      	lsrs	r3, r3, #1
 8009408:	3b01      	subs	r3, #1
 800940a:	041b      	lsls	r3, r3, #16
 800940c:	431a      	orrs	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009412:	061b      	lsls	r3, r3, #24
 8009414:	4937      	ldr	r1, [pc, #220]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 8009416:	4313      	orrs	r3, r2
 8009418:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800941a:	4b37      	ldr	r3, [pc, #220]	; (80094f8 <HAL_RCC_OscConfig+0x4ec>)
 800941c:	2201      	movs	r2, #1
 800941e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009420:	f7fe fefa 	bl	8008218 <HAL_GetTick>
 8009424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009426:	e008      	b.n	800943a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009428:	f7fe fef6 	bl	8008218 <HAL_GetTick>
 800942c:	4602      	mov	r2, r0
 800942e:	693b      	ldr	r3, [r7, #16]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	2b02      	cmp	r3, #2
 8009434:	d901      	bls.n	800943a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e056      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800943a:	4b2e      	ldr	r3, [pc, #184]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d0f0      	beq.n	8009428 <HAL_RCC_OscConfig+0x41c>
 8009446:	e04e      	b.n	80094e6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009448:	4b2b      	ldr	r3, [pc, #172]	; (80094f8 <HAL_RCC_OscConfig+0x4ec>)
 800944a:	2200      	movs	r2, #0
 800944c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800944e:	f7fe fee3 	bl	8008218 <HAL_GetTick>
 8009452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009454:	e008      	b.n	8009468 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009456:	f7fe fedf 	bl	8008218 <HAL_GetTick>
 800945a:	4602      	mov	r2, r0
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	1ad3      	subs	r3, r2, r3
 8009460:	2b02      	cmp	r3, #2
 8009462:	d901      	bls.n	8009468 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009464:	2303      	movs	r3, #3
 8009466:	e03f      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009468:	4b22      	ldr	r3, [pc, #136]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1f0      	bne.n	8009456 <HAL_RCC_OscConfig+0x44a>
 8009474:	e037      	b.n	80094e6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	699b      	ldr	r3, [r3, #24]
 800947a:	2b01      	cmp	r3, #1
 800947c:	d101      	bne.n	8009482 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800947e:	2301      	movs	r3, #1
 8009480:	e032      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009482:	4b1c      	ldr	r3, [pc, #112]	; (80094f4 <HAL_RCC_OscConfig+0x4e8>)
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	2b01      	cmp	r3, #1
 800948e:	d028      	beq.n	80094e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800949a:	429a      	cmp	r2, r3
 800949c:	d121      	bne.n	80094e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d11a      	bne.n	80094e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80094b2:	4013      	ands	r3, r2
 80094b4:	687a      	ldr	r2, [r7, #4]
 80094b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80094b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d111      	bne.n	80094e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094c8:	085b      	lsrs	r3, r3, #1
 80094ca:	3b01      	subs	r3, #1
 80094cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d107      	bne.n	80094e2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094de:	429a      	cmp	r2, r3
 80094e0:	d001      	beq.n	80094e6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e000      	b.n	80094e8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80094e6:	2300      	movs	r3, #0
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3718      	adds	r7, #24
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	40007000 	.word	0x40007000
 80094f4:	40023800 	.word	0x40023800
 80094f8:	42470060 	.word	0x42470060

080094fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d101      	bne.n	8009510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	e0cc      	b.n	80096aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009510:	4b68      	ldr	r3, [pc, #416]	; (80096b4 <HAL_RCC_ClockConfig+0x1b8>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f003 0307 	and.w	r3, r3, #7
 8009518:	683a      	ldr	r2, [r7, #0]
 800951a:	429a      	cmp	r2, r3
 800951c:	d90c      	bls.n	8009538 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800951e:	4b65      	ldr	r3, [pc, #404]	; (80096b4 <HAL_RCC_ClockConfig+0x1b8>)
 8009520:	683a      	ldr	r2, [r7, #0]
 8009522:	b2d2      	uxtb	r2, r2
 8009524:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009526:	4b63      	ldr	r3, [pc, #396]	; (80096b4 <HAL_RCC_ClockConfig+0x1b8>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 0307 	and.w	r3, r3, #7
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	429a      	cmp	r2, r3
 8009532:	d001      	beq.n	8009538 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e0b8      	b.n	80096aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 0302 	and.w	r3, r3, #2
 8009540:	2b00      	cmp	r3, #0
 8009542:	d020      	beq.n	8009586 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	f003 0304 	and.w	r3, r3, #4
 800954c:	2b00      	cmp	r3, #0
 800954e:	d005      	beq.n	800955c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009550:	4b59      	ldr	r3, [pc, #356]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	4a58      	ldr	r2, [pc, #352]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009556:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800955a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f003 0308 	and.w	r3, r3, #8
 8009564:	2b00      	cmp	r3, #0
 8009566:	d005      	beq.n	8009574 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009568:	4b53      	ldr	r3, [pc, #332]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 800956a:	689b      	ldr	r3, [r3, #8]
 800956c:	4a52      	ldr	r2, [pc, #328]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 800956e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009572:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009574:	4b50      	ldr	r3, [pc, #320]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009576:	689b      	ldr	r3, [r3, #8]
 8009578:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	494d      	ldr	r1, [pc, #308]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009582:	4313      	orrs	r3, r2
 8009584:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	2b00      	cmp	r3, #0
 8009590:	d044      	beq.n	800961c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	685b      	ldr	r3, [r3, #4]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d107      	bne.n	80095aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800959a:	4b47      	ldr	r3, [pc, #284]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d119      	bne.n	80095da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095a6:	2301      	movs	r3, #1
 80095a8:	e07f      	b.n	80096aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	2b02      	cmp	r3, #2
 80095b0:	d003      	beq.n	80095ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80095b6:	2b03      	cmp	r3, #3
 80095b8:	d107      	bne.n	80095ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80095ba:	4b3f      	ldr	r3, [pc, #252]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d109      	bne.n	80095da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095c6:	2301      	movs	r3, #1
 80095c8:	e06f      	b.n	80096aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80095ca:	4b3b      	ldr	r3, [pc, #236]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d101      	bne.n	80095da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80095d6:	2301      	movs	r3, #1
 80095d8:	e067      	b.n	80096aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80095da:	4b37      	ldr	r3, [pc, #220]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 80095dc:	689b      	ldr	r3, [r3, #8]
 80095de:	f023 0203 	bic.w	r2, r3, #3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	4934      	ldr	r1, [pc, #208]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 80095e8:	4313      	orrs	r3, r2
 80095ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80095ec:	f7fe fe14 	bl	8008218 <HAL_GetTick>
 80095f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095f2:	e00a      	b.n	800960a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095f4:	f7fe fe10 	bl	8008218 <HAL_GetTick>
 80095f8:	4602      	mov	r2, r0
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	1ad3      	subs	r3, r2, r3
 80095fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009602:	4293      	cmp	r3, r2
 8009604:	d901      	bls.n	800960a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e04f      	b.n	80096aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800960a:	4b2b      	ldr	r3, [pc, #172]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f003 020c 	and.w	r2, r3, #12
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	429a      	cmp	r2, r3
 800961a:	d1eb      	bne.n	80095f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800961c:	4b25      	ldr	r3, [pc, #148]	; (80096b4 <HAL_RCC_ClockConfig+0x1b8>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 0307 	and.w	r3, r3, #7
 8009624:	683a      	ldr	r2, [r7, #0]
 8009626:	429a      	cmp	r2, r3
 8009628:	d20c      	bcs.n	8009644 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800962a:	4b22      	ldr	r3, [pc, #136]	; (80096b4 <HAL_RCC_ClockConfig+0x1b8>)
 800962c:	683a      	ldr	r2, [r7, #0]
 800962e:	b2d2      	uxtb	r2, r2
 8009630:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009632:	4b20      	ldr	r3, [pc, #128]	; (80096b4 <HAL_RCC_ClockConfig+0x1b8>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f003 0307 	and.w	r3, r3, #7
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	429a      	cmp	r2, r3
 800963e:	d001      	beq.n	8009644 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009640:	2301      	movs	r3, #1
 8009642:	e032      	b.n	80096aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f003 0304 	and.w	r3, r3, #4
 800964c:	2b00      	cmp	r3, #0
 800964e:	d008      	beq.n	8009662 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009650:	4b19      	ldr	r3, [pc, #100]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	4916      	ldr	r1, [pc, #88]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 800965e:	4313      	orrs	r3, r2
 8009660:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 0308 	and.w	r3, r3, #8
 800966a:	2b00      	cmp	r3, #0
 800966c:	d009      	beq.n	8009682 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800966e:	4b12      	ldr	r3, [pc, #72]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 8009670:	689b      	ldr	r3, [r3, #8]
 8009672:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	00db      	lsls	r3, r3, #3
 800967c:	490e      	ldr	r1, [pc, #56]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 800967e:	4313      	orrs	r3, r2
 8009680:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009682:	f000 f82d 	bl	80096e0 <HAL_RCC_GetSysClockFreq>
 8009686:	4602      	mov	r2, r0
 8009688:	4b0b      	ldr	r3, [pc, #44]	; (80096b8 <HAL_RCC_ClockConfig+0x1bc>)
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	091b      	lsrs	r3, r3, #4
 800968e:	f003 030f 	and.w	r3, r3, #15
 8009692:	490a      	ldr	r1, [pc, #40]	; (80096bc <HAL_RCC_ClockConfig+0x1c0>)
 8009694:	5ccb      	ldrb	r3, [r1, r3]
 8009696:	fa22 f303 	lsr.w	r3, r2, r3
 800969a:	4a09      	ldr	r2, [pc, #36]	; (80096c0 <HAL_RCC_ClockConfig+0x1c4>)
 800969c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800969e:	4b09      	ldr	r3, [pc, #36]	; (80096c4 <HAL_RCC_ClockConfig+0x1c8>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fe fd74 	bl	8008190 <HAL_InitTick>

  return HAL_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3710      	adds	r7, #16
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	40023c00 	.word	0x40023c00
 80096b8:	40023800 	.word	0x40023800
 80096bc:	08010700 	.word	0x08010700
 80096c0:	200004e0 	.word	0x200004e0
 80096c4:	2000051c 	.word	0x2000051c

080096c8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80096c8:	b480      	push	{r7}
 80096ca:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80096cc:	4b03      	ldr	r3, [pc, #12]	; (80096dc <HAL_RCC_EnableCSS+0x14>)
 80096ce:	2201      	movs	r2, #1
 80096d0:	601a      	str	r2, [r3, #0]
}
 80096d2:	bf00      	nop
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	4247004c 	.word	0x4247004c

080096e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80096e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80096e4:	b084      	sub	sp, #16
 80096e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80096e8:	2300      	movs	r3, #0
 80096ea:	607b      	str	r3, [r7, #4]
 80096ec:	2300      	movs	r3, #0
 80096ee:	60fb      	str	r3, [r7, #12]
 80096f0:	2300      	movs	r3, #0
 80096f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80096f4:	2300      	movs	r3, #0
 80096f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80096f8:	4b67      	ldr	r3, [pc, #412]	; (8009898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	f003 030c 	and.w	r3, r3, #12
 8009700:	2b08      	cmp	r3, #8
 8009702:	d00d      	beq.n	8009720 <HAL_RCC_GetSysClockFreq+0x40>
 8009704:	2b08      	cmp	r3, #8
 8009706:	f200 80bd 	bhi.w	8009884 <HAL_RCC_GetSysClockFreq+0x1a4>
 800970a:	2b00      	cmp	r3, #0
 800970c:	d002      	beq.n	8009714 <HAL_RCC_GetSysClockFreq+0x34>
 800970e:	2b04      	cmp	r3, #4
 8009710:	d003      	beq.n	800971a <HAL_RCC_GetSysClockFreq+0x3a>
 8009712:	e0b7      	b.n	8009884 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009714:	4b61      	ldr	r3, [pc, #388]	; (800989c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009716:	60bb      	str	r3, [r7, #8]
       break;
 8009718:	e0b7      	b.n	800988a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800971a:	4b61      	ldr	r3, [pc, #388]	; (80098a0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800971c:	60bb      	str	r3, [r7, #8]
      break;
 800971e:	e0b4      	b.n	800988a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009720:	4b5d      	ldr	r3, [pc, #372]	; (8009898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009728:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800972a:	4b5b      	ldr	r3, [pc, #364]	; (8009898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d04d      	beq.n	80097d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009736:	4b58      	ldr	r3, [pc, #352]	; (8009898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	099b      	lsrs	r3, r3, #6
 800973c:	461a      	mov	r2, r3
 800973e:	f04f 0300 	mov.w	r3, #0
 8009742:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009746:	f04f 0100 	mov.w	r1, #0
 800974a:	ea02 0800 	and.w	r8, r2, r0
 800974e:	ea03 0901 	and.w	r9, r3, r1
 8009752:	4640      	mov	r0, r8
 8009754:	4649      	mov	r1, r9
 8009756:	f04f 0200 	mov.w	r2, #0
 800975a:	f04f 0300 	mov.w	r3, #0
 800975e:	014b      	lsls	r3, r1, #5
 8009760:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009764:	0142      	lsls	r2, r0, #5
 8009766:	4610      	mov	r0, r2
 8009768:	4619      	mov	r1, r3
 800976a:	ebb0 0008 	subs.w	r0, r0, r8
 800976e:	eb61 0109 	sbc.w	r1, r1, r9
 8009772:	f04f 0200 	mov.w	r2, #0
 8009776:	f04f 0300 	mov.w	r3, #0
 800977a:	018b      	lsls	r3, r1, #6
 800977c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009780:	0182      	lsls	r2, r0, #6
 8009782:	1a12      	subs	r2, r2, r0
 8009784:	eb63 0301 	sbc.w	r3, r3, r1
 8009788:	f04f 0000 	mov.w	r0, #0
 800978c:	f04f 0100 	mov.w	r1, #0
 8009790:	00d9      	lsls	r1, r3, #3
 8009792:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009796:	00d0      	lsls	r0, r2, #3
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	eb12 0208 	adds.w	r2, r2, r8
 80097a0:	eb43 0309 	adc.w	r3, r3, r9
 80097a4:	f04f 0000 	mov.w	r0, #0
 80097a8:	f04f 0100 	mov.w	r1, #0
 80097ac:	0259      	lsls	r1, r3, #9
 80097ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80097b2:	0250      	lsls	r0, r2, #9
 80097b4:	4602      	mov	r2, r0
 80097b6:	460b      	mov	r3, r1
 80097b8:	4610      	mov	r0, r2
 80097ba:	4619      	mov	r1, r3
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	461a      	mov	r2, r3
 80097c0:	f04f 0300 	mov.w	r3, #0
 80097c4:	f7f7 fa60 	bl	8000c88 <__aeabi_uldivmod>
 80097c8:	4602      	mov	r2, r0
 80097ca:	460b      	mov	r3, r1
 80097cc:	4613      	mov	r3, r2
 80097ce:	60fb      	str	r3, [r7, #12]
 80097d0:	e04a      	b.n	8009868 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097d2:	4b31      	ldr	r3, [pc, #196]	; (8009898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	099b      	lsrs	r3, r3, #6
 80097d8:	461a      	mov	r2, r3
 80097da:	f04f 0300 	mov.w	r3, #0
 80097de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80097e2:	f04f 0100 	mov.w	r1, #0
 80097e6:	ea02 0400 	and.w	r4, r2, r0
 80097ea:	ea03 0501 	and.w	r5, r3, r1
 80097ee:	4620      	mov	r0, r4
 80097f0:	4629      	mov	r1, r5
 80097f2:	f04f 0200 	mov.w	r2, #0
 80097f6:	f04f 0300 	mov.w	r3, #0
 80097fa:	014b      	lsls	r3, r1, #5
 80097fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009800:	0142      	lsls	r2, r0, #5
 8009802:	4610      	mov	r0, r2
 8009804:	4619      	mov	r1, r3
 8009806:	1b00      	subs	r0, r0, r4
 8009808:	eb61 0105 	sbc.w	r1, r1, r5
 800980c:	f04f 0200 	mov.w	r2, #0
 8009810:	f04f 0300 	mov.w	r3, #0
 8009814:	018b      	lsls	r3, r1, #6
 8009816:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800981a:	0182      	lsls	r2, r0, #6
 800981c:	1a12      	subs	r2, r2, r0
 800981e:	eb63 0301 	sbc.w	r3, r3, r1
 8009822:	f04f 0000 	mov.w	r0, #0
 8009826:	f04f 0100 	mov.w	r1, #0
 800982a:	00d9      	lsls	r1, r3, #3
 800982c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009830:	00d0      	lsls	r0, r2, #3
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	1912      	adds	r2, r2, r4
 8009838:	eb45 0303 	adc.w	r3, r5, r3
 800983c:	f04f 0000 	mov.w	r0, #0
 8009840:	f04f 0100 	mov.w	r1, #0
 8009844:	0299      	lsls	r1, r3, #10
 8009846:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800984a:	0290      	lsls	r0, r2, #10
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	4610      	mov	r0, r2
 8009852:	4619      	mov	r1, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	461a      	mov	r2, r3
 8009858:	f04f 0300 	mov.w	r3, #0
 800985c:	f7f7 fa14 	bl	8000c88 <__aeabi_uldivmod>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4613      	mov	r3, r2
 8009866:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009868:	4b0b      	ldr	r3, [pc, #44]	; (8009898 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	0c1b      	lsrs	r3, r3, #16
 800986e:	f003 0303 	and.w	r3, r3, #3
 8009872:	3301      	adds	r3, #1
 8009874:	005b      	lsls	r3, r3, #1
 8009876:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009878:	68fa      	ldr	r2, [r7, #12]
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009880:	60bb      	str	r3, [r7, #8]
      break;
 8009882:	e002      	b.n	800988a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009884:	4b05      	ldr	r3, [pc, #20]	; (800989c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8009886:	60bb      	str	r3, [r7, #8]
      break;
 8009888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800988a:	68bb      	ldr	r3, [r7, #8]
}
 800988c:	4618      	mov	r0, r3
 800988e:	3710      	adds	r7, #16
 8009890:	46bd      	mov	sp, r7
 8009892:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8009896:	bf00      	nop
 8009898:	40023800 	.word	0x40023800
 800989c:	00f42400 	.word	0x00f42400
 80098a0:	007a1200 	.word	0x007a1200

080098a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80098a4:	b480      	push	{r7}
 80098a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80098a8:	4b03      	ldr	r3, [pc, #12]	; (80098b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80098aa:	681b      	ldr	r3, [r3, #0]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	200004e0 	.word	0x200004e0

080098bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80098c0:	f7ff fff0 	bl	80098a4 <HAL_RCC_GetHCLKFreq>
 80098c4:	4602      	mov	r2, r0
 80098c6:	4b05      	ldr	r3, [pc, #20]	; (80098dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80098c8:	689b      	ldr	r3, [r3, #8]
 80098ca:	0a9b      	lsrs	r3, r3, #10
 80098cc:	f003 0307 	and.w	r3, r3, #7
 80098d0:	4903      	ldr	r1, [pc, #12]	; (80098e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80098d2:	5ccb      	ldrb	r3, [r1, r3]
 80098d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098d8:	4618      	mov	r0, r3
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	40023800 	.word	0x40023800
 80098e0:	08010710 	.word	0x08010710

080098e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80098e8:	f7ff ffdc 	bl	80098a4 <HAL_RCC_GetHCLKFreq>
 80098ec:	4602      	mov	r2, r0
 80098ee:	4b05      	ldr	r3, [pc, #20]	; (8009904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80098f0:	689b      	ldr	r3, [r3, #8]
 80098f2:	0b5b      	lsrs	r3, r3, #13
 80098f4:	f003 0307 	and.w	r3, r3, #7
 80098f8:	4903      	ldr	r1, [pc, #12]	; (8009908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098fa:	5ccb      	ldrb	r3, [r1, r3]
 80098fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009900:	4618      	mov	r0, r3
 8009902:	bd80      	pop	{r7, pc}
 8009904:	40023800 	.word	0x40023800
 8009908:	08010710 	.word	0x08010710

0800990c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d101      	bne.n	800991e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e07b      	b.n	8009a16 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009922:	2b00      	cmp	r3, #0
 8009924:	d108      	bne.n	8009938 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800992e:	d009      	beq.n	8009944 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	61da      	str	r2, [r3, #28]
 8009936:	e005      	b.n	8009944 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2200      	movs	r2, #0
 800993c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2200      	movs	r2, #0
 8009942:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2200      	movs	r2, #0
 8009948:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009950:	b2db      	uxtb	r3, r3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d106      	bne.n	8009964 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2200      	movs	r2, #0
 800995a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f7f7 feb4 	bl	80016cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2202      	movs	r2, #2
 8009968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	681a      	ldr	r2, [r3, #0]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800997a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800998c:	431a      	orrs	r2, r3
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009996:	431a      	orrs	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	f003 0302 	and.w	r3, r3, #2
 80099a0:	431a      	orrs	r2, r3
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	695b      	ldr	r3, [r3, #20]
 80099a6:	f003 0301 	and.w	r3, r3, #1
 80099aa:	431a      	orrs	r2, r3
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	699b      	ldr	r3, [r3, #24]
 80099b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80099b4:	431a      	orrs	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	69db      	ldr	r3, [r3, #28]
 80099ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099be:	431a      	orrs	r2, r3
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6a1b      	ldr	r3, [r3, #32]
 80099c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c8:	ea42 0103 	orr.w	r1, r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	430a      	orrs	r2, r1
 80099da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	0c1b      	lsrs	r3, r3, #16
 80099e2:	f003 0104 	and.w	r1, r3, #4
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ea:	f003 0210 	and.w	r2, r3, #16
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	430a      	orrs	r2, r1
 80099f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	69da      	ldr	r2, [r3, #28]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a04:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3708      	adds	r7, #8
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}

08009a1e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b08c      	sub	sp, #48	; 0x30
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	60f8      	str	r0, [r7, #12]
 8009a26:	60b9      	str	r1, [r7, #8]
 8009a28:	607a      	str	r2, [r7, #4]
 8009a2a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009a30:	2300      	movs	r3, #0
 8009a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d101      	bne.n	8009a44 <HAL_SPI_TransmitReceive+0x26>
 8009a40:	2302      	movs	r3, #2
 8009a42:	e18a      	b.n	8009d5a <HAL_SPI_TransmitReceive+0x33c>
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2201      	movs	r2, #1
 8009a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009a4c:	f7fe fbe4 	bl	8008218 <HAL_GetTick>
 8009a50:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009a62:	887b      	ldrh	r3, [r7, #2]
 8009a64:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009a66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d00f      	beq.n	8009a8e <HAL_SPI_TransmitReceive+0x70>
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a74:	d107      	bne.n	8009a86 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	689b      	ldr	r3, [r3, #8]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d103      	bne.n	8009a86 <HAL_SPI_TransmitReceive+0x68>
 8009a7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a82:	2b04      	cmp	r3, #4
 8009a84:	d003      	beq.n	8009a8e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8009a86:	2302      	movs	r3, #2
 8009a88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009a8c:	e15b      	b.n	8009d46 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d005      	beq.n	8009aa0 <HAL_SPI_TransmitReceive+0x82>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d002      	beq.n	8009aa0 <HAL_SPI_TransmitReceive+0x82>
 8009a9a:	887b      	ldrh	r3, [r7, #2]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d103      	bne.n	8009aa8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009aa6:	e14e      	b.n	8009d46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	2b04      	cmp	r3, #4
 8009ab2:	d003      	beq.n	8009abc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2205      	movs	r2, #5
 8009ab8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	887a      	ldrh	r2, [r7, #2]
 8009acc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	887a      	ldrh	r2, [r7, #2]
 8009ad2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	68ba      	ldr	r2, [r7, #8]
 8009ad8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	887a      	ldrh	r2, [r7, #2]
 8009ade:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	887a      	ldrh	r2, [r7, #2]
 8009ae4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2200      	movs	r2, #0
 8009af0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009afc:	2b40      	cmp	r3, #64	; 0x40
 8009afe:	d007      	beq.n	8009b10 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	68db      	ldr	r3, [r3, #12]
 8009b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b18:	d178      	bne.n	8009c0c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d002      	beq.n	8009b28 <HAL_SPI_TransmitReceive+0x10a>
 8009b22:	8b7b      	ldrh	r3, [r7, #26]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	d166      	bne.n	8009bf6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b2c:	881a      	ldrh	r2, [r3, #0]
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b38:	1c9a      	adds	r2, r3, #2
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	3b01      	subs	r3, #1
 8009b46:	b29a      	uxth	r2, r3
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b4c:	e053      	b.n	8009bf6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f003 0302 	and.w	r3, r3, #2
 8009b58:	2b02      	cmp	r3, #2
 8009b5a:	d11b      	bne.n	8009b94 <HAL_SPI_TransmitReceive+0x176>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d016      	beq.n	8009b94 <HAL_SPI_TransmitReceive+0x176>
 8009b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d113      	bne.n	8009b94 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b70:	881a      	ldrh	r2, [r3, #0]
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b7c:	1c9a      	adds	r2, r3, #2
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	3b01      	subs	r3, #1
 8009b8a:	b29a      	uxth	r2, r3
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b90:	2300      	movs	r3, #0
 8009b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f003 0301 	and.w	r3, r3, #1
 8009b9e:	2b01      	cmp	r3, #1
 8009ba0:	d119      	bne.n	8009bd6 <HAL_SPI_TransmitReceive+0x1b8>
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ba6:	b29b      	uxth	r3, r3
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d014      	beq.n	8009bd6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68da      	ldr	r2, [r3, #12]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb6:	b292      	uxth	r2, r2
 8009bb8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbe:	1c9a      	adds	r2, r3, #2
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	b29a      	uxth	r2, r3
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009bd6:	f7fe fb1f 	bl	8008218 <HAL_GetTick>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bde:	1ad3      	subs	r3, r2, r3
 8009be0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d807      	bhi.n	8009bf6 <HAL_SPI_TransmitReceive+0x1d8>
 8009be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bec:	d003      	beq.n	8009bf6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009bf4:	e0a7      	b.n	8009d46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1a6      	bne.n	8009b4e <HAL_SPI_TransmitReceive+0x130>
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c04:	b29b      	uxth	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1a1      	bne.n	8009b4e <HAL_SPI_TransmitReceive+0x130>
 8009c0a:	e07c      	b.n	8009d06 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d002      	beq.n	8009c1a <HAL_SPI_TransmitReceive+0x1fc>
 8009c14:	8b7b      	ldrh	r3, [r7, #26]
 8009c16:	2b01      	cmp	r3, #1
 8009c18:	d16b      	bne.n	8009cf2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	330c      	adds	r3, #12
 8009c24:	7812      	ldrb	r2, [r2, #0]
 8009c26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c2c:	1c5a      	adds	r2, r3, #1
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	b29a      	uxth	r2, r3
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009c40:	e057      	b.n	8009cf2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	f003 0302 	and.w	r3, r3, #2
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d11c      	bne.n	8009c8a <HAL_SPI_TransmitReceive+0x26c>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d017      	beq.n	8009c8a <HAL_SPI_TransmitReceive+0x26c>
 8009c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c5c:	2b01      	cmp	r3, #1
 8009c5e:	d114      	bne.n	8009c8a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	330c      	adds	r3, #12
 8009c6a:	7812      	ldrb	r2, [r2, #0]
 8009c6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c72:	1c5a      	adds	r2, r3, #1
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009c86:	2300      	movs	r3, #0
 8009c88:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f003 0301 	and.w	r3, r3, #1
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d119      	bne.n	8009ccc <HAL_SPI_TransmitReceive+0x2ae>
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d014      	beq.n	8009ccc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	68da      	ldr	r2, [r3, #12]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cac:	b2d2      	uxtb	r2, r2
 8009cae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cb4:	1c5a      	adds	r2, r3, #1
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009cc8:	2301      	movs	r3, #1
 8009cca:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009ccc:	f7fe faa4 	bl	8008218 <HAL_GetTick>
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d803      	bhi.n	8009ce4 <HAL_SPI_TransmitReceive+0x2c6>
 8009cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ce2:	d102      	bne.n	8009cea <HAL_SPI_TransmitReceive+0x2cc>
 8009ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d103      	bne.n	8009cf2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009cea:	2303      	movs	r3, #3
 8009cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009cf0:	e029      	b.n	8009d46 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d1a2      	bne.n	8009c42 <HAL_SPI_TransmitReceive+0x224>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d00:	b29b      	uxth	r3, r3
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d19d      	bne.n	8009c42 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f000 fb24 	bl	800a358 <SPI_EndRxTxTransaction>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d006      	beq.n	8009d24 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2220      	movs	r2, #32
 8009d20:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009d22:	e010      	b.n	8009d46 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d10b      	bne.n	8009d44 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	617b      	str	r3, [r7, #20]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	617b      	str	r3, [r7, #20]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	617b      	str	r3, [r7, #20]
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	e000      	b.n	8009d46 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009d44:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009d56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3730      	adds	r7, #48	; 0x30
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
	...

08009d64 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b086      	sub	sp, #24
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
 8009d70:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d101      	bne.n	8009d84 <HAL_SPI_TransmitReceive_DMA+0x20>
 8009d80:	2302      	movs	r3, #2
 8009d82:	e0e3      	b.n	8009f4c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2201      	movs	r2, #1
 8009d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009d92:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8009d9a:	7dbb      	ldrb	r3, [r7, #22]
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d00d      	beq.n	8009dbc <HAL_SPI_TransmitReceive_DMA+0x58>
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009da6:	d106      	bne.n	8009db6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d102      	bne.n	8009db6 <HAL_SPI_TransmitReceive_DMA+0x52>
 8009db0:	7dbb      	ldrb	r3, [r7, #22]
 8009db2:	2b04      	cmp	r3, #4
 8009db4:	d002      	beq.n	8009dbc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8009db6:	2302      	movs	r3, #2
 8009db8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009dba:	e0c2      	b.n	8009f42 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d005      	beq.n	8009dce <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d002      	beq.n	8009dce <HAL_SPI_TransmitReceive_DMA+0x6a>
 8009dc8:	887b      	ldrh	r3, [r7, #2]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d102      	bne.n	8009dd4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009dd2:	e0b6      	b.n	8009f42 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009dda:	b2db      	uxtb	r3, r3
 8009ddc:	2b04      	cmp	r3, #4
 8009dde:	d003      	beq.n	8009de8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2205      	movs	r2, #5
 8009de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2200      	movs	r2, #0
 8009dec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	68ba      	ldr	r2, [r7, #8]
 8009df2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	887a      	ldrh	r2, [r7, #2]
 8009df8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	887a      	ldrh	r2, [r7, #2]
 8009dfe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	887a      	ldrh	r2, [r7, #2]
 8009e0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	887a      	ldrh	r2, [r7, #2]
 8009e10:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009e24:	b2db      	uxtb	r3, r3
 8009e26:	2b04      	cmp	r3, #4
 8009e28:	d108      	bne.n	8009e3c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e2e:	4a49      	ldr	r2, [pc, #292]	; (8009f54 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8009e30:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e36:	4a48      	ldr	r2, [pc, #288]	; (8009f58 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8009e38:	63da      	str	r2, [r3, #60]	; 0x3c
 8009e3a:	e007      	b.n	8009e4c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e40:	4a46      	ldr	r2, [pc, #280]	; (8009f5c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8009e42:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e48:	4a45      	ldr	r2, [pc, #276]	; (8009f60 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8009e4a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e50:	4a44      	ldr	r2, [pc, #272]	; (8009f64 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8009e52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e58:	2200      	movs	r2, #0
 8009e5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	330c      	adds	r3, #12
 8009e66:	4619      	mov	r1, r3
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e6c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009e72:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009e74:	f7fe fbc0 	bl	80085f8 <HAL_DMA_Start_IT>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d00c      	beq.n	8009e98 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e82:	f043 0210 	orr.w	r2, r3, #16
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	2201      	movs	r2, #1
 8009e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8009e96:	e054      	b.n	8009f42 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	685a      	ldr	r2, [r3, #4]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f042 0201 	orr.w	r2, r2, #1
 8009ea6:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eac:	2200      	movs	r2, #0
 8009eae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed0:	4619      	mov	r1, r3
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	330c      	adds	r3, #12
 8009ed8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009ede:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009ee0:	f7fe fb8a 	bl	80085f8 <HAL_DMA_Start_IT>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00c      	beq.n	8009f04 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009eee:	f043 0210 	orr.w	r2, r3, #16
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2201      	movs	r2, #1
 8009efe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8009f02:	e01e      	b.n	8009f42 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f0e:	2b40      	cmp	r3, #64	; 0x40
 8009f10:	d007      	beq.n	8009f22 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	681a      	ldr	r2, [r3, #0]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009f20:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	685a      	ldr	r2, [r3, #4]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f042 0220 	orr.w	r2, r2, #32
 8009f30:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	685a      	ldr	r2, [r3, #4]
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f042 0202 	orr.w	r2, r2, #2
 8009f40:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2200      	movs	r2, #0
 8009f46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3718      	adds	r7, #24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	0800a105 	.word	0x0800a105
 8009f58:	08009fcd 	.word	0x08009fcd
 8009f5c:	0800a121 	.word	0x0800a121
 8009f60:	0800a075 	.word	0x0800a075
 8009f64:	0800a13d 	.word	0x0800a13d

08009f68 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8009f70:	bf00      	nop
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009f7c:	b480      	push	{r7}
 8009f7e:	b083      	sub	sp, #12
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009f84:	bf00      	nop
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b083      	sub	sp, #12
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8009f98:	bf00      	nop
 8009f9a:	370c      	adds	r7, #12
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr

08009fa4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b083      	sub	sp, #12
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8009fac:	bf00      	nop
 8009fae:	370c      	adds	r7, #12
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb6:	4770      	bx	lr

08009fb8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b083      	sub	sp, #12
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fd8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009fda:	f7fe f91d 	bl	8008218 <HAL_GetTick>
 8009fde:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fee:	d03b      	beq.n	800a068 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	685a      	ldr	r2, [r3, #4]
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f022 0220 	bic.w	r2, r2, #32
 8009ffe:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10d      	bne.n	800a024 <SPI_DMAReceiveCplt+0x58>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	685b      	ldr	r3, [r3, #4]
 800a00c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a010:	d108      	bne.n	800a024 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	685a      	ldr	r2, [r3, #4]
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f022 0203 	bic.w	r2, r2, #3
 800a020:	605a      	str	r2, [r3, #4]
 800a022:	e007      	b.n	800a034 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	685a      	ldr	r2, [r3, #4]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f022 0201 	bic.w	r2, r2, #1
 800a032:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a034:	68ba      	ldr	r2, [r7, #8]
 800a036:	2164      	movs	r1, #100	; 0x64
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f000 f927 	bl	800a28c <SPI_EndRxTransaction>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d002      	beq.n	800a04a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	2220      	movs	r2, #32
 800a048:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2200      	movs	r2, #0
 800a04e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	2201      	movs	r2, #1
 800a054:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d003      	beq.n	800a068 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f7ff ffa9 	bl	8009fb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a066:	e002      	b.n	800a06e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f7ff ff7d 	bl	8009f68 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a06e:	3710      	adds	r7, #16
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}

0800a074 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a080:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a082:	f7fe f8c9 	bl	8008218 <HAL_GetTick>
 800a086:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a092:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a096:	d02f      	beq.n	800a0f8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	685a      	ldr	r2, [r3, #4]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f022 0220 	bic.w	r2, r2, #32
 800a0a6:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a0a8:	68ba      	ldr	r2, [r7, #8]
 800a0aa:	2164      	movs	r1, #100	; 0x64
 800a0ac:	68f8      	ldr	r0, [r7, #12]
 800a0ae:	f000 f953 	bl	800a358 <SPI_EndRxTxTransaction>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d005      	beq.n	800a0c4 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0bc:	f043 0220 	orr.w	r2, r3, #32
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	685a      	ldr	r2, [r3, #4]
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f022 0203 	bic.w	r2, r2, #3
 800a0d2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d003      	beq.n	800a0f8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f7ff ff61 	bl	8009fb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a0f6:	e002      	b.n	800a0fe <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800a0f8:	68f8      	ldr	r0, [r7, #12]
 800a0fa:	f7ff ff3f 	bl	8009f7c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a110:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a112:	68f8      	ldr	r0, [r7, #12]
 800a114:	f7ff ff3c 	bl	8009f90 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a118:	bf00      	nop
 800a11a:	3710      	adds	r7, #16
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b084      	sub	sp, #16
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f7ff ff38 	bl	8009fa4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a134:	bf00      	nop
 800a136:	3710      	adds	r7, #16
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a148:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f022 0203 	bic.w	r2, r2, #3
 800a158:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a15e:	f043 0210 	orr.w	r2, r3, #16
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2201      	movs	r2, #1
 800a16a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a16e:	68f8      	ldr	r0, [r7, #12]
 800a170:	f7ff ff22 	bl	8009fb8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a174:	bf00      	nop
 800a176:	3710      	adds	r7, #16
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b088      	sub	sp, #32
 800a180:	af00      	add	r7, sp, #0
 800a182:	60f8      	str	r0, [r7, #12]
 800a184:	60b9      	str	r1, [r7, #8]
 800a186:	603b      	str	r3, [r7, #0]
 800a188:	4613      	mov	r3, r2
 800a18a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a18c:	f7fe f844 	bl	8008218 <HAL_GetTick>
 800a190:	4602      	mov	r2, r0
 800a192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a194:	1a9b      	subs	r3, r3, r2
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	4413      	add	r3, r2
 800a19a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a19c:	f7fe f83c 	bl	8008218 <HAL_GetTick>
 800a1a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a1a2:	4b39      	ldr	r3, [pc, #228]	; (800a288 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	015b      	lsls	r3, r3, #5
 800a1a8:	0d1b      	lsrs	r3, r3, #20
 800a1aa:	69fa      	ldr	r2, [r7, #28]
 800a1ac:	fb02 f303 	mul.w	r3, r2, r3
 800a1b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a1b2:	e054      	b.n	800a25e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a1b4:	683b      	ldr	r3, [r7, #0]
 800a1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ba:	d050      	beq.n	800a25e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a1bc:	f7fe f82c 	bl	8008218 <HAL_GetTick>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	69bb      	ldr	r3, [r7, #24]
 800a1c4:	1ad3      	subs	r3, r2, r3
 800a1c6:	69fa      	ldr	r2, [r7, #28]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d902      	bls.n	800a1d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d13d      	bne.n	800a24e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a1e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1ea:	d111      	bne.n	800a210 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1f4:	d004      	beq.n	800a200 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	689b      	ldr	r3, [r3, #8]
 800a1fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1fe:	d107      	bne.n	800a210 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a20e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a218:	d10f      	bne.n	800a23a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a238:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2201      	movs	r2, #1
 800a23e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	2200      	movs	r2, #0
 800a246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a24a:	2303      	movs	r3, #3
 800a24c:	e017      	b.n	800a27e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d101      	bne.n	800a258 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a254:	2300      	movs	r3, #0
 800a256:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	3b01      	subs	r3, #1
 800a25c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	689a      	ldr	r2, [r3, #8]
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	4013      	ands	r3, r2
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	bf0c      	ite	eq
 800a26e:	2301      	moveq	r3, #1
 800a270:	2300      	movne	r3, #0
 800a272:	b2db      	uxtb	r3, r3
 800a274:	461a      	mov	r2, r3
 800a276:	79fb      	ldrb	r3, [r7, #7]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d19b      	bne.n	800a1b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3720      	adds	r7, #32
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop
 800a288:	200004e0 	.word	0x200004e0

0800a28c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af02      	add	r7, sp, #8
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2a0:	d111      	bne.n	800a2c6 <SPI_EndRxTransaction+0x3a>
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2aa:	d004      	beq.n	800a2b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2b4:	d107      	bne.n	800a2c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	681a      	ldr	r2, [r3, #0]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a2c4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2ce:	d12a      	bne.n	800a326 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	689b      	ldr	r3, [r3, #8]
 800a2d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2d8:	d012      	beq.n	800a300 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	2180      	movs	r1, #128	; 0x80
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f7ff ff49 	bl	800a17c <SPI_WaitFlagStateUntilTimeout>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d02d      	beq.n	800a34c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2f4:	f043 0220 	orr.w	r2, r3, #32
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a2fc:	2303      	movs	r3, #3
 800a2fe:	e026      	b.n	800a34e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	9300      	str	r3, [sp, #0]
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2200      	movs	r2, #0
 800a308:	2101      	movs	r1, #1
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f7ff ff36 	bl	800a17c <SPI_WaitFlagStateUntilTimeout>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d01a      	beq.n	800a34c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a31a:	f043 0220 	orr.w	r2, r3, #32
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a322:	2303      	movs	r3, #3
 800a324:	e013      	b.n	800a34e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	9300      	str	r3, [sp, #0]
 800a32a:	68bb      	ldr	r3, [r7, #8]
 800a32c:	2200      	movs	r2, #0
 800a32e:	2101      	movs	r1, #1
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f7ff ff23 	bl	800a17c <SPI_WaitFlagStateUntilTimeout>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d007      	beq.n	800a34c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a340:	f043 0220 	orr.w	r2, r3, #32
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a348:	2303      	movs	r3, #3
 800a34a:	e000      	b.n	800a34e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
	...

0800a358 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b088      	sub	sp, #32
 800a35c:	af02      	add	r7, sp, #8
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	60b9      	str	r1, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a364:	4b1b      	ldr	r3, [pc, #108]	; (800a3d4 <SPI_EndRxTxTransaction+0x7c>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a1b      	ldr	r2, [pc, #108]	; (800a3d8 <SPI_EndRxTxTransaction+0x80>)
 800a36a:	fba2 2303 	umull	r2, r3, r2, r3
 800a36e:	0d5b      	lsrs	r3, r3, #21
 800a370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a374:	fb02 f303 	mul.w	r3, r2, r3
 800a378:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a382:	d112      	bne.n	800a3aa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	9300      	str	r3, [sp, #0]
 800a388:	68bb      	ldr	r3, [r7, #8]
 800a38a:	2200      	movs	r2, #0
 800a38c:	2180      	movs	r1, #128	; 0x80
 800a38e:	68f8      	ldr	r0, [r7, #12]
 800a390:	f7ff fef4 	bl	800a17c <SPI_WaitFlagStateUntilTimeout>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d016      	beq.n	800a3c8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a39e:	f043 0220 	orr.w	r2, r3, #32
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a3a6:	2303      	movs	r3, #3
 800a3a8:	e00f      	b.n	800a3ca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d00a      	beq.n	800a3c6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	3b01      	subs	r3, #1
 800a3b4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3c0:	2b80      	cmp	r3, #128	; 0x80
 800a3c2:	d0f2      	beq.n	800a3aa <SPI_EndRxTxTransaction+0x52>
 800a3c4:	e000      	b.n	800a3c8 <SPI_EndRxTxTransaction+0x70>
        break;
 800a3c6:	bf00      	nop
  }

  return HAL_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3718      	adds	r7, #24
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop
 800a3d4:	200004e0 	.word	0x200004e0
 800a3d8:	165e9f81 	.word	0x165e9f81

0800a3dc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d101      	bne.n	800a3f2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e034      	b.n	800a45c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800a3f8:	b2db      	uxtb	r3, r3
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d106      	bne.n	800a40c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800a406:	68f8      	ldr	r0, [r7, #12]
 800a408:	f7f6 ff0a 	bl	8001220 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681a      	ldr	r2, [r3, #0]
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	3308      	adds	r3, #8
 800a414:	4619      	mov	r1, r3
 800a416:	4610      	mov	r0, r2
 800a418:	f001 fae6 	bl	800b9e8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	6818      	ldr	r0, [r3, #0]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	689b      	ldr	r3, [r3, #8]
 800a424:	461a      	mov	r2, r3
 800a426:	68b9      	ldr	r1, [r7, #8]
 800a428:	f001 fb30 	bl	800ba8c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	6858      	ldr	r0, [r3, #4]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	689a      	ldr	r2, [r3, #8]
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a438:	6879      	ldr	r1, [r7, #4]
 800a43a:	f001 fb65 	bl	800bb08 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	68fa      	ldr	r2, [r7, #12]
 800a444:	6892      	ldr	r2, [r2, #8]
 800a446:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68fa      	ldr	r2, [r7, #12]
 800a450:	6892      	ldr	r2, [r2, #8]
 800a452:	f041 0101 	orr.w	r1, r1, #1
 800a456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 800a45a:	2300      	movs	r3, #0
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}

0800a464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b082      	sub	sp, #8
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d101      	bne.n	800a476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e041      	b.n	800a4fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a47c:	b2db      	uxtb	r3, r3
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d106      	bne.n	800a490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f7f7 fce0 	bl	8001e50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2202      	movs	r2, #2
 800a494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	3304      	adds	r3, #4
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	4610      	mov	r0, r2
 800a4a4:	f000 fa9c 	bl	800a9e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2201      	movs	r2, #1
 800a4cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3708      	adds	r7, #8
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}
	...

0800a504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a512:	b2db      	uxtb	r3, r3
 800a514:	2b01      	cmp	r3, #1
 800a516:	d001      	beq.n	800a51c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a518:	2301      	movs	r3, #1
 800a51a:	e04e      	b.n	800a5ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2202      	movs	r2, #2
 800a520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68da      	ldr	r2, [r3, #12]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f042 0201 	orr.w	r2, r2, #1
 800a532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	4a23      	ldr	r2, [pc, #140]	; (800a5c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d022      	beq.n	800a584 <HAL_TIM_Base_Start_IT+0x80>
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a546:	d01d      	beq.n	800a584 <HAL_TIM_Base_Start_IT+0x80>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	4a1f      	ldr	r2, [pc, #124]	; (800a5cc <HAL_TIM_Base_Start_IT+0xc8>)
 800a54e:	4293      	cmp	r3, r2
 800a550:	d018      	beq.n	800a584 <HAL_TIM_Base_Start_IT+0x80>
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4a1e      	ldr	r2, [pc, #120]	; (800a5d0 <HAL_TIM_Base_Start_IT+0xcc>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d013      	beq.n	800a584 <HAL_TIM_Base_Start_IT+0x80>
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	4a1c      	ldr	r2, [pc, #112]	; (800a5d4 <HAL_TIM_Base_Start_IT+0xd0>)
 800a562:	4293      	cmp	r3, r2
 800a564:	d00e      	beq.n	800a584 <HAL_TIM_Base_Start_IT+0x80>
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	4a1b      	ldr	r2, [pc, #108]	; (800a5d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800a56c:	4293      	cmp	r3, r2
 800a56e:	d009      	beq.n	800a584 <HAL_TIM_Base_Start_IT+0x80>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	4a19      	ldr	r2, [pc, #100]	; (800a5dc <HAL_TIM_Base_Start_IT+0xd8>)
 800a576:	4293      	cmp	r3, r2
 800a578:	d004      	beq.n	800a584 <HAL_TIM_Base_Start_IT+0x80>
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4a18      	ldr	r2, [pc, #96]	; (800a5e0 <HAL_TIM_Base_Start_IT+0xdc>)
 800a580:	4293      	cmp	r3, r2
 800a582:	d111      	bne.n	800a5a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	f003 0307 	and.w	r3, r3, #7
 800a58e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2b06      	cmp	r3, #6
 800a594:	d010      	beq.n	800a5b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f042 0201 	orr.w	r2, r2, #1
 800a5a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5a6:	e007      	b.n	800a5b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f042 0201 	orr.w	r2, r2, #1
 800a5b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a5b8:	2300      	movs	r3, #0
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	3714      	adds	r7, #20
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr
 800a5c6:	bf00      	nop
 800a5c8:	40010000 	.word	0x40010000
 800a5cc:	40000400 	.word	0x40000400
 800a5d0:	40000800 	.word	0x40000800
 800a5d4:	40000c00 	.word	0x40000c00
 800a5d8:	40010400 	.word	0x40010400
 800a5dc:	40014000 	.word	0x40014000
 800a5e0:	40001800 	.word	0x40001800

0800a5e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	691b      	ldr	r3, [r3, #16]
 800a5f2:	f003 0302 	and.w	r3, r3, #2
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d122      	bne.n	800a640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	f003 0302 	and.w	r3, r3, #2
 800a604:	2b02      	cmp	r3, #2
 800a606:	d11b      	bne.n	800a640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	f06f 0202 	mvn.w	r2, #2
 800a610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2201      	movs	r2, #1
 800a616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	f003 0303 	and.w	r3, r3, #3
 800a622:	2b00      	cmp	r3, #0
 800a624:	d003      	beq.n	800a62e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f000 f9bc 	bl	800a9a4 <HAL_TIM_IC_CaptureCallback>
 800a62c:	e005      	b.n	800a63a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f9ae 	bl	800a990 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 f9bf 	bl	800a9b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	f003 0304 	and.w	r3, r3, #4
 800a64a:	2b04      	cmp	r3, #4
 800a64c:	d122      	bne.n	800a694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	f003 0304 	and.w	r3, r3, #4
 800a658:	2b04      	cmp	r3, #4
 800a65a:	d11b      	bne.n	800a694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f06f 0204 	mvn.w	r2, #4
 800a664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2202      	movs	r2, #2
 800a66a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f992 	bl	800a9a4 <HAL_TIM_IC_CaptureCallback>
 800a680:	e005      	b.n	800a68e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f984 	bl	800a990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 f995 	bl	800a9b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	f003 0308 	and.w	r3, r3, #8
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	d122      	bne.n	800a6e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f003 0308 	and.w	r3, r3, #8
 800a6ac:	2b08      	cmp	r3, #8
 800a6ae:	d11b      	bne.n	800a6e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f06f 0208 	mvn.w	r2, #8
 800a6b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2204      	movs	r2, #4
 800a6be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	69db      	ldr	r3, [r3, #28]
 800a6c6:	f003 0303 	and.w	r3, r3, #3
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f968 	bl	800a9a4 <HAL_TIM_IC_CaptureCallback>
 800a6d4:	e005      	b.n	800a6e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f95a 	bl	800a990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 f96b 	bl	800a9b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	691b      	ldr	r3, [r3, #16]
 800a6ee:	f003 0310 	and.w	r3, r3, #16
 800a6f2:	2b10      	cmp	r3, #16
 800a6f4:	d122      	bne.n	800a73c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	f003 0310 	and.w	r3, r3, #16
 800a700:	2b10      	cmp	r3, #16
 800a702:	d11b      	bne.n	800a73c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f06f 0210 	mvn.w	r2, #16
 800a70c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2208      	movs	r2, #8
 800a712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	69db      	ldr	r3, [r3, #28]
 800a71a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d003      	beq.n	800a72a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f93e 	bl	800a9a4 <HAL_TIM_IC_CaptureCallback>
 800a728:	e005      	b.n	800a736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 f930 	bl	800a990 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f000 f941 	bl	800a9b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2200      	movs	r2, #0
 800a73a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	691b      	ldr	r3, [r3, #16]
 800a742:	f003 0301 	and.w	r3, r3, #1
 800a746:	2b01      	cmp	r3, #1
 800a748:	d10e      	bne.n	800a768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	2b01      	cmp	r3, #1
 800a756:	d107      	bne.n	800a768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f06f 0201 	mvn.w	r2, #1
 800a760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f90a 	bl	800a97c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a772:	2b80      	cmp	r3, #128	; 0x80
 800a774:	d10e      	bne.n	800a794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a780:	2b80      	cmp	r3, #128	; 0x80
 800a782:	d107      	bne.n	800a794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a78c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 fae6 	bl	800ad60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	691b      	ldr	r3, [r3, #16]
 800a79a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a79e:	2b40      	cmp	r3, #64	; 0x40
 800a7a0:	d10e      	bne.n	800a7c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ac:	2b40      	cmp	r3, #64	; 0x40
 800a7ae:	d107      	bne.n	800a7c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f906 	bl	800a9cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	f003 0320 	and.w	r3, r3, #32
 800a7ca:	2b20      	cmp	r3, #32
 800a7cc:	d10e      	bne.n	800a7ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	f003 0320 	and.w	r3, r3, #32
 800a7d8:	2b20      	cmp	r3, #32
 800a7da:	d107      	bne.n	800a7ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f06f 0220 	mvn.w	r2, #32
 800a7e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f000 fab0 	bl	800ad4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a7ec:	bf00      	nop
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a804:	2b01      	cmp	r3, #1
 800a806:	d101      	bne.n	800a80c <HAL_TIM_ConfigClockSource+0x18>
 800a808:	2302      	movs	r3, #2
 800a80a:	e0b3      	b.n	800a974 <HAL_TIM_ConfigClockSource+0x180>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2201      	movs	r2, #1
 800a810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2202      	movs	r2, #2
 800a818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a82a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a832:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a83c:	683b      	ldr	r3, [r7, #0]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a844:	d03e      	beq.n	800a8c4 <HAL_TIM_ConfigClockSource+0xd0>
 800a846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a84a:	f200 8087 	bhi.w	800a95c <HAL_TIM_ConfigClockSource+0x168>
 800a84e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a852:	f000 8085 	beq.w	800a960 <HAL_TIM_ConfigClockSource+0x16c>
 800a856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a85a:	d87f      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x168>
 800a85c:	2b70      	cmp	r3, #112	; 0x70
 800a85e:	d01a      	beq.n	800a896 <HAL_TIM_ConfigClockSource+0xa2>
 800a860:	2b70      	cmp	r3, #112	; 0x70
 800a862:	d87b      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x168>
 800a864:	2b60      	cmp	r3, #96	; 0x60
 800a866:	d050      	beq.n	800a90a <HAL_TIM_ConfigClockSource+0x116>
 800a868:	2b60      	cmp	r3, #96	; 0x60
 800a86a:	d877      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x168>
 800a86c:	2b50      	cmp	r3, #80	; 0x50
 800a86e:	d03c      	beq.n	800a8ea <HAL_TIM_ConfigClockSource+0xf6>
 800a870:	2b50      	cmp	r3, #80	; 0x50
 800a872:	d873      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x168>
 800a874:	2b40      	cmp	r3, #64	; 0x40
 800a876:	d058      	beq.n	800a92a <HAL_TIM_ConfigClockSource+0x136>
 800a878:	2b40      	cmp	r3, #64	; 0x40
 800a87a:	d86f      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x168>
 800a87c:	2b30      	cmp	r3, #48	; 0x30
 800a87e:	d064      	beq.n	800a94a <HAL_TIM_ConfigClockSource+0x156>
 800a880:	2b30      	cmp	r3, #48	; 0x30
 800a882:	d86b      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x168>
 800a884:	2b20      	cmp	r3, #32
 800a886:	d060      	beq.n	800a94a <HAL_TIM_ConfigClockSource+0x156>
 800a888:	2b20      	cmp	r3, #32
 800a88a:	d867      	bhi.n	800a95c <HAL_TIM_ConfigClockSource+0x168>
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d05c      	beq.n	800a94a <HAL_TIM_ConfigClockSource+0x156>
 800a890:	2b10      	cmp	r3, #16
 800a892:	d05a      	beq.n	800a94a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a894:	e062      	b.n	800a95c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	6818      	ldr	r0, [r3, #0]
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	6899      	ldr	r1, [r3, #8]
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	685a      	ldr	r2, [r3, #4]
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	f000 f9b5 	bl	800ac14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a8b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	68fa      	ldr	r2, [r7, #12]
 800a8c0:	609a      	str	r2, [r3, #8]
      break;
 800a8c2:	e04e      	b.n	800a962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6818      	ldr	r0, [r3, #0]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	6899      	ldr	r1, [r3, #8]
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	685a      	ldr	r2, [r3, #4]
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	68db      	ldr	r3, [r3, #12]
 800a8d4:	f000 f99e 	bl	800ac14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	689a      	ldr	r2, [r3, #8]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a8e6:	609a      	str	r2, [r3, #8]
      break;
 800a8e8:	e03b      	b.n	800a962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6818      	ldr	r0, [r3, #0]
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	6859      	ldr	r1, [r3, #4]
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	68db      	ldr	r3, [r3, #12]
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	f000 f912 	bl	800ab20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	2150      	movs	r1, #80	; 0x50
 800a902:	4618      	mov	r0, r3
 800a904:	f000 f96b 	bl	800abde <TIM_ITRx_SetConfig>
      break;
 800a908:	e02b      	b.n	800a962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6818      	ldr	r0, [r3, #0]
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	6859      	ldr	r1, [r3, #4]
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	461a      	mov	r2, r3
 800a918:	f000 f931 	bl	800ab7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	2160      	movs	r1, #96	; 0x60
 800a922:	4618      	mov	r0, r3
 800a924:	f000 f95b 	bl	800abde <TIM_ITRx_SetConfig>
      break;
 800a928:	e01b      	b.n	800a962 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6818      	ldr	r0, [r3, #0]
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	6859      	ldr	r1, [r3, #4]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	461a      	mov	r2, r3
 800a938:	f000 f8f2 	bl	800ab20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2140      	movs	r1, #64	; 0x40
 800a942:	4618      	mov	r0, r3
 800a944:	f000 f94b 	bl	800abde <TIM_ITRx_SetConfig>
      break;
 800a948:	e00b      	b.n	800a962 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4619      	mov	r1, r3
 800a954:	4610      	mov	r0, r2
 800a956:	f000 f942 	bl	800abde <TIM_ITRx_SetConfig>
        break;
 800a95a:	e002      	b.n	800a962 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a95c:	bf00      	nop
 800a95e:	e000      	b.n	800a962 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800a960:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2201      	movs	r2, #1
 800a966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a984:	bf00      	nop
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a9ac:	bf00      	nop
 800a9ae:	370c      	adds	r7, #12
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a9c0:	bf00      	nop
 800a9c2:	370c      	adds	r7, #12
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ca:	4770      	bx	lr

0800a9cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a9d4:	bf00      	nop
 800a9d6:	370c      	adds	r7, #12
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9de:	4770      	bx	lr

0800a9e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	b085      	sub	sp, #20
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
 800a9e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	4a40      	ldr	r2, [pc, #256]	; (800aaf4 <TIM_Base_SetConfig+0x114>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d013      	beq.n	800aa20 <TIM_Base_SetConfig+0x40>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9fe:	d00f      	beq.n	800aa20 <TIM_Base_SetConfig+0x40>
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	4a3d      	ldr	r2, [pc, #244]	; (800aaf8 <TIM_Base_SetConfig+0x118>)
 800aa04:	4293      	cmp	r3, r2
 800aa06:	d00b      	beq.n	800aa20 <TIM_Base_SetConfig+0x40>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	4a3c      	ldr	r2, [pc, #240]	; (800aafc <TIM_Base_SetConfig+0x11c>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d007      	beq.n	800aa20 <TIM_Base_SetConfig+0x40>
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	4a3b      	ldr	r2, [pc, #236]	; (800ab00 <TIM_Base_SetConfig+0x120>)
 800aa14:	4293      	cmp	r3, r2
 800aa16:	d003      	beq.n	800aa20 <TIM_Base_SetConfig+0x40>
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	4a3a      	ldr	r2, [pc, #232]	; (800ab04 <TIM_Base_SetConfig+0x124>)
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	d108      	bne.n	800aa32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	685b      	ldr	r3, [r3, #4]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a2f      	ldr	r2, [pc, #188]	; (800aaf4 <TIM_Base_SetConfig+0x114>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d02b      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa40:	d027      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a2c      	ldr	r2, [pc, #176]	; (800aaf8 <TIM_Base_SetConfig+0x118>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d023      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a2b      	ldr	r2, [pc, #172]	; (800aafc <TIM_Base_SetConfig+0x11c>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d01f      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a2a      	ldr	r2, [pc, #168]	; (800ab00 <TIM_Base_SetConfig+0x120>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d01b      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	4a29      	ldr	r2, [pc, #164]	; (800ab04 <TIM_Base_SetConfig+0x124>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d017      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	4a28      	ldr	r2, [pc, #160]	; (800ab08 <TIM_Base_SetConfig+0x128>)
 800aa66:	4293      	cmp	r3, r2
 800aa68:	d013      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	4a27      	ldr	r2, [pc, #156]	; (800ab0c <TIM_Base_SetConfig+0x12c>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d00f      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	4a26      	ldr	r2, [pc, #152]	; (800ab10 <TIM_Base_SetConfig+0x130>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d00b      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	4a25      	ldr	r2, [pc, #148]	; (800ab14 <TIM_Base_SetConfig+0x134>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d007      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	4a24      	ldr	r2, [pc, #144]	; (800ab18 <TIM_Base_SetConfig+0x138>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d003      	beq.n	800aa92 <TIM_Base_SetConfig+0xb2>
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a23      	ldr	r2, [pc, #140]	; (800ab1c <TIM_Base_SetConfig+0x13c>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d108      	bne.n	800aaa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	68fa      	ldr	r2, [r7, #12]
 800aaa0:	4313      	orrs	r3, r2
 800aaa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	695b      	ldr	r3, [r3, #20]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	689a      	ldr	r2, [r3, #8]
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	4a0a      	ldr	r2, [pc, #40]	; (800aaf4 <TIM_Base_SetConfig+0x114>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d003      	beq.n	800aad8 <TIM_Base_SetConfig+0xf8>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	4a0c      	ldr	r2, [pc, #48]	; (800ab04 <TIM_Base_SetConfig+0x124>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d103      	bne.n	800aae0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	691a      	ldr	r2, [r3, #16]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2201      	movs	r2, #1
 800aae4:	615a      	str	r2, [r3, #20]
}
 800aae6:	bf00      	nop
 800aae8:	3714      	adds	r7, #20
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr
 800aaf2:	bf00      	nop
 800aaf4:	40010000 	.word	0x40010000
 800aaf8:	40000400 	.word	0x40000400
 800aafc:	40000800 	.word	0x40000800
 800ab00:	40000c00 	.word	0x40000c00
 800ab04:	40010400 	.word	0x40010400
 800ab08:	40014000 	.word	0x40014000
 800ab0c:	40014400 	.word	0x40014400
 800ab10:	40014800 	.word	0x40014800
 800ab14:	40001800 	.word	0x40001800
 800ab18:	40001c00 	.word	0x40001c00
 800ab1c:	40002000 	.word	0x40002000

0800ab20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b087      	sub	sp, #28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6a1b      	ldr	r3, [r3, #32]
 800ab30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	f023 0201 	bic.w	r2, r3, #1
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	011b      	lsls	r3, r3, #4
 800ab50:	693a      	ldr	r2, [r7, #16]
 800ab52:	4313      	orrs	r3, r2
 800ab54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	f023 030a 	bic.w	r3, r3, #10
 800ab5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ab5e:	697a      	ldr	r2, [r7, #20]
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	4313      	orrs	r3, r2
 800ab64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	693a      	ldr	r2, [r7, #16]
 800ab6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	697a      	ldr	r2, [r7, #20]
 800ab70:	621a      	str	r2, [r3, #32]
}
 800ab72:	bf00      	nop
 800ab74:	371c      	adds	r7, #28
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr

0800ab7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ab7e:	b480      	push	{r7}
 800ab80:	b087      	sub	sp, #28
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	60f8      	str	r0, [r7, #12]
 800ab86:	60b9      	str	r1, [r7, #8]
 800ab88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	6a1b      	ldr	r3, [r3, #32]
 800ab8e:	f023 0210 	bic.w	r2, r3, #16
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	699b      	ldr	r3, [r3, #24]
 800ab9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6a1b      	ldr	r3, [r3, #32]
 800aba0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aba8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	031b      	lsls	r3, r3, #12
 800abae:	697a      	ldr	r2, [r7, #20]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800abba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	011b      	lsls	r3, r3, #4
 800abc0:	693a      	ldr	r2, [r7, #16]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	697a      	ldr	r2, [r7, #20]
 800abca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	693a      	ldr	r2, [r7, #16]
 800abd0:	621a      	str	r2, [r3, #32]
}
 800abd2:	bf00      	nop
 800abd4:	371c      	adds	r7, #28
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800abde:	b480      	push	{r7}
 800abe0:	b085      	sub	sp, #20
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
 800abe6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800abf6:	683a      	ldr	r2, [r7, #0]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	f043 0307 	orr.w	r3, r3, #7
 800ac00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	609a      	str	r2, [r3, #8]
}
 800ac08:	bf00      	nop
 800ac0a:	3714      	adds	r7, #20
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b087      	sub	sp, #28
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
 800ac20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ac2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	021a      	lsls	r2, r3, #8
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	431a      	orrs	r2, r3
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	4313      	orrs	r3, r2
 800ac3c:	697a      	ldr	r2, [r7, #20]
 800ac3e:	4313      	orrs	r3, r2
 800ac40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	609a      	str	r2, [r3, #8]
}
 800ac48:	bf00      	nop
 800ac4a:	371c      	adds	r7, #28
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d101      	bne.n	800ac6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ac68:	2302      	movs	r3, #2
 800ac6a:	e05a      	b.n	800ad22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2201      	movs	r2, #1
 800ac70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2202      	movs	r2, #2
 800ac78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	685b      	ldr	r3, [r3, #4]
 800ac82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	689b      	ldr	r3, [r3, #8]
 800ac8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ac94:	683b      	ldr	r3, [r7, #0]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	4313      	orrs	r3, r2
 800ac9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	4a21      	ldr	r2, [pc, #132]	; (800ad30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800acac:	4293      	cmp	r3, r2
 800acae:	d022      	beq.n	800acf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acb8:	d01d      	beq.n	800acf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a1d      	ldr	r2, [pc, #116]	; (800ad34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d018      	beq.n	800acf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a1b      	ldr	r2, [pc, #108]	; (800ad38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d013      	beq.n	800acf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a1a      	ldr	r2, [pc, #104]	; (800ad3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d00e      	beq.n	800acf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4a18      	ldr	r2, [pc, #96]	; (800ad40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800acde:	4293      	cmp	r3, r2
 800ace0:	d009      	beq.n	800acf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	4a17      	ldr	r2, [pc, #92]	; (800ad44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d004      	beq.n	800acf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	4a15      	ldr	r2, [pc, #84]	; (800ad48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800acf2:	4293      	cmp	r3, r2
 800acf4:	d10c      	bne.n	800ad10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800acfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	685b      	ldr	r3, [r3, #4]
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	68ba      	ldr	r2, [r7, #8]
 800ad0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3714      	adds	r7, #20
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr
 800ad2e:	bf00      	nop
 800ad30:	40010000 	.word	0x40010000
 800ad34:	40000400 	.word	0x40000400
 800ad38:	40000800 	.word	0x40000800
 800ad3c:	40000c00 	.word	0x40000c00
 800ad40:	40010400 	.word	0x40010400
 800ad44:	40014000 	.word	0x40014000
 800ad48:	40001800 	.word	0x40001800

0800ad4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ad68:	bf00      	nop
 800ad6a:	370c      	adds	r7, #12
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d101      	bne.n	800ad86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ad82:	2301      	movs	r3, #1
 800ad84:	e03f      	b.n	800ae06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d106      	bne.n	800ada0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7f7 f8c6 	bl	8001f2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2224      	movs	r2, #36	; 0x24
 800ada4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	68da      	ldr	r2, [r3, #12]
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800adb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f000 fc4d 	bl	800b658 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	691a      	ldr	r2, [r3, #16]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800adcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	695a      	ldr	r2, [r3, #20]
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800addc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68da      	ldr	r2, [r3, #12]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800adec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2220      	movs	r2, #32
 800adf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	2220      	movs	r2, #32
 800ae00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
	...

0800ae10 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b086      	sub	sp, #24
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	60f8      	str	r0, [r7, #12]
 800ae18:	60b9      	str	r1, [r7, #8]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	2b20      	cmp	r3, #32
 800ae28:	d153      	bne.n	800aed2 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d002      	beq.n	800ae36 <HAL_UART_Transmit_DMA+0x26>
 800ae30:	88fb      	ldrh	r3, [r7, #6]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d101      	bne.n	800ae3a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ae36:	2301      	movs	r3, #1
 800ae38:	e04c      	b.n	800aed4 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d101      	bne.n	800ae48 <HAL_UART_Transmit_DMA+0x38>
 800ae44:	2302      	movs	r3, #2
 800ae46:	e045      	b.n	800aed4 <HAL_UART_Transmit_DMA+0xc4>
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800ae50:	68ba      	ldr	r2, [r7, #8]
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	88fa      	ldrh	r2, [r7, #6]
 800ae5a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	88fa      	ldrh	r2, [r7, #6]
 800ae60:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2200      	movs	r2, #0
 800ae66:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2221      	movs	r2, #33	; 0x21
 800ae6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae74:	4a19      	ldr	r2, [pc, #100]	; (800aedc <HAL_UART_Transmit_DMA+0xcc>)
 800ae76:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae7c:	4a18      	ldr	r2, [pc, #96]	; (800aee0 <HAL_UART_Transmit_DMA+0xd0>)
 800ae7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae84:	4a17      	ldr	r2, [pc, #92]	; (800aee4 <HAL_UART_Transmit_DMA+0xd4>)
 800ae86:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 800ae90:	f107 0308 	add.w	r3, r7, #8
 800ae94:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	6819      	ldr	r1, [r3, #0]
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	3304      	adds	r3, #4
 800aea4:	461a      	mov	r2, r3
 800aea6:	88fb      	ldrh	r3, [r7, #6]
 800aea8:	f7fd fba6 	bl	80085f8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aeb4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	695a      	ldr	r2, [r3, #20]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aecc:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800aece:	2300      	movs	r3, #0
 800aed0:	e000      	b.n	800aed4 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800aed2:	2302      	movs	r3, #2
  }
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3718      	adds	r7, #24
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	0800b2a9 	.word	0x0800b2a9
 800aee0:	0800b2fb 	.word	0x0800b2fb
 800aee4:	0800b317 	.word	0x0800b317

0800aee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b08a      	sub	sp, #40	; 0x28
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	695b      	ldr	r3, [r3, #20]
 800af06:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800af08:	2300      	movs	r3, #0
 800af0a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800af0c:	2300      	movs	r3, #0
 800af0e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800af10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af12:	f003 030f 	and.w	r3, r3, #15
 800af16:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10d      	bne.n	800af3a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800af1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af20:	f003 0320 	and.w	r3, r3, #32
 800af24:	2b00      	cmp	r3, #0
 800af26:	d008      	beq.n	800af3a <HAL_UART_IRQHandler+0x52>
 800af28:	6a3b      	ldr	r3, [r7, #32]
 800af2a:	f003 0320 	and.w	r3, r3, #32
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d003      	beq.n	800af3a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f000 faf8 	bl	800b528 <UART_Receive_IT>
      return;
 800af38:	e17c      	b.n	800b234 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f000 80b1 	beq.w	800b0a4 <HAL_UART_IRQHandler+0x1bc>
 800af42:	69fb      	ldr	r3, [r7, #28]
 800af44:	f003 0301 	and.w	r3, r3, #1
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d105      	bne.n	800af58 <HAL_UART_IRQHandler+0x70>
 800af4c:	6a3b      	ldr	r3, [r7, #32]
 800af4e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800af52:	2b00      	cmp	r3, #0
 800af54:	f000 80a6 	beq.w	800b0a4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800af58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5a:	f003 0301 	and.w	r3, r3, #1
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00a      	beq.n	800af78 <HAL_UART_IRQHandler+0x90>
 800af62:	6a3b      	ldr	r3, [r7, #32]
 800af64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d005      	beq.n	800af78 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af70:	f043 0201 	orr.w	r2, r3, #1
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7a:	f003 0304 	and.w	r3, r3, #4
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00a      	beq.n	800af98 <HAL_UART_IRQHandler+0xb0>
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	f003 0301 	and.w	r3, r3, #1
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d005      	beq.n	800af98 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af90:	f043 0202 	orr.w	r2, r3, #2
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800af98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9a:	f003 0302 	and.w	r3, r3, #2
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d00a      	beq.n	800afb8 <HAL_UART_IRQHandler+0xd0>
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	f003 0301 	and.w	r3, r3, #1
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d005      	beq.n	800afb8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afb0:	f043 0204 	orr.w	r2, r3, #4
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800afb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afba:	f003 0308 	and.w	r3, r3, #8
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d00f      	beq.n	800afe2 <HAL_UART_IRQHandler+0xfa>
 800afc2:	6a3b      	ldr	r3, [r7, #32]
 800afc4:	f003 0320 	and.w	r3, r3, #32
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d104      	bne.n	800afd6 <HAL_UART_IRQHandler+0xee>
 800afcc:	69fb      	ldr	r3, [r7, #28]
 800afce:	f003 0301 	and.w	r3, r3, #1
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d005      	beq.n	800afe2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afda:	f043 0208 	orr.w	r2, r3, #8
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	f000 811f 	beq.w	800b22a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800afec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afee:	f003 0320 	and.w	r3, r3, #32
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d007      	beq.n	800b006 <HAL_UART_IRQHandler+0x11e>
 800aff6:	6a3b      	ldr	r3, [r7, #32]
 800aff8:	f003 0320 	and.w	r3, r3, #32
 800affc:	2b00      	cmp	r3, #0
 800affe:	d002      	beq.n	800b006 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f000 fa91 	bl	800b528 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	695b      	ldr	r3, [r3, #20]
 800b00c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b010:	2b40      	cmp	r3, #64	; 0x40
 800b012:	bf0c      	ite	eq
 800b014:	2301      	moveq	r3, #1
 800b016:	2300      	movne	r3, #0
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b020:	f003 0308 	and.w	r3, r3, #8
 800b024:	2b00      	cmp	r3, #0
 800b026:	d102      	bne.n	800b02e <HAL_UART_IRQHandler+0x146>
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d031      	beq.n	800b092 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 f9d1 	bl	800b3d6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	695b      	ldr	r3, [r3, #20]
 800b03a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b03e:	2b40      	cmp	r3, #64	; 0x40
 800b040:	d123      	bne.n	800b08a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	695a      	ldr	r2, [r3, #20]
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b050:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b056:	2b00      	cmp	r3, #0
 800b058:	d013      	beq.n	800b082 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b05e:	4a77      	ldr	r2, [pc, #476]	; (800b23c <HAL_UART_IRQHandler+0x354>)
 800b060:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b066:	4618      	mov	r0, r3
 800b068:	f7fd fb8e 	bl	8008788 <HAL_DMA_Abort_IT>
 800b06c:	4603      	mov	r3, r0
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d016      	beq.n	800b0a0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b078:	687a      	ldr	r2, [r7, #4]
 800b07a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b07c:	4610      	mov	r0, r2
 800b07e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b080:	e00e      	b.n	800b0a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f8fa 	bl	800b27c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b088:	e00a      	b.n	800b0a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 f8f6 	bl	800b27c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b090:	e006      	b.n	800b0a0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f000 f8f2 	bl	800b27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2200      	movs	r2, #0
 800b09c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b09e:	e0c4      	b.n	800b22a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0a0:	bf00      	nop
    return;
 800b0a2:	e0c2      	b.n	800b22a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	f040 80a2 	bne.w	800b1f2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800b0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b0:	f003 0310 	and.w	r3, r3, #16
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f000 809c 	beq.w	800b1f2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800b0ba:	6a3b      	ldr	r3, [r7, #32]
 800b0bc:	f003 0310 	and.w	r3, r3, #16
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	f000 8096 	beq.w	800b1f2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60fb      	str	r3, [r7, #12]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	60fb      	str	r3, [r7, #12]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	685b      	ldr	r3, [r3, #4]
 800b0d8:	60fb      	str	r3, [r7, #12]
 800b0da:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	695b      	ldr	r3, [r3, #20]
 800b0e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0e6:	2b40      	cmp	r3, #64	; 0x40
 800b0e8:	d14f      	bne.n	800b18a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800b0f4:	8a3b      	ldrh	r3, [r7, #16]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	f000 8099 	beq.w	800b22e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b100:	8a3a      	ldrh	r2, [r7, #16]
 800b102:	429a      	cmp	r2, r3
 800b104:	f080 8093 	bcs.w	800b22e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	8a3a      	ldrh	r2, [r7, #16]
 800b10c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b112:	69db      	ldr	r3, [r3, #28]
 800b114:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b118:	d02b      	beq.n	800b172 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	68da      	ldr	r2, [r3, #12]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b128:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	695a      	ldr	r2, [r3, #20]
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f022 0201 	bic.w	r2, r2, #1
 800b138:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	695a      	ldr	r2, [r3, #20]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b148:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2220      	movs	r2, #32
 800b14e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2200      	movs	r2, #0
 800b156:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	68da      	ldr	r2, [r3, #12]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f022 0210 	bic.w	r2, r2, #16
 800b166:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7fd fa9b 	bl	80086a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	1ad3      	subs	r3, r2, r3
 800b17e:	b29b      	uxth	r3, r3
 800b180:	4619      	mov	r1, r3
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 f884 	bl	800b290 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b188:	e051      	b.n	800b22e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b192:	b29b      	uxth	r3, r3
 800b194:	1ad3      	subs	r3, r2, r3
 800b196:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b19c:	b29b      	uxth	r3, r3
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d047      	beq.n	800b232 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800b1a2:	8a7b      	ldrh	r3, [r7, #18]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d044      	beq.n	800b232 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68da      	ldr	r2, [r3, #12]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b1b6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	695a      	ldr	r2, [r3, #20]
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f022 0201 	bic.w	r2, r2, #1
 800b1c6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2220      	movs	r2, #32
 800b1cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	68da      	ldr	r2, [r3, #12]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f022 0210 	bic.w	r2, r2, #16
 800b1e4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b1e6:	8a7b      	ldrh	r3, [r7, #18]
 800b1e8:	4619      	mov	r1, r3
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 f850 	bl	800b290 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800b1f0:	e01f      	b.n	800b232 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d008      	beq.n	800b20e <HAL_UART_IRQHandler+0x326>
 800b1fc:	6a3b      	ldr	r3, [r7, #32]
 800b1fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b202:	2b00      	cmp	r3, #0
 800b204:	d003      	beq.n	800b20e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800b206:	6878      	ldr	r0, [r7, #4]
 800b208:	f000 f926 	bl	800b458 <UART_Transmit_IT>
    return;
 800b20c:	e012      	b.n	800b234 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00d      	beq.n	800b234 <HAL_UART_IRQHandler+0x34c>
 800b218:	6a3b      	ldr	r3, [r7, #32]
 800b21a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d008      	beq.n	800b234 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f000 f968 	bl	800b4f8 <UART_EndTransmit_IT>
    return;
 800b228:	e004      	b.n	800b234 <HAL_UART_IRQHandler+0x34c>
    return;
 800b22a:	bf00      	nop
 800b22c:	e002      	b.n	800b234 <HAL_UART_IRQHandler+0x34c>
      return;
 800b22e:	bf00      	nop
 800b230:	e000      	b.n	800b234 <HAL_UART_IRQHandler+0x34c>
      return;
 800b232:	bf00      	nop
  }
}
 800b234:	3728      	adds	r7, #40	; 0x28
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	0800b431 	.word	0x0800b431

0800b240 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b240:	b480      	push	{r7}
 800b242:	b083      	sub	sp, #12
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b248:	bf00      	nop
 800b24a:	370c      	adds	r7, #12
 800b24c:	46bd      	mov	sp, r7
 800b24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b252:	4770      	bx	lr

0800b254 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b254:	b480      	push	{r7}
 800b256:	b083      	sub	sp, #12
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b25c:	bf00      	nop
 800b25e:	370c      	adds	r7, #12
 800b260:	46bd      	mov	sp, r7
 800b262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b266:	4770      	bx	lr

0800b268 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b268:	b480      	push	{r7}
 800b26a:	b083      	sub	sp, #12
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b270:	bf00      	nop
 800b272:	370c      	adds	r7, #12
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b083      	sub	sp, #12
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b284:	bf00      	nop
 800b286:	370c      	adds	r7, #12
 800b288:	46bd      	mov	sp, r7
 800b28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28e:	4770      	bx	lr

0800b290 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
 800b298:	460b      	mov	r3, r1
 800b29a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b29c:	bf00      	nop
 800b29e:	370c      	adds	r7, #12
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b084      	sub	sp, #16
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2b4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d113      	bne.n	800b2ec <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	695a      	ldr	r2, [r3, #20]
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b2d8:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	68da      	ldr	r2, [r3, #12]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b2e8:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b2ea:	e002      	b.n	800b2f2 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f7ff ffa7 	bl	800b240 <HAL_UART_TxCpltCallback>
}
 800b2f2:	bf00      	nop
 800b2f4:	3710      	adds	r7, #16
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}

0800b2fa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b2fa:	b580      	push	{r7, lr}
 800b2fc:	b084      	sub	sp, #16
 800b2fe:	af00      	add	r7, sp, #0
 800b300:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b306:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b308:	68f8      	ldr	r0, [r7, #12]
 800b30a:	f7ff ffa3 	bl	800b254 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b30e:	bf00      	nop
 800b310:	3710      	adds	r7, #16
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b084      	sub	sp, #16
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b31e:	2300      	movs	r3, #0
 800b320:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b326:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	695b      	ldr	r3, [r3, #20]
 800b32e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b332:	2b80      	cmp	r3, #128	; 0x80
 800b334:	bf0c      	ite	eq
 800b336:	2301      	moveq	r3, #1
 800b338:	2300      	movne	r3, #0
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b344:	b2db      	uxtb	r3, r3
 800b346:	2b21      	cmp	r3, #33	; 0x21
 800b348:	d108      	bne.n	800b35c <UART_DMAError+0x46>
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d005      	beq.n	800b35c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	2200      	movs	r2, #0
 800b354:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b356:	68b8      	ldr	r0, [r7, #8]
 800b358:	f000 f827 	bl	800b3aa <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b366:	2b40      	cmp	r3, #64	; 0x40
 800b368:	bf0c      	ite	eq
 800b36a:	2301      	moveq	r3, #1
 800b36c:	2300      	movne	r3, #0
 800b36e:	b2db      	uxtb	r3, r3
 800b370:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	2b22      	cmp	r3, #34	; 0x22
 800b37c:	d108      	bne.n	800b390 <UART_DMAError+0x7a>
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d005      	beq.n	800b390 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	2200      	movs	r2, #0
 800b388:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b38a:	68b8      	ldr	r0, [r7, #8]
 800b38c:	f000 f823 	bl	800b3d6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b394:	f043 0210 	orr.w	r2, r3, #16
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b39c:	68b8      	ldr	r0, [r7, #8]
 800b39e:	f7ff ff6d 	bl	800b27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3a2:	bf00      	nop
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}

0800b3aa <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b3aa:	b480      	push	{r7}
 800b3ac:	b083      	sub	sp, #12
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	68da      	ldr	r2, [r3, #12]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b3c0:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2220      	movs	r2, #32
 800b3c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b3ca:	bf00      	nop
 800b3cc:	370c      	adds	r7, #12
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d4:	4770      	bx	lr

0800b3d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b3d6:	b480      	push	{r7}
 800b3d8:	b083      	sub	sp, #12
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	68da      	ldr	r2, [r3, #12]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b3ec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	695a      	ldr	r2, [r3, #20]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f022 0201 	bic.w	r2, r2, #1
 800b3fc:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b402:	2b01      	cmp	r3, #1
 800b404:	d107      	bne.n	800b416 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	68da      	ldr	r2, [r3, #12]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f022 0210 	bic.w	r2, r2, #16
 800b414:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2220      	movs	r2, #32
 800b41a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2200      	movs	r2, #0
 800b422:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b424:	bf00      	nop
 800b426:	370c      	adds	r7, #12
 800b428:	46bd      	mov	sp, r7
 800b42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42e:	4770      	bx	lr

0800b430 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2200      	movs	r2, #0
 800b442:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2200      	movs	r2, #0
 800b448:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b44a:	68f8      	ldr	r0, [r7, #12]
 800b44c:	f7ff ff16 	bl	800b27c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b450:	bf00      	nop
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}

0800b458 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b466:	b2db      	uxtb	r3, r3
 800b468:	2b21      	cmp	r3, #33	; 0x21
 800b46a:	d13e      	bne.n	800b4ea <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b474:	d114      	bne.n	800b4a0 <UART_Transmit_IT+0x48>
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	691b      	ldr	r3, [r3, #16]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d110      	bne.n	800b4a0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6a1b      	ldr	r3, [r3, #32]
 800b482:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	881b      	ldrh	r3, [r3, #0]
 800b488:	461a      	mov	r2, r3
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b492:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	6a1b      	ldr	r3, [r3, #32]
 800b498:	1c9a      	adds	r2, r3, #2
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	621a      	str	r2, [r3, #32]
 800b49e:	e008      	b.n	800b4b2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6a1b      	ldr	r3, [r3, #32]
 800b4a4:	1c59      	adds	r1, r3, #1
 800b4a6:	687a      	ldr	r2, [r7, #4]
 800b4a8:	6211      	str	r1, [r2, #32]
 800b4aa:	781a      	ldrb	r2, [r3, #0]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	3b01      	subs	r3, #1
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	4619      	mov	r1, r3
 800b4c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10f      	bne.n	800b4e6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	68da      	ldr	r2, [r3, #12]
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b4d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	68da      	ldr	r2, [r3, #12]
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	e000      	b.n	800b4ec <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b4ea:	2302      	movs	r3, #2
  }
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3714      	adds	r7, #20
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f6:	4770      	bx	lr

0800b4f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b4f8:	b580      	push	{r7, lr}
 800b4fa:	b082      	sub	sp, #8
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	68da      	ldr	r2, [r3, #12]
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b50e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	2220      	movs	r2, #32
 800b514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f7ff fe91 	bl	800b240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3708      	adds	r7, #8
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b536:	b2db      	uxtb	r3, r3
 800b538:	2b22      	cmp	r3, #34	; 0x22
 800b53a:	f040 8087 	bne.w	800b64c <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	689b      	ldr	r3, [r3, #8]
 800b542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b546:	d117      	bne.n	800b578 <UART_Receive_IT+0x50>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	691b      	ldr	r3, [r3, #16]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d113      	bne.n	800b578 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b550:	2300      	movs	r3, #0
 800b552:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b558:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	685b      	ldr	r3, [r3, #4]
 800b560:	b29b      	uxth	r3, r3
 800b562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b566:	b29a      	uxth	r2, r3
 800b568:	68bb      	ldr	r3, [r7, #8]
 800b56a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b570:	1c9a      	adds	r2, r3, #2
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	629a      	str	r2, [r3, #40]	; 0x28
 800b576:	e026      	b.n	800b5c6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b57c:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800b57e:	2300      	movs	r3, #0
 800b580:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b58a:	d007      	beq.n	800b59c <UART_Receive_IT+0x74>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10a      	bne.n	800b5aa <UART_Receive_IT+0x82>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	691b      	ldr	r3, [r3, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d106      	bne.n	800b5aa <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	b2da      	uxtb	r2, r3
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	701a      	strb	r2, [r3, #0]
 800b5a8:	e008      	b.n	800b5bc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	b2db      	uxtb	r3, r3
 800b5b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5b6:	b2da      	uxtb	r2, r3
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c0:	1c5a      	adds	r2, r3, #1
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	b29b      	uxth	r3, r3
 800b5d0:	687a      	ldr	r2, [r7, #4]
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d136      	bne.n	800b648 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	68da      	ldr	r2, [r3, #12]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f022 0220 	bic.w	r2, r2, #32
 800b5e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	68da      	ldr	r2, [r3, #12]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b5f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	695a      	ldr	r2, [r3, #20]
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	f022 0201 	bic.w	r2, r2, #1
 800b608:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	2220      	movs	r2, #32
 800b60e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b616:	2b01      	cmp	r3, #1
 800b618:	d10e      	bne.n	800b638 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	68da      	ldr	r2, [r3, #12]
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	f022 0210 	bic.w	r2, r2, #16
 800b628:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b62e:	4619      	mov	r1, r3
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f7ff fe2d 	bl	800b290 <HAL_UARTEx_RxEventCallback>
 800b636:	e002      	b.n	800b63e <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f7ff fe15 	bl	800b268 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2200      	movs	r2, #0
 800b642:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800b644:	2300      	movs	r3, #0
 800b646:	e002      	b.n	800b64e <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800b648:	2300      	movs	r3, #0
 800b64a:	e000      	b.n	800b64e <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800b64c:	2302      	movs	r3, #2
  }
}
 800b64e:	4618      	mov	r0, r3
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
	...

0800b658 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b65c:	b09f      	sub	sp, #124	; 0x7c
 800b65e:	af00      	add	r7, sp, #0
 800b660:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b66c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b66e:	68d9      	ldr	r1, [r3, #12]
 800b670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b672:	681a      	ldr	r2, [r3, #0]
 800b674:	ea40 0301 	orr.w	r3, r0, r1
 800b678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b67a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b67c:	689a      	ldr	r2, [r3, #8]
 800b67e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b680:	691b      	ldr	r3, [r3, #16]
 800b682:	431a      	orrs	r2, r3
 800b684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b686:	695b      	ldr	r3, [r3, #20]
 800b688:	431a      	orrs	r2, r3
 800b68a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b68c:	69db      	ldr	r3, [r3, #28]
 800b68e:	4313      	orrs	r3, r2
 800b690:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800b692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b69c:	f021 010c 	bic.w	r1, r1, #12
 800b6a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6a2:	681a      	ldr	r2, [r3, #0]
 800b6a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b6a6:	430b      	orrs	r3, r1
 800b6a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b6aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	695b      	ldr	r3, [r3, #20]
 800b6b0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b6b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6b6:	6999      	ldr	r1, [r3, #24]
 800b6b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	ea40 0301 	orr.w	r3, r0, r1
 800b6c0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b6c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	4bc5      	ldr	r3, [pc, #788]	; (800b9dc <UART_SetConfig+0x384>)
 800b6c8:	429a      	cmp	r2, r3
 800b6ca:	d004      	beq.n	800b6d6 <UART_SetConfig+0x7e>
 800b6cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6ce:	681a      	ldr	r2, [r3, #0]
 800b6d0:	4bc3      	ldr	r3, [pc, #780]	; (800b9e0 <UART_SetConfig+0x388>)
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d103      	bne.n	800b6de <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b6d6:	f7fe f905 	bl	80098e4 <HAL_RCC_GetPCLK2Freq>
 800b6da:	6778      	str	r0, [r7, #116]	; 0x74
 800b6dc:	e002      	b.n	800b6e4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b6de:	f7fe f8ed 	bl	80098bc <HAL_RCC_GetPCLK1Freq>
 800b6e2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b6e6:	69db      	ldr	r3, [r3, #28]
 800b6e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6ec:	f040 80b6 	bne.w	800b85c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b6f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b6f2:	461c      	mov	r4, r3
 800b6f4:	f04f 0500 	mov.w	r5, #0
 800b6f8:	4622      	mov	r2, r4
 800b6fa:	462b      	mov	r3, r5
 800b6fc:	1891      	adds	r1, r2, r2
 800b6fe:	6439      	str	r1, [r7, #64]	; 0x40
 800b700:	415b      	adcs	r3, r3
 800b702:	647b      	str	r3, [r7, #68]	; 0x44
 800b704:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b708:	1912      	adds	r2, r2, r4
 800b70a:	eb45 0303 	adc.w	r3, r5, r3
 800b70e:	f04f 0000 	mov.w	r0, #0
 800b712:	f04f 0100 	mov.w	r1, #0
 800b716:	00d9      	lsls	r1, r3, #3
 800b718:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b71c:	00d0      	lsls	r0, r2, #3
 800b71e:	4602      	mov	r2, r0
 800b720:	460b      	mov	r3, r1
 800b722:	1911      	adds	r1, r2, r4
 800b724:	6639      	str	r1, [r7, #96]	; 0x60
 800b726:	416b      	adcs	r3, r5
 800b728:	667b      	str	r3, [r7, #100]	; 0x64
 800b72a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	461a      	mov	r2, r3
 800b730:	f04f 0300 	mov.w	r3, #0
 800b734:	1891      	adds	r1, r2, r2
 800b736:	63b9      	str	r1, [r7, #56]	; 0x38
 800b738:	415b      	adcs	r3, r3
 800b73a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b73c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b740:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800b744:	f7f5 faa0 	bl	8000c88 <__aeabi_uldivmod>
 800b748:	4602      	mov	r2, r0
 800b74a:	460b      	mov	r3, r1
 800b74c:	4ba5      	ldr	r3, [pc, #660]	; (800b9e4 <UART_SetConfig+0x38c>)
 800b74e:	fba3 2302 	umull	r2, r3, r3, r2
 800b752:	095b      	lsrs	r3, r3, #5
 800b754:	011e      	lsls	r6, r3, #4
 800b756:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b758:	461c      	mov	r4, r3
 800b75a:	f04f 0500 	mov.w	r5, #0
 800b75e:	4622      	mov	r2, r4
 800b760:	462b      	mov	r3, r5
 800b762:	1891      	adds	r1, r2, r2
 800b764:	6339      	str	r1, [r7, #48]	; 0x30
 800b766:	415b      	adcs	r3, r3
 800b768:	637b      	str	r3, [r7, #52]	; 0x34
 800b76a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800b76e:	1912      	adds	r2, r2, r4
 800b770:	eb45 0303 	adc.w	r3, r5, r3
 800b774:	f04f 0000 	mov.w	r0, #0
 800b778:	f04f 0100 	mov.w	r1, #0
 800b77c:	00d9      	lsls	r1, r3, #3
 800b77e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b782:	00d0      	lsls	r0, r2, #3
 800b784:	4602      	mov	r2, r0
 800b786:	460b      	mov	r3, r1
 800b788:	1911      	adds	r1, r2, r4
 800b78a:	65b9      	str	r1, [r7, #88]	; 0x58
 800b78c:	416b      	adcs	r3, r5
 800b78e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b790:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	461a      	mov	r2, r3
 800b796:	f04f 0300 	mov.w	r3, #0
 800b79a:	1891      	adds	r1, r2, r2
 800b79c:	62b9      	str	r1, [r7, #40]	; 0x28
 800b79e:	415b      	adcs	r3, r3
 800b7a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b7a6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800b7aa:	f7f5 fa6d 	bl	8000c88 <__aeabi_uldivmod>
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	4b8c      	ldr	r3, [pc, #560]	; (800b9e4 <UART_SetConfig+0x38c>)
 800b7b4:	fba3 1302 	umull	r1, r3, r3, r2
 800b7b8:	095b      	lsrs	r3, r3, #5
 800b7ba:	2164      	movs	r1, #100	; 0x64
 800b7bc:	fb01 f303 	mul.w	r3, r1, r3
 800b7c0:	1ad3      	subs	r3, r2, r3
 800b7c2:	00db      	lsls	r3, r3, #3
 800b7c4:	3332      	adds	r3, #50	; 0x32
 800b7c6:	4a87      	ldr	r2, [pc, #540]	; (800b9e4 <UART_SetConfig+0x38c>)
 800b7c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b7cc:	095b      	lsrs	r3, r3, #5
 800b7ce:	005b      	lsls	r3, r3, #1
 800b7d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b7d4:	441e      	add	r6, r3
 800b7d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f04f 0100 	mov.w	r1, #0
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	1894      	adds	r4, r2, r2
 800b7e4:	623c      	str	r4, [r7, #32]
 800b7e6:	415b      	adcs	r3, r3
 800b7e8:	627b      	str	r3, [r7, #36]	; 0x24
 800b7ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b7ee:	1812      	adds	r2, r2, r0
 800b7f0:	eb41 0303 	adc.w	r3, r1, r3
 800b7f4:	f04f 0400 	mov.w	r4, #0
 800b7f8:	f04f 0500 	mov.w	r5, #0
 800b7fc:	00dd      	lsls	r5, r3, #3
 800b7fe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b802:	00d4      	lsls	r4, r2, #3
 800b804:	4622      	mov	r2, r4
 800b806:	462b      	mov	r3, r5
 800b808:	1814      	adds	r4, r2, r0
 800b80a:	653c      	str	r4, [r7, #80]	; 0x50
 800b80c:	414b      	adcs	r3, r1
 800b80e:	657b      	str	r3, [r7, #84]	; 0x54
 800b810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b812:	685b      	ldr	r3, [r3, #4]
 800b814:	461a      	mov	r2, r3
 800b816:	f04f 0300 	mov.w	r3, #0
 800b81a:	1891      	adds	r1, r2, r2
 800b81c:	61b9      	str	r1, [r7, #24]
 800b81e:	415b      	adcs	r3, r3
 800b820:	61fb      	str	r3, [r7, #28]
 800b822:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b826:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800b82a:	f7f5 fa2d 	bl	8000c88 <__aeabi_uldivmod>
 800b82e:	4602      	mov	r2, r0
 800b830:	460b      	mov	r3, r1
 800b832:	4b6c      	ldr	r3, [pc, #432]	; (800b9e4 <UART_SetConfig+0x38c>)
 800b834:	fba3 1302 	umull	r1, r3, r3, r2
 800b838:	095b      	lsrs	r3, r3, #5
 800b83a:	2164      	movs	r1, #100	; 0x64
 800b83c:	fb01 f303 	mul.w	r3, r1, r3
 800b840:	1ad3      	subs	r3, r2, r3
 800b842:	00db      	lsls	r3, r3, #3
 800b844:	3332      	adds	r3, #50	; 0x32
 800b846:	4a67      	ldr	r2, [pc, #412]	; (800b9e4 <UART_SetConfig+0x38c>)
 800b848:	fba2 2303 	umull	r2, r3, r2, r3
 800b84c:	095b      	lsrs	r3, r3, #5
 800b84e:	f003 0207 	and.w	r2, r3, #7
 800b852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	4432      	add	r2, r6
 800b858:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b85a:	e0b9      	b.n	800b9d0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b85c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b85e:	461c      	mov	r4, r3
 800b860:	f04f 0500 	mov.w	r5, #0
 800b864:	4622      	mov	r2, r4
 800b866:	462b      	mov	r3, r5
 800b868:	1891      	adds	r1, r2, r2
 800b86a:	6139      	str	r1, [r7, #16]
 800b86c:	415b      	adcs	r3, r3
 800b86e:	617b      	str	r3, [r7, #20]
 800b870:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800b874:	1912      	adds	r2, r2, r4
 800b876:	eb45 0303 	adc.w	r3, r5, r3
 800b87a:	f04f 0000 	mov.w	r0, #0
 800b87e:	f04f 0100 	mov.w	r1, #0
 800b882:	00d9      	lsls	r1, r3, #3
 800b884:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b888:	00d0      	lsls	r0, r2, #3
 800b88a:	4602      	mov	r2, r0
 800b88c:	460b      	mov	r3, r1
 800b88e:	eb12 0804 	adds.w	r8, r2, r4
 800b892:	eb43 0905 	adc.w	r9, r3, r5
 800b896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f04f 0100 	mov.w	r1, #0
 800b8a0:	f04f 0200 	mov.w	r2, #0
 800b8a4:	f04f 0300 	mov.w	r3, #0
 800b8a8:	008b      	lsls	r3, r1, #2
 800b8aa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b8ae:	0082      	lsls	r2, r0, #2
 800b8b0:	4640      	mov	r0, r8
 800b8b2:	4649      	mov	r1, r9
 800b8b4:	f7f5 f9e8 	bl	8000c88 <__aeabi_uldivmod>
 800b8b8:	4602      	mov	r2, r0
 800b8ba:	460b      	mov	r3, r1
 800b8bc:	4b49      	ldr	r3, [pc, #292]	; (800b9e4 <UART_SetConfig+0x38c>)
 800b8be:	fba3 2302 	umull	r2, r3, r3, r2
 800b8c2:	095b      	lsrs	r3, r3, #5
 800b8c4:	011e      	lsls	r6, r3, #4
 800b8c6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	f04f 0100 	mov.w	r1, #0
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	1894      	adds	r4, r2, r2
 800b8d4:	60bc      	str	r4, [r7, #8]
 800b8d6:	415b      	adcs	r3, r3
 800b8d8:	60fb      	str	r3, [r7, #12]
 800b8da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b8de:	1812      	adds	r2, r2, r0
 800b8e0:	eb41 0303 	adc.w	r3, r1, r3
 800b8e4:	f04f 0400 	mov.w	r4, #0
 800b8e8:	f04f 0500 	mov.w	r5, #0
 800b8ec:	00dd      	lsls	r5, r3, #3
 800b8ee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b8f2:	00d4      	lsls	r4, r2, #3
 800b8f4:	4622      	mov	r2, r4
 800b8f6:	462b      	mov	r3, r5
 800b8f8:	1814      	adds	r4, r2, r0
 800b8fa:	64bc      	str	r4, [r7, #72]	; 0x48
 800b8fc:	414b      	adcs	r3, r1
 800b8fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	4618      	mov	r0, r3
 800b906:	f04f 0100 	mov.w	r1, #0
 800b90a:	f04f 0200 	mov.w	r2, #0
 800b90e:	f04f 0300 	mov.w	r3, #0
 800b912:	008b      	lsls	r3, r1, #2
 800b914:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b918:	0082      	lsls	r2, r0, #2
 800b91a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800b91e:	f7f5 f9b3 	bl	8000c88 <__aeabi_uldivmod>
 800b922:	4602      	mov	r2, r0
 800b924:	460b      	mov	r3, r1
 800b926:	4b2f      	ldr	r3, [pc, #188]	; (800b9e4 <UART_SetConfig+0x38c>)
 800b928:	fba3 1302 	umull	r1, r3, r3, r2
 800b92c:	095b      	lsrs	r3, r3, #5
 800b92e:	2164      	movs	r1, #100	; 0x64
 800b930:	fb01 f303 	mul.w	r3, r1, r3
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	011b      	lsls	r3, r3, #4
 800b938:	3332      	adds	r3, #50	; 0x32
 800b93a:	4a2a      	ldr	r2, [pc, #168]	; (800b9e4 <UART_SetConfig+0x38c>)
 800b93c:	fba2 2303 	umull	r2, r3, r2, r3
 800b940:	095b      	lsrs	r3, r3, #5
 800b942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b946:	441e      	add	r6, r3
 800b948:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b94a:	4618      	mov	r0, r3
 800b94c:	f04f 0100 	mov.w	r1, #0
 800b950:	4602      	mov	r2, r0
 800b952:	460b      	mov	r3, r1
 800b954:	1894      	adds	r4, r2, r2
 800b956:	603c      	str	r4, [r7, #0]
 800b958:	415b      	adcs	r3, r3
 800b95a:	607b      	str	r3, [r7, #4]
 800b95c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b960:	1812      	adds	r2, r2, r0
 800b962:	eb41 0303 	adc.w	r3, r1, r3
 800b966:	f04f 0400 	mov.w	r4, #0
 800b96a:	f04f 0500 	mov.w	r5, #0
 800b96e:	00dd      	lsls	r5, r3, #3
 800b970:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800b974:	00d4      	lsls	r4, r2, #3
 800b976:	4622      	mov	r2, r4
 800b978:	462b      	mov	r3, r5
 800b97a:	eb12 0a00 	adds.w	sl, r2, r0
 800b97e:	eb43 0b01 	adc.w	fp, r3, r1
 800b982:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	4618      	mov	r0, r3
 800b988:	f04f 0100 	mov.w	r1, #0
 800b98c:	f04f 0200 	mov.w	r2, #0
 800b990:	f04f 0300 	mov.w	r3, #0
 800b994:	008b      	lsls	r3, r1, #2
 800b996:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800b99a:	0082      	lsls	r2, r0, #2
 800b99c:	4650      	mov	r0, sl
 800b99e:	4659      	mov	r1, fp
 800b9a0:	f7f5 f972 	bl	8000c88 <__aeabi_uldivmod>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	4b0e      	ldr	r3, [pc, #56]	; (800b9e4 <UART_SetConfig+0x38c>)
 800b9aa:	fba3 1302 	umull	r1, r3, r3, r2
 800b9ae:	095b      	lsrs	r3, r3, #5
 800b9b0:	2164      	movs	r1, #100	; 0x64
 800b9b2:	fb01 f303 	mul.w	r3, r1, r3
 800b9b6:	1ad3      	subs	r3, r2, r3
 800b9b8:	011b      	lsls	r3, r3, #4
 800b9ba:	3332      	adds	r3, #50	; 0x32
 800b9bc:	4a09      	ldr	r2, [pc, #36]	; (800b9e4 <UART_SetConfig+0x38c>)
 800b9be:	fba2 2303 	umull	r2, r3, r2, r3
 800b9c2:	095b      	lsrs	r3, r3, #5
 800b9c4:	f003 020f 	and.w	r2, r3, #15
 800b9c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4432      	add	r2, r6
 800b9ce:	609a      	str	r2, [r3, #8]
}
 800b9d0:	bf00      	nop
 800b9d2:	377c      	adds	r7, #124	; 0x7c
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9da:	bf00      	nop
 800b9dc:	40011000 	.word	0x40011000
 800b9e0:	40011400 	.word	0x40011400
 800b9e4:	51eb851f 	.word	0x51eb851f

0800b9e8 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	681a      	ldr	r2, [r3, #0]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba00:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800ba02:	68fa      	ldr	r2, [r7, #12]
 800ba04:	4b20      	ldr	r3, [pc, #128]	; (800ba88 <FSMC_NORSRAM_Init+0xa0>)
 800ba06:	4013      	ands	r3, r2
 800ba08:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ba12:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800ba14:	683b      	ldr	r3, [r7, #0]
 800ba16:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800ba18:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800ba1e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800ba24:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 800ba2a:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 800ba30:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800ba36:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800ba3c:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800ba42:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800ba48:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 800ba4e:	431a      	orrs	r2, r3
                     Init->WriteBurst
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800ba54:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	4313      	orrs	r3, r2
 800ba5a:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	689b      	ldr	r3, [r3, #8]
 800ba60:	2b08      	cmp	r3, #8
 800ba62:	d103      	bne.n	800ba6c <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba6a:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	681a      	ldr	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	68f9      	ldr	r1, [r7, #12]
 800ba74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3714      	adds	r7, #20
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr
 800ba86:	bf00      	nop
 800ba88:	fff00080 	.word	0xfff00080

0800ba8c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b087      	sub	sp, #28
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	60f8      	str	r0, [r7, #12]
 800ba94:	60b9      	str	r1, [r7, #8]
 800ba96:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800ba98:	2300      	movs	r3, #0
 800ba9a:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	1c5a      	adds	r2, r3, #1
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baa6:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800baae:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bab0:	68bb      	ldr	r3, [r7, #8]
 800bab2:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	685b      	ldr	r3, [r3, #4]
 800bab8:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800baba:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	689b      	ldr	r3, [r3, #8]
 800bac0:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800bac2:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800baca:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800bacc:	68bb      	ldr	r3, [r7, #8]
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	3b01      	subs	r3, #1
 800bad2:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bad4:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	695b      	ldr	r3, [r3, #20]
 800bada:	3b02      	subs	r3, #2
 800badc:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800bade:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bae4:	4313      	orrs	r3, r2
 800bae6:	697a      	ldr	r2, [r7, #20]
 800bae8:	4313      	orrs	r3, r2
 800baea:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	1c5a      	adds	r2, r3, #1
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	6979      	ldr	r1, [r7, #20]
 800baf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	371c      	adds	r7, #28
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr
	...

0800bb08 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800bb08:	b480      	push	{r7}
 800bb0a:	b087      	sub	sp, #28
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	607a      	str	r2, [r7, #4]
 800bb14:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800bb16:	2300      	movs	r3, #0
 800bb18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bb20:	d122      	bne.n	800bb68 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb2a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800bb2c:	697a      	ldr	r2, [r7, #20]
 800bb2e:	4b15      	ldr	r3, [pc, #84]	; (800bb84 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800bb30:	4013      	ands	r3, r2
 800bb32:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bb3e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	689b      	ldr	r3, [r3, #8]
 800bb44:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800bb46:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	68db      	ldr	r3, [r3, #12]
 800bb4c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800bb4e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800bb54:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800bb56:	697a      	ldr	r2, [r7, #20]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	6979      	ldr	r1, [r7, #20]
 800bb62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bb66:	e005      	b.n	800bb74 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	687a      	ldr	r2, [r7, #4]
 800bb6c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800bb70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	371c      	adds	r7, #28
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb80:	4770      	bx	lr
 800bb82:	bf00      	nop
 800bb84:	cff00000 	.word	0xcff00000

0800bb88 <__errno>:
 800bb88:	4b01      	ldr	r3, [pc, #4]	; (800bb90 <__errno+0x8>)
 800bb8a:	6818      	ldr	r0, [r3, #0]
 800bb8c:	4770      	bx	lr
 800bb8e:	bf00      	nop
 800bb90:	20000524 	.word	0x20000524

0800bb94 <__libc_init_array>:
 800bb94:	b570      	push	{r4, r5, r6, lr}
 800bb96:	4d0d      	ldr	r5, [pc, #52]	; (800bbcc <__libc_init_array+0x38>)
 800bb98:	4c0d      	ldr	r4, [pc, #52]	; (800bbd0 <__libc_init_array+0x3c>)
 800bb9a:	1b64      	subs	r4, r4, r5
 800bb9c:	10a4      	asrs	r4, r4, #2
 800bb9e:	2600      	movs	r6, #0
 800bba0:	42a6      	cmp	r6, r4
 800bba2:	d109      	bne.n	800bbb8 <__libc_init_array+0x24>
 800bba4:	4d0b      	ldr	r5, [pc, #44]	; (800bbd4 <__libc_init_array+0x40>)
 800bba6:	4c0c      	ldr	r4, [pc, #48]	; (800bbd8 <__libc_init_array+0x44>)
 800bba8:	f004 fd2e 	bl	8010608 <_init>
 800bbac:	1b64      	subs	r4, r4, r5
 800bbae:	10a4      	asrs	r4, r4, #2
 800bbb0:	2600      	movs	r6, #0
 800bbb2:	42a6      	cmp	r6, r4
 800bbb4:	d105      	bne.n	800bbc2 <__libc_init_array+0x2e>
 800bbb6:	bd70      	pop	{r4, r5, r6, pc}
 800bbb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbbc:	4798      	blx	r3
 800bbbe:	3601      	adds	r6, #1
 800bbc0:	e7ee      	b.n	800bba0 <__libc_init_array+0xc>
 800bbc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bbc6:	4798      	blx	r3
 800bbc8:	3601      	adds	r6, #1
 800bbca:	e7f2      	b.n	800bbb2 <__libc_init_array+0x1e>
 800bbcc:	0801531c 	.word	0x0801531c
 800bbd0:	0801531c 	.word	0x0801531c
 800bbd4:	0801531c 	.word	0x0801531c
 800bbd8:	08015320 	.word	0x08015320

0800bbdc <memcpy>:
 800bbdc:	440a      	add	r2, r1
 800bbde:	4291      	cmp	r1, r2
 800bbe0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbe4:	d100      	bne.n	800bbe8 <memcpy+0xc>
 800bbe6:	4770      	bx	lr
 800bbe8:	b510      	push	{r4, lr}
 800bbea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbee:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbf2:	4291      	cmp	r1, r2
 800bbf4:	d1f9      	bne.n	800bbea <memcpy+0xe>
 800bbf6:	bd10      	pop	{r4, pc}

0800bbf8 <memset>:
 800bbf8:	4402      	add	r2, r0
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	4293      	cmp	r3, r2
 800bbfe:	d100      	bne.n	800bc02 <memset+0xa>
 800bc00:	4770      	bx	lr
 800bc02:	f803 1b01 	strb.w	r1, [r3], #1
 800bc06:	e7f9      	b.n	800bbfc <memset+0x4>

0800bc08 <__cvt>:
 800bc08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc0c:	ec55 4b10 	vmov	r4, r5, d0
 800bc10:	2d00      	cmp	r5, #0
 800bc12:	460e      	mov	r6, r1
 800bc14:	4619      	mov	r1, r3
 800bc16:	462b      	mov	r3, r5
 800bc18:	bfbb      	ittet	lt
 800bc1a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bc1e:	461d      	movlt	r5, r3
 800bc20:	2300      	movge	r3, #0
 800bc22:	232d      	movlt	r3, #45	; 0x2d
 800bc24:	700b      	strb	r3, [r1, #0]
 800bc26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc28:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bc2c:	4691      	mov	r9, r2
 800bc2e:	f023 0820 	bic.w	r8, r3, #32
 800bc32:	bfbc      	itt	lt
 800bc34:	4622      	movlt	r2, r4
 800bc36:	4614      	movlt	r4, r2
 800bc38:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bc3c:	d005      	beq.n	800bc4a <__cvt+0x42>
 800bc3e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bc42:	d100      	bne.n	800bc46 <__cvt+0x3e>
 800bc44:	3601      	adds	r6, #1
 800bc46:	2102      	movs	r1, #2
 800bc48:	e000      	b.n	800bc4c <__cvt+0x44>
 800bc4a:	2103      	movs	r1, #3
 800bc4c:	ab03      	add	r3, sp, #12
 800bc4e:	9301      	str	r3, [sp, #4]
 800bc50:	ab02      	add	r3, sp, #8
 800bc52:	9300      	str	r3, [sp, #0]
 800bc54:	ec45 4b10 	vmov	d0, r4, r5
 800bc58:	4653      	mov	r3, sl
 800bc5a:	4632      	mov	r2, r6
 800bc5c:	f001 fdb4 	bl	800d7c8 <_dtoa_r>
 800bc60:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bc64:	4607      	mov	r7, r0
 800bc66:	d102      	bne.n	800bc6e <__cvt+0x66>
 800bc68:	f019 0f01 	tst.w	r9, #1
 800bc6c:	d022      	beq.n	800bcb4 <__cvt+0xac>
 800bc6e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bc72:	eb07 0906 	add.w	r9, r7, r6
 800bc76:	d110      	bne.n	800bc9a <__cvt+0x92>
 800bc78:	783b      	ldrb	r3, [r7, #0]
 800bc7a:	2b30      	cmp	r3, #48	; 0x30
 800bc7c:	d10a      	bne.n	800bc94 <__cvt+0x8c>
 800bc7e:	2200      	movs	r2, #0
 800bc80:	2300      	movs	r3, #0
 800bc82:	4620      	mov	r0, r4
 800bc84:	4629      	mov	r1, r5
 800bc86:	f7f4 ff1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc8a:	b918      	cbnz	r0, 800bc94 <__cvt+0x8c>
 800bc8c:	f1c6 0601 	rsb	r6, r6, #1
 800bc90:	f8ca 6000 	str.w	r6, [sl]
 800bc94:	f8da 3000 	ldr.w	r3, [sl]
 800bc98:	4499      	add	r9, r3
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	4620      	mov	r0, r4
 800bca0:	4629      	mov	r1, r5
 800bca2:	f7f4 ff11 	bl	8000ac8 <__aeabi_dcmpeq>
 800bca6:	b108      	cbz	r0, 800bcac <__cvt+0xa4>
 800bca8:	f8cd 900c 	str.w	r9, [sp, #12]
 800bcac:	2230      	movs	r2, #48	; 0x30
 800bcae:	9b03      	ldr	r3, [sp, #12]
 800bcb0:	454b      	cmp	r3, r9
 800bcb2:	d307      	bcc.n	800bcc4 <__cvt+0xbc>
 800bcb4:	9b03      	ldr	r3, [sp, #12]
 800bcb6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bcb8:	1bdb      	subs	r3, r3, r7
 800bcba:	4638      	mov	r0, r7
 800bcbc:	6013      	str	r3, [r2, #0]
 800bcbe:	b004      	add	sp, #16
 800bcc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcc4:	1c59      	adds	r1, r3, #1
 800bcc6:	9103      	str	r1, [sp, #12]
 800bcc8:	701a      	strb	r2, [r3, #0]
 800bcca:	e7f0      	b.n	800bcae <__cvt+0xa6>

0800bccc <__exponent>:
 800bccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcce:	4603      	mov	r3, r0
 800bcd0:	2900      	cmp	r1, #0
 800bcd2:	bfb8      	it	lt
 800bcd4:	4249      	neglt	r1, r1
 800bcd6:	f803 2b02 	strb.w	r2, [r3], #2
 800bcda:	bfb4      	ite	lt
 800bcdc:	222d      	movlt	r2, #45	; 0x2d
 800bcde:	222b      	movge	r2, #43	; 0x2b
 800bce0:	2909      	cmp	r1, #9
 800bce2:	7042      	strb	r2, [r0, #1]
 800bce4:	dd2a      	ble.n	800bd3c <__exponent+0x70>
 800bce6:	f10d 0407 	add.w	r4, sp, #7
 800bcea:	46a4      	mov	ip, r4
 800bcec:	270a      	movs	r7, #10
 800bcee:	46a6      	mov	lr, r4
 800bcf0:	460a      	mov	r2, r1
 800bcf2:	fb91 f6f7 	sdiv	r6, r1, r7
 800bcf6:	fb07 1516 	mls	r5, r7, r6, r1
 800bcfa:	3530      	adds	r5, #48	; 0x30
 800bcfc:	2a63      	cmp	r2, #99	; 0x63
 800bcfe:	f104 34ff 	add.w	r4, r4, #4294967295
 800bd02:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bd06:	4631      	mov	r1, r6
 800bd08:	dcf1      	bgt.n	800bcee <__exponent+0x22>
 800bd0a:	3130      	adds	r1, #48	; 0x30
 800bd0c:	f1ae 0502 	sub.w	r5, lr, #2
 800bd10:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bd14:	1c44      	adds	r4, r0, #1
 800bd16:	4629      	mov	r1, r5
 800bd18:	4561      	cmp	r1, ip
 800bd1a:	d30a      	bcc.n	800bd32 <__exponent+0x66>
 800bd1c:	f10d 0209 	add.w	r2, sp, #9
 800bd20:	eba2 020e 	sub.w	r2, r2, lr
 800bd24:	4565      	cmp	r5, ip
 800bd26:	bf88      	it	hi
 800bd28:	2200      	movhi	r2, #0
 800bd2a:	4413      	add	r3, r2
 800bd2c:	1a18      	subs	r0, r3, r0
 800bd2e:	b003      	add	sp, #12
 800bd30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd36:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bd3a:	e7ed      	b.n	800bd18 <__exponent+0x4c>
 800bd3c:	2330      	movs	r3, #48	; 0x30
 800bd3e:	3130      	adds	r1, #48	; 0x30
 800bd40:	7083      	strb	r3, [r0, #2]
 800bd42:	70c1      	strb	r1, [r0, #3]
 800bd44:	1d03      	adds	r3, r0, #4
 800bd46:	e7f1      	b.n	800bd2c <__exponent+0x60>

0800bd48 <_printf_float>:
 800bd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	ed2d 8b02 	vpush	{d8}
 800bd50:	b08d      	sub	sp, #52	; 0x34
 800bd52:	460c      	mov	r4, r1
 800bd54:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bd58:	4616      	mov	r6, r2
 800bd5a:	461f      	mov	r7, r3
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	f002 fe8f 	bl	800ea80 <_localeconv_r>
 800bd62:	f8d0 a000 	ldr.w	sl, [r0]
 800bd66:	4650      	mov	r0, sl
 800bd68:	f7f4 fa32 	bl	80001d0 <strlen>
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	930a      	str	r3, [sp, #40]	; 0x28
 800bd70:	6823      	ldr	r3, [r4, #0]
 800bd72:	9305      	str	r3, [sp, #20]
 800bd74:	f8d8 3000 	ldr.w	r3, [r8]
 800bd78:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bd7c:	3307      	adds	r3, #7
 800bd7e:	f023 0307 	bic.w	r3, r3, #7
 800bd82:	f103 0208 	add.w	r2, r3, #8
 800bd86:	f8c8 2000 	str.w	r2, [r8]
 800bd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bd92:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bd96:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bd9a:	9307      	str	r3, [sp, #28]
 800bd9c:	f8cd 8018 	str.w	r8, [sp, #24]
 800bda0:	ee08 0a10 	vmov	s16, r0
 800bda4:	4b9f      	ldr	r3, [pc, #636]	; (800c024 <_printf_float+0x2dc>)
 800bda6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdaa:	f04f 32ff 	mov.w	r2, #4294967295
 800bdae:	f7f4 febd 	bl	8000b2c <__aeabi_dcmpun>
 800bdb2:	bb88      	cbnz	r0, 800be18 <_printf_float+0xd0>
 800bdb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdb8:	4b9a      	ldr	r3, [pc, #616]	; (800c024 <_printf_float+0x2dc>)
 800bdba:	f04f 32ff 	mov.w	r2, #4294967295
 800bdbe:	f7f4 fe97 	bl	8000af0 <__aeabi_dcmple>
 800bdc2:	bb48      	cbnz	r0, 800be18 <_printf_float+0xd0>
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	4640      	mov	r0, r8
 800bdca:	4649      	mov	r1, r9
 800bdcc:	f7f4 fe86 	bl	8000adc <__aeabi_dcmplt>
 800bdd0:	b110      	cbz	r0, 800bdd8 <_printf_float+0x90>
 800bdd2:	232d      	movs	r3, #45	; 0x2d
 800bdd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdd8:	4b93      	ldr	r3, [pc, #588]	; (800c028 <_printf_float+0x2e0>)
 800bdda:	4894      	ldr	r0, [pc, #592]	; (800c02c <_printf_float+0x2e4>)
 800bddc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bde0:	bf94      	ite	ls
 800bde2:	4698      	movls	r8, r3
 800bde4:	4680      	movhi	r8, r0
 800bde6:	2303      	movs	r3, #3
 800bde8:	6123      	str	r3, [r4, #16]
 800bdea:	9b05      	ldr	r3, [sp, #20]
 800bdec:	f023 0204 	bic.w	r2, r3, #4
 800bdf0:	6022      	str	r2, [r4, #0]
 800bdf2:	f04f 0900 	mov.w	r9, #0
 800bdf6:	9700      	str	r7, [sp, #0]
 800bdf8:	4633      	mov	r3, r6
 800bdfa:	aa0b      	add	r2, sp, #44	; 0x2c
 800bdfc:	4621      	mov	r1, r4
 800bdfe:	4628      	mov	r0, r5
 800be00:	f000 f9d8 	bl	800c1b4 <_printf_common>
 800be04:	3001      	adds	r0, #1
 800be06:	f040 8090 	bne.w	800bf2a <_printf_float+0x1e2>
 800be0a:	f04f 30ff 	mov.w	r0, #4294967295
 800be0e:	b00d      	add	sp, #52	; 0x34
 800be10:	ecbd 8b02 	vpop	{d8}
 800be14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be18:	4642      	mov	r2, r8
 800be1a:	464b      	mov	r3, r9
 800be1c:	4640      	mov	r0, r8
 800be1e:	4649      	mov	r1, r9
 800be20:	f7f4 fe84 	bl	8000b2c <__aeabi_dcmpun>
 800be24:	b140      	cbz	r0, 800be38 <_printf_float+0xf0>
 800be26:	464b      	mov	r3, r9
 800be28:	2b00      	cmp	r3, #0
 800be2a:	bfbc      	itt	lt
 800be2c:	232d      	movlt	r3, #45	; 0x2d
 800be2e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800be32:	487f      	ldr	r0, [pc, #508]	; (800c030 <_printf_float+0x2e8>)
 800be34:	4b7f      	ldr	r3, [pc, #508]	; (800c034 <_printf_float+0x2ec>)
 800be36:	e7d1      	b.n	800bddc <_printf_float+0x94>
 800be38:	6863      	ldr	r3, [r4, #4]
 800be3a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800be3e:	9206      	str	r2, [sp, #24]
 800be40:	1c5a      	adds	r2, r3, #1
 800be42:	d13f      	bne.n	800bec4 <_printf_float+0x17c>
 800be44:	2306      	movs	r3, #6
 800be46:	6063      	str	r3, [r4, #4]
 800be48:	9b05      	ldr	r3, [sp, #20]
 800be4a:	6861      	ldr	r1, [r4, #4]
 800be4c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800be50:	2300      	movs	r3, #0
 800be52:	9303      	str	r3, [sp, #12]
 800be54:	ab0a      	add	r3, sp, #40	; 0x28
 800be56:	e9cd b301 	strd	fp, r3, [sp, #4]
 800be5a:	ab09      	add	r3, sp, #36	; 0x24
 800be5c:	ec49 8b10 	vmov	d0, r8, r9
 800be60:	9300      	str	r3, [sp, #0]
 800be62:	6022      	str	r2, [r4, #0]
 800be64:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800be68:	4628      	mov	r0, r5
 800be6a:	f7ff fecd 	bl	800bc08 <__cvt>
 800be6e:	9b06      	ldr	r3, [sp, #24]
 800be70:	9909      	ldr	r1, [sp, #36]	; 0x24
 800be72:	2b47      	cmp	r3, #71	; 0x47
 800be74:	4680      	mov	r8, r0
 800be76:	d108      	bne.n	800be8a <_printf_float+0x142>
 800be78:	1cc8      	adds	r0, r1, #3
 800be7a:	db02      	blt.n	800be82 <_printf_float+0x13a>
 800be7c:	6863      	ldr	r3, [r4, #4]
 800be7e:	4299      	cmp	r1, r3
 800be80:	dd41      	ble.n	800bf06 <_printf_float+0x1be>
 800be82:	f1ab 0b02 	sub.w	fp, fp, #2
 800be86:	fa5f fb8b 	uxtb.w	fp, fp
 800be8a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be8e:	d820      	bhi.n	800bed2 <_printf_float+0x18a>
 800be90:	3901      	subs	r1, #1
 800be92:	465a      	mov	r2, fp
 800be94:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800be98:	9109      	str	r1, [sp, #36]	; 0x24
 800be9a:	f7ff ff17 	bl	800bccc <__exponent>
 800be9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bea0:	1813      	adds	r3, r2, r0
 800bea2:	2a01      	cmp	r2, #1
 800bea4:	4681      	mov	r9, r0
 800bea6:	6123      	str	r3, [r4, #16]
 800bea8:	dc02      	bgt.n	800beb0 <_printf_float+0x168>
 800beaa:	6822      	ldr	r2, [r4, #0]
 800beac:	07d2      	lsls	r2, r2, #31
 800beae:	d501      	bpl.n	800beb4 <_printf_float+0x16c>
 800beb0:	3301      	adds	r3, #1
 800beb2:	6123      	str	r3, [r4, #16]
 800beb4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d09c      	beq.n	800bdf6 <_printf_float+0xae>
 800bebc:	232d      	movs	r3, #45	; 0x2d
 800bebe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bec2:	e798      	b.n	800bdf6 <_printf_float+0xae>
 800bec4:	9a06      	ldr	r2, [sp, #24]
 800bec6:	2a47      	cmp	r2, #71	; 0x47
 800bec8:	d1be      	bne.n	800be48 <_printf_float+0x100>
 800beca:	2b00      	cmp	r3, #0
 800becc:	d1bc      	bne.n	800be48 <_printf_float+0x100>
 800bece:	2301      	movs	r3, #1
 800bed0:	e7b9      	b.n	800be46 <_printf_float+0xfe>
 800bed2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bed6:	d118      	bne.n	800bf0a <_printf_float+0x1c2>
 800bed8:	2900      	cmp	r1, #0
 800beda:	6863      	ldr	r3, [r4, #4]
 800bedc:	dd0b      	ble.n	800bef6 <_printf_float+0x1ae>
 800bede:	6121      	str	r1, [r4, #16]
 800bee0:	b913      	cbnz	r3, 800bee8 <_printf_float+0x1a0>
 800bee2:	6822      	ldr	r2, [r4, #0]
 800bee4:	07d0      	lsls	r0, r2, #31
 800bee6:	d502      	bpl.n	800beee <_printf_float+0x1a6>
 800bee8:	3301      	adds	r3, #1
 800beea:	440b      	add	r3, r1
 800beec:	6123      	str	r3, [r4, #16]
 800beee:	65a1      	str	r1, [r4, #88]	; 0x58
 800bef0:	f04f 0900 	mov.w	r9, #0
 800bef4:	e7de      	b.n	800beb4 <_printf_float+0x16c>
 800bef6:	b913      	cbnz	r3, 800befe <_printf_float+0x1b6>
 800bef8:	6822      	ldr	r2, [r4, #0]
 800befa:	07d2      	lsls	r2, r2, #31
 800befc:	d501      	bpl.n	800bf02 <_printf_float+0x1ba>
 800befe:	3302      	adds	r3, #2
 800bf00:	e7f4      	b.n	800beec <_printf_float+0x1a4>
 800bf02:	2301      	movs	r3, #1
 800bf04:	e7f2      	b.n	800beec <_printf_float+0x1a4>
 800bf06:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bf0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf0c:	4299      	cmp	r1, r3
 800bf0e:	db05      	blt.n	800bf1c <_printf_float+0x1d4>
 800bf10:	6823      	ldr	r3, [r4, #0]
 800bf12:	6121      	str	r1, [r4, #16]
 800bf14:	07d8      	lsls	r0, r3, #31
 800bf16:	d5ea      	bpl.n	800beee <_printf_float+0x1a6>
 800bf18:	1c4b      	adds	r3, r1, #1
 800bf1a:	e7e7      	b.n	800beec <_printf_float+0x1a4>
 800bf1c:	2900      	cmp	r1, #0
 800bf1e:	bfd4      	ite	le
 800bf20:	f1c1 0202 	rsble	r2, r1, #2
 800bf24:	2201      	movgt	r2, #1
 800bf26:	4413      	add	r3, r2
 800bf28:	e7e0      	b.n	800beec <_printf_float+0x1a4>
 800bf2a:	6823      	ldr	r3, [r4, #0]
 800bf2c:	055a      	lsls	r2, r3, #21
 800bf2e:	d407      	bmi.n	800bf40 <_printf_float+0x1f8>
 800bf30:	6923      	ldr	r3, [r4, #16]
 800bf32:	4642      	mov	r2, r8
 800bf34:	4631      	mov	r1, r6
 800bf36:	4628      	mov	r0, r5
 800bf38:	47b8      	blx	r7
 800bf3a:	3001      	adds	r0, #1
 800bf3c:	d12c      	bne.n	800bf98 <_printf_float+0x250>
 800bf3e:	e764      	b.n	800be0a <_printf_float+0xc2>
 800bf40:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf44:	f240 80e0 	bls.w	800c108 <_printf_float+0x3c0>
 800bf48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f7f4 fdba 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf54:	2800      	cmp	r0, #0
 800bf56:	d034      	beq.n	800bfc2 <_printf_float+0x27a>
 800bf58:	4a37      	ldr	r2, [pc, #220]	; (800c038 <_printf_float+0x2f0>)
 800bf5a:	2301      	movs	r3, #1
 800bf5c:	4631      	mov	r1, r6
 800bf5e:	4628      	mov	r0, r5
 800bf60:	47b8      	blx	r7
 800bf62:	3001      	adds	r0, #1
 800bf64:	f43f af51 	beq.w	800be0a <_printf_float+0xc2>
 800bf68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	db02      	blt.n	800bf76 <_printf_float+0x22e>
 800bf70:	6823      	ldr	r3, [r4, #0]
 800bf72:	07d8      	lsls	r0, r3, #31
 800bf74:	d510      	bpl.n	800bf98 <_printf_float+0x250>
 800bf76:	ee18 3a10 	vmov	r3, s16
 800bf7a:	4652      	mov	r2, sl
 800bf7c:	4631      	mov	r1, r6
 800bf7e:	4628      	mov	r0, r5
 800bf80:	47b8      	blx	r7
 800bf82:	3001      	adds	r0, #1
 800bf84:	f43f af41 	beq.w	800be0a <_printf_float+0xc2>
 800bf88:	f04f 0800 	mov.w	r8, #0
 800bf8c:	f104 091a 	add.w	r9, r4, #26
 800bf90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf92:	3b01      	subs	r3, #1
 800bf94:	4543      	cmp	r3, r8
 800bf96:	dc09      	bgt.n	800bfac <_printf_float+0x264>
 800bf98:	6823      	ldr	r3, [r4, #0]
 800bf9a:	079b      	lsls	r3, r3, #30
 800bf9c:	f100 8105 	bmi.w	800c1aa <_printf_float+0x462>
 800bfa0:	68e0      	ldr	r0, [r4, #12]
 800bfa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfa4:	4298      	cmp	r0, r3
 800bfa6:	bfb8      	it	lt
 800bfa8:	4618      	movlt	r0, r3
 800bfaa:	e730      	b.n	800be0e <_printf_float+0xc6>
 800bfac:	2301      	movs	r3, #1
 800bfae:	464a      	mov	r2, r9
 800bfb0:	4631      	mov	r1, r6
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	47b8      	blx	r7
 800bfb6:	3001      	adds	r0, #1
 800bfb8:	f43f af27 	beq.w	800be0a <_printf_float+0xc2>
 800bfbc:	f108 0801 	add.w	r8, r8, #1
 800bfc0:	e7e6      	b.n	800bf90 <_printf_float+0x248>
 800bfc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	dc39      	bgt.n	800c03c <_printf_float+0x2f4>
 800bfc8:	4a1b      	ldr	r2, [pc, #108]	; (800c038 <_printf_float+0x2f0>)
 800bfca:	2301      	movs	r3, #1
 800bfcc:	4631      	mov	r1, r6
 800bfce:	4628      	mov	r0, r5
 800bfd0:	47b8      	blx	r7
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	f43f af19 	beq.w	800be0a <_printf_float+0xc2>
 800bfd8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfdc:	4313      	orrs	r3, r2
 800bfde:	d102      	bne.n	800bfe6 <_printf_float+0x29e>
 800bfe0:	6823      	ldr	r3, [r4, #0]
 800bfe2:	07d9      	lsls	r1, r3, #31
 800bfe4:	d5d8      	bpl.n	800bf98 <_printf_float+0x250>
 800bfe6:	ee18 3a10 	vmov	r3, s16
 800bfea:	4652      	mov	r2, sl
 800bfec:	4631      	mov	r1, r6
 800bfee:	4628      	mov	r0, r5
 800bff0:	47b8      	blx	r7
 800bff2:	3001      	adds	r0, #1
 800bff4:	f43f af09 	beq.w	800be0a <_printf_float+0xc2>
 800bff8:	f04f 0900 	mov.w	r9, #0
 800bffc:	f104 0a1a 	add.w	sl, r4, #26
 800c000:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c002:	425b      	negs	r3, r3
 800c004:	454b      	cmp	r3, r9
 800c006:	dc01      	bgt.n	800c00c <_printf_float+0x2c4>
 800c008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c00a:	e792      	b.n	800bf32 <_printf_float+0x1ea>
 800c00c:	2301      	movs	r3, #1
 800c00e:	4652      	mov	r2, sl
 800c010:	4631      	mov	r1, r6
 800c012:	4628      	mov	r0, r5
 800c014:	47b8      	blx	r7
 800c016:	3001      	adds	r0, #1
 800c018:	f43f aef7 	beq.w	800be0a <_printf_float+0xc2>
 800c01c:	f109 0901 	add.w	r9, r9, #1
 800c020:	e7ee      	b.n	800c000 <_printf_float+0x2b8>
 800c022:	bf00      	nop
 800c024:	7fefffff 	.word	0x7fefffff
 800c028:	08014e64 	.word	0x08014e64
 800c02c:	08014e68 	.word	0x08014e68
 800c030:	08014e70 	.word	0x08014e70
 800c034:	08014e6c 	.word	0x08014e6c
 800c038:	08014e74 	.word	0x08014e74
 800c03c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c03e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c040:	429a      	cmp	r2, r3
 800c042:	bfa8      	it	ge
 800c044:	461a      	movge	r2, r3
 800c046:	2a00      	cmp	r2, #0
 800c048:	4691      	mov	r9, r2
 800c04a:	dc37      	bgt.n	800c0bc <_printf_float+0x374>
 800c04c:	f04f 0b00 	mov.w	fp, #0
 800c050:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c054:	f104 021a 	add.w	r2, r4, #26
 800c058:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c05a:	9305      	str	r3, [sp, #20]
 800c05c:	eba3 0309 	sub.w	r3, r3, r9
 800c060:	455b      	cmp	r3, fp
 800c062:	dc33      	bgt.n	800c0cc <_printf_float+0x384>
 800c064:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c068:	429a      	cmp	r2, r3
 800c06a:	db3b      	blt.n	800c0e4 <_printf_float+0x39c>
 800c06c:	6823      	ldr	r3, [r4, #0]
 800c06e:	07da      	lsls	r2, r3, #31
 800c070:	d438      	bmi.n	800c0e4 <_printf_float+0x39c>
 800c072:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c074:	9b05      	ldr	r3, [sp, #20]
 800c076:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	eba2 0901 	sub.w	r9, r2, r1
 800c07e:	4599      	cmp	r9, r3
 800c080:	bfa8      	it	ge
 800c082:	4699      	movge	r9, r3
 800c084:	f1b9 0f00 	cmp.w	r9, #0
 800c088:	dc35      	bgt.n	800c0f6 <_printf_float+0x3ae>
 800c08a:	f04f 0800 	mov.w	r8, #0
 800c08e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c092:	f104 0a1a 	add.w	sl, r4, #26
 800c096:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c09a:	1a9b      	subs	r3, r3, r2
 800c09c:	eba3 0309 	sub.w	r3, r3, r9
 800c0a0:	4543      	cmp	r3, r8
 800c0a2:	f77f af79 	ble.w	800bf98 <_printf_float+0x250>
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	4652      	mov	r2, sl
 800c0aa:	4631      	mov	r1, r6
 800c0ac:	4628      	mov	r0, r5
 800c0ae:	47b8      	blx	r7
 800c0b0:	3001      	adds	r0, #1
 800c0b2:	f43f aeaa 	beq.w	800be0a <_printf_float+0xc2>
 800c0b6:	f108 0801 	add.w	r8, r8, #1
 800c0ba:	e7ec      	b.n	800c096 <_printf_float+0x34e>
 800c0bc:	4613      	mov	r3, r2
 800c0be:	4631      	mov	r1, r6
 800c0c0:	4642      	mov	r2, r8
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	47b8      	blx	r7
 800c0c6:	3001      	adds	r0, #1
 800c0c8:	d1c0      	bne.n	800c04c <_printf_float+0x304>
 800c0ca:	e69e      	b.n	800be0a <_printf_float+0xc2>
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	4631      	mov	r1, r6
 800c0d0:	4628      	mov	r0, r5
 800c0d2:	9205      	str	r2, [sp, #20]
 800c0d4:	47b8      	blx	r7
 800c0d6:	3001      	adds	r0, #1
 800c0d8:	f43f ae97 	beq.w	800be0a <_printf_float+0xc2>
 800c0dc:	9a05      	ldr	r2, [sp, #20]
 800c0de:	f10b 0b01 	add.w	fp, fp, #1
 800c0e2:	e7b9      	b.n	800c058 <_printf_float+0x310>
 800c0e4:	ee18 3a10 	vmov	r3, s16
 800c0e8:	4652      	mov	r2, sl
 800c0ea:	4631      	mov	r1, r6
 800c0ec:	4628      	mov	r0, r5
 800c0ee:	47b8      	blx	r7
 800c0f0:	3001      	adds	r0, #1
 800c0f2:	d1be      	bne.n	800c072 <_printf_float+0x32a>
 800c0f4:	e689      	b.n	800be0a <_printf_float+0xc2>
 800c0f6:	9a05      	ldr	r2, [sp, #20]
 800c0f8:	464b      	mov	r3, r9
 800c0fa:	4442      	add	r2, r8
 800c0fc:	4631      	mov	r1, r6
 800c0fe:	4628      	mov	r0, r5
 800c100:	47b8      	blx	r7
 800c102:	3001      	adds	r0, #1
 800c104:	d1c1      	bne.n	800c08a <_printf_float+0x342>
 800c106:	e680      	b.n	800be0a <_printf_float+0xc2>
 800c108:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c10a:	2a01      	cmp	r2, #1
 800c10c:	dc01      	bgt.n	800c112 <_printf_float+0x3ca>
 800c10e:	07db      	lsls	r3, r3, #31
 800c110:	d538      	bpl.n	800c184 <_printf_float+0x43c>
 800c112:	2301      	movs	r3, #1
 800c114:	4642      	mov	r2, r8
 800c116:	4631      	mov	r1, r6
 800c118:	4628      	mov	r0, r5
 800c11a:	47b8      	blx	r7
 800c11c:	3001      	adds	r0, #1
 800c11e:	f43f ae74 	beq.w	800be0a <_printf_float+0xc2>
 800c122:	ee18 3a10 	vmov	r3, s16
 800c126:	4652      	mov	r2, sl
 800c128:	4631      	mov	r1, r6
 800c12a:	4628      	mov	r0, r5
 800c12c:	47b8      	blx	r7
 800c12e:	3001      	adds	r0, #1
 800c130:	f43f ae6b 	beq.w	800be0a <_printf_float+0xc2>
 800c134:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c138:	2200      	movs	r2, #0
 800c13a:	2300      	movs	r3, #0
 800c13c:	f7f4 fcc4 	bl	8000ac8 <__aeabi_dcmpeq>
 800c140:	b9d8      	cbnz	r0, 800c17a <_printf_float+0x432>
 800c142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c144:	f108 0201 	add.w	r2, r8, #1
 800c148:	3b01      	subs	r3, #1
 800c14a:	4631      	mov	r1, r6
 800c14c:	4628      	mov	r0, r5
 800c14e:	47b8      	blx	r7
 800c150:	3001      	adds	r0, #1
 800c152:	d10e      	bne.n	800c172 <_printf_float+0x42a>
 800c154:	e659      	b.n	800be0a <_printf_float+0xc2>
 800c156:	2301      	movs	r3, #1
 800c158:	4652      	mov	r2, sl
 800c15a:	4631      	mov	r1, r6
 800c15c:	4628      	mov	r0, r5
 800c15e:	47b8      	blx	r7
 800c160:	3001      	adds	r0, #1
 800c162:	f43f ae52 	beq.w	800be0a <_printf_float+0xc2>
 800c166:	f108 0801 	add.w	r8, r8, #1
 800c16a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c16c:	3b01      	subs	r3, #1
 800c16e:	4543      	cmp	r3, r8
 800c170:	dcf1      	bgt.n	800c156 <_printf_float+0x40e>
 800c172:	464b      	mov	r3, r9
 800c174:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c178:	e6dc      	b.n	800bf34 <_printf_float+0x1ec>
 800c17a:	f04f 0800 	mov.w	r8, #0
 800c17e:	f104 0a1a 	add.w	sl, r4, #26
 800c182:	e7f2      	b.n	800c16a <_printf_float+0x422>
 800c184:	2301      	movs	r3, #1
 800c186:	4642      	mov	r2, r8
 800c188:	e7df      	b.n	800c14a <_printf_float+0x402>
 800c18a:	2301      	movs	r3, #1
 800c18c:	464a      	mov	r2, r9
 800c18e:	4631      	mov	r1, r6
 800c190:	4628      	mov	r0, r5
 800c192:	47b8      	blx	r7
 800c194:	3001      	adds	r0, #1
 800c196:	f43f ae38 	beq.w	800be0a <_printf_float+0xc2>
 800c19a:	f108 0801 	add.w	r8, r8, #1
 800c19e:	68e3      	ldr	r3, [r4, #12]
 800c1a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c1a2:	1a5b      	subs	r3, r3, r1
 800c1a4:	4543      	cmp	r3, r8
 800c1a6:	dcf0      	bgt.n	800c18a <_printf_float+0x442>
 800c1a8:	e6fa      	b.n	800bfa0 <_printf_float+0x258>
 800c1aa:	f04f 0800 	mov.w	r8, #0
 800c1ae:	f104 0919 	add.w	r9, r4, #25
 800c1b2:	e7f4      	b.n	800c19e <_printf_float+0x456>

0800c1b4 <_printf_common>:
 800c1b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1b8:	4616      	mov	r6, r2
 800c1ba:	4699      	mov	r9, r3
 800c1bc:	688a      	ldr	r2, [r1, #8]
 800c1be:	690b      	ldr	r3, [r1, #16]
 800c1c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	bfb8      	it	lt
 800c1c8:	4613      	movlt	r3, r2
 800c1ca:	6033      	str	r3, [r6, #0]
 800c1cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c1d0:	4607      	mov	r7, r0
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	b10a      	cbz	r2, 800c1da <_printf_common+0x26>
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	6033      	str	r3, [r6, #0]
 800c1da:	6823      	ldr	r3, [r4, #0]
 800c1dc:	0699      	lsls	r1, r3, #26
 800c1de:	bf42      	ittt	mi
 800c1e0:	6833      	ldrmi	r3, [r6, #0]
 800c1e2:	3302      	addmi	r3, #2
 800c1e4:	6033      	strmi	r3, [r6, #0]
 800c1e6:	6825      	ldr	r5, [r4, #0]
 800c1e8:	f015 0506 	ands.w	r5, r5, #6
 800c1ec:	d106      	bne.n	800c1fc <_printf_common+0x48>
 800c1ee:	f104 0a19 	add.w	sl, r4, #25
 800c1f2:	68e3      	ldr	r3, [r4, #12]
 800c1f4:	6832      	ldr	r2, [r6, #0]
 800c1f6:	1a9b      	subs	r3, r3, r2
 800c1f8:	42ab      	cmp	r3, r5
 800c1fa:	dc26      	bgt.n	800c24a <_printf_common+0x96>
 800c1fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c200:	1e13      	subs	r3, r2, #0
 800c202:	6822      	ldr	r2, [r4, #0]
 800c204:	bf18      	it	ne
 800c206:	2301      	movne	r3, #1
 800c208:	0692      	lsls	r2, r2, #26
 800c20a:	d42b      	bmi.n	800c264 <_printf_common+0xb0>
 800c20c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c210:	4649      	mov	r1, r9
 800c212:	4638      	mov	r0, r7
 800c214:	47c0      	blx	r8
 800c216:	3001      	adds	r0, #1
 800c218:	d01e      	beq.n	800c258 <_printf_common+0xa4>
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	68e5      	ldr	r5, [r4, #12]
 800c21e:	6832      	ldr	r2, [r6, #0]
 800c220:	f003 0306 	and.w	r3, r3, #6
 800c224:	2b04      	cmp	r3, #4
 800c226:	bf08      	it	eq
 800c228:	1aad      	subeq	r5, r5, r2
 800c22a:	68a3      	ldr	r3, [r4, #8]
 800c22c:	6922      	ldr	r2, [r4, #16]
 800c22e:	bf0c      	ite	eq
 800c230:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c234:	2500      	movne	r5, #0
 800c236:	4293      	cmp	r3, r2
 800c238:	bfc4      	itt	gt
 800c23a:	1a9b      	subgt	r3, r3, r2
 800c23c:	18ed      	addgt	r5, r5, r3
 800c23e:	2600      	movs	r6, #0
 800c240:	341a      	adds	r4, #26
 800c242:	42b5      	cmp	r5, r6
 800c244:	d11a      	bne.n	800c27c <_printf_common+0xc8>
 800c246:	2000      	movs	r0, #0
 800c248:	e008      	b.n	800c25c <_printf_common+0xa8>
 800c24a:	2301      	movs	r3, #1
 800c24c:	4652      	mov	r2, sl
 800c24e:	4649      	mov	r1, r9
 800c250:	4638      	mov	r0, r7
 800c252:	47c0      	blx	r8
 800c254:	3001      	adds	r0, #1
 800c256:	d103      	bne.n	800c260 <_printf_common+0xac>
 800c258:	f04f 30ff 	mov.w	r0, #4294967295
 800c25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c260:	3501      	adds	r5, #1
 800c262:	e7c6      	b.n	800c1f2 <_printf_common+0x3e>
 800c264:	18e1      	adds	r1, r4, r3
 800c266:	1c5a      	adds	r2, r3, #1
 800c268:	2030      	movs	r0, #48	; 0x30
 800c26a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c26e:	4422      	add	r2, r4
 800c270:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c274:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c278:	3302      	adds	r3, #2
 800c27a:	e7c7      	b.n	800c20c <_printf_common+0x58>
 800c27c:	2301      	movs	r3, #1
 800c27e:	4622      	mov	r2, r4
 800c280:	4649      	mov	r1, r9
 800c282:	4638      	mov	r0, r7
 800c284:	47c0      	blx	r8
 800c286:	3001      	adds	r0, #1
 800c288:	d0e6      	beq.n	800c258 <_printf_common+0xa4>
 800c28a:	3601      	adds	r6, #1
 800c28c:	e7d9      	b.n	800c242 <_printf_common+0x8e>
	...

0800c290 <_printf_i>:
 800c290:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c294:	460c      	mov	r4, r1
 800c296:	4691      	mov	r9, r2
 800c298:	7e27      	ldrb	r7, [r4, #24]
 800c29a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c29c:	2f78      	cmp	r7, #120	; 0x78
 800c29e:	4680      	mov	r8, r0
 800c2a0:	469a      	mov	sl, r3
 800c2a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2a6:	d807      	bhi.n	800c2b8 <_printf_i+0x28>
 800c2a8:	2f62      	cmp	r7, #98	; 0x62
 800c2aa:	d80a      	bhi.n	800c2c2 <_printf_i+0x32>
 800c2ac:	2f00      	cmp	r7, #0
 800c2ae:	f000 80d8 	beq.w	800c462 <_printf_i+0x1d2>
 800c2b2:	2f58      	cmp	r7, #88	; 0x58
 800c2b4:	f000 80a3 	beq.w	800c3fe <_printf_i+0x16e>
 800c2b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c2bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c2c0:	e03a      	b.n	800c338 <_printf_i+0xa8>
 800c2c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c2c6:	2b15      	cmp	r3, #21
 800c2c8:	d8f6      	bhi.n	800c2b8 <_printf_i+0x28>
 800c2ca:	a001      	add	r0, pc, #4	; (adr r0, 800c2d0 <_printf_i+0x40>)
 800c2cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c2d0:	0800c329 	.word	0x0800c329
 800c2d4:	0800c33d 	.word	0x0800c33d
 800c2d8:	0800c2b9 	.word	0x0800c2b9
 800c2dc:	0800c2b9 	.word	0x0800c2b9
 800c2e0:	0800c2b9 	.word	0x0800c2b9
 800c2e4:	0800c2b9 	.word	0x0800c2b9
 800c2e8:	0800c33d 	.word	0x0800c33d
 800c2ec:	0800c2b9 	.word	0x0800c2b9
 800c2f0:	0800c2b9 	.word	0x0800c2b9
 800c2f4:	0800c2b9 	.word	0x0800c2b9
 800c2f8:	0800c2b9 	.word	0x0800c2b9
 800c2fc:	0800c449 	.word	0x0800c449
 800c300:	0800c36d 	.word	0x0800c36d
 800c304:	0800c42b 	.word	0x0800c42b
 800c308:	0800c2b9 	.word	0x0800c2b9
 800c30c:	0800c2b9 	.word	0x0800c2b9
 800c310:	0800c46b 	.word	0x0800c46b
 800c314:	0800c2b9 	.word	0x0800c2b9
 800c318:	0800c36d 	.word	0x0800c36d
 800c31c:	0800c2b9 	.word	0x0800c2b9
 800c320:	0800c2b9 	.word	0x0800c2b9
 800c324:	0800c433 	.word	0x0800c433
 800c328:	680b      	ldr	r3, [r1, #0]
 800c32a:	1d1a      	adds	r2, r3, #4
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	600a      	str	r2, [r1, #0]
 800c330:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c334:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c338:	2301      	movs	r3, #1
 800c33a:	e0a3      	b.n	800c484 <_printf_i+0x1f4>
 800c33c:	6825      	ldr	r5, [r4, #0]
 800c33e:	6808      	ldr	r0, [r1, #0]
 800c340:	062e      	lsls	r6, r5, #24
 800c342:	f100 0304 	add.w	r3, r0, #4
 800c346:	d50a      	bpl.n	800c35e <_printf_i+0xce>
 800c348:	6805      	ldr	r5, [r0, #0]
 800c34a:	600b      	str	r3, [r1, #0]
 800c34c:	2d00      	cmp	r5, #0
 800c34e:	da03      	bge.n	800c358 <_printf_i+0xc8>
 800c350:	232d      	movs	r3, #45	; 0x2d
 800c352:	426d      	negs	r5, r5
 800c354:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c358:	485e      	ldr	r0, [pc, #376]	; (800c4d4 <_printf_i+0x244>)
 800c35a:	230a      	movs	r3, #10
 800c35c:	e019      	b.n	800c392 <_printf_i+0x102>
 800c35e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c362:	6805      	ldr	r5, [r0, #0]
 800c364:	600b      	str	r3, [r1, #0]
 800c366:	bf18      	it	ne
 800c368:	b22d      	sxthne	r5, r5
 800c36a:	e7ef      	b.n	800c34c <_printf_i+0xbc>
 800c36c:	680b      	ldr	r3, [r1, #0]
 800c36e:	6825      	ldr	r5, [r4, #0]
 800c370:	1d18      	adds	r0, r3, #4
 800c372:	6008      	str	r0, [r1, #0]
 800c374:	0628      	lsls	r0, r5, #24
 800c376:	d501      	bpl.n	800c37c <_printf_i+0xec>
 800c378:	681d      	ldr	r5, [r3, #0]
 800c37a:	e002      	b.n	800c382 <_printf_i+0xf2>
 800c37c:	0669      	lsls	r1, r5, #25
 800c37e:	d5fb      	bpl.n	800c378 <_printf_i+0xe8>
 800c380:	881d      	ldrh	r5, [r3, #0]
 800c382:	4854      	ldr	r0, [pc, #336]	; (800c4d4 <_printf_i+0x244>)
 800c384:	2f6f      	cmp	r7, #111	; 0x6f
 800c386:	bf0c      	ite	eq
 800c388:	2308      	moveq	r3, #8
 800c38a:	230a      	movne	r3, #10
 800c38c:	2100      	movs	r1, #0
 800c38e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c392:	6866      	ldr	r6, [r4, #4]
 800c394:	60a6      	str	r6, [r4, #8]
 800c396:	2e00      	cmp	r6, #0
 800c398:	bfa2      	ittt	ge
 800c39a:	6821      	ldrge	r1, [r4, #0]
 800c39c:	f021 0104 	bicge.w	r1, r1, #4
 800c3a0:	6021      	strge	r1, [r4, #0]
 800c3a2:	b90d      	cbnz	r5, 800c3a8 <_printf_i+0x118>
 800c3a4:	2e00      	cmp	r6, #0
 800c3a6:	d04d      	beq.n	800c444 <_printf_i+0x1b4>
 800c3a8:	4616      	mov	r6, r2
 800c3aa:	fbb5 f1f3 	udiv	r1, r5, r3
 800c3ae:	fb03 5711 	mls	r7, r3, r1, r5
 800c3b2:	5dc7      	ldrb	r7, [r0, r7]
 800c3b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c3b8:	462f      	mov	r7, r5
 800c3ba:	42bb      	cmp	r3, r7
 800c3bc:	460d      	mov	r5, r1
 800c3be:	d9f4      	bls.n	800c3aa <_printf_i+0x11a>
 800c3c0:	2b08      	cmp	r3, #8
 800c3c2:	d10b      	bne.n	800c3dc <_printf_i+0x14c>
 800c3c4:	6823      	ldr	r3, [r4, #0]
 800c3c6:	07df      	lsls	r7, r3, #31
 800c3c8:	d508      	bpl.n	800c3dc <_printf_i+0x14c>
 800c3ca:	6923      	ldr	r3, [r4, #16]
 800c3cc:	6861      	ldr	r1, [r4, #4]
 800c3ce:	4299      	cmp	r1, r3
 800c3d0:	bfde      	ittt	le
 800c3d2:	2330      	movle	r3, #48	; 0x30
 800c3d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c3d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c3dc:	1b92      	subs	r2, r2, r6
 800c3de:	6122      	str	r2, [r4, #16]
 800c3e0:	f8cd a000 	str.w	sl, [sp]
 800c3e4:	464b      	mov	r3, r9
 800c3e6:	aa03      	add	r2, sp, #12
 800c3e8:	4621      	mov	r1, r4
 800c3ea:	4640      	mov	r0, r8
 800c3ec:	f7ff fee2 	bl	800c1b4 <_printf_common>
 800c3f0:	3001      	adds	r0, #1
 800c3f2:	d14c      	bne.n	800c48e <_printf_i+0x1fe>
 800c3f4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f8:	b004      	add	sp, #16
 800c3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3fe:	4835      	ldr	r0, [pc, #212]	; (800c4d4 <_printf_i+0x244>)
 800c400:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c404:	6823      	ldr	r3, [r4, #0]
 800c406:	680e      	ldr	r6, [r1, #0]
 800c408:	061f      	lsls	r7, r3, #24
 800c40a:	f856 5b04 	ldr.w	r5, [r6], #4
 800c40e:	600e      	str	r6, [r1, #0]
 800c410:	d514      	bpl.n	800c43c <_printf_i+0x1ac>
 800c412:	07d9      	lsls	r1, r3, #31
 800c414:	bf44      	itt	mi
 800c416:	f043 0320 	orrmi.w	r3, r3, #32
 800c41a:	6023      	strmi	r3, [r4, #0]
 800c41c:	b91d      	cbnz	r5, 800c426 <_printf_i+0x196>
 800c41e:	6823      	ldr	r3, [r4, #0]
 800c420:	f023 0320 	bic.w	r3, r3, #32
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	2310      	movs	r3, #16
 800c428:	e7b0      	b.n	800c38c <_printf_i+0xfc>
 800c42a:	6823      	ldr	r3, [r4, #0]
 800c42c:	f043 0320 	orr.w	r3, r3, #32
 800c430:	6023      	str	r3, [r4, #0]
 800c432:	2378      	movs	r3, #120	; 0x78
 800c434:	4828      	ldr	r0, [pc, #160]	; (800c4d8 <_printf_i+0x248>)
 800c436:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c43a:	e7e3      	b.n	800c404 <_printf_i+0x174>
 800c43c:	065e      	lsls	r6, r3, #25
 800c43e:	bf48      	it	mi
 800c440:	b2ad      	uxthmi	r5, r5
 800c442:	e7e6      	b.n	800c412 <_printf_i+0x182>
 800c444:	4616      	mov	r6, r2
 800c446:	e7bb      	b.n	800c3c0 <_printf_i+0x130>
 800c448:	680b      	ldr	r3, [r1, #0]
 800c44a:	6826      	ldr	r6, [r4, #0]
 800c44c:	6960      	ldr	r0, [r4, #20]
 800c44e:	1d1d      	adds	r5, r3, #4
 800c450:	600d      	str	r5, [r1, #0]
 800c452:	0635      	lsls	r5, r6, #24
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	d501      	bpl.n	800c45c <_printf_i+0x1cc>
 800c458:	6018      	str	r0, [r3, #0]
 800c45a:	e002      	b.n	800c462 <_printf_i+0x1d2>
 800c45c:	0671      	lsls	r1, r6, #25
 800c45e:	d5fb      	bpl.n	800c458 <_printf_i+0x1c8>
 800c460:	8018      	strh	r0, [r3, #0]
 800c462:	2300      	movs	r3, #0
 800c464:	6123      	str	r3, [r4, #16]
 800c466:	4616      	mov	r6, r2
 800c468:	e7ba      	b.n	800c3e0 <_printf_i+0x150>
 800c46a:	680b      	ldr	r3, [r1, #0]
 800c46c:	1d1a      	adds	r2, r3, #4
 800c46e:	600a      	str	r2, [r1, #0]
 800c470:	681e      	ldr	r6, [r3, #0]
 800c472:	6862      	ldr	r2, [r4, #4]
 800c474:	2100      	movs	r1, #0
 800c476:	4630      	mov	r0, r6
 800c478:	f7f3 feb2 	bl	80001e0 <memchr>
 800c47c:	b108      	cbz	r0, 800c482 <_printf_i+0x1f2>
 800c47e:	1b80      	subs	r0, r0, r6
 800c480:	6060      	str	r0, [r4, #4]
 800c482:	6863      	ldr	r3, [r4, #4]
 800c484:	6123      	str	r3, [r4, #16]
 800c486:	2300      	movs	r3, #0
 800c488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c48c:	e7a8      	b.n	800c3e0 <_printf_i+0x150>
 800c48e:	6923      	ldr	r3, [r4, #16]
 800c490:	4632      	mov	r2, r6
 800c492:	4649      	mov	r1, r9
 800c494:	4640      	mov	r0, r8
 800c496:	47d0      	blx	sl
 800c498:	3001      	adds	r0, #1
 800c49a:	d0ab      	beq.n	800c3f4 <_printf_i+0x164>
 800c49c:	6823      	ldr	r3, [r4, #0]
 800c49e:	079b      	lsls	r3, r3, #30
 800c4a0:	d413      	bmi.n	800c4ca <_printf_i+0x23a>
 800c4a2:	68e0      	ldr	r0, [r4, #12]
 800c4a4:	9b03      	ldr	r3, [sp, #12]
 800c4a6:	4298      	cmp	r0, r3
 800c4a8:	bfb8      	it	lt
 800c4aa:	4618      	movlt	r0, r3
 800c4ac:	e7a4      	b.n	800c3f8 <_printf_i+0x168>
 800c4ae:	2301      	movs	r3, #1
 800c4b0:	4632      	mov	r2, r6
 800c4b2:	4649      	mov	r1, r9
 800c4b4:	4640      	mov	r0, r8
 800c4b6:	47d0      	blx	sl
 800c4b8:	3001      	adds	r0, #1
 800c4ba:	d09b      	beq.n	800c3f4 <_printf_i+0x164>
 800c4bc:	3501      	adds	r5, #1
 800c4be:	68e3      	ldr	r3, [r4, #12]
 800c4c0:	9903      	ldr	r1, [sp, #12]
 800c4c2:	1a5b      	subs	r3, r3, r1
 800c4c4:	42ab      	cmp	r3, r5
 800c4c6:	dcf2      	bgt.n	800c4ae <_printf_i+0x21e>
 800c4c8:	e7eb      	b.n	800c4a2 <_printf_i+0x212>
 800c4ca:	2500      	movs	r5, #0
 800c4cc:	f104 0619 	add.w	r6, r4, #25
 800c4d0:	e7f5      	b.n	800c4be <_printf_i+0x22e>
 800c4d2:	bf00      	nop
 800c4d4:	08014e76 	.word	0x08014e76
 800c4d8:	08014e87 	.word	0x08014e87

0800c4dc <_scanf_float>:
 800c4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4e0:	b087      	sub	sp, #28
 800c4e2:	4617      	mov	r7, r2
 800c4e4:	9303      	str	r3, [sp, #12]
 800c4e6:	688b      	ldr	r3, [r1, #8]
 800c4e8:	1e5a      	subs	r2, r3, #1
 800c4ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c4ee:	bf83      	ittte	hi
 800c4f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c4f4:	195b      	addhi	r3, r3, r5
 800c4f6:	9302      	strhi	r3, [sp, #8]
 800c4f8:	2300      	movls	r3, #0
 800c4fa:	bf86      	itte	hi
 800c4fc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c500:	608b      	strhi	r3, [r1, #8]
 800c502:	9302      	strls	r3, [sp, #8]
 800c504:	680b      	ldr	r3, [r1, #0]
 800c506:	468b      	mov	fp, r1
 800c508:	2500      	movs	r5, #0
 800c50a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c50e:	f84b 3b1c 	str.w	r3, [fp], #28
 800c512:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c516:	4680      	mov	r8, r0
 800c518:	460c      	mov	r4, r1
 800c51a:	465e      	mov	r6, fp
 800c51c:	46aa      	mov	sl, r5
 800c51e:	46a9      	mov	r9, r5
 800c520:	9501      	str	r5, [sp, #4]
 800c522:	68a2      	ldr	r2, [r4, #8]
 800c524:	b152      	cbz	r2, 800c53c <_scanf_float+0x60>
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	2b4e      	cmp	r3, #78	; 0x4e
 800c52c:	d864      	bhi.n	800c5f8 <_scanf_float+0x11c>
 800c52e:	2b40      	cmp	r3, #64	; 0x40
 800c530:	d83c      	bhi.n	800c5ac <_scanf_float+0xd0>
 800c532:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c536:	b2c8      	uxtb	r0, r1
 800c538:	280e      	cmp	r0, #14
 800c53a:	d93a      	bls.n	800c5b2 <_scanf_float+0xd6>
 800c53c:	f1b9 0f00 	cmp.w	r9, #0
 800c540:	d003      	beq.n	800c54a <_scanf_float+0x6e>
 800c542:	6823      	ldr	r3, [r4, #0]
 800c544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c548:	6023      	str	r3, [r4, #0]
 800c54a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c54e:	f1ba 0f01 	cmp.w	sl, #1
 800c552:	f200 8113 	bhi.w	800c77c <_scanf_float+0x2a0>
 800c556:	455e      	cmp	r6, fp
 800c558:	f200 8105 	bhi.w	800c766 <_scanf_float+0x28a>
 800c55c:	2501      	movs	r5, #1
 800c55e:	4628      	mov	r0, r5
 800c560:	b007      	add	sp, #28
 800c562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c566:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c56a:	2a0d      	cmp	r2, #13
 800c56c:	d8e6      	bhi.n	800c53c <_scanf_float+0x60>
 800c56e:	a101      	add	r1, pc, #4	; (adr r1, 800c574 <_scanf_float+0x98>)
 800c570:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c574:	0800c6b3 	.word	0x0800c6b3
 800c578:	0800c53d 	.word	0x0800c53d
 800c57c:	0800c53d 	.word	0x0800c53d
 800c580:	0800c53d 	.word	0x0800c53d
 800c584:	0800c713 	.word	0x0800c713
 800c588:	0800c6eb 	.word	0x0800c6eb
 800c58c:	0800c53d 	.word	0x0800c53d
 800c590:	0800c53d 	.word	0x0800c53d
 800c594:	0800c6c1 	.word	0x0800c6c1
 800c598:	0800c53d 	.word	0x0800c53d
 800c59c:	0800c53d 	.word	0x0800c53d
 800c5a0:	0800c53d 	.word	0x0800c53d
 800c5a4:	0800c53d 	.word	0x0800c53d
 800c5a8:	0800c679 	.word	0x0800c679
 800c5ac:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c5b0:	e7db      	b.n	800c56a <_scanf_float+0x8e>
 800c5b2:	290e      	cmp	r1, #14
 800c5b4:	d8c2      	bhi.n	800c53c <_scanf_float+0x60>
 800c5b6:	a001      	add	r0, pc, #4	; (adr r0, 800c5bc <_scanf_float+0xe0>)
 800c5b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c5bc:	0800c66b 	.word	0x0800c66b
 800c5c0:	0800c53d 	.word	0x0800c53d
 800c5c4:	0800c66b 	.word	0x0800c66b
 800c5c8:	0800c6ff 	.word	0x0800c6ff
 800c5cc:	0800c53d 	.word	0x0800c53d
 800c5d0:	0800c619 	.word	0x0800c619
 800c5d4:	0800c655 	.word	0x0800c655
 800c5d8:	0800c655 	.word	0x0800c655
 800c5dc:	0800c655 	.word	0x0800c655
 800c5e0:	0800c655 	.word	0x0800c655
 800c5e4:	0800c655 	.word	0x0800c655
 800c5e8:	0800c655 	.word	0x0800c655
 800c5ec:	0800c655 	.word	0x0800c655
 800c5f0:	0800c655 	.word	0x0800c655
 800c5f4:	0800c655 	.word	0x0800c655
 800c5f8:	2b6e      	cmp	r3, #110	; 0x6e
 800c5fa:	d809      	bhi.n	800c610 <_scanf_float+0x134>
 800c5fc:	2b60      	cmp	r3, #96	; 0x60
 800c5fe:	d8b2      	bhi.n	800c566 <_scanf_float+0x8a>
 800c600:	2b54      	cmp	r3, #84	; 0x54
 800c602:	d077      	beq.n	800c6f4 <_scanf_float+0x218>
 800c604:	2b59      	cmp	r3, #89	; 0x59
 800c606:	d199      	bne.n	800c53c <_scanf_float+0x60>
 800c608:	2d07      	cmp	r5, #7
 800c60a:	d197      	bne.n	800c53c <_scanf_float+0x60>
 800c60c:	2508      	movs	r5, #8
 800c60e:	e029      	b.n	800c664 <_scanf_float+0x188>
 800c610:	2b74      	cmp	r3, #116	; 0x74
 800c612:	d06f      	beq.n	800c6f4 <_scanf_float+0x218>
 800c614:	2b79      	cmp	r3, #121	; 0x79
 800c616:	e7f6      	b.n	800c606 <_scanf_float+0x12a>
 800c618:	6821      	ldr	r1, [r4, #0]
 800c61a:	05c8      	lsls	r0, r1, #23
 800c61c:	d51a      	bpl.n	800c654 <_scanf_float+0x178>
 800c61e:	9b02      	ldr	r3, [sp, #8]
 800c620:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c624:	6021      	str	r1, [r4, #0]
 800c626:	f109 0901 	add.w	r9, r9, #1
 800c62a:	b11b      	cbz	r3, 800c634 <_scanf_float+0x158>
 800c62c:	3b01      	subs	r3, #1
 800c62e:	3201      	adds	r2, #1
 800c630:	9302      	str	r3, [sp, #8]
 800c632:	60a2      	str	r2, [r4, #8]
 800c634:	68a3      	ldr	r3, [r4, #8]
 800c636:	3b01      	subs	r3, #1
 800c638:	60a3      	str	r3, [r4, #8]
 800c63a:	6923      	ldr	r3, [r4, #16]
 800c63c:	3301      	adds	r3, #1
 800c63e:	6123      	str	r3, [r4, #16]
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	3b01      	subs	r3, #1
 800c644:	2b00      	cmp	r3, #0
 800c646:	607b      	str	r3, [r7, #4]
 800c648:	f340 8084 	ble.w	800c754 <_scanf_float+0x278>
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	3301      	adds	r3, #1
 800c650:	603b      	str	r3, [r7, #0]
 800c652:	e766      	b.n	800c522 <_scanf_float+0x46>
 800c654:	eb1a 0f05 	cmn.w	sl, r5
 800c658:	f47f af70 	bne.w	800c53c <_scanf_float+0x60>
 800c65c:	6822      	ldr	r2, [r4, #0]
 800c65e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c662:	6022      	str	r2, [r4, #0]
 800c664:	f806 3b01 	strb.w	r3, [r6], #1
 800c668:	e7e4      	b.n	800c634 <_scanf_float+0x158>
 800c66a:	6822      	ldr	r2, [r4, #0]
 800c66c:	0610      	lsls	r0, r2, #24
 800c66e:	f57f af65 	bpl.w	800c53c <_scanf_float+0x60>
 800c672:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c676:	e7f4      	b.n	800c662 <_scanf_float+0x186>
 800c678:	f1ba 0f00 	cmp.w	sl, #0
 800c67c:	d10e      	bne.n	800c69c <_scanf_float+0x1c0>
 800c67e:	f1b9 0f00 	cmp.w	r9, #0
 800c682:	d10e      	bne.n	800c6a2 <_scanf_float+0x1c6>
 800c684:	6822      	ldr	r2, [r4, #0]
 800c686:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c68a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c68e:	d108      	bne.n	800c6a2 <_scanf_float+0x1c6>
 800c690:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c694:	6022      	str	r2, [r4, #0]
 800c696:	f04f 0a01 	mov.w	sl, #1
 800c69a:	e7e3      	b.n	800c664 <_scanf_float+0x188>
 800c69c:	f1ba 0f02 	cmp.w	sl, #2
 800c6a0:	d055      	beq.n	800c74e <_scanf_float+0x272>
 800c6a2:	2d01      	cmp	r5, #1
 800c6a4:	d002      	beq.n	800c6ac <_scanf_float+0x1d0>
 800c6a6:	2d04      	cmp	r5, #4
 800c6a8:	f47f af48 	bne.w	800c53c <_scanf_float+0x60>
 800c6ac:	3501      	adds	r5, #1
 800c6ae:	b2ed      	uxtb	r5, r5
 800c6b0:	e7d8      	b.n	800c664 <_scanf_float+0x188>
 800c6b2:	f1ba 0f01 	cmp.w	sl, #1
 800c6b6:	f47f af41 	bne.w	800c53c <_scanf_float+0x60>
 800c6ba:	f04f 0a02 	mov.w	sl, #2
 800c6be:	e7d1      	b.n	800c664 <_scanf_float+0x188>
 800c6c0:	b97d      	cbnz	r5, 800c6e2 <_scanf_float+0x206>
 800c6c2:	f1b9 0f00 	cmp.w	r9, #0
 800c6c6:	f47f af3c 	bne.w	800c542 <_scanf_float+0x66>
 800c6ca:	6822      	ldr	r2, [r4, #0]
 800c6cc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c6d0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c6d4:	f47f af39 	bne.w	800c54a <_scanf_float+0x6e>
 800c6d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c6dc:	6022      	str	r2, [r4, #0]
 800c6de:	2501      	movs	r5, #1
 800c6e0:	e7c0      	b.n	800c664 <_scanf_float+0x188>
 800c6e2:	2d03      	cmp	r5, #3
 800c6e4:	d0e2      	beq.n	800c6ac <_scanf_float+0x1d0>
 800c6e6:	2d05      	cmp	r5, #5
 800c6e8:	e7de      	b.n	800c6a8 <_scanf_float+0x1cc>
 800c6ea:	2d02      	cmp	r5, #2
 800c6ec:	f47f af26 	bne.w	800c53c <_scanf_float+0x60>
 800c6f0:	2503      	movs	r5, #3
 800c6f2:	e7b7      	b.n	800c664 <_scanf_float+0x188>
 800c6f4:	2d06      	cmp	r5, #6
 800c6f6:	f47f af21 	bne.w	800c53c <_scanf_float+0x60>
 800c6fa:	2507      	movs	r5, #7
 800c6fc:	e7b2      	b.n	800c664 <_scanf_float+0x188>
 800c6fe:	6822      	ldr	r2, [r4, #0]
 800c700:	0591      	lsls	r1, r2, #22
 800c702:	f57f af1b 	bpl.w	800c53c <_scanf_float+0x60>
 800c706:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c70a:	6022      	str	r2, [r4, #0]
 800c70c:	f8cd 9004 	str.w	r9, [sp, #4]
 800c710:	e7a8      	b.n	800c664 <_scanf_float+0x188>
 800c712:	6822      	ldr	r2, [r4, #0]
 800c714:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c718:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c71c:	d006      	beq.n	800c72c <_scanf_float+0x250>
 800c71e:	0550      	lsls	r0, r2, #21
 800c720:	f57f af0c 	bpl.w	800c53c <_scanf_float+0x60>
 800c724:	f1b9 0f00 	cmp.w	r9, #0
 800c728:	f43f af0f 	beq.w	800c54a <_scanf_float+0x6e>
 800c72c:	0591      	lsls	r1, r2, #22
 800c72e:	bf58      	it	pl
 800c730:	9901      	ldrpl	r1, [sp, #4]
 800c732:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c736:	bf58      	it	pl
 800c738:	eba9 0101 	subpl.w	r1, r9, r1
 800c73c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c740:	bf58      	it	pl
 800c742:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c746:	6022      	str	r2, [r4, #0]
 800c748:	f04f 0900 	mov.w	r9, #0
 800c74c:	e78a      	b.n	800c664 <_scanf_float+0x188>
 800c74e:	f04f 0a03 	mov.w	sl, #3
 800c752:	e787      	b.n	800c664 <_scanf_float+0x188>
 800c754:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c758:	4639      	mov	r1, r7
 800c75a:	4640      	mov	r0, r8
 800c75c:	4798      	blx	r3
 800c75e:	2800      	cmp	r0, #0
 800c760:	f43f aedf 	beq.w	800c522 <_scanf_float+0x46>
 800c764:	e6ea      	b.n	800c53c <_scanf_float+0x60>
 800c766:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c76a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c76e:	463a      	mov	r2, r7
 800c770:	4640      	mov	r0, r8
 800c772:	4798      	blx	r3
 800c774:	6923      	ldr	r3, [r4, #16]
 800c776:	3b01      	subs	r3, #1
 800c778:	6123      	str	r3, [r4, #16]
 800c77a:	e6ec      	b.n	800c556 <_scanf_float+0x7a>
 800c77c:	1e6b      	subs	r3, r5, #1
 800c77e:	2b06      	cmp	r3, #6
 800c780:	d825      	bhi.n	800c7ce <_scanf_float+0x2f2>
 800c782:	2d02      	cmp	r5, #2
 800c784:	d836      	bhi.n	800c7f4 <_scanf_float+0x318>
 800c786:	455e      	cmp	r6, fp
 800c788:	f67f aee8 	bls.w	800c55c <_scanf_float+0x80>
 800c78c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c790:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c794:	463a      	mov	r2, r7
 800c796:	4640      	mov	r0, r8
 800c798:	4798      	blx	r3
 800c79a:	6923      	ldr	r3, [r4, #16]
 800c79c:	3b01      	subs	r3, #1
 800c79e:	6123      	str	r3, [r4, #16]
 800c7a0:	e7f1      	b.n	800c786 <_scanf_float+0x2aa>
 800c7a2:	9802      	ldr	r0, [sp, #8]
 800c7a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c7a8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c7ac:	9002      	str	r0, [sp, #8]
 800c7ae:	463a      	mov	r2, r7
 800c7b0:	4640      	mov	r0, r8
 800c7b2:	4798      	blx	r3
 800c7b4:	6923      	ldr	r3, [r4, #16]
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	6123      	str	r3, [r4, #16]
 800c7ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c7be:	fa5f fa8a 	uxtb.w	sl, sl
 800c7c2:	f1ba 0f02 	cmp.w	sl, #2
 800c7c6:	d1ec      	bne.n	800c7a2 <_scanf_float+0x2c6>
 800c7c8:	3d03      	subs	r5, #3
 800c7ca:	b2ed      	uxtb	r5, r5
 800c7cc:	1b76      	subs	r6, r6, r5
 800c7ce:	6823      	ldr	r3, [r4, #0]
 800c7d0:	05da      	lsls	r2, r3, #23
 800c7d2:	d52f      	bpl.n	800c834 <_scanf_float+0x358>
 800c7d4:	055b      	lsls	r3, r3, #21
 800c7d6:	d510      	bpl.n	800c7fa <_scanf_float+0x31e>
 800c7d8:	455e      	cmp	r6, fp
 800c7da:	f67f aebf 	bls.w	800c55c <_scanf_float+0x80>
 800c7de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c7e2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c7e6:	463a      	mov	r2, r7
 800c7e8:	4640      	mov	r0, r8
 800c7ea:	4798      	blx	r3
 800c7ec:	6923      	ldr	r3, [r4, #16]
 800c7ee:	3b01      	subs	r3, #1
 800c7f0:	6123      	str	r3, [r4, #16]
 800c7f2:	e7f1      	b.n	800c7d8 <_scanf_float+0x2fc>
 800c7f4:	46aa      	mov	sl, r5
 800c7f6:	9602      	str	r6, [sp, #8]
 800c7f8:	e7df      	b.n	800c7ba <_scanf_float+0x2de>
 800c7fa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c7fe:	6923      	ldr	r3, [r4, #16]
 800c800:	2965      	cmp	r1, #101	; 0x65
 800c802:	f103 33ff 	add.w	r3, r3, #4294967295
 800c806:	f106 35ff 	add.w	r5, r6, #4294967295
 800c80a:	6123      	str	r3, [r4, #16]
 800c80c:	d00c      	beq.n	800c828 <_scanf_float+0x34c>
 800c80e:	2945      	cmp	r1, #69	; 0x45
 800c810:	d00a      	beq.n	800c828 <_scanf_float+0x34c>
 800c812:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c816:	463a      	mov	r2, r7
 800c818:	4640      	mov	r0, r8
 800c81a:	4798      	blx	r3
 800c81c:	6923      	ldr	r3, [r4, #16]
 800c81e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c822:	3b01      	subs	r3, #1
 800c824:	1eb5      	subs	r5, r6, #2
 800c826:	6123      	str	r3, [r4, #16]
 800c828:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c82c:	463a      	mov	r2, r7
 800c82e:	4640      	mov	r0, r8
 800c830:	4798      	blx	r3
 800c832:	462e      	mov	r6, r5
 800c834:	6825      	ldr	r5, [r4, #0]
 800c836:	f015 0510 	ands.w	r5, r5, #16
 800c83a:	d158      	bne.n	800c8ee <_scanf_float+0x412>
 800c83c:	7035      	strb	r5, [r6, #0]
 800c83e:	6823      	ldr	r3, [r4, #0]
 800c840:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c848:	d11c      	bne.n	800c884 <_scanf_float+0x3a8>
 800c84a:	9b01      	ldr	r3, [sp, #4]
 800c84c:	454b      	cmp	r3, r9
 800c84e:	eba3 0209 	sub.w	r2, r3, r9
 800c852:	d124      	bne.n	800c89e <_scanf_float+0x3c2>
 800c854:	2200      	movs	r2, #0
 800c856:	4659      	mov	r1, fp
 800c858:	4640      	mov	r0, r8
 800c85a:	f000 fe9b 	bl	800d594 <_strtod_r>
 800c85e:	9b03      	ldr	r3, [sp, #12]
 800c860:	6821      	ldr	r1, [r4, #0]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f011 0f02 	tst.w	r1, #2
 800c868:	ec57 6b10 	vmov	r6, r7, d0
 800c86c:	f103 0204 	add.w	r2, r3, #4
 800c870:	d020      	beq.n	800c8b4 <_scanf_float+0x3d8>
 800c872:	9903      	ldr	r1, [sp, #12]
 800c874:	600a      	str	r2, [r1, #0]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	e9c3 6700 	strd	r6, r7, [r3]
 800c87c:	68e3      	ldr	r3, [r4, #12]
 800c87e:	3301      	adds	r3, #1
 800c880:	60e3      	str	r3, [r4, #12]
 800c882:	e66c      	b.n	800c55e <_scanf_float+0x82>
 800c884:	9b04      	ldr	r3, [sp, #16]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d0e4      	beq.n	800c854 <_scanf_float+0x378>
 800c88a:	9905      	ldr	r1, [sp, #20]
 800c88c:	230a      	movs	r3, #10
 800c88e:	462a      	mov	r2, r5
 800c890:	3101      	adds	r1, #1
 800c892:	4640      	mov	r0, r8
 800c894:	f000 ff08 	bl	800d6a8 <_strtol_r>
 800c898:	9b04      	ldr	r3, [sp, #16]
 800c89a:	9e05      	ldr	r6, [sp, #20]
 800c89c:	1ac2      	subs	r2, r0, r3
 800c89e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c8a2:	429e      	cmp	r6, r3
 800c8a4:	bf28      	it	cs
 800c8a6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c8aa:	4912      	ldr	r1, [pc, #72]	; (800c8f4 <_scanf_float+0x418>)
 800c8ac:	4630      	mov	r0, r6
 800c8ae:	f000 f82b 	bl	800c908 <siprintf>
 800c8b2:	e7cf      	b.n	800c854 <_scanf_float+0x378>
 800c8b4:	f011 0f04 	tst.w	r1, #4
 800c8b8:	9903      	ldr	r1, [sp, #12]
 800c8ba:	600a      	str	r2, [r1, #0]
 800c8bc:	d1db      	bne.n	800c876 <_scanf_float+0x39a>
 800c8be:	f8d3 8000 	ldr.w	r8, [r3]
 800c8c2:	ee10 2a10 	vmov	r2, s0
 800c8c6:	ee10 0a10 	vmov	r0, s0
 800c8ca:	463b      	mov	r3, r7
 800c8cc:	4639      	mov	r1, r7
 800c8ce:	f7f4 f92d 	bl	8000b2c <__aeabi_dcmpun>
 800c8d2:	b128      	cbz	r0, 800c8e0 <_scanf_float+0x404>
 800c8d4:	4808      	ldr	r0, [pc, #32]	; (800c8f8 <_scanf_float+0x41c>)
 800c8d6:	f000 f811 	bl	800c8fc <nanf>
 800c8da:	ed88 0a00 	vstr	s0, [r8]
 800c8de:	e7cd      	b.n	800c87c <_scanf_float+0x3a0>
 800c8e0:	4630      	mov	r0, r6
 800c8e2:	4639      	mov	r1, r7
 800c8e4:	f7f4 f980 	bl	8000be8 <__aeabi_d2f>
 800c8e8:	f8c8 0000 	str.w	r0, [r8]
 800c8ec:	e7c6      	b.n	800c87c <_scanf_float+0x3a0>
 800c8ee:	2500      	movs	r5, #0
 800c8f0:	e635      	b.n	800c55e <_scanf_float+0x82>
 800c8f2:	bf00      	nop
 800c8f4:	08014e98 	.word	0x08014e98
 800c8f8:	080152b0 	.word	0x080152b0

0800c8fc <nanf>:
 800c8fc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c904 <nanf+0x8>
 800c900:	4770      	bx	lr
 800c902:	bf00      	nop
 800c904:	7fc00000 	.word	0x7fc00000

0800c908 <siprintf>:
 800c908:	b40e      	push	{r1, r2, r3}
 800c90a:	b500      	push	{lr}
 800c90c:	b09c      	sub	sp, #112	; 0x70
 800c90e:	ab1d      	add	r3, sp, #116	; 0x74
 800c910:	9002      	str	r0, [sp, #8]
 800c912:	9006      	str	r0, [sp, #24]
 800c914:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c918:	4809      	ldr	r0, [pc, #36]	; (800c940 <siprintf+0x38>)
 800c91a:	9107      	str	r1, [sp, #28]
 800c91c:	9104      	str	r1, [sp, #16]
 800c91e:	4909      	ldr	r1, [pc, #36]	; (800c944 <siprintf+0x3c>)
 800c920:	f853 2b04 	ldr.w	r2, [r3], #4
 800c924:	9105      	str	r1, [sp, #20]
 800c926:	6800      	ldr	r0, [r0, #0]
 800c928:	9301      	str	r3, [sp, #4]
 800c92a:	a902      	add	r1, sp, #8
 800c92c:	f002 fe96 	bl	800f65c <_svfiprintf_r>
 800c930:	9b02      	ldr	r3, [sp, #8]
 800c932:	2200      	movs	r2, #0
 800c934:	701a      	strb	r2, [r3, #0]
 800c936:	b01c      	add	sp, #112	; 0x70
 800c938:	f85d eb04 	ldr.w	lr, [sp], #4
 800c93c:	b003      	add	sp, #12
 800c93e:	4770      	bx	lr
 800c940:	20000524 	.word	0x20000524
 800c944:	ffff0208 	.word	0xffff0208

0800c948 <sulp>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	4604      	mov	r4, r0
 800c94c:	460d      	mov	r5, r1
 800c94e:	ec45 4b10 	vmov	d0, r4, r5
 800c952:	4616      	mov	r6, r2
 800c954:	f002 fc1e 	bl	800f194 <__ulp>
 800c958:	ec51 0b10 	vmov	r0, r1, d0
 800c95c:	b17e      	cbz	r6, 800c97e <sulp+0x36>
 800c95e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c962:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c966:	2b00      	cmp	r3, #0
 800c968:	dd09      	ble.n	800c97e <sulp+0x36>
 800c96a:	051b      	lsls	r3, r3, #20
 800c96c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c970:	2400      	movs	r4, #0
 800c972:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c976:	4622      	mov	r2, r4
 800c978:	462b      	mov	r3, r5
 800c97a:	f7f3 fe3d 	bl	80005f8 <__aeabi_dmul>
 800c97e:	bd70      	pop	{r4, r5, r6, pc}

0800c980 <_strtod_l>:
 800c980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c984:	b0a3      	sub	sp, #140	; 0x8c
 800c986:	461f      	mov	r7, r3
 800c988:	2300      	movs	r3, #0
 800c98a:	931e      	str	r3, [sp, #120]	; 0x78
 800c98c:	4ba4      	ldr	r3, [pc, #656]	; (800cc20 <_strtod_l+0x2a0>)
 800c98e:	9219      	str	r2, [sp, #100]	; 0x64
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	9307      	str	r3, [sp, #28]
 800c994:	4604      	mov	r4, r0
 800c996:	4618      	mov	r0, r3
 800c998:	4688      	mov	r8, r1
 800c99a:	f7f3 fc19 	bl	80001d0 <strlen>
 800c99e:	f04f 0a00 	mov.w	sl, #0
 800c9a2:	4605      	mov	r5, r0
 800c9a4:	f04f 0b00 	mov.w	fp, #0
 800c9a8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c9ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c9ae:	781a      	ldrb	r2, [r3, #0]
 800c9b0:	2a2b      	cmp	r2, #43	; 0x2b
 800c9b2:	d04c      	beq.n	800ca4e <_strtod_l+0xce>
 800c9b4:	d839      	bhi.n	800ca2a <_strtod_l+0xaa>
 800c9b6:	2a0d      	cmp	r2, #13
 800c9b8:	d832      	bhi.n	800ca20 <_strtod_l+0xa0>
 800c9ba:	2a08      	cmp	r2, #8
 800c9bc:	d832      	bhi.n	800ca24 <_strtod_l+0xa4>
 800c9be:	2a00      	cmp	r2, #0
 800c9c0:	d03c      	beq.n	800ca3c <_strtod_l+0xbc>
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	930e      	str	r3, [sp, #56]	; 0x38
 800c9c6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c9c8:	7833      	ldrb	r3, [r6, #0]
 800c9ca:	2b30      	cmp	r3, #48	; 0x30
 800c9cc:	f040 80b4 	bne.w	800cb38 <_strtod_l+0x1b8>
 800c9d0:	7873      	ldrb	r3, [r6, #1]
 800c9d2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c9d6:	2b58      	cmp	r3, #88	; 0x58
 800c9d8:	d16c      	bne.n	800cab4 <_strtod_l+0x134>
 800c9da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c9dc:	9301      	str	r3, [sp, #4]
 800c9de:	ab1e      	add	r3, sp, #120	; 0x78
 800c9e0:	9702      	str	r7, [sp, #8]
 800c9e2:	9300      	str	r3, [sp, #0]
 800c9e4:	4a8f      	ldr	r2, [pc, #572]	; (800cc24 <_strtod_l+0x2a4>)
 800c9e6:	ab1f      	add	r3, sp, #124	; 0x7c
 800c9e8:	a91d      	add	r1, sp, #116	; 0x74
 800c9ea:	4620      	mov	r0, r4
 800c9ec:	f001 fd40 	bl	800e470 <__gethex>
 800c9f0:	f010 0707 	ands.w	r7, r0, #7
 800c9f4:	4605      	mov	r5, r0
 800c9f6:	d005      	beq.n	800ca04 <_strtod_l+0x84>
 800c9f8:	2f06      	cmp	r7, #6
 800c9fa:	d12a      	bne.n	800ca52 <_strtod_l+0xd2>
 800c9fc:	3601      	adds	r6, #1
 800c9fe:	2300      	movs	r3, #0
 800ca00:	961d      	str	r6, [sp, #116]	; 0x74
 800ca02:	930e      	str	r3, [sp, #56]	; 0x38
 800ca04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	f040 8596 	bne.w	800d538 <_strtod_l+0xbb8>
 800ca0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ca0e:	b1db      	cbz	r3, 800ca48 <_strtod_l+0xc8>
 800ca10:	4652      	mov	r2, sl
 800ca12:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ca16:	ec43 2b10 	vmov	d0, r2, r3
 800ca1a:	b023      	add	sp, #140	; 0x8c
 800ca1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca20:	2a20      	cmp	r2, #32
 800ca22:	d1ce      	bne.n	800c9c2 <_strtod_l+0x42>
 800ca24:	3301      	adds	r3, #1
 800ca26:	931d      	str	r3, [sp, #116]	; 0x74
 800ca28:	e7c0      	b.n	800c9ac <_strtod_l+0x2c>
 800ca2a:	2a2d      	cmp	r2, #45	; 0x2d
 800ca2c:	d1c9      	bne.n	800c9c2 <_strtod_l+0x42>
 800ca2e:	2201      	movs	r2, #1
 800ca30:	920e      	str	r2, [sp, #56]	; 0x38
 800ca32:	1c5a      	adds	r2, r3, #1
 800ca34:	921d      	str	r2, [sp, #116]	; 0x74
 800ca36:	785b      	ldrb	r3, [r3, #1]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1c4      	bne.n	800c9c6 <_strtod_l+0x46>
 800ca3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca3e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	f040 8576 	bne.w	800d534 <_strtod_l+0xbb4>
 800ca48:	4652      	mov	r2, sl
 800ca4a:	465b      	mov	r3, fp
 800ca4c:	e7e3      	b.n	800ca16 <_strtod_l+0x96>
 800ca4e:	2200      	movs	r2, #0
 800ca50:	e7ee      	b.n	800ca30 <_strtod_l+0xb0>
 800ca52:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ca54:	b13a      	cbz	r2, 800ca66 <_strtod_l+0xe6>
 800ca56:	2135      	movs	r1, #53	; 0x35
 800ca58:	a820      	add	r0, sp, #128	; 0x80
 800ca5a:	f002 fca6 	bl	800f3aa <__copybits>
 800ca5e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ca60:	4620      	mov	r0, r4
 800ca62:	f002 f86b 	bl	800eb3c <_Bfree>
 800ca66:	3f01      	subs	r7, #1
 800ca68:	2f05      	cmp	r7, #5
 800ca6a:	d807      	bhi.n	800ca7c <_strtod_l+0xfc>
 800ca6c:	e8df f007 	tbb	[pc, r7]
 800ca70:	1d180b0e 	.word	0x1d180b0e
 800ca74:	030e      	.short	0x030e
 800ca76:	f04f 0b00 	mov.w	fp, #0
 800ca7a:	46da      	mov	sl, fp
 800ca7c:	0728      	lsls	r0, r5, #28
 800ca7e:	d5c1      	bpl.n	800ca04 <_strtod_l+0x84>
 800ca80:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ca84:	e7be      	b.n	800ca04 <_strtod_l+0x84>
 800ca86:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800ca8a:	e7f7      	b.n	800ca7c <_strtod_l+0xfc>
 800ca8c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800ca90:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ca92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ca96:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ca9a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ca9e:	e7ed      	b.n	800ca7c <_strtod_l+0xfc>
 800caa0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800cc28 <_strtod_l+0x2a8>
 800caa4:	f04f 0a00 	mov.w	sl, #0
 800caa8:	e7e8      	b.n	800ca7c <_strtod_l+0xfc>
 800caaa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800caae:	f04f 3aff 	mov.w	sl, #4294967295
 800cab2:	e7e3      	b.n	800ca7c <_strtod_l+0xfc>
 800cab4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cab6:	1c5a      	adds	r2, r3, #1
 800cab8:	921d      	str	r2, [sp, #116]	; 0x74
 800caba:	785b      	ldrb	r3, [r3, #1]
 800cabc:	2b30      	cmp	r3, #48	; 0x30
 800cabe:	d0f9      	beq.n	800cab4 <_strtod_l+0x134>
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d09f      	beq.n	800ca04 <_strtod_l+0x84>
 800cac4:	2301      	movs	r3, #1
 800cac6:	f04f 0900 	mov.w	r9, #0
 800caca:	9304      	str	r3, [sp, #16]
 800cacc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cace:	930a      	str	r3, [sp, #40]	; 0x28
 800cad0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cad4:	464f      	mov	r7, r9
 800cad6:	220a      	movs	r2, #10
 800cad8:	981d      	ldr	r0, [sp, #116]	; 0x74
 800cada:	7806      	ldrb	r6, [r0, #0]
 800cadc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cae0:	b2d9      	uxtb	r1, r3
 800cae2:	2909      	cmp	r1, #9
 800cae4:	d92a      	bls.n	800cb3c <_strtod_l+0x1bc>
 800cae6:	9907      	ldr	r1, [sp, #28]
 800cae8:	462a      	mov	r2, r5
 800caea:	f002 fed1 	bl	800f890 <strncmp>
 800caee:	b398      	cbz	r0, 800cb58 <_strtod_l+0x1d8>
 800caf0:	2000      	movs	r0, #0
 800caf2:	4633      	mov	r3, r6
 800caf4:	463d      	mov	r5, r7
 800caf6:	9007      	str	r0, [sp, #28]
 800caf8:	4602      	mov	r2, r0
 800cafa:	2b65      	cmp	r3, #101	; 0x65
 800cafc:	d001      	beq.n	800cb02 <_strtod_l+0x182>
 800cafe:	2b45      	cmp	r3, #69	; 0x45
 800cb00:	d118      	bne.n	800cb34 <_strtod_l+0x1b4>
 800cb02:	b91d      	cbnz	r5, 800cb0c <_strtod_l+0x18c>
 800cb04:	9b04      	ldr	r3, [sp, #16]
 800cb06:	4303      	orrs	r3, r0
 800cb08:	d098      	beq.n	800ca3c <_strtod_l+0xbc>
 800cb0a:	2500      	movs	r5, #0
 800cb0c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800cb10:	f108 0301 	add.w	r3, r8, #1
 800cb14:	931d      	str	r3, [sp, #116]	; 0x74
 800cb16:	f898 3001 	ldrb.w	r3, [r8, #1]
 800cb1a:	2b2b      	cmp	r3, #43	; 0x2b
 800cb1c:	d075      	beq.n	800cc0a <_strtod_l+0x28a>
 800cb1e:	2b2d      	cmp	r3, #45	; 0x2d
 800cb20:	d07b      	beq.n	800cc1a <_strtod_l+0x29a>
 800cb22:	f04f 0c00 	mov.w	ip, #0
 800cb26:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800cb2a:	2909      	cmp	r1, #9
 800cb2c:	f240 8082 	bls.w	800cc34 <_strtod_l+0x2b4>
 800cb30:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800cb34:	2600      	movs	r6, #0
 800cb36:	e09d      	b.n	800cc74 <_strtod_l+0x2f4>
 800cb38:	2300      	movs	r3, #0
 800cb3a:	e7c4      	b.n	800cac6 <_strtod_l+0x146>
 800cb3c:	2f08      	cmp	r7, #8
 800cb3e:	bfd8      	it	le
 800cb40:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800cb42:	f100 0001 	add.w	r0, r0, #1
 800cb46:	bfda      	itte	le
 800cb48:	fb02 3301 	mlale	r3, r2, r1, r3
 800cb4c:	9309      	strle	r3, [sp, #36]	; 0x24
 800cb4e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cb52:	3701      	adds	r7, #1
 800cb54:	901d      	str	r0, [sp, #116]	; 0x74
 800cb56:	e7bf      	b.n	800cad8 <_strtod_l+0x158>
 800cb58:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cb5a:	195a      	adds	r2, r3, r5
 800cb5c:	921d      	str	r2, [sp, #116]	; 0x74
 800cb5e:	5d5b      	ldrb	r3, [r3, r5]
 800cb60:	2f00      	cmp	r7, #0
 800cb62:	d037      	beq.n	800cbd4 <_strtod_l+0x254>
 800cb64:	9007      	str	r0, [sp, #28]
 800cb66:	463d      	mov	r5, r7
 800cb68:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800cb6c:	2a09      	cmp	r2, #9
 800cb6e:	d912      	bls.n	800cb96 <_strtod_l+0x216>
 800cb70:	2201      	movs	r2, #1
 800cb72:	e7c2      	b.n	800cafa <_strtod_l+0x17a>
 800cb74:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cb76:	1c5a      	adds	r2, r3, #1
 800cb78:	921d      	str	r2, [sp, #116]	; 0x74
 800cb7a:	785b      	ldrb	r3, [r3, #1]
 800cb7c:	3001      	adds	r0, #1
 800cb7e:	2b30      	cmp	r3, #48	; 0x30
 800cb80:	d0f8      	beq.n	800cb74 <_strtod_l+0x1f4>
 800cb82:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800cb86:	2a08      	cmp	r2, #8
 800cb88:	f200 84db 	bhi.w	800d542 <_strtod_l+0xbc2>
 800cb8c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800cb8e:	9007      	str	r0, [sp, #28]
 800cb90:	2000      	movs	r0, #0
 800cb92:	920a      	str	r2, [sp, #40]	; 0x28
 800cb94:	4605      	mov	r5, r0
 800cb96:	3b30      	subs	r3, #48	; 0x30
 800cb98:	f100 0201 	add.w	r2, r0, #1
 800cb9c:	d014      	beq.n	800cbc8 <_strtod_l+0x248>
 800cb9e:	9907      	ldr	r1, [sp, #28]
 800cba0:	4411      	add	r1, r2
 800cba2:	9107      	str	r1, [sp, #28]
 800cba4:	462a      	mov	r2, r5
 800cba6:	eb00 0e05 	add.w	lr, r0, r5
 800cbaa:	210a      	movs	r1, #10
 800cbac:	4572      	cmp	r2, lr
 800cbae:	d113      	bne.n	800cbd8 <_strtod_l+0x258>
 800cbb0:	182a      	adds	r2, r5, r0
 800cbb2:	2a08      	cmp	r2, #8
 800cbb4:	f105 0501 	add.w	r5, r5, #1
 800cbb8:	4405      	add	r5, r0
 800cbba:	dc1c      	bgt.n	800cbf6 <_strtod_l+0x276>
 800cbbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbbe:	220a      	movs	r2, #10
 800cbc0:	fb02 3301 	mla	r3, r2, r1, r3
 800cbc4:	9309      	str	r3, [sp, #36]	; 0x24
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cbca:	1c59      	adds	r1, r3, #1
 800cbcc:	911d      	str	r1, [sp, #116]	; 0x74
 800cbce:	785b      	ldrb	r3, [r3, #1]
 800cbd0:	4610      	mov	r0, r2
 800cbd2:	e7c9      	b.n	800cb68 <_strtod_l+0x1e8>
 800cbd4:	4638      	mov	r0, r7
 800cbd6:	e7d2      	b.n	800cb7e <_strtod_l+0x1fe>
 800cbd8:	2a08      	cmp	r2, #8
 800cbda:	dc04      	bgt.n	800cbe6 <_strtod_l+0x266>
 800cbdc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800cbde:	434e      	muls	r6, r1
 800cbe0:	9609      	str	r6, [sp, #36]	; 0x24
 800cbe2:	3201      	adds	r2, #1
 800cbe4:	e7e2      	b.n	800cbac <_strtod_l+0x22c>
 800cbe6:	f102 0c01 	add.w	ip, r2, #1
 800cbea:	f1bc 0f10 	cmp.w	ip, #16
 800cbee:	bfd8      	it	le
 800cbf0:	fb01 f909 	mulle.w	r9, r1, r9
 800cbf4:	e7f5      	b.n	800cbe2 <_strtod_l+0x262>
 800cbf6:	2d10      	cmp	r5, #16
 800cbf8:	bfdc      	itt	le
 800cbfa:	220a      	movle	r2, #10
 800cbfc:	fb02 3909 	mlale	r9, r2, r9, r3
 800cc00:	e7e1      	b.n	800cbc6 <_strtod_l+0x246>
 800cc02:	2300      	movs	r3, #0
 800cc04:	9307      	str	r3, [sp, #28]
 800cc06:	2201      	movs	r2, #1
 800cc08:	e77c      	b.n	800cb04 <_strtod_l+0x184>
 800cc0a:	f04f 0c00 	mov.w	ip, #0
 800cc0e:	f108 0302 	add.w	r3, r8, #2
 800cc12:	931d      	str	r3, [sp, #116]	; 0x74
 800cc14:	f898 3002 	ldrb.w	r3, [r8, #2]
 800cc18:	e785      	b.n	800cb26 <_strtod_l+0x1a6>
 800cc1a:	f04f 0c01 	mov.w	ip, #1
 800cc1e:	e7f6      	b.n	800cc0e <_strtod_l+0x28e>
 800cc20:	080150f0 	.word	0x080150f0
 800cc24:	08014ea0 	.word	0x08014ea0
 800cc28:	7ff00000 	.word	0x7ff00000
 800cc2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cc2e:	1c59      	adds	r1, r3, #1
 800cc30:	911d      	str	r1, [sp, #116]	; 0x74
 800cc32:	785b      	ldrb	r3, [r3, #1]
 800cc34:	2b30      	cmp	r3, #48	; 0x30
 800cc36:	d0f9      	beq.n	800cc2c <_strtod_l+0x2ac>
 800cc38:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800cc3c:	2908      	cmp	r1, #8
 800cc3e:	f63f af79 	bhi.w	800cb34 <_strtod_l+0x1b4>
 800cc42:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800cc46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cc48:	9308      	str	r3, [sp, #32]
 800cc4a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cc4c:	1c59      	adds	r1, r3, #1
 800cc4e:	911d      	str	r1, [sp, #116]	; 0x74
 800cc50:	785b      	ldrb	r3, [r3, #1]
 800cc52:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800cc56:	2e09      	cmp	r6, #9
 800cc58:	d937      	bls.n	800ccca <_strtod_l+0x34a>
 800cc5a:	9e08      	ldr	r6, [sp, #32]
 800cc5c:	1b89      	subs	r1, r1, r6
 800cc5e:	2908      	cmp	r1, #8
 800cc60:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cc64:	dc02      	bgt.n	800cc6c <_strtod_l+0x2ec>
 800cc66:	4576      	cmp	r6, lr
 800cc68:	bfa8      	it	ge
 800cc6a:	4676      	movge	r6, lr
 800cc6c:	f1bc 0f00 	cmp.w	ip, #0
 800cc70:	d000      	beq.n	800cc74 <_strtod_l+0x2f4>
 800cc72:	4276      	negs	r6, r6
 800cc74:	2d00      	cmp	r5, #0
 800cc76:	d14f      	bne.n	800cd18 <_strtod_l+0x398>
 800cc78:	9904      	ldr	r1, [sp, #16]
 800cc7a:	4301      	orrs	r1, r0
 800cc7c:	f47f aec2 	bne.w	800ca04 <_strtod_l+0x84>
 800cc80:	2a00      	cmp	r2, #0
 800cc82:	f47f aedb 	bne.w	800ca3c <_strtod_l+0xbc>
 800cc86:	2b69      	cmp	r3, #105	; 0x69
 800cc88:	d027      	beq.n	800ccda <_strtod_l+0x35a>
 800cc8a:	dc24      	bgt.n	800ccd6 <_strtod_l+0x356>
 800cc8c:	2b49      	cmp	r3, #73	; 0x49
 800cc8e:	d024      	beq.n	800ccda <_strtod_l+0x35a>
 800cc90:	2b4e      	cmp	r3, #78	; 0x4e
 800cc92:	f47f aed3 	bne.w	800ca3c <_strtod_l+0xbc>
 800cc96:	499e      	ldr	r1, [pc, #632]	; (800cf10 <_strtod_l+0x590>)
 800cc98:	a81d      	add	r0, sp, #116	; 0x74
 800cc9a:	f001 fe41 	bl	800e920 <__match>
 800cc9e:	2800      	cmp	r0, #0
 800cca0:	f43f aecc 	beq.w	800ca3c <_strtod_l+0xbc>
 800cca4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	2b28      	cmp	r3, #40	; 0x28
 800ccaa:	d12d      	bne.n	800cd08 <_strtod_l+0x388>
 800ccac:	4999      	ldr	r1, [pc, #612]	; (800cf14 <_strtod_l+0x594>)
 800ccae:	aa20      	add	r2, sp, #128	; 0x80
 800ccb0:	a81d      	add	r0, sp, #116	; 0x74
 800ccb2:	f001 fe49 	bl	800e948 <__hexnan>
 800ccb6:	2805      	cmp	r0, #5
 800ccb8:	d126      	bne.n	800cd08 <_strtod_l+0x388>
 800ccba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccbc:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800ccc0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ccc4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ccc8:	e69c      	b.n	800ca04 <_strtod_l+0x84>
 800ccca:	210a      	movs	r1, #10
 800cccc:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ccd0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ccd4:	e7b9      	b.n	800cc4a <_strtod_l+0x2ca>
 800ccd6:	2b6e      	cmp	r3, #110	; 0x6e
 800ccd8:	e7db      	b.n	800cc92 <_strtod_l+0x312>
 800ccda:	498f      	ldr	r1, [pc, #572]	; (800cf18 <_strtod_l+0x598>)
 800ccdc:	a81d      	add	r0, sp, #116	; 0x74
 800ccde:	f001 fe1f 	bl	800e920 <__match>
 800cce2:	2800      	cmp	r0, #0
 800cce4:	f43f aeaa 	beq.w	800ca3c <_strtod_l+0xbc>
 800cce8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ccea:	498c      	ldr	r1, [pc, #560]	; (800cf1c <_strtod_l+0x59c>)
 800ccec:	3b01      	subs	r3, #1
 800ccee:	a81d      	add	r0, sp, #116	; 0x74
 800ccf0:	931d      	str	r3, [sp, #116]	; 0x74
 800ccf2:	f001 fe15 	bl	800e920 <__match>
 800ccf6:	b910      	cbnz	r0, 800ccfe <_strtod_l+0x37e>
 800ccf8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	931d      	str	r3, [sp, #116]	; 0x74
 800ccfe:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800cf2c <_strtod_l+0x5ac>
 800cd02:	f04f 0a00 	mov.w	sl, #0
 800cd06:	e67d      	b.n	800ca04 <_strtod_l+0x84>
 800cd08:	4885      	ldr	r0, [pc, #532]	; (800cf20 <_strtod_l+0x5a0>)
 800cd0a:	f002 fda9 	bl	800f860 <nan>
 800cd0e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800cd12:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800cd16:	e675      	b.n	800ca04 <_strtod_l+0x84>
 800cd18:	9b07      	ldr	r3, [sp, #28]
 800cd1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cd1c:	1af3      	subs	r3, r6, r3
 800cd1e:	2f00      	cmp	r7, #0
 800cd20:	bf08      	it	eq
 800cd22:	462f      	moveq	r7, r5
 800cd24:	2d10      	cmp	r5, #16
 800cd26:	9308      	str	r3, [sp, #32]
 800cd28:	46a8      	mov	r8, r5
 800cd2a:	bfa8      	it	ge
 800cd2c:	f04f 0810 	movge.w	r8, #16
 800cd30:	f7f3 fbe8 	bl	8000504 <__aeabi_ui2d>
 800cd34:	2d09      	cmp	r5, #9
 800cd36:	4682      	mov	sl, r0
 800cd38:	468b      	mov	fp, r1
 800cd3a:	dd13      	ble.n	800cd64 <_strtod_l+0x3e4>
 800cd3c:	4b79      	ldr	r3, [pc, #484]	; (800cf24 <_strtod_l+0x5a4>)
 800cd3e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cd42:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cd46:	f7f3 fc57 	bl	80005f8 <__aeabi_dmul>
 800cd4a:	4682      	mov	sl, r0
 800cd4c:	4648      	mov	r0, r9
 800cd4e:	468b      	mov	fp, r1
 800cd50:	f7f3 fbd8 	bl	8000504 <__aeabi_ui2d>
 800cd54:	4602      	mov	r2, r0
 800cd56:	460b      	mov	r3, r1
 800cd58:	4650      	mov	r0, sl
 800cd5a:	4659      	mov	r1, fp
 800cd5c:	f7f3 fa96 	bl	800028c <__adddf3>
 800cd60:	4682      	mov	sl, r0
 800cd62:	468b      	mov	fp, r1
 800cd64:	2d0f      	cmp	r5, #15
 800cd66:	dc38      	bgt.n	800cdda <_strtod_l+0x45a>
 800cd68:	9b08      	ldr	r3, [sp, #32]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	f43f ae4a 	beq.w	800ca04 <_strtod_l+0x84>
 800cd70:	dd24      	ble.n	800cdbc <_strtod_l+0x43c>
 800cd72:	2b16      	cmp	r3, #22
 800cd74:	dc0b      	bgt.n	800cd8e <_strtod_l+0x40e>
 800cd76:	4d6b      	ldr	r5, [pc, #428]	; (800cf24 <_strtod_l+0x5a4>)
 800cd78:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800cd7c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cd80:	4652      	mov	r2, sl
 800cd82:	465b      	mov	r3, fp
 800cd84:	f7f3 fc38 	bl	80005f8 <__aeabi_dmul>
 800cd88:	4682      	mov	sl, r0
 800cd8a:	468b      	mov	fp, r1
 800cd8c:	e63a      	b.n	800ca04 <_strtod_l+0x84>
 800cd8e:	9a08      	ldr	r2, [sp, #32]
 800cd90:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cd94:	4293      	cmp	r3, r2
 800cd96:	db20      	blt.n	800cdda <_strtod_l+0x45a>
 800cd98:	4c62      	ldr	r4, [pc, #392]	; (800cf24 <_strtod_l+0x5a4>)
 800cd9a:	f1c5 050f 	rsb	r5, r5, #15
 800cd9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cda2:	4652      	mov	r2, sl
 800cda4:	465b      	mov	r3, fp
 800cda6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdaa:	f7f3 fc25 	bl	80005f8 <__aeabi_dmul>
 800cdae:	9b08      	ldr	r3, [sp, #32]
 800cdb0:	1b5d      	subs	r5, r3, r5
 800cdb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cdb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cdba:	e7e3      	b.n	800cd84 <_strtod_l+0x404>
 800cdbc:	9b08      	ldr	r3, [sp, #32]
 800cdbe:	3316      	adds	r3, #22
 800cdc0:	db0b      	blt.n	800cdda <_strtod_l+0x45a>
 800cdc2:	9b07      	ldr	r3, [sp, #28]
 800cdc4:	4a57      	ldr	r2, [pc, #348]	; (800cf24 <_strtod_l+0x5a4>)
 800cdc6:	1b9e      	subs	r6, r3, r6
 800cdc8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800cdcc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cdd0:	4650      	mov	r0, sl
 800cdd2:	4659      	mov	r1, fp
 800cdd4:	f7f3 fd3a 	bl	800084c <__aeabi_ddiv>
 800cdd8:	e7d6      	b.n	800cd88 <_strtod_l+0x408>
 800cdda:	9b08      	ldr	r3, [sp, #32]
 800cddc:	eba5 0808 	sub.w	r8, r5, r8
 800cde0:	4498      	add	r8, r3
 800cde2:	f1b8 0f00 	cmp.w	r8, #0
 800cde6:	dd71      	ble.n	800cecc <_strtod_l+0x54c>
 800cde8:	f018 030f 	ands.w	r3, r8, #15
 800cdec:	d00a      	beq.n	800ce04 <_strtod_l+0x484>
 800cdee:	494d      	ldr	r1, [pc, #308]	; (800cf24 <_strtod_l+0x5a4>)
 800cdf0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cdf4:	4652      	mov	r2, sl
 800cdf6:	465b      	mov	r3, fp
 800cdf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdfc:	f7f3 fbfc 	bl	80005f8 <__aeabi_dmul>
 800ce00:	4682      	mov	sl, r0
 800ce02:	468b      	mov	fp, r1
 800ce04:	f038 080f 	bics.w	r8, r8, #15
 800ce08:	d04d      	beq.n	800cea6 <_strtod_l+0x526>
 800ce0a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ce0e:	dd22      	ble.n	800ce56 <_strtod_l+0x4d6>
 800ce10:	2500      	movs	r5, #0
 800ce12:	462e      	mov	r6, r5
 800ce14:	9509      	str	r5, [sp, #36]	; 0x24
 800ce16:	9507      	str	r5, [sp, #28]
 800ce18:	2322      	movs	r3, #34	; 0x22
 800ce1a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800cf2c <_strtod_l+0x5ac>
 800ce1e:	6023      	str	r3, [r4, #0]
 800ce20:	f04f 0a00 	mov.w	sl, #0
 800ce24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	f43f adec 	beq.w	800ca04 <_strtod_l+0x84>
 800ce2c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f001 fe84 	bl	800eb3c <_Bfree>
 800ce34:	9907      	ldr	r1, [sp, #28]
 800ce36:	4620      	mov	r0, r4
 800ce38:	f001 fe80 	bl	800eb3c <_Bfree>
 800ce3c:	4631      	mov	r1, r6
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f001 fe7c 	bl	800eb3c <_Bfree>
 800ce44:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ce46:	4620      	mov	r0, r4
 800ce48:	f001 fe78 	bl	800eb3c <_Bfree>
 800ce4c:	4629      	mov	r1, r5
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f001 fe74 	bl	800eb3c <_Bfree>
 800ce54:	e5d6      	b.n	800ca04 <_strtod_l+0x84>
 800ce56:	2300      	movs	r3, #0
 800ce58:	ea4f 1828 	mov.w	r8, r8, asr #4
 800ce5c:	4650      	mov	r0, sl
 800ce5e:	4659      	mov	r1, fp
 800ce60:	4699      	mov	r9, r3
 800ce62:	f1b8 0f01 	cmp.w	r8, #1
 800ce66:	dc21      	bgt.n	800ceac <_strtod_l+0x52c>
 800ce68:	b10b      	cbz	r3, 800ce6e <_strtod_l+0x4ee>
 800ce6a:	4682      	mov	sl, r0
 800ce6c:	468b      	mov	fp, r1
 800ce6e:	4b2e      	ldr	r3, [pc, #184]	; (800cf28 <_strtod_l+0x5a8>)
 800ce70:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800ce74:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800ce78:	4652      	mov	r2, sl
 800ce7a:	465b      	mov	r3, fp
 800ce7c:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ce80:	f7f3 fbba 	bl	80005f8 <__aeabi_dmul>
 800ce84:	4b29      	ldr	r3, [pc, #164]	; (800cf2c <_strtod_l+0x5ac>)
 800ce86:	460a      	mov	r2, r1
 800ce88:	400b      	ands	r3, r1
 800ce8a:	4929      	ldr	r1, [pc, #164]	; (800cf30 <_strtod_l+0x5b0>)
 800ce8c:	428b      	cmp	r3, r1
 800ce8e:	4682      	mov	sl, r0
 800ce90:	d8be      	bhi.n	800ce10 <_strtod_l+0x490>
 800ce92:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ce96:	428b      	cmp	r3, r1
 800ce98:	bf86      	itte	hi
 800ce9a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800cf34 <_strtod_l+0x5b4>
 800ce9e:	f04f 3aff 	movhi.w	sl, #4294967295
 800cea2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cea6:	2300      	movs	r3, #0
 800cea8:	9304      	str	r3, [sp, #16]
 800ceaa:	e081      	b.n	800cfb0 <_strtod_l+0x630>
 800ceac:	f018 0f01 	tst.w	r8, #1
 800ceb0:	d007      	beq.n	800cec2 <_strtod_l+0x542>
 800ceb2:	4b1d      	ldr	r3, [pc, #116]	; (800cf28 <_strtod_l+0x5a8>)
 800ceb4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ceb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebc:	f7f3 fb9c 	bl	80005f8 <__aeabi_dmul>
 800cec0:	2301      	movs	r3, #1
 800cec2:	f109 0901 	add.w	r9, r9, #1
 800cec6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ceca:	e7ca      	b.n	800ce62 <_strtod_l+0x4e2>
 800cecc:	d0eb      	beq.n	800cea6 <_strtod_l+0x526>
 800cece:	f1c8 0800 	rsb	r8, r8, #0
 800ced2:	f018 020f 	ands.w	r2, r8, #15
 800ced6:	d00a      	beq.n	800ceee <_strtod_l+0x56e>
 800ced8:	4b12      	ldr	r3, [pc, #72]	; (800cf24 <_strtod_l+0x5a4>)
 800ceda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cede:	4650      	mov	r0, sl
 800cee0:	4659      	mov	r1, fp
 800cee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee6:	f7f3 fcb1 	bl	800084c <__aeabi_ddiv>
 800ceea:	4682      	mov	sl, r0
 800ceec:	468b      	mov	fp, r1
 800ceee:	ea5f 1828 	movs.w	r8, r8, asr #4
 800cef2:	d0d8      	beq.n	800cea6 <_strtod_l+0x526>
 800cef4:	f1b8 0f1f 	cmp.w	r8, #31
 800cef8:	dd1e      	ble.n	800cf38 <_strtod_l+0x5b8>
 800cefa:	2500      	movs	r5, #0
 800cefc:	462e      	mov	r6, r5
 800cefe:	9509      	str	r5, [sp, #36]	; 0x24
 800cf00:	9507      	str	r5, [sp, #28]
 800cf02:	2322      	movs	r3, #34	; 0x22
 800cf04:	f04f 0a00 	mov.w	sl, #0
 800cf08:	f04f 0b00 	mov.w	fp, #0
 800cf0c:	6023      	str	r3, [r4, #0]
 800cf0e:	e789      	b.n	800ce24 <_strtod_l+0x4a4>
 800cf10:	08014e71 	.word	0x08014e71
 800cf14:	08014eb4 	.word	0x08014eb4
 800cf18:	08014e69 	.word	0x08014e69
 800cf1c:	08014ff4 	.word	0x08014ff4
 800cf20:	080152b0 	.word	0x080152b0
 800cf24:	08015190 	.word	0x08015190
 800cf28:	08015168 	.word	0x08015168
 800cf2c:	7ff00000 	.word	0x7ff00000
 800cf30:	7ca00000 	.word	0x7ca00000
 800cf34:	7fefffff 	.word	0x7fefffff
 800cf38:	f018 0310 	ands.w	r3, r8, #16
 800cf3c:	bf18      	it	ne
 800cf3e:	236a      	movne	r3, #106	; 0x6a
 800cf40:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800d2f8 <_strtod_l+0x978>
 800cf44:	9304      	str	r3, [sp, #16]
 800cf46:	4650      	mov	r0, sl
 800cf48:	4659      	mov	r1, fp
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	f018 0f01 	tst.w	r8, #1
 800cf50:	d004      	beq.n	800cf5c <_strtod_l+0x5dc>
 800cf52:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cf56:	f7f3 fb4f 	bl	80005f8 <__aeabi_dmul>
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cf60:	f109 0908 	add.w	r9, r9, #8
 800cf64:	d1f2      	bne.n	800cf4c <_strtod_l+0x5cc>
 800cf66:	b10b      	cbz	r3, 800cf6c <_strtod_l+0x5ec>
 800cf68:	4682      	mov	sl, r0
 800cf6a:	468b      	mov	fp, r1
 800cf6c:	9b04      	ldr	r3, [sp, #16]
 800cf6e:	b1bb      	cbz	r3, 800cfa0 <_strtod_l+0x620>
 800cf70:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800cf74:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	4659      	mov	r1, fp
 800cf7c:	dd10      	ble.n	800cfa0 <_strtod_l+0x620>
 800cf7e:	2b1f      	cmp	r3, #31
 800cf80:	f340 8128 	ble.w	800d1d4 <_strtod_l+0x854>
 800cf84:	2b34      	cmp	r3, #52	; 0x34
 800cf86:	bfde      	ittt	le
 800cf88:	3b20      	suble	r3, #32
 800cf8a:	f04f 32ff 	movle.w	r2, #4294967295
 800cf8e:	fa02 f303 	lslle.w	r3, r2, r3
 800cf92:	f04f 0a00 	mov.w	sl, #0
 800cf96:	bfcc      	ite	gt
 800cf98:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cf9c:	ea03 0b01 	andle.w	fp, r3, r1
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	4650      	mov	r0, sl
 800cfa6:	4659      	mov	r1, fp
 800cfa8:	f7f3 fd8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800cfac:	2800      	cmp	r0, #0
 800cfae:	d1a4      	bne.n	800cefa <_strtod_l+0x57a>
 800cfb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfb2:	9300      	str	r3, [sp, #0]
 800cfb4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cfb6:	462b      	mov	r3, r5
 800cfb8:	463a      	mov	r2, r7
 800cfba:	4620      	mov	r0, r4
 800cfbc:	f001 fe2a 	bl	800ec14 <__s2b>
 800cfc0:	9009      	str	r0, [sp, #36]	; 0x24
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	f43f af24 	beq.w	800ce10 <_strtod_l+0x490>
 800cfc8:	9b07      	ldr	r3, [sp, #28]
 800cfca:	1b9e      	subs	r6, r3, r6
 800cfcc:	9b08      	ldr	r3, [sp, #32]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	bfb4      	ite	lt
 800cfd2:	4633      	movlt	r3, r6
 800cfd4:	2300      	movge	r3, #0
 800cfd6:	9310      	str	r3, [sp, #64]	; 0x40
 800cfd8:	9b08      	ldr	r3, [sp, #32]
 800cfda:	2500      	movs	r5, #0
 800cfdc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cfe0:	9318      	str	r3, [sp, #96]	; 0x60
 800cfe2:	462e      	mov	r6, r5
 800cfe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfe6:	4620      	mov	r0, r4
 800cfe8:	6859      	ldr	r1, [r3, #4]
 800cfea:	f001 fd67 	bl	800eabc <_Balloc>
 800cfee:	9007      	str	r0, [sp, #28]
 800cff0:	2800      	cmp	r0, #0
 800cff2:	f43f af11 	beq.w	800ce18 <_strtod_l+0x498>
 800cff6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cff8:	691a      	ldr	r2, [r3, #16]
 800cffa:	3202      	adds	r2, #2
 800cffc:	f103 010c 	add.w	r1, r3, #12
 800d000:	0092      	lsls	r2, r2, #2
 800d002:	300c      	adds	r0, #12
 800d004:	f7fe fdea 	bl	800bbdc <memcpy>
 800d008:	ec4b ab10 	vmov	d0, sl, fp
 800d00c:	aa20      	add	r2, sp, #128	; 0x80
 800d00e:	a91f      	add	r1, sp, #124	; 0x7c
 800d010:	4620      	mov	r0, r4
 800d012:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800d016:	f002 f939 	bl	800f28c <__d2b>
 800d01a:	901e      	str	r0, [sp, #120]	; 0x78
 800d01c:	2800      	cmp	r0, #0
 800d01e:	f43f aefb 	beq.w	800ce18 <_strtod_l+0x498>
 800d022:	2101      	movs	r1, #1
 800d024:	4620      	mov	r0, r4
 800d026:	f001 fe8f 	bl	800ed48 <__i2b>
 800d02a:	4606      	mov	r6, r0
 800d02c:	2800      	cmp	r0, #0
 800d02e:	f43f aef3 	beq.w	800ce18 <_strtod_l+0x498>
 800d032:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800d034:	9904      	ldr	r1, [sp, #16]
 800d036:	2b00      	cmp	r3, #0
 800d038:	bfab      	itete	ge
 800d03a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800d03c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800d03e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800d040:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800d044:	bfac      	ite	ge
 800d046:	eb03 0902 	addge.w	r9, r3, r2
 800d04a:	1ad7      	sublt	r7, r2, r3
 800d04c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d04e:	eba3 0801 	sub.w	r8, r3, r1
 800d052:	4490      	add	r8, r2
 800d054:	4ba3      	ldr	r3, [pc, #652]	; (800d2e4 <_strtod_l+0x964>)
 800d056:	f108 38ff 	add.w	r8, r8, #4294967295
 800d05a:	4598      	cmp	r8, r3
 800d05c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d060:	f280 80cc 	bge.w	800d1fc <_strtod_l+0x87c>
 800d064:	eba3 0308 	sub.w	r3, r3, r8
 800d068:	2b1f      	cmp	r3, #31
 800d06a:	eba2 0203 	sub.w	r2, r2, r3
 800d06e:	f04f 0101 	mov.w	r1, #1
 800d072:	f300 80b6 	bgt.w	800d1e2 <_strtod_l+0x862>
 800d076:	fa01 f303 	lsl.w	r3, r1, r3
 800d07a:	9311      	str	r3, [sp, #68]	; 0x44
 800d07c:	2300      	movs	r3, #0
 800d07e:	930c      	str	r3, [sp, #48]	; 0x30
 800d080:	eb09 0802 	add.w	r8, r9, r2
 800d084:	9b04      	ldr	r3, [sp, #16]
 800d086:	45c1      	cmp	r9, r8
 800d088:	4417      	add	r7, r2
 800d08a:	441f      	add	r7, r3
 800d08c:	464b      	mov	r3, r9
 800d08e:	bfa8      	it	ge
 800d090:	4643      	movge	r3, r8
 800d092:	42bb      	cmp	r3, r7
 800d094:	bfa8      	it	ge
 800d096:	463b      	movge	r3, r7
 800d098:	2b00      	cmp	r3, #0
 800d09a:	bfc2      	ittt	gt
 800d09c:	eba8 0803 	subgt.w	r8, r8, r3
 800d0a0:	1aff      	subgt	r7, r7, r3
 800d0a2:	eba9 0903 	subgt.w	r9, r9, r3
 800d0a6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	dd17      	ble.n	800d0dc <_strtod_l+0x75c>
 800d0ac:	4631      	mov	r1, r6
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	4620      	mov	r0, r4
 800d0b2:	f001 ff05 	bl	800eec0 <__pow5mult>
 800d0b6:	4606      	mov	r6, r0
 800d0b8:	2800      	cmp	r0, #0
 800d0ba:	f43f aead 	beq.w	800ce18 <_strtod_l+0x498>
 800d0be:	4601      	mov	r1, r0
 800d0c0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	f001 fe56 	bl	800ed74 <__multiply>
 800d0c8:	900f      	str	r0, [sp, #60]	; 0x3c
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	f43f aea4 	beq.w	800ce18 <_strtod_l+0x498>
 800d0d0:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d0d2:	4620      	mov	r0, r4
 800d0d4:	f001 fd32 	bl	800eb3c <_Bfree>
 800d0d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0da:	931e      	str	r3, [sp, #120]	; 0x78
 800d0dc:	f1b8 0f00 	cmp.w	r8, #0
 800d0e0:	f300 8091 	bgt.w	800d206 <_strtod_l+0x886>
 800d0e4:	9b08      	ldr	r3, [sp, #32]
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	dd08      	ble.n	800d0fc <_strtod_l+0x77c>
 800d0ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d0ec:	9907      	ldr	r1, [sp, #28]
 800d0ee:	4620      	mov	r0, r4
 800d0f0:	f001 fee6 	bl	800eec0 <__pow5mult>
 800d0f4:	9007      	str	r0, [sp, #28]
 800d0f6:	2800      	cmp	r0, #0
 800d0f8:	f43f ae8e 	beq.w	800ce18 <_strtod_l+0x498>
 800d0fc:	2f00      	cmp	r7, #0
 800d0fe:	dd08      	ble.n	800d112 <_strtod_l+0x792>
 800d100:	9907      	ldr	r1, [sp, #28]
 800d102:	463a      	mov	r2, r7
 800d104:	4620      	mov	r0, r4
 800d106:	f001 ff35 	bl	800ef74 <__lshift>
 800d10a:	9007      	str	r0, [sp, #28]
 800d10c:	2800      	cmp	r0, #0
 800d10e:	f43f ae83 	beq.w	800ce18 <_strtod_l+0x498>
 800d112:	f1b9 0f00 	cmp.w	r9, #0
 800d116:	dd08      	ble.n	800d12a <_strtod_l+0x7aa>
 800d118:	4631      	mov	r1, r6
 800d11a:	464a      	mov	r2, r9
 800d11c:	4620      	mov	r0, r4
 800d11e:	f001 ff29 	bl	800ef74 <__lshift>
 800d122:	4606      	mov	r6, r0
 800d124:	2800      	cmp	r0, #0
 800d126:	f43f ae77 	beq.w	800ce18 <_strtod_l+0x498>
 800d12a:	9a07      	ldr	r2, [sp, #28]
 800d12c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d12e:	4620      	mov	r0, r4
 800d130:	f001 ffa8 	bl	800f084 <__mdiff>
 800d134:	4605      	mov	r5, r0
 800d136:	2800      	cmp	r0, #0
 800d138:	f43f ae6e 	beq.w	800ce18 <_strtod_l+0x498>
 800d13c:	68c3      	ldr	r3, [r0, #12]
 800d13e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d140:	2300      	movs	r3, #0
 800d142:	60c3      	str	r3, [r0, #12]
 800d144:	4631      	mov	r1, r6
 800d146:	f001 ff81 	bl	800f04c <__mcmp>
 800d14a:	2800      	cmp	r0, #0
 800d14c:	da65      	bge.n	800d21a <_strtod_l+0x89a>
 800d14e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d150:	ea53 030a 	orrs.w	r3, r3, sl
 800d154:	f040 8087 	bne.w	800d266 <_strtod_l+0x8e6>
 800d158:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f040 8082 	bne.w	800d266 <_strtod_l+0x8e6>
 800d162:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d166:	0d1b      	lsrs	r3, r3, #20
 800d168:	051b      	lsls	r3, r3, #20
 800d16a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d16e:	d97a      	bls.n	800d266 <_strtod_l+0x8e6>
 800d170:	696b      	ldr	r3, [r5, #20]
 800d172:	b913      	cbnz	r3, 800d17a <_strtod_l+0x7fa>
 800d174:	692b      	ldr	r3, [r5, #16]
 800d176:	2b01      	cmp	r3, #1
 800d178:	dd75      	ble.n	800d266 <_strtod_l+0x8e6>
 800d17a:	4629      	mov	r1, r5
 800d17c:	2201      	movs	r2, #1
 800d17e:	4620      	mov	r0, r4
 800d180:	f001 fef8 	bl	800ef74 <__lshift>
 800d184:	4631      	mov	r1, r6
 800d186:	4605      	mov	r5, r0
 800d188:	f001 ff60 	bl	800f04c <__mcmp>
 800d18c:	2800      	cmp	r0, #0
 800d18e:	dd6a      	ble.n	800d266 <_strtod_l+0x8e6>
 800d190:	9904      	ldr	r1, [sp, #16]
 800d192:	4a55      	ldr	r2, [pc, #340]	; (800d2e8 <_strtod_l+0x968>)
 800d194:	465b      	mov	r3, fp
 800d196:	2900      	cmp	r1, #0
 800d198:	f000 8085 	beq.w	800d2a6 <_strtod_l+0x926>
 800d19c:	ea02 010b 	and.w	r1, r2, fp
 800d1a0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d1a4:	dc7f      	bgt.n	800d2a6 <_strtod_l+0x926>
 800d1a6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d1aa:	f77f aeaa 	ble.w	800cf02 <_strtod_l+0x582>
 800d1ae:	4a4f      	ldr	r2, [pc, #316]	; (800d2ec <_strtod_l+0x96c>)
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800d1b6:	4650      	mov	r0, sl
 800d1b8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800d1bc:	4659      	mov	r1, fp
 800d1be:	f7f3 fa1b 	bl	80005f8 <__aeabi_dmul>
 800d1c2:	460b      	mov	r3, r1
 800d1c4:	4303      	orrs	r3, r0
 800d1c6:	bf08      	it	eq
 800d1c8:	2322      	moveq	r3, #34	; 0x22
 800d1ca:	4682      	mov	sl, r0
 800d1cc:	468b      	mov	fp, r1
 800d1ce:	bf08      	it	eq
 800d1d0:	6023      	streq	r3, [r4, #0]
 800d1d2:	e62b      	b.n	800ce2c <_strtod_l+0x4ac>
 800d1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800d1d8:	fa02 f303 	lsl.w	r3, r2, r3
 800d1dc:	ea03 0a0a 	and.w	sl, r3, sl
 800d1e0:	e6de      	b.n	800cfa0 <_strtod_l+0x620>
 800d1e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d1e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d1ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d1ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d1f2:	fa01 f308 	lsl.w	r3, r1, r8
 800d1f6:	930c      	str	r3, [sp, #48]	; 0x30
 800d1f8:	9111      	str	r1, [sp, #68]	; 0x44
 800d1fa:	e741      	b.n	800d080 <_strtod_l+0x700>
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	930c      	str	r3, [sp, #48]	; 0x30
 800d200:	2301      	movs	r3, #1
 800d202:	9311      	str	r3, [sp, #68]	; 0x44
 800d204:	e73c      	b.n	800d080 <_strtod_l+0x700>
 800d206:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d208:	4642      	mov	r2, r8
 800d20a:	4620      	mov	r0, r4
 800d20c:	f001 feb2 	bl	800ef74 <__lshift>
 800d210:	901e      	str	r0, [sp, #120]	; 0x78
 800d212:	2800      	cmp	r0, #0
 800d214:	f47f af66 	bne.w	800d0e4 <_strtod_l+0x764>
 800d218:	e5fe      	b.n	800ce18 <_strtod_l+0x498>
 800d21a:	465f      	mov	r7, fp
 800d21c:	d16e      	bne.n	800d2fc <_strtod_l+0x97c>
 800d21e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d220:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d224:	b342      	cbz	r2, 800d278 <_strtod_l+0x8f8>
 800d226:	4a32      	ldr	r2, [pc, #200]	; (800d2f0 <_strtod_l+0x970>)
 800d228:	4293      	cmp	r3, r2
 800d22a:	d128      	bne.n	800d27e <_strtod_l+0x8fe>
 800d22c:	9b04      	ldr	r3, [sp, #16]
 800d22e:	4650      	mov	r0, sl
 800d230:	b1eb      	cbz	r3, 800d26e <_strtod_l+0x8ee>
 800d232:	4a2d      	ldr	r2, [pc, #180]	; (800d2e8 <_strtod_l+0x968>)
 800d234:	403a      	ands	r2, r7
 800d236:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d23a:	f04f 31ff 	mov.w	r1, #4294967295
 800d23e:	d819      	bhi.n	800d274 <_strtod_l+0x8f4>
 800d240:	0d12      	lsrs	r2, r2, #20
 800d242:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d246:	fa01 f303 	lsl.w	r3, r1, r3
 800d24a:	4298      	cmp	r0, r3
 800d24c:	d117      	bne.n	800d27e <_strtod_l+0x8fe>
 800d24e:	4b29      	ldr	r3, [pc, #164]	; (800d2f4 <_strtod_l+0x974>)
 800d250:	429f      	cmp	r7, r3
 800d252:	d102      	bne.n	800d25a <_strtod_l+0x8da>
 800d254:	3001      	adds	r0, #1
 800d256:	f43f addf 	beq.w	800ce18 <_strtod_l+0x498>
 800d25a:	4b23      	ldr	r3, [pc, #140]	; (800d2e8 <_strtod_l+0x968>)
 800d25c:	403b      	ands	r3, r7
 800d25e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d262:	f04f 0a00 	mov.w	sl, #0
 800d266:	9b04      	ldr	r3, [sp, #16]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d1a0      	bne.n	800d1ae <_strtod_l+0x82e>
 800d26c:	e5de      	b.n	800ce2c <_strtod_l+0x4ac>
 800d26e:	f04f 33ff 	mov.w	r3, #4294967295
 800d272:	e7ea      	b.n	800d24a <_strtod_l+0x8ca>
 800d274:	460b      	mov	r3, r1
 800d276:	e7e8      	b.n	800d24a <_strtod_l+0x8ca>
 800d278:	ea53 030a 	orrs.w	r3, r3, sl
 800d27c:	d088      	beq.n	800d190 <_strtod_l+0x810>
 800d27e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d280:	b1db      	cbz	r3, 800d2ba <_strtod_l+0x93a>
 800d282:	423b      	tst	r3, r7
 800d284:	d0ef      	beq.n	800d266 <_strtod_l+0x8e6>
 800d286:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d288:	9a04      	ldr	r2, [sp, #16]
 800d28a:	4650      	mov	r0, sl
 800d28c:	4659      	mov	r1, fp
 800d28e:	b1c3      	cbz	r3, 800d2c2 <_strtod_l+0x942>
 800d290:	f7ff fb5a 	bl	800c948 <sulp>
 800d294:	4602      	mov	r2, r0
 800d296:	460b      	mov	r3, r1
 800d298:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d29c:	f7f2 fff6 	bl	800028c <__adddf3>
 800d2a0:	4682      	mov	sl, r0
 800d2a2:	468b      	mov	fp, r1
 800d2a4:	e7df      	b.n	800d266 <_strtod_l+0x8e6>
 800d2a6:	4013      	ands	r3, r2
 800d2a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d2ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d2b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d2b4:	f04f 3aff 	mov.w	sl, #4294967295
 800d2b8:	e7d5      	b.n	800d266 <_strtod_l+0x8e6>
 800d2ba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d2bc:	ea13 0f0a 	tst.w	r3, sl
 800d2c0:	e7e0      	b.n	800d284 <_strtod_l+0x904>
 800d2c2:	f7ff fb41 	bl	800c948 <sulp>
 800d2c6:	4602      	mov	r2, r0
 800d2c8:	460b      	mov	r3, r1
 800d2ca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d2ce:	f7f2 ffdb 	bl	8000288 <__aeabi_dsub>
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	2300      	movs	r3, #0
 800d2d6:	4682      	mov	sl, r0
 800d2d8:	468b      	mov	fp, r1
 800d2da:	f7f3 fbf5 	bl	8000ac8 <__aeabi_dcmpeq>
 800d2de:	2800      	cmp	r0, #0
 800d2e0:	d0c1      	beq.n	800d266 <_strtod_l+0x8e6>
 800d2e2:	e60e      	b.n	800cf02 <_strtod_l+0x582>
 800d2e4:	fffffc02 	.word	0xfffffc02
 800d2e8:	7ff00000 	.word	0x7ff00000
 800d2ec:	39500000 	.word	0x39500000
 800d2f0:	000fffff 	.word	0x000fffff
 800d2f4:	7fefffff 	.word	0x7fefffff
 800d2f8:	08014ec8 	.word	0x08014ec8
 800d2fc:	4631      	mov	r1, r6
 800d2fe:	4628      	mov	r0, r5
 800d300:	f002 f820 	bl	800f344 <__ratio>
 800d304:	ec59 8b10 	vmov	r8, r9, d0
 800d308:	ee10 0a10 	vmov	r0, s0
 800d30c:	2200      	movs	r2, #0
 800d30e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d312:	4649      	mov	r1, r9
 800d314:	f7f3 fbec 	bl	8000af0 <__aeabi_dcmple>
 800d318:	2800      	cmp	r0, #0
 800d31a:	d07c      	beq.n	800d416 <_strtod_l+0xa96>
 800d31c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d04c      	beq.n	800d3bc <_strtod_l+0xa3c>
 800d322:	4b95      	ldr	r3, [pc, #596]	; (800d578 <_strtod_l+0xbf8>)
 800d324:	2200      	movs	r2, #0
 800d326:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d32a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d578 <_strtod_l+0xbf8>
 800d32e:	f04f 0800 	mov.w	r8, #0
 800d332:	4b92      	ldr	r3, [pc, #584]	; (800d57c <_strtod_l+0xbfc>)
 800d334:	403b      	ands	r3, r7
 800d336:	9311      	str	r3, [sp, #68]	; 0x44
 800d338:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d33a:	4b91      	ldr	r3, [pc, #580]	; (800d580 <_strtod_l+0xc00>)
 800d33c:	429a      	cmp	r2, r3
 800d33e:	f040 80b2 	bne.w	800d4a6 <_strtod_l+0xb26>
 800d342:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d34a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d34e:	ec4b ab10 	vmov	d0, sl, fp
 800d352:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d356:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d35a:	f001 ff1b 	bl	800f194 <__ulp>
 800d35e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d362:	ec53 2b10 	vmov	r2, r3, d0
 800d366:	f7f3 f947 	bl	80005f8 <__aeabi_dmul>
 800d36a:	4652      	mov	r2, sl
 800d36c:	465b      	mov	r3, fp
 800d36e:	f7f2 ff8d 	bl	800028c <__adddf3>
 800d372:	460b      	mov	r3, r1
 800d374:	4981      	ldr	r1, [pc, #516]	; (800d57c <_strtod_l+0xbfc>)
 800d376:	4a83      	ldr	r2, [pc, #524]	; (800d584 <_strtod_l+0xc04>)
 800d378:	4019      	ands	r1, r3
 800d37a:	4291      	cmp	r1, r2
 800d37c:	4682      	mov	sl, r0
 800d37e:	d95e      	bls.n	800d43e <_strtod_l+0xabe>
 800d380:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d382:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d386:	4293      	cmp	r3, r2
 800d388:	d103      	bne.n	800d392 <_strtod_l+0xa12>
 800d38a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d38c:	3301      	adds	r3, #1
 800d38e:	f43f ad43 	beq.w	800ce18 <_strtod_l+0x498>
 800d392:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800d590 <_strtod_l+0xc10>
 800d396:	f04f 3aff 	mov.w	sl, #4294967295
 800d39a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d39c:	4620      	mov	r0, r4
 800d39e:	f001 fbcd 	bl	800eb3c <_Bfree>
 800d3a2:	9907      	ldr	r1, [sp, #28]
 800d3a4:	4620      	mov	r0, r4
 800d3a6:	f001 fbc9 	bl	800eb3c <_Bfree>
 800d3aa:	4631      	mov	r1, r6
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f001 fbc5 	bl	800eb3c <_Bfree>
 800d3b2:	4629      	mov	r1, r5
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	f001 fbc1 	bl	800eb3c <_Bfree>
 800d3ba:	e613      	b.n	800cfe4 <_strtod_l+0x664>
 800d3bc:	f1ba 0f00 	cmp.w	sl, #0
 800d3c0:	d11b      	bne.n	800d3fa <_strtod_l+0xa7a>
 800d3c2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d3c6:	b9f3      	cbnz	r3, 800d406 <_strtod_l+0xa86>
 800d3c8:	4b6b      	ldr	r3, [pc, #428]	; (800d578 <_strtod_l+0xbf8>)
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	4640      	mov	r0, r8
 800d3ce:	4649      	mov	r1, r9
 800d3d0:	f7f3 fb84 	bl	8000adc <__aeabi_dcmplt>
 800d3d4:	b9d0      	cbnz	r0, 800d40c <_strtod_l+0xa8c>
 800d3d6:	4640      	mov	r0, r8
 800d3d8:	4649      	mov	r1, r9
 800d3da:	4b6b      	ldr	r3, [pc, #428]	; (800d588 <_strtod_l+0xc08>)
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f7f3 f90b 	bl	80005f8 <__aeabi_dmul>
 800d3e2:	4680      	mov	r8, r0
 800d3e4:	4689      	mov	r9, r1
 800d3e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d3ea:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800d3ee:	931b      	str	r3, [sp, #108]	; 0x6c
 800d3f0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800d3f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d3f8:	e79b      	b.n	800d332 <_strtod_l+0x9b2>
 800d3fa:	f1ba 0f01 	cmp.w	sl, #1
 800d3fe:	d102      	bne.n	800d406 <_strtod_l+0xa86>
 800d400:	2f00      	cmp	r7, #0
 800d402:	f43f ad7e 	beq.w	800cf02 <_strtod_l+0x582>
 800d406:	4b61      	ldr	r3, [pc, #388]	; (800d58c <_strtod_l+0xc0c>)
 800d408:	2200      	movs	r2, #0
 800d40a:	e78c      	b.n	800d326 <_strtod_l+0x9a6>
 800d40c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d588 <_strtod_l+0xc08>
 800d410:	f04f 0800 	mov.w	r8, #0
 800d414:	e7e7      	b.n	800d3e6 <_strtod_l+0xa66>
 800d416:	4b5c      	ldr	r3, [pc, #368]	; (800d588 <_strtod_l+0xc08>)
 800d418:	4640      	mov	r0, r8
 800d41a:	4649      	mov	r1, r9
 800d41c:	2200      	movs	r2, #0
 800d41e:	f7f3 f8eb 	bl	80005f8 <__aeabi_dmul>
 800d422:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d424:	4680      	mov	r8, r0
 800d426:	4689      	mov	r9, r1
 800d428:	b933      	cbnz	r3, 800d438 <_strtod_l+0xab8>
 800d42a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d42e:	9012      	str	r0, [sp, #72]	; 0x48
 800d430:	9313      	str	r3, [sp, #76]	; 0x4c
 800d432:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d436:	e7dd      	b.n	800d3f4 <_strtod_l+0xa74>
 800d438:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800d43c:	e7f9      	b.n	800d432 <_strtod_l+0xab2>
 800d43e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d442:	9b04      	ldr	r3, [sp, #16]
 800d444:	2b00      	cmp	r3, #0
 800d446:	d1a8      	bne.n	800d39a <_strtod_l+0xa1a>
 800d448:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d44c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d44e:	0d1b      	lsrs	r3, r3, #20
 800d450:	051b      	lsls	r3, r3, #20
 800d452:	429a      	cmp	r2, r3
 800d454:	d1a1      	bne.n	800d39a <_strtod_l+0xa1a>
 800d456:	4640      	mov	r0, r8
 800d458:	4649      	mov	r1, r9
 800d45a:	f7f3 fc2d 	bl	8000cb8 <__aeabi_d2lz>
 800d45e:	f7f3 f89d 	bl	800059c <__aeabi_l2d>
 800d462:	4602      	mov	r2, r0
 800d464:	460b      	mov	r3, r1
 800d466:	4640      	mov	r0, r8
 800d468:	4649      	mov	r1, r9
 800d46a:	f7f2 ff0d 	bl	8000288 <__aeabi_dsub>
 800d46e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d470:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d474:	ea43 030a 	orr.w	r3, r3, sl
 800d478:	4313      	orrs	r3, r2
 800d47a:	4680      	mov	r8, r0
 800d47c:	4689      	mov	r9, r1
 800d47e:	d053      	beq.n	800d528 <_strtod_l+0xba8>
 800d480:	a335      	add	r3, pc, #212	; (adr r3, 800d558 <_strtod_l+0xbd8>)
 800d482:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d486:	f7f3 fb29 	bl	8000adc <__aeabi_dcmplt>
 800d48a:	2800      	cmp	r0, #0
 800d48c:	f47f acce 	bne.w	800ce2c <_strtod_l+0x4ac>
 800d490:	a333      	add	r3, pc, #204	; (adr r3, 800d560 <_strtod_l+0xbe0>)
 800d492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d496:	4640      	mov	r0, r8
 800d498:	4649      	mov	r1, r9
 800d49a:	f7f3 fb3d 	bl	8000b18 <__aeabi_dcmpgt>
 800d49e:	2800      	cmp	r0, #0
 800d4a0:	f43f af7b 	beq.w	800d39a <_strtod_l+0xa1a>
 800d4a4:	e4c2      	b.n	800ce2c <_strtod_l+0x4ac>
 800d4a6:	9b04      	ldr	r3, [sp, #16]
 800d4a8:	b333      	cbz	r3, 800d4f8 <_strtod_l+0xb78>
 800d4aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d4ac:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d4b0:	d822      	bhi.n	800d4f8 <_strtod_l+0xb78>
 800d4b2:	a32d      	add	r3, pc, #180	; (adr r3, 800d568 <_strtod_l+0xbe8>)
 800d4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4b8:	4640      	mov	r0, r8
 800d4ba:	4649      	mov	r1, r9
 800d4bc:	f7f3 fb18 	bl	8000af0 <__aeabi_dcmple>
 800d4c0:	b1a0      	cbz	r0, 800d4ec <_strtod_l+0xb6c>
 800d4c2:	4649      	mov	r1, r9
 800d4c4:	4640      	mov	r0, r8
 800d4c6:	f7f3 fb6f 	bl	8000ba8 <__aeabi_d2uiz>
 800d4ca:	2801      	cmp	r0, #1
 800d4cc:	bf38      	it	cc
 800d4ce:	2001      	movcc	r0, #1
 800d4d0:	f7f3 f818 	bl	8000504 <__aeabi_ui2d>
 800d4d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d4d6:	4680      	mov	r8, r0
 800d4d8:	4689      	mov	r9, r1
 800d4da:	bb13      	cbnz	r3, 800d522 <_strtod_l+0xba2>
 800d4dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d4e0:	9014      	str	r0, [sp, #80]	; 0x50
 800d4e2:	9315      	str	r3, [sp, #84]	; 0x54
 800d4e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d4e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d4ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d4ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d4f0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d4f4:	1a9b      	subs	r3, r3, r2
 800d4f6:	930d      	str	r3, [sp, #52]	; 0x34
 800d4f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d4fc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d500:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d504:	f001 fe46 	bl	800f194 <__ulp>
 800d508:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d50c:	ec53 2b10 	vmov	r2, r3, d0
 800d510:	f7f3 f872 	bl	80005f8 <__aeabi_dmul>
 800d514:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d518:	f7f2 feb8 	bl	800028c <__adddf3>
 800d51c:	4682      	mov	sl, r0
 800d51e:	468b      	mov	fp, r1
 800d520:	e78f      	b.n	800d442 <_strtod_l+0xac2>
 800d522:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800d526:	e7dd      	b.n	800d4e4 <_strtod_l+0xb64>
 800d528:	a311      	add	r3, pc, #68	; (adr r3, 800d570 <_strtod_l+0xbf0>)
 800d52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d52e:	f7f3 fad5 	bl	8000adc <__aeabi_dcmplt>
 800d532:	e7b4      	b.n	800d49e <_strtod_l+0xb1e>
 800d534:	2300      	movs	r3, #0
 800d536:	930e      	str	r3, [sp, #56]	; 0x38
 800d538:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d53a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d53c:	6013      	str	r3, [r2, #0]
 800d53e:	f7ff ba65 	b.w	800ca0c <_strtod_l+0x8c>
 800d542:	2b65      	cmp	r3, #101	; 0x65
 800d544:	f43f ab5d 	beq.w	800cc02 <_strtod_l+0x282>
 800d548:	2b45      	cmp	r3, #69	; 0x45
 800d54a:	f43f ab5a 	beq.w	800cc02 <_strtod_l+0x282>
 800d54e:	2201      	movs	r2, #1
 800d550:	f7ff bb92 	b.w	800cc78 <_strtod_l+0x2f8>
 800d554:	f3af 8000 	nop.w
 800d558:	94a03595 	.word	0x94a03595
 800d55c:	3fdfffff 	.word	0x3fdfffff
 800d560:	35afe535 	.word	0x35afe535
 800d564:	3fe00000 	.word	0x3fe00000
 800d568:	ffc00000 	.word	0xffc00000
 800d56c:	41dfffff 	.word	0x41dfffff
 800d570:	94a03595 	.word	0x94a03595
 800d574:	3fcfffff 	.word	0x3fcfffff
 800d578:	3ff00000 	.word	0x3ff00000
 800d57c:	7ff00000 	.word	0x7ff00000
 800d580:	7fe00000 	.word	0x7fe00000
 800d584:	7c9fffff 	.word	0x7c9fffff
 800d588:	3fe00000 	.word	0x3fe00000
 800d58c:	bff00000 	.word	0xbff00000
 800d590:	7fefffff 	.word	0x7fefffff

0800d594 <_strtod_r>:
 800d594:	4b01      	ldr	r3, [pc, #4]	; (800d59c <_strtod_r+0x8>)
 800d596:	f7ff b9f3 	b.w	800c980 <_strtod_l>
 800d59a:	bf00      	nop
 800d59c:	2000058c 	.word	0x2000058c

0800d5a0 <_strtol_l.isra.0>:
 800d5a0:	2b01      	cmp	r3, #1
 800d5a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5a6:	d001      	beq.n	800d5ac <_strtol_l.isra.0+0xc>
 800d5a8:	2b24      	cmp	r3, #36	; 0x24
 800d5aa:	d906      	bls.n	800d5ba <_strtol_l.isra.0+0x1a>
 800d5ac:	f7fe faec 	bl	800bb88 <__errno>
 800d5b0:	2316      	movs	r3, #22
 800d5b2:	6003      	str	r3, [r0, #0]
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ba:	4f3a      	ldr	r7, [pc, #232]	; (800d6a4 <_strtol_l.isra.0+0x104>)
 800d5bc:	468e      	mov	lr, r1
 800d5be:	4676      	mov	r6, lr
 800d5c0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d5c4:	5de5      	ldrb	r5, [r4, r7]
 800d5c6:	f015 0508 	ands.w	r5, r5, #8
 800d5ca:	d1f8      	bne.n	800d5be <_strtol_l.isra.0+0x1e>
 800d5cc:	2c2d      	cmp	r4, #45	; 0x2d
 800d5ce:	d134      	bne.n	800d63a <_strtol_l.isra.0+0x9a>
 800d5d0:	f89e 4000 	ldrb.w	r4, [lr]
 800d5d4:	f04f 0801 	mov.w	r8, #1
 800d5d8:	f106 0e02 	add.w	lr, r6, #2
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d05c      	beq.n	800d69a <_strtol_l.isra.0+0xfa>
 800d5e0:	2b10      	cmp	r3, #16
 800d5e2:	d10c      	bne.n	800d5fe <_strtol_l.isra.0+0x5e>
 800d5e4:	2c30      	cmp	r4, #48	; 0x30
 800d5e6:	d10a      	bne.n	800d5fe <_strtol_l.isra.0+0x5e>
 800d5e8:	f89e 4000 	ldrb.w	r4, [lr]
 800d5ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d5f0:	2c58      	cmp	r4, #88	; 0x58
 800d5f2:	d14d      	bne.n	800d690 <_strtol_l.isra.0+0xf0>
 800d5f4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800d5f8:	2310      	movs	r3, #16
 800d5fa:	f10e 0e02 	add.w	lr, lr, #2
 800d5fe:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800d602:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d606:	2600      	movs	r6, #0
 800d608:	fbbc f9f3 	udiv	r9, ip, r3
 800d60c:	4635      	mov	r5, r6
 800d60e:	fb03 ca19 	mls	sl, r3, r9, ip
 800d612:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d616:	2f09      	cmp	r7, #9
 800d618:	d818      	bhi.n	800d64c <_strtol_l.isra.0+0xac>
 800d61a:	463c      	mov	r4, r7
 800d61c:	42a3      	cmp	r3, r4
 800d61e:	dd24      	ble.n	800d66a <_strtol_l.isra.0+0xca>
 800d620:	2e00      	cmp	r6, #0
 800d622:	db1f      	blt.n	800d664 <_strtol_l.isra.0+0xc4>
 800d624:	45a9      	cmp	r9, r5
 800d626:	d31d      	bcc.n	800d664 <_strtol_l.isra.0+0xc4>
 800d628:	d101      	bne.n	800d62e <_strtol_l.isra.0+0x8e>
 800d62a:	45a2      	cmp	sl, r4
 800d62c:	db1a      	blt.n	800d664 <_strtol_l.isra.0+0xc4>
 800d62e:	fb05 4503 	mla	r5, r5, r3, r4
 800d632:	2601      	movs	r6, #1
 800d634:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d638:	e7eb      	b.n	800d612 <_strtol_l.isra.0+0x72>
 800d63a:	2c2b      	cmp	r4, #43	; 0x2b
 800d63c:	bf08      	it	eq
 800d63e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800d642:	46a8      	mov	r8, r5
 800d644:	bf08      	it	eq
 800d646:	f106 0e02 	addeq.w	lr, r6, #2
 800d64a:	e7c7      	b.n	800d5dc <_strtol_l.isra.0+0x3c>
 800d64c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d650:	2f19      	cmp	r7, #25
 800d652:	d801      	bhi.n	800d658 <_strtol_l.isra.0+0xb8>
 800d654:	3c37      	subs	r4, #55	; 0x37
 800d656:	e7e1      	b.n	800d61c <_strtol_l.isra.0+0x7c>
 800d658:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d65c:	2f19      	cmp	r7, #25
 800d65e:	d804      	bhi.n	800d66a <_strtol_l.isra.0+0xca>
 800d660:	3c57      	subs	r4, #87	; 0x57
 800d662:	e7db      	b.n	800d61c <_strtol_l.isra.0+0x7c>
 800d664:	f04f 36ff 	mov.w	r6, #4294967295
 800d668:	e7e4      	b.n	800d634 <_strtol_l.isra.0+0x94>
 800d66a:	2e00      	cmp	r6, #0
 800d66c:	da05      	bge.n	800d67a <_strtol_l.isra.0+0xda>
 800d66e:	2322      	movs	r3, #34	; 0x22
 800d670:	6003      	str	r3, [r0, #0]
 800d672:	4665      	mov	r5, ip
 800d674:	b942      	cbnz	r2, 800d688 <_strtol_l.isra.0+0xe8>
 800d676:	4628      	mov	r0, r5
 800d678:	e79d      	b.n	800d5b6 <_strtol_l.isra.0+0x16>
 800d67a:	f1b8 0f00 	cmp.w	r8, #0
 800d67e:	d000      	beq.n	800d682 <_strtol_l.isra.0+0xe2>
 800d680:	426d      	negs	r5, r5
 800d682:	2a00      	cmp	r2, #0
 800d684:	d0f7      	beq.n	800d676 <_strtol_l.isra.0+0xd6>
 800d686:	b10e      	cbz	r6, 800d68c <_strtol_l.isra.0+0xec>
 800d688:	f10e 31ff 	add.w	r1, lr, #4294967295
 800d68c:	6011      	str	r1, [r2, #0]
 800d68e:	e7f2      	b.n	800d676 <_strtol_l.isra.0+0xd6>
 800d690:	2430      	movs	r4, #48	; 0x30
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1b3      	bne.n	800d5fe <_strtol_l.isra.0+0x5e>
 800d696:	2308      	movs	r3, #8
 800d698:	e7b1      	b.n	800d5fe <_strtol_l.isra.0+0x5e>
 800d69a:	2c30      	cmp	r4, #48	; 0x30
 800d69c:	d0a4      	beq.n	800d5e8 <_strtol_l.isra.0+0x48>
 800d69e:	230a      	movs	r3, #10
 800d6a0:	e7ad      	b.n	800d5fe <_strtol_l.isra.0+0x5e>
 800d6a2:	bf00      	nop
 800d6a4:	08014ef1 	.word	0x08014ef1

0800d6a8 <_strtol_r>:
 800d6a8:	f7ff bf7a 	b.w	800d5a0 <_strtol_l.isra.0>

0800d6ac <quorem>:
 800d6ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b0:	6903      	ldr	r3, [r0, #16]
 800d6b2:	690c      	ldr	r4, [r1, #16]
 800d6b4:	42a3      	cmp	r3, r4
 800d6b6:	4607      	mov	r7, r0
 800d6b8:	f2c0 8081 	blt.w	800d7be <quorem+0x112>
 800d6bc:	3c01      	subs	r4, #1
 800d6be:	f101 0814 	add.w	r8, r1, #20
 800d6c2:	f100 0514 	add.w	r5, r0, #20
 800d6c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6ca:	9301      	str	r3, [sp, #4]
 800d6cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d6d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6d4:	3301      	adds	r3, #1
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d6dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d6e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800d6e4:	d331      	bcc.n	800d74a <quorem+0x9e>
 800d6e6:	f04f 0e00 	mov.w	lr, #0
 800d6ea:	4640      	mov	r0, r8
 800d6ec:	46ac      	mov	ip, r5
 800d6ee:	46f2      	mov	sl, lr
 800d6f0:	f850 2b04 	ldr.w	r2, [r0], #4
 800d6f4:	b293      	uxth	r3, r2
 800d6f6:	fb06 e303 	mla	r3, r6, r3, lr
 800d6fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	ebaa 0303 	sub.w	r3, sl, r3
 800d704:	0c12      	lsrs	r2, r2, #16
 800d706:	f8dc a000 	ldr.w	sl, [ip]
 800d70a:	fb06 e202 	mla	r2, r6, r2, lr
 800d70e:	fa13 f38a 	uxtah	r3, r3, sl
 800d712:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d716:	fa1f fa82 	uxth.w	sl, r2
 800d71a:	f8dc 2000 	ldr.w	r2, [ip]
 800d71e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d722:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d726:	b29b      	uxth	r3, r3
 800d728:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d72c:	4581      	cmp	r9, r0
 800d72e:	f84c 3b04 	str.w	r3, [ip], #4
 800d732:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d736:	d2db      	bcs.n	800d6f0 <quorem+0x44>
 800d738:	f855 300b 	ldr.w	r3, [r5, fp]
 800d73c:	b92b      	cbnz	r3, 800d74a <quorem+0x9e>
 800d73e:	9b01      	ldr	r3, [sp, #4]
 800d740:	3b04      	subs	r3, #4
 800d742:	429d      	cmp	r5, r3
 800d744:	461a      	mov	r2, r3
 800d746:	d32e      	bcc.n	800d7a6 <quorem+0xfa>
 800d748:	613c      	str	r4, [r7, #16]
 800d74a:	4638      	mov	r0, r7
 800d74c:	f001 fc7e 	bl	800f04c <__mcmp>
 800d750:	2800      	cmp	r0, #0
 800d752:	db24      	blt.n	800d79e <quorem+0xf2>
 800d754:	3601      	adds	r6, #1
 800d756:	4628      	mov	r0, r5
 800d758:	f04f 0c00 	mov.w	ip, #0
 800d75c:	f858 2b04 	ldr.w	r2, [r8], #4
 800d760:	f8d0 e000 	ldr.w	lr, [r0]
 800d764:	b293      	uxth	r3, r2
 800d766:	ebac 0303 	sub.w	r3, ip, r3
 800d76a:	0c12      	lsrs	r2, r2, #16
 800d76c:	fa13 f38e 	uxtah	r3, r3, lr
 800d770:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d774:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d778:	b29b      	uxth	r3, r3
 800d77a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d77e:	45c1      	cmp	r9, r8
 800d780:	f840 3b04 	str.w	r3, [r0], #4
 800d784:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d788:	d2e8      	bcs.n	800d75c <quorem+0xb0>
 800d78a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d78e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d792:	b922      	cbnz	r2, 800d79e <quorem+0xf2>
 800d794:	3b04      	subs	r3, #4
 800d796:	429d      	cmp	r5, r3
 800d798:	461a      	mov	r2, r3
 800d79a:	d30a      	bcc.n	800d7b2 <quorem+0x106>
 800d79c:	613c      	str	r4, [r7, #16]
 800d79e:	4630      	mov	r0, r6
 800d7a0:	b003      	add	sp, #12
 800d7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a6:	6812      	ldr	r2, [r2, #0]
 800d7a8:	3b04      	subs	r3, #4
 800d7aa:	2a00      	cmp	r2, #0
 800d7ac:	d1cc      	bne.n	800d748 <quorem+0x9c>
 800d7ae:	3c01      	subs	r4, #1
 800d7b0:	e7c7      	b.n	800d742 <quorem+0x96>
 800d7b2:	6812      	ldr	r2, [r2, #0]
 800d7b4:	3b04      	subs	r3, #4
 800d7b6:	2a00      	cmp	r2, #0
 800d7b8:	d1f0      	bne.n	800d79c <quorem+0xf0>
 800d7ba:	3c01      	subs	r4, #1
 800d7bc:	e7eb      	b.n	800d796 <quorem+0xea>
 800d7be:	2000      	movs	r0, #0
 800d7c0:	e7ee      	b.n	800d7a0 <quorem+0xf4>
 800d7c2:	0000      	movs	r0, r0
 800d7c4:	0000      	movs	r0, r0
	...

0800d7c8 <_dtoa_r>:
 800d7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7cc:	ed2d 8b02 	vpush	{d8}
 800d7d0:	ec57 6b10 	vmov	r6, r7, d0
 800d7d4:	b095      	sub	sp, #84	; 0x54
 800d7d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d7d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d7dc:	9105      	str	r1, [sp, #20]
 800d7de:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	9209      	str	r2, [sp, #36]	; 0x24
 800d7e6:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7e8:	b975      	cbnz	r5, 800d808 <_dtoa_r+0x40>
 800d7ea:	2010      	movs	r0, #16
 800d7ec:	f001 f94c 	bl	800ea88 <malloc>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	6260      	str	r0, [r4, #36]	; 0x24
 800d7f4:	b920      	cbnz	r0, 800d800 <_dtoa_r+0x38>
 800d7f6:	4bb2      	ldr	r3, [pc, #712]	; (800dac0 <_dtoa_r+0x2f8>)
 800d7f8:	21ea      	movs	r1, #234	; 0xea
 800d7fa:	48b2      	ldr	r0, [pc, #712]	; (800dac4 <_dtoa_r+0x2fc>)
 800d7fc:	f002 f868 	bl	800f8d0 <__assert_func>
 800d800:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d804:	6005      	str	r5, [r0, #0]
 800d806:	60c5      	str	r5, [r0, #12]
 800d808:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d80a:	6819      	ldr	r1, [r3, #0]
 800d80c:	b151      	cbz	r1, 800d824 <_dtoa_r+0x5c>
 800d80e:	685a      	ldr	r2, [r3, #4]
 800d810:	604a      	str	r2, [r1, #4]
 800d812:	2301      	movs	r3, #1
 800d814:	4093      	lsls	r3, r2
 800d816:	608b      	str	r3, [r1, #8]
 800d818:	4620      	mov	r0, r4
 800d81a:	f001 f98f 	bl	800eb3c <_Bfree>
 800d81e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d820:	2200      	movs	r2, #0
 800d822:	601a      	str	r2, [r3, #0]
 800d824:	1e3b      	subs	r3, r7, #0
 800d826:	bfb9      	ittee	lt
 800d828:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d82c:	9303      	strlt	r3, [sp, #12]
 800d82e:	2300      	movge	r3, #0
 800d830:	f8c8 3000 	strge.w	r3, [r8]
 800d834:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d838:	4ba3      	ldr	r3, [pc, #652]	; (800dac8 <_dtoa_r+0x300>)
 800d83a:	bfbc      	itt	lt
 800d83c:	2201      	movlt	r2, #1
 800d83e:	f8c8 2000 	strlt.w	r2, [r8]
 800d842:	ea33 0309 	bics.w	r3, r3, r9
 800d846:	d11b      	bne.n	800d880 <_dtoa_r+0xb8>
 800d848:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d84a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d84e:	6013      	str	r3, [r2, #0]
 800d850:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d854:	4333      	orrs	r3, r6
 800d856:	f000 857a 	beq.w	800e34e <_dtoa_r+0xb86>
 800d85a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d85c:	b963      	cbnz	r3, 800d878 <_dtoa_r+0xb0>
 800d85e:	4b9b      	ldr	r3, [pc, #620]	; (800dacc <_dtoa_r+0x304>)
 800d860:	e024      	b.n	800d8ac <_dtoa_r+0xe4>
 800d862:	4b9b      	ldr	r3, [pc, #620]	; (800dad0 <_dtoa_r+0x308>)
 800d864:	9300      	str	r3, [sp, #0]
 800d866:	3308      	adds	r3, #8
 800d868:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d86a:	6013      	str	r3, [r2, #0]
 800d86c:	9800      	ldr	r0, [sp, #0]
 800d86e:	b015      	add	sp, #84	; 0x54
 800d870:	ecbd 8b02 	vpop	{d8}
 800d874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d878:	4b94      	ldr	r3, [pc, #592]	; (800dacc <_dtoa_r+0x304>)
 800d87a:	9300      	str	r3, [sp, #0]
 800d87c:	3303      	adds	r3, #3
 800d87e:	e7f3      	b.n	800d868 <_dtoa_r+0xa0>
 800d880:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d884:	2200      	movs	r2, #0
 800d886:	ec51 0b17 	vmov	r0, r1, d7
 800d88a:	2300      	movs	r3, #0
 800d88c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d890:	f7f3 f91a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d894:	4680      	mov	r8, r0
 800d896:	b158      	cbz	r0, 800d8b0 <_dtoa_r+0xe8>
 800d898:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d89a:	2301      	movs	r3, #1
 800d89c:	6013      	str	r3, [r2, #0]
 800d89e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	f000 8551 	beq.w	800e348 <_dtoa_r+0xb80>
 800d8a6:	488b      	ldr	r0, [pc, #556]	; (800dad4 <_dtoa_r+0x30c>)
 800d8a8:	6018      	str	r0, [r3, #0]
 800d8aa:	1e43      	subs	r3, r0, #1
 800d8ac:	9300      	str	r3, [sp, #0]
 800d8ae:	e7dd      	b.n	800d86c <_dtoa_r+0xa4>
 800d8b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d8b4:	aa12      	add	r2, sp, #72	; 0x48
 800d8b6:	a913      	add	r1, sp, #76	; 0x4c
 800d8b8:	4620      	mov	r0, r4
 800d8ba:	f001 fce7 	bl	800f28c <__d2b>
 800d8be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d8c2:	4683      	mov	fp, r0
 800d8c4:	2d00      	cmp	r5, #0
 800d8c6:	d07c      	beq.n	800d9c2 <_dtoa_r+0x1fa>
 800d8c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d8ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d8d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d8da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d8de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d8e2:	4b7d      	ldr	r3, [pc, #500]	; (800dad8 <_dtoa_r+0x310>)
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	4630      	mov	r0, r6
 800d8e8:	4639      	mov	r1, r7
 800d8ea:	f7f2 fccd 	bl	8000288 <__aeabi_dsub>
 800d8ee:	a36e      	add	r3, pc, #440	; (adr r3, 800daa8 <_dtoa_r+0x2e0>)
 800d8f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f4:	f7f2 fe80 	bl	80005f8 <__aeabi_dmul>
 800d8f8:	a36d      	add	r3, pc, #436	; (adr r3, 800dab0 <_dtoa_r+0x2e8>)
 800d8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8fe:	f7f2 fcc5 	bl	800028c <__adddf3>
 800d902:	4606      	mov	r6, r0
 800d904:	4628      	mov	r0, r5
 800d906:	460f      	mov	r7, r1
 800d908:	f7f2 fe0c 	bl	8000524 <__aeabi_i2d>
 800d90c:	a36a      	add	r3, pc, #424	; (adr r3, 800dab8 <_dtoa_r+0x2f0>)
 800d90e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d912:	f7f2 fe71 	bl	80005f8 <__aeabi_dmul>
 800d916:	4602      	mov	r2, r0
 800d918:	460b      	mov	r3, r1
 800d91a:	4630      	mov	r0, r6
 800d91c:	4639      	mov	r1, r7
 800d91e:	f7f2 fcb5 	bl	800028c <__adddf3>
 800d922:	4606      	mov	r6, r0
 800d924:	460f      	mov	r7, r1
 800d926:	f7f3 f917 	bl	8000b58 <__aeabi_d2iz>
 800d92a:	2200      	movs	r2, #0
 800d92c:	4682      	mov	sl, r0
 800d92e:	2300      	movs	r3, #0
 800d930:	4630      	mov	r0, r6
 800d932:	4639      	mov	r1, r7
 800d934:	f7f3 f8d2 	bl	8000adc <__aeabi_dcmplt>
 800d938:	b148      	cbz	r0, 800d94e <_dtoa_r+0x186>
 800d93a:	4650      	mov	r0, sl
 800d93c:	f7f2 fdf2 	bl	8000524 <__aeabi_i2d>
 800d940:	4632      	mov	r2, r6
 800d942:	463b      	mov	r3, r7
 800d944:	f7f3 f8c0 	bl	8000ac8 <__aeabi_dcmpeq>
 800d948:	b908      	cbnz	r0, 800d94e <_dtoa_r+0x186>
 800d94a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d94e:	f1ba 0f16 	cmp.w	sl, #22
 800d952:	d854      	bhi.n	800d9fe <_dtoa_r+0x236>
 800d954:	4b61      	ldr	r3, [pc, #388]	; (800dadc <_dtoa_r+0x314>)
 800d956:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d95a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d95e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d962:	f7f3 f8bb 	bl	8000adc <__aeabi_dcmplt>
 800d966:	2800      	cmp	r0, #0
 800d968:	d04b      	beq.n	800da02 <_dtoa_r+0x23a>
 800d96a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d96e:	2300      	movs	r3, #0
 800d970:	930e      	str	r3, [sp, #56]	; 0x38
 800d972:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d974:	1b5d      	subs	r5, r3, r5
 800d976:	1e6b      	subs	r3, r5, #1
 800d978:	9304      	str	r3, [sp, #16]
 800d97a:	bf43      	ittte	mi
 800d97c:	2300      	movmi	r3, #0
 800d97e:	f1c5 0801 	rsbmi	r8, r5, #1
 800d982:	9304      	strmi	r3, [sp, #16]
 800d984:	f04f 0800 	movpl.w	r8, #0
 800d988:	f1ba 0f00 	cmp.w	sl, #0
 800d98c:	db3b      	blt.n	800da06 <_dtoa_r+0x23e>
 800d98e:	9b04      	ldr	r3, [sp, #16]
 800d990:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d994:	4453      	add	r3, sl
 800d996:	9304      	str	r3, [sp, #16]
 800d998:	2300      	movs	r3, #0
 800d99a:	9306      	str	r3, [sp, #24]
 800d99c:	9b05      	ldr	r3, [sp, #20]
 800d99e:	2b09      	cmp	r3, #9
 800d9a0:	d869      	bhi.n	800da76 <_dtoa_r+0x2ae>
 800d9a2:	2b05      	cmp	r3, #5
 800d9a4:	bfc4      	itt	gt
 800d9a6:	3b04      	subgt	r3, #4
 800d9a8:	9305      	strgt	r3, [sp, #20]
 800d9aa:	9b05      	ldr	r3, [sp, #20]
 800d9ac:	f1a3 0302 	sub.w	r3, r3, #2
 800d9b0:	bfcc      	ite	gt
 800d9b2:	2500      	movgt	r5, #0
 800d9b4:	2501      	movle	r5, #1
 800d9b6:	2b03      	cmp	r3, #3
 800d9b8:	d869      	bhi.n	800da8e <_dtoa_r+0x2c6>
 800d9ba:	e8df f003 	tbb	[pc, r3]
 800d9be:	4e2c      	.short	0x4e2c
 800d9c0:	5a4c      	.short	0x5a4c
 800d9c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d9c6:	441d      	add	r5, r3
 800d9c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d9cc:	2b20      	cmp	r3, #32
 800d9ce:	bfc1      	itttt	gt
 800d9d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d9d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d9d8:	fa09 f303 	lslgt.w	r3, r9, r3
 800d9dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d9e0:	bfda      	itte	le
 800d9e2:	f1c3 0320 	rsble	r3, r3, #32
 800d9e6:	fa06 f003 	lslle.w	r0, r6, r3
 800d9ea:	4318      	orrgt	r0, r3
 800d9ec:	f7f2 fd8a 	bl	8000504 <__aeabi_ui2d>
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	4606      	mov	r6, r0
 800d9f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d9f8:	3d01      	subs	r5, #1
 800d9fa:	9310      	str	r3, [sp, #64]	; 0x40
 800d9fc:	e771      	b.n	800d8e2 <_dtoa_r+0x11a>
 800d9fe:	2301      	movs	r3, #1
 800da00:	e7b6      	b.n	800d970 <_dtoa_r+0x1a8>
 800da02:	900e      	str	r0, [sp, #56]	; 0x38
 800da04:	e7b5      	b.n	800d972 <_dtoa_r+0x1aa>
 800da06:	f1ca 0300 	rsb	r3, sl, #0
 800da0a:	9306      	str	r3, [sp, #24]
 800da0c:	2300      	movs	r3, #0
 800da0e:	eba8 080a 	sub.w	r8, r8, sl
 800da12:	930d      	str	r3, [sp, #52]	; 0x34
 800da14:	e7c2      	b.n	800d99c <_dtoa_r+0x1d4>
 800da16:	2300      	movs	r3, #0
 800da18:	9308      	str	r3, [sp, #32]
 800da1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	dc39      	bgt.n	800da94 <_dtoa_r+0x2cc>
 800da20:	f04f 0901 	mov.w	r9, #1
 800da24:	f8cd 9004 	str.w	r9, [sp, #4]
 800da28:	464b      	mov	r3, r9
 800da2a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800da2e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800da30:	2200      	movs	r2, #0
 800da32:	6042      	str	r2, [r0, #4]
 800da34:	2204      	movs	r2, #4
 800da36:	f102 0614 	add.w	r6, r2, #20
 800da3a:	429e      	cmp	r6, r3
 800da3c:	6841      	ldr	r1, [r0, #4]
 800da3e:	d92f      	bls.n	800daa0 <_dtoa_r+0x2d8>
 800da40:	4620      	mov	r0, r4
 800da42:	f001 f83b 	bl	800eabc <_Balloc>
 800da46:	9000      	str	r0, [sp, #0]
 800da48:	2800      	cmp	r0, #0
 800da4a:	d14b      	bne.n	800dae4 <_dtoa_r+0x31c>
 800da4c:	4b24      	ldr	r3, [pc, #144]	; (800dae0 <_dtoa_r+0x318>)
 800da4e:	4602      	mov	r2, r0
 800da50:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800da54:	e6d1      	b.n	800d7fa <_dtoa_r+0x32>
 800da56:	2301      	movs	r3, #1
 800da58:	e7de      	b.n	800da18 <_dtoa_r+0x250>
 800da5a:	2300      	movs	r3, #0
 800da5c:	9308      	str	r3, [sp, #32]
 800da5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da60:	eb0a 0903 	add.w	r9, sl, r3
 800da64:	f109 0301 	add.w	r3, r9, #1
 800da68:	2b01      	cmp	r3, #1
 800da6a:	9301      	str	r3, [sp, #4]
 800da6c:	bfb8      	it	lt
 800da6e:	2301      	movlt	r3, #1
 800da70:	e7dd      	b.n	800da2e <_dtoa_r+0x266>
 800da72:	2301      	movs	r3, #1
 800da74:	e7f2      	b.n	800da5c <_dtoa_r+0x294>
 800da76:	2501      	movs	r5, #1
 800da78:	2300      	movs	r3, #0
 800da7a:	9305      	str	r3, [sp, #20]
 800da7c:	9508      	str	r5, [sp, #32]
 800da7e:	f04f 39ff 	mov.w	r9, #4294967295
 800da82:	2200      	movs	r2, #0
 800da84:	f8cd 9004 	str.w	r9, [sp, #4]
 800da88:	2312      	movs	r3, #18
 800da8a:	9209      	str	r2, [sp, #36]	; 0x24
 800da8c:	e7cf      	b.n	800da2e <_dtoa_r+0x266>
 800da8e:	2301      	movs	r3, #1
 800da90:	9308      	str	r3, [sp, #32]
 800da92:	e7f4      	b.n	800da7e <_dtoa_r+0x2b6>
 800da94:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800da98:	f8cd 9004 	str.w	r9, [sp, #4]
 800da9c:	464b      	mov	r3, r9
 800da9e:	e7c6      	b.n	800da2e <_dtoa_r+0x266>
 800daa0:	3101      	adds	r1, #1
 800daa2:	6041      	str	r1, [r0, #4]
 800daa4:	0052      	lsls	r2, r2, #1
 800daa6:	e7c6      	b.n	800da36 <_dtoa_r+0x26e>
 800daa8:	636f4361 	.word	0x636f4361
 800daac:	3fd287a7 	.word	0x3fd287a7
 800dab0:	8b60c8b3 	.word	0x8b60c8b3
 800dab4:	3fc68a28 	.word	0x3fc68a28
 800dab8:	509f79fb 	.word	0x509f79fb
 800dabc:	3fd34413 	.word	0x3fd34413
 800dac0:	08014ffe 	.word	0x08014ffe
 800dac4:	08015015 	.word	0x08015015
 800dac8:	7ff00000 	.word	0x7ff00000
 800dacc:	08014ffa 	.word	0x08014ffa
 800dad0:	08014ff1 	.word	0x08014ff1
 800dad4:	08014e75 	.word	0x08014e75
 800dad8:	3ff80000 	.word	0x3ff80000
 800dadc:	08015190 	.word	0x08015190
 800dae0:	08015074 	.word	0x08015074
 800dae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dae6:	9a00      	ldr	r2, [sp, #0]
 800dae8:	601a      	str	r2, [r3, #0]
 800daea:	9b01      	ldr	r3, [sp, #4]
 800daec:	2b0e      	cmp	r3, #14
 800daee:	f200 80ad 	bhi.w	800dc4c <_dtoa_r+0x484>
 800daf2:	2d00      	cmp	r5, #0
 800daf4:	f000 80aa 	beq.w	800dc4c <_dtoa_r+0x484>
 800daf8:	f1ba 0f00 	cmp.w	sl, #0
 800dafc:	dd36      	ble.n	800db6c <_dtoa_r+0x3a4>
 800dafe:	4ac3      	ldr	r2, [pc, #780]	; (800de0c <_dtoa_r+0x644>)
 800db00:	f00a 030f 	and.w	r3, sl, #15
 800db04:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800db08:	ed93 7b00 	vldr	d7, [r3]
 800db0c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800db10:	ea4f 172a 	mov.w	r7, sl, asr #4
 800db14:	eeb0 8a47 	vmov.f32	s16, s14
 800db18:	eef0 8a67 	vmov.f32	s17, s15
 800db1c:	d016      	beq.n	800db4c <_dtoa_r+0x384>
 800db1e:	4bbc      	ldr	r3, [pc, #752]	; (800de10 <_dtoa_r+0x648>)
 800db20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800db28:	f7f2 fe90 	bl	800084c <__aeabi_ddiv>
 800db2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db30:	f007 070f 	and.w	r7, r7, #15
 800db34:	2503      	movs	r5, #3
 800db36:	4eb6      	ldr	r6, [pc, #728]	; (800de10 <_dtoa_r+0x648>)
 800db38:	b957      	cbnz	r7, 800db50 <_dtoa_r+0x388>
 800db3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800db3e:	ec53 2b18 	vmov	r2, r3, d8
 800db42:	f7f2 fe83 	bl	800084c <__aeabi_ddiv>
 800db46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db4a:	e029      	b.n	800dba0 <_dtoa_r+0x3d8>
 800db4c:	2502      	movs	r5, #2
 800db4e:	e7f2      	b.n	800db36 <_dtoa_r+0x36e>
 800db50:	07f9      	lsls	r1, r7, #31
 800db52:	d508      	bpl.n	800db66 <_dtoa_r+0x39e>
 800db54:	ec51 0b18 	vmov	r0, r1, d8
 800db58:	e9d6 2300 	ldrd	r2, r3, [r6]
 800db5c:	f7f2 fd4c 	bl	80005f8 <__aeabi_dmul>
 800db60:	ec41 0b18 	vmov	d8, r0, r1
 800db64:	3501      	adds	r5, #1
 800db66:	107f      	asrs	r7, r7, #1
 800db68:	3608      	adds	r6, #8
 800db6a:	e7e5      	b.n	800db38 <_dtoa_r+0x370>
 800db6c:	f000 80a6 	beq.w	800dcbc <_dtoa_r+0x4f4>
 800db70:	f1ca 0600 	rsb	r6, sl, #0
 800db74:	4ba5      	ldr	r3, [pc, #660]	; (800de0c <_dtoa_r+0x644>)
 800db76:	4fa6      	ldr	r7, [pc, #664]	; (800de10 <_dtoa_r+0x648>)
 800db78:	f006 020f 	and.w	r2, r6, #15
 800db7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db88:	f7f2 fd36 	bl	80005f8 <__aeabi_dmul>
 800db8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db90:	1136      	asrs	r6, r6, #4
 800db92:	2300      	movs	r3, #0
 800db94:	2502      	movs	r5, #2
 800db96:	2e00      	cmp	r6, #0
 800db98:	f040 8085 	bne.w	800dca6 <_dtoa_r+0x4de>
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d1d2      	bne.n	800db46 <_dtoa_r+0x37e>
 800dba0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	f000 808c 	beq.w	800dcc0 <_dtoa_r+0x4f8>
 800dba8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dbac:	4b99      	ldr	r3, [pc, #612]	; (800de14 <_dtoa_r+0x64c>)
 800dbae:	2200      	movs	r2, #0
 800dbb0:	4630      	mov	r0, r6
 800dbb2:	4639      	mov	r1, r7
 800dbb4:	f7f2 ff92 	bl	8000adc <__aeabi_dcmplt>
 800dbb8:	2800      	cmp	r0, #0
 800dbba:	f000 8081 	beq.w	800dcc0 <_dtoa_r+0x4f8>
 800dbbe:	9b01      	ldr	r3, [sp, #4]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d07d      	beq.n	800dcc0 <_dtoa_r+0x4f8>
 800dbc4:	f1b9 0f00 	cmp.w	r9, #0
 800dbc8:	dd3c      	ble.n	800dc44 <_dtoa_r+0x47c>
 800dbca:	f10a 33ff 	add.w	r3, sl, #4294967295
 800dbce:	9307      	str	r3, [sp, #28]
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	4b91      	ldr	r3, [pc, #580]	; (800de18 <_dtoa_r+0x650>)
 800dbd4:	4630      	mov	r0, r6
 800dbd6:	4639      	mov	r1, r7
 800dbd8:	f7f2 fd0e 	bl	80005f8 <__aeabi_dmul>
 800dbdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dbe0:	3501      	adds	r5, #1
 800dbe2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800dbe6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dbea:	4628      	mov	r0, r5
 800dbec:	f7f2 fc9a 	bl	8000524 <__aeabi_i2d>
 800dbf0:	4632      	mov	r2, r6
 800dbf2:	463b      	mov	r3, r7
 800dbf4:	f7f2 fd00 	bl	80005f8 <__aeabi_dmul>
 800dbf8:	4b88      	ldr	r3, [pc, #544]	; (800de1c <_dtoa_r+0x654>)
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	f7f2 fb46 	bl	800028c <__adddf3>
 800dc00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800dc04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dc08:	9303      	str	r3, [sp, #12]
 800dc0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d15c      	bne.n	800dcca <_dtoa_r+0x502>
 800dc10:	4b83      	ldr	r3, [pc, #524]	; (800de20 <_dtoa_r+0x658>)
 800dc12:	2200      	movs	r2, #0
 800dc14:	4630      	mov	r0, r6
 800dc16:	4639      	mov	r1, r7
 800dc18:	f7f2 fb36 	bl	8000288 <__aeabi_dsub>
 800dc1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc20:	4606      	mov	r6, r0
 800dc22:	460f      	mov	r7, r1
 800dc24:	f7f2 ff78 	bl	8000b18 <__aeabi_dcmpgt>
 800dc28:	2800      	cmp	r0, #0
 800dc2a:	f040 8296 	bne.w	800e15a <_dtoa_r+0x992>
 800dc2e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dc32:	4630      	mov	r0, r6
 800dc34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dc38:	4639      	mov	r1, r7
 800dc3a:	f7f2 ff4f 	bl	8000adc <__aeabi_dcmplt>
 800dc3e:	2800      	cmp	r0, #0
 800dc40:	f040 8288 	bne.w	800e154 <_dtoa_r+0x98c>
 800dc44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dc48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dc4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f2c0 8158 	blt.w	800df04 <_dtoa_r+0x73c>
 800dc54:	f1ba 0f0e 	cmp.w	sl, #14
 800dc58:	f300 8154 	bgt.w	800df04 <_dtoa_r+0x73c>
 800dc5c:	4b6b      	ldr	r3, [pc, #428]	; (800de0c <_dtoa_r+0x644>)
 800dc5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dc62:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dc66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	f280 80e3 	bge.w	800de34 <_dtoa_r+0x66c>
 800dc6e:	9b01      	ldr	r3, [sp, #4]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	f300 80df 	bgt.w	800de34 <_dtoa_r+0x66c>
 800dc76:	f040 826d 	bne.w	800e154 <_dtoa_r+0x98c>
 800dc7a:	4b69      	ldr	r3, [pc, #420]	; (800de20 <_dtoa_r+0x658>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	4640      	mov	r0, r8
 800dc80:	4649      	mov	r1, r9
 800dc82:	f7f2 fcb9 	bl	80005f8 <__aeabi_dmul>
 800dc86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc8a:	f7f2 ff3b 	bl	8000b04 <__aeabi_dcmpge>
 800dc8e:	9e01      	ldr	r6, [sp, #4]
 800dc90:	4637      	mov	r7, r6
 800dc92:	2800      	cmp	r0, #0
 800dc94:	f040 8243 	bne.w	800e11e <_dtoa_r+0x956>
 800dc98:	9d00      	ldr	r5, [sp, #0]
 800dc9a:	2331      	movs	r3, #49	; 0x31
 800dc9c:	f805 3b01 	strb.w	r3, [r5], #1
 800dca0:	f10a 0a01 	add.w	sl, sl, #1
 800dca4:	e23f      	b.n	800e126 <_dtoa_r+0x95e>
 800dca6:	07f2      	lsls	r2, r6, #31
 800dca8:	d505      	bpl.n	800dcb6 <_dtoa_r+0x4ee>
 800dcaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dcae:	f7f2 fca3 	bl	80005f8 <__aeabi_dmul>
 800dcb2:	3501      	adds	r5, #1
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	1076      	asrs	r6, r6, #1
 800dcb8:	3708      	adds	r7, #8
 800dcba:	e76c      	b.n	800db96 <_dtoa_r+0x3ce>
 800dcbc:	2502      	movs	r5, #2
 800dcbe:	e76f      	b.n	800dba0 <_dtoa_r+0x3d8>
 800dcc0:	9b01      	ldr	r3, [sp, #4]
 800dcc2:	f8cd a01c 	str.w	sl, [sp, #28]
 800dcc6:	930c      	str	r3, [sp, #48]	; 0x30
 800dcc8:	e78d      	b.n	800dbe6 <_dtoa_r+0x41e>
 800dcca:	9900      	ldr	r1, [sp, #0]
 800dccc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dcce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dcd0:	4b4e      	ldr	r3, [pc, #312]	; (800de0c <_dtoa_r+0x644>)
 800dcd2:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dcd6:	4401      	add	r1, r0
 800dcd8:	9102      	str	r1, [sp, #8]
 800dcda:	9908      	ldr	r1, [sp, #32]
 800dcdc:	eeb0 8a47 	vmov.f32	s16, s14
 800dce0:	eef0 8a67 	vmov.f32	s17, s15
 800dce4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dce8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dcec:	2900      	cmp	r1, #0
 800dcee:	d045      	beq.n	800dd7c <_dtoa_r+0x5b4>
 800dcf0:	494c      	ldr	r1, [pc, #304]	; (800de24 <_dtoa_r+0x65c>)
 800dcf2:	2000      	movs	r0, #0
 800dcf4:	f7f2 fdaa 	bl	800084c <__aeabi_ddiv>
 800dcf8:	ec53 2b18 	vmov	r2, r3, d8
 800dcfc:	f7f2 fac4 	bl	8000288 <__aeabi_dsub>
 800dd00:	9d00      	ldr	r5, [sp, #0]
 800dd02:	ec41 0b18 	vmov	d8, r0, r1
 800dd06:	4639      	mov	r1, r7
 800dd08:	4630      	mov	r0, r6
 800dd0a:	f7f2 ff25 	bl	8000b58 <__aeabi_d2iz>
 800dd0e:	900c      	str	r0, [sp, #48]	; 0x30
 800dd10:	f7f2 fc08 	bl	8000524 <__aeabi_i2d>
 800dd14:	4602      	mov	r2, r0
 800dd16:	460b      	mov	r3, r1
 800dd18:	4630      	mov	r0, r6
 800dd1a:	4639      	mov	r1, r7
 800dd1c:	f7f2 fab4 	bl	8000288 <__aeabi_dsub>
 800dd20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dd22:	3330      	adds	r3, #48	; 0x30
 800dd24:	f805 3b01 	strb.w	r3, [r5], #1
 800dd28:	ec53 2b18 	vmov	r2, r3, d8
 800dd2c:	4606      	mov	r6, r0
 800dd2e:	460f      	mov	r7, r1
 800dd30:	f7f2 fed4 	bl	8000adc <__aeabi_dcmplt>
 800dd34:	2800      	cmp	r0, #0
 800dd36:	d165      	bne.n	800de04 <_dtoa_r+0x63c>
 800dd38:	4632      	mov	r2, r6
 800dd3a:	463b      	mov	r3, r7
 800dd3c:	4935      	ldr	r1, [pc, #212]	; (800de14 <_dtoa_r+0x64c>)
 800dd3e:	2000      	movs	r0, #0
 800dd40:	f7f2 faa2 	bl	8000288 <__aeabi_dsub>
 800dd44:	ec53 2b18 	vmov	r2, r3, d8
 800dd48:	f7f2 fec8 	bl	8000adc <__aeabi_dcmplt>
 800dd4c:	2800      	cmp	r0, #0
 800dd4e:	f040 80b9 	bne.w	800dec4 <_dtoa_r+0x6fc>
 800dd52:	9b02      	ldr	r3, [sp, #8]
 800dd54:	429d      	cmp	r5, r3
 800dd56:	f43f af75 	beq.w	800dc44 <_dtoa_r+0x47c>
 800dd5a:	4b2f      	ldr	r3, [pc, #188]	; (800de18 <_dtoa_r+0x650>)
 800dd5c:	ec51 0b18 	vmov	r0, r1, d8
 800dd60:	2200      	movs	r2, #0
 800dd62:	f7f2 fc49 	bl	80005f8 <__aeabi_dmul>
 800dd66:	4b2c      	ldr	r3, [pc, #176]	; (800de18 <_dtoa_r+0x650>)
 800dd68:	ec41 0b18 	vmov	d8, r0, r1
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	4630      	mov	r0, r6
 800dd70:	4639      	mov	r1, r7
 800dd72:	f7f2 fc41 	bl	80005f8 <__aeabi_dmul>
 800dd76:	4606      	mov	r6, r0
 800dd78:	460f      	mov	r7, r1
 800dd7a:	e7c4      	b.n	800dd06 <_dtoa_r+0x53e>
 800dd7c:	ec51 0b17 	vmov	r0, r1, d7
 800dd80:	f7f2 fc3a 	bl	80005f8 <__aeabi_dmul>
 800dd84:	9b02      	ldr	r3, [sp, #8]
 800dd86:	9d00      	ldr	r5, [sp, #0]
 800dd88:	930c      	str	r3, [sp, #48]	; 0x30
 800dd8a:	ec41 0b18 	vmov	d8, r0, r1
 800dd8e:	4639      	mov	r1, r7
 800dd90:	4630      	mov	r0, r6
 800dd92:	f7f2 fee1 	bl	8000b58 <__aeabi_d2iz>
 800dd96:	9011      	str	r0, [sp, #68]	; 0x44
 800dd98:	f7f2 fbc4 	bl	8000524 <__aeabi_i2d>
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	460b      	mov	r3, r1
 800dda0:	4630      	mov	r0, r6
 800dda2:	4639      	mov	r1, r7
 800dda4:	f7f2 fa70 	bl	8000288 <__aeabi_dsub>
 800dda8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ddaa:	3330      	adds	r3, #48	; 0x30
 800ddac:	f805 3b01 	strb.w	r3, [r5], #1
 800ddb0:	9b02      	ldr	r3, [sp, #8]
 800ddb2:	429d      	cmp	r5, r3
 800ddb4:	4606      	mov	r6, r0
 800ddb6:	460f      	mov	r7, r1
 800ddb8:	f04f 0200 	mov.w	r2, #0
 800ddbc:	d134      	bne.n	800de28 <_dtoa_r+0x660>
 800ddbe:	4b19      	ldr	r3, [pc, #100]	; (800de24 <_dtoa_r+0x65c>)
 800ddc0:	ec51 0b18 	vmov	r0, r1, d8
 800ddc4:	f7f2 fa62 	bl	800028c <__adddf3>
 800ddc8:	4602      	mov	r2, r0
 800ddca:	460b      	mov	r3, r1
 800ddcc:	4630      	mov	r0, r6
 800ddce:	4639      	mov	r1, r7
 800ddd0:	f7f2 fea2 	bl	8000b18 <__aeabi_dcmpgt>
 800ddd4:	2800      	cmp	r0, #0
 800ddd6:	d175      	bne.n	800dec4 <_dtoa_r+0x6fc>
 800ddd8:	ec53 2b18 	vmov	r2, r3, d8
 800dddc:	4911      	ldr	r1, [pc, #68]	; (800de24 <_dtoa_r+0x65c>)
 800ddde:	2000      	movs	r0, #0
 800dde0:	f7f2 fa52 	bl	8000288 <__aeabi_dsub>
 800dde4:	4602      	mov	r2, r0
 800dde6:	460b      	mov	r3, r1
 800dde8:	4630      	mov	r0, r6
 800ddea:	4639      	mov	r1, r7
 800ddec:	f7f2 fe76 	bl	8000adc <__aeabi_dcmplt>
 800ddf0:	2800      	cmp	r0, #0
 800ddf2:	f43f af27 	beq.w	800dc44 <_dtoa_r+0x47c>
 800ddf6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ddf8:	1e6b      	subs	r3, r5, #1
 800ddfa:	930c      	str	r3, [sp, #48]	; 0x30
 800ddfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800de00:	2b30      	cmp	r3, #48	; 0x30
 800de02:	d0f8      	beq.n	800ddf6 <_dtoa_r+0x62e>
 800de04:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800de08:	e04a      	b.n	800dea0 <_dtoa_r+0x6d8>
 800de0a:	bf00      	nop
 800de0c:	08015190 	.word	0x08015190
 800de10:	08015168 	.word	0x08015168
 800de14:	3ff00000 	.word	0x3ff00000
 800de18:	40240000 	.word	0x40240000
 800de1c:	401c0000 	.word	0x401c0000
 800de20:	40140000 	.word	0x40140000
 800de24:	3fe00000 	.word	0x3fe00000
 800de28:	4baf      	ldr	r3, [pc, #700]	; (800e0e8 <_dtoa_r+0x920>)
 800de2a:	f7f2 fbe5 	bl	80005f8 <__aeabi_dmul>
 800de2e:	4606      	mov	r6, r0
 800de30:	460f      	mov	r7, r1
 800de32:	e7ac      	b.n	800dd8e <_dtoa_r+0x5c6>
 800de34:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800de38:	9d00      	ldr	r5, [sp, #0]
 800de3a:	4642      	mov	r2, r8
 800de3c:	464b      	mov	r3, r9
 800de3e:	4630      	mov	r0, r6
 800de40:	4639      	mov	r1, r7
 800de42:	f7f2 fd03 	bl	800084c <__aeabi_ddiv>
 800de46:	f7f2 fe87 	bl	8000b58 <__aeabi_d2iz>
 800de4a:	9002      	str	r0, [sp, #8]
 800de4c:	f7f2 fb6a 	bl	8000524 <__aeabi_i2d>
 800de50:	4642      	mov	r2, r8
 800de52:	464b      	mov	r3, r9
 800de54:	f7f2 fbd0 	bl	80005f8 <__aeabi_dmul>
 800de58:	4602      	mov	r2, r0
 800de5a:	460b      	mov	r3, r1
 800de5c:	4630      	mov	r0, r6
 800de5e:	4639      	mov	r1, r7
 800de60:	f7f2 fa12 	bl	8000288 <__aeabi_dsub>
 800de64:	9e02      	ldr	r6, [sp, #8]
 800de66:	9f01      	ldr	r7, [sp, #4]
 800de68:	3630      	adds	r6, #48	; 0x30
 800de6a:	f805 6b01 	strb.w	r6, [r5], #1
 800de6e:	9e00      	ldr	r6, [sp, #0]
 800de70:	1bae      	subs	r6, r5, r6
 800de72:	42b7      	cmp	r7, r6
 800de74:	4602      	mov	r2, r0
 800de76:	460b      	mov	r3, r1
 800de78:	d137      	bne.n	800deea <_dtoa_r+0x722>
 800de7a:	f7f2 fa07 	bl	800028c <__adddf3>
 800de7e:	4642      	mov	r2, r8
 800de80:	464b      	mov	r3, r9
 800de82:	4606      	mov	r6, r0
 800de84:	460f      	mov	r7, r1
 800de86:	f7f2 fe47 	bl	8000b18 <__aeabi_dcmpgt>
 800de8a:	b9c8      	cbnz	r0, 800dec0 <_dtoa_r+0x6f8>
 800de8c:	4642      	mov	r2, r8
 800de8e:	464b      	mov	r3, r9
 800de90:	4630      	mov	r0, r6
 800de92:	4639      	mov	r1, r7
 800de94:	f7f2 fe18 	bl	8000ac8 <__aeabi_dcmpeq>
 800de98:	b110      	cbz	r0, 800dea0 <_dtoa_r+0x6d8>
 800de9a:	9b02      	ldr	r3, [sp, #8]
 800de9c:	07d9      	lsls	r1, r3, #31
 800de9e:	d40f      	bmi.n	800dec0 <_dtoa_r+0x6f8>
 800dea0:	4620      	mov	r0, r4
 800dea2:	4659      	mov	r1, fp
 800dea4:	f000 fe4a 	bl	800eb3c <_Bfree>
 800dea8:	2300      	movs	r3, #0
 800deaa:	702b      	strb	r3, [r5, #0]
 800deac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800deae:	f10a 0001 	add.w	r0, sl, #1
 800deb2:	6018      	str	r0, [r3, #0]
 800deb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	f43f acd8 	beq.w	800d86c <_dtoa_r+0xa4>
 800debc:	601d      	str	r5, [r3, #0]
 800debe:	e4d5      	b.n	800d86c <_dtoa_r+0xa4>
 800dec0:	f8cd a01c 	str.w	sl, [sp, #28]
 800dec4:	462b      	mov	r3, r5
 800dec6:	461d      	mov	r5, r3
 800dec8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800decc:	2a39      	cmp	r2, #57	; 0x39
 800dece:	d108      	bne.n	800dee2 <_dtoa_r+0x71a>
 800ded0:	9a00      	ldr	r2, [sp, #0]
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d1f7      	bne.n	800dec6 <_dtoa_r+0x6fe>
 800ded6:	9a07      	ldr	r2, [sp, #28]
 800ded8:	9900      	ldr	r1, [sp, #0]
 800deda:	3201      	adds	r2, #1
 800dedc:	9207      	str	r2, [sp, #28]
 800dede:	2230      	movs	r2, #48	; 0x30
 800dee0:	700a      	strb	r2, [r1, #0]
 800dee2:	781a      	ldrb	r2, [r3, #0]
 800dee4:	3201      	adds	r2, #1
 800dee6:	701a      	strb	r2, [r3, #0]
 800dee8:	e78c      	b.n	800de04 <_dtoa_r+0x63c>
 800deea:	4b7f      	ldr	r3, [pc, #508]	; (800e0e8 <_dtoa_r+0x920>)
 800deec:	2200      	movs	r2, #0
 800deee:	f7f2 fb83 	bl	80005f8 <__aeabi_dmul>
 800def2:	2200      	movs	r2, #0
 800def4:	2300      	movs	r3, #0
 800def6:	4606      	mov	r6, r0
 800def8:	460f      	mov	r7, r1
 800defa:	f7f2 fde5 	bl	8000ac8 <__aeabi_dcmpeq>
 800defe:	2800      	cmp	r0, #0
 800df00:	d09b      	beq.n	800de3a <_dtoa_r+0x672>
 800df02:	e7cd      	b.n	800dea0 <_dtoa_r+0x6d8>
 800df04:	9a08      	ldr	r2, [sp, #32]
 800df06:	2a00      	cmp	r2, #0
 800df08:	f000 80c4 	beq.w	800e094 <_dtoa_r+0x8cc>
 800df0c:	9a05      	ldr	r2, [sp, #20]
 800df0e:	2a01      	cmp	r2, #1
 800df10:	f300 80a8 	bgt.w	800e064 <_dtoa_r+0x89c>
 800df14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800df16:	2a00      	cmp	r2, #0
 800df18:	f000 80a0 	beq.w	800e05c <_dtoa_r+0x894>
 800df1c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800df20:	9e06      	ldr	r6, [sp, #24]
 800df22:	4645      	mov	r5, r8
 800df24:	9a04      	ldr	r2, [sp, #16]
 800df26:	2101      	movs	r1, #1
 800df28:	441a      	add	r2, r3
 800df2a:	4620      	mov	r0, r4
 800df2c:	4498      	add	r8, r3
 800df2e:	9204      	str	r2, [sp, #16]
 800df30:	f000 ff0a 	bl	800ed48 <__i2b>
 800df34:	4607      	mov	r7, r0
 800df36:	2d00      	cmp	r5, #0
 800df38:	dd0b      	ble.n	800df52 <_dtoa_r+0x78a>
 800df3a:	9b04      	ldr	r3, [sp, #16]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	dd08      	ble.n	800df52 <_dtoa_r+0x78a>
 800df40:	42ab      	cmp	r3, r5
 800df42:	9a04      	ldr	r2, [sp, #16]
 800df44:	bfa8      	it	ge
 800df46:	462b      	movge	r3, r5
 800df48:	eba8 0803 	sub.w	r8, r8, r3
 800df4c:	1aed      	subs	r5, r5, r3
 800df4e:	1ad3      	subs	r3, r2, r3
 800df50:	9304      	str	r3, [sp, #16]
 800df52:	9b06      	ldr	r3, [sp, #24]
 800df54:	b1fb      	cbz	r3, 800df96 <_dtoa_r+0x7ce>
 800df56:	9b08      	ldr	r3, [sp, #32]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	f000 809f 	beq.w	800e09c <_dtoa_r+0x8d4>
 800df5e:	2e00      	cmp	r6, #0
 800df60:	dd11      	ble.n	800df86 <_dtoa_r+0x7be>
 800df62:	4639      	mov	r1, r7
 800df64:	4632      	mov	r2, r6
 800df66:	4620      	mov	r0, r4
 800df68:	f000 ffaa 	bl	800eec0 <__pow5mult>
 800df6c:	465a      	mov	r2, fp
 800df6e:	4601      	mov	r1, r0
 800df70:	4607      	mov	r7, r0
 800df72:	4620      	mov	r0, r4
 800df74:	f000 fefe 	bl	800ed74 <__multiply>
 800df78:	4659      	mov	r1, fp
 800df7a:	9007      	str	r0, [sp, #28]
 800df7c:	4620      	mov	r0, r4
 800df7e:	f000 fddd 	bl	800eb3c <_Bfree>
 800df82:	9b07      	ldr	r3, [sp, #28]
 800df84:	469b      	mov	fp, r3
 800df86:	9b06      	ldr	r3, [sp, #24]
 800df88:	1b9a      	subs	r2, r3, r6
 800df8a:	d004      	beq.n	800df96 <_dtoa_r+0x7ce>
 800df8c:	4659      	mov	r1, fp
 800df8e:	4620      	mov	r0, r4
 800df90:	f000 ff96 	bl	800eec0 <__pow5mult>
 800df94:	4683      	mov	fp, r0
 800df96:	2101      	movs	r1, #1
 800df98:	4620      	mov	r0, r4
 800df9a:	f000 fed5 	bl	800ed48 <__i2b>
 800df9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	4606      	mov	r6, r0
 800dfa4:	dd7c      	ble.n	800e0a0 <_dtoa_r+0x8d8>
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	4601      	mov	r1, r0
 800dfaa:	4620      	mov	r0, r4
 800dfac:	f000 ff88 	bl	800eec0 <__pow5mult>
 800dfb0:	9b05      	ldr	r3, [sp, #20]
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	4606      	mov	r6, r0
 800dfb6:	dd76      	ble.n	800e0a6 <_dtoa_r+0x8de>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	9306      	str	r3, [sp, #24]
 800dfbc:	6933      	ldr	r3, [r6, #16]
 800dfbe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dfc2:	6918      	ldr	r0, [r3, #16]
 800dfc4:	f000 fe70 	bl	800eca8 <__hi0bits>
 800dfc8:	f1c0 0020 	rsb	r0, r0, #32
 800dfcc:	9b04      	ldr	r3, [sp, #16]
 800dfce:	4418      	add	r0, r3
 800dfd0:	f010 001f 	ands.w	r0, r0, #31
 800dfd4:	f000 8086 	beq.w	800e0e4 <_dtoa_r+0x91c>
 800dfd8:	f1c0 0320 	rsb	r3, r0, #32
 800dfdc:	2b04      	cmp	r3, #4
 800dfde:	dd7f      	ble.n	800e0e0 <_dtoa_r+0x918>
 800dfe0:	f1c0 001c 	rsb	r0, r0, #28
 800dfe4:	9b04      	ldr	r3, [sp, #16]
 800dfe6:	4403      	add	r3, r0
 800dfe8:	4480      	add	r8, r0
 800dfea:	4405      	add	r5, r0
 800dfec:	9304      	str	r3, [sp, #16]
 800dfee:	f1b8 0f00 	cmp.w	r8, #0
 800dff2:	dd05      	ble.n	800e000 <_dtoa_r+0x838>
 800dff4:	4659      	mov	r1, fp
 800dff6:	4642      	mov	r2, r8
 800dff8:	4620      	mov	r0, r4
 800dffa:	f000 ffbb 	bl	800ef74 <__lshift>
 800dffe:	4683      	mov	fp, r0
 800e000:	9b04      	ldr	r3, [sp, #16]
 800e002:	2b00      	cmp	r3, #0
 800e004:	dd05      	ble.n	800e012 <_dtoa_r+0x84a>
 800e006:	4631      	mov	r1, r6
 800e008:	461a      	mov	r2, r3
 800e00a:	4620      	mov	r0, r4
 800e00c:	f000 ffb2 	bl	800ef74 <__lshift>
 800e010:	4606      	mov	r6, r0
 800e012:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e014:	2b00      	cmp	r3, #0
 800e016:	d069      	beq.n	800e0ec <_dtoa_r+0x924>
 800e018:	4631      	mov	r1, r6
 800e01a:	4658      	mov	r0, fp
 800e01c:	f001 f816 	bl	800f04c <__mcmp>
 800e020:	2800      	cmp	r0, #0
 800e022:	da63      	bge.n	800e0ec <_dtoa_r+0x924>
 800e024:	2300      	movs	r3, #0
 800e026:	4659      	mov	r1, fp
 800e028:	220a      	movs	r2, #10
 800e02a:	4620      	mov	r0, r4
 800e02c:	f000 fda8 	bl	800eb80 <__multadd>
 800e030:	9b08      	ldr	r3, [sp, #32]
 800e032:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e036:	4683      	mov	fp, r0
 800e038:	2b00      	cmp	r3, #0
 800e03a:	f000 818f 	beq.w	800e35c <_dtoa_r+0xb94>
 800e03e:	4639      	mov	r1, r7
 800e040:	2300      	movs	r3, #0
 800e042:	220a      	movs	r2, #10
 800e044:	4620      	mov	r0, r4
 800e046:	f000 fd9b 	bl	800eb80 <__multadd>
 800e04a:	f1b9 0f00 	cmp.w	r9, #0
 800e04e:	4607      	mov	r7, r0
 800e050:	f300 808e 	bgt.w	800e170 <_dtoa_r+0x9a8>
 800e054:	9b05      	ldr	r3, [sp, #20]
 800e056:	2b02      	cmp	r3, #2
 800e058:	dc50      	bgt.n	800e0fc <_dtoa_r+0x934>
 800e05a:	e089      	b.n	800e170 <_dtoa_r+0x9a8>
 800e05c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e05e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e062:	e75d      	b.n	800df20 <_dtoa_r+0x758>
 800e064:	9b01      	ldr	r3, [sp, #4]
 800e066:	1e5e      	subs	r6, r3, #1
 800e068:	9b06      	ldr	r3, [sp, #24]
 800e06a:	42b3      	cmp	r3, r6
 800e06c:	bfbf      	itttt	lt
 800e06e:	9b06      	ldrlt	r3, [sp, #24]
 800e070:	9606      	strlt	r6, [sp, #24]
 800e072:	1af2      	sublt	r2, r6, r3
 800e074:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e076:	bfb6      	itet	lt
 800e078:	189b      	addlt	r3, r3, r2
 800e07a:	1b9e      	subge	r6, r3, r6
 800e07c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e07e:	9b01      	ldr	r3, [sp, #4]
 800e080:	bfb8      	it	lt
 800e082:	2600      	movlt	r6, #0
 800e084:	2b00      	cmp	r3, #0
 800e086:	bfb5      	itete	lt
 800e088:	eba8 0503 	sublt.w	r5, r8, r3
 800e08c:	9b01      	ldrge	r3, [sp, #4]
 800e08e:	2300      	movlt	r3, #0
 800e090:	4645      	movge	r5, r8
 800e092:	e747      	b.n	800df24 <_dtoa_r+0x75c>
 800e094:	9e06      	ldr	r6, [sp, #24]
 800e096:	9f08      	ldr	r7, [sp, #32]
 800e098:	4645      	mov	r5, r8
 800e09a:	e74c      	b.n	800df36 <_dtoa_r+0x76e>
 800e09c:	9a06      	ldr	r2, [sp, #24]
 800e09e:	e775      	b.n	800df8c <_dtoa_r+0x7c4>
 800e0a0:	9b05      	ldr	r3, [sp, #20]
 800e0a2:	2b01      	cmp	r3, #1
 800e0a4:	dc18      	bgt.n	800e0d8 <_dtoa_r+0x910>
 800e0a6:	9b02      	ldr	r3, [sp, #8]
 800e0a8:	b9b3      	cbnz	r3, 800e0d8 <_dtoa_r+0x910>
 800e0aa:	9b03      	ldr	r3, [sp, #12]
 800e0ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e0b0:	b9a3      	cbnz	r3, 800e0dc <_dtoa_r+0x914>
 800e0b2:	9b03      	ldr	r3, [sp, #12]
 800e0b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e0b8:	0d1b      	lsrs	r3, r3, #20
 800e0ba:	051b      	lsls	r3, r3, #20
 800e0bc:	b12b      	cbz	r3, 800e0ca <_dtoa_r+0x902>
 800e0be:	9b04      	ldr	r3, [sp, #16]
 800e0c0:	3301      	adds	r3, #1
 800e0c2:	9304      	str	r3, [sp, #16]
 800e0c4:	f108 0801 	add.w	r8, r8, #1
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	9306      	str	r3, [sp, #24]
 800e0cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	f47f af74 	bne.w	800dfbc <_dtoa_r+0x7f4>
 800e0d4:	2001      	movs	r0, #1
 800e0d6:	e779      	b.n	800dfcc <_dtoa_r+0x804>
 800e0d8:	2300      	movs	r3, #0
 800e0da:	e7f6      	b.n	800e0ca <_dtoa_r+0x902>
 800e0dc:	9b02      	ldr	r3, [sp, #8]
 800e0de:	e7f4      	b.n	800e0ca <_dtoa_r+0x902>
 800e0e0:	d085      	beq.n	800dfee <_dtoa_r+0x826>
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	301c      	adds	r0, #28
 800e0e6:	e77d      	b.n	800dfe4 <_dtoa_r+0x81c>
 800e0e8:	40240000 	.word	0x40240000
 800e0ec:	9b01      	ldr	r3, [sp, #4]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	dc38      	bgt.n	800e164 <_dtoa_r+0x99c>
 800e0f2:	9b05      	ldr	r3, [sp, #20]
 800e0f4:	2b02      	cmp	r3, #2
 800e0f6:	dd35      	ble.n	800e164 <_dtoa_r+0x99c>
 800e0f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e0fc:	f1b9 0f00 	cmp.w	r9, #0
 800e100:	d10d      	bne.n	800e11e <_dtoa_r+0x956>
 800e102:	4631      	mov	r1, r6
 800e104:	464b      	mov	r3, r9
 800e106:	2205      	movs	r2, #5
 800e108:	4620      	mov	r0, r4
 800e10a:	f000 fd39 	bl	800eb80 <__multadd>
 800e10e:	4601      	mov	r1, r0
 800e110:	4606      	mov	r6, r0
 800e112:	4658      	mov	r0, fp
 800e114:	f000 ff9a 	bl	800f04c <__mcmp>
 800e118:	2800      	cmp	r0, #0
 800e11a:	f73f adbd 	bgt.w	800dc98 <_dtoa_r+0x4d0>
 800e11e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e120:	9d00      	ldr	r5, [sp, #0]
 800e122:	ea6f 0a03 	mvn.w	sl, r3
 800e126:	f04f 0800 	mov.w	r8, #0
 800e12a:	4631      	mov	r1, r6
 800e12c:	4620      	mov	r0, r4
 800e12e:	f000 fd05 	bl	800eb3c <_Bfree>
 800e132:	2f00      	cmp	r7, #0
 800e134:	f43f aeb4 	beq.w	800dea0 <_dtoa_r+0x6d8>
 800e138:	f1b8 0f00 	cmp.w	r8, #0
 800e13c:	d005      	beq.n	800e14a <_dtoa_r+0x982>
 800e13e:	45b8      	cmp	r8, r7
 800e140:	d003      	beq.n	800e14a <_dtoa_r+0x982>
 800e142:	4641      	mov	r1, r8
 800e144:	4620      	mov	r0, r4
 800e146:	f000 fcf9 	bl	800eb3c <_Bfree>
 800e14a:	4639      	mov	r1, r7
 800e14c:	4620      	mov	r0, r4
 800e14e:	f000 fcf5 	bl	800eb3c <_Bfree>
 800e152:	e6a5      	b.n	800dea0 <_dtoa_r+0x6d8>
 800e154:	2600      	movs	r6, #0
 800e156:	4637      	mov	r7, r6
 800e158:	e7e1      	b.n	800e11e <_dtoa_r+0x956>
 800e15a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e15c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e160:	4637      	mov	r7, r6
 800e162:	e599      	b.n	800dc98 <_dtoa_r+0x4d0>
 800e164:	9b08      	ldr	r3, [sp, #32]
 800e166:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	f000 80fd 	beq.w	800e36a <_dtoa_r+0xba2>
 800e170:	2d00      	cmp	r5, #0
 800e172:	dd05      	ble.n	800e180 <_dtoa_r+0x9b8>
 800e174:	4639      	mov	r1, r7
 800e176:	462a      	mov	r2, r5
 800e178:	4620      	mov	r0, r4
 800e17a:	f000 fefb 	bl	800ef74 <__lshift>
 800e17e:	4607      	mov	r7, r0
 800e180:	9b06      	ldr	r3, [sp, #24]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d05c      	beq.n	800e240 <_dtoa_r+0xa78>
 800e186:	6879      	ldr	r1, [r7, #4]
 800e188:	4620      	mov	r0, r4
 800e18a:	f000 fc97 	bl	800eabc <_Balloc>
 800e18e:	4605      	mov	r5, r0
 800e190:	b928      	cbnz	r0, 800e19e <_dtoa_r+0x9d6>
 800e192:	4b80      	ldr	r3, [pc, #512]	; (800e394 <_dtoa_r+0xbcc>)
 800e194:	4602      	mov	r2, r0
 800e196:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e19a:	f7ff bb2e 	b.w	800d7fa <_dtoa_r+0x32>
 800e19e:	693a      	ldr	r2, [r7, #16]
 800e1a0:	3202      	adds	r2, #2
 800e1a2:	0092      	lsls	r2, r2, #2
 800e1a4:	f107 010c 	add.w	r1, r7, #12
 800e1a8:	300c      	adds	r0, #12
 800e1aa:	f7fd fd17 	bl	800bbdc <memcpy>
 800e1ae:	2201      	movs	r2, #1
 800e1b0:	4629      	mov	r1, r5
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	f000 fede 	bl	800ef74 <__lshift>
 800e1b8:	9b00      	ldr	r3, [sp, #0]
 800e1ba:	3301      	adds	r3, #1
 800e1bc:	9301      	str	r3, [sp, #4]
 800e1be:	9b00      	ldr	r3, [sp, #0]
 800e1c0:	444b      	add	r3, r9
 800e1c2:	9307      	str	r3, [sp, #28]
 800e1c4:	9b02      	ldr	r3, [sp, #8]
 800e1c6:	f003 0301 	and.w	r3, r3, #1
 800e1ca:	46b8      	mov	r8, r7
 800e1cc:	9306      	str	r3, [sp, #24]
 800e1ce:	4607      	mov	r7, r0
 800e1d0:	9b01      	ldr	r3, [sp, #4]
 800e1d2:	4631      	mov	r1, r6
 800e1d4:	3b01      	subs	r3, #1
 800e1d6:	4658      	mov	r0, fp
 800e1d8:	9302      	str	r3, [sp, #8]
 800e1da:	f7ff fa67 	bl	800d6ac <quorem>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	3330      	adds	r3, #48	; 0x30
 800e1e2:	9004      	str	r0, [sp, #16]
 800e1e4:	4641      	mov	r1, r8
 800e1e6:	4658      	mov	r0, fp
 800e1e8:	9308      	str	r3, [sp, #32]
 800e1ea:	f000 ff2f 	bl	800f04c <__mcmp>
 800e1ee:	463a      	mov	r2, r7
 800e1f0:	4681      	mov	r9, r0
 800e1f2:	4631      	mov	r1, r6
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	f000 ff45 	bl	800f084 <__mdiff>
 800e1fa:	68c2      	ldr	r2, [r0, #12]
 800e1fc:	9b08      	ldr	r3, [sp, #32]
 800e1fe:	4605      	mov	r5, r0
 800e200:	bb02      	cbnz	r2, 800e244 <_dtoa_r+0xa7c>
 800e202:	4601      	mov	r1, r0
 800e204:	4658      	mov	r0, fp
 800e206:	f000 ff21 	bl	800f04c <__mcmp>
 800e20a:	9b08      	ldr	r3, [sp, #32]
 800e20c:	4602      	mov	r2, r0
 800e20e:	4629      	mov	r1, r5
 800e210:	4620      	mov	r0, r4
 800e212:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e216:	f000 fc91 	bl	800eb3c <_Bfree>
 800e21a:	9b05      	ldr	r3, [sp, #20]
 800e21c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e21e:	9d01      	ldr	r5, [sp, #4]
 800e220:	ea43 0102 	orr.w	r1, r3, r2
 800e224:	9b06      	ldr	r3, [sp, #24]
 800e226:	430b      	orrs	r3, r1
 800e228:	9b08      	ldr	r3, [sp, #32]
 800e22a:	d10d      	bne.n	800e248 <_dtoa_r+0xa80>
 800e22c:	2b39      	cmp	r3, #57	; 0x39
 800e22e:	d029      	beq.n	800e284 <_dtoa_r+0xabc>
 800e230:	f1b9 0f00 	cmp.w	r9, #0
 800e234:	dd01      	ble.n	800e23a <_dtoa_r+0xa72>
 800e236:	9b04      	ldr	r3, [sp, #16]
 800e238:	3331      	adds	r3, #49	; 0x31
 800e23a:	9a02      	ldr	r2, [sp, #8]
 800e23c:	7013      	strb	r3, [r2, #0]
 800e23e:	e774      	b.n	800e12a <_dtoa_r+0x962>
 800e240:	4638      	mov	r0, r7
 800e242:	e7b9      	b.n	800e1b8 <_dtoa_r+0x9f0>
 800e244:	2201      	movs	r2, #1
 800e246:	e7e2      	b.n	800e20e <_dtoa_r+0xa46>
 800e248:	f1b9 0f00 	cmp.w	r9, #0
 800e24c:	db06      	blt.n	800e25c <_dtoa_r+0xa94>
 800e24e:	9905      	ldr	r1, [sp, #20]
 800e250:	ea41 0909 	orr.w	r9, r1, r9
 800e254:	9906      	ldr	r1, [sp, #24]
 800e256:	ea59 0101 	orrs.w	r1, r9, r1
 800e25a:	d120      	bne.n	800e29e <_dtoa_r+0xad6>
 800e25c:	2a00      	cmp	r2, #0
 800e25e:	ddec      	ble.n	800e23a <_dtoa_r+0xa72>
 800e260:	4659      	mov	r1, fp
 800e262:	2201      	movs	r2, #1
 800e264:	4620      	mov	r0, r4
 800e266:	9301      	str	r3, [sp, #4]
 800e268:	f000 fe84 	bl	800ef74 <__lshift>
 800e26c:	4631      	mov	r1, r6
 800e26e:	4683      	mov	fp, r0
 800e270:	f000 feec 	bl	800f04c <__mcmp>
 800e274:	2800      	cmp	r0, #0
 800e276:	9b01      	ldr	r3, [sp, #4]
 800e278:	dc02      	bgt.n	800e280 <_dtoa_r+0xab8>
 800e27a:	d1de      	bne.n	800e23a <_dtoa_r+0xa72>
 800e27c:	07da      	lsls	r2, r3, #31
 800e27e:	d5dc      	bpl.n	800e23a <_dtoa_r+0xa72>
 800e280:	2b39      	cmp	r3, #57	; 0x39
 800e282:	d1d8      	bne.n	800e236 <_dtoa_r+0xa6e>
 800e284:	9a02      	ldr	r2, [sp, #8]
 800e286:	2339      	movs	r3, #57	; 0x39
 800e288:	7013      	strb	r3, [r2, #0]
 800e28a:	462b      	mov	r3, r5
 800e28c:	461d      	mov	r5, r3
 800e28e:	3b01      	subs	r3, #1
 800e290:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e294:	2a39      	cmp	r2, #57	; 0x39
 800e296:	d050      	beq.n	800e33a <_dtoa_r+0xb72>
 800e298:	3201      	adds	r2, #1
 800e29a:	701a      	strb	r2, [r3, #0]
 800e29c:	e745      	b.n	800e12a <_dtoa_r+0x962>
 800e29e:	2a00      	cmp	r2, #0
 800e2a0:	dd03      	ble.n	800e2aa <_dtoa_r+0xae2>
 800e2a2:	2b39      	cmp	r3, #57	; 0x39
 800e2a4:	d0ee      	beq.n	800e284 <_dtoa_r+0xabc>
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	e7c7      	b.n	800e23a <_dtoa_r+0xa72>
 800e2aa:	9a01      	ldr	r2, [sp, #4]
 800e2ac:	9907      	ldr	r1, [sp, #28]
 800e2ae:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e2b2:	428a      	cmp	r2, r1
 800e2b4:	d02a      	beq.n	800e30c <_dtoa_r+0xb44>
 800e2b6:	4659      	mov	r1, fp
 800e2b8:	2300      	movs	r3, #0
 800e2ba:	220a      	movs	r2, #10
 800e2bc:	4620      	mov	r0, r4
 800e2be:	f000 fc5f 	bl	800eb80 <__multadd>
 800e2c2:	45b8      	cmp	r8, r7
 800e2c4:	4683      	mov	fp, r0
 800e2c6:	f04f 0300 	mov.w	r3, #0
 800e2ca:	f04f 020a 	mov.w	r2, #10
 800e2ce:	4641      	mov	r1, r8
 800e2d0:	4620      	mov	r0, r4
 800e2d2:	d107      	bne.n	800e2e4 <_dtoa_r+0xb1c>
 800e2d4:	f000 fc54 	bl	800eb80 <__multadd>
 800e2d8:	4680      	mov	r8, r0
 800e2da:	4607      	mov	r7, r0
 800e2dc:	9b01      	ldr	r3, [sp, #4]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	9301      	str	r3, [sp, #4]
 800e2e2:	e775      	b.n	800e1d0 <_dtoa_r+0xa08>
 800e2e4:	f000 fc4c 	bl	800eb80 <__multadd>
 800e2e8:	4639      	mov	r1, r7
 800e2ea:	4680      	mov	r8, r0
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	220a      	movs	r2, #10
 800e2f0:	4620      	mov	r0, r4
 800e2f2:	f000 fc45 	bl	800eb80 <__multadd>
 800e2f6:	4607      	mov	r7, r0
 800e2f8:	e7f0      	b.n	800e2dc <_dtoa_r+0xb14>
 800e2fa:	f1b9 0f00 	cmp.w	r9, #0
 800e2fe:	9a00      	ldr	r2, [sp, #0]
 800e300:	bfcc      	ite	gt
 800e302:	464d      	movgt	r5, r9
 800e304:	2501      	movle	r5, #1
 800e306:	4415      	add	r5, r2
 800e308:	f04f 0800 	mov.w	r8, #0
 800e30c:	4659      	mov	r1, fp
 800e30e:	2201      	movs	r2, #1
 800e310:	4620      	mov	r0, r4
 800e312:	9301      	str	r3, [sp, #4]
 800e314:	f000 fe2e 	bl	800ef74 <__lshift>
 800e318:	4631      	mov	r1, r6
 800e31a:	4683      	mov	fp, r0
 800e31c:	f000 fe96 	bl	800f04c <__mcmp>
 800e320:	2800      	cmp	r0, #0
 800e322:	dcb2      	bgt.n	800e28a <_dtoa_r+0xac2>
 800e324:	d102      	bne.n	800e32c <_dtoa_r+0xb64>
 800e326:	9b01      	ldr	r3, [sp, #4]
 800e328:	07db      	lsls	r3, r3, #31
 800e32a:	d4ae      	bmi.n	800e28a <_dtoa_r+0xac2>
 800e32c:	462b      	mov	r3, r5
 800e32e:	461d      	mov	r5, r3
 800e330:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e334:	2a30      	cmp	r2, #48	; 0x30
 800e336:	d0fa      	beq.n	800e32e <_dtoa_r+0xb66>
 800e338:	e6f7      	b.n	800e12a <_dtoa_r+0x962>
 800e33a:	9a00      	ldr	r2, [sp, #0]
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d1a5      	bne.n	800e28c <_dtoa_r+0xac4>
 800e340:	f10a 0a01 	add.w	sl, sl, #1
 800e344:	2331      	movs	r3, #49	; 0x31
 800e346:	e779      	b.n	800e23c <_dtoa_r+0xa74>
 800e348:	4b13      	ldr	r3, [pc, #76]	; (800e398 <_dtoa_r+0xbd0>)
 800e34a:	f7ff baaf 	b.w	800d8ac <_dtoa_r+0xe4>
 800e34e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e350:	2b00      	cmp	r3, #0
 800e352:	f47f aa86 	bne.w	800d862 <_dtoa_r+0x9a>
 800e356:	4b11      	ldr	r3, [pc, #68]	; (800e39c <_dtoa_r+0xbd4>)
 800e358:	f7ff baa8 	b.w	800d8ac <_dtoa_r+0xe4>
 800e35c:	f1b9 0f00 	cmp.w	r9, #0
 800e360:	dc03      	bgt.n	800e36a <_dtoa_r+0xba2>
 800e362:	9b05      	ldr	r3, [sp, #20]
 800e364:	2b02      	cmp	r3, #2
 800e366:	f73f aec9 	bgt.w	800e0fc <_dtoa_r+0x934>
 800e36a:	9d00      	ldr	r5, [sp, #0]
 800e36c:	4631      	mov	r1, r6
 800e36e:	4658      	mov	r0, fp
 800e370:	f7ff f99c 	bl	800d6ac <quorem>
 800e374:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e378:	f805 3b01 	strb.w	r3, [r5], #1
 800e37c:	9a00      	ldr	r2, [sp, #0]
 800e37e:	1aaa      	subs	r2, r5, r2
 800e380:	4591      	cmp	r9, r2
 800e382:	ddba      	ble.n	800e2fa <_dtoa_r+0xb32>
 800e384:	4659      	mov	r1, fp
 800e386:	2300      	movs	r3, #0
 800e388:	220a      	movs	r2, #10
 800e38a:	4620      	mov	r0, r4
 800e38c:	f000 fbf8 	bl	800eb80 <__multadd>
 800e390:	4683      	mov	fp, r0
 800e392:	e7eb      	b.n	800e36c <_dtoa_r+0xba4>
 800e394:	08015074 	.word	0x08015074
 800e398:	08014e74 	.word	0x08014e74
 800e39c:	08014ff1 	.word	0x08014ff1

0800e3a0 <rshift>:
 800e3a0:	6903      	ldr	r3, [r0, #16]
 800e3a2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e3a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e3aa:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e3ae:	f100 0414 	add.w	r4, r0, #20
 800e3b2:	dd45      	ble.n	800e440 <rshift+0xa0>
 800e3b4:	f011 011f 	ands.w	r1, r1, #31
 800e3b8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e3bc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e3c0:	d10c      	bne.n	800e3dc <rshift+0x3c>
 800e3c2:	f100 0710 	add.w	r7, r0, #16
 800e3c6:	4629      	mov	r1, r5
 800e3c8:	42b1      	cmp	r1, r6
 800e3ca:	d334      	bcc.n	800e436 <rshift+0x96>
 800e3cc:	1a9b      	subs	r3, r3, r2
 800e3ce:	009b      	lsls	r3, r3, #2
 800e3d0:	1eea      	subs	r2, r5, #3
 800e3d2:	4296      	cmp	r6, r2
 800e3d4:	bf38      	it	cc
 800e3d6:	2300      	movcc	r3, #0
 800e3d8:	4423      	add	r3, r4
 800e3da:	e015      	b.n	800e408 <rshift+0x68>
 800e3dc:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e3e0:	f1c1 0820 	rsb	r8, r1, #32
 800e3e4:	40cf      	lsrs	r7, r1
 800e3e6:	f105 0e04 	add.w	lr, r5, #4
 800e3ea:	46a1      	mov	r9, r4
 800e3ec:	4576      	cmp	r6, lr
 800e3ee:	46f4      	mov	ip, lr
 800e3f0:	d815      	bhi.n	800e41e <rshift+0x7e>
 800e3f2:	1a9b      	subs	r3, r3, r2
 800e3f4:	009a      	lsls	r2, r3, #2
 800e3f6:	3a04      	subs	r2, #4
 800e3f8:	3501      	adds	r5, #1
 800e3fa:	42ae      	cmp	r6, r5
 800e3fc:	bf38      	it	cc
 800e3fe:	2200      	movcc	r2, #0
 800e400:	18a3      	adds	r3, r4, r2
 800e402:	50a7      	str	r7, [r4, r2]
 800e404:	b107      	cbz	r7, 800e408 <rshift+0x68>
 800e406:	3304      	adds	r3, #4
 800e408:	1b1a      	subs	r2, r3, r4
 800e40a:	42a3      	cmp	r3, r4
 800e40c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e410:	bf08      	it	eq
 800e412:	2300      	moveq	r3, #0
 800e414:	6102      	str	r2, [r0, #16]
 800e416:	bf08      	it	eq
 800e418:	6143      	streq	r3, [r0, #20]
 800e41a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e41e:	f8dc c000 	ldr.w	ip, [ip]
 800e422:	fa0c fc08 	lsl.w	ip, ip, r8
 800e426:	ea4c 0707 	orr.w	r7, ip, r7
 800e42a:	f849 7b04 	str.w	r7, [r9], #4
 800e42e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e432:	40cf      	lsrs	r7, r1
 800e434:	e7da      	b.n	800e3ec <rshift+0x4c>
 800e436:	f851 cb04 	ldr.w	ip, [r1], #4
 800e43a:	f847 cf04 	str.w	ip, [r7, #4]!
 800e43e:	e7c3      	b.n	800e3c8 <rshift+0x28>
 800e440:	4623      	mov	r3, r4
 800e442:	e7e1      	b.n	800e408 <rshift+0x68>

0800e444 <__hexdig_fun>:
 800e444:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e448:	2b09      	cmp	r3, #9
 800e44a:	d802      	bhi.n	800e452 <__hexdig_fun+0xe>
 800e44c:	3820      	subs	r0, #32
 800e44e:	b2c0      	uxtb	r0, r0
 800e450:	4770      	bx	lr
 800e452:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e456:	2b05      	cmp	r3, #5
 800e458:	d801      	bhi.n	800e45e <__hexdig_fun+0x1a>
 800e45a:	3847      	subs	r0, #71	; 0x47
 800e45c:	e7f7      	b.n	800e44e <__hexdig_fun+0xa>
 800e45e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e462:	2b05      	cmp	r3, #5
 800e464:	d801      	bhi.n	800e46a <__hexdig_fun+0x26>
 800e466:	3827      	subs	r0, #39	; 0x27
 800e468:	e7f1      	b.n	800e44e <__hexdig_fun+0xa>
 800e46a:	2000      	movs	r0, #0
 800e46c:	4770      	bx	lr
	...

0800e470 <__gethex>:
 800e470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e474:	ed2d 8b02 	vpush	{d8}
 800e478:	b089      	sub	sp, #36	; 0x24
 800e47a:	ee08 0a10 	vmov	s16, r0
 800e47e:	9304      	str	r3, [sp, #16]
 800e480:	4bbc      	ldr	r3, [pc, #752]	; (800e774 <__gethex+0x304>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	9301      	str	r3, [sp, #4]
 800e486:	4618      	mov	r0, r3
 800e488:	468b      	mov	fp, r1
 800e48a:	4690      	mov	r8, r2
 800e48c:	f7f1 fea0 	bl	80001d0 <strlen>
 800e490:	9b01      	ldr	r3, [sp, #4]
 800e492:	f8db 2000 	ldr.w	r2, [fp]
 800e496:	4403      	add	r3, r0
 800e498:	4682      	mov	sl, r0
 800e49a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e49e:	9305      	str	r3, [sp, #20]
 800e4a0:	1c93      	adds	r3, r2, #2
 800e4a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e4a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e4aa:	32fe      	adds	r2, #254	; 0xfe
 800e4ac:	18d1      	adds	r1, r2, r3
 800e4ae:	461f      	mov	r7, r3
 800e4b0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e4b4:	9100      	str	r1, [sp, #0]
 800e4b6:	2830      	cmp	r0, #48	; 0x30
 800e4b8:	d0f8      	beq.n	800e4ac <__gethex+0x3c>
 800e4ba:	f7ff ffc3 	bl	800e444 <__hexdig_fun>
 800e4be:	4604      	mov	r4, r0
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	d13a      	bne.n	800e53a <__gethex+0xca>
 800e4c4:	9901      	ldr	r1, [sp, #4]
 800e4c6:	4652      	mov	r2, sl
 800e4c8:	4638      	mov	r0, r7
 800e4ca:	f001 f9e1 	bl	800f890 <strncmp>
 800e4ce:	4605      	mov	r5, r0
 800e4d0:	2800      	cmp	r0, #0
 800e4d2:	d168      	bne.n	800e5a6 <__gethex+0x136>
 800e4d4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e4d8:	eb07 060a 	add.w	r6, r7, sl
 800e4dc:	f7ff ffb2 	bl	800e444 <__hexdig_fun>
 800e4e0:	2800      	cmp	r0, #0
 800e4e2:	d062      	beq.n	800e5aa <__gethex+0x13a>
 800e4e4:	4633      	mov	r3, r6
 800e4e6:	7818      	ldrb	r0, [r3, #0]
 800e4e8:	2830      	cmp	r0, #48	; 0x30
 800e4ea:	461f      	mov	r7, r3
 800e4ec:	f103 0301 	add.w	r3, r3, #1
 800e4f0:	d0f9      	beq.n	800e4e6 <__gethex+0x76>
 800e4f2:	f7ff ffa7 	bl	800e444 <__hexdig_fun>
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	fab0 f480 	clz	r4, r0
 800e4fc:	0964      	lsrs	r4, r4, #5
 800e4fe:	4635      	mov	r5, r6
 800e500:	9300      	str	r3, [sp, #0]
 800e502:	463a      	mov	r2, r7
 800e504:	4616      	mov	r6, r2
 800e506:	3201      	adds	r2, #1
 800e508:	7830      	ldrb	r0, [r6, #0]
 800e50a:	f7ff ff9b 	bl	800e444 <__hexdig_fun>
 800e50e:	2800      	cmp	r0, #0
 800e510:	d1f8      	bne.n	800e504 <__gethex+0x94>
 800e512:	9901      	ldr	r1, [sp, #4]
 800e514:	4652      	mov	r2, sl
 800e516:	4630      	mov	r0, r6
 800e518:	f001 f9ba 	bl	800f890 <strncmp>
 800e51c:	b980      	cbnz	r0, 800e540 <__gethex+0xd0>
 800e51e:	b94d      	cbnz	r5, 800e534 <__gethex+0xc4>
 800e520:	eb06 050a 	add.w	r5, r6, sl
 800e524:	462a      	mov	r2, r5
 800e526:	4616      	mov	r6, r2
 800e528:	3201      	adds	r2, #1
 800e52a:	7830      	ldrb	r0, [r6, #0]
 800e52c:	f7ff ff8a 	bl	800e444 <__hexdig_fun>
 800e530:	2800      	cmp	r0, #0
 800e532:	d1f8      	bne.n	800e526 <__gethex+0xb6>
 800e534:	1bad      	subs	r5, r5, r6
 800e536:	00ad      	lsls	r5, r5, #2
 800e538:	e004      	b.n	800e544 <__gethex+0xd4>
 800e53a:	2400      	movs	r4, #0
 800e53c:	4625      	mov	r5, r4
 800e53e:	e7e0      	b.n	800e502 <__gethex+0x92>
 800e540:	2d00      	cmp	r5, #0
 800e542:	d1f7      	bne.n	800e534 <__gethex+0xc4>
 800e544:	7833      	ldrb	r3, [r6, #0]
 800e546:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e54a:	2b50      	cmp	r3, #80	; 0x50
 800e54c:	d13b      	bne.n	800e5c6 <__gethex+0x156>
 800e54e:	7873      	ldrb	r3, [r6, #1]
 800e550:	2b2b      	cmp	r3, #43	; 0x2b
 800e552:	d02c      	beq.n	800e5ae <__gethex+0x13e>
 800e554:	2b2d      	cmp	r3, #45	; 0x2d
 800e556:	d02e      	beq.n	800e5b6 <__gethex+0x146>
 800e558:	1c71      	adds	r1, r6, #1
 800e55a:	f04f 0900 	mov.w	r9, #0
 800e55e:	7808      	ldrb	r0, [r1, #0]
 800e560:	f7ff ff70 	bl	800e444 <__hexdig_fun>
 800e564:	1e43      	subs	r3, r0, #1
 800e566:	b2db      	uxtb	r3, r3
 800e568:	2b18      	cmp	r3, #24
 800e56a:	d82c      	bhi.n	800e5c6 <__gethex+0x156>
 800e56c:	f1a0 0210 	sub.w	r2, r0, #16
 800e570:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e574:	f7ff ff66 	bl	800e444 <__hexdig_fun>
 800e578:	1e43      	subs	r3, r0, #1
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	2b18      	cmp	r3, #24
 800e57e:	d91d      	bls.n	800e5bc <__gethex+0x14c>
 800e580:	f1b9 0f00 	cmp.w	r9, #0
 800e584:	d000      	beq.n	800e588 <__gethex+0x118>
 800e586:	4252      	negs	r2, r2
 800e588:	4415      	add	r5, r2
 800e58a:	f8cb 1000 	str.w	r1, [fp]
 800e58e:	b1e4      	cbz	r4, 800e5ca <__gethex+0x15a>
 800e590:	9b00      	ldr	r3, [sp, #0]
 800e592:	2b00      	cmp	r3, #0
 800e594:	bf14      	ite	ne
 800e596:	2700      	movne	r7, #0
 800e598:	2706      	moveq	r7, #6
 800e59a:	4638      	mov	r0, r7
 800e59c:	b009      	add	sp, #36	; 0x24
 800e59e:	ecbd 8b02 	vpop	{d8}
 800e5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5a6:	463e      	mov	r6, r7
 800e5a8:	4625      	mov	r5, r4
 800e5aa:	2401      	movs	r4, #1
 800e5ac:	e7ca      	b.n	800e544 <__gethex+0xd4>
 800e5ae:	f04f 0900 	mov.w	r9, #0
 800e5b2:	1cb1      	adds	r1, r6, #2
 800e5b4:	e7d3      	b.n	800e55e <__gethex+0xee>
 800e5b6:	f04f 0901 	mov.w	r9, #1
 800e5ba:	e7fa      	b.n	800e5b2 <__gethex+0x142>
 800e5bc:	230a      	movs	r3, #10
 800e5be:	fb03 0202 	mla	r2, r3, r2, r0
 800e5c2:	3a10      	subs	r2, #16
 800e5c4:	e7d4      	b.n	800e570 <__gethex+0x100>
 800e5c6:	4631      	mov	r1, r6
 800e5c8:	e7df      	b.n	800e58a <__gethex+0x11a>
 800e5ca:	1bf3      	subs	r3, r6, r7
 800e5cc:	3b01      	subs	r3, #1
 800e5ce:	4621      	mov	r1, r4
 800e5d0:	2b07      	cmp	r3, #7
 800e5d2:	dc0b      	bgt.n	800e5ec <__gethex+0x17c>
 800e5d4:	ee18 0a10 	vmov	r0, s16
 800e5d8:	f000 fa70 	bl	800eabc <_Balloc>
 800e5dc:	4604      	mov	r4, r0
 800e5de:	b940      	cbnz	r0, 800e5f2 <__gethex+0x182>
 800e5e0:	4b65      	ldr	r3, [pc, #404]	; (800e778 <__gethex+0x308>)
 800e5e2:	4602      	mov	r2, r0
 800e5e4:	21de      	movs	r1, #222	; 0xde
 800e5e6:	4865      	ldr	r0, [pc, #404]	; (800e77c <__gethex+0x30c>)
 800e5e8:	f001 f972 	bl	800f8d0 <__assert_func>
 800e5ec:	3101      	adds	r1, #1
 800e5ee:	105b      	asrs	r3, r3, #1
 800e5f0:	e7ee      	b.n	800e5d0 <__gethex+0x160>
 800e5f2:	f100 0914 	add.w	r9, r0, #20
 800e5f6:	f04f 0b00 	mov.w	fp, #0
 800e5fa:	f1ca 0301 	rsb	r3, sl, #1
 800e5fe:	f8cd 9008 	str.w	r9, [sp, #8]
 800e602:	f8cd b000 	str.w	fp, [sp]
 800e606:	9306      	str	r3, [sp, #24]
 800e608:	42b7      	cmp	r7, r6
 800e60a:	d340      	bcc.n	800e68e <__gethex+0x21e>
 800e60c:	9802      	ldr	r0, [sp, #8]
 800e60e:	9b00      	ldr	r3, [sp, #0]
 800e610:	f840 3b04 	str.w	r3, [r0], #4
 800e614:	eba0 0009 	sub.w	r0, r0, r9
 800e618:	1080      	asrs	r0, r0, #2
 800e61a:	0146      	lsls	r6, r0, #5
 800e61c:	6120      	str	r0, [r4, #16]
 800e61e:	4618      	mov	r0, r3
 800e620:	f000 fb42 	bl	800eca8 <__hi0bits>
 800e624:	1a30      	subs	r0, r6, r0
 800e626:	f8d8 6000 	ldr.w	r6, [r8]
 800e62a:	42b0      	cmp	r0, r6
 800e62c:	dd63      	ble.n	800e6f6 <__gethex+0x286>
 800e62e:	1b87      	subs	r7, r0, r6
 800e630:	4639      	mov	r1, r7
 800e632:	4620      	mov	r0, r4
 800e634:	f000 fedc 	bl	800f3f0 <__any_on>
 800e638:	4682      	mov	sl, r0
 800e63a:	b1a8      	cbz	r0, 800e668 <__gethex+0x1f8>
 800e63c:	1e7b      	subs	r3, r7, #1
 800e63e:	1159      	asrs	r1, r3, #5
 800e640:	f003 021f 	and.w	r2, r3, #31
 800e644:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e648:	f04f 0a01 	mov.w	sl, #1
 800e64c:	fa0a f202 	lsl.w	r2, sl, r2
 800e650:	420a      	tst	r2, r1
 800e652:	d009      	beq.n	800e668 <__gethex+0x1f8>
 800e654:	4553      	cmp	r3, sl
 800e656:	dd05      	ble.n	800e664 <__gethex+0x1f4>
 800e658:	1eb9      	subs	r1, r7, #2
 800e65a:	4620      	mov	r0, r4
 800e65c:	f000 fec8 	bl	800f3f0 <__any_on>
 800e660:	2800      	cmp	r0, #0
 800e662:	d145      	bne.n	800e6f0 <__gethex+0x280>
 800e664:	f04f 0a02 	mov.w	sl, #2
 800e668:	4639      	mov	r1, r7
 800e66a:	4620      	mov	r0, r4
 800e66c:	f7ff fe98 	bl	800e3a0 <rshift>
 800e670:	443d      	add	r5, r7
 800e672:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e676:	42ab      	cmp	r3, r5
 800e678:	da4c      	bge.n	800e714 <__gethex+0x2a4>
 800e67a:	ee18 0a10 	vmov	r0, s16
 800e67e:	4621      	mov	r1, r4
 800e680:	f000 fa5c 	bl	800eb3c <_Bfree>
 800e684:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e686:	2300      	movs	r3, #0
 800e688:	6013      	str	r3, [r2, #0]
 800e68a:	27a3      	movs	r7, #163	; 0xa3
 800e68c:	e785      	b.n	800e59a <__gethex+0x12a>
 800e68e:	1e73      	subs	r3, r6, #1
 800e690:	9a05      	ldr	r2, [sp, #20]
 800e692:	9303      	str	r3, [sp, #12]
 800e694:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e698:	4293      	cmp	r3, r2
 800e69a:	d019      	beq.n	800e6d0 <__gethex+0x260>
 800e69c:	f1bb 0f20 	cmp.w	fp, #32
 800e6a0:	d107      	bne.n	800e6b2 <__gethex+0x242>
 800e6a2:	9b02      	ldr	r3, [sp, #8]
 800e6a4:	9a00      	ldr	r2, [sp, #0]
 800e6a6:	f843 2b04 	str.w	r2, [r3], #4
 800e6aa:	9302      	str	r3, [sp, #8]
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	9300      	str	r3, [sp, #0]
 800e6b0:	469b      	mov	fp, r3
 800e6b2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e6b6:	f7ff fec5 	bl	800e444 <__hexdig_fun>
 800e6ba:	9b00      	ldr	r3, [sp, #0]
 800e6bc:	f000 000f 	and.w	r0, r0, #15
 800e6c0:	fa00 f00b 	lsl.w	r0, r0, fp
 800e6c4:	4303      	orrs	r3, r0
 800e6c6:	9300      	str	r3, [sp, #0]
 800e6c8:	f10b 0b04 	add.w	fp, fp, #4
 800e6cc:	9b03      	ldr	r3, [sp, #12]
 800e6ce:	e00d      	b.n	800e6ec <__gethex+0x27c>
 800e6d0:	9b03      	ldr	r3, [sp, #12]
 800e6d2:	9a06      	ldr	r2, [sp, #24]
 800e6d4:	4413      	add	r3, r2
 800e6d6:	42bb      	cmp	r3, r7
 800e6d8:	d3e0      	bcc.n	800e69c <__gethex+0x22c>
 800e6da:	4618      	mov	r0, r3
 800e6dc:	9901      	ldr	r1, [sp, #4]
 800e6de:	9307      	str	r3, [sp, #28]
 800e6e0:	4652      	mov	r2, sl
 800e6e2:	f001 f8d5 	bl	800f890 <strncmp>
 800e6e6:	9b07      	ldr	r3, [sp, #28]
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	d1d7      	bne.n	800e69c <__gethex+0x22c>
 800e6ec:	461e      	mov	r6, r3
 800e6ee:	e78b      	b.n	800e608 <__gethex+0x198>
 800e6f0:	f04f 0a03 	mov.w	sl, #3
 800e6f4:	e7b8      	b.n	800e668 <__gethex+0x1f8>
 800e6f6:	da0a      	bge.n	800e70e <__gethex+0x29e>
 800e6f8:	1a37      	subs	r7, r6, r0
 800e6fa:	4621      	mov	r1, r4
 800e6fc:	ee18 0a10 	vmov	r0, s16
 800e700:	463a      	mov	r2, r7
 800e702:	f000 fc37 	bl	800ef74 <__lshift>
 800e706:	1bed      	subs	r5, r5, r7
 800e708:	4604      	mov	r4, r0
 800e70a:	f100 0914 	add.w	r9, r0, #20
 800e70e:	f04f 0a00 	mov.w	sl, #0
 800e712:	e7ae      	b.n	800e672 <__gethex+0x202>
 800e714:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e718:	42a8      	cmp	r0, r5
 800e71a:	dd72      	ble.n	800e802 <__gethex+0x392>
 800e71c:	1b45      	subs	r5, r0, r5
 800e71e:	42ae      	cmp	r6, r5
 800e720:	dc36      	bgt.n	800e790 <__gethex+0x320>
 800e722:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e726:	2b02      	cmp	r3, #2
 800e728:	d02a      	beq.n	800e780 <__gethex+0x310>
 800e72a:	2b03      	cmp	r3, #3
 800e72c:	d02c      	beq.n	800e788 <__gethex+0x318>
 800e72e:	2b01      	cmp	r3, #1
 800e730:	d115      	bne.n	800e75e <__gethex+0x2ee>
 800e732:	42ae      	cmp	r6, r5
 800e734:	d113      	bne.n	800e75e <__gethex+0x2ee>
 800e736:	2e01      	cmp	r6, #1
 800e738:	d10b      	bne.n	800e752 <__gethex+0x2e2>
 800e73a:	9a04      	ldr	r2, [sp, #16]
 800e73c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e740:	6013      	str	r3, [r2, #0]
 800e742:	2301      	movs	r3, #1
 800e744:	6123      	str	r3, [r4, #16]
 800e746:	f8c9 3000 	str.w	r3, [r9]
 800e74a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e74c:	2762      	movs	r7, #98	; 0x62
 800e74e:	601c      	str	r4, [r3, #0]
 800e750:	e723      	b.n	800e59a <__gethex+0x12a>
 800e752:	1e71      	subs	r1, r6, #1
 800e754:	4620      	mov	r0, r4
 800e756:	f000 fe4b 	bl	800f3f0 <__any_on>
 800e75a:	2800      	cmp	r0, #0
 800e75c:	d1ed      	bne.n	800e73a <__gethex+0x2ca>
 800e75e:	ee18 0a10 	vmov	r0, s16
 800e762:	4621      	mov	r1, r4
 800e764:	f000 f9ea 	bl	800eb3c <_Bfree>
 800e768:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e76a:	2300      	movs	r3, #0
 800e76c:	6013      	str	r3, [r2, #0]
 800e76e:	2750      	movs	r7, #80	; 0x50
 800e770:	e713      	b.n	800e59a <__gethex+0x12a>
 800e772:	bf00      	nop
 800e774:	080150f0 	.word	0x080150f0
 800e778:	08015074 	.word	0x08015074
 800e77c:	08015085 	.word	0x08015085
 800e780:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e782:	2b00      	cmp	r3, #0
 800e784:	d1eb      	bne.n	800e75e <__gethex+0x2ee>
 800e786:	e7d8      	b.n	800e73a <__gethex+0x2ca>
 800e788:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d1d5      	bne.n	800e73a <__gethex+0x2ca>
 800e78e:	e7e6      	b.n	800e75e <__gethex+0x2ee>
 800e790:	1e6f      	subs	r7, r5, #1
 800e792:	f1ba 0f00 	cmp.w	sl, #0
 800e796:	d131      	bne.n	800e7fc <__gethex+0x38c>
 800e798:	b127      	cbz	r7, 800e7a4 <__gethex+0x334>
 800e79a:	4639      	mov	r1, r7
 800e79c:	4620      	mov	r0, r4
 800e79e:	f000 fe27 	bl	800f3f0 <__any_on>
 800e7a2:	4682      	mov	sl, r0
 800e7a4:	117b      	asrs	r3, r7, #5
 800e7a6:	2101      	movs	r1, #1
 800e7a8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e7ac:	f007 071f 	and.w	r7, r7, #31
 800e7b0:	fa01 f707 	lsl.w	r7, r1, r7
 800e7b4:	421f      	tst	r7, r3
 800e7b6:	4629      	mov	r1, r5
 800e7b8:	4620      	mov	r0, r4
 800e7ba:	bf18      	it	ne
 800e7bc:	f04a 0a02 	orrne.w	sl, sl, #2
 800e7c0:	1b76      	subs	r6, r6, r5
 800e7c2:	f7ff fded 	bl	800e3a0 <rshift>
 800e7c6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e7ca:	2702      	movs	r7, #2
 800e7cc:	f1ba 0f00 	cmp.w	sl, #0
 800e7d0:	d048      	beq.n	800e864 <__gethex+0x3f4>
 800e7d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e7d6:	2b02      	cmp	r3, #2
 800e7d8:	d015      	beq.n	800e806 <__gethex+0x396>
 800e7da:	2b03      	cmp	r3, #3
 800e7dc:	d017      	beq.n	800e80e <__gethex+0x39e>
 800e7de:	2b01      	cmp	r3, #1
 800e7e0:	d109      	bne.n	800e7f6 <__gethex+0x386>
 800e7e2:	f01a 0f02 	tst.w	sl, #2
 800e7e6:	d006      	beq.n	800e7f6 <__gethex+0x386>
 800e7e8:	f8d9 0000 	ldr.w	r0, [r9]
 800e7ec:	ea4a 0a00 	orr.w	sl, sl, r0
 800e7f0:	f01a 0f01 	tst.w	sl, #1
 800e7f4:	d10e      	bne.n	800e814 <__gethex+0x3a4>
 800e7f6:	f047 0710 	orr.w	r7, r7, #16
 800e7fa:	e033      	b.n	800e864 <__gethex+0x3f4>
 800e7fc:	f04f 0a01 	mov.w	sl, #1
 800e800:	e7d0      	b.n	800e7a4 <__gethex+0x334>
 800e802:	2701      	movs	r7, #1
 800e804:	e7e2      	b.n	800e7cc <__gethex+0x35c>
 800e806:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e808:	f1c3 0301 	rsb	r3, r3, #1
 800e80c:	9315      	str	r3, [sp, #84]	; 0x54
 800e80e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e810:	2b00      	cmp	r3, #0
 800e812:	d0f0      	beq.n	800e7f6 <__gethex+0x386>
 800e814:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e818:	f104 0314 	add.w	r3, r4, #20
 800e81c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e820:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e824:	f04f 0c00 	mov.w	ip, #0
 800e828:	4618      	mov	r0, r3
 800e82a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e82e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e832:	d01c      	beq.n	800e86e <__gethex+0x3fe>
 800e834:	3201      	adds	r2, #1
 800e836:	6002      	str	r2, [r0, #0]
 800e838:	2f02      	cmp	r7, #2
 800e83a:	f104 0314 	add.w	r3, r4, #20
 800e83e:	d13f      	bne.n	800e8c0 <__gethex+0x450>
 800e840:	f8d8 2000 	ldr.w	r2, [r8]
 800e844:	3a01      	subs	r2, #1
 800e846:	42b2      	cmp	r2, r6
 800e848:	d10a      	bne.n	800e860 <__gethex+0x3f0>
 800e84a:	1171      	asrs	r1, r6, #5
 800e84c:	2201      	movs	r2, #1
 800e84e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e852:	f006 061f 	and.w	r6, r6, #31
 800e856:	fa02 f606 	lsl.w	r6, r2, r6
 800e85a:	421e      	tst	r6, r3
 800e85c:	bf18      	it	ne
 800e85e:	4617      	movne	r7, r2
 800e860:	f047 0720 	orr.w	r7, r7, #32
 800e864:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e866:	601c      	str	r4, [r3, #0]
 800e868:	9b04      	ldr	r3, [sp, #16]
 800e86a:	601d      	str	r5, [r3, #0]
 800e86c:	e695      	b.n	800e59a <__gethex+0x12a>
 800e86e:	4299      	cmp	r1, r3
 800e870:	f843 cc04 	str.w	ip, [r3, #-4]
 800e874:	d8d8      	bhi.n	800e828 <__gethex+0x3b8>
 800e876:	68a3      	ldr	r3, [r4, #8]
 800e878:	459b      	cmp	fp, r3
 800e87a:	db19      	blt.n	800e8b0 <__gethex+0x440>
 800e87c:	6861      	ldr	r1, [r4, #4]
 800e87e:	ee18 0a10 	vmov	r0, s16
 800e882:	3101      	adds	r1, #1
 800e884:	f000 f91a 	bl	800eabc <_Balloc>
 800e888:	4681      	mov	r9, r0
 800e88a:	b918      	cbnz	r0, 800e894 <__gethex+0x424>
 800e88c:	4b1a      	ldr	r3, [pc, #104]	; (800e8f8 <__gethex+0x488>)
 800e88e:	4602      	mov	r2, r0
 800e890:	2184      	movs	r1, #132	; 0x84
 800e892:	e6a8      	b.n	800e5e6 <__gethex+0x176>
 800e894:	6922      	ldr	r2, [r4, #16]
 800e896:	3202      	adds	r2, #2
 800e898:	f104 010c 	add.w	r1, r4, #12
 800e89c:	0092      	lsls	r2, r2, #2
 800e89e:	300c      	adds	r0, #12
 800e8a0:	f7fd f99c 	bl	800bbdc <memcpy>
 800e8a4:	4621      	mov	r1, r4
 800e8a6:	ee18 0a10 	vmov	r0, s16
 800e8aa:	f000 f947 	bl	800eb3c <_Bfree>
 800e8ae:	464c      	mov	r4, r9
 800e8b0:	6923      	ldr	r3, [r4, #16]
 800e8b2:	1c5a      	adds	r2, r3, #1
 800e8b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e8b8:	6122      	str	r2, [r4, #16]
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	615a      	str	r2, [r3, #20]
 800e8be:	e7bb      	b.n	800e838 <__gethex+0x3c8>
 800e8c0:	6922      	ldr	r2, [r4, #16]
 800e8c2:	455a      	cmp	r2, fp
 800e8c4:	dd0b      	ble.n	800e8de <__gethex+0x46e>
 800e8c6:	2101      	movs	r1, #1
 800e8c8:	4620      	mov	r0, r4
 800e8ca:	f7ff fd69 	bl	800e3a0 <rshift>
 800e8ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e8d2:	3501      	adds	r5, #1
 800e8d4:	42ab      	cmp	r3, r5
 800e8d6:	f6ff aed0 	blt.w	800e67a <__gethex+0x20a>
 800e8da:	2701      	movs	r7, #1
 800e8dc:	e7c0      	b.n	800e860 <__gethex+0x3f0>
 800e8de:	f016 061f 	ands.w	r6, r6, #31
 800e8e2:	d0fa      	beq.n	800e8da <__gethex+0x46a>
 800e8e4:	449a      	add	sl, r3
 800e8e6:	f1c6 0620 	rsb	r6, r6, #32
 800e8ea:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e8ee:	f000 f9db 	bl	800eca8 <__hi0bits>
 800e8f2:	42b0      	cmp	r0, r6
 800e8f4:	dbe7      	blt.n	800e8c6 <__gethex+0x456>
 800e8f6:	e7f0      	b.n	800e8da <__gethex+0x46a>
 800e8f8:	08015074 	.word	0x08015074

0800e8fc <L_shift>:
 800e8fc:	f1c2 0208 	rsb	r2, r2, #8
 800e900:	0092      	lsls	r2, r2, #2
 800e902:	b570      	push	{r4, r5, r6, lr}
 800e904:	f1c2 0620 	rsb	r6, r2, #32
 800e908:	6843      	ldr	r3, [r0, #4]
 800e90a:	6804      	ldr	r4, [r0, #0]
 800e90c:	fa03 f506 	lsl.w	r5, r3, r6
 800e910:	432c      	orrs	r4, r5
 800e912:	40d3      	lsrs	r3, r2
 800e914:	6004      	str	r4, [r0, #0]
 800e916:	f840 3f04 	str.w	r3, [r0, #4]!
 800e91a:	4288      	cmp	r0, r1
 800e91c:	d3f4      	bcc.n	800e908 <L_shift+0xc>
 800e91e:	bd70      	pop	{r4, r5, r6, pc}

0800e920 <__match>:
 800e920:	b530      	push	{r4, r5, lr}
 800e922:	6803      	ldr	r3, [r0, #0]
 800e924:	3301      	adds	r3, #1
 800e926:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e92a:	b914      	cbnz	r4, 800e932 <__match+0x12>
 800e92c:	6003      	str	r3, [r0, #0]
 800e92e:	2001      	movs	r0, #1
 800e930:	bd30      	pop	{r4, r5, pc}
 800e932:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e936:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e93a:	2d19      	cmp	r5, #25
 800e93c:	bf98      	it	ls
 800e93e:	3220      	addls	r2, #32
 800e940:	42a2      	cmp	r2, r4
 800e942:	d0f0      	beq.n	800e926 <__match+0x6>
 800e944:	2000      	movs	r0, #0
 800e946:	e7f3      	b.n	800e930 <__match+0x10>

0800e948 <__hexnan>:
 800e948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e94c:	680b      	ldr	r3, [r1, #0]
 800e94e:	6801      	ldr	r1, [r0, #0]
 800e950:	115e      	asrs	r6, r3, #5
 800e952:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e956:	f013 031f 	ands.w	r3, r3, #31
 800e95a:	b087      	sub	sp, #28
 800e95c:	bf18      	it	ne
 800e95e:	3604      	addne	r6, #4
 800e960:	2500      	movs	r5, #0
 800e962:	1f37      	subs	r7, r6, #4
 800e964:	4682      	mov	sl, r0
 800e966:	4690      	mov	r8, r2
 800e968:	9301      	str	r3, [sp, #4]
 800e96a:	f846 5c04 	str.w	r5, [r6, #-4]
 800e96e:	46b9      	mov	r9, r7
 800e970:	463c      	mov	r4, r7
 800e972:	9502      	str	r5, [sp, #8]
 800e974:	46ab      	mov	fp, r5
 800e976:	784a      	ldrb	r2, [r1, #1]
 800e978:	1c4b      	adds	r3, r1, #1
 800e97a:	9303      	str	r3, [sp, #12]
 800e97c:	b342      	cbz	r2, 800e9d0 <__hexnan+0x88>
 800e97e:	4610      	mov	r0, r2
 800e980:	9105      	str	r1, [sp, #20]
 800e982:	9204      	str	r2, [sp, #16]
 800e984:	f7ff fd5e 	bl	800e444 <__hexdig_fun>
 800e988:	2800      	cmp	r0, #0
 800e98a:	d14f      	bne.n	800ea2c <__hexnan+0xe4>
 800e98c:	9a04      	ldr	r2, [sp, #16]
 800e98e:	9905      	ldr	r1, [sp, #20]
 800e990:	2a20      	cmp	r2, #32
 800e992:	d818      	bhi.n	800e9c6 <__hexnan+0x7e>
 800e994:	9b02      	ldr	r3, [sp, #8]
 800e996:	459b      	cmp	fp, r3
 800e998:	dd13      	ble.n	800e9c2 <__hexnan+0x7a>
 800e99a:	454c      	cmp	r4, r9
 800e99c:	d206      	bcs.n	800e9ac <__hexnan+0x64>
 800e99e:	2d07      	cmp	r5, #7
 800e9a0:	dc04      	bgt.n	800e9ac <__hexnan+0x64>
 800e9a2:	462a      	mov	r2, r5
 800e9a4:	4649      	mov	r1, r9
 800e9a6:	4620      	mov	r0, r4
 800e9a8:	f7ff ffa8 	bl	800e8fc <L_shift>
 800e9ac:	4544      	cmp	r4, r8
 800e9ae:	d950      	bls.n	800ea52 <__hexnan+0x10a>
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	f1a4 0904 	sub.w	r9, r4, #4
 800e9b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800e9ba:	f8cd b008 	str.w	fp, [sp, #8]
 800e9be:	464c      	mov	r4, r9
 800e9c0:	461d      	mov	r5, r3
 800e9c2:	9903      	ldr	r1, [sp, #12]
 800e9c4:	e7d7      	b.n	800e976 <__hexnan+0x2e>
 800e9c6:	2a29      	cmp	r2, #41	; 0x29
 800e9c8:	d156      	bne.n	800ea78 <__hexnan+0x130>
 800e9ca:	3102      	adds	r1, #2
 800e9cc:	f8ca 1000 	str.w	r1, [sl]
 800e9d0:	f1bb 0f00 	cmp.w	fp, #0
 800e9d4:	d050      	beq.n	800ea78 <__hexnan+0x130>
 800e9d6:	454c      	cmp	r4, r9
 800e9d8:	d206      	bcs.n	800e9e8 <__hexnan+0xa0>
 800e9da:	2d07      	cmp	r5, #7
 800e9dc:	dc04      	bgt.n	800e9e8 <__hexnan+0xa0>
 800e9de:	462a      	mov	r2, r5
 800e9e0:	4649      	mov	r1, r9
 800e9e2:	4620      	mov	r0, r4
 800e9e4:	f7ff ff8a 	bl	800e8fc <L_shift>
 800e9e8:	4544      	cmp	r4, r8
 800e9ea:	d934      	bls.n	800ea56 <__hexnan+0x10e>
 800e9ec:	f1a8 0204 	sub.w	r2, r8, #4
 800e9f0:	4623      	mov	r3, r4
 800e9f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800e9f6:	f842 1f04 	str.w	r1, [r2, #4]!
 800e9fa:	429f      	cmp	r7, r3
 800e9fc:	d2f9      	bcs.n	800e9f2 <__hexnan+0xaa>
 800e9fe:	1b3b      	subs	r3, r7, r4
 800ea00:	f023 0303 	bic.w	r3, r3, #3
 800ea04:	3304      	adds	r3, #4
 800ea06:	3401      	adds	r4, #1
 800ea08:	3e03      	subs	r6, #3
 800ea0a:	42b4      	cmp	r4, r6
 800ea0c:	bf88      	it	hi
 800ea0e:	2304      	movhi	r3, #4
 800ea10:	4443      	add	r3, r8
 800ea12:	2200      	movs	r2, #0
 800ea14:	f843 2b04 	str.w	r2, [r3], #4
 800ea18:	429f      	cmp	r7, r3
 800ea1a:	d2fb      	bcs.n	800ea14 <__hexnan+0xcc>
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	b91b      	cbnz	r3, 800ea28 <__hexnan+0xe0>
 800ea20:	4547      	cmp	r7, r8
 800ea22:	d127      	bne.n	800ea74 <__hexnan+0x12c>
 800ea24:	2301      	movs	r3, #1
 800ea26:	603b      	str	r3, [r7, #0]
 800ea28:	2005      	movs	r0, #5
 800ea2a:	e026      	b.n	800ea7a <__hexnan+0x132>
 800ea2c:	3501      	adds	r5, #1
 800ea2e:	2d08      	cmp	r5, #8
 800ea30:	f10b 0b01 	add.w	fp, fp, #1
 800ea34:	dd06      	ble.n	800ea44 <__hexnan+0xfc>
 800ea36:	4544      	cmp	r4, r8
 800ea38:	d9c3      	bls.n	800e9c2 <__hexnan+0x7a>
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ea40:	2501      	movs	r5, #1
 800ea42:	3c04      	subs	r4, #4
 800ea44:	6822      	ldr	r2, [r4, #0]
 800ea46:	f000 000f 	and.w	r0, r0, #15
 800ea4a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ea4e:	6022      	str	r2, [r4, #0]
 800ea50:	e7b7      	b.n	800e9c2 <__hexnan+0x7a>
 800ea52:	2508      	movs	r5, #8
 800ea54:	e7b5      	b.n	800e9c2 <__hexnan+0x7a>
 800ea56:	9b01      	ldr	r3, [sp, #4]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d0df      	beq.n	800ea1c <__hexnan+0xd4>
 800ea5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ea60:	f1c3 0320 	rsb	r3, r3, #32
 800ea64:	fa22 f303 	lsr.w	r3, r2, r3
 800ea68:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ea6c:	401a      	ands	r2, r3
 800ea6e:	f846 2c04 	str.w	r2, [r6, #-4]
 800ea72:	e7d3      	b.n	800ea1c <__hexnan+0xd4>
 800ea74:	3f04      	subs	r7, #4
 800ea76:	e7d1      	b.n	800ea1c <__hexnan+0xd4>
 800ea78:	2004      	movs	r0, #4
 800ea7a:	b007      	add	sp, #28
 800ea7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea80 <_localeconv_r>:
 800ea80:	4800      	ldr	r0, [pc, #0]	; (800ea84 <_localeconv_r+0x4>)
 800ea82:	4770      	bx	lr
 800ea84:	2000067c 	.word	0x2000067c

0800ea88 <malloc>:
 800ea88:	4b02      	ldr	r3, [pc, #8]	; (800ea94 <malloc+0xc>)
 800ea8a:	4601      	mov	r1, r0
 800ea8c:	6818      	ldr	r0, [r3, #0]
 800ea8e:	f000 bd2f 	b.w	800f4f0 <_malloc_r>
 800ea92:	bf00      	nop
 800ea94:	20000524 	.word	0x20000524

0800ea98 <__ascii_mbtowc>:
 800ea98:	b082      	sub	sp, #8
 800ea9a:	b901      	cbnz	r1, 800ea9e <__ascii_mbtowc+0x6>
 800ea9c:	a901      	add	r1, sp, #4
 800ea9e:	b142      	cbz	r2, 800eab2 <__ascii_mbtowc+0x1a>
 800eaa0:	b14b      	cbz	r3, 800eab6 <__ascii_mbtowc+0x1e>
 800eaa2:	7813      	ldrb	r3, [r2, #0]
 800eaa4:	600b      	str	r3, [r1, #0]
 800eaa6:	7812      	ldrb	r2, [r2, #0]
 800eaa8:	1e10      	subs	r0, r2, #0
 800eaaa:	bf18      	it	ne
 800eaac:	2001      	movne	r0, #1
 800eaae:	b002      	add	sp, #8
 800eab0:	4770      	bx	lr
 800eab2:	4610      	mov	r0, r2
 800eab4:	e7fb      	b.n	800eaae <__ascii_mbtowc+0x16>
 800eab6:	f06f 0001 	mvn.w	r0, #1
 800eaba:	e7f8      	b.n	800eaae <__ascii_mbtowc+0x16>

0800eabc <_Balloc>:
 800eabc:	b570      	push	{r4, r5, r6, lr}
 800eabe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eac0:	4604      	mov	r4, r0
 800eac2:	460d      	mov	r5, r1
 800eac4:	b976      	cbnz	r6, 800eae4 <_Balloc+0x28>
 800eac6:	2010      	movs	r0, #16
 800eac8:	f7ff ffde 	bl	800ea88 <malloc>
 800eacc:	4602      	mov	r2, r0
 800eace:	6260      	str	r0, [r4, #36]	; 0x24
 800ead0:	b920      	cbnz	r0, 800eadc <_Balloc+0x20>
 800ead2:	4b18      	ldr	r3, [pc, #96]	; (800eb34 <_Balloc+0x78>)
 800ead4:	4818      	ldr	r0, [pc, #96]	; (800eb38 <_Balloc+0x7c>)
 800ead6:	2166      	movs	r1, #102	; 0x66
 800ead8:	f000 fefa 	bl	800f8d0 <__assert_func>
 800eadc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eae0:	6006      	str	r6, [r0, #0]
 800eae2:	60c6      	str	r6, [r0, #12]
 800eae4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eae6:	68f3      	ldr	r3, [r6, #12]
 800eae8:	b183      	cbz	r3, 800eb0c <_Balloc+0x50>
 800eaea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eaec:	68db      	ldr	r3, [r3, #12]
 800eaee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eaf2:	b9b8      	cbnz	r0, 800eb24 <_Balloc+0x68>
 800eaf4:	2101      	movs	r1, #1
 800eaf6:	fa01 f605 	lsl.w	r6, r1, r5
 800eafa:	1d72      	adds	r2, r6, #5
 800eafc:	0092      	lsls	r2, r2, #2
 800eafe:	4620      	mov	r0, r4
 800eb00:	f000 fc97 	bl	800f432 <_calloc_r>
 800eb04:	b160      	cbz	r0, 800eb20 <_Balloc+0x64>
 800eb06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eb0a:	e00e      	b.n	800eb2a <_Balloc+0x6e>
 800eb0c:	2221      	movs	r2, #33	; 0x21
 800eb0e:	2104      	movs	r1, #4
 800eb10:	4620      	mov	r0, r4
 800eb12:	f000 fc8e 	bl	800f432 <_calloc_r>
 800eb16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb18:	60f0      	str	r0, [r6, #12]
 800eb1a:	68db      	ldr	r3, [r3, #12]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d1e4      	bne.n	800eaea <_Balloc+0x2e>
 800eb20:	2000      	movs	r0, #0
 800eb22:	bd70      	pop	{r4, r5, r6, pc}
 800eb24:	6802      	ldr	r2, [r0, #0]
 800eb26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb30:	e7f7      	b.n	800eb22 <_Balloc+0x66>
 800eb32:	bf00      	nop
 800eb34:	08014ffe 	.word	0x08014ffe
 800eb38:	08015104 	.word	0x08015104

0800eb3c <_Bfree>:
 800eb3c:	b570      	push	{r4, r5, r6, lr}
 800eb3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eb40:	4605      	mov	r5, r0
 800eb42:	460c      	mov	r4, r1
 800eb44:	b976      	cbnz	r6, 800eb64 <_Bfree+0x28>
 800eb46:	2010      	movs	r0, #16
 800eb48:	f7ff ff9e 	bl	800ea88 <malloc>
 800eb4c:	4602      	mov	r2, r0
 800eb4e:	6268      	str	r0, [r5, #36]	; 0x24
 800eb50:	b920      	cbnz	r0, 800eb5c <_Bfree+0x20>
 800eb52:	4b09      	ldr	r3, [pc, #36]	; (800eb78 <_Bfree+0x3c>)
 800eb54:	4809      	ldr	r0, [pc, #36]	; (800eb7c <_Bfree+0x40>)
 800eb56:	218a      	movs	r1, #138	; 0x8a
 800eb58:	f000 feba 	bl	800f8d0 <__assert_func>
 800eb5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb60:	6006      	str	r6, [r0, #0]
 800eb62:	60c6      	str	r6, [r0, #12]
 800eb64:	b13c      	cbz	r4, 800eb76 <_Bfree+0x3a>
 800eb66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eb68:	6862      	ldr	r2, [r4, #4]
 800eb6a:	68db      	ldr	r3, [r3, #12]
 800eb6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb70:	6021      	str	r1, [r4, #0]
 800eb72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb76:	bd70      	pop	{r4, r5, r6, pc}
 800eb78:	08014ffe 	.word	0x08014ffe
 800eb7c:	08015104 	.word	0x08015104

0800eb80 <__multadd>:
 800eb80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb84:	690e      	ldr	r6, [r1, #16]
 800eb86:	4607      	mov	r7, r0
 800eb88:	4698      	mov	r8, r3
 800eb8a:	460c      	mov	r4, r1
 800eb8c:	f101 0014 	add.w	r0, r1, #20
 800eb90:	2300      	movs	r3, #0
 800eb92:	6805      	ldr	r5, [r0, #0]
 800eb94:	b2a9      	uxth	r1, r5
 800eb96:	fb02 8101 	mla	r1, r2, r1, r8
 800eb9a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800eb9e:	0c2d      	lsrs	r5, r5, #16
 800eba0:	fb02 c505 	mla	r5, r2, r5, ip
 800eba4:	b289      	uxth	r1, r1
 800eba6:	3301      	adds	r3, #1
 800eba8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ebac:	429e      	cmp	r6, r3
 800ebae:	f840 1b04 	str.w	r1, [r0], #4
 800ebb2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800ebb6:	dcec      	bgt.n	800eb92 <__multadd+0x12>
 800ebb8:	f1b8 0f00 	cmp.w	r8, #0
 800ebbc:	d022      	beq.n	800ec04 <__multadd+0x84>
 800ebbe:	68a3      	ldr	r3, [r4, #8]
 800ebc0:	42b3      	cmp	r3, r6
 800ebc2:	dc19      	bgt.n	800ebf8 <__multadd+0x78>
 800ebc4:	6861      	ldr	r1, [r4, #4]
 800ebc6:	4638      	mov	r0, r7
 800ebc8:	3101      	adds	r1, #1
 800ebca:	f7ff ff77 	bl	800eabc <_Balloc>
 800ebce:	4605      	mov	r5, r0
 800ebd0:	b928      	cbnz	r0, 800ebde <__multadd+0x5e>
 800ebd2:	4602      	mov	r2, r0
 800ebd4:	4b0d      	ldr	r3, [pc, #52]	; (800ec0c <__multadd+0x8c>)
 800ebd6:	480e      	ldr	r0, [pc, #56]	; (800ec10 <__multadd+0x90>)
 800ebd8:	21b5      	movs	r1, #181	; 0xb5
 800ebda:	f000 fe79 	bl	800f8d0 <__assert_func>
 800ebde:	6922      	ldr	r2, [r4, #16]
 800ebe0:	3202      	adds	r2, #2
 800ebe2:	f104 010c 	add.w	r1, r4, #12
 800ebe6:	0092      	lsls	r2, r2, #2
 800ebe8:	300c      	adds	r0, #12
 800ebea:	f7fc fff7 	bl	800bbdc <memcpy>
 800ebee:	4621      	mov	r1, r4
 800ebf0:	4638      	mov	r0, r7
 800ebf2:	f7ff ffa3 	bl	800eb3c <_Bfree>
 800ebf6:	462c      	mov	r4, r5
 800ebf8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ebfc:	3601      	adds	r6, #1
 800ebfe:	f8c3 8014 	str.w	r8, [r3, #20]
 800ec02:	6126      	str	r6, [r4, #16]
 800ec04:	4620      	mov	r0, r4
 800ec06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec0a:	bf00      	nop
 800ec0c:	08015074 	.word	0x08015074
 800ec10:	08015104 	.word	0x08015104

0800ec14 <__s2b>:
 800ec14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec18:	460c      	mov	r4, r1
 800ec1a:	4615      	mov	r5, r2
 800ec1c:	461f      	mov	r7, r3
 800ec1e:	2209      	movs	r2, #9
 800ec20:	3308      	adds	r3, #8
 800ec22:	4606      	mov	r6, r0
 800ec24:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec28:	2100      	movs	r1, #0
 800ec2a:	2201      	movs	r2, #1
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	db09      	blt.n	800ec44 <__s2b+0x30>
 800ec30:	4630      	mov	r0, r6
 800ec32:	f7ff ff43 	bl	800eabc <_Balloc>
 800ec36:	b940      	cbnz	r0, 800ec4a <__s2b+0x36>
 800ec38:	4602      	mov	r2, r0
 800ec3a:	4b19      	ldr	r3, [pc, #100]	; (800eca0 <__s2b+0x8c>)
 800ec3c:	4819      	ldr	r0, [pc, #100]	; (800eca4 <__s2b+0x90>)
 800ec3e:	21ce      	movs	r1, #206	; 0xce
 800ec40:	f000 fe46 	bl	800f8d0 <__assert_func>
 800ec44:	0052      	lsls	r2, r2, #1
 800ec46:	3101      	adds	r1, #1
 800ec48:	e7f0      	b.n	800ec2c <__s2b+0x18>
 800ec4a:	9b08      	ldr	r3, [sp, #32]
 800ec4c:	6143      	str	r3, [r0, #20]
 800ec4e:	2d09      	cmp	r5, #9
 800ec50:	f04f 0301 	mov.w	r3, #1
 800ec54:	6103      	str	r3, [r0, #16]
 800ec56:	dd16      	ble.n	800ec86 <__s2b+0x72>
 800ec58:	f104 0909 	add.w	r9, r4, #9
 800ec5c:	46c8      	mov	r8, r9
 800ec5e:	442c      	add	r4, r5
 800ec60:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ec64:	4601      	mov	r1, r0
 800ec66:	3b30      	subs	r3, #48	; 0x30
 800ec68:	220a      	movs	r2, #10
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	f7ff ff88 	bl	800eb80 <__multadd>
 800ec70:	45a0      	cmp	r8, r4
 800ec72:	d1f5      	bne.n	800ec60 <__s2b+0x4c>
 800ec74:	f1a5 0408 	sub.w	r4, r5, #8
 800ec78:	444c      	add	r4, r9
 800ec7a:	1b2d      	subs	r5, r5, r4
 800ec7c:	1963      	adds	r3, r4, r5
 800ec7e:	42bb      	cmp	r3, r7
 800ec80:	db04      	blt.n	800ec8c <__s2b+0x78>
 800ec82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec86:	340a      	adds	r4, #10
 800ec88:	2509      	movs	r5, #9
 800ec8a:	e7f6      	b.n	800ec7a <__s2b+0x66>
 800ec8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ec90:	4601      	mov	r1, r0
 800ec92:	3b30      	subs	r3, #48	; 0x30
 800ec94:	220a      	movs	r2, #10
 800ec96:	4630      	mov	r0, r6
 800ec98:	f7ff ff72 	bl	800eb80 <__multadd>
 800ec9c:	e7ee      	b.n	800ec7c <__s2b+0x68>
 800ec9e:	bf00      	nop
 800eca0:	08015074 	.word	0x08015074
 800eca4:	08015104 	.word	0x08015104

0800eca8 <__hi0bits>:
 800eca8:	0c03      	lsrs	r3, r0, #16
 800ecaa:	041b      	lsls	r3, r3, #16
 800ecac:	b9d3      	cbnz	r3, 800ece4 <__hi0bits+0x3c>
 800ecae:	0400      	lsls	r0, r0, #16
 800ecb0:	2310      	movs	r3, #16
 800ecb2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ecb6:	bf04      	itt	eq
 800ecb8:	0200      	lsleq	r0, r0, #8
 800ecba:	3308      	addeq	r3, #8
 800ecbc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ecc0:	bf04      	itt	eq
 800ecc2:	0100      	lsleq	r0, r0, #4
 800ecc4:	3304      	addeq	r3, #4
 800ecc6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ecca:	bf04      	itt	eq
 800eccc:	0080      	lsleq	r0, r0, #2
 800ecce:	3302      	addeq	r3, #2
 800ecd0:	2800      	cmp	r0, #0
 800ecd2:	db05      	blt.n	800ece0 <__hi0bits+0x38>
 800ecd4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ecd8:	f103 0301 	add.w	r3, r3, #1
 800ecdc:	bf08      	it	eq
 800ecde:	2320      	moveq	r3, #32
 800ece0:	4618      	mov	r0, r3
 800ece2:	4770      	bx	lr
 800ece4:	2300      	movs	r3, #0
 800ece6:	e7e4      	b.n	800ecb2 <__hi0bits+0xa>

0800ece8 <__lo0bits>:
 800ece8:	6803      	ldr	r3, [r0, #0]
 800ecea:	f013 0207 	ands.w	r2, r3, #7
 800ecee:	4601      	mov	r1, r0
 800ecf0:	d00b      	beq.n	800ed0a <__lo0bits+0x22>
 800ecf2:	07da      	lsls	r2, r3, #31
 800ecf4:	d424      	bmi.n	800ed40 <__lo0bits+0x58>
 800ecf6:	0798      	lsls	r0, r3, #30
 800ecf8:	bf49      	itett	mi
 800ecfa:	085b      	lsrmi	r3, r3, #1
 800ecfc:	089b      	lsrpl	r3, r3, #2
 800ecfe:	2001      	movmi	r0, #1
 800ed00:	600b      	strmi	r3, [r1, #0]
 800ed02:	bf5c      	itt	pl
 800ed04:	600b      	strpl	r3, [r1, #0]
 800ed06:	2002      	movpl	r0, #2
 800ed08:	4770      	bx	lr
 800ed0a:	b298      	uxth	r0, r3
 800ed0c:	b9b0      	cbnz	r0, 800ed3c <__lo0bits+0x54>
 800ed0e:	0c1b      	lsrs	r3, r3, #16
 800ed10:	2010      	movs	r0, #16
 800ed12:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ed16:	bf04      	itt	eq
 800ed18:	0a1b      	lsreq	r3, r3, #8
 800ed1a:	3008      	addeq	r0, #8
 800ed1c:	071a      	lsls	r2, r3, #28
 800ed1e:	bf04      	itt	eq
 800ed20:	091b      	lsreq	r3, r3, #4
 800ed22:	3004      	addeq	r0, #4
 800ed24:	079a      	lsls	r2, r3, #30
 800ed26:	bf04      	itt	eq
 800ed28:	089b      	lsreq	r3, r3, #2
 800ed2a:	3002      	addeq	r0, #2
 800ed2c:	07da      	lsls	r2, r3, #31
 800ed2e:	d403      	bmi.n	800ed38 <__lo0bits+0x50>
 800ed30:	085b      	lsrs	r3, r3, #1
 800ed32:	f100 0001 	add.w	r0, r0, #1
 800ed36:	d005      	beq.n	800ed44 <__lo0bits+0x5c>
 800ed38:	600b      	str	r3, [r1, #0]
 800ed3a:	4770      	bx	lr
 800ed3c:	4610      	mov	r0, r2
 800ed3e:	e7e8      	b.n	800ed12 <__lo0bits+0x2a>
 800ed40:	2000      	movs	r0, #0
 800ed42:	4770      	bx	lr
 800ed44:	2020      	movs	r0, #32
 800ed46:	4770      	bx	lr

0800ed48 <__i2b>:
 800ed48:	b510      	push	{r4, lr}
 800ed4a:	460c      	mov	r4, r1
 800ed4c:	2101      	movs	r1, #1
 800ed4e:	f7ff feb5 	bl	800eabc <_Balloc>
 800ed52:	4602      	mov	r2, r0
 800ed54:	b928      	cbnz	r0, 800ed62 <__i2b+0x1a>
 800ed56:	4b05      	ldr	r3, [pc, #20]	; (800ed6c <__i2b+0x24>)
 800ed58:	4805      	ldr	r0, [pc, #20]	; (800ed70 <__i2b+0x28>)
 800ed5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ed5e:	f000 fdb7 	bl	800f8d0 <__assert_func>
 800ed62:	2301      	movs	r3, #1
 800ed64:	6144      	str	r4, [r0, #20]
 800ed66:	6103      	str	r3, [r0, #16]
 800ed68:	bd10      	pop	{r4, pc}
 800ed6a:	bf00      	nop
 800ed6c:	08015074 	.word	0x08015074
 800ed70:	08015104 	.word	0x08015104

0800ed74 <__multiply>:
 800ed74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed78:	4614      	mov	r4, r2
 800ed7a:	690a      	ldr	r2, [r1, #16]
 800ed7c:	6923      	ldr	r3, [r4, #16]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	bfb8      	it	lt
 800ed82:	460b      	movlt	r3, r1
 800ed84:	460d      	mov	r5, r1
 800ed86:	bfbc      	itt	lt
 800ed88:	4625      	movlt	r5, r4
 800ed8a:	461c      	movlt	r4, r3
 800ed8c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ed90:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ed94:	68ab      	ldr	r3, [r5, #8]
 800ed96:	6869      	ldr	r1, [r5, #4]
 800ed98:	eb0a 0709 	add.w	r7, sl, r9
 800ed9c:	42bb      	cmp	r3, r7
 800ed9e:	b085      	sub	sp, #20
 800eda0:	bfb8      	it	lt
 800eda2:	3101      	addlt	r1, #1
 800eda4:	f7ff fe8a 	bl	800eabc <_Balloc>
 800eda8:	b930      	cbnz	r0, 800edb8 <__multiply+0x44>
 800edaa:	4602      	mov	r2, r0
 800edac:	4b42      	ldr	r3, [pc, #264]	; (800eeb8 <__multiply+0x144>)
 800edae:	4843      	ldr	r0, [pc, #268]	; (800eebc <__multiply+0x148>)
 800edb0:	f240 115d 	movw	r1, #349	; 0x15d
 800edb4:	f000 fd8c 	bl	800f8d0 <__assert_func>
 800edb8:	f100 0614 	add.w	r6, r0, #20
 800edbc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800edc0:	4633      	mov	r3, r6
 800edc2:	2200      	movs	r2, #0
 800edc4:	4543      	cmp	r3, r8
 800edc6:	d31e      	bcc.n	800ee06 <__multiply+0x92>
 800edc8:	f105 0c14 	add.w	ip, r5, #20
 800edcc:	f104 0314 	add.w	r3, r4, #20
 800edd0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800edd4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800edd8:	9202      	str	r2, [sp, #8]
 800edda:	ebac 0205 	sub.w	r2, ip, r5
 800edde:	3a15      	subs	r2, #21
 800ede0:	f022 0203 	bic.w	r2, r2, #3
 800ede4:	3204      	adds	r2, #4
 800ede6:	f105 0115 	add.w	r1, r5, #21
 800edea:	458c      	cmp	ip, r1
 800edec:	bf38      	it	cc
 800edee:	2204      	movcc	r2, #4
 800edf0:	9201      	str	r2, [sp, #4]
 800edf2:	9a02      	ldr	r2, [sp, #8]
 800edf4:	9303      	str	r3, [sp, #12]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d808      	bhi.n	800ee0c <__multiply+0x98>
 800edfa:	2f00      	cmp	r7, #0
 800edfc:	dc55      	bgt.n	800eeaa <__multiply+0x136>
 800edfe:	6107      	str	r7, [r0, #16]
 800ee00:	b005      	add	sp, #20
 800ee02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee06:	f843 2b04 	str.w	r2, [r3], #4
 800ee0a:	e7db      	b.n	800edc4 <__multiply+0x50>
 800ee0c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ee10:	f1ba 0f00 	cmp.w	sl, #0
 800ee14:	d020      	beq.n	800ee58 <__multiply+0xe4>
 800ee16:	f105 0e14 	add.w	lr, r5, #20
 800ee1a:	46b1      	mov	r9, r6
 800ee1c:	2200      	movs	r2, #0
 800ee1e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ee22:	f8d9 b000 	ldr.w	fp, [r9]
 800ee26:	b2a1      	uxth	r1, r4
 800ee28:	fa1f fb8b 	uxth.w	fp, fp
 800ee2c:	fb0a b101 	mla	r1, sl, r1, fp
 800ee30:	4411      	add	r1, r2
 800ee32:	f8d9 2000 	ldr.w	r2, [r9]
 800ee36:	0c24      	lsrs	r4, r4, #16
 800ee38:	0c12      	lsrs	r2, r2, #16
 800ee3a:	fb0a 2404 	mla	r4, sl, r4, r2
 800ee3e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ee42:	b289      	uxth	r1, r1
 800ee44:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ee48:	45f4      	cmp	ip, lr
 800ee4a:	f849 1b04 	str.w	r1, [r9], #4
 800ee4e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ee52:	d8e4      	bhi.n	800ee1e <__multiply+0xaa>
 800ee54:	9901      	ldr	r1, [sp, #4]
 800ee56:	5072      	str	r2, [r6, r1]
 800ee58:	9a03      	ldr	r2, [sp, #12]
 800ee5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ee5e:	3304      	adds	r3, #4
 800ee60:	f1b9 0f00 	cmp.w	r9, #0
 800ee64:	d01f      	beq.n	800eea6 <__multiply+0x132>
 800ee66:	6834      	ldr	r4, [r6, #0]
 800ee68:	f105 0114 	add.w	r1, r5, #20
 800ee6c:	46b6      	mov	lr, r6
 800ee6e:	f04f 0a00 	mov.w	sl, #0
 800ee72:	880a      	ldrh	r2, [r1, #0]
 800ee74:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ee78:	fb09 b202 	mla	r2, r9, r2, fp
 800ee7c:	4492      	add	sl, r2
 800ee7e:	b2a4      	uxth	r4, r4
 800ee80:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ee84:	f84e 4b04 	str.w	r4, [lr], #4
 800ee88:	f851 4b04 	ldr.w	r4, [r1], #4
 800ee8c:	f8be 2000 	ldrh.w	r2, [lr]
 800ee90:	0c24      	lsrs	r4, r4, #16
 800ee92:	fb09 2404 	mla	r4, r9, r4, r2
 800ee96:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ee9a:	458c      	cmp	ip, r1
 800ee9c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800eea0:	d8e7      	bhi.n	800ee72 <__multiply+0xfe>
 800eea2:	9a01      	ldr	r2, [sp, #4]
 800eea4:	50b4      	str	r4, [r6, r2]
 800eea6:	3604      	adds	r6, #4
 800eea8:	e7a3      	b.n	800edf2 <__multiply+0x7e>
 800eeaa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800eeae:	2b00      	cmp	r3, #0
 800eeb0:	d1a5      	bne.n	800edfe <__multiply+0x8a>
 800eeb2:	3f01      	subs	r7, #1
 800eeb4:	e7a1      	b.n	800edfa <__multiply+0x86>
 800eeb6:	bf00      	nop
 800eeb8:	08015074 	.word	0x08015074
 800eebc:	08015104 	.word	0x08015104

0800eec0 <__pow5mult>:
 800eec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eec4:	4615      	mov	r5, r2
 800eec6:	f012 0203 	ands.w	r2, r2, #3
 800eeca:	4606      	mov	r6, r0
 800eecc:	460f      	mov	r7, r1
 800eece:	d007      	beq.n	800eee0 <__pow5mult+0x20>
 800eed0:	4c25      	ldr	r4, [pc, #148]	; (800ef68 <__pow5mult+0xa8>)
 800eed2:	3a01      	subs	r2, #1
 800eed4:	2300      	movs	r3, #0
 800eed6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eeda:	f7ff fe51 	bl	800eb80 <__multadd>
 800eede:	4607      	mov	r7, r0
 800eee0:	10ad      	asrs	r5, r5, #2
 800eee2:	d03d      	beq.n	800ef60 <__pow5mult+0xa0>
 800eee4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eee6:	b97c      	cbnz	r4, 800ef08 <__pow5mult+0x48>
 800eee8:	2010      	movs	r0, #16
 800eeea:	f7ff fdcd 	bl	800ea88 <malloc>
 800eeee:	4602      	mov	r2, r0
 800eef0:	6270      	str	r0, [r6, #36]	; 0x24
 800eef2:	b928      	cbnz	r0, 800ef00 <__pow5mult+0x40>
 800eef4:	4b1d      	ldr	r3, [pc, #116]	; (800ef6c <__pow5mult+0xac>)
 800eef6:	481e      	ldr	r0, [pc, #120]	; (800ef70 <__pow5mult+0xb0>)
 800eef8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800eefc:	f000 fce8 	bl	800f8d0 <__assert_func>
 800ef00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef04:	6004      	str	r4, [r0, #0]
 800ef06:	60c4      	str	r4, [r0, #12]
 800ef08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ef0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ef10:	b94c      	cbnz	r4, 800ef26 <__pow5mult+0x66>
 800ef12:	f240 2171 	movw	r1, #625	; 0x271
 800ef16:	4630      	mov	r0, r6
 800ef18:	f7ff ff16 	bl	800ed48 <__i2b>
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ef22:	4604      	mov	r4, r0
 800ef24:	6003      	str	r3, [r0, #0]
 800ef26:	f04f 0900 	mov.w	r9, #0
 800ef2a:	07eb      	lsls	r3, r5, #31
 800ef2c:	d50a      	bpl.n	800ef44 <__pow5mult+0x84>
 800ef2e:	4639      	mov	r1, r7
 800ef30:	4622      	mov	r2, r4
 800ef32:	4630      	mov	r0, r6
 800ef34:	f7ff ff1e 	bl	800ed74 <__multiply>
 800ef38:	4639      	mov	r1, r7
 800ef3a:	4680      	mov	r8, r0
 800ef3c:	4630      	mov	r0, r6
 800ef3e:	f7ff fdfd 	bl	800eb3c <_Bfree>
 800ef42:	4647      	mov	r7, r8
 800ef44:	106d      	asrs	r5, r5, #1
 800ef46:	d00b      	beq.n	800ef60 <__pow5mult+0xa0>
 800ef48:	6820      	ldr	r0, [r4, #0]
 800ef4a:	b938      	cbnz	r0, 800ef5c <__pow5mult+0x9c>
 800ef4c:	4622      	mov	r2, r4
 800ef4e:	4621      	mov	r1, r4
 800ef50:	4630      	mov	r0, r6
 800ef52:	f7ff ff0f 	bl	800ed74 <__multiply>
 800ef56:	6020      	str	r0, [r4, #0]
 800ef58:	f8c0 9000 	str.w	r9, [r0]
 800ef5c:	4604      	mov	r4, r0
 800ef5e:	e7e4      	b.n	800ef2a <__pow5mult+0x6a>
 800ef60:	4638      	mov	r0, r7
 800ef62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef66:	bf00      	nop
 800ef68:	08015258 	.word	0x08015258
 800ef6c:	08014ffe 	.word	0x08014ffe
 800ef70:	08015104 	.word	0x08015104

0800ef74 <__lshift>:
 800ef74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef78:	460c      	mov	r4, r1
 800ef7a:	6849      	ldr	r1, [r1, #4]
 800ef7c:	6923      	ldr	r3, [r4, #16]
 800ef7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ef82:	68a3      	ldr	r3, [r4, #8]
 800ef84:	4607      	mov	r7, r0
 800ef86:	4691      	mov	r9, r2
 800ef88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ef8c:	f108 0601 	add.w	r6, r8, #1
 800ef90:	42b3      	cmp	r3, r6
 800ef92:	db0b      	blt.n	800efac <__lshift+0x38>
 800ef94:	4638      	mov	r0, r7
 800ef96:	f7ff fd91 	bl	800eabc <_Balloc>
 800ef9a:	4605      	mov	r5, r0
 800ef9c:	b948      	cbnz	r0, 800efb2 <__lshift+0x3e>
 800ef9e:	4602      	mov	r2, r0
 800efa0:	4b28      	ldr	r3, [pc, #160]	; (800f044 <__lshift+0xd0>)
 800efa2:	4829      	ldr	r0, [pc, #164]	; (800f048 <__lshift+0xd4>)
 800efa4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800efa8:	f000 fc92 	bl	800f8d0 <__assert_func>
 800efac:	3101      	adds	r1, #1
 800efae:	005b      	lsls	r3, r3, #1
 800efb0:	e7ee      	b.n	800ef90 <__lshift+0x1c>
 800efb2:	2300      	movs	r3, #0
 800efb4:	f100 0114 	add.w	r1, r0, #20
 800efb8:	f100 0210 	add.w	r2, r0, #16
 800efbc:	4618      	mov	r0, r3
 800efbe:	4553      	cmp	r3, sl
 800efc0:	db33      	blt.n	800f02a <__lshift+0xb6>
 800efc2:	6920      	ldr	r0, [r4, #16]
 800efc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800efc8:	f104 0314 	add.w	r3, r4, #20
 800efcc:	f019 091f 	ands.w	r9, r9, #31
 800efd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800efd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800efd8:	d02b      	beq.n	800f032 <__lshift+0xbe>
 800efda:	f1c9 0e20 	rsb	lr, r9, #32
 800efde:	468a      	mov	sl, r1
 800efe0:	2200      	movs	r2, #0
 800efe2:	6818      	ldr	r0, [r3, #0]
 800efe4:	fa00 f009 	lsl.w	r0, r0, r9
 800efe8:	4302      	orrs	r2, r0
 800efea:	f84a 2b04 	str.w	r2, [sl], #4
 800efee:	f853 2b04 	ldr.w	r2, [r3], #4
 800eff2:	459c      	cmp	ip, r3
 800eff4:	fa22 f20e 	lsr.w	r2, r2, lr
 800eff8:	d8f3      	bhi.n	800efe2 <__lshift+0x6e>
 800effa:	ebac 0304 	sub.w	r3, ip, r4
 800effe:	3b15      	subs	r3, #21
 800f000:	f023 0303 	bic.w	r3, r3, #3
 800f004:	3304      	adds	r3, #4
 800f006:	f104 0015 	add.w	r0, r4, #21
 800f00a:	4584      	cmp	ip, r0
 800f00c:	bf38      	it	cc
 800f00e:	2304      	movcc	r3, #4
 800f010:	50ca      	str	r2, [r1, r3]
 800f012:	b10a      	cbz	r2, 800f018 <__lshift+0xa4>
 800f014:	f108 0602 	add.w	r6, r8, #2
 800f018:	3e01      	subs	r6, #1
 800f01a:	4638      	mov	r0, r7
 800f01c:	612e      	str	r6, [r5, #16]
 800f01e:	4621      	mov	r1, r4
 800f020:	f7ff fd8c 	bl	800eb3c <_Bfree>
 800f024:	4628      	mov	r0, r5
 800f026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f02a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f02e:	3301      	adds	r3, #1
 800f030:	e7c5      	b.n	800efbe <__lshift+0x4a>
 800f032:	3904      	subs	r1, #4
 800f034:	f853 2b04 	ldr.w	r2, [r3], #4
 800f038:	f841 2f04 	str.w	r2, [r1, #4]!
 800f03c:	459c      	cmp	ip, r3
 800f03e:	d8f9      	bhi.n	800f034 <__lshift+0xc0>
 800f040:	e7ea      	b.n	800f018 <__lshift+0xa4>
 800f042:	bf00      	nop
 800f044:	08015074 	.word	0x08015074
 800f048:	08015104 	.word	0x08015104

0800f04c <__mcmp>:
 800f04c:	b530      	push	{r4, r5, lr}
 800f04e:	6902      	ldr	r2, [r0, #16]
 800f050:	690c      	ldr	r4, [r1, #16]
 800f052:	1b12      	subs	r2, r2, r4
 800f054:	d10e      	bne.n	800f074 <__mcmp+0x28>
 800f056:	f100 0314 	add.w	r3, r0, #20
 800f05a:	3114      	adds	r1, #20
 800f05c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f060:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f064:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f068:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f06c:	42a5      	cmp	r5, r4
 800f06e:	d003      	beq.n	800f078 <__mcmp+0x2c>
 800f070:	d305      	bcc.n	800f07e <__mcmp+0x32>
 800f072:	2201      	movs	r2, #1
 800f074:	4610      	mov	r0, r2
 800f076:	bd30      	pop	{r4, r5, pc}
 800f078:	4283      	cmp	r3, r0
 800f07a:	d3f3      	bcc.n	800f064 <__mcmp+0x18>
 800f07c:	e7fa      	b.n	800f074 <__mcmp+0x28>
 800f07e:	f04f 32ff 	mov.w	r2, #4294967295
 800f082:	e7f7      	b.n	800f074 <__mcmp+0x28>

0800f084 <__mdiff>:
 800f084:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f088:	460c      	mov	r4, r1
 800f08a:	4606      	mov	r6, r0
 800f08c:	4611      	mov	r1, r2
 800f08e:	4620      	mov	r0, r4
 800f090:	4617      	mov	r7, r2
 800f092:	f7ff ffdb 	bl	800f04c <__mcmp>
 800f096:	1e05      	subs	r5, r0, #0
 800f098:	d110      	bne.n	800f0bc <__mdiff+0x38>
 800f09a:	4629      	mov	r1, r5
 800f09c:	4630      	mov	r0, r6
 800f09e:	f7ff fd0d 	bl	800eabc <_Balloc>
 800f0a2:	b930      	cbnz	r0, 800f0b2 <__mdiff+0x2e>
 800f0a4:	4b39      	ldr	r3, [pc, #228]	; (800f18c <__mdiff+0x108>)
 800f0a6:	4602      	mov	r2, r0
 800f0a8:	f240 2132 	movw	r1, #562	; 0x232
 800f0ac:	4838      	ldr	r0, [pc, #224]	; (800f190 <__mdiff+0x10c>)
 800f0ae:	f000 fc0f 	bl	800f8d0 <__assert_func>
 800f0b2:	2301      	movs	r3, #1
 800f0b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f0b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0bc:	bfa4      	itt	ge
 800f0be:	463b      	movge	r3, r7
 800f0c0:	4627      	movge	r7, r4
 800f0c2:	4630      	mov	r0, r6
 800f0c4:	6879      	ldr	r1, [r7, #4]
 800f0c6:	bfa6      	itte	ge
 800f0c8:	461c      	movge	r4, r3
 800f0ca:	2500      	movge	r5, #0
 800f0cc:	2501      	movlt	r5, #1
 800f0ce:	f7ff fcf5 	bl	800eabc <_Balloc>
 800f0d2:	b920      	cbnz	r0, 800f0de <__mdiff+0x5a>
 800f0d4:	4b2d      	ldr	r3, [pc, #180]	; (800f18c <__mdiff+0x108>)
 800f0d6:	4602      	mov	r2, r0
 800f0d8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f0dc:	e7e6      	b.n	800f0ac <__mdiff+0x28>
 800f0de:	693e      	ldr	r6, [r7, #16]
 800f0e0:	60c5      	str	r5, [r0, #12]
 800f0e2:	6925      	ldr	r5, [r4, #16]
 800f0e4:	f107 0114 	add.w	r1, r7, #20
 800f0e8:	f104 0914 	add.w	r9, r4, #20
 800f0ec:	f100 0e14 	add.w	lr, r0, #20
 800f0f0:	f107 0210 	add.w	r2, r7, #16
 800f0f4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f0f8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f0fc:	46f2      	mov	sl, lr
 800f0fe:	2700      	movs	r7, #0
 800f100:	f859 3b04 	ldr.w	r3, [r9], #4
 800f104:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f108:	fa1f f883 	uxth.w	r8, r3
 800f10c:	fa17 f78b 	uxtah	r7, r7, fp
 800f110:	0c1b      	lsrs	r3, r3, #16
 800f112:	eba7 0808 	sub.w	r8, r7, r8
 800f116:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f11a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f11e:	fa1f f888 	uxth.w	r8, r8
 800f122:	141f      	asrs	r7, r3, #16
 800f124:	454d      	cmp	r5, r9
 800f126:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f12a:	f84a 3b04 	str.w	r3, [sl], #4
 800f12e:	d8e7      	bhi.n	800f100 <__mdiff+0x7c>
 800f130:	1b2b      	subs	r3, r5, r4
 800f132:	3b15      	subs	r3, #21
 800f134:	f023 0303 	bic.w	r3, r3, #3
 800f138:	3304      	adds	r3, #4
 800f13a:	3415      	adds	r4, #21
 800f13c:	42a5      	cmp	r5, r4
 800f13e:	bf38      	it	cc
 800f140:	2304      	movcc	r3, #4
 800f142:	4419      	add	r1, r3
 800f144:	4473      	add	r3, lr
 800f146:	469e      	mov	lr, r3
 800f148:	460d      	mov	r5, r1
 800f14a:	4565      	cmp	r5, ip
 800f14c:	d30e      	bcc.n	800f16c <__mdiff+0xe8>
 800f14e:	f10c 0203 	add.w	r2, ip, #3
 800f152:	1a52      	subs	r2, r2, r1
 800f154:	f022 0203 	bic.w	r2, r2, #3
 800f158:	3903      	subs	r1, #3
 800f15a:	458c      	cmp	ip, r1
 800f15c:	bf38      	it	cc
 800f15e:	2200      	movcc	r2, #0
 800f160:	441a      	add	r2, r3
 800f162:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f166:	b17b      	cbz	r3, 800f188 <__mdiff+0x104>
 800f168:	6106      	str	r6, [r0, #16]
 800f16a:	e7a5      	b.n	800f0b8 <__mdiff+0x34>
 800f16c:	f855 8b04 	ldr.w	r8, [r5], #4
 800f170:	fa17 f488 	uxtah	r4, r7, r8
 800f174:	1422      	asrs	r2, r4, #16
 800f176:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f17a:	b2a4      	uxth	r4, r4
 800f17c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f180:	f84e 4b04 	str.w	r4, [lr], #4
 800f184:	1417      	asrs	r7, r2, #16
 800f186:	e7e0      	b.n	800f14a <__mdiff+0xc6>
 800f188:	3e01      	subs	r6, #1
 800f18a:	e7ea      	b.n	800f162 <__mdiff+0xde>
 800f18c:	08015074 	.word	0x08015074
 800f190:	08015104 	.word	0x08015104

0800f194 <__ulp>:
 800f194:	b082      	sub	sp, #8
 800f196:	ed8d 0b00 	vstr	d0, [sp]
 800f19a:	9b01      	ldr	r3, [sp, #4]
 800f19c:	4912      	ldr	r1, [pc, #72]	; (800f1e8 <__ulp+0x54>)
 800f19e:	4019      	ands	r1, r3
 800f1a0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f1a4:	2900      	cmp	r1, #0
 800f1a6:	dd05      	ble.n	800f1b4 <__ulp+0x20>
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	460b      	mov	r3, r1
 800f1ac:	ec43 2b10 	vmov	d0, r2, r3
 800f1b0:	b002      	add	sp, #8
 800f1b2:	4770      	bx	lr
 800f1b4:	4249      	negs	r1, r1
 800f1b6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f1ba:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f1be:	f04f 0200 	mov.w	r2, #0
 800f1c2:	f04f 0300 	mov.w	r3, #0
 800f1c6:	da04      	bge.n	800f1d2 <__ulp+0x3e>
 800f1c8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f1cc:	fa41 f300 	asr.w	r3, r1, r0
 800f1d0:	e7ec      	b.n	800f1ac <__ulp+0x18>
 800f1d2:	f1a0 0114 	sub.w	r1, r0, #20
 800f1d6:	291e      	cmp	r1, #30
 800f1d8:	bfda      	itte	le
 800f1da:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f1de:	fa20 f101 	lsrle.w	r1, r0, r1
 800f1e2:	2101      	movgt	r1, #1
 800f1e4:	460a      	mov	r2, r1
 800f1e6:	e7e1      	b.n	800f1ac <__ulp+0x18>
 800f1e8:	7ff00000 	.word	0x7ff00000

0800f1ec <__b2d>:
 800f1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ee:	6905      	ldr	r5, [r0, #16]
 800f1f0:	f100 0714 	add.w	r7, r0, #20
 800f1f4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f1f8:	1f2e      	subs	r6, r5, #4
 800f1fa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f1fe:	4620      	mov	r0, r4
 800f200:	f7ff fd52 	bl	800eca8 <__hi0bits>
 800f204:	f1c0 0320 	rsb	r3, r0, #32
 800f208:	280a      	cmp	r0, #10
 800f20a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f288 <__b2d+0x9c>
 800f20e:	600b      	str	r3, [r1, #0]
 800f210:	dc14      	bgt.n	800f23c <__b2d+0x50>
 800f212:	f1c0 0e0b 	rsb	lr, r0, #11
 800f216:	fa24 f10e 	lsr.w	r1, r4, lr
 800f21a:	42b7      	cmp	r7, r6
 800f21c:	ea41 030c 	orr.w	r3, r1, ip
 800f220:	bf34      	ite	cc
 800f222:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f226:	2100      	movcs	r1, #0
 800f228:	3015      	adds	r0, #21
 800f22a:	fa04 f000 	lsl.w	r0, r4, r0
 800f22e:	fa21 f10e 	lsr.w	r1, r1, lr
 800f232:	ea40 0201 	orr.w	r2, r0, r1
 800f236:	ec43 2b10 	vmov	d0, r2, r3
 800f23a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f23c:	42b7      	cmp	r7, r6
 800f23e:	bf3a      	itte	cc
 800f240:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f244:	f1a5 0608 	subcc.w	r6, r5, #8
 800f248:	2100      	movcs	r1, #0
 800f24a:	380b      	subs	r0, #11
 800f24c:	d017      	beq.n	800f27e <__b2d+0x92>
 800f24e:	f1c0 0c20 	rsb	ip, r0, #32
 800f252:	fa04 f500 	lsl.w	r5, r4, r0
 800f256:	42be      	cmp	r6, r7
 800f258:	fa21 f40c 	lsr.w	r4, r1, ip
 800f25c:	ea45 0504 	orr.w	r5, r5, r4
 800f260:	bf8c      	ite	hi
 800f262:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f266:	2400      	movls	r4, #0
 800f268:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f26c:	fa01 f000 	lsl.w	r0, r1, r0
 800f270:	fa24 f40c 	lsr.w	r4, r4, ip
 800f274:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f278:	ea40 0204 	orr.w	r2, r0, r4
 800f27c:	e7db      	b.n	800f236 <__b2d+0x4a>
 800f27e:	ea44 030c 	orr.w	r3, r4, ip
 800f282:	460a      	mov	r2, r1
 800f284:	e7d7      	b.n	800f236 <__b2d+0x4a>
 800f286:	bf00      	nop
 800f288:	3ff00000 	.word	0x3ff00000

0800f28c <__d2b>:
 800f28c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f290:	4689      	mov	r9, r1
 800f292:	2101      	movs	r1, #1
 800f294:	ec57 6b10 	vmov	r6, r7, d0
 800f298:	4690      	mov	r8, r2
 800f29a:	f7ff fc0f 	bl	800eabc <_Balloc>
 800f29e:	4604      	mov	r4, r0
 800f2a0:	b930      	cbnz	r0, 800f2b0 <__d2b+0x24>
 800f2a2:	4602      	mov	r2, r0
 800f2a4:	4b25      	ldr	r3, [pc, #148]	; (800f33c <__d2b+0xb0>)
 800f2a6:	4826      	ldr	r0, [pc, #152]	; (800f340 <__d2b+0xb4>)
 800f2a8:	f240 310a 	movw	r1, #778	; 0x30a
 800f2ac:	f000 fb10 	bl	800f8d0 <__assert_func>
 800f2b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f2b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f2b8:	bb35      	cbnz	r5, 800f308 <__d2b+0x7c>
 800f2ba:	2e00      	cmp	r6, #0
 800f2bc:	9301      	str	r3, [sp, #4]
 800f2be:	d028      	beq.n	800f312 <__d2b+0x86>
 800f2c0:	4668      	mov	r0, sp
 800f2c2:	9600      	str	r6, [sp, #0]
 800f2c4:	f7ff fd10 	bl	800ece8 <__lo0bits>
 800f2c8:	9900      	ldr	r1, [sp, #0]
 800f2ca:	b300      	cbz	r0, 800f30e <__d2b+0x82>
 800f2cc:	9a01      	ldr	r2, [sp, #4]
 800f2ce:	f1c0 0320 	rsb	r3, r0, #32
 800f2d2:	fa02 f303 	lsl.w	r3, r2, r3
 800f2d6:	430b      	orrs	r3, r1
 800f2d8:	40c2      	lsrs	r2, r0
 800f2da:	6163      	str	r3, [r4, #20]
 800f2dc:	9201      	str	r2, [sp, #4]
 800f2de:	9b01      	ldr	r3, [sp, #4]
 800f2e0:	61a3      	str	r3, [r4, #24]
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	bf14      	ite	ne
 800f2e6:	2202      	movne	r2, #2
 800f2e8:	2201      	moveq	r2, #1
 800f2ea:	6122      	str	r2, [r4, #16]
 800f2ec:	b1d5      	cbz	r5, 800f324 <__d2b+0x98>
 800f2ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f2f2:	4405      	add	r5, r0
 800f2f4:	f8c9 5000 	str.w	r5, [r9]
 800f2f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f2fc:	f8c8 0000 	str.w	r0, [r8]
 800f300:	4620      	mov	r0, r4
 800f302:	b003      	add	sp, #12
 800f304:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f30c:	e7d5      	b.n	800f2ba <__d2b+0x2e>
 800f30e:	6161      	str	r1, [r4, #20]
 800f310:	e7e5      	b.n	800f2de <__d2b+0x52>
 800f312:	a801      	add	r0, sp, #4
 800f314:	f7ff fce8 	bl	800ece8 <__lo0bits>
 800f318:	9b01      	ldr	r3, [sp, #4]
 800f31a:	6163      	str	r3, [r4, #20]
 800f31c:	2201      	movs	r2, #1
 800f31e:	6122      	str	r2, [r4, #16]
 800f320:	3020      	adds	r0, #32
 800f322:	e7e3      	b.n	800f2ec <__d2b+0x60>
 800f324:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f328:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f32c:	f8c9 0000 	str.w	r0, [r9]
 800f330:	6918      	ldr	r0, [r3, #16]
 800f332:	f7ff fcb9 	bl	800eca8 <__hi0bits>
 800f336:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f33a:	e7df      	b.n	800f2fc <__d2b+0x70>
 800f33c:	08015074 	.word	0x08015074
 800f340:	08015104 	.word	0x08015104

0800f344 <__ratio>:
 800f344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f348:	4688      	mov	r8, r1
 800f34a:	4669      	mov	r1, sp
 800f34c:	4681      	mov	r9, r0
 800f34e:	f7ff ff4d 	bl	800f1ec <__b2d>
 800f352:	a901      	add	r1, sp, #4
 800f354:	4640      	mov	r0, r8
 800f356:	ec55 4b10 	vmov	r4, r5, d0
 800f35a:	f7ff ff47 	bl	800f1ec <__b2d>
 800f35e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f362:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f366:	eba3 0c02 	sub.w	ip, r3, r2
 800f36a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f36e:	1a9b      	subs	r3, r3, r2
 800f370:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f374:	ec51 0b10 	vmov	r0, r1, d0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	bfd6      	itet	le
 800f37c:	460a      	movle	r2, r1
 800f37e:	462a      	movgt	r2, r5
 800f380:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f384:	468b      	mov	fp, r1
 800f386:	462f      	mov	r7, r5
 800f388:	bfd4      	ite	le
 800f38a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f38e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f392:	4620      	mov	r0, r4
 800f394:	ee10 2a10 	vmov	r2, s0
 800f398:	465b      	mov	r3, fp
 800f39a:	4639      	mov	r1, r7
 800f39c:	f7f1 fa56 	bl	800084c <__aeabi_ddiv>
 800f3a0:	ec41 0b10 	vmov	d0, r0, r1
 800f3a4:	b003      	add	sp, #12
 800f3a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f3aa <__copybits>:
 800f3aa:	3901      	subs	r1, #1
 800f3ac:	b570      	push	{r4, r5, r6, lr}
 800f3ae:	1149      	asrs	r1, r1, #5
 800f3b0:	6914      	ldr	r4, [r2, #16]
 800f3b2:	3101      	adds	r1, #1
 800f3b4:	f102 0314 	add.w	r3, r2, #20
 800f3b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f3bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f3c0:	1f05      	subs	r5, r0, #4
 800f3c2:	42a3      	cmp	r3, r4
 800f3c4:	d30c      	bcc.n	800f3e0 <__copybits+0x36>
 800f3c6:	1aa3      	subs	r3, r4, r2
 800f3c8:	3b11      	subs	r3, #17
 800f3ca:	f023 0303 	bic.w	r3, r3, #3
 800f3ce:	3211      	adds	r2, #17
 800f3d0:	42a2      	cmp	r2, r4
 800f3d2:	bf88      	it	hi
 800f3d4:	2300      	movhi	r3, #0
 800f3d6:	4418      	add	r0, r3
 800f3d8:	2300      	movs	r3, #0
 800f3da:	4288      	cmp	r0, r1
 800f3dc:	d305      	bcc.n	800f3ea <__copybits+0x40>
 800f3de:	bd70      	pop	{r4, r5, r6, pc}
 800f3e0:	f853 6b04 	ldr.w	r6, [r3], #4
 800f3e4:	f845 6f04 	str.w	r6, [r5, #4]!
 800f3e8:	e7eb      	b.n	800f3c2 <__copybits+0x18>
 800f3ea:	f840 3b04 	str.w	r3, [r0], #4
 800f3ee:	e7f4      	b.n	800f3da <__copybits+0x30>

0800f3f0 <__any_on>:
 800f3f0:	f100 0214 	add.w	r2, r0, #20
 800f3f4:	6900      	ldr	r0, [r0, #16]
 800f3f6:	114b      	asrs	r3, r1, #5
 800f3f8:	4298      	cmp	r0, r3
 800f3fa:	b510      	push	{r4, lr}
 800f3fc:	db11      	blt.n	800f422 <__any_on+0x32>
 800f3fe:	dd0a      	ble.n	800f416 <__any_on+0x26>
 800f400:	f011 011f 	ands.w	r1, r1, #31
 800f404:	d007      	beq.n	800f416 <__any_on+0x26>
 800f406:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f40a:	fa24 f001 	lsr.w	r0, r4, r1
 800f40e:	fa00 f101 	lsl.w	r1, r0, r1
 800f412:	428c      	cmp	r4, r1
 800f414:	d10b      	bne.n	800f42e <__any_on+0x3e>
 800f416:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f41a:	4293      	cmp	r3, r2
 800f41c:	d803      	bhi.n	800f426 <__any_on+0x36>
 800f41e:	2000      	movs	r0, #0
 800f420:	bd10      	pop	{r4, pc}
 800f422:	4603      	mov	r3, r0
 800f424:	e7f7      	b.n	800f416 <__any_on+0x26>
 800f426:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f42a:	2900      	cmp	r1, #0
 800f42c:	d0f5      	beq.n	800f41a <__any_on+0x2a>
 800f42e:	2001      	movs	r0, #1
 800f430:	e7f6      	b.n	800f420 <__any_on+0x30>

0800f432 <_calloc_r>:
 800f432:	b513      	push	{r0, r1, r4, lr}
 800f434:	434a      	muls	r2, r1
 800f436:	4611      	mov	r1, r2
 800f438:	9201      	str	r2, [sp, #4]
 800f43a:	f000 f859 	bl	800f4f0 <_malloc_r>
 800f43e:	4604      	mov	r4, r0
 800f440:	b118      	cbz	r0, 800f44a <_calloc_r+0x18>
 800f442:	9a01      	ldr	r2, [sp, #4]
 800f444:	2100      	movs	r1, #0
 800f446:	f7fc fbd7 	bl	800bbf8 <memset>
 800f44a:	4620      	mov	r0, r4
 800f44c:	b002      	add	sp, #8
 800f44e:	bd10      	pop	{r4, pc}

0800f450 <_free_r>:
 800f450:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f452:	2900      	cmp	r1, #0
 800f454:	d048      	beq.n	800f4e8 <_free_r+0x98>
 800f456:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f45a:	9001      	str	r0, [sp, #4]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	f1a1 0404 	sub.w	r4, r1, #4
 800f462:	bfb8      	it	lt
 800f464:	18e4      	addlt	r4, r4, r3
 800f466:	f000 fa7d 	bl	800f964 <__malloc_lock>
 800f46a:	4a20      	ldr	r2, [pc, #128]	; (800f4ec <_free_r+0x9c>)
 800f46c:	9801      	ldr	r0, [sp, #4]
 800f46e:	6813      	ldr	r3, [r2, #0]
 800f470:	4615      	mov	r5, r2
 800f472:	b933      	cbnz	r3, 800f482 <_free_r+0x32>
 800f474:	6063      	str	r3, [r4, #4]
 800f476:	6014      	str	r4, [r2, #0]
 800f478:	b003      	add	sp, #12
 800f47a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f47e:	f000 ba77 	b.w	800f970 <__malloc_unlock>
 800f482:	42a3      	cmp	r3, r4
 800f484:	d90b      	bls.n	800f49e <_free_r+0x4e>
 800f486:	6821      	ldr	r1, [r4, #0]
 800f488:	1862      	adds	r2, r4, r1
 800f48a:	4293      	cmp	r3, r2
 800f48c:	bf04      	itt	eq
 800f48e:	681a      	ldreq	r2, [r3, #0]
 800f490:	685b      	ldreq	r3, [r3, #4]
 800f492:	6063      	str	r3, [r4, #4]
 800f494:	bf04      	itt	eq
 800f496:	1852      	addeq	r2, r2, r1
 800f498:	6022      	streq	r2, [r4, #0]
 800f49a:	602c      	str	r4, [r5, #0]
 800f49c:	e7ec      	b.n	800f478 <_free_r+0x28>
 800f49e:	461a      	mov	r2, r3
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	b10b      	cbz	r3, 800f4a8 <_free_r+0x58>
 800f4a4:	42a3      	cmp	r3, r4
 800f4a6:	d9fa      	bls.n	800f49e <_free_r+0x4e>
 800f4a8:	6811      	ldr	r1, [r2, #0]
 800f4aa:	1855      	adds	r5, r2, r1
 800f4ac:	42a5      	cmp	r5, r4
 800f4ae:	d10b      	bne.n	800f4c8 <_free_r+0x78>
 800f4b0:	6824      	ldr	r4, [r4, #0]
 800f4b2:	4421      	add	r1, r4
 800f4b4:	1854      	adds	r4, r2, r1
 800f4b6:	42a3      	cmp	r3, r4
 800f4b8:	6011      	str	r1, [r2, #0]
 800f4ba:	d1dd      	bne.n	800f478 <_free_r+0x28>
 800f4bc:	681c      	ldr	r4, [r3, #0]
 800f4be:	685b      	ldr	r3, [r3, #4]
 800f4c0:	6053      	str	r3, [r2, #4]
 800f4c2:	4421      	add	r1, r4
 800f4c4:	6011      	str	r1, [r2, #0]
 800f4c6:	e7d7      	b.n	800f478 <_free_r+0x28>
 800f4c8:	d902      	bls.n	800f4d0 <_free_r+0x80>
 800f4ca:	230c      	movs	r3, #12
 800f4cc:	6003      	str	r3, [r0, #0]
 800f4ce:	e7d3      	b.n	800f478 <_free_r+0x28>
 800f4d0:	6825      	ldr	r5, [r4, #0]
 800f4d2:	1961      	adds	r1, r4, r5
 800f4d4:	428b      	cmp	r3, r1
 800f4d6:	bf04      	itt	eq
 800f4d8:	6819      	ldreq	r1, [r3, #0]
 800f4da:	685b      	ldreq	r3, [r3, #4]
 800f4dc:	6063      	str	r3, [r4, #4]
 800f4de:	bf04      	itt	eq
 800f4e0:	1949      	addeq	r1, r1, r5
 800f4e2:	6021      	streq	r1, [r4, #0]
 800f4e4:	6054      	str	r4, [r2, #4]
 800f4e6:	e7c7      	b.n	800f478 <_free_r+0x28>
 800f4e8:	b003      	add	sp, #12
 800f4ea:	bd30      	pop	{r4, r5, pc}
 800f4ec:	20000734 	.word	0x20000734

0800f4f0 <_malloc_r>:
 800f4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4f2:	1ccd      	adds	r5, r1, #3
 800f4f4:	f025 0503 	bic.w	r5, r5, #3
 800f4f8:	3508      	adds	r5, #8
 800f4fa:	2d0c      	cmp	r5, #12
 800f4fc:	bf38      	it	cc
 800f4fe:	250c      	movcc	r5, #12
 800f500:	2d00      	cmp	r5, #0
 800f502:	4606      	mov	r6, r0
 800f504:	db01      	blt.n	800f50a <_malloc_r+0x1a>
 800f506:	42a9      	cmp	r1, r5
 800f508:	d903      	bls.n	800f512 <_malloc_r+0x22>
 800f50a:	230c      	movs	r3, #12
 800f50c:	6033      	str	r3, [r6, #0]
 800f50e:	2000      	movs	r0, #0
 800f510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f512:	f000 fa27 	bl	800f964 <__malloc_lock>
 800f516:	4921      	ldr	r1, [pc, #132]	; (800f59c <_malloc_r+0xac>)
 800f518:	680a      	ldr	r2, [r1, #0]
 800f51a:	4614      	mov	r4, r2
 800f51c:	b99c      	cbnz	r4, 800f546 <_malloc_r+0x56>
 800f51e:	4f20      	ldr	r7, [pc, #128]	; (800f5a0 <_malloc_r+0xb0>)
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	b923      	cbnz	r3, 800f52e <_malloc_r+0x3e>
 800f524:	4621      	mov	r1, r4
 800f526:	4630      	mov	r0, r6
 800f528:	f000 f9a2 	bl	800f870 <_sbrk_r>
 800f52c:	6038      	str	r0, [r7, #0]
 800f52e:	4629      	mov	r1, r5
 800f530:	4630      	mov	r0, r6
 800f532:	f000 f99d 	bl	800f870 <_sbrk_r>
 800f536:	1c43      	adds	r3, r0, #1
 800f538:	d123      	bne.n	800f582 <_malloc_r+0x92>
 800f53a:	230c      	movs	r3, #12
 800f53c:	6033      	str	r3, [r6, #0]
 800f53e:	4630      	mov	r0, r6
 800f540:	f000 fa16 	bl	800f970 <__malloc_unlock>
 800f544:	e7e3      	b.n	800f50e <_malloc_r+0x1e>
 800f546:	6823      	ldr	r3, [r4, #0]
 800f548:	1b5b      	subs	r3, r3, r5
 800f54a:	d417      	bmi.n	800f57c <_malloc_r+0x8c>
 800f54c:	2b0b      	cmp	r3, #11
 800f54e:	d903      	bls.n	800f558 <_malloc_r+0x68>
 800f550:	6023      	str	r3, [r4, #0]
 800f552:	441c      	add	r4, r3
 800f554:	6025      	str	r5, [r4, #0]
 800f556:	e004      	b.n	800f562 <_malloc_r+0x72>
 800f558:	6863      	ldr	r3, [r4, #4]
 800f55a:	42a2      	cmp	r2, r4
 800f55c:	bf0c      	ite	eq
 800f55e:	600b      	streq	r3, [r1, #0]
 800f560:	6053      	strne	r3, [r2, #4]
 800f562:	4630      	mov	r0, r6
 800f564:	f000 fa04 	bl	800f970 <__malloc_unlock>
 800f568:	f104 000b 	add.w	r0, r4, #11
 800f56c:	1d23      	adds	r3, r4, #4
 800f56e:	f020 0007 	bic.w	r0, r0, #7
 800f572:	1ac2      	subs	r2, r0, r3
 800f574:	d0cc      	beq.n	800f510 <_malloc_r+0x20>
 800f576:	1a1b      	subs	r3, r3, r0
 800f578:	50a3      	str	r3, [r4, r2]
 800f57a:	e7c9      	b.n	800f510 <_malloc_r+0x20>
 800f57c:	4622      	mov	r2, r4
 800f57e:	6864      	ldr	r4, [r4, #4]
 800f580:	e7cc      	b.n	800f51c <_malloc_r+0x2c>
 800f582:	1cc4      	adds	r4, r0, #3
 800f584:	f024 0403 	bic.w	r4, r4, #3
 800f588:	42a0      	cmp	r0, r4
 800f58a:	d0e3      	beq.n	800f554 <_malloc_r+0x64>
 800f58c:	1a21      	subs	r1, r4, r0
 800f58e:	4630      	mov	r0, r6
 800f590:	f000 f96e 	bl	800f870 <_sbrk_r>
 800f594:	3001      	adds	r0, #1
 800f596:	d1dd      	bne.n	800f554 <_malloc_r+0x64>
 800f598:	e7cf      	b.n	800f53a <_malloc_r+0x4a>
 800f59a:	bf00      	nop
 800f59c:	20000734 	.word	0x20000734
 800f5a0:	20000738 	.word	0x20000738

0800f5a4 <__ssputs_r>:
 800f5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5a8:	688e      	ldr	r6, [r1, #8]
 800f5aa:	429e      	cmp	r6, r3
 800f5ac:	4682      	mov	sl, r0
 800f5ae:	460c      	mov	r4, r1
 800f5b0:	4690      	mov	r8, r2
 800f5b2:	461f      	mov	r7, r3
 800f5b4:	d838      	bhi.n	800f628 <__ssputs_r+0x84>
 800f5b6:	898a      	ldrh	r2, [r1, #12]
 800f5b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f5bc:	d032      	beq.n	800f624 <__ssputs_r+0x80>
 800f5be:	6825      	ldr	r5, [r4, #0]
 800f5c0:	6909      	ldr	r1, [r1, #16]
 800f5c2:	eba5 0901 	sub.w	r9, r5, r1
 800f5c6:	6965      	ldr	r5, [r4, #20]
 800f5c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f5cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f5d0:	3301      	adds	r3, #1
 800f5d2:	444b      	add	r3, r9
 800f5d4:	106d      	asrs	r5, r5, #1
 800f5d6:	429d      	cmp	r5, r3
 800f5d8:	bf38      	it	cc
 800f5da:	461d      	movcc	r5, r3
 800f5dc:	0553      	lsls	r3, r2, #21
 800f5de:	d531      	bpl.n	800f644 <__ssputs_r+0xa0>
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	f7ff ff85 	bl	800f4f0 <_malloc_r>
 800f5e6:	4606      	mov	r6, r0
 800f5e8:	b950      	cbnz	r0, 800f600 <__ssputs_r+0x5c>
 800f5ea:	230c      	movs	r3, #12
 800f5ec:	f8ca 3000 	str.w	r3, [sl]
 800f5f0:	89a3      	ldrh	r3, [r4, #12]
 800f5f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5f6:	81a3      	strh	r3, [r4, #12]
 800f5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f600:	6921      	ldr	r1, [r4, #16]
 800f602:	464a      	mov	r2, r9
 800f604:	f7fc faea 	bl	800bbdc <memcpy>
 800f608:	89a3      	ldrh	r3, [r4, #12]
 800f60a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f60e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f612:	81a3      	strh	r3, [r4, #12]
 800f614:	6126      	str	r6, [r4, #16]
 800f616:	6165      	str	r5, [r4, #20]
 800f618:	444e      	add	r6, r9
 800f61a:	eba5 0509 	sub.w	r5, r5, r9
 800f61e:	6026      	str	r6, [r4, #0]
 800f620:	60a5      	str	r5, [r4, #8]
 800f622:	463e      	mov	r6, r7
 800f624:	42be      	cmp	r6, r7
 800f626:	d900      	bls.n	800f62a <__ssputs_r+0x86>
 800f628:	463e      	mov	r6, r7
 800f62a:	4632      	mov	r2, r6
 800f62c:	6820      	ldr	r0, [r4, #0]
 800f62e:	4641      	mov	r1, r8
 800f630:	f000 f97e 	bl	800f930 <memmove>
 800f634:	68a3      	ldr	r3, [r4, #8]
 800f636:	6822      	ldr	r2, [r4, #0]
 800f638:	1b9b      	subs	r3, r3, r6
 800f63a:	4432      	add	r2, r6
 800f63c:	60a3      	str	r3, [r4, #8]
 800f63e:	6022      	str	r2, [r4, #0]
 800f640:	2000      	movs	r0, #0
 800f642:	e7db      	b.n	800f5fc <__ssputs_r+0x58>
 800f644:	462a      	mov	r2, r5
 800f646:	f000 f999 	bl	800f97c <_realloc_r>
 800f64a:	4606      	mov	r6, r0
 800f64c:	2800      	cmp	r0, #0
 800f64e:	d1e1      	bne.n	800f614 <__ssputs_r+0x70>
 800f650:	6921      	ldr	r1, [r4, #16]
 800f652:	4650      	mov	r0, sl
 800f654:	f7ff fefc 	bl	800f450 <_free_r>
 800f658:	e7c7      	b.n	800f5ea <__ssputs_r+0x46>
	...

0800f65c <_svfiprintf_r>:
 800f65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f660:	4698      	mov	r8, r3
 800f662:	898b      	ldrh	r3, [r1, #12]
 800f664:	061b      	lsls	r3, r3, #24
 800f666:	b09d      	sub	sp, #116	; 0x74
 800f668:	4607      	mov	r7, r0
 800f66a:	460d      	mov	r5, r1
 800f66c:	4614      	mov	r4, r2
 800f66e:	d50e      	bpl.n	800f68e <_svfiprintf_r+0x32>
 800f670:	690b      	ldr	r3, [r1, #16]
 800f672:	b963      	cbnz	r3, 800f68e <_svfiprintf_r+0x32>
 800f674:	2140      	movs	r1, #64	; 0x40
 800f676:	f7ff ff3b 	bl	800f4f0 <_malloc_r>
 800f67a:	6028      	str	r0, [r5, #0]
 800f67c:	6128      	str	r0, [r5, #16]
 800f67e:	b920      	cbnz	r0, 800f68a <_svfiprintf_r+0x2e>
 800f680:	230c      	movs	r3, #12
 800f682:	603b      	str	r3, [r7, #0]
 800f684:	f04f 30ff 	mov.w	r0, #4294967295
 800f688:	e0d1      	b.n	800f82e <_svfiprintf_r+0x1d2>
 800f68a:	2340      	movs	r3, #64	; 0x40
 800f68c:	616b      	str	r3, [r5, #20]
 800f68e:	2300      	movs	r3, #0
 800f690:	9309      	str	r3, [sp, #36]	; 0x24
 800f692:	2320      	movs	r3, #32
 800f694:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f698:	f8cd 800c 	str.w	r8, [sp, #12]
 800f69c:	2330      	movs	r3, #48	; 0x30
 800f69e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f848 <_svfiprintf_r+0x1ec>
 800f6a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f6a6:	f04f 0901 	mov.w	r9, #1
 800f6aa:	4623      	mov	r3, r4
 800f6ac:	469a      	mov	sl, r3
 800f6ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f6b2:	b10a      	cbz	r2, 800f6b8 <_svfiprintf_r+0x5c>
 800f6b4:	2a25      	cmp	r2, #37	; 0x25
 800f6b6:	d1f9      	bne.n	800f6ac <_svfiprintf_r+0x50>
 800f6b8:	ebba 0b04 	subs.w	fp, sl, r4
 800f6bc:	d00b      	beq.n	800f6d6 <_svfiprintf_r+0x7a>
 800f6be:	465b      	mov	r3, fp
 800f6c0:	4622      	mov	r2, r4
 800f6c2:	4629      	mov	r1, r5
 800f6c4:	4638      	mov	r0, r7
 800f6c6:	f7ff ff6d 	bl	800f5a4 <__ssputs_r>
 800f6ca:	3001      	adds	r0, #1
 800f6cc:	f000 80aa 	beq.w	800f824 <_svfiprintf_r+0x1c8>
 800f6d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f6d2:	445a      	add	r2, fp
 800f6d4:	9209      	str	r2, [sp, #36]	; 0x24
 800f6d6:	f89a 3000 	ldrb.w	r3, [sl]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	f000 80a2 	beq.w	800f824 <_svfiprintf_r+0x1c8>
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	f04f 32ff 	mov.w	r2, #4294967295
 800f6e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6ea:	f10a 0a01 	add.w	sl, sl, #1
 800f6ee:	9304      	str	r3, [sp, #16]
 800f6f0:	9307      	str	r3, [sp, #28]
 800f6f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6f6:	931a      	str	r3, [sp, #104]	; 0x68
 800f6f8:	4654      	mov	r4, sl
 800f6fa:	2205      	movs	r2, #5
 800f6fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f700:	4851      	ldr	r0, [pc, #324]	; (800f848 <_svfiprintf_r+0x1ec>)
 800f702:	f7f0 fd6d 	bl	80001e0 <memchr>
 800f706:	9a04      	ldr	r2, [sp, #16]
 800f708:	b9d8      	cbnz	r0, 800f742 <_svfiprintf_r+0xe6>
 800f70a:	06d0      	lsls	r0, r2, #27
 800f70c:	bf44      	itt	mi
 800f70e:	2320      	movmi	r3, #32
 800f710:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f714:	0711      	lsls	r1, r2, #28
 800f716:	bf44      	itt	mi
 800f718:	232b      	movmi	r3, #43	; 0x2b
 800f71a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f71e:	f89a 3000 	ldrb.w	r3, [sl]
 800f722:	2b2a      	cmp	r3, #42	; 0x2a
 800f724:	d015      	beq.n	800f752 <_svfiprintf_r+0xf6>
 800f726:	9a07      	ldr	r2, [sp, #28]
 800f728:	4654      	mov	r4, sl
 800f72a:	2000      	movs	r0, #0
 800f72c:	f04f 0c0a 	mov.w	ip, #10
 800f730:	4621      	mov	r1, r4
 800f732:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f736:	3b30      	subs	r3, #48	; 0x30
 800f738:	2b09      	cmp	r3, #9
 800f73a:	d94e      	bls.n	800f7da <_svfiprintf_r+0x17e>
 800f73c:	b1b0      	cbz	r0, 800f76c <_svfiprintf_r+0x110>
 800f73e:	9207      	str	r2, [sp, #28]
 800f740:	e014      	b.n	800f76c <_svfiprintf_r+0x110>
 800f742:	eba0 0308 	sub.w	r3, r0, r8
 800f746:	fa09 f303 	lsl.w	r3, r9, r3
 800f74a:	4313      	orrs	r3, r2
 800f74c:	9304      	str	r3, [sp, #16]
 800f74e:	46a2      	mov	sl, r4
 800f750:	e7d2      	b.n	800f6f8 <_svfiprintf_r+0x9c>
 800f752:	9b03      	ldr	r3, [sp, #12]
 800f754:	1d19      	adds	r1, r3, #4
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	9103      	str	r1, [sp, #12]
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	bfbb      	ittet	lt
 800f75e:	425b      	neglt	r3, r3
 800f760:	f042 0202 	orrlt.w	r2, r2, #2
 800f764:	9307      	strge	r3, [sp, #28]
 800f766:	9307      	strlt	r3, [sp, #28]
 800f768:	bfb8      	it	lt
 800f76a:	9204      	strlt	r2, [sp, #16]
 800f76c:	7823      	ldrb	r3, [r4, #0]
 800f76e:	2b2e      	cmp	r3, #46	; 0x2e
 800f770:	d10c      	bne.n	800f78c <_svfiprintf_r+0x130>
 800f772:	7863      	ldrb	r3, [r4, #1]
 800f774:	2b2a      	cmp	r3, #42	; 0x2a
 800f776:	d135      	bne.n	800f7e4 <_svfiprintf_r+0x188>
 800f778:	9b03      	ldr	r3, [sp, #12]
 800f77a:	1d1a      	adds	r2, r3, #4
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	9203      	str	r2, [sp, #12]
 800f780:	2b00      	cmp	r3, #0
 800f782:	bfb8      	it	lt
 800f784:	f04f 33ff 	movlt.w	r3, #4294967295
 800f788:	3402      	adds	r4, #2
 800f78a:	9305      	str	r3, [sp, #20]
 800f78c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f858 <_svfiprintf_r+0x1fc>
 800f790:	7821      	ldrb	r1, [r4, #0]
 800f792:	2203      	movs	r2, #3
 800f794:	4650      	mov	r0, sl
 800f796:	f7f0 fd23 	bl	80001e0 <memchr>
 800f79a:	b140      	cbz	r0, 800f7ae <_svfiprintf_r+0x152>
 800f79c:	2340      	movs	r3, #64	; 0x40
 800f79e:	eba0 000a 	sub.w	r0, r0, sl
 800f7a2:	fa03 f000 	lsl.w	r0, r3, r0
 800f7a6:	9b04      	ldr	r3, [sp, #16]
 800f7a8:	4303      	orrs	r3, r0
 800f7aa:	3401      	adds	r4, #1
 800f7ac:	9304      	str	r3, [sp, #16]
 800f7ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f7b2:	4826      	ldr	r0, [pc, #152]	; (800f84c <_svfiprintf_r+0x1f0>)
 800f7b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f7b8:	2206      	movs	r2, #6
 800f7ba:	f7f0 fd11 	bl	80001e0 <memchr>
 800f7be:	2800      	cmp	r0, #0
 800f7c0:	d038      	beq.n	800f834 <_svfiprintf_r+0x1d8>
 800f7c2:	4b23      	ldr	r3, [pc, #140]	; (800f850 <_svfiprintf_r+0x1f4>)
 800f7c4:	bb1b      	cbnz	r3, 800f80e <_svfiprintf_r+0x1b2>
 800f7c6:	9b03      	ldr	r3, [sp, #12]
 800f7c8:	3307      	adds	r3, #7
 800f7ca:	f023 0307 	bic.w	r3, r3, #7
 800f7ce:	3308      	adds	r3, #8
 800f7d0:	9303      	str	r3, [sp, #12]
 800f7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f7d4:	4433      	add	r3, r6
 800f7d6:	9309      	str	r3, [sp, #36]	; 0x24
 800f7d8:	e767      	b.n	800f6aa <_svfiprintf_r+0x4e>
 800f7da:	fb0c 3202 	mla	r2, ip, r2, r3
 800f7de:	460c      	mov	r4, r1
 800f7e0:	2001      	movs	r0, #1
 800f7e2:	e7a5      	b.n	800f730 <_svfiprintf_r+0xd4>
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	3401      	adds	r4, #1
 800f7e8:	9305      	str	r3, [sp, #20]
 800f7ea:	4619      	mov	r1, r3
 800f7ec:	f04f 0c0a 	mov.w	ip, #10
 800f7f0:	4620      	mov	r0, r4
 800f7f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7f6:	3a30      	subs	r2, #48	; 0x30
 800f7f8:	2a09      	cmp	r2, #9
 800f7fa:	d903      	bls.n	800f804 <_svfiprintf_r+0x1a8>
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d0c5      	beq.n	800f78c <_svfiprintf_r+0x130>
 800f800:	9105      	str	r1, [sp, #20]
 800f802:	e7c3      	b.n	800f78c <_svfiprintf_r+0x130>
 800f804:	fb0c 2101 	mla	r1, ip, r1, r2
 800f808:	4604      	mov	r4, r0
 800f80a:	2301      	movs	r3, #1
 800f80c:	e7f0      	b.n	800f7f0 <_svfiprintf_r+0x194>
 800f80e:	ab03      	add	r3, sp, #12
 800f810:	9300      	str	r3, [sp, #0]
 800f812:	462a      	mov	r2, r5
 800f814:	4b0f      	ldr	r3, [pc, #60]	; (800f854 <_svfiprintf_r+0x1f8>)
 800f816:	a904      	add	r1, sp, #16
 800f818:	4638      	mov	r0, r7
 800f81a:	f7fc fa95 	bl	800bd48 <_printf_float>
 800f81e:	1c42      	adds	r2, r0, #1
 800f820:	4606      	mov	r6, r0
 800f822:	d1d6      	bne.n	800f7d2 <_svfiprintf_r+0x176>
 800f824:	89ab      	ldrh	r3, [r5, #12]
 800f826:	065b      	lsls	r3, r3, #25
 800f828:	f53f af2c 	bmi.w	800f684 <_svfiprintf_r+0x28>
 800f82c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f82e:	b01d      	add	sp, #116	; 0x74
 800f830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f834:	ab03      	add	r3, sp, #12
 800f836:	9300      	str	r3, [sp, #0]
 800f838:	462a      	mov	r2, r5
 800f83a:	4b06      	ldr	r3, [pc, #24]	; (800f854 <_svfiprintf_r+0x1f8>)
 800f83c:	a904      	add	r1, sp, #16
 800f83e:	4638      	mov	r0, r7
 800f840:	f7fc fd26 	bl	800c290 <_printf_i>
 800f844:	e7eb      	b.n	800f81e <_svfiprintf_r+0x1c2>
 800f846:	bf00      	nop
 800f848:	08015264 	.word	0x08015264
 800f84c:	0801526e 	.word	0x0801526e
 800f850:	0800bd49 	.word	0x0800bd49
 800f854:	0800f5a5 	.word	0x0800f5a5
 800f858:	0801526a 	.word	0x0801526a
 800f85c:	00000000 	.word	0x00000000

0800f860 <nan>:
 800f860:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f868 <nan+0x8>
 800f864:	4770      	bx	lr
 800f866:	bf00      	nop
 800f868:	00000000 	.word	0x00000000
 800f86c:	7ff80000 	.word	0x7ff80000

0800f870 <_sbrk_r>:
 800f870:	b538      	push	{r3, r4, r5, lr}
 800f872:	4d06      	ldr	r5, [pc, #24]	; (800f88c <_sbrk_r+0x1c>)
 800f874:	2300      	movs	r3, #0
 800f876:	4604      	mov	r4, r0
 800f878:	4608      	mov	r0, r1
 800f87a:	602b      	str	r3, [r5, #0]
 800f87c:	f7f2 fa06 	bl	8001c8c <_sbrk>
 800f880:	1c43      	adds	r3, r0, #1
 800f882:	d102      	bne.n	800f88a <_sbrk_r+0x1a>
 800f884:	682b      	ldr	r3, [r5, #0]
 800f886:	b103      	cbz	r3, 800f88a <_sbrk_r+0x1a>
 800f888:	6023      	str	r3, [r4, #0]
 800f88a:	bd38      	pop	{r3, r4, r5, pc}
 800f88c:	20001048 	.word	0x20001048

0800f890 <strncmp>:
 800f890:	b510      	push	{r4, lr}
 800f892:	b16a      	cbz	r2, 800f8b0 <strncmp+0x20>
 800f894:	3901      	subs	r1, #1
 800f896:	1884      	adds	r4, r0, r2
 800f898:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f89c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f8a0:	4293      	cmp	r3, r2
 800f8a2:	d103      	bne.n	800f8ac <strncmp+0x1c>
 800f8a4:	42a0      	cmp	r0, r4
 800f8a6:	d001      	beq.n	800f8ac <strncmp+0x1c>
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d1f5      	bne.n	800f898 <strncmp+0x8>
 800f8ac:	1a98      	subs	r0, r3, r2
 800f8ae:	bd10      	pop	{r4, pc}
 800f8b0:	4610      	mov	r0, r2
 800f8b2:	e7fc      	b.n	800f8ae <strncmp+0x1e>

0800f8b4 <__ascii_wctomb>:
 800f8b4:	b149      	cbz	r1, 800f8ca <__ascii_wctomb+0x16>
 800f8b6:	2aff      	cmp	r2, #255	; 0xff
 800f8b8:	bf85      	ittet	hi
 800f8ba:	238a      	movhi	r3, #138	; 0x8a
 800f8bc:	6003      	strhi	r3, [r0, #0]
 800f8be:	700a      	strbls	r2, [r1, #0]
 800f8c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800f8c4:	bf98      	it	ls
 800f8c6:	2001      	movls	r0, #1
 800f8c8:	4770      	bx	lr
 800f8ca:	4608      	mov	r0, r1
 800f8cc:	4770      	bx	lr
	...

0800f8d0 <__assert_func>:
 800f8d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f8d2:	4614      	mov	r4, r2
 800f8d4:	461a      	mov	r2, r3
 800f8d6:	4b09      	ldr	r3, [pc, #36]	; (800f8fc <__assert_func+0x2c>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4605      	mov	r5, r0
 800f8dc:	68d8      	ldr	r0, [r3, #12]
 800f8de:	b14c      	cbz	r4, 800f8f4 <__assert_func+0x24>
 800f8e0:	4b07      	ldr	r3, [pc, #28]	; (800f900 <__assert_func+0x30>)
 800f8e2:	9100      	str	r1, [sp, #0]
 800f8e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8e8:	4906      	ldr	r1, [pc, #24]	; (800f904 <__assert_func+0x34>)
 800f8ea:	462b      	mov	r3, r5
 800f8ec:	f000 f80e 	bl	800f90c <fiprintf>
 800f8f0:	f000 fa84 	bl	800fdfc <abort>
 800f8f4:	4b04      	ldr	r3, [pc, #16]	; (800f908 <__assert_func+0x38>)
 800f8f6:	461c      	mov	r4, r3
 800f8f8:	e7f3      	b.n	800f8e2 <__assert_func+0x12>
 800f8fa:	bf00      	nop
 800f8fc:	20000524 	.word	0x20000524
 800f900:	08015275 	.word	0x08015275
 800f904:	08015282 	.word	0x08015282
 800f908:	080152b0 	.word	0x080152b0

0800f90c <fiprintf>:
 800f90c:	b40e      	push	{r1, r2, r3}
 800f90e:	b503      	push	{r0, r1, lr}
 800f910:	4601      	mov	r1, r0
 800f912:	ab03      	add	r3, sp, #12
 800f914:	4805      	ldr	r0, [pc, #20]	; (800f92c <fiprintf+0x20>)
 800f916:	f853 2b04 	ldr.w	r2, [r3], #4
 800f91a:	6800      	ldr	r0, [r0, #0]
 800f91c:	9301      	str	r3, [sp, #4]
 800f91e:	f000 f87d 	bl	800fa1c <_vfiprintf_r>
 800f922:	b002      	add	sp, #8
 800f924:	f85d eb04 	ldr.w	lr, [sp], #4
 800f928:	b003      	add	sp, #12
 800f92a:	4770      	bx	lr
 800f92c:	20000524 	.word	0x20000524

0800f930 <memmove>:
 800f930:	4288      	cmp	r0, r1
 800f932:	b510      	push	{r4, lr}
 800f934:	eb01 0402 	add.w	r4, r1, r2
 800f938:	d902      	bls.n	800f940 <memmove+0x10>
 800f93a:	4284      	cmp	r4, r0
 800f93c:	4623      	mov	r3, r4
 800f93e:	d807      	bhi.n	800f950 <memmove+0x20>
 800f940:	1e43      	subs	r3, r0, #1
 800f942:	42a1      	cmp	r1, r4
 800f944:	d008      	beq.n	800f958 <memmove+0x28>
 800f946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f94a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f94e:	e7f8      	b.n	800f942 <memmove+0x12>
 800f950:	4402      	add	r2, r0
 800f952:	4601      	mov	r1, r0
 800f954:	428a      	cmp	r2, r1
 800f956:	d100      	bne.n	800f95a <memmove+0x2a>
 800f958:	bd10      	pop	{r4, pc}
 800f95a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f95e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f962:	e7f7      	b.n	800f954 <memmove+0x24>

0800f964 <__malloc_lock>:
 800f964:	4801      	ldr	r0, [pc, #4]	; (800f96c <__malloc_lock+0x8>)
 800f966:	f000 bc09 	b.w	801017c <__retarget_lock_acquire_recursive>
 800f96a:	bf00      	nop
 800f96c:	20001050 	.word	0x20001050

0800f970 <__malloc_unlock>:
 800f970:	4801      	ldr	r0, [pc, #4]	; (800f978 <__malloc_unlock+0x8>)
 800f972:	f000 bc04 	b.w	801017e <__retarget_lock_release_recursive>
 800f976:	bf00      	nop
 800f978:	20001050 	.word	0x20001050

0800f97c <_realloc_r>:
 800f97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f97e:	4607      	mov	r7, r0
 800f980:	4614      	mov	r4, r2
 800f982:	460e      	mov	r6, r1
 800f984:	b921      	cbnz	r1, 800f990 <_realloc_r+0x14>
 800f986:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f98a:	4611      	mov	r1, r2
 800f98c:	f7ff bdb0 	b.w	800f4f0 <_malloc_r>
 800f990:	b922      	cbnz	r2, 800f99c <_realloc_r+0x20>
 800f992:	f7ff fd5d 	bl	800f450 <_free_r>
 800f996:	4625      	mov	r5, r4
 800f998:	4628      	mov	r0, r5
 800f99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f99c:	f000 fc54 	bl	8010248 <_malloc_usable_size_r>
 800f9a0:	42a0      	cmp	r0, r4
 800f9a2:	d20f      	bcs.n	800f9c4 <_realloc_r+0x48>
 800f9a4:	4621      	mov	r1, r4
 800f9a6:	4638      	mov	r0, r7
 800f9a8:	f7ff fda2 	bl	800f4f0 <_malloc_r>
 800f9ac:	4605      	mov	r5, r0
 800f9ae:	2800      	cmp	r0, #0
 800f9b0:	d0f2      	beq.n	800f998 <_realloc_r+0x1c>
 800f9b2:	4631      	mov	r1, r6
 800f9b4:	4622      	mov	r2, r4
 800f9b6:	f7fc f911 	bl	800bbdc <memcpy>
 800f9ba:	4631      	mov	r1, r6
 800f9bc:	4638      	mov	r0, r7
 800f9be:	f7ff fd47 	bl	800f450 <_free_r>
 800f9c2:	e7e9      	b.n	800f998 <_realloc_r+0x1c>
 800f9c4:	4635      	mov	r5, r6
 800f9c6:	e7e7      	b.n	800f998 <_realloc_r+0x1c>

0800f9c8 <__sfputc_r>:
 800f9c8:	6893      	ldr	r3, [r2, #8]
 800f9ca:	3b01      	subs	r3, #1
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	b410      	push	{r4}
 800f9d0:	6093      	str	r3, [r2, #8]
 800f9d2:	da08      	bge.n	800f9e6 <__sfputc_r+0x1e>
 800f9d4:	6994      	ldr	r4, [r2, #24]
 800f9d6:	42a3      	cmp	r3, r4
 800f9d8:	db01      	blt.n	800f9de <__sfputc_r+0x16>
 800f9da:	290a      	cmp	r1, #10
 800f9dc:	d103      	bne.n	800f9e6 <__sfputc_r+0x1e>
 800f9de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9e2:	f000 b94b 	b.w	800fc7c <__swbuf_r>
 800f9e6:	6813      	ldr	r3, [r2, #0]
 800f9e8:	1c58      	adds	r0, r3, #1
 800f9ea:	6010      	str	r0, [r2, #0]
 800f9ec:	7019      	strb	r1, [r3, #0]
 800f9ee:	4608      	mov	r0, r1
 800f9f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9f4:	4770      	bx	lr

0800f9f6 <__sfputs_r>:
 800f9f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9f8:	4606      	mov	r6, r0
 800f9fa:	460f      	mov	r7, r1
 800f9fc:	4614      	mov	r4, r2
 800f9fe:	18d5      	adds	r5, r2, r3
 800fa00:	42ac      	cmp	r4, r5
 800fa02:	d101      	bne.n	800fa08 <__sfputs_r+0x12>
 800fa04:	2000      	movs	r0, #0
 800fa06:	e007      	b.n	800fa18 <__sfputs_r+0x22>
 800fa08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa0c:	463a      	mov	r2, r7
 800fa0e:	4630      	mov	r0, r6
 800fa10:	f7ff ffda 	bl	800f9c8 <__sfputc_r>
 800fa14:	1c43      	adds	r3, r0, #1
 800fa16:	d1f3      	bne.n	800fa00 <__sfputs_r+0xa>
 800fa18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fa1c <_vfiprintf_r>:
 800fa1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa20:	460d      	mov	r5, r1
 800fa22:	b09d      	sub	sp, #116	; 0x74
 800fa24:	4614      	mov	r4, r2
 800fa26:	4698      	mov	r8, r3
 800fa28:	4606      	mov	r6, r0
 800fa2a:	b118      	cbz	r0, 800fa34 <_vfiprintf_r+0x18>
 800fa2c:	6983      	ldr	r3, [r0, #24]
 800fa2e:	b90b      	cbnz	r3, 800fa34 <_vfiprintf_r+0x18>
 800fa30:	f000 fb06 	bl	8010040 <__sinit>
 800fa34:	4b89      	ldr	r3, [pc, #548]	; (800fc5c <_vfiprintf_r+0x240>)
 800fa36:	429d      	cmp	r5, r3
 800fa38:	d11b      	bne.n	800fa72 <_vfiprintf_r+0x56>
 800fa3a:	6875      	ldr	r5, [r6, #4]
 800fa3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa3e:	07d9      	lsls	r1, r3, #31
 800fa40:	d405      	bmi.n	800fa4e <_vfiprintf_r+0x32>
 800fa42:	89ab      	ldrh	r3, [r5, #12]
 800fa44:	059a      	lsls	r2, r3, #22
 800fa46:	d402      	bmi.n	800fa4e <_vfiprintf_r+0x32>
 800fa48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa4a:	f000 fb97 	bl	801017c <__retarget_lock_acquire_recursive>
 800fa4e:	89ab      	ldrh	r3, [r5, #12]
 800fa50:	071b      	lsls	r3, r3, #28
 800fa52:	d501      	bpl.n	800fa58 <_vfiprintf_r+0x3c>
 800fa54:	692b      	ldr	r3, [r5, #16]
 800fa56:	b9eb      	cbnz	r3, 800fa94 <_vfiprintf_r+0x78>
 800fa58:	4629      	mov	r1, r5
 800fa5a:	4630      	mov	r0, r6
 800fa5c:	f000 f960 	bl	800fd20 <__swsetup_r>
 800fa60:	b1c0      	cbz	r0, 800fa94 <_vfiprintf_r+0x78>
 800fa62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa64:	07dc      	lsls	r4, r3, #31
 800fa66:	d50e      	bpl.n	800fa86 <_vfiprintf_r+0x6a>
 800fa68:	f04f 30ff 	mov.w	r0, #4294967295
 800fa6c:	b01d      	add	sp, #116	; 0x74
 800fa6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa72:	4b7b      	ldr	r3, [pc, #492]	; (800fc60 <_vfiprintf_r+0x244>)
 800fa74:	429d      	cmp	r5, r3
 800fa76:	d101      	bne.n	800fa7c <_vfiprintf_r+0x60>
 800fa78:	68b5      	ldr	r5, [r6, #8]
 800fa7a:	e7df      	b.n	800fa3c <_vfiprintf_r+0x20>
 800fa7c:	4b79      	ldr	r3, [pc, #484]	; (800fc64 <_vfiprintf_r+0x248>)
 800fa7e:	429d      	cmp	r5, r3
 800fa80:	bf08      	it	eq
 800fa82:	68f5      	ldreq	r5, [r6, #12]
 800fa84:	e7da      	b.n	800fa3c <_vfiprintf_r+0x20>
 800fa86:	89ab      	ldrh	r3, [r5, #12]
 800fa88:	0598      	lsls	r0, r3, #22
 800fa8a:	d4ed      	bmi.n	800fa68 <_vfiprintf_r+0x4c>
 800fa8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa8e:	f000 fb76 	bl	801017e <__retarget_lock_release_recursive>
 800fa92:	e7e9      	b.n	800fa68 <_vfiprintf_r+0x4c>
 800fa94:	2300      	movs	r3, #0
 800fa96:	9309      	str	r3, [sp, #36]	; 0x24
 800fa98:	2320      	movs	r3, #32
 800fa9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa9e:	f8cd 800c 	str.w	r8, [sp, #12]
 800faa2:	2330      	movs	r3, #48	; 0x30
 800faa4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fc68 <_vfiprintf_r+0x24c>
 800faa8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800faac:	f04f 0901 	mov.w	r9, #1
 800fab0:	4623      	mov	r3, r4
 800fab2:	469a      	mov	sl, r3
 800fab4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fab8:	b10a      	cbz	r2, 800fabe <_vfiprintf_r+0xa2>
 800faba:	2a25      	cmp	r2, #37	; 0x25
 800fabc:	d1f9      	bne.n	800fab2 <_vfiprintf_r+0x96>
 800fabe:	ebba 0b04 	subs.w	fp, sl, r4
 800fac2:	d00b      	beq.n	800fadc <_vfiprintf_r+0xc0>
 800fac4:	465b      	mov	r3, fp
 800fac6:	4622      	mov	r2, r4
 800fac8:	4629      	mov	r1, r5
 800faca:	4630      	mov	r0, r6
 800facc:	f7ff ff93 	bl	800f9f6 <__sfputs_r>
 800fad0:	3001      	adds	r0, #1
 800fad2:	f000 80aa 	beq.w	800fc2a <_vfiprintf_r+0x20e>
 800fad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fad8:	445a      	add	r2, fp
 800fada:	9209      	str	r2, [sp, #36]	; 0x24
 800fadc:	f89a 3000 	ldrb.w	r3, [sl]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	f000 80a2 	beq.w	800fc2a <_vfiprintf_r+0x20e>
 800fae6:	2300      	movs	r3, #0
 800fae8:	f04f 32ff 	mov.w	r2, #4294967295
 800faec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800faf0:	f10a 0a01 	add.w	sl, sl, #1
 800faf4:	9304      	str	r3, [sp, #16]
 800faf6:	9307      	str	r3, [sp, #28]
 800faf8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fafc:	931a      	str	r3, [sp, #104]	; 0x68
 800fafe:	4654      	mov	r4, sl
 800fb00:	2205      	movs	r2, #5
 800fb02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb06:	4858      	ldr	r0, [pc, #352]	; (800fc68 <_vfiprintf_r+0x24c>)
 800fb08:	f7f0 fb6a 	bl	80001e0 <memchr>
 800fb0c:	9a04      	ldr	r2, [sp, #16]
 800fb0e:	b9d8      	cbnz	r0, 800fb48 <_vfiprintf_r+0x12c>
 800fb10:	06d1      	lsls	r1, r2, #27
 800fb12:	bf44      	itt	mi
 800fb14:	2320      	movmi	r3, #32
 800fb16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb1a:	0713      	lsls	r3, r2, #28
 800fb1c:	bf44      	itt	mi
 800fb1e:	232b      	movmi	r3, #43	; 0x2b
 800fb20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb24:	f89a 3000 	ldrb.w	r3, [sl]
 800fb28:	2b2a      	cmp	r3, #42	; 0x2a
 800fb2a:	d015      	beq.n	800fb58 <_vfiprintf_r+0x13c>
 800fb2c:	9a07      	ldr	r2, [sp, #28]
 800fb2e:	4654      	mov	r4, sl
 800fb30:	2000      	movs	r0, #0
 800fb32:	f04f 0c0a 	mov.w	ip, #10
 800fb36:	4621      	mov	r1, r4
 800fb38:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb3c:	3b30      	subs	r3, #48	; 0x30
 800fb3e:	2b09      	cmp	r3, #9
 800fb40:	d94e      	bls.n	800fbe0 <_vfiprintf_r+0x1c4>
 800fb42:	b1b0      	cbz	r0, 800fb72 <_vfiprintf_r+0x156>
 800fb44:	9207      	str	r2, [sp, #28]
 800fb46:	e014      	b.n	800fb72 <_vfiprintf_r+0x156>
 800fb48:	eba0 0308 	sub.w	r3, r0, r8
 800fb4c:	fa09 f303 	lsl.w	r3, r9, r3
 800fb50:	4313      	orrs	r3, r2
 800fb52:	9304      	str	r3, [sp, #16]
 800fb54:	46a2      	mov	sl, r4
 800fb56:	e7d2      	b.n	800fafe <_vfiprintf_r+0xe2>
 800fb58:	9b03      	ldr	r3, [sp, #12]
 800fb5a:	1d19      	adds	r1, r3, #4
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	9103      	str	r1, [sp, #12]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	bfbb      	ittet	lt
 800fb64:	425b      	neglt	r3, r3
 800fb66:	f042 0202 	orrlt.w	r2, r2, #2
 800fb6a:	9307      	strge	r3, [sp, #28]
 800fb6c:	9307      	strlt	r3, [sp, #28]
 800fb6e:	bfb8      	it	lt
 800fb70:	9204      	strlt	r2, [sp, #16]
 800fb72:	7823      	ldrb	r3, [r4, #0]
 800fb74:	2b2e      	cmp	r3, #46	; 0x2e
 800fb76:	d10c      	bne.n	800fb92 <_vfiprintf_r+0x176>
 800fb78:	7863      	ldrb	r3, [r4, #1]
 800fb7a:	2b2a      	cmp	r3, #42	; 0x2a
 800fb7c:	d135      	bne.n	800fbea <_vfiprintf_r+0x1ce>
 800fb7e:	9b03      	ldr	r3, [sp, #12]
 800fb80:	1d1a      	adds	r2, r3, #4
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	9203      	str	r2, [sp, #12]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	bfb8      	it	lt
 800fb8a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb8e:	3402      	adds	r4, #2
 800fb90:	9305      	str	r3, [sp, #20]
 800fb92:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fc78 <_vfiprintf_r+0x25c>
 800fb96:	7821      	ldrb	r1, [r4, #0]
 800fb98:	2203      	movs	r2, #3
 800fb9a:	4650      	mov	r0, sl
 800fb9c:	f7f0 fb20 	bl	80001e0 <memchr>
 800fba0:	b140      	cbz	r0, 800fbb4 <_vfiprintf_r+0x198>
 800fba2:	2340      	movs	r3, #64	; 0x40
 800fba4:	eba0 000a 	sub.w	r0, r0, sl
 800fba8:	fa03 f000 	lsl.w	r0, r3, r0
 800fbac:	9b04      	ldr	r3, [sp, #16]
 800fbae:	4303      	orrs	r3, r0
 800fbb0:	3401      	adds	r4, #1
 800fbb2:	9304      	str	r3, [sp, #16]
 800fbb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fbb8:	482c      	ldr	r0, [pc, #176]	; (800fc6c <_vfiprintf_r+0x250>)
 800fbba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fbbe:	2206      	movs	r2, #6
 800fbc0:	f7f0 fb0e 	bl	80001e0 <memchr>
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	d03f      	beq.n	800fc48 <_vfiprintf_r+0x22c>
 800fbc8:	4b29      	ldr	r3, [pc, #164]	; (800fc70 <_vfiprintf_r+0x254>)
 800fbca:	bb1b      	cbnz	r3, 800fc14 <_vfiprintf_r+0x1f8>
 800fbcc:	9b03      	ldr	r3, [sp, #12]
 800fbce:	3307      	adds	r3, #7
 800fbd0:	f023 0307 	bic.w	r3, r3, #7
 800fbd4:	3308      	adds	r3, #8
 800fbd6:	9303      	str	r3, [sp, #12]
 800fbd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbda:	443b      	add	r3, r7
 800fbdc:	9309      	str	r3, [sp, #36]	; 0x24
 800fbde:	e767      	b.n	800fab0 <_vfiprintf_r+0x94>
 800fbe0:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbe4:	460c      	mov	r4, r1
 800fbe6:	2001      	movs	r0, #1
 800fbe8:	e7a5      	b.n	800fb36 <_vfiprintf_r+0x11a>
 800fbea:	2300      	movs	r3, #0
 800fbec:	3401      	adds	r4, #1
 800fbee:	9305      	str	r3, [sp, #20]
 800fbf0:	4619      	mov	r1, r3
 800fbf2:	f04f 0c0a 	mov.w	ip, #10
 800fbf6:	4620      	mov	r0, r4
 800fbf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbfc:	3a30      	subs	r2, #48	; 0x30
 800fbfe:	2a09      	cmp	r2, #9
 800fc00:	d903      	bls.n	800fc0a <_vfiprintf_r+0x1ee>
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d0c5      	beq.n	800fb92 <_vfiprintf_r+0x176>
 800fc06:	9105      	str	r1, [sp, #20]
 800fc08:	e7c3      	b.n	800fb92 <_vfiprintf_r+0x176>
 800fc0a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fc0e:	4604      	mov	r4, r0
 800fc10:	2301      	movs	r3, #1
 800fc12:	e7f0      	b.n	800fbf6 <_vfiprintf_r+0x1da>
 800fc14:	ab03      	add	r3, sp, #12
 800fc16:	9300      	str	r3, [sp, #0]
 800fc18:	462a      	mov	r2, r5
 800fc1a:	4b16      	ldr	r3, [pc, #88]	; (800fc74 <_vfiprintf_r+0x258>)
 800fc1c:	a904      	add	r1, sp, #16
 800fc1e:	4630      	mov	r0, r6
 800fc20:	f7fc f892 	bl	800bd48 <_printf_float>
 800fc24:	4607      	mov	r7, r0
 800fc26:	1c78      	adds	r0, r7, #1
 800fc28:	d1d6      	bne.n	800fbd8 <_vfiprintf_r+0x1bc>
 800fc2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fc2c:	07d9      	lsls	r1, r3, #31
 800fc2e:	d405      	bmi.n	800fc3c <_vfiprintf_r+0x220>
 800fc30:	89ab      	ldrh	r3, [r5, #12]
 800fc32:	059a      	lsls	r2, r3, #22
 800fc34:	d402      	bmi.n	800fc3c <_vfiprintf_r+0x220>
 800fc36:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc38:	f000 faa1 	bl	801017e <__retarget_lock_release_recursive>
 800fc3c:	89ab      	ldrh	r3, [r5, #12]
 800fc3e:	065b      	lsls	r3, r3, #25
 800fc40:	f53f af12 	bmi.w	800fa68 <_vfiprintf_r+0x4c>
 800fc44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc46:	e711      	b.n	800fa6c <_vfiprintf_r+0x50>
 800fc48:	ab03      	add	r3, sp, #12
 800fc4a:	9300      	str	r3, [sp, #0]
 800fc4c:	462a      	mov	r2, r5
 800fc4e:	4b09      	ldr	r3, [pc, #36]	; (800fc74 <_vfiprintf_r+0x258>)
 800fc50:	a904      	add	r1, sp, #16
 800fc52:	4630      	mov	r0, r6
 800fc54:	f7fc fb1c 	bl	800c290 <_printf_i>
 800fc58:	e7e4      	b.n	800fc24 <_vfiprintf_r+0x208>
 800fc5a:	bf00      	nop
 800fc5c:	080152d4 	.word	0x080152d4
 800fc60:	080152f4 	.word	0x080152f4
 800fc64:	080152b4 	.word	0x080152b4
 800fc68:	08015264 	.word	0x08015264
 800fc6c:	0801526e 	.word	0x0801526e
 800fc70:	0800bd49 	.word	0x0800bd49
 800fc74:	0800f9f7 	.word	0x0800f9f7
 800fc78:	0801526a 	.word	0x0801526a

0800fc7c <__swbuf_r>:
 800fc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc7e:	460e      	mov	r6, r1
 800fc80:	4614      	mov	r4, r2
 800fc82:	4605      	mov	r5, r0
 800fc84:	b118      	cbz	r0, 800fc8e <__swbuf_r+0x12>
 800fc86:	6983      	ldr	r3, [r0, #24]
 800fc88:	b90b      	cbnz	r3, 800fc8e <__swbuf_r+0x12>
 800fc8a:	f000 f9d9 	bl	8010040 <__sinit>
 800fc8e:	4b21      	ldr	r3, [pc, #132]	; (800fd14 <__swbuf_r+0x98>)
 800fc90:	429c      	cmp	r4, r3
 800fc92:	d12b      	bne.n	800fcec <__swbuf_r+0x70>
 800fc94:	686c      	ldr	r4, [r5, #4]
 800fc96:	69a3      	ldr	r3, [r4, #24]
 800fc98:	60a3      	str	r3, [r4, #8]
 800fc9a:	89a3      	ldrh	r3, [r4, #12]
 800fc9c:	071a      	lsls	r2, r3, #28
 800fc9e:	d52f      	bpl.n	800fd00 <__swbuf_r+0x84>
 800fca0:	6923      	ldr	r3, [r4, #16]
 800fca2:	b36b      	cbz	r3, 800fd00 <__swbuf_r+0x84>
 800fca4:	6923      	ldr	r3, [r4, #16]
 800fca6:	6820      	ldr	r0, [r4, #0]
 800fca8:	1ac0      	subs	r0, r0, r3
 800fcaa:	6963      	ldr	r3, [r4, #20]
 800fcac:	b2f6      	uxtb	r6, r6
 800fcae:	4283      	cmp	r3, r0
 800fcb0:	4637      	mov	r7, r6
 800fcb2:	dc04      	bgt.n	800fcbe <__swbuf_r+0x42>
 800fcb4:	4621      	mov	r1, r4
 800fcb6:	4628      	mov	r0, r5
 800fcb8:	f000 f92e 	bl	800ff18 <_fflush_r>
 800fcbc:	bb30      	cbnz	r0, 800fd0c <__swbuf_r+0x90>
 800fcbe:	68a3      	ldr	r3, [r4, #8]
 800fcc0:	3b01      	subs	r3, #1
 800fcc2:	60a3      	str	r3, [r4, #8]
 800fcc4:	6823      	ldr	r3, [r4, #0]
 800fcc6:	1c5a      	adds	r2, r3, #1
 800fcc8:	6022      	str	r2, [r4, #0]
 800fcca:	701e      	strb	r6, [r3, #0]
 800fccc:	6963      	ldr	r3, [r4, #20]
 800fcce:	3001      	adds	r0, #1
 800fcd0:	4283      	cmp	r3, r0
 800fcd2:	d004      	beq.n	800fcde <__swbuf_r+0x62>
 800fcd4:	89a3      	ldrh	r3, [r4, #12]
 800fcd6:	07db      	lsls	r3, r3, #31
 800fcd8:	d506      	bpl.n	800fce8 <__swbuf_r+0x6c>
 800fcda:	2e0a      	cmp	r6, #10
 800fcdc:	d104      	bne.n	800fce8 <__swbuf_r+0x6c>
 800fcde:	4621      	mov	r1, r4
 800fce0:	4628      	mov	r0, r5
 800fce2:	f000 f919 	bl	800ff18 <_fflush_r>
 800fce6:	b988      	cbnz	r0, 800fd0c <__swbuf_r+0x90>
 800fce8:	4638      	mov	r0, r7
 800fcea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcec:	4b0a      	ldr	r3, [pc, #40]	; (800fd18 <__swbuf_r+0x9c>)
 800fcee:	429c      	cmp	r4, r3
 800fcf0:	d101      	bne.n	800fcf6 <__swbuf_r+0x7a>
 800fcf2:	68ac      	ldr	r4, [r5, #8]
 800fcf4:	e7cf      	b.n	800fc96 <__swbuf_r+0x1a>
 800fcf6:	4b09      	ldr	r3, [pc, #36]	; (800fd1c <__swbuf_r+0xa0>)
 800fcf8:	429c      	cmp	r4, r3
 800fcfa:	bf08      	it	eq
 800fcfc:	68ec      	ldreq	r4, [r5, #12]
 800fcfe:	e7ca      	b.n	800fc96 <__swbuf_r+0x1a>
 800fd00:	4621      	mov	r1, r4
 800fd02:	4628      	mov	r0, r5
 800fd04:	f000 f80c 	bl	800fd20 <__swsetup_r>
 800fd08:	2800      	cmp	r0, #0
 800fd0a:	d0cb      	beq.n	800fca4 <__swbuf_r+0x28>
 800fd0c:	f04f 37ff 	mov.w	r7, #4294967295
 800fd10:	e7ea      	b.n	800fce8 <__swbuf_r+0x6c>
 800fd12:	bf00      	nop
 800fd14:	080152d4 	.word	0x080152d4
 800fd18:	080152f4 	.word	0x080152f4
 800fd1c:	080152b4 	.word	0x080152b4

0800fd20 <__swsetup_r>:
 800fd20:	4b32      	ldr	r3, [pc, #200]	; (800fdec <__swsetup_r+0xcc>)
 800fd22:	b570      	push	{r4, r5, r6, lr}
 800fd24:	681d      	ldr	r5, [r3, #0]
 800fd26:	4606      	mov	r6, r0
 800fd28:	460c      	mov	r4, r1
 800fd2a:	b125      	cbz	r5, 800fd36 <__swsetup_r+0x16>
 800fd2c:	69ab      	ldr	r3, [r5, #24]
 800fd2e:	b913      	cbnz	r3, 800fd36 <__swsetup_r+0x16>
 800fd30:	4628      	mov	r0, r5
 800fd32:	f000 f985 	bl	8010040 <__sinit>
 800fd36:	4b2e      	ldr	r3, [pc, #184]	; (800fdf0 <__swsetup_r+0xd0>)
 800fd38:	429c      	cmp	r4, r3
 800fd3a:	d10f      	bne.n	800fd5c <__swsetup_r+0x3c>
 800fd3c:	686c      	ldr	r4, [r5, #4]
 800fd3e:	89a3      	ldrh	r3, [r4, #12]
 800fd40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd44:	0719      	lsls	r1, r3, #28
 800fd46:	d42c      	bmi.n	800fda2 <__swsetup_r+0x82>
 800fd48:	06dd      	lsls	r5, r3, #27
 800fd4a:	d411      	bmi.n	800fd70 <__swsetup_r+0x50>
 800fd4c:	2309      	movs	r3, #9
 800fd4e:	6033      	str	r3, [r6, #0]
 800fd50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fd54:	81a3      	strh	r3, [r4, #12]
 800fd56:	f04f 30ff 	mov.w	r0, #4294967295
 800fd5a:	e03e      	b.n	800fdda <__swsetup_r+0xba>
 800fd5c:	4b25      	ldr	r3, [pc, #148]	; (800fdf4 <__swsetup_r+0xd4>)
 800fd5e:	429c      	cmp	r4, r3
 800fd60:	d101      	bne.n	800fd66 <__swsetup_r+0x46>
 800fd62:	68ac      	ldr	r4, [r5, #8]
 800fd64:	e7eb      	b.n	800fd3e <__swsetup_r+0x1e>
 800fd66:	4b24      	ldr	r3, [pc, #144]	; (800fdf8 <__swsetup_r+0xd8>)
 800fd68:	429c      	cmp	r4, r3
 800fd6a:	bf08      	it	eq
 800fd6c:	68ec      	ldreq	r4, [r5, #12]
 800fd6e:	e7e6      	b.n	800fd3e <__swsetup_r+0x1e>
 800fd70:	0758      	lsls	r0, r3, #29
 800fd72:	d512      	bpl.n	800fd9a <__swsetup_r+0x7a>
 800fd74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd76:	b141      	cbz	r1, 800fd8a <__swsetup_r+0x6a>
 800fd78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd7c:	4299      	cmp	r1, r3
 800fd7e:	d002      	beq.n	800fd86 <__swsetup_r+0x66>
 800fd80:	4630      	mov	r0, r6
 800fd82:	f7ff fb65 	bl	800f450 <_free_r>
 800fd86:	2300      	movs	r3, #0
 800fd88:	6363      	str	r3, [r4, #52]	; 0x34
 800fd8a:	89a3      	ldrh	r3, [r4, #12]
 800fd8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fd90:	81a3      	strh	r3, [r4, #12]
 800fd92:	2300      	movs	r3, #0
 800fd94:	6063      	str	r3, [r4, #4]
 800fd96:	6923      	ldr	r3, [r4, #16]
 800fd98:	6023      	str	r3, [r4, #0]
 800fd9a:	89a3      	ldrh	r3, [r4, #12]
 800fd9c:	f043 0308 	orr.w	r3, r3, #8
 800fda0:	81a3      	strh	r3, [r4, #12]
 800fda2:	6923      	ldr	r3, [r4, #16]
 800fda4:	b94b      	cbnz	r3, 800fdba <__swsetup_r+0x9a>
 800fda6:	89a3      	ldrh	r3, [r4, #12]
 800fda8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fdac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdb0:	d003      	beq.n	800fdba <__swsetup_r+0x9a>
 800fdb2:	4621      	mov	r1, r4
 800fdb4:	4630      	mov	r0, r6
 800fdb6:	f000 fa07 	bl	80101c8 <__smakebuf_r>
 800fdba:	89a0      	ldrh	r0, [r4, #12]
 800fdbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fdc0:	f010 0301 	ands.w	r3, r0, #1
 800fdc4:	d00a      	beq.n	800fddc <__swsetup_r+0xbc>
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	60a3      	str	r3, [r4, #8]
 800fdca:	6963      	ldr	r3, [r4, #20]
 800fdcc:	425b      	negs	r3, r3
 800fdce:	61a3      	str	r3, [r4, #24]
 800fdd0:	6923      	ldr	r3, [r4, #16]
 800fdd2:	b943      	cbnz	r3, 800fde6 <__swsetup_r+0xc6>
 800fdd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fdd8:	d1ba      	bne.n	800fd50 <__swsetup_r+0x30>
 800fdda:	bd70      	pop	{r4, r5, r6, pc}
 800fddc:	0781      	lsls	r1, r0, #30
 800fdde:	bf58      	it	pl
 800fde0:	6963      	ldrpl	r3, [r4, #20]
 800fde2:	60a3      	str	r3, [r4, #8]
 800fde4:	e7f4      	b.n	800fdd0 <__swsetup_r+0xb0>
 800fde6:	2000      	movs	r0, #0
 800fde8:	e7f7      	b.n	800fdda <__swsetup_r+0xba>
 800fdea:	bf00      	nop
 800fdec:	20000524 	.word	0x20000524
 800fdf0:	080152d4 	.word	0x080152d4
 800fdf4:	080152f4 	.word	0x080152f4
 800fdf8:	080152b4 	.word	0x080152b4

0800fdfc <abort>:
 800fdfc:	b508      	push	{r3, lr}
 800fdfe:	2006      	movs	r0, #6
 800fe00:	f000 fa52 	bl	80102a8 <raise>
 800fe04:	2001      	movs	r0, #1
 800fe06:	f7f1 fec9 	bl	8001b9c <_exit>
	...

0800fe0c <__sflush_r>:
 800fe0c:	898a      	ldrh	r2, [r1, #12]
 800fe0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe12:	4605      	mov	r5, r0
 800fe14:	0710      	lsls	r0, r2, #28
 800fe16:	460c      	mov	r4, r1
 800fe18:	d458      	bmi.n	800fecc <__sflush_r+0xc0>
 800fe1a:	684b      	ldr	r3, [r1, #4]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	dc05      	bgt.n	800fe2c <__sflush_r+0x20>
 800fe20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	dc02      	bgt.n	800fe2c <__sflush_r+0x20>
 800fe26:	2000      	movs	r0, #0
 800fe28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe2e:	2e00      	cmp	r6, #0
 800fe30:	d0f9      	beq.n	800fe26 <__sflush_r+0x1a>
 800fe32:	2300      	movs	r3, #0
 800fe34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe38:	682f      	ldr	r7, [r5, #0]
 800fe3a:	602b      	str	r3, [r5, #0]
 800fe3c:	d032      	beq.n	800fea4 <__sflush_r+0x98>
 800fe3e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fe40:	89a3      	ldrh	r3, [r4, #12]
 800fe42:	075a      	lsls	r2, r3, #29
 800fe44:	d505      	bpl.n	800fe52 <__sflush_r+0x46>
 800fe46:	6863      	ldr	r3, [r4, #4]
 800fe48:	1ac0      	subs	r0, r0, r3
 800fe4a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe4c:	b10b      	cbz	r3, 800fe52 <__sflush_r+0x46>
 800fe4e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe50:	1ac0      	subs	r0, r0, r3
 800fe52:	2300      	movs	r3, #0
 800fe54:	4602      	mov	r2, r0
 800fe56:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe58:	6a21      	ldr	r1, [r4, #32]
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	47b0      	blx	r6
 800fe5e:	1c43      	adds	r3, r0, #1
 800fe60:	89a3      	ldrh	r3, [r4, #12]
 800fe62:	d106      	bne.n	800fe72 <__sflush_r+0x66>
 800fe64:	6829      	ldr	r1, [r5, #0]
 800fe66:	291d      	cmp	r1, #29
 800fe68:	d82c      	bhi.n	800fec4 <__sflush_r+0xb8>
 800fe6a:	4a2a      	ldr	r2, [pc, #168]	; (800ff14 <__sflush_r+0x108>)
 800fe6c:	40ca      	lsrs	r2, r1
 800fe6e:	07d6      	lsls	r6, r2, #31
 800fe70:	d528      	bpl.n	800fec4 <__sflush_r+0xb8>
 800fe72:	2200      	movs	r2, #0
 800fe74:	6062      	str	r2, [r4, #4]
 800fe76:	04d9      	lsls	r1, r3, #19
 800fe78:	6922      	ldr	r2, [r4, #16]
 800fe7a:	6022      	str	r2, [r4, #0]
 800fe7c:	d504      	bpl.n	800fe88 <__sflush_r+0x7c>
 800fe7e:	1c42      	adds	r2, r0, #1
 800fe80:	d101      	bne.n	800fe86 <__sflush_r+0x7a>
 800fe82:	682b      	ldr	r3, [r5, #0]
 800fe84:	b903      	cbnz	r3, 800fe88 <__sflush_r+0x7c>
 800fe86:	6560      	str	r0, [r4, #84]	; 0x54
 800fe88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe8a:	602f      	str	r7, [r5, #0]
 800fe8c:	2900      	cmp	r1, #0
 800fe8e:	d0ca      	beq.n	800fe26 <__sflush_r+0x1a>
 800fe90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe94:	4299      	cmp	r1, r3
 800fe96:	d002      	beq.n	800fe9e <__sflush_r+0x92>
 800fe98:	4628      	mov	r0, r5
 800fe9a:	f7ff fad9 	bl	800f450 <_free_r>
 800fe9e:	2000      	movs	r0, #0
 800fea0:	6360      	str	r0, [r4, #52]	; 0x34
 800fea2:	e7c1      	b.n	800fe28 <__sflush_r+0x1c>
 800fea4:	6a21      	ldr	r1, [r4, #32]
 800fea6:	2301      	movs	r3, #1
 800fea8:	4628      	mov	r0, r5
 800feaa:	47b0      	blx	r6
 800feac:	1c41      	adds	r1, r0, #1
 800feae:	d1c7      	bne.n	800fe40 <__sflush_r+0x34>
 800feb0:	682b      	ldr	r3, [r5, #0]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d0c4      	beq.n	800fe40 <__sflush_r+0x34>
 800feb6:	2b1d      	cmp	r3, #29
 800feb8:	d001      	beq.n	800febe <__sflush_r+0xb2>
 800feba:	2b16      	cmp	r3, #22
 800febc:	d101      	bne.n	800fec2 <__sflush_r+0xb6>
 800febe:	602f      	str	r7, [r5, #0]
 800fec0:	e7b1      	b.n	800fe26 <__sflush_r+0x1a>
 800fec2:	89a3      	ldrh	r3, [r4, #12]
 800fec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fec8:	81a3      	strh	r3, [r4, #12]
 800feca:	e7ad      	b.n	800fe28 <__sflush_r+0x1c>
 800fecc:	690f      	ldr	r7, [r1, #16]
 800fece:	2f00      	cmp	r7, #0
 800fed0:	d0a9      	beq.n	800fe26 <__sflush_r+0x1a>
 800fed2:	0793      	lsls	r3, r2, #30
 800fed4:	680e      	ldr	r6, [r1, #0]
 800fed6:	bf08      	it	eq
 800fed8:	694b      	ldreq	r3, [r1, #20]
 800feda:	600f      	str	r7, [r1, #0]
 800fedc:	bf18      	it	ne
 800fede:	2300      	movne	r3, #0
 800fee0:	eba6 0807 	sub.w	r8, r6, r7
 800fee4:	608b      	str	r3, [r1, #8]
 800fee6:	f1b8 0f00 	cmp.w	r8, #0
 800feea:	dd9c      	ble.n	800fe26 <__sflush_r+0x1a>
 800feec:	6a21      	ldr	r1, [r4, #32]
 800feee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fef0:	4643      	mov	r3, r8
 800fef2:	463a      	mov	r2, r7
 800fef4:	4628      	mov	r0, r5
 800fef6:	47b0      	blx	r6
 800fef8:	2800      	cmp	r0, #0
 800fefa:	dc06      	bgt.n	800ff0a <__sflush_r+0xfe>
 800fefc:	89a3      	ldrh	r3, [r4, #12]
 800fefe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ff02:	81a3      	strh	r3, [r4, #12]
 800ff04:	f04f 30ff 	mov.w	r0, #4294967295
 800ff08:	e78e      	b.n	800fe28 <__sflush_r+0x1c>
 800ff0a:	4407      	add	r7, r0
 800ff0c:	eba8 0800 	sub.w	r8, r8, r0
 800ff10:	e7e9      	b.n	800fee6 <__sflush_r+0xda>
 800ff12:	bf00      	nop
 800ff14:	20400001 	.word	0x20400001

0800ff18 <_fflush_r>:
 800ff18:	b538      	push	{r3, r4, r5, lr}
 800ff1a:	690b      	ldr	r3, [r1, #16]
 800ff1c:	4605      	mov	r5, r0
 800ff1e:	460c      	mov	r4, r1
 800ff20:	b913      	cbnz	r3, 800ff28 <_fflush_r+0x10>
 800ff22:	2500      	movs	r5, #0
 800ff24:	4628      	mov	r0, r5
 800ff26:	bd38      	pop	{r3, r4, r5, pc}
 800ff28:	b118      	cbz	r0, 800ff32 <_fflush_r+0x1a>
 800ff2a:	6983      	ldr	r3, [r0, #24]
 800ff2c:	b90b      	cbnz	r3, 800ff32 <_fflush_r+0x1a>
 800ff2e:	f000 f887 	bl	8010040 <__sinit>
 800ff32:	4b14      	ldr	r3, [pc, #80]	; (800ff84 <_fflush_r+0x6c>)
 800ff34:	429c      	cmp	r4, r3
 800ff36:	d11b      	bne.n	800ff70 <_fflush_r+0x58>
 800ff38:	686c      	ldr	r4, [r5, #4]
 800ff3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d0ef      	beq.n	800ff22 <_fflush_r+0xa>
 800ff42:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff44:	07d0      	lsls	r0, r2, #31
 800ff46:	d404      	bmi.n	800ff52 <_fflush_r+0x3a>
 800ff48:	0599      	lsls	r1, r3, #22
 800ff4a:	d402      	bmi.n	800ff52 <_fflush_r+0x3a>
 800ff4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff4e:	f000 f915 	bl	801017c <__retarget_lock_acquire_recursive>
 800ff52:	4628      	mov	r0, r5
 800ff54:	4621      	mov	r1, r4
 800ff56:	f7ff ff59 	bl	800fe0c <__sflush_r>
 800ff5a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff5c:	07da      	lsls	r2, r3, #31
 800ff5e:	4605      	mov	r5, r0
 800ff60:	d4e0      	bmi.n	800ff24 <_fflush_r+0xc>
 800ff62:	89a3      	ldrh	r3, [r4, #12]
 800ff64:	059b      	lsls	r3, r3, #22
 800ff66:	d4dd      	bmi.n	800ff24 <_fflush_r+0xc>
 800ff68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff6a:	f000 f908 	bl	801017e <__retarget_lock_release_recursive>
 800ff6e:	e7d9      	b.n	800ff24 <_fflush_r+0xc>
 800ff70:	4b05      	ldr	r3, [pc, #20]	; (800ff88 <_fflush_r+0x70>)
 800ff72:	429c      	cmp	r4, r3
 800ff74:	d101      	bne.n	800ff7a <_fflush_r+0x62>
 800ff76:	68ac      	ldr	r4, [r5, #8]
 800ff78:	e7df      	b.n	800ff3a <_fflush_r+0x22>
 800ff7a:	4b04      	ldr	r3, [pc, #16]	; (800ff8c <_fflush_r+0x74>)
 800ff7c:	429c      	cmp	r4, r3
 800ff7e:	bf08      	it	eq
 800ff80:	68ec      	ldreq	r4, [r5, #12]
 800ff82:	e7da      	b.n	800ff3a <_fflush_r+0x22>
 800ff84:	080152d4 	.word	0x080152d4
 800ff88:	080152f4 	.word	0x080152f4
 800ff8c:	080152b4 	.word	0x080152b4

0800ff90 <std>:
 800ff90:	2300      	movs	r3, #0
 800ff92:	b510      	push	{r4, lr}
 800ff94:	4604      	mov	r4, r0
 800ff96:	e9c0 3300 	strd	r3, r3, [r0]
 800ff9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff9e:	6083      	str	r3, [r0, #8]
 800ffa0:	8181      	strh	r1, [r0, #12]
 800ffa2:	6643      	str	r3, [r0, #100]	; 0x64
 800ffa4:	81c2      	strh	r2, [r0, #14]
 800ffa6:	6183      	str	r3, [r0, #24]
 800ffa8:	4619      	mov	r1, r3
 800ffaa:	2208      	movs	r2, #8
 800ffac:	305c      	adds	r0, #92	; 0x5c
 800ffae:	f7fb fe23 	bl	800bbf8 <memset>
 800ffb2:	4b05      	ldr	r3, [pc, #20]	; (800ffc8 <std+0x38>)
 800ffb4:	6263      	str	r3, [r4, #36]	; 0x24
 800ffb6:	4b05      	ldr	r3, [pc, #20]	; (800ffcc <std+0x3c>)
 800ffb8:	62a3      	str	r3, [r4, #40]	; 0x28
 800ffba:	4b05      	ldr	r3, [pc, #20]	; (800ffd0 <std+0x40>)
 800ffbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ffbe:	4b05      	ldr	r3, [pc, #20]	; (800ffd4 <std+0x44>)
 800ffc0:	6224      	str	r4, [r4, #32]
 800ffc2:	6323      	str	r3, [r4, #48]	; 0x30
 800ffc4:	bd10      	pop	{r4, pc}
 800ffc6:	bf00      	nop
 800ffc8:	080102e1 	.word	0x080102e1
 800ffcc:	08010303 	.word	0x08010303
 800ffd0:	0801033b 	.word	0x0801033b
 800ffd4:	0801035f 	.word	0x0801035f

0800ffd8 <_cleanup_r>:
 800ffd8:	4901      	ldr	r1, [pc, #4]	; (800ffe0 <_cleanup_r+0x8>)
 800ffda:	f000 b8af 	b.w	801013c <_fwalk_reent>
 800ffde:	bf00      	nop
 800ffe0:	0800ff19 	.word	0x0800ff19

0800ffe4 <__sfmoreglue>:
 800ffe4:	b570      	push	{r4, r5, r6, lr}
 800ffe6:	1e4a      	subs	r2, r1, #1
 800ffe8:	2568      	movs	r5, #104	; 0x68
 800ffea:	4355      	muls	r5, r2
 800ffec:	460e      	mov	r6, r1
 800ffee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fff2:	f7ff fa7d 	bl	800f4f0 <_malloc_r>
 800fff6:	4604      	mov	r4, r0
 800fff8:	b140      	cbz	r0, 801000c <__sfmoreglue+0x28>
 800fffa:	2100      	movs	r1, #0
 800fffc:	e9c0 1600 	strd	r1, r6, [r0]
 8010000:	300c      	adds	r0, #12
 8010002:	60a0      	str	r0, [r4, #8]
 8010004:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010008:	f7fb fdf6 	bl	800bbf8 <memset>
 801000c:	4620      	mov	r0, r4
 801000e:	bd70      	pop	{r4, r5, r6, pc}

08010010 <__sfp_lock_acquire>:
 8010010:	4801      	ldr	r0, [pc, #4]	; (8010018 <__sfp_lock_acquire+0x8>)
 8010012:	f000 b8b3 	b.w	801017c <__retarget_lock_acquire_recursive>
 8010016:	bf00      	nop
 8010018:	20001054 	.word	0x20001054

0801001c <__sfp_lock_release>:
 801001c:	4801      	ldr	r0, [pc, #4]	; (8010024 <__sfp_lock_release+0x8>)
 801001e:	f000 b8ae 	b.w	801017e <__retarget_lock_release_recursive>
 8010022:	bf00      	nop
 8010024:	20001054 	.word	0x20001054

08010028 <__sinit_lock_acquire>:
 8010028:	4801      	ldr	r0, [pc, #4]	; (8010030 <__sinit_lock_acquire+0x8>)
 801002a:	f000 b8a7 	b.w	801017c <__retarget_lock_acquire_recursive>
 801002e:	bf00      	nop
 8010030:	2000104f 	.word	0x2000104f

08010034 <__sinit_lock_release>:
 8010034:	4801      	ldr	r0, [pc, #4]	; (801003c <__sinit_lock_release+0x8>)
 8010036:	f000 b8a2 	b.w	801017e <__retarget_lock_release_recursive>
 801003a:	bf00      	nop
 801003c:	2000104f 	.word	0x2000104f

08010040 <__sinit>:
 8010040:	b510      	push	{r4, lr}
 8010042:	4604      	mov	r4, r0
 8010044:	f7ff fff0 	bl	8010028 <__sinit_lock_acquire>
 8010048:	69a3      	ldr	r3, [r4, #24]
 801004a:	b11b      	cbz	r3, 8010054 <__sinit+0x14>
 801004c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010050:	f7ff bff0 	b.w	8010034 <__sinit_lock_release>
 8010054:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010058:	6523      	str	r3, [r4, #80]	; 0x50
 801005a:	4b13      	ldr	r3, [pc, #76]	; (80100a8 <__sinit+0x68>)
 801005c:	4a13      	ldr	r2, [pc, #76]	; (80100ac <__sinit+0x6c>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	62a2      	str	r2, [r4, #40]	; 0x28
 8010062:	42a3      	cmp	r3, r4
 8010064:	bf04      	itt	eq
 8010066:	2301      	moveq	r3, #1
 8010068:	61a3      	streq	r3, [r4, #24]
 801006a:	4620      	mov	r0, r4
 801006c:	f000 f820 	bl	80100b0 <__sfp>
 8010070:	6060      	str	r0, [r4, #4]
 8010072:	4620      	mov	r0, r4
 8010074:	f000 f81c 	bl	80100b0 <__sfp>
 8010078:	60a0      	str	r0, [r4, #8]
 801007a:	4620      	mov	r0, r4
 801007c:	f000 f818 	bl	80100b0 <__sfp>
 8010080:	2200      	movs	r2, #0
 8010082:	60e0      	str	r0, [r4, #12]
 8010084:	2104      	movs	r1, #4
 8010086:	6860      	ldr	r0, [r4, #4]
 8010088:	f7ff ff82 	bl	800ff90 <std>
 801008c:	68a0      	ldr	r0, [r4, #8]
 801008e:	2201      	movs	r2, #1
 8010090:	2109      	movs	r1, #9
 8010092:	f7ff ff7d 	bl	800ff90 <std>
 8010096:	68e0      	ldr	r0, [r4, #12]
 8010098:	2202      	movs	r2, #2
 801009a:	2112      	movs	r1, #18
 801009c:	f7ff ff78 	bl	800ff90 <std>
 80100a0:	2301      	movs	r3, #1
 80100a2:	61a3      	str	r3, [r4, #24]
 80100a4:	e7d2      	b.n	801004c <__sinit+0xc>
 80100a6:	bf00      	nop
 80100a8:	08014e60 	.word	0x08014e60
 80100ac:	0800ffd9 	.word	0x0800ffd9

080100b0 <__sfp>:
 80100b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100b2:	4607      	mov	r7, r0
 80100b4:	f7ff ffac 	bl	8010010 <__sfp_lock_acquire>
 80100b8:	4b1e      	ldr	r3, [pc, #120]	; (8010134 <__sfp+0x84>)
 80100ba:	681e      	ldr	r6, [r3, #0]
 80100bc:	69b3      	ldr	r3, [r6, #24]
 80100be:	b913      	cbnz	r3, 80100c6 <__sfp+0x16>
 80100c0:	4630      	mov	r0, r6
 80100c2:	f7ff ffbd 	bl	8010040 <__sinit>
 80100c6:	3648      	adds	r6, #72	; 0x48
 80100c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80100cc:	3b01      	subs	r3, #1
 80100ce:	d503      	bpl.n	80100d8 <__sfp+0x28>
 80100d0:	6833      	ldr	r3, [r6, #0]
 80100d2:	b30b      	cbz	r3, 8010118 <__sfp+0x68>
 80100d4:	6836      	ldr	r6, [r6, #0]
 80100d6:	e7f7      	b.n	80100c8 <__sfp+0x18>
 80100d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80100dc:	b9d5      	cbnz	r5, 8010114 <__sfp+0x64>
 80100de:	4b16      	ldr	r3, [pc, #88]	; (8010138 <__sfp+0x88>)
 80100e0:	60e3      	str	r3, [r4, #12]
 80100e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80100e6:	6665      	str	r5, [r4, #100]	; 0x64
 80100e8:	f000 f847 	bl	801017a <__retarget_lock_init_recursive>
 80100ec:	f7ff ff96 	bl	801001c <__sfp_lock_release>
 80100f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80100f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80100f8:	6025      	str	r5, [r4, #0]
 80100fa:	61a5      	str	r5, [r4, #24]
 80100fc:	2208      	movs	r2, #8
 80100fe:	4629      	mov	r1, r5
 8010100:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010104:	f7fb fd78 	bl	800bbf8 <memset>
 8010108:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801010c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010110:	4620      	mov	r0, r4
 8010112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010114:	3468      	adds	r4, #104	; 0x68
 8010116:	e7d9      	b.n	80100cc <__sfp+0x1c>
 8010118:	2104      	movs	r1, #4
 801011a:	4638      	mov	r0, r7
 801011c:	f7ff ff62 	bl	800ffe4 <__sfmoreglue>
 8010120:	4604      	mov	r4, r0
 8010122:	6030      	str	r0, [r6, #0]
 8010124:	2800      	cmp	r0, #0
 8010126:	d1d5      	bne.n	80100d4 <__sfp+0x24>
 8010128:	f7ff ff78 	bl	801001c <__sfp_lock_release>
 801012c:	230c      	movs	r3, #12
 801012e:	603b      	str	r3, [r7, #0]
 8010130:	e7ee      	b.n	8010110 <__sfp+0x60>
 8010132:	bf00      	nop
 8010134:	08014e60 	.word	0x08014e60
 8010138:	ffff0001 	.word	0xffff0001

0801013c <_fwalk_reent>:
 801013c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010140:	4606      	mov	r6, r0
 8010142:	4688      	mov	r8, r1
 8010144:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010148:	2700      	movs	r7, #0
 801014a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801014e:	f1b9 0901 	subs.w	r9, r9, #1
 8010152:	d505      	bpl.n	8010160 <_fwalk_reent+0x24>
 8010154:	6824      	ldr	r4, [r4, #0]
 8010156:	2c00      	cmp	r4, #0
 8010158:	d1f7      	bne.n	801014a <_fwalk_reent+0xe>
 801015a:	4638      	mov	r0, r7
 801015c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010160:	89ab      	ldrh	r3, [r5, #12]
 8010162:	2b01      	cmp	r3, #1
 8010164:	d907      	bls.n	8010176 <_fwalk_reent+0x3a>
 8010166:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801016a:	3301      	adds	r3, #1
 801016c:	d003      	beq.n	8010176 <_fwalk_reent+0x3a>
 801016e:	4629      	mov	r1, r5
 8010170:	4630      	mov	r0, r6
 8010172:	47c0      	blx	r8
 8010174:	4307      	orrs	r7, r0
 8010176:	3568      	adds	r5, #104	; 0x68
 8010178:	e7e9      	b.n	801014e <_fwalk_reent+0x12>

0801017a <__retarget_lock_init_recursive>:
 801017a:	4770      	bx	lr

0801017c <__retarget_lock_acquire_recursive>:
 801017c:	4770      	bx	lr

0801017e <__retarget_lock_release_recursive>:
 801017e:	4770      	bx	lr

08010180 <__swhatbuf_r>:
 8010180:	b570      	push	{r4, r5, r6, lr}
 8010182:	460e      	mov	r6, r1
 8010184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010188:	2900      	cmp	r1, #0
 801018a:	b096      	sub	sp, #88	; 0x58
 801018c:	4614      	mov	r4, r2
 801018e:	461d      	mov	r5, r3
 8010190:	da07      	bge.n	80101a2 <__swhatbuf_r+0x22>
 8010192:	2300      	movs	r3, #0
 8010194:	602b      	str	r3, [r5, #0]
 8010196:	89b3      	ldrh	r3, [r6, #12]
 8010198:	061a      	lsls	r2, r3, #24
 801019a:	d410      	bmi.n	80101be <__swhatbuf_r+0x3e>
 801019c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101a0:	e00e      	b.n	80101c0 <__swhatbuf_r+0x40>
 80101a2:	466a      	mov	r2, sp
 80101a4:	f000 f902 	bl	80103ac <_fstat_r>
 80101a8:	2800      	cmp	r0, #0
 80101aa:	dbf2      	blt.n	8010192 <__swhatbuf_r+0x12>
 80101ac:	9a01      	ldr	r2, [sp, #4]
 80101ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80101b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80101b6:	425a      	negs	r2, r3
 80101b8:	415a      	adcs	r2, r3
 80101ba:	602a      	str	r2, [r5, #0]
 80101bc:	e7ee      	b.n	801019c <__swhatbuf_r+0x1c>
 80101be:	2340      	movs	r3, #64	; 0x40
 80101c0:	2000      	movs	r0, #0
 80101c2:	6023      	str	r3, [r4, #0]
 80101c4:	b016      	add	sp, #88	; 0x58
 80101c6:	bd70      	pop	{r4, r5, r6, pc}

080101c8 <__smakebuf_r>:
 80101c8:	898b      	ldrh	r3, [r1, #12]
 80101ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80101cc:	079d      	lsls	r5, r3, #30
 80101ce:	4606      	mov	r6, r0
 80101d0:	460c      	mov	r4, r1
 80101d2:	d507      	bpl.n	80101e4 <__smakebuf_r+0x1c>
 80101d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80101d8:	6023      	str	r3, [r4, #0]
 80101da:	6123      	str	r3, [r4, #16]
 80101dc:	2301      	movs	r3, #1
 80101de:	6163      	str	r3, [r4, #20]
 80101e0:	b002      	add	sp, #8
 80101e2:	bd70      	pop	{r4, r5, r6, pc}
 80101e4:	ab01      	add	r3, sp, #4
 80101e6:	466a      	mov	r2, sp
 80101e8:	f7ff ffca 	bl	8010180 <__swhatbuf_r>
 80101ec:	9900      	ldr	r1, [sp, #0]
 80101ee:	4605      	mov	r5, r0
 80101f0:	4630      	mov	r0, r6
 80101f2:	f7ff f97d 	bl	800f4f0 <_malloc_r>
 80101f6:	b948      	cbnz	r0, 801020c <__smakebuf_r+0x44>
 80101f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101fc:	059a      	lsls	r2, r3, #22
 80101fe:	d4ef      	bmi.n	80101e0 <__smakebuf_r+0x18>
 8010200:	f023 0303 	bic.w	r3, r3, #3
 8010204:	f043 0302 	orr.w	r3, r3, #2
 8010208:	81a3      	strh	r3, [r4, #12]
 801020a:	e7e3      	b.n	80101d4 <__smakebuf_r+0xc>
 801020c:	4b0d      	ldr	r3, [pc, #52]	; (8010244 <__smakebuf_r+0x7c>)
 801020e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010210:	89a3      	ldrh	r3, [r4, #12]
 8010212:	6020      	str	r0, [r4, #0]
 8010214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010218:	81a3      	strh	r3, [r4, #12]
 801021a:	9b00      	ldr	r3, [sp, #0]
 801021c:	6163      	str	r3, [r4, #20]
 801021e:	9b01      	ldr	r3, [sp, #4]
 8010220:	6120      	str	r0, [r4, #16]
 8010222:	b15b      	cbz	r3, 801023c <__smakebuf_r+0x74>
 8010224:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010228:	4630      	mov	r0, r6
 801022a:	f000 f8d1 	bl	80103d0 <_isatty_r>
 801022e:	b128      	cbz	r0, 801023c <__smakebuf_r+0x74>
 8010230:	89a3      	ldrh	r3, [r4, #12]
 8010232:	f023 0303 	bic.w	r3, r3, #3
 8010236:	f043 0301 	orr.w	r3, r3, #1
 801023a:	81a3      	strh	r3, [r4, #12]
 801023c:	89a0      	ldrh	r0, [r4, #12]
 801023e:	4305      	orrs	r5, r0
 8010240:	81a5      	strh	r5, [r4, #12]
 8010242:	e7cd      	b.n	80101e0 <__smakebuf_r+0x18>
 8010244:	0800ffd9 	.word	0x0800ffd9

08010248 <_malloc_usable_size_r>:
 8010248:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801024c:	1f18      	subs	r0, r3, #4
 801024e:	2b00      	cmp	r3, #0
 8010250:	bfbc      	itt	lt
 8010252:	580b      	ldrlt	r3, [r1, r0]
 8010254:	18c0      	addlt	r0, r0, r3
 8010256:	4770      	bx	lr

08010258 <_raise_r>:
 8010258:	291f      	cmp	r1, #31
 801025a:	b538      	push	{r3, r4, r5, lr}
 801025c:	4604      	mov	r4, r0
 801025e:	460d      	mov	r5, r1
 8010260:	d904      	bls.n	801026c <_raise_r+0x14>
 8010262:	2316      	movs	r3, #22
 8010264:	6003      	str	r3, [r0, #0]
 8010266:	f04f 30ff 	mov.w	r0, #4294967295
 801026a:	bd38      	pop	{r3, r4, r5, pc}
 801026c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801026e:	b112      	cbz	r2, 8010276 <_raise_r+0x1e>
 8010270:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010274:	b94b      	cbnz	r3, 801028a <_raise_r+0x32>
 8010276:	4620      	mov	r0, r4
 8010278:	f000 f830 	bl	80102dc <_getpid_r>
 801027c:	462a      	mov	r2, r5
 801027e:	4601      	mov	r1, r0
 8010280:	4620      	mov	r0, r4
 8010282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010286:	f000 b817 	b.w	80102b8 <_kill_r>
 801028a:	2b01      	cmp	r3, #1
 801028c:	d00a      	beq.n	80102a4 <_raise_r+0x4c>
 801028e:	1c59      	adds	r1, r3, #1
 8010290:	d103      	bne.n	801029a <_raise_r+0x42>
 8010292:	2316      	movs	r3, #22
 8010294:	6003      	str	r3, [r0, #0]
 8010296:	2001      	movs	r0, #1
 8010298:	e7e7      	b.n	801026a <_raise_r+0x12>
 801029a:	2400      	movs	r4, #0
 801029c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80102a0:	4628      	mov	r0, r5
 80102a2:	4798      	blx	r3
 80102a4:	2000      	movs	r0, #0
 80102a6:	e7e0      	b.n	801026a <_raise_r+0x12>

080102a8 <raise>:
 80102a8:	4b02      	ldr	r3, [pc, #8]	; (80102b4 <raise+0xc>)
 80102aa:	4601      	mov	r1, r0
 80102ac:	6818      	ldr	r0, [r3, #0]
 80102ae:	f7ff bfd3 	b.w	8010258 <_raise_r>
 80102b2:	bf00      	nop
 80102b4:	20000524 	.word	0x20000524

080102b8 <_kill_r>:
 80102b8:	b538      	push	{r3, r4, r5, lr}
 80102ba:	4d07      	ldr	r5, [pc, #28]	; (80102d8 <_kill_r+0x20>)
 80102bc:	2300      	movs	r3, #0
 80102be:	4604      	mov	r4, r0
 80102c0:	4608      	mov	r0, r1
 80102c2:	4611      	mov	r1, r2
 80102c4:	602b      	str	r3, [r5, #0]
 80102c6:	f7f1 fc59 	bl	8001b7c <_kill>
 80102ca:	1c43      	adds	r3, r0, #1
 80102cc:	d102      	bne.n	80102d4 <_kill_r+0x1c>
 80102ce:	682b      	ldr	r3, [r5, #0]
 80102d0:	b103      	cbz	r3, 80102d4 <_kill_r+0x1c>
 80102d2:	6023      	str	r3, [r4, #0]
 80102d4:	bd38      	pop	{r3, r4, r5, pc}
 80102d6:	bf00      	nop
 80102d8:	20001048 	.word	0x20001048

080102dc <_getpid_r>:
 80102dc:	f7f1 bc46 	b.w	8001b6c <_getpid>

080102e0 <__sread>:
 80102e0:	b510      	push	{r4, lr}
 80102e2:	460c      	mov	r4, r1
 80102e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102e8:	f000 f894 	bl	8010414 <_read_r>
 80102ec:	2800      	cmp	r0, #0
 80102ee:	bfab      	itete	ge
 80102f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80102f2:	89a3      	ldrhlt	r3, [r4, #12]
 80102f4:	181b      	addge	r3, r3, r0
 80102f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80102fa:	bfac      	ite	ge
 80102fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80102fe:	81a3      	strhlt	r3, [r4, #12]
 8010300:	bd10      	pop	{r4, pc}

08010302 <__swrite>:
 8010302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010306:	461f      	mov	r7, r3
 8010308:	898b      	ldrh	r3, [r1, #12]
 801030a:	05db      	lsls	r3, r3, #23
 801030c:	4605      	mov	r5, r0
 801030e:	460c      	mov	r4, r1
 8010310:	4616      	mov	r6, r2
 8010312:	d505      	bpl.n	8010320 <__swrite+0x1e>
 8010314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010318:	2302      	movs	r3, #2
 801031a:	2200      	movs	r2, #0
 801031c:	f000 f868 	bl	80103f0 <_lseek_r>
 8010320:	89a3      	ldrh	r3, [r4, #12]
 8010322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010326:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801032a:	81a3      	strh	r3, [r4, #12]
 801032c:	4632      	mov	r2, r6
 801032e:	463b      	mov	r3, r7
 8010330:	4628      	mov	r0, r5
 8010332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010336:	f000 b817 	b.w	8010368 <_write_r>

0801033a <__sseek>:
 801033a:	b510      	push	{r4, lr}
 801033c:	460c      	mov	r4, r1
 801033e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010342:	f000 f855 	bl	80103f0 <_lseek_r>
 8010346:	1c43      	adds	r3, r0, #1
 8010348:	89a3      	ldrh	r3, [r4, #12]
 801034a:	bf15      	itete	ne
 801034c:	6560      	strne	r0, [r4, #84]	; 0x54
 801034e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010352:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010356:	81a3      	strheq	r3, [r4, #12]
 8010358:	bf18      	it	ne
 801035a:	81a3      	strhne	r3, [r4, #12]
 801035c:	bd10      	pop	{r4, pc}

0801035e <__sclose>:
 801035e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010362:	f000 b813 	b.w	801038c <_close_r>
	...

08010368 <_write_r>:
 8010368:	b538      	push	{r3, r4, r5, lr}
 801036a:	4d07      	ldr	r5, [pc, #28]	; (8010388 <_write_r+0x20>)
 801036c:	4604      	mov	r4, r0
 801036e:	4608      	mov	r0, r1
 8010370:	4611      	mov	r1, r2
 8010372:	2200      	movs	r2, #0
 8010374:	602a      	str	r2, [r5, #0]
 8010376:	461a      	mov	r2, r3
 8010378:	f7f1 fc37 	bl	8001bea <_write>
 801037c:	1c43      	adds	r3, r0, #1
 801037e:	d102      	bne.n	8010386 <_write_r+0x1e>
 8010380:	682b      	ldr	r3, [r5, #0]
 8010382:	b103      	cbz	r3, 8010386 <_write_r+0x1e>
 8010384:	6023      	str	r3, [r4, #0]
 8010386:	bd38      	pop	{r3, r4, r5, pc}
 8010388:	20001048 	.word	0x20001048

0801038c <_close_r>:
 801038c:	b538      	push	{r3, r4, r5, lr}
 801038e:	4d06      	ldr	r5, [pc, #24]	; (80103a8 <_close_r+0x1c>)
 8010390:	2300      	movs	r3, #0
 8010392:	4604      	mov	r4, r0
 8010394:	4608      	mov	r0, r1
 8010396:	602b      	str	r3, [r5, #0]
 8010398:	f7f1 fc43 	bl	8001c22 <_close>
 801039c:	1c43      	adds	r3, r0, #1
 801039e:	d102      	bne.n	80103a6 <_close_r+0x1a>
 80103a0:	682b      	ldr	r3, [r5, #0]
 80103a2:	b103      	cbz	r3, 80103a6 <_close_r+0x1a>
 80103a4:	6023      	str	r3, [r4, #0]
 80103a6:	bd38      	pop	{r3, r4, r5, pc}
 80103a8:	20001048 	.word	0x20001048

080103ac <_fstat_r>:
 80103ac:	b538      	push	{r3, r4, r5, lr}
 80103ae:	4d07      	ldr	r5, [pc, #28]	; (80103cc <_fstat_r+0x20>)
 80103b0:	2300      	movs	r3, #0
 80103b2:	4604      	mov	r4, r0
 80103b4:	4608      	mov	r0, r1
 80103b6:	4611      	mov	r1, r2
 80103b8:	602b      	str	r3, [r5, #0]
 80103ba:	f7f1 fc3e 	bl	8001c3a <_fstat>
 80103be:	1c43      	adds	r3, r0, #1
 80103c0:	d102      	bne.n	80103c8 <_fstat_r+0x1c>
 80103c2:	682b      	ldr	r3, [r5, #0]
 80103c4:	b103      	cbz	r3, 80103c8 <_fstat_r+0x1c>
 80103c6:	6023      	str	r3, [r4, #0]
 80103c8:	bd38      	pop	{r3, r4, r5, pc}
 80103ca:	bf00      	nop
 80103cc:	20001048 	.word	0x20001048

080103d0 <_isatty_r>:
 80103d0:	b538      	push	{r3, r4, r5, lr}
 80103d2:	4d06      	ldr	r5, [pc, #24]	; (80103ec <_isatty_r+0x1c>)
 80103d4:	2300      	movs	r3, #0
 80103d6:	4604      	mov	r4, r0
 80103d8:	4608      	mov	r0, r1
 80103da:	602b      	str	r3, [r5, #0]
 80103dc:	f7f1 fc3d 	bl	8001c5a <_isatty>
 80103e0:	1c43      	adds	r3, r0, #1
 80103e2:	d102      	bne.n	80103ea <_isatty_r+0x1a>
 80103e4:	682b      	ldr	r3, [r5, #0]
 80103e6:	b103      	cbz	r3, 80103ea <_isatty_r+0x1a>
 80103e8:	6023      	str	r3, [r4, #0]
 80103ea:	bd38      	pop	{r3, r4, r5, pc}
 80103ec:	20001048 	.word	0x20001048

080103f0 <_lseek_r>:
 80103f0:	b538      	push	{r3, r4, r5, lr}
 80103f2:	4d07      	ldr	r5, [pc, #28]	; (8010410 <_lseek_r+0x20>)
 80103f4:	4604      	mov	r4, r0
 80103f6:	4608      	mov	r0, r1
 80103f8:	4611      	mov	r1, r2
 80103fa:	2200      	movs	r2, #0
 80103fc:	602a      	str	r2, [r5, #0]
 80103fe:	461a      	mov	r2, r3
 8010400:	f7f1 fc36 	bl	8001c70 <_lseek>
 8010404:	1c43      	adds	r3, r0, #1
 8010406:	d102      	bne.n	801040e <_lseek_r+0x1e>
 8010408:	682b      	ldr	r3, [r5, #0]
 801040a:	b103      	cbz	r3, 801040e <_lseek_r+0x1e>
 801040c:	6023      	str	r3, [r4, #0]
 801040e:	bd38      	pop	{r3, r4, r5, pc}
 8010410:	20001048 	.word	0x20001048

08010414 <_read_r>:
 8010414:	b538      	push	{r3, r4, r5, lr}
 8010416:	4d07      	ldr	r5, [pc, #28]	; (8010434 <_read_r+0x20>)
 8010418:	4604      	mov	r4, r0
 801041a:	4608      	mov	r0, r1
 801041c:	4611      	mov	r1, r2
 801041e:	2200      	movs	r2, #0
 8010420:	602a      	str	r2, [r5, #0]
 8010422:	461a      	mov	r2, r3
 8010424:	f7f1 fbc4 	bl	8001bb0 <_read>
 8010428:	1c43      	adds	r3, r0, #1
 801042a:	d102      	bne.n	8010432 <_read_r+0x1e>
 801042c:	682b      	ldr	r3, [r5, #0]
 801042e:	b103      	cbz	r3, 8010432 <_read_r+0x1e>
 8010430:	6023      	str	r3, [r4, #0]
 8010432:	bd38      	pop	{r3, r4, r5, pc}
 8010434:	20001048 	.word	0x20001048

08010438 <sqrt>:
 8010438:	b538      	push	{r3, r4, r5, lr}
 801043a:	ed2d 8b02 	vpush	{d8}
 801043e:	ec55 4b10 	vmov	r4, r5, d0
 8010442:	f000 f82d 	bl	80104a0 <__ieee754_sqrt>
 8010446:	4b15      	ldr	r3, [pc, #84]	; (801049c <sqrt+0x64>)
 8010448:	eeb0 8a40 	vmov.f32	s16, s0
 801044c:	eef0 8a60 	vmov.f32	s17, s1
 8010450:	f993 3000 	ldrsb.w	r3, [r3]
 8010454:	3301      	adds	r3, #1
 8010456:	d019      	beq.n	801048c <sqrt+0x54>
 8010458:	4622      	mov	r2, r4
 801045a:	462b      	mov	r3, r5
 801045c:	4620      	mov	r0, r4
 801045e:	4629      	mov	r1, r5
 8010460:	f7f0 fb64 	bl	8000b2c <__aeabi_dcmpun>
 8010464:	b990      	cbnz	r0, 801048c <sqrt+0x54>
 8010466:	2200      	movs	r2, #0
 8010468:	2300      	movs	r3, #0
 801046a:	4620      	mov	r0, r4
 801046c:	4629      	mov	r1, r5
 801046e:	f7f0 fb35 	bl	8000adc <__aeabi_dcmplt>
 8010472:	b158      	cbz	r0, 801048c <sqrt+0x54>
 8010474:	f7fb fb88 	bl	800bb88 <__errno>
 8010478:	2321      	movs	r3, #33	; 0x21
 801047a:	6003      	str	r3, [r0, #0]
 801047c:	2200      	movs	r2, #0
 801047e:	2300      	movs	r3, #0
 8010480:	4610      	mov	r0, r2
 8010482:	4619      	mov	r1, r3
 8010484:	f7f0 f9e2 	bl	800084c <__aeabi_ddiv>
 8010488:	ec41 0b18 	vmov	d8, r0, r1
 801048c:	eeb0 0a48 	vmov.f32	s0, s16
 8010490:	eef0 0a68 	vmov.f32	s1, s17
 8010494:	ecbd 8b02 	vpop	{d8}
 8010498:	bd38      	pop	{r3, r4, r5, pc}
 801049a:	bf00      	nop
 801049c:	200006f8 	.word	0x200006f8

080104a0 <__ieee754_sqrt>:
 80104a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104a4:	ec55 4b10 	vmov	r4, r5, d0
 80104a8:	4e56      	ldr	r6, [pc, #344]	; (8010604 <__ieee754_sqrt+0x164>)
 80104aa:	43ae      	bics	r6, r5
 80104ac:	ee10 0a10 	vmov	r0, s0
 80104b0:	ee10 3a10 	vmov	r3, s0
 80104b4:	4629      	mov	r1, r5
 80104b6:	462a      	mov	r2, r5
 80104b8:	d110      	bne.n	80104dc <__ieee754_sqrt+0x3c>
 80104ba:	ee10 2a10 	vmov	r2, s0
 80104be:	462b      	mov	r3, r5
 80104c0:	f7f0 f89a 	bl	80005f8 <__aeabi_dmul>
 80104c4:	4602      	mov	r2, r0
 80104c6:	460b      	mov	r3, r1
 80104c8:	4620      	mov	r0, r4
 80104ca:	4629      	mov	r1, r5
 80104cc:	f7ef fede 	bl	800028c <__adddf3>
 80104d0:	4604      	mov	r4, r0
 80104d2:	460d      	mov	r5, r1
 80104d4:	ec45 4b10 	vmov	d0, r4, r5
 80104d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104dc:	2d00      	cmp	r5, #0
 80104de:	dc10      	bgt.n	8010502 <__ieee754_sqrt+0x62>
 80104e0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80104e4:	4330      	orrs	r0, r6
 80104e6:	d0f5      	beq.n	80104d4 <__ieee754_sqrt+0x34>
 80104e8:	b15d      	cbz	r5, 8010502 <__ieee754_sqrt+0x62>
 80104ea:	ee10 2a10 	vmov	r2, s0
 80104ee:	462b      	mov	r3, r5
 80104f0:	ee10 0a10 	vmov	r0, s0
 80104f4:	f7ef fec8 	bl	8000288 <__aeabi_dsub>
 80104f8:	4602      	mov	r2, r0
 80104fa:	460b      	mov	r3, r1
 80104fc:	f7f0 f9a6 	bl	800084c <__aeabi_ddiv>
 8010500:	e7e6      	b.n	80104d0 <__ieee754_sqrt+0x30>
 8010502:	1509      	asrs	r1, r1, #20
 8010504:	d076      	beq.n	80105f4 <__ieee754_sqrt+0x154>
 8010506:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801050a:	07ce      	lsls	r6, r1, #31
 801050c:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8010510:	bf5e      	ittt	pl
 8010512:	0fda      	lsrpl	r2, r3, #31
 8010514:	005b      	lslpl	r3, r3, #1
 8010516:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801051a:	0fda      	lsrs	r2, r3, #31
 801051c:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8010520:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8010524:	2000      	movs	r0, #0
 8010526:	106d      	asrs	r5, r5, #1
 8010528:	005b      	lsls	r3, r3, #1
 801052a:	f04f 0e16 	mov.w	lr, #22
 801052e:	4684      	mov	ip, r0
 8010530:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010534:	eb0c 0401 	add.w	r4, ip, r1
 8010538:	4294      	cmp	r4, r2
 801053a:	bfde      	ittt	le
 801053c:	1b12      	suble	r2, r2, r4
 801053e:	eb04 0c01 	addle.w	ip, r4, r1
 8010542:	1840      	addle	r0, r0, r1
 8010544:	0052      	lsls	r2, r2, #1
 8010546:	f1be 0e01 	subs.w	lr, lr, #1
 801054a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801054e:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8010552:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010556:	d1ed      	bne.n	8010534 <__ieee754_sqrt+0x94>
 8010558:	4671      	mov	r1, lr
 801055a:	2720      	movs	r7, #32
 801055c:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8010560:	4562      	cmp	r2, ip
 8010562:	eb04 060e 	add.w	r6, r4, lr
 8010566:	dc02      	bgt.n	801056e <__ieee754_sqrt+0xce>
 8010568:	d113      	bne.n	8010592 <__ieee754_sqrt+0xf2>
 801056a:	429e      	cmp	r6, r3
 801056c:	d811      	bhi.n	8010592 <__ieee754_sqrt+0xf2>
 801056e:	2e00      	cmp	r6, #0
 8010570:	eb06 0e04 	add.w	lr, r6, r4
 8010574:	da43      	bge.n	80105fe <__ieee754_sqrt+0x15e>
 8010576:	f1be 0f00 	cmp.w	lr, #0
 801057a:	db40      	blt.n	80105fe <__ieee754_sqrt+0x15e>
 801057c:	f10c 0801 	add.w	r8, ip, #1
 8010580:	eba2 020c 	sub.w	r2, r2, ip
 8010584:	429e      	cmp	r6, r3
 8010586:	bf88      	it	hi
 8010588:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801058c:	1b9b      	subs	r3, r3, r6
 801058e:	4421      	add	r1, r4
 8010590:	46c4      	mov	ip, r8
 8010592:	0052      	lsls	r2, r2, #1
 8010594:	3f01      	subs	r7, #1
 8010596:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801059a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 801059e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80105a2:	d1dd      	bne.n	8010560 <__ieee754_sqrt+0xc0>
 80105a4:	4313      	orrs	r3, r2
 80105a6:	d006      	beq.n	80105b6 <__ieee754_sqrt+0x116>
 80105a8:	1c4c      	adds	r4, r1, #1
 80105aa:	bf13      	iteet	ne
 80105ac:	3101      	addne	r1, #1
 80105ae:	3001      	addeq	r0, #1
 80105b0:	4639      	moveq	r1, r7
 80105b2:	f021 0101 	bicne.w	r1, r1, #1
 80105b6:	1043      	asrs	r3, r0, #1
 80105b8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80105bc:	0849      	lsrs	r1, r1, #1
 80105be:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80105c2:	07c2      	lsls	r2, r0, #31
 80105c4:	bf48      	it	mi
 80105c6:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80105ca:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80105ce:	460c      	mov	r4, r1
 80105d0:	463d      	mov	r5, r7
 80105d2:	e77f      	b.n	80104d4 <__ieee754_sqrt+0x34>
 80105d4:	0ada      	lsrs	r2, r3, #11
 80105d6:	3815      	subs	r0, #21
 80105d8:	055b      	lsls	r3, r3, #21
 80105da:	2a00      	cmp	r2, #0
 80105dc:	d0fa      	beq.n	80105d4 <__ieee754_sqrt+0x134>
 80105de:	02d7      	lsls	r7, r2, #11
 80105e0:	d50a      	bpl.n	80105f8 <__ieee754_sqrt+0x158>
 80105e2:	f1c1 0420 	rsb	r4, r1, #32
 80105e6:	fa23 f404 	lsr.w	r4, r3, r4
 80105ea:	1e4d      	subs	r5, r1, #1
 80105ec:	408b      	lsls	r3, r1
 80105ee:	4322      	orrs	r2, r4
 80105f0:	1b41      	subs	r1, r0, r5
 80105f2:	e788      	b.n	8010506 <__ieee754_sqrt+0x66>
 80105f4:	4608      	mov	r0, r1
 80105f6:	e7f0      	b.n	80105da <__ieee754_sqrt+0x13a>
 80105f8:	0052      	lsls	r2, r2, #1
 80105fa:	3101      	adds	r1, #1
 80105fc:	e7ef      	b.n	80105de <__ieee754_sqrt+0x13e>
 80105fe:	46e0      	mov	r8, ip
 8010600:	e7be      	b.n	8010580 <__ieee754_sqrt+0xe0>
 8010602:	bf00      	nop
 8010604:	7ff00000 	.word	0x7ff00000

08010608 <_init>:
 8010608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801060a:	bf00      	nop
 801060c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801060e:	bc08      	pop	{r3}
 8010610:	469e      	mov	lr, r3
 8010612:	4770      	bx	lr

08010614 <_fini>:
 8010614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010616:	bf00      	nop
 8010618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801061a:	bc08      	pop	{r3}
 801061c:	469e      	mov	lr, r3
 801061e:	4770      	bx	lr
