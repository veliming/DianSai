
BDS7_AC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f534  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013e78  0800f6c8  0800f6c8  0001f6c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023540  08023540  00060000  2**0
                  CONTENTS
  4 .ARM          00000008  08023540  08023540  00033540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023548  08023548  00060000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023548  08023548  00033548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802354c  0802354c  0003354c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  08023550  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d704  20000258  080237a8  00060258  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000d95c  080237a8  0006d95c  2**0
                  ALLOC
 11 .ccm_ram      00010000  10000000  080237a8  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.attributes 00000030  00000000  00000000  00060000  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017c25  00000000  00000000  00060030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a2d  00000000  00000000  00077c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014e8  00000000  00000000  0007b688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000013b0  00000000  00000000  0007cb70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b6e  00000000  00000000  0007df20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015fbd  00000000  00000000  000a2a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc6e6  00000000  00000000  000b8a4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c1  00000000  00000000  00195131  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d3c  00000000  00000000  001951f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00004e07  00000000  00000000  0019bf30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000258 	.word	0x20000258
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f6ac 	.word	0x0800f6ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000025c 	.word	0x2000025c
 80001cc:	0800f6ac 	.word	0x0800f6ac

080001d0 <arm_bitreversal_32>:
 80001d0:	1c4b      	adds	r3, r1, #1
 80001d2:	2b01      	cmp	r3, #1
 80001d4:	bf98      	it	ls
 80001d6:	4770      	bxls	lr
 80001d8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001dc:	1c91      	adds	r1, r2, #2
 80001de:	089b      	lsrs	r3, r3, #2

080001e0 <arm_bitreversal_32_0>:
 80001e0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001e4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e8:	880a      	ldrh	r2, [r1, #0]
 80001ea:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001ee:	4480      	add	r8, r0
 80001f0:	4481      	add	r9, r0
 80001f2:	4402      	add	r2, r0
 80001f4:	4484      	add	ip, r0
 80001f6:	f8d9 7000 	ldr.w	r7, [r9]
 80001fa:	f8d8 6000 	ldr.w	r6, [r8]
 80001fe:	6815      	ldr	r5, [r2, #0]
 8000200:	f8dc 4000 	ldr.w	r4, [ip]
 8000204:	f8c9 6000 	str.w	r6, [r9]
 8000208:	f8c8 7000 	str.w	r7, [r8]
 800020c:	f8cc 5000 	str.w	r5, [ip]
 8000210:	6014      	str	r4, [r2, #0]
 8000212:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000216:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800021a:	6855      	ldr	r5, [r2, #4]
 800021c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000220:	f8c9 6004 	str.w	r6, [r9, #4]
 8000224:	f8c8 7004 	str.w	r7, [r8, #4]
 8000228:	f8cc 5004 	str.w	r5, [ip, #4]
 800022c:	6054      	str	r4, [r2, #4]
 800022e:	3108      	adds	r1, #8
 8000230:	3b01      	subs	r3, #1
 8000232:	d1d5      	bne.n	80001e0 <arm_bitreversal_32_0>
 8000234:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000238:	4770      	bx	lr

0800023a <arm_bitreversal_16>:
 800023a:	1c4b      	adds	r3, r1, #1
 800023c:	2b01      	cmp	r3, #1
 800023e:	bf98      	it	ls
 8000240:	4770      	bxls	lr
 8000242:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000246:	1c91      	adds	r1, r2, #2
 8000248:	089b      	lsrs	r3, r3, #2

0800024a <arm_bitreversal_16_0>:
 800024a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800024e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000252:	880a      	ldrh	r2, [r1, #0]
 8000254:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000258:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800025c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000260:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000264:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000268:	f8d9 7000 	ldr.w	r7, [r9]
 800026c:	f8d8 6000 	ldr.w	r6, [r8]
 8000270:	6815      	ldr	r5, [r2, #0]
 8000272:	f8dc 4000 	ldr.w	r4, [ip]
 8000276:	f8c9 6000 	str.w	r6, [r9]
 800027a:	f8c8 7000 	str.w	r7, [r8]
 800027e:	f8cc 5000 	str.w	r5, [ip]
 8000282:	6014      	str	r4, [r2, #0]
 8000284:	3108      	adds	r1, #8
 8000286:	3b01      	subs	r3, #1
 8000288:	d1df      	bne.n	800024a <arm_bitreversal_16_0>
 800028a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800028e:	4770      	bx	lr

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_drsub>:
 8000340:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000344:	e002      	b.n	800034c <__adddf3>
 8000346:	bf00      	nop

08000348 <__aeabi_dsub>:
 8000348:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800034c <__adddf3>:
 800034c:	b530      	push	{r4, r5, lr}
 800034e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000352:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	bf1f      	itttt	ne
 8000362:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000366:	ea55 0c02 	orrsne.w	ip, r5, r2
 800036a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800036e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000372:	f000 80e2 	beq.w	800053a <__adddf3+0x1ee>
 8000376:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800037a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800037e:	bfb8      	it	lt
 8000380:	426d      	neglt	r5, r5
 8000382:	dd0c      	ble.n	800039e <__adddf3+0x52>
 8000384:	442c      	add	r4, r5
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	ea82 0000 	eor.w	r0, r2, r0
 8000392:	ea83 0101 	eor.w	r1, r3, r1
 8000396:	ea80 0202 	eor.w	r2, r0, r2
 800039a:	ea81 0303 	eor.w	r3, r1, r3
 800039e:	2d36      	cmp	r5, #54	; 0x36
 80003a0:	bf88      	it	hi
 80003a2:	bd30      	pophi	{r4, r5, pc}
 80003a4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003b4:	d002      	beq.n	80003bc <__adddf3+0x70>
 80003b6:	4240      	negs	r0, r0
 80003b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003bc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003c8:	d002      	beq.n	80003d0 <__adddf3+0x84>
 80003ca:	4252      	negs	r2, r2
 80003cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003d0:	ea94 0f05 	teq	r4, r5
 80003d4:	f000 80a7 	beq.w	8000526 <__adddf3+0x1da>
 80003d8:	f1a4 0401 	sub.w	r4, r4, #1
 80003dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003e0:	db0d      	blt.n	80003fe <__adddf3+0xb2>
 80003e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003e6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ea:	1880      	adds	r0, r0, r2
 80003ec:	f141 0100 	adc.w	r1, r1, #0
 80003f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003f4:	1880      	adds	r0, r0, r2
 80003f6:	fa43 f305 	asr.w	r3, r3, r5
 80003fa:	4159      	adcs	r1, r3
 80003fc:	e00e      	b.n	800041c <__adddf3+0xd0>
 80003fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000402:	f10e 0e20 	add.w	lr, lr, #32
 8000406:	2a01      	cmp	r2, #1
 8000408:	fa03 fc0e 	lsl.w	ip, r3, lr
 800040c:	bf28      	it	cs
 800040e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000412:	fa43 f305 	asr.w	r3, r3, r5
 8000416:	18c0      	adds	r0, r0, r3
 8000418:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	d507      	bpl.n	8000432 <__adddf3+0xe6>
 8000422:	f04f 0e00 	mov.w	lr, #0
 8000426:	f1dc 0c00 	rsbs	ip, ip, #0
 800042a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800042e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000432:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000436:	d31b      	bcc.n	8000470 <__adddf3+0x124>
 8000438:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800043c:	d30c      	bcc.n	8000458 <__adddf3+0x10c>
 800043e:	0849      	lsrs	r1, r1, #1
 8000440:	ea5f 0030 	movs.w	r0, r0, rrx
 8000444:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000448:	f104 0401 	add.w	r4, r4, #1
 800044c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000450:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000454:	f080 809a 	bcs.w	800058c <__adddf3+0x240>
 8000458:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800045c:	bf08      	it	eq
 800045e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000462:	f150 0000 	adcs.w	r0, r0, #0
 8000466:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800046a:	ea41 0105 	orr.w	r1, r1, r5
 800046e:	bd30      	pop	{r4, r5, pc}
 8000470:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000474:	4140      	adcs	r0, r0
 8000476:	eb41 0101 	adc.w	r1, r1, r1
 800047a:	3c01      	subs	r4, #1
 800047c:	bf28      	it	cs
 800047e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000482:	d2e9      	bcs.n	8000458 <__adddf3+0x10c>
 8000484:	f091 0f00 	teq	r1, #0
 8000488:	bf04      	itt	eq
 800048a:	4601      	moveq	r1, r0
 800048c:	2000      	moveq	r0, #0
 800048e:	fab1 f381 	clz	r3, r1
 8000492:	bf08      	it	eq
 8000494:	3320      	addeq	r3, #32
 8000496:	f1a3 030b 	sub.w	r3, r3, #11
 800049a:	f1b3 0220 	subs.w	r2, r3, #32
 800049e:	da0c      	bge.n	80004ba <__adddf3+0x16e>
 80004a0:	320c      	adds	r2, #12
 80004a2:	dd08      	ble.n	80004b6 <__adddf3+0x16a>
 80004a4:	f102 0c14 	add.w	ip, r2, #20
 80004a8:	f1c2 020c 	rsb	r2, r2, #12
 80004ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80004b0:	fa21 f102 	lsr.w	r1, r1, r2
 80004b4:	e00c      	b.n	80004d0 <__adddf3+0x184>
 80004b6:	f102 0214 	add.w	r2, r2, #20
 80004ba:	bfd8      	it	le
 80004bc:	f1c2 0c20 	rsble	ip, r2, #32
 80004c0:	fa01 f102 	lsl.w	r1, r1, r2
 80004c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004c8:	bfdc      	itt	le
 80004ca:	ea41 010c 	orrle.w	r1, r1, ip
 80004ce:	4090      	lslle	r0, r2
 80004d0:	1ae4      	subs	r4, r4, r3
 80004d2:	bfa2      	ittt	ge
 80004d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004d8:	4329      	orrge	r1, r5
 80004da:	bd30      	popge	{r4, r5, pc}
 80004dc:	ea6f 0404 	mvn.w	r4, r4
 80004e0:	3c1f      	subs	r4, #31
 80004e2:	da1c      	bge.n	800051e <__adddf3+0x1d2>
 80004e4:	340c      	adds	r4, #12
 80004e6:	dc0e      	bgt.n	8000506 <__adddf3+0x1ba>
 80004e8:	f104 0414 	add.w	r4, r4, #20
 80004ec:	f1c4 0220 	rsb	r2, r4, #32
 80004f0:	fa20 f004 	lsr.w	r0, r0, r4
 80004f4:	fa01 f302 	lsl.w	r3, r1, r2
 80004f8:	ea40 0003 	orr.w	r0, r0, r3
 80004fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000500:	ea45 0103 	orr.w	r1, r5, r3
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f1c4 040c 	rsb	r4, r4, #12
 800050a:	f1c4 0220 	rsb	r2, r4, #32
 800050e:	fa20 f002 	lsr.w	r0, r0, r2
 8000512:	fa01 f304 	lsl.w	r3, r1, r4
 8000516:	ea40 0003 	orr.w	r0, r0, r3
 800051a:	4629      	mov	r1, r5
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	fa21 f004 	lsr.w	r0, r1, r4
 8000522:	4629      	mov	r1, r5
 8000524:	bd30      	pop	{r4, r5, pc}
 8000526:	f094 0f00 	teq	r4, #0
 800052a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800052e:	bf06      	itte	eq
 8000530:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000534:	3401      	addeq	r4, #1
 8000536:	3d01      	subne	r5, #1
 8000538:	e74e      	b.n	80003d8 <__adddf3+0x8c>
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf18      	it	ne
 8000540:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000544:	d029      	beq.n	800059a <__adddf3+0x24e>
 8000546:	ea94 0f05 	teq	r4, r5
 800054a:	bf08      	it	eq
 800054c:	ea90 0f02 	teqeq	r0, r2
 8000550:	d005      	beq.n	800055e <__adddf3+0x212>
 8000552:	ea54 0c00 	orrs.w	ip, r4, r0
 8000556:	bf04      	itt	eq
 8000558:	4619      	moveq	r1, r3
 800055a:	4610      	moveq	r0, r2
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea91 0f03 	teq	r1, r3
 8000562:	bf1e      	ittt	ne
 8000564:	2100      	movne	r1, #0
 8000566:	2000      	movne	r0, #0
 8000568:	bd30      	popne	{r4, r5, pc}
 800056a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800056e:	d105      	bne.n	800057c <__adddf3+0x230>
 8000570:	0040      	lsls	r0, r0, #1
 8000572:	4149      	adcs	r1, r1
 8000574:	bf28      	it	cs
 8000576:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800057a:	bd30      	pop	{r4, r5, pc}
 800057c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000580:	bf3c      	itt	cc
 8000582:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000586:	bd30      	popcc	{r4, r5, pc}
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000590:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000594:	f04f 0000 	mov.w	r0, #0
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf1a      	itte	ne
 80005a0:	4619      	movne	r1, r3
 80005a2:	4610      	movne	r0, r2
 80005a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005a8:	bf1c      	itt	ne
 80005aa:	460b      	movne	r3, r1
 80005ac:	4602      	movne	r2, r0
 80005ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005b2:	bf06      	itte	eq
 80005b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005b8:	ea91 0f03 	teqeq	r1, r3
 80005bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	bf00      	nop

080005c4 <__aeabi_ui2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005d8:	f04f 0500 	mov.w	r5, #0
 80005dc:	f04f 0100 	mov.w	r1, #0
 80005e0:	e750      	b.n	8000484 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_i2d>:
 80005e4:	f090 0f00 	teq	r0, #0
 80005e8:	bf04      	itt	eq
 80005ea:	2100      	moveq	r1, #0
 80005ec:	4770      	bxeq	lr
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005fc:	bf48      	it	mi
 80005fe:	4240      	negmi	r0, r0
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	e73e      	b.n	8000484 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_f2d>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800060e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000612:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000616:	bf1f      	itttt	ne
 8000618:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800061c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000620:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000624:	4770      	bxne	lr
 8000626:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800062a:	bf08      	it	eq
 800062c:	4770      	bxeq	lr
 800062e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000632:	bf04      	itt	eq
 8000634:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000638:	4770      	bxeq	lr
 800063a:	b530      	push	{r4, r5, lr}
 800063c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000648:	e71c      	b.n	8000484 <__adddf3+0x138>
 800064a:	bf00      	nop

0800064c <__aeabi_ul2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f04f 0500 	mov.w	r5, #0
 800065a:	e00a      	b.n	8000672 <__aeabi_l2d+0x16>

0800065c <__aeabi_l2d>:
 800065c:	ea50 0201 	orrs.w	r2, r0, r1
 8000660:	bf08      	it	eq
 8000662:	4770      	bxeq	lr
 8000664:	b530      	push	{r4, r5, lr}
 8000666:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800066a:	d502      	bpl.n	8000672 <__aeabi_l2d+0x16>
 800066c:	4240      	negs	r0, r0
 800066e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000672:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000676:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800067e:	f43f aed8 	beq.w	8000432 <__adddf3+0xe6>
 8000682:	f04f 0203 	mov.w	r2, #3
 8000686:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800068a:	bf18      	it	ne
 800068c:	3203      	addne	r2, #3
 800068e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000692:	bf18      	it	ne
 8000694:	3203      	addne	r2, #3
 8000696:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800069a:	f1c2 0320 	rsb	r3, r2, #32
 800069e:	fa00 fc03 	lsl.w	ip, r0, r3
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006aa:	ea40 000e 	orr.w	r0, r0, lr
 80006ae:	fa21 f102 	lsr.w	r1, r1, r2
 80006b2:	4414      	add	r4, r2
 80006b4:	e6bd      	b.n	8000432 <__adddf3+0xe6>
 80006b6:	bf00      	nop

080006b8 <__aeabi_dmul>:
 80006b8:	b570      	push	{r4, r5, r6, lr}
 80006ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006c6:	bf1d      	ittte	ne
 80006c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006cc:	ea94 0f0c 	teqne	r4, ip
 80006d0:	ea95 0f0c 	teqne	r5, ip
 80006d4:	f000 f8de 	bleq	8000894 <__aeabi_dmul+0x1dc>
 80006d8:	442c      	add	r4, r5
 80006da:	ea81 0603 	eor.w	r6, r1, r3
 80006de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ea:	bf18      	it	ne
 80006ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006f8:	d038      	beq.n	800076c <__aeabi_dmul+0xb4>
 80006fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006fe:	f04f 0500 	mov.w	r5, #0
 8000702:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000706:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800070a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800070e:	f04f 0600 	mov.w	r6, #0
 8000712:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000716:	f09c 0f00 	teq	ip, #0
 800071a:	bf18      	it	ne
 800071c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000720:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000724:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000728:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800072c:	d204      	bcs.n	8000738 <__aeabi_dmul+0x80>
 800072e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000732:	416d      	adcs	r5, r5
 8000734:	eb46 0606 	adc.w	r6, r6, r6
 8000738:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800073c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000740:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000744:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000748:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800074c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000750:	bf88      	it	hi
 8000752:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000756:	d81e      	bhi.n	8000796 <__aeabi_dmul+0xde>
 8000758:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800075c:	bf08      	it	eq
 800075e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000762:	f150 0000 	adcs.w	r0, r0, #0
 8000766:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000770:	ea46 0101 	orr.w	r1, r6, r1
 8000774:	ea40 0002 	orr.w	r0, r0, r2
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000780:	bfc2      	ittt	gt
 8000782:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000786:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800078a:	bd70      	popgt	{r4, r5, r6, pc}
 800078c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000790:	f04f 0e00 	mov.w	lr, #0
 8000794:	3c01      	subs	r4, #1
 8000796:	f300 80ab 	bgt.w	80008f0 <__aeabi_dmul+0x238>
 800079a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800079e:	bfde      	ittt	le
 80007a0:	2000      	movle	r0, #0
 80007a2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007a6:	bd70      	pople	{r4, r5, r6, pc}
 80007a8:	f1c4 0400 	rsb	r4, r4, #0
 80007ac:	3c20      	subs	r4, #32
 80007ae:	da35      	bge.n	800081c <__aeabi_dmul+0x164>
 80007b0:	340c      	adds	r4, #12
 80007b2:	dc1b      	bgt.n	80007ec <__aeabi_dmul+0x134>
 80007b4:	f104 0414 	add.w	r4, r4, #20
 80007b8:	f1c4 0520 	rsb	r5, r4, #32
 80007bc:	fa00 f305 	lsl.w	r3, r0, r5
 80007c0:	fa20 f004 	lsr.w	r0, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea40 0002 	orr.w	r0, r0, r2
 80007cc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007d0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007d8:	fa21 f604 	lsr.w	r6, r1, r4
 80007dc:	eb42 0106 	adc.w	r1, r2, r6
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 040c 	rsb	r4, r4, #12
 80007f0:	f1c4 0520 	rsb	r5, r4, #32
 80007f4:	fa00 f304 	lsl.w	r3, r0, r4
 80007f8:	fa20 f005 	lsr.w	r0, r0, r5
 80007fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000800:	ea40 0002 	orr.w	r0, r0, r2
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800080c:	f141 0100 	adc.w	r1, r1, #0
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 0520 	rsb	r5, r4, #32
 8000820:	fa00 f205 	lsl.w	r2, r0, r5
 8000824:	ea4e 0e02 	orr.w	lr, lr, r2
 8000828:	fa20 f304 	lsr.w	r3, r0, r4
 800082c:	fa01 f205 	lsl.w	r2, r1, r5
 8000830:	ea43 0302 	orr.w	r3, r3, r2
 8000834:	fa21 f004 	lsr.w	r0, r1, r4
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	fa21 f204 	lsr.w	r2, r1, r4
 8000840:	ea20 0002 	bic.w	r0, r0, r2
 8000844:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000848:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800084c:	bf08      	it	eq
 800084e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000852:	bd70      	pop	{r4, r5, r6, pc}
 8000854:	f094 0f00 	teq	r4, #0
 8000858:	d10f      	bne.n	800087a <__aeabi_dmul+0x1c2>
 800085a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800085e:	0040      	lsls	r0, r0, #1
 8000860:	eb41 0101 	adc.w	r1, r1, r1
 8000864:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000868:	bf08      	it	eq
 800086a:	3c01      	subeq	r4, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1a6>
 800086e:	ea41 0106 	orr.w	r1, r1, r6
 8000872:	f095 0f00 	teq	r5, #0
 8000876:	bf18      	it	ne
 8000878:	4770      	bxne	lr
 800087a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	eb43 0303 	adc.w	r3, r3, r3
 8000884:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000888:	bf08      	it	eq
 800088a:	3d01      	subeq	r5, #1
 800088c:	d0f7      	beq.n	800087e <__aeabi_dmul+0x1c6>
 800088e:	ea43 0306 	orr.w	r3, r3, r6
 8000892:	4770      	bx	lr
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089c:	bf18      	it	ne
 800089e:	ea95 0f0c 	teqne	r5, ip
 80008a2:	d00c      	beq.n	80008be <__aeabi_dmul+0x206>
 80008a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a8:	bf18      	it	ne
 80008aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ae:	d1d1      	bne.n	8000854 <__aeabi_dmul+0x19c>
 80008b0:	ea81 0103 	eor.w	r1, r1, r3
 80008b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c2:	bf06      	itte	eq
 80008c4:	4610      	moveq	r0, r2
 80008c6:	4619      	moveq	r1, r3
 80008c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008cc:	d019      	beq.n	8000902 <__aeabi_dmul+0x24a>
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	d102      	bne.n	80008da <__aeabi_dmul+0x222>
 80008d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008d8:	d113      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	d105      	bne.n	80008ec <__aeabi_dmul+0x234>
 80008e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008e4:	bf1c      	itt	ne
 80008e6:	4610      	movne	r0, r2
 80008e8:	4619      	movne	r1, r3
 80008ea:	d10a      	bne.n	8000902 <__aeabi_dmul+0x24a>
 80008ec:	ea81 0103 	eor.w	r1, r1, r3
 80008f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008fc:	f04f 0000 	mov.w	r0, #0
 8000900:	bd70      	pop	{r4, r5, r6, pc}
 8000902:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000906:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800090a:	bd70      	pop	{r4, r5, r6, pc}

0800090c <__aeabi_ddiv>:
 800090c:	b570      	push	{r4, r5, r6, lr}
 800090e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000912:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000916:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800091a:	bf1d      	ittte	ne
 800091c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000920:	ea94 0f0c 	teqne	r4, ip
 8000924:	ea95 0f0c 	teqne	r5, ip
 8000928:	f000 f8a7 	bleq	8000a7a <__aeabi_ddiv+0x16e>
 800092c:	eba4 0405 	sub.w	r4, r4, r5
 8000930:	ea81 0e03 	eor.w	lr, r1, r3
 8000934:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000938:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800093c:	f000 8088 	beq.w	8000a50 <__aeabi_ddiv+0x144>
 8000940:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000944:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000948:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800094c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000950:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000954:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000958:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800095c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000960:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000964:	429d      	cmp	r5, r3
 8000966:	bf08      	it	eq
 8000968:	4296      	cmpeq	r6, r2
 800096a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800096e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000972:	d202      	bcs.n	800097a <__aeabi_ddiv+0x6e>
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	1ab6      	subs	r6, r6, r2
 800097c:	eb65 0503 	sbc.w	r5, r5, r3
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800098a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 000c 	orrcs.w	r0, r0, ip
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009b8:	085b      	lsrs	r3, r3, #1
 80009ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ec:	d018      	beq.n	8000a20 <__aeabi_ddiv+0x114>
 80009ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a02:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a06:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a0a:	d1c0      	bne.n	800098e <__aeabi_ddiv+0x82>
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	d10b      	bne.n	8000a2a <__aeabi_ddiv+0x11e>
 8000a12:	ea41 0100 	orr.w	r1, r1, r0
 8000a16:	f04f 0000 	mov.w	r0, #0
 8000a1a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a1e:	e7b6      	b.n	800098e <__aeabi_ddiv+0x82>
 8000a20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a24:	bf04      	itt	eq
 8000a26:	4301      	orreq	r1, r0
 8000a28:	2000      	moveq	r0, #0
 8000a2a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a2e:	bf88      	it	hi
 8000a30:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a34:	f63f aeaf 	bhi.w	8000796 <__aeabi_dmul+0xde>
 8000a38:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a3c:	bf04      	itt	eq
 8000a3e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a42:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a46:	f150 0000 	adcs.w	r0, r0, #0
 8000a4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a4e:	bd70      	pop	{r4, r5, r6, pc}
 8000a50:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a54:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a58:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a5c:	bfc2      	ittt	gt
 8000a5e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a62:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a66:	bd70      	popgt	{r4, r5, r6, pc}
 8000a68:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6c:	f04f 0e00 	mov.w	lr, #0
 8000a70:	3c01      	subs	r4, #1
 8000a72:	e690      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a74:	ea45 0e06 	orr.w	lr, r5, r6
 8000a78:	e68d      	b.n	8000796 <__aeabi_dmul+0xde>
 8000a7a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a7e:	ea94 0f0c 	teq	r4, ip
 8000a82:	bf08      	it	eq
 8000a84:	ea95 0f0c 	teqeq	r5, ip
 8000a88:	f43f af3b 	beq.w	8000902 <__aeabi_dmul+0x24a>
 8000a8c:	ea94 0f0c 	teq	r4, ip
 8000a90:	d10a      	bne.n	8000aa8 <__aeabi_ddiv+0x19c>
 8000a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a96:	f47f af34 	bne.w	8000902 <__aeabi_dmul+0x24a>
 8000a9a:	ea95 0f0c 	teq	r5, ip
 8000a9e:	f47f af25 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	e72c      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000aa8:	ea95 0f0c 	teq	r5, ip
 8000aac:	d106      	bne.n	8000abc <__aeabi_ddiv+0x1b0>
 8000aae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ab2:	f43f aefd 	beq.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ab6:	4610      	mov	r0, r2
 8000ab8:	4619      	mov	r1, r3
 8000aba:	e722      	b.n	8000902 <__aeabi_dmul+0x24a>
 8000abc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac6:	f47f aec5 	bne.w	8000854 <__aeabi_dmul+0x19c>
 8000aca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ace:	f47f af0d 	bne.w	80008ec <__aeabi_dmul+0x234>
 8000ad2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ad6:	f47f aeeb 	bne.w	80008b0 <__aeabi_dmul+0x1f8>
 8000ada:	e712      	b.n	8000902 <__aeabi_dmul+0x24a>

08000adc <__gedf2>:
 8000adc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ae0:	e006      	b.n	8000af0 <__cmpdf2+0x4>
 8000ae2:	bf00      	nop

08000ae4 <__ledf2>:
 8000ae4:	f04f 0c01 	mov.w	ip, #1
 8000ae8:	e002      	b.n	8000af0 <__cmpdf2+0x4>
 8000aea:	bf00      	nop

08000aec <__cmpdf2>:
 8000aec:	f04f 0c01 	mov.w	ip, #1
 8000af0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b06:	d01b      	beq.n	8000b40 <__cmpdf2+0x54>
 8000b08:	b001      	add	sp, #4
 8000b0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b0e:	bf0c      	ite	eq
 8000b10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b14:	ea91 0f03 	teqne	r1, r3
 8000b18:	bf02      	ittt	eq
 8000b1a:	ea90 0f02 	teqeq	r0, r2
 8000b1e:	2000      	moveq	r0, #0
 8000b20:	4770      	bxeq	lr
 8000b22:	f110 0f00 	cmn.w	r0, #0
 8000b26:	ea91 0f03 	teq	r1, r3
 8000b2a:	bf58      	it	pl
 8000b2c:	4299      	cmppl	r1, r3
 8000b2e:	bf08      	it	eq
 8000b30:	4290      	cmpeq	r0, r2
 8000b32:	bf2c      	ite	cs
 8000b34:	17d8      	asrcs	r0, r3, #31
 8000b36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b3a:	f040 0001 	orr.w	r0, r0, #1
 8000b3e:	4770      	bx	lr
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__cmpdf2+0x64>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d107      	bne.n	8000b60 <__cmpdf2+0x74>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d1d6      	bne.n	8000b08 <__cmpdf2+0x1c>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d0d3      	beq.n	8000b08 <__cmpdf2+0x1c>
 8000b60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdrcmple>:
 8000b68:	4684      	mov	ip, r0
 8000b6a:	4610      	mov	r0, r2
 8000b6c:	4662      	mov	r2, ip
 8000b6e:	468c      	mov	ip, r1
 8000b70:	4619      	mov	r1, r3
 8000b72:	4663      	mov	r3, ip
 8000b74:	e000      	b.n	8000b78 <__aeabi_cdcmpeq>
 8000b76:	bf00      	nop

08000b78 <__aeabi_cdcmpeq>:
 8000b78:	b501      	push	{r0, lr}
 8000b7a:	f7ff ffb7 	bl	8000aec <__cmpdf2>
 8000b7e:	2800      	cmp	r0, #0
 8000b80:	bf48      	it	mi
 8000b82:	f110 0f00 	cmnmi.w	r0, #0
 8000b86:	bd01      	pop	{r0, pc}

08000b88 <__aeabi_dcmpeq>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff fff4 	bl	8000b78 <__aeabi_cdcmpeq>
 8000b90:	bf0c      	ite	eq
 8000b92:	2001      	moveq	r0, #1
 8000b94:	2000      	movne	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmplt>:
 8000b9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba0:	f7ff ffea 	bl	8000b78 <__aeabi_cdcmpeq>
 8000ba4:	bf34      	ite	cc
 8000ba6:	2001      	movcc	r0, #1
 8000ba8:	2000      	movcs	r0, #0
 8000baa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bae:	bf00      	nop

08000bb0 <__aeabi_dcmple>:
 8000bb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb4:	f7ff ffe0 	bl	8000b78 <__aeabi_cdcmpeq>
 8000bb8:	bf94      	ite	ls
 8000bba:	2001      	movls	r0, #1
 8000bbc:	2000      	movhi	r0, #0
 8000bbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc2:	bf00      	nop

08000bc4 <__aeabi_dcmpge>:
 8000bc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc8:	f7ff ffce 	bl	8000b68 <__aeabi_cdrcmple>
 8000bcc:	bf94      	ite	ls
 8000bce:	2001      	movls	r0, #1
 8000bd0:	2000      	movhi	r0, #0
 8000bd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_dcmpgt>:
 8000bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bdc:	f7ff ffc4 	bl	8000b68 <__aeabi_cdrcmple>
 8000be0:	bf34      	ite	cc
 8000be2:	2001      	movcc	r0, #1
 8000be4:	2000      	movcs	r0, #0
 8000be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bea:	bf00      	nop

08000bec <__aeabi_dcmpun>:
 8000bec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x10>
 8000bf6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bfa:	d10a      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000bfc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c04:	d102      	bne.n	8000c0c <__aeabi_dcmpun+0x20>
 8000c06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_dcmpun+0x26>
 8000c0c:	f04f 0000 	mov.w	r0, #0
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0001 	mov.w	r0, #1
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2iz>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d215      	bcs.n	8000c4e <__aeabi_d2iz+0x36>
 8000c22:	d511      	bpl.n	8000c48 <__aeabi_d2iz+0x30>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d912      	bls.n	8000c54 <__aeabi_d2iz+0x3c>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c42:	bf18      	it	ne
 8000c44:	4240      	negne	r0, r0
 8000c46:	4770      	bx	lr
 8000c48:	f04f 0000 	mov.w	r0, #0
 8000c4c:	4770      	bx	lr
 8000c4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c52:	d105      	bne.n	8000c60 <__aeabi_d2iz+0x48>
 8000c54:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	bf08      	it	eq
 8000c5a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bx	lr
 8000c60:	f04f 0000 	mov.w	r0, #0
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_d2uiz>:
 8000c68:	004a      	lsls	r2, r1, #1
 8000c6a:	d211      	bcs.n	8000c90 <__aeabi_d2uiz+0x28>
 8000c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c70:	d211      	bcs.n	8000c96 <__aeabi_d2uiz+0x2e>
 8000c72:	d50d      	bpl.n	8000c90 <__aeabi_d2uiz+0x28>
 8000c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c7c:	d40e      	bmi.n	8000c9c <__aeabi_d2uiz+0x34>
 8000c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c9a:	d102      	bne.n	8000ca2 <__aeabi_d2uiz+0x3a>
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	4770      	bx	lr
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b9a4 	b.w	80010a8 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f83c 	bl	8000de4 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__aeabi_d2lz>:
 8000d78:	b538      	push	{r3, r4, r5, lr}
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	4604      	mov	r4, r0
 8000d80:	460d      	mov	r5, r1
 8000d82:	f7ff ff0b 	bl	8000b9c <__aeabi_dcmplt>
 8000d86:	b928      	cbnz	r0, 8000d94 <__aeabi_d2lz+0x1c>
 8000d88:	4620      	mov	r0, r4
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d90:	f000 b80a 	b.w	8000da8 <__aeabi_d2ulz>
 8000d94:	4620      	mov	r0, r4
 8000d96:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d9a:	f000 f805 	bl	8000da8 <__aeabi_d2ulz>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	bd38      	pop	{r3, r4, r5, pc}
 8000da6:	bf00      	nop

08000da8 <__aeabi_d2ulz>:
 8000da8:	b5d0      	push	{r4, r6, r7, lr}
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__aeabi_d2ulz+0x34>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	4606      	mov	r6, r0
 8000db0:	460f      	mov	r7, r1
 8000db2:	f7ff fc81 	bl	80006b8 <__aeabi_dmul>
 8000db6:	f7ff ff57 	bl	8000c68 <__aeabi_d2uiz>
 8000dba:	4604      	mov	r4, r0
 8000dbc:	f7ff fc02 	bl	80005c4 <__aeabi_ui2d>
 8000dc0:	4b07      	ldr	r3, [pc, #28]	; (8000de0 <__aeabi_d2ulz+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f7ff fc78 	bl	80006b8 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4630      	mov	r0, r6
 8000dce:	4639      	mov	r1, r7
 8000dd0:	f7ff faba 	bl	8000348 <__aeabi_dsub>
 8000dd4:	f7ff ff48 	bl	8000c68 <__aeabi_d2uiz>
 8000dd8:	4621      	mov	r1, r4
 8000dda:	bdd0      	pop	{r4, r6, r7, pc}
 8000ddc:	3df00000 	.word	0x3df00000
 8000de0:	41f00000 	.word	0x41f00000

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9d08      	ldr	r5, [sp, #32]
 8000dea:	4604      	mov	r4, r0
 8000dec:	468c      	mov	ip, r1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	f040 8083 	bne.w	8000efa <__udivmoddi4+0x116>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4617      	mov	r7, r2
 8000df8:	d947      	bls.n	8000e8a <__udivmoddi4+0xa6>
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b142      	cbz	r2, 8000e12 <__udivmoddi4+0x2e>
 8000e00:	f1c2 0020 	rsb	r0, r2, #32
 8000e04:	fa24 f000 	lsr.w	r0, r4, r0
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	4097      	lsls	r7, r2
 8000e0c:	ea40 0c01 	orr.w	ip, r0, r1
 8000e10:	4094      	lsls	r4, r2
 8000e12:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e16:	0c23      	lsrs	r3, r4, #16
 8000e18:	fbbc f6f8 	udiv	r6, ip, r8
 8000e1c:	fa1f fe87 	uxth.w	lr, r7
 8000e20:	fb08 c116 	mls	r1, r8, r6, ip
 8000e24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e28:	fb06 f10e 	mul.w	r1, r6, lr
 8000e2c:	4299      	cmp	r1, r3
 8000e2e:	d909      	bls.n	8000e44 <__udivmoddi4+0x60>
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e36:	f080 8119 	bcs.w	800106c <__udivmoddi4+0x288>
 8000e3a:	4299      	cmp	r1, r3
 8000e3c:	f240 8116 	bls.w	800106c <__udivmoddi4+0x288>
 8000e40:	3e02      	subs	r6, #2
 8000e42:	443b      	add	r3, r7
 8000e44:	1a5b      	subs	r3, r3, r1
 8000e46:	b2a4      	uxth	r4, r4
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000e50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e58:	45a6      	cmp	lr, r4
 8000e5a:	d909      	bls.n	8000e70 <__udivmoddi4+0x8c>
 8000e5c:	193c      	adds	r4, r7, r4
 8000e5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e62:	f080 8105 	bcs.w	8001070 <__udivmoddi4+0x28c>
 8000e66:	45a6      	cmp	lr, r4
 8000e68:	f240 8102 	bls.w	8001070 <__udivmoddi4+0x28c>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	443c      	add	r4, r7
 8000e70:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e74:	eba4 040e 	sub.w	r4, r4, lr
 8000e78:	2600      	movs	r6, #0
 8000e7a:	b11d      	cbz	r5, 8000e84 <__udivmoddi4+0xa0>
 8000e7c:	40d4      	lsrs	r4, r2
 8000e7e:	2300      	movs	r3, #0
 8000e80:	e9c5 4300 	strd	r4, r3, [r5]
 8000e84:	4631      	mov	r1, r6
 8000e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8a:	b902      	cbnz	r2, 8000e8e <__udivmoddi4+0xaa>
 8000e8c:	deff      	udf	#255	; 0xff
 8000e8e:	fab2 f282 	clz	r2, r2
 8000e92:	2a00      	cmp	r2, #0
 8000e94:	d150      	bne.n	8000f38 <__udivmoddi4+0x154>
 8000e96:	1bcb      	subs	r3, r1, r7
 8000e98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e9c:	fa1f f887 	uxth.w	r8, r7
 8000ea0:	2601      	movs	r6, #1
 8000ea2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000ea6:	0c21      	lsrs	r1, r4, #16
 8000ea8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb08 f30c 	mul.w	r3, r8, ip
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0xe4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0xe2>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	f200 80e9 	bhi.w	8001098 <__udivmoddi4+0x2b4>
 8000ec6:	4684      	mov	ip, r0
 8000ec8:	1ac9      	subs	r1, r1, r3
 8000eca:	b2a3      	uxth	r3, r4
 8000ecc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ed4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ed8:	fb08 f800 	mul.w	r8, r8, r0
 8000edc:	45a0      	cmp	r8, r4
 8000ede:	d907      	bls.n	8000ef0 <__udivmoddi4+0x10c>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ee6:	d202      	bcs.n	8000eee <__udivmoddi4+0x10a>
 8000ee8:	45a0      	cmp	r8, r4
 8000eea:	f200 80d9 	bhi.w	80010a0 <__udivmoddi4+0x2bc>
 8000eee:	4618      	mov	r0, r3
 8000ef0:	eba4 0408 	sub.w	r4, r4, r8
 8000ef4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ef8:	e7bf      	b.n	8000e7a <__udivmoddi4+0x96>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d909      	bls.n	8000f12 <__udivmoddi4+0x12e>
 8000efe:	2d00      	cmp	r5, #0
 8000f00:	f000 80b1 	beq.w	8001066 <__udivmoddi4+0x282>
 8000f04:	2600      	movs	r6, #0
 8000f06:	e9c5 0100 	strd	r0, r1, [r5]
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	4631      	mov	r1, r6
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	fab3 f683 	clz	r6, r3
 8000f16:	2e00      	cmp	r6, #0
 8000f18:	d14a      	bne.n	8000fb0 <__udivmoddi4+0x1cc>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d302      	bcc.n	8000f24 <__udivmoddi4+0x140>
 8000f1e:	4282      	cmp	r2, r0
 8000f20:	f200 80b8 	bhi.w	8001094 <__udivmoddi4+0x2b0>
 8000f24:	1a84      	subs	r4, r0, r2
 8000f26:	eb61 0103 	sbc.w	r1, r1, r3
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	468c      	mov	ip, r1
 8000f2e:	2d00      	cmp	r5, #0
 8000f30:	d0a8      	beq.n	8000e84 <__udivmoddi4+0xa0>
 8000f32:	e9c5 4c00 	strd	r4, ip, [r5]
 8000f36:	e7a5      	b.n	8000e84 <__udivmoddi4+0xa0>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f603 	lsr.w	r6, r0, r3
 8000f40:	4097      	lsls	r7, r2
 8000f42:	fa01 f002 	lsl.w	r0, r1, r2
 8000f46:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f4a:	40d9      	lsrs	r1, r3
 8000f4c:	4330      	orrs	r0, r6
 8000f4e:	0c03      	lsrs	r3, r0, #16
 8000f50:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f54:	fa1f f887 	uxth.w	r8, r7
 8000f58:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f5c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f60:	fb06 f108 	mul.w	r1, r6, r8
 8000f64:	4299      	cmp	r1, r3
 8000f66:	fa04 f402 	lsl.w	r4, r4, r2
 8000f6a:	d909      	bls.n	8000f80 <__udivmoddi4+0x19c>
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f72:	f080 808d 	bcs.w	8001090 <__udivmoddi4+0x2ac>
 8000f76:	4299      	cmp	r1, r3
 8000f78:	f240 808a 	bls.w	8001090 <__udivmoddi4+0x2ac>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	443b      	add	r3, r7
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b281      	uxth	r1, r0
 8000f84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f90:	fb00 f308 	mul.w	r3, r0, r8
 8000f94:	428b      	cmp	r3, r1
 8000f96:	d907      	bls.n	8000fa8 <__udivmoddi4+0x1c4>
 8000f98:	1879      	adds	r1, r7, r1
 8000f9a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f9e:	d273      	bcs.n	8001088 <__udivmoddi4+0x2a4>
 8000fa0:	428b      	cmp	r3, r1
 8000fa2:	d971      	bls.n	8001088 <__udivmoddi4+0x2a4>
 8000fa4:	3802      	subs	r0, #2
 8000fa6:	4439      	add	r1, r7
 8000fa8:	1acb      	subs	r3, r1, r3
 8000faa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000fae:	e778      	b.n	8000ea2 <__udivmoddi4+0xbe>
 8000fb0:	f1c6 0c20 	rsb	ip, r6, #32
 8000fb4:	fa03 f406 	lsl.w	r4, r3, r6
 8000fb8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000fbc:	431c      	orrs	r4, r3
 8000fbe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000fc2:	fa01 f306 	lsl.w	r3, r1, r6
 8000fc6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000fca:	fa21 f10c 	lsr.w	r1, r1, ip
 8000fce:	431f      	orrs	r7, r3
 8000fd0:	0c3b      	lsrs	r3, r7, #16
 8000fd2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd6:	fa1f f884 	uxth.w	r8, r4
 8000fda:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fde:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000fe2:	fb09 fa08 	mul.w	sl, r9, r8
 8000fe6:	458a      	cmp	sl, r1
 8000fe8:	fa02 f206 	lsl.w	r2, r2, r6
 8000fec:	fa00 f306 	lsl.w	r3, r0, r6
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x220>
 8000ff2:	1861      	adds	r1, r4, r1
 8000ff4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ff8:	d248      	bcs.n	800108c <__udivmoddi4+0x2a8>
 8000ffa:	458a      	cmp	sl, r1
 8000ffc:	d946      	bls.n	800108c <__udivmoddi4+0x2a8>
 8000ffe:	f1a9 0902 	sub.w	r9, r9, #2
 8001002:	4421      	add	r1, r4
 8001004:	eba1 010a 	sub.w	r1, r1, sl
 8001008:	b2bf      	uxth	r7, r7
 800100a:	fbb1 f0fe 	udiv	r0, r1, lr
 800100e:	fb0e 1110 	mls	r1, lr, r0, r1
 8001012:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001016:	fb00 f808 	mul.w	r8, r0, r8
 800101a:	45b8      	cmp	r8, r7
 800101c:	d907      	bls.n	800102e <__udivmoddi4+0x24a>
 800101e:	19e7      	adds	r7, r4, r7
 8001020:	f100 31ff 	add.w	r1, r0, #4294967295
 8001024:	d22e      	bcs.n	8001084 <__udivmoddi4+0x2a0>
 8001026:	45b8      	cmp	r8, r7
 8001028:	d92c      	bls.n	8001084 <__udivmoddi4+0x2a0>
 800102a:	3802      	subs	r0, #2
 800102c:	4427      	add	r7, r4
 800102e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001032:	eba7 0708 	sub.w	r7, r7, r8
 8001036:	fba0 8902 	umull	r8, r9, r0, r2
 800103a:	454f      	cmp	r7, r9
 800103c:	46c6      	mov	lr, r8
 800103e:	4649      	mov	r1, r9
 8001040:	d31a      	bcc.n	8001078 <__udivmoddi4+0x294>
 8001042:	d017      	beq.n	8001074 <__udivmoddi4+0x290>
 8001044:	b15d      	cbz	r5, 800105e <__udivmoddi4+0x27a>
 8001046:	ebb3 020e 	subs.w	r2, r3, lr
 800104a:	eb67 0701 	sbc.w	r7, r7, r1
 800104e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8001052:	40f2      	lsrs	r2, r6
 8001054:	ea4c 0202 	orr.w	r2, ip, r2
 8001058:	40f7      	lsrs	r7, r6
 800105a:	e9c5 2700 	strd	r2, r7, [r5]
 800105e:	2600      	movs	r6, #0
 8001060:	4631      	mov	r1, r6
 8001062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001066:	462e      	mov	r6, r5
 8001068:	4628      	mov	r0, r5
 800106a:	e70b      	b.n	8000e84 <__udivmoddi4+0xa0>
 800106c:	4606      	mov	r6, r0
 800106e:	e6e9      	b.n	8000e44 <__udivmoddi4+0x60>
 8001070:	4618      	mov	r0, r3
 8001072:	e6fd      	b.n	8000e70 <__udivmoddi4+0x8c>
 8001074:	4543      	cmp	r3, r8
 8001076:	d2e5      	bcs.n	8001044 <__udivmoddi4+0x260>
 8001078:	ebb8 0e02 	subs.w	lr, r8, r2
 800107c:	eb69 0104 	sbc.w	r1, r9, r4
 8001080:	3801      	subs	r0, #1
 8001082:	e7df      	b.n	8001044 <__udivmoddi4+0x260>
 8001084:	4608      	mov	r0, r1
 8001086:	e7d2      	b.n	800102e <__udivmoddi4+0x24a>
 8001088:	4660      	mov	r0, ip
 800108a:	e78d      	b.n	8000fa8 <__udivmoddi4+0x1c4>
 800108c:	4681      	mov	r9, r0
 800108e:	e7b9      	b.n	8001004 <__udivmoddi4+0x220>
 8001090:	4666      	mov	r6, ip
 8001092:	e775      	b.n	8000f80 <__udivmoddi4+0x19c>
 8001094:	4630      	mov	r0, r6
 8001096:	e74a      	b.n	8000f2e <__udivmoddi4+0x14a>
 8001098:	f1ac 0c02 	sub.w	ip, ip, #2
 800109c:	4439      	add	r1, r7
 800109e:	e713      	b.n	8000ec8 <__udivmoddi4+0xe4>
 80010a0:	3802      	subs	r0, #2
 80010a2:	443c      	add	r4, r7
 80010a4:	e724      	b.n	8000ef0 <__udivmoddi4+0x10c>
 80010a6:	bf00      	nop

080010a8 <__aeabi_idiv0>:
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	0000      	movs	r0, r0
	...

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	data[0][0] = 12;
 80010b8:	4bd1      	ldr	r3, [pc, #836]	; (8001400 <main+0x350>)
 80010ba:	220c      	movs	r2, #12
 80010bc:	701a      	strb	r2, [r3, #0]
	CPID.Kp = 120; 			/* Proportional --比例参数 */
 80010be:	4bd1      	ldr	r3, [pc, #836]	; (8001404 <main+0x354>)
 80010c0:	4ad1      	ldr	r2, [pc, #836]	; (8001408 <main+0x358>)
 80010c2:	619a      	str	r2, [r3, #24]
	CPID.Ki = 0;         	/* Integral         --积分参数*/
 80010c4:	4bcf      	ldr	r3, [pc, #828]	; (8001404 <main+0x354>)
 80010c6:	f04f 0200 	mov.w	r2, #0
 80010ca:	61da      	str	r2, [r3, #28]
	CPID.Kd = 0; 			/* Derivative     --微分参数*/
 80010cc:	4bcd      	ldr	r3, [pc, #820]	; (8001404 <main+0x354>)
 80010ce:	f04f 0200 	mov.w	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d4:	f002 f86c 	bl	80031b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d8:	f000 fac0 	bl	800165c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010dc:	f000 fd64 	bl	8001ba8 <MX_GPIO_Init>
  MX_DMA_Init();
 80010e0:	f000 fd42 	bl	8001b68 <MX_DMA_Init>
  MX_TIM3_Init();
 80010e4:	f000 fc14 	bl	8001910 <MX_TIM3_Init>
  MX_ADC1_Init();
 80010e8:	f000 fb22 	bl	8001730 <MX_ADC1_Init>
  MX_ADC2_Init();
 80010ec:	f000 fb72 	bl	80017d4 <MX_ADC2_Init>
  MX_TIM2_Init();
 80010f0:	f000 fbc2 	bl	8001878 <MX_TIM2_Init>
  MX_TIM5_Init();
 80010f4:	f000 fc82 	bl	80019fc <MX_TIM5_Init>
  MX_USART3_UART_Init();
 80010f8:	f000 fd0c 	bl	8001b14 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim2);
 80010fc:	48c3      	ldr	r0, [pc, #780]	; (800140c <main+0x35c>)
 80010fe:	f004 f9ef 	bl	80054e0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8001102:	2100      	movs	r1, #0
 8001104:	48c2      	ldr	r0, [pc, #776]	; (8001410 <main+0x360>)
 8001106:	f004 fab5 	bl	8005674 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_IC_Start_DMA(&htim5, TIM_CHANNEL_1, &Freq, 1);
 800110a:	2301      	movs	r3, #1
 800110c:	4ac1      	ldr	r2, [pc, #772]	; (8001414 <main+0x364>)
 800110e:	2100      	movs	r1, #0
 8001110:	48c1      	ldr	r0, [pc, #772]	; (8001418 <main+0x368>)
 8001112:	f004 fc17 	bl	8005944 <HAL_TIM_IC_Start_DMA>



  //HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&Current_12, ADCTIMES);

  arm_rfft_fast_init_f32(&FFT, 1024);
 8001116:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800111a:	48c0      	ldr	r0, [pc, #768]	; (800141c <main+0x36c>)
 800111c:	f006 ff6e 	bl	8007ffc <arm_rfft_fast_init_f32>
  arm_fir_init_f32(&FIR, FIR_Len, fir_params, FIR_State, BLOCK_SIZE);
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	4bbe      	ldr	r3, [pc, #760]	; (8001420 <main+0x370>)
 8001126:	4abf      	ldr	r2, [pc, #764]	; (8001424 <main+0x374>)
 8001128:	211b      	movs	r1, #27
 800112a:	48bf      	ldr	r0, [pc, #764]	; (8001428 <main+0x378>)
 800112c:	f007 fc54 	bl	80089d8 <arm_fir_init_f32>
  arm_pid_init_f32(&CPID, 1);
 8001130:	2101      	movs	r1, #1
 8001132:	48b4      	ldr	r0, [pc, #720]	; (8001404 <main+0x354>)
 8001134:	f006 ff46 	bl	8007fc4 <arm_pid_init_f32>

  LCD_init();
 8001138:	f001 ff5a 	bl	8002ff0 <LCD_init>
  TFT_Init(recive);
 800113c:	48bb      	ldr	r0, [pc, #748]	; (800142c <main+0x37c>)
 800113e:	f006 fe93 	bl	8007e68 <TFT_Init>
    /* USER CODE BEGIN 3 */




	if( (HAL_GetTick()-MainTick)>300)
 8001142:	f002 f89b 	bl	800327c <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	4bb9      	ldr	r3, [pc, #740]	; (8001430 <main+0x380>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001152:	d9f6      	bls.n	8001142 <main+0x92>
	{
		if(frame==0)
 8001154:	4bb7      	ldr	r3, [pc, #732]	; (8001434 <main+0x384>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	f040 81e0 	bne.w	800151e <main+0x46e>
		{
			Zmo[0]=VoltageReal/CurrentReal;
 800115e:	4bb6      	ldr	r3, [pc, #728]	; (8001438 <main+0x388>)
 8001160:	edd3 6a00 	vldr	s13, [r3]
 8001164:	4bb5      	ldr	r3, [pc, #724]	; (800143c <main+0x38c>)
 8001166:	ed93 7a00 	vldr	s14, [r3]
 800116a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800116e:	4bb4      	ldr	r3, [pc, #720]	; (8001440 <main+0x390>)
 8001170:	edc3 7a00 	vstr	s15, [r3]
			Zmo[1]=PHD[10];
 8001174:	4bb3      	ldr	r3, [pc, #716]	; (8001444 <main+0x394>)
 8001176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001178:	4ab1      	ldr	r2, [pc, #708]	; (8001440 <main+0x390>)
 800117a:	6053      	str	r3, [r2, #4]
			arm_cmplx_mag_f32(Zmo,&Zmo[2],1);
 800117c:	2201      	movs	r2, #1
 800117e:	49b2      	ldr	r1, [pc, #712]	; (8001448 <main+0x398>)
 8001180:	48af      	ldr	r0, [pc, #700]	; (8001440 <main+0x390>)
 8001182:	f007 fe9f 	bl	8008ec4 <arm_cmplx_mag_f32>

			sprintf(show0,"Vrms:%.3f   ",VoltageReal);
 8001186:	4bac      	ldr	r3, [pc, #688]	; (8001438 <main+0x388>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fa3c 	bl	8000608 <__aeabi_f2d>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	49ad      	ldr	r1, [pc, #692]	; (800144c <main+0x39c>)
 8001196:	48ae      	ldr	r0, [pc, #696]	; (8001450 <main+0x3a0>)
 8001198:	f009 f9ce 	bl	800a538 <siprintf>
			sprintf(show1,"Crms:%.3f   ",CurrentReal);
 800119c:	4ba7      	ldr	r3, [pc, #668]	; (800143c <main+0x38c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fa31 	bl	8000608 <__aeabi_f2d>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	49aa      	ldr	r1, [pc, #680]	; (8001454 <main+0x3a4>)
 80011ac:	48aa      	ldr	r0, [pc, #680]	; (8001458 <main+0x3a8>)
 80011ae:	f009 f9c3 	bl	800a538 <siprintf>
			sprintf(show2,"Z-R:%.4f    ",Zmo[0]*cos(Zmo[1]*180/PI-0.1));
 80011b2:	4ba3      	ldr	r3, [pc, #652]	; (8001440 <main+0x390>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fa26 	bl	8000608 <__aeabi_f2d>
 80011bc:	4604      	mov	r4, r0
 80011be:	460d      	mov	r5, r1
 80011c0:	4b9f      	ldr	r3, [pc, #636]	; (8001440 <main+0x390>)
 80011c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80011c6:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800145c <main+0x3ac>
 80011ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ce:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8001460 <main+0x3b0>
 80011d2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80011d6:	ee16 0a90 	vmov	r0, s13
 80011da:	f7ff fa15 	bl	8000608 <__aeabi_f2d>
 80011de:	a386      	add	r3, pc, #536	; (adr r3, 80013f8 <main+0x348>)
 80011e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e4:	f7ff f8b0 	bl	8000348 <__aeabi_dsub>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	ec43 2b17 	vmov	d7, r2, r3
 80011f0:	eeb0 0a47 	vmov.f32	s0, s14
 80011f4:	eef0 0a67 	vmov.f32	s1, s15
 80011f8:	f00c ff36 	bl	800e068 <cos>
 80011fc:	ec53 2b10 	vmov	r2, r3, d0
 8001200:	4620      	mov	r0, r4
 8001202:	4629      	mov	r1, r5
 8001204:	f7ff fa58 	bl	80006b8 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4995      	ldr	r1, [pc, #596]	; (8001464 <main+0x3b4>)
 800120e:	4896      	ldr	r0, [pc, #600]	; (8001468 <main+0x3b8>)
 8001210:	f009 f992 	bl	800a538 <siprintf>
			sprintf(show3,"Z-X:%.4f    ",Zmo[0]*sin(Zmo[1]*180/PI-0.1));
 8001214:	4b8a      	ldr	r3, [pc, #552]	; (8001440 <main+0x390>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f9f5 	bl	8000608 <__aeabi_f2d>
 800121e:	4604      	mov	r4, r0
 8001220:	460d      	mov	r5, r1
 8001222:	4b87      	ldr	r3, [pc, #540]	; (8001440 <main+0x390>)
 8001224:	edd3 7a01 	vldr	s15, [r3, #4]
 8001228:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800145c <main+0x3ac>
 800122c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001230:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8001460 <main+0x3b0>
 8001234:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001238:	ee16 0a90 	vmov	r0, s13
 800123c:	f7ff f9e4 	bl	8000608 <__aeabi_f2d>
 8001240:	a36d      	add	r3, pc, #436	; (adr r3, 80013f8 <main+0x348>)
 8001242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001246:	f7ff f87f 	bl	8000348 <__aeabi_dsub>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	ec43 2b17 	vmov	d7, r2, r3
 8001252:	eeb0 0a47 	vmov.f32	s0, s14
 8001256:	eef0 0a67 	vmov.f32	s1, s15
 800125a:	f00c ff55 	bl	800e108 <sin>
 800125e:	ec53 2b10 	vmov	r2, r3, d0
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff fa27 	bl	80006b8 <__aeabi_dmul>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	497f      	ldr	r1, [pc, #508]	; (800146c <main+0x3bc>)
 8001270:	487f      	ldr	r0, [pc, #508]	; (8001470 <main+0x3c0>)
 8001272:	f009 f961 	bl	800a538 <siprintf>
			sprintf(show4,"[Z]:%.4f    ",Zmo[2]);
 8001276:	4b72      	ldr	r3, [pc, #456]	; (8001440 <main+0x390>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f9c4 	bl	8000608 <__aeabi_f2d>
 8001280:	4602      	mov	r2, r0
 8001282:	460b      	mov	r3, r1
 8001284:	497b      	ldr	r1, [pc, #492]	; (8001474 <main+0x3c4>)
 8001286:	487c      	ldr	r0, [pc, #496]	; (8001478 <main+0x3c8>)
 8001288:	f009 f956 	bl	800a538 <siprintf>
			sprintf(show5,"ARG:%.2f    ",Zmo[1]*180/PI-0.1);
 800128c:	4b6c      	ldr	r3, [pc, #432]	; (8001440 <main+0x390>)
 800128e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001292:	ed9f 7a72 	vldr	s14, [pc, #456]	; 800145c <main+0x3ac>
 8001296:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129a:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001460 <main+0x3b0>
 800129e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80012a2:	ee16 0a90 	vmov	r0, s13
 80012a6:	f7ff f9af 	bl	8000608 <__aeabi_f2d>
 80012aa:	a353      	add	r3, pc, #332	; (adr r3, 80013f8 <main+0x348>)
 80012ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b0:	f7ff f84a 	bl	8000348 <__aeabi_dsub>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4970      	ldr	r1, [pc, #448]	; (800147c <main+0x3cc>)
 80012ba:	4871      	ldr	r0, [pc, #452]	; (8001480 <main+0x3d0>)
 80012bc:	f009 f93c 	bl	800a538 <siprintf>

			LCD_write_String(0,0,show0);
 80012c0:	4a63      	ldr	r2, [pc, #396]	; (8001450 <main+0x3a0>)
 80012c2:	2100      	movs	r1, #0
 80012c4:	2000      	movs	r0, #0
 80012c6:	f001 ff53 	bl	8003170 <LCD_write_String>
			LCD_write_String(0,1,show1);
 80012ca:	4a63      	ldr	r2, [pc, #396]	; (8001458 <main+0x3a8>)
 80012cc:	2101      	movs	r1, #1
 80012ce:	2000      	movs	r0, #0
 80012d0:	f001 ff4e 	bl	8003170 <LCD_write_String>
			LCD_write_String(0,2,show2);
 80012d4:	4a64      	ldr	r2, [pc, #400]	; (8001468 <main+0x3b8>)
 80012d6:	2102      	movs	r1, #2
 80012d8:	2000      	movs	r0, #0
 80012da:	f001 ff49 	bl	8003170 <LCD_write_String>
			LCD_write_String(0,3,show3);
 80012de:	4a64      	ldr	r2, [pc, #400]	; (8001470 <main+0x3c0>)
 80012e0:	2103      	movs	r1, #3
 80012e2:	2000      	movs	r0, #0
 80012e4:	f001 ff44 	bl	8003170 <LCD_write_String>
			LCD_write_String(0,4,show4);
 80012e8:	4a63      	ldr	r2, [pc, #396]	; (8001478 <main+0x3c8>)
 80012ea:	2104      	movs	r1, #4
 80012ec:	2000      	movs	r0, #0
 80012ee:	f001 ff3f 	bl	8003170 <LCD_write_String>
			LCD_write_String(0,5,show5);
 80012f2:	4a63      	ldr	r2, [pc, #396]	; (8001480 <main+0x3d0>)
 80012f4:	2105      	movs	r1, #5
 80012f6:	2000      	movs	r0, #0
 80012f8:	f001 ff3a 	bl	8003170 <LCD_write_String>


			sprintf(TFTshow1,"%.3f%+.3fj",Zmo[0]*cos(Zmo[1]*180/PI-0.1),Zmo[0]*sin(Zmo[1]*180/PI-0.1));
 80012fc:	4b50      	ldr	r3, [pc, #320]	; (8001440 <main+0x390>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f981 	bl	8000608 <__aeabi_f2d>
 8001306:	4604      	mov	r4, r0
 8001308:	460d      	mov	r5, r1
 800130a:	4b4d      	ldr	r3, [pc, #308]	; (8001440 <main+0x390>)
 800130c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001310:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800145c <main+0x3ac>
 8001314:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001318:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8001460 <main+0x3b0>
 800131c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001320:	ee16 0a90 	vmov	r0, s13
 8001324:	f7ff f970 	bl	8000608 <__aeabi_f2d>
 8001328:	a333      	add	r3, pc, #204	; (adr r3, 80013f8 <main+0x348>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	f7ff f80b 	bl	8000348 <__aeabi_dsub>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	ec43 2b17 	vmov	d7, r2, r3
 800133a:	eeb0 0a47 	vmov.f32	s0, s14
 800133e:	eef0 0a67 	vmov.f32	s1, s15
 8001342:	f00c fe91 	bl	800e068 <cos>
 8001346:	ec53 2b10 	vmov	r2, r3, d0
 800134a:	4620      	mov	r0, r4
 800134c:	4629      	mov	r1, r5
 800134e:	f7ff f9b3 	bl	80006b8 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4690      	mov	r8, r2
 8001358:	4699      	mov	r9, r3
 800135a:	4b39      	ldr	r3, [pc, #228]	; (8001440 <main+0x390>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f952 	bl	8000608 <__aeabi_f2d>
 8001364:	4604      	mov	r4, r0
 8001366:	460d      	mov	r5, r1
 8001368:	4b35      	ldr	r3, [pc, #212]	; (8001440 <main+0x390>)
 800136a:	edd3 7a01 	vldr	s15, [r3, #4]
 800136e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800145c <main+0x3ac>
 8001372:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001376:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001460 <main+0x3b0>
 800137a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800137e:	ee16 0a90 	vmov	r0, s13
 8001382:	f7ff f941 	bl	8000608 <__aeabi_f2d>
 8001386:	a31c      	add	r3, pc, #112	; (adr r3, 80013f8 <main+0x348>)
 8001388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138c:	f7fe ffdc 	bl	8000348 <__aeabi_dsub>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	ec43 2b17 	vmov	d7, r2, r3
 8001398:	eeb0 0a47 	vmov.f32	s0, s14
 800139c:	eef0 0a67 	vmov.f32	s1, s15
 80013a0:	f00c feb2 	bl	800e108 <sin>
 80013a4:	ec53 2b10 	vmov	r2, r3, d0
 80013a8:	4620      	mov	r0, r4
 80013aa:	4629      	mov	r1, r5
 80013ac:	f7ff f984 	bl	80006b8 <__aeabi_dmul>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	e9cd 2300 	strd	r2, r3, [sp]
 80013b8:	4642      	mov	r2, r8
 80013ba:	464b      	mov	r3, r9
 80013bc:	4931      	ldr	r1, [pc, #196]	; (8001484 <main+0x3d4>)
 80013be:	4832      	ldr	r0, [pc, #200]	; (8001488 <main+0x3d8>)
 80013c0:	f009 f8ba 	bl	800a538 <siprintf>
			SetTextValue(0,13,TFTshow1);
 80013c4:	4a30      	ldr	r2, [pc, #192]	; (8001488 <main+0x3d8>)
 80013c6:	210d      	movs	r1, #13
 80013c8:	2000      	movs	r0, #0
 80013ca:	f006 fd11 	bl	8007df0 <SetTextValue>
			SetTextValueFloat(0, 4, VoltageReal);
 80013ce:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <main+0x388>)
 80013d0:	edd3 7a00 	vldr	s15, [r3]
 80013d4:	eeb0 0a67 	vmov.f32	s0, s15
 80013d8:	2104      	movs	r1, #4
 80013da:	2000      	movs	r0, #0
 80013dc:	f006 fcac 	bl	8007d38 <SetTextValueFloat>
			SetTextValueFloat(0, 6, CurrentReal);
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <main+0x38c>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ea:	2106      	movs	r1, #6
 80013ec:	2000      	movs	r0, #0
 80013ee:	f006 fca3 	bl	8007d38 <SetTextValueFloat>
 80013f2:	e04b      	b.n	800148c <main+0x3dc>
 80013f4:	f3af 8000 	nop.w
 80013f8:	9999999a 	.word	0x9999999a
 80013fc:	3fb99999 	.word	0x3fb99999
 8001400:	10000000 	.word	0x10000000
 8001404:	20006060 	.word	0x20006060
 8001408:	42f00000 	.word	0x42f00000
 800140c:	20006084 	.word	0x20006084
 8001410:	200016b4 	.word	0x200016b4
 8001414:	20000274 	.word	0x20000274
 8001418:	200013ec 	.word	0x200013ec
 800141c:	2000169c 	.word	0x2000169c
 8001420:	20001434 	.word	0x20001434
 8001424:	20000008 	.word	0x20000008
 8001428:	200078e0 	.word	0x200078e0
 800142c:	20003fa8 	.word	0x20003fa8
 8001430:	20003fa4 	.word	0x20003fa4
 8001434:	2000027b 	.word	0x2000027b
 8001438:	200013e8 	.word	0x200013e8
 800143c:	200013bc 	.word	0x200013bc
 8001440:	20004028 	.word	0x20004028
 8001444:	200078ec 	.word	0x200078ec
 8001448:	20004030 	.word	0x20004030
 800144c:	0800f6c8 	.word	0x0800f6c8
 8001450:	20007918 	.word	0x20007918
 8001454:	0800f6d8 	.word	0x0800f6d8
 8001458:	200013c0 	.word	0x200013c0
 800145c:	43340000 	.word	0x43340000
 8001460:	40490fdb 	.word	0x40490fdb
 8001464:	0800f6e8 	.word	0x0800f6e8
 8001468:	2000031c 	.word	0x2000031c
 800146c:	0800f6f8 	.word	0x0800f6f8
 8001470:	200013d4 	.word	0x200013d4
 8001474:	0800f708 	.word	0x0800f708
 8001478:	2000604c 	.word	0x2000604c
 800147c:	0800f718 	.word	0x0800f718
 8001480:	200078cc 	.word	0x200078cc
 8001484:	0800f728 	.word	0x0800f728
 8001488:	20004034 	.word	0x20004034
			SetTextValueFloat(0, 5, Zmo[1]*180/PI-0.1);
 800148c:	4b5e      	ldr	r3, [pc, #376]	; (8001608 <main+0x558>)
 800148e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001492:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800160c <main+0x55c>
 8001496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800149a:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8001610 <main+0x560>
 800149e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014a2:	ee16 0a90 	vmov	r0, s13
 80014a6:	f7ff f8af 	bl	8000608 <__aeabi_f2d>
 80014aa:	a351      	add	r3, pc, #324	; (adr r3, 80015f0 <main+0x540>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7fe ff4a 	bl	8000348 <__aeabi_dsub>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff fbf4 	bl	8000ca8 <__aeabi_d2f>
 80014c0:	4603      	mov	r3, r0
 80014c2:	ee00 3a10 	vmov	s0, r3
 80014c6:	2105      	movs	r1, #5
 80014c8:	2000      	movs	r0, #0
 80014ca:	f006 fc35 	bl	8007d38 <SetTextValueFloat>
			SetTextValueFloat(0, 12, 80000000.0/(Freq*0.99995));
 80014ce:	4b51      	ldr	r3, [pc, #324]	; (8001614 <main+0x564>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f876 	bl	80005c4 <__aeabi_ui2d>
 80014d8:	a347      	add	r3, pc, #284	; (adr r3, 80015f8 <main+0x548>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7ff f8eb 	bl	80006b8 <__aeabi_dmul>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	a146      	add	r1, pc, #280	; (adr r1, 8001600 <main+0x550>)
 80014e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014ec:	f7ff fa0e 	bl	800090c <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4610      	mov	r0, r2
 80014f6:	4619      	mov	r1, r3
 80014f8:	f7ff fbd6 	bl	8000ca8 <__aeabi_d2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	ee00 3a10 	vmov	s0, r3
 8001502:	210c      	movs	r1, #12
 8001504:	2000      	movs	r0, #0
 8001506:	f006 fc17 	bl	8007d38 <SetTextValueFloat>
			SetTextValueFloat(0, 14, Zmo[2]);
 800150a:	4b3f      	ldr	r3, [pc, #252]	; (8001608 <main+0x558>)
 800150c:	edd3 7a02 	vldr	s15, [r3, #8]
 8001510:	eeb0 0a67 	vmov.f32	s0, s15
 8001514:	210e      	movs	r1, #14
 8001516:	2000      	movs	r0, #0
 8001518:	f006 fc0e 	bl	8007d38 <SetTextValueFloat>
 800151c:	e061      	b.n	80015e2 <main+0x532>
		}
		else
		{
			sprintf(show0,"Cset:%.2f   ",CurrentSet);
 800151e:	4b3e      	ldr	r3, [pc, #248]	; (8001618 <main+0x568>)
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	493d      	ldr	r1, [pc, #244]	; (800161c <main+0x56c>)
 8001526:	483e      	ldr	r0, [pc, #248]	; (8001620 <main+0x570>)
 8001528:	f009 f806 	bl	800a538 <siprintf>
			sprintf(show1,"PWM :%.2f   ",PWM*1.0/3200.0);
 800152c:	4b3d      	ldr	r3, [pc, #244]	; (8001624 <main+0x574>)
 800152e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f856 	bl	80005e4 <__aeabi_i2d>
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <main+0x578>)
 800153e:	f7ff f9e5 	bl	800090c <__aeabi_ddiv>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4939      	ldr	r1, [pc, #228]	; (800162c <main+0x57c>)
 8001548:	4839      	ldr	r0, [pc, #228]	; (8001630 <main+0x580>)
 800154a:	f008 fff5 	bl	800a538 <siprintf>
			if(Mode==0)
 800154e:	4b39      	ldr	r3, [pc, #228]	; (8001634 <main+0x584>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d104      	bne.n	8001560 <main+0x4b0>
			{
				sprintf(show2,"Mode: AUTO     ");
 8001556:	4938      	ldr	r1, [pc, #224]	; (8001638 <main+0x588>)
 8001558:	4838      	ldr	r0, [pc, #224]	; (800163c <main+0x58c>)
 800155a:	f008 ffed 	bl	800a538 <siprintf>
 800155e:	e003      	b.n	8001568 <main+0x4b8>
			}
			else
			{
				sprintf(show2,"Mode: MANUL    ");
 8001560:	4937      	ldr	r1, [pc, #220]	; (8001640 <main+0x590>)
 8001562:	4836      	ldr	r0, [pc, #216]	; (800163c <main+0x58c>)
 8001564:	f008 ffe8 	bl	800a538 <siprintf>
			}
			sprintf(show3,"Freq:%.4f     ",80000000.0/(Freq*0.99995));
 8001568:	4b2a      	ldr	r3, [pc, #168]	; (8001614 <main+0x564>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff f829 	bl	80005c4 <__aeabi_ui2d>
 8001572:	a321      	add	r3, pc, #132	; (adr r3, 80015f8 <main+0x548>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7ff f89e 	bl	80006b8 <__aeabi_dmul>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	a11f      	add	r1, pc, #124	; (adr r1, 8001600 <main+0x550>)
 8001582:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001586:	f7ff f9c1 	bl	800090c <__aeabi_ddiv>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	492d      	ldr	r1, [pc, #180]	; (8001644 <main+0x594>)
 8001590:	482d      	ldr	r0, [pc, #180]	; (8001648 <main+0x598>)
 8001592:	f008 ffd1 	bl	800a538 <siprintf>
			sprintf(show4,"              ");
 8001596:	492d      	ldr	r1, [pc, #180]	; (800164c <main+0x59c>)
 8001598:	482d      	ldr	r0, [pc, #180]	; (8001650 <main+0x5a0>)
 800159a:	f008 ffcd 	bl	800a538 <siprintf>
			sprintf(show5,"              ");
 800159e:	492b      	ldr	r1, [pc, #172]	; (800164c <main+0x59c>)
 80015a0:	482c      	ldr	r0, [pc, #176]	; (8001654 <main+0x5a4>)
 80015a2:	f008 ffc9 	bl	800a538 <siprintf>

			LCD_write_String(0,0,show0);
 80015a6:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <main+0x570>)
 80015a8:	2100      	movs	r1, #0
 80015aa:	2000      	movs	r0, #0
 80015ac:	f001 fde0 	bl	8003170 <LCD_write_String>
			LCD_write_String(0,1,show1);
 80015b0:	4a1f      	ldr	r2, [pc, #124]	; (8001630 <main+0x580>)
 80015b2:	2101      	movs	r1, #1
 80015b4:	2000      	movs	r0, #0
 80015b6:	f001 fddb 	bl	8003170 <LCD_write_String>
			LCD_write_String(0,2,show2);
 80015ba:	4a20      	ldr	r2, [pc, #128]	; (800163c <main+0x58c>)
 80015bc:	2102      	movs	r1, #2
 80015be:	2000      	movs	r0, #0
 80015c0:	f001 fdd6 	bl	8003170 <LCD_write_String>
			LCD_write_String(0,3,show3);
 80015c4:	4a20      	ldr	r2, [pc, #128]	; (8001648 <main+0x598>)
 80015c6:	2103      	movs	r1, #3
 80015c8:	2000      	movs	r0, #0
 80015ca:	f001 fdd1 	bl	8003170 <LCD_write_String>
			LCD_write_String(0,4,show4);
 80015ce:	4a20      	ldr	r2, [pc, #128]	; (8001650 <main+0x5a0>)
 80015d0:	2104      	movs	r1, #4
 80015d2:	2000      	movs	r0, #0
 80015d4:	f001 fdcc 	bl	8003170 <LCD_write_String>
			LCD_write_String(0,5,show5);
 80015d8:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <main+0x5a4>)
 80015da:	2105      	movs	r1, #5
 80015dc:	2000      	movs	r0, #0
 80015de:	f001 fdc7 	bl	8003170 <LCD_write_String>
		}

		MainTick=HAL_GetTick();
 80015e2:	f001 fe4b 	bl	800327c <HAL_GetTick>
 80015e6:	4603      	mov	r3, r0
 80015e8:	4a1b      	ldr	r2, [pc, #108]	; (8001658 <main+0x5a8>)
 80015ea:	6013      	str	r3, [r2, #0]
	if( (HAL_GetTick()-MainTick)>300)
 80015ec:	e5a9      	b.n	8001142 <main+0x92>
 80015ee:	bf00      	nop
 80015f0:	9999999a 	.word	0x9999999a
 80015f4:	3fb99999 	.word	0x3fb99999
 80015f8:	2474538f 	.word	0x2474538f
 80015fc:	3fefff97 	.word	0x3fefff97
 8001600:	00000000 	.word	0x00000000
 8001604:	419312d0 	.word	0x419312d0
 8001608:	20004028 	.word	0x20004028
 800160c:	43340000 	.word	0x43340000
 8001610:	40490fdb 	.word	0x40490fdb
 8001614:	20000274 	.word	0x20000274
 8001618:	20000000 	.word	0x20000000
 800161c:	0800f734 	.word	0x0800f734
 8001620:	20007918 	.word	0x20007918
 8001624:	20000278 	.word	0x20000278
 8001628:	40a90000 	.word	0x40a90000
 800162c:	0800f744 	.word	0x0800f744
 8001630:	200013c0 	.word	0x200013c0
 8001634:	2000027a 	.word	0x2000027a
 8001638:	0800f754 	.word	0x0800f754
 800163c:	2000031c 	.word	0x2000031c
 8001640:	0800f764 	.word	0x0800f764
 8001644:	0800f774 	.word	0x0800f774
 8001648:	200013d4 	.word	0x200013d4
 800164c:	0800f784 	.word	0x0800f784
 8001650:	2000604c 	.word	0x2000604c
 8001654:	200078cc 	.word	0x200078cc
 8001658:	20003fa4 	.word	0x20003fa4

0800165c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b094      	sub	sp, #80	; 0x50
 8001660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001662:	f107 0320 	add.w	r3, r7, #32
 8001666:	2230      	movs	r2, #48	; 0x30
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f008 f8a8 	bl	80097c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001670:	f107 030c 	add.w	r3, r7, #12
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	4b28      	ldr	r3, [pc, #160]	; (8001728 <SystemClock_Config+0xcc>)
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <SystemClock_Config+0xcc>)
 800168a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800168e:	6413      	str	r3, [r2, #64]	; 0x40
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <SystemClock_Config+0xcc>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001698:	60bb      	str	r3, [r7, #8]
 800169a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800169c:	2300      	movs	r3, #0
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	4b22      	ldr	r3, [pc, #136]	; (800172c <SystemClock_Config+0xd0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a21      	ldr	r2, [pc, #132]	; (800172c <SystemClock_Config+0xd0>)
 80016a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	4b1f      	ldr	r3, [pc, #124]	; (800172c <SystemClock_Config+0xd0>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016b8:	2301      	movs	r3, #1
 80016ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016c2:	2302      	movs	r3, #2
 80016c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016cc:	2308      	movs	r3, #8
 80016ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 320;
 80016d0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016d6:	2302      	movs	r3, #2
 80016d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016da:	2304      	movs	r3, #4
 80016dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016de:	f107 0320 	add.w	r3, r7, #32
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fa38 	bl	8004b58 <HAL_RCC_OscConfig>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80016ee:	f000 fb99 	bl	8001e24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016f2:	230f      	movs	r3, #15
 80016f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016f6:	2302      	movs	r3, #2
 80016f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001702:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001708:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	2105      	movs	r1, #5
 8001710:	4618      	mov	r0, r3
 8001712:	f003 fc99 	bl	8005048 <HAL_RCC_ClockConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800171c:	f000 fb82 	bl	8001e24 <Error_Handler>
  }
}
 8001720:	bf00      	nop
 8001722:	3750      	adds	r7, #80	; 0x50
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}
 8001728:	40023800 	.word	0x40023800
 800172c:	40007000 	.word	0x40007000

08001730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001736:	463b      	mov	r3, r7
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001742:	4b21      	ldr	r3, [pc, #132]	; (80017c8 <MX_ADC1_Init+0x98>)
 8001744:	4a21      	ldr	r2, [pc, #132]	; (80017cc <MX_ADC1_Init+0x9c>)
 8001746:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <MX_ADC1_Init+0x98>)
 800174a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800174e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001750:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_ADC1_Init+0x98>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001756:	4b1c      	ldr	r3, [pc, #112]	; (80017c8 <MX_ADC1_Init+0x98>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800175c:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_ADC1_Init+0x98>)
 800175e:	2200      	movs	r2, #0
 8001760:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <MX_ADC1_Init+0x98>)
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_ADC1_Init+0x98>)
 800176c:	2200      	movs	r2, #0
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <MX_ADC1_Init+0x98>)
 8001772:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <MX_ADC1_Init+0xa0>)
 8001774:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_ADC1_Init+0x98>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_ADC1_Init+0x98>)
 800177e:	2201      	movs	r2, #1
 8001780:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001782:	4b11      	ldr	r3, [pc, #68]	; (80017c8 <MX_ADC1_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_ADC1_Init+0x98>)
 800178c:	2201      	movs	r2, #1
 800178e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001790:	480d      	ldr	r0, [pc, #52]	; (80017c8 <MX_ADC1_Init+0x98>)
 8001792:	f001 fda3 	bl	80032dc <HAL_ADC_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800179c:	f000 fb42 	bl	8001e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80017a0:	230b      	movs	r3, #11
 80017a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017a4:	2301      	movs	r3, #1
 80017a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80017a8:	2301      	movs	r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_ADC1_Init+0x98>)
 80017b2:	f002 f8a1 	bl	80038f8 <HAL_ADC_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017bc:	f000 fb32 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	200016fc 	.word	0x200016fc
 80017cc:	40012000 	.word	0x40012000
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017da:	463b      	mov	r3, r7
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <MX_ADC2_Init+0x98>)
 80017e8:	4a21      	ldr	r2, [pc, #132]	; (8001870 <MX_ADC2_Init+0x9c>)
 80017ea:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80017ec:	4b1f      	ldr	r3, [pc, #124]	; (800186c <MX_ADC2_Init+0x98>)
 80017ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017f2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80017f4:	4b1d      	ldr	r3, [pc, #116]	; (800186c <MX_ADC2_Init+0x98>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <MX_ADC2_Init+0x98>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001800:	4b1a      	ldr	r3, [pc, #104]	; (800186c <MX_ADC2_Init+0x98>)
 8001802:	2200      	movs	r2, #0
 8001804:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <MX_ADC2_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <MX_ADC2_Init+0x98>)
 8001810:	2200      	movs	r2, #0
 8001812:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <MX_ADC2_Init+0x98>)
 8001816:	4a17      	ldr	r2, [pc, #92]	; (8001874 <MX_ADC2_Init+0xa0>)
 8001818:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800181a:	4b14      	ldr	r3, [pc, #80]	; (800186c <MX_ADC2_Init+0x98>)
 800181c:	2200      	movs	r2, #0
 800181e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <MX_ADC2_Init+0x98>)
 8001822:	2201      	movs	r2, #1
 8001824:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <MX_ADC2_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <MX_ADC2_Init+0x98>)
 8001830:	2201      	movs	r2, #1
 8001832:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001834:	480d      	ldr	r0, [pc, #52]	; (800186c <MX_ADC2_Init+0x98>)
 8001836:	f001 fd51 	bl	80032dc <HAL_ADC_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001840:	f000 faf0 	bl	8001e24 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001844:	230a      	movs	r3, #10
 8001846:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001848:	2301      	movs	r3, #1
 800184a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800184c:	2301      	movs	r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001850:	463b      	mov	r3, r7
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	; (800186c <MX_ADC2_Init+0x98>)
 8001856:	f002 f84f 	bl	80038f8 <HAL_ADC_ConfigChannel>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001860:	f000 fae0 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	20001374 	.word	0x20001374
 8001870:	40012100 	.word	0x40012100
 8001874:	0f000001 	.word	0x0f000001

08001878 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187e:	f107 0308 	add.w	r3, r7, #8
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800188c:	463b      	mov	r3, r7
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001894:	4b1d      	ldr	r3, [pc, #116]	; (800190c <MX_TIM2_Init+0x94>)
 8001896:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800189a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 25-1;
 800189c:	4b1b      	ldr	r3, [pc, #108]	; (800190c <MX_TIM2_Init+0x94>)
 800189e:	2218      	movs	r2, #24
 80018a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a2:	4b1a      	ldr	r3, [pc, #104]	; (800190c <MX_TIM2_Init+0x94>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 250-1;
 80018a8:	4b18      	ldr	r3, [pc, #96]	; (800190c <MX_TIM2_Init+0x94>)
 80018aa:	22f9      	movs	r2, #249	; 0xf9
 80018ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <MX_TIM2_Init+0x94>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <MX_TIM2_Init+0x94>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018ba:	4814      	ldr	r0, [pc, #80]	; (800190c <MX_TIM2_Init+0x94>)
 80018bc:	f003 fdc0 	bl	8005440 <HAL_TIM_Base_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80018c6:	f000 faad 	bl	8001e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	4619      	mov	r1, r3
 80018d6:	480d      	ldr	r0, [pc, #52]	; (800190c <MX_TIM2_Init+0x94>)
 80018d8:	f004 fc36 	bl	8006148 <HAL_TIM_ConfigClockSource>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80018e2:	f000 fa9f 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ee:	463b      	mov	r3, r7
 80018f0:	4619      	mov	r1, r3
 80018f2:	4806      	ldr	r0, [pc, #24]	; (800190c <MX_TIM2_Init+0x94>)
 80018f4:	f005 fb1e 	bl	8006f34 <HAL_TIMEx_MasterConfigSynchronization>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80018fe:	f000 fa91 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	3718      	adds	r7, #24
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20006084 	.word	0x20006084

08001910 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08e      	sub	sp, #56	; 0x38
 8001914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001916:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800191a:	2200      	movs	r2, #0
 800191c:	601a      	str	r2, [r3, #0]
 800191e:	605a      	str	r2, [r3, #4]
 8001920:	609a      	str	r2, [r3, #8]
 8001922:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001924:	f107 0320 	add.w	r3, r7, #32
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	615a      	str	r2, [r3, #20]
 800193e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001940:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <MX_TIM3_Init+0xe4>)
 8001942:	4a2d      	ldr	r2, [pc, #180]	; (80019f8 <MX_TIM3_Init+0xe8>)
 8001944:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1-1;
 8001946:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <MX_TIM3_Init+0xe4>)
 8001948:	2200      	movs	r2, #0
 800194a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194c:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <MX_TIM3_Init+0xe4>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200-1;
 8001952:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <MX_TIM3_Init+0xe4>)
 8001954:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001958:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800195a:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <MX_TIM3_Init+0xe4>)
 800195c:	2200      	movs	r2, #0
 800195e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001960:	4b24      	ldr	r3, [pc, #144]	; (80019f4 <MX_TIM3_Init+0xe4>)
 8001962:	2200      	movs	r2, #0
 8001964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001966:	4823      	ldr	r0, [pc, #140]	; (80019f4 <MX_TIM3_Init+0xe4>)
 8001968:	f003 fd6a 	bl	8005440 <HAL_TIM_Base_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001972:	f000 fa57 	bl	8001e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800197a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800197c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001980:	4619      	mov	r1, r3
 8001982:	481c      	ldr	r0, [pc, #112]	; (80019f4 <MX_TIM3_Init+0xe4>)
 8001984:	f004 fbe0 	bl	8006148 <HAL_TIM_ConfigClockSource>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800198e:	f000 fa49 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001992:	4818      	ldr	r0, [pc, #96]	; (80019f4 <MX_TIM3_Init+0xe4>)
 8001994:	f003 fe14 	bl	80055c0 <HAL_TIM_PWM_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800199e:	f000 fa41 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019aa:	f107 0320 	add.w	r3, r7, #32
 80019ae:	4619      	mov	r1, r3
 80019b0:	4810      	ldr	r0, [pc, #64]	; (80019f4 <MX_TIM3_Init+0xe4>)
 80019b2:	f005 fabf 	bl	8006f34 <HAL_TIMEx_MasterConfigSynchronization>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80019bc:	f000 fa32 	bl	8001e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019c0:	2360      	movs	r3, #96	; 0x60
 80019c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1-1;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019d0:	1d3b      	adds	r3, r7, #4
 80019d2:	2200      	movs	r2, #0
 80019d4:	4619      	mov	r1, r3
 80019d6:	4807      	ldr	r0, [pc, #28]	; (80019f4 <MX_TIM3_Init+0xe4>)
 80019d8:	f004 faf8 	bl	8005fcc <HAL_TIM_PWM_ConfigChannel>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80019e2:	f000 fa1f 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80019e6:	4803      	ldr	r0, [pc, #12]	; (80019f4 <MX_TIM3_Init+0xe4>)
 80019e8:	f000 fb84 	bl	80020f4 <HAL_TIM_MspPostInit>

}
 80019ec:	bf00      	nop
 80019ee:	3738      	adds	r7, #56	; 0x38
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200016b4 	.word	0x200016b4
 80019f8:	40000400 	.word	0x40000400

080019fc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b090      	sub	sp, #64	; 0x40
 8001a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a02:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a10:	f107 031c 	add.w	r3, r7, #28
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <MX_TIM5_Init+0x110>)
 8001a38:	4a35      	ldr	r2, [pc, #212]	; (8001b10 <MX_TIM5_Init+0x114>)
 8001a3a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001a3c:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <MX_TIM5_Init+0x110>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a42:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <MX_TIM5_Init+0x110>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001a48:	4b30      	ldr	r3, [pc, #192]	; (8001b0c <MX_TIM5_Init+0x110>)
 8001a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a50:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <MX_TIM5_Init+0x110>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a56:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <MX_TIM5_Init+0x110>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001a5c:	482b      	ldr	r0, [pc, #172]	; (8001b0c <MX_TIM5_Init+0x110>)
 8001a5e:	f003 fcef 	bl	8005440 <HAL_TIM_Base_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001a68:	f000 f9dc 	bl	8001e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a70:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001a72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a76:	4619      	mov	r1, r3
 8001a78:	4824      	ldr	r0, [pc, #144]	; (8001b0c <MX_TIM5_Init+0x110>)
 8001a7a:	f004 fb65 	bl	8006148 <HAL_TIM_ConfigClockSource>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001a84:	f000 f9ce 	bl	8001e24 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8001a88:	4820      	ldr	r0, [pc, #128]	; (8001b0c <MX_TIM5_Init+0x110>)
 8001a8a:	f003 ff01 	bl	8005890 <HAL_TIM_IC_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001a94:	f000 f9c6 	bl	8001e24 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001a98:	2304      	movs	r3, #4
 8001a9a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001a9c:	2350      	movs	r3, #80	; 0x50
 8001a9e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	4619      	mov	r1, r3
 8001aae:	4817      	ldr	r0, [pc, #92]	; (8001b0c <MX_TIM5_Init+0x110>)
 8001ab0:	f004 fc0e 	bl	80062d0 <HAL_TIM_SlaveConfigSynchro>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM5_Init+0xc2>
  {
    Error_Handler();
 8001aba:	f000 f9b3 	bl	8001e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001ac2:	2380      	movs	r3, #128	; 0x80
 8001ac4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	480f      	ldr	r0, [pc, #60]	; (8001b0c <MX_TIM5_Init+0x110>)
 8001ace:	f005 fa31 	bl	8006f34 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM5_Init+0xe0>
  {
    Error_Handler();
 8001ad8:	f000 f9a4 	bl	8001e24 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001adc:	2300      	movs	r3, #0
 8001ade:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2200      	movs	r2, #0
 8001af0:	4619      	mov	r1, r3
 8001af2:	4806      	ldr	r0, [pc, #24]	; (8001b0c <MX_TIM5_Init+0x110>)
 8001af4:	f004 f9d6 	bl	8005ea4 <HAL_TIM_IC_ConfigChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM5_Init+0x106>
  {
    Error_Handler();
 8001afe:	f000 f991 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	3740      	adds	r7, #64	; 0x40
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200013ec 	.word	0x200013ec
 8001b10:	40000c00 	.word	0x40000c00

08001b14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b18:	4b11      	ldr	r3, [pc, #68]	; (8001b60 <MX_USART3_UART_Init+0x4c>)
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <MX_USART3_UART_Init+0x50>)
 8001b1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <MX_USART3_UART_Init+0x4c>)
 8001b20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b26:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_USART3_UART_Init+0x4c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_USART3_UART_Init+0x4c>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <MX_USART3_UART_Init+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_USART3_UART_Init+0x4c>)
 8001b3a:	220c      	movs	r2, #12
 8001b3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <MX_USART3_UART_Init+0x4c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_USART3_UART_Init+0x4c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_USART3_UART_Init+0x4c>)
 8001b4c:	f005 fa82 	bl	8007054 <HAL_UART_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b56:	f000 f965 	bl	8001e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000330 	.word	0x20000330
 8001b64:	40004800 	.word	0x40004800

08001b68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_DMA_Init+0x3c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a0b      	ldr	r2, [pc, #44]	; (8001ba4 <MX_DMA_Init+0x3c>)
 8001b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_DMA_Init+0x3c>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	200d      	movs	r0, #13
 8001b90:	f002 f9b5 	bl	8003efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b94:	200d      	movs	r0, #13
 8001b96:	f002 f9ce 	bl	8003f36 <HAL_NVIC_EnableIRQ>

}
 8001b9a:	bf00      	nop
 8001b9c:	3708      	adds	r7, #8
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800

08001ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08e      	sub	sp, #56	; 0x38
 8001bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
 8001bc2:	4b90      	ldr	r3, [pc, #576]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a8f      	ldr	r2, [pc, #572]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001bc8:	f043 0320 	orr.w	r3, r3, #32
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b8d      	ldr	r3, [pc, #564]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0320 	and.w	r3, r3, #32
 8001bd6:	623b      	str	r3, [r7, #32]
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
 8001bde:	4b89      	ldr	r3, [pc, #548]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a88      	ldr	r2, [pc, #544]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b86      	ldr	r3, [pc, #536]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf2:	61fb      	str	r3, [r7, #28]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
 8001bfa:	4b82      	ldr	r3, [pc, #520]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a81      	ldr	r2, [pc, #516]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b7f      	ldr	r3, [pc, #508]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0304 	and.w	r3, r3, #4
 8001c0e:	61bb      	str	r3, [r7, #24]
 8001c10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	4b7b      	ldr	r3, [pc, #492]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	4a7a      	ldr	r2, [pc, #488]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6313      	str	r3, [r2, #48]	; 0x30
 8001c22:	4b78      	ldr	r3, [pc, #480]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	4b74      	ldr	r3, [pc, #464]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	4a73      	ldr	r2, [pc, #460]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c38:	f043 0302 	orr.w	r3, r3, #2
 8001c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3e:	4b71      	ldr	r3, [pc, #452]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b6d      	ldr	r3, [pc, #436]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	4a6c      	ldr	r2, [pc, #432]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c54:	f043 0308 	orr.w	r3, r3, #8
 8001c58:	6313      	str	r3, [r2, #48]	; 0x30
 8001c5a:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	4b66      	ldr	r3, [pc, #408]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a65      	ldr	r2, [pc, #404]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b63      	ldr	r3, [pc, #396]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]
 8001c86:	4b5f      	ldr	r3, [pc, #380]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a5e      	ldr	r2, [pc, #376]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c8c:	f043 0310 	orr.w	r3, r3, #16
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b5c      	ldr	r3, [pc, #368]	; (8001e04 <MX_GPIO_Init+0x25c>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0310 	and.w	r3, r3, #16
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED0_Pin|LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8001ca4:	4858      	ldr	r0, [pc, #352]	; (8001e08 <MX_GPIO_Init+0x260>)
 8001ca6:	f002 feff 	bl	8004aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD5110SDIN_Pin|LCD5110SCE_Pin, GPIO_PIN_RESET);
 8001caa:	2200      	movs	r2, #0
 8001cac:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001cb0:	4856      	ldr	r0, [pc, #344]	; (8001e0c <MX_GPIO_Init+0x264>)
 8001cb2:	f002 fef9 	bl	8004aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD5110SCLK_Pin|LCD5110RESET_Pin, GPIO_PIN_RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	210c      	movs	r1, #12
 8001cba:	4855      	ldr	r0, [pc, #340]	; (8001e10 <MX_GPIO_Init+0x268>)
 8001cbc:	f002 fef4 	bl	8004aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD5110DC_Pin|LCD5110GND_Pin, GPIO_PIN_RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001cc6:	4853      	ldr	r0, [pc, #332]	; (8001e14 <MX_GPIO_Init+0x26c>)
 8001cc8:	f002 feee 	bl	8004aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin, GPIO_PIN_RESET);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8001cd2:	4851      	ldr	r0, [pc, #324]	; (8001e18 <MX_GPIO_Init+0x270>)
 8001cd4:	f002 fee8 	bl	8004aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin;
 8001cd8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4845      	ldr	r0, [pc, #276]	; (8001e08 <MX_GPIO_Init+0x260>)
 8001cf2:	f002 fd3d 	bl	8004770 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD5110SDIN_Pin LCD5110SCE_Pin */
  GPIO_InitStruct.Pin = LCD5110SDIN_Pin|LCD5110SCE_Pin;
 8001cf6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d04:	2303      	movs	r3, #3
 8001d06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	483f      	ldr	r0, [pc, #252]	; (8001e0c <MX_GPIO_Init+0x264>)
 8001d10:	f002 fd2e 	bl	8004770 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD5110SCLK_Pin LCD5110RESET_Pin */
  GPIO_InitStruct.Pin = LCD5110SCLK_Pin|LCD5110RESET_Pin;
 8001d14:	230c      	movs	r3, #12
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4839      	ldr	r0, [pc, #228]	; (8001e10 <MX_GPIO_Init+0x268>)
 8001d2c:	f002 fd20 	bl	8004770 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD5110DC_Pin */
  GPIO_InitStruct.Pin = LCD5110DC_Pin;
 8001d30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d36:	2301      	movs	r3, #1
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD5110DC_GPIO_Port, &GPIO_InitStruct);
 8001d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d46:	4619      	mov	r1, r3
 8001d48:	4832      	ldr	r0, [pc, #200]	; (8001e14 <MX_GPIO_Init+0x26c>)
 8001d4a:	f002 fd11 	bl	8004770 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD5110GND_Pin */
  GPIO_InitStruct.Pin = LCD5110GND_Pin;
 8001d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d54:	2301      	movs	r3, #1
 8001d56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d58:	2302      	movs	r3, #2
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD5110GND_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d64:	4619      	mov	r1, r3
 8001d66:	482b      	ldr	r0, [pc, #172]	; (8001e14 <MX_GPIO_Init+0x26c>)
 8001d68:	f002 fd02 	bl	8004770 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW3_Pin ROW4_Pin */
  GPIO_InitStruct.Pin = ROW3_Pin|ROW4_Pin;
 8001d6c:	2330      	movs	r3, #48	; 0x30
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d70:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <MX_GPIO_Init+0x274>)
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d74:	2301      	movs	r3, #1
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4826      	ldr	r0, [pc, #152]	; (8001e18 <MX_GPIO_Init+0x270>)
 8001d80:	f002 fcf6 	bl	8004770 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL1_Pin COL2_Pin COL3_Pin COL4_Pin */
  GPIO_InitStruct.Pin = COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin;
 8001d84:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d92:	2300      	movs	r3, #0
 8001d94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	481e      	ldr	r0, [pc, #120]	; (8001e18 <MX_GPIO_Init+0x270>)
 8001d9e:	f002 fce7 	bl	8004770 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin;
 8001da2:	2303      	movs	r3, #3
 8001da4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001da6:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <MX_GPIO_Init+0x274>)
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001daa:	2301      	movs	r3, #1
 8001dac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001db2:	4619      	mov	r1, r3
 8001db4:	481a      	ldr	r0, [pc, #104]	; (8001e20 <MX_GPIO_Init+0x278>)
 8001db6:	f002 fcdb 	bl	8004770 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	2006      	movs	r0, #6
 8001dc0:	f002 f89d 	bl	8003efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001dc4:	2006      	movs	r0, #6
 8001dc6:	f002 f8b6 	bl	8003f36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	2100      	movs	r1, #0
 8001dce:	2007      	movs	r0, #7
 8001dd0:	f002 f895 	bl	8003efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001dd4:	2007      	movs	r0, #7
 8001dd6:	f002 f8ae 	bl	8003f36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001dda:	2200      	movs	r2, #0
 8001ddc:	2100      	movs	r1, #0
 8001dde:	200a      	movs	r0, #10
 8001de0:	f002 f88d 	bl	8003efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001de4:	200a      	movs	r0, #10
 8001de6:	f002 f8a6 	bl	8003f36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001dea:	2200      	movs	r2, #0
 8001dec:	2100      	movs	r1, #0
 8001dee:	2017      	movs	r0, #23
 8001df0:	f002 f885 	bl	8003efe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001df4:	2017      	movs	r0, #23
 8001df6:	f002 f89e 	bl	8003f36 <HAL_NVIC_EnableIRQ>

}
 8001dfa:	bf00      	nop
 8001dfc:	3738      	adds	r7, #56	; 0x38
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40021400 	.word	0x40021400
 8001e0c:	40020c00 	.word	0x40020c00
 8001e10:	40021800 	.word	0x40021800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	40020400 	.word	0x40020400
 8001e1c:	10210000 	.word	0x10210000
 8001e20:	40021000 	.word	0x40021000

08001e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e28:	b672      	cpsid	i
}
 8001e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e2c:	e7fe      	b.n	8001e2c <Error_Handler+0x8>
	...

08001e30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	4b10      	ldr	r3, [pc, #64]	; (8001e7c <HAL_MspInit+0x4c>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	4a0f      	ldr	r2, [pc, #60]	; (8001e7c <HAL_MspInit+0x4c>)
 8001e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e44:	6453      	str	r3, [r2, #68]	; 0x44
 8001e46:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <HAL_MspInit+0x4c>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	603b      	str	r3, [r7, #0]
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_MspInit+0x4c>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_MspInit+0x4c>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_MspInit+0x4c>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001e6e:	2005      	movs	r0, #5
 8001e70:	f002 f83a 	bl	8003ee8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e74:	bf00      	nop
 8001e76:	3708      	adds	r7, #8
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40023800 	.word	0x40023800

08001e80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08c      	sub	sp, #48	; 0x30
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 031c 	add.w	r3, r7, #28
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a36      	ldr	r2, [pc, #216]	; (8001f78 <HAL_ADC_MspInit+0xf8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d130      	bne.n	8001f04 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61bb      	str	r3, [r7, #24]
 8001ea6:	4b35      	ldr	r3, [pc, #212]	; (8001f7c <HAL_ADC_MspInit+0xfc>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a34      	ldr	r2, [pc, #208]	; (8001f7c <HAL_ADC_MspInit+0xfc>)
 8001eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <HAL_ADC_MspInit+0xfc>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	61bb      	str	r3, [r7, #24]
 8001ebc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	4b2e      	ldr	r3, [pc, #184]	; (8001f7c <HAL_ADC_MspInit+0xfc>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a2d      	ldr	r2, [pc, #180]	; (8001f7c <HAL_ADC_MspInit+0xfc>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b2b      	ldr	r3, [pc, #172]	; (8001f7c <HAL_ADC_MspInit+0xfc>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001eda:	2302      	movs	r3, #2
 8001edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ee6:	f107 031c 	add.w	r3, r7, #28
 8001eea:	4619      	mov	r1, r3
 8001eec:	4824      	ldr	r0, [pc, #144]	; (8001f80 <HAL_ADC_MspInit+0x100>)
 8001eee:	f002 fc3f 	bl	8004770 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	2012      	movs	r0, #18
 8001ef8:	f002 f801 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001efc:	2012      	movs	r0, #18
 8001efe:	f002 f81a 	bl	8003f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001f02:	e034      	b.n	8001f6e <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <HAL_ADC_MspInit+0x104>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d12f      	bne.n	8001f6e <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <HAL_ADC_MspInit+0xfc>)
 8001f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f16:	4a19      	ldr	r2, [pc, #100]	; (8001f7c <HAL_ADC_MspInit+0xfc>)
 8001f18:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f1e:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_ADC_MspInit+0xfc>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b13      	ldr	r3, [pc, #76]	; (8001f7c <HAL_ADC_MspInit+0xfc>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a12      	ldr	r2, [pc, #72]	; (8001f7c <HAL_ADC_MspInit+0xfc>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b10      	ldr	r3, [pc, #64]	; (8001f7c <HAL_ADC_MspInit+0xfc>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f46:	2301      	movs	r3, #1
 8001f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f52:	f107 031c 	add.w	r3, r7, #28
 8001f56:	4619      	mov	r1, r3
 8001f58:	4809      	ldr	r0, [pc, #36]	; (8001f80 <HAL_ADC_MspInit+0x100>)
 8001f5a:	f002 fc09 	bl	8004770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2100      	movs	r1, #0
 8001f62:	2012      	movs	r0, #18
 8001f64:	f001 ffcb 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001f68:	2012      	movs	r0, #18
 8001f6a:	f001 ffe4 	bl	8003f36 <HAL_NVIC_EnableIRQ>
}
 8001f6e:	bf00      	nop
 8001f70:	3730      	adds	r7, #48	; 0x30
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	40012000 	.word	0x40012000
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	40020800 	.word	0x40020800
 8001f84:	40012100 	.word	0x40012100

08001f88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa8:	d116      	bne.n	8001fd8 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	61bb      	str	r3, [r7, #24]
 8001fae:	4b4b      	ldr	r3, [pc, #300]	; (80020dc <HAL_TIM_Base_MspInit+0x154>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	4a4a      	ldr	r2, [pc, #296]	; (80020dc <HAL_TIM_Base_MspInit+0x154>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fba:	4b48      	ldr	r3, [pc, #288]	; (80020dc <HAL_TIM_Base_MspInit+0x154>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	69bb      	ldr	r3, [r7, #24]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2100      	movs	r1, #0
 8001fca:	201c      	movs	r0, #28
 8001fcc:	f001 ff97 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001fd0:	201c      	movs	r0, #28
 8001fd2:	f001 ffb0 	bl	8003f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001fd6:	e07d      	b.n	80020d4 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM3)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a40      	ldr	r2, [pc, #256]	; (80020e0 <HAL_TIM_Base_MspInit+0x158>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d116      	bne.n	8002010 <HAL_TIM_Base_MspInit+0x88>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	4b3d      	ldr	r3, [pc, #244]	; (80020dc <HAL_TIM_Base_MspInit+0x154>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	4a3c      	ldr	r2, [pc, #240]	; (80020dc <HAL_TIM_Base_MspInit+0x154>)
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff2:	4b3a      	ldr	r3, [pc, #232]	; (80020dc <HAL_TIM_Base_MspInit+0x154>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2101      	movs	r1, #1
 8002002:	201d      	movs	r0, #29
 8002004:	f001 ff7b 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002008:	201d      	movs	r0, #29
 800200a:	f001 ff94 	bl	8003f36 <HAL_NVIC_EnableIRQ>
}
 800200e:	e061      	b.n	80020d4 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM5)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a33      	ldr	r2, [pc, #204]	; (80020e4 <HAL_TIM_Base_MspInit+0x15c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d15c      	bne.n	80020d4 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	4b2f      	ldr	r3, [pc, #188]	; (80020dc <HAL_TIM_Base_MspInit+0x154>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a2e      	ldr	r2, [pc, #184]	; (80020dc <HAL_TIM_Base_MspInit+0x154>)
 8002024:	f043 0308 	orr.w	r3, r3, #8
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
 800202a:	4b2c      	ldr	r3, [pc, #176]	; (80020dc <HAL_TIM_Base_MspInit+0x154>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b28      	ldr	r3, [pc, #160]	; (80020dc <HAL_TIM_Base_MspInit+0x154>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a27      	ldr	r2, [pc, #156]	; (80020dc <HAL_TIM_Base_MspInit+0x154>)
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b25      	ldr	r3, [pc, #148]	; (80020dc <HAL_TIM_Base_MspInit+0x154>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002052:	2301      	movs	r3, #1
 8002054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800205a:	2302      	movs	r3, #2
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002062:	2302      	movs	r3, #2
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002066:	f107 031c 	add.w	r3, r7, #28
 800206a:	4619      	mov	r1, r3
 800206c:	481e      	ldr	r0, [pc, #120]	; (80020e8 <HAL_TIM_Base_MspInit+0x160>)
 800206e:	f002 fb7f 	bl	8004770 <HAL_GPIO_Init>
    hdma_tim5_ch1.Instance = DMA1_Stream2;
 8002072:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8002074:	4a1e      	ldr	r2, [pc, #120]	; (80020f0 <HAL_TIM_Base_MspInit+0x168>)
 8002076:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch1.Init.Channel = DMA_CHANNEL_6;
 8002078:	4b1c      	ldr	r3, [pc, #112]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 800207a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800207e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002080:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8002082:	2200      	movs	r2, #0
 8002084:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002086:	4b19      	ldr	r3, [pc, #100]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8002088:	2200      	movs	r2, #0
 800208a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800208c:	4b17      	ldr	r3, [pc, #92]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 800208e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002092:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002094:	4b15      	ldr	r3, [pc, #84]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 8002096:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800209a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800209c:	4b13      	ldr	r3, [pc, #76]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 800209e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80020a2:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch1.Init.Mode = DMA_CIRCULAR;
 80020a4:	4b11      	ldr	r3, [pc, #68]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 80020a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80020aa:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020b2:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch1) != HAL_OK)
 80020b8:	480c      	ldr	r0, [pc, #48]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 80020ba:	f001 ff57 	bl	8003f6c <HAL_DMA_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <HAL_TIM_Base_MspInit+0x140>
      Error_Handler();
 80020c4:	f7ff feae 	bl	8001e24 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim5_ch1);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24
 80020ce:	4a07      	ldr	r2, [pc, #28]	; (80020ec <HAL_TIM_Base_MspInit+0x164>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80020d4:	bf00      	nop
 80020d6:	3730      	adds	r7, #48	; 0x30
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40000400 	.word	0x40000400
 80020e4:	40000c00 	.word	0x40000c00
 80020e8:	40020000 	.word	0x40020000
 80020ec:	20002744 	.word	0x20002744
 80020f0:	40026040 	.word	0x40026040

080020f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020fc:	f107 030c 	add.w	r3, r7, #12
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a12      	ldr	r2, [pc, #72]	; (800215c <HAL_TIM_MspPostInit+0x68>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d11d      	bne.n	8002152 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_TIM_MspPostInit+0x6c>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a10      	ldr	r2, [pc, #64]	; (8002160 <HAL_TIM_MspPostInit+0x6c>)
 8002120:	f043 0301 	orr.w	r3, r3, #1
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_TIM_MspPostInit+0x6c>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002132:	2340      	movs	r3, #64	; 0x40
 8002134:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002142:	2302      	movs	r3, #2
 8002144:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	4619      	mov	r1, r3
 800214c:	4805      	ldr	r0, [pc, #20]	; (8002164 <HAL_TIM_MspPostInit+0x70>)
 800214e:	f002 fb0f 	bl	8004770 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002152:	bf00      	nop
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40000400 	.word	0x40000400
 8002160:	40023800 	.word	0x40023800
 8002164:	40020000 	.word	0x40020000

08002168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08a      	sub	sp, #40	; 0x28
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0314 	add.w	r3, r7, #20
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1d      	ldr	r2, [pc, #116]	; (80021fc <HAL_UART_MspInit+0x94>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d134      	bne.n	80021f4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <HAL_UART_MspInit+0x98>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <HAL_UART_MspInit+0x98>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002198:	6413      	str	r3, [r2, #64]	; 0x40
 800219a:	4b19      	ldr	r3, [pc, #100]	; (8002200 <HAL_UART_MspInit+0x98>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <HAL_UART_MspInit+0x98>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a14      	ldr	r2, [pc, #80]	; (8002200 <HAL_UART_MspInit+0x98>)
 80021b0:	f043 0302 	orr.w	r3, r3, #2
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_UART_MspInit+0x98>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0302 	and.w	r3, r3, #2
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d0:	2303      	movs	r3, #3
 80021d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80021d4:	2307      	movs	r3, #7
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4619      	mov	r1, r3
 80021de:	4809      	ldr	r0, [pc, #36]	; (8002204 <HAL_UART_MspInit+0x9c>)
 80021e0:	f002 fac6 	bl	8004770 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80021e4:	2200      	movs	r2, #0
 80021e6:	2100      	movs	r1, #0
 80021e8:	2027      	movs	r0, #39	; 0x27
 80021ea:	f001 fe88 	bl	8003efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021ee:	2027      	movs	r0, #39	; 0x27
 80021f0:	f001 fea1 	bl	8003f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80021f4:	bf00      	nop
 80021f6:	3728      	adds	r7, #40	; 0x28
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40004800 	.word	0x40004800
 8002200:	40023800 	.word	0x40023800
 8002204:	40020400 	.word	0x40020400

08002208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800220c:	e7fe      	b.n	800220c <NMI_Handler+0x4>

0800220e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002212:	e7fe      	b.n	8002212 <HardFault_Handler+0x4>

08002214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002218:	e7fe      	b.n	8002218 <MemManage_Handler+0x4>

0800221a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800221a:	b480      	push	{r7}
 800221c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800221e:	e7fe      	b.n	800221e <BusFault_Handler+0x4>

08002220 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002224:	e7fe      	b.n	8002224 <UsageFault_Handler+0x4>

08002226 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002226:	b480      	push	{r7}
 8002228:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002254:	f000 fffe 	bl	8003254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	bd80      	pop	{r7, pc}
 800225c:	0000      	movs	r0, r0
	...

08002260 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002266:	2001      	movs	r0, #1
 8002268:	f002 fc52 	bl	8004b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  //PE0 ROW1
	if( (HAL_GetTick()-tick)>30)
 800226c:	f001 f806 	bl	800327c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	4b85      	ldr	r3, [pc, #532]	; (8002488 <EXTI0_IRQHandler+0x228>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b1e      	cmp	r3, #30
 800227a:	f240 80ed 	bls.w	8002458 <EXTI0_IRQHandler+0x1f8>
	{

		for(uint8_t i=6;i<10;i++)
 800227e:	2306      	movs	r3, #6
 8002280:	71fb      	strb	r3, [r7, #7]
 8002282:	e0e3      	b.n	800244c <EXTI0_IRQHandler+0x1ec>
		{
				HAL_GPIO_WritePin(GPIOB,COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin, GPIO_PIN_SET);
 8002284:	2201      	movs	r2, #1
 8002286:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800228a:	4880      	ldr	r0, [pc, #512]	; (800248c <EXTI0_IRQHandler+0x22c>)
 800228c:	f002 fc0c 	bl	8004aa8 <HAL_GPIO_WritePin>
				PBout(i)=0;
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	461a      	mov	r2, r3
 8002296:	4b7e      	ldr	r3, [pc, #504]	; (8002490 <EXTI0_IRQHandler+0x230>)
 8002298:	4413      	add	r3, r2
 800229a:	461a      	mov	r2, r3
 800229c:	2300      	movs	r3, #0
 800229e:	6013      	str	r3, [r2, #0]
				if(PEin(0)==0)
 80022a0:	4b7c      	ldr	r3, [pc, #496]	; (8002494 <EXTI0_IRQHandler+0x234>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f040 80ce 	bne.w	8002446 <EXTI0_IRQHandler+0x1e6>
				{
					switch(i)
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	3b06      	subs	r3, #6
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	f200 80d1 	bhi.w	8002456 <EXTI0_IRQHandler+0x1f6>
 80022b4:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <EXTI0_IRQHandler+0x5c>)
 80022b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ba:	bf00      	nop
 80022bc:	080022cd 	.word	0x080022cd
 80022c0:	0800232d 	.word	0x0800232d
 80022c4:	0800238d 	.word	0x0800238d
 80022c8:	080023e9 	.word	0x080023e9
					{
						case 6:
						{
							while(PEin(0)==0){}
 80022cc:	bf00      	nop
 80022ce:	4b71      	ldr	r3, [pc, #452]	; (8002494 <EXTI0_IRQHandler+0x234>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0fb      	beq.n	80022ce <EXTI0_IRQHandler+0x6e>
							if((CurrentSet-0.1)<0.0)
 80022d6:	4b70      	ldr	r3, [pc, #448]	; (8002498 <EXTI0_IRQHandler+0x238>)
 80022d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022dc:	a366      	add	r3, pc, #408	; (adr r3, 8002478 <EXTI0_IRQHandler+0x218>)
 80022de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e2:	f7fe f831 	bl	8000348 <__aeabi_dsub>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4610      	mov	r0, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	f7fe fc51 	bl	8000b9c <__aeabi_dcmplt>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d007      	beq.n	8002310 <EXTI0_IRQHandler+0xb0>
							{
								CurrentSet=0.0;
 8002300:	4965      	ldr	r1, [pc, #404]	; (8002498 <EXTI0_IRQHandler+0x238>)
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	e9c1 2300 	strd	r2, r3, [r1]
							}
							else{
								CurrentSet-=0.1;
							}
							goto END;
 800230e:	e099      	b.n	8002444 <EXTI0_IRQHandler+0x1e4>
								CurrentSet-=0.1;
 8002310:	4b61      	ldr	r3, [pc, #388]	; (8002498 <EXTI0_IRQHandler+0x238>)
 8002312:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002316:	a358      	add	r3, pc, #352	; (adr r3, 8002478 <EXTI0_IRQHandler+0x218>)
 8002318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800231c:	f7fe f814 	bl	8000348 <__aeabi_dsub>
 8002320:	4602      	mov	r2, r0
 8002322:	460b      	mov	r3, r1
 8002324:	495c      	ldr	r1, [pc, #368]	; (8002498 <EXTI0_IRQHandler+0x238>)
 8002326:	e9c1 2300 	strd	r2, r3, [r1]
							goto END;
 800232a:	e08b      	b.n	8002444 <EXTI0_IRQHandler+0x1e4>

						}
						case 7:
						{
							while(PEin(0)==0){}
 800232c:	bf00      	nop
 800232e:	4b59      	ldr	r3, [pc, #356]	; (8002494 <EXTI0_IRQHandler+0x234>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0fb      	beq.n	800232e <EXTI0_IRQHandler+0xce>
							if((CurrentSet-0.02)<0.0)
 8002336:	4b58      	ldr	r3, [pc, #352]	; (8002498 <EXTI0_IRQHandler+0x238>)
 8002338:	e9d3 0100 	ldrd	r0, r1, [r3]
 800233c:	a350      	add	r3, pc, #320	; (adr r3, 8002480 <EXTI0_IRQHandler+0x220>)
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	f7fe f801 	bl	8000348 <__aeabi_dsub>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	f04f 0200 	mov.w	r2, #0
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	f7fe fc21 	bl	8000b9c <__aeabi_dcmplt>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d007      	beq.n	8002370 <EXTI0_IRQHandler+0x110>
							{
								CurrentSet=0.0;
 8002360:	494d      	ldr	r1, [pc, #308]	; (8002498 <EXTI0_IRQHandler+0x238>)
 8002362:	f04f 0200 	mov.w	r2, #0
 8002366:	f04f 0300 	mov.w	r3, #0
 800236a:	e9c1 2300 	strd	r2, r3, [r1]
							}
							else
							{
								CurrentSet-=0.02;
							}
							goto END;
 800236e:	e069      	b.n	8002444 <EXTI0_IRQHandler+0x1e4>
								CurrentSet-=0.02;
 8002370:	4b49      	ldr	r3, [pc, #292]	; (8002498 <EXTI0_IRQHandler+0x238>)
 8002372:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002376:	a342      	add	r3, pc, #264	; (adr r3, 8002480 <EXTI0_IRQHandler+0x220>)
 8002378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237c:	f7fd ffe4 	bl	8000348 <__aeabi_dsub>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4944      	ldr	r1, [pc, #272]	; (8002498 <EXTI0_IRQHandler+0x238>)
 8002386:	e9c1 2300 	strd	r2, r3, [r1]
							goto END;
 800238a:	e05b      	b.n	8002444 <EXTI0_IRQHandler+0x1e4>


						}
						case 8:
						{
							while(PEin(0)==0){}
 800238c:	bf00      	nop
 800238e:	4b41      	ldr	r3, [pc, #260]	; (8002494 <EXTI0_IRQHandler+0x234>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d0fb      	beq.n	800238e <EXTI0_IRQHandler+0x12e>
							if((CurrentSet+0.02)>30.0)
 8002396:	4b40      	ldr	r3, [pc, #256]	; (8002498 <EXTI0_IRQHandler+0x238>)
 8002398:	e9d3 0100 	ldrd	r0, r1, [r3]
 800239c:	a338      	add	r3, pc, #224	; (adr r3, 8002480 <EXTI0_IRQHandler+0x220>)
 800239e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a2:	f7fd ffd3 	bl	800034c <__adddf3>
 80023a6:	4602      	mov	r2, r0
 80023a8:	460b      	mov	r3, r1
 80023aa:	4610      	mov	r0, r2
 80023ac:	4619      	mov	r1, r3
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	4b3a      	ldr	r3, [pc, #232]	; (800249c <EXTI0_IRQHandler+0x23c>)
 80023b4:	f7fe fc10 	bl	8000bd8 <__aeabi_dcmpgt>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d006      	beq.n	80023cc <EXTI0_IRQHandler+0x16c>
							{
								CurrentSet=30.0;
 80023be:	4936      	ldr	r1, [pc, #216]	; (8002498 <EXTI0_IRQHandler+0x238>)
 80023c0:	f04f 0200 	mov.w	r2, #0
 80023c4:	4b35      	ldr	r3, [pc, #212]	; (800249c <EXTI0_IRQHandler+0x23c>)
 80023c6:	e9c1 2300 	strd	r2, r3, [r1]
							}
							else
							{
								CurrentSet+=0.02;
							}
							goto END;
 80023ca:	e03b      	b.n	8002444 <EXTI0_IRQHandler+0x1e4>
								CurrentSet+=0.02;
 80023cc:	4b32      	ldr	r3, [pc, #200]	; (8002498 <EXTI0_IRQHandler+0x238>)
 80023ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023d2:	a32b      	add	r3, pc, #172	; (adr r3, 8002480 <EXTI0_IRQHandler+0x220>)
 80023d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d8:	f7fd ffb8 	bl	800034c <__adddf3>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	492d      	ldr	r1, [pc, #180]	; (8002498 <EXTI0_IRQHandler+0x238>)
 80023e2:	e9c1 2300 	strd	r2, r3, [r1]
							goto END;
 80023e6:	e02d      	b.n	8002444 <EXTI0_IRQHandler+0x1e4>
						}
						case 9:
						{
							while(PEin(0)==0){}
 80023e8:	bf00      	nop
 80023ea:	4b2a      	ldr	r3, [pc, #168]	; (8002494 <EXTI0_IRQHandler+0x234>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0fb      	beq.n	80023ea <EXTI0_IRQHandler+0x18a>
							if((CurrentSet+0.1)>30.0)
 80023f2:	4b29      	ldr	r3, [pc, #164]	; (8002498 <EXTI0_IRQHandler+0x238>)
 80023f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023f8:	a31f      	add	r3, pc, #124	; (adr r3, 8002478 <EXTI0_IRQHandler+0x218>)
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	f7fd ffa5 	bl	800034c <__adddf3>
 8002402:	4602      	mov	r2, r0
 8002404:	460b      	mov	r3, r1
 8002406:	4610      	mov	r0, r2
 8002408:	4619      	mov	r1, r3
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	4b23      	ldr	r3, [pc, #140]	; (800249c <EXTI0_IRQHandler+0x23c>)
 8002410:	f7fe fbe2 	bl	8000bd8 <__aeabi_dcmpgt>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d006      	beq.n	8002428 <EXTI0_IRQHandler+0x1c8>
							{
								CurrentSet=30.0;
 800241a:	491f      	ldr	r1, [pc, #124]	; (8002498 <EXTI0_IRQHandler+0x238>)
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	4b1e      	ldr	r3, [pc, #120]	; (800249c <EXTI0_IRQHandler+0x23c>)
 8002422:	e9c1 2300 	strd	r2, r3, [r1]
							}
							else
							{
								CurrentSet+=0.1;
							}
							goto END;
 8002426:	e00c      	b.n	8002442 <EXTI0_IRQHandler+0x1e2>
								CurrentSet+=0.1;
 8002428:	4b1b      	ldr	r3, [pc, #108]	; (8002498 <EXTI0_IRQHandler+0x238>)
 800242a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800242e:	a312      	add	r3, pc, #72	; (adr r3, 8002478 <EXTI0_IRQHandler+0x218>)
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	f7fd ff8a 	bl	800034c <__adddf3>
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4916      	ldr	r1, [pc, #88]	; (8002498 <EXTI0_IRQHandler+0x238>)
 800243e:	e9c1 2300 	strd	r2, r3, [r1]
							goto END;
 8002442:	bf00      	nop
						}
					}
						END:
						break;
 8002444:	e007      	b.n	8002456 <EXTI0_IRQHandler+0x1f6>
		for(uint8_t i=6;i<10;i++)
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	3301      	adds	r3, #1
 800244a:	71fb      	strb	r3, [r7, #7]
 800244c:	79fb      	ldrb	r3, [r7, #7]
 800244e:	2b09      	cmp	r3, #9
 8002450:	f67f af18 	bls.w	8002284 <EXTI0_IRQHandler+0x24>
 8002454:	e000      	b.n	8002458 <EXTI0_IRQHandler+0x1f8>
						break;
 8002456:	bf00      	nop
				}
		}
	}
	HAL_GPIO_WritePin(GPIOB,COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin, GPIO_PIN_RESET);
 8002458:	2200      	movs	r2, #0
 800245a:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800245e:	480b      	ldr	r0, [pc, #44]	; (800248c <EXTI0_IRQHandler+0x22c>)
 8002460:	f002 fb22 	bl	8004aa8 <HAL_GPIO_WritePin>
	tick = HAL_GetTick();
 8002464:	f000 ff0a 	bl	800327c <HAL_GetTick>
 8002468:	4603      	mov	r3, r0
 800246a:	4a07      	ldr	r2, [pc, #28]	; (8002488 <EXTI0_IRQHandler+0x228>)
 800246c:	6013      	str	r3, [r2, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	9999999a 	.word	0x9999999a
 800247c:	3fb99999 	.word	0x3fb99999
 8002480:	47ae147b 	.word	0x47ae147b
 8002484:	3f947ae1 	.word	0x3f947ae1
 8002488:	2000a934 	.word	0x2000a934
 800248c:	40020400 	.word	0x40020400
 8002490:	42408280 	.word	0x42408280
 8002494:	42420200 	.word	0x42420200
 8002498:	20000000 	.word	0x20000000
 800249c:	403e0000 	.word	0x403e0000

080024a0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b082      	sub	sp, #8
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80024a6:	2002      	movs	r0, #2
 80024a8:	f002 fb32 	bl	8004b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */
  //PE1 ROW2
	if( (HAL_GetTick()-tick)>30)
 80024ac:	f000 fee6 	bl	800327c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	4b6a      	ldr	r3, [pc, #424]	; (800265c <EXTI1_IRQHandler+0x1bc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b1e      	cmp	r3, #30
 80024ba:	f240 80cb 	bls.w	8002654 <EXTI1_IRQHandler+0x1b4>
	{

		if(Mode==1){
 80024be:	4b68      	ldr	r3, [pc, #416]	; (8002660 <EXTI1_IRQHandler+0x1c0>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	f040 80c6 	bne.w	8002654 <EXTI1_IRQHandler+0x1b4>

	for(uint8_t i=6;i<10;i++)
 80024c8:	2306      	movs	r3, #6
 80024ca:	71fb      	strb	r3, [r7, #7]
 80024cc:	e0b1      	b.n	8002632 <EXTI1_IRQHandler+0x192>
	{
		HAL_GPIO_WritePin(GPIOB,COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin, GPIO_PIN_SET);
 80024ce:	2201      	movs	r2, #1
 80024d0:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80024d4:	4863      	ldr	r0, [pc, #396]	; (8002664 <EXTI1_IRQHandler+0x1c4>)
 80024d6:	f002 fae7 	bl	8004aa8 <HAL_GPIO_WritePin>
		PBout(i)=0;
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	461a      	mov	r2, r3
 80024e0:	4b61      	ldr	r3, [pc, #388]	; (8002668 <EXTI1_IRQHandler+0x1c8>)
 80024e2:	4413      	add	r3, r2
 80024e4:	461a      	mov	r2, r3
 80024e6:	2300      	movs	r3, #0
 80024e8:	6013      	str	r3, [r2, #0]
		if(PEin(1)==0)
 80024ea:	4b60      	ldr	r3, [pc, #384]	; (800266c <EXTI1_IRQHandler+0x1cc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 809c 	bne.w	800262c <EXTI1_IRQHandler+0x18c>
		{
			switch(i)
 80024f4:	79fb      	ldrb	r3, [r7, #7]
 80024f6:	3b06      	subs	r3, #6
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	f200 809f 	bhi.w	800263c <EXTI1_IRQHandler+0x19c>
 80024fe:	a201      	add	r2, pc, #4	; (adr r2, 8002504 <EXTI1_IRQHandler+0x64>)
 8002500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002504:	08002515 	.word	0x08002515
 8002508:	08002559 	.word	0x08002559
 800250c:	0800259d 	.word	0x0800259d
 8002510:	080025e3 	.word	0x080025e3
			{
				case 6:
				{

					while(PEin(1)==0){}
 8002514:	bf00      	nop
 8002516:	4b55      	ldr	r3, [pc, #340]	; (800266c <EXTI1_IRQHandler+0x1cc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0fb      	beq.n	8002516 <EXTI1_IRQHandler+0x76>
					if((PWM-160)<0)
 800251e:	4b54      	ldr	r3, [pc, #336]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 8002520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002524:	2b9f      	cmp	r3, #159	; 0x9f
 8002526:	dc08      	bgt.n	800253a <EXTI1_IRQHandler+0x9a>
					{
						PWM=0;
 8002528:	4b51      	ldr	r3, [pc, #324]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 800252a:	2200      	movs	r2, #0
 800252c:	801a      	strh	r2, [r3, #0]
						TIM3->CCR1 = PWM;
 800252e:	4b50      	ldr	r3, [pc, #320]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 8002530:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002534:	4b4f      	ldr	r3, [pc, #316]	; (8002674 <EXTI1_IRQHandler+0x1d4>)
 8002536:	635a      	str	r2, [r3, #52]	; 0x34
					else
					{
						PWM-=160;
						TIM3->CCR1 = PWM;
					}
					goto END;
 8002538:	e077      	b.n	800262a <EXTI1_IRQHandler+0x18a>
						PWM-=160;
 800253a:	4b4d      	ldr	r3, [pc, #308]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 800253c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002540:	b29b      	uxth	r3, r3
 8002542:	3ba0      	subs	r3, #160	; 0xa0
 8002544:	b29b      	uxth	r3, r3
 8002546:	b21a      	sxth	r2, r3
 8002548:	4b49      	ldr	r3, [pc, #292]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 800254a:	801a      	strh	r2, [r3, #0]
						TIM3->CCR1 = PWM;
 800254c:	4b48      	ldr	r3, [pc, #288]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 800254e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002552:	4b48      	ldr	r3, [pc, #288]	; (8002674 <EXTI1_IRQHandler+0x1d4>)
 8002554:	635a      	str	r2, [r3, #52]	; 0x34
					goto END;
 8002556:	e068      	b.n	800262a <EXTI1_IRQHandler+0x18a>
				}
				case 7:
				{
					while(PEin(1)==0){}
 8002558:	bf00      	nop
 800255a:	4b44      	ldr	r3, [pc, #272]	; (800266c <EXTI1_IRQHandler+0x1cc>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0fb      	beq.n	800255a <EXTI1_IRQHandler+0xba>
					if((PWM-32)<0)
 8002562:	4b43      	ldr	r3, [pc, #268]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 8002564:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002568:	2b1f      	cmp	r3, #31
 800256a:	dc08      	bgt.n	800257e <EXTI1_IRQHandler+0xde>
					{
						PWM=0;
 800256c:	4b40      	ldr	r3, [pc, #256]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 800256e:	2200      	movs	r2, #0
 8002570:	801a      	strh	r2, [r3, #0]
						TIM3->CCR1 = PWM;
 8002572:	4b3f      	ldr	r3, [pc, #252]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 8002574:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002578:	4b3e      	ldr	r3, [pc, #248]	; (8002674 <EXTI1_IRQHandler+0x1d4>)
 800257a:	635a      	str	r2, [r3, #52]	; 0x34
					else
					{
						PWM-=32;
						TIM3->CCR1 = PWM;
					}
					goto END;
 800257c:	e055      	b.n	800262a <EXTI1_IRQHandler+0x18a>
						PWM-=32;
 800257e:	4b3c      	ldr	r3, [pc, #240]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 8002580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002584:	b29b      	uxth	r3, r3
 8002586:	3b20      	subs	r3, #32
 8002588:	b29b      	uxth	r3, r3
 800258a:	b21a      	sxth	r2, r3
 800258c:	4b38      	ldr	r3, [pc, #224]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 800258e:	801a      	strh	r2, [r3, #0]
						TIM3->CCR1 = PWM;
 8002590:	4b37      	ldr	r3, [pc, #220]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 8002592:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002596:	4b37      	ldr	r3, [pc, #220]	; (8002674 <EXTI1_IRQHandler+0x1d4>)
 8002598:	635a      	str	r2, [r3, #52]	; 0x34
					goto END;
 800259a:	e046      	b.n	800262a <EXTI1_IRQHandler+0x18a>


				}
				case 8:
				{
					while(PEin(1)==0){}
 800259c:	bf00      	nop
 800259e:	4b33      	ldr	r3, [pc, #204]	; (800266c <EXTI1_IRQHandler+0x1cc>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0fb      	beq.n	800259e <EXTI1_IRQHandler+0xfe>
					if((PWM+32)>3200)
 80025a6:	4b32      	ldr	r3, [pc, #200]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 80025a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ac:	f5b3 6f46 	cmp.w	r3, #3168	; 0xc60
 80025b0:	dd08      	ble.n	80025c4 <EXTI1_IRQHandler+0x124>
					{
						PWM=2;
 80025b2:	4b2f      	ldr	r3, [pc, #188]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 80025b4:	2202      	movs	r2, #2
 80025b6:	801a      	strh	r2, [r3, #0]
						TIM3->CCR1 = PWM;
 80025b8:	4b2d      	ldr	r3, [pc, #180]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 80025ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025be:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <EXTI1_IRQHandler+0x1d4>)
 80025c0:	635a      	str	r2, [r3, #52]	; 0x34
					else
					{
						PWM+=32;
						TIM3->CCR1 = PWM;
					}
					goto END;
 80025c2:	e032      	b.n	800262a <EXTI1_IRQHandler+0x18a>
						PWM+=32;
 80025c4:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 80025c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	3320      	adds	r3, #32
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	b21a      	sxth	r2, r3
 80025d2:	4b27      	ldr	r3, [pc, #156]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 80025d4:	801a      	strh	r2, [r3, #0]
						TIM3->CCR1 = PWM;
 80025d6:	4b26      	ldr	r3, [pc, #152]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 80025d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025dc:	4b25      	ldr	r3, [pc, #148]	; (8002674 <EXTI1_IRQHandler+0x1d4>)
 80025de:	635a      	str	r2, [r3, #52]	; 0x34
					goto END;
 80025e0:	e023      	b.n	800262a <EXTI1_IRQHandler+0x18a>


				}
				case 9:
				{
					while(PEin(1)==0){}
 80025e2:	bf00      	nop
 80025e4:	4b21      	ldr	r3, [pc, #132]	; (800266c <EXTI1_IRQHandler+0x1cc>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0fb      	beq.n	80025e4 <EXTI1_IRQHandler+0x144>
					if((PWM+160)>3200)
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 80025ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f2:	f5b3 6f3e 	cmp.w	r3, #3040	; 0xbe0
 80025f6:	dd09      	ble.n	800260c <EXTI1_IRQHandler+0x16c>
					{
						PWM=3200;
 80025f8:	4b1d      	ldr	r3, [pc, #116]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 80025fa:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80025fe:	801a      	strh	r2, [r3, #0]
						TIM3->CCR1 = PWM;
 8002600:	4b1b      	ldr	r3, [pc, #108]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 8002602:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <EXTI1_IRQHandler+0x1d4>)
 8002608:	635a      	str	r2, [r3, #52]	; 0x34
					else
					{
						PWM+=160;
						TIM3->CCR1 = PWM;
					}
					goto END;
 800260a:	e00d      	b.n	8002628 <EXTI1_IRQHandler+0x188>
						PWM+=160;
 800260c:	4b18      	ldr	r3, [pc, #96]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 800260e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002612:	b29b      	uxth	r3, r3
 8002614:	33a0      	adds	r3, #160	; 0xa0
 8002616:	b29b      	uxth	r3, r3
 8002618:	b21a      	sxth	r2, r3
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 800261c:	801a      	strh	r2, [r3, #0]
						TIM3->CCR1 = PWM;
 800261e:	4b14      	ldr	r3, [pc, #80]	; (8002670 <EXTI1_IRQHandler+0x1d0>)
 8002620:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <EXTI1_IRQHandler+0x1d4>)
 8002626:	635a      	str	r2, [r3, #52]	; 0x34
					goto END;
 8002628:	bf00      	nop
				}
			}
				END:
				break;
 800262a:	e007      	b.n	800263c <EXTI1_IRQHandler+0x19c>
	for(uint8_t i=6;i<10;i++)
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	3301      	adds	r3, #1
 8002630:	71fb      	strb	r3, [r7, #7]
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	2b09      	cmp	r3, #9
 8002636:	f67f af4a 	bls.w	80024ce <EXTI1_IRQHandler+0x2e>
 800263a:	e000      	b.n	800263e <EXTI1_IRQHandler+0x19e>
				break;
 800263c:	bf00      	nop
		}
	}
	HAL_GPIO_WritePin(GPIOB,COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin, GPIO_PIN_RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002644:	4807      	ldr	r0, [pc, #28]	; (8002664 <EXTI1_IRQHandler+0x1c4>)
 8002646:	f002 fa2f 	bl	8004aa8 <HAL_GPIO_WritePin>
	tick = HAL_GetTick();
 800264a:	f000 fe17 	bl	800327c <HAL_GetTick>
 800264e:	4603      	mov	r3, r0
 8002650:	4a02      	ldr	r2, [pc, #8]	; (800265c <EXTI1_IRQHandler+0x1bc>)
 8002652:	6013      	str	r3, [r2, #0]
		}
	}
  /* USER CODE END EXTI1_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	3708      	adds	r7, #8
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	2000a934 	.word	0x2000a934
 8002660:	2000027a 	.word	0x2000027a
 8002664:	40020400 	.word	0x40020400
 8002668:	42408280 	.word	0x42408280
 800266c:	42420204 	.word	0x42420204
 8002670:	20000278 	.word	0x20000278
 8002674:	40000400 	.word	0x40000400

08002678 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800267e:	2010      	movs	r0, #16
 8002680:	f002 fa46 	bl	8004b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  //PB4 ROW3
	if( (HAL_GetTick()-tick)>30)
 8002684:	f000 fdfa 	bl	800327c <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	4b3a      	ldr	r3, [pc, #232]	; (8002774 <EXTI4_IRQHandler+0xfc>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b1e      	cmp	r3, #30
 8002692:	d96b      	bls.n	800276c <EXTI4_IRQHandler+0xf4>
	{

	for(uint8_t i=6;i<10;i++)
 8002694:	2306      	movs	r3, #6
 8002696:	71fb      	strb	r3, [r7, #7]
 8002698:	e058      	b.n	800274c <EXTI4_IRQHandler+0xd4>
	{
		HAL_GPIO_WritePin(GPIOB,COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin, GPIO_PIN_SET);
 800269a:	2201      	movs	r2, #1
 800269c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80026a0:	4835      	ldr	r0, [pc, #212]	; (8002778 <EXTI4_IRQHandler+0x100>)
 80026a2:	f002 fa01 	bl	8004aa8 <HAL_GPIO_WritePin>
		PBout(i)=0;
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	461a      	mov	r2, r3
 80026ac:	4b33      	ldr	r3, [pc, #204]	; (800277c <EXTI4_IRQHandler+0x104>)
 80026ae:	4413      	add	r3, r2
 80026b0:	461a      	mov	r2, r3
 80026b2:	2300      	movs	r3, #0
 80026b4:	6013      	str	r3, [r2, #0]
		if(PBin(4)==0)
 80026b6:	4b32      	ldr	r3, [pc, #200]	; (8002780 <EXTI4_IRQHandler+0x108>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d143      	bne.n	8002746 <EXTI4_IRQHandler+0xce>
		{
			switch(i)
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	3b06      	subs	r3, #6
 80026c2:	2b03      	cmp	r3, #3
 80026c4:	d846      	bhi.n	8002754 <EXTI4_IRQHandler+0xdc>
 80026c6:	a201      	add	r2, pc, #4	; (adr r2, 80026cc <EXTI4_IRQHandler+0x54>)
 80026c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026cc:	080026dd 	.word	0x080026dd
 80026d0:	080026ff 	.word	0x080026ff
 80026d4:	08002721 	.word	0x08002721
 80026d8:	08002733 	.word	0x08002733
			{
				case 6:
				{
					while(PBin(4)==0){}
 80026dc:	bf00      	nop
 80026de:	4b28      	ldr	r3, [pc, #160]	; (8002780 <EXTI4_IRQHandler+0x108>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0fb      	beq.n	80026de <EXTI4_IRQHandler+0x66>
					Mode=0;
 80026e6:	4b27      	ldr	r3, [pc, #156]	; (8002784 <EXTI4_IRQHandler+0x10c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
					PWM=0;
 80026ec:	4b26      	ldr	r3, [pc, #152]	; (8002788 <EXTI4_IRQHandler+0x110>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	801a      	strh	r2, [r3, #0]
					TIM3->CCR1 = PWM;
 80026f2:	4b25      	ldr	r3, [pc, #148]	; (8002788 <EXTI4_IRQHandler+0x110>)
 80026f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026f8:	4b24      	ldr	r3, [pc, #144]	; (800278c <EXTI4_IRQHandler+0x114>)
 80026fa:	635a      	str	r2, [r3, #52]	; 0x34
					goto END;
 80026fc:	e022      	b.n	8002744 <EXTI4_IRQHandler+0xcc>

				}
				case 7:
				{
					while(PBin(4)==0){}
 80026fe:	bf00      	nop
 8002700:	4b1f      	ldr	r3, [pc, #124]	; (8002780 <EXTI4_IRQHandler+0x108>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0fb      	beq.n	8002700 <EXTI4_IRQHandler+0x88>
					Mode=1;
 8002708:	4b1e      	ldr	r3, [pc, #120]	; (8002784 <EXTI4_IRQHandler+0x10c>)
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
					PWM=0;
 800270e:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <EXTI4_IRQHandler+0x110>)
 8002710:	2200      	movs	r2, #0
 8002712:	801a      	strh	r2, [r3, #0]
					TIM3->CCR1 = PWM;
 8002714:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <EXTI4_IRQHandler+0x110>)
 8002716:	f9b3 2000 	ldrsh.w	r2, [r3]
 800271a:	4b1c      	ldr	r3, [pc, #112]	; (800278c <EXTI4_IRQHandler+0x114>)
 800271c:	635a      	str	r2, [r3, #52]	; 0x34
					goto END;
 800271e:	e011      	b.n	8002744 <EXTI4_IRQHandler+0xcc>
				}
				case 8:
				{
					while(PBin(4)==0){}
 8002720:	bf00      	nop
 8002722:	4b17      	ldr	r3, [pc, #92]	; (8002780 <EXTI4_IRQHandler+0x108>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d0fb      	beq.n	8002722 <EXTI4_IRQHandler+0xaa>
					frame=0;
 800272a:	4b19      	ldr	r3, [pc, #100]	; (8002790 <EXTI4_IRQHandler+0x118>)
 800272c:	2200      	movs	r2, #0
 800272e:	701a      	strb	r2, [r3, #0]
					goto END;
 8002730:	e008      	b.n	8002744 <EXTI4_IRQHandler+0xcc>
				}
				case 9:
				{
					while(PBin(4)==0){}
 8002732:	bf00      	nop
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <EXTI4_IRQHandler+0x108>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0fb      	beq.n	8002734 <EXTI4_IRQHandler+0xbc>
					frame=1;
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <EXTI4_IRQHandler+0x118>)
 800273e:	2201      	movs	r2, #1
 8002740:	701a      	strb	r2, [r3, #0]
					goto END;
 8002742:	bf00      	nop
				}
			}
				END:
				break;
 8002744:	e006      	b.n	8002754 <EXTI4_IRQHandler+0xdc>
	for(uint8_t i=6;i<10;i++)
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	3301      	adds	r3, #1
 800274a:	71fb      	strb	r3, [r7, #7]
 800274c:	79fb      	ldrb	r3, [r7, #7]
 800274e:	2b09      	cmp	r3, #9
 8002750:	d9a3      	bls.n	800269a <EXTI4_IRQHandler+0x22>
 8002752:	e000      	b.n	8002756 <EXTI4_IRQHandler+0xde>
				break;
 8002754:	bf00      	nop
		}
	}
	HAL_GPIO_WritePin(GPIOB,COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 800275c:	4806      	ldr	r0, [pc, #24]	; (8002778 <EXTI4_IRQHandler+0x100>)
 800275e:	f002 f9a3 	bl	8004aa8 <HAL_GPIO_WritePin>
	tick = HAL_GetTick();
 8002762:	f000 fd8b 	bl	800327c <HAL_GetTick>
 8002766:	4603      	mov	r3, r0
 8002768:	4a02      	ldr	r2, [pc, #8]	; (8002774 <EXTI4_IRQHandler+0xfc>)
 800276a:	6013      	str	r3, [r2, #0]

	}
  /* USER CODE END EXTI4_IRQn 1 */
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	2000a934 	.word	0x2000a934
 8002778:	40020400 	.word	0x40020400
 800277c:	42408280 	.word	0x42408280
 8002780:	42408210 	.word	0x42408210
 8002784:	2000027a 	.word	0x2000027a
 8002788:	20000278 	.word	0x20000278
 800278c:	40000400 	.word	0x40000400
 8002790:	2000027b 	.word	0x2000027b

08002794 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch1);
 8002798:	4802      	ldr	r0, [pc, #8]	; (80027a4 <DMA1_Stream2_IRQHandler+0x10>)
 800279a:	f001 fd7f 	bl	800429c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800279e:	bf00      	nop
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	20002744 	.word	0x20002744

080027a8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80027ac:	4803      	ldr	r0, [pc, #12]	; (80027bc <ADC_IRQHandler+0x14>)
 80027ae:	f000 ff36 	bl	800361e <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80027b2:	4803      	ldr	r0, [pc, #12]	; (80027c0 <ADC_IRQHandler+0x18>)
 80027b4:	f000 ff33 	bl	800361e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80027b8:	bf00      	nop
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	200016fc 	.word	0x200016fc
 80027c0:	20001374 	.word	0x20001374

080027c4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80027ca:	2020      	movs	r0, #32
 80027cc:	f002 f9a0 	bl	8004b10 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  //PB5 ROW4
	if( (HAL_GetTick()-tick)>30)
 80027d0:	f000 fd54 	bl	800327c <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	4b2c      	ldr	r3, [pc, #176]	; (8002888 <EXTI9_5_IRQHandler+0xc4>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b1e      	cmp	r3, #30
 80027de:	d94f      	bls.n	8002880 <EXTI9_5_IRQHandler+0xbc>
	{


	for(uint8_t i=6;i<10;i++)
 80027e0:	2306      	movs	r3, #6
 80027e2:	71fb      	strb	r3, [r7, #7]
 80027e4:	e03c      	b.n	8002860 <EXTI9_5_IRQHandler+0x9c>
	{
		HAL_GPIO_WritePin(GPIOB,COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin, GPIO_PIN_SET);
 80027e6:	2201      	movs	r2, #1
 80027e8:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 80027ec:	4827      	ldr	r0, [pc, #156]	; (800288c <EXTI9_5_IRQHandler+0xc8>)
 80027ee:	f002 f95b 	bl	8004aa8 <HAL_GPIO_WritePin>
		PBout(i)=0;
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	461a      	mov	r2, r3
 80027f8:	4b25      	ldr	r3, [pc, #148]	; (8002890 <EXTI9_5_IRQHandler+0xcc>)
 80027fa:	4413      	add	r3, r2
 80027fc:	461a      	mov	r2, r3
 80027fe:	2300      	movs	r3, #0
 8002800:	6013      	str	r3, [r2, #0]
		if(PBin(5)==0)
 8002802:	4b24      	ldr	r3, [pc, #144]	; (8002894 <EXTI9_5_IRQHandler+0xd0>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d127      	bne.n	800285a <EXTI9_5_IRQHandler+0x96>
		{
			switch(i)
 800280a:	79fb      	ldrb	r3, [r7, #7]
 800280c:	3b06      	subs	r3, #6
 800280e:	2b03      	cmp	r3, #3
 8002810:	d82a      	bhi.n	8002868 <EXTI9_5_IRQHandler+0xa4>
 8002812:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <EXTI9_5_IRQHandler+0x54>)
 8002814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002818:	08002829 	.word	0x08002829
 800281c:	08002835 	.word	0x08002835
 8002820:	0800283f 	.word	0x0800283f
 8002824:	08002849 	.word	0x08002849
			{
				case 6:
				{

					while(PBin(5)==0){}
 8002828:	bf00      	nop
 800282a:	4b1a      	ldr	r3, [pc, #104]	; (8002894 <EXTI9_5_IRQHandler+0xd0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0fb      	beq.n	800282a <EXTI9_5_IRQHandler+0x66>


					goto END;
 8002832:	e011      	b.n	8002858 <EXTI9_5_IRQHandler+0x94>
				}
				case 7:
				{
					while(PBin(5)==0)
 8002834:	bf00      	nop
 8002836:	4b17      	ldr	r3, [pc, #92]	; (8002894 <EXTI9_5_IRQHandler+0xd0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <EXTI9_5_IRQHandler+0x8e>

					goto END;
				}
				case 8:
				{
					while(PBin(5)==0)
 800283e:	bf00      	nop
 8002840:	4b14      	ldr	r3, [pc, #80]	; (8002894 <EXTI9_5_IRQHandler+0xd0>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d006      	beq.n	8002856 <EXTI9_5_IRQHandler+0x92>

					goto END;
				}
				case 9:
				{
					while(PBin(5)==0)
 8002848:	bf00      	nop
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <EXTI9_5_IRQHandler+0xd0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0


					goto END;
				}
			}
				END:
 8002850:	e002      	b.n	8002858 <EXTI9_5_IRQHandler+0x94>
					goto END;
 8002852:	bf00      	nop
 8002854:	e008      	b.n	8002868 <EXTI9_5_IRQHandler+0xa4>
					goto END;
 8002856:	bf00      	nop
				break;
 8002858:	e006      	b.n	8002868 <EXTI9_5_IRQHandler+0xa4>
	for(uint8_t i=6;i<10;i++)
 800285a:	79fb      	ldrb	r3, [r7, #7]
 800285c:	3301      	adds	r3, #1
 800285e:	71fb      	strb	r3, [r7, #7]
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	2b09      	cmp	r3, #9
 8002864:	d9bf      	bls.n	80027e6 <EXTI9_5_IRQHandler+0x22>
 8002866:	e000      	b.n	800286a <EXTI9_5_IRQHandler+0xa6>
				break;
 8002868:	bf00      	nop
		}
	}
	HAL_GPIO_WritePin(GPIOB,COL1_Pin|COL2_Pin|COL3_Pin|COL4_Pin, GPIO_PIN_RESET);
 800286a:	2200      	movs	r2, #0
 800286c:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002870:	4806      	ldr	r0, [pc, #24]	; (800288c <EXTI9_5_IRQHandler+0xc8>)
 8002872:	f002 f919 	bl	8004aa8 <HAL_GPIO_WritePin>
	tick = HAL_GetTick();
 8002876:	f000 fd01 	bl	800327c <HAL_GetTick>
 800287a:	4603      	mov	r3, r0
 800287c:	4a02      	ldr	r2, [pc, #8]	; (8002888 <EXTI9_5_IRQHandler+0xc4>)
 800287e:	6013      	str	r3, [r2, #0]
	}
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	2000a934 	.word	0x2000a934
 800288c:	40020400 	.word	0x40020400
 8002890:	42408280 	.word	0x42408280
 8002894:	42408214 	.word	0x42408214

08002898 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002898:	b5b0      	push	{r4, r5, r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800289e:	48a2      	ldr	r0, [pc, #648]	; (8002b28 <TIM2_IRQHandler+0x290>)
 80028a0:	f003 f9f8 	bl	8005c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  HAL_ADC_Start(&hadc1);
 80028a4:	48a1      	ldr	r0, [pc, #644]	; (8002b2c <TIM2_IRQHandler+0x294>)
 80028a6:	f000 fd5d 	bl	8003364 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 5);
 80028aa:	2105      	movs	r1, #5
 80028ac:	489f      	ldr	r0, [pc, #636]	; (8002b2c <TIM2_IRQHandler+0x294>)
 80028ae:	f000 fe2b 	bl	8003508 <HAL_ADC_PollForConversion>
  HAL_ADC_Start(&hadc2);
 80028b2:	489f      	ldr	r0, [pc, #636]	; (8002b30 <TIM2_IRQHandler+0x298>)
 80028b4:	f000 fd56 	bl	8003364 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc2, 5);
 80028b8:	2105      	movs	r1, #5
 80028ba:	489d      	ldr	r0, [pc, #628]	; (8002b30 <TIM2_IRQHandler+0x298>)
 80028bc:	f000 fe24 	bl	8003508 <HAL_ADC_PollForConversion>

  Current_12[times] = HAL_ADC_GetValue(&hadc1);
 80028c0:	489a      	ldr	r0, [pc, #616]	; (8002b2c <TIM2_IRQHandler+0x294>)
 80028c2:	f000 ffed 	bl	80038a0 <HAL_ADC_GetValue>
 80028c6:	ee07 0a90 	vmov	s15, r0
 80028ca:	4b9a      	ldr	r3, [pc, #616]	; (8002b34 <TIM2_IRQHandler+0x29c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d2:	4a99      	ldr	r2, [pc, #612]	; (8002b38 <TIM2_IRQHandler+0x2a0>)
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	edc3 7a00 	vstr	s15, [r3]
  Voltage_12[times] = HAL_ADC_GetValue(&hadc2);
 80028dc:	4894      	ldr	r0, [pc, #592]	; (8002b30 <TIM2_IRQHandler+0x298>)
 80028de:	f000 ffdf 	bl	80038a0 <HAL_ADC_GetValue>
 80028e2:	ee07 0a90 	vmov	s15, r0
 80028e6:	4b93      	ldr	r3, [pc, #588]	; (8002b34 <TIM2_IRQHandler+0x29c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028ee:	4a93      	ldr	r2, [pc, #588]	; (8002b3c <TIM2_IRQHandler+0x2a4>)
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	edc3 7a00 	vstr	s15, [r3]
  times++;
 80028f8:	4b8e      	ldr	r3, [pc, #568]	; (8002b34 <TIM2_IRQHandler+0x29c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	3301      	adds	r3, #1
 80028fe:	4a8d      	ldr	r2, [pc, #564]	; (8002b34 <TIM2_IRQHandler+0x29c>)
 8002900:	6013      	str	r3, [r2, #0]
  if(times==1536)
 8002902:	4b8c      	ldr	r3, [pc, #560]	; (8002b34 <TIM2_IRQHandler+0x29c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800290a:	f040 81df 	bne.w	8002ccc <TIM2_IRQHandler+0x434>
  {
	  HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800290e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002912:	488b      	ldr	r0, [pc, #556]	; (8002b40 <TIM2_IRQHandler+0x2a8>)
 8002914:	f002 f8e1 	bl	8004ada <HAL_GPIO_TogglePin>
	  times=0;
 8002918:	4b86      	ldr	r3, [pc, #536]	; (8002b34 <TIM2_IRQHandler+0x29c>)
 800291a:	2200      	movs	r2, #0
 800291c:	601a      	str	r2, [r3, #0]
//		  OutData[0]=Current_12[var];
//		  OutData[1]=Voltage_12[var];
//		  OutPut_Data();
//	  }

	  arm_offset_f32(Current_12, -2048.0,Current_12_RMS,1536);
 800291e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002922:	4988      	ldr	r1, [pc, #544]	; (8002b44 <TIM2_IRQHandler+0x2ac>)
 8002924:	ed9f 0a88 	vldr	s0, [pc, #544]	; 8002b48 <TIM2_IRQHandler+0x2b0>
 8002928:	4883      	ldr	r0, [pc, #524]	; (8002b38 <TIM2_IRQHandler+0x2a0>)
 800292a:	f006 fbe9 	bl	8009100 <arm_offset_f32>
	  arm_offset_f32(Voltage_12, -2048.0,Voltage_12_RMS,1536);
 800292e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002932:	4986      	ldr	r1, [pc, #536]	; (8002b4c <TIM2_IRQHandler+0x2b4>)
 8002934:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8002b48 <TIM2_IRQHandler+0x2b0>
 8002938:	4880      	ldr	r0, [pc, #512]	; (8002b3c <TIM2_IRQHandler+0x2a4>)
 800293a:	f006 fbe1 	bl	8009100 <arm_offset_f32>

	  arm_scale_f32(Current_12_RMS,0.00161132,Current_12_RMS,1536);
 800293e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002942:	4980      	ldr	r1, [pc, #512]	; (8002b44 <TIM2_IRQHandler+0x2ac>)
 8002944:	ed9f 0a82 	vldr	s0, [pc, #520]	; 8002b50 <TIM2_IRQHandler+0x2b8>
 8002948:	487e      	ldr	r0, [pc, #504]	; (8002b44 <TIM2_IRQHandler+0x2ac>)
 800294a:	f006 fba3 	bl	8009094 <arm_scale_f32>
	  arm_scale_f32(Voltage_12_RMS,0.00161132,Voltage_12_RMS,1536);
 800294e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8002952:	497e      	ldr	r1, [pc, #504]	; (8002b4c <TIM2_IRQHandler+0x2b4>)
 8002954:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8002b50 <TIM2_IRQHandler+0x2b8>
 8002958:	487c      	ldr	r0, [pc, #496]	; (8002b4c <TIM2_IRQHandler+0x2b4>)
 800295a:	f006 fb9b 	bl	8009094 <arm_scale_f32>

	  arm_rms_f32(Current_12_RMS,1536,&CurrentReal);
 800295e:	4a7d      	ldr	r2, [pc, #500]	; (8002b54 <TIM2_IRQHandler+0x2bc>)
 8002960:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002964:	4877      	ldr	r0, [pc, #476]	; (8002b44 <TIM2_IRQHandler+0x2ac>)
 8002966:	f005 faa3 	bl	8007eb0 <arm_rms_f32>
	  arm_rms_f32(Voltage_12_RMS,1536,&VoltageReal);
 800296a:	4a7b      	ldr	r2, [pc, #492]	; (8002b58 <TIM2_IRQHandler+0x2c0>)
 800296c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002970:	4876      	ldr	r0, [pc, #472]	; (8002b4c <TIM2_IRQHandler+0x2b4>)
 8002972:	f005 fa9d 	bl	8007eb0 <arm_rms_f32>

	  CurrentReal/=2.0;
 8002976:	4b77      	ldr	r3, [pc, #476]	; (8002b54 <TIM2_IRQHandler+0x2bc>)
 8002978:	ed93 7a00 	vldr	s14, [r3]
 800297c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002984:	4b73      	ldr	r3, [pc, #460]	; (8002b54 <TIM2_IRQHandler+0x2bc>)
 8002986:	edc3 7a00 	vstr	s15, [r3]
	  VoltageReal/=2.0;
 800298a:	4b73      	ldr	r3, [pc, #460]	; (8002b58 <TIM2_IRQHandler+0x2c0>)
 800298c:	ed93 7a00 	vldr	s14, [r3]
 8002990:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002994:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002998:	4b6f      	ldr	r3, [pc, #444]	; (8002b58 <TIM2_IRQHandler+0x2c0>)
 800299a:	edc3 7a00 	vstr	s15, [r3]


	  if(Mode==0)
 800299e:	4b6f      	ldr	r3, [pc, #444]	; (8002b5c <TIM2_IRQHandler+0x2c4>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f040 8093 	bne.w	8002ace <TIM2_IRQHandler+0x236>
	  {
		  Cpid_error = CurrentSet - CurrentReal;
 80029a8:	4b6d      	ldr	r3, [pc, #436]	; (8002b60 <TIM2_IRQHandler+0x2c8>)
 80029aa:	e9d3 4500 	ldrd	r4, r5, [r3]
 80029ae:	4b69      	ldr	r3, [pc, #420]	; (8002b54 <TIM2_IRQHandler+0x2bc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7fd fe28 	bl	8000608 <__aeabi_f2d>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4620      	mov	r0, r4
 80029be:	4629      	mov	r1, r5
 80029c0:	f7fd fcc2 	bl	8000348 <__aeabi_dsub>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4966      	ldr	r1, [pc, #408]	; (8002b64 <TIM2_IRQHandler+0x2cc>)
 80029ca:	e9c1 2300 	strd	r2, r3, [r1]
		  PWM += arm_pid_f32(&CPID, Cpid_error);
 80029ce:	4b65      	ldr	r3, [pc, #404]	; (8002b64 <TIM2_IRQHandler+0x2cc>)
 80029d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d4:	4610      	mov	r0, r2
 80029d6:	4619      	mov	r1, r3
 80029d8:	f7fe f966 	bl	8000ca8 <__aeabi_d2f>
 80029dc:	4603      	mov	r3, r0
 80029de:	4a62      	ldr	r2, [pc, #392]	; (8002b68 <TIM2_IRQHandler+0x2d0>)
 80029e0:	60ba      	str	r2, [r7, #8]
 80029e2:	607b      	str	r3, [r7, #4]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	ed93 7a00 	vldr	s14, [r3]
 80029ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80029ee:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80029fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002a02:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	edd3 6a02 	vldr	s13, [r3, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a24:	edc7 7a00 	vstr	s15, [r7]

    //限制增长
    if(out>100)
 8002a28:	edd7 7a00 	vldr	s15, [r7]
 8002a2c:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002b6c <TIM2_IRQHandler+0x2d4>
 8002a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a38:	dd02      	ble.n	8002a40 <TIM2_IRQHandler+0x1a8>
    {
    	out=100;
 8002a3a:	4b4d      	ldr	r3, [pc, #308]	; (8002b70 <TIM2_IRQHandler+0x2d8>)
 8002a3c:	603b      	str	r3, [r7, #0]
 8002a3e:	e00a      	b.n	8002a56 <TIM2_IRQHandler+0x1be>
    }
    else if(out<-100)
 8002a40:	edd7 7a00 	vldr	s15, [r7]
 8002a44:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8002b74 <TIM2_IRQHandler+0x2dc>
 8002a48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a50:	d501      	bpl.n	8002a56 <TIM2_IRQHandler+0x1be>
    {
    	out=-100;
 8002a52:	4b49      	ldr	r3, [pc, #292]	; (8002b78 <TIM2_IRQHandler+0x2e0>)
 8002a54:	603b      	str	r3, [r7, #0]
    }

    /* Update state */
    S->state[1] = S->state[0];
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002a6a:	ed97 7a00 	vldr	s14, [r7]
 8002a6e:	4b43      	ldr	r3, [pc, #268]	; (8002b7c <TIM2_IRQHandler+0x2e4>)
 8002a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a74:	ee07 3a90 	vmov	s15, r3
 8002a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a84:	ee17 3a90 	vmov	r3, s15
 8002a88:	b21a      	sxth	r2, r3
 8002a8a:	4b3c      	ldr	r3, [pc, #240]	; (8002b7c <TIM2_IRQHandler+0x2e4>)
 8002a8c:	801a      	strh	r2, [r3, #0]
		  if(PWM>2880)
 8002a8e:	4b3b      	ldr	r3, [pc, #236]	; (8002b7c <TIM2_IRQHandler+0x2e4>)
 8002a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a94:	f5b3 6f34 	cmp.w	r3, #2880	; 0xb40
 8002a98:	dd08      	ble.n	8002aac <TIM2_IRQHandler+0x214>
		  {
			  PWM=2880;
 8002a9a:	4b38      	ldr	r3, [pc, #224]	; (8002b7c <TIM2_IRQHandler+0x2e4>)
 8002a9c:	f44f 6234 	mov.w	r2, #2880	; 0xb40
 8002aa0:	801a      	strh	r2, [r3, #0]
			  TIM3->CCR1 = 2880;
 8002aa2:	4b37      	ldr	r3, [pc, #220]	; (8002b80 <TIM2_IRQHandler+0x2e8>)
 8002aa4:	f44f 6234 	mov.w	r2, #2880	; 0xb40
 8002aa8:	635a      	str	r2, [r3, #52]	; 0x34
 8002aaa:	e010      	b.n	8002ace <TIM2_IRQHandler+0x236>
		  }
		  else if(PWM<0)
 8002aac:	4b33      	ldr	r3, [pc, #204]	; (8002b7c <TIM2_IRQHandler+0x2e4>)
 8002aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da06      	bge.n	8002ac4 <TIM2_IRQHandler+0x22c>
		  {
			  PWM=0;
 8002ab6:	4b31      	ldr	r3, [pc, #196]	; (8002b7c <TIM2_IRQHandler+0x2e4>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	801a      	strh	r2, [r3, #0]
			  TIM3->CCR1 = 0;
 8002abc:	4b30      	ldr	r3, [pc, #192]	; (8002b80 <TIM2_IRQHandler+0x2e8>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ac2:	e004      	b.n	8002ace <TIM2_IRQHandler+0x236>
		  }
		  else
		  {
			  TIM3->CCR1 = PWM;
 8002ac4:	4b2d      	ldr	r3, [pc, #180]	; (8002b7c <TIM2_IRQHandler+0x2e4>)
 8002ac6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002aca:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <TIM2_IRQHandler+0x2e8>)
 8002acc:	635a      	str	r2, [r3, #52]	; 0x34
//		  OutData[0]=Current_12_RMS[var]*100;
//		  OutData[1]=Voltage_12_RMS[var]*100;
//		  OutPut_Data();
//	  }

	  for (int var = 0; var < 12; ++var)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
 8002ad2:	e00e      	b.n	8002af2 <TIM2_IRQHandler+0x25a>
	  {
		  arm_fir_f32(&FIR, Current_12 + (var * BLOCK_SIZE), Current_12_FIR_out + (var * BLOCK_SIZE),BLOCK_SIZE);
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	025b      	lsls	r3, r3, #9
 8002ad8:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <TIM2_IRQHandler+0x2a0>)
 8002ada:	1899      	adds	r1, r3, r2
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	025b      	lsls	r3, r3, #9
 8002ae0:	4a28      	ldr	r2, [pc, #160]	; (8002b84 <TIM2_IRQHandler+0x2ec>)
 8002ae2:	441a      	add	r2, r3
 8002ae4:	2380      	movs	r3, #128	; 0x80
 8002ae6:	4828      	ldr	r0, [pc, #160]	; (8002b88 <TIM2_IRQHandler+0x2f0>)
 8002ae8:	f005 ff88 	bl	80089fc <arm_fir_f32>
	  for (int var = 0; var < 12; ++var)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3301      	adds	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b0b      	cmp	r3, #11
 8002af6:	dded      	ble.n	8002ad4 <TIM2_IRQHandler+0x23c>
	  }
	  for (int var = 0; var < 12; ++var)
 8002af8:	2300      	movs	r3, #0
 8002afa:	613b      	str	r3, [r7, #16]
 8002afc:	e00e      	b.n	8002b1c <TIM2_IRQHandler+0x284>
	  {
		  arm_fir_f32(&FIR, Voltage_12 + (var * BLOCK_SIZE), Voltage_12_FIR_out + (var * BLOCK_SIZE),BLOCK_SIZE);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	025b      	lsls	r3, r3, #9
 8002b02:	4a0e      	ldr	r2, [pc, #56]	; (8002b3c <TIM2_IRQHandler+0x2a4>)
 8002b04:	1899      	adds	r1, r3, r2
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	025b      	lsls	r3, r3, #9
 8002b0a:	4a20      	ldr	r2, [pc, #128]	; (8002b8c <TIM2_IRQHandler+0x2f4>)
 8002b0c:	441a      	add	r2, r3
 8002b0e:	2380      	movs	r3, #128	; 0x80
 8002b10:	481d      	ldr	r0, [pc, #116]	; (8002b88 <TIM2_IRQHandler+0x2f0>)
 8002b12:	f005 ff73 	bl	80089fc <arm_fir_f32>
	  for (int var = 0; var < 12; ++var)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	2b0b      	cmp	r3, #11
 8002b20:	dded      	ble.n	8002afe <TIM2_IRQHandler+0x266>
//		  OutData[0]=Current_12_FIR_out[var];
//		  OutData[1]=Voltage_12_FIR_out[var];
//		  OutPut_Data();
//	  }

	  for (int var = 64; var < 1536; ++var)
 8002b22:	2340      	movs	r3, #64	; 0x40
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	e066      	b.n	8002bf6 <TIM2_IRQHandler+0x35e>
 8002b28:	20006084 	.word	0x20006084
 8002b2c:	200016fc 	.word	0x200016fc
 8002b30:	20001374 	.word	0x20001374
 8002b34:	20000280 	.word	0x20000280
 8002b38:	200060cc 	.word	0x200060cc
 8002b3c:	200027a4 	.word	0x200027a4
 8002b40:	40021400 	.word	0x40021400
 8002b44:	2000a938 	.word	0x2000a938
 8002b48:	c5000000 	.word	0xc5000000
 8002b4c:	2000c13c 	.word	0x2000c13c
 8002b50:	3ad332ed 	.word	0x3ad332ed
 8002b54:	200013bc 	.word	0x200013bc
 8002b58:	200013e8 	.word	0x200013e8
 8002b5c:	2000027a 	.word	0x2000027a
 8002b60:	20000000 	.word	0x20000000
 8002b64:	2000d940 	.word	0x2000d940
 8002b68:	20006060 	.word	0x20006060
 8002b6c:	42c80000 	.word	0x42c80000
 8002b70:	42c80000 	.word	0x42c80000
 8002b74:	c2c80000 	.word	0xc2c80000
 8002b78:	c2c80000 	.word	0xc2c80000
 8002b7c:	20000278 	.word	0x20000278
 8002b80:	40000400 	.word	0x40000400
 8002b84:	2000792c 	.word	0x2000792c
 8002b88:	200078e0 	.word	0x200078e0
 8002b8c:	2000912c 	.word	0x2000912c
	  {
		  if(Voltage_12_FIR_out[var-1]>2047&&Voltage_12_FIR_out[var]<2047)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	4a4f      	ldr	r2, [pc, #316]	; (8002cd4 <TIM2_IRQHandler+0x43c>)
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	edd3 7a00 	vldr	s15, [r3]
 8002b9e:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8002cd8 <TIM2_IRQHandler+0x440>
 8002ba2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002baa:	dd21      	ble.n	8002bf0 <TIM2_IRQHandler+0x358>
 8002bac:	4a49      	ldr	r2, [pc, #292]	; (8002cd4 <TIM2_IRQHandler+0x43c>)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	edd3 7a00 	vldr	s15, [r3]
 8002bb8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8002cd8 <TIM2_IRQHandler+0x440>
 8002bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc4:	d514      	bpl.n	8002bf0 <TIM2_IRQHandler+0x358>
		  {
			  memcpy(Current_12_FFT_in,Current_12_FIR_out+var,1024*sizeof(float32_t));
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	4a44      	ldr	r2, [pc, #272]	; (8002cdc <TIM2_IRQHandler+0x444>)
 8002bcc:	4413      	add	r3, r2
 8002bce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4842      	ldr	r0, [pc, #264]	; (8002ce0 <TIM2_IRQHandler+0x448>)
 8002bd6:	f006 fde5 	bl	80097a4 <memcpy>
			  memcpy(Voltage_12_FFT_in,Voltage_12_FIR_out+var,1024*sizeof(float32_t));
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4a3d      	ldr	r2, [pc, #244]	; (8002cd4 <TIM2_IRQHandler+0x43c>)
 8002be0:	4413      	add	r3, r2
 8002be2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002be6:	4619      	mov	r1, r3
 8002be8:	483e      	ldr	r0, [pc, #248]	; (8002ce4 <TIM2_IRQHandler+0x44c>)
 8002bea:	f006 fddb 	bl	80097a4 <memcpy>
			  break;
 8002bee:	e006      	b.n	8002bfe <TIM2_IRQHandler+0x366>
	  for (int var = 64; var < 1536; ++var)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002bfc:	dbc8      	blt.n	8002b90 <TIM2_IRQHandler+0x2f8>
//	  		  OutData[0]=Current_12_FFT_in[var];
//	  		  OutData[1]=Voltage_12_FFT_in[var];
//	  		  OutPut_Data();
//	  	  }

	  arm_rfft_fast_f32(&FFT, Current_12_FFT_in, Current_12_FFT_out, 0);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	4a39      	ldr	r2, [pc, #228]	; (8002ce8 <TIM2_IRQHandler+0x450>)
 8002c02:	4937      	ldr	r1, [pc, #220]	; (8002ce0 <TIM2_IRQHandler+0x448>)
 8002c04:	4839      	ldr	r0, [pc, #228]	; (8002cec <TIM2_IRQHandler+0x454>)
 8002c06:	f005 fa7b 	bl	8008100 <arm_rfft_fast_f32>
	  arm_rfft_fast_f32(&FFT, Voltage_12_FFT_in, Voltage_12_FFT_out, 0);
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	4a38      	ldr	r2, [pc, #224]	; (8002cf0 <TIM2_IRQHandler+0x458>)
 8002c0e:	4935      	ldr	r1, [pc, #212]	; (8002ce4 <TIM2_IRQHandler+0x44c>)
 8002c10:	4836      	ldr	r0, [pc, #216]	; (8002cec <TIM2_IRQHandler+0x454>)
 8002c12:	f005 fa75 	bl	8008100 <arm_rfft_fast_f32>
//		  OutData[0]=Current_12_FFT_out[var];
//		  OutData[1]=Voltage_12_FFT_out[var];
//		  OutPut_Data();
//	  }

	  Current_Arg=atan2(Current_12_FFT_out[9],Current_12_FFT_out[8]);
 8002c16:	4b34      	ldr	r3, [pc, #208]	; (8002ce8 <TIM2_IRQHandler+0x450>)
 8002c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fcf4 	bl	8000608 <__aeabi_f2d>
 8002c20:	4604      	mov	r4, r0
 8002c22:	460d      	mov	r5, r1
 8002c24:	4b30      	ldr	r3, [pc, #192]	; (8002ce8 <TIM2_IRQHandler+0x450>)
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fced 	bl	8000608 <__aeabi_f2d>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	460b      	mov	r3, r1
 8002c32:	ec43 2b11 	vmov	d1, r2, r3
 8002c36:	ec45 4b10 	vmov	d0, r4, r5
 8002c3a:	f00b fab9 	bl	800e1b0 <atan2>
 8002c3e:	ec53 2b10 	vmov	r2, r3, d0
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	f7fe f82f 	bl	8000ca8 <__aeabi_d2f>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	4a29      	ldr	r2, [pc, #164]	; (8002cf4 <TIM2_IRQHandler+0x45c>)
 8002c4e:	6013      	str	r3, [r2, #0]
	  Voltage_Arg=atan2(Voltage_12_FFT_out[9],Voltage_12_FFT_out[8]);
 8002c50:	4b27      	ldr	r3, [pc, #156]	; (8002cf0 <TIM2_IRQHandler+0x458>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fd fcd7 	bl	8000608 <__aeabi_f2d>
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	460d      	mov	r5, r1
 8002c5e:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <TIM2_IRQHandler+0x458>)
 8002c60:	6a1b      	ldr	r3, [r3, #32]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fcd0 	bl	8000608 <__aeabi_f2d>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	ec43 2b11 	vmov	d1, r2, r3
 8002c70:	ec45 4b10 	vmov	d0, r4, r5
 8002c74:	f00b fa9c 	bl	800e1b0 <atan2>
 8002c78:	ec53 2b10 	vmov	r2, r3, d0
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f7fe f812 	bl	8000ca8 <__aeabi_d2f>
 8002c84:	4603      	mov	r3, r0
 8002c86:	4a1c      	ldr	r2, [pc, #112]	; (8002cf8 <TIM2_IRQHandler+0x460>)
 8002c88:	6013      	str	r3, [r2, #0]


	  PHD[PHDtimes]=Voltage_Arg-Current_Arg;
 8002c8a:	4b1b      	ldr	r3, [pc, #108]	; (8002cf8 <TIM2_IRQHandler+0x460>)
 8002c8c:	ed93 7a00 	vldr	s14, [r3]
 8002c90:	4b18      	ldr	r3, [pc, #96]	; (8002cf4 <TIM2_IRQHandler+0x45c>)
 8002c92:	edd3 7a00 	vldr	s15, [r3]
 8002c96:	4b19      	ldr	r3, [pc, #100]	; (8002cfc <TIM2_IRQHandler+0x464>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c9e:	4a18      	ldr	r2, [pc, #96]	; (8002d00 <TIM2_IRQHandler+0x468>)
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	edc3 7a00 	vstr	s15, [r3]
	  PHDtimes++;
 8002ca8:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <TIM2_IRQHandler+0x464>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <TIM2_IRQHandler+0x464>)
 8002cb2:	701a      	strb	r2, [r3, #0]
	  if(PHDtimes>9)
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <TIM2_IRQHandler+0x464>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b09      	cmp	r3, #9
 8002cba:	d907      	bls.n	8002ccc <TIM2_IRQHandler+0x434>
	  {
		  PHDtimes=0;
 8002cbc:	4b0f      	ldr	r3, [pc, #60]	; (8002cfc <TIM2_IRQHandler+0x464>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]
		  arm_mean_f32(PHD, 10, &PHD[10]);
 8002cc2:	4a10      	ldr	r2, [pc, #64]	; (8002d04 <TIM2_IRQHandler+0x46c>)
 8002cc4:	210a      	movs	r1, #10
 8002cc6:	480e      	ldr	r0, [pc, #56]	; (8002d00 <TIM2_IRQHandler+0x468>)
 8002cc8:	f005 f948 	bl	8007f5c <arm_mean_f32>
	  }

  }

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ccc:	bf00      	nop
 8002cce:	3718      	adds	r7, #24
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bdb0      	pop	{r4, r5, r7, pc}
 8002cd4:	2000912c 	.word	0x2000912c
 8002cd8:	44ffe000 	.word	0x44ffe000
 8002cdc:	2000792c 	.word	0x2000792c
 8002ce0:	20004048 	.word	0x20004048
 8002ce4:	20000374 	.word	0x20000374
 8002ce8:	20001744 	.word	0x20001744
 8002cec:	2000169c 	.word	0x2000169c
 8002cf0:	20005048 	.word	0x20005048
 8002cf4:	2000a930 	.word	0x2000a930
 8002cf8:	2000c138 	.word	0x2000c138
 8002cfc:	2000027c 	.word	0x2000027c
 8002d00:	200078ec 	.word	0x200078ec
 8002d04:	20007914 	.word	0x20007914

08002d08 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d0c:	4802      	ldr	r0, [pc, #8]	; (8002d18 <TIM3_IRQHandler+0x10>)
 8002d0e:	f002 ffc1 	bl	8005c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d12:	bf00      	nop
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	200016b4 	.word	0x200016b4

08002d1c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002d20:	4804      	ldr	r0, [pc, #16]	; (8002d34 <USART3_IRQHandler+0x18>)
 8002d22:	f004 faa7 	bl	8007274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, recive, 1);
 8002d26:	2201      	movs	r2, #1
 8002d28:	4903      	ldr	r1, [pc, #12]	; (8002d38 <USART3_IRQHandler+0x1c>)
 8002d2a:	4802      	ldr	r0, [pc, #8]	; (8002d34 <USART3_IRQHandler+0x18>)
 8002d2c:	f004 fa71 	bl	8007212 <HAL_UART_Receive_IT>
  /* USER CODE END USART3_IRQn 1 */
}
 8002d30:	bf00      	nop
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20000330 	.word	0x20000330
 8002d38:	20003fa8 	.word	0x20003fa8

08002d3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
	return 1;
 8002d40:	2301      	movs	r3, #1
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <_kill>:

int _kill(int pid, int sig)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d56:	f006 fcfb 	bl	8009750 <__errno>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2216      	movs	r2, #22
 8002d5e:	601a      	str	r2, [r3, #0]
	return -1;
 8002d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3708      	adds	r7, #8
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <_exit>:

void _exit (int status)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d74:	f04f 31ff 	mov.w	r1, #4294967295
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff ffe7 	bl	8002d4c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d7e:	e7fe      	b.n	8002d7e <_exit+0x12>

08002d80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	e00a      	b.n	8002da8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d92:	f3af 8000 	nop.w
 8002d96:	4601      	mov	r1, r0
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	60ba      	str	r2, [r7, #8]
 8002d9e:	b2ca      	uxtb	r2, r1
 8002da0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	3301      	adds	r3, #1
 8002da6:	617b      	str	r3, [r7, #20]
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	dbf0      	blt.n	8002d92 <_read+0x12>
	}

return len;
 8002db0:	687b      	ldr	r3, [r7, #4]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	617b      	str	r3, [r7, #20]
 8002dca:	e009      	b.n	8002de0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	1c5a      	adds	r2, r3, #1
 8002dd0:	60ba      	str	r2, [r7, #8]
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	dbf1      	blt.n	8002dcc <_write+0x12>
	}
	return len;
 8002de8:	687b      	ldr	r3, [r7, #4]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <_close>:

int _close(int file)
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
	return -1;
 8002dfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e1a:	605a      	str	r2, [r3, #4]
	return 0;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <_isatty>:

int _isatty(int file)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b083      	sub	sp, #12
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
	return 1;
 8002e32:	2301      	movs	r3, #1
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b085      	sub	sp, #20
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
	return 0;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b086      	sub	sp, #24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e64:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <_sbrk+0x5c>)
 8002e66:	4b15      	ldr	r3, [pc, #84]	; (8002ebc <_sbrk+0x60>)
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <_sbrk+0x64>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d102      	bne.n	8002e7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e78:	4b11      	ldr	r3, [pc, #68]	; (8002ec0 <_sbrk+0x64>)
 8002e7a:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <_sbrk+0x68>)
 8002e7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <_sbrk+0x64>)
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4413      	add	r3, r2
 8002e86:	693a      	ldr	r2, [r7, #16]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d207      	bcs.n	8002e9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e8c:	f006 fc60 	bl	8009750 <__errno>
 8002e90:	4603      	mov	r3, r0
 8002e92:	220c      	movs	r2, #12
 8002e94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295
 8002e9a:	e009      	b.n	8002eb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e9c:	4b08      	ldr	r3, [pc, #32]	; (8002ec0 <_sbrk+0x64>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ea2:	4b07      	ldr	r3, [pc, #28]	; (8002ec0 <_sbrk+0x64>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	4a05      	ldr	r2, [pc, #20]	; (8002ec0 <_sbrk+0x64>)
 8002eac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eae:	68fb      	ldr	r3, [r7, #12]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	20020000 	.word	0x20020000
 8002ebc:	00000400 	.word	0x00000400
 8002ec0:	20000284 	.word	0x20000284
 8002ec4:	2000d960 	.word	0x2000d960

08002ec8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <SystemInit+0x20>)
 8002ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed2:	4a05      	ldr	r2, [pc, #20]	; (8002ee8 <SystemInit+0x20>)
 8002ed4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ed8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ef0:	480d      	ldr	r0, [pc, #52]	; (8002f28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002ef2:	490e      	ldr	r1, [pc, #56]	; (8002f2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002ef4:	4a0e      	ldr	r2, [pc, #56]	; (8002f30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ef8:	e002      	b.n	8002f00 <LoopCopyDataInit>

08002efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002efe:	3304      	adds	r3, #4

08002f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f04:	d3f9      	bcc.n	8002efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f06:	4a0b      	ldr	r2, [pc, #44]	; (8002f34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002f08:	4c0b      	ldr	r4, [pc, #44]	; (8002f38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f0c:	e001      	b.n	8002f12 <LoopFillZerobss>

08002f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f10:	3204      	adds	r2, #4

08002f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f14:	d3fb      	bcc.n	8002f0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002f16:	f7ff ffd7 	bl	8002ec8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002f1a:	f006 fc1f 	bl	800975c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f1e:	f7fe f8c7 	bl	80010b0 <main>
  bx  lr    
 8002f22:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f2c:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8002f30:	08023550 	.word	0x08023550
  ldr r2, =_sbss
 8002f34:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8002f38:	2000d95c 	.word	0x2000d95c

08002f3c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f3c:	e7fe      	b.n	8002f3c <CAN1_RX0_IRQHandler>
	...

08002f40 <LCD_write_byte>:

};


void LCD_write_byte(unsigned char dt, unsigned char command)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	4603      	mov	r3, r0
 8002f48:	460a      	mov	r2, r1
 8002f4a:	71fb      	strb	r3, [r7, #7]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	71bb      	strb	r3, [r7, #6]
	unsigned char i;  	
    sce0; 	
 8002f50:	2200      	movs	r2, #0
 8002f52:	2108      	movs	r1, #8
 8002f54:	4823      	ldr	r0, [pc, #140]	; (8002fe4 <LCD_write_byte+0xa4>)
 8002f56:	f001 fda7 	bl	8004aa8 <HAL_GPIO_WritePin>
	if(command)
 8002f5a:	79bb      	ldrb	r3, [r7, #6]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d006      	beq.n	8002f6e <LCD_write_byte+0x2e>
		dc1;
 8002f60:	2201      	movs	r2, #1
 8002f62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f66:	4820      	ldr	r0, [pc, #128]	; (8002fe8 <LCD_write_byte+0xa8>)
 8002f68:	f001 fd9e 	bl	8004aa8 <HAL_GPIO_WritePin>
 8002f6c:	e005      	b.n	8002f7a <LCD_write_byte+0x3a>
	else
		dc0;		
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f74:	481c      	ldr	r0, [pc, #112]	; (8002fe8 <LCD_write_byte+0xa8>)
 8002f76:	f001 fd97 	bl	8004aa8 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	73fb      	strb	r3, [r7, #15]
 8002f7e:	e025      	b.n	8002fcc <LCD_write_byte+0x8c>
	{ 
		if(dt&0x80)
 8002f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	da06      	bge.n	8002f96 <LCD_write_byte+0x56>
			sdin1;
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f8e:	4815      	ldr	r0, [pc, #84]	; (8002fe4 <LCD_write_byte+0xa4>)
 8002f90:	f001 fd8a 	bl	8004aa8 <HAL_GPIO_WritePin>
 8002f94:	e005      	b.n	8002fa2 <LCD_write_byte+0x62>
		else
			sdin0;
 8002f96:	2200      	movs	r2, #0
 8002f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f9c:	4811      	ldr	r0, [pc, #68]	; (8002fe4 <LCD_write_byte+0xa4>)
 8002f9e:	f001 fd83 	bl	8004aa8 <HAL_GPIO_WritePin>
		dt=dt<<1;	
 8002fa2:	79fb      	ldrb	r3, [r7, #7]
 8002fa4:	005b      	lsls	r3, r3, #1
 8002fa6:	71fb      	strb	r3, [r7, #7]
		sclk0;
 8002fa8:	2200      	movs	r2, #0
 8002faa:	2104      	movs	r1, #4
 8002fac:	480f      	ldr	r0, [pc, #60]	; (8002fec <LCD_write_byte+0xac>)
 8002fae:	f001 fd7b 	bl	8004aa8 <HAL_GPIO_WritePin>
		sclk1;
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	2104      	movs	r1, #4
 8002fb6:	480d      	ldr	r0, [pc, #52]	; (8002fec <LCD_write_byte+0xac>)
 8002fb8:	f001 fd76 	bl	8004aa8 <HAL_GPIO_WritePin>
		sclk0;		
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2104      	movs	r1, #4
 8002fc0:	480a      	ldr	r0, [pc, #40]	; (8002fec <LCD_write_byte+0xac>)
 8002fc2:	f001 fd71 	bl	8004aa8 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	3301      	adds	r3, #1
 8002fca:	73fb      	strb	r3, [r7, #15]
 8002fcc:	7bfb      	ldrb	r3, [r7, #15]
 8002fce:	2b07      	cmp	r3, #7
 8002fd0:	d9d6      	bls.n	8002f80 <LCD_write_byte+0x40>
	}
	sce1;
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	2108      	movs	r1, #8
 8002fd6:	4803      	ldr	r0, [pc, #12]	; (8002fe4 <LCD_write_byte+0xa4>)
 8002fd8:	f001 fd66 	bl	8004aa8 <HAL_GPIO_WritePin>
}
 8002fdc:	bf00      	nop
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	40020c00 	.word	0x40020c00
 8002fe8:	40020000 	.word	0x40020000
 8002fec:	40021800 	.word	0x40021800

08002ff0 <LCD_init>:



void LCD_init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
	//backled1;
	sce0;
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2108      	movs	r1, #8
 8002ff8:	481c      	ldr	r0, [pc, #112]	; (800306c <LCD_init+0x7c>)
 8002ffa:	f001 fd55 	bl	8004aa8 <HAL_GPIO_WritePin>
	res1;
 8002ffe:	2201      	movs	r2, #1
 8003000:	2108      	movs	r1, #8
 8003002:	481b      	ldr	r0, [pc, #108]	; (8003070 <LCD_init+0x80>)
 8003004:	f001 fd50 	bl	8004aa8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003008:	2064      	movs	r0, #100	; 0x64
 800300a:	f000 f943 	bl	8003294 <HAL_Delay>
	res0;  	
 800300e:	2200      	movs	r2, #0
 8003010:	2108      	movs	r1, #8
 8003012:	4817      	ldr	r0, [pc, #92]	; (8003070 <LCD_init+0x80>)
 8003014:	f001 fd48 	bl	8004aa8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8003018:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800301c:	f000 f93a 	bl	8003294 <HAL_Delay>
	res1;
 8003020:	2201      	movs	r2, #1
 8003022:	2108      	movs	r1, #8
 8003024:	4812      	ldr	r0, [pc, #72]	; (8003070 <LCD_init+0x80>)
 8003026:	f001 fd3f 	bl	8004aa8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800302a:	2064      	movs	r0, #100	; 0x64
 800302c:	f000 f932 	bl	8003294 <HAL_Delay>
	LCD_write_byte(0x27,0);//LCD功能设置：芯片活动，水平寻址，使用扩展指令
 8003030:	2100      	movs	r1, #0
 8003032:	2027      	movs	r0, #39	; 0x27
 8003034:	f7ff ff84 	bl	8002f40 <LCD_write_byte>
	LCD_write_byte(0xA1,0);//设置VOP值，室温下的编程范围为3.00-10.68
 8003038:	2100      	movs	r1, #0
 800303a:	20a1      	movs	r0, #161	; 0xa1
 800303c:	f7ff ff80 	bl	8002f40 <LCD_write_byte>
	//Vlcd=3.06+(VOP)*0.06,本例VOP为0B0101 0000为十进制的80，Vlcd=7.86V
	LCD_write_byte(0x14,0);//混合偏执率
 8003040:	2100      	movs	r1, #0
 8003042:	2014      	movs	r0, #20
 8003044:	f7ff ff7c 	bl	8002f40 <LCD_write_byte>
	LCD_write_byte(0x20,0);//LCD功能设置：芯片活动，水平寻址，使用基本指令
 8003048:	2100      	movs	r1, #0
 800304a:	2020      	movs	r0, #32
 800304c:	f7ff ff78 	bl	8002f40 <LCD_write_byte>
	LCD_write_byte(0x0C,0);//设定显示配置:普通模式
 8003050:	2100      	movs	r1, #0
 8003052:	200c      	movs	r0, #12
 8003054:	f7ff ff74 	bl	8002f40 <LCD_write_byte>

	LCD_clear();
 8003058:	f000 f834 	bl	80030c4 <LCD_clear>
	sce1;
 800305c:	2201      	movs	r2, #1
 800305e:	2108      	movs	r1, #8
 8003060:	4802      	ldr	r0, [pc, #8]	; (800306c <LCD_init+0x7c>)
 8003062:	f001 fd21 	bl	8004aa8 <HAL_GPIO_WritePin>
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40020c00 	.word	0x40020c00
 8003070:	40021800 	.word	0x40021800

08003074 <LCD_set_XY>:

void LCD_set_XY(unsigned char X, unsigned char Y)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b082      	sub	sp, #8
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	460a      	mov	r2, r1
 800307e:	71fb      	strb	r3, [r7, #7]
 8003080:	4613      	mov	r3, r2
 8003082:	71bb      	strb	r3, [r7, #6]
	sce0;
 8003084:	2200      	movs	r2, #0
 8003086:	2108      	movs	r1, #8
 8003088:	480d      	ldr	r0, [pc, #52]	; (80030c0 <LCD_set_XY+0x4c>)
 800308a:	f001 fd0d 	bl	8004aa8 <HAL_GPIO_WritePin>
	LCD_write_byte(0x40 | Y, 0);// column
 800308e:	79bb      	ldrb	r3, [r7, #6]
 8003090:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2100      	movs	r1, #0
 8003098:	4618      	mov	r0, r3
 800309a:	f7ff ff51 	bl	8002f40 <LCD_write_byte>
	LCD_write_byte(0x80 | X, 0);// row
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff49 	bl	8002f40 <LCD_write_byte>
	sce1;
 80030ae:	2201      	movs	r2, #1
 80030b0:	2108      	movs	r1, #8
 80030b2:	4803      	ldr	r0, [pc, #12]	; (80030c0 <LCD_set_XY+0x4c>)
 80030b4:	f001 fcf8 	bl	8004aa8 <HAL_GPIO_WritePin>
} 
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40020c00 	.word	0x40020c00

080030c4 <LCD_clear>:

void LCD_clear(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
	sce0;
 80030ca:	2200      	movs	r2, #0
 80030cc:	2108      	movs	r1, #8
 80030ce:	4814      	ldr	r0, [pc, #80]	; (8003120 <LCD_clear+0x5c>)
 80030d0:	f001 fcea 	bl	8004aa8 <HAL_GPIO_WritePin>
	unsigned char t;
	unsigned char k;
	LCD_set_XY(0,0);
 80030d4:	2100      	movs	r1, #0
 80030d6:	2000      	movs	r0, #0
 80030d8:	f7ff ffcc 	bl	8003074 <LCD_set_XY>
	for(t=0;t<6;t++)
 80030dc:	2300      	movs	r3, #0
 80030de:	71fb      	strb	r3, [r7, #7]
 80030e0:	e012      	b.n	8003108 <LCD_clear+0x44>
	{ 
		for(k=0;k<84;k++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	71bb      	strb	r3, [r7, #6]
 80030e6:	e009      	b.n	80030fc <LCD_clear+0x38>
		{ 
			HAL_Delay(1);
 80030e8:	2001      	movs	r0, #1
 80030ea:	f000 f8d3 	bl	8003294 <HAL_Delay>
			LCD_write_byte(0x00,1);	 						
 80030ee:	2101      	movs	r1, #1
 80030f0:	2000      	movs	r0, #0
 80030f2:	f7ff ff25 	bl	8002f40 <LCD_write_byte>
		for(k=0;k<84;k++)
 80030f6:	79bb      	ldrb	r3, [r7, #6]
 80030f8:	3301      	adds	r3, #1
 80030fa:	71bb      	strb	r3, [r7, #6]
 80030fc:	79bb      	ldrb	r3, [r7, #6]
 80030fe:	2b53      	cmp	r3, #83	; 0x53
 8003100:	d9f2      	bls.n	80030e8 <LCD_clear+0x24>
	for(t=0;t<6;t++)
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	3301      	adds	r3, #1
 8003106:	71fb      	strb	r3, [r7, #7]
 8003108:	79fb      	ldrb	r3, [r7, #7]
 800310a:	2b05      	cmp	r3, #5
 800310c:	d9e9      	bls.n	80030e2 <LCD_clear+0x1e>
		} 
	}
	sce1;
 800310e:	2201      	movs	r2, #1
 8003110:	2108      	movs	r1, #8
 8003112:	4803      	ldr	r0, [pc, #12]	; (8003120 <LCD_clear+0x5c>)
 8003114:	f001 fcc8 	bl	8004aa8 <HAL_GPIO_WritePin>
}
 8003118:	bf00      	nop
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40020c00 	.word	0x40020c00

08003124 <LCD_write_char>:

void LCD_write_char(unsigned char c)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	71fb      	strb	r3, [r7, #7]
	unsigned char line;
	c-= 32;
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	3b20      	subs	r3, #32
 8003132:	71fb      	strb	r3, [r7, #7]
	for (line=0; line<6; line++)
 8003134:	2300      	movs	r3, #0
 8003136:	73fb      	strb	r3, [r7, #15]
 8003138:	e010      	b.n	800315c <LCD_write_char+0x38>
	LCD_write_byte(font6x8[c][line], 1);
 800313a:	79fa      	ldrb	r2, [r7, #7]
 800313c:	7bf9      	ldrb	r1, [r7, #15]
 800313e:	480b      	ldr	r0, [pc, #44]	; (800316c <LCD_write_char+0x48>)
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	4403      	add	r3, r0
 800314a:	440b      	add	r3, r1
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	2101      	movs	r1, #1
 8003150:	4618      	mov	r0, r3
 8003152:	f7ff fef5 	bl	8002f40 <LCD_write_byte>
	for (line=0; line<6; line++)
 8003156:	7bfb      	ldrb	r3, [r7, #15]
 8003158:	3301      	adds	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
 800315c:	7bfb      	ldrb	r3, [r7, #15]
 800315e:	2b05      	cmp	r3, #5
 8003160:	d9eb      	bls.n	800313a <LCD_write_char+0x16>
}
 8003162:	bf00      	nop
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	0800f7b8 	.word	0x0800f7b8

08003170 <LCD_write_String>:

void LCD_write_String(unsigned char X,unsigned char Y,char *s)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	603a      	str	r2, [r7, #0]
 800317a:	71fb      	strb	r3, [r7, #7]
 800317c:	460b      	mov	r3, r1
 800317e:	71bb      	strb	r3, [r7, #6]
	LCD_set_XY(X,Y);
 8003180:	79ba      	ldrb	r2, [r7, #6]
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	4611      	mov	r1, r2
 8003186:	4618      	mov	r0, r3
 8003188:	f7ff ff74 	bl	8003074 <LCD_set_XY>
	while (*s) 
 800318c:	e007      	b.n	800319e <LCD_write_String+0x2e>
	{
		LCD_write_char(*s);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ffc6 	bl	8003124 <LCD_write_char>
		s++;
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	3301      	adds	r3, #1
 800319c:	603b      	str	r3, [r7, #0]
	while (*s) 
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f3      	bne.n	800318e <LCD_write_String+0x1e>
	}
} 
 80031a6:	bf00      	nop
 80031a8:	bf00      	nop
 80031aa:	3708      	adds	r7, #8
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80031b4:	4b0e      	ldr	r3, [pc, #56]	; (80031f0 <HAL_Init+0x40>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a0d      	ldr	r2, [pc, #52]	; (80031f0 <HAL_Init+0x40>)
 80031ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_Init+0x40>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <HAL_Init+0x40>)
 80031c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031cc:	4b08      	ldr	r3, [pc, #32]	; (80031f0 <HAL_Init+0x40>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a07      	ldr	r2, [pc, #28]	; (80031f0 <HAL_Init+0x40>)
 80031d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031d8:	2003      	movs	r0, #3
 80031da:	f000 fe85 	bl	8003ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031de:	2000      	movs	r0, #0
 80031e0:	f000 f808 	bl	80031f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031e4:	f7fe fe24 	bl	8001e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	40023c00 	.word	0x40023c00

080031f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031fc:	4b12      	ldr	r3, [pc, #72]	; (8003248 <HAL_InitTick+0x54>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b12      	ldr	r3, [pc, #72]	; (800324c <HAL_InitTick+0x58>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	4619      	mov	r1, r3
 8003206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800320a:	fbb3 f3f1 	udiv	r3, r3, r1
 800320e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003212:	4618      	mov	r0, r3
 8003214:	f000 fe9d 	bl	8003f52 <HAL_SYSTICK_Config>
 8003218:	4603      	mov	r3, r0
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e00e      	b.n	8003240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b0f      	cmp	r3, #15
 8003226:	d80a      	bhi.n	800323e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003228:	2200      	movs	r2, #0
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	f04f 30ff 	mov.w	r0, #4294967295
 8003230:	f000 fe65 	bl	8003efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003234:	4a06      	ldr	r2, [pc, #24]	; (8003250 <HAL_InitTick+0x5c>)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800323a:	2300      	movs	r3, #0
 800323c:	e000      	b.n	8003240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
}
 8003240:	4618      	mov	r0, r3
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	20000074 	.word	0x20000074
 800324c:	2000007c 	.word	0x2000007c
 8003250:	20000078 	.word	0x20000078

08003254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003254:	b480      	push	{r7}
 8003256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_IncTick+0x20>)
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	4b06      	ldr	r3, [pc, #24]	; (8003278 <HAL_IncTick+0x24>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4413      	add	r3, r2
 8003264:	4a04      	ldr	r2, [pc, #16]	; (8003278 <HAL_IncTick+0x24>)
 8003266:	6013      	str	r3, [r2, #0]
}
 8003268:	bf00      	nop
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	2000007c 	.word	0x2000007c
 8003278:	2000d948 	.word	0x2000d948

0800327c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  return uwTick;
 8003280:	4b03      	ldr	r3, [pc, #12]	; (8003290 <HAL_GetTick+0x14>)
 8003282:	681b      	ldr	r3, [r3, #0]
}
 8003284:	4618      	mov	r0, r3
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	2000d948 	.word	0x2000d948

08003294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800329c:	f7ff ffee 	bl	800327c <HAL_GetTick>
 80032a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d005      	beq.n	80032ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80032ae:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <HAL_Delay+0x44>)
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	461a      	mov	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4413      	add	r3, r2
 80032b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80032ba:	bf00      	nop
 80032bc:	f7ff ffde 	bl	800327c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d8f7      	bhi.n	80032bc <HAL_Delay+0x28>
  {
  }
}
 80032cc:	bf00      	nop
 80032ce:	bf00      	nop
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	2000007c 	.word	0x2000007c

080032dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032e4:	2300      	movs	r3, #0
 80032e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e033      	b.n	800335a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f7fe fdc0 	bl	8001e80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	2b00      	cmp	r3, #0
 8003318:	d118      	bne.n	800334c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003322:	f023 0302 	bic.w	r3, r3, #2
 8003326:	f043 0202 	orr.w	r2, r3, #2
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fc04 	bl	8003b3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	641a      	str	r2, [r3, #64]	; 0x40
 800334a:	e001      	b.n	8003350 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003358:	7bfb      	ldrb	r3, [r7, #15]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3710      	adds	r7, #16
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_ADC_Start+0x1a>
 800337a:	2302      	movs	r3, #2
 800337c:	e0b2      	b.n	80034e4 <HAL_ADC_Start+0x180>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2201      	movs	r2, #1
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b01      	cmp	r3, #1
 8003392:	d018      	beq.n	80033c6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80033a4:	4b52      	ldr	r3, [pc, #328]	; (80034f0 <HAL_ADC_Start+0x18c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a52      	ldr	r2, [pc, #328]	; (80034f4 <HAL_ADC_Start+0x190>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	0c9a      	lsrs	r2, r3, #18
 80033b0:	4613      	mov	r3, r2
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	4413      	add	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80033b8:	e002      	b.n	80033c0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	3b01      	subs	r3, #1
 80033be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1f9      	bne.n	80033ba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d17a      	bne.n	80034ca <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800340e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003412:	d106      	bne.n	8003422 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003418:	f023 0206 	bic.w	r2, r3, #6
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	645a      	str	r2, [r3, #68]	; 0x44
 8003420:	e002      	b.n	8003428 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003430:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <HAL_ADC_Start+0x194>)
 8003432:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800343c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	2b00      	cmp	r3, #0
 8003448:	d12a      	bne.n	80034a0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a2b      	ldr	r2, [pc, #172]	; (80034fc <HAL_ADC_Start+0x198>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d015      	beq.n	8003480 <HAL_ADC_Start+0x11c>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a29      	ldr	r2, [pc, #164]	; (8003500 <HAL_ADC_Start+0x19c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d105      	bne.n	800346a <HAL_ADC_Start+0x106>
 800345e:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <HAL_ADC_Start+0x194>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 031f 	and.w	r3, r3, #31
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a25      	ldr	r2, [pc, #148]	; (8003504 <HAL_ADC_Start+0x1a0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d136      	bne.n	80034e2 <HAL_ADC_Start+0x17e>
 8003474:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_ADC_Start+0x194>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f003 0310 	and.w	r3, r3, #16
 800347c:	2b00      	cmp	r3, #0
 800347e:	d130      	bne.n	80034e2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d129      	bne.n	80034e2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800349c:	609a      	str	r2, [r3, #8]
 800349e:	e020      	b.n	80034e2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a15      	ldr	r2, [pc, #84]	; (80034fc <HAL_ADC_Start+0x198>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d11b      	bne.n	80034e2 <HAL_ADC_Start+0x17e>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d114      	bne.n	80034e2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80034c6:	609a      	str	r2, [r3, #8]
 80034c8:	e00b      	b.n	80034e2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f043 0210 	orr.w	r2, r3, #16
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034da:	f043 0201 	orr.w	r2, r3, #1
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	20000074 	.word	0x20000074
 80034f4:	431bde83 	.word	0x431bde83
 80034f8:	40012300 	.word	0x40012300
 80034fc:	40012000 	.word	0x40012000
 8003500:	40012100 	.word	0x40012100
 8003504:	40012200 	.word	0x40012200

08003508 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b084      	sub	sp, #16
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003512:	2300      	movs	r3, #0
 8003514:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003524:	d113      	bne.n	800354e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003530:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003534:	d10b      	bne.n	800354e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	f043 0220 	orr.w	r2, r3, #32
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e063      	b.n	8003616 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800354e:	f7ff fe95 	bl	800327c <HAL_GetTick>
 8003552:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003554:	e021      	b.n	800359a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355c:	d01d      	beq.n	800359a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d007      	beq.n	8003574 <HAL_ADC_PollForConversion+0x6c>
 8003564:	f7ff fe8a 	bl	800327c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d212      	bcs.n	800359a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b02      	cmp	r3, #2
 8003580:	d00b      	beq.n	800359a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f043 0204 	orr.w	r2, r3, #4
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e03d      	b.n	8003616 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d1d6      	bne.n	8003556 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0212 	mvn.w	r2, #18
 80035b0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d123      	bne.n	8003614 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d11f      	bne.n	8003614 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035da:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d006      	beq.n	80035f0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d111      	bne.n	8003614 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003600:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d105      	bne.n	8003614 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f043 0201 	orr.w	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3710      	adds	r7, #16
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b084      	sub	sp, #16
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b02      	cmp	r3, #2
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f003 0320 	and.w	r3, r3, #32
 800364e:	2b20      	cmp	r3, #32
 8003650:	bf0c      	ite	eq
 8003652:	2301      	moveq	r3, #1
 8003654:	2300      	movne	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d049      	beq.n	80036f4 <HAL_ADC_IRQHandler+0xd6>
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d046      	beq.n	80036f4 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	d105      	bne.n	800367e <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d12b      	bne.n	80036e4 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003690:	2b00      	cmp	r3, #0
 8003692:	d127      	bne.n	80036e4 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d006      	beq.n	80036b0 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d119      	bne.n	80036e4 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	685a      	ldr	r2, [r3, #4]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0220 	bic.w	r2, r2, #32
 80036be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d105      	bne.n	80036e4 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	f043 0201 	orr.w	r2, r3, #1
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f8e8 	bl	80038ba <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f06f 0212 	mvn.w	r2, #18
 80036f2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0304 	and.w	r3, r3, #4
 80036fe:	2b04      	cmp	r3, #4
 8003700:	bf0c      	ite	eq
 8003702:	2301      	moveq	r3, #1
 8003704:	2300      	movne	r3, #0
 8003706:	b2db      	uxtb	r3, r3
 8003708:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003714:	2b80      	cmp	r3, #128	; 0x80
 8003716:	bf0c      	ite	eq
 8003718:	2301      	moveq	r3, #1
 800371a:	2300      	movne	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d057      	beq.n	80037d6 <HAL_ADC_IRQHandler+0x1b8>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d054      	beq.n	80037d6 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b00      	cmp	r3, #0
 8003736:	d105      	bne.n	8003744 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d139      	bne.n	80037c6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800375c:	2b00      	cmp	r3, #0
 800375e:	d006      	beq.n	800376e <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800376a:	2b00      	cmp	r3, #0
 800376c:	d12b      	bne.n	80037c6 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003778:	2b00      	cmp	r3, #0
 800377a:	d124      	bne.n	80037c6 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003786:	2b00      	cmp	r3, #0
 8003788:	d11d      	bne.n	80037c6 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800378e:	2b00      	cmp	r3, #0
 8003790:	d119      	bne.n	80037c6 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037a0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d105      	bne.n	80037c6 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037be:	f043 0201 	orr.w	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fab4 	bl	8003d34 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 020c 	mvn.w	r2, #12
 80037d4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b40      	cmp	r3, #64	; 0x40
 80037f8:	bf0c      	ite	eq
 80037fa:	2301      	moveq	r3, #1
 80037fc:	2300      	movne	r3, #0
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d017      	beq.n	8003838 <HAL_ADC_IRQHandler+0x21a>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d014      	beq.n	8003838 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d10d      	bne.n	8003838 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f850 	bl	80038ce <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f06f 0201 	mvn.w	r2, #1
 8003836:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 0320 	and.w	r3, r3, #32
 8003842:	2b20      	cmp	r3, #32
 8003844:	bf0c      	ite	eq
 8003846:	2301      	moveq	r3, #1
 8003848:	2300      	movne	r3, #0
 800384a:	b2db      	uxtb	r3, r3
 800384c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003858:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800385c:	bf0c      	ite	eq
 800385e:	2301      	moveq	r3, #1
 8003860:	2300      	movne	r3, #0
 8003862:	b2db      	uxtb	r3, r3
 8003864:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d015      	beq.n	8003898 <HAL_ADC_IRQHandler+0x27a>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d012      	beq.n	8003898 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003876:	f043 0202 	orr.w	r2, r3, #2
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f06f 0220 	mvn.w	r2, #32
 8003886:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f82a 	bl	80038e2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f06f 0220 	mvn.w	r2, #32
 8003896:	601a      	str	r2, [r3, #0]
  }
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80038c2:	bf00      	nop
 80038c4:	370c      	adds	r7, #12
 80038c6:	46bd      	mov	sp, r7
 80038c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038cc:	4770      	bx	lr

080038ce <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_ADC_ConfigChannel+0x1c>
 8003910:	2302      	movs	r3, #2
 8003912:	e105      	b.n	8003b20 <HAL_ADC_ConfigChannel+0x228>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b09      	cmp	r3, #9
 8003922:	d925      	bls.n	8003970 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68d9      	ldr	r1, [r3, #12]
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	b29b      	uxth	r3, r3
 8003930:	461a      	mov	r2, r3
 8003932:	4613      	mov	r3, r2
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	4413      	add	r3, r2
 8003938:	3b1e      	subs	r3, #30
 800393a:	2207      	movs	r2, #7
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	43da      	mvns	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	400a      	ands	r2, r1
 8003948:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68d9      	ldr	r1, [r3, #12]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	b29b      	uxth	r3, r3
 800395a:	4618      	mov	r0, r3
 800395c:	4603      	mov	r3, r0
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	4403      	add	r3, r0
 8003962:	3b1e      	subs	r3, #30
 8003964:	409a      	lsls	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	60da      	str	r2, [r3, #12]
 800396e:	e022      	b.n	80039b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	6919      	ldr	r1, [r3, #16]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	b29b      	uxth	r3, r3
 800397c:	461a      	mov	r2, r3
 800397e:	4613      	mov	r3, r2
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	4413      	add	r3, r2
 8003984:	2207      	movs	r2, #7
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43da      	mvns	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	400a      	ands	r2, r1
 8003992:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6919      	ldr	r1, [r3, #16]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	4618      	mov	r0, r3
 80039a6:	4603      	mov	r3, r0
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	4403      	add	r3, r0
 80039ac:	409a      	lsls	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b06      	cmp	r3, #6
 80039bc:	d824      	bhi.n	8003a08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	3b05      	subs	r3, #5
 80039d0:	221f      	movs	r2, #31
 80039d2:	fa02 f303 	lsl.w	r3, r2, r3
 80039d6:	43da      	mvns	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	400a      	ands	r2, r1
 80039de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	4618      	mov	r0, r3
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	3b05      	subs	r3, #5
 80039fa:	fa00 f203 	lsl.w	r2, r0, r3
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	635a      	str	r2, [r3, #52]	; 0x34
 8003a06:	e04c      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	2b0c      	cmp	r3, #12
 8003a0e:	d824      	bhi.n	8003a5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685a      	ldr	r2, [r3, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	3b23      	subs	r3, #35	; 0x23
 8003a22:	221f      	movs	r2, #31
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	43da      	mvns	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	400a      	ands	r2, r1
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	b29b      	uxth	r3, r3
 8003a3e:	4618      	mov	r0, r3
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	3b23      	subs	r3, #35	; 0x23
 8003a4c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	430a      	orrs	r2, r1
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
 8003a58:	e023      	b.n	8003aa2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	4413      	add	r3, r2
 8003a6a:	3b41      	subs	r3, #65	; 0x41
 8003a6c:	221f      	movs	r2, #31
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	43da      	mvns	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	400a      	ands	r2, r1
 8003a7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	4618      	mov	r0, r3
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	4413      	add	r3, r2
 8003a94:	3b41      	subs	r3, #65	; 0x41
 8003a96:	fa00 f203 	lsl.w	r2, r0, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <HAL_ADC_ConfigChannel+0x234>)
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a21      	ldr	r2, [pc, #132]	; (8003b30 <HAL_ADC_ConfigChannel+0x238>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d109      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x1cc>
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b12      	cmp	r3, #18
 8003ab6:	d105      	bne.n	8003ac4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a19      	ldr	r2, [pc, #100]	; (8003b30 <HAL_ADC_ConfigChannel+0x238>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d123      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x21e>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d003      	beq.n	8003ade <HAL_ADC_ConfigChannel+0x1e6>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2b11      	cmp	r3, #17
 8003adc:	d11b      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	2b10      	cmp	r3, #16
 8003af0:	d111      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003af2:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <HAL_ADC_ConfigChannel+0x23c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a10      	ldr	r2, [pc, #64]	; (8003b38 <HAL_ADC_ConfigChannel+0x240>)
 8003af8:	fba2 2303 	umull	r2, r3, r2, r3
 8003afc:	0c9a      	lsrs	r2, r3, #18
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b08:	e002      	b.n	8003b10 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	3b01      	subs	r3, #1
 8003b0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d1f9      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3714      	adds	r7, #20
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr
 8003b2c:	40012300 	.word	0x40012300
 8003b30:	40012000 	.word	0x40012000
 8003b34:	20000074 	.word	0x20000074
 8003b38:	431bde83 	.word	0x431bde83

08003b3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b44:	4b79      	ldr	r3, [pc, #484]	; (8003d2c <ADC_Init+0x1f0>)
 8003b46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	431a      	orrs	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6859      	ldr	r1, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	021a      	lsls	r2, r3, #8
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6899      	ldr	r1, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	4a58      	ldr	r2, [pc, #352]	; (8003d30 <ADC_Init+0x1f4>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d022      	beq.n	8003c1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003be2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6899      	ldr	r1, [r3, #8]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6899      	ldr	r1, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	e00f      	b.n	8003c3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689a      	ldr	r2, [r3, #8]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0202 	bic.w	r2, r2, #2
 8003c48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6899      	ldr	r1, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	7e1b      	ldrb	r3, [r3, #24]
 8003c54:	005a      	lsls	r2, r3, #1
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01b      	beq.n	8003ca0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685a      	ldr	r2, [r3, #4]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	685a      	ldr	r2, [r3, #4]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003c86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6859      	ldr	r1, [r3, #4]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	3b01      	subs	r3, #1
 8003c94:	035a      	lsls	r2, r3, #13
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	605a      	str	r2, [r3, #4]
 8003c9e:	e007      	b.n	8003cb0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	051a      	lsls	r2, r3, #20
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689a      	ldr	r2, [r3, #8]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003ce4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6899      	ldr	r1, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003cf2:	025a      	lsls	r2, r3, #9
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6899      	ldr	r1, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	029a      	lsls	r2, r3, #10
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	609a      	str	r2, [r3, #8]
}
 8003d20:	bf00      	nop
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40012300 	.word	0x40012300
 8003d30:	0f000001 	.word	0x0f000001

08003d34 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d58:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <__NVIC_SetPriorityGrouping+0x44>)
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d64:	4013      	ands	r3, r2
 8003d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d7a:	4a04      	ldr	r2, [pc, #16]	; (8003d8c <__NVIC_SetPriorityGrouping+0x44>)
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	60d3      	str	r3, [r2, #12]
}
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	e000ed00 	.word	0xe000ed00

08003d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d94:	4b04      	ldr	r3, [pc, #16]	; (8003da8 <__NVIC_GetPriorityGrouping+0x18>)
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	0a1b      	lsrs	r3, r3, #8
 8003d9a:	f003 0307 	and.w	r3, r3, #7
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	e000ed00 	.word	0xe000ed00

08003dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	4603      	mov	r3, r0
 8003db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	db0b      	blt.n	8003dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	f003 021f 	and.w	r2, r3, #31
 8003dc4:	4907      	ldr	r1, [pc, #28]	; (8003de4 <__NVIC_EnableIRQ+0x38>)
 8003dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	2001      	movs	r0, #1
 8003dce:	fa00 f202 	lsl.w	r2, r0, r2
 8003dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	e000e100 	.word	0xe000e100

08003de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	4603      	mov	r3, r0
 8003df0:	6039      	str	r1, [r7, #0]
 8003df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	db0a      	blt.n	8003e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	490c      	ldr	r1, [pc, #48]	; (8003e34 <__NVIC_SetPriority+0x4c>)
 8003e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e06:	0112      	lsls	r2, r2, #4
 8003e08:	b2d2      	uxtb	r2, r2
 8003e0a:	440b      	add	r3, r1
 8003e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e10:	e00a      	b.n	8003e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	b2da      	uxtb	r2, r3
 8003e16:	4908      	ldr	r1, [pc, #32]	; (8003e38 <__NVIC_SetPriority+0x50>)
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	3b04      	subs	r3, #4
 8003e20:	0112      	lsls	r2, r2, #4
 8003e22:	b2d2      	uxtb	r2, r2
 8003e24:	440b      	add	r3, r1
 8003e26:	761a      	strb	r2, [r3, #24]
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr
 8003e34:	e000e100 	.word	0xe000e100
 8003e38:	e000ed00 	.word	0xe000ed00

08003e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b089      	sub	sp, #36	; 0x24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f1c3 0307 	rsb	r3, r3, #7
 8003e56:	2b04      	cmp	r3, #4
 8003e58:	bf28      	it	cs
 8003e5a:	2304      	movcs	r3, #4
 8003e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	3304      	adds	r3, #4
 8003e62:	2b06      	cmp	r3, #6
 8003e64:	d902      	bls.n	8003e6c <NVIC_EncodePriority+0x30>
 8003e66:	69fb      	ldr	r3, [r7, #28]
 8003e68:	3b03      	subs	r3, #3
 8003e6a:	e000      	b.n	8003e6e <NVIC_EncodePriority+0x32>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e70:	f04f 32ff 	mov.w	r2, #4294967295
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43da      	mvns	r2, r3
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	401a      	ands	r2, r3
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e84:	f04f 31ff 	mov.w	r1, #4294967295
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e8e:	43d9      	mvns	r1, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e94:	4313      	orrs	r3, r2
         );
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3724      	adds	r7, #36	; 0x24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003eb4:	d301      	bcc.n	8003eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e00f      	b.n	8003eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eba:	4a0a      	ldr	r2, [pc, #40]	; (8003ee4 <SysTick_Config+0x40>)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ec2:	210f      	movs	r1, #15
 8003ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ec8:	f7ff ff8e 	bl	8003de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ecc:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <SysTick_Config+0x40>)
 8003ece:	2200      	movs	r2, #0
 8003ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ed2:	4b04      	ldr	r3, [pc, #16]	; (8003ee4 <SysTick_Config+0x40>)
 8003ed4:	2207      	movs	r2, #7
 8003ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	e000e010 	.word	0xe000e010

08003ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f7ff ff29 	bl	8003d48 <__NVIC_SetPriorityGrouping>
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b086      	sub	sp, #24
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	4603      	mov	r3, r0
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	607a      	str	r2, [r7, #4]
 8003f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f10:	f7ff ff3e 	bl	8003d90 <__NVIC_GetPriorityGrouping>
 8003f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	6978      	ldr	r0, [r7, #20]
 8003f1c:	f7ff ff8e 	bl	8003e3c <NVIC_EncodePriority>
 8003f20:	4602      	mov	r2, r0
 8003f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ff5d 	bl	8003de8 <__NVIC_SetPriority>
}
 8003f2e:	bf00      	nop
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7ff ff31 	bl	8003dac <__NVIC_EnableIRQ>
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b082      	sub	sp, #8
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff ffa2 	bl	8003ea4 <SysTick_Config>
 8003f60:	4603      	mov	r3, r0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f78:	f7ff f980 	bl	800327c <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e099      	b.n	80040bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0201 	bic.w	r2, r2, #1
 8003fa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fa8:	e00f      	b.n	8003fca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003faa:	f7ff f967 	bl	800327c <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b05      	cmp	r3, #5
 8003fb6:	d908      	bls.n	8003fca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2203      	movs	r2, #3
 8003fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	e078      	b.n	80040bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e8      	bne.n	8003faa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4b38      	ldr	r3, [pc, #224]	; (80040c4 <HAL_DMA_Init+0x158>)
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a1b      	ldr	r3, [r3, #32]
 8004014:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	4313      	orrs	r3, r2
 800401a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	2b04      	cmp	r3, #4
 8004022:	d107      	bne.n	8004034 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800402c:	4313      	orrs	r3, r2
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	4313      	orrs	r3, r2
 8004032:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	695b      	ldr	r3, [r3, #20]
 8004042:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f023 0307 	bic.w	r3, r3, #7
 800404a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	2b04      	cmp	r3, #4
 800405c:	d117      	bne.n	800408e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00e      	beq.n	800408e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 fb01 	bl	8004678 <DMA_CheckFifoParam>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d008      	beq.n	800408e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2240      	movs	r2, #64	; 0x40
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800408a:	2301      	movs	r3, #1
 800408c:	e016      	b.n	80040bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fab8 	bl	800460c <DMA_CalcBaseAndBitshift>
 800409c:	4603      	mov	r3, r0
 800409e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	223f      	movs	r2, #63	; 0x3f
 80040a6:	409a      	lsls	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	f010803f 	.word	0xf010803f

080040c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040d6:	2300      	movs	r3, #0
 80040d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_DMA_Start_IT+0x26>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e040      	b.n	8004170 <HAL_DMA_Start_IT+0xa8>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d12f      	bne.n	8004162 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2202      	movs	r2, #2
 8004106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68b9      	ldr	r1, [r7, #8]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fa4a 	bl	80045b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004120:	223f      	movs	r2, #63	; 0x3f
 8004122:	409a      	lsls	r2, r3
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f042 0216 	orr.w	r2, r2, #22
 8004136:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	2b00      	cmp	r3, #0
 800413e:	d007      	beq.n	8004150 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0208 	orr.w	r2, r2, #8
 800414e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0201 	orr.w	r2, r2, #1
 800415e:	601a      	str	r2, [r3, #0]
 8004160:	e005      	b.n	800416e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800416a:	2302      	movs	r3, #2
 800416c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800416e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3718      	adds	r7, #24
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004184:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004186:	f7ff f879 	bl	800327c <HAL_GetTick>
 800418a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b02      	cmp	r3, #2
 8004196:	d008      	beq.n	80041aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2280      	movs	r2, #128	; 0x80
 800419c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e052      	b.n	8004250 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0216 	bic.w	r2, r2, #22
 80041b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <HAL_DMA_Abort+0x62>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d007      	beq.n	80041ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0208 	bic.w	r2, r2, #8
 80041e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0201 	bic.w	r2, r2, #1
 80041f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041fa:	e013      	b.n	8004224 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041fc:	f7ff f83e 	bl	800327c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b05      	cmp	r3, #5
 8004208:	d90c      	bls.n	8004224 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2203      	movs	r2, #3
 800421c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e015      	b.n	8004250 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e4      	bne.n	80041fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004236:	223f      	movs	r2, #63	; 0x3f
 8004238:	409a      	lsls	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	3710      	adds	r7, #16
 8004254:	46bd      	mov	sp, r7
 8004256:	bd80      	pop	{r7, pc}

08004258 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004266:	b2db      	uxtb	r3, r3
 8004268:	2b02      	cmp	r3, #2
 800426a:	d004      	beq.n	8004276 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2280      	movs	r2, #128	; 0x80
 8004270:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e00c      	b.n	8004290 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2205      	movs	r2, #5
 800427a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0201 	bic.w	r2, r2, #1
 800428c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042a4:	2300      	movs	r3, #0
 80042a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042a8:	4b92      	ldr	r3, [pc, #584]	; (80044f4 <HAL_DMA_IRQHandler+0x258>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a92      	ldr	r2, [pc, #584]	; (80044f8 <HAL_DMA_IRQHandler+0x25c>)
 80042ae:	fba2 2303 	umull	r2, r3, r2, r3
 80042b2:	0a9b      	lsrs	r3, r3, #10
 80042b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c6:	2208      	movs	r2, #8
 80042c8:	409a      	lsls	r2, r3
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	4013      	ands	r3, r2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d01a      	beq.n	8004308 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d013      	beq.n	8004308 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f022 0204 	bic.w	r2, r2, #4
 80042ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f4:	2208      	movs	r2, #8
 80042f6:	409a      	lsls	r2, r3
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	f043 0201 	orr.w	r2, r3, #1
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430c:	2201      	movs	r2, #1
 800430e:	409a      	lsls	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4013      	ands	r3, r2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d012      	beq.n	800433e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00b      	beq.n	800433e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	2201      	movs	r2, #1
 800432c:	409a      	lsls	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	f043 0202 	orr.w	r2, r3, #2
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004342:	2204      	movs	r2, #4
 8004344:	409a      	lsls	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	4013      	ands	r3, r2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d012      	beq.n	8004374 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00b      	beq.n	8004374 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004360:	2204      	movs	r2, #4
 8004362:	409a      	lsls	r2, r3
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436c:	f043 0204 	orr.w	r2, r3, #4
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	2210      	movs	r2, #16
 800437a:	409a      	lsls	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4013      	ands	r3, r2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d043      	beq.n	800440c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d03c      	beq.n	800440c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004396:	2210      	movs	r2, #16
 8004398:	409a      	lsls	r2, r3
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d018      	beq.n	80043de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d108      	bne.n	80043cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d024      	beq.n	800440c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	4798      	blx	r3
 80043ca:	e01f      	b.n	800440c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d01b      	beq.n	800440c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
 80043dc:	e016      	b.n	800440c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d107      	bne.n	80043fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0208 	bic.w	r2, r2, #8
 80043fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	2b00      	cmp	r3, #0
 8004402:	d003      	beq.n	800440c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004410:	2220      	movs	r2, #32
 8004412:	409a      	lsls	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	4013      	ands	r3, r2
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 808e 	beq.w	800453a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 8086 	beq.w	800453a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004432:	2220      	movs	r2, #32
 8004434:	409a      	lsls	r2, r3
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b05      	cmp	r3, #5
 8004444:	d136      	bne.n	80044b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0216 	bic.w	r2, r2, #22
 8004454:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	695a      	ldr	r2, [r3, #20]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004464:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d103      	bne.n	8004476 <HAL_DMA_IRQHandler+0x1da>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004472:	2b00      	cmp	r3, #0
 8004474:	d007      	beq.n	8004486 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0208 	bic.w	r2, r2, #8
 8004484:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448a:	223f      	movs	r2, #63	; 0x3f
 800448c:	409a      	lsls	r2, r3
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d07d      	beq.n	80045a6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	4798      	blx	r3
        }
        return;
 80044b2:	e078      	b.n	80045a6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d01c      	beq.n	80044fc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d108      	bne.n	80044e2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d030      	beq.n	800453a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	4798      	blx	r3
 80044e0:	e02b      	b.n	800453a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d027      	beq.n	800453a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	4798      	blx	r3
 80044f2:	e022      	b.n	800453a <HAL_DMA_IRQHandler+0x29e>
 80044f4:	20000074 	.word	0x20000074
 80044f8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10f      	bne.n	800452a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0210 	bic.w	r2, r2, #16
 8004518:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	2b00      	cmp	r3, #0
 8004540:	d032      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d022      	beq.n	8004594 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2205      	movs	r2, #5
 8004552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0201 	bic.w	r2, r2, #1
 8004564:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	3301      	adds	r3, #1
 800456a:	60bb      	str	r3, [r7, #8]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	429a      	cmp	r2, r3
 8004570:	d307      	bcc.n	8004582 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f2      	bne.n	8004566 <HAL_DMA_IRQHandler+0x2ca>
 8004580:	e000      	b.n	8004584 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004582:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004598:	2b00      	cmp	r3, #0
 800459a:	d005      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	4798      	blx	r3
 80045a4:	e000      	b.n	80045a8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80045a6:	bf00      	nop
    }
  }
}
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop

080045b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	683a      	ldr	r2, [r7, #0]
 80045d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b40      	cmp	r3, #64	; 0x40
 80045dc:	d108      	bne.n	80045f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045ee:	e007      	b.n	8004600 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	60da      	str	r2, [r3, #12]
}
 8004600:	bf00      	nop
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	3b10      	subs	r3, #16
 800461c:	4a14      	ldr	r2, [pc, #80]	; (8004670 <DMA_CalcBaseAndBitshift+0x64>)
 800461e:	fba2 2303 	umull	r2, r3, r2, r3
 8004622:	091b      	lsrs	r3, r3, #4
 8004624:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004626:	4a13      	ldr	r2, [pc, #76]	; (8004674 <DMA_CalcBaseAndBitshift+0x68>)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	4413      	add	r3, r2
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2b03      	cmp	r3, #3
 8004638:	d909      	bls.n	800464e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	1d1a      	adds	r2, r3, #4
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	659a      	str	r2, [r3, #88]	; 0x58
 800464c:	e007      	b.n	800465e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004656:	f023 0303 	bic.w	r3, r3, #3
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004662:	4618      	mov	r0, r3
 8004664:	3714      	adds	r7, #20
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	aaaaaaab 	.word	0xaaaaaaab
 8004674:	0800f9e0 	.word	0x0800f9e0

08004678 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004688:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d11f      	bne.n	80046d2 <DMA_CheckFifoParam+0x5a>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b03      	cmp	r3, #3
 8004696:	d856      	bhi.n	8004746 <DMA_CheckFifoParam+0xce>
 8004698:	a201      	add	r2, pc, #4	; (adr r2, 80046a0 <DMA_CheckFifoParam+0x28>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	080046b1 	.word	0x080046b1
 80046a4:	080046c3 	.word	0x080046c3
 80046a8:	080046b1 	.word	0x080046b1
 80046ac:	08004747 	.word	0x08004747
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d046      	beq.n	800474a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c0:	e043      	b.n	800474a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046ca:	d140      	bne.n	800474e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d0:	e03d      	b.n	800474e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046da:	d121      	bne.n	8004720 <DMA_CheckFifoParam+0xa8>
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	2b03      	cmp	r3, #3
 80046e0:	d837      	bhi.n	8004752 <DMA_CheckFifoParam+0xda>
 80046e2:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <DMA_CheckFifoParam+0x70>)
 80046e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e8:	080046f9 	.word	0x080046f9
 80046ec:	080046ff 	.word	0x080046ff
 80046f0:	080046f9 	.word	0x080046f9
 80046f4:	08004711 	.word	0x08004711
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	73fb      	strb	r3, [r7, #15]
      break;
 80046fc:	e030      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d025      	beq.n	8004756 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800470e:	e022      	b.n	8004756 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004718:	d11f      	bne.n	800475a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800471e:	e01c      	b.n	800475a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b02      	cmp	r3, #2
 8004724:	d903      	bls.n	800472e <DMA_CheckFifoParam+0xb6>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b03      	cmp	r3, #3
 800472a:	d003      	beq.n	8004734 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800472c:	e018      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	73fb      	strb	r3, [r7, #15]
      break;
 8004732:	e015      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00e      	beq.n	800475e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      break;
 8004744:	e00b      	b.n	800475e <DMA_CheckFifoParam+0xe6>
      break;
 8004746:	bf00      	nop
 8004748:	e00a      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;
 800474a:	bf00      	nop
 800474c:	e008      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;
 800474e:	bf00      	nop
 8004750:	e006      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;
 8004752:	bf00      	nop
 8004754:	e004      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;
 8004756:	bf00      	nop
 8004758:	e002      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;   
 800475a:	bf00      	nop
 800475c:	e000      	b.n	8004760 <DMA_CheckFifoParam+0xe8>
      break;
 800475e:	bf00      	nop
    }
  } 
  
  return status; 
 8004760:	7bfb      	ldrb	r3, [r7, #15]
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop

08004770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004770:	b480      	push	{r7}
 8004772:	b089      	sub	sp, #36	; 0x24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800477a:	2300      	movs	r3, #0
 800477c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800477e:	2300      	movs	r3, #0
 8004780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004782:	2300      	movs	r3, #0
 8004784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004786:	2300      	movs	r3, #0
 8004788:	61fb      	str	r3, [r7, #28]
 800478a:	e16b      	b.n	8004a64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800478c:	2201      	movs	r2, #1
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4013      	ands	r3, r2
 800479e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	f040 815a 	bne.w	8004a5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f003 0303 	and.w	r3, r3, #3
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d005      	beq.n	80047c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d130      	bne.n	8004824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	005b      	lsls	r3, r3, #1
 80047cc:	2203      	movs	r2, #3
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	43db      	mvns	r3, r3
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	4013      	ands	r3, r2
 80047d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	fa02 f303 	lsl.w	r3, r2, r3
 80047e6:	69ba      	ldr	r2, [r7, #24]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047f8:	2201      	movs	r2, #1
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	091b      	lsrs	r3, r3, #4
 800480e:	f003 0201 	and.w	r2, r3, #1
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f003 0303 	and.w	r3, r3, #3
 800482c:	2b03      	cmp	r3, #3
 800482e:	d017      	beq.n	8004860 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	2203      	movs	r2, #3
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	4013      	ands	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	69ba      	ldr	r2, [r7, #24]
 8004856:	4313      	orrs	r3, r2
 8004858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 0303 	and.w	r3, r3, #3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d123      	bne.n	80048b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	08da      	lsrs	r2, r3, #3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3208      	adds	r2, #8
 8004874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	220f      	movs	r2, #15
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	43db      	mvns	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	691a      	ldr	r2, [r3, #16]
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	f003 0307 	and.w	r3, r3, #7
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	fa02 f303 	lsl.w	r3, r2, r3
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	08da      	lsrs	r2, r3, #3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3208      	adds	r2, #8
 80048ae:	69b9      	ldr	r1, [r7, #24]
 80048b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	2203      	movs	r2, #3
 80048c0:	fa02 f303 	lsl.w	r3, r2, r3
 80048c4:	43db      	mvns	r3, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4013      	ands	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f003 0203 	and.w	r2, r3, #3
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	fa02 f303 	lsl.w	r3, r2, r3
 80048dc:	69ba      	ldr	r2, [r7, #24]
 80048de:	4313      	orrs	r3, r2
 80048e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	69ba      	ldr	r2, [r7, #24]
 80048e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	f000 80b4 	beq.w	8004a5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
 80048fa:	4b60      	ldr	r3, [pc, #384]	; (8004a7c <HAL_GPIO_Init+0x30c>)
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	4a5f      	ldr	r2, [pc, #380]	; (8004a7c <HAL_GPIO_Init+0x30c>)
 8004900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004904:	6453      	str	r3, [r2, #68]	; 0x44
 8004906:	4b5d      	ldr	r3, [pc, #372]	; (8004a7c <HAL_GPIO_Init+0x30c>)
 8004908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800490e:	60fb      	str	r3, [r7, #12]
 8004910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004912:	4a5b      	ldr	r2, [pc, #364]	; (8004a80 <HAL_GPIO_Init+0x310>)
 8004914:	69fb      	ldr	r3, [r7, #28]
 8004916:	089b      	lsrs	r3, r3, #2
 8004918:	3302      	adds	r3, #2
 800491a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800491e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f003 0303 	and.w	r3, r3, #3
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	220f      	movs	r2, #15
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	43db      	mvns	r3, r3
 8004930:	69ba      	ldr	r2, [r7, #24]
 8004932:	4013      	ands	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a52      	ldr	r2, [pc, #328]	; (8004a84 <HAL_GPIO_Init+0x314>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d02b      	beq.n	8004996 <HAL_GPIO_Init+0x226>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a51      	ldr	r2, [pc, #324]	; (8004a88 <HAL_GPIO_Init+0x318>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d025      	beq.n	8004992 <HAL_GPIO_Init+0x222>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a50      	ldr	r2, [pc, #320]	; (8004a8c <HAL_GPIO_Init+0x31c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d01f      	beq.n	800498e <HAL_GPIO_Init+0x21e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a4f      	ldr	r2, [pc, #316]	; (8004a90 <HAL_GPIO_Init+0x320>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d019      	beq.n	800498a <HAL_GPIO_Init+0x21a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a4e      	ldr	r2, [pc, #312]	; (8004a94 <HAL_GPIO_Init+0x324>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <HAL_GPIO_Init+0x216>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a4d      	ldr	r2, [pc, #308]	; (8004a98 <HAL_GPIO_Init+0x328>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d00d      	beq.n	8004982 <HAL_GPIO_Init+0x212>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a4c      	ldr	r2, [pc, #304]	; (8004a9c <HAL_GPIO_Init+0x32c>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d007      	beq.n	800497e <HAL_GPIO_Init+0x20e>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a4b      	ldr	r2, [pc, #300]	; (8004aa0 <HAL_GPIO_Init+0x330>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d101      	bne.n	800497a <HAL_GPIO_Init+0x20a>
 8004976:	2307      	movs	r3, #7
 8004978:	e00e      	b.n	8004998 <HAL_GPIO_Init+0x228>
 800497a:	2308      	movs	r3, #8
 800497c:	e00c      	b.n	8004998 <HAL_GPIO_Init+0x228>
 800497e:	2306      	movs	r3, #6
 8004980:	e00a      	b.n	8004998 <HAL_GPIO_Init+0x228>
 8004982:	2305      	movs	r3, #5
 8004984:	e008      	b.n	8004998 <HAL_GPIO_Init+0x228>
 8004986:	2304      	movs	r3, #4
 8004988:	e006      	b.n	8004998 <HAL_GPIO_Init+0x228>
 800498a:	2303      	movs	r3, #3
 800498c:	e004      	b.n	8004998 <HAL_GPIO_Init+0x228>
 800498e:	2302      	movs	r3, #2
 8004990:	e002      	b.n	8004998 <HAL_GPIO_Init+0x228>
 8004992:	2301      	movs	r3, #1
 8004994:	e000      	b.n	8004998 <HAL_GPIO_Init+0x228>
 8004996:	2300      	movs	r3, #0
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	f002 0203 	and.w	r2, r2, #3
 800499e:	0092      	lsls	r2, r2, #2
 80049a0:	4093      	lsls	r3, r2
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049a8:	4935      	ldr	r1, [pc, #212]	; (8004a80 <HAL_GPIO_Init+0x310>)
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	089b      	lsrs	r3, r3, #2
 80049ae:	3302      	adds	r3, #2
 80049b0:	69ba      	ldr	r2, [r7, #24]
 80049b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049b6:	4b3b      	ldr	r3, [pc, #236]	; (8004aa4 <HAL_GPIO_Init+0x334>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	43db      	mvns	r3, r3
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	4013      	ands	r3, r2
 80049c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049da:	4a32      	ldr	r2, [pc, #200]	; (8004aa4 <HAL_GPIO_Init+0x334>)
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80049e0:	4b30      	ldr	r3, [pc, #192]	; (8004aa4 <HAL_GPIO_Init+0x334>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	43db      	mvns	r3, r3
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4013      	ands	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a04:	4a27      	ldr	r2, [pc, #156]	; (8004aa4 <HAL_GPIO_Init+0x334>)
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a0a:	4b26      	ldr	r3, [pc, #152]	; (8004aa4 <HAL_GPIO_Init+0x334>)
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	4013      	ands	r3, r2
 8004a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d003      	beq.n	8004a2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a2e:	4a1d      	ldr	r2, [pc, #116]	; (8004aa4 <HAL_GPIO_Init+0x334>)
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a34:	4b1b      	ldr	r3, [pc, #108]	; (8004aa4 <HAL_GPIO_Init+0x334>)
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	69ba      	ldr	r2, [r7, #24]
 8004a40:	4013      	ands	r3, r2
 8004a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d003      	beq.n	8004a58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a50:	69ba      	ldr	r2, [r7, #24]
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a58:	4a12      	ldr	r2, [pc, #72]	; (8004aa4 <HAL_GPIO_Init+0x334>)
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	3301      	adds	r3, #1
 8004a62:	61fb      	str	r3, [r7, #28]
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	2b0f      	cmp	r3, #15
 8004a68:	f67f ae90 	bls.w	800478c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	bf00      	nop
 8004a70:	3724      	adds	r7, #36	; 0x24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	40013800 	.word	0x40013800
 8004a84:	40020000 	.word	0x40020000
 8004a88:	40020400 	.word	0x40020400
 8004a8c:	40020800 	.word	0x40020800
 8004a90:	40020c00 	.word	0x40020c00
 8004a94:	40021000 	.word	0x40021000
 8004a98:	40021400 	.word	0x40021400
 8004a9c:	40021800 	.word	0x40021800
 8004aa0:	40021c00 	.word	0x40021c00
 8004aa4:	40013c00 	.word	0x40013c00

08004aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	807b      	strh	r3, [r7, #2]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ab8:	787b      	ldrb	r3, [r7, #1]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004abe:	887a      	ldrh	r2, [r7, #2]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ac4:	e003      	b.n	8004ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ac6:	887b      	ldrh	r3, [r7, #2]
 8004ac8:	041a      	lsls	r2, r3, #16
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	619a      	str	r2, [r3, #24]
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b085      	sub	sp, #20
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004aec:	887a      	ldrh	r2, [r7, #2]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4013      	ands	r3, r2
 8004af2:	041a      	lsls	r2, r3, #16
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	43d9      	mvns	r1, r3
 8004af8:	887b      	ldrh	r3, [r7, #2]
 8004afa:	400b      	ands	r3, r1
 8004afc:	431a      	orrs	r2, r3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	619a      	str	r2, [r3, #24]
}
 8004b02:	bf00      	nop
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
	...

08004b10 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	4603      	mov	r3, r0
 8004b18:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b1a:	4b08      	ldr	r3, [pc, #32]	; (8004b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b1c:	695a      	ldr	r2, [r3, #20]
 8004b1e:	88fb      	ldrh	r3, [r7, #6]
 8004b20:	4013      	ands	r3, r2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d006      	beq.n	8004b34 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b26:	4a05      	ldr	r2, [pc, #20]	; (8004b3c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b28:	88fb      	ldrh	r3, [r7, #6]
 8004b2a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b2c:	88fb      	ldrh	r3, [r7, #6]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 f806 	bl	8004b40 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b34:	bf00      	nop
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40013c00 	.word	0x40013c00

08004b40 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	4603      	mov	r3, r0
 8004b48:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr
	...

08004b58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e264      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d075      	beq.n	8004c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b76:	4ba3      	ldr	r3, [pc, #652]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d00c      	beq.n	8004b9c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b82:	4ba0      	ldr	r3, [pc, #640]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d112      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b8e:	4b9d      	ldr	r3, [pc, #628]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b9a:	d10b      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b9c:	4b99      	ldr	r3, [pc, #612]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d05b      	beq.n	8004c60 <HAL_RCC_OscConfig+0x108>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d157      	bne.n	8004c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e23f      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bbc:	d106      	bne.n	8004bcc <HAL_RCC_OscConfig+0x74>
 8004bbe:	4b91      	ldr	r3, [pc, #580]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a90      	ldr	r2, [pc, #576]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e01d      	b.n	8004c08 <HAL_RCC_OscConfig+0xb0>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x98>
 8004bd6:	4b8b      	ldr	r3, [pc, #556]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a8a      	ldr	r2, [pc, #552]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004bdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	4b88      	ldr	r3, [pc, #544]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a87      	ldr	r2, [pc, #540]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004be8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	e00b      	b.n	8004c08 <HAL_RCC_OscConfig+0xb0>
 8004bf0:	4b84      	ldr	r3, [pc, #528]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a83      	ldr	r2, [pc, #524]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004bf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	4b81      	ldr	r3, [pc, #516]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a80      	ldr	r2, [pc, #512]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d013      	beq.n	8004c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c10:	f7fe fb34 	bl	800327c <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c18:	f7fe fb30 	bl	800327c <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b64      	cmp	r3, #100	; 0x64
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e204      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2a:	4b76      	ldr	r3, [pc, #472]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0xc0>
 8004c36:	e014      	b.n	8004c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7fe fb20 	bl	800327c <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c40:	f7fe fb1c 	bl	800327c <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b64      	cmp	r3, #100	; 0x64
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e1f0      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c52:	4b6c      	ldr	r3, [pc, #432]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0xe8>
 8004c5e:	e000      	b.n	8004c62 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d063      	beq.n	8004d36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c6e:	4b65      	ldr	r3, [pc, #404]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 030c 	and.w	r3, r3, #12
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c7a:	4b62      	ldr	r3, [pc, #392]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d11c      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c86:	4b5f      	ldr	r3, [pc, #380]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d116      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c92:	4b5c      	ldr	r3, [pc, #368]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <HAL_RCC_OscConfig+0x152>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d001      	beq.n	8004caa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e1c4      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004caa:	4b56      	ldr	r3, [pc, #344]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	4952      	ldr	r1, [pc, #328]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cbe:	e03a      	b.n	8004d36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d020      	beq.n	8004d0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc8:	4b4f      	ldr	r3, [pc, #316]	; (8004e08 <HAL_RCC_OscConfig+0x2b0>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cce:	f7fe fad5 	bl	800327c <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cd6:	f7fe fad1 	bl	800327c <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e1a5      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce8:	4b46      	ldr	r3, [pc, #280]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf4:	4b43      	ldr	r3, [pc, #268]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	4940      	ldr	r1, [pc, #256]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	600b      	str	r3, [r1, #0]
 8004d08:	e015      	b.n	8004d36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d0a:	4b3f      	ldr	r3, [pc, #252]	; (8004e08 <HAL_RCC_OscConfig+0x2b0>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d10:	f7fe fab4 	bl	800327c <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d18:	f7fe fab0 	bl	800327c <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e184      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2a:	4b36      	ldr	r3, [pc, #216]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d030      	beq.n	8004da4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d016      	beq.n	8004d78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d4a:	4b30      	ldr	r3, [pc, #192]	; (8004e0c <HAL_RCC_OscConfig+0x2b4>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d50:	f7fe fa94 	bl	800327c <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d58:	f7fe fa90 	bl	800327c <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e164      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d6a:	4b26      	ldr	r3, [pc, #152]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0x200>
 8004d76:	e015      	b.n	8004da4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d78:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <HAL_RCC_OscConfig+0x2b4>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d7e:	f7fe fa7d 	bl	800327c <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d86:	f7fe fa79 	bl	800327c <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e14d      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d98:	4b1a      	ldr	r3, [pc, #104]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f0      	bne.n	8004d86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 0304 	and.w	r3, r3, #4
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80a0 	beq.w	8004ef2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004db2:	2300      	movs	r3, #0
 8004db4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004db6:	4b13      	ldr	r3, [pc, #76]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10f      	bne.n	8004de2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60bb      	str	r3, [r7, #8]
 8004dc6:	4b0f      	ldr	r3, [pc, #60]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	4a0e      	ldr	r2, [pc, #56]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd2:	4b0c      	ldr	r3, [pc, #48]	; (8004e04 <HAL_RCC_OscConfig+0x2ac>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dda:	60bb      	str	r3, [r7, #8]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dde:	2301      	movs	r3, #1
 8004de0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de2:	4b0b      	ldr	r3, [pc, #44]	; (8004e10 <HAL_RCC_OscConfig+0x2b8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d121      	bne.n	8004e32 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dee:	4b08      	ldr	r3, [pc, #32]	; (8004e10 <HAL_RCC_OscConfig+0x2b8>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	4a07      	ldr	r2, [pc, #28]	; (8004e10 <HAL_RCC_OscConfig+0x2b8>)
 8004df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dfa:	f7fe fa3f 	bl	800327c <HAL_GetTick>
 8004dfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e00:	e011      	b.n	8004e26 <HAL_RCC_OscConfig+0x2ce>
 8004e02:	bf00      	nop
 8004e04:	40023800 	.word	0x40023800
 8004e08:	42470000 	.word	0x42470000
 8004e0c:	42470e80 	.word	0x42470e80
 8004e10:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e14:	f7fe fa32 	bl	800327c <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e106      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e26:	4b85      	ldr	r3, [pc, #532]	; (800503c <HAL_RCC_OscConfig+0x4e4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d106      	bne.n	8004e48 <HAL_RCC_OscConfig+0x2f0>
 8004e3a:	4b81      	ldr	r3, [pc, #516]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3e:	4a80      	ldr	r2, [pc, #512]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004e40:	f043 0301 	orr.w	r3, r3, #1
 8004e44:	6713      	str	r3, [r2, #112]	; 0x70
 8004e46:	e01c      	b.n	8004e82 <HAL_RCC_OscConfig+0x32a>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	2b05      	cmp	r3, #5
 8004e4e:	d10c      	bne.n	8004e6a <HAL_RCC_OscConfig+0x312>
 8004e50:	4b7b      	ldr	r3, [pc, #492]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	4a7a      	ldr	r2, [pc, #488]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004e56:	f043 0304 	orr.w	r3, r3, #4
 8004e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5c:	4b78      	ldr	r3, [pc, #480]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e60:	4a77      	ldr	r2, [pc, #476]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004e62:	f043 0301 	orr.w	r3, r3, #1
 8004e66:	6713      	str	r3, [r2, #112]	; 0x70
 8004e68:	e00b      	b.n	8004e82 <HAL_RCC_OscConfig+0x32a>
 8004e6a:	4b75      	ldr	r3, [pc, #468]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6e:	4a74      	ldr	r2, [pc, #464]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	6713      	str	r3, [r2, #112]	; 0x70
 8004e76:	4b72      	ldr	r3, [pc, #456]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7a:	4a71      	ldr	r2, [pc, #452]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004e7c:	f023 0304 	bic.w	r3, r3, #4
 8004e80:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d015      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8a:	f7fe f9f7 	bl	800327c <HAL_GetTick>
 8004e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e90:	e00a      	b.n	8004ea8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e92:	f7fe f9f3 	bl	800327c <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d901      	bls.n	8004ea8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e0c5      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea8:	4b65      	ldr	r3, [pc, #404]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eac:	f003 0302 	and.w	r3, r3, #2
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d0ee      	beq.n	8004e92 <HAL_RCC_OscConfig+0x33a>
 8004eb4:	e014      	b.n	8004ee0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb6:	f7fe f9e1 	bl	800327c <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ebc:	e00a      	b.n	8004ed4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ebe:	f7fe f9dd 	bl	800327c <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e0af      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed4:	4b5a      	ldr	r3, [pc, #360]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1ee      	bne.n	8004ebe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ee0:	7dfb      	ldrb	r3, [r7, #23]
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d105      	bne.n	8004ef2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee6:	4b56      	ldr	r3, [pc, #344]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eea:	4a55      	ldr	r2, [pc, #340]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	699b      	ldr	r3, [r3, #24]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 809b 	beq.w	8005032 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004efc:	4b50      	ldr	r3, [pc, #320]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f003 030c 	and.w	r3, r3, #12
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d05c      	beq.n	8004fc2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d141      	bne.n	8004f94 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f10:	4b4c      	ldr	r3, [pc, #304]	; (8005044 <HAL_RCC_OscConfig+0x4ec>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f16:	f7fe f9b1 	bl	800327c <HAL_GetTick>
 8004f1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f1c:	e008      	b.n	8004f30 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f1e:	f7fe f9ad 	bl	800327c <HAL_GetTick>
 8004f22:	4602      	mov	r2, r0
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d901      	bls.n	8004f30 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004f2c:	2303      	movs	r3, #3
 8004f2e:	e081      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f30:	4b43      	ldr	r3, [pc, #268]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1f0      	bne.n	8004f1e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	431a      	orrs	r2, r3
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4a:	019b      	lsls	r3, r3, #6
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f52:	085b      	lsrs	r3, r3, #1
 8004f54:	3b01      	subs	r3, #1
 8004f56:	041b      	lsls	r3, r3, #16
 8004f58:	431a      	orrs	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5e:	061b      	lsls	r3, r3, #24
 8004f60:	4937      	ldr	r1, [pc, #220]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004f62:	4313      	orrs	r3, r2
 8004f64:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f66:	4b37      	ldr	r3, [pc, #220]	; (8005044 <HAL_RCC_OscConfig+0x4ec>)
 8004f68:	2201      	movs	r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f6c:	f7fe f986 	bl	800327c <HAL_GetTick>
 8004f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f74:	f7fe f982 	bl	800327c <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d901      	bls.n	8004f86 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e056      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f86:	4b2e      	ldr	r3, [pc, #184]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCC_OscConfig+0x41c>
 8004f92:	e04e      	b.n	8005032 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f94:	4b2b      	ldr	r3, [pc, #172]	; (8005044 <HAL_RCC_OscConfig+0x4ec>)
 8004f96:	2200      	movs	r2, #0
 8004f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f9a:	f7fe f96f 	bl	800327c <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fa2:	f7fe f96b 	bl	800327c <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e03f      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fb4:	4b22      	ldr	r3, [pc, #136]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1f0      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x44a>
 8004fc0:	e037      	b.n	8005032 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	699b      	ldr	r3, [r3, #24]
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d101      	bne.n	8004fce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e032      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fce:	4b1c      	ldr	r3, [pc, #112]	; (8005040 <HAL_RCC_OscConfig+0x4e8>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	d028      	beq.n	800502e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d121      	bne.n	800502e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d11a      	bne.n	800502e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ffe:	4013      	ands	r3, r2
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005004:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005006:	4293      	cmp	r3, r2
 8005008:	d111      	bne.n	800502e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	085b      	lsrs	r3, r3, #1
 8005016:	3b01      	subs	r3, #1
 8005018:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800501a:	429a      	cmp	r2, r3
 800501c:	d107      	bne.n	800502e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800502a:	429a      	cmp	r2, r3
 800502c:	d001      	beq.n	8005032 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3718      	adds	r7, #24
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}
 800503c:	40007000 	.word	0x40007000
 8005040:	40023800 	.word	0x40023800
 8005044:	42470060 	.word	0x42470060

08005048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0cc      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800505c:	4b68      	ldr	r3, [pc, #416]	; (8005200 <HAL_RCC_ClockConfig+0x1b8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d90c      	bls.n	8005084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506a:	4b65      	ldr	r3, [pc, #404]	; (8005200 <HAL_RCC_ClockConfig+0x1b8>)
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005072:	4b63      	ldr	r3, [pc, #396]	; (8005200 <HAL_RCC_ClockConfig+0x1b8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d001      	beq.n	8005084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0b8      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d020      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800509c:	4b59      	ldr	r3, [pc, #356]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	4a58      	ldr	r2, [pc, #352]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050b4:	4b53      	ldr	r3, [pc, #332]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	4a52      	ldr	r2, [pc, #328]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c0:	4b50      	ldr	r3, [pc, #320]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	494d      	ldr	r1, [pc, #308]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d044      	beq.n	8005168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d107      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e6:	4b47      	ldr	r3, [pc, #284]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d119      	bne.n	8005126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e07f      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d003      	beq.n	8005106 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005102:	2b03      	cmp	r3, #3
 8005104:	d107      	bne.n	8005116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005106:	4b3f      	ldr	r3, [pc, #252]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d109      	bne.n	8005126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e06f      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005116:	4b3b      	ldr	r3, [pc, #236]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e067      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005126:	4b37      	ldr	r3, [pc, #220]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f023 0203 	bic.w	r2, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	4934      	ldr	r1, [pc, #208]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	4313      	orrs	r3, r2
 8005136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005138:	f7fe f8a0 	bl	800327c <HAL_GetTick>
 800513c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513e:	e00a      	b.n	8005156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005140:	f7fe f89c 	bl	800327c <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f241 3288 	movw	r2, #5000	; 0x1388
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e04f      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005156:	4b2b      	ldr	r3, [pc, #172]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 020c 	and.w	r2, r3, #12
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	429a      	cmp	r2, r3
 8005166:	d1eb      	bne.n	8005140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005168:	4b25      	ldr	r3, [pc, #148]	; (8005200 <HAL_RCC_ClockConfig+0x1b8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d20c      	bcs.n	8005190 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005176:	4b22      	ldr	r3, [pc, #136]	; (8005200 <HAL_RCC_ClockConfig+0x1b8>)
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800517e:	4b20      	ldr	r3, [pc, #128]	; (8005200 <HAL_RCC_ClockConfig+0x1b8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d001      	beq.n	8005190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e032      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d008      	beq.n	80051ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800519c:	4b19      	ldr	r3, [pc, #100]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	4916      	ldr	r1, [pc, #88]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d009      	beq.n	80051ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051ba:	4b12      	ldr	r3, [pc, #72]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	490e      	ldr	r1, [pc, #56]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051ce:	f000 f821 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 80051d2:	4602      	mov	r2, r0
 80051d4:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	490a      	ldr	r1, [pc, #40]	; (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 80051e0:	5ccb      	ldrb	r3, [r1, r3]
 80051e2:	fa22 f303 	lsr.w	r3, r2, r3
 80051e6:	4a09      	ldr	r2, [pc, #36]	; (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80051e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051ea:	4b09      	ldr	r3, [pc, #36]	; (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fe f800 	bl	80031f4 <HAL_InitTick>

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40023c00 	.word	0x40023c00
 8005204:	40023800 	.word	0x40023800
 8005208:	0800f7a0 	.word	0x0800f7a0
 800520c:	20000074 	.word	0x20000074
 8005210:	20000078 	.word	0x20000078

08005214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005214:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	607b      	str	r3, [r7, #4]
 8005220:	2300      	movs	r3, #0
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	2300      	movs	r3, #0
 8005226:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800522c:	4b67      	ldr	r3, [pc, #412]	; (80053cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 030c 	and.w	r3, r3, #12
 8005234:	2b08      	cmp	r3, #8
 8005236:	d00d      	beq.n	8005254 <HAL_RCC_GetSysClockFreq+0x40>
 8005238:	2b08      	cmp	r3, #8
 800523a:	f200 80bd 	bhi.w	80053b8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <HAL_RCC_GetSysClockFreq+0x34>
 8005242:	2b04      	cmp	r3, #4
 8005244:	d003      	beq.n	800524e <HAL_RCC_GetSysClockFreq+0x3a>
 8005246:	e0b7      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005248:	4b61      	ldr	r3, [pc, #388]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800524a:	60bb      	str	r3, [r7, #8]
       break;
 800524c:	e0b7      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800524e:	4b61      	ldr	r3, [pc, #388]	; (80053d4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005250:	60bb      	str	r3, [r7, #8]
      break;
 8005252:	e0b4      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005254:	4b5d      	ldr	r3, [pc, #372]	; (80053cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800525c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800525e:	4b5b      	ldr	r3, [pc, #364]	; (80053cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d04d      	beq.n	8005306 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800526a:	4b58      	ldr	r3, [pc, #352]	; (80053cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	099b      	lsrs	r3, r3, #6
 8005270:	461a      	mov	r2, r3
 8005272:	f04f 0300 	mov.w	r3, #0
 8005276:	f240 10ff 	movw	r0, #511	; 0x1ff
 800527a:	f04f 0100 	mov.w	r1, #0
 800527e:	ea02 0800 	and.w	r8, r2, r0
 8005282:	ea03 0901 	and.w	r9, r3, r1
 8005286:	4640      	mov	r0, r8
 8005288:	4649      	mov	r1, r9
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	014b      	lsls	r3, r1, #5
 8005294:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005298:	0142      	lsls	r2, r0, #5
 800529a:	4610      	mov	r0, r2
 800529c:	4619      	mov	r1, r3
 800529e:	ebb0 0008 	subs.w	r0, r0, r8
 80052a2:	eb61 0109 	sbc.w	r1, r1, r9
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	018b      	lsls	r3, r1, #6
 80052b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80052b4:	0182      	lsls	r2, r0, #6
 80052b6:	1a12      	subs	r2, r2, r0
 80052b8:	eb63 0301 	sbc.w	r3, r3, r1
 80052bc:	f04f 0000 	mov.w	r0, #0
 80052c0:	f04f 0100 	mov.w	r1, #0
 80052c4:	00d9      	lsls	r1, r3, #3
 80052c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052ca:	00d0      	lsls	r0, r2, #3
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	eb12 0208 	adds.w	r2, r2, r8
 80052d4:	eb43 0309 	adc.w	r3, r3, r9
 80052d8:	f04f 0000 	mov.w	r0, #0
 80052dc:	f04f 0100 	mov.w	r1, #0
 80052e0:	0259      	lsls	r1, r3, #9
 80052e2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80052e6:	0250      	lsls	r0, r2, #9
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4610      	mov	r0, r2
 80052ee:	4619      	mov	r1, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	f7fb fd26 	bl	8000d48 <__aeabi_uldivmod>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4613      	mov	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	e04a      	b.n	800539c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005306:	4b31      	ldr	r3, [pc, #196]	; (80053cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	099b      	lsrs	r3, r3, #6
 800530c:	461a      	mov	r2, r3
 800530e:	f04f 0300 	mov.w	r3, #0
 8005312:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005316:	f04f 0100 	mov.w	r1, #0
 800531a:	ea02 0400 	and.w	r4, r2, r0
 800531e:	ea03 0501 	and.w	r5, r3, r1
 8005322:	4620      	mov	r0, r4
 8005324:	4629      	mov	r1, r5
 8005326:	f04f 0200 	mov.w	r2, #0
 800532a:	f04f 0300 	mov.w	r3, #0
 800532e:	014b      	lsls	r3, r1, #5
 8005330:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005334:	0142      	lsls	r2, r0, #5
 8005336:	4610      	mov	r0, r2
 8005338:	4619      	mov	r1, r3
 800533a:	1b00      	subs	r0, r0, r4
 800533c:	eb61 0105 	sbc.w	r1, r1, r5
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	f04f 0300 	mov.w	r3, #0
 8005348:	018b      	lsls	r3, r1, #6
 800534a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800534e:	0182      	lsls	r2, r0, #6
 8005350:	1a12      	subs	r2, r2, r0
 8005352:	eb63 0301 	sbc.w	r3, r3, r1
 8005356:	f04f 0000 	mov.w	r0, #0
 800535a:	f04f 0100 	mov.w	r1, #0
 800535e:	00d9      	lsls	r1, r3, #3
 8005360:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005364:	00d0      	lsls	r0, r2, #3
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	1912      	adds	r2, r2, r4
 800536c:	eb45 0303 	adc.w	r3, r5, r3
 8005370:	f04f 0000 	mov.w	r0, #0
 8005374:	f04f 0100 	mov.w	r1, #0
 8005378:	0299      	lsls	r1, r3, #10
 800537a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800537e:	0290      	lsls	r0, r2, #10
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4610      	mov	r0, r2
 8005386:	4619      	mov	r1, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	461a      	mov	r2, r3
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	f7fb fcda 	bl	8000d48 <__aeabi_uldivmod>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4613      	mov	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800539c:	4b0b      	ldr	r3, [pc, #44]	; (80053cc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	0c1b      	lsrs	r3, r3, #16
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	3301      	adds	r3, #1
 80053a8:	005b      	lsls	r3, r3, #1
 80053aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053b4:	60bb      	str	r3, [r7, #8]
      break;
 80053b6:	e002      	b.n	80053be <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053b8:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80053ba:	60bb      	str	r3, [r7, #8]
      break;
 80053bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053be:	68bb      	ldr	r3, [r7, #8]
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80053ca:	bf00      	nop
 80053cc:	40023800 	.word	0x40023800
 80053d0:	00f42400 	.word	0x00f42400
 80053d4:	007a1200 	.word	0x007a1200

080053d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d8:	b480      	push	{r7}
 80053da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053dc:	4b03      	ldr	r3, [pc, #12]	; (80053ec <HAL_RCC_GetHCLKFreq+0x14>)
 80053de:	681b      	ldr	r3, [r3, #0]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	20000074 	.word	0x20000074

080053f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053f4:	f7ff fff0 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 80053f8:	4602      	mov	r2, r0
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	0a9b      	lsrs	r3, r3, #10
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	4903      	ldr	r1, [pc, #12]	; (8005414 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005406:	5ccb      	ldrb	r3, [r1, r3]
 8005408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800540c:	4618      	mov	r0, r3
 800540e:	bd80      	pop	{r7, pc}
 8005410:	40023800 	.word	0x40023800
 8005414:	0800f7b0 	.word	0x0800f7b0

08005418 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800541c:	f7ff ffdc 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 8005420:	4602      	mov	r2, r0
 8005422:	4b05      	ldr	r3, [pc, #20]	; (8005438 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	0b5b      	lsrs	r3, r3, #13
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	4903      	ldr	r1, [pc, #12]	; (800543c <HAL_RCC_GetPCLK2Freq+0x24>)
 800542e:	5ccb      	ldrb	r3, [r1, r3]
 8005430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005434:	4618      	mov	r0, r3
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40023800 	.word	0x40023800
 800543c:	0800f7b0 	.word	0x0800f7b0

08005440 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e041      	b.n	80054d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005458:	b2db      	uxtb	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d106      	bne.n	800546c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7fc fd8e 	bl	8001f88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3304      	adds	r3, #4
 800547c:	4619      	mov	r1, r3
 800547e:	4610      	mov	r0, r2
 8005480:	f001 f890 	bl	80065a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2201      	movs	r2, #1
 80054b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d001      	beq.n	80054f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e04e      	b.n	8005596 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f042 0201 	orr.w	r2, r2, #1
 800550e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a23      	ldr	r2, [pc, #140]	; (80055a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d022      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0x80>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005522:	d01d      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0x80>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a1f      	ldr	r2, [pc, #124]	; (80055a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d018      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0x80>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <HAL_TIM_Base_Start_IT+0xcc>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0x80>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a1c      	ldr	r2, [pc, #112]	; (80055b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d00e      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0x80>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a1b      	ldr	r2, [pc, #108]	; (80055b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d009      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0x80>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a19      	ldr	r2, [pc, #100]	; (80055b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d004      	beq.n	8005560 <HAL_TIM_Base_Start_IT+0x80>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a18      	ldr	r2, [pc, #96]	; (80055bc <HAL_TIM_Base_Start_IT+0xdc>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d111      	bne.n	8005584 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b06      	cmp	r3, #6
 8005570:	d010      	beq.n	8005594 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f042 0201 	orr.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005582:	e007      	b.n	8005594 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f042 0201 	orr.w	r2, r2, #1
 8005592:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005594:	2300      	movs	r3, #0
}
 8005596:	4618      	mov	r0, r3
 8005598:	3714      	adds	r7, #20
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40010000 	.word	0x40010000
 80055a8:	40000400 	.word	0x40000400
 80055ac:	40000800 	.word	0x40000800
 80055b0:	40000c00 	.word	0x40000c00
 80055b4:	40010400 	.word	0x40010400
 80055b8:	40014000 	.word	0x40014000
 80055bc:	40001800 	.word	0x40001800

080055c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e041      	b.n	8005656 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f839 	bl	800565e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f000 ffd0 	bl	80065a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3708      	adds	r7, #8
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d109      	bne.n	8005698 <HAL_TIM_PWM_Start_IT+0x24>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800568a:	b2db      	uxtb	r3, r3
 800568c:	2b01      	cmp	r3, #1
 800568e:	bf14      	ite	ne
 8005690:	2301      	movne	r3, #1
 8005692:	2300      	moveq	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	e022      	b.n	80056de <HAL_TIM_PWM_Start_IT+0x6a>
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b04      	cmp	r3, #4
 800569c:	d109      	bne.n	80056b2 <HAL_TIM_PWM_Start_IT+0x3e>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	bf14      	ite	ne
 80056aa:	2301      	movne	r3, #1
 80056ac:	2300      	moveq	r3, #0
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	e015      	b.n	80056de <HAL_TIM_PWM_Start_IT+0x6a>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d109      	bne.n	80056cc <HAL_TIM_PWM_Start_IT+0x58>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	bf14      	ite	ne
 80056c4:	2301      	movne	r3, #1
 80056c6:	2300      	moveq	r3, #0
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	e008      	b.n	80056de <HAL_TIM_PWM_Start_IT+0x6a>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	bf14      	ite	ne
 80056d8:	2301      	movne	r3, #1
 80056da:	2300      	moveq	r3, #0
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e0c2      	b.n	800586c <HAL_TIM_PWM_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d104      	bne.n	80056f6 <HAL_TIM_PWM_Start_IT+0x82>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2202      	movs	r2, #2
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056f4:	e013      	b.n	800571e <HAL_TIM_PWM_Start_IT+0xaa>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b04      	cmp	r3, #4
 80056fa:	d104      	bne.n	8005706 <HAL_TIM_PWM_Start_IT+0x92>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2202      	movs	r2, #2
 8005700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005704:	e00b      	b.n	800571e <HAL_TIM_PWM_Start_IT+0xaa>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b08      	cmp	r3, #8
 800570a:	d104      	bne.n	8005716 <HAL_TIM_PWM_Start_IT+0xa2>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005714:	e003      	b.n	800571e <HAL_TIM_PWM_Start_IT+0xaa>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2202      	movs	r2, #2
 800571a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b0c      	cmp	r3, #12
 8005722:	d841      	bhi.n	80057a8 <HAL_TIM_PWM_Start_IT+0x134>
 8005724:	a201      	add	r2, pc, #4	; (adr r2, 800572c <HAL_TIM_PWM_Start_IT+0xb8>)
 8005726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800572a:	bf00      	nop
 800572c:	08005761 	.word	0x08005761
 8005730:	080057a9 	.word	0x080057a9
 8005734:	080057a9 	.word	0x080057a9
 8005738:	080057a9 	.word	0x080057a9
 800573c:	08005773 	.word	0x08005773
 8005740:	080057a9 	.word	0x080057a9
 8005744:	080057a9 	.word	0x080057a9
 8005748:	080057a9 	.word	0x080057a9
 800574c:	08005785 	.word	0x08005785
 8005750:	080057a9 	.word	0x080057a9
 8005754:	080057a9 	.word	0x080057a9
 8005758:	080057a9 	.word	0x080057a9
 800575c:	08005797 	.word	0x08005797
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0202 	orr.w	r2, r2, #2
 800576e:	60da      	str	r2, [r3, #12]
      break;
 8005770:	e01b      	b.n	80057aa <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68da      	ldr	r2, [r3, #12]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f042 0204 	orr.w	r2, r2, #4
 8005780:	60da      	str	r2, [r3, #12]
      break;
 8005782:	e012      	b.n	80057aa <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68da      	ldr	r2, [r3, #12]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0208 	orr.w	r2, r2, #8
 8005792:	60da      	str	r2, [r3, #12]
      break;
 8005794:	e009      	b.n	80057aa <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0210 	orr.w	r2, r2, #16
 80057a4:	60da      	str	r2, [r3, #12]
      break;
 80057a6:	e000      	b.n	80057aa <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80057a8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2201      	movs	r2, #1
 80057b0:	6839      	ldr	r1, [r7, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f001 fb98 	bl	8006ee8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a2d      	ldr	r2, [pc, #180]	; (8005874 <HAL_TIM_PWM_Start_IT+0x200>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d004      	beq.n	80057cc <HAL_TIM_PWM_Start_IT+0x158>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a2c      	ldr	r2, [pc, #176]	; (8005878 <HAL_TIM_PWM_Start_IT+0x204>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d101      	bne.n	80057d0 <HAL_TIM_PWM_Start_IT+0x15c>
 80057cc:	2301      	movs	r3, #1
 80057ce:	e000      	b.n	80057d2 <HAL_TIM_PWM_Start_IT+0x15e>
 80057d0:	2300      	movs	r3, #0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d007      	beq.n	80057e6 <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a22      	ldr	r2, [pc, #136]	; (8005874 <HAL_TIM_PWM_Start_IT+0x200>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d022      	beq.n	8005836 <HAL_TIM_PWM_Start_IT+0x1c2>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f8:	d01d      	beq.n	8005836 <HAL_TIM_PWM_Start_IT+0x1c2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1f      	ldr	r2, [pc, #124]	; (800587c <HAL_TIM_PWM_Start_IT+0x208>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d018      	beq.n	8005836 <HAL_TIM_PWM_Start_IT+0x1c2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a1d      	ldr	r2, [pc, #116]	; (8005880 <HAL_TIM_PWM_Start_IT+0x20c>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d013      	beq.n	8005836 <HAL_TIM_PWM_Start_IT+0x1c2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a1c      	ldr	r2, [pc, #112]	; (8005884 <HAL_TIM_PWM_Start_IT+0x210>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d00e      	beq.n	8005836 <HAL_TIM_PWM_Start_IT+0x1c2>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a16      	ldr	r2, [pc, #88]	; (8005878 <HAL_TIM_PWM_Start_IT+0x204>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d009      	beq.n	8005836 <HAL_TIM_PWM_Start_IT+0x1c2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a18      	ldr	r2, [pc, #96]	; (8005888 <HAL_TIM_PWM_Start_IT+0x214>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d004      	beq.n	8005836 <HAL_TIM_PWM_Start_IT+0x1c2>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a16      	ldr	r2, [pc, #88]	; (800588c <HAL_TIM_PWM_Start_IT+0x218>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d111      	bne.n	800585a <HAL_TIM_PWM_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b06      	cmp	r3, #6
 8005846:	d010      	beq.n	800586a <HAL_TIM_PWM_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f042 0201 	orr.w	r2, r2, #1
 8005856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005858:	e007      	b.n	800586a <HAL_TIM_PWM_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0201 	orr.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40010000 	.word	0x40010000
 8005878:	40010400 	.word	0x40010400
 800587c:	40000400 	.word	0x40000400
 8005880:	40000800 	.word	0x40000800
 8005884:	40000c00 	.word	0x40000c00
 8005888:	40014000 	.word	0x40014000
 800588c:	40001800 	.word	0x40001800

08005890 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e041      	b.n	8005926 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f839 	bl	800592e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3304      	adds	r3, #4
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f000 fe68 	bl	80065a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b086      	sub	sp, #24
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d104      	bne.n	8005962 <HAL_TIM_IC_Start_DMA+0x1e>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800595e:	b2db      	uxtb	r3, r3
 8005960:	e013      	b.n	800598a <HAL_TIM_IC_Start_DMA+0x46>
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b04      	cmp	r3, #4
 8005966:	d104      	bne.n	8005972 <HAL_TIM_IC_Start_DMA+0x2e>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800596e:	b2db      	uxtb	r3, r3
 8005970:	e00b      	b.n	800598a <HAL_TIM_IC_Start_DMA+0x46>
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b08      	cmp	r3, #8
 8005976:	d104      	bne.n	8005982 <HAL_TIM_IC_Start_DMA+0x3e>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800597e:	b2db      	uxtb	r3, r3
 8005980:	e003      	b.n	800598a <HAL_TIM_IC_Start_DMA+0x46>
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005988:	b2db      	uxtb	r3, r3
 800598a:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d104      	bne.n	800599c <HAL_TIM_IC_Start_DMA+0x58>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005998:	b2db      	uxtb	r3, r3
 800599a:	e013      	b.n	80059c4 <HAL_TIM_IC_Start_DMA+0x80>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d104      	bne.n	80059ac <HAL_TIM_IC_Start_DMA+0x68>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	e00b      	b.n	80059c4 <HAL_TIM_IC_Start_DMA+0x80>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2b08      	cmp	r3, #8
 80059b0:	d104      	bne.n	80059bc <HAL_TIM_IC_Start_DMA+0x78>
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	e003      	b.n	80059c4 <HAL_TIM_IC_Start_DMA+0x80>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80059c6:	7dfb      	ldrb	r3, [r7, #23]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d002      	beq.n	80059d2 <HAL_TIM_IC_Start_DMA+0x8e>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80059cc:	7dbb      	ldrb	r3, [r7, #22]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d101      	bne.n	80059d6 <HAL_TIM_IC_Start_DMA+0x92>
  {
    return HAL_BUSY;
 80059d2:	2302      	movs	r3, #2
 80059d4:	e145      	b.n	8005c62 <HAL_TIM_IC_Start_DMA+0x31e>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d143      	bne.n	8005a64 <HAL_TIM_IC_Start_DMA+0x120>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80059dc:	7dbb      	ldrb	r3, [r7, #22]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d140      	bne.n	8005a64 <HAL_TIM_IC_Start_DMA+0x120>
  {
    if ((pData == NULL) && (Length > 0U))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d104      	bne.n	80059f2 <HAL_TIM_IC_Start_DMA+0xae>
 80059e8:	887b      	ldrh	r3, [r7, #2]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_TIM_IC_Start_DMA+0xae>
    {
      return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e137      	b.n	8005c62 <HAL_TIM_IC_Start_DMA+0x31e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d104      	bne.n	8005a02 <HAL_TIM_IC_Start_DMA+0xbe>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a00:	e013      	b.n	8005a2a <HAL_TIM_IC_Start_DMA+0xe6>
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	2b04      	cmp	r3, #4
 8005a06:	d104      	bne.n	8005a12 <HAL_TIM_IC_Start_DMA+0xce>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a10:	e00b      	b.n	8005a2a <HAL_TIM_IC_Start_DMA+0xe6>
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d104      	bne.n	8005a22 <HAL_TIM_IC_Start_DMA+0xde>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2202      	movs	r2, #2
 8005a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a20:	e003      	b.n	8005a2a <HAL_TIM_IC_Start_DMA+0xe6>
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2202      	movs	r2, #2
 8005a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d104      	bne.n	8005a3a <HAL_TIM_IC_Start_DMA+0xf6>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2202      	movs	r2, #2
 8005a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8005a38:	e016      	b.n	8005a68 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b04      	cmp	r3, #4
 8005a3e:	d104      	bne.n	8005a4a <HAL_TIM_IC_Start_DMA+0x106>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8005a48:	e00e      	b.n	8005a68 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b08      	cmp	r3, #8
 8005a4e:	d104      	bne.n	8005a5a <HAL_TIM_IC_Start_DMA+0x116>
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2202      	movs	r2, #2
 8005a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8005a58:	e006      	b.n	8005a68 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2202      	movs	r2, #2
 8005a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 8005a62:	e001      	b.n	8005a68 <HAL_TIM_IC_Start_DMA+0x124>
    }
  }
  else
  {
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e0fc      	b.n	8005c62 <HAL_TIM_IC_Start_DMA+0x31e>
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	2b0c      	cmp	r3, #12
 8005a6c:	f200 80ae 	bhi.w	8005bcc <HAL_TIM_IC_Start_DMA+0x288>
 8005a70:	a201      	add	r2, pc, #4	; (adr r2, 8005a78 <HAL_TIM_IC_Start_DMA+0x134>)
 8005a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a76:	bf00      	nop
 8005a78:	08005aad 	.word	0x08005aad
 8005a7c:	08005bcd 	.word	0x08005bcd
 8005a80:	08005bcd 	.word	0x08005bcd
 8005a84:	08005bcd 	.word	0x08005bcd
 8005a88:	08005af5 	.word	0x08005af5
 8005a8c:	08005bcd 	.word	0x08005bcd
 8005a90:	08005bcd 	.word	0x08005bcd
 8005a94:	08005bcd 	.word	0x08005bcd
 8005a98:	08005b3d 	.word	0x08005b3d
 8005a9c:	08005bcd 	.word	0x08005bcd
 8005aa0:	08005bcd 	.word	0x08005bcd
 8005aa4:	08005bcd 	.word	0x08005bcd
 8005aa8:	08005b85 	.word	0x08005b85
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab0:	4a6e      	ldr	r2, [pc, #440]	; (8005c6c <HAL_TIM_IC_Start_DMA+0x328>)
 8005ab2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab8:	4a6d      	ldr	r2, [pc, #436]	; (8005c70 <HAL_TIM_IC_Start_DMA+0x32c>)
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac0:	4a6c      	ldr	r2, [pc, #432]	; (8005c74 <HAL_TIM_IC_Start_DMA+0x330>)
 8005ac2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3334      	adds	r3, #52	; 0x34
 8005ace:	4619      	mov	r1, r3
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	887b      	ldrh	r3, [r7, #2]
 8005ad4:	f7fe faf8 	bl	80040c8 <HAL_DMA_Start_IT>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d001      	beq.n	8005ae2 <HAL_TIM_IC_Start_DMA+0x19e>
      {
        /* Return error status */
        return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e0bf      	b.n	8005c62 <HAL_TIM_IC_Start_DMA+0x31e>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005af0:	60da      	str	r2, [r3, #12]
      break;
 8005af2:	e06c      	b.n	8005bce <HAL_TIM_IC_Start_DMA+0x28a>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af8:	4a5c      	ldr	r2, [pc, #368]	; (8005c6c <HAL_TIM_IC_Start_DMA+0x328>)
 8005afa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b00:	4a5b      	ldr	r2, [pc, #364]	; (8005c70 <HAL_TIM_IC_Start_DMA+0x32c>)
 8005b02:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b08:	4a5a      	ldr	r2, [pc, #360]	; (8005c74 <HAL_TIM_IC_Start_DMA+0x330>)
 8005b0a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3338      	adds	r3, #56	; 0x38
 8005b16:	4619      	mov	r1, r3
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	887b      	ldrh	r3, [r7, #2]
 8005b1c:	f7fe fad4 	bl	80040c8 <HAL_DMA_Start_IT>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <HAL_TIM_IC_Start_DMA+0x1e6>
      {
        /* Return error status */
        return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e09b      	b.n	8005c62 <HAL_TIM_IC_Start_DMA+0x31e>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68da      	ldr	r2, [r3, #12]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b38:	60da      	str	r2, [r3, #12]
      break;
 8005b3a:	e048      	b.n	8005bce <HAL_TIM_IC_Start_DMA+0x28a>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4a4a      	ldr	r2, [pc, #296]	; (8005c6c <HAL_TIM_IC_Start_DMA+0x328>)
 8005b42:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	4a49      	ldr	r2, [pc, #292]	; (8005c70 <HAL_TIM_IC_Start_DMA+0x32c>)
 8005b4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	4a48      	ldr	r2, [pc, #288]	; (8005c74 <HAL_TIM_IC_Start_DMA+0x330>)
 8005b52:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	333c      	adds	r3, #60	; 0x3c
 8005b5e:	4619      	mov	r1, r3
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	887b      	ldrh	r3, [r7, #2]
 8005b64:	f7fe fab0 	bl	80040c8 <HAL_DMA_Start_IT>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <HAL_TIM_IC_Start_DMA+0x22e>
      {
        /* Return error status */
        return HAL_ERROR;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e077      	b.n	8005c62 <HAL_TIM_IC_Start_DMA+0x31e>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68da      	ldr	r2, [r3, #12]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b80:	60da      	str	r2, [r3, #12]
      break;
 8005b82:	e024      	b.n	8005bce <HAL_TIM_IC_Start_DMA+0x28a>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	4a38      	ldr	r2, [pc, #224]	; (8005c6c <HAL_TIM_IC_Start_DMA+0x328>)
 8005b8a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b90:	4a37      	ldr	r2, [pc, #220]	; (8005c70 <HAL_TIM_IC_Start_DMA+0x32c>)
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b98:	4a36      	ldr	r2, [pc, #216]	; (8005c74 <HAL_TIM_IC_Start_DMA+0x330>)
 8005b9a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3340      	adds	r3, #64	; 0x40
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	887b      	ldrh	r3, [r7, #2]
 8005bac:	f7fe fa8c 	bl	80040c8 <HAL_DMA_Start_IT>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <HAL_TIM_IC_Start_DMA+0x276>
      {
        /* Return error status */
        return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e053      	b.n	8005c62 <HAL_TIM_IC_Start_DMA+0x31e>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68da      	ldr	r2, [r3, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005bc8:	60da      	str	r2, [r3, #12]
      break;
 8005bca:	e000      	b.n	8005bce <HAL_TIM_IC_Start_DMA+0x28a>
    }

    default:
      break;
 8005bcc:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f001 f986 	bl	8006ee8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a25      	ldr	r2, [pc, #148]	; (8005c78 <HAL_TIM_IC_Start_DMA+0x334>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d022      	beq.n	8005c2c <HAL_TIM_IC_Start_DMA+0x2e8>
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bee:	d01d      	beq.n	8005c2c <HAL_TIM_IC_Start_DMA+0x2e8>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a21      	ldr	r2, [pc, #132]	; (8005c7c <HAL_TIM_IC_Start_DMA+0x338>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d018      	beq.n	8005c2c <HAL_TIM_IC_Start_DMA+0x2e8>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a20      	ldr	r2, [pc, #128]	; (8005c80 <HAL_TIM_IC_Start_DMA+0x33c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d013      	beq.n	8005c2c <HAL_TIM_IC_Start_DMA+0x2e8>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1e      	ldr	r2, [pc, #120]	; (8005c84 <HAL_TIM_IC_Start_DMA+0x340>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d00e      	beq.n	8005c2c <HAL_TIM_IC_Start_DMA+0x2e8>
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1d      	ldr	r2, [pc, #116]	; (8005c88 <HAL_TIM_IC_Start_DMA+0x344>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d009      	beq.n	8005c2c <HAL_TIM_IC_Start_DMA+0x2e8>
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <HAL_TIM_IC_Start_DMA+0x348>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d004      	beq.n	8005c2c <HAL_TIM_IC_Start_DMA+0x2e8>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a1a      	ldr	r2, [pc, #104]	; (8005c90 <HAL_TIM_IC_Start_DMA+0x34c>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d111      	bne.n	8005c50 <HAL_TIM_IC_Start_DMA+0x30c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	2b06      	cmp	r3, #6
 8005c3c:	d010      	beq.n	8005c60 <HAL_TIM_IC_Start_DMA+0x31c>
    {
      __HAL_TIM_ENABLE(htim);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0201 	orr.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4e:	e007      	b.n	8005c60 <HAL_TIM_IC_Start_DMA+0x31c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c60:	2300      	movs	r3, #0
}
 8005c62:	4618      	mov	r0, r3
 8005c64:	3718      	adds	r7, #24
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	08006473 	.word	0x08006473
 8005c70:	0800653b 	.word	0x0800653b
 8005c74:	080063e1 	.word	0x080063e1
 8005c78:	40010000 	.word	0x40010000
 8005c7c:	40000400 	.word	0x40000400
 8005c80:	40000800 	.word	0x40000800
 8005c84:	40000c00 	.word	0x40000c00
 8005c88:	40010400 	.word	0x40010400
 8005c8c:	40014000 	.word	0x40014000
 8005c90:	40001800 	.word	0x40001800

08005c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d122      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0202 	mvn.w	r2, #2
 8005cc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f003 0303 	and.w	r3, r3, #3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fb50 	bl	800637c <HAL_TIM_IC_CaptureCallback>
 8005cdc:	e005      	b.n	8005cea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fb42 	bl	8006368 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fb5d 	bl	80063a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	f003 0304 	and.w	r3, r3, #4
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d122      	bne.n	8005d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d11b      	bne.n	8005d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f06f 0204 	mvn.w	r2, #4
 8005d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fb26 	bl	800637c <HAL_TIM_IC_CaptureCallback>
 8005d30:	e005      	b.n	8005d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 fb18 	bl	8006368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 fb33 	bl	80063a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d122      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f003 0308 	and.w	r3, r3, #8
 8005d5c:	2b08      	cmp	r3, #8
 8005d5e:	d11b      	bne.n	8005d98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f06f 0208 	mvn.w	r2, #8
 8005d68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	f003 0303 	and.w	r3, r3, #3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d003      	beq.n	8005d86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f000 fafc 	bl	800637c <HAL_TIM_IC_CaptureCallback>
 8005d84:	e005      	b.n	8005d92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 faee 	bl	8006368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fb09 	bl	80063a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	f003 0310 	and.w	r3, r3, #16
 8005da2:	2b10      	cmp	r3, #16
 8005da4:	d122      	bne.n	8005dec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	f003 0310 	and.w	r3, r3, #16
 8005db0:	2b10      	cmp	r3, #16
 8005db2:	d11b      	bne.n	8005dec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f06f 0210 	mvn.w	r2, #16
 8005dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2208      	movs	r2, #8
 8005dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	69db      	ldr	r3, [r3, #28]
 8005dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fad2 	bl	800637c <HAL_TIM_IC_CaptureCallback>
 8005dd8:	e005      	b.n	8005de6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fac4 	bl	8006368 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f000 fadf 	bl	80063a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2200      	movs	r2, #0
 8005dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0301 	and.w	r3, r3, #1
 8005df6:	2b01      	cmp	r3, #1
 8005df8:	d10e      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d107      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0201 	mvn.w	r2, #1
 8005e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fa9e 	bl	8006354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e22:	2b80      	cmp	r3, #128	; 0x80
 8005e24:	d10e      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e30:	2b80      	cmp	r3, #128	; 0x80
 8005e32:	d107      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f001 f8fe 	bl	8007040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d10e      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5c:	2b40      	cmp	r3, #64	; 0x40
 8005e5e:	d107      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 faa4 	bl	80063b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f003 0320 	and.w	r3, r3, #32
 8005e7a:	2b20      	cmp	r3, #32
 8005e7c:	d10e      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b20      	cmp	r3, #32
 8005e8a:	d107      	bne.n	8005e9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f06f 0220 	mvn.w	r2, #32
 8005e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f001 f8c8 	bl	800702c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e9c:	bf00      	nop
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <HAL_TIM_IC_ConfigChannel+0x1a>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e082      	b.n	8005fc4 <HAL_TIM_IC_ConfigChannel+0x120>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d11b      	bne.n	8005f04 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	6819      	ldr	r1, [r3, #0]
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f000 fe40 	bl	8006b60 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	699a      	ldr	r2, [r3, #24]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 020c 	bic.w	r2, r2, #12
 8005eee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6999      	ldr	r1, [r3, #24]
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	430a      	orrs	r2, r1
 8005f00:	619a      	str	r2, [r3, #24]
 8005f02:	e05a      	b.n	8005fba <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d11c      	bne.n	8005f44 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	6819      	ldr	r1, [r3, #0]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	685a      	ldr	r2, [r3, #4]
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f000 fec4 	bl	8006ca6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699a      	ldr	r2, [r3, #24]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005f2c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6999      	ldr	r1, [r3, #24]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	021a      	lsls	r2, r3, #8
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	430a      	orrs	r2, r1
 8005f40:	619a      	str	r2, [r3, #24]
 8005f42:	e03a      	b.n	8005fba <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b08      	cmp	r3, #8
 8005f48:	d11b      	bne.n	8005f82 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	6819      	ldr	r1, [r3, #0]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	685a      	ldr	r2, [r3, #4]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f000 ff11 	bl	8006d80 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69da      	ldr	r2, [r3, #28]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 020c 	bic.w	r2, r2, #12
 8005f6c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69d9      	ldr	r1, [r3, #28]
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	689a      	ldr	r2, [r3, #8]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	430a      	orrs	r2, r1
 8005f7e:	61da      	str	r2, [r3, #28]
 8005f80:	e01b      	b.n	8005fba <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	6819      	ldr	r1, [r3, #0]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	685a      	ldr	r2, [r3, #4]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	f000 ff31 	bl	8006df8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69da      	ldr	r2, [r3, #28]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005fa4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69d9      	ldr	r1, [r3, #28]
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	021a      	lsls	r2, r3, #8
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e0ac      	b.n	8006140 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2b0c      	cmp	r3, #12
 8005ff2:	f200 809f 	bhi.w	8006134 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005ff6:	a201      	add	r2, pc, #4	; (adr r2, 8005ffc <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ffc:	08006031 	.word	0x08006031
 8006000:	08006135 	.word	0x08006135
 8006004:	08006135 	.word	0x08006135
 8006008:	08006135 	.word	0x08006135
 800600c:	08006071 	.word	0x08006071
 8006010:	08006135 	.word	0x08006135
 8006014:	08006135 	.word	0x08006135
 8006018:	08006135 	.word	0x08006135
 800601c:	080060b3 	.word	0x080060b3
 8006020:	08006135 	.word	0x08006135
 8006024:	08006135 	.word	0x08006135
 8006028:	08006135 	.word	0x08006135
 800602c:	080060f3 	.word	0x080060f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68b9      	ldr	r1, [r7, #8]
 8006036:	4618      	mov	r0, r3
 8006038:	f000 fb54 	bl	80066e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	699a      	ldr	r2, [r3, #24]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0208 	orr.w	r2, r2, #8
 800604a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0204 	bic.w	r2, r2, #4
 800605a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	6999      	ldr	r1, [r3, #24]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	691a      	ldr	r2, [r3, #16]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	619a      	str	r2, [r3, #24]
      break;
 800606e:	e062      	b.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	68b9      	ldr	r1, [r7, #8]
 8006076:	4618      	mov	r0, r3
 8006078:	f000 fba4 	bl	80067c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699a      	ldr	r2, [r3, #24]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800608a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	699a      	ldr	r2, [r3, #24]
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800609a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6999      	ldr	r1, [r3, #24]
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	021a      	lsls	r2, r3, #8
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	619a      	str	r2, [r3, #24]
      break;
 80060b0:	e041      	b.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fbf9 	bl	80068b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	69da      	ldr	r2, [r3, #28]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f042 0208 	orr.w	r2, r2, #8
 80060cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69da      	ldr	r2, [r3, #28]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 0204 	bic.w	r2, r2, #4
 80060dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69d9      	ldr	r1, [r3, #28]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	691a      	ldr	r2, [r3, #16]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	430a      	orrs	r2, r1
 80060ee:	61da      	str	r2, [r3, #28]
      break;
 80060f0:	e021      	b.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68b9      	ldr	r1, [r7, #8]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 fc4d 	bl	8006998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	69da      	ldr	r2, [r3, #28]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800610c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	69da      	ldr	r2, [r3, #28]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800611c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	69d9      	ldr	r1, [r3, #28]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	021a      	lsls	r2, r3, #8
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	430a      	orrs	r2, r1
 8006130:	61da      	str	r2, [r3, #28]
      break;
 8006132:	e000      	b.n	8006136 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006134:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800613e:	2300      	movs	r3, #0
}
 8006140:	4618      	mov	r0, r3
 8006142:	3710      	adds	r7, #16
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_TIM_ConfigClockSource+0x18>
 800615c:	2302      	movs	r3, #2
 800615e:	e0b3      	b.n	80062c8 <HAL_TIM_ConfigClockSource+0x180>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2202      	movs	r2, #2
 800616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689b      	ldr	r3, [r3, #8]
 8006176:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800617e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006186:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006198:	d03e      	beq.n	8006218 <HAL_TIM_ConfigClockSource+0xd0>
 800619a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800619e:	f200 8087 	bhi.w	80062b0 <HAL_TIM_ConfigClockSource+0x168>
 80061a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a6:	f000 8085 	beq.w	80062b4 <HAL_TIM_ConfigClockSource+0x16c>
 80061aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061ae:	d87f      	bhi.n	80062b0 <HAL_TIM_ConfigClockSource+0x168>
 80061b0:	2b70      	cmp	r3, #112	; 0x70
 80061b2:	d01a      	beq.n	80061ea <HAL_TIM_ConfigClockSource+0xa2>
 80061b4:	2b70      	cmp	r3, #112	; 0x70
 80061b6:	d87b      	bhi.n	80062b0 <HAL_TIM_ConfigClockSource+0x168>
 80061b8:	2b60      	cmp	r3, #96	; 0x60
 80061ba:	d050      	beq.n	800625e <HAL_TIM_ConfigClockSource+0x116>
 80061bc:	2b60      	cmp	r3, #96	; 0x60
 80061be:	d877      	bhi.n	80062b0 <HAL_TIM_ConfigClockSource+0x168>
 80061c0:	2b50      	cmp	r3, #80	; 0x50
 80061c2:	d03c      	beq.n	800623e <HAL_TIM_ConfigClockSource+0xf6>
 80061c4:	2b50      	cmp	r3, #80	; 0x50
 80061c6:	d873      	bhi.n	80062b0 <HAL_TIM_ConfigClockSource+0x168>
 80061c8:	2b40      	cmp	r3, #64	; 0x40
 80061ca:	d058      	beq.n	800627e <HAL_TIM_ConfigClockSource+0x136>
 80061cc:	2b40      	cmp	r3, #64	; 0x40
 80061ce:	d86f      	bhi.n	80062b0 <HAL_TIM_ConfigClockSource+0x168>
 80061d0:	2b30      	cmp	r3, #48	; 0x30
 80061d2:	d064      	beq.n	800629e <HAL_TIM_ConfigClockSource+0x156>
 80061d4:	2b30      	cmp	r3, #48	; 0x30
 80061d6:	d86b      	bhi.n	80062b0 <HAL_TIM_ConfigClockSource+0x168>
 80061d8:	2b20      	cmp	r3, #32
 80061da:	d060      	beq.n	800629e <HAL_TIM_ConfigClockSource+0x156>
 80061dc:	2b20      	cmp	r3, #32
 80061de:	d867      	bhi.n	80062b0 <HAL_TIM_ConfigClockSource+0x168>
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d05c      	beq.n	800629e <HAL_TIM_ConfigClockSource+0x156>
 80061e4:	2b10      	cmp	r3, #16
 80061e6:	d05a      	beq.n	800629e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80061e8:	e062      	b.n	80062b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6818      	ldr	r0, [r3, #0]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6899      	ldr	r1, [r3, #8]
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f000 fe55 	bl	8006ea8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800620c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	609a      	str	r2, [r3, #8]
      break;
 8006216:	e04e      	b.n	80062b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6818      	ldr	r0, [r3, #0]
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	6899      	ldr	r1, [r3, #8]
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	f000 fe3e 	bl	8006ea8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800623a:	609a      	str	r2, [r3, #8]
      break;
 800623c:	e03b      	b.n	80062b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	6859      	ldr	r1, [r3, #4]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	461a      	mov	r2, r3
 800624c:	f000 fcfc 	bl	8006c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2150      	movs	r1, #80	; 0x50
 8006256:	4618      	mov	r0, r3
 8006258:	f000 fe0b 	bl	8006e72 <TIM_ITRx_SetConfig>
      break;
 800625c:	e02b      	b.n	80062b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6818      	ldr	r0, [r3, #0]
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	6859      	ldr	r1, [r3, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	461a      	mov	r2, r3
 800626c:	f000 fd58 	bl	8006d20 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2160      	movs	r1, #96	; 0x60
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fdfb 	bl	8006e72 <TIM_ITRx_SetConfig>
      break;
 800627c:	e01b      	b.n	80062b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	6859      	ldr	r1, [r3, #4]
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	461a      	mov	r2, r3
 800628c:	f000 fcdc 	bl	8006c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2140      	movs	r1, #64	; 0x40
 8006296:	4618      	mov	r0, r3
 8006298:	f000 fdeb 	bl	8006e72 <TIM_ITRx_SetConfig>
      break;
 800629c:	e00b      	b.n	80062b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681a      	ldr	r2, [r3, #0]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4619      	mov	r1, r3
 80062a8:	4610      	mov	r0, r2
 80062aa:	f000 fde2 	bl	8006e72 <TIM_ITRx_SetConfig>
        break;
 80062ae:	e002      	b.n	80062b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80062b0:	bf00      	nop
 80062b2:	e000      	b.n	80062b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80062b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b082      	sub	sp, #8
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80062e4:	2302      	movs	r3, #2
 80062e6:	e031      	b.n	800634c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2202      	movs	r2, #2
 80062f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fba2 	bl	8006a44 <TIM_SlaveTimer_SetConfig>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d009      	beq.n	800631a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e018      	b.n	800634c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68da      	ldr	r2, [r3, #12]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006328:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006338:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2201      	movs	r2, #1
 800633e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800634a:	2300      	movs	r3, #0
}
 800634c:	4618      	mov	r0, r3
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006368:	b480      	push	{r7}
 800636a:	b083      	sub	sp, #12
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800637c:	b480      	push	{r7}
 800637e:	b083      	sub	sp, #12
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006384:	bf00      	nop
 8006386:	370c      	adds	r7, #12
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d107      	bne.n	8006408 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2201      	movs	r2, #1
 80063fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2201      	movs	r2, #1
 8006402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006406:	e02a      	b.n	800645e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	429a      	cmp	r2, r3
 8006410:	d107      	bne.n	8006422 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2202      	movs	r2, #2
 8006416:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006420:	e01d      	b.n	800645e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	429a      	cmp	r2, r3
 800642a:	d107      	bne.n	800643c <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2204      	movs	r2, #4
 8006430:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800643a:	e010      	b.n	800645e <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	429a      	cmp	r2, r3
 8006444:	d107      	bne.n	8006456 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2208      	movs	r2, #8
 800644a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006454:	e003      	b.n	800645e <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7ff ffb4 	bl	80063cc <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2200      	movs	r2, #0
 8006468:	771a      	strb	r2, [r3, #28]
}
 800646a:	bf00      	nop
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	687a      	ldr	r2, [r7, #4]
 8006486:	429a      	cmp	r2, r3
 8006488:	d10f      	bne.n	80064aa <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2201      	movs	r2, #1
 800648e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d146      	bne.n	8006526 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064a8:	e03d      	b.n	8006526 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d10f      	bne.n	80064d4 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2202      	movs	r2, #2
 80064b8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69db      	ldr	r3, [r3, #28]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d131      	bne.n	8006526 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2201      	movs	r2, #1
 80064c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064d2:	e028      	b.n	8006526 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d8:	687a      	ldr	r2, [r7, #4]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d10f      	bne.n	80064fe <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2204      	movs	r2, #4
 80064e2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	69db      	ldr	r3, [r3, #28]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d11c      	bne.n	8006526 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064fc:	e013      	b.n	8006526 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	429a      	cmp	r2, r3
 8006506:	d10e      	bne.n	8006526 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2208      	movs	r2, #8
 800650c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69db      	ldr	r3, [r3, #28]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d107      	bne.n	8006526 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2201      	movs	r2, #1
 8006522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f7ff ff28 	bl	800637c <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	771a      	strb	r2, [r3, #28]
}
 8006532:	bf00      	nop
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800653a:	b580      	push	{r7, lr}
 800653c:	b084      	sub	sp, #16
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006546:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	429a      	cmp	r2, r3
 8006550:	d103      	bne.n	800655a <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2201      	movs	r2, #1
 8006556:	771a      	strb	r2, [r3, #28]
 8006558:	e019      	b.n	800658e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	429a      	cmp	r2, r3
 8006562:	d103      	bne.n	800656c <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2202      	movs	r2, #2
 8006568:	771a      	strb	r2, [r3, #28]
 800656a:	e010      	b.n	800658e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	429a      	cmp	r2, r3
 8006574:	d103      	bne.n	800657e <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2204      	movs	r2, #4
 800657a:	771a      	strb	r2, [r3, #28]
 800657c:	e007      	b.n	800658e <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	429a      	cmp	r2, r3
 8006586:	d102      	bne.n	800658e <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2208      	movs	r2, #8
 800658c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f7ff fefe 	bl	8006390 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	771a      	strb	r2, [r3, #28]
}
 800659a:	bf00      	nop
 800659c:	3710      	adds	r7, #16
 800659e:	46bd      	mov	sp, r7
 80065a0:	bd80      	pop	{r7, pc}
	...

080065a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a40      	ldr	r2, [pc, #256]	; (80066b8 <TIM_Base_SetConfig+0x114>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d013      	beq.n	80065e4 <TIM_Base_SetConfig+0x40>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c2:	d00f      	beq.n	80065e4 <TIM_Base_SetConfig+0x40>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a3d      	ldr	r2, [pc, #244]	; (80066bc <TIM_Base_SetConfig+0x118>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d00b      	beq.n	80065e4 <TIM_Base_SetConfig+0x40>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a3c      	ldr	r2, [pc, #240]	; (80066c0 <TIM_Base_SetConfig+0x11c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d007      	beq.n	80065e4 <TIM_Base_SetConfig+0x40>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a3b      	ldr	r2, [pc, #236]	; (80066c4 <TIM_Base_SetConfig+0x120>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <TIM_Base_SetConfig+0x40>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a3a      	ldr	r2, [pc, #232]	; (80066c8 <TIM_Base_SetConfig+0x124>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d108      	bne.n	80065f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a2f      	ldr	r2, [pc, #188]	; (80066b8 <TIM_Base_SetConfig+0x114>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d02b      	beq.n	8006656 <TIM_Base_SetConfig+0xb2>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006604:	d027      	beq.n	8006656 <TIM_Base_SetConfig+0xb2>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a2c      	ldr	r2, [pc, #176]	; (80066bc <TIM_Base_SetConfig+0x118>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d023      	beq.n	8006656 <TIM_Base_SetConfig+0xb2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a2b      	ldr	r2, [pc, #172]	; (80066c0 <TIM_Base_SetConfig+0x11c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d01f      	beq.n	8006656 <TIM_Base_SetConfig+0xb2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a2a      	ldr	r2, [pc, #168]	; (80066c4 <TIM_Base_SetConfig+0x120>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d01b      	beq.n	8006656 <TIM_Base_SetConfig+0xb2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a29      	ldr	r2, [pc, #164]	; (80066c8 <TIM_Base_SetConfig+0x124>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d017      	beq.n	8006656 <TIM_Base_SetConfig+0xb2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a28      	ldr	r2, [pc, #160]	; (80066cc <TIM_Base_SetConfig+0x128>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d013      	beq.n	8006656 <TIM_Base_SetConfig+0xb2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a27      	ldr	r2, [pc, #156]	; (80066d0 <TIM_Base_SetConfig+0x12c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d00f      	beq.n	8006656 <TIM_Base_SetConfig+0xb2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a26      	ldr	r2, [pc, #152]	; (80066d4 <TIM_Base_SetConfig+0x130>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d00b      	beq.n	8006656 <TIM_Base_SetConfig+0xb2>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a25      	ldr	r2, [pc, #148]	; (80066d8 <TIM_Base_SetConfig+0x134>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d007      	beq.n	8006656 <TIM_Base_SetConfig+0xb2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4a24      	ldr	r2, [pc, #144]	; (80066dc <TIM_Base_SetConfig+0x138>)
 800664a:	4293      	cmp	r3, r2
 800664c:	d003      	beq.n	8006656 <TIM_Base_SetConfig+0xb2>
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	4a23      	ldr	r2, [pc, #140]	; (80066e0 <TIM_Base_SetConfig+0x13c>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d108      	bne.n	8006668 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800665c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	689a      	ldr	r2, [r3, #8]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a0a      	ldr	r2, [pc, #40]	; (80066b8 <TIM_Base_SetConfig+0x114>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d003      	beq.n	800669c <TIM_Base_SetConfig+0xf8>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a0c      	ldr	r2, [pc, #48]	; (80066c8 <TIM_Base_SetConfig+0x124>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d103      	bne.n	80066a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	691a      	ldr	r2, [r3, #16]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	615a      	str	r2, [r3, #20]
}
 80066aa:	bf00      	nop
 80066ac:	3714      	adds	r7, #20
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	40010000 	.word	0x40010000
 80066bc:	40000400 	.word	0x40000400
 80066c0:	40000800 	.word	0x40000800
 80066c4:	40000c00 	.word	0x40000c00
 80066c8:	40010400 	.word	0x40010400
 80066cc:	40014000 	.word	0x40014000
 80066d0:	40014400 	.word	0x40014400
 80066d4:	40014800 	.word	0x40014800
 80066d8:	40001800 	.word	0x40001800
 80066dc:	40001c00 	.word	0x40001c00
 80066e0:	40002000 	.word	0x40002000

080066e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f023 0201 	bic.w	r2, r3, #1
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f023 0303 	bic.w	r3, r3, #3
 800671a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	4313      	orrs	r3, r2
 8006724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f023 0302 	bic.w	r3, r3, #2
 800672c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a20      	ldr	r2, [pc, #128]	; (80067bc <TIM_OC1_SetConfig+0xd8>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d003      	beq.n	8006748 <TIM_OC1_SetConfig+0x64>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a1f      	ldr	r2, [pc, #124]	; (80067c0 <TIM_OC1_SetConfig+0xdc>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d10c      	bne.n	8006762 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	f023 0308 	bic.w	r3, r3, #8
 800674e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	697a      	ldr	r2, [r7, #20]
 8006756:	4313      	orrs	r3, r2
 8006758:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f023 0304 	bic.w	r3, r3, #4
 8006760:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a15      	ldr	r2, [pc, #84]	; (80067bc <TIM_OC1_SetConfig+0xd8>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d003      	beq.n	8006772 <TIM_OC1_SetConfig+0x8e>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a14      	ldr	r2, [pc, #80]	; (80067c0 <TIM_OC1_SetConfig+0xdc>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d111      	bne.n	8006796 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006778:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006780:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	4313      	orrs	r3, r2
 800678a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	4313      	orrs	r3, r2
 8006794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	693a      	ldr	r2, [r7, #16]
 800679a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	621a      	str	r2, [r3, #32]
}
 80067b0:	bf00      	nop
 80067b2:	371c      	adds	r7, #28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr
 80067bc:	40010000 	.word	0x40010000
 80067c0:	40010400 	.word	0x40010400

080067c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a1b      	ldr	r3, [r3, #32]
 80067d2:	f023 0210 	bic.w	r2, r3, #16
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6a1b      	ldr	r3, [r3, #32]
 80067de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	021b      	lsls	r3, r3, #8
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	4313      	orrs	r3, r2
 8006806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f023 0320 	bic.w	r3, r3, #32
 800680e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	4313      	orrs	r3, r2
 800681a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a22      	ldr	r2, [pc, #136]	; (80068a8 <TIM_OC2_SetConfig+0xe4>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d003      	beq.n	800682c <TIM_OC2_SetConfig+0x68>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a21      	ldr	r2, [pc, #132]	; (80068ac <TIM_OC2_SetConfig+0xe8>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d10d      	bne.n	8006848 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	011b      	lsls	r3, r3, #4
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	4313      	orrs	r3, r2
 800683e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006846:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a17      	ldr	r2, [pc, #92]	; (80068a8 <TIM_OC2_SetConfig+0xe4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d003      	beq.n	8006858 <TIM_OC2_SetConfig+0x94>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a16      	ldr	r2, [pc, #88]	; (80068ac <TIM_OC2_SetConfig+0xe8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d113      	bne.n	8006880 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800685e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006866:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	693a      	ldr	r2, [r7, #16]
 8006870:	4313      	orrs	r3, r2
 8006872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	697a      	ldr	r2, [r7, #20]
 8006898:	621a      	str	r2, [r3, #32]
}
 800689a:	bf00      	nop
 800689c:	371c      	adds	r7, #28
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	40010000 	.word	0x40010000
 80068ac:	40010400 	.word	0x40010400

080068b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b087      	sub	sp, #28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a1b      	ldr	r3, [r3, #32]
 80068ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f023 0303 	bic.w	r3, r3, #3
 80068e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	68fa      	ldr	r2, [r7, #12]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80068f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	021b      	lsls	r3, r3, #8
 8006900:	697a      	ldr	r2, [r7, #20]
 8006902:	4313      	orrs	r3, r2
 8006904:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a21      	ldr	r2, [pc, #132]	; (8006990 <TIM_OC3_SetConfig+0xe0>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d003      	beq.n	8006916 <TIM_OC3_SetConfig+0x66>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a20      	ldr	r2, [pc, #128]	; (8006994 <TIM_OC3_SetConfig+0xe4>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d10d      	bne.n	8006932 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800691c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	021b      	lsls	r3, r3, #8
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	4313      	orrs	r3, r2
 8006928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a16      	ldr	r2, [pc, #88]	; (8006990 <TIM_OC3_SetConfig+0xe0>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d003      	beq.n	8006942 <TIM_OC3_SetConfig+0x92>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a15      	ldr	r2, [pc, #84]	; (8006994 <TIM_OC3_SetConfig+0xe4>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d113      	bne.n	800696a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	693a      	ldr	r2, [r7, #16]
 800695a:	4313      	orrs	r3, r2
 800695c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	68fa      	ldr	r2, [r7, #12]
 8006974:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	697a      	ldr	r2, [r7, #20]
 8006982:	621a      	str	r2, [r3, #32]
}
 8006984:	bf00      	nop
 8006986:	371c      	adds	r7, #28
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	40010000 	.word	0x40010000
 8006994:	40010400 	.word	0x40010400

08006998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	031b      	lsls	r3, r3, #12
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a12      	ldr	r2, [pc, #72]	; (8006a3c <TIM_OC4_SetConfig+0xa4>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d003      	beq.n	8006a00 <TIM_OC4_SetConfig+0x68>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a11      	ldr	r2, [pc, #68]	; (8006a40 <TIM_OC4_SetConfig+0xa8>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d109      	bne.n	8006a14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	019b      	lsls	r3, r3, #6
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	621a      	str	r2, [r3, #32]
}
 8006a2e:	bf00      	nop
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	40010000 	.word	0x40010000
 8006a40:	40010400 	.word	0x40010400

08006a44 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b086      	sub	sp, #24
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a5c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f023 0307 	bic.w	r3, r3, #7
 8006a6e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	2b70      	cmp	r3, #112	; 0x70
 8006a88:	d01a      	beq.n	8006ac0 <TIM_SlaveTimer_SetConfig+0x7c>
 8006a8a:	2b70      	cmp	r3, #112	; 0x70
 8006a8c:	d860      	bhi.n	8006b50 <TIM_SlaveTimer_SetConfig+0x10c>
 8006a8e:	2b60      	cmp	r3, #96	; 0x60
 8006a90:	d054      	beq.n	8006b3c <TIM_SlaveTimer_SetConfig+0xf8>
 8006a92:	2b60      	cmp	r3, #96	; 0x60
 8006a94:	d85c      	bhi.n	8006b50 <TIM_SlaveTimer_SetConfig+0x10c>
 8006a96:	2b50      	cmp	r3, #80	; 0x50
 8006a98:	d046      	beq.n	8006b28 <TIM_SlaveTimer_SetConfig+0xe4>
 8006a9a:	2b50      	cmp	r3, #80	; 0x50
 8006a9c:	d858      	bhi.n	8006b50 <TIM_SlaveTimer_SetConfig+0x10c>
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	d019      	beq.n	8006ad6 <TIM_SlaveTimer_SetConfig+0x92>
 8006aa2:	2b40      	cmp	r3, #64	; 0x40
 8006aa4:	d854      	bhi.n	8006b50 <TIM_SlaveTimer_SetConfig+0x10c>
 8006aa6:	2b30      	cmp	r3, #48	; 0x30
 8006aa8:	d054      	beq.n	8006b54 <TIM_SlaveTimer_SetConfig+0x110>
 8006aaa:	2b30      	cmp	r3, #48	; 0x30
 8006aac:	d850      	bhi.n	8006b50 <TIM_SlaveTimer_SetConfig+0x10c>
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d050      	beq.n	8006b54 <TIM_SlaveTimer_SetConfig+0x110>
 8006ab2:	2b20      	cmp	r3, #32
 8006ab4:	d84c      	bhi.n	8006b50 <TIM_SlaveTimer_SetConfig+0x10c>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d04c      	beq.n	8006b54 <TIM_SlaveTimer_SetConfig+0x110>
 8006aba:	2b10      	cmp	r3, #16
 8006abc:	d04a      	beq.n	8006b54 <TIM_SlaveTimer_SetConfig+0x110>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8006abe:	e047      	b.n	8006b50 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	68d9      	ldr	r1, [r3, #12]
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	689a      	ldr	r2, [r3, #8]
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	f000 f9ea 	bl	8006ea8 <TIM_ETR_SetConfig>
      break;
 8006ad4:	e03f      	b.n	8006b56 <TIM_SlaveTimer_SetConfig+0x112>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2b05      	cmp	r3, #5
 8006adc:	d101      	bne.n	8006ae2 <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e03a      	b.n	8006b58 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6a1b      	ldr	r3, [r3, #32]
 8006ae8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6a1a      	ldr	r2, [r3, #32]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0201 	bic.w	r2, r2, #1
 8006af8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b08:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	691b      	ldr	r3, [r3, #16]
 8006b0e:	011b      	lsls	r3, r3, #4
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	621a      	str	r2, [r3, #32]
      break;
 8006b26:	e016      	b.n	8006b56 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6818      	ldr	r0, [r3, #0]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	6899      	ldr	r1, [r3, #8]
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	461a      	mov	r2, r3
 8006b36:	f000 f887 	bl	8006c48 <TIM_TI1_ConfigInputStage>
      break;
 8006b3a:	e00c      	b.n	8006b56 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6818      	ldr	r0, [r3, #0]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	6899      	ldr	r1, [r3, #8]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	f000 f8e9 	bl	8006d20 <TIM_TI2_ConfigInputStage>
      break;
 8006b4e:	e002      	b.n	8006b56 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 8006b50:	bf00      	nop
 8006b52:	e000      	b.n	8006b56 <TIM_SlaveTimer_SetConfig+0x112>
        break;
 8006b54:	bf00      	nop
  }
  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f023 0201 	bic.w	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6a1b      	ldr	r3, [r3, #32]
 8006b84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	4a28      	ldr	r2, [pc, #160]	; (8006c2c <TIM_TI1_SetConfig+0xcc>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d01b      	beq.n	8006bc6 <TIM_TI1_SetConfig+0x66>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b94:	d017      	beq.n	8006bc6 <TIM_TI1_SetConfig+0x66>
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	4a25      	ldr	r2, [pc, #148]	; (8006c30 <TIM_TI1_SetConfig+0xd0>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d013      	beq.n	8006bc6 <TIM_TI1_SetConfig+0x66>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4a24      	ldr	r2, [pc, #144]	; (8006c34 <TIM_TI1_SetConfig+0xd4>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d00f      	beq.n	8006bc6 <TIM_TI1_SetConfig+0x66>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4a23      	ldr	r2, [pc, #140]	; (8006c38 <TIM_TI1_SetConfig+0xd8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d00b      	beq.n	8006bc6 <TIM_TI1_SetConfig+0x66>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4a22      	ldr	r2, [pc, #136]	; (8006c3c <TIM_TI1_SetConfig+0xdc>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d007      	beq.n	8006bc6 <TIM_TI1_SetConfig+0x66>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4a21      	ldr	r2, [pc, #132]	; (8006c40 <TIM_TI1_SetConfig+0xe0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d003      	beq.n	8006bc6 <TIM_TI1_SetConfig+0x66>
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4a20      	ldr	r2, [pc, #128]	; (8006c44 <TIM_TI1_SetConfig+0xe4>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d101      	bne.n	8006bca <TIM_TI1_SetConfig+0x6a>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e000      	b.n	8006bcc <TIM_TI1_SetConfig+0x6c>
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d008      	beq.n	8006be2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	f023 0303 	bic.w	r3, r3, #3
 8006bd6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]
 8006be0:	e003      	b.n	8006bea <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f043 0301 	orr.w	r3, r3, #1
 8006be8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bf0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	011b      	lsls	r3, r3, #4
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f023 030a 	bic.w	r3, r3, #10
 8006c04:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	f003 030a 	and.w	r3, r3, #10
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	697a      	ldr	r2, [r7, #20]
 8006c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	693a      	ldr	r2, [r7, #16]
 8006c1c:	621a      	str	r2, [r3, #32]
}
 8006c1e:	bf00      	nop
 8006c20:	371c      	adds	r7, #28
 8006c22:	46bd      	mov	sp, r7
 8006c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c28:	4770      	bx	lr
 8006c2a:	bf00      	nop
 8006c2c:	40010000 	.word	0x40010000
 8006c30:	40000400 	.word	0x40000400
 8006c34:	40000800 	.word	0x40000800
 8006c38:	40000c00 	.word	0x40000c00
 8006c3c:	40010400 	.word	0x40010400
 8006c40:	40014000 	.word	0x40014000
 8006c44:	40001800 	.word	0x40001800

08006c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b087      	sub	sp, #28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	f023 0201 	bic.w	r2, r3, #1
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	011b      	lsls	r3, r3, #4
 8006c78:	693a      	ldr	r2, [r7, #16]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f023 030a 	bic.w	r3, r3, #10
 8006c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c86:	697a      	ldr	r2, [r7, #20]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	621a      	str	r2, [r3, #32]
}
 8006c9a:	bf00      	nop
 8006c9c:	371c      	adds	r7, #28
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b087      	sub	sp, #28
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	60f8      	str	r0, [r7, #12]
 8006cae:	60b9      	str	r1, [r7, #8]
 8006cb0:	607a      	str	r2, [r7, #4]
 8006cb2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	f023 0210 	bic.w	r2, r3, #16
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	021b      	lsls	r3, r3, #8
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ce4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	031b      	lsls	r3, r3, #12
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	697a      	ldr	r2, [r7, #20]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cf8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	011b      	lsls	r3, r3, #4
 8006cfe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006d02:	693a      	ldr	r2, [r7, #16]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	621a      	str	r2, [r3, #32]
}
 8006d14:	bf00      	nop
 8006d16:	371c      	adds	r7, #28
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b087      	sub	sp, #28
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	6a1b      	ldr	r3, [r3, #32]
 8006d30:	f023 0210 	bic.w	r2, r3, #16
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	6a1b      	ldr	r3, [r3, #32]
 8006d42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	031b      	lsls	r3, r3, #12
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	697a      	ldr	r2, [r7, #20]
 8006d6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	621a      	str	r2, [r3, #32]
}
 8006d74:	bf00      	nop
 8006d76:	371c      	adds	r7, #28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	69db      	ldr	r3, [r3, #28]
 8006d9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6a1b      	ldr	r3, [r3, #32]
 8006da4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f023 0303 	bic.w	r3, r3, #3
 8006dac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dbc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	697a      	ldr	r2, [r7, #20]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006dd0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	021b      	lsls	r3, r3, #8
 8006dd6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	621a      	str	r2, [r3, #32]
}
 8006dec:	bf00      	nop
 8006dee:	371c      	adds	r7, #28
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
 8006e04:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6a1b      	ldr	r3, [r3, #32]
 8006e1c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e24:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	021b      	lsls	r3, r3, #8
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e36:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	031b      	lsls	r3, r3, #12
 8006e3c:	b29b      	uxth	r3, r3
 8006e3e:	697a      	ldr	r2, [r7, #20]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006e4a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	031b      	lsls	r3, r3, #12
 8006e50:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006e54:	693a      	ldr	r2, [r7, #16]
 8006e56:	4313      	orrs	r3, r2
 8006e58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	697a      	ldr	r2, [r7, #20]
 8006e5e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	693a      	ldr	r2, [r7, #16]
 8006e64:	621a      	str	r2, [r3, #32]
}
 8006e66:	bf00      	nop
 8006e68:	371c      	adds	r7, #28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr

08006e72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e72:	b480      	push	{r7}
 8006e74:	b085      	sub	sp, #20
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	f043 0307 	orr.w	r3, r3, #7
 8006e94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	609a      	str	r2, [r3, #8]
}
 8006e9c:	bf00      	nop
 8006e9e:	3714      	adds	r7, #20
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr

08006ea8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
 8006eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ec2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	021a      	lsls	r2, r3, #8
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	431a      	orrs	r2, r3
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	609a      	str	r2, [r3, #8]
}
 8006edc:	bf00      	nop
 8006ede:	371c      	adds	r7, #28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee6:	4770      	bx	lr

08006ee8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	f003 031f 	and.w	r3, r3, #31
 8006efa:	2201      	movs	r2, #1
 8006efc:	fa02 f303 	lsl.w	r3, r2, r3
 8006f00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6a1a      	ldr	r2, [r3, #32]
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	43db      	mvns	r3, r3
 8006f0a:	401a      	ands	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a1a      	ldr	r2, [r3, #32]
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f003 031f 	and.w	r3, r3, #31
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f20:	431a      	orrs	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	621a      	str	r2, [r3, #32]
}
 8006f26:	bf00      	nop
 8006f28:	371c      	adds	r7, #28
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d101      	bne.n	8006f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e05a      	b.n	8007002 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a21      	ldr	r2, [pc, #132]	; (8007010 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d022      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f98:	d01d      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a1d      	ldr	r2, [pc, #116]	; (8007014 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d018      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a1b      	ldr	r2, [pc, #108]	; (8007018 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d013      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a1a      	ldr	r2, [pc, #104]	; (800701c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d00e      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a18      	ldr	r2, [pc, #96]	; (8007020 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d009      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a17      	ldr	r2, [pc, #92]	; (8007024 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d004      	beq.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a15      	ldr	r2, [pc, #84]	; (8007028 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d10c      	bne.n	8006ff0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fdc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	40010000 	.word	0x40010000
 8007014:	40000400 	.word	0x40000400
 8007018:	40000800 	.word	0x40000800
 800701c:	40000c00 	.word	0x40000c00
 8007020:	40010400 	.word	0x40010400
 8007024:	40014000 	.word	0x40014000
 8007028:	40001800 	.word	0x40001800

0800702c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d101      	bne.n	8007066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e03f      	b.n	80070e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706c:	b2db      	uxtb	r3, r3
 800706e:	2b00      	cmp	r3, #0
 8007070:	d106      	bne.n	8007080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7fb f874 	bl	8002168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2224      	movs	r2, #36	; 0x24
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68da      	ldr	r2, [r3, #12]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 fc85 	bl	80079a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	691a      	ldr	r2, [r3, #16]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	695a      	ldr	r2, [r3, #20]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	68da      	ldr	r2, [r3, #12]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80070cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2220      	movs	r2, #32
 80070e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3708      	adds	r7, #8
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}

080070ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b08a      	sub	sp, #40	; 0x28
 80070f2:	af02      	add	r7, sp, #8
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	603b      	str	r3, [r7, #0]
 80070fa:	4613      	mov	r3, r2
 80070fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b20      	cmp	r3, #32
 800710c:	d17c      	bne.n	8007208 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <HAL_UART_Transmit+0x2c>
 8007114:	88fb      	ldrh	r3, [r7, #6]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e075      	b.n	800720a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007124:	2b01      	cmp	r3, #1
 8007126:	d101      	bne.n	800712c <HAL_UART_Transmit+0x3e>
 8007128:	2302      	movs	r3, #2
 800712a:	e06e      	b.n	800720a <HAL_UART_Transmit+0x11c>
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2200      	movs	r2, #0
 8007138:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2221      	movs	r2, #33	; 0x21
 800713e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007142:	f7fc f89b 	bl	800327c <HAL_GetTick>
 8007146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	88fa      	ldrh	r2, [r7, #6]
 800714c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	88fa      	ldrh	r2, [r7, #6]
 8007152:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715c:	d108      	bne.n	8007170 <HAL_UART_Transmit+0x82>
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d104      	bne.n	8007170 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007166:	2300      	movs	r3, #0
 8007168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	61bb      	str	r3, [r7, #24]
 800716e:	e003      	b.n	8007178 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007174:	2300      	movs	r3, #0
 8007176:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007180:	e02a      	b.n	80071d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2200      	movs	r2, #0
 800718a:	2180      	movs	r1, #128	; 0x80
 800718c:	68f8      	ldr	r0, [r7, #12]
 800718e:	f000 fa47 	bl	8007620 <UART_WaitOnFlagUntilTimeout>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e036      	b.n	800720a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10b      	bne.n	80071ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	881b      	ldrh	r3, [r3, #0]
 80071a6:	461a      	mov	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	3302      	adds	r3, #2
 80071b6:	61bb      	str	r3, [r7, #24]
 80071b8:	e007      	b.n	80071ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	781a      	ldrb	r2, [r3, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	3301      	adds	r3, #1
 80071c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	3b01      	subs	r3, #1
 80071d2:	b29a      	uxth	r2, r3
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80071dc:	b29b      	uxth	r3, r3
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1cf      	bne.n	8007182 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	9300      	str	r3, [sp, #0]
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2200      	movs	r2, #0
 80071ea:	2140      	movs	r1, #64	; 0x40
 80071ec:	68f8      	ldr	r0, [r7, #12]
 80071ee:	f000 fa17 	bl	8007620 <UART_WaitOnFlagUntilTimeout>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80071f8:	2303      	movs	r3, #3
 80071fa:	e006      	b.n	800720a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007204:	2300      	movs	r3, #0
 8007206:	e000      	b.n	800720a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007208:	2302      	movs	r3, #2
  }
}
 800720a:	4618      	mov	r0, r3
 800720c:	3720      	adds	r7, #32
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	4613      	mov	r3, r2
 800721e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b20      	cmp	r3, #32
 800722a:	d11d      	bne.n	8007268 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d002      	beq.n	8007238 <HAL_UART_Receive_IT+0x26>
 8007232:	88fb      	ldrh	r3, [r7, #6]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007238:	2301      	movs	r3, #1
 800723a:	e016      	b.n	800726a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007242:	2b01      	cmp	r3, #1
 8007244:	d101      	bne.n	800724a <HAL_UART_Receive_IT+0x38>
 8007246:	2302      	movs	r3, #2
 8007248:	e00f      	b.n	800726a <HAL_UART_Receive_IT+0x58>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8007258:	88fb      	ldrh	r3, [r7, #6]
 800725a:	461a      	mov	r2, r3
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 fa28 	bl	80076b4 <UART_Start_Receive_IT>
 8007264:	4603      	mov	r3, r0
 8007266:	e000      	b.n	800726a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007268:	2302      	movs	r3, #2
  }
}
 800726a:	4618      	mov	r0, r3
 800726c:	3710      	adds	r7, #16
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
	...

08007274 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08a      	sub	sp, #40	; 0x28
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	68db      	ldr	r3, [r3, #12]
 800728a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007294:	2300      	movs	r3, #0
 8007296:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007298:	2300      	movs	r3, #0
 800729a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d10d      	bne.n	80072c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	f003 0320 	and.w	r3, r3, #32
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d008      	beq.n	80072c6 <HAL_UART_IRQHandler+0x52>
 80072b4:	6a3b      	ldr	r3, [r7, #32]
 80072b6:	f003 0320 	and.w	r3, r3, #32
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d003      	beq.n	80072c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f000 fadb 	bl	800787a <UART_Receive_IT>
      return;
 80072c4:	e17c      	b.n	80075c0 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80072c6:	69bb      	ldr	r3, [r7, #24]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f000 80b1 	beq.w	8007430 <HAL_UART_IRQHandler+0x1bc>
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	f003 0301 	and.w	r3, r3, #1
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d105      	bne.n	80072e4 <HAL_UART_IRQHandler+0x70>
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 80a6 	beq.w	8007430 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00a      	beq.n	8007304 <HAL_UART_IRQHandler+0x90>
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d005      	beq.n	8007304 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fc:	f043 0201 	orr.w	r2, r3, #1
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007306:	f003 0304 	and.w	r3, r3, #4
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00a      	beq.n	8007324 <HAL_UART_IRQHandler+0xb0>
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	f003 0301 	and.w	r3, r3, #1
 8007314:	2b00      	cmp	r3, #0
 8007316:	d005      	beq.n	8007324 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731c:	f043 0202 	orr.w	r2, r3, #2
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <HAL_UART_IRQHandler+0xd0>
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d005      	beq.n	8007344 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733c:	f043 0204 	orr.w	r2, r3, #4
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	f003 0308 	and.w	r3, r3, #8
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00f      	beq.n	800736e <HAL_UART_IRQHandler+0xfa>
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	f003 0320 	and.w	r3, r3, #32
 8007354:	2b00      	cmp	r3, #0
 8007356:	d104      	bne.n	8007362 <HAL_UART_IRQHandler+0xee>
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	d005      	beq.n	800736e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007366:	f043 0208 	orr.w	r2, r3, #8
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 811f 	beq.w	80075b6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737a:	f003 0320 	and.w	r3, r3, #32
 800737e:	2b00      	cmp	r3, #0
 8007380:	d007      	beq.n	8007392 <HAL_UART_IRQHandler+0x11e>
 8007382:	6a3b      	ldr	r3, [r7, #32]
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fa74 	bl	800787a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	695b      	ldr	r3, [r3, #20]
 8007398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	bf0c      	ite	eq
 80073a0:	2301      	moveq	r3, #1
 80073a2:	2300      	movne	r3, #0
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ac:	f003 0308 	and.w	r3, r3, #8
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d102      	bne.n	80073ba <HAL_UART_IRQHandler+0x146>
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d031      	beq.n	800741e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f9b4 	bl	8007728 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ca:	2b40      	cmp	r3, #64	; 0x40
 80073cc:	d123      	bne.n	8007416 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695a      	ldr	r2, [r3, #20]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073dc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d013      	beq.n	800740e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	4a77      	ldr	r2, [pc, #476]	; (80075c8 <HAL_UART_IRQHandler+0x354>)
 80073ec:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fc ff30 	bl	8004258 <HAL_DMA_Abort_IT>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d016      	beq.n	800742c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007408:	4610      	mov	r0, r2
 800740a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800740c:	e00e      	b.n	800742c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800740e:	6878      	ldr	r0, [r7, #4]
 8007410:	f000 f8f0 	bl	80075f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007414:	e00a      	b.n	800742c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f8ec 	bl	80075f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741c:	e006      	b.n	800742c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f8e8 	bl	80075f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800742a:	e0c4      	b.n	80075b6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800742c:	bf00      	nop
    return;
 800742e:	e0c2      	b.n	80075b6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007434:	2b01      	cmp	r3, #1
 8007436:	f040 80a2 	bne.w	800757e <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800743a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743c:	f003 0310 	and.w	r3, r3, #16
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 809c 	beq.w	800757e <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007446:	6a3b      	ldr	r3, [r7, #32]
 8007448:	f003 0310 	and.w	r3, r3, #16
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8096 	beq.w	800757e <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007452:	2300      	movs	r3, #0
 8007454:	60fb      	str	r3, [r7, #12]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	60fb      	str	r3, [r7, #12]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	60fb      	str	r3, [r7, #12]
 8007466:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007472:	2b40      	cmp	r3, #64	; 0x40
 8007474:	d14f      	bne.n	8007516 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007480:	8a3b      	ldrh	r3, [r7, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 8099 	beq.w	80075ba <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800748c:	8a3a      	ldrh	r2, [r7, #16]
 800748e:	429a      	cmp	r2, r3
 8007490:	f080 8093 	bcs.w	80075ba <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	8a3a      	ldrh	r2, [r7, #16]
 8007498:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800749e:	69db      	ldr	r3, [r3, #28]
 80074a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074a4:	d02b      	beq.n	80074fe <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074b4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	695a      	ldr	r2, [r3, #20]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f022 0201 	bic.w	r2, r2, #1
 80074c4:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	695a      	ldr	r2, [r3, #20]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074d4:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2220      	movs	r2, #32
 80074da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68da      	ldr	r2, [r3, #12]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f022 0210 	bic.w	r2, r2, #16
 80074f2:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f8:	4618      	mov	r0, r3
 80074fa:	f7fc fe3d 	bl	8004178 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007506:	b29b      	uxth	r3, r3
 8007508:	1ad3      	subs	r3, r2, r3
 800750a:	b29b      	uxth	r3, r3
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f87a 	bl	8007608 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007514:	e051      	b.n	80075ba <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800751e:	b29b      	uxth	r3, r3
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007528:	b29b      	uxth	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d047      	beq.n	80075be <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800752e:	8a7b      	ldrh	r3, [r7, #18]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d044      	beq.n	80075be <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68da      	ldr	r2, [r3, #12]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007542:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	695a      	ldr	r2, [r3, #20]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f022 0201 	bic.w	r2, r2, #1
 8007552:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2220      	movs	r2, #32
 8007558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	68da      	ldr	r2, [r3, #12]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f022 0210 	bic.w	r2, r2, #16
 8007570:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007572:	8a7b      	ldrh	r3, [r7, #18]
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f846 	bl	8007608 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800757c:	e01f      	b.n	80075be <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800757e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007584:	2b00      	cmp	r3, #0
 8007586:	d008      	beq.n	800759a <HAL_UART_IRQHandler+0x326>
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800758e:	2b00      	cmp	r3, #0
 8007590:	d003      	beq.n	800759a <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f909 	bl	80077aa <UART_Transmit_IT>
    return;
 8007598:	e012      	b.n	80075c0 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800759a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00d      	beq.n	80075c0 <HAL_UART_IRQHandler+0x34c>
 80075a4:	6a3b      	ldr	r3, [r7, #32]
 80075a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d008      	beq.n	80075c0 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f94b 	bl	800784a <UART_EndTransmit_IT>
    return;
 80075b4:	e004      	b.n	80075c0 <HAL_UART_IRQHandler+0x34c>
    return;
 80075b6:	bf00      	nop
 80075b8:	e002      	b.n	80075c0 <HAL_UART_IRQHandler+0x34c>
      return;
 80075ba:	bf00      	nop
 80075bc:	e000      	b.n	80075c0 <HAL_UART_IRQHandler+0x34c>
      return;
 80075be:	bf00      	nop
  }
}
 80075c0:	3728      	adds	r7, #40	; 0x28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	08007783 	.word	0x08007783

080075cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075d4:	bf00      	nop
 80075d6:	370c      	adds	r7, #12
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80075e8:	bf00      	nop
 80075ea:	370c      	adds	r7, #12
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075fc:	bf00      	nop
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007614:	bf00      	nop
 8007616:	370c      	adds	r7, #12
 8007618:	46bd      	mov	sp, r7
 800761a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761e:	4770      	bx	lr

08007620 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	603b      	str	r3, [r7, #0]
 800762c:	4613      	mov	r3, r2
 800762e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007630:	e02c      	b.n	800768c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007632:	69bb      	ldr	r3, [r7, #24]
 8007634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007638:	d028      	beq.n	800768c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d007      	beq.n	8007650 <UART_WaitOnFlagUntilTimeout+0x30>
 8007640:	f7fb fe1c 	bl	800327c <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	429a      	cmp	r2, r3
 800764e:	d21d      	bcs.n	800768c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800765e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	695a      	ldr	r2, [r3, #20]
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f022 0201 	bic.w	r2, r2, #1
 800766e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2220      	movs	r2, #32
 8007674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2220      	movs	r2, #32
 800767c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e00f      	b.n	80076ac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	4013      	ands	r3, r2
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	429a      	cmp	r2, r3
 800769a:	bf0c      	ite	eq
 800769c:	2301      	moveq	r3, #1
 800769e:	2300      	movne	r3, #0
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	461a      	mov	r2, r3
 80076a4:	79fb      	ldrb	r3, [r7, #7]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d0c3      	beq.n	8007632 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076b4:	b480      	push	{r7}
 80076b6:	b085      	sub	sp, #20
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	60f8      	str	r0, [r7, #12]
 80076bc:	60b9      	str	r1, [r7, #8]
 80076be:	4613      	mov	r3, r2
 80076c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	88fa      	ldrh	r2, [r7, #6]
 80076cc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	88fa      	ldrh	r2, [r7, #6]
 80076d2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2200      	movs	r2, #0
 80076d8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2222      	movs	r2, #34	; 0x22
 80076de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68da      	ldr	r2, [r3, #12]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076f8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	695a      	ldr	r2, [r3, #20]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f042 0201 	orr.w	r2, r2, #1
 8007708:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f042 0220 	orr.w	r2, r2, #32
 8007718:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800773e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	695a      	ldr	r2, [r3, #20]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f022 0201 	bic.w	r2, r2, #1
 800774e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007754:	2b01      	cmp	r3, #1
 8007756:	d107      	bne.n	8007768 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f022 0210 	bic.w	r2, r2, #16
 8007766:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2220      	movs	r2, #32
 800776c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2200      	movs	r2, #0
 8007774:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007776:	bf00      	nop
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr

08007782 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2200      	movs	r2, #0
 8007794:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f7ff ff29 	bl	80075f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077a2:	bf00      	nop
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b21      	cmp	r3, #33	; 0x21
 80077bc:	d13e      	bne.n	800783c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	689b      	ldr	r3, [r3, #8]
 80077c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077c6:	d114      	bne.n	80077f2 <UART_Transmit_IT+0x48>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d110      	bne.n	80077f2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1b      	ldr	r3, [r3, #32]
 80077ea:	1c9a      	adds	r2, r3, #2
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	621a      	str	r2, [r3, #32]
 80077f0:	e008      	b.n	8007804 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a1b      	ldr	r3, [r3, #32]
 80077f6:	1c59      	adds	r1, r3, #1
 80077f8:	687a      	ldr	r2, [r7, #4]
 80077fa:	6211      	str	r1, [r2, #32]
 80077fc:	781a      	ldrb	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007808:	b29b      	uxth	r3, r3
 800780a:	3b01      	subs	r3, #1
 800780c:	b29b      	uxth	r3, r3
 800780e:	687a      	ldr	r2, [r7, #4]
 8007810:	4619      	mov	r1, r3
 8007812:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10f      	bne.n	8007838 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007826:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007836:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	e000      	b.n	800783e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800783c:	2302      	movs	r3, #2
  }
}
 800783e:	4618      	mov	r0, r3
 8007840:	3714      	adds	r7, #20
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68da      	ldr	r2, [r3, #12]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007860:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2220      	movs	r2, #32
 8007866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7ff feae 	bl	80075cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3708      	adds	r7, #8
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800787a:	b580      	push	{r7, lr}
 800787c:	b084      	sub	sp, #16
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b22      	cmp	r3, #34	; 0x22
 800788c:	f040 8087 	bne.w	800799e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007898:	d117      	bne.n	80078ca <UART_Receive_IT+0x50>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d113      	bne.n	80078ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80078a2:	2300      	movs	r3, #0
 80078a4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078aa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	b29b      	uxth	r3, r3
 80078b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c2:	1c9a      	adds	r2, r3, #2
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	629a      	str	r2, [r3, #40]	; 0x28
 80078c8:	e026      	b.n	8007918 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ce:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078dc:	d007      	beq.n	80078ee <UART_Receive_IT+0x74>
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10a      	bne.n	80078fc <UART_Receive_IT+0x82>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d106      	bne.n	80078fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	701a      	strb	r2, [r3, #0]
 80078fa:	e008      	b.n	800790e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007908:	b2da      	uxtb	r2, r3
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800791c:	b29b      	uxth	r3, r3
 800791e:	3b01      	subs	r3, #1
 8007920:	b29b      	uxth	r3, r3
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	4619      	mov	r1, r3
 8007926:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007928:	2b00      	cmp	r3, #0
 800792a:	d136      	bne.n	800799a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f022 0220 	bic.w	r2, r2, #32
 800793a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	68da      	ldr	r2, [r3, #12]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800794a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	695a      	ldr	r2, [r3, #20]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f022 0201 	bic.w	r2, r2, #1
 800795a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2220      	movs	r2, #32
 8007960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007968:	2b01      	cmp	r3, #1
 800796a:	d10e      	bne.n	800798a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	68da      	ldr	r2, [r3, #12]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f022 0210 	bic.w	r2, r2, #16
 800797a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007980:	4619      	mov	r1, r3
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7ff fe40 	bl	8007608 <HAL_UARTEx_RxEventCallback>
 8007988:	e002      	b.n	8007990 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff fe28 	bl	80075e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007996:	2300      	movs	r3, #0
 8007998:	e002      	b.n	80079a0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	e000      	b.n	80079a0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800799e:	2302      	movs	r3, #2
  }
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ac:	b09f      	sub	sp, #124	; 0x7c
 80079ae:	af00      	add	r7, sp, #0
 80079b0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80079bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079be:	68d9      	ldr	r1, [r3, #12]
 80079c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	ea40 0301 	orr.w	r3, r0, r1
 80079c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079cc:	689a      	ldr	r2, [r3, #8]
 80079ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	431a      	orrs	r2, r3
 80079d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d6:	695b      	ldr	r3, [r3, #20]
 80079d8:	431a      	orrs	r2, r3
 80079da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079dc:	69db      	ldr	r3, [r3, #28]
 80079de:	4313      	orrs	r3, r2
 80079e0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80079e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80079ec:	f021 010c 	bic.w	r1, r1, #12
 80079f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079f6:	430b      	orrs	r3, r1
 80079f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	695b      	ldr	r3, [r3, #20]
 8007a00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a06:	6999      	ldr	r1, [r3, #24]
 8007a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	ea40 0301 	orr.w	r3, r0, r1
 8007a10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a14:	681a      	ldr	r2, [r3, #0]
 8007a16:	4bc5      	ldr	r3, [pc, #788]	; (8007d2c <UART_SetConfig+0x384>)
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d004      	beq.n	8007a26 <UART_SetConfig+0x7e>
 8007a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	4bc3      	ldr	r3, [pc, #780]	; (8007d30 <UART_SetConfig+0x388>)
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d103      	bne.n	8007a2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a26:	f7fd fcf7 	bl	8005418 <HAL_RCC_GetPCLK2Freq>
 8007a2a:	6778      	str	r0, [r7, #116]	; 0x74
 8007a2c:	e002      	b.n	8007a34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a2e:	f7fd fcdf 	bl	80053f0 <HAL_RCC_GetPCLK1Freq>
 8007a32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a36:	69db      	ldr	r3, [r3, #28]
 8007a38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a3c:	f040 80b6 	bne.w	8007bac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a42:	461c      	mov	r4, r3
 8007a44:	f04f 0500 	mov.w	r5, #0
 8007a48:	4622      	mov	r2, r4
 8007a4a:	462b      	mov	r3, r5
 8007a4c:	1891      	adds	r1, r2, r2
 8007a4e:	6439      	str	r1, [r7, #64]	; 0x40
 8007a50:	415b      	adcs	r3, r3
 8007a52:	647b      	str	r3, [r7, #68]	; 0x44
 8007a54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007a58:	1912      	adds	r2, r2, r4
 8007a5a:	eb45 0303 	adc.w	r3, r5, r3
 8007a5e:	f04f 0000 	mov.w	r0, #0
 8007a62:	f04f 0100 	mov.w	r1, #0
 8007a66:	00d9      	lsls	r1, r3, #3
 8007a68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007a6c:	00d0      	lsls	r0, r2, #3
 8007a6e:	4602      	mov	r2, r0
 8007a70:	460b      	mov	r3, r1
 8007a72:	1911      	adds	r1, r2, r4
 8007a74:	6639      	str	r1, [r7, #96]	; 0x60
 8007a76:	416b      	adcs	r3, r5
 8007a78:	667b      	str	r3, [r7, #100]	; 0x64
 8007a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	f04f 0300 	mov.w	r3, #0
 8007a84:	1891      	adds	r1, r2, r2
 8007a86:	63b9      	str	r1, [r7, #56]	; 0x38
 8007a88:	415b      	adcs	r3, r3
 8007a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007a90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007a94:	f7f9 f958 	bl	8000d48 <__aeabi_uldivmod>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4ba5      	ldr	r3, [pc, #660]	; (8007d34 <UART_SetConfig+0x38c>)
 8007a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8007aa2:	095b      	lsrs	r3, r3, #5
 8007aa4:	011e      	lsls	r6, r3, #4
 8007aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aa8:	461c      	mov	r4, r3
 8007aaa:	f04f 0500 	mov.w	r5, #0
 8007aae:	4622      	mov	r2, r4
 8007ab0:	462b      	mov	r3, r5
 8007ab2:	1891      	adds	r1, r2, r2
 8007ab4:	6339      	str	r1, [r7, #48]	; 0x30
 8007ab6:	415b      	adcs	r3, r3
 8007ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8007aba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007abe:	1912      	adds	r2, r2, r4
 8007ac0:	eb45 0303 	adc.w	r3, r5, r3
 8007ac4:	f04f 0000 	mov.w	r0, #0
 8007ac8:	f04f 0100 	mov.w	r1, #0
 8007acc:	00d9      	lsls	r1, r3, #3
 8007ace:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007ad2:	00d0      	lsls	r0, r2, #3
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	1911      	adds	r1, r2, r4
 8007ada:	65b9      	str	r1, [r7, #88]	; 0x58
 8007adc:	416b      	adcs	r3, r5
 8007ade:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ae0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	461a      	mov	r2, r3
 8007ae6:	f04f 0300 	mov.w	r3, #0
 8007aea:	1891      	adds	r1, r2, r2
 8007aec:	62b9      	str	r1, [r7, #40]	; 0x28
 8007aee:	415b      	adcs	r3, r3
 8007af0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007af6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007afa:	f7f9 f925 	bl	8000d48 <__aeabi_uldivmod>
 8007afe:	4602      	mov	r2, r0
 8007b00:	460b      	mov	r3, r1
 8007b02:	4b8c      	ldr	r3, [pc, #560]	; (8007d34 <UART_SetConfig+0x38c>)
 8007b04:	fba3 1302 	umull	r1, r3, r3, r2
 8007b08:	095b      	lsrs	r3, r3, #5
 8007b0a:	2164      	movs	r1, #100	; 0x64
 8007b0c:	fb01 f303 	mul.w	r3, r1, r3
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	3332      	adds	r3, #50	; 0x32
 8007b16:	4a87      	ldr	r2, [pc, #540]	; (8007d34 <UART_SetConfig+0x38c>)
 8007b18:	fba2 2303 	umull	r2, r3, r2, r3
 8007b1c:	095b      	lsrs	r3, r3, #5
 8007b1e:	005b      	lsls	r3, r3, #1
 8007b20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b24:	441e      	add	r6, r3
 8007b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f04f 0100 	mov.w	r1, #0
 8007b2e:	4602      	mov	r2, r0
 8007b30:	460b      	mov	r3, r1
 8007b32:	1894      	adds	r4, r2, r2
 8007b34:	623c      	str	r4, [r7, #32]
 8007b36:	415b      	adcs	r3, r3
 8007b38:	627b      	str	r3, [r7, #36]	; 0x24
 8007b3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007b3e:	1812      	adds	r2, r2, r0
 8007b40:	eb41 0303 	adc.w	r3, r1, r3
 8007b44:	f04f 0400 	mov.w	r4, #0
 8007b48:	f04f 0500 	mov.w	r5, #0
 8007b4c:	00dd      	lsls	r5, r3, #3
 8007b4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007b52:	00d4      	lsls	r4, r2, #3
 8007b54:	4622      	mov	r2, r4
 8007b56:	462b      	mov	r3, r5
 8007b58:	1814      	adds	r4, r2, r0
 8007b5a:	653c      	str	r4, [r7, #80]	; 0x50
 8007b5c:	414b      	adcs	r3, r1
 8007b5e:	657b      	str	r3, [r7, #84]	; 0x54
 8007b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	461a      	mov	r2, r3
 8007b66:	f04f 0300 	mov.w	r3, #0
 8007b6a:	1891      	adds	r1, r2, r2
 8007b6c:	61b9      	str	r1, [r7, #24]
 8007b6e:	415b      	adcs	r3, r3
 8007b70:	61fb      	str	r3, [r7, #28]
 8007b72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007b7a:	f7f9 f8e5 	bl	8000d48 <__aeabi_uldivmod>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	460b      	mov	r3, r1
 8007b82:	4b6c      	ldr	r3, [pc, #432]	; (8007d34 <UART_SetConfig+0x38c>)
 8007b84:	fba3 1302 	umull	r1, r3, r3, r2
 8007b88:	095b      	lsrs	r3, r3, #5
 8007b8a:	2164      	movs	r1, #100	; 0x64
 8007b8c:	fb01 f303 	mul.w	r3, r1, r3
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	00db      	lsls	r3, r3, #3
 8007b94:	3332      	adds	r3, #50	; 0x32
 8007b96:	4a67      	ldr	r2, [pc, #412]	; (8007d34 <UART_SetConfig+0x38c>)
 8007b98:	fba2 2303 	umull	r2, r3, r2, r3
 8007b9c:	095b      	lsrs	r3, r3, #5
 8007b9e:	f003 0207 	and.w	r2, r3, #7
 8007ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4432      	add	r2, r6
 8007ba8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007baa:	e0b9      	b.n	8007d20 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007bae:	461c      	mov	r4, r3
 8007bb0:	f04f 0500 	mov.w	r5, #0
 8007bb4:	4622      	mov	r2, r4
 8007bb6:	462b      	mov	r3, r5
 8007bb8:	1891      	adds	r1, r2, r2
 8007bba:	6139      	str	r1, [r7, #16]
 8007bbc:	415b      	adcs	r3, r3
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007bc4:	1912      	adds	r2, r2, r4
 8007bc6:	eb45 0303 	adc.w	r3, r5, r3
 8007bca:	f04f 0000 	mov.w	r0, #0
 8007bce:	f04f 0100 	mov.w	r1, #0
 8007bd2:	00d9      	lsls	r1, r3, #3
 8007bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bd8:	00d0      	lsls	r0, r2, #3
 8007bda:	4602      	mov	r2, r0
 8007bdc:	460b      	mov	r3, r1
 8007bde:	eb12 0804 	adds.w	r8, r2, r4
 8007be2:	eb43 0905 	adc.w	r9, r3, r5
 8007be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f04f 0100 	mov.w	r1, #0
 8007bf0:	f04f 0200 	mov.w	r2, #0
 8007bf4:	f04f 0300 	mov.w	r3, #0
 8007bf8:	008b      	lsls	r3, r1, #2
 8007bfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007bfe:	0082      	lsls	r2, r0, #2
 8007c00:	4640      	mov	r0, r8
 8007c02:	4649      	mov	r1, r9
 8007c04:	f7f9 f8a0 	bl	8000d48 <__aeabi_uldivmod>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4b49      	ldr	r3, [pc, #292]	; (8007d34 <UART_SetConfig+0x38c>)
 8007c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c12:	095b      	lsrs	r3, r3, #5
 8007c14:	011e      	lsls	r6, r3, #4
 8007c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f04f 0100 	mov.w	r1, #0
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	1894      	adds	r4, r2, r2
 8007c24:	60bc      	str	r4, [r7, #8]
 8007c26:	415b      	adcs	r3, r3
 8007c28:	60fb      	str	r3, [r7, #12]
 8007c2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c2e:	1812      	adds	r2, r2, r0
 8007c30:	eb41 0303 	adc.w	r3, r1, r3
 8007c34:	f04f 0400 	mov.w	r4, #0
 8007c38:	f04f 0500 	mov.w	r5, #0
 8007c3c:	00dd      	lsls	r5, r3, #3
 8007c3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007c42:	00d4      	lsls	r4, r2, #3
 8007c44:	4622      	mov	r2, r4
 8007c46:	462b      	mov	r3, r5
 8007c48:	1814      	adds	r4, r2, r0
 8007c4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8007c4c:	414b      	adcs	r3, r1
 8007c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f04f 0100 	mov.w	r1, #0
 8007c5a:	f04f 0200 	mov.w	r2, #0
 8007c5e:	f04f 0300 	mov.w	r3, #0
 8007c62:	008b      	lsls	r3, r1, #2
 8007c64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007c68:	0082      	lsls	r2, r0, #2
 8007c6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007c6e:	f7f9 f86b 	bl	8000d48 <__aeabi_uldivmod>
 8007c72:	4602      	mov	r2, r0
 8007c74:	460b      	mov	r3, r1
 8007c76:	4b2f      	ldr	r3, [pc, #188]	; (8007d34 <UART_SetConfig+0x38c>)
 8007c78:	fba3 1302 	umull	r1, r3, r3, r2
 8007c7c:	095b      	lsrs	r3, r3, #5
 8007c7e:	2164      	movs	r1, #100	; 0x64
 8007c80:	fb01 f303 	mul.w	r3, r1, r3
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	011b      	lsls	r3, r3, #4
 8007c88:	3332      	adds	r3, #50	; 0x32
 8007c8a:	4a2a      	ldr	r2, [pc, #168]	; (8007d34 <UART_SetConfig+0x38c>)
 8007c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c90:	095b      	lsrs	r3, r3, #5
 8007c92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c96:	441e      	add	r6, r3
 8007c98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f04f 0100 	mov.w	r1, #0
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	460b      	mov	r3, r1
 8007ca4:	1894      	adds	r4, r2, r2
 8007ca6:	603c      	str	r4, [r7, #0]
 8007ca8:	415b      	adcs	r3, r3
 8007caa:	607b      	str	r3, [r7, #4]
 8007cac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cb0:	1812      	adds	r2, r2, r0
 8007cb2:	eb41 0303 	adc.w	r3, r1, r3
 8007cb6:	f04f 0400 	mov.w	r4, #0
 8007cba:	f04f 0500 	mov.w	r5, #0
 8007cbe:	00dd      	lsls	r5, r3, #3
 8007cc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007cc4:	00d4      	lsls	r4, r2, #3
 8007cc6:	4622      	mov	r2, r4
 8007cc8:	462b      	mov	r3, r5
 8007cca:	eb12 0a00 	adds.w	sl, r2, r0
 8007cce:	eb43 0b01 	adc.w	fp, r3, r1
 8007cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f04f 0100 	mov.w	r1, #0
 8007cdc:	f04f 0200 	mov.w	r2, #0
 8007ce0:	f04f 0300 	mov.w	r3, #0
 8007ce4:	008b      	lsls	r3, r1, #2
 8007ce6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007cea:	0082      	lsls	r2, r0, #2
 8007cec:	4650      	mov	r0, sl
 8007cee:	4659      	mov	r1, fp
 8007cf0:	f7f9 f82a 	bl	8000d48 <__aeabi_uldivmod>
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	460b      	mov	r3, r1
 8007cf8:	4b0e      	ldr	r3, [pc, #56]	; (8007d34 <UART_SetConfig+0x38c>)
 8007cfa:	fba3 1302 	umull	r1, r3, r3, r2
 8007cfe:	095b      	lsrs	r3, r3, #5
 8007d00:	2164      	movs	r1, #100	; 0x64
 8007d02:	fb01 f303 	mul.w	r3, r1, r3
 8007d06:	1ad3      	subs	r3, r2, r3
 8007d08:	011b      	lsls	r3, r3, #4
 8007d0a:	3332      	adds	r3, #50	; 0x32
 8007d0c:	4a09      	ldr	r2, [pc, #36]	; (8007d34 <UART_SetConfig+0x38c>)
 8007d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8007d12:	095b      	lsrs	r3, r3, #5
 8007d14:	f003 020f 	and.w	r2, r3, #15
 8007d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4432      	add	r2, r6
 8007d1e:	609a      	str	r2, [r3, #8]
}
 8007d20:	bf00      	nop
 8007d22:	377c      	adds	r7, #124	; 0x7c
 8007d24:	46bd      	mov	sp, r7
 8007d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d2a:	bf00      	nop
 8007d2c:	40011000 	.word	0x40011000
 8007d30:	40011400 	.word	0x40011400
 8007d34:	51eb851f 	.word	0x51eb851f

08007d38 <SetTextValueFloat>:
	snprintf((char *)buffer, sizeof(buffer), "%ld", value); //把整数转换为字符串
	SetTextValue(screen_id, control_id, buffer);
}

void SetTextValueFloat(uint16 screen_id, uint16 control_id, float value)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af02      	add	r7, sp, #8
 8007d3e:	4603      	mov	r3, r0
 8007d40:	460a      	mov	r2, r1
 8007d42:	ed87 0a00 	vstr	s0, [r7]
 8007d46:	80fb      	strh	r3, [r7, #6]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	80bb      	strh	r3, [r7, #4]

	uchar buffer[12] = {0};
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	f107 0310 	add.w	r3, r7, #16
 8007d54:	2200      	movs	r2, #0
 8007d56:	601a      	str	r2, [r3, #0]
 8007d58:	605a      	str	r2, [r3, #4]
	snprintf((char *)buffer, sizeof(buffer), "%.1f", value); //把浮点数转换为字符串(保留一位小数)
 8007d5a:	6838      	ldr	r0, [r7, #0]
 8007d5c:	f7f8 fc54 	bl	8000608 <__aeabi_f2d>
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	f107 000c 	add.w	r0, r7, #12
 8007d68:	e9cd 2300 	strd	r2, r3, [sp]
 8007d6c:	4a07      	ldr	r2, [pc, #28]	; (8007d8c <SetTextValueFloat+0x54>)
 8007d6e:	210c      	movs	r1, #12
 8007d70:	f002 fbae 	bl	800a4d0 <sniprintf>
	SetTextValue(screen_id, control_id, buffer);
 8007d74:	f107 020c 	add.w	r2, r7, #12
 8007d78:	88b9      	ldrh	r1, [r7, #4]
 8007d7a:	88fb      	ldrh	r3, [r7, #6]
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 f837 	bl	8007df0 <SetTextValue>

}
 8007d82:	bf00      	nop
 8007d84:	3718      	adds	r7, #24
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	0800f798 	.word	0x0800f798

08007d90 <queue_reset>:
static qsize cmd_pos = 0;  //当前指令指针位置

extern u8 IPD;

void queue_reset()
{
 8007d90:	b480      	push	{r7}
 8007d92:	af00      	add	r7, sp, #0
	que._head = que._tail = 0;
 8007d94:	4b08      	ldr	r3, [pc, #32]	; (8007db8 <queue_reset+0x28>)
 8007d96:	2200      	movs	r2, #0
 8007d98:	805a      	strh	r2, [r3, #2]
 8007d9a:	4b07      	ldr	r3, [pc, #28]	; (8007db8 <queue_reset+0x28>)
 8007d9c:	885a      	ldrh	r2, [r3, #2]
 8007d9e:	4b06      	ldr	r3, [pc, #24]	; (8007db8 <queue_reset+0x28>)
 8007da0:	801a      	strh	r2, [r3, #0]
	cmd_pos = cmd_state = 0;
 8007da2:	4b06      	ldr	r3, [pc, #24]	; (8007dbc <queue_reset+0x2c>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	601a      	str	r2, [r3, #0]
 8007da8:	4b05      	ldr	r3, [pc, #20]	; (8007dc0 <queue_reset+0x30>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	801a      	strh	r2, [r3, #0]
}
 8007dae:	bf00      	nop
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr
 8007db8:	20000288 	.word	0x20000288
 8007dbc:	2000030c 	.word	0x2000030c
 8007dc0:	20000310 	.word	0x20000310

08007dc4 <SendStrings>:
	for(i = n;i>0;i--)
		for(j=1000;j>0;j--) ; 
}

void SendStrings(uchar *str)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b082      	sub	sp, #8
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
	while(*str)
 8007dcc:	e007      	b.n	8007dde <SendStrings+0x1a>
	{
		TX_8(*str);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 f85a 	bl	8007e8c <SendChar>
		str++;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	607b      	str	r3, [r7, #4]
	while(*str)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1f3      	bne.n	8007dce <SendStrings+0xa>
	}
}
 8007de6:	bf00      	nop
 8007de8:	bf00      	nop
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}

08007df0 <SetTextValue>:
	TX_8(state);
	END_CMD();
}

void SetTextValue(uint16 screen_id,uint16 control_id,uchar *str)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b082      	sub	sp, #8
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	4603      	mov	r3, r0
 8007df8:	603a      	str	r2, [r7, #0]
 8007dfa:	80fb      	strh	r3, [r7, #6]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	80bb      	strh	r3, [r7, #4]
	BEGIN_CMD();
 8007e00:	20ee      	movs	r0, #238	; 0xee
 8007e02:	f000 f843 	bl	8007e8c <SendChar>
	TX_8(0xB1);
 8007e06:	20b1      	movs	r0, #177	; 0xb1
 8007e08:	f000 f840 	bl	8007e8c <SendChar>
	TX_8(0x10);
 8007e0c:	2010      	movs	r0, #16
 8007e0e:	f000 f83d 	bl	8007e8c <SendChar>
	TX_16(screen_id);
 8007e12:	88fb      	ldrh	r3, [r7, #6]
 8007e14:	0a1b      	lsrs	r3, r3, #8
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	b2db      	uxtb	r3, r3
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f000 f836 	bl	8007e8c <SendChar>
 8007e20:	88fb      	ldrh	r3, [r7, #6]
 8007e22:	b2db      	uxtb	r3, r3
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 f831 	bl	8007e8c <SendChar>
	TX_16(control_id);
 8007e2a:	88bb      	ldrh	r3, [r7, #4]
 8007e2c:	0a1b      	lsrs	r3, r3, #8
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 f82a 	bl	8007e8c <SendChar>
 8007e38:	88bb      	ldrh	r3, [r7, #4]
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 f825 	bl	8007e8c <SendChar>
	SendStrings(str);
 8007e42:	6838      	ldr	r0, [r7, #0]
 8007e44:	f7ff ffbe 	bl	8007dc4 <SendStrings>
	END_CMD();
 8007e48:	20ff      	movs	r0, #255	; 0xff
 8007e4a:	f000 f81f 	bl	8007e8c <SendChar>
 8007e4e:	20fc      	movs	r0, #252	; 0xfc
 8007e50:	f000 f81c 	bl	8007e8c <SendChar>
 8007e54:	20ff      	movs	r0, #255	; 0xff
 8007e56:	f000 f819 	bl	8007e8c <SendChar>
 8007e5a:	20ff      	movs	r0, #255	; 0xff
 8007e5c:	f000 f816 	bl	8007e8c <SendChar>
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <TFT_Init>:
#include "stm32f4xx_hal_uart.h"

extern UART_HandleTypeDef huart3;

void TFT_Init(u8* buf)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
    HAL_UART_Receive_IT(&huart3, buf, 1);//使能接收中断
 8007e70:	2201      	movs	r2, #1
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	4804      	ldr	r0, [pc, #16]	; (8007e88 <TFT_Init+0x20>)
 8007e76:	f7ff f9cc 	bl	8007212 <HAL_UART_Receive_IT>
    queue_reset();
 8007e7a:	f7ff ff89 	bl	8007d90 <queue_reset>
}
 8007e7e:	bf00      	nop
 8007e80:	3708      	adds	r7, #8
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20000330 	.word	0x20000330

08007e8c <SendChar>:

void  SendChar(uchar t)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	4603      	mov	r3, r0
 8007e94:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, &t, 1, 1);
 8007e96:	1df9      	adds	r1, r7, #7
 8007e98:	2301      	movs	r3, #1
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	4803      	ldr	r0, [pc, #12]	; (8007eac <SendChar+0x20>)
 8007e9e:	f7ff f926 	bl	80070ee <HAL_UART_Transmit>
}
 8007ea2:	bf00      	nop
 8007ea4:	3708      	adds	r7, #8
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	20000330 	.word	0x20000330

08007eb0 <arm_rms_f32>:
 8007eb0:	b530      	push	{r4, r5, lr}
 8007eb2:	088d      	lsrs	r5, r1, #2
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	eddf 5a28 	vldr	s11, [pc, #160]	; 8007f58 <arm_rms_f32+0xa8>
 8007eba:	d020      	beq.n	8007efe <arm_rms_f32+0x4e>
 8007ebc:	f100 0310 	add.w	r3, r0, #16
 8007ec0:	462c      	mov	r4, r5
 8007ec2:	ed53 6a04 	vldr	s13, [r3, #-16]
 8007ec6:	ed13 7a03 	vldr	s14, [r3, #-12]
 8007eca:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007ece:	ed13 6a01 	vldr	s12, [r3, #-4]
 8007ed2:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8007ed6:	ee27 7a07 	vmul.f32	s14, s14, s14
 8007eda:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8007ede:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8007ee2:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007ee6:	ee26 6a06 	vmul.f32	s12, s12, s12
 8007eea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007eee:	3c01      	subs	r4, #1
 8007ef0:	f103 0310 	add.w	r3, r3, #16
 8007ef4:	ee76 5a27 	vadd.f32	s11, s12, s15
 8007ef8:	d1e3      	bne.n	8007ec2 <arm_rms_f32+0x12>
 8007efa:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007efe:	f011 0303 	ands.w	r3, r1, #3
 8007f02:	d007      	beq.n	8007f14 <arm_rms_f32+0x64>
 8007f04:	ecb0 6a01 	vldmia	r0!, {s12}
 8007f08:	ee26 6a06 	vmul.f32	s12, s12, s12
 8007f0c:	3b01      	subs	r3, #1
 8007f0e:	ee75 5a86 	vadd.f32	s11, s11, s12
 8007f12:	d1f7      	bne.n	8007f04 <arm_rms_f32+0x54>
 8007f14:	ee07 1a90 	vmov	s15, r1
 8007f18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	ee85 7aa7 	vdiv.f32	s14, s11, s15
 8007f22:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f2a:	da02      	bge.n	8007f32 <arm_rms_f32+0x82>
 8007f2c:	6013      	str	r3, [r2, #0]
 8007f2e:	b003      	add	sp, #12
 8007f30:	bd30      	pop	{r4, r5, pc}
 8007f32:	eeb1 0ac7 	vsqrt.f32	s0, s14
 8007f36:	eeb4 0a40 	vcmp.f32	s0, s0
 8007f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f3e:	d103      	bne.n	8007f48 <arm_rms_f32+0x98>
 8007f40:	ed82 0a00 	vstr	s0, [r2]
 8007f44:	b003      	add	sp, #12
 8007f46:	bd30      	pop	{r4, r5, pc}
 8007f48:	eeb0 0a47 	vmov.f32	s0, s14
 8007f4c:	9201      	str	r2, [sp, #4]
 8007f4e:	f006 f931 	bl	800e1b4 <sqrtf>
 8007f52:	9a01      	ldr	r2, [sp, #4]
 8007f54:	e7f4      	b.n	8007f40 <arm_rms_f32+0x90>
 8007f56:	bf00      	nop
 8007f58:	00000000 	.word	0x00000000

08007f5c <arm_mean_f32>:
 8007f5c:	b430      	push	{r4, r5}
 8007f5e:	088d      	lsrs	r5, r1, #2
 8007f60:	eddf 7a17 	vldr	s15, [pc, #92]	; 8007fc0 <arm_mean_f32+0x64>
 8007f64:	d018      	beq.n	8007f98 <arm_mean_f32+0x3c>
 8007f66:	f100 0310 	add.w	r3, r0, #16
 8007f6a:	462c      	mov	r4, r5
 8007f6c:	ed13 7a04 	vldr	s14, [r3, #-16]
 8007f70:	ed53 5a03 	vldr	s11, [r3, #-12]
 8007f74:	ed13 6a02 	vldr	s12, [r3, #-8]
 8007f78:	ed53 6a01 	vldr	s13, [r3, #-4]
 8007f7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f80:	3c01      	subs	r4, #1
 8007f82:	ee77 7a25 	vadd.f32	s15, s14, s11
 8007f86:	f103 0310 	add.w	r3, r3, #16
 8007f8a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f92:	d1eb      	bne.n	8007f6c <arm_mean_f32+0x10>
 8007f94:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007f98:	f011 0303 	ands.w	r3, r1, #3
 8007f9c:	d005      	beq.n	8007faa <arm_mean_f32+0x4e>
 8007f9e:	ecb0 7a01 	vldmia	r0!, {s14}
 8007fa2:	3b01      	subs	r3, #1
 8007fa4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007fa8:	d1f9      	bne.n	8007f9e <arm_mean_f32+0x42>
 8007faa:	ee07 1a10 	vmov	s14, r1
 8007fae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8007fb2:	bc30      	pop	{r4, r5}
 8007fb4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8007fb8:	edc2 6a00 	vstr	s13, [r2]
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	00000000 	.word	0x00000000

08007fc4 <arm_pid_init_f32>:
 8007fc4:	edd0 6a08 	vldr	s13, [r0, #32]
 8007fc8:	edd0 7a06 	vldr	s15, [r0, #24]
 8007fcc:	ed90 7a07 	vldr	s14, [r0, #28]
 8007fd0:	edc0 6a02 	vstr	s13, [r0, #8]
 8007fd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fd8:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8007fdc:	eef1 7a67 	vneg.f32	s15, s15
 8007fe0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007fe4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007fe8:	ed80 7a00 	vstr	s14, [r0]
 8007fec:	edc0 7a01 	vstr	s15, [r0, #4]
 8007ff0:	b119      	cbz	r1, 8007ffa <arm_pid_init_f32+0x36>
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60c3      	str	r3, [r0, #12]
 8007ff6:	6103      	str	r3, [r0, #16]
 8007ff8:	6143      	str	r3, [r0, #20]
 8007ffa:	4770      	bx	lr

08007ffc <arm_rfft_fast_init_f32>:
 8007ffc:	084b      	lsrs	r3, r1, #1
 8007ffe:	2b80      	cmp	r3, #128	; 0x80
 8008000:	b410      	push	{r4}
 8008002:	8201      	strh	r1, [r0, #16]
 8008004:	8003      	strh	r3, [r0, #0]
 8008006:	d046      	beq.n	8008096 <arm_rfft_fast_init_f32+0x9a>
 8008008:	d916      	bls.n	8008038 <arm_rfft_fast_init_f32+0x3c>
 800800a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800800e:	d03c      	beq.n	800808a <arm_rfft_fast_init_f32+0x8e>
 8008010:	d928      	bls.n	8008064 <arm_rfft_fast_init_f32+0x68>
 8008012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008016:	d01f      	beq.n	8008058 <arm_rfft_fast_init_f32+0x5c>
 8008018:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800801c:	d112      	bne.n	8008044 <arm_rfft_fast_init_f32+0x48>
 800801e:	4920      	ldr	r1, [pc, #128]	; (80080a0 <arm_rfft_fast_init_f32+0xa4>)
 8008020:	4a20      	ldr	r2, [pc, #128]	; (80080a4 <arm_rfft_fast_init_f32+0xa8>)
 8008022:	4b21      	ldr	r3, [pc, #132]	; (80080a8 <arm_rfft_fast_init_f32+0xac>)
 8008024:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 8008028:	8184      	strh	r4, [r0, #12]
 800802a:	6081      	str	r1, [r0, #8]
 800802c:	6042      	str	r2, [r0, #4]
 800802e:	6143      	str	r3, [r0, #20]
 8008030:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008034:	2000      	movs	r0, #0
 8008036:	4770      	bx	lr
 8008038:	2b20      	cmp	r3, #32
 800803a:	d01c      	beq.n	8008076 <arm_rfft_fast_init_f32+0x7a>
 800803c:	2b40      	cmp	r3, #64	; 0x40
 800803e:	d006      	beq.n	800804e <arm_rfft_fast_init_f32+0x52>
 8008040:	2b10      	cmp	r3, #16
 8008042:	d01d      	beq.n	8008080 <arm_rfft_fast_init_f32+0x84>
 8008044:	f04f 30ff 	mov.w	r0, #4294967295
 8008048:	f85d 4b04 	ldr.w	r4, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	2438      	movs	r4, #56	; 0x38
 8008050:	4916      	ldr	r1, [pc, #88]	; (80080ac <arm_rfft_fast_init_f32+0xb0>)
 8008052:	4a17      	ldr	r2, [pc, #92]	; (80080b0 <arm_rfft_fast_init_f32+0xb4>)
 8008054:	4b17      	ldr	r3, [pc, #92]	; (80080b4 <arm_rfft_fast_init_f32+0xb8>)
 8008056:	e7e7      	b.n	8008028 <arm_rfft_fast_init_f32+0x2c>
 8008058:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 800805c:	4916      	ldr	r1, [pc, #88]	; (80080b8 <arm_rfft_fast_init_f32+0xbc>)
 800805e:	4a17      	ldr	r2, [pc, #92]	; (80080bc <arm_rfft_fast_init_f32+0xc0>)
 8008060:	4b17      	ldr	r3, [pc, #92]	; (80080c0 <arm_rfft_fast_init_f32+0xc4>)
 8008062:	e7e1      	b.n	8008028 <arm_rfft_fast_init_f32+0x2c>
 8008064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008068:	d1ec      	bne.n	8008044 <arm_rfft_fast_init_f32+0x48>
 800806a:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 800806e:	4915      	ldr	r1, [pc, #84]	; (80080c4 <arm_rfft_fast_init_f32+0xc8>)
 8008070:	4a15      	ldr	r2, [pc, #84]	; (80080c8 <arm_rfft_fast_init_f32+0xcc>)
 8008072:	4b16      	ldr	r3, [pc, #88]	; (80080cc <arm_rfft_fast_init_f32+0xd0>)
 8008074:	e7d8      	b.n	8008028 <arm_rfft_fast_init_f32+0x2c>
 8008076:	2430      	movs	r4, #48	; 0x30
 8008078:	4915      	ldr	r1, [pc, #84]	; (80080d0 <arm_rfft_fast_init_f32+0xd4>)
 800807a:	4a16      	ldr	r2, [pc, #88]	; (80080d4 <arm_rfft_fast_init_f32+0xd8>)
 800807c:	4b16      	ldr	r3, [pc, #88]	; (80080d8 <arm_rfft_fast_init_f32+0xdc>)
 800807e:	e7d3      	b.n	8008028 <arm_rfft_fast_init_f32+0x2c>
 8008080:	2414      	movs	r4, #20
 8008082:	4916      	ldr	r1, [pc, #88]	; (80080dc <arm_rfft_fast_init_f32+0xe0>)
 8008084:	4a16      	ldr	r2, [pc, #88]	; (80080e0 <arm_rfft_fast_init_f32+0xe4>)
 8008086:	4b17      	ldr	r3, [pc, #92]	; (80080e4 <arm_rfft_fast_init_f32+0xe8>)
 8008088:	e7ce      	b.n	8008028 <arm_rfft_fast_init_f32+0x2c>
 800808a:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 800808e:	4916      	ldr	r1, [pc, #88]	; (80080e8 <arm_rfft_fast_init_f32+0xec>)
 8008090:	4a16      	ldr	r2, [pc, #88]	; (80080ec <arm_rfft_fast_init_f32+0xf0>)
 8008092:	4b17      	ldr	r3, [pc, #92]	; (80080f0 <arm_rfft_fast_init_f32+0xf4>)
 8008094:	e7c8      	b.n	8008028 <arm_rfft_fast_init_f32+0x2c>
 8008096:	24d0      	movs	r4, #208	; 0xd0
 8008098:	4916      	ldr	r1, [pc, #88]	; (80080f4 <arm_rfft_fast_init_f32+0xf8>)
 800809a:	4a17      	ldr	r2, [pc, #92]	; (80080f8 <arm_rfft_fast_init_f32+0xfc>)
 800809c:	4b17      	ldr	r3, [pc, #92]	; (80080fc <arm_rfft_fast_init_f32+0x100>)
 800809e:	e7c3      	b.n	8008028 <arm_rfft_fast_init_f32+0x2c>
 80080a0:	0801e7f0 	.word	0x0801e7f0
 80080a4:	0800f9e8 	.word	0x0800f9e8
 80080a8:	08015b58 	.word	0x08015b58
 80080ac:	08013ae8 	.word	0x08013ae8
 80080b0:	080205b0 	.word	0x080205b0
 80080b4:	08022aa0 	.word	0x08022aa0
 80080b8:	0801c4d8 	.word	0x0801c4d8
 80080bc:	0801a3d8 	.word	0x0801a3d8
 80080c0:	08013b58 	.word	0x08013b58
 80080c4:	08022730 	.word	0x08022730
 80080c8:	08019b58 	.word	0x08019b58
 80080cc:	080207b0 	.word	0x080207b0
 80080d0:	0801d390 	.word	0x0801d390
 80080d4:	0801c3d8 	.word	0x0801c3d8
 80080d8:	080139e8 	.word	0x080139e8
 80080dc:	0801d2e8 	.word	0x0801d2e8
 80080e0:	0801a358 	.word	0x0801a358
 80080e4:	0801d310 	.word	0x0801d310
 80080e8:	08020fb0 	.word	0x08020fb0
 80080ec:	0801d7f0 	.word	0x0801d7f0
 80080f0:	08021330 	.word	0x08021330
 80080f4:	08022ca0 	.word	0x08022ca0
 80080f8:	0801d3f0 	.word	0x0801d3f0
 80080fc:	08022330 	.word	0x08022330

08008100 <arm_rfft_fast_f32>:
 8008100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008104:	8a06      	ldrh	r6, [r0, #16]
 8008106:	0876      	lsrs	r6, r6, #1
 8008108:	4607      	mov	r7, r0
 800810a:	4615      	mov	r5, r2
 800810c:	8006      	strh	r6, [r0, #0]
 800810e:	460c      	mov	r4, r1
 8008110:	2b00      	cmp	r3, #0
 8008112:	d15c      	bne.n	80081ce <arm_rfft_fast_f32+0xce>
 8008114:	461a      	mov	r2, r3
 8008116:	2301      	movs	r3, #1
 8008118:	f000 fbe4 	bl	80088e4 <arm_cfft_f32>
 800811c:	edd4 7a00 	vldr	s15, [r4]
 8008120:	ed94 7a01 	vldr	s14, [r4, #4]
 8008124:	883e      	ldrh	r6, [r7, #0]
 8008126:	6978      	ldr	r0, [r7, #20]
 8008128:	ee37 7a07 	vadd.f32	s14, s14, s14
 800812c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008130:	eeb6 3a00 	vmov.f32	s6, #96	; 0x3f000000  0.5
 8008134:	ee77 6a87 	vadd.f32	s13, s15, s14
 8008138:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800813c:	3e01      	subs	r6, #1
 800813e:	ee26 7a83 	vmul.f32	s14, s13, s6
 8008142:	ee67 7a83 	vmul.f32	s15, s15, s6
 8008146:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 800814a:	ed85 7a00 	vstr	s14, [r5]
 800814e:	edc5 7a01 	vstr	s15, [r5, #4]
 8008152:	3010      	adds	r0, #16
 8008154:	f105 0210 	add.w	r2, r5, #16
 8008158:	3b08      	subs	r3, #8
 800815a:	f104 0110 	add.w	r1, r4, #16
 800815e:	ed93 7a02 	vldr	s14, [r3, #8]
 8008162:	ed51 6a02 	vldr	s13, [r1, #-8]
 8008166:	ed10 6a02 	vldr	s12, [r0, #-8]
 800816a:	edd3 3a03 	vldr	s7, [r3, #12]
 800816e:	ed11 5a01 	vldr	s10, [r1, #-4]
 8008172:	ed50 5a01 	vldr	s11, [r0, #-4]
 8008176:	ee77 7a66 	vsub.f32	s15, s14, s13
 800817a:	ee77 4a26 	vadd.f32	s9, s14, s13
 800817e:	ee33 4a85 	vadd.f32	s8, s7, s10
 8008182:	ee66 6a27 	vmul.f32	s13, s12, s15
 8008186:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800818a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800818e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8008192:	ee77 7a05 	vadd.f32	s15, s14, s10
 8008196:	ee26 6a04 	vmul.f32	s12, s12, s8
 800819a:	ee65 5a84 	vmul.f32	s11, s11, s8
 800819e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80081a2:	ee36 7aa5 	vadd.f32	s14, s13, s11
 80081a6:	ee67 7a83 	vmul.f32	s15, s15, s6
 80081aa:	ee27 7a03 	vmul.f32	s14, s14, s6
 80081ae:	3e01      	subs	r6, #1
 80081b0:	ed02 7a02 	vstr	s14, [r2, #-8]
 80081b4:	ed42 7a01 	vstr	s15, [r2, #-4]
 80081b8:	f1a3 0308 	sub.w	r3, r3, #8
 80081bc:	f101 0108 	add.w	r1, r1, #8
 80081c0:	f100 0008 	add.w	r0, r0, #8
 80081c4:	f102 0208 	add.w	r2, r2, #8
 80081c8:	d1c9      	bne.n	800815e <arm_rfft_fast_f32+0x5e>
 80081ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081ce:	edd1 7a00 	vldr	s15, [r1]
 80081d2:	edd1 6a01 	vldr	s13, [r1, #4]
 80081d6:	6941      	ldr	r1, [r0, #20]
 80081d8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80081dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80081e0:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 80081e4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80081e8:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80081ec:	3e01      	subs	r6, #1
 80081ee:	ed82 7a00 	vstr	s14, [r2]
 80081f2:	edc2 7a01 	vstr	s15, [r2, #4]
 80081f6:	00f0      	lsls	r0, r6, #3
 80081f8:	b3ee      	cbz	r6, 8008276 <arm_rfft_fast_f32+0x176>
 80081fa:	3808      	subs	r0, #8
 80081fc:	f101 0e10 	add.w	lr, r1, #16
 8008200:	4420      	add	r0, r4
 8008202:	f104 0110 	add.w	r1, r4, #16
 8008206:	f102 0c10 	add.w	ip, r2, #16
 800820a:	ed90 7a02 	vldr	s14, [r0, #8]
 800820e:	ed51 6a02 	vldr	s13, [r1, #-8]
 8008212:	ed1e 6a02 	vldr	s12, [lr, #-8]
 8008216:	ed90 4a03 	vldr	s8, [r0, #12]
 800821a:	ed11 5a01 	vldr	s10, [r1, #-4]
 800821e:	ed5e 5a01 	vldr	s11, [lr, #-4]
 8008222:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8008226:	ee74 4a05 	vadd.f32	s9, s8, s10
 800822a:	ee26 3a27 	vmul.f32	s6, s12, s15
 800822e:	ee77 6a26 	vadd.f32	s13, s14, s13
 8008232:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008236:	ee25 7aa7 	vmul.f32	s14, s11, s15
 800823a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800823e:	ee77 7a05 	vadd.f32	s15, s14, s10
 8008242:	ee26 6a24 	vmul.f32	s12, s12, s9
 8008246:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800824a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800824e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 8008252:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8008256:	ee27 7a23 	vmul.f32	s14, s14, s7
 800825a:	3e01      	subs	r6, #1
 800825c:	ed0c 7a02 	vstr	s14, [ip, #-8]
 8008260:	ed4c 7a01 	vstr	s15, [ip, #-4]
 8008264:	f1a0 0008 	sub.w	r0, r0, #8
 8008268:	f101 0108 	add.w	r1, r1, #8
 800826c:	f10e 0e08 	add.w	lr, lr, #8
 8008270:	f10c 0c08 	add.w	ip, ip, #8
 8008274:	d1c9      	bne.n	800820a <arm_rfft_fast_f32+0x10a>
 8008276:	461a      	mov	r2, r3
 8008278:	4629      	mov	r1, r5
 800827a:	4638      	mov	r0, r7
 800827c:	2301      	movs	r3, #1
 800827e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008282:	f000 bb2f 	b.w	80088e4 <arm_cfft_f32>
 8008286:	bf00      	nop

08008288 <arm_cfft_radix8by2_f32>:
 8008288:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800828c:	ed2d 8b08 	vpush	{d8-d11}
 8008290:	4607      	mov	r7, r0
 8008292:	4608      	mov	r0, r1
 8008294:	f8b7 e000 	ldrh.w	lr, [r7]
 8008298:	687a      	ldr	r2, [r7, #4]
 800829a:	ea4f 015e 	mov.w	r1, lr, lsr #1
 800829e:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 80082a2:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80082a6:	f000 80b0 	beq.w	800840a <arm_cfft_radix8by2_f32+0x182>
 80082aa:	008b      	lsls	r3, r1, #2
 80082ac:	3310      	adds	r3, #16
 80082ae:	18c6      	adds	r6, r0, r3
 80082b0:	3210      	adds	r2, #16
 80082b2:	4443      	add	r3, r8
 80082b4:	f100 0510 	add.w	r5, r0, #16
 80082b8:	f108 0410 	add.w	r4, r8, #16
 80082bc:	ed54 1a04 	vldr	s3, [r4, #-16]
 80082c0:	ed54 6a03 	vldr	s13, [r4, #-12]
 80082c4:	ed13 4a04 	vldr	s8, [r3, #-16]
 80082c8:	ed53 3a03 	vldr	s7, [r3, #-12]
 80082cc:	ed53 5a02 	vldr	s11, [r3, #-8]
 80082d0:	ed13 5a01 	vldr	s10, [r3, #-4]
 80082d4:	ed14 0a02 	vldr	s0, [r4, #-8]
 80082d8:	ed54 7a01 	vldr	s15, [r4, #-4]
 80082dc:	ed16 2a04 	vldr	s4, [r6, #-16]
 80082e0:	ed56 2a03 	vldr	s5, [r6, #-12]
 80082e4:	ed15 6a03 	vldr	s12, [r5, #-12]
 80082e8:	ed15 7a01 	vldr	s14, [r5, #-4]
 80082ec:	ed15 3a04 	vldr	s6, [r5, #-16]
 80082f0:	ed56 0a02 	vldr	s1, [r6, #-8]
 80082f4:	ed16 1a01 	vldr	s2, [r6, #-4]
 80082f8:	ed55 4a02 	vldr	s9, [r5, #-8]
 80082fc:	ee73 ba21 	vadd.f32	s23, s6, s3
 8008300:	ee36 ba26 	vadd.f32	s22, s12, s13
 8008304:	ee37 aa27 	vadd.f32	s20, s14, s15
 8008308:	ee72 9a04 	vadd.f32	s19, s4, s8
 800830c:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8008310:	ee31 8a05 	vadd.f32	s16, s2, s10
 8008314:	ee74 aa80 	vadd.f32	s21, s9, s0
 8008318:	ee70 8aa5 	vadd.f32	s17, s1, s11
 800831c:	ed45 ba04 	vstr	s23, [r5, #-16]
 8008320:	ed05 ba03 	vstr	s22, [r5, #-12]
 8008324:	ed45 aa02 	vstr	s21, [r5, #-8]
 8008328:	ed05 aa01 	vstr	s20, [r5, #-4]
 800832c:	ed06 8a01 	vstr	s16, [r6, #-4]
 8008330:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008334:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008338:	ed46 8a02 	vstr	s17, [r6, #-8]
 800833c:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008340:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8008344:	ed12 6a03 	vldr	s12, [r2, #-12]
 8008348:	ed52 2a04 	vldr	s5, [r2, #-16]
 800834c:	ee33 3a61 	vsub.f32	s6, s6, s3
 8008350:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008354:	ee26 8a86 	vmul.f32	s16, s13, s12
 8008358:	ee24 2a06 	vmul.f32	s4, s8, s12
 800835c:	ee63 1a22 	vmul.f32	s3, s6, s5
 8008360:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008364:	ee23 3a06 	vmul.f32	s6, s6, s12
 8008368:	ee66 6aa2 	vmul.f32	s13, s13, s5
 800836c:	ee23 6a86 	vmul.f32	s12, s7, s12
 8008370:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8008374:	ee36 6a04 	vadd.f32	s12, s12, s8
 8008378:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800837c:	ee72 3a63 	vsub.f32	s7, s4, s7
 8008380:	ee71 2a88 	vadd.f32	s5, s3, s16
 8008384:	ed44 6a03 	vstr	s13, [r4, #-12]
 8008388:	ed44 2a04 	vstr	s5, [r4, #-16]
 800838c:	ed43 3a04 	vstr	s7, [r3, #-16]
 8008390:	ed03 6a03 	vstr	s12, [r3, #-12]
 8008394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008398:	ee75 6ae0 	vsub.f32	s13, s11, s1
 800839c:	ed12 7a01 	vldr	s14, [r2, #-4]
 80083a0:	ed52 5a02 	vldr	s11, [r2, #-8]
 80083a4:	ee35 6a41 	vsub.f32	s12, s10, s2
 80083a8:	ee74 4ac0 	vsub.f32	s9, s9, s0
 80083ac:	ee67 3a87 	vmul.f32	s7, s15, s14
 80083b0:	ee26 5a87 	vmul.f32	s10, s13, s14
 80083b4:	ee24 4aa5 	vmul.f32	s8, s9, s11
 80083b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80083bc:	ee64 4a87 	vmul.f32	s9, s9, s14
 80083c0:	ee66 6aa5 	vmul.f32	s13, s13, s11
 80083c4:	ee26 7a07 	vmul.f32	s14, s12, s14
 80083c8:	ee26 6a25 	vmul.f32	s12, s12, s11
 80083cc:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80083d0:	ee74 5a23 	vadd.f32	s11, s8, s7
 80083d4:	ee35 6a46 	vsub.f32	s12, s10, s12
 80083d8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80083dc:	f1be 0e01 	subs.w	lr, lr, #1
 80083e0:	ed44 5a02 	vstr	s11, [r4, #-8]
 80083e4:	f105 0510 	add.w	r5, r5, #16
 80083e8:	ed44 7a01 	vstr	s15, [r4, #-4]
 80083ec:	f106 0610 	add.w	r6, r6, #16
 80083f0:	ed03 6a02 	vstr	s12, [r3, #-8]
 80083f4:	ed03 7a01 	vstr	s14, [r3, #-4]
 80083f8:	f102 0210 	add.w	r2, r2, #16
 80083fc:	f104 0410 	add.w	r4, r4, #16
 8008400:	f103 0310 	add.w	r3, r3, #16
 8008404:	f47f af5a 	bne.w	80082bc <arm_cfft_radix8by2_f32+0x34>
 8008408:	687a      	ldr	r2, [r7, #4]
 800840a:	b28c      	uxth	r4, r1
 800840c:	4621      	mov	r1, r4
 800840e:	2302      	movs	r3, #2
 8008410:	f000 feac 	bl	800916c <arm_radix8_butterfly_f32>
 8008414:	ecbd 8b08 	vpop	{d8-d11}
 8008418:	4621      	mov	r1, r4
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	4640      	mov	r0, r8
 800841e:	2302      	movs	r3, #2
 8008420:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008424:	f000 bea2 	b.w	800916c <arm_radix8_butterfly_f32>

08008428 <arm_cfft_radix8by4_f32>:
 8008428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842c:	ed2d 8b0a 	vpush	{d8-d12}
 8008430:	8802      	ldrh	r2, [r0, #0]
 8008432:	ed91 6a00 	vldr	s12, [r1]
 8008436:	b08f      	sub	sp, #60	; 0x3c
 8008438:	460f      	mov	r7, r1
 800843a:	0852      	lsrs	r2, r2, #1
 800843c:	6841      	ldr	r1, [r0, #4]
 800843e:	900c      	str	r0, [sp, #48]	; 0x30
 8008440:	0093      	lsls	r3, r2, #2
 8008442:	4638      	mov	r0, r7
 8008444:	4418      	add	r0, r3
 8008446:	4606      	mov	r6, r0
 8008448:	9009      	str	r0, [sp, #36]	; 0x24
 800844a:	4418      	add	r0, r3
 800844c:	edd0 6a00 	vldr	s13, [r0]
 8008450:	ed96 4a00 	vldr	s8, [r6]
 8008454:	edd6 2a01 	vldr	s5, [r6, #4]
 8008458:	edd0 7a01 	vldr	s15, [r0, #4]
 800845c:	900a      	str	r0, [sp, #40]	; 0x28
 800845e:	ee76 5a26 	vadd.f32	s11, s12, s13
 8008462:	4604      	mov	r4, r0
 8008464:	4625      	mov	r5, r4
 8008466:	441c      	add	r4, r3
 8008468:	edd4 4a00 	vldr	s9, [r4]
 800846c:	ed97 7a01 	vldr	s14, [r7, #4]
 8008470:	ed94 3a01 	vldr	s6, [r4, #4]
 8008474:	9401      	str	r4, [sp, #4]
 8008476:	ee35 5a84 	vadd.f32	s10, s11, s8
 800847a:	4630      	mov	r0, r6
 800847c:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008480:	463e      	mov	r6, r7
 8008482:	ee15 ea10 	vmov	lr, s10
 8008486:	ee76 6a66 	vsub.f32	s13, s12, s13
 800848a:	f846 eb08 	str.w	lr, [r6], #8
 800848e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8008492:	ed90 5a01 	vldr	s10, [r0, #4]
 8008496:	9605      	str	r6, [sp, #20]
 8008498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800849c:	9e01      	ldr	r6, [sp, #4]
 800849e:	9707      	str	r7, [sp, #28]
 80084a0:	ee76 3aa2 	vadd.f32	s7, s13, s5
 80084a4:	ed96 2a01 	vldr	s4, [r6, #4]
 80084a8:	ee36 7a05 	vadd.f32	s14, s12, s10
 80084ac:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80084b0:	ee37 5ac4 	vsub.f32	s10, s15, s8
 80084b4:	ee77 7a84 	vadd.f32	s15, s15, s8
 80084b8:	ee33 4ac3 	vsub.f32	s8, s7, s6
 80084bc:	4604      	mov	r4, r0
 80084be:	46a3      	mov	fp, r4
 80084c0:	ee37 7a02 	vadd.f32	s14, s14, s4
 80084c4:	ee35 5a24 	vadd.f32	s10, s10, s9
 80084c8:	ee14 8a10 	vmov	r8, s8
 80084cc:	46a4      	mov	ip, r4
 80084ce:	ee75 5ae4 	vsub.f32	s11, s11, s9
 80084d2:	ed87 7a01 	vstr	s14, [r7, #4]
 80084d6:	f84b 8b08 	str.w	r8, [fp], #8
 80084da:	f1ac 0704 	sub.w	r7, ip, #4
 80084de:	ed8c 5a01 	vstr	s10, [ip, #4]
 80084e2:	f101 0c08 	add.w	ip, r1, #8
 80084e6:	462c      	mov	r4, r5
 80084e8:	f8cd c010 	str.w	ip, [sp, #16]
 80084ec:	ee15 ca90 	vmov	ip, s11
 80084f0:	ee36 6a62 	vsub.f32	s12, s12, s5
 80084f4:	f844 cb08 	str.w	ip, [r4], #8
 80084f8:	ee76 6ae2 	vsub.f32	s13, s13, s5
 80084fc:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008500:	9406      	str	r4, [sp, #24]
 8008502:	ee76 6a83 	vadd.f32	s13, s13, s6
 8008506:	f101 0410 	add.w	r4, r1, #16
 800850a:	0852      	lsrs	r2, r2, #1
 800850c:	9402      	str	r4, [sp, #8]
 800850e:	ed85 6a01 	vstr	s12, [r5, #4]
 8008512:	462c      	mov	r4, r5
 8008514:	f101 0518 	add.w	r5, r1, #24
 8008518:	920b      	str	r2, [sp, #44]	; 0x2c
 800851a:	46b2      	mov	sl, r6
 800851c:	9503      	str	r5, [sp, #12]
 800851e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008522:	3a02      	subs	r2, #2
 8008524:	ee16 5a90 	vmov	r5, s13
 8008528:	46b6      	mov	lr, r6
 800852a:	4630      	mov	r0, r6
 800852c:	0852      	lsrs	r2, r2, #1
 800852e:	f84a 5b08 	str.w	r5, [sl], #8
 8008532:	f1a0 0604 	sub.w	r6, r0, #4
 8008536:	edce 7a01 	vstr	s15, [lr, #4]
 800853a:	9208      	str	r2, [sp, #32]
 800853c:	f000 8130 	beq.w	80087a0 <arm_cfft_radix8by4_f32+0x378>
 8008540:	4691      	mov	r9, r2
 8008542:	9a07      	ldr	r2, [sp, #28]
 8008544:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008548:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800854c:	3b08      	subs	r3, #8
 800854e:	f102 0510 	add.w	r5, r2, #16
 8008552:	f101 0c20 	add.w	ip, r1, #32
 8008556:	f1a4 020c 	sub.w	r2, r4, #12
 800855a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800855e:	4433      	add	r3, r6
 8008560:	3410      	adds	r4, #16
 8008562:	4650      	mov	r0, sl
 8008564:	4659      	mov	r1, fp
 8008566:	ed55 3a02 	vldr	s7, [r5, #-8]
 800856a:	ed14 5a02 	vldr	s10, [r4, #-8]
 800856e:	ed91 7a00 	vldr	s14, [r1]
 8008572:	edd0 7a00 	vldr	s15, [r0]
 8008576:	ed54 5a01 	vldr	s11, [r4, #-4]
 800857a:	ed15 4a01 	vldr	s8, [r5, #-4]
 800857e:	edd0 6a01 	vldr	s13, [r0, #4]
 8008582:	ed91 6a01 	vldr	s12, [r1, #4]
 8008586:	ee33 8a85 	vadd.f32	s16, s7, s10
 800858a:	ee34 0a25 	vadd.f32	s0, s8, s11
 800858e:	ee78 4a07 	vadd.f32	s9, s16, s14
 8008592:	ee74 5a65 	vsub.f32	s11, s8, s11
 8008596:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800859a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 800859e:	ed45 4a02 	vstr	s9, [r5, #-8]
 80085a2:	edd1 4a01 	vldr	s9, [r1, #4]
 80085a6:	ed90 4a01 	vldr	s8, [r0, #4]
 80085aa:	ee70 4a24 	vadd.f32	s9, s0, s9
 80085ae:	ee75 aa06 	vadd.f32	s21, s10, s12
 80085b2:	ee74 4a84 	vadd.f32	s9, s9, s8
 80085b6:	ee35 aac7 	vsub.f32	s20, s11, s14
 80085ba:	ed45 4a01 	vstr	s9, [r5, #-4]
 80085be:	edd6 1a00 	vldr	s3, [r6]
 80085c2:	edd7 0a00 	vldr	s1, [r7]
 80085c6:	ed92 4a02 	vldr	s8, [r2, #8]
 80085ca:	edd3 3a02 	vldr	s7, [r3, #8]
 80085ce:	ed93 2a01 	vldr	s4, [r3, #4]
 80085d2:	ed16 1a01 	vldr	s2, [r6, #-4]
 80085d6:	edd2 2a01 	vldr	s5, [r2, #4]
 80085da:	ed57 9a01 	vldr	s19, [r7, #-4]
 80085de:	ee70 4aa1 	vadd.f32	s9, s1, s3
 80085e2:	ee39 3a81 	vadd.f32	s6, s19, s2
 80085e6:	ee74 8a84 	vadd.f32	s17, s9, s8
 80085ea:	ee70 1ae1 	vsub.f32	s3, s1, s3
 80085ee:	ee78 8aa3 	vadd.f32	s17, s17, s7
 80085f2:	ee7a aae6 	vsub.f32	s21, s21, s13
 80085f6:	ee18 aa90 	vmov	sl, s17
 80085fa:	f847 a908 	str.w	sl, [r7], #-8
 80085fe:	edd2 8a01 	vldr	s17, [r2, #4]
 8008602:	ed93 9a01 	vldr	s18, [r3, #4]
 8008606:	ee73 8a28 	vadd.f32	s17, s6, s17
 800860a:	ee3a aa27 	vadd.f32	s20, s20, s15
 800860e:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008612:	ee74 0a63 	vsub.f32	s1, s8, s7
 8008616:	edc7 8a01 	vstr	s17, [r7, #4]
 800861a:	ed18 ba02 	vldr	s22, [r8, #-8]
 800861e:	ed58 8a01 	vldr	s17, [r8, #-4]
 8008622:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8008626:	ee6a ba28 	vmul.f32	s23, s20, s17
 800862a:	ee2a ca8b 	vmul.f32	s24, s21, s22
 800862e:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8008632:	ee31 9a20 	vadd.f32	s18, s2, s1
 8008636:	ee79 9a82 	vadd.f32	s19, s19, s4
 800863a:	ee3c ca2b 	vadd.f32	s24, s24, s23
 800863e:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8008642:	ee69 baa8 	vmul.f32	s23, s19, s17
 8008646:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800864a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800864e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8008652:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8008656:	ee1c aa10 	vmov	sl, s24
 800865a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800865e:	f841 ab08 	str.w	sl, [r1], #8
 8008662:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8008666:	ee3b bacb 	vsub.f32	s22, s23, s22
 800866a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800866e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8008672:	ed01 aa01 	vstr	s20, [r1, #-4]
 8008676:	edc2 8a01 	vstr	s17, [r2, #4]
 800867a:	ed82 ba02 	vstr	s22, [r2, #8]
 800867e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8008682:	ee74 3a63 	vsub.f32	s7, s8, s7
 8008686:	ee38 8a47 	vsub.f32	s16, s16, s14
 800868a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800868e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8008692:	ee33 3a42 	vsub.f32	s6, s6, s4
 8008696:	ee38 8a67 	vsub.f32	s16, s16, s15
 800869a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800869e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 80086a2:	ee63 8a04 	vmul.f32	s17, s6, s8
 80086a6:	ee28 aa24 	vmul.f32	s20, s16, s9
 80086aa:	ee60 9a04 	vmul.f32	s19, s0, s8
 80086ae:	ee28 8a04 	vmul.f32	s16, s16, s8
 80086b2:	ee20 0a24 	vmul.f32	s0, s0, s9
 80086b6:	ee63 3a84 	vmul.f32	s7, s7, s8
 80086ba:	ee39 4a68 	vsub.f32	s8, s18, s17
 80086be:	ee7a 9a29 	vadd.f32	s19, s20, s19
 80086c2:	ee14 aa10 	vmov	sl, s8
 80086c6:	ee30 0a48 	vsub.f32	s0, s0, s16
 80086ca:	ee63 4a24 	vmul.f32	s9, s6, s9
 80086ce:	ed44 9a02 	vstr	s19, [r4, #-8]
 80086d2:	ee73 3ae4 	vsub.f32	s7, s7, s9
 80086d6:	ed04 0a01 	vstr	s0, [r4, #-4]
 80086da:	f846 a908 	str.w	sl, [r6], #-8
 80086de:	ee35 6a46 	vsub.f32	s12, s10, s12
 80086e2:	ee35 7a87 	vadd.f32	s14, s11, s14
 80086e6:	edc6 3a01 	vstr	s7, [r6, #4]
 80086ea:	ee76 6a26 	vadd.f32	s13, s12, s13
 80086ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80086f2:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 80086f6:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 80086fa:	ee67 5a86 	vmul.f32	s11, s15, s12
 80086fe:	ee26 5a87 	vmul.f32	s10, s13, s14
 8008702:	ee72 2a62 	vsub.f32	s5, s4, s5
 8008706:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800870a:	ee72 2ae1 	vsub.f32	s5, s5, s3
 800870e:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008712:	ee62 0a86 	vmul.f32	s1, s5, s12
 8008716:	ee66 6a86 	vmul.f32	s13, s13, s12
 800871a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800871e:	ee21 6a06 	vmul.f32	s12, s2, s12
 8008722:	ee62 2a87 	vmul.f32	s5, s5, s14
 8008726:	ee21 1a07 	vmul.f32	s2, s2, s14
 800872a:	ee15 aa90 	vmov	sl, s11
 800872e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008732:	f840 ab08 	str.w	sl, [r0], #8
 8008736:	ee30 1ac1 	vsub.f32	s2, s1, s2
 800873a:	ee76 2a22 	vadd.f32	s5, s12, s5
 800873e:	f1b9 0901 	subs.w	r9, r9, #1
 8008742:	ed40 7a01 	vstr	s15, [r0, #-4]
 8008746:	f105 0508 	add.w	r5, r5, #8
 800874a:	ed83 1a02 	vstr	s2, [r3, #8]
 800874e:	edc3 2a01 	vstr	s5, [r3, #4]
 8008752:	f108 0808 	add.w	r8, r8, #8
 8008756:	f1a2 0208 	sub.w	r2, r2, #8
 800875a:	f10c 0c10 	add.w	ip, ip, #16
 800875e:	f104 0408 	add.w	r4, r4, #8
 8008762:	f10e 0e18 	add.w	lr, lr, #24
 8008766:	f1a3 0308 	sub.w	r3, r3, #8
 800876a:	f47f aefc 	bne.w	8008566 <arm_cfft_radix8by4_f32+0x13e>
 800876e:	9908      	ldr	r1, [sp, #32]
 8008770:	9802      	ldr	r0, [sp, #8]
 8008772:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8008776:	00cb      	lsls	r3, r1, #3
 8008778:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800877c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008780:	9102      	str	r1, [sp, #8]
 8008782:	9905      	ldr	r1, [sp, #20]
 8008784:	4419      	add	r1, r3
 8008786:	9105      	str	r1, [sp, #20]
 8008788:	9904      	ldr	r1, [sp, #16]
 800878a:	4419      	add	r1, r3
 800878c:	9104      	str	r1, [sp, #16]
 800878e:	9906      	ldr	r1, [sp, #24]
 8008790:	449b      	add	fp, r3
 8008792:	4419      	add	r1, r3
 8008794:	449a      	add	sl, r3
 8008796:	9b03      	ldr	r3, [sp, #12]
 8008798:	9106      	str	r1, [sp, #24]
 800879a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800879e:	9303      	str	r3, [sp, #12]
 80087a0:	9a05      	ldr	r2, [sp, #20]
 80087a2:	9806      	ldr	r0, [sp, #24]
 80087a4:	ed92 4a00 	vldr	s8, [r2]
 80087a8:	ed90 7a00 	vldr	s14, [r0]
 80087ac:	ed9b 3a00 	vldr	s6, [fp]
 80087b0:	edda 3a00 	vldr	s7, [sl]
 80087b4:	edd2 4a01 	vldr	s9, [r2, #4]
 80087b8:	edd0 6a01 	vldr	s13, [r0, #4]
 80087bc:	ed9a 2a01 	vldr	s4, [sl, #4]
 80087c0:	eddb 7a01 	vldr	s15, [fp, #4]
 80087c4:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80087c8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80087ca:	ee34 6a07 	vadd.f32	s12, s8, s14
 80087ce:	ee74 5aa6 	vadd.f32	s11, s9, s13
 80087d2:	ee36 5a03 	vadd.f32	s10, s12, s6
 80087d6:	ee74 6ae6 	vsub.f32	s13, s9, s13
 80087da:	ee35 5a23 	vadd.f32	s10, s10, s7
 80087de:	ee34 7a47 	vsub.f32	s14, s8, s14
 80087e2:	ed82 5a00 	vstr	s10, [r2]
 80087e6:	ed9b 5a01 	vldr	s10, [fp, #4]
 80087ea:	edda 4a01 	vldr	s9, [sl, #4]
 80087ee:	ee35 5a85 	vadd.f32	s10, s11, s10
 80087f2:	ee37 4a27 	vadd.f32	s8, s14, s15
 80087f6:	ee35 5a24 	vadd.f32	s10, s10, s9
 80087fa:	ee76 4ac3 	vsub.f32	s9, s13, s6
 80087fe:	ed82 5a01 	vstr	s10, [r2, #4]
 8008802:	9a04      	ldr	r2, [sp, #16]
 8008804:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8008808:	edd2 1a00 	vldr	s3, [r2]
 800880c:	edd2 2a01 	vldr	s5, [r2, #4]
 8008810:	9a02      	ldr	r2, [sp, #8]
 8008812:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008816:	ee36 6a43 	vsub.f32	s12, s12, s6
 800881a:	ee64 4a21 	vmul.f32	s9, s8, s3
 800881e:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008822:	ee65 2a22 	vmul.f32	s5, s10, s5
 8008826:	ee25 5a21 	vmul.f32	s10, s10, s3
 800882a:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800882e:	ee35 5a44 	vsub.f32	s10, s10, s8
 8008832:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8008836:	edcb 2a00 	vstr	s5, [fp]
 800883a:	ed8b 5a01 	vstr	s10, [fp, #4]
 800883e:	ed92 4a01 	vldr	s8, [r2, #4]
 8008842:	ed92 5a00 	vldr	s10, [r2]
 8008846:	9a03      	ldr	r2, [sp, #12]
 8008848:	ee36 6a63 	vsub.f32	s12, s12, s7
 800884c:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8008850:	ee66 4a05 	vmul.f32	s9, s12, s10
 8008854:	ee25 5a85 	vmul.f32	s10, s11, s10
 8008858:	ee26 6a04 	vmul.f32	s12, s12, s8
 800885c:	ee65 5a84 	vmul.f32	s11, s11, s8
 8008860:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008864:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8008868:	ee76 6a83 	vadd.f32	s13, s13, s6
 800886c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008870:	ed80 6a01 	vstr	s12, [r0, #4]
 8008874:	edc0 5a00 	vstr	s11, [r0]
 8008878:	edd2 5a01 	vldr	s11, [r2, #4]
 800887c:	9807      	ldr	r0, [sp, #28]
 800887e:	ee77 7a02 	vadd.f32	s15, s14, s4
 8008882:	ee36 7ae3 	vsub.f32	s14, s13, s7
 8008886:	edd2 6a00 	vldr	s13, [r2]
 800888a:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800888e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8008892:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008896:	ee27 7a25 	vmul.f32	s14, s14, s11
 800889a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800889e:	ee36 7a07 	vadd.f32	s14, s12, s14
 80088a2:	edca 7a01 	vstr	s15, [sl, #4]
 80088a6:	ed8a 7a00 	vstr	s14, [sl]
 80088aa:	6872      	ldr	r2, [r6, #4]
 80088ac:	4621      	mov	r1, r4
 80088ae:	2304      	movs	r3, #4
 80088b0:	f000 fc5c 	bl	800916c <arm_radix8_butterfly_f32>
 80088b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088b6:	6872      	ldr	r2, [r6, #4]
 80088b8:	4621      	mov	r1, r4
 80088ba:	2304      	movs	r3, #4
 80088bc:	f000 fc56 	bl	800916c <arm_radix8_butterfly_f32>
 80088c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80088c2:	6872      	ldr	r2, [r6, #4]
 80088c4:	4621      	mov	r1, r4
 80088c6:	2304      	movs	r3, #4
 80088c8:	f000 fc50 	bl	800916c <arm_radix8_butterfly_f32>
 80088cc:	6872      	ldr	r2, [r6, #4]
 80088ce:	9801      	ldr	r0, [sp, #4]
 80088d0:	4621      	mov	r1, r4
 80088d2:	2304      	movs	r3, #4
 80088d4:	b00f      	add	sp, #60	; 0x3c
 80088d6:	ecbd 8b0a 	vpop	{d8-d12}
 80088da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088de:	f000 bc45 	b.w	800916c <arm_radix8_butterfly_f32>
 80088e2:	bf00      	nop

080088e4 <arm_cfft_f32>:
 80088e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088e8:	2a01      	cmp	r2, #1
 80088ea:	4606      	mov	r6, r0
 80088ec:	4617      	mov	r7, r2
 80088ee:	460c      	mov	r4, r1
 80088f0:	4698      	mov	r8, r3
 80088f2:	8805      	ldrh	r5, [r0, #0]
 80088f4:	d054      	beq.n	80089a0 <arm_cfft_f32+0xbc>
 80088f6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80088fa:	d04c      	beq.n	8008996 <arm_cfft_f32+0xb2>
 80088fc:	d916      	bls.n	800892c <arm_cfft_f32+0x48>
 80088fe:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8008902:	d01a      	beq.n	800893a <arm_cfft_f32+0x56>
 8008904:	d95c      	bls.n	80089c0 <arm_cfft_f32+0xdc>
 8008906:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 800890a:	d044      	beq.n	8008996 <arm_cfft_f32+0xb2>
 800890c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8008910:	d105      	bne.n	800891e <arm_cfft_f32+0x3a>
 8008912:	2301      	movs	r3, #1
 8008914:	6872      	ldr	r2, [r6, #4]
 8008916:	4629      	mov	r1, r5
 8008918:	4620      	mov	r0, r4
 800891a:	f000 fc27 	bl	800916c <arm_radix8_butterfly_f32>
 800891e:	f1b8 0f00 	cmp.w	r8, #0
 8008922:	d111      	bne.n	8008948 <arm_cfft_f32+0x64>
 8008924:	2f01      	cmp	r7, #1
 8008926:	d016      	beq.n	8008956 <arm_cfft_f32+0x72>
 8008928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800892c:	2d20      	cmp	r5, #32
 800892e:	d032      	beq.n	8008996 <arm_cfft_f32+0xb2>
 8008930:	d94a      	bls.n	80089c8 <arm_cfft_f32+0xe4>
 8008932:	2d40      	cmp	r5, #64	; 0x40
 8008934:	d0ed      	beq.n	8008912 <arm_cfft_f32+0x2e>
 8008936:	2d80      	cmp	r5, #128	; 0x80
 8008938:	d1f1      	bne.n	800891e <arm_cfft_f32+0x3a>
 800893a:	4621      	mov	r1, r4
 800893c:	4630      	mov	r0, r6
 800893e:	f7ff fca3 	bl	8008288 <arm_cfft_radix8by2_f32>
 8008942:	f1b8 0f00 	cmp.w	r8, #0
 8008946:	d0ed      	beq.n	8008924 <arm_cfft_f32+0x40>
 8008948:	68b2      	ldr	r2, [r6, #8]
 800894a:	89b1      	ldrh	r1, [r6, #12]
 800894c:	4620      	mov	r0, r4
 800894e:	f7f7 fc3f 	bl	80001d0 <arm_bitreversal_32>
 8008952:	2f01      	cmp	r7, #1
 8008954:	d1e8      	bne.n	8008928 <arm_cfft_f32+0x44>
 8008956:	ee07 5a90 	vmov	s15, r5
 800895a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800895e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008962:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008966:	2d00      	cmp	r5, #0
 8008968:	d0de      	beq.n	8008928 <arm_cfft_f32+0x44>
 800896a:	f104 0108 	add.w	r1, r4, #8
 800896e:	2300      	movs	r3, #0
 8008970:	3301      	adds	r3, #1
 8008972:	429d      	cmp	r5, r3
 8008974:	f101 0108 	add.w	r1, r1, #8
 8008978:	ed11 7a04 	vldr	s14, [r1, #-16]
 800897c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8008980:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008984:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008988:	ed01 7a04 	vstr	s14, [r1, #-16]
 800898c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8008990:	d1ee      	bne.n	8008970 <arm_cfft_f32+0x8c>
 8008992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008996:	4621      	mov	r1, r4
 8008998:	4630      	mov	r0, r6
 800899a:	f7ff fd45 	bl	8008428 <arm_cfft_radix8by4_f32>
 800899e:	e7be      	b.n	800891e <arm_cfft_f32+0x3a>
 80089a0:	b1ad      	cbz	r5, 80089ce <arm_cfft_f32+0xea>
 80089a2:	f101 030c 	add.w	r3, r1, #12
 80089a6:	2200      	movs	r2, #0
 80089a8:	ed53 7a02 	vldr	s15, [r3, #-8]
 80089ac:	3201      	adds	r2, #1
 80089ae:	eef1 7a67 	vneg.f32	s15, s15
 80089b2:	4295      	cmp	r5, r2
 80089b4:	ed43 7a02 	vstr	s15, [r3, #-8]
 80089b8:	f103 0308 	add.w	r3, r3, #8
 80089bc:	d1f4      	bne.n	80089a8 <arm_cfft_f32+0xc4>
 80089be:	e79a      	b.n	80088f6 <arm_cfft_f32+0x12>
 80089c0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80089c4:	d0a5      	beq.n	8008912 <arm_cfft_f32+0x2e>
 80089c6:	e7aa      	b.n	800891e <arm_cfft_f32+0x3a>
 80089c8:	2d10      	cmp	r5, #16
 80089ca:	d0b6      	beq.n	800893a <arm_cfft_f32+0x56>
 80089cc:	e7a7      	b.n	800891e <arm_cfft_f32+0x3a>
 80089ce:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80089d2:	d894      	bhi.n	80088fe <arm_cfft_f32+0x1a>
 80089d4:	e7aa      	b.n	800892c <arm_cfft_f32+0x48>
 80089d6:	bf00      	nop

080089d8 <arm_fir_init_f32>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	9c04      	ldr	r4, [sp, #16]
 80089dc:	6082      	str	r2, [r0, #8]
 80089de:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80089e2:	3c01      	subs	r4, #1
 80089e4:	4605      	mov	r5, r0
 80089e6:	440c      	add	r4, r1
 80089e8:	8001      	strh	r1, [r0, #0]
 80089ea:	461e      	mov	r6, r3
 80089ec:	00a2      	lsls	r2, r4, #2
 80089ee:	4618      	mov	r0, r3
 80089f0:	2100      	movs	r1, #0
 80089f2:	f000 fee5 	bl	80097c0 <memset>
 80089f6:	606e      	str	r6, [r5, #4]
 80089f8:	bd70      	pop	{r4, r5, r6, pc}
 80089fa:	bf00      	nop

080089fc <arm_fir_f32>:
 80089fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a00:	ed2d 8b10 	vpush	{d8-d15}
 8008a04:	b089      	sub	sp, #36	; 0x24
 8008a06:	4605      	mov	r5, r0
 8008a08:	9003      	str	r0, [sp, #12]
 8008a0a:	8800      	ldrh	r0, [r0, #0]
 8008a0c:	9304      	str	r3, [sp, #16]
 8008a0e:	461e      	mov	r6, r3
 8008a10:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8008a14:	9001      	str	r0, [sp, #4]
 8008a16:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	eb0c 0483 	add.w	r4, ip, r3, lsl #2
 8008a20:	08f3      	lsrs	r3, r6, #3
 8008a22:	f8d5 8008 	ldr.w	r8, [r5, #8]
 8008a26:	9400      	str	r4, [sp, #0]
 8008a28:	9302      	str	r3, [sp, #8]
 8008a2a:	f000 81ef 	beq.w	8008e0c <arm_fir_f32+0x410>
 8008a2e:	ea4f 09d0 	mov.w	r9, r0, lsr #3
 8008a32:	469e      	mov	lr, r3
 8008a34:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8008a38:	1f1e      	subs	r6, r3, #4
 8008a3a:	4625      	mov	r5, r4
 8008a3c:	9605      	str	r6, [sp, #20]
 8008a3e:	4604      	mov	r4, r0
 8008a40:	eb08 0003 	add.w	r0, r8, r3
 8008a44:	f004 0a07 	and.w	sl, r4, #7
 8008a48:	4613      	mov	r3, r2
 8008a4a:	f10c 0420 	add.w	r4, ip, #32
 8008a4e:	f8cd c018 	str.w	ip, [sp, #24]
 8008a52:	4684      	mov	ip, r0
 8008a54:	4648      	mov	r0, r9
 8008a56:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008a5a:	9107      	str	r1, [sp, #28]
 8008a5c:	f105 0720 	add.w	r7, r5, #32
 8008a60:	f101 0620 	add.w	r6, r1, #32
 8008a64:	f102 0520 	add.w	r5, r2, #32
 8008a68:	4652      	mov	r2, sl
 8008a6a:	469a      	mov	sl, r3
 8008a6c:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8008a70:	f847 3c20 	str.w	r3, [r7, #-32]
 8008a74:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 8008a78:	f847 3c1c 	str.w	r3, [r7, #-28]
 8008a7c:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8008a80:	f847 3c18 	str.w	r3, [r7, #-24]
 8008a84:	f856 3c14 	ldr.w	r3, [r6, #-20]
 8008a88:	f847 3c14 	str.w	r3, [r7, #-20]
 8008a8c:	f856 3c10 	ldr.w	r3, [r6, #-16]
 8008a90:	f847 3c10 	str.w	r3, [r7, #-16]
 8008a94:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 8008a98:	f847 3c0c 	str.w	r3, [r7, #-12]
 8008a9c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8008aa0:	f847 3c08 	str.w	r3, [r7, #-8]
 8008aa4:	eddf 3af1 	vldr	s7, [pc, #964]	; 8008e6c <arm_fir_f32+0x470>
 8008aa8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008aac:	f847 3c04 	str.w	r3, [r7, #-4]
 8008ab0:	ed14 3a08 	vldr	s6, [r4, #-32]	; 0xffffffe0
 8008ab4:	ed54 2a07 	vldr	s5, [r4, #-28]	; 0xffffffe4
 8008ab8:	ed14 2a06 	vldr	s4, [r4, #-24]	; 0xffffffe8
 8008abc:	ed54 1a05 	vldr	s3, [r4, #-20]	; 0xffffffec
 8008ac0:	ed14 1a04 	vldr	s2, [r4, #-16]
 8008ac4:	ed54 0a03 	vldr	s1, [r4, #-12]
 8008ac8:	ed14 0a02 	vldr	s0, [r4, #-8]
 8008acc:	1f21      	subs	r1, r4, #4
 8008ace:	eef0 8a63 	vmov.f32	s17, s7
 8008ad2:	eef0 9a63 	vmov.f32	s19, s7
 8008ad6:	eef0 aa63 	vmov.f32	s21, s7
 8008ada:	eef0 ba63 	vmov.f32	s23, s7
 8008ade:	eeb0 ca63 	vmov.f32	s24, s7
 8008ae2:	eef0 ca63 	vmov.f32	s25, s7
 8008ae6:	eeb0 da63 	vmov.f32	s26, s7
 8008aea:	2800      	cmp	r0, #0
 8008aec:	f000 81e8 	beq.w	8008ec0 <arm_fir_f32+0x4c4>
 8008af0:	f108 0120 	add.w	r1, r8, #32
 8008af4:	f104 031c 	add.w	r3, r4, #28
 8008af8:	4683      	mov	fp, r0
 8008afa:	ed11 4a08 	vldr	s8, [r1, #-32]	; 0xffffffe0
 8008afe:	ed13 8a08 	vldr	s16, [r3, #-32]	; 0xffffffe0
 8008b02:	ed51 4a07 	vldr	s9, [r1, #-28]	; 0xffffffe4
 8008b06:	ed11 5a06 	vldr	s10, [r1, #-24]	; 0xffffffe8
 8008b0a:	ed51 5a05 	vldr	s11, [r1, #-20]	; 0xffffffec
 8008b0e:	ed11 6a04 	vldr	s12, [r1, #-16]
 8008b12:	ed51 6a03 	vldr	s13, [r1, #-12]
 8008b16:	ed11 7a02 	vldr	s14, [r1, #-8]
 8008b1a:	ed51 7a01 	vldr	s15, [r1, #-4]
 8008b1e:	ee24 fa03 	vmul.f32	s30, s8, s6
 8008b22:	ee64 ea22 	vmul.f32	s29, s8, s5
 8008b26:	ed13 3a07 	vldr	s6, [r3, #-28]	; 0xffffffe4
 8008b2a:	ee24 ea02 	vmul.f32	s28, s8, s4
 8008b2e:	ee64 da21 	vmul.f32	s27, s8, s3
 8008b32:	ee24 ba01 	vmul.f32	s22, s8, s2
 8008b36:	ee24 aa20 	vmul.f32	s20, s8, s1
 8008b3a:	ee24 9a00 	vmul.f32	s18, s8, s0
 8008b3e:	ee24 4a08 	vmul.f32	s8, s8, s16
 8008b42:	ee3f da0d 	vadd.f32	s26, s30, s26
 8008b46:	ee74 3a23 	vadd.f32	s7, s8, s7
 8008b4a:	ee24 faa2 	vmul.f32	s30, s9, s5
 8008b4e:	ee7e caac 	vadd.f32	s25, s29, s25
 8008b52:	ed53 2a06 	vldr	s5, [r3, #-24]	; 0xffffffe8
 8008b56:	ee64 ea82 	vmul.f32	s29, s9, s4
 8008b5a:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8008b5e:	ee7d baab 	vadd.f32	s23, s27, s23
 8008b62:	ee24 eaa1 	vmul.f32	s28, s9, s3
 8008b66:	ee64 da81 	vmul.f32	s27, s9, s2
 8008b6a:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8008b6e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8008b72:	ee24 baa0 	vmul.f32	s22, s9, s1
 8008b76:	ee24 aa80 	vmul.f32	s20, s9, s0
 8008b7a:	ee79 8a28 	vadd.f32	s17, s18, s17
 8008b7e:	ee28 9a24 	vmul.f32	s18, s16, s9
 8008b82:	ee64 4a83 	vmul.f32	s9, s9, s6
 8008b86:	ee25 4a02 	vmul.f32	s8, s10, s4
 8008b8a:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8008b8e:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8008b92:	ee7e caac 	vadd.f32	s25, s29, s25
 8008b96:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8008b9a:	ee65 ea21 	vmul.f32	s29, s10, s3
 8008b9e:	ee25 ea01 	vmul.f32	s28, s10, s2
 8008ba2:	ee7d baab 	vadd.f32	s23, s27, s23
 8008ba6:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8008baa:	ee65 da20 	vmul.f32	s27, s10, s1
 8008bae:	ee25 ba00 	vmul.f32	s22, s10, s0
 8008bb2:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8008bb6:	ee79 8a28 	vadd.f32	s17, s18, s17
 8008bba:	ee28 aa05 	vmul.f32	s20, s16, s10
 8008bbe:	ee23 9a05 	vmul.f32	s18, s6, s10
 8008bc2:	ee3d da0f 	vadd.f32	s26, s26, s30
 8008bc6:	ee25 5a22 	vmul.f32	s10, s10, s5
 8008bca:	ee65 3aa1 	vmul.f32	s7, s11, s3
 8008bce:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008bd2:	ed53 1a04 	vldr	s3, [r3, #-16]
 8008bd6:	ee7e caac 	vadd.f32	s25, s29, s25
 8008bda:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8008bde:	ee65 ea81 	vmul.f32	s29, s11, s2
 8008be2:	ee25 eaa0 	vmul.f32	s28, s11, s1
 8008be6:	ee7d baab 	vadd.f32	s23, s27, s23
 8008bea:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8008bee:	ee65 da80 	vmul.f32	s27, s11, s0
 8008bf2:	ee28 ba25 	vmul.f32	s22, s16, s11
 8008bf6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8008bfa:	ee79 8a28 	vadd.f32	s17, s18, s17
 8008bfe:	ee23 aa25 	vmul.f32	s20, s6, s11
 8008c02:	ee22 9aa5 	vmul.f32	s18, s5, s11
 8008c06:	ee3d da04 	vadd.f32	s26, s26, s8
 8008c0a:	ee65 5a82 	vmul.f32	s11, s11, s4
 8008c0e:	ee66 4a01 	vmul.f32	s9, s12, s2
 8008c12:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8008c16:	ed13 1a03 	vldr	s2, [r3, #-12]
 8008c1a:	ee75 5a85 	vadd.f32	s11, s11, s10
 8008c1e:	ee3d da23 	vadd.f32	s26, s26, s7
 8008c22:	ee22 5a06 	vmul.f32	s10, s4, s12
 8008c26:	ee7e caac 	vadd.f32	s25, s29, s25
 8008c2a:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8008c2e:	ee66 ea20 	vmul.f32	s29, s12, s1
 8008c32:	ee26 ea00 	vmul.f32	s28, s12, s0
 8008c36:	ee7d baab 	vadd.f32	s23, s27, s23
 8008c3a:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8008c3e:	ee68 da06 	vmul.f32	s27, s16, s12
 8008c42:	ee23 ba06 	vmul.f32	s22, s6, s12
 8008c46:	ee22 aa86 	vmul.f32	s20, s5, s12
 8008c4a:	ee79 8a28 	vadd.f32	s17, s18, s17
 8008c4e:	ee26 6a21 	vmul.f32	s12, s12, s3
 8008c52:	ee26 9aa0 	vmul.f32	s18, s13, s1
 8008c56:	ee36 6a25 	vadd.f32	s12, s12, s11
 8008c5a:	ed53 0a02 	vldr	s1, [r3, #-8]
 8008c5e:	ee61 5aa6 	vmul.f32	s11, s3, s13
 8008c62:	ee3d da24 	vadd.f32	s26, s26, s9
 8008c66:	ee7e caac 	vadd.f32	s25, s29, s25
 8008c6a:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8008c6e:	ee66 ea80 	vmul.f32	s29, s13, s0
 8008c72:	ee28 ea26 	vmul.f32	s28, s16, s13
 8008c76:	ee7d baab 	vadd.f32	s23, s27, s23
 8008c7a:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8008c7e:	ee63 da26 	vmul.f32	s27, s6, s13
 8008c82:	ee22 baa6 	vmul.f32	s22, s5, s13
 8008c86:	ee3a aa29 	vadd.f32	s20, s20, s19
 8008c8a:	ee75 8a28 	vadd.f32	s17, s10, s17
 8008c8e:	ee62 9a26 	vmul.f32	s19, s4, s13
 8008c92:	ee66 6a81 	vmul.f32	s13, s13, s2
 8008c96:	ee27 5a00 	vmul.f32	s10, s14, s0
 8008c9a:	ee7b aa2a 	vadd.f32	s21, s22, s21
 8008c9e:	ee75 8aa8 	vadd.f32	s17, s11, s17
 8008ca2:	ee7e caac 	vadd.f32	s25, s29, s25
 8008ca6:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8008caa:	ee68 ea07 	vmul.f32	s29, s16, s14
 8008cae:	ee23 ea07 	vmul.f32	s28, s6, s14
 8008cb2:	ee7d baab 	vadd.f32	s23, s27, s23
 8008cb6:	ee22 ba07 	vmul.f32	s22, s4, s14
 8008cba:	ee62 da87 	vmul.f32	s27, s5, s14
 8008cbe:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8008cc2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8008cc6:	ee61 9a87 	vmul.f32	s19, s3, s14
 8008cca:	ee67 3a20 	vmul.f32	s7, s14, s1
 8008cce:	ed13 0a01 	vldr	s0, [r3, #-4]
 8008cd2:	ee3d da09 	vadd.f32	s26, s26, s18
 8008cd6:	ee21 6a07 	vmul.f32	s12, s2, s14
 8008cda:	ee3d da05 	vadd.f32	s26, s26, s10
 8008cde:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008ce2:	ee63 5a27 	vmul.f32	s11, s6, s15
 8008ce6:	ee22 5aa7 	vmul.f32	s10, s5, s15
 8008cea:	ee62 4a27 	vmul.f32	s9, s4, s15
 8008cee:	ee3b ba2a 	vadd.f32	s22, s22, s21
 8008cf2:	ee39 aa8a 	vadd.f32	s20, s19, s20
 8008cf6:	ee61 aaa7 	vmul.f32	s21, s3, s15
 8008cfa:	ee61 9a27 	vmul.f32	s19, s2, s15
 8008cfe:	ee36 7a28 	vadd.f32	s14, s12, s17
 8008d02:	ee7e caac 	vadd.f32	s25, s29, s25
 8008d06:	ee60 8aa7 	vmul.f32	s17, s1, s15
 8008d0a:	ee3e ca0c 	vadd.f32	s24, s28, s24
 8008d0e:	ee7d baab 	vadd.f32	s23, s27, s23
 8008d12:	ee73 3aa6 	vadd.f32	s7, s7, s13
 8008d16:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008d1a:	f1bb 0b01 	subs.w	fp, fp, #1
 8008d1e:	f101 0120 	add.w	r1, r1, #32
 8008d22:	ee38 da0d 	vadd.f32	s26, s16, s26
 8008d26:	ee75 caac 	vadd.f32	s25, s11, s25
 8008d2a:	ee35 ca0c 	vadd.f32	s24, s10, s24
 8008d2e:	ee74 baab 	vadd.f32	s23, s9, s23
 8008d32:	ee7a aa8b 	vadd.f32	s21, s21, s22
 8008d36:	ee79 9a8a 	vadd.f32	s19, s19, s20
 8008d3a:	ee78 8a87 	vadd.f32	s17, s17, s14
 8008d3e:	ee77 3aa3 	vadd.f32	s7, s15, s7
 8008d42:	f103 0320 	add.w	r3, r3, #32
 8008d46:	f47f aed8 	bne.w	8008afa <arm_fir_f32+0xfe>
 8008d4a:	eb09 0104 	add.w	r1, r9, r4
 8008d4e:	46e3      	mov	fp, ip
 8008d50:	b3a2      	cbz	r2, 8008dbc <arm_fir_f32+0x3c0>
 8008d52:	4613      	mov	r3, r2
 8008d54:	ecbb 6a01 	vldmia	fp!, {s12}
 8008d58:	ecf1 7a01 	vldmia	r1!, {s15}
 8008d5c:	ee26 3a03 	vmul.f32	s6, s12, s6
 8008d60:	ee26 4a22 	vmul.f32	s8, s12, s5
 8008d64:	ee66 4a02 	vmul.f32	s9, s12, s4
 8008d68:	ee26 5a21 	vmul.f32	s10, s12, s3
 8008d6c:	ee66 5a01 	vmul.f32	s11, s12, s2
 8008d70:	ee66 6a20 	vmul.f32	s13, s12, s1
 8008d74:	ee26 7a00 	vmul.f32	s14, s12, s0
 8008d78:	ee26 6a27 	vmul.f32	s12, s12, s15
 8008d7c:	3b01      	subs	r3, #1
 8008d7e:	ee3d da03 	vadd.f32	s26, s26, s6
 8008d82:	ee7c ca84 	vadd.f32	s25, s25, s8
 8008d86:	eeb0 3a62 	vmov.f32	s6, s5
 8008d8a:	ee3c ca24 	vadd.f32	s24, s24, s9
 8008d8e:	eef0 2a42 	vmov.f32	s5, s4
 8008d92:	ee7b ba85 	vadd.f32	s23, s23, s10
 8008d96:	eeb0 2a61 	vmov.f32	s4, s3
 8008d9a:	ee7a aaa5 	vadd.f32	s21, s21, s11
 8008d9e:	eef0 1a41 	vmov.f32	s3, s2
 8008da2:	ee79 9aa6 	vadd.f32	s19, s19, s13
 8008da6:	eeb0 1a60 	vmov.f32	s2, s1
 8008daa:	ee78 8a87 	vadd.f32	s17, s17, s14
 8008dae:	eef0 0a40 	vmov.f32	s1, s0
 8008db2:	ee73 3a86 	vadd.f32	s7, s7, s12
 8008db6:	eeb0 0a67 	vmov.f32	s0, s15
 8008dba:	d1cb      	bne.n	8008d54 <arm_fir_f32+0x358>
 8008dbc:	f1be 0e01 	subs.w	lr, lr, #1
 8008dc0:	ed05 da08 	vstr	s26, [r5, #-32]	; 0xffffffe0
 8008dc4:	ed45 ca07 	vstr	s25, [r5, #-28]	; 0xffffffe4
 8008dc8:	ed05 ca06 	vstr	s24, [r5, #-24]	; 0xffffffe8
 8008dcc:	ed45 ba05 	vstr	s23, [r5, #-20]	; 0xffffffec
 8008dd0:	ed45 aa04 	vstr	s21, [r5, #-16]
 8008dd4:	ed45 9a03 	vstr	s19, [r5, #-12]
 8008dd8:	ed45 8a02 	vstr	s17, [r5, #-8]
 8008ddc:	ed45 3a01 	vstr	s7, [r5, #-4]
 8008de0:	f107 0720 	add.w	r7, r7, #32
 8008de4:	f106 0620 	add.w	r6, r6, #32
 8008de8:	f104 0420 	add.w	r4, r4, #32
 8008dec:	f105 0520 	add.w	r5, r5, #32
 8008df0:	f47f ae3c 	bne.w	8008a6c <arm_fir_f32+0x70>
 8008df4:	9b02      	ldr	r3, [sp, #8]
 8008df6:	9800      	ldr	r0, [sp, #0]
 8008df8:	f8dd c018 	ldr.w	ip, [sp, #24]
 8008dfc:	9907      	ldr	r1, [sp, #28]
 8008dfe:	015b      	lsls	r3, r3, #5
 8008e00:	4652      	mov	r2, sl
 8008e02:	4418      	add	r0, r3
 8008e04:	9000      	str	r0, [sp, #0]
 8008e06:	4419      	add	r1, r3
 8008e08:	449c      	add	ip, r3
 8008e0a:	441a      	add	r2, r3
 8008e0c:	9b04      	ldr	r3, [sp, #16]
 8008e0e:	f013 0e07 	ands.w	lr, r3, #7
 8008e12:	d01f      	beq.n	8008e54 <arm_fir_f32+0x458>
 8008e14:	9f00      	ldr	r7, [sp, #0]
 8008e16:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008e1a:	4676      	mov	r6, lr
 8008e1c:	4665      	mov	r5, ip
 8008e1e:	f851 3b04 	ldr.w	r3, [r1], #4
 8008e22:	eddf 6a12 	vldr	s13, [pc, #72]	; 8008e6c <arm_fir_f32+0x470>
 8008e26:	f847 3b04 	str.w	r3, [r7], #4
 8008e2a:	4644      	mov	r4, r8
 8008e2c:	464b      	mov	r3, r9
 8008e2e:	4628      	mov	r0, r5
 8008e30:	ecb0 7a01 	vldmia	r0!, {s14}
 8008e34:	ecf4 7a01 	vldmia	r4!, {s15}
 8008e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008e42:	d1f5      	bne.n	8008e30 <arm_fir_f32+0x434>
 8008e44:	3e01      	subs	r6, #1
 8008e46:	ece2 6a01 	vstmia	r2!, {s13}
 8008e4a:	f105 0504 	add.w	r5, r5, #4
 8008e4e:	d1e6      	bne.n	8008e1e <arm_fir_f32+0x422>
 8008e50:	eb0c 0c8e 	add.w	ip, ip, lr, lsl #2
 8008e54:	9b01      	ldr	r3, [sp, #4]
 8008e56:	1e59      	subs	r1, r3, #1
 8008e58:	9b03      	ldr	r3, [sp, #12]
 8008e5a:	088e      	lsrs	r6, r1, #2
 8008e5c:	685c      	ldr	r4, [r3, #4]
 8008e5e:	d020      	beq.n	8008ea2 <arm_fir_f32+0x4a6>
 8008e60:	f104 0210 	add.w	r2, r4, #16
 8008e64:	f10c 0310 	add.w	r3, ip, #16
 8008e68:	4630      	mov	r0, r6
 8008e6a:	e001      	b.n	8008e70 <arm_fir_f32+0x474>
 8008e6c:	00000000 	.word	0x00000000
 8008e70:	f853 5c10 	ldr.w	r5, [r3, #-16]
 8008e74:	f842 5c10 	str.w	r5, [r2, #-16]
 8008e78:	f853 5c0c 	ldr.w	r5, [r3, #-12]
 8008e7c:	f842 5c0c 	str.w	r5, [r2, #-12]
 8008e80:	f853 5c08 	ldr.w	r5, [r3, #-8]
 8008e84:	f842 5c08 	str.w	r5, [r2, #-8]
 8008e88:	f853 5c04 	ldr.w	r5, [r3, #-4]
 8008e8c:	f842 5c04 	str.w	r5, [r2, #-4]
 8008e90:	3801      	subs	r0, #1
 8008e92:	f103 0310 	add.w	r3, r3, #16
 8008e96:	f102 0210 	add.w	r2, r2, #16
 8008e9a:	d1e9      	bne.n	8008e70 <arm_fir_f32+0x474>
 8008e9c:	0133      	lsls	r3, r6, #4
 8008e9e:	441c      	add	r4, r3
 8008ea0:	449c      	add	ip, r3
 8008ea2:	f011 0303 	ands.w	r3, r1, #3
 8008ea6:	d006      	beq.n	8008eb6 <arm_fir_f32+0x4ba>
 8008ea8:	4622      	mov	r2, r4
 8008eaa:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008eae:	f842 1b04 	str.w	r1, [r2], #4
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	d1f9      	bne.n	8008eaa <arm_fir_f32+0x4ae>
 8008eb6:	b009      	add	sp, #36	; 0x24
 8008eb8:	ecbd 8b10 	vpop	{d8-d15}
 8008ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ec0:	46c3      	mov	fp, r8
 8008ec2:	e745      	b.n	8008d50 <arm_fir_f32+0x354>

08008ec4 <arm_cmplx_mag_f32>:
 8008ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ec8:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8008ecc:	b084      	sub	sp, #16
 8008ece:	d07f      	beq.n	8008fd0 <arm_cmplx_mag_f32+0x10c>
 8008ed0:	2700      	movs	r7, #0
 8008ed2:	f100 0420 	add.w	r4, r0, #32
 8008ed6:	f101 0510 	add.w	r5, r1, #16
 8008eda:	4646      	mov	r6, r8
 8008edc:	e05a      	b.n	8008f94 <arm_cmplx_mag_f32+0xd0>
 8008ede:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008ee2:	eeb4 0a40 	vcmp.f32	s0, s0
 8008ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eea:	f040 80a4 	bne.w	8009036 <arm_cmplx_mag_f32+0x172>
 8008eee:	ed05 0a04 	vstr	s0, [r5, #-16]
 8008ef2:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8008ef6:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8008efa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008efe:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008f02:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008f06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f0e:	f2c0 808f 	blt.w	8009030 <arm_cmplx_mag_f32+0x16c>
 8008f12:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008f16:	eeb4 0a40 	vcmp.f32	s0, s0
 8008f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f1e:	f040 80af 	bne.w	8009080 <arm_cmplx_mag_f32+0x1bc>
 8008f22:	ed05 0a03 	vstr	s0, [r5, #-12]
 8008f26:	ed54 7a04 	vldr	s15, [r4, #-16]
 8008f2a:	ed14 0a03 	vldr	s0, [r4, #-12]
 8008f2e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f32:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008f36:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008f3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f42:	db72      	blt.n	800902a <arm_cmplx_mag_f32+0x166>
 8008f44:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008f48:	eeb4 0a40 	vcmp.f32	s0, s0
 8008f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f50:	f040 808c 	bne.w	800906c <arm_cmplx_mag_f32+0x1a8>
 8008f54:	ed05 0a02 	vstr	s0, [r5, #-8]
 8008f58:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008f5c:	ed14 0a01 	vldr	s0, [r4, #-4]
 8008f60:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008f64:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008f68:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008f6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f74:	db20      	blt.n	8008fb8 <arm_cmplx_mag_f32+0xf4>
 8008f76:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008f7a:	eeb4 0a40 	vcmp.f32	s0, s0
 8008f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f82:	d169      	bne.n	8009058 <arm_cmplx_mag_f32+0x194>
 8008f84:	3e01      	subs	r6, #1
 8008f86:	ed05 0a01 	vstr	s0, [r5, #-4]
 8008f8a:	f104 0420 	add.w	r4, r4, #32
 8008f8e:	f105 0510 	add.w	r5, r5, #16
 8008f92:	d019      	beq.n	8008fc8 <arm_cmplx_mag_f32+0x104>
 8008f94:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 8008f98:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 8008f9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8008fa0:	ee20 0a00 	vmul.f32	s0, s0, s0
 8008fa4:	ee77 7a80 	vadd.f32	s15, s15, s0
 8008fa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fb0:	da95      	bge.n	8008ede <arm_cmplx_mag_f32+0x1a>
 8008fb2:	f845 7c10 	str.w	r7, [r5, #-16]
 8008fb6:	e79c      	b.n	8008ef2 <arm_cmplx_mag_f32+0x2e>
 8008fb8:	3e01      	subs	r6, #1
 8008fba:	f845 7c04 	str.w	r7, [r5, #-4]
 8008fbe:	f104 0420 	add.w	r4, r4, #32
 8008fc2:	f105 0510 	add.w	r5, r5, #16
 8008fc6:	d1e5      	bne.n	8008f94 <arm_cmplx_mag_f32+0xd0>
 8008fc8:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8008fcc:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 8008fd0:	f012 0503 	ands.w	r5, r2, #3
 8008fd4:	d026      	beq.n	8009024 <arm_cmplx_mag_f32+0x160>
 8008fd6:	2600      	movs	r6, #0
 8008fd8:	f100 0408 	add.w	r4, r0, #8
 8008fdc:	e00c      	b.n	8008ff8 <arm_cmplx_mag_f32+0x134>
 8008fde:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8008fe2:	eeb4 0a40 	vcmp.f32	s0, s0
 8008fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fea:	d12e      	bne.n	800904a <arm_cmplx_mag_f32+0x186>
 8008fec:	3d01      	subs	r5, #1
 8008fee:	ed01 0a01 	vstr	s0, [r1, #-4]
 8008ff2:	f104 0408 	add.w	r4, r4, #8
 8008ff6:	d015      	beq.n	8009024 <arm_cmplx_mag_f32+0x160>
 8008ff8:	ed54 7a02 	vldr	s15, [r4, #-8]
 8008ffc:	ed14 0a01 	vldr	s0, [r4, #-4]
 8009000:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009004:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009008:	3104      	adds	r1, #4
 800900a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800900e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009016:	dae2      	bge.n	8008fde <arm_cmplx_mag_f32+0x11a>
 8009018:	3d01      	subs	r5, #1
 800901a:	f841 6c04 	str.w	r6, [r1, #-4]
 800901e:	f104 0408 	add.w	r4, r4, #8
 8009022:	d1e9      	bne.n	8008ff8 <arm_cmplx_mag_f32+0x134>
 8009024:	b004      	add	sp, #16
 8009026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800902a:	f845 7c08 	str.w	r7, [r5, #-8]
 800902e:	e793      	b.n	8008f58 <arm_cmplx_mag_f32+0x94>
 8009030:	f845 7c0c 	str.w	r7, [r5, #-12]
 8009034:	e777      	b.n	8008f26 <arm_cmplx_mag_f32+0x62>
 8009036:	eeb0 0a67 	vmov.f32	s0, s15
 800903a:	9203      	str	r2, [sp, #12]
 800903c:	9102      	str	r1, [sp, #8]
 800903e:	9001      	str	r0, [sp, #4]
 8009040:	f005 f8b8 	bl	800e1b4 <sqrtf>
 8009044:	a801      	add	r0, sp, #4
 8009046:	c807      	ldmia	r0, {r0, r1, r2}
 8009048:	e751      	b.n	8008eee <arm_cmplx_mag_f32+0x2a>
 800904a:	eeb0 0a67 	vmov.f32	s0, s15
 800904e:	9101      	str	r1, [sp, #4]
 8009050:	f005 f8b0 	bl	800e1b4 <sqrtf>
 8009054:	9901      	ldr	r1, [sp, #4]
 8009056:	e7c9      	b.n	8008fec <arm_cmplx_mag_f32+0x128>
 8009058:	eeb0 0a67 	vmov.f32	s0, s15
 800905c:	9203      	str	r2, [sp, #12]
 800905e:	9102      	str	r1, [sp, #8]
 8009060:	9001      	str	r0, [sp, #4]
 8009062:	f005 f8a7 	bl	800e1b4 <sqrtf>
 8009066:	a801      	add	r0, sp, #4
 8009068:	c807      	ldmia	r0, {r0, r1, r2}
 800906a:	e78b      	b.n	8008f84 <arm_cmplx_mag_f32+0xc0>
 800906c:	eeb0 0a67 	vmov.f32	s0, s15
 8009070:	9203      	str	r2, [sp, #12]
 8009072:	9102      	str	r1, [sp, #8]
 8009074:	9001      	str	r0, [sp, #4]
 8009076:	f005 f89d 	bl	800e1b4 <sqrtf>
 800907a:	a801      	add	r0, sp, #4
 800907c:	c807      	ldmia	r0, {r0, r1, r2}
 800907e:	e769      	b.n	8008f54 <arm_cmplx_mag_f32+0x90>
 8009080:	eeb0 0a67 	vmov.f32	s0, s15
 8009084:	9203      	str	r2, [sp, #12]
 8009086:	9102      	str	r1, [sp, #8]
 8009088:	9001      	str	r0, [sp, #4]
 800908a:	f005 f893 	bl	800e1b4 <sqrtf>
 800908e:	a801      	add	r0, sp, #4
 8009090:	c807      	ldmia	r0, {r0, r1, r2}
 8009092:	e746      	b.n	8008f22 <arm_cmplx_mag_f32+0x5e>

08009094 <arm_scale_f32>:
 8009094:	b470      	push	{r4, r5, r6}
 8009096:	0896      	lsrs	r6, r2, #2
 8009098:	d025      	beq.n	80090e6 <arm_scale_f32+0x52>
 800909a:	f100 0410 	add.w	r4, r0, #16
 800909e:	f101 0310 	add.w	r3, r1, #16
 80090a2:	4635      	mov	r5, r6
 80090a4:	ed14 6a04 	vldr	s12, [r4, #-16]
 80090a8:	ed54 6a03 	vldr	s13, [r4, #-12]
 80090ac:	ed14 7a02 	vldr	s14, [r4, #-8]
 80090b0:	ed54 7a01 	vldr	s15, [r4, #-4]
 80090b4:	ee26 6a00 	vmul.f32	s12, s12, s0
 80090b8:	ee66 6a80 	vmul.f32	s13, s13, s0
 80090bc:	ee20 7a07 	vmul.f32	s14, s0, s14
 80090c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80090c4:	3d01      	subs	r5, #1
 80090c6:	ed03 6a04 	vstr	s12, [r3, #-16]
 80090ca:	ed43 6a03 	vstr	s13, [r3, #-12]
 80090ce:	ed03 7a02 	vstr	s14, [r3, #-8]
 80090d2:	ed43 7a01 	vstr	s15, [r3, #-4]
 80090d6:	f104 0410 	add.w	r4, r4, #16
 80090da:	f103 0310 	add.w	r3, r3, #16
 80090de:	d1e1      	bne.n	80090a4 <arm_scale_f32+0x10>
 80090e0:	0136      	lsls	r6, r6, #4
 80090e2:	4430      	add	r0, r6
 80090e4:	4431      	add	r1, r6
 80090e6:	f012 0203 	ands.w	r2, r2, #3
 80090ea:	d007      	beq.n	80090fc <arm_scale_f32+0x68>
 80090ec:	ecf0 7a01 	vldmia	r0!, {s15}
 80090f0:	ee67 7a80 	vmul.f32	s15, s15, s0
 80090f4:	3a01      	subs	r2, #1
 80090f6:	ece1 7a01 	vstmia	r1!, {s15}
 80090fa:	d1f7      	bne.n	80090ec <arm_scale_f32+0x58>
 80090fc:	bc70      	pop	{r4, r5, r6}
 80090fe:	4770      	bx	lr

08009100 <arm_offset_f32>:
 8009100:	b470      	push	{r4, r5, r6}
 8009102:	0896      	lsrs	r6, r2, #2
 8009104:	d025      	beq.n	8009152 <arm_offset_f32+0x52>
 8009106:	f100 0410 	add.w	r4, r0, #16
 800910a:	f101 0310 	add.w	r3, r1, #16
 800910e:	4635      	mov	r5, r6
 8009110:	ed14 6a04 	vldr	s12, [r4, #-16]
 8009114:	ed54 6a03 	vldr	s13, [r4, #-12]
 8009118:	ed14 7a02 	vldr	s14, [r4, #-8]
 800911c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8009120:	ee36 6a00 	vadd.f32	s12, s12, s0
 8009124:	ee76 6a80 	vadd.f32	s13, s13, s0
 8009128:	ee30 7a07 	vadd.f32	s14, s0, s14
 800912c:	ee70 7a27 	vadd.f32	s15, s0, s15
 8009130:	3d01      	subs	r5, #1
 8009132:	ed03 6a04 	vstr	s12, [r3, #-16]
 8009136:	ed43 6a03 	vstr	s13, [r3, #-12]
 800913a:	ed03 7a02 	vstr	s14, [r3, #-8]
 800913e:	ed43 7a01 	vstr	s15, [r3, #-4]
 8009142:	f104 0410 	add.w	r4, r4, #16
 8009146:	f103 0310 	add.w	r3, r3, #16
 800914a:	d1e1      	bne.n	8009110 <arm_offset_f32+0x10>
 800914c:	0136      	lsls	r6, r6, #4
 800914e:	4430      	add	r0, r6
 8009150:	4431      	add	r1, r6
 8009152:	f012 0203 	ands.w	r2, r2, #3
 8009156:	d007      	beq.n	8009168 <arm_offset_f32+0x68>
 8009158:	ecf0 7a01 	vldmia	r0!, {s15}
 800915c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009160:	3a01      	subs	r2, #1
 8009162:	ece1 7a01 	vstmia	r1!, {s15}
 8009166:	d1f7      	bne.n	8009158 <arm_offset_f32+0x58>
 8009168:	bc70      	pop	{r4, r5, r6}
 800916a:	4770      	bx	lr

0800916c <arm_radix8_butterfly_f32>:
 800916c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009170:	ed2d 8b10 	vpush	{d8-d15}
 8009174:	461c      	mov	r4, r3
 8009176:	b09d      	sub	sp, #116	; 0x74
 8009178:	4603      	mov	r3, r0
 800917a:	3304      	adds	r3, #4
 800917c:	ed9f bac4 	vldr	s22, [pc, #784]	; 8009490 <arm_radix8_butterfly_f32+0x324>
 8009180:	9019      	str	r0, [sp, #100]	; 0x64
 8009182:	921a      	str	r2, [sp, #104]	; 0x68
 8009184:	468b      	mov	fp, r1
 8009186:	931b      	str	r3, [sp, #108]	; 0x6c
 8009188:	468a      	mov	sl, r1
 800918a:	46a1      	mov	r9, r4
 800918c:	4607      	mov	r7, r0
 800918e:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8009192:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8009196:	eb03 0508 	add.w	r5, r3, r8
 800919a:	195c      	adds	r4, r3, r5
 800919c:	00de      	lsls	r6, r3, #3
 800919e:	191a      	adds	r2, r3, r4
 80091a0:	9600      	str	r6, [sp, #0]
 80091a2:	1898      	adds	r0, r3, r2
 80091a4:	4619      	mov	r1, r3
 80091a6:	9e00      	ldr	r6, [sp, #0]
 80091a8:	9311      	str	r3, [sp, #68]	; 0x44
 80091aa:	4401      	add	r1, r0
 80091ac:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 80091b0:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80091b4:	19be      	adds	r6, r7, r6
 80091b6:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 80091ba:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 80091be:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 80091c2:	9f00      	ldr	r7, [sp, #0]
 80091c4:	011b      	lsls	r3, r3, #4
 80091c6:	eb06 0e07 	add.w	lr, r6, r7
 80091ca:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80091cc:	9302      	str	r3, [sp, #8]
 80091ce:	3204      	adds	r2, #4
 80091d0:	3104      	adds	r1, #4
 80091d2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091d6:	f04f 0c00 	mov.w	ip, #0
 80091da:	edde 7a00 	vldr	s15, [lr]
 80091de:	edd6 6a00 	vldr	s13, [r6]
 80091e2:	ed95 2a00 	vldr	s4, [r5]
 80091e6:	ed17 aa01 	vldr	s20, [r7, #-4]
 80091ea:	edd4 4a00 	vldr	s9, [r4]
 80091ee:	ed90 5a00 	vldr	s10, [r0]
 80091f2:	ed12 7a01 	vldr	s14, [r2, #-4]
 80091f6:	ed51 0a01 	vldr	s1, [r1, #-4]
 80091fa:	ee77 8a85 	vadd.f32	s17, s15, s10
 80091fe:	ee76 3a87 	vadd.f32	s7, s13, s14
 8009202:	ee32 4a20 	vadd.f32	s8, s4, s1
 8009206:	ee3a 3a24 	vadd.f32	s6, s20, s9
 800920a:	ee33 6a84 	vadd.f32	s12, s7, s8
 800920e:	ee73 5a28 	vadd.f32	s11, s6, s17
 8009212:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8009216:	ee75 6a86 	vadd.f32	s13, s11, s12
 800921a:	ee75 5ac6 	vsub.f32	s11, s11, s12
 800921e:	ed47 6a01 	vstr	s13, [r7, #-4]
 8009222:	edc4 5a00 	vstr	s11, [r4]
 8009226:	ed92 9a00 	vldr	s18, [r2]
 800922a:	ed95 1a01 	vldr	s2, [r5, #4]
 800922e:	edd6 5a01 	vldr	s11, [r6, #4]
 8009232:	ed91 6a00 	vldr	s12, [r1]
 8009236:	edd7 2a00 	vldr	s5, [r7]
 800923a:	edd4 1a01 	vldr	s3, [r4, #4]
 800923e:	edde 6a01 	vldr	s13, [lr, #4]
 8009242:	edd0 9a01 	vldr	s19, [r0, #4]
 8009246:	ee72 0a60 	vsub.f32	s1, s4, s1
 800924a:	ee71 aa46 	vsub.f32	s21, s2, s12
 800924e:	ee35 2ac9 	vsub.f32	s4, s11, s18
 8009252:	ee37 0a60 	vsub.f32	s0, s14, s1
 8009256:	ee32 8a2a 	vadd.f32	s16, s4, s21
 800925a:	ee37 7a20 	vadd.f32	s14, s14, s1
 800925e:	ee32 2a6a 	vsub.f32	s4, s4, s21
 8009262:	ee37 5ac5 	vsub.f32	s10, s15, s10
 8009266:	ee75 5a89 	vadd.f32	s11, s11, s18
 800926a:	ee60 0a0b 	vmul.f32	s1, s0, s22
 800926e:	ee7a 4a64 	vsub.f32	s9, s20, s9
 8009272:	ee31 6a06 	vadd.f32	s12, s2, s12
 8009276:	ee36 9aa9 	vadd.f32	s18, s13, s19
 800927a:	ee32 1aa1 	vadd.f32	s2, s5, s3
 800927e:	ee76 6ae9 	vsub.f32	s13, s13, s19
 8009282:	ee72 1ae1 	vsub.f32	s3, s5, s3
 8009286:	ee28 8a0b 	vmul.f32	s16, s16, s22
 800928a:	ee62 2a0b 	vmul.f32	s5, s4, s22
 800928e:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8009292:	ee33 3a68 	vsub.f32	s6, s6, s17
 8009296:	ee36 0a88 	vadd.f32	s0, s13, s16
 800929a:	ee75 8a86 	vadd.f32	s17, s11, s12
 800929e:	ee36 7ac8 	vsub.f32	s14, s13, s16
 80092a2:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80092a6:	ee74 6ae0 	vsub.f32	s13, s9, s1
 80092aa:	ee74 3aa0 	vadd.f32	s7, s9, s1
 80092ae:	ee35 6ac6 	vsub.f32	s12, s11, s12
 80092b2:	ee75 4a27 	vadd.f32	s9, s10, s15
 80092b6:	ee71 5a49 	vsub.f32	s11, s2, s18
 80092ba:	ee31 2a09 	vadd.f32	s4, s2, s18
 80092be:	ee75 7a67 	vsub.f32	s15, s10, s15
 80092c2:	ee31 1aa2 	vadd.f32	s2, s3, s5
 80092c6:	ee71 2ae2 	vsub.f32	s5, s3, s5
 80092ca:	ee73 0a06 	vadd.f32	s1, s6, s12
 80092ce:	ee75 1ac4 	vsub.f32	s3, s11, s8
 80092d2:	ee36 5a87 	vadd.f32	s10, s13, s14
 80092d6:	ee32 8a28 	vadd.f32	s16, s4, s17
 80092da:	ee33 6a46 	vsub.f32	s12, s6, s12
 80092de:	ee34 4a25 	vadd.f32	s8, s8, s11
 80092e2:	ee33 3a80 	vadd.f32	s6, s7, s0
 80092e6:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80092ea:	ee71 5a64 	vsub.f32	s11, s2, s9
 80092ee:	ee72 6ae7 	vsub.f32	s13, s5, s15
 80092f2:	ee32 2a68 	vsub.f32	s4, s4, s17
 80092f6:	ee73 3ac0 	vsub.f32	s7, s7, s0
 80092fa:	ee74 4a81 	vadd.f32	s9, s9, s2
 80092fe:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8009302:	44dc      	add	ip, fp
 8009304:	45e2      	cmp	sl, ip
 8009306:	ed87 8a00 	vstr	s16, [r7]
 800930a:	ed84 2a01 	vstr	s4, [r4, #4]
 800930e:	441f      	add	r7, r3
 8009310:	edce 0a00 	vstr	s1, [lr]
 8009314:	441c      	add	r4, r3
 8009316:	ed80 6a00 	vstr	s12, [r0]
 800931a:	edce 1a01 	vstr	s3, [lr, #4]
 800931e:	ed80 4a01 	vstr	s8, [r0, #4]
 8009322:	449e      	add	lr, r3
 8009324:	ed86 3a00 	vstr	s6, [r6]
 8009328:	4418      	add	r0, r3
 800932a:	ed41 3a01 	vstr	s7, [r1, #-4]
 800932e:	ed02 5a01 	vstr	s10, [r2, #-4]
 8009332:	ed85 7a00 	vstr	s14, [r5]
 8009336:	edc6 5a01 	vstr	s11, [r6, #4]
 800933a:	edc1 4a00 	vstr	s9, [r1]
 800933e:	441e      	add	r6, r3
 8009340:	edc2 6a00 	vstr	s13, [r2]
 8009344:	4419      	add	r1, r3
 8009346:	edc5 7a01 	vstr	s15, [r5, #4]
 800934a:	441a      	add	r2, r3
 800934c:	441d      	add	r5, r3
 800934e:	f63f af44 	bhi.w	80091da <arm_radix8_butterfly_f32+0x6e>
 8009352:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009354:	2a07      	cmp	r2, #7
 8009356:	f240 81f5 	bls.w	8009744 <arm_radix8_butterfly_f32+0x5d8>
 800935a:	f108 0101 	add.w	r1, r8, #1
 800935e:	188f      	adds	r7, r1, r2
 8009360:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 8009364:	19d6      	adds	r6, r2, r7
 8009366:	eb08 0c09 	add.w	ip, r8, r9
 800936a:	1994      	adds	r4, r2, r6
 800936c:	eb0c 0e09 	add.w	lr, ip, r9
 8009370:	4610      	mov	r0, r2
 8009372:	9701      	str	r7, [sp, #4]
 8009374:	4420      	add	r0, r4
 8009376:	eb0e 0709 	add.w	r7, lr, r9
 800937a:	1815      	adds	r5, r2, r0
 800937c:	eb07 0209 	add.w	r2, r7, r9
 8009380:	9203      	str	r2, [sp, #12]
 8009382:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009384:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009388:	9117      	str	r1, [sp, #92]	; 0x5c
 800938a:	440a      	add	r2, r1
 800938c:	9900      	ldr	r1, [sp, #0]
 800938e:	3108      	adds	r1, #8
 8009390:	9100      	str	r1, [sp, #0]
 8009392:	9902      	ldr	r1, [sp, #8]
 8009394:	3108      	adds	r1, #8
 8009396:	9102      	str	r1, [sp, #8]
 8009398:	9919      	ldr	r1, [sp, #100]	; 0x64
 800939a:	00ff      	lsls	r7, r7, #3
 800939c:	9715      	str	r7, [sp, #84]	; 0x54
 800939e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 80093a2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80093a6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 80093aa:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 80093ac:	9903      	ldr	r1, [sp, #12]
 80093ae:	19d7      	adds	r7, r2, r7
 80093b0:	00c9      	lsls	r1, r1, #3
 80093b2:	9114      	str	r1, [sp, #80]	; 0x50
 80093b4:	9710      	str	r7, [sp, #64]	; 0x40
 80093b6:	9919      	ldr	r1, [sp, #100]	; 0x64
 80093b8:	9f00      	ldr	r7, [sp, #0]
 80093ba:	19cf      	adds	r7, r1, r7
 80093bc:	970d      	str	r7, [sp, #52]	; 0x34
 80093be:	9f02      	ldr	r7, [sp, #8]
 80093c0:	19cf      	adds	r7, r1, r7
 80093c2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80093c6:	970c      	str	r7, [sp, #48]	; 0x30
 80093c8:	9f01      	ldr	r7, [sp, #4]
 80093ca:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 80093ce:	3504      	adds	r5, #4
 80093d0:	3004      	adds	r0, #4
 80093d2:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 80093d6:	9508      	str	r5, [sp, #32]
 80093d8:	9009      	str	r0, [sp, #36]	; 0x24
 80093da:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80093dc:	981a      	ldr	r0, [sp, #104]	; 0x68
 80093de:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 80093e2:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80093e6:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 80093ea:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80093ec:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 80093f0:	1945      	adds	r5, r0, r5
 80093f2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80093f6:	460f      	mov	r7, r1
 80093f8:	3404      	adds	r4, #4
 80093fa:	4641      	mov	r1, r8
 80093fc:	1841      	adds	r1, r0, r1
 80093fe:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8009402:	940a      	str	r4, [sp, #40]	; 0x28
 8009404:	eb00 0c06 	add.w	ip, r0, r6
 8009408:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800940c:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800940e:	9506      	str	r5, [sp, #24]
 8009410:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8009412:	9105      	str	r1, [sp, #20]
 8009414:	4639      	mov	r1, r7
 8009416:	1905      	adds	r5, r0, r4
 8009418:	3108      	adds	r1, #8
 800941a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800941c:	9507      	str	r5, [sp, #28]
 800941e:	910f      	str	r1, [sp, #60]	; 0x3c
 8009420:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8009424:	2101      	movs	r1, #1
 8009426:	eb00 0e06 	add.w	lr, r0, r6
 800942a:	9518      	str	r5, [sp, #96]	; 0x60
 800942c:	9404      	str	r4, [sp, #16]
 800942e:	9103      	str	r1, [sp, #12]
 8009430:	4620      	mov	r0, r4
 8009432:	4689      	mov	r9, r1
 8009434:	9e06      	ldr	r6, [sp, #24]
 8009436:	ed90 fa00 	vldr	s30, [r0]
 800943a:	edd6 7a01 	vldr	s15, [r6, #4]
 800943e:	edd0 ba01 	vldr	s23, [r0, #4]
 8009442:	edcd 7a00 	vstr	s15, [sp]
 8009446:	a80d      	add	r0, sp, #52	; 0x34
 8009448:	edde 7a01 	vldr	s15, [lr, #4]
 800944c:	9c05      	ldr	r4, [sp, #20]
 800944e:	9d07      	ldr	r5, [sp, #28]
 8009450:	edd2 fa00 	vldr	s31, [r2]
 8009454:	ed92 ca01 	vldr	s24, [r2, #4]
 8009458:	edcd 7a01 	vstr	s15, [sp, #4]
 800945c:	c807      	ldmia	r0, {r0, r1, r2}
 800945e:	eddc 7a01 	vldr	s15, [ip, #4]
 8009462:	edd4 ea00 	vldr	s29, [r4]
 8009466:	ed95 ea00 	vldr	s28, [r5]
 800946a:	edd6 da00 	vldr	s27, [r6]
 800946e:	edd4 aa01 	vldr	s21, [r4, #4]
 8009472:	ed95 aa01 	vldr	s20, [r5, #4]
 8009476:	ed9e da00 	vldr	s26, [lr]
 800947a:	eddc ca00 	vldr	s25, [ip]
 800947e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009482:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009484:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009486:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8009488:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800948a:	edcd 7a02 	vstr	s15, [sp, #8]
 800948e:	e001      	b.n	8009494 <arm_radix8_butterfly_f32+0x328>
 8009490:	3f3504f3 	.word	0x3f3504f3
 8009494:	ed16 6a01 	vldr	s12, [r6, #-4]
 8009498:	ed91 5a00 	vldr	s10, [r1]
 800949c:	ed57 9a01 	vldr	s19, [r7, #-4]
 80094a0:	edd5 7a00 	vldr	s15, [r5]
 80094a4:	ed18 7a01 	vldr	s14, [r8, #-4]
 80094a8:	edd2 3a00 	vldr	s7, [r2]
 80094ac:	ed94 3a00 	vldr	s6, [r4]
 80094b0:	ed90 2a00 	vldr	s4, [r0]
 80094b4:	ed92 0a01 	vldr	s0, [r2, #4]
 80094b8:	ee33 8a85 	vadd.f32	s16, s7, s10
 80094bc:	ee32 1a06 	vadd.f32	s2, s4, s12
 80094c0:	ee33 4a29 	vadd.f32	s8, s6, s19
 80094c4:	ee77 4a87 	vadd.f32	s9, s15, s14
 80094c8:	ee78 1a04 	vadd.f32	s3, s16, s8
 80094cc:	ee71 6a24 	vadd.f32	s13, s2, s9
 80094d0:	ee32 2a46 	vsub.f32	s4, s4, s12
 80094d4:	ee31 6aa6 	vadd.f32	s12, s3, s13
 80094d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094dc:	ed82 6a00 	vstr	s12, [r2]
 80094e0:	edd5 8a01 	vldr	s17, [r5, #4]
 80094e4:	ed90 9a01 	vldr	s18, [r0, #4]
 80094e8:	edd6 2a00 	vldr	s5, [r6]
 80094ec:	ed98 7a00 	vldr	s14, [r8]
 80094f0:	edd4 0a01 	vldr	s1, [r4, #4]
 80094f4:	ed91 6a01 	vldr	s12, [r1, #4]
 80094f8:	edd7 5a00 	vldr	s11, [r7]
 80094fc:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009500:	ee33 3a69 	vsub.f32	s6, s6, s19
 8009504:	ee39 5a62 	vsub.f32	s10, s18, s5
 8009508:	ee78 9ac7 	vsub.f32	s19, s17, s14
 800950c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8009510:	ee38 7a87 	vadd.f32	s14, s17, s14
 8009514:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8009518:	ee79 2a22 	vadd.f32	s5, s18, s5
 800951c:	ee75 8a69 	vsub.f32	s17, s10, s19
 8009520:	ee32 9a27 	vadd.f32	s18, s4, s15
 8009524:	ee35 5a29 	vadd.f32	s10, s10, s19
 8009528:	ee72 7a67 	vsub.f32	s15, s4, s15
 800952c:	ee30 2a06 	vadd.f32	s4, s0, s12
 8009530:	ee69 9a0b 	vmul.f32	s19, s18, s22
 8009534:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8009538:	ee32 9a08 	vadd.f32	s18, s4, s16
 800953c:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8009540:	ee32 2a48 	vsub.f32	s4, s4, s16
 8009544:	ee71 4a64 	vsub.f32	s9, s2, s9
 8009548:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800954c:	ee32 1a87 	vadd.f32	s2, s5, s14
 8009550:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8009554:	ee72 2ac7 	vsub.f32	s5, s5, s14
 8009558:	ee30 6a46 	vsub.f32	s12, s0, s12
 800955c:	ee73 0a29 	vadd.f32	s1, s6, s19
 8009560:	ee36 0a28 	vadd.f32	s0, s12, s17
 8009564:	ee33 3a69 	vsub.f32	s6, s6, s19
 8009568:	ee32 7a64 	vsub.f32	s14, s4, s9
 800956c:	ee73 9aa7 	vadd.f32	s19, s7, s15
 8009570:	ee36 6a68 	vsub.f32	s12, s12, s17
 8009574:	ee73 7ae7 	vsub.f32	s15, s7, s15
 8009578:	ee75 8a85 	vadd.f32	s17, s11, s10
 800957c:	ee74 3a22 	vadd.f32	s7, s8, s5
 8009580:	ee35 5ac5 	vsub.f32	s10, s11, s10
 8009584:	ee71 6ae6 	vsub.f32	s13, s3, s13
 8009588:	ee79 1a41 	vsub.f32	s3, s18, s2
 800958c:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8009590:	ee76 5a43 	vsub.f32	s11, s12, s6
 8009594:	ee74 2a62 	vsub.f32	s5, s8, s5
 8009598:	ee74 4a82 	vadd.f32	s9, s9, s4
 800959c:	ee30 4a60 	vsub.f32	s8, s0, s1
 80095a0:	ee79 8ae8 	vsub.f32	s17, s19, s17
 80095a4:	ee30 0a80 	vadd.f32	s0, s1, s0
 80095a8:	ee77 9a85 	vadd.f32	s19, s15, s10
 80095ac:	ee33 6a06 	vadd.f32	s12, s6, s12
 80095b0:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80095b4:	ee2e 2a21 	vmul.f32	s4, s28, s3
 80095b8:	ee2e 5a26 	vmul.f32	s10, s28, s13
 80095bc:	ee6f 0a23 	vmul.f32	s1, s30, s7
 80095c0:	ee2a 3a21 	vmul.f32	s6, s20, s3
 80095c4:	ee39 1a01 	vadd.f32	s2, s18, s2
 80095c8:	ee6a 6a26 	vmul.f32	s13, s20, s13
 80095cc:	ee2b 9a87 	vmul.f32	s18, s23, s14
 80095d0:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 80095d4:	ee2f 7a07 	vmul.f32	s14, s30, s14
 80095d8:	ee6f 1a84 	vmul.f32	s3, s31, s8
 80095dc:	ee35 3a03 	vadd.f32	s6, s10, s6
 80095e0:	ee72 6a66 	vsub.f32	s13, s4, s13
 80095e4:	ee2c 5a04 	vmul.f32	s10, s24, s8
 80095e8:	ee2f 2a88 	vmul.f32	s4, s31, s16
 80095ec:	ed9d 4a02 	vldr	s8, [sp, #8]
 80095f0:	ed82 1a01 	vstr	s2, [r2, #4]
 80095f4:	ee77 3a63 	vsub.f32	s7, s14, s7
 80095f8:	ee2c 8a08 	vmul.f32	s16, s24, s16
 80095fc:	ed9d 7a01 	vldr	s14, [sp, #4]
 8009600:	ed81 3a00 	vstr	s6, [r1]
 8009604:	ee30 9a89 	vadd.f32	s18, s1, s18
 8009608:	ee32 2a05 	vadd.f32	s4, s4, s10
 800960c:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8009610:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8009614:	ee67 2a22 	vmul.f32	s5, s14, s5
 8009618:	ee64 1a00 	vmul.f32	s3, s8, s0
 800961c:	ee27 7a24 	vmul.f32	s14, s14, s9
 8009620:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8009624:	ee6d 4a24 	vmul.f32	s9, s26, s9
 8009628:	ee64 8a28 	vmul.f32	s17, s8, s17
 800962c:	ed9d 4a00 	vldr	s8, [sp]
 8009630:	edc1 6a01 	vstr	s13, [r1, #4]
 8009634:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8009638:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 800963c:	ee64 9a29 	vmul.f32	s19, s8, s19
 8009640:	ee24 4a25 	vmul.f32	s8, s8, s11
 8009644:	ee30 7a87 	vadd.f32	s14, s1, s14
 8009648:	ee74 4a84 	vadd.f32	s9, s9, s8
 800964c:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 8009650:	ee2a 4a86 	vmul.f32	s8, s21, s12
 8009654:	ee2c 0a80 	vmul.f32	s0, s25, s0
 8009658:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 800965c:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 8009660:	ee2e 6a86 	vmul.f32	s12, s29, s12
 8009664:	ee75 1a21 	vadd.f32	s3, s10, s3
 8009668:	ee30 0a68 	vsub.f32	s0, s0, s17
 800966c:	ee75 9ae9 	vsub.f32	s19, s11, s19
 8009670:	ee70 0a84 	vadd.f32	s1, s1, s8
 8009674:	ee36 6a67 	vsub.f32	s12, s12, s15
 8009678:	44d9      	add	r9, fp
 800967a:	45ca      	cmp	sl, r9
 800967c:	ed84 9a00 	vstr	s18, [r4]
 8009680:	edc4 3a01 	vstr	s7, [r4, #4]
 8009684:	441a      	add	r2, r3
 8009686:	ed07 7a01 	vstr	s14, [r7, #-4]
 800968a:	edc7 2a00 	vstr	s5, [r7]
 800968e:	4419      	add	r1, r3
 8009690:	ed80 2a00 	vstr	s4, [r0]
 8009694:	ed80 8a01 	vstr	s16, [r0, #4]
 8009698:	441c      	add	r4, r3
 800969a:	ed48 1a01 	vstr	s3, [r8, #-4]
 800969e:	ed88 0a00 	vstr	s0, [r8]
 80096a2:	441f      	add	r7, r3
 80096a4:	ed46 4a01 	vstr	s9, [r6, #-4]
 80096a8:	4418      	add	r0, r3
 80096aa:	edc6 9a00 	vstr	s19, [r6]
 80096ae:	4498      	add	r8, r3
 80096b0:	edc5 0a00 	vstr	s1, [r5]
 80096b4:	ed85 6a01 	vstr	s12, [r5, #4]
 80096b8:	441e      	add	r6, r3
 80096ba:	441d      	add	r5, r3
 80096bc:	f63f aeea 	bhi.w	8009494 <arm_radix8_butterfly_f32+0x328>
 80096c0:	9a03      	ldr	r2, [sp, #12]
 80096c2:	9818      	ldr	r0, [sp, #96]	; 0x60
 80096c4:	3201      	adds	r2, #1
 80096c6:	4611      	mov	r1, r2
 80096c8:	9203      	str	r2, [sp, #12]
 80096ca:	9a04      	ldr	r2, [sp, #16]
 80096cc:	4402      	add	r2, r0
 80096ce:	9204      	str	r2, [sp, #16]
 80096d0:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80096d2:	9a05      	ldr	r2, [sp, #20]
 80096d4:	4402      	add	r2, r0
 80096d6:	9205      	str	r2, [sp, #20]
 80096d8:	9812      	ldr	r0, [sp, #72]	; 0x48
 80096da:	9a07      	ldr	r2, [sp, #28]
 80096dc:	4402      	add	r2, r0
 80096de:	9207      	str	r2, [sp, #28]
 80096e0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80096e2:	9a06      	ldr	r2, [sp, #24]
 80096e4:	4402      	add	r2, r0
 80096e6:	9206      	str	r2, [sp, #24]
 80096e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80096ea:	4496      	add	lr, r2
 80096ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80096ee:	4494      	add	ip, r2
 80096f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80096f2:	3208      	adds	r2, #8
 80096f4:	920f      	str	r2, [sp, #60]	; 0x3c
 80096f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80096f8:	3208      	adds	r2, #8
 80096fa:	920e      	str	r2, [sp, #56]	; 0x38
 80096fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096fe:	3208      	adds	r2, #8
 8009700:	920d      	str	r2, [sp, #52]	; 0x34
 8009702:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009704:	3208      	adds	r2, #8
 8009706:	920c      	str	r2, [sp, #48]	; 0x30
 8009708:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800970a:	3208      	adds	r2, #8
 800970c:	920b      	str	r2, [sp, #44]	; 0x2c
 800970e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009710:	3208      	adds	r2, #8
 8009712:	920a      	str	r2, [sp, #40]	; 0x28
 8009714:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009716:	3208      	adds	r2, #8
 8009718:	9209      	str	r2, [sp, #36]	; 0x24
 800971a:	9a08      	ldr	r2, [sp, #32]
 800971c:	3208      	adds	r2, #8
 800971e:	9208      	str	r2, [sp, #32]
 8009720:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009722:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009724:	4288      	cmp	r0, r1
 8009726:	4622      	mov	r2, r4
 8009728:	d007      	beq.n	800973a <arm_radix8_butterfly_f32+0x5ce>
 800972a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800972c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009730:	4621      	mov	r1, r4
 8009732:	4401      	add	r1, r0
 8009734:	9110      	str	r1, [sp, #64]	; 0x40
 8009736:	9804      	ldr	r0, [sp, #16]
 8009738:	e67c      	b.n	8009434 <arm_radix8_butterfly_f32+0x2c8>
 800973a:	4683      	mov	fp, r0
 800973c:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 8009740:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8009742:	e524      	b.n	800918e <arm_radix8_butterfly_f32+0x22>
 8009744:	b01d      	add	sp, #116	; 0x74
 8009746:	ecbd 8b10 	vpop	{d8-d15}
 800974a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800974e:	bf00      	nop

08009750 <__errno>:
 8009750:	4b01      	ldr	r3, [pc, #4]	; (8009758 <__errno+0x8>)
 8009752:	6818      	ldr	r0, [r3, #0]
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	20000080 	.word	0x20000080

0800975c <__libc_init_array>:
 800975c:	b570      	push	{r4, r5, r6, lr}
 800975e:	4d0d      	ldr	r5, [pc, #52]	; (8009794 <__libc_init_array+0x38>)
 8009760:	4c0d      	ldr	r4, [pc, #52]	; (8009798 <__libc_init_array+0x3c>)
 8009762:	1b64      	subs	r4, r4, r5
 8009764:	10a4      	asrs	r4, r4, #2
 8009766:	2600      	movs	r6, #0
 8009768:	42a6      	cmp	r6, r4
 800976a:	d109      	bne.n	8009780 <__libc_init_array+0x24>
 800976c:	4d0b      	ldr	r5, [pc, #44]	; (800979c <__libc_init_array+0x40>)
 800976e:	4c0c      	ldr	r4, [pc, #48]	; (80097a0 <__libc_init_array+0x44>)
 8009770:	f005 ff9c 	bl	800f6ac <_init>
 8009774:	1b64      	subs	r4, r4, r5
 8009776:	10a4      	asrs	r4, r4, #2
 8009778:	2600      	movs	r6, #0
 800977a:	42a6      	cmp	r6, r4
 800977c:	d105      	bne.n	800978a <__libc_init_array+0x2e>
 800977e:	bd70      	pop	{r4, r5, r6, pc}
 8009780:	f855 3b04 	ldr.w	r3, [r5], #4
 8009784:	4798      	blx	r3
 8009786:	3601      	adds	r6, #1
 8009788:	e7ee      	b.n	8009768 <__libc_init_array+0xc>
 800978a:	f855 3b04 	ldr.w	r3, [r5], #4
 800978e:	4798      	blx	r3
 8009790:	3601      	adds	r6, #1
 8009792:	e7f2      	b.n	800977a <__libc_init_array+0x1e>
 8009794:	08023548 	.word	0x08023548
 8009798:	08023548 	.word	0x08023548
 800979c:	08023548 	.word	0x08023548
 80097a0:	0802354c 	.word	0x0802354c

080097a4 <memcpy>:
 80097a4:	440a      	add	r2, r1
 80097a6:	4291      	cmp	r1, r2
 80097a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80097ac:	d100      	bne.n	80097b0 <memcpy+0xc>
 80097ae:	4770      	bx	lr
 80097b0:	b510      	push	{r4, lr}
 80097b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097ba:	4291      	cmp	r1, r2
 80097bc:	d1f9      	bne.n	80097b2 <memcpy+0xe>
 80097be:	bd10      	pop	{r4, pc}

080097c0 <memset>:
 80097c0:	4402      	add	r2, r0
 80097c2:	4603      	mov	r3, r0
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d100      	bne.n	80097ca <memset+0xa>
 80097c8:	4770      	bx	lr
 80097ca:	f803 1b01 	strb.w	r1, [r3], #1
 80097ce:	e7f9      	b.n	80097c4 <memset+0x4>

080097d0 <__cvt>:
 80097d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80097d4:	ec55 4b10 	vmov	r4, r5, d0
 80097d8:	2d00      	cmp	r5, #0
 80097da:	460e      	mov	r6, r1
 80097dc:	4619      	mov	r1, r3
 80097de:	462b      	mov	r3, r5
 80097e0:	bfbb      	ittet	lt
 80097e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80097e6:	461d      	movlt	r5, r3
 80097e8:	2300      	movge	r3, #0
 80097ea:	232d      	movlt	r3, #45	; 0x2d
 80097ec:	700b      	strb	r3, [r1, #0]
 80097ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80097f4:	4691      	mov	r9, r2
 80097f6:	f023 0820 	bic.w	r8, r3, #32
 80097fa:	bfbc      	itt	lt
 80097fc:	4622      	movlt	r2, r4
 80097fe:	4614      	movlt	r4, r2
 8009800:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009804:	d005      	beq.n	8009812 <__cvt+0x42>
 8009806:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800980a:	d100      	bne.n	800980e <__cvt+0x3e>
 800980c:	3601      	adds	r6, #1
 800980e:	2102      	movs	r1, #2
 8009810:	e000      	b.n	8009814 <__cvt+0x44>
 8009812:	2103      	movs	r1, #3
 8009814:	ab03      	add	r3, sp, #12
 8009816:	9301      	str	r3, [sp, #4]
 8009818:	ab02      	add	r3, sp, #8
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	ec45 4b10 	vmov	d0, r4, r5
 8009820:	4653      	mov	r3, sl
 8009822:	4632      	mov	r2, r6
 8009824:	f001 fde8 	bl	800b3f8 <_dtoa_r>
 8009828:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800982c:	4607      	mov	r7, r0
 800982e:	d102      	bne.n	8009836 <__cvt+0x66>
 8009830:	f019 0f01 	tst.w	r9, #1
 8009834:	d022      	beq.n	800987c <__cvt+0xac>
 8009836:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800983a:	eb07 0906 	add.w	r9, r7, r6
 800983e:	d110      	bne.n	8009862 <__cvt+0x92>
 8009840:	783b      	ldrb	r3, [r7, #0]
 8009842:	2b30      	cmp	r3, #48	; 0x30
 8009844:	d10a      	bne.n	800985c <__cvt+0x8c>
 8009846:	2200      	movs	r2, #0
 8009848:	2300      	movs	r3, #0
 800984a:	4620      	mov	r0, r4
 800984c:	4629      	mov	r1, r5
 800984e:	f7f7 f99b 	bl	8000b88 <__aeabi_dcmpeq>
 8009852:	b918      	cbnz	r0, 800985c <__cvt+0x8c>
 8009854:	f1c6 0601 	rsb	r6, r6, #1
 8009858:	f8ca 6000 	str.w	r6, [sl]
 800985c:	f8da 3000 	ldr.w	r3, [sl]
 8009860:	4499      	add	r9, r3
 8009862:	2200      	movs	r2, #0
 8009864:	2300      	movs	r3, #0
 8009866:	4620      	mov	r0, r4
 8009868:	4629      	mov	r1, r5
 800986a:	f7f7 f98d 	bl	8000b88 <__aeabi_dcmpeq>
 800986e:	b108      	cbz	r0, 8009874 <__cvt+0xa4>
 8009870:	f8cd 900c 	str.w	r9, [sp, #12]
 8009874:	2230      	movs	r2, #48	; 0x30
 8009876:	9b03      	ldr	r3, [sp, #12]
 8009878:	454b      	cmp	r3, r9
 800987a:	d307      	bcc.n	800988c <__cvt+0xbc>
 800987c:	9b03      	ldr	r3, [sp, #12]
 800987e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009880:	1bdb      	subs	r3, r3, r7
 8009882:	4638      	mov	r0, r7
 8009884:	6013      	str	r3, [r2, #0]
 8009886:	b004      	add	sp, #16
 8009888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800988c:	1c59      	adds	r1, r3, #1
 800988e:	9103      	str	r1, [sp, #12]
 8009890:	701a      	strb	r2, [r3, #0]
 8009892:	e7f0      	b.n	8009876 <__cvt+0xa6>

08009894 <__exponent>:
 8009894:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009896:	4603      	mov	r3, r0
 8009898:	2900      	cmp	r1, #0
 800989a:	bfb8      	it	lt
 800989c:	4249      	neglt	r1, r1
 800989e:	f803 2b02 	strb.w	r2, [r3], #2
 80098a2:	bfb4      	ite	lt
 80098a4:	222d      	movlt	r2, #45	; 0x2d
 80098a6:	222b      	movge	r2, #43	; 0x2b
 80098a8:	2909      	cmp	r1, #9
 80098aa:	7042      	strb	r2, [r0, #1]
 80098ac:	dd2a      	ble.n	8009904 <__exponent+0x70>
 80098ae:	f10d 0407 	add.w	r4, sp, #7
 80098b2:	46a4      	mov	ip, r4
 80098b4:	270a      	movs	r7, #10
 80098b6:	46a6      	mov	lr, r4
 80098b8:	460a      	mov	r2, r1
 80098ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80098be:	fb07 1516 	mls	r5, r7, r6, r1
 80098c2:	3530      	adds	r5, #48	; 0x30
 80098c4:	2a63      	cmp	r2, #99	; 0x63
 80098c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80098ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80098ce:	4631      	mov	r1, r6
 80098d0:	dcf1      	bgt.n	80098b6 <__exponent+0x22>
 80098d2:	3130      	adds	r1, #48	; 0x30
 80098d4:	f1ae 0502 	sub.w	r5, lr, #2
 80098d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80098dc:	1c44      	adds	r4, r0, #1
 80098de:	4629      	mov	r1, r5
 80098e0:	4561      	cmp	r1, ip
 80098e2:	d30a      	bcc.n	80098fa <__exponent+0x66>
 80098e4:	f10d 0209 	add.w	r2, sp, #9
 80098e8:	eba2 020e 	sub.w	r2, r2, lr
 80098ec:	4565      	cmp	r5, ip
 80098ee:	bf88      	it	hi
 80098f0:	2200      	movhi	r2, #0
 80098f2:	4413      	add	r3, r2
 80098f4:	1a18      	subs	r0, r3, r0
 80098f6:	b003      	add	sp, #12
 80098f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009902:	e7ed      	b.n	80098e0 <__exponent+0x4c>
 8009904:	2330      	movs	r3, #48	; 0x30
 8009906:	3130      	adds	r1, #48	; 0x30
 8009908:	7083      	strb	r3, [r0, #2]
 800990a:	70c1      	strb	r1, [r0, #3]
 800990c:	1d03      	adds	r3, r0, #4
 800990e:	e7f1      	b.n	80098f4 <__exponent+0x60>

08009910 <_printf_float>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	ed2d 8b02 	vpush	{d8}
 8009918:	b08d      	sub	sp, #52	; 0x34
 800991a:	460c      	mov	r4, r1
 800991c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009920:	4616      	mov	r6, r2
 8009922:	461f      	mov	r7, r3
 8009924:	4605      	mov	r5, r0
 8009926:	f002 fec3 	bl	800c6b0 <_localeconv_r>
 800992a:	f8d0 a000 	ldr.w	sl, [r0]
 800992e:	4650      	mov	r0, sl
 8009930:	f7f6 fcae 	bl	8000290 <strlen>
 8009934:	2300      	movs	r3, #0
 8009936:	930a      	str	r3, [sp, #40]	; 0x28
 8009938:	6823      	ldr	r3, [r4, #0]
 800993a:	9305      	str	r3, [sp, #20]
 800993c:	f8d8 3000 	ldr.w	r3, [r8]
 8009940:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009944:	3307      	adds	r3, #7
 8009946:	f023 0307 	bic.w	r3, r3, #7
 800994a:	f103 0208 	add.w	r2, r3, #8
 800994e:	f8c8 2000 	str.w	r2, [r8]
 8009952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009956:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800995a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800995e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009962:	9307      	str	r3, [sp, #28]
 8009964:	f8cd 8018 	str.w	r8, [sp, #24]
 8009968:	ee08 0a10 	vmov	s16, r0
 800996c:	4b9f      	ldr	r3, [pc, #636]	; (8009bec <_printf_float+0x2dc>)
 800996e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009972:	f04f 32ff 	mov.w	r2, #4294967295
 8009976:	f7f7 f939 	bl	8000bec <__aeabi_dcmpun>
 800997a:	bb88      	cbnz	r0, 80099e0 <_printf_float+0xd0>
 800997c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009980:	4b9a      	ldr	r3, [pc, #616]	; (8009bec <_printf_float+0x2dc>)
 8009982:	f04f 32ff 	mov.w	r2, #4294967295
 8009986:	f7f7 f913 	bl	8000bb0 <__aeabi_dcmple>
 800998a:	bb48      	cbnz	r0, 80099e0 <_printf_float+0xd0>
 800998c:	2200      	movs	r2, #0
 800998e:	2300      	movs	r3, #0
 8009990:	4640      	mov	r0, r8
 8009992:	4649      	mov	r1, r9
 8009994:	f7f7 f902 	bl	8000b9c <__aeabi_dcmplt>
 8009998:	b110      	cbz	r0, 80099a0 <_printf_float+0x90>
 800999a:	232d      	movs	r3, #45	; 0x2d
 800999c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099a0:	4b93      	ldr	r3, [pc, #588]	; (8009bf0 <_printf_float+0x2e0>)
 80099a2:	4894      	ldr	r0, [pc, #592]	; (8009bf4 <_printf_float+0x2e4>)
 80099a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80099a8:	bf94      	ite	ls
 80099aa:	4698      	movls	r8, r3
 80099ac:	4680      	movhi	r8, r0
 80099ae:	2303      	movs	r3, #3
 80099b0:	6123      	str	r3, [r4, #16]
 80099b2:	9b05      	ldr	r3, [sp, #20]
 80099b4:	f023 0204 	bic.w	r2, r3, #4
 80099b8:	6022      	str	r2, [r4, #0]
 80099ba:	f04f 0900 	mov.w	r9, #0
 80099be:	9700      	str	r7, [sp, #0]
 80099c0:	4633      	mov	r3, r6
 80099c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80099c4:	4621      	mov	r1, r4
 80099c6:	4628      	mov	r0, r5
 80099c8:	f000 f9d8 	bl	8009d7c <_printf_common>
 80099cc:	3001      	adds	r0, #1
 80099ce:	f040 8090 	bne.w	8009af2 <_printf_float+0x1e2>
 80099d2:	f04f 30ff 	mov.w	r0, #4294967295
 80099d6:	b00d      	add	sp, #52	; 0x34
 80099d8:	ecbd 8b02 	vpop	{d8}
 80099dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e0:	4642      	mov	r2, r8
 80099e2:	464b      	mov	r3, r9
 80099e4:	4640      	mov	r0, r8
 80099e6:	4649      	mov	r1, r9
 80099e8:	f7f7 f900 	bl	8000bec <__aeabi_dcmpun>
 80099ec:	b140      	cbz	r0, 8009a00 <_printf_float+0xf0>
 80099ee:	464b      	mov	r3, r9
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	bfbc      	itt	lt
 80099f4:	232d      	movlt	r3, #45	; 0x2d
 80099f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099fa:	487f      	ldr	r0, [pc, #508]	; (8009bf8 <_printf_float+0x2e8>)
 80099fc:	4b7f      	ldr	r3, [pc, #508]	; (8009bfc <_printf_float+0x2ec>)
 80099fe:	e7d1      	b.n	80099a4 <_printf_float+0x94>
 8009a00:	6863      	ldr	r3, [r4, #4]
 8009a02:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a06:	9206      	str	r2, [sp, #24]
 8009a08:	1c5a      	adds	r2, r3, #1
 8009a0a:	d13f      	bne.n	8009a8c <_printf_float+0x17c>
 8009a0c:	2306      	movs	r3, #6
 8009a0e:	6063      	str	r3, [r4, #4]
 8009a10:	9b05      	ldr	r3, [sp, #20]
 8009a12:	6861      	ldr	r1, [r4, #4]
 8009a14:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a18:	2300      	movs	r3, #0
 8009a1a:	9303      	str	r3, [sp, #12]
 8009a1c:	ab0a      	add	r3, sp, #40	; 0x28
 8009a1e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a22:	ab09      	add	r3, sp, #36	; 0x24
 8009a24:	ec49 8b10 	vmov	d0, r8, r9
 8009a28:	9300      	str	r3, [sp, #0]
 8009a2a:	6022      	str	r2, [r4, #0]
 8009a2c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009a30:	4628      	mov	r0, r5
 8009a32:	f7ff fecd 	bl	80097d0 <__cvt>
 8009a36:	9b06      	ldr	r3, [sp, #24]
 8009a38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a3a:	2b47      	cmp	r3, #71	; 0x47
 8009a3c:	4680      	mov	r8, r0
 8009a3e:	d108      	bne.n	8009a52 <_printf_float+0x142>
 8009a40:	1cc8      	adds	r0, r1, #3
 8009a42:	db02      	blt.n	8009a4a <_printf_float+0x13a>
 8009a44:	6863      	ldr	r3, [r4, #4]
 8009a46:	4299      	cmp	r1, r3
 8009a48:	dd41      	ble.n	8009ace <_printf_float+0x1be>
 8009a4a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a4e:	fa5f fb8b 	uxtb.w	fp, fp
 8009a52:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a56:	d820      	bhi.n	8009a9a <_printf_float+0x18a>
 8009a58:	3901      	subs	r1, #1
 8009a5a:	465a      	mov	r2, fp
 8009a5c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a60:	9109      	str	r1, [sp, #36]	; 0x24
 8009a62:	f7ff ff17 	bl	8009894 <__exponent>
 8009a66:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a68:	1813      	adds	r3, r2, r0
 8009a6a:	2a01      	cmp	r2, #1
 8009a6c:	4681      	mov	r9, r0
 8009a6e:	6123      	str	r3, [r4, #16]
 8009a70:	dc02      	bgt.n	8009a78 <_printf_float+0x168>
 8009a72:	6822      	ldr	r2, [r4, #0]
 8009a74:	07d2      	lsls	r2, r2, #31
 8009a76:	d501      	bpl.n	8009a7c <_printf_float+0x16c>
 8009a78:	3301      	adds	r3, #1
 8009a7a:	6123      	str	r3, [r4, #16]
 8009a7c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d09c      	beq.n	80099be <_printf_float+0xae>
 8009a84:	232d      	movs	r3, #45	; 0x2d
 8009a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a8a:	e798      	b.n	80099be <_printf_float+0xae>
 8009a8c:	9a06      	ldr	r2, [sp, #24]
 8009a8e:	2a47      	cmp	r2, #71	; 0x47
 8009a90:	d1be      	bne.n	8009a10 <_printf_float+0x100>
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1bc      	bne.n	8009a10 <_printf_float+0x100>
 8009a96:	2301      	movs	r3, #1
 8009a98:	e7b9      	b.n	8009a0e <_printf_float+0xfe>
 8009a9a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a9e:	d118      	bne.n	8009ad2 <_printf_float+0x1c2>
 8009aa0:	2900      	cmp	r1, #0
 8009aa2:	6863      	ldr	r3, [r4, #4]
 8009aa4:	dd0b      	ble.n	8009abe <_printf_float+0x1ae>
 8009aa6:	6121      	str	r1, [r4, #16]
 8009aa8:	b913      	cbnz	r3, 8009ab0 <_printf_float+0x1a0>
 8009aaa:	6822      	ldr	r2, [r4, #0]
 8009aac:	07d0      	lsls	r0, r2, #31
 8009aae:	d502      	bpl.n	8009ab6 <_printf_float+0x1a6>
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	440b      	add	r3, r1
 8009ab4:	6123      	str	r3, [r4, #16]
 8009ab6:	65a1      	str	r1, [r4, #88]	; 0x58
 8009ab8:	f04f 0900 	mov.w	r9, #0
 8009abc:	e7de      	b.n	8009a7c <_printf_float+0x16c>
 8009abe:	b913      	cbnz	r3, 8009ac6 <_printf_float+0x1b6>
 8009ac0:	6822      	ldr	r2, [r4, #0]
 8009ac2:	07d2      	lsls	r2, r2, #31
 8009ac4:	d501      	bpl.n	8009aca <_printf_float+0x1ba>
 8009ac6:	3302      	adds	r3, #2
 8009ac8:	e7f4      	b.n	8009ab4 <_printf_float+0x1a4>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e7f2      	b.n	8009ab4 <_printf_float+0x1a4>
 8009ace:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009ad2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ad4:	4299      	cmp	r1, r3
 8009ad6:	db05      	blt.n	8009ae4 <_printf_float+0x1d4>
 8009ad8:	6823      	ldr	r3, [r4, #0]
 8009ada:	6121      	str	r1, [r4, #16]
 8009adc:	07d8      	lsls	r0, r3, #31
 8009ade:	d5ea      	bpl.n	8009ab6 <_printf_float+0x1a6>
 8009ae0:	1c4b      	adds	r3, r1, #1
 8009ae2:	e7e7      	b.n	8009ab4 <_printf_float+0x1a4>
 8009ae4:	2900      	cmp	r1, #0
 8009ae6:	bfd4      	ite	le
 8009ae8:	f1c1 0202 	rsble	r2, r1, #2
 8009aec:	2201      	movgt	r2, #1
 8009aee:	4413      	add	r3, r2
 8009af0:	e7e0      	b.n	8009ab4 <_printf_float+0x1a4>
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	055a      	lsls	r2, r3, #21
 8009af6:	d407      	bmi.n	8009b08 <_printf_float+0x1f8>
 8009af8:	6923      	ldr	r3, [r4, #16]
 8009afa:	4642      	mov	r2, r8
 8009afc:	4631      	mov	r1, r6
 8009afe:	4628      	mov	r0, r5
 8009b00:	47b8      	blx	r7
 8009b02:	3001      	adds	r0, #1
 8009b04:	d12c      	bne.n	8009b60 <_printf_float+0x250>
 8009b06:	e764      	b.n	80099d2 <_printf_float+0xc2>
 8009b08:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b0c:	f240 80e0 	bls.w	8009cd0 <_printf_float+0x3c0>
 8009b10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b14:	2200      	movs	r2, #0
 8009b16:	2300      	movs	r3, #0
 8009b18:	f7f7 f836 	bl	8000b88 <__aeabi_dcmpeq>
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	d034      	beq.n	8009b8a <_printf_float+0x27a>
 8009b20:	4a37      	ldr	r2, [pc, #220]	; (8009c00 <_printf_float+0x2f0>)
 8009b22:	2301      	movs	r3, #1
 8009b24:	4631      	mov	r1, r6
 8009b26:	4628      	mov	r0, r5
 8009b28:	47b8      	blx	r7
 8009b2a:	3001      	adds	r0, #1
 8009b2c:	f43f af51 	beq.w	80099d2 <_printf_float+0xc2>
 8009b30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b34:	429a      	cmp	r2, r3
 8009b36:	db02      	blt.n	8009b3e <_printf_float+0x22e>
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	07d8      	lsls	r0, r3, #31
 8009b3c:	d510      	bpl.n	8009b60 <_printf_float+0x250>
 8009b3e:	ee18 3a10 	vmov	r3, s16
 8009b42:	4652      	mov	r2, sl
 8009b44:	4631      	mov	r1, r6
 8009b46:	4628      	mov	r0, r5
 8009b48:	47b8      	blx	r7
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	f43f af41 	beq.w	80099d2 <_printf_float+0xc2>
 8009b50:	f04f 0800 	mov.w	r8, #0
 8009b54:	f104 091a 	add.w	r9, r4, #26
 8009b58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b5a:	3b01      	subs	r3, #1
 8009b5c:	4543      	cmp	r3, r8
 8009b5e:	dc09      	bgt.n	8009b74 <_printf_float+0x264>
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	079b      	lsls	r3, r3, #30
 8009b64:	f100 8105 	bmi.w	8009d72 <_printf_float+0x462>
 8009b68:	68e0      	ldr	r0, [r4, #12]
 8009b6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b6c:	4298      	cmp	r0, r3
 8009b6e:	bfb8      	it	lt
 8009b70:	4618      	movlt	r0, r3
 8009b72:	e730      	b.n	80099d6 <_printf_float+0xc6>
 8009b74:	2301      	movs	r3, #1
 8009b76:	464a      	mov	r2, r9
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	47b8      	blx	r7
 8009b7e:	3001      	adds	r0, #1
 8009b80:	f43f af27 	beq.w	80099d2 <_printf_float+0xc2>
 8009b84:	f108 0801 	add.w	r8, r8, #1
 8009b88:	e7e6      	b.n	8009b58 <_printf_float+0x248>
 8009b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	dc39      	bgt.n	8009c04 <_printf_float+0x2f4>
 8009b90:	4a1b      	ldr	r2, [pc, #108]	; (8009c00 <_printf_float+0x2f0>)
 8009b92:	2301      	movs	r3, #1
 8009b94:	4631      	mov	r1, r6
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b8      	blx	r7
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	f43f af19 	beq.w	80099d2 <_printf_float+0xc2>
 8009ba0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	d102      	bne.n	8009bae <_printf_float+0x29e>
 8009ba8:	6823      	ldr	r3, [r4, #0]
 8009baa:	07d9      	lsls	r1, r3, #31
 8009bac:	d5d8      	bpl.n	8009b60 <_printf_float+0x250>
 8009bae:	ee18 3a10 	vmov	r3, s16
 8009bb2:	4652      	mov	r2, sl
 8009bb4:	4631      	mov	r1, r6
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	47b8      	blx	r7
 8009bba:	3001      	adds	r0, #1
 8009bbc:	f43f af09 	beq.w	80099d2 <_printf_float+0xc2>
 8009bc0:	f04f 0900 	mov.w	r9, #0
 8009bc4:	f104 0a1a 	add.w	sl, r4, #26
 8009bc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bca:	425b      	negs	r3, r3
 8009bcc:	454b      	cmp	r3, r9
 8009bce:	dc01      	bgt.n	8009bd4 <_printf_float+0x2c4>
 8009bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd2:	e792      	b.n	8009afa <_printf_float+0x1ea>
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	4652      	mov	r2, sl
 8009bd8:	4631      	mov	r1, r6
 8009bda:	4628      	mov	r0, r5
 8009bdc:	47b8      	blx	r7
 8009bde:	3001      	adds	r0, #1
 8009be0:	f43f aef7 	beq.w	80099d2 <_printf_float+0xc2>
 8009be4:	f109 0901 	add.w	r9, r9, #1
 8009be8:	e7ee      	b.n	8009bc8 <_printf_float+0x2b8>
 8009bea:	bf00      	nop
 8009bec:	7fefffff 	.word	0x7fefffff
 8009bf0:	08022e44 	.word	0x08022e44
 8009bf4:	08022e48 	.word	0x08022e48
 8009bf8:	08022e50 	.word	0x08022e50
 8009bfc:	08022e4c 	.word	0x08022e4c
 8009c00:	08022e54 	.word	0x08022e54
 8009c04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	bfa8      	it	ge
 8009c0c:	461a      	movge	r2, r3
 8009c0e:	2a00      	cmp	r2, #0
 8009c10:	4691      	mov	r9, r2
 8009c12:	dc37      	bgt.n	8009c84 <_printf_float+0x374>
 8009c14:	f04f 0b00 	mov.w	fp, #0
 8009c18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c1c:	f104 021a 	add.w	r2, r4, #26
 8009c20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c22:	9305      	str	r3, [sp, #20]
 8009c24:	eba3 0309 	sub.w	r3, r3, r9
 8009c28:	455b      	cmp	r3, fp
 8009c2a:	dc33      	bgt.n	8009c94 <_printf_float+0x384>
 8009c2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c30:	429a      	cmp	r2, r3
 8009c32:	db3b      	blt.n	8009cac <_printf_float+0x39c>
 8009c34:	6823      	ldr	r3, [r4, #0]
 8009c36:	07da      	lsls	r2, r3, #31
 8009c38:	d438      	bmi.n	8009cac <_printf_float+0x39c>
 8009c3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c3c:	9b05      	ldr	r3, [sp, #20]
 8009c3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c40:	1ad3      	subs	r3, r2, r3
 8009c42:	eba2 0901 	sub.w	r9, r2, r1
 8009c46:	4599      	cmp	r9, r3
 8009c48:	bfa8      	it	ge
 8009c4a:	4699      	movge	r9, r3
 8009c4c:	f1b9 0f00 	cmp.w	r9, #0
 8009c50:	dc35      	bgt.n	8009cbe <_printf_float+0x3ae>
 8009c52:	f04f 0800 	mov.w	r8, #0
 8009c56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c5a:	f104 0a1a 	add.w	sl, r4, #26
 8009c5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c62:	1a9b      	subs	r3, r3, r2
 8009c64:	eba3 0309 	sub.w	r3, r3, r9
 8009c68:	4543      	cmp	r3, r8
 8009c6a:	f77f af79 	ble.w	8009b60 <_printf_float+0x250>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	4652      	mov	r2, sl
 8009c72:	4631      	mov	r1, r6
 8009c74:	4628      	mov	r0, r5
 8009c76:	47b8      	blx	r7
 8009c78:	3001      	adds	r0, #1
 8009c7a:	f43f aeaa 	beq.w	80099d2 <_printf_float+0xc2>
 8009c7e:	f108 0801 	add.w	r8, r8, #1
 8009c82:	e7ec      	b.n	8009c5e <_printf_float+0x34e>
 8009c84:	4613      	mov	r3, r2
 8009c86:	4631      	mov	r1, r6
 8009c88:	4642      	mov	r2, r8
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	47b8      	blx	r7
 8009c8e:	3001      	adds	r0, #1
 8009c90:	d1c0      	bne.n	8009c14 <_printf_float+0x304>
 8009c92:	e69e      	b.n	80099d2 <_printf_float+0xc2>
 8009c94:	2301      	movs	r3, #1
 8009c96:	4631      	mov	r1, r6
 8009c98:	4628      	mov	r0, r5
 8009c9a:	9205      	str	r2, [sp, #20]
 8009c9c:	47b8      	blx	r7
 8009c9e:	3001      	adds	r0, #1
 8009ca0:	f43f ae97 	beq.w	80099d2 <_printf_float+0xc2>
 8009ca4:	9a05      	ldr	r2, [sp, #20]
 8009ca6:	f10b 0b01 	add.w	fp, fp, #1
 8009caa:	e7b9      	b.n	8009c20 <_printf_float+0x310>
 8009cac:	ee18 3a10 	vmov	r3, s16
 8009cb0:	4652      	mov	r2, sl
 8009cb2:	4631      	mov	r1, r6
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	47b8      	blx	r7
 8009cb8:	3001      	adds	r0, #1
 8009cba:	d1be      	bne.n	8009c3a <_printf_float+0x32a>
 8009cbc:	e689      	b.n	80099d2 <_printf_float+0xc2>
 8009cbe:	9a05      	ldr	r2, [sp, #20]
 8009cc0:	464b      	mov	r3, r9
 8009cc2:	4442      	add	r2, r8
 8009cc4:	4631      	mov	r1, r6
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	47b8      	blx	r7
 8009cca:	3001      	adds	r0, #1
 8009ccc:	d1c1      	bne.n	8009c52 <_printf_float+0x342>
 8009cce:	e680      	b.n	80099d2 <_printf_float+0xc2>
 8009cd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009cd2:	2a01      	cmp	r2, #1
 8009cd4:	dc01      	bgt.n	8009cda <_printf_float+0x3ca>
 8009cd6:	07db      	lsls	r3, r3, #31
 8009cd8:	d538      	bpl.n	8009d4c <_printf_float+0x43c>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	4642      	mov	r2, r8
 8009cde:	4631      	mov	r1, r6
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	47b8      	blx	r7
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	f43f ae74 	beq.w	80099d2 <_printf_float+0xc2>
 8009cea:	ee18 3a10 	vmov	r3, s16
 8009cee:	4652      	mov	r2, sl
 8009cf0:	4631      	mov	r1, r6
 8009cf2:	4628      	mov	r0, r5
 8009cf4:	47b8      	blx	r7
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	f43f ae6b 	beq.w	80099d2 <_printf_float+0xc2>
 8009cfc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d00:	2200      	movs	r2, #0
 8009d02:	2300      	movs	r3, #0
 8009d04:	f7f6 ff40 	bl	8000b88 <__aeabi_dcmpeq>
 8009d08:	b9d8      	cbnz	r0, 8009d42 <_printf_float+0x432>
 8009d0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d0c:	f108 0201 	add.w	r2, r8, #1
 8009d10:	3b01      	subs	r3, #1
 8009d12:	4631      	mov	r1, r6
 8009d14:	4628      	mov	r0, r5
 8009d16:	47b8      	blx	r7
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d10e      	bne.n	8009d3a <_printf_float+0x42a>
 8009d1c:	e659      	b.n	80099d2 <_printf_float+0xc2>
 8009d1e:	2301      	movs	r3, #1
 8009d20:	4652      	mov	r2, sl
 8009d22:	4631      	mov	r1, r6
 8009d24:	4628      	mov	r0, r5
 8009d26:	47b8      	blx	r7
 8009d28:	3001      	adds	r0, #1
 8009d2a:	f43f ae52 	beq.w	80099d2 <_printf_float+0xc2>
 8009d2e:	f108 0801 	add.w	r8, r8, #1
 8009d32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d34:	3b01      	subs	r3, #1
 8009d36:	4543      	cmp	r3, r8
 8009d38:	dcf1      	bgt.n	8009d1e <_printf_float+0x40e>
 8009d3a:	464b      	mov	r3, r9
 8009d3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009d40:	e6dc      	b.n	8009afc <_printf_float+0x1ec>
 8009d42:	f04f 0800 	mov.w	r8, #0
 8009d46:	f104 0a1a 	add.w	sl, r4, #26
 8009d4a:	e7f2      	b.n	8009d32 <_printf_float+0x422>
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	4642      	mov	r2, r8
 8009d50:	e7df      	b.n	8009d12 <_printf_float+0x402>
 8009d52:	2301      	movs	r3, #1
 8009d54:	464a      	mov	r2, r9
 8009d56:	4631      	mov	r1, r6
 8009d58:	4628      	mov	r0, r5
 8009d5a:	47b8      	blx	r7
 8009d5c:	3001      	adds	r0, #1
 8009d5e:	f43f ae38 	beq.w	80099d2 <_printf_float+0xc2>
 8009d62:	f108 0801 	add.w	r8, r8, #1
 8009d66:	68e3      	ldr	r3, [r4, #12]
 8009d68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d6a:	1a5b      	subs	r3, r3, r1
 8009d6c:	4543      	cmp	r3, r8
 8009d6e:	dcf0      	bgt.n	8009d52 <_printf_float+0x442>
 8009d70:	e6fa      	b.n	8009b68 <_printf_float+0x258>
 8009d72:	f04f 0800 	mov.w	r8, #0
 8009d76:	f104 0919 	add.w	r9, r4, #25
 8009d7a:	e7f4      	b.n	8009d66 <_printf_float+0x456>

08009d7c <_printf_common>:
 8009d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d80:	4616      	mov	r6, r2
 8009d82:	4699      	mov	r9, r3
 8009d84:	688a      	ldr	r2, [r1, #8]
 8009d86:	690b      	ldr	r3, [r1, #16]
 8009d88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	bfb8      	it	lt
 8009d90:	4613      	movlt	r3, r2
 8009d92:	6033      	str	r3, [r6, #0]
 8009d94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d98:	4607      	mov	r7, r0
 8009d9a:	460c      	mov	r4, r1
 8009d9c:	b10a      	cbz	r2, 8009da2 <_printf_common+0x26>
 8009d9e:	3301      	adds	r3, #1
 8009da0:	6033      	str	r3, [r6, #0]
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	0699      	lsls	r1, r3, #26
 8009da6:	bf42      	ittt	mi
 8009da8:	6833      	ldrmi	r3, [r6, #0]
 8009daa:	3302      	addmi	r3, #2
 8009dac:	6033      	strmi	r3, [r6, #0]
 8009dae:	6825      	ldr	r5, [r4, #0]
 8009db0:	f015 0506 	ands.w	r5, r5, #6
 8009db4:	d106      	bne.n	8009dc4 <_printf_common+0x48>
 8009db6:	f104 0a19 	add.w	sl, r4, #25
 8009dba:	68e3      	ldr	r3, [r4, #12]
 8009dbc:	6832      	ldr	r2, [r6, #0]
 8009dbe:	1a9b      	subs	r3, r3, r2
 8009dc0:	42ab      	cmp	r3, r5
 8009dc2:	dc26      	bgt.n	8009e12 <_printf_common+0x96>
 8009dc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009dc8:	1e13      	subs	r3, r2, #0
 8009dca:	6822      	ldr	r2, [r4, #0]
 8009dcc:	bf18      	it	ne
 8009dce:	2301      	movne	r3, #1
 8009dd0:	0692      	lsls	r2, r2, #26
 8009dd2:	d42b      	bmi.n	8009e2c <_printf_common+0xb0>
 8009dd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dd8:	4649      	mov	r1, r9
 8009dda:	4638      	mov	r0, r7
 8009ddc:	47c0      	blx	r8
 8009dde:	3001      	adds	r0, #1
 8009de0:	d01e      	beq.n	8009e20 <_printf_common+0xa4>
 8009de2:	6823      	ldr	r3, [r4, #0]
 8009de4:	68e5      	ldr	r5, [r4, #12]
 8009de6:	6832      	ldr	r2, [r6, #0]
 8009de8:	f003 0306 	and.w	r3, r3, #6
 8009dec:	2b04      	cmp	r3, #4
 8009dee:	bf08      	it	eq
 8009df0:	1aad      	subeq	r5, r5, r2
 8009df2:	68a3      	ldr	r3, [r4, #8]
 8009df4:	6922      	ldr	r2, [r4, #16]
 8009df6:	bf0c      	ite	eq
 8009df8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009dfc:	2500      	movne	r5, #0
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	bfc4      	itt	gt
 8009e02:	1a9b      	subgt	r3, r3, r2
 8009e04:	18ed      	addgt	r5, r5, r3
 8009e06:	2600      	movs	r6, #0
 8009e08:	341a      	adds	r4, #26
 8009e0a:	42b5      	cmp	r5, r6
 8009e0c:	d11a      	bne.n	8009e44 <_printf_common+0xc8>
 8009e0e:	2000      	movs	r0, #0
 8009e10:	e008      	b.n	8009e24 <_printf_common+0xa8>
 8009e12:	2301      	movs	r3, #1
 8009e14:	4652      	mov	r2, sl
 8009e16:	4649      	mov	r1, r9
 8009e18:	4638      	mov	r0, r7
 8009e1a:	47c0      	blx	r8
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	d103      	bne.n	8009e28 <_printf_common+0xac>
 8009e20:	f04f 30ff 	mov.w	r0, #4294967295
 8009e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e28:	3501      	adds	r5, #1
 8009e2a:	e7c6      	b.n	8009dba <_printf_common+0x3e>
 8009e2c:	18e1      	adds	r1, r4, r3
 8009e2e:	1c5a      	adds	r2, r3, #1
 8009e30:	2030      	movs	r0, #48	; 0x30
 8009e32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e36:	4422      	add	r2, r4
 8009e38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e40:	3302      	adds	r3, #2
 8009e42:	e7c7      	b.n	8009dd4 <_printf_common+0x58>
 8009e44:	2301      	movs	r3, #1
 8009e46:	4622      	mov	r2, r4
 8009e48:	4649      	mov	r1, r9
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	47c0      	blx	r8
 8009e4e:	3001      	adds	r0, #1
 8009e50:	d0e6      	beq.n	8009e20 <_printf_common+0xa4>
 8009e52:	3601      	adds	r6, #1
 8009e54:	e7d9      	b.n	8009e0a <_printf_common+0x8e>
	...

08009e58 <_printf_i>:
 8009e58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e5c:	460c      	mov	r4, r1
 8009e5e:	4691      	mov	r9, r2
 8009e60:	7e27      	ldrb	r7, [r4, #24]
 8009e62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009e64:	2f78      	cmp	r7, #120	; 0x78
 8009e66:	4680      	mov	r8, r0
 8009e68:	469a      	mov	sl, r3
 8009e6a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e6e:	d807      	bhi.n	8009e80 <_printf_i+0x28>
 8009e70:	2f62      	cmp	r7, #98	; 0x62
 8009e72:	d80a      	bhi.n	8009e8a <_printf_i+0x32>
 8009e74:	2f00      	cmp	r7, #0
 8009e76:	f000 80d8 	beq.w	800a02a <_printf_i+0x1d2>
 8009e7a:	2f58      	cmp	r7, #88	; 0x58
 8009e7c:	f000 80a3 	beq.w	8009fc6 <_printf_i+0x16e>
 8009e80:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009e84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e88:	e03a      	b.n	8009f00 <_printf_i+0xa8>
 8009e8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e8e:	2b15      	cmp	r3, #21
 8009e90:	d8f6      	bhi.n	8009e80 <_printf_i+0x28>
 8009e92:	a001      	add	r0, pc, #4	; (adr r0, 8009e98 <_printf_i+0x40>)
 8009e94:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009e98:	08009ef1 	.word	0x08009ef1
 8009e9c:	08009f05 	.word	0x08009f05
 8009ea0:	08009e81 	.word	0x08009e81
 8009ea4:	08009e81 	.word	0x08009e81
 8009ea8:	08009e81 	.word	0x08009e81
 8009eac:	08009e81 	.word	0x08009e81
 8009eb0:	08009f05 	.word	0x08009f05
 8009eb4:	08009e81 	.word	0x08009e81
 8009eb8:	08009e81 	.word	0x08009e81
 8009ebc:	08009e81 	.word	0x08009e81
 8009ec0:	08009e81 	.word	0x08009e81
 8009ec4:	0800a011 	.word	0x0800a011
 8009ec8:	08009f35 	.word	0x08009f35
 8009ecc:	08009ff3 	.word	0x08009ff3
 8009ed0:	08009e81 	.word	0x08009e81
 8009ed4:	08009e81 	.word	0x08009e81
 8009ed8:	0800a033 	.word	0x0800a033
 8009edc:	08009e81 	.word	0x08009e81
 8009ee0:	08009f35 	.word	0x08009f35
 8009ee4:	08009e81 	.word	0x08009e81
 8009ee8:	08009e81 	.word	0x08009e81
 8009eec:	08009ffb 	.word	0x08009ffb
 8009ef0:	680b      	ldr	r3, [r1, #0]
 8009ef2:	1d1a      	adds	r2, r3, #4
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	600a      	str	r2, [r1, #0]
 8009ef8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009efc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f00:	2301      	movs	r3, #1
 8009f02:	e0a3      	b.n	800a04c <_printf_i+0x1f4>
 8009f04:	6825      	ldr	r5, [r4, #0]
 8009f06:	6808      	ldr	r0, [r1, #0]
 8009f08:	062e      	lsls	r6, r5, #24
 8009f0a:	f100 0304 	add.w	r3, r0, #4
 8009f0e:	d50a      	bpl.n	8009f26 <_printf_i+0xce>
 8009f10:	6805      	ldr	r5, [r0, #0]
 8009f12:	600b      	str	r3, [r1, #0]
 8009f14:	2d00      	cmp	r5, #0
 8009f16:	da03      	bge.n	8009f20 <_printf_i+0xc8>
 8009f18:	232d      	movs	r3, #45	; 0x2d
 8009f1a:	426d      	negs	r5, r5
 8009f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f20:	485e      	ldr	r0, [pc, #376]	; (800a09c <_printf_i+0x244>)
 8009f22:	230a      	movs	r3, #10
 8009f24:	e019      	b.n	8009f5a <_printf_i+0x102>
 8009f26:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009f2a:	6805      	ldr	r5, [r0, #0]
 8009f2c:	600b      	str	r3, [r1, #0]
 8009f2e:	bf18      	it	ne
 8009f30:	b22d      	sxthne	r5, r5
 8009f32:	e7ef      	b.n	8009f14 <_printf_i+0xbc>
 8009f34:	680b      	ldr	r3, [r1, #0]
 8009f36:	6825      	ldr	r5, [r4, #0]
 8009f38:	1d18      	adds	r0, r3, #4
 8009f3a:	6008      	str	r0, [r1, #0]
 8009f3c:	0628      	lsls	r0, r5, #24
 8009f3e:	d501      	bpl.n	8009f44 <_printf_i+0xec>
 8009f40:	681d      	ldr	r5, [r3, #0]
 8009f42:	e002      	b.n	8009f4a <_printf_i+0xf2>
 8009f44:	0669      	lsls	r1, r5, #25
 8009f46:	d5fb      	bpl.n	8009f40 <_printf_i+0xe8>
 8009f48:	881d      	ldrh	r5, [r3, #0]
 8009f4a:	4854      	ldr	r0, [pc, #336]	; (800a09c <_printf_i+0x244>)
 8009f4c:	2f6f      	cmp	r7, #111	; 0x6f
 8009f4e:	bf0c      	ite	eq
 8009f50:	2308      	moveq	r3, #8
 8009f52:	230a      	movne	r3, #10
 8009f54:	2100      	movs	r1, #0
 8009f56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f5a:	6866      	ldr	r6, [r4, #4]
 8009f5c:	60a6      	str	r6, [r4, #8]
 8009f5e:	2e00      	cmp	r6, #0
 8009f60:	bfa2      	ittt	ge
 8009f62:	6821      	ldrge	r1, [r4, #0]
 8009f64:	f021 0104 	bicge.w	r1, r1, #4
 8009f68:	6021      	strge	r1, [r4, #0]
 8009f6a:	b90d      	cbnz	r5, 8009f70 <_printf_i+0x118>
 8009f6c:	2e00      	cmp	r6, #0
 8009f6e:	d04d      	beq.n	800a00c <_printf_i+0x1b4>
 8009f70:	4616      	mov	r6, r2
 8009f72:	fbb5 f1f3 	udiv	r1, r5, r3
 8009f76:	fb03 5711 	mls	r7, r3, r1, r5
 8009f7a:	5dc7      	ldrb	r7, [r0, r7]
 8009f7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009f80:	462f      	mov	r7, r5
 8009f82:	42bb      	cmp	r3, r7
 8009f84:	460d      	mov	r5, r1
 8009f86:	d9f4      	bls.n	8009f72 <_printf_i+0x11a>
 8009f88:	2b08      	cmp	r3, #8
 8009f8a:	d10b      	bne.n	8009fa4 <_printf_i+0x14c>
 8009f8c:	6823      	ldr	r3, [r4, #0]
 8009f8e:	07df      	lsls	r7, r3, #31
 8009f90:	d508      	bpl.n	8009fa4 <_printf_i+0x14c>
 8009f92:	6923      	ldr	r3, [r4, #16]
 8009f94:	6861      	ldr	r1, [r4, #4]
 8009f96:	4299      	cmp	r1, r3
 8009f98:	bfde      	ittt	le
 8009f9a:	2330      	movle	r3, #48	; 0x30
 8009f9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009fa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009fa4:	1b92      	subs	r2, r2, r6
 8009fa6:	6122      	str	r2, [r4, #16]
 8009fa8:	f8cd a000 	str.w	sl, [sp]
 8009fac:	464b      	mov	r3, r9
 8009fae:	aa03      	add	r2, sp, #12
 8009fb0:	4621      	mov	r1, r4
 8009fb2:	4640      	mov	r0, r8
 8009fb4:	f7ff fee2 	bl	8009d7c <_printf_common>
 8009fb8:	3001      	adds	r0, #1
 8009fba:	d14c      	bne.n	800a056 <_printf_i+0x1fe>
 8009fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc0:	b004      	add	sp, #16
 8009fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc6:	4835      	ldr	r0, [pc, #212]	; (800a09c <_printf_i+0x244>)
 8009fc8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009fcc:	6823      	ldr	r3, [r4, #0]
 8009fce:	680e      	ldr	r6, [r1, #0]
 8009fd0:	061f      	lsls	r7, r3, #24
 8009fd2:	f856 5b04 	ldr.w	r5, [r6], #4
 8009fd6:	600e      	str	r6, [r1, #0]
 8009fd8:	d514      	bpl.n	800a004 <_printf_i+0x1ac>
 8009fda:	07d9      	lsls	r1, r3, #31
 8009fdc:	bf44      	itt	mi
 8009fde:	f043 0320 	orrmi.w	r3, r3, #32
 8009fe2:	6023      	strmi	r3, [r4, #0]
 8009fe4:	b91d      	cbnz	r5, 8009fee <_printf_i+0x196>
 8009fe6:	6823      	ldr	r3, [r4, #0]
 8009fe8:	f023 0320 	bic.w	r3, r3, #32
 8009fec:	6023      	str	r3, [r4, #0]
 8009fee:	2310      	movs	r3, #16
 8009ff0:	e7b0      	b.n	8009f54 <_printf_i+0xfc>
 8009ff2:	6823      	ldr	r3, [r4, #0]
 8009ff4:	f043 0320 	orr.w	r3, r3, #32
 8009ff8:	6023      	str	r3, [r4, #0]
 8009ffa:	2378      	movs	r3, #120	; 0x78
 8009ffc:	4828      	ldr	r0, [pc, #160]	; (800a0a0 <_printf_i+0x248>)
 8009ffe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a002:	e7e3      	b.n	8009fcc <_printf_i+0x174>
 800a004:	065e      	lsls	r6, r3, #25
 800a006:	bf48      	it	mi
 800a008:	b2ad      	uxthmi	r5, r5
 800a00a:	e7e6      	b.n	8009fda <_printf_i+0x182>
 800a00c:	4616      	mov	r6, r2
 800a00e:	e7bb      	b.n	8009f88 <_printf_i+0x130>
 800a010:	680b      	ldr	r3, [r1, #0]
 800a012:	6826      	ldr	r6, [r4, #0]
 800a014:	6960      	ldr	r0, [r4, #20]
 800a016:	1d1d      	adds	r5, r3, #4
 800a018:	600d      	str	r5, [r1, #0]
 800a01a:	0635      	lsls	r5, r6, #24
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	d501      	bpl.n	800a024 <_printf_i+0x1cc>
 800a020:	6018      	str	r0, [r3, #0]
 800a022:	e002      	b.n	800a02a <_printf_i+0x1d2>
 800a024:	0671      	lsls	r1, r6, #25
 800a026:	d5fb      	bpl.n	800a020 <_printf_i+0x1c8>
 800a028:	8018      	strh	r0, [r3, #0]
 800a02a:	2300      	movs	r3, #0
 800a02c:	6123      	str	r3, [r4, #16]
 800a02e:	4616      	mov	r6, r2
 800a030:	e7ba      	b.n	8009fa8 <_printf_i+0x150>
 800a032:	680b      	ldr	r3, [r1, #0]
 800a034:	1d1a      	adds	r2, r3, #4
 800a036:	600a      	str	r2, [r1, #0]
 800a038:	681e      	ldr	r6, [r3, #0]
 800a03a:	6862      	ldr	r2, [r4, #4]
 800a03c:	2100      	movs	r1, #0
 800a03e:	4630      	mov	r0, r6
 800a040:	f7f6 f92e 	bl	80002a0 <memchr>
 800a044:	b108      	cbz	r0, 800a04a <_printf_i+0x1f2>
 800a046:	1b80      	subs	r0, r0, r6
 800a048:	6060      	str	r0, [r4, #4]
 800a04a:	6863      	ldr	r3, [r4, #4]
 800a04c:	6123      	str	r3, [r4, #16]
 800a04e:	2300      	movs	r3, #0
 800a050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a054:	e7a8      	b.n	8009fa8 <_printf_i+0x150>
 800a056:	6923      	ldr	r3, [r4, #16]
 800a058:	4632      	mov	r2, r6
 800a05a:	4649      	mov	r1, r9
 800a05c:	4640      	mov	r0, r8
 800a05e:	47d0      	blx	sl
 800a060:	3001      	adds	r0, #1
 800a062:	d0ab      	beq.n	8009fbc <_printf_i+0x164>
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	079b      	lsls	r3, r3, #30
 800a068:	d413      	bmi.n	800a092 <_printf_i+0x23a>
 800a06a:	68e0      	ldr	r0, [r4, #12]
 800a06c:	9b03      	ldr	r3, [sp, #12]
 800a06e:	4298      	cmp	r0, r3
 800a070:	bfb8      	it	lt
 800a072:	4618      	movlt	r0, r3
 800a074:	e7a4      	b.n	8009fc0 <_printf_i+0x168>
 800a076:	2301      	movs	r3, #1
 800a078:	4632      	mov	r2, r6
 800a07a:	4649      	mov	r1, r9
 800a07c:	4640      	mov	r0, r8
 800a07e:	47d0      	blx	sl
 800a080:	3001      	adds	r0, #1
 800a082:	d09b      	beq.n	8009fbc <_printf_i+0x164>
 800a084:	3501      	adds	r5, #1
 800a086:	68e3      	ldr	r3, [r4, #12]
 800a088:	9903      	ldr	r1, [sp, #12]
 800a08a:	1a5b      	subs	r3, r3, r1
 800a08c:	42ab      	cmp	r3, r5
 800a08e:	dcf2      	bgt.n	800a076 <_printf_i+0x21e>
 800a090:	e7eb      	b.n	800a06a <_printf_i+0x212>
 800a092:	2500      	movs	r5, #0
 800a094:	f104 0619 	add.w	r6, r4, #25
 800a098:	e7f5      	b.n	800a086 <_printf_i+0x22e>
 800a09a:	bf00      	nop
 800a09c:	08022e56 	.word	0x08022e56
 800a0a0:	08022e67 	.word	0x08022e67

0800a0a4 <_scanf_float>:
 800a0a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0a8:	b087      	sub	sp, #28
 800a0aa:	4617      	mov	r7, r2
 800a0ac:	9303      	str	r3, [sp, #12]
 800a0ae:	688b      	ldr	r3, [r1, #8]
 800a0b0:	1e5a      	subs	r2, r3, #1
 800a0b2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a0b6:	bf83      	ittte	hi
 800a0b8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a0bc:	195b      	addhi	r3, r3, r5
 800a0be:	9302      	strhi	r3, [sp, #8]
 800a0c0:	2300      	movls	r3, #0
 800a0c2:	bf86      	itte	hi
 800a0c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a0c8:	608b      	strhi	r3, [r1, #8]
 800a0ca:	9302      	strls	r3, [sp, #8]
 800a0cc:	680b      	ldr	r3, [r1, #0]
 800a0ce:	468b      	mov	fp, r1
 800a0d0:	2500      	movs	r5, #0
 800a0d2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a0d6:	f84b 3b1c 	str.w	r3, [fp], #28
 800a0da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a0de:	4680      	mov	r8, r0
 800a0e0:	460c      	mov	r4, r1
 800a0e2:	465e      	mov	r6, fp
 800a0e4:	46aa      	mov	sl, r5
 800a0e6:	46a9      	mov	r9, r5
 800a0e8:	9501      	str	r5, [sp, #4]
 800a0ea:	68a2      	ldr	r2, [r4, #8]
 800a0ec:	b152      	cbz	r2, 800a104 <_scanf_float+0x60>
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	2b4e      	cmp	r3, #78	; 0x4e
 800a0f4:	d864      	bhi.n	800a1c0 <_scanf_float+0x11c>
 800a0f6:	2b40      	cmp	r3, #64	; 0x40
 800a0f8:	d83c      	bhi.n	800a174 <_scanf_float+0xd0>
 800a0fa:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a0fe:	b2c8      	uxtb	r0, r1
 800a100:	280e      	cmp	r0, #14
 800a102:	d93a      	bls.n	800a17a <_scanf_float+0xd6>
 800a104:	f1b9 0f00 	cmp.w	r9, #0
 800a108:	d003      	beq.n	800a112 <_scanf_float+0x6e>
 800a10a:	6823      	ldr	r3, [r4, #0]
 800a10c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a116:	f1ba 0f01 	cmp.w	sl, #1
 800a11a:	f200 8113 	bhi.w	800a344 <_scanf_float+0x2a0>
 800a11e:	455e      	cmp	r6, fp
 800a120:	f200 8105 	bhi.w	800a32e <_scanf_float+0x28a>
 800a124:	2501      	movs	r5, #1
 800a126:	4628      	mov	r0, r5
 800a128:	b007      	add	sp, #28
 800a12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a12e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a132:	2a0d      	cmp	r2, #13
 800a134:	d8e6      	bhi.n	800a104 <_scanf_float+0x60>
 800a136:	a101      	add	r1, pc, #4	; (adr r1, 800a13c <_scanf_float+0x98>)
 800a138:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a13c:	0800a27b 	.word	0x0800a27b
 800a140:	0800a105 	.word	0x0800a105
 800a144:	0800a105 	.word	0x0800a105
 800a148:	0800a105 	.word	0x0800a105
 800a14c:	0800a2db 	.word	0x0800a2db
 800a150:	0800a2b3 	.word	0x0800a2b3
 800a154:	0800a105 	.word	0x0800a105
 800a158:	0800a105 	.word	0x0800a105
 800a15c:	0800a289 	.word	0x0800a289
 800a160:	0800a105 	.word	0x0800a105
 800a164:	0800a105 	.word	0x0800a105
 800a168:	0800a105 	.word	0x0800a105
 800a16c:	0800a105 	.word	0x0800a105
 800a170:	0800a241 	.word	0x0800a241
 800a174:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a178:	e7db      	b.n	800a132 <_scanf_float+0x8e>
 800a17a:	290e      	cmp	r1, #14
 800a17c:	d8c2      	bhi.n	800a104 <_scanf_float+0x60>
 800a17e:	a001      	add	r0, pc, #4	; (adr r0, 800a184 <_scanf_float+0xe0>)
 800a180:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a184:	0800a233 	.word	0x0800a233
 800a188:	0800a105 	.word	0x0800a105
 800a18c:	0800a233 	.word	0x0800a233
 800a190:	0800a2c7 	.word	0x0800a2c7
 800a194:	0800a105 	.word	0x0800a105
 800a198:	0800a1e1 	.word	0x0800a1e1
 800a19c:	0800a21d 	.word	0x0800a21d
 800a1a0:	0800a21d 	.word	0x0800a21d
 800a1a4:	0800a21d 	.word	0x0800a21d
 800a1a8:	0800a21d 	.word	0x0800a21d
 800a1ac:	0800a21d 	.word	0x0800a21d
 800a1b0:	0800a21d 	.word	0x0800a21d
 800a1b4:	0800a21d 	.word	0x0800a21d
 800a1b8:	0800a21d 	.word	0x0800a21d
 800a1bc:	0800a21d 	.word	0x0800a21d
 800a1c0:	2b6e      	cmp	r3, #110	; 0x6e
 800a1c2:	d809      	bhi.n	800a1d8 <_scanf_float+0x134>
 800a1c4:	2b60      	cmp	r3, #96	; 0x60
 800a1c6:	d8b2      	bhi.n	800a12e <_scanf_float+0x8a>
 800a1c8:	2b54      	cmp	r3, #84	; 0x54
 800a1ca:	d077      	beq.n	800a2bc <_scanf_float+0x218>
 800a1cc:	2b59      	cmp	r3, #89	; 0x59
 800a1ce:	d199      	bne.n	800a104 <_scanf_float+0x60>
 800a1d0:	2d07      	cmp	r5, #7
 800a1d2:	d197      	bne.n	800a104 <_scanf_float+0x60>
 800a1d4:	2508      	movs	r5, #8
 800a1d6:	e029      	b.n	800a22c <_scanf_float+0x188>
 800a1d8:	2b74      	cmp	r3, #116	; 0x74
 800a1da:	d06f      	beq.n	800a2bc <_scanf_float+0x218>
 800a1dc:	2b79      	cmp	r3, #121	; 0x79
 800a1de:	e7f6      	b.n	800a1ce <_scanf_float+0x12a>
 800a1e0:	6821      	ldr	r1, [r4, #0]
 800a1e2:	05c8      	lsls	r0, r1, #23
 800a1e4:	d51a      	bpl.n	800a21c <_scanf_float+0x178>
 800a1e6:	9b02      	ldr	r3, [sp, #8]
 800a1e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a1ec:	6021      	str	r1, [r4, #0]
 800a1ee:	f109 0901 	add.w	r9, r9, #1
 800a1f2:	b11b      	cbz	r3, 800a1fc <_scanf_float+0x158>
 800a1f4:	3b01      	subs	r3, #1
 800a1f6:	3201      	adds	r2, #1
 800a1f8:	9302      	str	r3, [sp, #8]
 800a1fa:	60a2      	str	r2, [r4, #8]
 800a1fc:	68a3      	ldr	r3, [r4, #8]
 800a1fe:	3b01      	subs	r3, #1
 800a200:	60a3      	str	r3, [r4, #8]
 800a202:	6923      	ldr	r3, [r4, #16]
 800a204:	3301      	adds	r3, #1
 800a206:	6123      	str	r3, [r4, #16]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3b01      	subs	r3, #1
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	607b      	str	r3, [r7, #4]
 800a210:	f340 8084 	ble.w	800a31c <_scanf_float+0x278>
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	3301      	adds	r3, #1
 800a218:	603b      	str	r3, [r7, #0]
 800a21a:	e766      	b.n	800a0ea <_scanf_float+0x46>
 800a21c:	eb1a 0f05 	cmn.w	sl, r5
 800a220:	f47f af70 	bne.w	800a104 <_scanf_float+0x60>
 800a224:	6822      	ldr	r2, [r4, #0]
 800a226:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a22a:	6022      	str	r2, [r4, #0]
 800a22c:	f806 3b01 	strb.w	r3, [r6], #1
 800a230:	e7e4      	b.n	800a1fc <_scanf_float+0x158>
 800a232:	6822      	ldr	r2, [r4, #0]
 800a234:	0610      	lsls	r0, r2, #24
 800a236:	f57f af65 	bpl.w	800a104 <_scanf_float+0x60>
 800a23a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a23e:	e7f4      	b.n	800a22a <_scanf_float+0x186>
 800a240:	f1ba 0f00 	cmp.w	sl, #0
 800a244:	d10e      	bne.n	800a264 <_scanf_float+0x1c0>
 800a246:	f1b9 0f00 	cmp.w	r9, #0
 800a24a:	d10e      	bne.n	800a26a <_scanf_float+0x1c6>
 800a24c:	6822      	ldr	r2, [r4, #0]
 800a24e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a252:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a256:	d108      	bne.n	800a26a <_scanf_float+0x1c6>
 800a258:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a25c:	6022      	str	r2, [r4, #0]
 800a25e:	f04f 0a01 	mov.w	sl, #1
 800a262:	e7e3      	b.n	800a22c <_scanf_float+0x188>
 800a264:	f1ba 0f02 	cmp.w	sl, #2
 800a268:	d055      	beq.n	800a316 <_scanf_float+0x272>
 800a26a:	2d01      	cmp	r5, #1
 800a26c:	d002      	beq.n	800a274 <_scanf_float+0x1d0>
 800a26e:	2d04      	cmp	r5, #4
 800a270:	f47f af48 	bne.w	800a104 <_scanf_float+0x60>
 800a274:	3501      	adds	r5, #1
 800a276:	b2ed      	uxtb	r5, r5
 800a278:	e7d8      	b.n	800a22c <_scanf_float+0x188>
 800a27a:	f1ba 0f01 	cmp.w	sl, #1
 800a27e:	f47f af41 	bne.w	800a104 <_scanf_float+0x60>
 800a282:	f04f 0a02 	mov.w	sl, #2
 800a286:	e7d1      	b.n	800a22c <_scanf_float+0x188>
 800a288:	b97d      	cbnz	r5, 800a2aa <_scanf_float+0x206>
 800a28a:	f1b9 0f00 	cmp.w	r9, #0
 800a28e:	f47f af3c 	bne.w	800a10a <_scanf_float+0x66>
 800a292:	6822      	ldr	r2, [r4, #0]
 800a294:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a298:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a29c:	f47f af39 	bne.w	800a112 <_scanf_float+0x6e>
 800a2a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2a4:	6022      	str	r2, [r4, #0]
 800a2a6:	2501      	movs	r5, #1
 800a2a8:	e7c0      	b.n	800a22c <_scanf_float+0x188>
 800a2aa:	2d03      	cmp	r5, #3
 800a2ac:	d0e2      	beq.n	800a274 <_scanf_float+0x1d0>
 800a2ae:	2d05      	cmp	r5, #5
 800a2b0:	e7de      	b.n	800a270 <_scanf_float+0x1cc>
 800a2b2:	2d02      	cmp	r5, #2
 800a2b4:	f47f af26 	bne.w	800a104 <_scanf_float+0x60>
 800a2b8:	2503      	movs	r5, #3
 800a2ba:	e7b7      	b.n	800a22c <_scanf_float+0x188>
 800a2bc:	2d06      	cmp	r5, #6
 800a2be:	f47f af21 	bne.w	800a104 <_scanf_float+0x60>
 800a2c2:	2507      	movs	r5, #7
 800a2c4:	e7b2      	b.n	800a22c <_scanf_float+0x188>
 800a2c6:	6822      	ldr	r2, [r4, #0]
 800a2c8:	0591      	lsls	r1, r2, #22
 800a2ca:	f57f af1b 	bpl.w	800a104 <_scanf_float+0x60>
 800a2ce:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a2d2:	6022      	str	r2, [r4, #0]
 800a2d4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2d8:	e7a8      	b.n	800a22c <_scanf_float+0x188>
 800a2da:	6822      	ldr	r2, [r4, #0]
 800a2dc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a2e0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a2e4:	d006      	beq.n	800a2f4 <_scanf_float+0x250>
 800a2e6:	0550      	lsls	r0, r2, #21
 800a2e8:	f57f af0c 	bpl.w	800a104 <_scanf_float+0x60>
 800a2ec:	f1b9 0f00 	cmp.w	r9, #0
 800a2f0:	f43f af0f 	beq.w	800a112 <_scanf_float+0x6e>
 800a2f4:	0591      	lsls	r1, r2, #22
 800a2f6:	bf58      	it	pl
 800a2f8:	9901      	ldrpl	r1, [sp, #4]
 800a2fa:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a2fe:	bf58      	it	pl
 800a300:	eba9 0101 	subpl.w	r1, r9, r1
 800a304:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a308:	bf58      	it	pl
 800a30a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a30e:	6022      	str	r2, [r4, #0]
 800a310:	f04f 0900 	mov.w	r9, #0
 800a314:	e78a      	b.n	800a22c <_scanf_float+0x188>
 800a316:	f04f 0a03 	mov.w	sl, #3
 800a31a:	e787      	b.n	800a22c <_scanf_float+0x188>
 800a31c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a320:	4639      	mov	r1, r7
 800a322:	4640      	mov	r0, r8
 800a324:	4798      	blx	r3
 800a326:	2800      	cmp	r0, #0
 800a328:	f43f aedf 	beq.w	800a0ea <_scanf_float+0x46>
 800a32c:	e6ea      	b.n	800a104 <_scanf_float+0x60>
 800a32e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a332:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a336:	463a      	mov	r2, r7
 800a338:	4640      	mov	r0, r8
 800a33a:	4798      	blx	r3
 800a33c:	6923      	ldr	r3, [r4, #16]
 800a33e:	3b01      	subs	r3, #1
 800a340:	6123      	str	r3, [r4, #16]
 800a342:	e6ec      	b.n	800a11e <_scanf_float+0x7a>
 800a344:	1e6b      	subs	r3, r5, #1
 800a346:	2b06      	cmp	r3, #6
 800a348:	d825      	bhi.n	800a396 <_scanf_float+0x2f2>
 800a34a:	2d02      	cmp	r5, #2
 800a34c:	d836      	bhi.n	800a3bc <_scanf_float+0x318>
 800a34e:	455e      	cmp	r6, fp
 800a350:	f67f aee8 	bls.w	800a124 <_scanf_float+0x80>
 800a354:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a358:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a35c:	463a      	mov	r2, r7
 800a35e:	4640      	mov	r0, r8
 800a360:	4798      	blx	r3
 800a362:	6923      	ldr	r3, [r4, #16]
 800a364:	3b01      	subs	r3, #1
 800a366:	6123      	str	r3, [r4, #16]
 800a368:	e7f1      	b.n	800a34e <_scanf_float+0x2aa>
 800a36a:	9802      	ldr	r0, [sp, #8]
 800a36c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a370:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a374:	9002      	str	r0, [sp, #8]
 800a376:	463a      	mov	r2, r7
 800a378:	4640      	mov	r0, r8
 800a37a:	4798      	blx	r3
 800a37c:	6923      	ldr	r3, [r4, #16]
 800a37e:	3b01      	subs	r3, #1
 800a380:	6123      	str	r3, [r4, #16]
 800a382:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a386:	fa5f fa8a 	uxtb.w	sl, sl
 800a38a:	f1ba 0f02 	cmp.w	sl, #2
 800a38e:	d1ec      	bne.n	800a36a <_scanf_float+0x2c6>
 800a390:	3d03      	subs	r5, #3
 800a392:	b2ed      	uxtb	r5, r5
 800a394:	1b76      	subs	r6, r6, r5
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	05da      	lsls	r2, r3, #23
 800a39a:	d52f      	bpl.n	800a3fc <_scanf_float+0x358>
 800a39c:	055b      	lsls	r3, r3, #21
 800a39e:	d510      	bpl.n	800a3c2 <_scanf_float+0x31e>
 800a3a0:	455e      	cmp	r6, fp
 800a3a2:	f67f aebf 	bls.w	800a124 <_scanf_float+0x80>
 800a3a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a3ae:	463a      	mov	r2, r7
 800a3b0:	4640      	mov	r0, r8
 800a3b2:	4798      	blx	r3
 800a3b4:	6923      	ldr	r3, [r4, #16]
 800a3b6:	3b01      	subs	r3, #1
 800a3b8:	6123      	str	r3, [r4, #16]
 800a3ba:	e7f1      	b.n	800a3a0 <_scanf_float+0x2fc>
 800a3bc:	46aa      	mov	sl, r5
 800a3be:	9602      	str	r6, [sp, #8]
 800a3c0:	e7df      	b.n	800a382 <_scanf_float+0x2de>
 800a3c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a3c6:	6923      	ldr	r3, [r4, #16]
 800a3c8:	2965      	cmp	r1, #101	; 0x65
 800a3ca:	f103 33ff 	add.w	r3, r3, #4294967295
 800a3ce:	f106 35ff 	add.w	r5, r6, #4294967295
 800a3d2:	6123      	str	r3, [r4, #16]
 800a3d4:	d00c      	beq.n	800a3f0 <_scanf_float+0x34c>
 800a3d6:	2945      	cmp	r1, #69	; 0x45
 800a3d8:	d00a      	beq.n	800a3f0 <_scanf_float+0x34c>
 800a3da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3de:	463a      	mov	r2, r7
 800a3e0:	4640      	mov	r0, r8
 800a3e2:	4798      	blx	r3
 800a3e4:	6923      	ldr	r3, [r4, #16]
 800a3e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a3ea:	3b01      	subs	r3, #1
 800a3ec:	1eb5      	subs	r5, r6, #2
 800a3ee:	6123      	str	r3, [r4, #16]
 800a3f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a3f4:	463a      	mov	r2, r7
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	4798      	blx	r3
 800a3fa:	462e      	mov	r6, r5
 800a3fc:	6825      	ldr	r5, [r4, #0]
 800a3fe:	f015 0510 	ands.w	r5, r5, #16
 800a402:	d158      	bne.n	800a4b6 <_scanf_float+0x412>
 800a404:	7035      	strb	r5, [r6, #0]
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a40c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a410:	d11c      	bne.n	800a44c <_scanf_float+0x3a8>
 800a412:	9b01      	ldr	r3, [sp, #4]
 800a414:	454b      	cmp	r3, r9
 800a416:	eba3 0209 	sub.w	r2, r3, r9
 800a41a:	d124      	bne.n	800a466 <_scanf_float+0x3c2>
 800a41c:	2200      	movs	r2, #0
 800a41e:	4659      	mov	r1, fp
 800a420:	4640      	mov	r0, r8
 800a422:	f000 fecf 	bl	800b1c4 <_strtod_r>
 800a426:	9b03      	ldr	r3, [sp, #12]
 800a428:	6821      	ldr	r1, [r4, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f011 0f02 	tst.w	r1, #2
 800a430:	ec57 6b10 	vmov	r6, r7, d0
 800a434:	f103 0204 	add.w	r2, r3, #4
 800a438:	d020      	beq.n	800a47c <_scanf_float+0x3d8>
 800a43a:	9903      	ldr	r1, [sp, #12]
 800a43c:	600a      	str	r2, [r1, #0]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	e9c3 6700 	strd	r6, r7, [r3]
 800a444:	68e3      	ldr	r3, [r4, #12]
 800a446:	3301      	adds	r3, #1
 800a448:	60e3      	str	r3, [r4, #12]
 800a44a:	e66c      	b.n	800a126 <_scanf_float+0x82>
 800a44c:	9b04      	ldr	r3, [sp, #16]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0e4      	beq.n	800a41c <_scanf_float+0x378>
 800a452:	9905      	ldr	r1, [sp, #20]
 800a454:	230a      	movs	r3, #10
 800a456:	462a      	mov	r2, r5
 800a458:	3101      	adds	r1, #1
 800a45a:	4640      	mov	r0, r8
 800a45c:	f000 ff3c 	bl	800b2d8 <_strtol_r>
 800a460:	9b04      	ldr	r3, [sp, #16]
 800a462:	9e05      	ldr	r6, [sp, #20]
 800a464:	1ac2      	subs	r2, r0, r3
 800a466:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a46a:	429e      	cmp	r6, r3
 800a46c:	bf28      	it	cs
 800a46e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a472:	4912      	ldr	r1, [pc, #72]	; (800a4bc <_scanf_float+0x418>)
 800a474:	4630      	mov	r0, r6
 800a476:	f000 f85f 	bl	800a538 <siprintf>
 800a47a:	e7cf      	b.n	800a41c <_scanf_float+0x378>
 800a47c:	f011 0f04 	tst.w	r1, #4
 800a480:	9903      	ldr	r1, [sp, #12]
 800a482:	600a      	str	r2, [r1, #0]
 800a484:	d1db      	bne.n	800a43e <_scanf_float+0x39a>
 800a486:	f8d3 8000 	ldr.w	r8, [r3]
 800a48a:	ee10 2a10 	vmov	r2, s0
 800a48e:	ee10 0a10 	vmov	r0, s0
 800a492:	463b      	mov	r3, r7
 800a494:	4639      	mov	r1, r7
 800a496:	f7f6 fba9 	bl	8000bec <__aeabi_dcmpun>
 800a49a:	b128      	cbz	r0, 800a4a8 <_scanf_float+0x404>
 800a49c:	4808      	ldr	r0, [pc, #32]	; (800a4c0 <_scanf_float+0x41c>)
 800a49e:	f000 f811 	bl	800a4c4 <nanf>
 800a4a2:	ed88 0a00 	vstr	s0, [r8]
 800a4a6:	e7cd      	b.n	800a444 <_scanf_float+0x3a0>
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	4639      	mov	r1, r7
 800a4ac:	f7f6 fbfc 	bl	8000ca8 <__aeabi_d2f>
 800a4b0:	f8c8 0000 	str.w	r0, [r8]
 800a4b4:	e7c6      	b.n	800a444 <_scanf_float+0x3a0>
 800a4b6:	2500      	movs	r5, #0
 800a4b8:	e635      	b.n	800a126 <_scanf_float+0x82>
 800a4ba:	bf00      	nop
 800a4bc:	08022e78 	.word	0x08022e78
 800a4c0:	08023290 	.word	0x08023290

0800a4c4 <nanf>:
 800a4c4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a4cc <nanf+0x8>
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	7fc00000 	.word	0x7fc00000

0800a4d0 <sniprintf>:
 800a4d0:	b40c      	push	{r2, r3}
 800a4d2:	b530      	push	{r4, r5, lr}
 800a4d4:	4b17      	ldr	r3, [pc, #92]	; (800a534 <sniprintf+0x64>)
 800a4d6:	1e0c      	subs	r4, r1, #0
 800a4d8:	681d      	ldr	r5, [r3, #0]
 800a4da:	b09d      	sub	sp, #116	; 0x74
 800a4dc:	da08      	bge.n	800a4f0 <sniprintf+0x20>
 800a4de:	238b      	movs	r3, #139	; 0x8b
 800a4e0:	602b      	str	r3, [r5, #0]
 800a4e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e6:	b01d      	add	sp, #116	; 0x74
 800a4e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4ec:	b002      	add	sp, #8
 800a4ee:	4770      	bx	lr
 800a4f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a4f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a4f8:	bf14      	ite	ne
 800a4fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a4fe:	4623      	moveq	r3, r4
 800a500:	9304      	str	r3, [sp, #16]
 800a502:	9307      	str	r3, [sp, #28]
 800a504:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a508:	9002      	str	r0, [sp, #8]
 800a50a:	9006      	str	r0, [sp, #24]
 800a50c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a510:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a512:	ab21      	add	r3, sp, #132	; 0x84
 800a514:	a902      	add	r1, sp, #8
 800a516:	4628      	mov	r0, r5
 800a518:	9301      	str	r3, [sp, #4]
 800a51a:	f002 feb7 	bl	800d28c <_svfiprintf_r>
 800a51e:	1c43      	adds	r3, r0, #1
 800a520:	bfbc      	itt	lt
 800a522:	238b      	movlt	r3, #139	; 0x8b
 800a524:	602b      	strlt	r3, [r5, #0]
 800a526:	2c00      	cmp	r4, #0
 800a528:	d0dd      	beq.n	800a4e6 <sniprintf+0x16>
 800a52a:	9b02      	ldr	r3, [sp, #8]
 800a52c:	2200      	movs	r2, #0
 800a52e:	701a      	strb	r2, [r3, #0]
 800a530:	e7d9      	b.n	800a4e6 <sniprintf+0x16>
 800a532:	bf00      	nop
 800a534:	20000080 	.word	0x20000080

0800a538 <siprintf>:
 800a538:	b40e      	push	{r1, r2, r3}
 800a53a:	b500      	push	{lr}
 800a53c:	b09c      	sub	sp, #112	; 0x70
 800a53e:	ab1d      	add	r3, sp, #116	; 0x74
 800a540:	9002      	str	r0, [sp, #8]
 800a542:	9006      	str	r0, [sp, #24]
 800a544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a548:	4809      	ldr	r0, [pc, #36]	; (800a570 <siprintf+0x38>)
 800a54a:	9107      	str	r1, [sp, #28]
 800a54c:	9104      	str	r1, [sp, #16]
 800a54e:	4909      	ldr	r1, [pc, #36]	; (800a574 <siprintf+0x3c>)
 800a550:	f853 2b04 	ldr.w	r2, [r3], #4
 800a554:	9105      	str	r1, [sp, #20]
 800a556:	6800      	ldr	r0, [r0, #0]
 800a558:	9301      	str	r3, [sp, #4]
 800a55a:	a902      	add	r1, sp, #8
 800a55c:	f002 fe96 	bl	800d28c <_svfiprintf_r>
 800a560:	9b02      	ldr	r3, [sp, #8]
 800a562:	2200      	movs	r2, #0
 800a564:	701a      	strb	r2, [r3, #0]
 800a566:	b01c      	add	sp, #112	; 0x70
 800a568:	f85d eb04 	ldr.w	lr, [sp], #4
 800a56c:	b003      	add	sp, #12
 800a56e:	4770      	bx	lr
 800a570:	20000080 	.word	0x20000080
 800a574:	ffff0208 	.word	0xffff0208

0800a578 <sulp>:
 800a578:	b570      	push	{r4, r5, r6, lr}
 800a57a:	4604      	mov	r4, r0
 800a57c:	460d      	mov	r5, r1
 800a57e:	ec45 4b10 	vmov	d0, r4, r5
 800a582:	4616      	mov	r6, r2
 800a584:	f002 fc1e 	bl	800cdc4 <__ulp>
 800a588:	ec51 0b10 	vmov	r0, r1, d0
 800a58c:	b17e      	cbz	r6, 800a5ae <sulp+0x36>
 800a58e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a592:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a596:	2b00      	cmp	r3, #0
 800a598:	dd09      	ble.n	800a5ae <sulp+0x36>
 800a59a:	051b      	lsls	r3, r3, #20
 800a59c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a5a0:	2400      	movs	r4, #0
 800a5a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a5a6:	4622      	mov	r2, r4
 800a5a8:	462b      	mov	r3, r5
 800a5aa:	f7f6 f885 	bl	80006b8 <__aeabi_dmul>
 800a5ae:	bd70      	pop	{r4, r5, r6, pc}

0800a5b0 <_strtod_l>:
 800a5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b4:	b0a3      	sub	sp, #140	; 0x8c
 800a5b6:	461f      	mov	r7, r3
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	931e      	str	r3, [sp, #120]	; 0x78
 800a5bc:	4ba4      	ldr	r3, [pc, #656]	; (800a850 <_strtod_l+0x2a0>)
 800a5be:	9219      	str	r2, [sp, #100]	; 0x64
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	9307      	str	r3, [sp, #28]
 800a5c4:	4604      	mov	r4, r0
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	4688      	mov	r8, r1
 800a5ca:	f7f5 fe61 	bl	8000290 <strlen>
 800a5ce:	f04f 0a00 	mov.w	sl, #0
 800a5d2:	4605      	mov	r5, r0
 800a5d4:	f04f 0b00 	mov.w	fp, #0
 800a5d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a5dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a5de:	781a      	ldrb	r2, [r3, #0]
 800a5e0:	2a2b      	cmp	r2, #43	; 0x2b
 800a5e2:	d04c      	beq.n	800a67e <_strtod_l+0xce>
 800a5e4:	d839      	bhi.n	800a65a <_strtod_l+0xaa>
 800a5e6:	2a0d      	cmp	r2, #13
 800a5e8:	d832      	bhi.n	800a650 <_strtod_l+0xa0>
 800a5ea:	2a08      	cmp	r2, #8
 800a5ec:	d832      	bhi.n	800a654 <_strtod_l+0xa4>
 800a5ee:	2a00      	cmp	r2, #0
 800a5f0:	d03c      	beq.n	800a66c <_strtod_l+0xbc>
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	930e      	str	r3, [sp, #56]	; 0x38
 800a5f6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a5f8:	7833      	ldrb	r3, [r6, #0]
 800a5fa:	2b30      	cmp	r3, #48	; 0x30
 800a5fc:	f040 80b4 	bne.w	800a768 <_strtod_l+0x1b8>
 800a600:	7873      	ldrb	r3, [r6, #1]
 800a602:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a606:	2b58      	cmp	r3, #88	; 0x58
 800a608:	d16c      	bne.n	800a6e4 <_strtod_l+0x134>
 800a60a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	ab1e      	add	r3, sp, #120	; 0x78
 800a610:	9702      	str	r7, [sp, #8]
 800a612:	9300      	str	r3, [sp, #0]
 800a614:	4a8f      	ldr	r2, [pc, #572]	; (800a854 <_strtod_l+0x2a4>)
 800a616:	ab1f      	add	r3, sp, #124	; 0x7c
 800a618:	a91d      	add	r1, sp, #116	; 0x74
 800a61a:	4620      	mov	r0, r4
 800a61c:	f001 fd40 	bl	800c0a0 <__gethex>
 800a620:	f010 0707 	ands.w	r7, r0, #7
 800a624:	4605      	mov	r5, r0
 800a626:	d005      	beq.n	800a634 <_strtod_l+0x84>
 800a628:	2f06      	cmp	r7, #6
 800a62a:	d12a      	bne.n	800a682 <_strtod_l+0xd2>
 800a62c:	3601      	adds	r6, #1
 800a62e:	2300      	movs	r3, #0
 800a630:	961d      	str	r6, [sp, #116]	; 0x74
 800a632:	930e      	str	r3, [sp, #56]	; 0x38
 800a634:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a636:	2b00      	cmp	r3, #0
 800a638:	f040 8596 	bne.w	800b168 <_strtod_l+0xbb8>
 800a63c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a63e:	b1db      	cbz	r3, 800a678 <_strtod_l+0xc8>
 800a640:	4652      	mov	r2, sl
 800a642:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a646:	ec43 2b10 	vmov	d0, r2, r3
 800a64a:	b023      	add	sp, #140	; 0x8c
 800a64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a650:	2a20      	cmp	r2, #32
 800a652:	d1ce      	bne.n	800a5f2 <_strtod_l+0x42>
 800a654:	3301      	adds	r3, #1
 800a656:	931d      	str	r3, [sp, #116]	; 0x74
 800a658:	e7c0      	b.n	800a5dc <_strtod_l+0x2c>
 800a65a:	2a2d      	cmp	r2, #45	; 0x2d
 800a65c:	d1c9      	bne.n	800a5f2 <_strtod_l+0x42>
 800a65e:	2201      	movs	r2, #1
 800a660:	920e      	str	r2, [sp, #56]	; 0x38
 800a662:	1c5a      	adds	r2, r3, #1
 800a664:	921d      	str	r2, [sp, #116]	; 0x74
 800a666:	785b      	ldrb	r3, [r3, #1]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d1c4      	bne.n	800a5f6 <_strtod_l+0x46>
 800a66c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a66e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a672:	2b00      	cmp	r3, #0
 800a674:	f040 8576 	bne.w	800b164 <_strtod_l+0xbb4>
 800a678:	4652      	mov	r2, sl
 800a67a:	465b      	mov	r3, fp
 800a67c:	e7e3      	b.n	800a646 <_strtod_l+0x96>
 800a67e:	2200      	movs	r2, #0
 800a680:	e7ee      	b.n	800a660 <_strtod_l+0xb0>
 800a682:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a684:	b13a      	cbz	r2, 800a696 <_strtod_l+0xe6>
 800a686:	2135      	movs	r1, #53	; 0x35
 800a688:	a820      	add	r0, sp, #128	; 0x80
 800a68a:	f002 fca6 	bl	800cfda <__copybits>
 800a68e:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a690:	4620      	mov	r0, r4
 800a692:	f002 f86b 	bl	800c76c <_Bfree>
 800a696:	3f01      	subs	r7, #1
 800a698:	2f05      	cmp	r7, #5
 800a69a:	d807      	bhi.n	800a6ac <_strtod_l+0xfc>
 800a69c:	e8df f007 	tbb	[pc, r7]
 800a6a0:	1d180b0e 	.word	0x1d180b0e
 800a6a4:	030e      	.short	0x030e
 800a6a6:	f04f 0b00 	mov.w	fp, #0
 800a6aa:	46da      	mov	sl, fp
 800a6ac:	0728      	lsls	r0, r5, #28
 800a6ae:	d5c1      	bpl.n	800a634 <_strtod_l+0x84>
 800a6b0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a6b4:	e7be      	b.n	800a634 <_strtod_l+0x84>
 800a6b6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800a6ba:	e7f7      	b.n	800a6ac <_strtod_l+0xfc>
 800a6bc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800a6c0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a6c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a6c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a6ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a6ce:	e7ed      	b.n	800a6ac <_strtod_l+0xfc>
 800a6d0:	f8df b184 	ldr.w	fp, [pc, #388]	; 800a858 <_strtod_l+0x2a8>
 800a6d4:	f04f 0a00 	mov.w	sl, #0
 800a6d8:	e7e8      	b.n	800a6ac <_strtod_l+0xfc>
 800a6da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a6de:	f04f 3aff 	mov.w	sl, #4294967295
 800a6e2:	e7e3      	b.n	800a6ac <_strtod_l+0xfc>
 800a6e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6e6:	1c5a      	adds	r2, r3, #1
 800a6e8:	921d      	str	r2, [sp, #116]	; 0x74
 800a6ea:	785b      	ldrb	r3, [r3, #1]
 800a6ec:	2b30      	cmp	r3, #48	; 0x30
 800a6ee:	d0f9      	beq.n	800a6e4 <_strtod_l+0x134>
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d09f      	beq.n	800a634 <_strtod_l+0x84>
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	f04f 0900 	mov.w	r9, #0
 800a6fa:	9304      	str	r3, [sp, #16]
 800a6fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6fe:	930a      	str	r3, [sp, #40]	; 0x28
 800a700:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a704:	464f      	mov	r7, r9
 800a706:	220a      	movs	r2, #10
 800a708:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a70a:	7806      	ldrb	r6, [r0, #0]
 800a70c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a710:	b2d9      	uxtb	r1, r3
 800a712:	2909      	cmp	r1, #9
 800a714:	d92a      	bls.n	800a76c <_strtod_l+0x1bc>
 800a716:	9907      	ldr	r1, [sp, #28]
 800a718:	462a      	mov	r2, r5
 800a71a:	f002 fed1 	bl	800d4c0 <strncmp>
 800a71e:	b398      	cbz	r0, 800a788 <_strtod_l+0x1d8>
 800a720:	2000      	movs	r0, #0
 800a722:	4633      	mov	r3, r6
 800a724:	463d      	mov	r5, r7
 800a726:	9007      	str	r0, [sp, #28]
 800a728:	4602      	mov	r2, r0
 800a72a:	2b65      	cmp	r3, #101	; 0x65
 800a72c:	d001      	beq.n	800a732 <_strtod_l+0x182>
 800a72e:	2b45      	cmp	r3, #69	; 0x45
 800a730:	d118      	bne.n	800a764 <_strtod_l+0x1b4>
 800a732:	b91d      	cbnz	r5, 800a73c <_strtod_l+0x18c>
 800a734:	9b04      	ldr	r3, [sp, #16]
 800a736:	4303      	orrs	r3, r0
 800a738:	d098      	beq.n	800a66c <_strtod_l+0xbc>
 800a73a:	2500      	movs	r5, #0
 800a73c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800a740:	f108 0301 	add.w	r3, r8, #1
 800a744:	931d      	str	r3, [sp, #116]	; 0x74
 800a746:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a74a:	2b2b      	cmp	r3, #43	; 0x2b
 800a74c:	d075      	beq.n	800a83a <_strtod_l+0x28a>
 800a74e:	2b2d      	cmp	r3, #45	; 0x2d
 800a750:	d07b      	beq.n	800a84a <_strtod_l+0x29a>
 800a752:	f04f 0c00 	mov.w	ip, #0
 800a756:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a75a:	2909      	cmp	r1, #9
 800a75c:	f240 8082 	bls.w	800a864 <_strtod_l+0x2b4>
 800a760:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a764:	2600      	movs	r6, #0
 800a766:	e09d      	b.n	800a8a4 <_strtod_l+0x2f4>
 800a768:	2300      	movs	r3, #0
 800a76a:	e7c4      	b.n	800a6f6 <_strtod_l+0x146>
 800a76c:	2f08      	cmp	r7, #8
 800a76e:	bfd8      	it	le
 800a770:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a772:	f100 0001 	add.w	r0, r0, #1
 800a776:	bfda      	itte	le
 800a778:	fb02 3301 	mlale	r3, r2, r1, r3
 800a77c:	9309      	strle	r3, [sp, #36]	; 0x24
 800a77e:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a782:	3701      	adds	r7, #1
 800a784:	901d      	str	r0, [sp, #116]	; 0x74
 800a786:	e7bf      	b.n	800a708 <_strtod_l+0x158>
 800a788:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a78a:	195a      	adds	r2, r3, r5
 800a78c:	921d      	str	r2, [sp, #116]	; 0x74
 800a78e:	5d5b      	ldrb	r3, [r3, r5]
 800a790:	2f00      	cmp	r7, #0
 800a792:	d037      	beq.n	800a804 <_strtod_l+0x254>
 800a794:	9007      	str	r0, [sp, #28]
 800a796:	463d      	mov	r5, r7
 800a798:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a79c:	2a09      	cmp	r2, #9
 800a79e:	d912      	bls.n	800a7c6 <_strtod_l+0x216>
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	e7c2      	b.n	800a72a <_strtod_l+0x17a>
 800a7a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7a6:	1c5a      	adds	r2, r3, #1
 800a7a8:	921d      	str	r2, [sp, #116]	; 0x74
 800a7aa:	785b      	ldrb	r3, [r3, #1]
 800a7ac:	3001      	adds	r0, #1
 800a7ae:	2b30      	cmp	r3, #48	; 0x30
 800a7b0:	d0f8      	beq.n	800a7a4 <_strtod_l+0x1f4>
 800a7b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a7b6:	2a08      	cmp	r2, #8
 800a7b8:	f200 84db 	bhi.w	800b172 <_strtod_l+0xbc2>
 800a7bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a7be:	9007      	str	r0, [sp, #28]
 800a7c0:	2000      	movs	r0, #0
 800a7c2:	920a      	str	r2, [sp, #40]	; 0x28
 800a7c4:	4605      	mov	r5, r0
 800a7c6:	3b30      	subs	r3, #48	; 0x30
 800a7c8:	f100 0201 	add.w	r2, r0, #1
 800a7cc:	d014      	beq.n	800a7f8 <_strtod_l+0x248>
 800a7ce:	9907      	ldr	r1, [sp, #28]
 800a7d0:	4411      	add	r1, r2
 800a7d2:	9107      	str	r1, [sp, #28]
 800a7d4:	462a      	mov	r2, r5
 800a7d6:	eb00 0e05 	add.w	lr, r0, r5
 800a7da:	210a      	movs	r1, #10
 800a7dc:	4572      	cmp	r2, lr
 800a7de:	d113      	bne.n	800a808 <_strtod_l+0x258>
 800a7e0:	182a      	adds	r2, r5, r0
 800a7e2:	2a08      	cmp	r2, #8
 800a7e4:	f105 0501 	add.w	r5, r5, #1
 800a7e8:	4405      	add	r5, r0
 800a7ea:	dc1c      	bgt.n	800a826 <_strtod_l+0x276>
 800a7ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7ee:	220a      	movs	r2, #10
 800a7f0:	fb02 3301 	mla	r3, r2, r1, r3
 800a7f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7fa:	1c59      	adds	r1, r3, #1
 800a7fc:	911d      	str	r1, [sp, #116]	; 0x74
 800a7fe:	785b      	ldrb	r3, [r3, #1]
 800a800:	4610      	mov	r0, r2
 800a802:	e7c9      	b.n	800a798 <_strtod_l+0x1e8>
 800a804:	4638      	mov	r0, r7
 800a806:	e7d2      	b.n	800a7ae <_strtod_l+0x1fe>
 800a808:	2a08      	cmp	r2, #8
 800a80a:	dc04      	bgt.n	800a816 <_strtod_l+0x266>
 800a80c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a80e:	434e      	muls	r6, r1
 800a810:	9609      	str	r6, [sp, #36]	; 0x24
 800a812:	3201      	adds	r2, #1
 800a814:	e7e2      	b.n	800a7dc <_strtod_l+0x22c>
 800a816:	f102 0c01 	add.w	ip, r2, #1
 800a81a:	f1bc 0f10 	cmp.w	ip, #16
 800a81e:	bfd8      	it	le
 800a820:	fb01 f909 	mulle.w	r9, r1, r9
 800a824:	e7f5      	b.n	800a812 <_strtod_l+0x262>
 800a826:	2d10      	cmp	r5, #16
 800a828:	bfdc      	itt	le
 800a82a:	220a      	movle	r2, #10
 800a82c:	fb02 3909 	mlale	r9, r2, r9, r3
 800a830:	e7e1      	b.n	800a7f6 <_strtod_l+0x246>
 800a832:	2300      	movs	r3, #0
 800a834:	9307      	str	r3, [sp, #28]
 800a836:	2201      	movs	r2, #1
 800a838:	e77c      	b.n	800a734 <_strtod_l+0x184>
 800a83a:	f04f 0c00 	mov.w	ip, #0
 800a83e:	f108 0302 	add.w	r3, r8, #2
 800a842:	931d      	str	r3, [sp, #116]	; 0x74
 800a844:	f898 3002 	ldrb.w	r3, [r8, #2]
 800a848:	e785      	b.n	800a756 <_strtod_l+0x1a6>
 800a84a:	f04f 0c01 	mov.w	ip, #1
 800a84e:	e7f6      	b.n	800a83e <_strtod_l+0x28e>
 800a850:	080230d0 	.word	0x080230d0
 800a854:	08022e80 	.word	0x08022e80
 800a858:	7ff00000 	.word	0x7ff00000
 800a85c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a85e:	1c59      	adds	r1, r3, #1
 800a860:	911d      	str	r1, [sp, #116]	; 0x74
 800a862:	785b      	ldrb	r3, [r3, #1]
 800a864:	2b30      	cmp	r3, #48	; 0x30
 800a866:	d0f9      	beq.n	800a85c <_strtod_l+0x2ac>
 800a868:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a86c:	2908      	cmp	r1, #8
 800a86e:	f63f af79 	bhi.w	800a764 <_strtod_l+0x1b4>
 800a872:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a876:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a878:	9308      	str	r3, [sp, #32]
 800a87a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a87c:	1c59      	adds	r1, r3, #1
 800a87e:	911d      	str	r1, [sp, #116]	; 0x74
 800a880:	785b      	ldrb	r3, [r3, #1]
 800a882:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a886:	2e09      	cmp	r6, #9
 800a888:	d937      	bls.n	800a8fa <_strtod_l+0x34a>
 800a88a:	9e08      	ldr	r6, [sp, #32]
 800a88c:	1b89      	subs	r1, r1, r6
 800a88e:	2908      	cmp	r1, #8
 800a890:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a894:	dc02      	bgt.n	800a89c <_strtod_l+0x2ec>
 800a896:	4576      	cmp	r6, lr
 800a898:	bfa8      	it	ge
 800a89a:	4676      	movge	r6, lr
 800a89c:	f1bc 0f00 	cmp.w	ip, #0
 800a8a0:	d000      	beq.n	800a8a4 <_strtod_l+0x2f4>
 800a8a2:	4276      	negs	r6, r6
 800a8a4:	2d00      	cmp	r5, #0
 800a8a6:	d14f      	bne.n	800a948 <_strtod_l+0x398>
 800a8a8:	9904      	ldr	r1, [sp, #16]
 800a8aa:	4301      	orrs	r1, r0
 800a8ac:	f47f aec2 	bne.w	800a634 <_strtod_l+0x84>
 800a8b0:	2a00      	cmp	r2, #0
 800a8b2:	f47f aedb 	bne.w	800a66c <_strtod_l+0xbc>
 800a8b6:	2b69      	cmp	r3, #105	; 0x69
 800a8b8:	d027      	beq.n	800a90a <_strtod_l+0x35a>
 800a8ba:	dc24      	bgt.n	800a906 <_strtod_l+0x356>
 800a8bc:	2b49      	cmp	r3, #73	; 0x49
 800a8be:	d024      	beq.n	800a90a <_strtod_l+0x35a>
 800a8c0:	2b4e      	cmp	r3, #78	; 0x4e
 800a8c2:	f47f aed3 	bne.w	800a66c <_strtod_l+0xbc>
 800a8c6:	499e      	ldr	r1, [pc, #632]	; (800ab40 <_strtod_l+0x590>)
 800a8c8:	a81d      	add	r0, sp, #116	; 0x74
 800a8ca:	f001 fe41 	bl	800c550 <__match>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	f43f aecc 	beq.w	800a66c <_strtod_l+0xbc>
 800a8d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8d6:	781b      	ldrb	r3, [r3, #0]
 800a8d8:	2b28      	cmp	r3, #40	; 0x28
 800a8da:	d12d      	bne.n	800a938 <_strtod_l+0x388>
 800a8dc:	4999      	ldr	r1, [pc, #612]	; (800ab44 <_strtod_l+0x594>)
 800a8de:	aa20      	add	r2, sp, #128	; 0x80
 800a8e0:	a81d      	add	r0, sp, #116	; 0x74
 800a8e2:	f001 fe49 	bl	800c578 <__hexnan>
 800a8e6:	2805      	cmp	r0, #5
 800a8e8:	d126      	bne.n	800a938 <_strtod_l+0x388>
 800a8ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a8ec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a8f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a8f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a8f8:	e69c      	b.n	800a634 <_strtod_l+0x84>
 800a8fa:	210a      	movs	r1, #10
 800a8fc:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a900:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a904:	e7b9      	b.n	800a87a <_strtod_l+0x2ca>
 800a906:	2b6e      	cmp	r3, #110	; 0x6e
 800a908:	e7db      	b.n	800a8c2 <_strtod_l+0x312>
 800a90a:	498f      	ldr	r1, [pc, #572]	; (800ab48 <_strtod_l+0x598>)
 800a90c:	a81d      	add	r0, sp, #116	; 0x74
 800a90e:	f001 fe1f 	bl	800c550 <__match>
 800a912:	2800      	cmp	r0, #0
 800a914:	f43f aeaa 	beq.w	800a66c <_strtod_l+0xbc>
 800a918:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a91a:	498c      	ldr	r1, [pc, #560]	; (800ab4c <_strtod_l+0x59c>)
 800a91c:	3b01      	subs	r3, #1
 800a91e:	a81d      	add	r0, sp, #116	; 0x74
 800a920:	931d      	str	r3, [sp, #116]	; 0x74
 800a922:	f001 fe15 	bl	800c550 <__match>
 800a926:	b910      	cbnz	r0, 800a92e <_strtod_l+0x37e>
 800a928:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a92a:	3301      	adds	r3, #1
 800a92c:	931d      	str	r3, [sp, #116]	; 0x74
 800a92e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800ab5c <_strtod_l+0x5ac>
 800a932:	f04f 0a00 	mov.w	sl, #0
 800a936:	e67d      	b.n	800a634 <_strtod_l+0x84>
 800a938:	4885      	ldr	r0, [pc, #532]	; (800ab50 <_strtod_l+0x5a0>)
 800a93a:	f002 fda9 	bl	800d490 <nan>
 800a93e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a942:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a946:	e675      	b.n	800a634 <_strtod_l+0x84>
 800a948:	9b07      	ldr	r3, [sp, #28]
 800a94a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a94c:	1af3      	subs	r3, r6, r3
 800a94e:	2f00      	cmp	r7, #0
 800a950:	bf08      	it	eq
 800a952:	462f      	moveq	r7, r5
 800a954:	2d10      	cmp	r5, #16
 800a956:	9308      	str	r3, [sp, #32]
 800a958:	46a8      	mov	r8, r5
 800a95a:	bfa8      	it	ge
 800a95c:	f04f 0810 	movge.w	r8, #16
 800a960:	f7f5 fe30 	bl	80005c4 <__aeabi_ui2d>
 800a964:	2d09      	cmp	r5, #9
 800a966:	4682      	mov	sl, r0
 800a968:	468b      	mov	fp, r1
 800a96a:	dd13      	ble.n	800a994 <_strtod_l+0x3e4>
 800a96c:	4b79      	ldr	r3, [pc, #484]	; (800ab54 <_strtod_l+0x5a4>)
 800a96e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a972:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a976:	f7f5 fe9f 	bl	80006b8 <__aeabi_dmul>
 800a97a:	4682      	mov	sl, r0
 800a97c:	4648      	mov	r0, r9
 800a97e:	468b      	mov	fp, r1
 800a980:	f7f5 fe20 	bl	80005c4 <__aeabi_ui2d>
 800a984:	4602      	mov	r2, r0
 800a986:	460b      	mov	r3, r1
 800a988:	4650      	mov	r0, sl
 800a98a:	4659      	mov	r1, fp
 800a98c:	f7f5 fcde 	bl	800034c <__adddf3>
 800a990:	4682      	mov	sl, r0
 800a992:	468b      	mov	fp, r1
 800a994:	2d0f      	cmp	r5, #15
 800a996:	dc38      	bgt.n	800aa0a <_strtod_l+0x45a>
 800a998:	9b08      	ldr	r3, [sp, #32]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f43f ae4a 	beq.w	800a634 <_strtod_l+0x84>
 800a9a0:	dd24      	ble.n	800a9ec <_strtod_l+0x43c>
 800a9a2:	2b16      	cmp	r3, #22
 800a9a4:	dc0b      	bgt.n	800a9be <_strtod_l+0x40e>
 800a9a6:	4d6b      	ldr	r5, [pc, #428]	; (800ab54 <_strtod_l+0x5a4>)
 800a9a8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a9ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a9b0:	4652      	mov	r2, sl
 800a9b2:	465b      	mov	r3, fp
 800a9b4:	f7f5 fe80 	bl	80006b8 <__aeabi_dmul>
 800a9b8:	4682      	mov	sl, r0
 800a9ba:	468b      	mov	fp, r1
 800a9bc:	e63a      	b.n	800a634 <_strtod_l+0x84>
 800a9be:	9a08      	ldr	r2, [sp, #32]
 800a9c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	db20      	blt.n	800aa0a <_strtod_l+0x45a>
 800a9c8:	4c62      	ldr	r4, [pc, #392]	; (800ab54 <_strtod_l+0x5a4>)
 800a9ca:	f1c5 050f 	rsb	r5, r5, #15
 800a9ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a9d2:	4652      	mov	r2, sl
 800a9d4:	465b      	mov	r3, fp
 800a9d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a9da:	f7f5 fe6d 	bl	80006b8 <__aeabi_dmul>
 800a9de:	9b08      	ldr	r3, [sp, #32]
 800a9e0:	1b5d      	subs	r5, r3, r5
 800a9e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a9e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a9ea:	e7e3      	b.n	800a9b4 <_strtod_l+0x404>
 800a9ec:	9b08      	ldr	r3, [sp, #32]
 800a9ee:	3316      	adds	r3, #22
 800a9f0:	db0b      	blt.n	800aa0a <_strtod_l+0x45a>
 800a9f2:	9b07      	ldr	r3, [sp, #28]
 800a9f4:	4a57      	ldr	r2, [pc, #348]	; (800ab54 <_strtod_l+0x5a4>)
 800a9f6:	1b9e      	subs	r6, r3, r6
 800a9f8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a9fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa00:	4650      	mov	r0, sl
 800aa02:	4659      	mov	r1, fp
 800aa04:	f7f5 ff82 	bl	800090c <__aeabi_ddiv>
 800aa08:	e7d6      	b.n	800a9b8 <_strtod_l+0x408>
 800aa0a:	9b08      	ldr	r3, [sp, #32]
 800aa0c:	eba5 0808 	sub.w	r8, r5, r8
 800aa10:	4498      	add	r8, r3
 800aa12:	f1b8 0f00 	cmp.w	r8, #0
 800aa16:	dd71      	ble.n	800aafc <_strtod_l+0x54c>
 800aa18:	f018 030f 	ands.w	r3, r8, #15
 800aa1c:	d00a      	beq.n	800aa34 <_strtod_l+0x484>
 800aa1e:	494d      	ldr	r1, [pc, #308]	; (800ab54 <_strtod_l+0x5a4>)
 800aa20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa24:	4652      	mov	r2, sl
 800aa26:	465b      	mov	r3, fp
 800aa28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aa2c:	f7f5 fe44 	bl	80006b8 <__aeabi_dmul>
 800aa30:	4682      	mov	sl, r0
 800aa32:	468b      	mov	fp, r1
 800aa34:	f038 080f 	bics.w	r8, r8, #15
 800aa38:	d04d      	beq.n	800aad6 <_strtod_l+0x526>
 800aa3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800aa3e:	dd22      	ble.n	800aa86 <_strtod_l+0x4d6>
 800aa40:	2500      	movs	r5, #0
 800aa42:	462e      	mov	r6, r5
 800aa44:	9509      	str	r5, [sp, #36]	; 0x24
 800aa46:	9507      	str	r5, [sp, #28]
 800aa48:	2322      	movs	r3, #34	; 0x22
 800aa4a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800ab5c <_strtod_l+0x5ac>
 800aa4e:	6023      	str	r3, [r4, #0]
 800aa50:	f04f 0a00 	mov.w	sl, #0
 800aa54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f43f adec 	beq.w	800a634 <_strtod_l+0x84>
 800aa5c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f001 fe84 	bl	800c76c <_Bfree>
 800aa64:	9907      	ldr	r1, [sp, #28]
 800aa66:	4620      	mov	r0, r4
 800aa68:	f001 fe80 	bl	800c76c <_Bfree>
 800aa6c:	4631      	mov	r1, r6
 800aa6e:	4620      	mov	r0, r4
 800aa70:	f001 fe7c 	bl	800c76c <_Bfree>
 800aa74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa76:	4620      	mov	r0, r4
 800aa78:	f001 fe78 	bl	800c76c <_Bfree>
 800aa7c:	4629      	mov	r1, r5
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f001 fe74 	bl	800c76c <_Bfree>
 800aa84:	e5d6      	b.n	800a634 <_strtod_l+0x84>
 800aa86:	2300      	movs	r3, #0
 800aa88:	ea4f 1828 	mov.w	r8, r8, asr #4
 800aa8c:	4650      	mov	r0, sl
 800aa8e:	4659      	mov	r1, fp
 800aa90:	4699      	mov	r9, r3
 800aa92:	f1b8 0f01 	cmp.w	r8, #1
 800aa96:	dc21      	bgt.n	800aadc <_strtod_l+0x52c>
 800aa98:	b10b      	cbz	r3, 800aa9e <_strtod_l+0x4ee>
 800aa9a:	4682      	mov	sl, r0
 800aa9c:	468b      	mov	fp, r1
 800aa9e:	4b2e      	ldr	r3, [pc, #184]	; (800ab58 <_strtod_l+0x5a8>)
 800aaa0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800aaa4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800aaa8:	4652      	mov	r2, sl
 800aaaa:	465b      	mov	r3, fp
 800aaac:	e9d9 0100 	ldrd	r0, r1, [r9]
 800aab0:	f7f5 fe02 	bl	80006b8 <__aeabi_dmul>
 800aab4:	4b29      	ldr	r3, [pc, #164]	; (800ab5c <_strtod_l+0x5ac>)
 800aab6:	460a      	mov	r2, r1
 800aab8:	400b      	ands	r3, r1
 800aaba:	4929      	ldr	r1, [pc, #164]	; (800ab60 <_strtod_l+0x5b0>)
 800aabc:	428b      	cmp	r3, r1
 800aabe:	4682      	mov	sl, r0
 800aac0:	d8be      	bhi.n	800aa40 <_strtod_l+0x490>
 800aac2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800aac6:	428b      	cmp	r3, r1
 800aac8:	bf86      	itte	hi
 800aaca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ab64 <_strtod_l+0x5b4>
 800aace:	f04f 3aff 	movhi.w	sl, #4294967295
 800aad2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800aad6:	2300      	movs	r3, #0
 800aad8:	9304      	str	r3, [sp, #16]
 800aada:	e081      	b.n	800abe0 <_strtod_l+0x630>
 800aadc:	f018 0f01 	tst.w	r8, #1
 800aae0:	d007      	beq.n	800aaf2 <_strtod_l+0x542>
 800aae2:	4b1d      	ldr	r3, [pc, #116]	; (800ab58 <_strtod_l+0x5a8>)
 800aae4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800aae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaec:	f7f5 fde4 	bl	80006b8 <__aeabi_dmul>
 800aaf0:	2301      	movs	r3, #1
 800aaf2:	f109 0901 	add.w	r9, r9, #1
 800aaf6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800aafa:	e7ca      	b.n	800aa92 <_strtod_l+0x4e2>
 800aafc:	d0eb      	beq.n	800aad6 <_strtod_l+0x526>
 800aafe:	f1c8 0800 	rsb	r8, r8, #0
 800ab02:	f018 020f 	ands.w	r2, r8, #15
 800ab06:	d00a      	beq.n	800ab1e <_strtod_l+0x56e>
 800ab08:	4b12      	ldr	r3, [pc, #72]	; (800ab54 <_strtod_l+0x5a4>)
 800ab0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab0e:	4650      	mov	r0, sl
 800ab10:	4659      	mov	r1, fp
 800ab12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab16:	f7f5 fef9 	bl	800090c <__aeabi_ddiv>
 800ab1a:	4682      	mov	sl, r0
 800ab1c:	468b      	mov	fp, r1
 800ab1e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ab22:	d0d8      	beq.n	800aad6 <_strtod_l+0x526>
 800ab24:	f1b8 0f1f 	cmp.w	r8, #31
 800ab28:	dd1e      	ble.n	800ab68 <_strtod_l+0x5b8>
 800ab2a:	2500      	movs	r5, #0
 800ab2c:	462e      	mov	r6, r5
 800ab2e:	9509      	str	r5, [sp, #36]	; 0x24
 800ab30:	9507      	str	r5, [sp, #28]
 800ab32:	2322      	movs	r3, #34	; 0x22
 800ab34:	f04f 0a00 	mov.w	sl, #0
 800ab38:	f04f 0b00 	mov.w	fp, #0
 800ab3c:	6023      	str	r3, [r4, #0]
 800ab3e:	e789      	b.n	800aa54 <_strtod_l+0x4a4>
 800ab40:	08022e51 	.word	0x08022e51
 800ab44:	08022e94 	.word	0x08022e94
 800ab48:	08022e49 	.word	0x08022e49
 800ab4c:	08022fd4 	.word	0x08022fd4
 800ab50:	08023290 	.word	0x08023290
 800ab54:	08023170 	.word	0x08023170
 800ab58:	08023148 	.word	0x08023148
 800ab5c:	7ff00000 	.word	0x7ff00000
 800ab60:	7ca00000 	.word	0x7ca00000
 800ab64:	7fefffff 	.word	0x7fefffff
 800ab68:	f018 0310 	ands.w	r3, r8, #16
 800ab6c:	bf18      	it	ne
 800ab6e:	236a      	movne	r3, #106	; 0x6a
 800ab70:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800af28 <_strtod_l+0x978>
 800ab74:	9304      	str	r3, [sp, #16]
 800ab76:	4650      	mov	r0, sl
 800ab78:	4659      	mov	r1, fp
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	f018 0f01 	tst.w	r8, #1
 800ab80:	d004      	beq.n	800ab8c <_strtod_l+0x5dc>
 800ab82:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ab86:	f7f5 fd97 	bl	80006b8 <__aeabi_dmul>
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800ab90:	f109 0908 	add.w	r9, r9, #8
 800ab94:	d1f2      	bne.n	800ab7c <_strtod_l+0x5cc>
 800ab96:	b10b      	cbz	r3, 800ab9c <_strtod_l+0x5ec>
 800ab98:	4682      	mov	sl, r0
 800ab9a:	468b      	mov	fp, r1
 800ab9c:	9b04      	ldr	r3, [sp, #16]
 800ab9e:	b1bb      	cbz	r3, 800abd0 <_strtod_l+0x620>
 800aba0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800aba4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	4659      	mov	r1, fp
 800abac:	dd10      	ble.n	800abd0 <_strtod_l+0x620>
 800abae:	2b1f      	cmp	r3, #31
 800abb0:	f340 8128 	ble.w	800ae04 <_strtod_l+0x854>
 800abb4:	2b34      	cmp	r3, #52	; 0x34
 800abb6:	bfde      	ittt	le
 800abb8:	3b20      	suble	r3, #32
 800abba:	f04f 32ff 	movle.w	r2, #4294967295
 800abbe:	fa02 f303 	lslle.w	r3, r2, r3
 800abc2:	f04f 0a00 	mov.w	sl, #0
 800abc6:	bfcc      	ite	gt
 800abc8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800abcc:	ea03 0b01 	andle.w	fp, r3, r1
 800abd0:	2200      	movs	r2, #0
 800abd2:	2300      	movs	r3, #0
 800abd4:	4650      	mov	r0, sl
 800abd6:	4659      	mov	r1, fp
 800abd8:	f7f5 ffd6 	bl	8000b88 <__aeabi_dcmpeq>
 800abdc:	2800      	cmp	r0, #0
 800abde:	d1a4      	bne.n	800ab2a <_strtod_l+0x57a>
 800abe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abe2:	9300      	str	r3, [sp, #0]
 800abe4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800abe6:	462b      	mov	r3, r5
 800abe8:	463a      	mov	r2, r7
 800abea:	4620      	mov	r0, r4
 800abec:	f001 fe2a 	bl	800c844 <__s2b>
 800abf0:	9009      	str	r0, [sp, #36]	; 0x24
 800abf2:	2800      	cmp	r0, #0
 800abf4:	f43f af24 	beq.w	800aa40 <_strtod_l+0x490>
 800abf8:	9b07      	ldr	r3, [sp, #28]
 800abfa:	1b9e      	subs	r6, r3, r6
 800abfc:	9b08      	ldr	r3, [sp, #32]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	bfb4      	ite	lt
 800ac02:	4633      	movlt	r3, r6
 800ac04:	2300      	movge	r3, #0
 800ac06:	9310      	str	r3, [sp, #64]	; 0x40
 800ac08:	9b08      	ldr	r3, [sp, #32]
 800ac0a:	2500      	movs	r5, #0
 800ac0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ac10:	9318      	str	r3, [sp, #96]	; 0x60
 800ac12:	462e      	mov	r6, r5
 800ac14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac16:	4620      	mov	r0, r4
 800ac18:	6859      	ldr	r1, [r3, #4]
 800ac1a:	f001 fd67 	bl	800c6ec <_Balloc>
 800ac1e:	9007      	str	r0, [sp, #28]
 800ac20:	2800      	cmp	r0, #0
 800ac22:	f43f af11 	beq.w	800aa48 <_strtod_l+0x498>
 800ac26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac28:	691a      	ldr	r2, [r3, #16]
 800ac2a:	3202      	adds	r2, #2
 800ac2c:	f103 010c 	add.w	r1, r3, #12
 800ac30:	0092      	lsls	r2, r2, #2
 800ac32:	300c      	adds	r0, #12
 800ac34:	f7fe fdb6 	bl	80097a4 <memcpy>
 800ac38:	ec4b ab10 	vmov	d0, sl, fp
 800ac3c:	aa20      	add	r2, sp, #128	; 0x80
 800ac3e:	a91f      	add	r1, sp, #124	; 0x7c
 800ac40:	4620      	mov	r0, r4
 800ac42:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ac46:	f002 f939 	bl	800cebc <__d2b>
 800ac4a:	901e      	str	r0, [sp, #120]	; 0x78
 800ac4c:	2800      	cmp	r0, #0
 800ac4e:	f43f aefb 	beq.w	800aa48 <_strtod_l+0x498>
 800ac52:	2101      	movs	r1, #1
 800ac54:	4620      	mov	r0, r4
 800ac56:	f001 fe8f 	bl	800c978 <__i2b>
 800ac5a:	4606      	mov	r6, r0
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	f43f aef3 	beq.w	800aa48 <_strtod_l+0x498>
 800ac62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ac64:	9904      	ldr	r1, [sp, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	bfab      	itete	ge
 800ac6a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ac6c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ac6e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ac70:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ac74:	bfac      	ite	ge
 800ac76:	eb03 0902 	addge.w	r9, r3, r2
 800ac7a:	1ad7      	sublt	r7, r2, r3
 800ac7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac7e:	eba3 0801 	sub.w	r8, r3, r1
 800ac82:	4490      	add	r8, r2
 800ac84:	4ba3      	ldr	r3, [pc, #652]	; (800af14 <_strtod_l+0x964>)
 800ac86:	f108 38ff 	add.w	r8, r8, #4294967295
 800ac8a:	4598      	cmp	r8, r3
 800ac8c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ac90:	f280 80cc 	bge.w	800ae2c <_strtod_l+0x87c>
 800ac94:	eba3 0308 	sub.w	r3, r3, r8
 800ac98:	2b1f      	cmp	r3, #31
 800ac9a:	eba2 0203 	sub.w	r2, r2, r3
 800ac9e:	f04f 0101 	mov.w	r1, #1
 800aca2:	f300 80b6 	bgt.w	800ae12 <_strtod_l+0x862>
 800aca6:	fa01 f303 	lsl.w	r3, r1, r3
 800acaa:	9311      	str	r3, [sp, #68]	; 0x44
 800acac:	2300      	movs	r3, #0
 800acae:	930c      	str	r3, [sp, #48]	; 0x30
 800acb0:	eb09 0802 	add.w	r8, r9, r2
 800acb4:	9b04      	ldr	r3, [sp, #16]
 800acb6:	45c1      	cmp	r9, r8
 800acb8:	4417      	add	r7, r2
 800acba:	441f      	add	r7, r3
 800acbc:	464b      	mov	r3, r9
 800acbe:	bfa8      	it	ge
 800acc0:	4643      	movge	r3, r8
 800acc2:	42bb      	cmp	r3, r7
 800acc4:	bfa8      	it	ge
 800acc6:	463b      	movge	r3, r7
 800acc8:	2b00      	cmp	r3, #0
 800acca:	bfc2      	ittt	gt
 800accc:	eba8 0803 	subgt.w	r8, r8, r3
 800acd0:	1aff      	subgt	r7, r7, r3
 800acd2:	eba9 0903 	subgt.w	r9, r9, r3
 800acd6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800acd8:	2b00      	cmp	r3, #0
 800acda:	dd17      	ble.n	800ad0c <_strtod_l+0x75c>
 800acdc:	4631      	mov	r1, r6
 800acde:	461a      	mov	r2, r3
 800ace0:	4620      	mov	r0, r4
 800ace2:	f001 ff05 	bl	800caf0 <__pow5mult>
 800ace6:	4606      	mov	r6, r0
 800ace8:	2800      	cmp	r0, #0
 800acea:	f43f aead 	beq.w	800aa48 <_strtod_l+0x498>
 800acee:	4601      	mov	r1, r0
 800acf0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800acf2:	4620      	mov	r0, r4
 800acf4:	f001 fe56 	bl	800c9a4 <__multiply>
 800acf8:	900f      	str	r0, [sp, #60]	; 0x3c
 800acfa:	2800      	cmp	r0, #0
 800acfc:	f43f aea4 	beq.w	800aa48 <_strtod_l+0x498>
 800ad00:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ad02:	4620      	mov	r0, r4
 800ad04:	f001 fd32 	bl	800c76c <_Bfree>
 800ad08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad0a:	931e      	str	r3, [sp, #120]	; 0x78
 800ad0c:	f1b8 0f00 	cmp.w	r8, #0
 800ad10:	f300 8091 	bgt.w	800ae36 <_strtod_l+0x886>
 800ad14:	9b08      	ldr	r3, [sp, #32]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	dd08      	ble.n	800ad2c <_strtod_l+0x77c>
 800ad1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ad1c:	9907      	ldr	r1, [sp, #28]
 800ad1e:	4620      	mov	r0, r4
 800ad20:	f001 fee6 	bl	800caf0 <__pow5mult>
 800ad24:	9007      	str	r0, [sp, #28]
 800ad26:	2800      	cmp	r0, #0
 800ad28:	f43f ae8e 	beq.w	800aa48 <_strtod_l+0x498>
 800ad2c:	2f00      	cmp	r7, #0
 800ad2e:	dd08      	ble.n	800ad42 <_strtod_l+0x792>
 800ad30:	9907      	ldr	r1, [sp, #28]
 800ad32:	463a      	mov	r2, r7
 800ad34:	4620      	mov	r0, r4
 800ad36:	f001 ff35 	bl	800cba4 <__lshift>
 800ad3a:	9007      	str	r0, [sp, #28]
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	f43f ae83 	beq.w	800aa48 <_strtod_l+0x498>
 800ad42:	f1b9 0f00 	cmp.w	r9, #0
 800ad46:	dd08      	ble.n	800ad5a <_strtod_l+0x7aa>
 800ad48:	4631      	mov	r1, r6
 800ad4a:	464a      	mov	r2, r9
 800ad4c:	4620      	mov	r0, r4
 800ad4e:	f001 ff29 	bl	800cba4 <__lshift>
 800ad52:	4606      	mov	r6, r0
 800ad54:	2800      	cmp	r0, #0
 800ad56:	f43f ae77 	beq.w	800aa48 <_strtod_l+0x498>
 800ad5a:	9a07      	ldr	r2, [sp, #28]
 800ad5c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f001 ffa8 	bl	800ccb4 <__mdiff>
 800ad64:	4605      	mov	r5, r0
 800ad66:	2800      	cmp	r0, #0
 800ad68:	f43f ae6e 	beq.w	800aa48 <_strtod_l+0x498>
 800ad6c:	68c3      	ldr	r3, [r0, #12]
 800ad6e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad70:	2300      	movs	r3, #0
 800ad72:	60c3      	str	r3, [r0, #12]
 800ad74:	4631      	mov	r1, r6
 800ad76:	f001 ff81 	bl	800cc7c <__mcmp>
 800ad7a:	2800      	cmp	r0, #0
 800ad7c:	da65      	bge.n	800ae4a <_strtod_l+0x89a>
 800ad7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad80:	ea53 030a 	orrs.w	r3, r3, sl
 800ad84:	f040 8087 	bne.w	800ae96 <_strtod_l+0x8e6>
 800ad88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f040 8082 	bne.w	800ae96 <_strtod_l+0x8e6>
 800ad92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ad96:	0d1b      	lsrs	r3, r3, #20
 800ad98:	051b      	lsls	r3, r3, #20
 800ad9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ad9e:	d97a      	bls.n	800ae96 <_strtod_l+0x8e6>
 800ada0:	696b      	ldr	r3, [r5, #20]
 800ada2:	b913      	cbnz	r3, 800adaa <_strtod_l+0x7fa>
 800ada4:	692b      	ldr	r3, [r5, #16]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	dd75      	ble.n	800ae96 <_strtod_l+0x8e6>
 800adaa:	4629      	mov	r1, r5
 800adac:	2201      	movs	r2, #1
 800adae:	4620      	mov	r0, r4
 800adb0:	f001 fef8 	bl	800cba4 <__lshift>
 800adb4:	4631      	mov	r1, r6
 800adb6:	4605      	mov	r5, r0
 800adb8:	f001 ff60 	bl	800cc7c <__mcmp>
 800adbc:	2800      	cmp	r0, #0
 800adbe:	dd6a      	ble.n	800ae96 <_strtod_l+0x8e6>
 800adc0:	9904      	ldr	r1, [sp, #16]
 800adc2:	4a55      	ldr	r2, [pc, #340]	; (800af18 <_strtod_l+0x968>)
 800adc4:	465b      	mov	r3, fp
 800adc6:	2900      	cmp	r1, #0
 800adc8:	f000 8085 	beq.w	800aed6 <_strtod_l+0x926>
 800adcc:	ea02 010b 	and.w	r1, r2, fp
 800add0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800add4:	dc7f      	bgt.n	800aed6 <_strtod_l+0x926>
 800add6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800adda:	f77f aeaa 	ble.w	800ab32 <_strtod_l+0x582>
 800adde:	4a4f      	ldr	r2, [pc, #316]	; (800af1c <_strtod_l+0x96c>)
 800ade0:	2300      	movs	r3, #0
 800ade2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ade6:	4650      	mov	r0, sl
 800ade8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800adec:	4659      	mov	r1, fp
 800adee:	f7f5 fc63 	bl	80006b8 <__aeabi_dmul>
 800adf2:	460b      	mov	r3, r1
 800adf4:	4303      	orrs	r3, r0
 800adf6:	bf08      	it	eq
 800adf8:	2322      	moveq	r3, #34	; 0x22
 800adfa:	4682      	mov	sl, r0
 800adfc:	468b      	mov	fp, r1
 800adfe:	bf08      	it	eq
 800ae00:	6023      	streq	r3, [r4, #0]
 800ae02:	e62b      	b.n	800aa5c <_strtod_l+0x4ac>
 800ae04:	f04f 32ff 	mov.w	r2, #4294967295
 800ae08:	fa02 f303 	lsl.w	r3, r2, r3
 800ae0c:	ea03 0a0a 	and.w	sl, r3, sl
 800ae10:	e6de      	b.n	800abd0 <_strtod_l+0x620>
 800ae12:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ae16:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ae1a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ae1e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ae22:	fa01 f308 	lsl.w	r3, r1, r8
 800ae26:	930c      	str	r3, [sp, #48]	; 0x30
 800ae28:	9111      	str	r1, [sp, #68]	; 0x44
 800ae2a:	e741      	b.n	800acb0 <_strtod_l+0x700>
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	930c      	str	r3, [sp, #48]	; 0x30
 800ae30:	2301      	movs	r3, #1
 800ae32:	9311      	str	r3, [sp, #68]	; 0x44
 800ae34:	e73c      	b.n	800acb0 <_strtod_l+0x700>
 800ae36:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ae38:	4642      	mov	r2, r8
 800ae3a:	4620      	mov	r0, r4
 800ae3c:	f001 feb2 	bl	800cba4 <__lshift>
 800ae40:	901e      	str	r0, [sp, #120]	; 0x78
 800ae42:	2800      	cmp	r0, #0
 800ae44:	f47f af66 	bne.w	800ad14 <_strtod_l+0x764>
 800ae48:	e5fe      	b.n	800aa48 <_strtod_l+0x498>
 800ae4a:	465f      	mov	r7, fp
 800ae4c:	d16e      	bne.n	800af2c <_strtod_l+0x97c>
 800ae4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae54:	b342      	cbz	r2, 800aea8 <_strtod_l+0x8f8>
 800ae56:	4a32      	ldr	r2, [pc, #200]	; (800af20 <_strtod_l+0x970>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d128      	bne.n	800aeae <_strtod_l+0x8fe>
 800ae5c:	9b04      	ldr	r3, [sp, #16]
 800ae5e:	4650      	mov	r0, sl
 800ae60:	b1eb      	cbz	r3, 800ae9e <_strtod_l+0x8ee>
 800ae62:	4a2d      	ldr	r2, [pc, #180]	; (800af18 <_strtod_l+0x968>)
 800ae64:	403a      	ands	r2, r7
 800ae66:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ae6a:	f04f 31ff 	mov.w	r1, #4294967295
 800ae6e:	d819      	bhi.n	800aea4 <_strtod_l+0x8f4>
 800ae70:	0d12      	lsrs	r2, r2, #20
 800ae72:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ae76:	fa01 f303 	lsl.w	r3, r1, r3
 800ae7a:	4298      	cmp	r0, r3
 800ae7c:	d117      	bne.n	800aeae <_strtod_l+0x8fe>
 800ae7e:	4b29      	ldr	r3, [pc, #164]	; (800af24 <_strtod_l+0x974>)
 800ae80:	429f      	cmp	r7, r3
 800ae82:	d102      	bne.n	800ae8a <_strtod_l+0x8da>
 800ae84:	3001      	adds	r0, #1
 800ae86:	f43f addf 	beq.w	800aa48 <_strtod_l+0x498>
 800ae8a:	4b23      	ldr	r3, [pc, #140]	; (800af18 <_strtod_l+0x968>)
 800ae8c:	403b      	ands	r3, r7
 800ae8e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ae92:	f04f 0a00 	mov.w	sl, #0
 800ae96:	9b04      	ldr	r3, [sp, #16]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d1a0      	bne.n	800adde <_strtod_l+0x82e>
 800ae9c:	e5de      	b.n	800aa5c <_strtod_l+0x4ac>
 800ae9e:	f04f 33ff 	mov.w	r3, #4294967295
 800aea2:	e7ea      	b.n	800ae7a <_strtod_l+0x8ca>
 800aea4:	460b      	mov	r3, r1
 800aea6:	e7e8      	b.n	800ae7a <_strtod_l+0x8ca>
 800aea8:	ea53 030a 	orrs.w	r3, r3, sl
 800aeac:	d088      	beq.n	800adc0 <_strtod_l+0x810>
 800aeae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aeb0:	b1db      	cbz	r3, 800aeea <_strtod_l+0x93a>
 800aeb2:	423b      	tst	r3, r7
 800aeb4:	d0ef      	beq.n	800ae96 <_strtod_l+0x8e6>
 800aeb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aeb8:	9a04      	ldr	r2, [sp, #16]
 800aeba:	4650      	mov	r0, sl
 800aebc:	4659      	mov	r1, fp
 800aebe:	b1c3      	cbz	r3, 800aef2 <_strtod_l+0x942>
 800aec0:	f7ff fb5a 	bl	800a578 <sulp>
 800aec4:	4602      	mov	r2, r0
 800aec6:	460b      	mov	r3, r1
 800aec8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aecc:	f7f5 fa3e 	bl	800034c <__adddf3>
 800aed0:	4682      	mov	sl, r0
 800aed2:	468b      	mov	fp, r1
 800aed4:	e7df      	b.n	800ae96 <_strtod_l+0x8e6>
 800aed6:	4013      	ands	r3, r2
 800aed8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aedc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aee0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aee4:	f04f 3aff 	mov.w	sl, #4294967295
 800aee8:	e7d5      	b.n	800ae96 <_strtod_l+0x8e6>
 800aeea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aeec:	ea13 0f0a 	tst.w	r3, sl
 800aef0:	e7e0      	b.n	800aeb4 <_strtod_l+0x904>
 800aef2:	f7ff fb41 	bl	800a578 <sulp>
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aefe:	f7f5 fa23 	bl	8000348 <__aeabi_dsub>
 800af02:	2200      	movs	r2, #0
 800af04:	2300      	movs	r3, #0
 800af06:	4682      	mov	sl, r0
 800af08:	468b      	mov	fp, r1
 800af0a:	f7f5 fe3d 	bl	8000b88 <__aeabi_dcmpeq>
 800af0e:	2800      	cmp	r0, #0
 800af10:	d0c1      	beq.n	800ae96 <_strtod_l+0x8e6>
 800af12:	e60e      	b.n	800ab32 <_strtod_l+0x582>
 800af14:	fffffc02 	.word	0xfffffc02
 800af18:	7ff00000 	.word	0x7ff00000
 800af1c:	39500000 	.word	0x39500000
 800af20:	000fffff 	.word	0x000fffff
 800af24:	7fefffff 	.word	0x7fefffff
 800af28:	08022ea8 	.word	0x08022ea8
 800af2c:	4631      	mov	r1, r6
 800af2e:	4628      	mov	r0, r5
 800af30:	f002 f820 	bl	800cf74 <__ratio>
 800af34:	ec59 8b10 	vmov	r8, r9, d0
 800af38:	ee10 0a10 	vmov	r0, s0
 800af3c:	2200      	movs	r2, #0
 800af3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800af42:	4649      	mov	r1, r9
 800af44:	f7f5 fe34 	bl	8000bb0 <__aeabi_dcmple>
 800af48:	2800      	cmp	r0, #0
 800af4a:	d07c      	beq.n	800b046 <_strtod_l+0xa96>
 800af4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d04c      	beq.n	800afec <_strtod_l+0xa3c>
 800af52:	4b95      	ldr	r3, [pc, #596]	; (800b1a8 <_strtod_l+0xbf8>)
 800af54:	2200      	movs	r2, #0
 800af56:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800af5a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b1a8 <_strtod_l+0xbf8>
 800af5e:	f04f 0800 	mov.w	r8, #0
 800af62:	4b92      	ldr	r3, [pc, #584]	; (800b1ac <_strtod_l+0xbfc>)
 800af64:	403b      	ands	r3, r7
 800af66:	9311      	str	r3, [sp, #68]	; 0x44
 800af68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800af6a:	4b91      	ldr	r3, [pc, #580]	; (800b1b0 <_strtod_l+0xc00>)
 800af6c:	429a      	cmp	r2, r3
 800af6e:	f040 80b2 	bne.w	800b0d6 <_strtod_l+0xb26>
 800af72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af7a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800af7e:	ec4b ab10 	vmov	d0, sl, fp
 800af82:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800af86:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800af8a:	f001 ff1b 	bl	800cdc4 <__ulp>
 800af8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800af92:	ec53 2b10 	vmov	r2, r3, d0
 800af96:	f7f5 fb8f 	bl	80006b8 <__aeabi_dmul>
 800af9a:	4652      	mov	r2, sl
 800af9c:	465b      	mov	r3, fp
 800af9e:	f7f5 f9d5 	bl	800034c <__adddf3>
 800afa2:	460b      	mov	r3, r1
 800afa4:	4981      	ldr	r1, [pc, #516]	; (800b1ac <_strtod_l+0xbfc>)
 800afa6:	4a83      	ldr	r2, [pc, #524]	; (800b1b4 <_strtod_l+0xc04>)
 800afa8:	4019      	ands	r1, r3
 800afaa:	4291      	cmp	r1, r2
 800afac:	4682      	mov	sl, r0
 800afae:	d95e      	bls.n	800b06e <_strtod_l+0xabe>
 800afb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800afb2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d103      	bne.n	800afc2 <_strtod_l+0xa12>
 800afba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afbc:	3301      	adds	r3, #1
 800afbe:	f43f ad43 	beq.w	800aa48 <_strtod_l+0x498>
 800afc2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b1c0 <_strtod_l+0xc10>
 800afc6:	f04f 3aff 	mov.w	sl, #4294967295
 800afca:	991e      	ldr	r1, [sp, #120]	; 0x78
 800afcc:	4620      	mov	r0, r4
 800afce:	f001 fbcd 	bl	800c76c <_Bfree>
 800afd2:	9907      	ldr	r1, [sp, #28]
 800afd4:	4620      	mov	r0, r4
 800afd6:	f001 fbc9 	bl	800c76c <_Bfree>
 800afda:	4631      	mov	r1, r6
 800afdc:	4620      	mov	r0, r4
 800afde:	f001 fbc5 	bl	800c76c <_Bfree>
 800afe2:	4629      	mov	r1, r5
 800afe4:	4620      	mov	r0, r4
 800afe6:	f001 fbc1 	bl	800c76c <_Bfree>
 800afea:	e613      	b.n	800ac14 <_strtod_l+0x664>
 800afec:	f1ba 0f00 	cmp.w	sl, #0
 800aff0:	d11b      	bne.n	800b02a <_strtod_l+0xa7a>
 800aff2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aff6:	b9f3      	cbnz	r3, 800b036 <_strtod_l+0xa86>
 800aff8:	4b6b      	ldr	r3, [pc, #428]	; (800b1a8 <_strtod_l+0xbf8>)
 800affa:	2200      	movs	r2, #0
 800affc:	4640      	mov	r0, r8
 800affe:	4649      	mov	r1, r9
 800b000:	f7f5 fdcc 	bl	8000b9c <__aeabi_dcmplt>
 800b004:	b9d0      	cbnz	r0, 800b03c <_strtod_l+0xa8c>
 800b006:	4640      	mov	r0, r8
 800b008:	4649      	mov	r1, r9
 800b00a:	4b6b      	ldr	r3, [pc, #428]	; (800b1b8 <_strtod_l+0xc08>)
 800b00c:	2200      	movs	r2, #0
 800b00e:	f7f5 fb53 	bl	80006b8 <__aeabi_dmul>
 800b012:	4680      	mov	r8, r0
 800b014:	4689      	mov	r9, r1
 800b016:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b01a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800b01e:	931b      	str	r3, [sp, #108]	; 0x6c
 800b020:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800b024:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b028:	e79b      	b.n	800af62 <_strtod_l+0x9b2>
 800b02a:	f1ba 0f01 	cmp.w	sl, #1
 800b02e:	d102      	bne.n	800b036 <_strtod_l+0xa86>
 800b030:	2f00      	cmp	r7, #0
 800b032:	f43f ad7e 	beq.w	800ab32 <_strtod_l+0x582>
 800b036:	4b61      	ldr	r3, [pc, #388]	; (800b1bc <_strtod_l+0xc0c>)
 800b038:	2200      	movs	r2, #0
 800b03a:	e78c      	b.n	800af56 <_strtod_l+0x9a6>
 800b03c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b1b8 <_strtod_l+0xc08>
 800b040:	f04f 0800 	mov.w	r8, #0
 800b044:	e7e7      	b.n	800b016 <_strtod_l+0xa66>
 800b046:	4b5c      	ldr	r3, [pc, #368]	; (800b1b8 <_strtod_l+0xc08>)
 800b048:	4640      	mov	r0, r8
 800b04a:	4649      	mov	r1, r9
 800b04c:	2200      	movs	r2, #0
 800b04e:	f7f5 fb33 	bl	80006b8 <__aeabi_dmul>
 800b052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b054:	4680      	mov	r8, r0
 800b056:	4689      	mov	r9, r1
 800b058:	b933      	cbnz	r3, 800b068 <_strtod_l+0xab8>
 800b05a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b05e:	9012      	str	r0, [sp, #72]	; 0x48
 800b060:	9313      	str	r3, [sp, #76]	; 0x4c
 800b062:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800b066:	e7dd      	b.n	800b024 <_strtod_l+0xa74>
 800b068:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800b06c:	e7f9      	b.n	800b062 <_strtod_l+0xab2>
 800b06e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b072:	9b04      	ldr	r3, [sp, #16]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d1a8      	bne.n	800afca <_strtod_l+0xa1a>
 800b078:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b07c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b07e:	0d1b      	lsrs	r3, r3, #20
 800b080:	051b      	lsls	r3, r3, #20
 800b082:	429a      	cmp	r2, r3
 800b084:	d1a1      	bne.n	800afca <_strtod_l+0xa1a>
 800b086:	4640      	mov	r0, r8
 800b088:	4649      	mov	r1, r9
 800b08a:	f7f5 fe75 	bl	8000d78 <__aeabi_d2lz>
 800b08e:	f7f5 fae5 	bl	800065c <__aeabi_l2d>
 800b092:	4602      	mov	r2, r0
 800b094:	460b      	mov	r3, r1
 800b096:	4640      	mov	r0, r8
 800b098:	4649      	mov	r1, r9
 800b09a:	f7f5 f955 	bl	8000348 <__aeabi_dsub>
 800b09e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b0a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b0a4:	ea43 030a 	orr.w	r3, r3, sl
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	4680      	mov	r8, r0
 800b0ac:	4689      	mov	r9, r1
 800b0ae:	d053      	beq.n	800b158 <_strtod_l+0xba8>
 800b0b0:	a335      	add	r3, pc, #212	; (adr r3, 800b188 <_strtod_l+0xbd8>)
 800b0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b6:	f7f5 fd71 	bl	8000b9c <__aeabi_dcmplt>
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	f47f acce 	bne.w	800aa5c <_strtod_l+0x4ac>
 800b0c0:	a333      	add	r3, pc, #204	; (adr r3, 800b190 <_strtod_l+0xbe0>)
 800b0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c6:	4640      	mov	r0, r8
 800b0c8:	4649      	mov	r1, r9
 800b0ca:	f7f5 fd85 	bl	8000bd8 <__aeabi_dcmpgt>
 800b0ce:	2800      	cmp	r0, #0
 800b0d0:	f43f af7b 	beq.w	800afca <_strtod_l+0xa1a>
 800b0d4:	e4c2      	b.n	800aa5c <_strtod_l+0x4ac>
 800b0d6:	9b04      	ldr	r3, [sp, #16]
 800b0d8:	b333      	cbz	r3, 800b128 <_strtod_l+0xb78>
 800b0da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b0dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b0e0:	d822      	bhi.n	800b128 <_strtod_l+0xb78>
 800b0e2:	a32d      	add	r3, pc, #180	; (adr r3, 800b198 <_strtod_l+0xbe8>)
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	4640      	mov	r0, r8
 800b0ea:	4649      	mov	r1, r9
 800b0ec:	f7f5 fd60 	bl	8000bb0 <__aeabi_dcmple>
 800b0f0:	b1a0      	cbz	r0, 800b11c <_strtod_l+0xb6c>
 800b0f2:	4649      	mov	r1, r9
 800b0f4:	4640      	mov	r0, r8
 800b0f6:	f7f5 fdb7 	bl	8000c68 <__aeabi_d2uiz>
 800b0fa:	2801      	cmp	r0, #1
 800b0fc:	bf38      	it	cc
 800b0fe:	2001      	movcc	r0, #1
 800b100:	f7f5 fa60 	bl	80005c4 <__aeabi_ui2d>
 800b104:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b106:	4680      	mov	r8, r0
 800b108:	4689      	mov	r9, r1
 800b10a:	bb13      	cbnz	r3, 800b152 <_strtod_l+0xba2>
 800b10c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b110:	9014      	str	r0, [sp, #80]	; 0x50
 800b112:	9315      	str	r3, [sp, #84]	; 0x54
 800b114:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b118:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800b11c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b11e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800b120:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b124:	1a9b      	subs	r3, r3, r2
 800b126:	930d      	str	r3, [sp, #52]	; 0x34
 800b128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b12c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b130:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800b134:	f001 fe46 	bl	800cdc4 <__ulp>
 800b138:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b13c:	ec53 2b10 	vmov	r2, r3, d0
 800b140:	f7f5 faba 	bl	80006b8 <__aeabi_dmul>
 800b144:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b148:	f7f5 f900 	bl	800034c <__adddf3>
 800b14c:	4682      	mov	sl, r0
 800b14e:	468b      	mov	fp, r1
 800b150:	e78f      	b.n	800b072 <_strtod_l+0xac2>
 800b152:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800b156:	e7dd      	b.n	800b114 <_strtod_l+0xb64>
 800b158:	a311      	add	r3, pc, #68	; (adr r3, 800b1a0 <_strtod_l+0xbf0>)
 800b15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15e:	f7f5 fd1d 	bl	8000b9c <__aeabi_dcmplt>
 800b162:	e7b4      	b.n	800b0ce <_strtod_l+0xb1e>
 800b164:	2300      	movs	r3, #0
 800b166:	930e      	str	r3, [sp, #56]	; 0x38
 800b168:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b16a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b16c:	6013      	str	r3, [r2, #0]
 800b16e:	f7ff ba65 	b.w	800a63c <_strtod_l+0x8c>
 800b172:	2b65      	cmp	r3, #101	; 0x65
 800b174:	f43f ab5d 	beq.w	800a832 <_strtod_l+0x282>
 800b178:	2b45      	cmp	r3, #69	; 0x45
 800b17a:	f43f ab5a 	beq.w	800a832 <_strtod_l+0x282>
 800b17e:	2201      	movs	r2, #1
 800b180:	f7ff bb92 	b.w	800a8a8 <_strtod_l+0x2f8>
 800b184:	f3af 8000 	nop.w
 800b188:	94a03595 	.word	0x94a03595
 800b18c:	3fdfffff 	.word	0x3fdfffff
 800b190:	35afe535 	.word	0x35afe535
 800b194:	3fe00000 	.word	0x3fe00000
 800b198:	ffc00000 	.word	0xffc00000
 800b19c:	41dfffff 	.word	0x41dfffff
 800b1a0:	94a03595 	.word	0x94a03595
 800b1a4:	3fcfffff 	.word	0x3fcfffff
 800b1a8:	3ff00000 	.word	0x3ff00000
 800b1ac:	7ff00000 	.word	0x7ff00000
 800b1b0:	7fe00000 	.word	0x7fe00000
 800b1b4:	7c9fffff 	.word	0x7c9fffff
 800b1b8:	3fe00000 	.word	0x3fe00000
 800b1bc:	bff00000 	.word	0xbff00000
 800b1c0:	7fefffff 	.word	0x7fefffff

0800b1c4 <_strtod_r>:
 800b1c4:	4b01      	ldr	r3, [pc, #4]	; (800b1cc <_strtod_r+0x8>)
 800b1c6:	f7ff b9f3 	b.w	800a5b0 <_strtod_l>
 800b1ca:	bf00      	nop
 800b1cc:	200000e8 	.word	0x200000e8

0800b1d0 <_strtol_l.isra.0>:
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1d6:	d001      	beq.n	800b1dc <_strtol_l.isra.0+0xc>
 800b1d8:	2b24      	cmp	r3, #36	; 0x24
 800b1da:	d906      	bls.n	800b1ea <_strtol_l.isra.0+0x1a>
 800b1dc:	f7fe fab8 	bl	8009750 <__errno>
 800b1e0:	2316      	movs	r3, #22
 800b1e2:	6003      	str	r3, [r0, #0]
 800b1e4:	2000      	movs	r0, #0
 800b1e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1ea:	4f3a      	ldr	r7, [pc, #232]	; (800b2d4 <_strtol_l.isra.0+0x104>)
 800b1ec:	468e      	mov	lr, r1
 800b1ee:	4676      	mov	r6, lr
 800b1f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b1f4:	5de5      	ldrb	r5, [r4, r7]
 800b1f6:	f015 0508 	ands.w	r5, r5, #8
 800b1fa:	d1f8      	bne.n	800b1ee <_strtol_l.isra.0+0x1e>
 800b1fc:	2c2d      	cmp	r4, #45	; 0x2d
 800b1fe:	d134      	bne.n	800b26a <_strtol_l.isra.0+0x9a>
 800b200:	f89e 4000 	ldrb.w	r4, [lr]
 800b204:	f04f 0801 	mov.w	r8, #1
 800b208:	f106 0e02 	add.w	lr, r6, #2
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d05c      	beq.n	800b2ca <_strtol_l.isra.0+0xfa>
 800b210:	2b10      	cmp	r3, #16
 800b212:	d10c      	bne.n	800b22e <_strtol_l.isra.0+0x5e>
 800b214:	2c30      	cmp	r4, #48	; 0x30
 800b216:	d10a      	bne.n	800b22e <_strtol_l.isra.0+0x5e>
 800b218:	f89e 4000 	ldrb.w	r4, [lr]
 800b21c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b220:	2c58      	cmp	r4, #88	; 0x58
 800b222:	d14d      	bne.n	800b2c0 <_strtol_l.isra.0+0xf0>
 800b224:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b228:	2310      	movs	r3, #16
 800b22a:	f10e 0e02 	add.w	lr, lr, #2
 800b22e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b232:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b236:	2600      	movs	r6, #0
 800b238:	fbbc f9f3 	udiv	r9, ip, r3
 800b23c:	4635      	mov	r5, r6
 800b23e:	fb03 ca19 	mls	sl, r3, r9, ip
 800b242:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b246:	2f09      	cmp	r7, #9
 800b248:	d818      	bhi.n	800b27c <_strtol_l.isra.0+0xac>
 800b24a:	463c      	mov	r4, r7
 800b24c:	42a3      	cmp	r3, r4
 800b24e:	dd24      	ble.n	800b29a <_strtol_l.isra.0+0xca>
 800b250:	2e00      	cmp	r6, #0
 800b252:	db1f      	blt.n	800b294 <_strtol_l.isra.0+0xc4>
 800b254:	45a9      	cmp	r9, r5
 800b256:	d31d      	bcc.n	800b294 <_strtol_l.isra.0+0xc4>
 800b258:	d101      	bne.n	800b25e <_strtol_l.isra.0+0x8e>
 800b25a:	45a2      	cmp	sl, r4
 800b25c:	db1a      	blt.n	800b294 <_strtol_l.isra.0+0xc4>
 800b25e:	fb05 4503 	mla	r5, r5, r3, r4
 800b262:	2601      	movs	r6, #1
 800b264:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b268:	e7eb      	b.n	800b242 <_strtol_l.isra.0+0x72>
 800b26a:	2c2b      	cmp	r4, #43	; 0x2b
 800b26c:	bf08      	it	eq
 800b26e:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b272:	46a8      	mov	r8, r5
 800b274:	bf08      	it	eq
 800b276:	f106 0e02 	addeq.w	lr, r6, #2
 800b27a:	e7c7      	b.n	800b20c <_strtol_l.isra.0+0x3c>
 800b27c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b280:	2f19      	cmp	r7, #25
 800b282:	d801      	bhi.n	800b288 <_strtol_l.isra.0+0xb8>
 800b284:	3c37      	subs	r4, #55	; 0x37
 800b286:	e7e1      	b.n	800b24c <_strtol_l.isra.0+0x7c>
 800b288:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b28c:	2f19      	cmp	r7, #25
 800b28e:	d804      	bhi.n	800b29a <_strtol_l.isra.0+0xca>
 800b290:	3c57      	subs	r4, #87	; 0x57
 800b292:	e7db      	b.n	800b24c <_strtol_l.isra.0+0x7c>
 800b294:	f04f 36ff 	mov.w	r6, #4294967295
 800b298:	e7e4      	b.n	800b264 <_strtol_l.isra.0+0x94>
 800b29a:	2e00      	cmp	r6, #0
 800b29c:	da05      	bge.n	800b2aa <_strtol_l.isra.0+0xda>
 800b29e:	2322      	movs	r3, #34	; 0x22
 800b2a0:	6003      	str	r3, [r0, #0]
 800b2a2:	4665      	mov	r5, ip
 800b2a4:	b942      	cbnz	r2, 800b2b8 <_strtol_l.isra.0+0xe8>
 800b2a6:	4628      	mov	r0, r5
 800b2a8:	e79d      	b.n	800b1e6 <_strtol_l.isra.0+0x16>
 800b2aa:	f1b8 0f00 	cmp.w	r8, #0
 800b2ae:	d000      	beq.n	800b2b2 <_strtol_l.isra.0+0xe2>
 800b2b0:	426d      	negs	r5, r5
 800b2b2:	2a00      	cmp	r2, #0
 800b2b4:	d0f7      	beq.n	800b2a6 <_strtol_l.isra.0+0xd6>
 800b2b6:	b10e      	cbz	r6, 800b2bc <_strtol_l.isra.0+0xec>
 800b2b8:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b2bc:	6011      	str	r1, [r2, #0]
 800b2be:	e7f2      	b.n	800b2a6 <_strtol_l.isra.0+0xd6>
 800b2c0:	2430      	movs	r4, #48	; 0x30
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d1b3      	bne.n	800b22e <_strtol_l.isra.0+0x5e>
 800b2c6:	2308      	movs	r3, #8
 800b2c8:	e7b1      	b.n	800b22e <_strtol_l.isra.0+0x5e>
 800b2ca:	2c30      	cmp	r4, #48	; 0x30
 800b2cc:	d0a4      	beq.n	800b218 <_strtol_l.isra.0+0x48>
 800b2ce:	230a      	movs	r3, #10
 800b2d0:	e7ad      	b.n	800b22e <_strtol_l.isra.0+0x5e>
 800b2d2:	bf00      	nop
 800b2d4:	08022ed1 	.word	0x08022ed1

0800b2d8 <_strtol_r>:
 800b2d8:	f7ff bf7a 	b.w	800b1d0 <_strtol_l.isra.0>

0800b2dc <quorem>:
 800b2dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e0:	6903      	ldr	r3, [r0, #16]
 800b2e2:	690c      	ldr	r4, [r1, #16]
 800b2e4:	42a3      	cmp	r3, r4
 800b2e6:	4607      	mov	r7, r0
 800b2e8:	f2c0 8081 	blt.w	800b3ee <quorem+0x112>
 800b2ec:	3c01      	subs	r4, #1
 800b2ee:	f101 0814 	add.w	r8, r1, #20
 800b2f2:	f100 0514 	add.w	r5, r0, #20
 800b2f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2fa:	9301      	str	r3, [sp, #4]
 800b2fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b300:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b304:	3301      	adds	r3, #1
 800b306:	429a      	cmp	r2, r3
 800b308:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b30c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b310:	fbb2 f6f3 	udiv	r6, r2, r3
 800b314:	d331      	bcc.n	800b37a <quorem+0x9e>
 800b316:	f04f 0e00 	mov.w	lr, #0
 800b31a:	4640      	mov	r0, r8
 800b31c:	46ac      	mov	ip, r5
 800b31e:	46f2      	mov	sl, lr
 800b320:	f850 2b04 	ldr.w	r2, [r0], #4
 800b324:	b293      	uxth	r3, r2
 800b326:	fb06 e303 	mla	r3, r6, r3, lr
 800b32a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b32e:	b29b      	uxth	r3, r3
 800b330:	ebaa 0303 	sub.w	r3, sl, r3
 800b334:	0c12      	lsrs	r2, r2, #16
 800b336:	f8dc a000 	ldr.w	sl, [ip]
 800b33a:	fb06 e202 	mla	r2, r6, r2, lr
 800b33e:	fa13 f38a 	uxtah	r3, r3, sl
 800b342:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b346:	fa1f fa82 	uxth.w	sl, r2
 800b34a:	f8dc 2000 	ldr.w	r2, [ip]
 800b34e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800b352:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b356:	b29b      	uxth	r3, r3
 800b358:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b35c:	4581      	cmp	r9, r0
 800b35e:	f84c 3b04 	str.w	r3, [ip], #4
 800b362:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b366:	d2db      	bcs.n	800b320 <quorem+0x44>
 800b368:	f855 300b 	ldr.w	r3, [r5, fp]
 800b36c:	b92b      	cbnz	r3, 800b37a <quorem+0x9e>
 800b36e:	9b01      	ldr	r3, [sp, #4]
 800b370:	3b04      	subs	r3, #4
 800b372:	429d      	cmp	r5, r3
 800b374:	461a      	mov	r2, r3
 800b376:	d32e      	bcc.n	800b3d6 <quorem+0xfa>
 800b378:	613c      	str	r4, [r7, #16]
 800b37a:	4638      	mov	r0, r7
 800b37c:	f001 fc7e 	bl	800cc7c <__mcmp>
 800b380:	2800      	cmp	r0, #0
 800b382:	db24      	blt.n	800b3ce <quorem+0xf2>
 800b384:	3601      	adds	r6, #1
 800b386:	4628      	mov	r0, r5
 800b388:	f04f 0c00 	mov.w	ip, #0
 800b38c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b390:	f8d0 e000 	ldr.w	lr, [r0]
 800b394:	b293      	uxth	r3, r2
 800b396:	ebac 0303 	sub.w	r3, ip, r3
 800b39a:	0c12      	lsrs	r2, r2, #16
 800b39c:	fa13 f38e 	uxtah	r3, r3, lr
 800b3a0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b3a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b3a8:	b29b      	uxth	r3, r3
 800b3aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b3ae:	45c1      	cmp	r9, r8
 800b3b0:	f840 3b04 	str.w	r3, [r0], #4
 800b3b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b3b8:	d2e8      	bcs.n	800b38c <quorem+0xb0>
 800b3ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b3be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b3c2:	b922      	cbnz	r2, 800b3ce <quorem+0xf2>
 800b3c4:	3b04      	subs	r3, #4
 800b3c6:	429d      	cmp	r5, r3
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	d30a      	bcc.n	800b3e2 <quorem+0x106>
 800b3cc:	613c      	str	r4, [r7, #16]
 800b3ce:	4630      	mov	r0, r6
 800b3d0:	b003      	add	sp, #12
 800b3d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d6:	6812      	ldr	r2, [r2, #0]
 800b3d8:	3b04      	subs	r3, #4
 800b3da:	2a00      	cmp	r2, #0
 800b3dc:	d1cc      	bne.n	800b378 <quorem+0x9c>
 800b3de:	3c01      	subs	r4, #1
 800b3e0:	e7c7      	b.n	800b372 <quorem+0x96>
 800b3e2:	6812      	ldr	r2, [r2, #0]
 800b3e4:	3b04      	subs	r3, #4
 800b3e6:	2a00      	cmp	r2, #0
 800b3e8:	d1f0      	bne.n	800b3cc <quorem+0xf0>
 800b3ea:	3c01      	subs	r4, #1
 800b3ec:	e7eb      	b.n	800b3c6 <quorem+0xea>
 800b3ee:	2000      	movs	r0, #0
 800b3f0:	e7ee      	b.n	800b3d0 <quorem+0xf4>
 800b3f2:	0000      	movs	r0, r0
 800b3f4:	0000      	movs	r0, r0
	...

0800b3f8 <_dtoa_r>:
 800b3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fc:	ed2d 8b02 	vpush	{d8}
 800b400:	ec57 6b10 	vmov	r6, r7, d0
 800b404:	b095      	sub	sp, #84	; 0x54
 800b406:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b408:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b40c:	9105      	str	r1, [sp, #20]
 800b40e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800b412:	4604      	mov	r4, r0
 800b414:	9209      	str	r2, [sp, #36]	; 0x24
 800b416:	930f      	str	r3, [sp, #60]	; 0x3c
 800b418:	b975      	cbnz	r5, 800b438 <_dtoa_r+0x40>
 800b41a:	2010      	movs	r0, #16
 800b41c:	f001 f94c 	bl	800c6b8 <malloc>
 800b420:	4602      	mov	r2, r0
 800b422:	6260      	str	r0, [r4, #36]	; 0x24
 800b424:	b920      	cbnz	r0, 800b430 <_dtoa_r+0x38>
 800b426:	4bb2      	ldr	r3, [pc, #712]	; (800b6f0 <_dtoa_r+0x2f8>)
 800b428:	21ea      	movs	r1, #234	; 0xea
 800b42a:	48b2      	ldr	r0, [pc, #712]	; (800b6f4 <_dtoa_r+0x2fc>)
 800b42c:	f002 f868 	bl	800d500 <__assert_func>
 800b430:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b434:	6005      	str	r5, [r0, #0]
 800b436:	60c5      	str	r5, [r0, #12]
 800b438:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b43a:	6819      	ldr	r1, [r3, #0]
 800b43c:	b151      	cbz	r1, 800b454 <_dtoa_r+0x5c>
 800b43e:	685a      	ldr	r2, [r3, #4]
 800b440:	604a      	str	r2, [r1, #4]
 800b442:	2301      	movs	r3, #1
 800b444:	4093      	lsls	r3, r2
 800b446:	608b      	str	r3, [r1, #8]
 800b448:	4620      	mov	r0, r4
 800b44a:	f001 f98f 	bl	800c76c <_Bfree>
 800b44e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b450:	2200      	movs	r2, #0
 800b452:	601a      	str	r2, [r3, #0]
 800b454:	1e3b      	subs	r3, r7, #0
 800b456:	bfb9      	ittee	lt
 800b458:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b45c:	9303      	strlt	r3, [sp, #12]
 800b45e:	2300      	movge	r3, #0
 800b460:	f8c8 3000 	strge.w	r3, [r8]
 800b464:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800b468:	4ba3      	ldr	r3, [pc, #652]	; (800b6f8 <_dtoa_r+0x300>)
 800b46a:	bfbc      	itt	lt
 800b46c:	2201      	movlt	r2, #1
 800b46e:	f8c8 2000 	strlt.w	r2, [r8]
 800b472:	ea33 0309 	bics.w	r3, r3, r9
 800b476:	d11b      	bne.n	800b4b0 <_dtoa_r+0xb8>
 800b478:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b47a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b47e:	6013      	str	r3, [r2, #0]
 800b480:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b484:	4333      	orrs	r3, r6
 800b486:	f000 857a 	beq.w	800bf7e <_dtoa_r+0xb86>
 800b48a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b48c:	b963      	cbnz	r3, 800b4a8 <_dtoa_r+0xb0>
 800b48e:	4b9b      	ldr	r3, [pc, #620]	; (800b6fc <_dtoa_r+0x304>)
 800b490:	e024      	b.n	800b4dc <_dtoa_r+0xe4>
 800b492:	4b9b      	ldr	r3, [pc, #620]	; (800b700 <_dtoa_r+0x308>)
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	3308      	adds	r3, #8
 800b498:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b49a:	6013      	str	r3, [r2, #0]
 800b49c:	9800      	ldr	r0, [sp, #0]
 800b49e:	b015      	add	sp, #84	; 0x54
 800b4a0:	ecbd 8b02 	vpop	{d8}
 800b4a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a8:	4b94      	ldr	r3, [pc, #592]	; (800b6fc <_dtoa_r+0x304>)
 800b4aa:	9300      	str	r3, [sp, #0]
 800b4ac:	3303      	adds	r3, #3
 800b4ae:	e7f3      	b.n	800b498 <_dtoa_r+0xa0>
 800b4b0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	ec51 0b17 	vmov	r0, r1, d7
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800b4c0:	f7f5 fb62 	bl	8000b88 <__aeabi_dcmpeq>
 800b4c4:	4680      	mov	r8, r0
 800b4c6:	b158      	cbz	r0, 800b4e0 <_dtoa_r+0xe8>
 800b4c8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	6013      	str	r3, [r2, #0]
 800b4ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	f000 8551 	beq.w	800bf78 <_dtoa_r+0xb80>
 800b4d6:	488b      	ldr	r0, [pc, #556]	; (800b704 <_dtoa_r+0x30c>)
 800b4d8:	6018      	str	r0, [r3, #0]
 800b4da:	1e43      	subs	r3, r0, #1
 800b4dc:	9300      	str	r3, [sp, #0]
 800b4de:	e7dd      	b.n	800b49c <_dtoa_r+0xa4>
 800b4e0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800b4e4:	aa12      	add	r2, sp, #72	; 0x48
 800b4e6:	a913      	add	r1, sp, #76	; 0x4c
 800b4e8:	4620      	mov	r0, r4
 800b4ea:	f001 fce7 	bl	800cebc <__d2b>
 800b4ee:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b4f2:	4683      	mov	fp, r0
 800b4f4:	2d00      	cmp	r5, #0
 800b4f6:	d07c      	beq.n	800b5f2 <_dtoa_r+0x1fa>
 800b4f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4fa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800b4fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b502:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800b506:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b50a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b50e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b512:	4b7d      	ldr	r3, [pc, #500]	; (800b708 <_dtoa_r+0x310>)
 800b514:	2200      	movs	r2, #0
 800b516:	4630      	mov	r0, r6
 800b518:	4639      	mov	r1, r7
 800b51a:	f7f4 ff15 	bl	8000348 <__aeabi_dsub>
 800b51e:	a36e      	add	r3, pc, #440	; (adr r3, 800b6d8 <_dtoa_r+0x2e0>)
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f7f5 f8c8 	bl	80006b8 <__aeabi_dmul>
 800b528:	a36d      	add	r3, pc, #436	; (adr r3, 800b6e0 <_dtoa_r+0x2e8>)
 800b52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b52e:	f7f4 ff0d 	bl	800034c <__adddf3>
 800b532:	4606      	mov	r6, r0
 800b534:	4628      	mov	r0, r5
 800b536:	460f      	mov	r7, r1
 800b538:	f7f5 f854 	bl	80005e4 <__aeabi_i2d>
 800b53c:	a36a      	add	r3, pc, #424	; (adr r3, 800b6e8 <_dtoa_r+0x2f0>)
 800b53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b542:	f7f5 f8b9 	bl	80006b8 <__aeabi_dmul>
 800b546:	4602      	mov	r2, r0
 800b548:	460b      	mov	r3, r1
 800b54a:	4630      	mov	r0, r6
 800b54c:	4639      	mov	r1, r7
 800b54e:	f7f4 fefd 	bl	800034c <__adddf3>
 800b552:	4606      	mov	r6, r0
 800b554:	460f      	mov	r7, r1
 800b556:	f7f5 fb5f 	bl	8000c18 <__aeabi_d2iz>
 800b55a:	2200      	movs	r2, #0
 800b55c:	4682      	mov	sl, r0
 800b55e:	2300      	movs	r3, #0
 800b560:	4630      	mov	r0, r6
 800b562:	4639      	mov	r1, r7
 800b564:	f7f5 fb1a 	bl	8000b9c <__aeabi_dcmplt>
 800b568:	b148      	cbz	r0, 800b57e <_dtoa_r+0x186>
 800b56a:	4650      	mov	r0, sl
 800b56c:	f7f5 f83a 	bl	80005e4 <__aeabi_i2d>
 800b570:	4632      	mov	r2, r6
 800b572:	463b      	mov	r3, r7
 800b574:	f7f5 fb08 	bl	8000b88 <__aeabi_dcmpeq>
 800b578:	b908      	cbnz	r0, 800b57e <_dtoa_r+0x186>
 800b57a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b57e:	f1ba 0f16 	cmp.w	sl, #22
 800b582:	d854      	bhi.n	800b62e <_dtoa_r+0x236>
 800b584:	4b61      	ldr	r3, [pc, #388]	; (800b70c <_dtoa_r+0x314>)
 800b586:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b592:	f7f5 fb03 	bl	8000b9c <__aeabi_dcmplt>
 800b596:	2800      	cmp	r0, #0
 800b598:	d04b      	beq.n	800b632 <_dtoa_r+0x23a>
 800b59a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b59e:	2300      	movs	r3, #0
 800b5a0:	930e      	str	r3, [sp, #56]	; 0x38
 800b5a2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b5a4:	1b5d      	subs	r5, r3, r5
 800b5a6:	1e6b      	subs	r3, r5, #1
 800b5a8:	9304      	str	r3, [sp, #16]
 800b5aa:	bf43      	ittte	mi
 800b5ac:	2300      	movmi	r3, #0
 800b5ae:	f1c5 0801 	rsbmi	r8, r5, #1
 800b5b2:	9304      	strmi	r3, [sp, #16]
 800b5b4:	f04f 0800 	movpl.w	r8, #0
 800b5b8:	f1ba 0f00 	cmp.w	sl, #0
 800b5bc:	db3b      	blt.n	800b636 <_dtoa_r+0x23e>
 800b5be:	9b04      	ldr	r3, [sp, #16]
 800b5c0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800b5c4:	4453      	add	r3, sl
 800b5c6:	9304      	str	r3, [sp, #16]
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	9306      	str	r3, [sp, #24]
 800b5cc:	9b05      	ldr	r3, [sp, #20]
 800b5ce:	2b09      	cmp	r3, #9
 800b5d0:	d869      	bhi.n	800b6a6 <_dtoa_r+0x2ae>
 800b5d2:	2b05      	cmp	r3, #5
 800b5d4:	bfc4      	itt	gt
 800b5d6:	3b04      	subgt	r3, #4
 800b5d8:	9305      	strgt	r3, [sp, #20]
 800b5da:	9b05      	ldr	r3, [sp, #20]
 800b5dc:	f1a3 0302 	sub.w	r3, r3, #2
 800b5e0:	bfcc      	ite	gt
 800b5e2:	2500      	movgt	r5, #0
 800b5e4:	2501      	movle	r5, #1
 800b5e6:	2b03      	cmp	r3, #3
 800b5e8:	d869      	bhi.n	800b6be <_dtoa_r+0x2c6>
 800b5ea:	e8df f003 	tbb	[pc, r3]
 800b5ee:	4e2c      	.short	0x4e2c
 800b5f0:	5a4c      	.short	0x5a4c
 800b5f2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800b5f6:	441d      	add	r5, r3
 800b5f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b5fc:	2b20      	cmp	r3, #32
 800b5fe:	bfc1      	itttt	gt
 800b600:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b604:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b608:	fa09 f303 	lslgt.w	r3, r9, r3
 800b60c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b610:	bfda      	itte	le
 800b612:	f1c3 0320 	rsble	r3, r3, #32
 800b616:	fa06 f003 	lslle.w	r0, r6, r3
 800b61a:	4318      	orrgt	r0, r3
 800b61c:	f7f4 ffd2 	bl	80005c4 <__aeabi_ui2d>
 800b620:	2301      	movs	r3, #1
 800b622:	4606      	mov	r6, r0
 800b624:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b628:	3d01      	subs	r5, #1
 800b62a:	9310      	str	r3, [sp, #64]	; 0x40
 800b62c:	e771      	b.n	800b512 <_dtoa_r+0x11a>
 800b62e:	2301      	movs	r3, #1
 800b630:	e7b6      	b.n	800b5a0 <_dtoa_r+0x1a8>
 800b632:	900e      	str	r0, [sp, #56]	; 0x38
 800b634:	e7b5      	b.n	800b5a2 <_dtoa_r+0x1aa>
 800b636:	f1ca 0300 	rsb	r3, sl, #0
 800b63a:	9306      	str	r3, [sp, #24]
 800b63c:	2300      	movs	r3, #0
 800b63e:	eba8 080a 	sub.w	r8, r8, sl
 800b642:	930d      	str	r3, [sp, #52]	; 0x34
 800b644:	e7c2      	b.n	800b5cc <_dtoa_r+0x1d4>
 800b646:	2300      	movs	r3, #0
 800b648:	9308      	str	r3, [sp, #32]
 800b64a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	dc39      	bgt.n	800b6c4 <_dtoa_r+0x2cc>
 800b650:	f04f 0901 	mov.w	r9, #1
 800b654:	f8cd 9004 	str.w	r9, [sp, #4]
 800b658:	464b      	mov	r3, r9
 800b65a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800b65e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b660:	2200      	movs	r2, #0
 800b662:	6042      	str	r2, [r0, #4]
 800b664:	2204      	movs	r2, #4
 800b666:	f102 0614 	add.w	r6, r2, #20
 800b66a:	429e      	cmp	r6, r3
 800b66c:	6841      	ldr	r1, [r0, #4]
 800b66e:	d92f      	bls.n	800b6d0 <_dtoa_r+0x2d8>
 800b670:	4620      	mov	r0, r4
 800b672:	f001 f83b 	bl	800c6ec <_Balloc>
 800b676:	9000      	str	r0, [sp, #0]
 800b678:	2800      	cmp	r0, #0
 800b67a:	d14b      	bne.n	800b714 <_dtoa_r+0x31c>
 800b67c:	4b24      	ldr	r3, [pc, #144]	; (800b710 <_dtoa_r+0x318>)
 800b67e:	4602      	mov	r2, r0
 800b680:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b684:	e6d1      	b.n	800b42a <_dtoa_r+0x32>
 800b686:	2301      	movs	r3, #1
 800b688:	e7de      	b.n	800b648 <_dtoa_r+0x250>
 800b68a:	2300      	movs	r3, #0
 800b68c:	9308      	str	r3, [sp, #32]
 800b68e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b690:	eb0a 0903 	add.w	r9, sl, r3
 800b694:	f109 0301 	add.w	r3, r9, #1
 800b698:	2b01      	cmp	r3, #1
 800b69a:	9301      	str	r3, [sp, #4]
 800b69c:	bfb8      	it	lt
 800b69e:	2301      	movlt	r3, #1
 800b6a0:	e7dd      	b.n	800b65e <_dtoa_r+0x266>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e7f2      	b.n	800b68c <_dtoa_r+0x294>
 800b6a6:	2501      	movs	r5, #1
 800b6a8:	2300      	movs	r3, #0
 800b6aa:	9305      	str	r3, [sp, #20]
 800b6ac:	9508      	str	r5, [sp, #32]
 800b6ae:	f04f 39ff 	mov.w	r9, #4294967295
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f8cd 9004 	str.w	r9, [sp, #4]
 800b6b8:	2312      	movs	r3, #18
 800b6ba:	9209      	str	r2, [sp, #36]	; 0x24
 800b6bc:	e7cf      	b.n	800b65e <_dtoa_r+0x266>
 800b6be:	2301      	movs	r3, #1
 800b6c0:	9308      	str	r3, [sp, #32]
 800b6c2:	e7f4      	b.n	800b6ae <_dtoa_r+0x2b6>
 800b6c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800b6c8:	f8cd 9004 	str.w	r9, [sp, #4]
 800b6cc:	464b      	mov	r3, r9
 800b6ce:	e7c6      	b.n	800b65e <_dtoa_r+0x266>
 800b6d0:	3101      	adds	r1, #1
 800b6d2:	6041      	str	r1, [r0, #4]
 800b6d4:	0052      	lsls	r2, r2, #1
 800b6d6:	e7c6      	b.n	800b666 <_dtoa_r+0x26e>
 800b6d8:	636f4361 	.word	0x636f4361
 800b6dc:	3fd287a7 	.word	0x3fd287a7
 800b6e0:	8b60c8b3 	.word	0x8b60c8b3
 800b6e4:	3fc68a28 	.word	0x3fc68a28
 800b6e8:	509f79fb 	.word	0x509f79fb
 800b6ec:	3fd34413 	.word	0x3fd34413
 800b6f0:	08022fde 	.word	0x08022fde
 800b6f4:	08022ff5 	.word	0x08022ff5
 800b6f8:	7ff00000 	.word	0x7ff00000
 800b6fc:	08022fda 	.word	0x08022fda
 800b700:	08022fd1 	.word	0x08022fd1
 800b704:	08022e55 	.word	0x08022e55
 800b708:	3ff80000 	.word	0x3ff80000
 800b70c:	08023170 	.word	0x08023170
 800b710:	08023054 	.word	0x08023054
 800b714:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b716:	9a00      	ldr	r2, [sp, #0]
 800b718:	601a      	str	r2, [r3, #0]
 800b71a:	9b01      	ldr	r3, [sp, #4]
 800b71c:	2b0e      	cmp	r3, #14
 800b71e:	f200 80ad 	bhi.w	800b87c <_dtoa_r+0x484>
 800b722:	2d00      	cmp	r5, #0
 800b724:	f000 80aa 	beq.w	800b87c <_dtoa_r+0x484>
 800b728:	f1ba 0f00 	cmp.w	sl, #0
 800b72c:	dd36      	ble.n	800b79c <_dtoa_r+0x3a4>
 800b72e:	4ac3      	ldr	r2, [pc, #780]	; (800ba3c <_dtoa_r+0x644>)
 800b730:	f00a 030f 	and.w	r3, sl, #15
 800b734:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b738:	ed93 7b00 	vldr	d7, [r3]
 800b73c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b740:	ea4f 172a 	mov.w	r7, sl, asr #4
 800b744:	eeb0 8a47 	vmov.f32	s16, s14
 800b748:	eef0 8a67 	vmov.f32	s17, s15
 800b74c:	d016      	beq.n	800b77c <_dtoa_r+0x384>
 800b74e:	4bbc      	ldr	r3, [pc, #752]	; (800ba40 <_dtoa_r+0x648>)
 800b750:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b754:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b758:	f7f5 f8d8 	bl	800090c <__aeabi_ddiv>
 800b75c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b760:	f007 070f 	and.w	r7, r7, #15
 800b764:	2503      	movs	r5, #3
 800b766:	4eb6      	ldr	r6, [pc, #728]	; (800ba40 <_dtoa_r+0x648>)
 800b768:	b957      	cbnz	r7, 800b780 <_dtoa_r+0x388>
 800b76a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b76e:	ec53 2b18 	vmov	r2, r3, d8
 800b772:	f7f5 f8cb 	bl	800090c <__aeabi_ddiv>
 800b776:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b77a:	e029      	b.n	800b7d0 <_dtoa_r+0x3d8>
 800b77c:	2502      	movs	r5, #2
 800b77e:	e7f2      	b.n	800b766 <_dtoa_r+0x36e>
 800b780:	07f9      	lsls	r1, r7, #31
 800b782:	d508      	bpl.n	800b796 <_dtoa_r+0x39e>
 800b784:	ec51 0b18 	vmov	r0, r1, d8
 800b788:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b78c:	f7f4 ff94 	bl	80006b8 <__aeabi_dmul>
 800b790:	ec41 0b18 	vmov	d8, r0, r1
 800b794:	3501      	adds	r5, #1
 800b796:	107f      	asrs	r7, r7, #1
 800b798:	3608      	adds	r6, #8
 800b79a:	e7e5      	b.n	800b768 <_dtoa_r+0x370>
 800b79c:	f000 80a6 	beq.w	800b8ec <_dtoa_r+0x4f4>
 800b7a0:	f1ca 0600 	rsb	r6, sl, #0
 800b7a4:	4ba5      	ldr	r3, [pc, #660]	; (800ba3c <_dtoa_r+0x644>)
 800b7a6:	4fa6      	ldr	r7, [pc, #664]	; (800ba40 <_dtoa_r+0x648>)
 800b7a8:	f006 020f 	and.w	r2, r6, #15
 800b7ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7b4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b7b8:	f7f4 ff7e 	bl	80006b8 <__aeabi_dmul>
 800b7bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b7c0:	1136      	asrs	r6, r6, #4
 800b7c2:	2300      	movs	r3, #0
 800b7c4:	2502      	movs	r5, #2
 800b7c6:	2e00      	cmp	r6, #0
 800b7c8:	f040 8085 	bne.w	800b8d6 <_dtoa_r+0x4de>
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d1d2      	bne.n	800b776 <_dtoa_r+0x37e>
 800b7d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f000 808c 	beq.w	800b8f0 <_dtoa_r+0x4f8>
 800b7d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b7dc:	4b99      	ldr	r3, [pc, #612]	; (800ba44 <_dtoa_r+0x64c>)
 800b7de:	2200      	movs	r2, #0
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	4639      	mov	r1, r7
 800b7e4:	f7f5 f9da 	bl	8000b9c <__aeabi_dcmplt>
 800b7e8:	2800      	cmp	r0, #0
 800b7ea:	f000 8081 	beq.w	800b8f0 <_dtoa_r+0x4f8>
 800b7ee:	9b01      	ldr	r3, [sp, #4]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d07d      	beq.n	800b8f0 <_dtoa_r+0x4f8>
 800b7f4:	f1b9 0f00 	cmp.w	r9, #0
 800b7f8:	dd3c      	ble.n	800b874 <_dtoa_r+0x47c>
 800b7fa:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b7fe:	9307      	str	r3, [sp, #28]
 800b800:	2200      	movs	r2, #0
 800b802:	4b91      	ldr	r3, [pc, #580]	; (800ba48 <_dtoa_r+0x650>)
 800b804:	4630      	mov	r0, r6
 800b806:	4639      	mov	r1, r7
 800b808:	f7f4 ff56 	bl	80006b8 <__aeabi_dmul>
 800b80c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b810:	3501      	adds	r5, #1
 800b812:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800b816:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b81a:	4628      	mov	r0, r5
 800b81c:	f7f4 fee2 	bl	80005e4 <__aeabi_i2d>
 800b820:	4632      	mov	r2, r6
 800b822:	463b      	mov	r3, r7
 800b824:	f7f4 ff48 	bl	80006b8 <__aeabi_dmul>
 800b828:	4b88      	ldr	r3, [pc, #544]	; (800ba4c <_dtoa_r+0x654>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	f7f4 fd8e 	bl	800034c <__adddf3>
 800b830:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b834:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b838:	9303      	str	r3, [sp, #12]
 800b83a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d15c      	bne.n	800b8fa <_dtoa_r+0x502>
 800b840:	4b83      	ldr	r3, [pc, #524]	; (800ba50 <_dtoa_r+0x658>)
 800b842:	2200      	movs	r2, #0
 800b844:	4630      	mov	r0, r6
 800b846:	4639      	mov	r1, r7
 800b848:	f7f4 fd7e 	bl	8000348 <__aeabi_dsub>
 800b84c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b850:	4606      	mov	r6, r0
 800b852:	460f      	mov	r7, r1
 800b854:	f7f5 f9c0 	bl	8000bd8 <__aeabi_dcmpgt>
 800b858:	2800      	cmp	r0, #0
 800b85a:	f040 8296 	bne.w	800bd8a <_dtoa_r+0x992>
 800b85e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b862:	4630      	mov	r0, r6
 800b864:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b868:	4639      	mov	r1, r7
 800b86a:	f7f5 f997 	bl	8000b9c <__aeabi_dcmplt>
 800b86e:	2800      	cmp	r0, #0
 800b870:	f040 8288 	bne.w	800bd84 <_dtoa_r+0x98c>
 800b874:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b878:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b87c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b87e:	2b00      	cmp	r3, #0
 800b880:	f2c0 8158 	blt.w	800bb34 <_dtoa_r+0x73c>
 800b884:	f1ba 0f0e 	cmp.w	sl, #14
 800b888:	f300 8154 	bgt.w	800bb34 <_dtoa_r+0x73c>
 800b88c:	4b6b      	ldr	r3, [pc, #428]	; (800ba3c <_dtoa_r+0x644>)
 800b88e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b892:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f280 80e3 	bge.w	800ba64 <_dtoa_r+0x66c>
 800b89e:	9b01      	ldr	r3, [sp, #4]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	f300 80df 	bgt.w	800ba64 <_dtoa_r+0x66c>
 800b8a6:	f040 826d 	bne.w	800bd84 <_dtoa_r+0x98c>
 800b8aa:	4b69      	ldr	r3, [pc, #420]	; (800ba50 <_dtoa_r+0x658>)
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	4640      	mov	r0, r8
 800b8b0:	4649      	mov	r1, r9
 800b8b2:	f7f4 ff01 	bl	80006b8 <__aeabi_dmul>
 800b8b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b8ba:	f7f5 f983 	bl	8000bc4 <__aeabi_dcmpge>
 800b8be:	9e01      	ldr	r6, [sp, #4]
 800b8c0:	4637      	mov	r7, r6
 800b8c2:	2800      	cmp	r0, #0
 800b8c4:	f040 8243 	bne.w	800bd4e <_dtoa_r+0x956>
 800b8c8:	9d00      	ldr	r5, [sp, #0]
 800b8ca:	2331      	movs	r3, #49	; 0x31
 800b8cc:	f805 3b01 	strb.w	r3, [r5], #1
 800b8d0:	f10a 0a01 	add.w	sl, sl, #1
 800b8d4:	e23f      	b.n	800bd56 <_dtoa_r+0x95e>
 800b8d6:	07f2      	lsls	r2, r6, #31
 800b8d8:	d505      	bpl.n	800b8e6 <_dtoa_r+0x4ee>
 800b8da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b8de:	f7f4 feeb 	bl	80006b8 <__aeabi_dmul>
 800b8e2:	3501      	adds	r5, #1
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	1076      	asrs	r6, r6, #1
 800b8e8:	3708      	adds	r7, #8
 800b8ea:	e76c      	b.n	800b7c6 <_dtoa_r+0x3ce>
 800b8ec:	2502      	movs	r5, #2
 800b8ee:	e76f      	b.n	800b7d0 <_dtoa_r+0x3d8>
 800b8f0:	9b01      	ldr	r3, [sp, #4]
 800b8f2:	f8cd a01c 	str.w	sl, [sp, #28]
 800b8f6:	930c      	str	r3, [sp, #48]	; 0x30
 800b8f8:	e78d      	b.n	800b816 <_dtoa_r+0x41e>
 800b8fa:	9900      	ldr	r1, [sp, #0]
 800b8fc:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b8fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b900:	4b4e      	ldr	r3, [pc, #312]	; (800ba3c <_dtoa_r+0x644>)
 800b902:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b906:	4401      	add	r1, r0
 800b908:	9102      	str	r1, [sp, #8]
 800b90a:	9908      	ldr	r1, [sp, #32]
 800b90c:	eeb0 8a47 	vmov.f32	s16, s14
 800b910:	eef0 8a67 	vmov.f32	s17, s15
 800b914:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b918:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b91c:	2900      	cmp	r1, #0
 800b91e:	d045      	beq.n	800b9ac <_dtoa_r+0x5b4>
 800b920:	494c      	ldr	r1, [pc, #304]	; (800ba54 <_dtoa_r+0x65c>)
 800b922:	2000      	movs	r0, #0
 800b924:	f7f4 fff2 	bl	800090c <__aeabi_ddiv>
 800b928:	ec53 2b18 	vmov	r2, r3, d8
 800b92c:	f7f4 fd0c 	bl	8000348 <__aeabi_dsub>
 800b930:	9d00      	ldr	r5, [sp, #0]
 800b932:	ec41 0b18 	vmov	d8, r0, r1
 800b936:	4639      	mov	r1, r7
 800b938:	4630      	mov	r0, r6
 800b93a:	f7f5 f96d 	bl	8000c18 <__aeabi_d2iz>
 800b93e:	900c      	str	r0, [sp, #48]	; 0x30
 800b940:	f7f4 fe50 	bl	80005e4 <__aeabi_i2d>
 800b944:	4602      	mov	r2, r0
 800b946:	460b      	mov	r3, r1
 800b948:	4630      	mov	r0, r6
 800b94a:	4639      	mov	r1, r7
 800b94c:	f7f4 fcfc 	bl	8000348 <__aeabi_dsub>
 800b950:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b952:	3330      	adds	r3, #48	; 0x30
 800b954:	f805 3b01 	strb.w	r3, [r5], #1
 800b958:	ec53 2b18 	vmov	r2, r3, d8
 800b95c:	4606      	mov	r6, r0
 800b95e:	460f      	mov	r7, r1
 800b960:	f7f5 f91c 	bl	8000b9c <__aeabi_dcmplt>
 800b964:	2800      	cmp	r0, #0
 800b966:	d165      	bne.n	800ba34 <_dtoa_r+0x63c>
 800b968:	4632      	mov	r2, r6
 800b96a:	463b      	mov	r3, r7
 800b96c:	4935      	ldr	r1, [pc, #212]	; (800ba44 <_dtoa_r+0x64c>)
 800b96e:	2000      	movs	r0, #0
 800b970:	f7f4 fcea 	bl	8000348 <__aeabi_dsub>
 800b974:	ec53 2b18 	vmov	r2, r3, d8
 800b978:	f7f5 f910 	bl	8000b9c <__aeabi_dcmplt>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	f040 80b9 	bne.w	800baf4 <_dtoa_r+0x6fc>
 800b982:	9b02      	ldr	r3, [sp, #8]
 800b984:	429d      	cmp	r5, r3
 800b986:	f43f af75 	beq.w	800b874 <_dtoa_r+0x47c>
 800b98a:	4b2f      	ldr	r3, [pc, #188]	; (800ba48 <_dtoa_r+0x650>)
 800b98c:	ec51 0b18 	vmov	r0, r1, d8
 800b990:	2200      	movs	r2, #0
 800b992:	f7f4 fe91 	bl	80006b8 <__aeabi_dmul>
 800b996:	4b2c      	ldr	r3, [pc, #176]	; (800ba48 <_dtoa_r+0x650>)
 800b998:	ec41 0b18 	vmov	d8, r0, r1
 800b99c:	2200      	movs	r2, #0
 800b99e:	4630      	mov	r0, r6
 800b9a0:	4639      	mov	r1, r7
 800b9a2:	f7f4 fe89 	bl	80006b8 <__aeabi_dmul>
 800b9a6:	4606      	mov	r6, r0
 800b9a8:	460f      	mov	r7, r1
 800b9aa:	e7c4      	b.n	800b936 <_dtoa_r+0x53e>
 800b9ac:	ec51 0b17 	vmov	r0, r1, d7
 800b9b0:	f7f4 fe82 	bl	80006b8 <__aeabi_dmul>
 800b9b4:	9b02      	ldr	r3, [sp, #8]
 800b9b6:	9d00      	ldr	r5, [sp, #0]
 800b9b8:	930c      	str	r3, [sp, #48]	; 0x30
 800b9ba:	ec41 0b18 	vmov	d8, r0, r1
 800b9be:	4639      	mov	r1, r7
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f7f5 f929 	bl	8000c18 <__aeabi_d2iz>
 800b9c6:	9011      	str	r0, [sp, #68]	; 0x44
 800b9c8:	f7f4 fe0c 	bl	80005e4 <__aeabi_i2d>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	4630      	mov	r0, r6
 800b9d2:	4639      	mov	r1, r7
 800b9d4:	f7f4 fcb8 	bl	8000348 <__aeabi_dsub>
 800b9d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b9da:	3330      	adds	r3, #48	; 0x30
 800b9dc:	f805 3b01 	strb.w	r3, [r5], #1
 800b9e0:	9b02      	ldr	r3, [sp, #8]
 800b9e2:	429d      	cmp	r5, r3
 800b9e4:	4606      	mov	r6, r0
 800b9e6:	460f      	mov	r7, r1
 800b9e8:	f04f 0200 	mov.w	r2, #0
 800b9ec:	d134      	bne.n	800ba58 <_dtoa_r+0x660>
 800b9ee:	4b19      	ldr	r3, [pc, #100]	; (800ba54 <_dtoa_r+0x65c>)
 800b9f0:	ec51 0b18 	vmov	r0, r1, d8
 800b9f4:	f7f4 fcaa 	bl	800034c <__adddf3>
 800b9f8:	4602      	mov	r2, r0
 800b9fa:	460b      	mov	r3, r1
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	4639      	mov	r1, r7
 800ba00:	f7f5 f8ea 	bl	8000bd8 <__aeabi_dcmpgt>
 800ba04:	2800      	cmp	r0, #0
 800ba06:	d175      	bne.n	800baf4 <_dtoa_r+0x6fc>
 800ba08:	ec53 2b18 	vmov	r2, r3, d8
 800ba0c:	4911      	ldr	r1, [pc, #68]	; (800ba54 <_dtoa_r+0x65c>)
 800ba0e:	2000      	movs	r0, #0
 800ba10:	f7f4 fc9a 	bl	8000348 <__aeabi_dsub>
 800ba14:	4602      	mov	r2, r0
 800ba16:	460b      	mov	r3, r1
 800ba18:	4630      	mov	r0, r6
 800ba1a:	4639      	mov	r1, r7
 800ba1c:	f7f5 f8be 	bl	8000b9c <__aeabi_dcmplt>
 800ba20:	2800      	cmp	r0, #0
 800ba22:	f43f af27 	beq.w	800b874 <_dtoa_r+0x47c>
 800ba26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ba28:	1e6b      	subs	r3, r5, #1
 800ba2a:	930c      	str	r3, [sp, #48]	; 0x30
 800ba2c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ba30:	2b30      	cmp	r3, #48	; 0x30
 800ba32:	d0f8      	beq.n	800ba26 <_dtoa_r+0x62e>
 800ba34:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ba38:	e04a      	b.n	800bad0 <_dtoa_r+0x6d8>
 800ba3a:	bf00      	nop
 800ba3c:	08023170 	.word	0x08023170
 800ba40:	08023148 	.word	0x08023148
 800ba44:	3ff00000 	.word	0x3ff00000
 800ba48:	40240000 	.word	0x40240000
 800ba4c:	401c0000 	.word	0x401c0000
 800ba50:	40140000 	.word	0x40140000
 800ba54:	3fe00000 	.word	0x3fe00000
 800ba58:	4baf      	ldr	r3, [pc, #700]	; (800bd18 <_dtoa_r+0x920>)
 800ba5a:	f7f4 fe2d 	bl	80006b8 <__aeabi_dmul>
 800ba5e:	4606      	mov	r6, r0
 800ba60:	460f      	mov	r7, r1
 800ba62:	e7ac      	b.n	800b9be <_dtoa_r+0x5c6>
 800ba64:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ba68:	9d00      	ldr	r5, [sp, #0]
 800ba6a:	4642      	mov	r2, r8
 800ba6c:	464b      	mov	r3, r9
 800ba6e:	4630      	mov	r0, r6
 800ba70:	4639      	mov	r1, r7
 800ba72:	f7f4 ff4b 	bl	800090c <__aeabi_ddiv>
 800ba76:	f7f5 f8cf 	bl	8000c18 <__aeabi_d2iz>
 800ba7a:	9002      	str	r0, [sp, #8]
 800ba7c:	f7f4 fdb2 	bl	80005e4 <__aeabi_i2d>
 800ba80:	4642      	mov	r2, r8
 800ba82:	464b      	mov	r3, r9
 800ba84:	f7f4 fe18 	bl	80006b8 <__aeabi_dmul>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	4630      	mov	r0, r6
 800ba8e:	4639      	mov	r1, r7
 800ba90:	f7f4 fc5a 	bl	8000348 <__aeabi_dsub>
 800ba94:	9e02      	ldr	r6, [sp, #8]
 800ba96:	9f01      	ldr	r7, [sp, #4]
 800ba98:	3630      	adds	r6, #48	; 0x30
 800ba9a:	f805 6b01 	strb.w	r6, [r5], #1
 800ba9e:	9e00      	ldr	r6, [sp, #0]
 800baa0:	1bae      	subs	r6, r5, r6
 800baa2:	42b7      	cmp	r7, r6
 800baa4:	4602      	mov	r2, r0
 800baa6:	460b      	mov	r3, r1
 800baa8:	d137      	bne.n	800bb1a <_dtoa_r+0x722>
 800baaa:	f7f4 fc4f 	bl	800034c <__adddf3>
 800baae:	4642      	mov	r2, r8
 800bab0:	464b      	mov	r3, r9
 800bab2:	4606      	mov	r6, r0
 800bab4:	460f      	mov	r7, r1
 800bab6:	f7f5 f88f 	bl	8000bd8 <__aeabi_dcmpgt>
 800baba:	b9c8      	cbnz	r0, 800baf0 <_dtoa_r+0x6f8>
 800babc:	4642      	mov	r2, r8
 800babe:	464b      	mov	r3, r9
 800bac0:	4630      	mov	r0, r6
 800bac2:	4639      	mov	r1, r7
 800bac4:	f7f5 f860 	bl	8000b88 <__aeabi_dcmpeq>
 800bac8:	b110      	cbz	r0, 800bad0 <_dtoa_r+0x6d8>
 800baca:	9b02      	ldr	r3, [sp, #8]
 800bacc:	07d9      	lsls	r1, r3, #31
 800bace:	d40f      	bmi.n	800baf0 <_dtoa_r+0x6f8>
 800bad0:	4620      	mov	r0, r4
 800bad2:	4659      	mov	r1, fp
 800bad4:	f000 fe4a 	bl	800c76c <_Bfree>
 800bad8:	2300      	movs	r3, #0
 800bada:	702b      	strb	r3, [r5, #0]
 800badc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bade:	f10a 0001 	add.w	r0, sl, #1
 800bae2:	6018      	str	r0, [r3, #0]
 800bae4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	f43f acd8 	beq.w	800b49c <_dtoa_r+0xa4>
 800baec:	601d      	str	r5, [r3, #0]
 800baee:	e4d5      	b.n	800b49c <_dtoa_r+0xa4>
 800baf0:	f8cd a01c 	str.w	sl, [sp, #28]
 800baf4:	462b      	mov	r3, r5
 800baf6:	461d      	mov	r5, r3
 800baf8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bafc:	2a39      	cmp	r2, #57	; 0x39
 800bafe:	d108      	bne.n	800bb12 <_dtoa_r+0x71a>
 800bb00:	9a00      	ldr	r2, [sp, #0]
 800bb02:	429a      	cmp	r2, r3
 800bb04:	d1f7      	bne.n	800baf6 <_dtoa_r+0x6fe>
 800bb06:	9a07      	ldr	r2, [sp, #28]
 800bb08:	9900      	ldr	r1, [sp, #0]
 800bb0a:	3201      	adds	r2, #1
 800bb0c:	9207      	str	r2, [sp, #28]
 800bb0e:	2230      	movs	r2, #48	; 0x30
 800bb10:	700a      	strb	r2, [r1, #0]
 800bb12:	781a      	ldrb	r2, [r3, #0]
 800bb14:	3201      	adds	r2, #1
 800bb16:	701a      	strb	r2, [r3, #0]
 800bb18:	e78c      	b.n	800ba34 <_dtoa_r+0x63c>
 800bb1a:	4b7f      	ldr	r3, [pc, #508]	; (800bd18 <_dtoa_r+0x920>)
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	f7f4 fdcb 	bl	80006b8 <__aeabi_dmul>
 800bb22:	2200      	movs	r2, #0
 800bb24:	2300      	movs	r3, #0
 800bb26:	4606      	mov	r6, r0
 800bb28:	460f      	mov	r7, r1
 800bb2a:	f7f5 f82d 	bl	8000b88 <__aeabi_dcmpeq>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d09b      	beq.n	800ba6a <_dtoa_r+0x672>
 800bb32:	e7cd      	b.n	800bad0 <_dtoa_r+0x6d8>
 800bb34:	9a08      	ldr	r2, [sp, #32]
 800bb36:	2a00      	cmp	r2, #0
 800bb38:	f000 80c4 	beq.w	800bcc4 <_dtoa_r+0x8cc>
 800bb3c:	9a05      	ldr	r2, [sp, #20]
 800bb3e:	2a01      	cmp	r2, #1
 800bb40:	f300 80a8 	bgt.w	800bc94 <_dtoa_r+0x89c>
 800bb44:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bb46:	2a00      	cmp	r2, #0
 800bb48:	f000 80a0 	beq.w	800bc8c <_dtoa_r+0x894>
 800bb4c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bb50:	9e06      	ldr	r6, [sp, #24]
 800bb52:	4645      	mov	r5, r8
 800bb54:	9a04      	ldr	r2, [sp, #16]
 800bb56:	2101      	movs	r1, #1
 800bb58:	441a      	add	r2, r3
 800bb5a:	4620      	mov	r0, r4
 800bb5c:	4498      	add	r8, r3
 800bb5e:	9204      	str	r2, [sp, #16]
 800bb60:	f000 ff0a 	bl	800c978 <__i2b>
 800bb64:	4607      	mov	r7, r0
 800bb66:	2d00      	cmp	r5, #0
 800bb68:	dd0b      	ble.n	800bb82 <_dtoa_r+0x78a>
 800bb6a:	9b04      	ldr	r3, [sp, #16]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	dd08      	ble.n	800bb82 <_dtoa_r+0x78a>
 800bb70:	42ab      	cmp	r3, r5
 800bb72:	9a04      	ldr	r2, [sp, #16]
 800bb74:	bfa8      	it	ge
 800bb76:	462b      	movge	r3, r5
 800bb78:	eba8 0803 	sub.w	r8, r8, r3
 800bb7c:	1aed      	subs	r5, r5, r3
 800bb7e:	1ad3      	subs	r3, r2, r3
 800bb80:	9304      	str	r3, [sp, #16]
 800bb82:	9b06      	ldr	r3, [sp, #24]
 800bb84:	b1fb      	cbz	r3, 800bbc6 <_dtoa_r+0x7ce>
 800bb86:	9b08      	ldr	r3, [sp, #32]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	f000 809f 	beq.w	800bccc <_dtoa_r+0x8d4>
 800bb8e:	2e00      	cmp	r6, #0
 800bb90:	dd11      	ble.n	800bbb6 <_dtoa_r+0x7be>
 800bb92:	4639      	mov	r1, r7
 800bb94:	4632      	mov	r2, r6
 800bb96:	4620      	mov	r0, r4
 800bb98:	f000 ffaa 	bl	800caf0 <__pow5mult>
 800bb9c:	465a      	mov	r2, fp
 800bb9e:	4601      	mov	r1, r0
 800bba0:	4607      	mov	r7, r0
 800bba2:	4620      	mov	r0, r4
 800bba4:	f000 fefe 	bl	800c9a4 <__multiply>
 800bba8:	4659      	mov	r1, fp
 800bbaa:	9007      	str	r0, [sp, #28]
 800bbac:	4620      	mov	r0, r4
 800bbae:	f000 fddd 	bl	800c76c <_Bfree>
 800bbb2:	9b07      	ldr	r3, [sp, #28]
 800bbb4:	469b      	mov	fp, r3
 800bbb6:	9b06      	ldr	r3, [sp, #24]
 800bbb8:	1b9a      	subs	r2, r3, r6
 800bbba:	d004      	beq.n	800bbc6 <_dtoa_r+0x7ce>
 800bbbc:	4659      	mov	r1, fp
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	f000 ff96 	bl	800caf0 <__pow5mult>
 800bbc4:	4683      	mov	fp, r0
 800bbc6:	2101      	movs	r1, #1
 800bbc8:	4620      	mov	r0, r4
 800bbca:	f000 fed5 	bl	800c978 <__i2b>
 800bbce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	dd7c      	ble.n	800bcd0 <_dtoa_r+0x8d8>
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	4601      	mov	r1, r0
 800bbda:	4620      	mov	r0, r4
 800bbdc:	f000 ff88 	bl	800caf0 <__pow5mult>
 800bbe0:	9b05      	ldr	r3, [sp, #20]
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	4606      	mov	r6, r0
 800bbe6:	dd76      	ble.n	800bcd6 <_dtoa_r+0x8de>
 800bbe8:	2300      	movs	r3, #0
 800bbea:	9306      	str	r3, [sp, #24]
 800bbec:	6933      	ldr	r3, [r6, #16]
 800bbee:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bbf2:	6918      	ldr	r0, [r3, #16]
 800bbf4:	f000 fe70 	bl	800c8d8 <__hi0bits>
 800bbf8:	f1c0 0020 	rsb	r0, r0, #32
 800bbfc:	9b04      	ldr	r3, [sp, #16]
 800bbfe:	4418      	add	r0, r3
 800bc00:	f010 001f 	ands.w	r0, r0, #31
 800bc04:	f000 8086 	beq.w	800bd14 <_dtoa_r+0x91c>
 800bc08:	f1c0 0320 	rsb	r3, r0, #32
 800bc0c:	2b04      	cmp	r3, #4
 800bc0e:	dd7f      	ble.n	800bd10 <_dtoa_r+0x918>
 800bc10:	f1c0 001c 	rsb	r0, r0, #28
 800bc14:	9b04      	ldr	r3, [sp, #16]
 800bc16:	4403      	add	r3, r0
 800bc18:	4480      	add	r8, r0
 800bc1a:	4405      	add	r5, r0
 800bc1c:	9304      	str	r3, [sp, #16]
 800bc1e:	f1b8 0f00 	cmp.w	r8, #0
 800bc22:	dd05      	ble.n	800bc30 <_dtoa_r+0x838>
 800bc24:	4659      	mov	r1, fp
 800bc26:	4642      	mov	r2, r8
 800bc28:	4620      	mov	r0, r4
 800bc2a:	f000 ffbb 	bl	800cba4 <__lshift>
 800bc2e:	4683      	mov	fp, r0
 800bc30:	9b04      	ldr	r3, [sp, #16]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	dd05      	ble.n	800bc42 <_dtoa_r+0x84a>
 800bc36:	4631      	mov	r1, r6
 800bc38:	461a      	mov	r2, r3
 800bc3a:	4620      	mov	r0, r4
 800bc3c:	f000 ffb2 	bl	800cba4 <__lshift>
 800bc40:	4606      	mov	r6, r0
 800bc42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d069      	beq.n	800bd1c <_dtoa_r+0x924>
 800bc48:	4631      	mov	r1, r6
 800bc4a:	4658      	mov	r0, fp
 800bc4c:	f001 f816 	bl	800cc7c <__mcmp>
 800bc50:	2800      	cmp	r0, #0
 800bc52:	da63      	bge.n	800bd1c <_dtoa_r+0x924>
 800bc54:	2300      	movs	r3, #0
 800bc56:	4659      	mov	r1, fp
 800bc58:	220a      	movs	r2, #10
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f000 fda8 	bl	800c7b0 <__multadd>
 800bc60:	9b08      	ldr	r3, [sp, #32]
 800bc62:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bc66:	4683      	mov	fp, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f000 818f 	beq.w	800bf8c <_dtoa_r+0xb94>
 800bc6e:	4639      	mov	r1, r7
 800bc70:	2300      	movs	r3, #0
 800bc72:	220a      	movs	r2, #10
 800bc74:	4620      	mov	r0, r4
 800bc76:	f000 fd9b 	bl	800c7b0 <__multadd>
 800bc7a:	f1b9 0f00 	cmp.w	r9, #0
 800bc7e:	4607      	mov	r7, r0
 800bc80:	f300 808e 	bgt.w	800bda0 <_dtoa_r+0x9a8>
 800bc84:	9b05      	ldr	r3, [sp, #20]
 800bc86:	2b02      	cmp	r3, #2
 800bc88:	dc50      	bgt.n	800bd2c <_dtoa_r+0x934>
 800bc8a:	e089      	b.n	800bda0 <_dtoa_r+0x9a8>
 800bc8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bc8e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bc92:	e75d      	b.n	800bb50 <_dtoa_r+0x758>
 800bc94:	9b01      	ldr	r3, [sp, #4]
 800bc96:	1e5e      	subs	r6, r3, #1
 800bc98:	9b06      	ldr	r3, [sp, #24]
 800bc9a:	42b3      	cmp	r3, r6
 800bc9c:	bfbf      	itttt	lt
 800bc9e:	9b06      	ldrlt	r3, [sp, #24]
 800bca0:	9606      	strlt	r6, [sp, #24]
 800bca2:	1af2      	sublt	r2, r6, r3
 800bca4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800bca6:	bfb6      	itet	lt
 800bca8:	189b      	addlt	r3, r3, r2
 800bcaa:	1b9e      	subge	r6, r3, r6
 800bcac:	930d      	strlt	r3, [sp, #52]	; 0x34
 800bcae:	9b01      	ldr	r3, [sp, #4]
 800bcb0:	bfb8      	it	lt
 800bcb2:	2600      	movlt	r6, #0
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	bfb5      	itete	lt
 800bcb8:	eba8 0503 	sublt.w	r5, r8, r3
 800bcbc:	9b01      	ldrge	r3, [sp, #4]
 800bcbe:	2300      	movlt	r3, #0
 800bcc0:	4645      	movge	r5, r8
 800bcc2:	e747      	b.n	800bb54 <_dtoa_r+0x75c>
 800bcc4:	9e06      	ldr	r6, [sp, #24]
 800bcc6:	9f08      	ldr	r7, [sp, #32]
 800bcc8:	4645      	mov	r5, r8
 800bcca:	e74c      	b.n	800bb66 <_dtoa_r+0x76e>
 800bccc:	9a06      	ldr	r2, [sp, #24]
 800bcce:	e775      	b.n	800bbbc <_dtoa_r+0x7c4>
 800bcd0:	9b05      	ldr	r3, [sp, #20]
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	dc18      	bgt.n	800bd08 <_dtoa_r+0x910>
 800bcd6:	9b02      	ldr	r3, [sp, #8]
 800bcd8:	b9b3      	cbnz	r3, 800bd08 <_dtoa_r+0x910>
 800bcda:	9b03      	ldr	r3, [sp, #12]
 800bcdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bce0:	b9a3      	cbnz	r3, 800bd0c <_dtoa_r+0x914>
 800bce2:	9b03      	ldr	r3, [sp, #12]
 800bce4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bce8:	0d1b      	lsrs	r3, r3, #20
 800bcea:	051b      	lsls	r3, r3, #20
 800bcec:	b12b      	cbz	r3, 800bcfa <_dtoa_r+0x902>
 800bcee:	9b04      	ldr	r3, [sp, #16]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	9304      	str	r3, [sp, #16]
 800bcf4:	f108 0801 	add.w	r8, r8, #1
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	9306      	str	r3, [sp, #24]
 800bcfc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	f47f af74 	bne.w	800bbec <_dtoa_r+0x7f4>
 800bd04:	2001      	movs	r0, #1
 800bd06:	e779      	b.n	800bbfc <_dtoa_r+0x804>
 800bd08:	2300      	movs	r3, #0
 800bd0a:	e7f6      	b.n	800bcfa <_dtoa_r+0x902>
 800bd0c:	9b02      	ldr	r3, [sp, #8]
 800bd0e:	e7f4      	b.n	800bcfa <_dtoa_r+0x902>
 800bd10:	d085      	beq.n	800bc1e <_dtoa_r+0x826>
 800bd12:	4618      	mov	r0, r3
 800bd14:	301c      	adds	r0, #28
 800bd16:	e77d      	b.n	800bc14 <_dtoa_r+0x81c>
 800bd18:	40240000 	.word	0x40240000
 800bd1c:	9b01      	ldr	r3, [sp, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	dc38      	bgt.n	800bd94 <_dtoa_r+0x99c>
 800bd22:	9b05      	ldr	r3, [sp, #20]
 800bd24:	2b02      	cmp	r3, #2
 800bd26:	dd35      	ble.n	800bd94 <_dtoa_r+0x99c>
 800bd28:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bd2c:	f1b9 0f00 	cmp.w	r9, #0
 800bd30:	d10d      	bne.n	800bd4e <_dtoa_r+0x956>
 800bd32:	4631      	mov	r1, r6
 800bd34:	464b      	mov	r3, r9
 800bd36:	2205      	movs	r2, #5
 800bd38:	4620      	mov	r0, r4
 800bd3a:	f000 fd39 	bl	800c7b0 <__multadd>
 800bd3e:	4601      	mov	r1, r0
 800bd40:	4606      	mov	r6, r0
 800bd42:	4658      	mov	r0, fp
 800bd44:	f000 ff9a 	bl	800cc7c <__mcmp>
 800bd48:	2800      	cmp	r0, #0
 800bd4a:	f73f adbd 	bgt.w	800b8c8 <_dtoa_r+0x4d0>
 800bd4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd50:	9d00      	ldr	r5, [sp, #0]
 800bd52:	ea6f 0a03 	mvn.w	sl, r3
 800bd56:	f04f 0800 	mov.w	r8, #0
 800bd5a:	4631      	mov	r1, r6
 800bd5c:	4620      	mov	r0, r4
 800bd5e:	f000 fd05 	bl	800c76c <_Bfree>
 800bd62:	2f00      	cmp	r7, #0
 800bd64:	f43f aeb4 	beq.w	800bad0 <_dtoa_r+0x6d8>
 800bd68:	f1b8 0f00 	cmp.w	r8, #0
 800bd6c:	d005      	beq.n	800bd7a <_dtoa_r+0x982>
 800bd6e:	45b8      	cmp	r8, r7
 800bd70:	d003      	beq.n	800bd7a <_dtoa_r+0x982>
 800bd72:	4641      	mov	r1, r8
 800bd74:	4620      	mov	r0, r4
 800bd76:	f000 fcf9 	bl	800c76c <_Bfree>
 800bd7a:	4639      	mov	r1, r7
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f000 fcf5 	bl	800c76c <_Bfree>
 800bd82:	e6a5      	b.n	800bad0 <_dtoa_r+0x6d8>
 800bd84:	2600      	movs	r6, #0
 800bd86:	4637      	mov	r7, r6
 800bd88:	e7e1      	b.n	800bd4e <_dtoa_r+0x956>
 800bd8a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800bd8c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800bd90:	4637      	mov	r7, r6
 800bd92:	e599      	b.n	800b8c8 <_dtoa_r+0x4d0>
 800bd94:	9b08      	ldr	r3, [sp, #32]
 800bd96:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f000 80fd 	beq.w	800bf9a <_dtoa_r+0xba2>
 800bda0:	2d00      	cmp	r5, #0
 800bda2:	dd05      	ble.n	800bdb0 <_dtoa_r+0x9b8>
 800bda4:	4639      	mov	r1, r7
 800bda6:	462a      	mov	r2, r5
 800bda8:	4620      	mov	r0, r4
 800bdaa:	f000 fefb 	bl	800cba4 <__lshift>
 800bdae:	4607      	mov	r7, r0
 800bdb0:	9b06      	ldr	r3, [sp, #24]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d05c      	beq.n	800be70 <_dtoa_r+0xa78>
 800bdb6:	6879      	ldr	r1, [r7, #4]
 800bdb8:	4620      	mov	r0, r4
 800bdba:	f000 fc97 	bl	800c6ec <_Balloc>
 800bdbe:	4605      	mov	r5, r0
 800bdc0:	b928      	cbnz	r0, 800bdce <_dtoa_r+0x9d6>
 800bdc2:	4b80      	ldr	r3, [pc, #512]	; (800bfc4 <_dtoa_r+0xbcc>)
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bdca:	f7ff bb2e 	b.w	800b42a <_dtoa_r+0x32>
 800bdce:	693a      	ldr	r2, [r7, #16]
 800bdd0:	3202      	adds	r2, #2
 800bdd2:	0092      	lsls	r2, r2, #2
 800bdd4:	f107 010c 	add.w	r1, r7, #12
 800bdd8:	300c      	adds	r0, #12
 800bdda:	f7fd fce3 	bl	80097a4 <memcpy>
 800bdde:	2201      	movs	r2, #1
 800bde0:	4629      	mov	r1, r5
 800bde2:	4620      	mov	r0, r4
 800bde4:	f000 fede 	bl	800cba4 <__lshift>
 800bde8:	9b00      	ldr	r3, [sp, #0]
 800bdea:	3301      	adds	r3, #1
 800bdec:	9301      	str	r3, [sp, #4]
 800bdee:	9b00      	ldr	r3, [sp, #0]
 800bdf0:	444b      	add	r3, r9
 800bdf2:	9307      	str	r3, [sp, #28]
 800bdf4:	9b02      	ldr	r3, [sp, #8]
 800bdf6:	f003 0301 	and.w	r3, r3, #1
 800bdfa:	46b8      	mov	r8, r7
 800bdfc:	9306      	str	r3, [sp, #24]
 800bdfe:	4607      	mov	r7, r0
 800be00:	9b01      	ldr	r3, [sp, #4]
 800be02:	4631      	mov	r1, r6
 800be04:	3b01      	subs	r3, #1
 800be06:	4658      	mov	r0, fp
 800be08:	9302      	str	r3, [sp, #8]
 800be0a:	f7ff fa67 	bl	800b2dc <quorem>
 800be0e:	4603      	mov	r3, r0
 800be10:	3330      	adds	r3, #48	; 0x30
 800be12:	9004      	str	r0, [sp, #16]
 800be14:	4641      	mov	r1, r8
 800be16:	4658      	mov	r0, fp
 800be18:	9308      	str	r3, [sp, #32]
 800be1a:	f000 ff2f 	bl	800cc7c <__mcmp>
 800be1e:	463a      	mov	r2, r7
 800be20:	4681      	mov	r9, r0
 800be22:	4631      	mov	r1, r6
 800be24:	4620      	mov	r0, r4
 800be26:	f000 ff45 	bl	800ccb4 <__mdiff>
 800be2a:	68c2      	ldr	r2, [r0, #12]
 800be2c:	9b08      	ldr	r3, [sp, #32]
 800be2e:	4605      	mov	r5, r0
 800be30:	bb02      	cbnz	r2, 800be74 <_dtoa_r+0xa7c>
 800be32:	4601      	mov	r1, r0
 800be34:	4658      	mov	r0, fp
 800be36:	f000 ff21 	bl	800cc7c <__mcmp>
 800be3a:	9b08      	ldr	r3, [sp, #32]
 800be3c:	4602      	mov	r2, r0
 800be3e:	4629      	mov	r1, r5
 800be40:	4620      	mov	r0, r4
 800be42:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800be46:	f000 fc91 	bl	800c76c <_Bfree>
 800be4a:	9b05      	ldr	r3, [sp, #20]
 800be4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be4e:	9d01      	ldr	r5, [sp, #4]
 800be50:	ea43 0102 	orr.w	r1, r3, r2
 800be54:	9b06      	ldr	r3, [sp, #24]
 800be56:	430b      	orrs	r3, r1
 800be58:	9b08      	ldr	r3, [sp, #32]
 800be5a:	d10d      	bne.n	800be78 <_dtoa_r+0xa80>
 800be5c:	2b39      	cmp	r3, #57	; 0x39
 800be5e:	d029      	beq.n	800beb4 <_dtoa_r+0xabc>
 800be60:	f1b9 0f00 	cmp.w	r9, #0
 800be64:	dd01      	ble.n	800be6a <_dtoa_r+0xa72>
 800be66:	9b04      	ldr	r3, [sp, #16]
 800be68:	3331      	adds	r3, #49	; 0x31
 800be6a:	9a02      	ldr	r2, [sp, #8]
 800be6c:	7013      	strb	r3, [r2, #0]
 800be6e:	e774      	b.n	800bd5a <_dtoa_r+0x962>
 800be70:	4638      	mov	r0, r7
 800be72:	e7b9      	b.n	800bde8 <_dtoa_r+0x9f0>
 800be74:	2201      	movs	r2, #1
 800be76:	e7e2      	b.n	800be3e <_dtoa_r+0xa46>
 800be78:	f1b9 0f00 	cmp.w	r9, #0
 800be7c:	db06      	blt.n	800be8c <_dtoa_r+0xa94>
 800be7e:	9905      	ldr	r1, [sp, #20]
 800be80:	ea41 0909 	orr.w	r9, r1, r9
 800be84:	9906      	ldr	r1, [sp, #24]
 800be86:	ea59 0101 	orrs.w	r1, r9, r1
 800be8a:	d120      	bne.n	800bece <_dtoa_r+0xad6>
 800be8c:	2a00      	cmp	r2, #0
 800be8e:	ddec      	ble.n	800be6a <_dtoa_r+0xa72>
 800be90:	4659      	mov	r1, fp
 800be92:	2201      	movs	r2, #1
 800be94:	4620      	mov	r0, r4
 800be96:	9301      	str	r3, [sp, #4]
 800be98:	f000 fe84 	bl	800cba4 <__lshift>
 800be9c:	4631      	mov	r1, r6
 800be9e:	4683      	mov	fp, r0
 800bea0:	f000 feec 	bl	800cc7c <__mcmp>
 800bea4:	2800      	cmp	r0, #0
 800bea6:	9b01      	ldr	r3, [sp, #4]
 800bea8:	dc02      	bgt.n	800beb0 <_dtoa_r+0xab8>
 800beaa:	d1de      	bne.n	800be6a <_dtoa_r+0xa72>
 800beac:	07da      	lsls	r2, r3, #31
 800beae:	d5dc      	bpl.n	800be6a <_dtoa_r+0xa72>
 800beb0:	2b39      	cmp	r3, #57	; 0x39
 800beb2:	d1d8      	bne.n	800be66 <_dtoa_r+0xa6e>
 800beb4:	9a02      	ldr	r2, [sp, #8]
 800beb6:	2339      	movs	r3, #57	; 0x39
 800beb8:	7013      	strb	r3, [r2, #0]
 800beba:	462b      	mov	r3, r5
 800bebc:	461d      	mov	r5, r3
 800bebe:	3b01      	subs	r3, #1
 800bec0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bec4:	2a39      	cmp	r2, #57	; 0x39
 800bec6:	d050      	beq.n	800bf6a <_dtoa_r+0xb72>
 800bec8:	3201      	adds	r2, #1
 800beca:	701a      	strb	r2, [r3, #0]
 800becc:	e745      	b.n	800bd5a <_dtoa_r+0x962>
 800bece:	2a00      	cmp	r2, #0
 800bed0:	dd03      	ble.n	800beda <_dtoa_r+0xae2>
 800bed2:	2b39      	cmp	r3, #57	; 0x39
 800bed4:	d0ee      	beq.n	800beb4 <_dtoa_r+0xabc>
 800bed6:	3301      	adds	r3, #1
 800bed8:	e7c7      	b.n	800be6a <_dtoa_r+0xa72>
 800beda:	9a01      	ldr	r2, [sp, #4]
 800bedc:	9907      	ldr	r1, [sp, #28]
 800bede:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bee2:	428a      	cmp	r2, r1
 800bee4:	d02a      	beq.n	800bf3c <_dtoa_r+0xb44>
 800bee6:	4659      	mov	r1, fp
 800bee8:	2300      	movs	r3, #0
 800beea:	220a      	movs	r2, #10
 800beec:	4620      	mov	r0, r4
 800beee:	f000 fc5f 	bl	800c7b0 <__multadd>
 800bef2:	45b8      	cmp	r8, r7
 800bef4:	4683      	mov	fp, r0
 800bef6:	f04f 0300 	mov.w	r3, #0
 800befa:	f04f 020a 	mov.w	r2, #10
 800befe:	4641      	mov	r1, r8
 800bf00:	4620      	mov	r0, r4
 800bf02:	d107      	bne.n	800bf14 <_dtoa_r+0xb1c>
 800bf04:	f000 fc54 	bl	800c7b0 <__multadd>
 800bf08:	4680      	mov	r8, r0
 800bf0a:	4607      	mov	r7, r0
 800bf0c:	9b01      	ldr	r3, [sp, #4]
 800bf0e:	3301      	adds	r3, #1
 800bf10:	9301      	str	r3, [sp, #4]
 800bf12:	e775      	b.n	800be00 <_dtoa_r+0xa08>
 800bf14:	f000 fc4c 	bl	800c7b0 <__multadd>
 800bf18:	4639      	mov	r1, r7
 800bf1a:	4680      	mov	r8, r0
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	220a      	movs	r2, #10
 800bf20:	4620      	mov	r0, r4
 800bf22:	f000 fc45 	bl	800c7b0 <__multadd>
 800bf26:	4607      	mov	r7, r0
 800bf28:	e7f0      	b.n	800bf0c <_dtoa_r+0xb14>
 800bf2a:	f1b9 0f00 	cmp.w	r9, #0
 800bf2e:	9a00      	ldr	r2, [sp, #0]
 800bf30:	bfcc      	ite	gt
 800bf32:	464d      	movgt	r5, r9
 800bf34:	2501      	movle	r5, #1
 800bf36:	4415      	add	r5, r2
 800bf38:	f04f 0800 	mov.w	r8, #0
 800bf3c:	4659      	mov	r1, fp
 800bf3e:	2201      	movs	r2, #1
 800bf40:	4620      	mov	r0, r4
 800bf42:	9301      	str	r3, [sp, #4]
 800bf44:	f000 fe2e 	bl	800cba4 <__lshift>
 800bf48:	4631      	mov	r1, r6
 800bf4a:	4683      	mov	fp, r0
 800bf4c:	f000 fe96 	bl	800cc7c <__mcmp>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	dcb2      	bgt.n	800beba <_dtoa_r+0xac2>
 800bf54:	d102      	bne.n	800bf5c <_dtoa_r+0xb64>
 800bf56:	9b01      	ldr	r3, [sp, #4]
 800bf58:	07db      	lsls	r3, r3, #31
 800bf5a:	d4ae      	bmi.n	800beba <_dtoa_r+0xac2>
 800bf5c:	462b      	mov	r3, r5
 800bf5e:	461d      	mov	r5, r3
 800bf60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bf64:	2a30      	cmp	r2, #48	; 0x30
 800bf66:	d0fa      	beq.n	800bf5e <_dtoa_r+0xb66>
 800bf68:	e6f7      	b.n	800bd5a <_dtoa_r+0x962>
 800bf6a:	9a00      	ldr	r2, [sp, #0]
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	d1a5      	bne.n	800bebc <_dtoa_r+0xac4>
 800bf70:	f10a 0a01 	add.w	sl, sl, #1
 800bf74:	2331      	movs	r3, #49	; 0x31
 800bf76:	e779      	b.n	800be6c <_dtoa_r+0xa74>
 800bf78:	4b13      	ldr	r3, [pc, #76]	; (800bfc8 <_dtoa_r+0xbd0>)
 800bf7a:	f7ff baaf 	b.w	800b4dc <_dtoa_r+0xe4>
 800bf7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f47f aa86 	bne.w	800b492 <_dtoa_r+0x9a>
 800bf86:	4b11      	ldr	r3, [pc, #68]	; (800bfcc <_dtoa_r+0xbd4>)
 800bf88:	f7ff baa8 	b.w	800b4dc <_dtoa_r+0xe4>
 800bf8c:	f1b9 0f00 	cmp.w	r9, #0
 800bf90:	dc03      	bgt.n	800bf9a <_dtoa_r+0xba2>
 800bf92:	9b05      	ldr	r3, [sp, #20]
 800bf94:	2b02      	cmp	r3, #2
 800bf96:	f73f aec9 	bgt.w	800bd2c <_dtoa_r+0x934>
 800bf9a:	9d00      	ldr	r5, [sp, #0]
 800bf9c:	4631      	mov	r1, r6
 800bf9e:	4658      	mov	r0, fp
 800bfa0:	f7ff f99c 	bl	800b2dc <quorem>
 800bfa4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bfa8:	f805 3b01 	strb.w	r3, [r5], #1
 800bfac:	9a00      	ldr	r2, [sp, #0]
 800bfae:	1aaa      	subs	r2, r5, r2
 800bfb0:	4591      	cmp	r9, r2
 800bfb2:	ddba      	ble.n	800bf2a <_dtoa_r+0xb32>
 800bfb4:	4659      	mov	r1, fp
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	220a      	movs	r2, #10
 800bfba:	4620      	mov	r0, r4
 800bfbc:	f000 fbf8 	bl	800c7b0 <__multadd>
 800bfc0:	4683      	mov	fp, r0
 800bfc2:	e7eb      	b.n	800bf9c <_dtoa_r+0xba4>
 800bfc4:	08023054 	.word	0x08023054
 800bfc8:	08022e54 	.word	0x08022e54
 800bfcc:	08022fd1 	.word	0x08022fd1

0800bfd0 <rshift>:
 800bfd0:	6903      	ldr	r3, [r0, #16]
 800bfd2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bfd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfda:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bfde:	f100 0414 	add.w	r4, r0, #20
 800bfe2:	dd45      	ble.n	800c070 <rshift+0xa0>
 800bfe4:	f011 011f 	ands.w	r1, r1, #31
 800bfe8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bfec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bff0:	d10c      	bne.n	800c00c <rshift+0x3c>
 800bff2:	f100 0710 	add.w	r7, r0, #16
 800bff6:	4629      	mov	r1, r5
 800bff8:	42b1      	cmp	r1, r6
 800bffa:	d334      	bcc.n	800c066 <rshift+0x96>
 800bffc:	1a9b      	subs	r3, r3, r2
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	1eea      	subs	r2, r5, #3
 800c002:	4296      	cmp	r6, r2
 800c004:	bf38      	it	cc
 800c006:	2300      	movcc	r3, #0
 800c008:	4423      	add	r3, r4
 800c00a:	e015      	b.n	800c038 <rshift+0x68>
 800c00c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c010:	f1c1 0820 	rsb	r8, r1, #32
 800c014:	40cf      	lsrs	r7, r1
 800c016:	f105 0e04 	add.w	lr, r5, #4
 800c01a:	46a1      	mov	r9, r4
 800c01c:	4576      	cmp	r6, lr
 800c01e:	46f4      	mov	ip, lr
 800c020:	d815      	bhi.n	800c04e <rshift+0x7e>
 800c022:	1a9b      	subs	r3, r3, r2
 800c024:	009a      	lsls	r2, r3, #2
 800c026:	3a04      	subs	r2, #4
 800c028:	3501      	adds	r5, #1
 800c02a:	42ae      	cmp	r6, r5
 800c02c:	bf38      	it	cc
 800c02e:	2200      	movcc	r2, #0
 800c030:	18a3      	adds	r3, r4, r2
 800c032:	50a7      	str	r7, [r4, r2]
 800c034:	b107      	cbz	r7, 800c038 <rshift+0x68>
 800c036:	3304      	adds	r3, #4
 800c038:	1b1a      	subs	r2, r3, r4
 800c03a:	42a3      	cmp	r3, r4
 800c03c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c040:	bf08      	it	eq
 800c042:	2300      	moveq	r3, #0
 800c044:	6102      	str	r2, [r0, #16]
 800c046:	bf08      	it	eq
 800c048:	6143      	streq	r3, [r0, #20]
 800c04a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c04e:	f8dc c000 	ldr.w	ip, [ip]
 800c052:	fa0c fc08 	lsl.w	ip, ip, r8
 800c056:	ea4c 0707 	orr.w	r7, ip, r7
 800c05a:	f849 7b04 	str.w	r7, [r9], #4
 800c05e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c062:	40cf      	lsrs	r7, r1
 800c064:	e7da      	b.n	800c01c <rshift+0x4c>
 800c066:	f851 cb04 	ldr.w	ip, [r1], #4
 800c06a:	f847 cf04 	str.w	ip, [r7, #4]!
 800c06e:	e7c3      	b.n	800bff8 <rshift+0x28>
 800c070:	4623      	mov	r3, r4
 800c072:	e7e1      	b.n	800c038 <rshift+0x68>

0800c074 <__hexdig_fun>:
 800c074:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c078:	2b09      	cmp	r3, #9
 800c07a:	d802      	bhi.n	800c082 <__hexdig_fun+0xe>
 800c07c:	3820      	subs	r0, #32
 800c07e:	b2c0      	uxtb	r0, r0
 800c080:	4770      	bx	lr
 800c082:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c086:	2b05      	cmp	r3, #5
 800c088:	d801      	bhi.n	800c08e <__hexdig_fun+0x1a>
 800c08a:	3847      	subs	r0, #71	; 0x47
 800c08c:	e7f7      	b.n	800c07e <__hexdig_fun+0xa>
 800c08e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c092:	2b05      	cmp	r3, #5
 800c094:	d801      	bhi.n	800c09a <__hexdig_fun+0x26>
 800c096:	3827      	subs	r0, #39	; 0x27
 800c098:	e7f1      	b.n	800c07e <__hexdig_fun+0xa>
 800c09a:	2000      	movs	r0, #0
 800c09c:	4770      	bx	lr
	...

0800c0a0 <__gethex>:
 800c0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a4:	ed2d 8b02 	vpush	{d8}
 800c0a8:	b089      	sub	sp, #36	; 0x24
 800c0aa:	ee08 0a10 	vmov	s16, r0
 800c0ae:	9304      	str	r3, [sp, #16]
 800c0b0:	4bbc      	ldr	r3, [pc, #752]	; (800c3a4 <__gethex+0x304>)
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	9301      	str	r3, [sp, #4]
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	468b      	mov	fp, r1
 800c0ba:	4690      	mov	r8, r2
 800c0bc:	f7f4 f8e8 	bl	8000290 <strlen>
 800c0c0:	9b01      	ldr	r3, [sp, #4]
 800c0c2:	f8db 2000 	ldr.w	r2, [fp]
 800c0c6:	4403      	add	r3, r0
 800c0c8:	4682      	mov	sl, r0
 800c0ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c0ce:	9305      	str	r3, [sp, #20]
 800c0d0:	1c93      	adds	r3, r2, #2
 800c0d2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c0d6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c0da:	32fe      	adds	r2, #254	; 0xfe
 800c0dc:	18d1      	adds	r1, r2, r3
 800c0de:	461f      	mov	r7, r3
 800c0e0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c0e4:	9100      	str	r1, [sp, #0]
 800c0e6:	2830      	cmp	r0, #48	; 0x30
 800c0e8:	d0f8      	beq.n	800c0dc <__gethex+0x3c>
 800c0ea:	f7ff ffc3 	bl	800c074 <__hexdig_fun>
 800c0ee:	4604      	mov	r4, r0
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	d13a      	bne.n	800c16a <__gethex+0xca>
 800c0f4:	9901      	ldr	r1, [sp, #4]
 800c0f6:	4652      	mov	r2, sl
 800c0f8:	4638      	mov	r0, r7
 800c0fa:	f001 f9e1 	bl	800d4c0 <strncmp>
 800c0fe:	4605      	mov	r5, r0
 800c100:	2800      	cmp	r0, #0
 800c102:	d168      	bne.n	800c1d6 <__gethex+0x136>
 800c104:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c108:	eb07 060a 	add.w	r6, r7, sl
 800c10c:	f7ff ffb2 	bl	800c074 <__hexdig_fun>
 800c110:	2800      	cmp	r0, #0
 800c112:	d062      	beq.n	800c1da <__gethex+0x13a>
 800c114:	4633      	mov	r3, r6
 800c116:	7818      	ldrb	r0, [r3, #0]
 800c118:	2830      	cmp	r0, #48	; 0x30
 800c11a:	461f      	mov	r7, r3
 800c11c:	f103 0301 	add.w	r3, r3, #1
 800c120:	d0f9      	beq.n	800c116 <__gethex+0x76>
 800c122:	f7ff ffa7 	bl	800c074 <__hexdig_fun>
 800c126:	2301      	movs	r3, #1
 800c128:	fab0 f480 	clz	r4, r0
 800c12c:	0964      	lsrs	r4, r4, #5
 800c12e:	4635      	mov	r5, r6
 800c130:	9300      	str	r3, [sp, #0]
 800c132:	463a      	mov	r2, r7
 800c134:	4616      	mov	r6, r2
 800c136:	3201      	adds	r2, #1
 800c138:	7830      	ldrb	r0, [r6, #0]
 800c13a:	f7ff ff9b 	bl	800c074 <__hexdig_fun>
 800c13e:	2800      	cmp	r0, #0
 800c140:	d1f8      	bne.n	800c134 <__gethex+0x94>
 800c142:	9901      	ldr	r1, [sp, #4]
 800c144:	4652      	mov	r2, sl
 800c146:	4630      	mov	r0, r6
 800c148:	f001 f9ba 	bl	800d4c0 <strncmp>
 800c14c:	b980      	cbnz	r0, 800c170 <__gethex+0xd0>
 800c14e:	b94d      	cbnz	r5, 800c164 <__gethex+0xc4>
 800c150:	eb06 050a 	add.w	r5, r6, sl
 800c154:	462a      	mov	r2, r5
 800c156:	4616      	mov	r6, r2
 800c158:	3201      	adds	r2, #1
 800c15a:	7830      	ldrb	r0, [r6, #0]
 800c15c:	f7ff ff8a 	bl	800c074 <__hexdig_fun>
 800c160:	2800      	cmp	r0, #0
 800c162:	d1f8      	bne.n	800c156 <__gethex+0xb6>
 800c164:	1bad      	subs	r5, r5, r6
 800c166:	00ad      	lsls	r5, r5, #2
 800c168:	e004      	b.n	800c174 <__gethex+0xd4>
 800c16a:	2400      	movs	r4, #0
 800c16c:	4625      	mov	r5, r4
 800c16e:	e7e0      	b.n	800c132 <__gethex+0x92>
 800c170:	2d00      	cmp	r5, #0
 800c172:	d1f7      	bne.n	800c164 <__gethex+0xc4>
 800c174:	7833      	ldrb	r3, [r6, #0]
 800c176:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c17a:	2b50      	cmp	r3, #80	; 0x50
 800c17c:	d13b      	bne.n	800c1f6 <__gethex+0x156>
 800c17e:	7873      	ldrb	r3, [r6, #1]
 800c180:	2b2b      	cmp	r3, #43	; 0x2b
 800c182:	d02c      	beq.n	800c1de <__gethex+0x13e>
 800c184:	2b2d      	cmp	r3, #45	; 0x2d
 800c186:	d02e      	beq.n	800c1e6 <__gethex+0x146>
 800c188:	1c71      	adds	r1, r6, #1
 800c18a:	f04f 0900 	mov.w	r9, #0
 800c18e:	7808      	ldrb	r0, [r1, #0]
 800c190:	f7ff ff70 	bl	800c074 <__hexdig_fun>
 800c194:	1e43      	subs	r3, r0, #1
 800c196:	b2db      	uxtb	r3, r3
 800c198:	2b18      	cmp	r3, #24
 800c19a:	d82c      	bhi.n	800c1f6 <__gethex+0x156>
 800c19c:	f1a0 0210 	sub.w	r2, r0, #16
 800c1a0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c1a4:	f7ff ff66 	bl	800c074 <__hexdig_fun>
 800c1a8:	1e43      	subs	r3, r0, #1
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	2b18      	cmp	r3, #24
 800c1ae:	d91d      	bls.n	800c1ec <__gethex+0x14c>
 800c1b0:	f1b9 0f00 	cmp.w	r9, #0
 800c1b4:	d000      	beq.n	800c1b8 <__gethex+0x118>
 800c1b6:	4252      	negs	r2, r2
 800c1b8:	4415      	add	r5, r2
 800c1ba:	f8cb 1000 	str.w	r1, [fp]
 800c1be:	b1e4      	cbz	r4, 800c1fa <__gethex+0x15a>
 800c1c0:	9b00      	ldr	r3, [sp, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	bf14      	ite	ne
 800c1c6:	2700      	movne	r7, #0
 800c1c8:	2706      	moveq	r7, #6
 800c1ca:	4638      	mov	r0, r7
 800c1cc:	b009      	add	sp, #36	; 0x24
 800c1ce:	ecbd 8b02 	vpop	{d8}
 800c1d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1d6:	463e      	mov	r6, r7
 800c1d8:	4625      	mov	r5, r4
 800c1da:	2401      	movs	r4, #1
 800c1dc:	e7ca      	b.n	800c174 <__gethex+0xd4>
 800c1de:	f04f 0900 	mov.w	r9, #0
 800c1e2:	1cb1      	adds	r1, r6, #2
 800c1e4:	e7d3      	b.n	800c18e <__gethex+0xee>
 800c1e6:	f04f 0901 	mov.w	r9, #1
 800c1ea:	e7fa      	b.n	800c1e2 <__gethex+0x142>
 800c1ec:	230a      	movs	r3, #10
 800c1ee:	fb03 0202 	mla	r2, r3, r2, r0
 800c1f2:	3a10      	subs	r2, #16
 800c1f4:	e7d4      	b.n	800c1a0 <__gethex+0x100>
 800c1f6:	4631      	mov	r1, r6
 800c1f8:	e7df      	b.n	800c1ba <__gethex+0x11a>
 800c1fa:	1bf3      	subs	r3, r6, r7
 800c1fc:	3b01      	subs	r3, #1
 800c1fe:	4621      	mov	r1, r4
 800c200:	2b07      	cmp	r3, #7
 800c202:	dc0b      	bgt.n	800c21c <__gethex+0x17c>
 800c204:	ee18 0a10 	vmov	r0, s16
 800c208:	f000 fa70 	bl	800c6ec <_Balloc>
 800c20c:	4604      	mov	r4, r0
 800c20e:	b940      	cbnz	r0, 800c222 <__gethex+0x182>
 800c210:	4b65      	ldr	r3, [pc, #404]	; (800c3a8 <__gethex+0x308>)
 800c212:	4602      	mov	r2, r0
 800c214:	21de      	movs	r1, #222	; 0xde
 800c216:	4865      	ldr	r0, [pc, #404]	; (800c3ac <__gethex+0x30c>)
 800c218:	f001 f972 	bl	800d500 <__assert_func>
 800c21c:	3101      	adds	r1, #1
 800c21e:	105b      	asrs	r3, r3, #1
 800c220:	e7ee      	b.n	800c200 <__gethex+0x160>
 800c222:	f100 0914 	add.w	r9, r0, #20
 800c226:	f04f 0b00 	mov.w	fp, #0
 800c22a:	f1ca 0301 	rsb	r3, sl, #1
 800c22e:	f8cd 9008 	str.w	r9, [sp, #8]
 800c232:	f8cd b000 	str.w	fp, [sp]
 800c236:	9306      	str	r3, [sp, #24]
 800c238:	42b7      	cmp	r7, r6
 800c23a:	d340      	bcc.n	800c2be <__gethex+0x21e>
 800c23c:	9802      	ldr	r0, [sp, #8]
 800c23e:	9b00      	ldr	r3, [sp, #0]
 800c240:	f840 3b04 	str.w	r3, [r0], #4
 800c244:	eba0 0009 	sub.w	r0, r0, r9
 800c248:	1080      	asrs	r0, r0, #2
 800c24a:	0146      	lsls	r6, r0, #5
 800c24c:	6120      	str	r0, [r4, #16]
 800c24e:	4618      	mov	r0, r3
 800c250:	f000 fb42 	bl	800c8d8 <__hi0bits>
 800c254:	1a30      	subs	r0, r6, r0
 800c256:	f8d8 6000 	ldr.w	r6, [r8]
 800c25a:	42b0      	cmp	r0, r6
 800c25c:	dd63      	ble.n	800c326 <__gethex+0x286>
 800c25e:	1b87      	subs	r7, r0, r6
 800c260:	4639      	mov	r1, r7
 800c262:	4620      	mov	r0, r4
 800c264:	f000 fedc 	bl	800d020 <__any_on>
 800c268:	4682      	mov	sl, r0
 800c26a:	b1a8      	cbz	r0, 800c298 <__gethex+0x1f8>
 800c26c:	1e7b      	subs	r3, r7, #1
 800c26e:	1159      	asrs	r1, r3, #5
 800c270:	f003 021f 	and.w	r2, r3, #31
 800c274:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c278:	f04f 0a01 	mov.w	sl, #1
 800c27c:	fa0a f202 	lsl.w	r2, sl, r2
 800c280:	420a      	tst	r2, r1
 800c282:	d009      	beq.n	800c298 <__gethex+0x1f8>
 800c284:	4553      	cmp	r3, sl
 800c286:	dd05      	ble.n	800c294 <__gethex+0x1f4>
 800c288:	1eb9      	subs	r1, r7, #2
 800c28a:	4620      	mov	r0, r4
 800c28c:	f000 fec8 	bl	800d020 <__any_on>
 800c290:	2800      	cmp	r0, #0
 800c292:	d145      	bne.n	800c320 <__gethex+0x280>
 800c294:	f04f 0a02 	mov.w	sl, #2
 800c298:	4639      	mov	r1, r7
 800c29a:	4620      	mov	r0, r4
 800c29c:	f7ff fe98 	bl	800bfd0 <rshift>
 800c2a0:	443d      	add	r5, r7
 800c2a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c2a6:	42ab      	cmp	r3, r5
 800c2a8:	da4c      	bge.n	800c344 <__gethex+0x2a4>
 800c2aa:	ee18 0a10 	vmov	r0, s16
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	f000 fa5c 	bl	800c76c <_Bfree>
 800c2b4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	6013      	str	r3, [r2, #0]
 800c2ba:	27a3      	movs	r7, #163	; 0xa3
 800c2bc:	e785      	b.n	800c1ca <__gethex+0x12a>
 800c2be:	1e73      	subs	r3, r6, #1
 800c2c0:	9a05      	ldr	r2, [sp, #20]
 800c2c2:	9303      	str	r3, [sp, #12]
 800c2c4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c2c8:	4293      	cmp	r3, r2
 800c2ca:	d019      	beq.n	800c300 <__gethex+0x260>
 800c2cc:	f1bb 0f20 	cmp.w	fp, #32
 800c2d0:	d107      	bne.n	800c2e2 <__gethex+0x242>
 800c2d2:	9b02      	ldr	r3, [sp, #8]
 800c2d4:	9a00      	ldr	r2, [sp, #0]
 800c2d6:	f843 2b04 	str.w	r2, [r3], #4
 800c2da:	9302      	str	r3, [sp, #8]
 800c2dc:	2300      	movs	r3, #0
 800c2de:	9300      	str	r3, [sp, #0]
 800c2e0:	469b      	mov	fp, r3
 800c2e2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c2e6:	f7ff fec5 	bl	800c074 <__hexdig_fun>
 800c2ea:	9b00      	ldr	r3, [sp, #0]
 800c2ec:	f000 000f 	and.w	r0, r0, #15
 800c2f0:	fa00 f00b 	lsl.w	r0, r0, fp
 800c2f4:	4303      	orrs	r3, r0
 800c2f6:	9300      	str	r3, [sp, #0]
 800c2f8:	f10b 0b04 	add.w	fp, fp, #4
 800c2fc:	9b03      	ldr	r3, [sp, #12]
 800c2fe:	e00d      	b.n	800c31c <__gethex+0x27c>
 800c300:	9b03      	ldr	r3, [sp, #12]
 800c302:	9a06      	ldr	r2, [sp, #24]
 800c304:	4413      	add	r3, r2
 800c306:	42bb      	cmp	r3, r7
 800c308:	d3e0      	bcc.n	800c2cc <__gethex+0x22c>
 800c30a:	4618      	mov	r0, r3
 800c30c:	9901      	ldr	r1, [sp, #4]
 800c30e:	9307      	str	r3, [sp, #28]
 800c310:	4652      	mov	r2, sl
 800c312:	f001 f8d5 	bl	800d4c0 <strncmp>
 800c316:	9b07      	ldr	r3, [sp, #28]
 800c318:	2800      	cmp	r0, #0
 800c31a:	d1d7      	bne.n	800c2cc <__gethex+0x22c>
 800c31c:	461e      	mov	r6, r3
 800c31e:	e78b      	b.n	800c238 <__gethex+0x198>
 800c320:	f04f 0a03 	mov.w	sl, #3
 800c324:	e7b8      	b.n	800c298 <__gethex+0x1f8>
 800c326:	da0a      	bge.n	800c33e <__gethex+0x29e>
 800c328:	1a37      	subs	r7, r6, r0
 800c32a:	4621      	mov	r1, r4
 800c32c:	ee18 0a10 	vmov	r0, s16
 800c330:	463a      	mov	r2, r7
 800c332:	f000 fc37 	bl	800cba4 <__lshift>
 800c336:	1bed      	subs	r5, r5, r7
 800c338:	4604      	mov	r4, r0
 800c33a:	f100 0914 	add.w	r9, r0, #20
 800c33e:	f04f 0a00 	mov.w	sl, #0
 800c342:	e7ae      	b.n	800c2a2 <__gethex+0x202>
 800c344:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c348:	42a8      	cmp	r0, r5
 800c34a:	dd72      	ble.n	800c432 <__gethex+0x392>
 800c34c:	1b45      	subs	r5, r0, r5
 800c34e:	42ae      	cmp	r6, r5
 800c350:	dc36      	bgt.n	800c3c0 <__gethex+0x320>
 800c352:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c356:	2b02      	cmp	r3, #2
 800c358:	d02a      	beq.n	800c3b0 <__gethex+0x310>
 800c35a:	2b03      	cmp	r3, #3
 800c35c:	d02c      	beq.n	800c3b8 <__gethex+0x318>
 800c35e:	2b01      	cmp	r3, #1
 800c360:	d115      	bne.n	800c38e <__gethex+0x2ee>
 800c362:	42ae      	cmp	r6, r5
 800c364:	d113      	bne.n	800c38e <__gethex+0x2ee>
 800c366:	2e01      	cmp	r6, #1
 800c368:	d10b      	bne.n	800c382 <__gethex+0x2e2>
 800c36a:	9a04      	ldr	r2, [sp, #16]
 800c36c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c370:	6013      	str	r3, [r2, #0]
 800c372:	2301      	movs	r3, #1
 800c374:	6123      	str	r3, [r4, #16]
 800c376:	f8c9 3000 	str.w	r3, [r9]
 800c37a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c37c:	2762      	movs	r7, #98	; 0x62
 800c37e:	601c      	str	r4, [r3, #0]
 800c380:	e723      	b.n	800c1ca <__gethex+0x12a>
 800c382:	1e71      	subs	r1, r6, #1
 800c384:	4620      	mov	r0, r4
 800c386:	f000 fe4b 	bl	800d020 <__any_on>
 800c38a:	2800      	cmp	r0, #0
 800c38c:	d1ed      	bne.n	800c36a <__gethex+0x2ca>
 800c38e:	ee18 0a10 	vmov	r0, s16
 800c392:	4621      	mov	r1, r4
 800c394:	f000 f9ea 	bl	800c76c <_Bfree>
 800c398:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c39a:	2300      	movs	r3, #0
 800c39c:	6013      	str	r3, [r2, #0]
 800c39e:	2750      	movs	r7, #80	; 0x50
 800c3a0:	e713      	b.n	800c1ca <__gethex+0x12a>
 800c3a2:	bf00      	nop
 800c3a4:	080230d0 	.word	0x080230d0
 800c3a8:	08023054 	.word	0x08023054
 800c3ac:	08023065 	.word	0x08023065
 800c3b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d1eb      	bne.n	800c38e <__gethex+0x2ee>
 800c3b6:	e7d8      	b.n	800c36a <__gethex+0x2ca>
 800c3b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d1d5      	bne.n	800c36a <__gethex+0x2ca>
 800c3be:	e7e6      	b.n	800c38e <__gethex+0x2ee>
 800c3c0:	1e6f      	subs	r7, r5, #1
 800c3c2:	f1ba 0f00 	cmp.w	sl, #0
 800c3c6:	d131      	bne.n	800c42c <__gethex+0x38c>
 800c3c8:	b127      	cbz	r7, 800c3d4 <__gethex+0x334>
 800c3ca:	4639      	mov	r1, r7
 800c3cc:	4620      	mov	r0, r4
 800c3ce:	f000 fe27 	bl	800d020 <__any_on>
 800c3d2:	4682      	mov	sl, r0
 800c3d4:	117b      	asrs	r3, r7, #5
 800c3d6:	2101      	movs	r1, #1
 800c3d8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c3dc:	f007 071f 	and.w	r7, r7, #31
 800c3e0:	fa01 f707 	lsl.w	r7, r1, r7
 800c3e4:	421f      	tst	r7, r3
 800c3e6:	4629      	mov	r1, r5
 800c3e8:	4620      	mov	r0, r4
 800c3ea:	bf18      	it	ne
 800c3ec:	f04a 0a02 	orrne.w	sl, sl, #2
 800c3f0:	1b76      	subs	r6, r6, r5
 800c3f2:	f7ff fded 	bl	800bfd0 <rshift>
 800c3f6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c3fa:	2702      	movs	r7, #2
 800c3fc:	f1ba 0f00 	cmp.w	sl, #0
 800c400:	d048      	beq.n	800c494 <__gethex+0x3f4>
 800c402:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c406:	2b02      	cmp	r3, #2
 800c408:	d015      	beq.n	800c436 <__gethex+0x396>
 800c40a:	2b03      	cmp	r3, #3
 800c40c:	d017      	beq.n	800c43e <__gethex+0x39e>
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d109      	bne.n	800c426 <__gethex+0x386>
 800c412:	f01a 0f02 	tst.w	sl, #2
 800c416:	d006      	beq.n	800c426 <__gethex+0x386>
 800c418:	f8d9 0000 	ldr.w	r0, [r9]
 800c41c:	ea4a 0a00 	orr.w	sl, sl, r0
 800c420:	f01a 0f01 	tst.w	sl, #1
 800c424:	d10e      	bne.n	800c444 <__gethex+0x3a4>
 800c426:	f047 0710 	orr.w	r7, r7, #16
 800c42a:	e033      	b.n	800c494 <__gethex+0x3f4>
 800c42c:	f04f 0a01 	mov.w	sl, #1
 800c430:	e7d0      	b.n	800c3d4 <__gethex+0x334>
 800c432:	2701      	movs	r7, #1
 800c434:	e7e2      	b.n	800c3fc <__gethex+0x35c>
 800c436:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c438:	f1c3 0301 	rsb	r3, r3, #1
 800c43c:	9315      	str	r3, [sp, #84]	; 0x54
 800c43e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c440:	2b00      	cmp	r3, #0
 800c442:	d0f0      	beq.n	800c426 <__gethex+0x386>
 800c444:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c448:	f104 0314 	add.w	r3, r4, #20
 800c44c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c450:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c454:	f04f 0c00 	mov.w	ip, #0
 800c458:	4618      	mov	r0, r3
 800c45a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c45e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c462:	d01c      	beq.n	800c49e <__gethex+0x3fe>
 800c464:	3201      	adds	r2, #1
 800c466:	6002      	str	r2, [r0, #0]
 800c468:	2f02      	cmp	r7, #2
 800c46a:	f104 0314 	add.w	r3, r4, #20
 800c46e:	d13f      	bne.n	800c4f0 <__gethex+0x450>
 800c470:	f8d8 2000 	ldr.w	r2, [r8]
 800c474:	3a01      	subs	r2, #1
 800c476:	42b2      	cmp	r2, r6
 800c478:	d10a      	bne.n	800c490 <__gethex+0x3f0>
 800c47a:	1171      	asrs	r1, r6, #5
 800c47c:	2201      	movs	r2, #1
 800c47e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c482:	f006 061f 	and.w	r6, r6, #31
 800c486:	fa02 f606 	lsl.w	r6, r2, r6
 800c48a:	421e      	tst	r6, r3
 800c48c:	bf18      	it	ne
 800c48e:	4617      	movne	r7, r2
 800c490:	f047 0720 	orr.w	r7, r7, #32
 800c494:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c496:	601c      	str	r4, [r3, #0]
 800c498:	9b04      	ldr	r3, [sp, #16]
 800c49a:	601d      	str	r5, [r3, #0]
 800c49c:	e695      	b.n	800c1ca <__gethex+0x12a>
 800c49e:	4299      	cmp	r1, r3
 800c4a0:	f843 cc04 	str.w	ip, [r3, #-4]
 800c4a4:	d8d8      	bhi.n	800c458 <__gethex+0x3b8>
 800c4a6:	68a3      	ldr	r3, [r4, #8]
 800c4a8:	459b      	cmp	fp, r3
 800c4aa:	db19      	blt.n	800c4e0 <__gethex+0x440>
 800c4ac:	6861      	ldr	r1, [r4, #4]
 800c4ae:	ee18 0a10 	vmov	r0, s16
 800c4b2:	3101      	adds	r1, #1
 800c4b4:	f000 f91a 	bl	800c6ec <_Balloc>
 800c4b8:	4681      	mov	r9, r0
 800c4ba:	b918      	cbnz	r0, 800c4c4 <__gethex+0x424>
 800c4bc:	4b1a      	ldr	r3, [pc, #104]	; (800c528 <__gethex+0x488>)
 800c4be:	4602      	mov	r2, r0
 800c4c0:	2184      	movs	r1, #132	; 0x84
 800c4c2:	e6a8      	b.n	800c216 <__gethex+0x176>
 800c4c4:	6922      	ldr	r2, [r4, #16]
 800c4c6:	3202      	adds	r2, #2
 800c4c8:	f104 010c 	add.w	r1, r4, #12
 800c4cc:	0092      	lsls	r2, r2, #2
 800c4ce:	300c      	adds	r0, #12
 800c4d0:	f7fd f968 	bl	80097a4 <memcpy>
 800c4d4:	4621      	mov	r1, r4
 800c4d6:	ee18 0a10 	vmov	r0, s16
 800c4da:	f000 f947 	bl	800c76c <_Bfree>
 800c4de:	464c      	mov	r4, r9
 800c4e0:	6923      	ldr	r3, [r4, #16]
 800c4e2:	1c5a      	adds	r2, r3, #1
 800c4e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c4e8:	6122      	str	r2, [r4, #16]
 800c4ea:	2201      	movs	r2, #1
 800c4ec:	615a      	str	r2, [r3, #20]
 800c4ee:	e7bb      	b.n	800c468 <__gethex+0x3c8>
 800c4f0:	6922      	ldr	r2, [r4, #16]
 800c4f2:	455a      	cmp	r2, fp
 800c4f4:	dd0b      	ble.n	800c50e <__gethex+0x46e>
 800c4f6:	2101      	movs	r1, #1
 800c4f8:	4620      	mov	r0, r4
 800c4fa:	f7ff fd69 	bl	800bfd0 <rshift>
 800c4fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c502:	3501      	adds	r5, #1
 800c504:	42ab      	cmp	r3, r5
 800c506:	f6ff aed0 	blt.w	800c2aa <__gethex+0x20a>
 800c50a:	2701      	movs	r7, #1
 800c50c:	e7c0      	b.n	800c490 <__gethex+0x3f0>
 800c50e:	f016 061f 	ands.w	r6, r6, #31
 800c512:	d0fa      	beq.n	800c50a <__gethex+0x46a>
 800c514:	449a      	add	sl, r3
 800c516:	f1c6 0620 	rsb	r6, r6, #32
 800c51a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800c51e:	f000 f9db 	bl	800c8d8 <__hi0bits>
 800c522:	42b0      	cmp	r0, r6
 800c524:	dbe7      	blt.n	800c4f6 <__gethex+0x456>
 800c526:	e7f0      	b.n	800c50a <__gethex+0x46a>
 800c528:	08023054 	.word	0x08023054

0800c52c <L_shift>:
 800c52c:	f1c2 0208 	rsb	r2, r2, #8
 800c530:	0092      	lsls	r2, r2, #2
 800c532:	b570      	push	{r4, r5, r6, lr}
 800c534:	f1c2 0620 	rsb	r6, r2, #32
 800c538:	6843      	ldr	r3, [r0, #4]
 800c53a:	6804      	ldr	r4, [r0, #0]
 800c53c:	fa03 f506 	lsl.w	r5, r3, r6
 800c540:	432c      	orrs	r4, r5
 800c542:	40d3      	lsrs	r3, r2
 800c544:	6004      	str	r4, [r0, #0]
 800c546:	f840 3f04 	str.w	r3, [r0, #4]!
 800c54a:	4288      	cmp	r0, r1
 800c54c:	d3f4      	bcc.n	800c538 <L_shift+0xc>
 800c54e:	bd70      	pop	{r4, r5, r6, pc}

0800c550 <__match>:
 800c550:	b530      	push	{r4, r5, lr}
 800c552:	6803      	ldr	r3, [r0, #0]
 800c554:	3301      	adds	r3, #1
 800c556:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c55a:	b914      	cbnz	r4, 800c562 <__match+0x12>
 800c55c:	6003      	str	r3, [r0, #0]
 800c55e:	2001      	movs	r0, #1
 800c560:	bd30      	pop	{r4, r5, pc}
 800c562:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c566:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c56a:	2d19      	cmp	r5, #25
 800c56c:	bf98      	it	ls
 800c56e:	3220      	addls	r2, #32
 800c570:	42a2      	cmp	r2, r4
 800c572:	d0f0      	beq.n	800c556 <__match+0x6>
 800c574:	2000      	movs	r0, #0
 800c576:	e7f3      	b.n	800c560 <__match+0x10>

0800c578 <__hexnan>:
 800c578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57c:	680b      	ldr	r3, [r1, #0]
 800c57e:	6801      	ldr	r1, [r0, #0]
 800c580:	115e      	asrs	r6, r3, #5
 800c582:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c586:	f013 031f 	ands.w	r3, r3, #31
 800c58a:	b087      	sub	sp, #28
 800c58c:	bf18      	it	ne
 800c58e:	3604      	addne	r6, #4
 800c590:	2500      	movs	r5, #0
 800c592:	1f37      	subs	r7, r6, #4
 800c594:	4682      	mov	sl, r0
 800c596:	4690      	mov	r8, r2
 800c598:	9301      	str	r3, [sp, #4]
 800c59a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c59e:	46b9      	mov	r9, r7
 800c5a0:	463c      	mov	r4, r7
 800c5a2:	9502      	str	r5, [sp, #8]
 800c5a4:	46ab      	mov	fp, r5
 800c5a6:	784a      	ldrb	r2, [r1, #1]
 800c5a8:	1c4b      	adds	r3, r1, #1
 800c5aa:	9303      	str	r3, [sp, #12]
 800c5ac:	b342      	cbz	r2, 800c600 <__hexnan+0x88>
 800c5ae:	4610      	mov	r0, r2
 800c5b0:	9105      	str	r1, [sp, #20]
 800c5b2:	9204      	str	r2, [sp, #16]
 800c5b4:	f7ff fd5e 	bl	800c074 <__hexdig_fun>
 800c5b8:	2800      	cmp	r0, #0
 800c5ba:	d14f      	bne.n	800c65c <__hexnan+0xe4>
 800c5bc:	9a04      	ldr	r2, [sp, #16]
 800c5be:	9905      	ldr	r1, [sp, #20]
 800c5c0:	2a20      	cmp	r2, #32
 800c5c2:	d818      	bhi.n	800c5f6 <__hexnan+0x7e>
 800c5c4:	9b02      	ldr	r3, [sp, #8]
 800c5c6:	459b      	cmp	fp, r3
 800c5c8:	dd13      	ble.n	800c5f2 <__hexnan+0x7a>
 800c5ca:	454c      	cmp	r4, r9
 800c5cc:	d206      	bcs.n	800c5dc <__hexnan+0x64>
 800c5ce:	2d07      	cmp	r5, #7
 800c5d0:	dc04      	bgt.n	800c5dc <__hexnan+0x64>
 800c5d2:	462a      	mov	r2, r5
 800c5d4:	4649      	mov	r1, r9
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f7ff ffa8 	bl	800c52c <L_shift>
 800c5dc:	4544      	cmp	r4, r8
 800c5de:	d950      	bls.n	800c682 <__hexnan+0x10a>
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f1a4 0904 	sub.w	r9, r4, #4
 800c5e6:	f844 3c04 	str.w	r3, [r4, #-4]
 800c5ea:	f8cd b008 	str.w	fp, [sp, #8]
 800c5ee:	464c      	mov	r4, r9
 800c5f0:	461d      	mov	r5, r3
 800c5f2:	9903      	ldr	r1, [sp, #12]
 800c5f4:	e7d7      	b.n	800c5a6 <__hexnan+0x2e>
 800c5f6:	2a29      	cmp	r2, #41	; 0x29
 800c5f8:	d156      	bne.n	800c6a8 <__hexnan+0x130>
 800c5fa:	3102      	adds	r1, #2
 800c5fc:	f8ca 1000 	str.w	r1, [sl]
 800c600:	f1bb 0f00 	cmp.w	fp, #0
 800c604:	d050      	beq.n	800c6a8 <__hexnan+0x130>
 800c606:	454c      	cmp	r4, r9
 800c608:	d206      	bcs.n	800c618 <__hexnan+0xa0>
 800c60a:	2d07      	cmp	r5, #7
 800c60c:	dc04      	bgt.n	800c618 <__hexnan+0xa0>
 800c60e:	462a      	mov	r2, r5
 800c610:	4649      	mov	r1, r9
 800c612:	4620      	mov	r0, r4
 800c614:	f7ff ff8a 	bl	800c52c <L_shift>
 800c618:	4544      	cmp	r4, r8
 800c61a:	d934      	bls.n	800c686 <__hexnan+0x10e>
 800c61c:	f1a8 0204 	sub.w	r2, r8, #4
 800c620:	4623      	mov	r3, r4
 800c622:	f853 1b04 	ldr.w	r1, [r3], #4
 800c626:	f842 1f04 	str.w	r1, [r2, #4]!
 800c62a:	429f      	cmp	r7, r3
 800c62c:	d2f9      	bcs.n	800c622 <__hexnan+0xaa>
 800c62e:	1b3b      	subs	r3, r7, r4
 800c630:	f023 0303 	bic.w	r3, r3, #3
 800c634:	3304      	adds	r3, #4
 800c636:	3401      	adds	r4, #1
 800c638:	3e03      	subs	r6, #3
 800c63a:	42b4      	cmp	r4, r6
 800c63c:	bf88      	it	hi
 800c63e:	2304      	movhi	r3, #4
 800c640:	4443      	add	r3, r8
 800c642:	2200      	movs	r2, #0
 800c644:	f843 2b04 	str.w	r2, [r3], #4
 800c648:	429f      	cmp	r7, r3
 800c64a:	d2fb      	bcs.n	800c644 <__hexnan+0xcc>
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	b91b      	cbnz	r3, 800c658 <__hexnan+0xe0>
 800c650:	4547      	cmp	r7, r8
 800c652:	d127      	bne.n	800c6a4 <__hexnan+0x12c>
 800c654:	2301      	movs	r3, #1
 800c656:	603b      	str	r3, [r7, #0]
 800c658:	2005      	movs	r0, #5
 800c65a:	e026      	b.n	800c6aa <__hexnan+0x132>
 800c65c:	3501      	adds	r5, #1
 800c65e:	2d08      	cmp	r5, #8
 800c660:	f10b 0b01 	add.w	fp, fp, #1
 800c664:	dd06      	ble.n	800c674 <__hexnan+0xfc>
 800c666:	4544      	cmp	r4, r8
 800c668:	d9c3      	bls.n	800c5f2 <__hexnan+0x7a>
 800c66a:	2300      	movs	r3, #0
 800c66c:	f844 3c04 	str.w	r3, [r4, #-4]
 800c670:	2501      	movs	r5, #1
 800c672:	3c04      	subs	r4, #4
 800c674:	6822      	ldr	r2, [r4, #0]
 800c676:	f000 000f 	and.w	r0, r0, #15
 800c67a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c67e:	6022      	str	r2, [r4, #0]
 800c680:	e7b7      	b.n	800c5f2 <__hexnan+0x7a>
 800c682:	2508      	movs	r5, #8
 800c684:	e7b5      	b.n	800c5f2 <__hexnan+0x7a>
 800c686:	9b01      	ldr	r3, [sp, #4]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d0df      	beq.n	800c64c <__hexnan+0xd4>
 800c68c:	f04f 32ff 	mov.w	r2, #4294967295
 800c690:	f1c3 0320 	rsb	r3, r3, #32
 800c694:	fa22 f303 	lsr.w	r3, r2, r3
 800c698:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c69c:	401a      	ands	r2, r3
 800c69e:	f846 2c04 	str.w	r2, [r6, #-4]
 800c6a2:	e7d3      	b.n	800c64c <__hexnan+0xd4>
 800c6a4:	3f04      	subs	r7, #4
 800c6a6:	e7d1      	b.n	800c64c <__hexnan+0xd4>
 800c6a8:	2004      	movs	r0, #4
 800c6aa:	b007      	add	sp, #28
 800c6ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c6b0 <_localeconv_r>:
 800c6b0:	4800      	ldr	r0, [pc, #0]	; (800c6b4 <_localeconv_r+0x4>)
 800c6b2:	4770      	bx	lr
 800c6b4:	200001d8 	.word	0x200001d8

0800c6b8 <malloc>:
 800c6b8:	4b02      	ldr	r3, [pc, #8]	; (800c6c4 <malloc+0xc>)
 800c6ba:	4601      	mov	r1, r0
 800c6bc:	6818      	ldr	r0, [r3, #0]
 800c6be:	f000 bd2f 	b.w	800d120 <_malloc_r>
 800c6c2:	bf00      	nop
 800c6c4:	20000080 	.word	0x20000080

0800c6c8 <__ascii_mbtowc>:
 800c6c8:	b082      	sub	sp, #8
 800c6ca:	b901      	cbnz	r1, 800c6ce <__ascii_mbtowc+0x6>
 800c6cc:	a901      	add	r1, sp, #4
 800c6ce:	b142      	cbz	r2, 800c6e2 <__ascii_mbtowc+0x1a>
 800c6d0:	b14b      	cbz	r3, 800c6e6 <__ascii_mbtowc+0x1e>
 800c6d2:	7813      	ldrb	r3, [r2, #0]
 800c6d4:	600b      	str	r3, [r1, #0]
 800c6d6:	7812      	ldrb	r2, [r2, #0]
 800c6d8:	1e10      	subs	r0, r2, #0
 800c6da:	bf18      	it	ne
 800c6dc:	2001      	movne	r0, #1
 800c6de:	b002      	add	sp, #8
 800c6e0:	4770      	bx	lr
 800c6e2:	4610      	mov	r0, r2
 800c6e4:	e7fb      	b.n	800c6de <__ascii_mbtowc+0x16>
 800c6e6:	f06f 0001 	mvn.w	r0, #1
 800c6ea:	e7f8      	b.n	800c6de <__ascii_mbtowc+0x16>

0800c6ec <_Balloc>:
 800c6ec:	b570      	push	{r4, r5, r6, lr}
 800c6ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c6f0:	4604      	mov	r4, r0
 800c6f2:	460d      	mov	r5, r1
 800c6f4:	b976      	cbnz	r6, 800c714 <_Balloc+0x28>
 800c6f6:	2010      	movs	r0, #16
 800c6f8:	f7ff ffde 	bl	800c6b8 <malloc>
 800c6fc:	4602      	mov	r2, r0
 800c6fe:	6260      	str	r0, [r4, #36]	; 0x24
 800c700:	b920      	cbnz	r0, 800c70c <_Balloc+0x20>
 800c702:	4b18      	ldr	r3, [pc, #96]	; (800c764 <_Balloc+0x78>)
 800c704:	4818      	ldr	r0, [pc, #96]	; (800c768 <_Balloc+0x7c>)
 800c706:	2166      	movs	r1, #102	; 0x66
 800c708:	f000 fefa 	bl	800d500 <__assert_func>
 800c70c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c710:	6006      	str	r6, [r0, #0]
 800c712:	60c6      	str	r6, [r0, #12]
 800c714:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c716:	68f3      	ldr	r3, [r6, #12]
 800c718:	b183      	cbz	r3, 800c73c <_Balloc+0x50>
 800c71a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c722:	b9b8      	cbnz	r0, 800c754 <_Balloc+0x68>
 800c724:	2101      	movs	r1, #1
 800c726:	fa01 f605 	lsl.w	r6, r1, r5
 800c72a:	1d72      	adds	r2, r6, #5
 800c72c:	0092      	lsls	r2, r2, #2
 800c72e:	4620      	mov	r0, r4
 800c730:	f000 fc97 	bl	800d062 <_calloc_r>
 800c734:	b160      	cbz	r0, 800c750 <_Balloc+0x64>
 800c736:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c73a:	e00e      	b.n	800c75a <_Balloc+0x6e>
 800c73c:	2221      	movs	r2, #33	; 0x21
 800c73e:	2104      	movs	r1, #4
 800c740:	4620      	mov	r0, r4
 800c742:	f000 fc8e 	bl	800d062 <_calloc_r>
 800c746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c748:	60f0      	str	r0, [r6, #12]
 800c74a:	68db      	ldr	r3, [r3, #12]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d1e4      	bne.n	800c71a <_Balloc+0x2e>
 800c750:	2000      	movs	r0, #0
 800c752:	bd70      	pop	{r4, r5, r6, pc}
 800c754:	6802      	ldr	r2, [r0, #0]
 800c756:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c75a:	2300      	movs	r3, #0
 800c75c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c760:	e7f7      	b.n	800c752 <_Balloc+0x66>
 800c762:	bf00      	nop
 800c764:	08022fde 	.word	0x08022fde
 800c768:	080230e4 	.word	0x080230e4

0800c76c <_Bfree>:
 800c76c:	b570      	push	{r4, r5, r6, lr}
 800c76e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c770:	4605      	mov	r5, r0
 800c772:	460c      	mov	r4, r1
 800c774:	b976      	cbnz	r6, 800c794 <_Bfree+0x28>
 800c776:	2010      	movs	r0, #16
 800c778:	f7ff ff9e 	bl	800c6b8 <malloc>
 800c77c:	4602      	mov	r2, r0
 800c77e:	6268      	str	r0, [r5, #36]	; 0x24
 800c780:	b920      	cbnz	r0, 800c78c <_Bfree+0x20>
 800c782:	4b09      	ldr	r3, [pc, #36]	; (800c7a8 <_Bfree+0x3c>)
 800c784:	4809      	ldr	r0, [pc, #36]	; (800c7ac <_Bfree+0x40>)
 800c786:	218a      	movs	r1, #138	; 0x8a
 800c788:	f000 feba 	bl	800d500 <__assert_func>
 800c78c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c790:	6006      	str	r6, [r0, #0]
 800c792:	60c6      	str	r6, [r0, #12]
 800c794:	b13c      	cbz	r4, 800c7a6 <_Bfree+0x3a>
 800c796:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c798:	6862      	ldr	r2, [r4, #4]
 800c79a:	68db      	ldr	r3, [r3, #12]
 800c79c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c7a0:	6021      	str	r1, [r4, #0]
 800c7a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c7a6:	bd70      	pop	{r4, r5, r6, pc}
 800c7a8:	08022fde 	.word	0x08022fde
 800c7ac:	080230e4 	.word	0x080230e4

0800c7b0 <__multadd>:
 800c7b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7b4:	690e      	ldr	r6, [r1, #16]
 800c7b6:	4607      	mov	r7, r0
 800c7b8:	4698      	mov	r8, r3
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	f101 0014 	add.w	r0, r1, #20
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	6805      	ldr	r5, [r0, #0]
 800c7c4:	b2a9      	uxth	r1, r5
 800c7c6:	fb02 8101 	mla	r1, r2, r1, r8
 800c7ca:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c7ce:	0c2d      	lsrs	r5, r5, #16
 800c7d0:	fb02 c505 	mla	r5, r2, r5, ip
 800c7d4:	b289      	uxth	r1, r1
 800c7d6:	3301      	adds	r3, #1
 800c7d8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c7dc:	429e      	cmp	r6, r3
 800c7de:	f840 1b04 	str.w	r1, [r0], #4
 800c7e2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c7e6:	dcec      	bgt.n	800c7c2 <__multadd+0x12>
 800c7e8:	f1b8 0f00 	cmp.w	r8, #0
 800c7ec:	d022      	beq.n	800c834 <__multadd+0x84>
 800c7ee:	68a3      	ldr	r3, [r4, #8]
 800c7f0:	42b3      	cmp	r3, r6
 800c7f2:	dc19      	bgt.n	800c828 <__multadd+0x78>
 800c7f4:	6861      	ldr	r1, [r4, #4]
 800c7f6:	4638      	mov	r0, r7
 800c7f8:	3101      	adds	r1, #1
 800c7fa:	f7ff ff77 	bl	800c6ec <_Balloc>
 800c7fe:	4605      	mov	r5, r0
 800c800:	b928      	cbnz	r0, 800c80e <__multadd+0x5e>
 800c802:	4602      	mov	r2, r0
 800c804:	4b0d      	ldr	r3, [pc, #52]	; (800c83c <__multadd+0x8c>)
 800c806:	480e      	ldr	r0, [pc, #56]	; (800c840 <__multadd+0x90>)
 800c808:	21b5      	movs	r1, #181	; 0xb5
 800c80a:	f000 fe79 	bl	800d500 <__assert_func>
 800c80e:	6922      	ldr	r2, [r4, #16]
 800c810:	3202      	adds	r2, #2
 800c812:	f104 010c 	add.w	r1, r4, #12
 800c816:	0092      	lsls	r2, r2, #2
 800c818:	300c      	adds	r0, #12
 800c81a:	f7fc ffc3 	bl	80097a4 <memcpy>
 800c81e:	4621      	mov	r1, r4
 800c820:	4638      	mov	r0, r7
 800c822:	f7ff ffa3 	bl	800c76c <_Bfree>
 800c826:	462c      	mov	r4, r5
 800c828:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c82c:	3601      	adds	r6, #1
 800c82e:	f8c3 8014 	str.w	r8, [r3, #20]
 800c832:	6126      	str	r6, [r4, #16]
 800c834:	4620      	mov	r0, r4
 800c836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c83a:	bf00      	nop
 800c83c:	08023054 	.word	0x08023054
 800c840:	080230e4 	.word	0x080230e4

0800c844 <__s2b>:
 800c844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c848:	460c      	mov	r4, r1
 800c84a:	4615      	mov	r5, r2
 800c84c:	461f      	mov	r7, r3
 800c84e:	2209      	movs	r2, #9
 800c850:	3308      	adds	r3, #8
 800c852:	4606      	mov	r6, r0
 800c854:	fb93 f3f2 	sdiv	r3, r3, r2
 800c858:	2100      	movs	r1, #0
 800c85a:	2201      	movs	r2, #1
 800c85c:	429a      	cmp	r2, r3
 800c85e:	db09      	blt.n	800c874 <__s2b+0x30>
 800c860:	4630      	mov	r0, r6
 800c862:	f7ff ff43 	bl	800c6ec <_Balloc>
 800c866:	b940      	cbnz	r0, 800c87a <__s2b+0x36>
 800c868:	4602      	mov	r2, r0
 800c86a:	4b19      	ldr	r3, [pc, #100]	; (800c8d0 <__s2b+0x8c>)
 800c86c:	4819      	ldr	r0, [pc, #100]	; (800c8d4 <__s2b+0x90>)
 800c86e:	21ce      	movs	r1, #206	; 0xce
 800c870:	f000 fe46 	bl	800d500 <__assert_func>
 800c874:	0052      	lsls	r2, r2, #1
 800c876:	3101      	adds	r1, #1
 800c878:	e7f0      	b.n	800c85c <__s2b+0x18>
 800c87a:	9b08      	ldr	r3, [sp, #32]
 800c87c:	6143      	str	r3, [r0, #20]
 800c87e:	2d09      	cmp	r5, #9
 800c880:	f04f 0301 	mov.w	r3, #1
 800c884:	6103      	str	r3, [r0, #16]
 800c886:	dd16      	ble.n	800c8b6 <__s2b+0x72>
 800c888:	f104 0909 	add.w	r9, r4, #9
 800c88c:	46c8      	mov	r8, r9
 800c88e:	442c      	add	r4, r5
 800c890:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c894:	4601      	mov	r1, r0
 800c896:	3b30      	subs	r3, #48	; 0x30
 800c898:	220a      	movs	r2, #10
 800c89a:	4630      	mov	r0, r6
 800c89c:	f7ff ff88 	bl	800c7b0 <__multadd>
 800c8a0:	45a0      	cmp	r8, r4
 800c8a2:	d1f5      	bne.n	800c890 <__s2b+0x4c>
 800c8a4:	f1a5 0408 	sub.w	r4, r5, #8
 800c8a8:	444c      	add	r4, r9
 800c8aa:	1b2d      	subs	r5, r5, r4
 800c8ac:	1963      	adds	r3, r4, r5
 800c8ae:	42bb      	cmp	r3, r7
 800c8b0:	db04      	blt.n	800c8bc <__s2b+0x78>
 800c8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8b6:	340a      	adds	r4, #10
 800c8b8:	2509      	movs	r5, #9
 800c8ba:	e7f6      	b.n	800c8aa <__s2b+0x66>
 800c8bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c8c0:	4601      	mov	r1, r0
 800c8c2:	3b30      	subs	r3, #48	; 0x30
 800c8c4:	220a      	movs	r2, #10
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	f7ff ff72 	bl	800c7b0 <__multadd>
 800c8cc:	e7ee      	b.n	800c8ac <__s2b+0x68>
 800c8ce:	bf00      	nop
 800c8d0:	08023054 	.word	0x08023054
 800c8d4:	080230e4 	.word	0x080230e4

0800c8d8 <__hi0bits>:
 800c8d8:	0c03      	lsrs	r3, r0, #16
 800c8da:	041b      	lsls	r3, r3, #16
 800c8dc:	b9d3      	cbnz	r3, 800c914 <__hi0bits+0x3c>
 800c8de:	0400      	lsls	r0, r0, #16
 800c8e0:	2310      	movs	r3, #16
 800c8e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c8e6:	bf04      	itt	eq
 800c8e8:	0200      	lsleq	r0, r0, #8
 800c8ea:	3308      	addeq	r3, #8
 800c8ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c8f0:	bf04      	itt	eq
 800c8f2:	0100      	lsleq	r0, r0, #4
 800c8f4:	3304      	addeq	r3, #4
 800c8f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c8fa:	bf04      	itt	eq
 800c8fc:	0080      	lsleq	r0, r0, #2
 800c8fe:	3302      	addeq	r3, #2
 800c900:	2800      	cmp	r0, #0
 800c902:	db05      	blt.n	800c910 <__hi0bits+0x38>
 800c904:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c908:	f103 0301 	add.w	r3, r3, #1
 800c90c:	bf08      	it	eq
 800c90e:	2320      	moveq	r3, #32
 800c910:	4618      	mov	r0, r3
 800c912:	4770      	bx	lr
 800c914:	2300      	movs	r3, #0
 800c916:	e7e4      	b.n	800c8e2 <__hi0bits+0xa>

0800c918 <__lo0bits>:
 800c918:	6803      	ldr	r3, [r0, #0]
 800c91a:	f013 0207 	ands.w	r2, r3, #7
 800c91e:	4601      	mov	r1, r0
 800c920:	d00b      	beq.n	800c93a <__lo0bits+0x22>
 800c922:	07da      	lsls	r2, r3, #31
 800c924:	d424      	bmi.n	800c970 <__lo0bits+0x58>
 800c926:	0798      	lsls	r0, r3, #30
 800c928:	bf49      	itett	mi
 800c92a:	085b      	lsrmi	r3, r3, #1
 800c92c:	089b      	lsrpl	r3, r3, #2
 800c92e:	2001      	movmi	r0, #1
 800c930:	600b      	strmi	r3, [r1, #0]
 800c932:	bf5c      	itt	pl
 800c934:	600b      	strpl	r3, [r1, #0]
 800c936:	2002      	movpl	r0, #2
 800c938:	4770      	bx	lr
 800c93a:	b298      	uxth	r0, r3
 800c93c:	b9b0      	cbnz	r0, 800c96c <__lo0bits+0x54>
 800c93e:	0c1b      	lsrs	r3, r3, #16
 800c940:	2010      	movs	r0, #16
 800c942:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c946:	bf04      	itt	eq
 800c948:	0a1b      	lsreq	r3, r3, #8
 800c94a:	3008      	addeq	r0, #8
 800c94c:	071a      	lsls	r2, r3, #28
 800c94e:	bf04      	itt	eq
 800c950:	091b      	lsreq	r3, r3, #4
 800c952:	3004      	addeq	r0, #4
 800c954:	079a      	lsls	r2, r3, #30
 800c956:	bf04      	itt	eq
 800c958:	089b      	lsreq	r3, r3, #2
 800c95a:	3002      	addeq	r0, #2
 800c95c:	07da      	lsls	r2, r3, #31
 800c95e:	d403      	bmi.n	800c968 <__lo0bits+0x50>
 800c960:	085b      	lsrs	r3, r3, #1
 800c962:	f100 0001 	add.w	r0, r0, #1
 800c966:	d005      	beq.n	800c974 <__lo0bits+0x5c>
 800c968:	600b      	str	r3, [r1, #0]
 800c96a:	4770      	bx	lr
 800c96c:	4610      	mov	r0, r2
 800c96e:	e7e8      	b.n	800c942 <__lo0bits+0x2a>
 800c970:	2000      	movs	r0, #0
 800c972:	4770      	bx	lr
 800c974:	2020      	movs	r0, #32
 800c976:	4770      	bx	lr

0800c978 <__i2b>:
 800c978:	b510      	push	{r4, lr}
 800c97a:	460c      	mov	r4, r1
 800c97c:	2101      	movs	r1, #1
 800c97e:	f7ff feb5 	bl	800c6ec <_Balloc>
 800c982:	4602      	mov	r2, r0
 800c984:	b928      	cbnz	r0, 800c992 <__i2b+0x1a>
 800c986:	4b05      	ldr	r3, [pc, #20]	; (800c99c <__i2b+0x24>)
 800c988:	4805      	ldr	r0, [pc, #20]	; (800c9a0 <__i2b+0x28>)
 800c98a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c98e:	f000 fdb7 	bl	800d500 <__assert_func>
 800c992:	2301      	movs	r3, #1
 800c994:	6144      	str	r4, [r0, #20]
 800c996:	6103      	str	r3, [r0, #16]
 800c998:	bd10      	pop	{r4, pc}
 800c99a:	bf00      	nop
 800c99c:	08023054 	.word	0x08023054
 800c9a0:	080230e4 	.word	0x080230e4

0800c9a4 <__multiply>:
 800c9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9a8:	4614      	mov	r4, r2
 800c9aa:	690a      	ldr	r2, [r1, #16]
 800c9ac:	6923      	ldr	r3, [r4, #16]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	bfb8      	it	lt
 800c9b2:	460b      	movlt	r3, r1
 800c9b4:	460d      	mov	r5, r1
 800c9b6:	bfbc      	itt	lt
 800c9b8:	4625      	movlt	r5, r4
 800c9ba:	461c      	movlt	r4, r3
 800c9bc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c9c0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c9c4:	68ab      	ldr	r3, [r5, #8]
 800c9c6:	6869      	ldr	r1, [r5, #4]
 800c9c8:	eb0a 0709 	add.w	r7, sl, r9
 800c9cc:	42bb      	cmp	r3, r7
 800c9ce:	b085      	sub	sp, #20
 800c9d0:	bfb8      	it	lt
 800c9d2:	3101      	addlt	r1, #1
 800c9d4:	f7ff fe8a 	bl	800c6ec <_Balloc>
 800c9d8:	b930      	cbnz	r0, 800c9e8 <__multiply+0x44>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	4b42      	ldr	r3, [pc, #264]	; (800cae8 <__multiply+0x144>)
 800c9de:	4843      	ldr	r0, [pc, #268]	; (800caec <__multiply+0x148>)
 800c9e0:	f240 115d 	movw	r1, #349	; 0x15d
 800c9e4:	f000 fd8c 	bl	800d500 <__assert_func>
 800c9e8:	f100 0614 	add.w	r6, r0, #20
 800c9ec:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c9f0:	4633      	mov	r3, r6
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	4543      	cmp	r3, r8
 800c9f6:	d31e      	bcc.n	800ca36 <__multiply+0x92>
 800c9f8:	f105 0c14 	add.w	ip, r5, #20
 800c9fc:	f104 0314 	add.w	r3, r4, #20
 800ca00:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800ca04:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800ca08:	9202      	str	r2, [sp, #8]
 800ca0a:	ebac 0205 	sub.w	r2, ip, r5
 800ca0e:	3a15      	subs	r2, #21
 800ca10:	f022 0203 	bic.w	r2, r2, #3
 800ca14:	3204      	adds	r2, #4
 800ca16:	f105 0115 	add.w	r1, r5, #21
 800ca1a:	458c      	cmp	ip, r1
 800ca1c:	bf38      	it	cc
 800ca1e:	2204      	movcc	r2, #4
 800ca20:	9201      	str	r2, [sp, #4]
 800ca22:	9a02      	ldr	r2, [sp, #8]
 800ca24:	9303      	str	r3, [sp, #12]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d808      	bhi.n	800ca3c <__multiply+0x98>
 800ca2a:	2f00      	cmp	r7, #0
 800ca2c:	dc55      	bgt.n	800cada <__multiply+0x136>
 800ca2e:	6107      	str	r7, [r0, #16]
 800ca30:	b005      	add	sp, #20
 800ca32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca36:	f843 2b04 	str.w	r2, [r3], #4
 800ca3a:	e7db      	b.n	800c9f4 <__multiply+0x50>
 800ca3c:	f8b3 a000 	ldrh.w	sl, [r3]
 800ca40:	f1ba 0f00 	cmp.w	sl, #0
 800ca44:	d020      	beq.n	800ca88 <__multiply+0xe4>
 800ca46:	f105 0e14 	add.w	lr, r5, #20
 800ca4a:	46b1      	mov	r9, r6
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800ca52:	f8d9 b000 	ldr.w	fp, [r9]
 800ca56:	b2a1      	uxth	r1, r4
 800ca58:	fa1f fb8b 	uxth.w	fp, fp
 800ca5c:	fb0a b101 	mla	r1, sl, r1, fp
 800ca60:	4411      	add	r1, r2
 800ca62:	f8d9 2000 	ldr.w	r2, [r9]
 800ca66:	0c24      	lsrs	r4, r4, #16
 800ca68:	0c12      	lsrs	r2, r2, #16
 800ca6a:	fb0a 2404 	mla	r4, sl, r4, r2
 800ca6e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ca72:	b289      	uxth	r1, r1
 800ca74:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ca78:	45f4      	cmp	ip, lr
 800ca7a:	f849 1b04 	str.w	r1, [r9], #4
 800ca7e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ca82:	d8e4      	bhi.n	800ca4e <__multiply+0xaa>
 800ca84:	9901      	ldr	r1, [sp, #4]
 800ca86:	5072      	str	r2, [r6, r1]
 800ca88:	9a03      	ldr	r2, [sp, #12]
 800ca8a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ca8e:	3304      	adds	r3, #4
 800ca90:	f1b9 0f00 	cmp.w	r9, #0
 800ca94:	d01f      	beq.n	800cad6 <__multiply+0x132>
 800ca96:	6834      	ldr	r4, [r6, #0]
 800ca98:	f105 0114 	add.w	r1, r5, #20
 800ca9c:	46b6      	mov	lr, r6
 800ca9e:	f04f 0a00 	mov.w	sl, #0
 800caa2:	880a      	ldrh	r2, [r1, #0]
 800caa4:	f8be b002 	ldrh.w	fp, [lr, #2]
 800caa8:	fb09 b202 	mla	r2, r9, r2, fp
 800caac:	4492      	add	sl, r2
 800caae:	b2a4      	uxth	r4, r4
 800cab0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800cab4:	f84e 4b04 	str.w	r4, [lr], #4
 800cab8:	f851 4b04 	ldr.w	r4, [r1], #4
 800cabc:	f8be 2000 	ldrh.w	r2, [lr]
 800cac0:	0c24      	lsrs	r4, r4, #16
 800cac2:	fb09 2404 	mla	r4, r9, r4, r2
 800cac6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800caca:	458c      	cmp	ip, r1
 800cacc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800cad0:	d8e7      	bhi.n	800caa2 <__multiply+0xfe>
 800cad2:	9a01      	ldr	r2, [sp, #4]
 800cad4:	50b4      	str	r4, [r6, r2]
 800cad6:	3604      	adds	r6, #4
 800cad8:	e7a3      	b.n	800ca22 <__multiply+0x7e>
 800cada:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d1a5      	bne.n	800ca2e <__multiply+0x8a>
 800cae2:	3f01      	subs	r7, #1
 800cae4:	e7a1      	b.n	800ca2a <__multiply+0x86>
 800cae6:	bf00      	nop
 800cae8:	08023054 	.word	0x08023054
 800caec:	080230e4 	.word	0x080230e4

0800caf0 <__pow5mult>:
 800caf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800caf4:	4615      	mov	r5, r2
 800caf6:	f012 0203 	ands.w	r2, r2, #3
 800cafa:	4606      	mov	r6, r0
 800cafc:	460f      	mov	r7, r1
 800cafe:	d007      	beq.n	800cb10 <__pow5mult+0x20>
 800cb00:	4c25      	ldr	r4, [pc, #148]	; (800cb98 <__pow5mult+0xa8>)
 800cb02:	3a01      	subs	r2, #1
 800cb04:	2300      	movs	r3, #0
 800cb06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb0a:	f7ff fe51 	bl	800c7b0 <__multadd>
 800cb0e:	4607      	mov	r7, r0
 800cb10:	10ad      	asrs	r5, r5, #2
 800cb12:	d03d      	beq.n	800cb90 <__pow5mult+0xa0>
 800cb14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cb16:	b97c      	cbnz	r4, 800cb38 <__pow5mult+0x48>
 800cb18:	2010      	movs	r0, #16
 800cb1a:	f7ff fdcd 	bl	800c6b8 <malloc>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	6270      	str	r0, [r6, #36]	; 0x24
 800cb22:	b928      	cbnz	r0, 800cb30 <__pow5mult+0x40>
 800cb24:	4b1d      	ldr	r3, [pc, #116]	; (800cb9c <__pow5mult+0xac>)
 800cb26:	481e      	ldr	r0, [pc, #120]	; (800cba0 <__pow5mult+0xb0>)
 800cb28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cb2c:	f000 fce8 	bl	800d500 <__assert_func>
 800cb30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cb34:	6004      	str	r4, [r0, #0]
 800cb36:	60c4      	str	r4, [r0, #12]
 800cb38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cb3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cb40:	b94c      	cbnz	r4, 800cb56 <__pow5mult+0x66>
 800cb42:	f240 2171 	movw	r1, #625	; 0x271
 800cb46:	4630      	mov	r0, r6
 800cb48:	f7ff ff16 	bl	800c978 <__i2b>
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cb52:	4604      	mov	r4, r0
 800cb54:	6003      	str	r3, [r0, #0]
 800cb56:	f04f 0900 	mov.w	r9, #0
 800cb5a:	07eb      	lsls	r3, r5, #31
 800cb5c:	d50a      	bpl.n	800cb74 <__pow5mult+0x84>
 800cb5e:	4639      	mov	r1, r7
 800cb60:	4622      	mov	r2, r4
 800cb62:	4630      	mov	r0, r6
 800cb64:	f7ff ff1e 	bl	800c9a4 <__multiply>
 800cb68:	4639      	mov	r1, r7
 800cb6a:	4680      	mov	r8, r0
 800cb6c:	4630      	mov	r0, r6
 800cb6e:	f7ff fdfd 	bl	800c76c <_Bfree>
 800cb72:	4647      	mov	r7, r8
 800cb74:	106d      	asrs	r5, r5, #1
 800cb76:	d00b      	beq.n	800cb90 <__pow5mult+0xa0>
 800cb78:	6820      	ldr	r0, [r4, #0]
 800cb7a:	b938      	cbnz	r0, 800cb8c <__pow5mult+0x9c>
 800cb7c:	4622      	mov	r2, r4
 800cb7e:	4621      	mov	r1, r4
 800cb80:	4630      	mov	r0, r6
 800cb82:	f7ff ff0f 	bl	800c9a4 <__multiply>
 800cb86:	6020      	str	r0, [r4, #0]
 800cb88:	f8c0 9000 	str.w	r9, [r0]
 800cb8c:	4604      	mov	r4, r0
 800cb8e:	e7e4      	b.n	800cb5a <__pow5mult+0x6a>
 800cb90:	4638      	mov	r0, r7
 800cb92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb96:	bf00      	nop
 800cb98:	08023238 	.word	0x08023238
 800cb9c:	08022fde 	.word	0x08022fde
 800cba0:	080230e4 	.word	0x080230e4

0800cba4 <__lshift>:
 800cba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba8:	460c      	mov	r4, r1
 800cbaa:	6849      	ldr	r1, [r1, #4]
 800cbac:	6923      	ldr	r3, [r4, #16]
 800cbae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cbb2:	68a3      	ldr	r3, [r4, #8]
 800cbb4:	4607      	mov	r7, r0
 800cbb6:	4691      	mov	r9, r2
 800cbb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cbbc:	f108 0601 	add.w	r6, r8, #1
 800cbc0:	42b3      	cmp	r3, r6
 800cbc2:	db0b      	blt.n	800cbdc <__lshift+0x38>
 800cbc4:	4638      	mov	r0, r7
 800cbc6:	f7ff fd91 	bl	800c6ec <_Balloc>
 800cbca:	4605      	mov	r5, r0
 800cbcc:	b948      	cbnz	r0, 800cbe2 <__lshift+0x3e>
 800cbce:	4602      	mov	r2, r0
 800cbd0:	4b28      	ldr	r3, [pc, #160]	; (800cc74 <__lshift+0xd0>)
 800cbd2:	4829      	ldr	r0, [pc, #164]	; (800cc78 <__lshift+0xd4>)
 800cbd4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cbd8:	f000 fc92 	bl	800d500 <__assert_func>
 800cbdc:	3101      	adds	r1, #1
 800cbde:	005b      	lsls	r3, r3, #1
 800cbe0:	e7ee      	b.n	800cbc0 <__lshift+0x1c>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	f100 0114 	add.w	r1, r0, #20
 800cbe8:	f100 0210 	add.w	r2, r0, #16
 800cbec:	4618      	mov	r0, r3
 800cbee:	4553      	cmp	r3, sl
 800cbf0:	db33      	blt.n	800cc5a <__lshift+0xb6>
 800cbf2:	6920      	ldr	r0, [r4, #16]
 800cbf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cbf8:	f104 0314 	add.w	r3, r4, #20
 800cbfc:	f019 091f 	ands.w	r9, r9, #31
 800cc00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc04:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cc08:	d02b      	beq.n	800cc62 <__lshift+0xbe>
 800cc0a:	f1c9 0e20 	rsb	lr, r9, #32
 800cc0e:	468a      	mov	sl, r1
 800cc10:	2200      	movs	r2, #0
 800cc12:	6818      	ldr	r0, [r3, #0]
 800cc14:	fa00 f009 	lsl.w	r0, r0, r9
 800cc18:	4302      	orrs	r2, r0
 800cc1a:	f84a 2b04 	str.w	r2, [sl], #4
 800cc1e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc22:	459c      	cmp	ip, r3
 800cc24:	fa22 f20e 	lsr.w	r2, r2, lr
 800cc28:	d8f3      	bhi.n	800cc12 <__lshift+0x6e>
 800cc2a:	ebac 0304 	sub.w	r3, ip, r4
 800cc2e:	3b15      	subs	r3, #21
 800cc30:	f023 0303 	bic.w	r3, r3, #3
 800cc34:	3304      	adds	r3, #4
 800cc36:	f104 0015 	add.w	r0, r4, #21
 800cc3a:	4584      	cmp	ip, r0
 800cc3c:	bf38      	it	cc
 800cc3e:	2304      	movcc	r3, #4
 800cc40:	50ca      	str	r2, [r1, r3]
 800cc42:	b10a      	cbz	r2, 800cc48 <__lshift+0xa4>
 800cc44:	f108 0602 	add.w	r6, r8, #2
 800cc48:	3e01      	subs	r6, #1
 800cc4a:	4638      	mov	r0, r7
 800cc4c:	612e      	str	r6, [r5, #16]
 800cc4e:	4621      	mov	r1, r4
 800cc50:	f7ff fd8c 	bl	800c76c <_Bfree>
 800cc54:	4628      	mov	r0, r5
 800cc56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc5e:	3301      	adds	r3, #1
 800cc60:	e7c5      	b.n	800cbee <__lshift+0x4a>
 800cc62:	3904      	subs	r1, #4
 800cc64:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc68:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc6c:	459c      	cmp	ip, r3
 800cc6e:	d8f9      	bhi.n	800cc64 <__lshift+0xc0>
 800cc70:	e7ea      	b.n	800cc48 <__lshift+0xa4>
 800cc72:	bf00      	nop
 800cc74:	08023054 	.word	0x08023054
 800cc78:	080230e4 	.word	0x080230e4

0800cc7c <__mcmp>:
 800cc7c:	b530      	push	{r4, r5, lr}
 800cc7e:	6902      	ldr	r2, [r0, #16]
 800cc80:	690c      	ldr	r4, [r1, #16]
 800cc82:	1b12      	subs	r2, r2, r4
 800cc84:	d10e      	bne.n	800cca4 <__mcmp+0x28>
 800cc86:	f100 0314 	add.w	r3, r0, #20
 800cc8a:	3114      	adds	r1, #20
 800cc8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cc90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cc94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cc98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cc9c:	42a5      	cmp	r5, r4
 800cc9e:	d003      	beq.n	800cca8 <__mcmp+0x2c>
 800cca0:	d305      	bcc.n	800ccae <__mcmp+0x32>
 800cca2:	2201      	movs	r2, #1
 800cca4:	4610      	mov	r0, r2
 800cca6:	bd30      	pop	{r4, r5, pc}
 800cca8:	4283      	cmp	r3, r0
 800ccaa:	d3f3      	bcc.n	800cc94 <__mcmp+0x18>
 800ccac:	e7fa      	b.n	800cca4 <__mcmp+0x28>
 800ccae:	f04f 32ff 	mov.w	r2, #4294967295
 800ccb2:	e7f7      	b.n	800cca4 <__mcmp+0x28>

0800ccb4 <__mdiff>:
 800ccb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb8:	460c      	mov	r4, r1
 800ccba:	4606      	mov	r6, r0
 800ccbc:	4611      	mov	r1, r2
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	4617      	mov	r7, r2
 800ccc2:	f7ff ffdb 	bl	800cc7c <__mcmp>
 800ccc6:	1e05      	subs	r5, r0, #0
 800ccc8:	d110      	bne.n	800ccec <__mdiff+0x38>
 800ccca:	4629      	mov	r1, r5
 800cccc:	4630      	mov	r0, r6
 800ccce:	f7ff fd0d 	bl	800c6ec <_Balloc>
 800ccd2:	b930      	cbnz	r0, 800cce2 <__mdiff+0x2e>
 800ccd4:	4b39      	ldr	r3, [pc, #228]	; (800cdbc <__mdiff+0x108>)
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	f240 2132 	movw	r1, #562	; 0x232
 800ccdc:	4838      	ldr	r0, [pc, #224]	; (800cdc0 <__mdiff+0x10c>)
 800ccde:	f000 fc0f 	bl	800d500 <__assert_func>
 800cce2:	2301      	movs	r3, #1
 800cce4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cce8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccec:	bfa4      	itt	ge
 800ccee:	463b      	movge	r3, r7
 800ccf0:	4627      	movge	r7, r4
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	6879      	ldr	r1, [r7, #4]
 800ccf6:	bfa6      	itte	ge
 800ccf8:	461c      	movge	r4, r3
 800ccfa:	2500      	movge	r5, #0
 800ccfc:	2501      	movlt	r5, #1
 800ccfe:	f7ff fcf5 	bl	800c6ec <_Balloc>
 800cd02:	b920      	cbnz	r0, 800cd0e <__mdiff+0x5a>
 800cd04:	4b2d      	ldr	r3, [pc, #180]	; (800cdbc <__mdiff+0x108>)
 800cd06:	4602      	mov	r2, r0
 800cd08:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cd0c:	e7e6      	b.n	800ccdc <__mdiff+0x28>
 800cd0e:	693e      	ldr	r6, [r7, #16]
 800cd10:	60c5      	str	r5, [r0, #12]
 800cd12:	6925      	ldr	r5, [r4, #16]
 800cd14:	f107 0114 	add.w	r1, r7, #20
 800cd18:	f104 0914 	add.w	r9, r4, #20
 800cd1c:	f100 0e14 	add.w	lr, r0, #20
 800cd20:	f107 0210 	add.w	r2, r7, #16
 800cd24:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cd28:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cd2c:	46f2      	mov	sl, lr
 800cd2e:	2700      	movs	r7, #0
 800cd30:	f859 3b04 	ldr.w	r3, [r9], #4
 800cd34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cd38:	fa1f f883 	uxth.w	r8, r3
 800cd3c:	fa17 f78b 	uxtah	r7, r7, fp
 800cd40:	0c1b      	lsrs	r3, r3, #16
 800cd42:	eba7 0808 	sub.w	r8, r7, r8
 800cd46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cd4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cd4e:	fa1f f888 	uxth.w	r8, r8
 800cd52:	141f      	asrs	r7, r3, #16
 800cd54:	454d      	cmp	r5, r9
 800cd56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cd5a:	f84a 3b04 	str.w	r3, [sl], #4
 800cd5e:	d8e7      	bhi.n	800cd30 <__mdiff+0x7c>
 800cd60:	1b2b      	subs	r3, r5, r4
 800cd62:	3b15      	subs	r3, #21
 800cd64:	f023 0303 	bic.w	r3, r3, #3
 800cd68:	3304      	adds	r3, #4
 800cd6a:	3415      	adds	r4, #21
 800cd6c:	42a5      	cmp	r5, r4
 800cd6e:	bf38      	it	cc
 800cd70:	2304      	movcc	r3, #4
 800cd72:	4419      	add	r1, r3
 800cd74:	4473      	add	r3, lr
 800cd76:	469e      	mov	lr, r3
 800cd78:	460d      	mov	r5, r1
 800cd7a:	4565      	cmp	r5, ip
 800cd7c:	d30e      	bcc.n	800cd9c <__mdiff+0xe8>
 800cd7e:	f10c 0203 	add.w	r2, ip, #3
 800cd82:	1a52      	subs	r2, r2, r1
 800cd84:	f022 0203 	bic.w	r2, r2, #3
 800cd88:	3903      	subs	r1, #3
 800cd8a:	458c      	cmp	ip, r1
 800cd8c:	bf38      	it	cc
 800cd8e:	2200      	movcc	r2, #0
 800cd90:	441a      	add	r2, r3
 800cd92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cd96:	b17b      	cbz	r3, 800cdb8 <__mdiff+0x104>
 800cd98:	6106      	str	r6, [r0, #16]
 800cd9a:	e7a5      	b.n	800cce8 <__mdiff+0x34>
 800cd9c:	f855 8b04 	ldr.w	r8, [r5], #4
 800cda0:	fa17 f488 	uxtah	r4, r7, r8
 800cda4:	1422      	asrs	r2, r4, #16
 800cda6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cdaa:	b2a4      	uxth	r4, r4
 800cdac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cdb0:	f84e 4b04 	str.w	r4, [lr], #4
 800cdb4:	1417      	asrs	r7, r2, #16
 800cdb6:	e7e0      	b.n	800cd7a <__mdiff+0xc6>
 800cdb8:	3e01      	subs	r6, #1
 800cdba:	e7ea      	b.n	800cd92 <__mdiff+0xde>
 800cdbc:	08023054 	.word	0x08023054
 800cdc0:	080230e4 	.word	0x080230e4

0800cdc4 <__ulp>:
 800cdc4:	b082      	sub	sp, #8
 800cdc6:	ed8d 0b00 	vstr	d0, [sp]
 800cdca:	9b01      	ldr	r3, [sp, #4]
 800cdcc:	4912      	ldr	r1, [pc, #72]	; (800ce18 <__ulp+0x54>)
 800cdce:	4019      	ands	r1, r3
 800cdd0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800cdd4:	2900      	cmp	r1, #0
 800cdd6:	dd05      	ble.n	800cde4 <__ulp+0x20>
 800cdd8:	2200      	movs	r2, #0
 800cdda:	460b      	mov	r3, r1
 800cddc:	ec43 2b10 	vmov	d0, r2, r3
 800cde0:	b002      	add	sp, #8
 800cde2:	4770      	bx	lr
 800cde4:	4249      	negs	r1, r1
 800cde6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800cdea:	ea4f 5021 	mov.w	r0, r1, asr #20
 800cdee:	f04f 0200 	mov.w	r2, #0
 800cdf2:	f04f 0300 	mov.w	r3, #0
 800cdf6:	da04      	bge.n	800ce02 <__ulp+0x3e>
 800cdf8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800cdfc:	fa41 f300 	asr.w	r3, r1, r0
 800ce00:	e7ec      	b.n	800cddc <__ulp+0x18>
 800ce02:	f1a0 0114 	sub.w	r1, r0, #20
 800ce06:	291e      	cmp	r1, #30
 800ce08:	bfda      	itte	le
 800ce0a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ce0e:	fa20 f101 	lsrle.w	r1, r0, r1
 800ce12:	2101      	movgt	r1, #1
 800ce14:	460a      	mov	r2, r1
 800ce16:	e7e1      	b.n	800cddc <__ulp+0x18>
 800ce18:	7ff00000 	.word	0x7ff00000

0800ce1c <__b2d>:
 800ce1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce1e:	6905      	ldr	r5, [r0, #16]
 800ce20:	f100 0714 	add.w	r7, r0, #20
 800ce24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ce28:	1f2e      	subs	r6, r5, #4
 800ce2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f7ff fd52 	bl	800c8d8 <__hi0bits>
 800ce34:	f1c0 0320 	rsb	r3, r0, #32
 800ce38:	280a      	cmp	r0, #10
 800ce3a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ceb8 <__b2d+0x9c>
 800ce3e:	600b      	str	r3, [r1, #0]
 800ce40:	dc14      	bgt.n	800ce6c <__b2d+0x50>
 800ce42:	f1c0 0e0b 	rsb	lr, r0, #11
 800ce46:	fa24 f10e 	lsr.w	r1, r4, lr
 800ce4a:	42b7      	cmp	r7, r6
 800ce4c:	ea41 030c 	orr.w	r3, r1, ip
 800ce50:	bf34      	ite	cc
 800ce52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ce56:	2100      	movcs	r1, #0
 800ce58:	3015      	adds	r0, #21
 800ce5a:	fa04 f000 	lsl.w	r0, r4, r0
 800ce5e:	fa21 f10e 	lsr.w	r1, r1, lr
 800ce62:	ea40 0201 	orr.w	r2, r0, r1
 800ce66:	ec43 2b10 	vmov	d0, r2, r3
 800ce6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce6c:	42b7      	cmp	r7, r6
 800ce6e:	bf3a      	itte	cc
 800ce70:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ce74:	f1a5 0608 	subcc.w	r6, r5, #8
 800ce78:	2100      	movcs	r1, #0
 800ce7a:	380b      	subs	r0, #11
 800ce7c:	d017      	beq.n	800ceae <__b2d+0x92>
 800ce7e:	f1c0 0c20 	rsb	ip, r0, #32
 800ce82:	fa04 f500 	lsl.w	r5, r4, r0
 800ce86:	42be      	cmp	r6, r7
 800ce88:	fa21 f40c 	lsr.w	r4, r1, ip
 800ce8c:	ea45 0504 	orr.w	r5, r5, r4
 800ce90:	bf8c      	ite	hi
 800ce92:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ce96:	2400      	movls	r4, #0
 800ce98:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ce9c:	fa01 f000 	lsl.w	r0, r1, r0
 800cea0:	fa24 f40c 	lsr.w	r4, r4, ip
 800cea4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cea8:	ea40 0204 	orr.w	r2, r0, r4
 800ceac:	e7db      	b.n	800ce66 <__b2d+0x4a>
 800ceae:	ea44 030c 	orr.w	r3, r4, ip
 800ceb2:	460a      	mov	r2, r1
 800ceb4:	e7d7      	b.n	800ce66 <__b2d+0x4a>
 800ceb6:	bf00      	nop
 800ceb8:	3ff00000 	.word	0x3ff00000

0800cebc <__d2b>:
 800cebc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cec0:	4689      	mov	r9, r1
 800cec2:	2101      	movs	r1, #1
 800cec4:	ec57 6b10 	vmov	r6, r7, d0
 800cec8:	4690      	mov	r8, r2
 800ceca:	f7ff fc0f 	bl	800c6ec <_Balloc>
 800cece:	4604      	mov	r4, r0
 800ced0:	b930      	cbnz	r0, 800cee0 <__d2b+0x24>
 800ced2:	4602      	mov	r2, r0
 800ced4:	4b25      	ldr	r3, [pc, #148]	; (800cf6c <__d2b+0xb0>)
 800ced6:	4826      	ldr	r0, [pc, #152]	; (800cf70 <__d2b+0xb4>)
 800ced8:	f240 310a 	movw	r1, #778	; 0x30a
 800cedc:	f000 fb10 	bl	800d500 <__assert_func>
 800cee0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cee4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cee8:	bb35      	cbnz	r5, 800cf38 <__d2b+0x7c>
 800ceea:	2e00      	cmp	r6, #0
 800ceec:	9301      	str	r3, [sp, #4]
 800ceee:	d028      	beq.n	800cf42 <__d2b+0x86>
 800cef0:	4668      	mov	r0, sp
 800cef2:	9600      	str	r6, [sp, #0]
 800cef4:	f7ff fd10 	bl	800c918 <__lo0bits>
 800cef8:	9900      	ldr	r1, [sp, #0]
 800cefa:	b300      	cbz	r0, 800cf3e <__d2b+0x82>
 800cefc:	9a01      	ldr	r2, [sp, #4]
 800cefe:	f1c0 0320 	rsb	r3, r0, #32
 800cf02:	fa02 f303 	lsl.w	r3, r2, r3
 800cf06:	430b      	orrs	r3, r1
 800cf08:	40c2      	lsrs	r2, r0
 800cf0a:	6163      	str	r3, [r4, #20]
 800cf0c:	9201      	str	r2, [sp, #4]
 800cf0e:	9b01      	ldr	r3, [sp, #4]
 800cf10:	61a3      	str	r3, [r4, #24]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	bf14      	ite	ne
 800cf16:	2202      	movne	r2, #2
 800cf18:	2201      	moveq	r2, #1
 800cf1a:	6122      	str	r2, [r4, #16]
 800cf1c:	b1d5      	cbz	r5, 800cf54 <__d2b+0x98>
 800cf1e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cf22:	4405      	add	r5, r0
 800cf24:	f8c9 5000 	str.w	r5, [r9]
 800cf28:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cf2c:	f8c8 0000 	str.w	r0, [r8]
 800cf30:	4620      	mov	r0, r4
 800cf32:	b003      	add	sp, #12
 800cf34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf3c:	e7d5      	b.n	800ceea <__d2b+0x2e>
 800cf3e:	6161      	str	r1, [r4, #20]
 800cf40:	e7e5      	b.n	800cf0e <__d2b+0x52>
 800cf42:	a801      	add	r0, sp, #4
 800cf44:	f7ff fce8 	bl	800c918 <__lo0bits>
 800cf48:	9b01      	ldr	r3, [sp, #4]
 800cf4a:	6163      	str	r3, [r4, #20]
 800cf4c:	2201      	movs	r2, #1
 800cf4e:	6122      	str	r2, [r4, #16]
 800cf50:	3020      	adds	r0, #32
 800cf52:	e7e3      	b.n	800cf1c <__d2b+0x60>
 800cf54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cf5c:	f8c9 0000 	str.w	r0, [r9]
 800cf60:	6918      	ldr	r0, [r3, #16]
 800cf62:	f7ff fcb9 	bl	800c8d8 <__hi0bits>
 800cf66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf6a:	e7df      	b.n	800cf2c <__d2b+0x70>
 800cf6c:	08023054 	.word	0x08023054
 800cf70:	080230e4 	.word	0x080230e4

0800cf74 <__ratio>:
 800cf74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf78:	4688      	mov	r8, r1
 800cf7a:	4669      	mov	r1, sp
 800cf7c:	4681      	mov	r9, r0
 800cf7e:	f7ff ff4d 	bl	800ce1c <__b2d>
 800cf82:	a901      	add	r1, sp, #4
 800cf84:	4640      	mov	r0, r8
 800cf86:	ec55 4b10 	vmov	r4, r5, d0
 800cf8a:	f7ff ff47 	bl	800ce1c <__b2d>
 800cf8e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cf92:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cf96:	eba3 0c02 	sub.w	ip, r3, r2
 800cf9a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cf9e:	1a9b      	subs	r3, r3, r2
 800cfa0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cfa4:	ec51 0b10 	vmov	r0, r1, d0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	bfd6      	itet	le
 800cfac:	460a      	movle	r2, r1
 800cfae:	462a      	movgt	r2, r5
 800cfb0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cfb4:	468b      	mov	fp, r1
 800cfb6:	462f      	mov	r7, r5
 800cfb8:	bfd4      	ite	le
 800cfba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cfbe:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cfc2:	4620      	mov	r0, r4
 800cfc4:	ee10 2a10 	vmov	r2, s0
 800cfc8:	465b      	mov	r3, fp
 800cfca:	4639      	mov	r1, r7
 800cfcc:	f7f3 fc9e 	bl	800090c <__aeabi_ddiv>
 800cfd0:	ec41 0b10 	vmov	d0, r0, r1
 800cfd4:	b003      	add	sp, #12
 800cfd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cfda <__copybits>:
 800cfda:	3901      	subs	r1, #1
 800cfdc:	b570      	push	{r4, r5, r6, lr}
 800cfde:	1149      	asrs	r1, r1, #5
 800cfe0:	6914      	ldr	r4, [r2, #16]
 800cfe2:	3101      	adds	r1, #1
 800cfe4:	f102 0314 	add.w	r3, r2, #20
 800cfe8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cfec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cff0:	1f05      	subs	r5, r0, #4
 800cff2:	42a3      	cmp	r3, r4
 800cff4:	d30c      	bcc.n	800d010 <__copybits+0x36>
 800cff6:	1aa3      	subs	r3, r4, r2
 800cff8:	3b11      	subs	r3, #17
 800cffa:	f023 0303 	bic.w	r3, r3, #3
 800cffe:	3211      	adds	r2, #17
 800d000:	42a2      	cmp	r2, r4
 800d002:	bf88      	it	hi
 800d004:	2300      	movhi	r3, #0
 800d006:	4418      	add	r0, r3
 800d008:	2300      	movs	r3, #0
 800d00a:	4288      	cmp	r0, r1
 800d00c:	d305      	bcc.n	800d01a <__copybits+0x40>
 800d00e:	bd70      	pop	{r4, r5, r6, pc}
 800d010:	f853 6b04 	ldr.w	r6, [r3], #4
 800d014:	f845 6f04 	str.w	r6, [r5, #4]!
 800d018:	e7eb      	b.n	800cff2 <__copybits+0x18>
 800d01a:	f840 3b04 	str.w	r3, [r0], #4
 800d01e:	e7f4      	b.n	800d00a <__copybits+0x30>

0800d020 <__any_on>:
 800d020:	f100 0214 	add.w	r2, r0, #20
 800d024:	6900      	ldr	r0, [r0, #16]
 800d026:	114b      	asrs	r3, r1, #5
 800d028:	4298      	cmp	r0, r3
 800d02a:	b510      	push	{r4, lr}
 800d02c:	db11      	blt.n	800d052 <__any_on+0x32>
 800d02e:	dd0a      	ble.n	800d046 <__any_on+0x26>
 800d030:	f011 011f 	ands.w	r1, r1, #31
 800d034:	d007      	beq.n	800d046 <__any_on+0x26>
 800d036:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d03a:	fa24 f001 	lsr.w	r0, r4, r1
 800d03e:	fa00 f101 	lsl.w	r1, r0, r1
 800d042:	428c      	cmp	r4, r1
 800d044:	d10b      	bne.n	800d05e <__any_on+0x3e>
 800d046:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d04a:	4293      	cmp	r3, r2
 800d04c:	d803      	bhi.n	800d056 <__any_on+0x36>
 800d04e:	2000      	movs	r0, #0
 800d050:	bd10      	pop	{r4, pc}
 800d052:	4603      	mov	r3, r0
 800d054:	e7f7      	b.n	800d046 <__any_on+0x26>
 800d056:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d05a:	2900      	cmp	r1, #0
 800d05c:	d0f5      	beq.n	800d04a <__any_on+0x2a>
 800d05e:	2001      	movs	r0, #1
 800d060:	e7f6      	b.n	800d050 <__any_on+0x30>

0800d062 <_calloc_r>:
 800d062:	b513      	push	{r0, r1, r4, lr}
 800d064:	434a      	muls	r2, r1
 800d066:	4611      	mov	r1, r2
 800d068:	9201      	str	r2, [sp, #4]
 800d06a:	f000 f859 	bl	800d120 <_malloc_r>
 800d06e:	4604      	mov	r4, r0
 800d070:	b118      	cbz	r0, 800d07a <_calloc_r+0x18>
 800d072:	9a01      	ldr	r2, [sp, #4]
 800d074:	2100      	movs	r1, #0
 800d076:	f7fc fba3 	bl	80097c0 <memset>
 800d07a:	4620      	mov	r0, r4
 800d07c:	b002      	add	sp, #8
 800d07e:	bd10      	pop	{r4, pc}

0800d080 <_free_r>:
 800d080:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d082:	2900      	cmp	r1, #0
 800d084:	d048      	beq.n	800d118 <_free_r+0x98>
 800d086:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d08a:	9001      	str	r0, [sp, #4]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	f1a1 0404 	sub.w	r4, r1, #4
 800d092:	bfb8      	it	lt
 800d094:	18e4      	addlt	r4, r4, r3
 800d096:	f000 fa7d 	bl	800d594 <__malloc_lock>
 800d09a:	4a20      	ldr	r2, [pc, #128]	; (800d11c <_free_r+0x9c>)
 800d09c:	9801      	ldr	r0, [sp, #4]
 800d09e:	6813      	ldr	r3, [r2, #0]
 800d0a0:	4615      	mov	r5, r2
 800d0a2:	b933      	cbnz	r3, 800d0b2 <_free_r+0x32>
 800d0a4:	6063      	str	r3, [r4, #4]
 800d0a6:	6014      	str	r4, [r2, #0]
 800d0a8:	b003      	add	sp, #12
 800d0aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d0ae:	f000 ba77 	b.w	800d5a0 <__malloc_unlock>
 800d0b2:	42a3      	cmp	r3, r4
 800d0b4:	d90b      	bls.n	800d0ce <_free_r+0x4e>
 800d0b6:	6821      	ldr	r1, [r4, #0]
 800d0b8:	1862      	adds	r2, r4, r1
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	bf04      	itt	eq
 800d0be:	681a      	ldreq	r2, [r3, #0]
 800d0c0:	685b      	ldreq	r3, [r3, #4]
 800d0c2:	6063      	str	r3, [r4, #4]
 800d0c4:	bf04      	itt	eq
 800d0c6:	1852      	addeq	r2, r2, r1
 800d0c8:	6022      	streq	r2, [r4, #0]
 800d0ca:	602c      	str	r4, [r5, #0]
 800d0cc:	e7ec      	b.n	800d0a8 <_free_r+0x28>
 800d0ce:	461a      	mov	r2, r3
 800d0d0:	685b      	ldr	r3, [r3, #4]
 800d0d2:	b10b      	cbz	r3, 800d0d8 <_free_r+0x58>
 800d0d4:	42a3      	cmp	r3, r4
 800d0d6:	d9fa      	bls.n	800d0ce <_free_r+0x4e>
 800d0d8:	6811      	ldr	r1, [r2, #0]
 800d0da:	1855      	adds	r5, r2, r1
 800d0dc:	42a5      	cmp	r5, r4
 800d0de:	d10b      	bne.n	800d0f8 <_free_r+0x78>
 800d0e0:	6824      	ldr	r4, [r4, #0]
 800d0e2:	4421      	add	r1, r4
 800d0e4:	1854      	adds	r4, r2, r1
 800d0e6:	42a3      	cmp	r3, r4
 800d0e8:	6011      	str	r1, [r2, #0]
 800d0ea:	d1dd      	bne.n	800d0a8 <_free_r+0x28>
 800d0ec:	681c      	ldr	r4, [r3, #0]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	6053      	str	r3, [r2, #4]
 800d0f2:	4421      	add	r1, r4
 800d0f4:	6011      	str	r1, [r2, #0]
 800d0f6:	e7d7      	b.n	800d0a8 <_free_r+0x28>
 800d0f8:	d902      	bls.n	800d100 <_free_r+0x80>
 800d0fa:	230c      	movs	r3, #12
 800d0fc:	6003      	str	r3, [r0, #0]
 800d0fe:	e7d3      	b.n	800d0a8 <_free_r+0x28>
 800d100:	6825      	ldr	r5, [r4, #0]
 800d102:	1961      	adds	r1, r4, r5
 800d104:	428b      	cmp	r3, r1
 800d106:	bf04      	itt	eq
 800d108:	6819      	ldreq	r1, [r3, #0]
 800d10a:	685b      	ldreq	r3, [r3, #4]
 800d10c:	6063      	str	r3, [r4, #4]
 800d10e:	bf04      	itt	eq
 800d110:	1949      	addeq	r1, r1, r5
 800d112:	6021      	streq	r1, [r4, #0]
 800d114:	6054      	str	r4, [r2, #4]
 800d116:	e7c7      	b.n	800d0a8 <_free_r+0x28>
 800d118:	b003      	add	sp, #12
 800d11a:	bd30      	pop	{r4, r5, pc}
 800d11c:	20000314 	.word	0x20000314

0800d120 <_malloc_r>:
 800d120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d122:	1ccd      	adds	r5, r1, #3
 800d124:	f025 0503 	bic.w	r5, r5, #3
 800d128:	3508      	adds	r5, #8
 800d12a:	2d0c      	cmp	r5, #12
 800d12c:	bf38      	it	cc
 800d12e:	250c      	movcc	r5, #12
 800d130:	2d00      	cmp	r5, #0
 800d132:	4606      	mov	r6, r0
 800d134:	db01      	blt.n	800d13a <_malloc_r+0x1a>
 800d136:	42a9      	cmp	r1, r5
 800d138:	d903      	bls.n	800d142 <_malloc_r+0x22>
 800d13a:	230c      	movs	r3, #12
 800d13c:	6033      	str	r3, [r6, #0]
 800d13e:	2000      	movs	r0, #0
 800d140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d142:	f000 fa27 	bl	800d594 <__malloc_lock>
 800d146:	4921      	ldr	r1, [pc, #132]	; (800d1cc <_malloc_r+0xac>)
 800d148:	680a      	ldr	r2, [r1, #0]
 800d14a:	4614      	mov	r4, r2
 800d14c:	b99c      	cbnz	r4, 800d176 <_malloc_r+0x56>
 800d14e:	4f20      	ldr	r7, [pc, #128]	; (800d1d0 <_malloc_r+0xb0>)
 800d150:	683b      	ldr	r3, [r7, #0]
 800d152:	b923      	cbnz	r3, 800d15e <_malloc_r+0x3e>
 800d154:	4621      	mov	r1, r4
 800d156:	4630      	mov	r0, r6
 800d158:	f000 f9a2 	bl	800d4a0 <_sbrk_r>
 800d15c:	6038      	str	r0, [r7, #0]
 800d15e:	4629      	mov	r1, r5
 800d160:	4630      	mov	r0, r6
 800d162:	f000 f99d 	bl	800d4a0 <_sbrk_r>
 800d166:	1c43      	adds	r3, r0, #1
 800d168:	d123      	bne.n	800d1b2 <_malloc_r+0x92>
 800d16a:	230c      	movs	r3, #12
 800d16c:	6033      	str	r3, [r6, #0]
 800d16e:	4630      	mov	r0, r6
 800d170:	f000 fa16 	bl	800d5a0 <__malloc_unlock>
 800d174:	e7e3      	b.n	800d13e <_malloc_r+0x1e>
 800d176:	6823      	ldr	r3, [r4, #0]
 800d178:	1b5b      	subs	r3, r3, r5
 800d17a:	d417      	bmi.n	800d1ac <_malloc_r+0x8c>
 800d17c:	2b0b      	cmp	r3, #11
 800d17e:	d903      	bls.n	800d188 <_malloc_r+0x68>
 800d180:	6023      	str	r3, [r4, #0]
 800d182:	441c      	add	r4, r3
 800d184:	6025      	str	r5, [r4, #0]
 800d186:	e004      	b.n	800d192 <_malloc_r+0x72>
 800d188:	6863      	ldr	r3, [r4, #4]
 800d18a:	42a2      	cmp	r2, r4
 800d18c:	bf0c      	ite	eq
 800d18e:	600b      	streq	r3, [r1, #0]
 800d190:	6053      	strne	r3, [r2, #4]
 800d192:	4630      	mov	r0, r6
 800d194:	f000 fa04 	bl	800d5a0 <__malloc_unlock>
 800d198:	f104 000b 	add.w	r0, r4, #11
 800d19c:	1d23      	adds	r3, r4, #4
 800d19e:	f020 0007 	bic.w	r0, r0, #7
 800d1a2:	1ac2      	subs	r2, r0, r3
 800d1a4:	d0cc      	beq.n	800d140 <_malloc_r+0x20>
 800d1a6:	1a1b      	subs	r3, r3, r0
 800d1a8:	50a3      	str	r3, [r4, r2]
 800d1aa:	e7c9      	b.n	800d140 <_malloc_r+0x20>
 800d1ac:	4622      	mov	r2, r4
 800d1ae:	6864      	ldr	r4, [r4, #4]
 800d1b0:	e7cc      	b.n	800d14c <_malloc_r+0x2c>
 800d1b2:	1cc4      	adds	r4, r0, #3
 800d1b4:	f024 0403 	bic.w	r4, r4, #3
 800d1b8:	42a0      	cmp	r0, r4
 800d1ba:	d0e3      	beq.n	800d184 <_malloc_r+0x64>
 800d1bc:	1a21      	subs	r1, r4, r0
 800d1be:	4630      	mov	r0, r6
 800d1c0:	f000 f96e 	bl	800d4a0 <_sbrk_r>
 800d1c4:	3001      	adds	r0, #1
 800d1c6:	d1dd      	bne.n	800d184 <_malloc_r+0x64>
 800d1c8:	e7cf      	b.n	800d16a <_malloc_r+0x4a>
 800d1ca:	bf00      	nop
 800d1cc:	20000314 	.word	0x20000314
 800d1d0:	20000318 	.word	0x20000318

0800d1d4 <__ssputs_r>:
 800d1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1d8:	688e      	ldr	r6, [r1, #8]
 800d1da:	429e      	cmp	r6, r3
 800d1dc:	4682      	mov	sl, r0
 800d1de:	460c      	mov	r4, r1
 800d1e0:	4690      	mov	r8, r2
 800d1e2:	461f      	mov	r7, r3
 800d1e4:	d838      	bhi.n	800d258 <__ssputs_r+0x84>
 800d1e6:	898a      	ldrh	r2, [r1, #12]
 800d1e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d1ec:	d032      	beq.n	800d254 <__ssputs_r+0x80>
 800d1ee:	6825      	ldr	r5, [r4, #0]
 800d1f0:	6909      	ldr	r1, [r1, #16]
 800d1f2:	eba5 0901 	sub.w	r9, r5, r1
 800d1f6:	6965      	ldr	r5, [r4, #20]
 800d1f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d1fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d200:	3301      	adds	r3, #1
 800d202:	444b      	add	r3, r9
 800d204:	106d      	asrs	r5, r5, #1
 800d206:	429d      	cmp	r5, r3
 800d208:	bf38      	it	cc
 800d20a:	461d      	movcc	r5, r3
 800d20c:	0553      	lsls	r3, r2, #21
 800d20e:	d531      	bpl.n	800d274 <__ssputs_r+0xa0>
 800d210:	4629      	mov	r1, r5
 800d212:	f7ff ff85 	bl	800d120 <_malloc_r>
 800d216:	4606      	mov	r6, r0
 800d218:	b950      	cbnz	r0, 800d230 <__ssputs_r+0x5c>
 800d21a:	230c      	movs	r3, #12
 800d21c:	f8ca 3000 	str.w	r3, [sl]
 800d220:	89a3      	ldrh	r3, [r4, #12]
 800d222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d226:	81a3      	strh	r3, [r4, #12]
 800d228:	f04f 30ff 	mov.w	r0, #4294967295
 800d22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d230:	6921      	ldr	r1, [r4, #16]
 800d232:	464a      	mov	r2, r9
 800d234:	f7fc fab6 	bl	80097a4 <memcpy>
 800d238:	89a3      	ldrh	r3, [r4, #12]
 800d23a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d23e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d242:	81a3      	strh	r3, [r4, #12]
 800d244:	6126      	str	r6, [r4, #16]
 800d246:	6165      	str	r5, [r4, #20]
 800d248:	444e      	add	r6, r9
 800d24a:	eba5 0509 	sub.w	r5, r5, r9
 800d24e:	6026      	str	r6, [r4, #0]
 800d250:	60a5      	str	r5, [r4, #8]
 800d252:	463e      	mov	r6, r7
 800d254:	42be      	cmp	r6, r7
 800d256:	d900      	bls.n	800d25a <__ssputs_r+0x86>
 800d258:	463e      	mov	r6, r7
 800d25a:	4632      	mov	r2, r6
 800d25c:	6820      	ldr	r0, [r4, #0]
 800d25e:	4641      	mov	r1, r8
 800d260:	f000 f97e 	bl	800d560 <memmove>
 800d264:	68a3      	ldr	r3, [r4, #8]
 800d266:	6822      	ldr	r2, [r4, #0]
 800d268:	1b9b      	subs	r3, r3, r6
 800d26a:	4432      	add	r2, r6
 800d26c:	60a3      	str	r3, [r4, #8]
 800d26e:	6022      	str	r2, [r4, #0]
 800d270:	2000      	movs	r0, #0
 800d272:	e7db      	b.n	800d22c <__ssputs_r+0x58>
 800d274:	462a      	mov	r2, r5
 800d276:	f000 f999 	bl	800d5ac <_realloc_r>
 800d27a:	4606      	mov	r6, r0
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d1e1      	bne.n	800d244 <__ssputs_r+0x70>
 800d280:	6921      	ldr	r1, [r4, #16]
 800d282:	4650      	mov	r0, sl
 800d284:	f7ff fefc 	bl	800d080 <_free_r>
 800d288:	e7c7      	b.n	800d21a <__ssputs_r+0x46>
	...

0800d28c <_svfiprintf_r>:
 800d28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d290:	4698      	mov	r8, r3
 800d292:	898b      	ldrh	r3, [r1, #12]
 800d294:	061b      	lsls	r3, r3, #24
 800d296:	b09d      	sub	sp, #116	; 0x74
 800d298:	4607      	mov	r7, r0
 800d29a:	460d      	mov	r5, r1
 800d29c:	4614      	mov	r4, r2
 800d29e:	d50e      	bpl.n	800d2be <_svfiprintf_r+0x32>
 800d2a0:	690b      	ldr	r3, [r1, #16]
 800d2a2:	b963      	cbnz	r3, 800d2be <_svfiprintf_r+0x32>
 800d2a4:	2140      	movs	r1, #64	; 0x40
 800d2a6:	f7ff ff3b 	bl	800d120 <_malloc_r>
 800d2aa:	6028      	str	r0, [r5, #0]
 800d2ac:	6128      	str	r0, [r5, #16]
 800d2ae:	b920      	cbnz	r0, 800d2ba <_svfiprintf_r+0x2e>
 800d2b0:	230c      	movs	r3, #12
 800d2b2:	603b      	str	r3, [r7, #0]
 800d2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2b8:	e0d1      	b.n	800d45e <_svfiprintf_r+0x1d2>
 800d2ba:	2340      	movs	r3, #64	; 0x40
 800d2bc:	616b      	str	r3, [r5, #20]
 800d2be:	2300      	movs	r3, #0
 800d2c0:	9309      	str	r3, [sp, #36]	; 0x24
 800d2c2:	2320      	movs	r3, #32
 800d2c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2cc:	2330      	movs	r3, #48	; 0x30
 800d2ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d478 <_svfiprintf_r+0x1ec>
 800d2d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2d6:	f04f 0901 	mov.w	r9, #1
 800d2da:	4623      	mov	r3, r4
 800d2dc:	469a      	mov	sl, r3
 800d2de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2e2:	b10a      	cbz	r2, 800d2e8 <_svfiprintf_r+0x5c>
 800d2e4:	2a25      	cmp	r2, #37	; 0x25
 800d2e6:	d1f9      	bne.n	800d2dc <_svfiprintf_r+0x50>
 800d2e8:	ebba 0b04 	subs.w	fp, sl, r4
 800d2ec:	d00b      	beq.n	800d306 <_svfiprintf_r+0x7a>
 800d2ee:	465b      	mov	r3, fp
 800d2f0:	4622      	mov	r2, r4
 800d2f2:	4629      	mov	r1, r5
 800d2f4:	4638      	mov	r0, r7
 800d2f6:	f7ff ff6d 	bl	800d1d4 <__ssputs_r>
 800d2fa:	3001      	adds	r0, #1
 800d2fc:	f000 80aa 	beq.w	800d454 <_svfiprintf_r+0x1c8>
 800d300:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d302:	445a      	add	r2, fp
 800d304:	9209      	str	r2, [sp, #36]	; 0x24
 800d306:	f89a 3000 	ldrb.w	r3, [sl]
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	f000 80a2 	beq.w	800d454 <_svfiprintf_r+0x1c8>
 800d310:	2300      	movs	r3, #0
 800d312:	f04f 32ff 	mov.w	r2, #4294967295
 800d316:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d31a:	f10a 0a01 	add.w	sl, sl, #1
 800d31e:	9304      	str	r3, [sp, #16]
 800d320:	9307      	str	r3, [sp, #28]
 800d322:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d326:	931a      	str	r3, [sp, #104]	; 0x68
 800d328:	4654      	mov	r4, sl
 800d32a:	2205      	movs	r2, #5
 800d32c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d330:	4851      	ldr	r0, [pc, #324]	; (800d478 <_svfiprintf_r+0x1ec>)
 800d332:	f7f2 ffb5 	bl	80002a0 <memchr>
 800d336:	9a04      	ldr	r2, [sp, #16]
 800d338:	b9d8      	cbnz	r0, 800d372 <_svfiprintf_r+0xe6>
 800d33a:	06d0      	lsls	r0, r2, #27
 800d33c:	bf44      	itt	mi
 800d33e:	2320      	movmi	r3, #32
 800d340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d344:	0711      	lsls	r1, r2, #28
 800d346:	bf44      	itt	mi
 800d348:	232b      	movmi	r3, #43	; 0x2b
 800d34a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d34e:	f89a 3000 	ldrb.w	r3, [sl]
 800d352:	2b2a      	cmp	r3, #42	; 0x2a
 800d354:	d015      	beq.n	800d382 <_svfiprintf_r+0xf6>
 800d356:	9a07      	ldr	r2, [sp, #28]
 800d358:	4654      	mov	r4, sl
 800d35a:	2000      	movs	r0, #0
 800d35c:	f04f 0c0a 	mov.w	ip, #10
 800d360:	4621      	mov	r1, r4
 800d362:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d366:	3b30      	subs	r3, #48	; 0x30
 800d368:	2b09      	cmp	r3, #9
 800d36a:	d94e      	bls.n	800d40a <_svfiprintf_r+0x17e>
 800d36c:	b1b0      	cbz	r0, 800d39c <_svfiprintf_r+0x110>
 800d36e:	9207      	str	r2, [sp, #28]
 800d370:	e014      	b.n	800d39c <_svfiprintf_r+0x110>
 800d372:	eba0 0308 	sub.w	r3, r0, r8
 800d376:	fa09 f303 	lsl.w	r3, r9, r3
 800d37a:	4313      	orrs	r3, r2
 800d37c:	9304      	str	r3, [sp, #16]
 800d37e:	46a2      	mov	sl, r4
 800d380:	e7d2      	b.n	800d328 <_svfiprintf_r+0x9c>
 800d382:	9b03      	ldr	r3, [sp, #12]
 800d384:	1d19      	adds	r1, r3, #4
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	9103      	str	r1, [sp, #12]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	bfbb      	ittet	lt
 800d38e:	425b      	neglt	r3, r3
 800d390:	f042 0202 	orrlt.w	r2, r2, #2
 800d394:	9307      	strge	r3, [sp, #28]
 800d396:	9307      	strlt	r3, [sp, #28]
 800d398:	bfb8      	it	lt
 800d39a:	9204      	strlt	r2, [sp, #16]
 800d39c:	7823      	ldrb	r3, [r4, #0]
 800d39e:	2b2e      	cmp	r3, #46	; 0x2e
 800d3a0:	d10c      	bne.n	800d3bc <_svfiprintf_r+0x130>
 800d3a2:	7863      	ldrb	r3, [r4, #1]
 800d3a4:	2b2a      	cmp	r3, #42	; 0x2a
 800d3a6:	d135      	bne.n	800d414 <_svfiprintf_r+0x188>
 800d3a8:	9b03      	ldr	r3, [sp, #12]
 800d3aa:	1d1a      	adds	r2, r3, #4
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	9203      	str	r2, [sp, #12]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	bfb8      	it	lt
 800d3b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3b8:	3402      	adds	r4, #2
 800d3ba:	9305      	str	r3, [sp, #20]
 800d3bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d488 <_svfiprintf_r+0x1fc>
 800d3c0:	7821      	ldrb	r1, [r4, #0]
 800d3c2:	2203      	movs	r2, #3
 800d3c4:	4650      	mov	r0, sl
 800d3c6:	f7f2 ff6b 	bl	80002a0 <memchr>
 800d3ca:	b140      	cbz	r0, 800d3de <_svfiprintf_r+0x152>
 800d3cc:	2340      	movs	r3, #64	; 0x40
 800d3ce:	eba0 000a 	sub.w	r0, r0, sl
 800d3d2:	fa03 f000 	lsl.w	r0, r3, r0
 800d3d6:	9b04      	ldr	r3, [sp, #16]
 800d3d8:	4303      	orrs	r3, r0
 800d3da:	3401      	adds	r4, #1
 800d3dc:	9304      	str	r3, [sp, #16]
 800d3de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3e2:	4826      	ldr	r0, [pc, #152]	; (800d47c <_svfiprintf_r+0x1f0>)
 800d3e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3e8:	2206      	movs	r2, #6
 800d3ea:	f7f2 ff59 	bl	80002a0 <memchr>
 800d3ee:	2800      	cmp	r0, #0
 800d3f0:	d038      	beq.n	800d464 <_svfiprintf_r+0x1d8>
 800d3f2:	4b23      	ldr	r3, [pc, #140]	; (800d480 <_svfiprintf_r+0x1f4>)
 800d3f4:	bb1b      	cbnz	r3, 800d43e <_svfiprintf_r+0x1b2>
 800d3f6:	9b03      	ldr	r3, [sp, #12]
 800d3f8:	3307      	adds	r3, #7
 800d3fa:	f023 0307 	bic.w	r3, r3, #7
 800d3fe:	3308      	adds	r3, #8
 800d400:	9303      	str	r3, [sp, #12]
 800d402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d404:	4433      	add	r3, r6
 800d406:	9309      	str	r3, [sp, #36]	; 0x24
 800d408:	e767      	b.n	800d2da <_svfiprintf_r+0x4e>
 800d40a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d40e:	460c      	mov	r4, r1
 800d410:	2001      	movs	r0, #1
 800d412:	e7a5      	b.n	800d360 <_svfiprintf_r+0xd4>
 800d414:	2300      	movs	r3, #0
 800d416:	3401      	adds	r4, #1
 800d418:	9305      	str	r3, [sp, #20]
 800d41a:	4619      	mov	r1, r3
 800d41c:	f04f 0c0a 	mov.w	ip, #10
 800d420:	4620      	mov	r0, r4
 800d422:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d426:	3a30      	subs	r2, #48	; 0x30
 800d428:	2a09      	cmp	r2, #9
 800d42a:	d903      	bls.n	800d434 <_svfiprintf_r+0x1a8>
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d0c5      	beq.n	800d3bc <_svfiprintf_r+0x130>
 800d430:	9105      	str	r1, [sp, #20]
 800d432:	e7c3      	b.n	800d3bc <_svfiprintf_r+0x130>
 800d434:	fb0c 2101 	mla	r1, ip, r1, r2
 800d438:	4604      	mov	r4, r0
 800d43a:	2301      	movs	r3, #1
 800d43c:	e7f0      	b.n	800d420 <_svfiprintf_r+0x194>
 800d43e:	ab03      	add	r3, sp, #12
 800d440:	9300      	str	r3, [sp, #0]
 800d442:	462a      	mov	r2, r5
 800d444:	4b0f      	ldr	r3, [pc, #60]	; (800d484 <_svfiprintf_r+0x1f8>)
 800d446:	a904      	add	r1, sp, #16
 800d448:	4638      	mov	r0, r7
 800d44a:	f7fc fa61 	bl	8009910 <_printf_float>
 800d44e:	1c42      	adds	r2, r0, #1
 800d450:	4606      	mov	r6, r0
 800d452:	d1d6      	bne.n	800d402 <_svfiprintf_r+0x176>
 800d454:	89ab      	ldrh	r3, [r5, #12]
 800d456:	065b      	lsls	r3, r3, #25
 800d458:	f53f af2c 	bmi.w	800d2b4 <_svfiprintf_r+0x28>
 800d45c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d45e:	b01d      	add	sp, #116	; 0x74
 800d460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d464:	ab03      	add	r3, sp, #12
 800d466:	9300      	str	r3, [sp, #0]
 800d468:	462a      	mov	r2, r5
 800d46a:	4b06      	ldr	r3, [pc, #24]	; (800d484 <_svfiprintf_r+0x1f8>)
 800d46c:	a904      	add	r1, sp, #16
 800d46e:	4638      	mov	r0, r7
 800d470:	f7fc fcf2 	bl	8009e58 <_printf_i>
 800d474:	e7eb      	b.n	800d44e <_svfiprintf_r+0x1c2>
 800d476:	bf00      	nop
 800d478:	08023244 	.word	0x08023244
 800d47c:	0802324e 	.word	0x0802324e
 800d480:	08009911 	.word	0x08009911
 800d484:	0800d1d5 	.word	0x0800d1d5
 800d488:	0802324a 	.word	0x0802324a
 800d48c:	00000000 	.word	0x00000000

0800d490 <nan>:
 800d490:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d498 <nan+0x8>
 800d494:	4770      	bx	lr
 800d496:	bf00      	nop
 800d498:	00000000 	.word	0x00000000
 800d49c:	7ff80000 	.word	0x7ff80000

0800d4a0 <_sbrk_r>:
 800d4a0:	b538      	push	{r3, r4, r5, lr}
 800d4a2:	4d06      	ldr	r5, [pc, #24]	; (800d4bc <_sbrk_r+0x1c>)
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	4604      	mov	r4, r0
 800d4a8:	4608      	mov	r0, r1
 800d4aa:	602b      	str	r3, [r5, #0]
 800d4ac:	f7f5 fcd6 	bl	8002e5c <_sbrk>
 800d4b0:	1c43      	adds	r3, r0, #1
 800d4b2:	d102      	bne.n	800d4ba <_sbrk_r+0x1a>
 800d4b4:	682b      	ldr	r3, [r5, #0]
 800d4b6:	b103      	cbz	r3, 800d4ba <_sbrk_r+0x1a>
 800d4b8:	6023      	str	r3, [r4, #0]
 800d4ba:	bd38      	pop	{r3, r4, r5, pc}
 800d4bc:	2000d94c 	.word	0x2000d94c

0800d4c0 <strncmp>:
 800d4c0:	b510      	push	{r4, lr}
 800d4c2:	b16a      	cbz	r2, 800d4e0 <strncmp+0x20>
 800d4c4:	3901      	subs	r1, #1
 800d4c6:	1884      	adds	r4, r0, r2
 800d4c8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d4cc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	d103      	bne.n	800d4dc <strncmp+0x1c>
 800d4d4:	42a0      	cmp	r0, r4
 800d4d6:	d001      	beq.n	800d4dc <strncmp+0x1c>
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d1f5      	bne.n	800d4c8 <strncmp+0x8>
 800d4dc:	1a98      	subs	r0, r3, r2
 800d4de:	bd10      	pop	{r4, pc}
 800d4e0:	4610      	mov	r0, r2
 800d4e2:	e7fc      	b.n	800d4de <strncmp+0x1e>

0800d4e4 <__ascii_wctomb>:
 800d4e4:	b149      	cbz	r1, 800d4fa <__ascii_wctomb+0x16>
 800d4e6:	2aff      	cmp	r2, #255	; 0xff
 800d4e8:	bf85      	ittet	hi
 800d4ea:	238a      	movhi	r3, #138	; 0x8a
 800d4ec:	6003      	strhi	r3, [r0, #0]
 800d4ee:	700a      	strbls	r2, [r1, #0]
 800d4f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800d4f4:	bf98      	it	ls
 800d4f6:	2001      	movls	r0, #1
 800d4f8:	4770      	bx	lr
 800d4fa:	4608      	mov	r0, r1
 800d4fc:	4770      	bx	lr
	...

0800d500 <__assert_func>:
 800d500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d502:	4614      	mov	r4, r2
 800d504:	461a      	mov	r2, r3
 800d506:	4b09      	ldr	r3, [pc, #36]	; (800d52c <__assert_func+0x2c>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	4605      	mov	r5, r0
 800d50c:	68d8      	ldr	r0, [r3, #12]
 800d50e:	b14c      	cbz	r4, 800d524 <__assert_func+0x24>
 800d510:	4b07      	ldr	r3, [pc, #28]	; (800d530 <__assert_func+0x30>)
 800d512:	9100      	str	r1, [sp, #0]
 800d514:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d518:	4906      	ldr	r1, [pc, #24]	; (800d534 <__assert_func+0x34>)
 800d51a:	462b      	mov	r3, r5
 800d51c:	f000 f80e 	bl	800d53c <fiprintf>
 800d520:	f000 fa84 	bl	800da2c <abort>
 800d524:	4b04      	ldr	r3, [pc, #16]	; (800d538 <__assert_func+0x38>)
 800d526:	461c      	mov	r4, r3
 800d528:	e7f3      	b.n	800d512 <__assert_func+0x12>
 800d52a:	bf00      	nop
 800d52c:	20000080 	.word	0x20000080
 800d530:	08023255 	.word	0x08023255
 800d534:	08023262 	.word	0x08023262
 800d538:	08023290 	.word	0x08023290

0800d53c <fiprintf>:
 800d53c:	b40e      	push	{r1, r2, r3}
 800d53e:	b503      	push	{r0, r1, lr}
 800d540:	4601      	mov	r1, r0
 800d542:	ab03      	add	r3, sp, #12
 800d544:	4805      	ldr	r0, [pc, #20]	; (800d55c <fiprintf+0x20>)
 800d546:	f853 2b04 	ldr.w	r2, [r3], #4
 800d54a:	6800      	ldr	r0, [r0, #0]
 800d54c:	9301      	str	r3, [sp, #4]
 800d54e:	f000 f87d 	bl	800d64c <_vfiprintf_r>
 800d552:	b002      	add	sp, #8
 800d554:	f85d eb04 	ldr.w	lr, [sp], #4
 800d558:	b003      	add	sp, #12
 800d55a:	4770      	bx	lr
 800d55c:	20000080 	.word	0x20000080

0800d560 <memmove>:
 800d560:	4288      	cmp	r0, r1
 800d562:	b510      	push	{r4, lr}
 800d564:	eb01 0402 	add.w	r4, r1, r2
 800d568:	d902      	bls.n	800d570 <memmove+0x10>
 800d56a:	4284      	cmp	r4, r0
 800d56c:	4623      	mov	r3, r4
 800d56e:	d807      	bhi.n	800d580 <memmove+0x20>
 800d570:	1e43      	subs	r3, r0, #1
 800d572:	42a1      	cmp	r1, r4
 800d574:	d008      	beq.n	800d588 <memmove+0x28>
 800d576:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d57a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d57e:	e7f8      	b.n	800d572 <memmove+0x12>
 800d580:	4402      	add	r2, r0
 800d582:	4601      	mov	r1, r0
 800d584:	428a      	cmp	r2, r1
 800d586:	d100      	bne.n	800d58a <memmove+0x2a>
 800d588:	bd10      	pop	{r4, pc}
 800d58a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d58e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d592:	e7f7      	b.n	800d584 <memmove+0x24>

0800d594 <__malloc_lock>:
 800d594:	4801      	ldr	r0, [pc, #4]	; (800d59c <__malloc_lock+0x8>)
 800d596:	f000 bc09 	b.w	800ddac <__retarget_lock_acquire_recursive>
 800d59a:	bf00      	nop
 800d59c:	2000d954 	.word	0x2000d954

0800d5a0 <__malloc_unlock>:
 800d5a0:	4801      	ldr	r0, [pc, #4]	; (800d5a8 <__malloc_unlock+0x8>)
 800d5a2:	f000 bc04 	b.w	800ddae <__retarget_lock_release_recursive>
 800d5a6:	bf00      	nop
 800d5a8:	2000d954 	.word	0x2000d954

0800d5ac <_realloc_r>:
 800d5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5ae:	4607      	mov	r7, r0
 800d5b0:	4614      	mov	r4, r2
 800d5b2:	460e      	mov	r6, r1
 800d5b4:	b921      	cbnz	r1, 800d5c0 <_realloc_r+0x14>
 800d5b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d5ba:	4611      	mov	r1, r2
 800d5bc:	f7ff bdb0 	b.w	800d120 <_malloc_r>
 800d5c0:	b922      	cbnz	r2, 800d5cc <_realloc_r+0x20>
 800d5c2:	f7ff fd5d 	bl	800d080 <_free_r>
 800d5c6:	4625      	mov	r5, r4
 800d5c8:	4628      	mov	r0, r5
 800d5ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5cc:	f000 fc54 	bl	800de78 <_malloc_usable_size_r>
 800d5d0:	42a0      	cmp	r0, r4
 800d5d2:	d20f      	bcs.n	800d5f4 <_realloc_r+0x48>
 800d5d4:	4621      	mov	r1, r4
 800d5d6:	4638      	mov	r0, r7
 800d5d8:	f7ff fda2 	bl	800d120 <_malloc_r>
 800d5dc:	4605      	mov	r5, r0
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	d0f2      	beq.n	800d5c8 <_realloc_r+0x1c>
 800d5e2:	4631      	mov	r1, r6
 800d5e4:	4622      	mov	r2, r4
 800d5e6:	f7fc f8dd 	bl	80097a4 <memcpy>
 800d5ea:	4631      	mov	r1, r6
 800d5ec:	4638      	mov	r0, r7
 800d5ee:	f7ff fd47 	bl	800d080 <_free_r>
 800d5f2:	e7e9      	b.n	800d5c8 <_realloc_r+0x1c>
 800d5f4:	4635      	mov	r5, r6
 800d5f6:	e7e7      	b.n	800d5c8 <_realloc_r+0x1c>

0800d5f8 <__sfputc_r>:
 800d5f8:	6893      	ldr	r3, [r2, #8]
 800d5fa:	3b01      	subs	r3, #1
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	b410      	push	{r4}
 800d600:	6093      	str	r3, [r2, #8]
 800d602:	da08      	bge.n	800d616 <__sfputc_r+0x1e>
 800d604:	6994      	ldr	r4, [r2, #24]
 800d606:	42a3      	cmp	r3, r4
 800d608:	db01      	blt.n	800d60e <__sfputc_r+0x16>
 800d60a:	290a      	cmp	r1, #10
 800d60c:	d103      	bne.n	800d616 <__sfputc_r+0x1e>
 800d60e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d612:	f000 b94b 	b.w	800d8ac <__swbuf_r>
 800d616:	6813      	ldr	r3, [r2, #0]
 800d618:	1c58      	adds	r0, r3, #1
 800d61a:	6010      	str	r0, [r2, #0]
 800d61c:	7019      	strb	r1, [r3, #0]
 800d61e:	4608      	mov	r0, r1
 800d620:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d624:	4770      	bx	lr

0800d626 <__sfputs_r>:
 800d626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d628:	4606      	mov	r6, r0
 800d62a:	460f      	mov	r7, r1
 800d62c:	4614      	mov	r4, r2
 800d62e:	18d5      	adds	r5, r2, r3
 800d630:	42ac      	cmp	r4, r5
 800d632:	d101      	bne.n	800d638 <__sfputs_r+0x12>
 800d634:	2000      	movs	r0, #0
 800d636:	e007      	b.n	800d648 <__sfputs_r+0x22>
 800d638:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d63c:	463a      	mov	r2, r7
 800d63e:	4630      	mov	r0, r6
 800d640:	f7ff ffda 	bl	800d5f8 <__sfputc_r>
 800d644:	1c43      	adds	r3, r0, #1
 800d646:	d1f3      	bne.n	800d630 <__sfputs_r+0xa>
 800d648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d64c <_vfiprintf_r>:
 800d64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d650:	460d      	mov	r5, r1
 800d652:	b09d      	sub	sp, #116	; 0x74
 800d654:	4614      	mov	r4, r2
 800d656:	4698      	mov	r8, r3
 800d658:	4606      	mov	r6, r0
 800d65a:	b118      	cbz	r0, 800d664 <_vfiprintf_r+0x18>
 800d65c:	6983      	ldr	r3, [r0, #24]
 800d65e:	b90b      	cbnz	r3, 800d664 <_vfiprintf_r+0x18>
 800d660:	f000 fb06 	bl	800dc70 <__sinit>
 800d664:	4b89      	ldr	r3, [pc, #548]	; (800d88c <_vfiprintf_r+0x240>)
 800d666:	429d      	cmp	r5, r3
 800d668:	d11b      	bne.n	800d6a2 <_vfiprintf_r+0x56>
 800d66a:	6875      	ldr	r5, [r6, #4]
 800d66c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d66e:	07d9      	lsls	r1, r3, #31
 800d670:	d405      	bmi.n	800d67e <_vfiprintf_r+0x32>
 800d672:	89ab      	ldrh	r3, [r5, #12]
 800d674:	059a      	lsls	r2, r3, #22
 800d676:	d402      	bmi.n	800d67e <_vfiprintf_r+0x32>
 800d678:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d67a:	f000 fb97 	bl	800ddac <__retarget_lock_acquire_recursive>
 800d67e:	89ab      	ldrh	r3, [r5, #12]
 800d680:	071b      	lsls	r3, r3, #28
 800d682:	d501      	bpl.n	800d688 <_vfiprintf_r+0x3c>
 800d684:	692b      	ldr	r3, [r5, #16]
 800d686:	b9eb      	cbnz	r3, 800d6c4 <_vfiprintf_r+0x78>
 800d688:	4629      	mov	r1, r5
 800d68a:	4630      	mov	r0, r6
 800d68c:	f000 f960 	bl	800d950 <__swsetup_r>
 800d690:	b1c0      	cbz	r0, 800d6c4 <_vfiprintf_r+0x78>
 800d692:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d694:	07dc      	lsls	r4, r3, #31
 800d696:	d50e      	bpl.n	800d6b6 <_vfiprintf_r+0x6a>
 800d698:	f04f 30ff 	mov.w	r0, #4294967295
 800d69c:	b01d      	add	sp, #116	; 0x74
 800d69e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6a2:	4b7b      	ldr	r3, [pc, #492]	; (800d890 <_vfiprintf_r+0x244>)
 800d6a4:	429d      	cmp	r5, r3
 800d6a6:	d101      	bne.n	800d6ac <_vfiprintf_r+0x60>
 800d6a8:	68b5      	ldr	r5, [r6, #8]
 800d6aa:	e7df      	b.n	800d66c <_vfiprintf_r+0x20>
 800d6ac:	4b79      	ldr	r3, [pc, #484]	; (800d894 <_vfiprintf_r+0x248>)
 800d6ae:	429d      	cmp	r5, r3
 800d6b0:	bf08      	it	eq
 800d6b2:	68f5      	ldreq	r5, [r6, #12]
 800d6b4:	e7da      	b.n	800d66c <_vfiprintf_r+0x20>
 800d6b6:	89ab      	ldrh	r3, [r5, #12]
 800d6b8:	0598      	lsls	r0, r3, #22
 800d6ba:	d4ed      	bmi.n	800d698 <_vfiprintf_r+0x4c>
 800d6bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6be:	f000 fb76 	bl	800ddae <__retarget_lock_release_recursive>
 800d6c2:	e7e9      	b.n	800d698 <_vfiprintf_r+0x4c>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d6c8:	2320      	movs	r3, #32
 800d6ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6d2:	2330      	movs	r3, #48	; 0x30
 800d6d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d898 <_vfiprintf_r+0x24c>
 800d6d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6dc:	f04f 0901 	mov.w	r9, #1
 800d6e0:	4623      	mov	r3, r4
 800d6e2:	469a      	mov	sl, r3
 800d6e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6e8:	b10a      	cbz	r2, 800d6ee <_vfiprintf_r+0xa2>
 800d6ea:	2a25      	cmp	r2, #37	; 0x25
 800d6ec:	d1f9      	bne.n	800d6e2 <_vfiprintf_r+0x96>
 800d6ee:	ebba 0b04 	subs.w	fp, sl, r4
 800d6f2:	d00b      	beq.n	800d70c <_vfiprintf_r+0xc0>
 800d6f4:	465b      	mov	r3, fp
 800d6f6:	4622      	mov	r2, r4
 800d6f8:	4629      	mov	r1, r5
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	f7ff ff93 	bl	800d626 <__sfputs_r>
 800d700:	3001      	adds	r0, #1
 800d702:	f000 80aa 	beq.w	800d85a <_vfiprintf_r+0x20e>
 800d706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d708:	445a      	add	r2, fp
 800d70a:	9209      	str	r2, [sp, #36]	; 0x24
 800d70c:	f89a 3000 	ldrb.w	r3, [sl]
 800d710:	2b00      	cmp	r3, #0
 800d712:	f000 80a2 	beq.w	800d85a <_vfiprintf_r+0x20e>
 800d716:	2300      	movs	r3, #0
 800d718:	f04f 32ff 	mov.w	r2, #4294967295
 800d71c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d720:	f10a 0a01 	add.w	sl, sl, #1
 800d724:	9304      	str	r3, [sp, #16]
 800d726:	9307      	str	r3, [sp, #28]
 800d728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d72c:	931a      	str	r3, [sp, #104]	; 0x68
 800d72e:	4654      	mov	r4, sl
 800d730:	2205      	movs	r2, #5
 800d732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d736:	4858      	ldr	r0, [pc, #352]	; (800d898 <_vfiprintf_r+0x24c>)
 800d738:	f7f2 fdb2 	bl	80002a0 <memchr>
 800d73c:	9a04      	ldr	r2, [sp, #16]
 800d73e:	b9d8      	cbnz	r0, 800d778 <_vfiprintf_r+0x12c>
 800d740:	06d1      	lsls	r1, r2, #27
 800d742:	bf44      	itt	mi
 800d744:	2320      	movmi	r3, #32
 800d746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d74a:	0713      	lsls	r3, r2, #28
 800d74c:	bf44      	itt	mi
 800d74e:	232b      	movmi	r3, #43	; 0x2b
 800d750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d754:	f89a 3000 	ldrb.w	r3, [sl]
 800d758:	2b2a      	cmp	r3, #42	; 0x2a
 800d75a:	d015      	beq.n	800d788 <_vfiprintf_r+0x13c>
 800d75c:	9a07      	ldr	r2, [sp, #28]
 800d75e:	4654      	mov	r4, sl
 800d760:	2000      	movs	r0, #0
 800d762:	f04f 0c0a 	mov.w	ip, #10
 800d766:	4621      	mov	r1, r4
 800d768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d76c:	3b30      	subs	r3, #48	; 0x30
 800d76e:	2b09      	cmp	r3, #9
 800d770:	d94e      	bls.n	800d810 <_vfiprintf_r+0x1c4>
 800d772:	b1b0      	cbz	r0, 800d7a2 <_vfiprintf_r+0x156>
 800d774:	9207      	str	r2, [sp, #28]
 800d776:	e014      	b.n	800d7a2 <_vfiprintf_r+0x156>
 800d778:	eba0 0308 	sub.w	r3, r0, r8
 800d77c:	fa09 f303 	lsl.w	r3, r9, r3
 800d780:	4313      	orrs	r3, r2
 800d782:	9304      	str	r3, [sp, #16]
 800d784:	46a2      	mov	sl, r4
 800d786:	e7d2      	b.n	800d72e <_vfiprintf_r+0xe2>
 800d788:	9b03      	ldr	r3, [sp, #12]
 800d78a:	1d19      	adds	r1, r3, #4
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	9103      	str	r1, [sp, #12]
 800d790:	2b00      	cmp	r3, #0
 800d792:	bfbb      	ittet	lt
 800d794:	425b      	neglt	r3, r3
 800d796:	f042 0202 	orrlt.w	r2, r2, #2
 800d79a:	9307      	strge	r3, [sp, #28]
 800d79c:	9307      	strlt	r3, [sp, #28]
 800d79e:	bfb8      	it	lt
 800d7a0:	9204      	strlt	r2, [sp, #16]
 800d7a2:	7823      	ldrb	r3, [r4, #0]
 800d7a4:	2b2e      	cmp	r3, #46	; 0x2e
 800d7a6:	d10c      	bne.n	800d7c2 <_vfiprintf_r+0x176>
 800d7a8:	7863      	ldrb	r3, [r4, #1]
 800d7aa:	2b2a      	cmp	r3, #42	; 0x2a
 800d7ac:	d135      	bne.n	800d81a <_vfiprintf_r+0x1ce>
 800d7ae:	9b03      	ldr	r3, [sp, #12]
 800d7b0:	1d1a      	adds	r2, r3, #4
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	9203      	str	r2, [sp, #12]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	bfb8      	it	lt
 800d7ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7be:	3402      	adds	r4, #2
 800d7c0:	9305      	str	r3, [sp, #20]
 800d7c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d8a8 <_vfiprintf_r+0x25c>
 800d7c6:	7821      	ldrb	r1, [r4, #0]
 800d7c8:	2203      	movs	r2, #3
 800d7ca:	4650      	mov	r0, sl
 800d7cc:	f7f2 fd68 	bl	80002a0 <memchr>
 800d7d0:	b140      	cbz	r0, 800d7e4 <_vfiprintf_r+0x198>
 800d7d2:	2340      	movs	r3, #64	; 0x40
 800d7d4:	eba0 000a 	sub.w	r0, r0, sl
 800d7d8:	fa03 f000 	lsl.w	r0, r3, r0
 800d7dc:	9b04      	ldr	r3, [sp, #16]
 800d7de:	4303      	orrs	r3, r0
 800d7e0:	3401      	adds	r4, #1
 800d7e2:	9304      	str	r3, [sp, #16]
 800d7e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7e8:	482c      	ldr	r0, [pc, #176]	; (800d89c <_vfiprintf_r+0x250>)
 800d7ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7ee:	2206      	movs	r2, #6
 800d7f0:	f7f2 fd56 	bl	80002a0 <memchr>
 800d7f4:	2800      	cmp	r0, #0
 800d7f6:	d03f      	beq.n	800d878 <_vfiprintf_r+0x22c>
 800d7f8:	4b29      	ldr	r3, [pc, #164]	; (800d8a0 <_vfiprintf_r+0x254>)
 800d7fa:	bb1b      	cbnz	r3, 800d844 <_vfiprintf_r+0x1f8>
 800d7fc:	9b03      	ldr	r3, [sp, #12]
 800d7fe:	3307      	adds	r3, #7
 800d800:	f023 0307 	bic.w	r3, r3, #7
 800d804:	3308      	adds	r3, #8
 800d806:	9303      	str	r3, [sp, #12]
 800d808:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d80a:	443b      	add	r3, r7
 800d80c:	9309      	str	r3, [sp, #36]	; 0x24
 800d80e:	e767      	b.n	800d6e0 <_vfiprintf_r+0x94>
 800d810:	fb0c 3202 	mla	r2, ip, r2, r3
 800d814:	460c      	mov	r4, r1
 800d816:	2001      	movs	r0, #1
 800d818:	e7a5      	b.n	800d766 <_vfiprintf_r+0x11a>
 800d81a:	2300      	movs	r3, #0
 800d81c:	3401      	adds	r4, #1
 800d81e:	9305      	str	r3, [sp, #20]
 800d820:	4619      	mov	r1, r3
 800d822:	f04f 0c0a 	mov.w	ip, #10
 800d826:	4620      	mov	r0, r4
 800d828:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d82c:	3a30      	subs	r2, #48	; 0x30
 800d82e:	2a09      	cmp	r2, #9
 800d830:	d903      	bls.n	800d83a <_vfiprintf_r+0x1ee>
 800d832:	2b00      	cmp	r3, #0
 800d834:	d0c5      	beq.n	800d7c2 <_vfiprintf_r+0x176>
 800d836:	9105      	str	r1, [sp, #20]
 800d838:	e7c3      	b.n	800d7c2 <_vfiprintf_r+0x176>
 800d83a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d83e:	4604      	mov	r4, r0
 800d840:	2301      	movs	r3, #1
 800d842:	e7f0      	b.n	800d826 <_vfiprintf_r+0x1da>
 800d844:	ab03      	add	r3, sp, #12
 800d846:	9300      	str	r3, [sp, #0]
 800d848:	462a      	mov	r2, r5
 800d84a:	4b16      	ldr	r3, [pc, #88]	; (800d8a4 <_vfiprintf_r+0x258>)
 800d84c:	a904      	add	r1, sp, #16
 800d84e:	4630      	mov	r0, r6
 800d850:	f7fc f85e 	bl	8009910 <_printf_float>
 800d854:	4607      	mov	r7, r0
 800d856:	1c78      	adds	r0, r7, #1
 800d858:	d1d6      	bne.n	800d808 <_vfiprintf_r+0x1bc>
 800d85a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d85c:	07d9      	lsls	r1, r3, #31
 800d85e:	d405      	bmi.n	800d86c <_vfiprintf_r+0x220>
 800d860:	89ab      	ldrh	r3, [r5, #12]
 800d862:	059a      	lsls	r2, r3, #22
 800d864:	d402      	bmi.n	800d86c <_vfiprintf_r+0x220>
 800d866:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d868:	f000 faa1 	bl	800ddae <__retarget_lock_release_recursive>
 800d86c:	89ab      	ldrh	r3, [r5, #12]
 800d86e:	065b      	lsls	r3, r3, #25
 800d870:	f53f af12 	bmi.w	800d698 <_vfiprintf_r+0x4c>
 800d874:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d876:	e711      	b.n	800d69c <_vfiprintf_r+0x50>
 800d878:	ab03      	add	r3, sp, #12
 800d87a:	9300      	str	r3, [sp, #0]
 800d87c:	462a      	mov	r2, r5
 800d87e:	4b09      	ldr	r3, [pc, #36]	; (800d8a4 <_vfiprintf_r+0x258>)
 800d880:	a904      	add	r1, sp, #16
 800d882:	4630      	mov	r0, r6
 800d884:	f7fc fae8 	bl	8009e58 <_printf_i>
 800d888:	e7e4      	b.n	800d854 <_vfiprintf_r+0x208>
 800d88a:	bf00      	nop
 800d88c:	080232b4 	.word	0x080232b4
 800d890:	080232d4 	.word	0x080232d4
 800d894:	08023294 	.word	0x08023294
 800d898:	08023244 	.word	0x08023244
 800d89c:	0802324e 	.word	0x0802324e
 800d8a0:	08009911 	.word	0x08009911
 800d8a4:	0800d627 	.word	0x0800d627
 800d8a8:	0802324a 	.word	0x0802324a

0800d8ac <__swbuf_r>:
 800d8ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ae:	460e      	mov	r6, r1
 800d8b0:	4614      	mov	r4, r2
 800d8b2:	4605      	mov	r5, r0
 800d8b4:	b118      	cbz	r0, 800d8be <__swbuf_r+0x12>
 800d8b6:	6983      	ldr	r3, [r0, #24]
 800d8b8:	b90b      	cbnz	r3, 800d8be <__swbuf_r+0x12>
 800d8ba:	f000 f9d9 	bl	800dc70 <__sinit>
 800d8be:	4b21      	ldr	r3, [pc, #132]	; (800d944 <__swbuf_r+0x98>)
 800d8c0:	429c      	cmp	r4, r3
 800d8c2:	d12b      	bne.n	800d91c <__swbuf_r+0x70>
 800d8c4:	686c      	ldr	r4, [r5, #4]
 800d8c6:	69a3      	ldr	r3, [r4, #24]
 800d8c8:	60a3      	str	r3, [r4, #8]
 800d8ca:	89a3      	ldrh	r3, [r4, #12]
 800d8cc:	071a      	lsls	r2, r3, #28
 800d8ce:	d52f      	bpl.n	800d930 <__swbuf_r+0x84>
 800d8d0:	6923      	ldr	r3, [r4, #16]
 800d8d2:	b36b      	cbz	r3, 800d930 <__swbuf_r+0x84>
 800d8d4:	6923      	ldr	r3, [r4, #16]
 800d8d6:	6820      	ldr	r0, [r4, #0]
 800d8d8:	1ac0      	subs	r0, r0, r3
 800d8da:	6963      	ldr	r3, [r4, #20]
 800d8dc:	b2f6      	uxtb	r6, r6
 800d8de:	4283      	cmp	r3, r0
 800d8e0:	4637      	mov	r7, r6
 800d8e2:	dc04      	bgt.n	800d8ee <__swbuf_r+0x42>
 800d8e4:	4621      	mov	r1, r4
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	f000 f92e 	bl	800db48 <_fflush_r>
 800d8ec:	bb30      	cbnz	r0, 800d93c <__swbuf_r+0x90>
 800d8ee:	68a3      	ldr	r3, [r4, #8]
 800d8f0:	3b01      	subs	r3, #1
 800d8f2:	60a3      	str	r3, [r4, #8]
 800d8f4:	6823      	ldr	r3, [r4, #0]
 800d8f6:	1c5a      	adds	r2, r3, #1
 800d8f8:	6022      	str	r2, [r4, #0]
 800d8fa:	701e      	strb	r6, [r3, #0]
 800d8fc:	6963      	ldr	r3, [r4, #20]
 800d8fe:	3001      	adds	r0, #1
 800d900:	4283      	cmp	r3, r0
 800d902:	d004      	beq.n	800d90e <__swbuf_r+0x62>
 800d904:	89a3      	ldrh	r3, [r4, #12]
 800d906:	07db      	lsls	r3, r3, #31
 800d908:	d506      	bpl.n	800d918 <__swbuf_r+0x6c>
 800d90a:	2e0a      	cmp	r6, #10
 800d90c:	d104      	bne.n	800d918 <__swbuf_r+0x6c>
 800d90e:	4621      	mov	r1, r4
 800d910:	4628      	mov	r0, r5
 800d912:	f000 f919 	bl	800db48 <_fflush_r>
 800d916:	b988      	cbnz	r0, 800d93c <__swbuf_r+0x90>
 800d918:	4638      	mov	r0, r7
 800d91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d91c:	4b0a      	ldr	r3, [pc, #40]	; (800d948 <__swbuf_r+0x9c>)
 800d91e:	429c      	cmp	r4, r3
 800d920:	d101      	bne.n	800d926 <__swbuf_r+0x7a>
 800d922:	68ac      	ldr	r4, [r5, #8]
 800d924:	e7cf      	b.n	800d8c6 <__swbuf_r+0x1a>
 800d926:	4b09      	ldr	r3, [pc, #36]	; (800d94c <__swbuf_r+0xa0>)
 800d928:	429c      	cmp	r4, r3
 800d92a:	bf08      	it	eq
 800d92c:	68ec      	ldreq	r4, [r5, #12]
 800d92e:	e7ca      	b.n	800d8c6 <__swbuf_r+0x1a>
 800d930:	4621      	mov	r1, r4
 800d932:	4628      	mov	r0, r5
 800d934:	f000 f80c 	bl	800d950 <__swsetup_r>
 800d938:	2800      	cmp	r0, #0
 800d93a:	d0cb      	beq.n	800d8d4 <__swbuf_r+0x28>
 800d93c:	f04f 37ff 	mov.w	r7, #4294967295
 800d940:	e7ea      	b.n	800d918 <__swbuf_r+0x6c>
 800d942:	bf00      	nop
 800d944:	080232b4 	.word	0x080232b4
 800d948:	080232d4 	.word	0x080232d4
 800d94c:	08023294 	.word	0x08023294

0800d950 <__swsetup_r>:
 800d950:	4b32      	ldr	r3, [pc, #200]	; (800da1c <__swsetup_r+0xcc>)
 800d952:	b570      	push	{r4, r5, r6, lr}
 800d954:	681d      	ldr	r5, [r3, #0]
 800d956:	4606      	mov	r6, r0
 800d958:	460c      	mov	r4, r1
 800d95a:	b125      	cbz	r5, 800d966 <__swsetup_r+0x16>
 800d95c:	69ab      	ldr	r3, [r5, #24]
 800d95e:	b913      	cbnz	r3, 800d966 <__swsetup_r+0x16>
 800d960:	4628      	mov	r0, r5
 800d962:	f000 f985 	bl	800dc70 <__sinit>
 800d966:	4b2e      	ldr	r3, [pc, #184]	; (800da20 <__swsetup_r+0xd0>)
 800d968:	429c      	cmp	r4, r3
 800d96a:	d10f      	bne.n	800d98c <__swsetup_r+0x3c>
 800d96c:	686c      	ldr	r4, [r5, #4]
 800d96e:	89a3      	ldrh	r3, [r4, #12]
 800d970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d974:	0719      	lsls	r1, r3, #28
 800d976:	d42c      	bmi.n	800d9d2 <__swsetup_r+0x82>
 800d978:	06dd      	lsls	r5, r3, #27
 800d97a:	d411      	bmi.n	800d9a0 <__swsetup_r+0x50>
 800d97c:	2309      	movs	r3, #9
 800d97e:	6033      	str	r3, [r6, #0]
 800d980:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d984:	81a3      	strh	r3, [r4, #12]
 800d986:	f04f 30ff 	mov.w	r0, #4294967295
 800d98a:	e03e      	b.n	800da0a <__swsetup_r+0xba>
 800d98c:	4b25      	ldr	r3, [pc, #148]	; (800da24 <__swsetup_r+0xd4>)
 800d98e:	429c      	cmp	r4, r3
 800d990:	d101      	bne.n	800d996 <__swsetup_r+0x46>
 800d992:	68ac      	ldr	r4, [r5, #8]
 800d994:	e7eb      	b.n	800d96e <__swsetup_r+0x1e>
 800d996:	4b24      	ldr	r3, [pc, #144]	; (800da28 <__swsetup_r+0xd8>)
 800d998:	429c      	cmp	r4, r3
 800d99a:	bf08      	it	eq
 800d99c:	68ec      	ldreq	r4, [r5, #12]
 800d99e:	e7e6      	b.n	800d96e <__swsetup_r+0x1e>
 800d9a0:	0758      	lsls	r0, r3, #29
 800d9a2:	d512      	bpl.n	800d9ca <__swsetup_r+0x7a>
 800d9a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9a6:	b141      	cbz	r1, 800d9ba <__swsetup_r+0x6a>
 800d9a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9ac:	4299      	cmp	r1, r3
 800d9ae:	d002      	beq.n	800d9b6 <__swsetup_r+0x66>
 800d9b0:	4630      	mov	r0, r6
 800d9b2:	f7ff fb65 	bl	800d080 <_free_r>
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	6363      	str	r3, [r4, #52]	; 0x34
 800d9ba:	89a3      	ldrh	r3, [r4, #12]
 800d9bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d9c0:	81a3      	strh	r3, [r4, #12]
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	6063      	str	r3, [r4, #4]
 800d9c6:	6923      	ldr	r3, [r4, #16]
 800d9c8:	6023      	str	r3, [r4, #0]
 800d9ca:	89a3      	ldrh	r3, [r4, #12]
 800d9cc:	f043 0308 	orr.w	r3, r3, #8
 800d9d0:	81a3      	strh	r3, [r4, #12]
 800d9d2:	6923      	ldr	r3, [r4, #16]
 800d9d4:	b94b      	cbnz	r3, 800d9ea <__swsetup_r+0x9a>
 800d9d6:	89a3      	ldrh	r3, [r4, #12]
 800d9d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d9dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9e0:	d003      	beq.n	800d9ea <__swsetup_r+0x9a>
 800d9e2:	4621      	mov	r1, r4
 800d9e4:	4630      	mov	r0, r6
 800d9e6:	f000 fa07 	bl	800ddf8 <__smakebuf_r>
 800d9ea:	89a0      	ldrh	r0, [r4, #12]
 800d9ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9f0:	f010 0301 	ands.w	r3, r0, #1
 800d9f4:	d00a      	beq.n	800da0c <__swsetup_r+0xbc>
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	60a3      	str	r3, [r4, #8]
 800d9fa:	6963      	ldr	r3, [r4, #20]
 800d9fc:	425b      	negs	r3, r3
 800d9fe:	61a3      	str	r3, [r4, #24]
 800da00:	6923      	ldr	r3, [r4, #16]
 800da02:	b943      	cbnz	r3, 800da16 <__swsetup_r+0xc6>
 800da04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da08:	d1ba      	bne.n	800d980 <__swsetup_r+0x30>
 800da0a:	bd70      	pop	{r4, r5, r6, pc}
 800da0c:	0781      	lsls	r1, r0, #30
 800da0e:	bf58      	it	pl
 800da10:	6963      	ldrpl	r3, [r4, #20]
 800da12:	60a3      	str	r3, [r4, #8]
 800da14:	e7f4      	b.n	800da00 <__swsetup_r+0xb0>
 800da16:	2000      	movs	r0, #0
 800da18:	e7f7      	b.n	800da0a <__swsetup_r+0xba>
 800da1a:	bf00      	nop
 800da1c:	20000080 	.word	0x20000080
 800da20:	080232b4 	.word	0x080232b4
 800da24:	080232d4 	.word	0x080232d4
 800da28:	08023294 	.word	0x08023294

0800da2c <abort>:
 800da2c:	b508      	push	{r3, lr}
 800da2e:	2006      	movs	r0, #6
 800da30:	f000 fa52 	bl	800ded8 <raise>
 800da34:	2001      	movs	r0, #1
 800da36:	f7f5 f999 	bl	8002d6c <_exit>
	...

0800da3c <__sflush_r>:
 800da3c:	898a      	ldrh	r2, [r1, #12]
 800da3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da42:	4605      	mov	r5, r0
 800da44:	0710      	lsls	r0, r2, #28
 800da46:	460c      	mov	r4, r1
 800da48:	d458      	bmi.n	800dafc <__sflush_r+0xc0>
 800da4a:	684b      	ldr	r3, [r1, #4]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	dc05      	bgt.n	800da5c <__sflush_r+0x20>
 800da50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da52:	2b00      	cmp	r3, #0
 800da54:	dc02      	bgt.n	800da5c <__sflush_r+0x20>
 800da56:	2000      	movs	r0, #0
 800da58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da5e:	2e00      	cmp	r6, #0
 800da60:	d0f9      	beq.n	800da56 <__sflush_r+0x1a>
 800da62:	2300      	movs	r3, #0
 800da64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da68:	682f      	ldr	r7, [r5, #0]
 800da6a:	602b      	str	r3, [r5, #0]
 800da6c:	d032      	beq.n	800dad4 <__sflush_r+0x98>
 800da6e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da70:	89a3      	ldrh	r3, [r4, #12]
 800da72:	075a      	lsls	r2, r3, #29
 800da74:	d505      	bpl.n	800da82 <__sflush_r+0x46>
 800da76:	6863      	ldr	r3, [r4, #4]
 800da78:	1ac0      	subs	r0, r0, r3
 800da7a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da7c:	b10b      	cbz	r3, 800da82 <__sflush_r+0x46>
 800da7e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da80:	1ac0      	subs	r0, r0, r3
 800da82:	2300      	movs	r3, #0
 800da84:	4602      	mov	r2, r0
 800da86:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da88:	6a21      	ldr	r1, [r4, #32]
 800da8a:	4628      	mov	r0, r5
 800da8c:	47b0      	blx	r6
 800da8e:	1c43      	adds	r3, r0, #1
 800da90:	89a3      	ldrh	r3, [r4, #12]
 800da92:	d106      	bne.n	800daa2 <__sflush_r+0x66>
 800da94:	6829      	ldr	r1, [r5, #0]
 800da96:	291d      	cmp	r1, #29
 800da98:	d82c      	bhi.n	800daf4 <__sflush_r+0xb8>
 800da9a:	4a2a      	ldr	r2, [pc, #168]	; (800db44 <__sflush_r+0x108>)
 800da9c:	40ca      	lsrs	r2, r1
 800da9e:	07d6      	lsls	r6, r2, #31
 800daa0:	d528      	bpl.n	800daf4 <__sflush_r+0xb8>
 800daa2:	2200      	movs	r2, #0
 800daa4:	6062      	str	r2, [r4, #4]
 800daa6:	04d9      	lsls	r1, r3, #19
 800daa8:	6922      	ldr	r2, [r4, #16]
 800daaa:	6022      	str	r2, [r4, #0]
 800daac:	d504      	bpl.n	800dab8 <__sflush_r+0x7c>
 800daae:	1c42      	adds	r2, r0, #1
 800dab0:	d101      	bne.n	800dab6 <__sflush_r+0x7a>
 800dab2:	682b      	ldr	r3, [r5, #0]
 800dab4:	b903      	cbnz	r3, 800dab8 <__sflush_r+0x7c>
 800dab6:	6560      	str	r0, [r4, #84]	; 0x54
 800dab8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800daba:	602f      	str	r7, [r5, #0]
 800dabc:	2900      	cmp	r1, #0
 800dabe:	d0ca      	beq.n	800da56 <__sflush_r+0x1a>
 800dac0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dac4:	4299      	cmp	r1, r3
 800dac6:	d002      	beq.n	800dace <__sflush_r+0x92>
 800dac8:	4628      	mov	r0, r5
 800daca:	f7ff fad9 	bl	800d080 <_free_r>
 800dace:	2000      	movs	r0, #0
 800dad0:	6360      	str	r0, [r4, #52]	; 0x34
 800dad2:	e7c1      	b.n	800da58 <__sflush_r+0x1c>
 800dad4:	6a21      	ldr	r1, [r4, #32]
 800dad6:	2301      	movs	r3, #1
 800dad8:	4628      	mov	r0, r5
 800dada:	47b0      	blx	r6
 800dadc:	1c41      	adds	r1, r0, #1
 800dade:	d1c7      	bne.n	800da70 <__sflush_r+0x34>
 800dae0:	682b      	ldr	r3, [r5, #0]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d0c4      	beq.n	800da70 <__sflush_r+0x34>
 800dae6:	2b1d      	cmp	r3, #29
 800dae8:	d001      	beq.n	800daee <__sflush_r+0xb2>
 800daea:	2b16      	cmp	r3, #22
 800daec:	d101      	bne.n	800daf2 <__sflush_r+0xb6>
 800daee:	602f      	str	r7, [r5, #0]
 800daf0:	e7b1      	b.n	800da56 <__sflush_r+0x1a>
 800daf2:	89a3      	ldrh	r3, [r4, #12]
 800daf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daf8:	81a3      	strh	r3, [r4, #12]
 800dafa:	e7ad      	b.n	800da58 <__sflush_r+0x1c>
 800dafc:	690f      	ldr	r7, [r1, #16]
 800dafe:	2f00      	cmp	r7, #0
 800db00:	d0a9      	beq.n	800da56 <__sflush_r+0x1a>
 800db02:	0793      	lsls	r3, r2, #30
 800db04:	680e      	ldr	r6, [r1, #0]
 800db06:	bf08      	it	eq
 800db08:	694b      	ldreq	r3, [r1, #20]
 800db0a:	600f      	str	r7, [r1, #0]
 800db0c:	bf18      	it	ne
 800db0e:	2300      	movne	r3, #0
 800db10:	eba6 0807 	sub.w	r8, r6, r7
 800db14:	608b      	str	r3, [r1, #8]
 800db16:	f1b8 0f00 	cmp.w	r8, #0
 800db1a:	dd9c      	ble.n	800da56 <__sflush_r+0x1a>
 800db1c:	6a21      	ldr	r1, [r4, #32]
 800db1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db20:	4643      	mov	r3, r8
 800db22:	463a      	mov	r2, r7
 800db24:	4628      	mov	r0, r5
 800db26:	47b0      	blx	r6
 800db28:	2800      	cmp	r0, #0
 800db2a:	dc06      	bgt.n	800db3a <__sflush_r+0xfe>
 800db2c:	89a3      	ldrh	r3, [r4, #12]
 800db2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db32:	81a3      	strh	r3, [r4, #12]
 800db34:	f04f 30ff 	mov.w	r0, #4294967295
 800db38:	e78e      	b.n	800da58 <__sflush_r+0x1c>
 800db3a:	4407      	add	r7, r0
 800db3c:	eba8 0800 	sub.w	r8, r8, r0
 800db40:	e7e9      	b.n	800db16 <__sflush_r+0xda>
 800db42:	bf00      	nop
 800db44:	20400001 	.word	0x20400001

0800db48 <_fflush_r>:
 800db48:	b538      	push	{r3, r4, r5, lr}
 800db4a:	690b      	ldr	r3, [r1, #16]
 800db4c:	4605      	mov	r5, r0
 800db4e:	460c      	mov	r4, r1
 800db50:	b913      	cbnz	r3, 800db58 <_fflush_r+0x10>
 800db52:	2500      	movs	r5, #0
 800db54:	4628      	mov	r0, r5
 800db56:	bd38      	pop	{r3, r4, r5, pc}
 800db58:	b118      	cbz	r0, 800db62 <_fflush_r+0x1a>
 800db5a:	6983      	ldr	r3, [r0, #24]
 800db5c:	b90b      	cbnz	r3, 800db62 <_fflush_r+0x1a>
 800db5e:	f000 f887 	bl	800dc70 <__sinit>
 800db62:	4b14      	ldr	r3, [pc, #80]	; (800dbb4 <_fflush_r+0x6c>)
 800db64:	429c      	cmp	r4, r3
 800db66:	d11b      	bne.n	800dba0 <_fflush_r+0x58>
 800db68:	686c      	ldr	r4, [r5, #4]
 800db6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d0ef      	beq.n	800db52 <_fflush_r+0xa>
 800db72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db74:	07d0      	lsls	r0, r2, #31
 800db76:	d404      	bmi.n	800db82 <_fflush_r+0x3a>
 800db78:	0599      	lsls	r1, r3, #22
 800db7a:	d402      	bmi.n	800db82 <_fflush_r+0x3a>
 800db7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db7e:	f000 f915 	bl	800ddac <__retarget_lock_acquire_recursive>
 800db82:	4628      	mov	r0, r5
 800db84:	4621      	mov	r1, r4
 800db86:	f7ff ff59 	bl	800da3c <__sflush_r>
 800db8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db8c:	07da      	lsls	r2, r3, #31
 800db8e:	4605      	mov	r5, r0
 800db90:	d4e0      	bmi.n	800db54 <_fflush_r+0xc>
 800db92:	89a3      	ldrh	r3, [r4, #12]
 800db94:	059b      	lsls	r3, r3, #22
 800db96:	d4dd      	bmi.n	800db54 <_fflush_r+0xc>
 800db98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db9a:	f000 f908 	bl	800ddae <__retarget_lock_release_recursive>
 800db9e:	e7d9      	b.n	800db54 <_fflush_r+0xc>
 800dba0:	4b05      	ldr	r3, [pc, #20]	; (800dbb8 <_fflush_r+0x70>)
 800dba2:	429c      	cmp	r4, r3
 800dba4:	d101      	bne.n	800dbaa <_fflush_r+0x62>
 800dba6:	68ac      	ldr	r4, [r5, #8]
 800dba8:	e7df      	b.n	800db6a <_fflush_r+0x22>
 800dbaa:	4b04      	ldr	r3, [pc, #16]	; (800dbbc <_fflush_r+0x74>)
 800dbac:	429c      	cmp	r4, r3
 800dbae:	bf08      	it	eq
 800dbb0:	68ec      	ldreq	r4, [r5, #12]
 800dbb2:	e7da      	b.n	800db6a <_fflush_r+0x22>
 800dbb4:	080232b4 	.word	0x080232b4
 800dbb8:	080232d4 	.word	0x080232d4
 800dbbc:	08023294 	.word	0x08023294

0800dbc0 <std>:
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	b510      	push	{r4, lr}
 800dbc4:	4604      	mov	r4, r0
 800dbc6:	e9c0 3300 	strd	r3, r3, [r0]
 800dbca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dbce:	6083      	str	r3, [r0, #8]
 800dbd0:	8181      	strh	r1, [r0, #12]
 800dbd2:	6643      	str	r3, [r0, #100]	; 0x64
 800dbd4:	81c2      	strh	r2, [r0, #14]
 800dbd6:	6183      	str	r3, [r0, #24]
 800dbd8:	4619      	mov	r1, r3
 800dbda:	2208      	movs	r2, #8
 800dbdc:	305c      	adds	r0, #92	; 0x5c
 800dbde:	f7fb fdef 	bl	80097c0 <memset>
 800dbe2:	4b05      	ldr	r3, [pc, #20]	; (800dbf8 <std+0x38>)
 800dbe4:	6263      	str	r3, [r4, #36]	; 0x24
 800dbe6:	4b05      	ldr	r3, [pc, #20]	; (800dbfc <std+0x3c>)
 800dbe8:	62a3      	str	r3, [r4, #40]	; 0x28
 800dbea:	4b05      	ldr	r3, [pc, #20]	; (800dc00 <std+0x40>)
 800dbec:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dbee:	4b05      	ldr	r3, [pc, #20]	; (800dc04 <std+0x44>)
 800dbf0:	6224      	str	r4, [r4, #32]
 800dbf2:	6323      	str	r3, [r4, #48]	; 0x30
 800dbf4:	bd10      	pop	{r4, pc}
 800dbf6:	bf00      	nop
 800dbf8:	0800df11 	.word	0x0800df11
 800dbfc:	0800df33 	.word	0x0800df33
 800dc00:	0800df6b 	.word	0x0800df6b
 800dc04:	0800df8f 	.word	0x0800df8f

0800dc08 <_cleanup_r>:
 800dc08:	4901      	ldr	r1, [pc, #4]	; (800dc10 <_cleanup_r+0x8>)
 800dc0a:	f000 b8af 	b.w	800dd6c <_fwalk_reent>
 800dc0e:	bf00      	nop
 800dc10:	0800db49 	.word	0x0800db49

0800dc14 <__sfmoreglue>:
 800dc14:	b570      	push	{r4, r5, r6, lr}
 800dc16:	1e4a      	subs	r2, r1, #1
 800dc18:	2568      	movs	r5, #104	; 0x68
 800dc1a:	4355      	muls	r5, r2
 800dc1c:	460e      	mov	r6, r1
 800dc1e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dc22:	f7ff fa7d 	bl	800d120 <_malloc_r>
 800dc26:	4604      	mov	r4, r0
 800dc28:	b140      	cbz	r0, 800dc3c <__sfmoreglue+0x28>
 800dc2a:	2100      	movs	r1, #0
 800dc2c:	e9c0 1600 	strd	r1, r6, [r0]
 800dc30:	300c      	adds	r0, #12
 800dc32:	60a0      	str	r0, [r4, #8]
 800dc34:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dc38:	f7fb fdc2 	bl	80097c0 <memset>
 800dc3c:	4620      	mov	r0, r4
 800dc3e:	bd70      	pop	{r4, r5, r6, pc}

0800dc40 <__sfp_lock_acquire>:
 800dc40:	4801      	ldr	r0, [pc, #4]	; (800dc48 <__sfp_lock_acquire+0x8>)
 800dc42:	f000 b8b3 	b.w	800ddac <__retarget_lock_acquire_recursive>
 800dc46:	bf00      	nop
 800dc48:	2000d958 	.word	0x2000d958

0800dc4c <__sfp_lock_release>:
 800dc4c:	4801      	ldr	r0, [pc, #4]	; (800dc54 <__sfp_lock_release+0x8>)
 800dc4e:	f000 b8ae 	b.w	800ddae <__retarget_lock_release_recursive>
 800dc52:	bf00      	nop
 800dc54:	2000d958 	.word	0x2000d958

0800dc58 <__sinit_lock_acquire>:
 800dc58:	4801      	ldr	r0, [pc, #4]	; (800dc60 <__sinit_lock_acquire+0x8>)
 800dc5a:	f000 b8a7 	b.w	800ddac <__retarget_lock_acquire_recursive>
 800dc5e:	bf00      	nop
 800dc60:	2000d953 	.word	0x2000d953

0800dc64 <__sinit_lock_release>:
 800dc64:	4801      	ldr	r0, [pc, #4]	; (800dc6c <__sinit_lock_release+0x8>)
 800dc66:	f000 b8a2 	b.w	800ddae <__retarget_lock_release_recursive>
 800dc6a:	bf00      	nop
 800dc6c:	2000d953 	.word	0x2000d953

0800dc70 <__sinit>:
 800dc70:	b510      	push	{r4, lr}
 800dc72:	4604      	mov	r4, r0
 800dc74:	f7ff fff0 	bl	800dc58 <__sinit_lock_acquire>
 800dc78:	69a3      	ldr	r3, [r4, #24]
 800dc7a:	b11b      	cbz	r3, 800dc84 <__sinit+0x14>
 800dc7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc80:	f7ff bff0 	b.w	800dc64 <__sinit_lock_release>
 800dc84:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dc88:	6523      	str	r3, [r4, #80]	; 0x50
 800dc8a:	4b13      	ldr	r3, [pc, #76]	; (800dcd8 <__sinit+0x68>)
 800dc8c:	4a13      	ldr	r2, [pc, #76]	; (800dcdc <__sinit+0x6c>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	62a2      	str	r2, [r4, #40]	; 0x28
 800dc92:	42a3      	cmp	r3, r4
 800dc94:	bf04      	itt	eq
 800dc96:	2301      	moveq	r3, #1
 800dc98:	61a3      	streq	r3, [r4, #24]
 800dc9a:	4620      	mov	r0, r4
 800dc9c:	f000 f820 	bl	800dce0 <__sfp>
 800dca0:	6060      	str	r0, [r4, #4]
 800dca2:	4620      	mov	r0, r4
 800dca4:	f000 f81c 	bl	800dce0 <__sfp>
 800dca8:	60a0      	str	r0, [r4, #8]
 800dcaa:	4620      	mov	r0, r4
 800dcac:	f000 f818 	bl	800dce0 <__sfp>
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	60e0      	str	r0, [r4, #12]
 800dcb4:	2104      	movs	r1, #4
 800dcb6:	6860      	ldr	r0, [r4, #4]
 800dcb8:	f7ff ff82 	bl	800dbc0 <std>
 800dcbc:	68a0      	ldr	r0, [r4, #8]
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	2109      	movs	r1, #9
 800dcc2:	f7ff ff7d 	bl	800dbc0 <std>
 800dcc6:	68e0      	ldr	r0, [r4, #12]
 800dcc8:	2202      	movs	r2, #2
 800dcca:	2112      	movs	r1, #18
 800dccc:	f7ff ff78 	bl	800dbc0 <std>
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	61a3      	str	r3, [r4, #24]
 800dcd4:	e7d2      	b.n	800dc7c <__sinit+0xc>
 800dcd6:	bf00      	nop
 800dcd8:	08022e40 	.word	0x08022e40
 800dcdc:	0800dc09 	.word	0x0800dc09

0800dce0 <__sfp>:
 800dce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dce2:	4607      	mov	r7, r0
 800dce4:	f7ff ffac 	bl	800dc40 <__sfp_lock_acquire>
 800dce8:	4b1e      	ldr	r3, [pc, #120]	; (800dd64 <__sfp+0x84>)
 800dcea:	681e      	ldr	r6, [r3, #0]
 800dcec:	69b3      	ldr	r3, [r6, #24]
 800dcee:	b913      	cbnz	r3, 800dcf6 <__sfp+0x16>
 800dcf0:	4630      	mov	r0, r6
 800dcf2:	f7ff ffbd 	bl	800dc70 <__sinit>
 800dcf6:	3648      	adds	r6, #72	; 0x48
 800dcf8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dcfc:	3b01      	subs	r3, #1
 800dcfe:	d503      	bpl.n	800dd08 <__sfp+0x28>
 800dd00:	6833      	ldr	r3, [r6, #0]
 800dd02:	b30b      	cbz	r3, 800dd48 <__sfp+0x68>
 800dd04:	6836      	ldr	r6, [r6, #0]
 800dd06:	e7f7      	b.n	800dcf8 <__sfp+0x18>
 800dd08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dd0c:	b9d5      	cbnz	r5, 800dd44 <__sfp+0x64>
 800dd0e:	4b16      	ldr	r3, [pc, #88]	; (800dd68 <__sfp+0x88>)
 800dd10:	60e3      	str	r3, [r4, #12]
 800dd12:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dd16:	6665      	str	r5, [r4, #100]	; 0x64
 800dd18:	f000 f847 	bl	800ddaa <__retarget_lock_init_recursive>
 800dd1c:	f7ff ff96 	bl	800dc4c <__sfp_lock_release>
 800dd20:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dd24:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dd28:	6025      	str	r5, [r4, #0]
 800dd2a:	61a5      	str	r5, [r4, #24]
 800dd2c:	2208      	movs	r2, #8
 800dd2e:	4629      	mov	r1, r5
 800dd30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dd34:	f7fb fd44 	bl	80097c0 <memset>
 800dd38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dd3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dd40:	4620      	mov	r0, r4
 800dd42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd44:	3468      	adds	r4, #104	; 0x68
 800dd46:	e7d9      	b.n	800dcfc <__sfp+0x1c>
 800dd48:	2104      	movs	r1, #4
 800dd4a:	4638      	mov	r0, r7
 800dd4c:	f7ff ff62 	bl	800dc14 <__sfmoreglue>
 800dd50:	4604      	mov	r4, r0
 800dd52:	6030      	str	r0, [r6, #0]
 800dd54:	2800      	cmp	r0, #0
 800dd56:	d1d5      	bne.n	800dd04 <__sfp+0x24>
 800dd58:	f7ff ff78 	bl	800dc4c <__sfp_lock_release>
 800dd5c:	230c      	movs	r3, #12
 800dd5e:	603b      	str	r3, [r7, #0]
 800dd60:	e7ee      	b.n	800dd40 <__sfp+0x60>
 800dd62:	bf00      	nop
 800dd64:	08022e40 	.word	0x08022e40
 800dd68:	ffff0001 	.word	0xffff0001

0800dd6c <_fwalk_reent>:
 800dd6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd70:	4606      	mov	r6, r0
 800dd72:	4688      	mov	r8, r1
 800dd74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dd78:	2700      	movs	r7, #0
 800dd7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd7e:	f1b9 0901 	subs.w	r9, r9, #1
 800dd82:	d505      	bpl.n	800dd90 <_fwalk_reent+0x24>
 800dd84:	6824      	ldr	r4, [r4, #0]
 800dd86:	2c00      	cmp	r4, #0
 800dd88:	d1f7      	bne.n	800dd7a <_fwalk_reent+0xe>
 800dd8a:	4638      	mov	r0, r7
 800dd8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd90:	89ab      	ldrh	r3, [r5, #12]
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d907      	bls.n	800dda6 <_fwalk_reent+0x3a>
 800dd96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd9a:	3301      	adds	r3, #1
 800dd9c:	d003      	beq.n	800dda6 <_fwalk_reent+0x3a>
 800dd9e:	4629      	mov	r1, r5
 800dda0:	4630      	mov	r0, r6
 800dda2:	47c0      	blx	r8
 800dda4:	4307      	orrs	r7, r0
 800dda6:	3568      	adds	r5, #104	; 0x68
 800dda8:	e7e9      	b.n	800dd7e <_fwalk_reent+0x12>

0800ddaa <__retarget_lock_init_recursive>:
 800ddaa:	4770      	bx	lr

0800ddac <__retarget_lock_acquire_recursive>:
 800ddac:	4770      	bx	lr

0800ddae <__retarget_lock_release_recursive>:
 800ddae:	4770      	bx	lr

0800ddb0 <__swhatbuf_r>:
 800ddb0:	b570      	push	{r4, r5, r6, lr}
 800ddb2:	460e      	mov	r6, r1
 800ddb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ddb8:	2900      	cmp	r1, #0
 800ddba:	b096      	sub	sp, #88	; 0x58
 800ddbc:	4614      	mov	r4, r2
 800ddbe:	461d      	mov	r5, r3
 800ddc0:	da07      	bge.n	800ddd2 <__swhatbuf_r+0x22>
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	602b      	str	r3, [r5, #0]
 800ddc6:	89b3      	ldrh	r3, [r6, #12]
 800ddc8:	061a      	lsls	r2, r3, #24
 800ddca:	d410      	bmi.n	800ddee <__swhatbuf_r+0x3e>
 800ddcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddd0:	e00e      	b.n	800ddf0 <__swhatbuf_r+0x40>
 800ddd2:	466a      	mov	r2, sp
 800ddd4:	f000 f902 	bl	800dfdc <_fstat_r>
 800ddd8:	2800      	cmp	r0, #0
 800ddda:	dbf2      	blt.n	800ddc2 <__swhatbuf_r+0x12>
 800dddc:	9a01      	ldr	r2, [sp, #4]
 800ddde:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dde2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dde6:	425a      	negs	r2, r3
 800dde8:	415a      	adcs	r2, r3
 800ddea:	602a      	str	r2, [r5, #0]
 800ddec:	e7ee      	b.n	800ddcc <__swhatbuf_r+0x1c>
 800ddee:	2340      	movs	r3, #64	; 0x40
 800ddf0:	2000      	movs	r0, #0
 800ddf2:	6023      	str	r3, [r4, #0]
 800ddf4:	b016      	add	sp, #88	; 0x58
 800ddf6:	bd70      	pop	{r4, r5, r6, pc}

0800ddf8 <__smakebuf_r>:
 800ddf8:	898b      	ldrh	r3, [r1, #12]
 800ddfa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ddfc:	079d      	lsls	r5, r3, #30
 800ddfe:	4606      	mov	r6, r0
 800de00:	460c      	mov	r4, r1
 800de02:	d507      	bpl.n	800de14 <__smakebuf_r+0x1c>
 800de04:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de08:	6023      	str	r3, [r4, #0]
 800de0a:	6123      	str	r3, [r4, #16]
 800de0c:	2301      	movs	r3, #1
 800de0e:	6163      	str	r3, [r4, #20]
 800de10:	b002      	add	sp, #8
 800de12:	bd70      	pop	{r4, r5, r6, pc}
 800de14:	ab01      	add	r3, sp, #4
 800de16:	466a      	mov	r2, sp
 800de18:	f7ff ffca 	bl	800ddb0 <__swhatbuf_r>
 800de1c:	9900      	ldr	r1, [sp, #0]
 800de1e:	4605      	mov	r5, r0
 800de20:	4630      	mov	r0, r6
 800de22:	f7ff f97d 	bl	800d120 <_malloc_r>
 800de26:	b948      	cbnz	r0, 800de3c <__smakebuf_r+0x44>
 800de28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de2c:	059a      	lsls	r2, r3, #22
 800de2e:	d4ef      	bmi.n	800de10 <__smakebuf_r+0x18>
 800de30:	f023 0303 	bic.w	r3, r3, #3
 800de34:	f043 0302 	orr.w	r3, r3, #2
 800de38:	81a3      	strh	r3, [r4, #12]
 800de3a:	e7e3      	b.n	800de04 <__smakebuf_r+0xc>
 800de3c:	4b0d      	ldr	r3, [pc, #52]	; (800de74 <__smakebuf_r+0x7c>)
 800de3e:	62b3      	str	r3, [r6, #40]	; 0x28
 800de40:	89a3      	ldrh	r3, [r4, #12]
 800de42:	6020      	str	r0, [r4, #0]
 800de44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de48:	81a3      	strh	r3, [r4, #12]
 800de4a:	9b00      	ldr	r3, [sp, #0]
 800de4c:	6163      	str	r3, [r4, #20]
 800de4e:	9b01      	ldr	r3, [sp, #4]
 800de50:	6120      	str	r0, [r4, #16]
 800de52:	b15b      	cbz	r3, 800de6c <__smakebuf_r+0x74>
 800de54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de58:	4630      	mov	r0, r6
 800de5a:	f000 f8d1 	bl	800e000 <_isatty_r>
 800de5e:	b128      	cbz	r0, 800de6c <__smakebuf_r+0x74>
 800de60:	89a3      	ldrh	r3, [r4, #12]
 800de62:	f023 0303 	bic.w	r3, r3, #3
 800de66:	f043 0301 	orr.w	r3, r3, #1
 800de6a:	81a3      	strh	r3, [r4, #12]
 800de6c:	89a0      	ldrh	r0, [r4, #12]
 800de6e:	4305      	orrs	r5, r0
 800de70:	81a5      	strh	r5, [r4, #12]
 800de72:	e7cd      	b.n	800de10 <__smakebuf_r+0x18>
 800de74:	0800dc09 	.word	0x0800dc09

0800de78 <_malloc_usable_size_r>:
 800de78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de7c:	1f18      	subs	r0, r3, #4
 800de7e:	2b00      	cmp	r3, #0
 800de80:	bfbc      	itt	lt
 800de82:	580b      	ldrlt	r3, [r1, r0]
 800de84:	18c0      	addlt	r0, r0, r3
 800de86:	4770      	bx	lr

0800de88 <_raise_r>:
 800de88:	291f      	cmp	r1, #31
 800de8a:	b538      	push	{r3, r4, r5, lr}
 800de8c:	4604      	mov	r4, r0
 800de8e:	460d      	mov	r5, r1
 800de90:	d904      	bls.n	800de9c <_raise_r+0x14>
 800de92:	2316      	movs	r3, #22
 800de94:	6003      	str	r3, [r0, #0]
 800de96:	f04f 30ff 	mov.w	r0, #4294967295
 800de9a:	bd38      	pop	{r3, r4, r5, pc}
 800de9c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800de9e:	b112      	cbz	r2, 800dea6 <_raise_r+0x1e>
 800dea0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dea4:	b94b      	cbnz	r3, 800deba <_raise_r+0x32>
 800dea6:	4620      	mov	r0, r4
 800dea8:	f000 f830 	bl	800df0c <_getpid_r>
 800deac:	462a      	mov	r2, r5
 800deae:	4601      	mov	r1, r0
 800deb0:	4620      	mov	r0, r4
 800deb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800deb6:	f000 b817 	b.w	800dee8 <_kill_r>
 800deba:	2b01      	cmp	r3, #1
 800debc:	d00a      	beq.n	800ded4 <_raise_r+0x4c>
 800debe:	1c59      	adds	r1, r3, #1
 800dec0:	d103      	bne.n	800deca <_raise_r+0x42>
 800dec2:	2316      	movs	r3, #22
 800dec4:	6003      	str	r3, [r0, #0]
 800dec6:	2001      	movs	r0, #1
 800dec8:	e7e7      	b.n	800de9a <_raise_r+0x12>
 800deca:	2400      	movs	r4, #0
 800decc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ded0:	4628      	mov	r0, r5
 800ded2:	4798      	blx	r3
 800ded4:	2000      	movs	r0, #0
 800ded6:	e7e0      	b.n	800de9a <_raise_r+0x12>

0800ded8 <raise>:
 800ded8:	4b02      	ldr	r3, [pc, #8]	; (800dee4 <raise+0xc>)
 800deda:	4601      	mov	r1, r0
 800dedc:	6818      	ldr	r0, [r3, #0]
 800dede:	f7ff bfd3 	b.w	800de88 <_raise_r>
 800dee2:	bf00      	nop
 800dee4:	20000080 	.word	0x20000080

0800dee8 <_kill_r>:
 800dee8:	b538      	push	{r3, r4, r5, lr}
 800deea:	4d07      	ldr	r5, [pc, #28]	; (800df08 <_kill_r+0x20>)
 800deec:	2300      	movs	r3, #0
 800deee:	4604      	mov	r4, r0
 800def0:	4608      	mov	r0, r1
 800def2:	4611      	mov	r1, r2
 800def4:	602b      	str	r3, [r5, #0]
 800def6:	f7f4 ff29 	bl	8002d4c <_kill>
 800defa:	1c43      	adds	r3, r0, #1
 800defc:	d102      	bne.n	800df04 <_kill_r+0x1c>
 800defe:	682b      	ldr	r3, [r5, #0]
 800df00:	b103      	cbz	r3, 800df04 <_kill_r+0x1c>
 800df02:	6023      	str	r3, [r4, #0]
 800df04:	bd38      	pop	{r3, r4, r5, pc}
 800df06:	bf00      	nop
 800df08:	2000d94c 	.word	0x2000d94c

0800df0c <_getpid_r>:
 800df0c:	f7f4 bf16 	b.w	8002d3c <_getpid>

0800df10 <__sread>:
 800df10:	b510      	push	{r4, lr}
 800df12:	460c      	mov	r4, r1
 800df14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df18:	f000 f894 	bl	800e044 <_read_r>
 800df1c:	2800      	cmp	r0, #0
 800df1e:	bfab      	itete	ge
 800df20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800df22:	89a3      	ldrhlt	r3, [r4, #12]
 800df24:	181b      	addge	r3, r3, r0
 800df26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800df2a:	bfac      	ite	ge
 800df2c:	6563      	strge	r3, [r4, #84]	; 0x54
 800df2e:	81a3      	strhlt	r3, [r4, #12]
 800df30:	bd10      	pop	{r4, pc}

0800df32 <__swrite>:
 800df32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df36:	461f      	mov	r7, r3
 800df38:	898b      	ldrh	r3, [r1, #12]
 800df3a:	05db      	lsls	r3, r3, #23
 800df3c:	4605      	mov	r5, r0
 800df3e:	460c      	mov	r4, r1
 800df40:	4616      	mov	r6, r2
 800df42:	d505      	bpl.n	800df50 <__swrite+0x1e>
 800df44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df48:	2302      	movs	r3, #2
 800df4a:	2200      	movs	r2, #0
 800df4c:	f000 f868 	bl	800e020 <_lseek_r>
 800df50:	89a3      	ldrh	r3, [r4, #12]
 800df52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df56:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800df5a:	81a3      	strh	r3, [r4, #12]
 800df5c:	4632      	mov	r2, r6
 800df5e:	463b      	mov	r3, r7
 800df60:	4628      	mov	r0, r5
 800df62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df66:	f000 b817 	b.w	800df98 <_write_r>

0800df6a <__sseek>:
 800df6a:	b510      	push	{r4, lr}
 800df6c:	460c      	mov	r4, r1
 800df6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df72:	f000 f855 	bl	800e020 <_lseek_r>
 800df76:	1c43      	adds	r3, r0, #1
 800df78:	89a3      	ldrh	r3, [r4, #12]
 800df7a:	bf15      	itete	ne
 800df7c:	6560      	strne	r0, [r4, #84]	; 0x54
 800df7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800df82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800df86:	81a3      	strheq	r3, [r4, #12]
 800df88:	bf18      	it	ne
 800df8a:	81a3      	strhne	r3, [r4, #12]
 800df8c:	bd10      	pop	{r4, pc}

0800df8e <__sclose>:
 800df8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df92:	f000 b813 	b.w	800dfbc <_close_r>
	...

0800df98 <_write_r>:
 800df98:	b538      	push	{r3, r4, r5, lr}
 800df9a:	4d07      	ldr	r5, [pc, #28]	; (800dfb8 <_write_r+0x20>)
 800df9c:	4604      	mov	r4, r0
 800df9e:	4608      	mov	r0, r1
 800dfa0:	4611      	mov	r1, r2
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	602a      	str	r2, [r5, #0]
 800dfa6:	461a      	mov	r2, r3
 800dfa8:	f7f4 ff07 	bl	8002dba <_write>
 800dfac:	1c43      	adds	r3, r0, #1
 800dfae:	d102      	bne.n	800dfb6 <_write_r+0x1e>
 800dfb0:	682b      	ldr	r3, [r5, #0]
 800dfb2:	b103      	cbz	r3, 800dfb6 <_write_r+0x1e>
 800dfb4:	6023      	str	r3, [r4, #0]
 800dfb6:	bd38      	pop	{r3, r4, r5, pc}
 800dfb8:	2000d94c 	.word	0x2000d94c

0800dfbc <_close_r>:
 800dfbc:	b538      	push	{r3, r4, r5, lr}
 800dfbe:	4d06      	ldr	r5, [pc, #24]	; (800dfd8 <_close_r+0x1c>)
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	4608      	mov	r0, r1
 800dfc6:	602b      	str	r3, [r5, #0]
 800dfc8:	f7f4 ff13 	bl	8002df2 <_close>
 800dfcc:	1c43      	adds	r3, r0, #1
 800dfce:	d102      	bne.n	800dfd6 <_close_r+0x1a>
 800dfd0:	682b      	ldr	r3, [r5, #0]
 800dfd2:	b103      	cbz	r3, 800dfd6 <_close_r+0x1a>
 800dfd4:	6023      	str	r3, [r4, #0]
 800dfd6:	bd38      	pop	{r3, r4, r5, pc}
 800dfd8:	2000d94c 	.word	0x2000d94c

0800dfdc <_fstat_r>:
 800dfdc:	b538      	push	{r3, r4, r5, lr}
 800dfde:	4d07      	ldr	r5, [pc, #28]	; (800dffc <_fstat_r+0x20>)
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	4604      	mov	r4, r0
 800dfe4:	4608      	mov	r0, r1
 800dfe6:	4611      	mov	r1, r2
 800dfe8:	602b      	str	r3, [r5, #0]
 800dfea:	f7f4 ff0e 	bl	8002e0a <_fstat>
 800dfee:	1c43      	adds	r3, r0, #1
 800dff0:	d102      	bne.n	800dff8 <_fstat_r+0x1c>
 800dff2:	682b      	ldr	r3, [r5, #0]
 800dff4:	b103      	cbz	r3, 800dff8 <_fstat_r+0x1c>
 800dff6:	6023      	str	r3, [r4, #0]
 800dff8:	bd38      	pop	{r3, r4, r5, pc}
 800dffa:	bf00      	nop
 800dffc:	2000d94c 	.word	0x2000d94c

0800e000 <_isatty_r>:
 800e000:	b538      	push	{r3, r4, r5, lr}
 800e002:	4d06      	ldr	r5, [pc, #24]	; (800e01c <_isatty_r+0x1c>)
 800e004:	2300      	movs	r3, #0
 800e006:	4604      	mov	r4, r0
 800e008:	4608      	mov	r0, r1
 800e00a:	602b      	str	r3, [r5, #0]
 800e00c:	f7f4 ff0d 	bl	8002e2a <_isatty>
 800e010:	1c43      	adds	r3, r0, #1
 800e012:	d102      	bne.n	800e01a <_isatty_r+0x1a>
 800e014:	682b      	ldr	r3, [r5, #0]
 800e016:	b103      	cbz	r3, 800e01a <_isatty_r+0x1a>
 800e018:	6023      	str	r3, [r4, #0]
 800e01a:	bd38      	pop	{r3, r4, r5, pc}
 800e01c:	2000d94c 	.word	0x2000d94c

0800e020 <_lseek_r>:
 800e020:	b538      	push	{r3, r4, r5, lr}
 800e022:	4d07      	ldr	r5, [pc, #28]	; (800e040 <_lseek_r+0x20>)
 800e024:	4604      	mov	r4, r0
 800e026:	4608      	mov	r0, r1
 800e028:	4611      	mov	r1, r2
 800e02a:	2200      	movs	r2, #0
 800e02c:	602a      	str	r2, [r5, #0]
 800e02e:	461a      	mov	r2, r3
 800e030:	f7f4 ff06 	bl	8002e40 <_lseek>
 800e034:	1c43      	adds	r3, r0, #1
 800e036:	d102      	bne.n	800e03e <_lseek_r+0x1e>
 800e038:	682b      	ldr	r3, [r5, #0]
 800e03a:	b103      	cbz	r3, 800e03e <_lseek_r+0x1e>
 800e03c:	6023      	str	r3, [r4, #0]
 800e03e:	bd38      	pop	{r3, r4, r5, pc}
 800e040:	2000d94c 	.word	0x2000d94c

0800e044 <_read_r>:
 800e044:	b538      	push	{r3, r4, r5, lr}
 800e046:	4d07      	ldr	r5, [pc, #28]	; (800e064 <_read_r+0x20>)
 800e048:	4604      	mov	r4, r0
 800e04a:	4608      	mov	r0, r1
 800e04c:	4611      	mov	r1, r2
 800e04e:	2200      	movs	r2, #0
 800e050:	602a      	str	r2, [r5, #0]
 800e052:	461a      	mov	r2, r3
 800e054:	f7f4 fe94 	bl	8002d80 <_read>
 800e058:	1c43      	adds	r3, r0, #1
 800e05a:	d102      	bne.n	800e062 <_read_r+0x1e>
 800e05c:	682b      	ldr	r3, [r5, #0]
 800e05e:	b103      	cbz	r3, 800e062 <_read_r+0x1e>
 800e060:	6023      	str	r3, [r4, #0]
 800e062:	bd38      	pop	{r3, r4, r5, pc}
 800e064:	2000d94c 	.word	0x2000d94c

0800e068 <cos>:
 800e068:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e06a:	ec53 2b10 	vmov	r2, r3, d0
 800e06e:	4824      	ldr	r0, [pc, #144]	; (800e100 <cos+0x98>)
 800e070:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e074:	4281      	cmp	r1, r0
 800e076:	dc06      	bgt.n	800e086 <cos+0x1e>
 800e078:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800e0f8 <cos+0x90>
 800e07c:	f000 fb9c 	bl	800e7b8 <__kernel_cos>
 800e080:	ec51 0b10 	vmov	r0, r1, d0
 800e084:	e007      	b.n	800e096 <cos+0x2e>
 800e086:	481f      	ldr	r0, [pc, #124]	; (800e104 <cos+0x9c>)
 800e088:	4281      	cmp	r1, r0
 800e08a:	dd09      	ble.n	800e0a0 <cos+0x38>
 800e08c:	ee10 0a10 	vmov	r0, s0
 800e090:	4619      	mov	r1, r3
 800e092:	f7f2 f959 	bl	8000348 <__aeabi_dsub>
 800e096:	ec41 0b10 	vmov	d0, r0, r1
 800e09a:	b005      	add	sp, #20
 800e09c:	f85d fb04 	ldr.w	pc, [sp], #4
 800e0a0:	4668      	mov	r0, sp
 800e0a2:	f000 f979 	bl	800e398 <__ieee754_rem_pio2>
 800e0a6:	f000 0003 	and.w	r0, r0, #3
 800e0aa:	2801      	cmp	r0, #1
 800e0ac:	d007      	beq.n	800e0be <cos+0x56>
 800e0ae:	2802      	cmp	r0, #2
 800e0b0:	d012      	beq.n	800e0d8 <cos+0x70>
 800e0b2:	b9c0      	cbnz	r0, 800e0e6 <cos+0x7e>
 800e0b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0b8:	ed9d 0b00 	vldr	d0, [sp]
 800e0bc:	e7de      	b.n	800e07c <cos+0x14>
 800e0be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0c2:	ed9d 0b00 	vldr	d0, [sp]
 800e0c6:	f000 ff7f 	bl	800efc8 <__kernel_sin>
 800e0ca:	ec53 2b10 	vmov	r2, r3, d0
 800e0ce:	ee10 0a10 	vmov	r0, s0
 800e0d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e0d6:	e7de      	b.n	800e096 <cos+0x2e>
 800e0d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0dc:	ed9d 0b00 	vldr	d0, [sp]
 800e0e0:	f000 fb6a 	bl	800e7b8 <__kernel_cos>
 800e0e4:	e7f1      	b.n	800e0ca <cos+0x62>
 800e0e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e0ea:	ed9d 0b00 	vldr	d0, [sp]
 800e0ee:	2001      	movs	r0, #1
 800e0f0:	f000 ff6a 	bl	800efc8 <__kernel_sin>
 800e0f4:	e7c4      	b.n	800e080 <cos+0x18>
 800e0f6:	bf00      	nop
	...
 800e100:	3fe921fb 	.word	0x3fe921fb
 800e104:	7fefffff 	.word	0x7fefffff

0800e108 <sin>:
 800e108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e10a:	ec53 2b10 	vmov	r2, r3, d0
 800e10e:	4826      	ldr	r0, [pc, #152]	; (800e1a8 <sin+0xa0>)
 800e110:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e114:	4281      	cmp	r1, r0
 800e116:	dc07      	bgt.n	800e128 <sin+0x20>
 800e118:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800e1a0 <sin+0x98>
 800e11c:	2000      	movs	r0, #0
 800e11e:	f000 ff53 	bl	800efc8 <__kernel_sin>
 800e122:	ec51 0b10 	vmov	r0, r1, d0
 800e126:	e007      	b.n	800e138 <sin+0x30>
 800e128:	4820      	ldr	r0, [pc, #128]	; (800e1ac <sin+0xa4>)
 800e12a:	4281      	cmp	r1, r0
 800e12c:	dd09      	ble.n	800e142 <sin+0x3a>
 800e12e:	ee10 0a10 	vmov	r0, s0
 800e132:	4619      	mov	r1, r3
 800e134:	f7f2 f908 	bl	8000348 <__aeabi_dsub>
 800e138:	ec41 0b10 	vmov	d0, r0, r1
 800e13c:	b005      	add	sp, #20
 800e13e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e142:	4668      	mov	r0, sp
 800e144:	f000 f928 	bl	800e398 <__ieee754_rem_pio2>
 800e148:	f000 0003 	and.w	r0, r0, #3
 800e14c:	2801      	cmp	r0, #1
 800e14e:	d008      	beq.n	800e162 <sin+0x5a>
 800e150:	2802      	cmp	r0, #2
 800e152:	d00d      	beq.n	800e170 <sin+0x68>
 800e154:	b9d0      	cbnz	r0, 800e18c <sin+0x84>
 800e156:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e15a:	ed9d 0b00 	vldr	d0, [sp]
 800e15e:	2001      	movs	r0, #1
 800e160:	e7dd      	b.n	800e11e <sin+0x16>
 800e162:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e166:	ed9d 0b00 	vldr	d0, [sp]
 800e16a:	f000 fb25 	bl	800e7b8 <__kernel_cos>
 800e16e:	e7d8      	b.n	800e122 <sin+0x1a>
 800e170:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e174:	ed9d 0b00 	vldr	d0, [sp]
 800e178:	2001      	movs	r0, #1
 800e17a:	f000 ff25 	bl	800efc8 <__kernel_sin>
 800e17e:	ec53 2b10 	vmov	r2, r3, d0
 800e182:	ee10 0a10 	vmov	r0, s0
 800e186:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e18a:	e7d5      	b.n	800e138 <sin+0x30>
 800e18c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e190:	ed9d 0b00 	vldr	d0, [sp]
 800e194:	f000 fb10 	bl	800e7b8 <__kernel_cos>
 800e198:	e7f1      	b.n	800e17e <sin+0x76>
 800e19a:	bf00      	nop
 800e19c:	f3af 8000 	nop.w
	...
 800e1a8:	3fe921fb 	.word	0x3fe921fb
 800e1ac:	7fefffff 	.word	0x7fefffff

0800e1b0 <atan2>:
 800e1b0:	f000 b826 	b.w	800e200 <__ieee754_atan2>

0800e1b4 <sqrtf>:
 800e1b4:	b508      	push	{r3, lr}
 800e1b6:	ed2d 8b02 	vpush	{d8}
 800e1ba:	eeb0 8a40 	vmov.f32	s16, s0
 800e1be:	f000 faf5 	bl	800e7ac <__ieee754_sqrtf>
 800e1c2:	4b0d      	ldr	r3, [pc, #52]	; (800e1f8 <sqrtf+0x44>)
 800e1c4:	f993 3000 	ldrsb.w	r3, [r3]
 800e1c8:	3301      	adds	r3, #1
 800e1ca:	d011      	beq.n	800e1f0 <sqrtf+0x3c>
 800e1cc:	eeb4 8a48 	vcmp.f32	s16, s16
 800e1d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1d4:	d60c      	bvs.n	800e1f0 <sqrtf+0x3c>
 800e1d6:	eddf 8a09 	vldr	s17, [pc, #36]	; 800e1fc <sqrtf+0x48>
 800e1da:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800e1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e1e2:	d505      	bpl.n	800e1f0 <sqrtf+0x3c>
 800e1e4:	f7fb fab4 	bl	8009750 <__errno>
 800e1e8:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800e1ec:	2321      	movs	r3, #33	; 0x21
 800e1ee:	6003      	str	r3, [r0, #0]
 800e1f0:	ecbd 8b02 	vpop	{d8}
 800e1f4:	bd08      	pop	{r3, pc}
 800e1f6:	bf00      	nop
 800e1f8:	20000254 	.word	0x20000254
 800e1fc:	00000000 	.word	0x00000000

0800e200 <__ieee754_atan2>:
 800e200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e204:	ec57 6b11 	vmov	r6, r7, d1
 800e208:	4273      	negs	r3, r6
 800e20a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800e390 <__ieee754_atan2+0x190>
 800e20e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e212:	4333      	orrs	r3, r6
 800e214:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e218:	4573      	cmp	r3, lr
 800e21a:	ec51 0b10 	vmov	r0, r1, d0
 800e21e:	ee11 8a10 	vmov	r8, s2
 800e222:	d80a      	bhi.n	800e23a <__ieee754_atan2+0x3a>
 800e224:	4244      	negs	r4, r0
 800e226:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e22a:	4304      	orrs	r4, r0
 800e22c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e230:	4574      	cmp	r4, lr
 800e232:	ee10 9a10 	vmov	r9, s0
 800e236:	468c      	mov	ip, r1
 800e238:	d907      	bls.n	800e24a <__ieee754_atan2+0x4a>
 800e23a:	4632      	mov	r2, r6
 800e23c:	463b      	mov	r3, r7
 800e23e:	f7f2 f885 	bl	800034c <__adddf3>
 800e242:	ec41 0b10 	vmov	d0, r0, r1
 800e246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e24a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800e24e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e252:	4334      	orrs	r4, r6
 800e254:	d103      	bne.n	800e25e <__ieee754_atan2+0x5e>
 800e256:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e25a:	f000 bf75 	b.w	800f148 <atan>
 800e25e:	17bc      	asrs	r4, r7, #30
 800e260:	f004 0402 	and.w	r4, r4, #2
 800e264:	ea53 0909 	orrs.w	r9, r3, r9
 800e268:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e26c:	d107      	bne.n	800e27e <__ieee754_atan2+0x7e>
 800e26e:	2c02      	cmp	r4, #2
 800e270:	d060      	beq.n	800e334 <__ieee754_atan2+0x134>
 800e272:	2c03      	cmp	r4, #3
 800e274:	d1e5      	bne.n	800e242 <__ieee754_atan2+0x42>
 800e276:	a142      	add	r1, pc, #264	; (adr r1, 800e380 <__ieee754_atan2+0x180>)
 800e278:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e27c:	e7e1      	b.n	800e242 <__ieee754_atan2+0x42>
 800e27e:	ea52 0808 	orrs.w	r8, r2, r8
 800e282:	d106      	bne.n	800e292 <__ieee754_atan2+0x92>
 800e284:	f1bc 0f00 	cmp.w	ip, #0
 800e288:	da5f      	bge.n	800e34a <__ieee754_atan2+0x14a>
 800e28a:	a13f      	add	r1, pc, #252	; (adr r1, 800e388 <__ieee754_atan2+0x188>)
 800e28c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e290:	e7d7      	b.n	800e242 <__ieee754_atan2+0x42>
 800e292:	4572      	cmp	r2, lr
 800e294:	d10f      	bne.n	800e2b6 <__ieee754_atan2+0xb6>
 800e296:	4293      	cmp	r3, r2
 800e298:	f104 34ff 	add.w	r4, r4, #4294967295
 800e29c:	d107      	bne.n	800e2ae <__ieee754_atan2+0xae>
 800e29e:	2c02      	cmp	r4, #2
 800e2a0:	d84c      	bhi.n	800e33c <__ieee754_atan2+0x13c>
 800e2a2:	4b35      	ldr	r3, [pc, #212]	; (800e378 <__ieee754_atan2+0x178>)
 800e2a4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e2a8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800e2ac:	e7c9      	b.n	800e242 <__ieee754_atan2+0x42>
 800e2ae:	2c02      	cmp	r4, #2
 800e2b0:	d848      	bhi.n	800e344 <__ieee754_atan2+0x144>
 800e2b2:	4b32      	ldr	r3, [pc, #200]	; (800e37c <__ieee754_atan2+0x17c>)
 800e2b4:	e7f6      	b.n	800e2a4 <__ieee754_atan2+0xa4>
 800e2b6:	4573      	cmp	r3, lr
 800e2b8:	d0e4      	beq.n	800e284 <__ieee754_atan2+0x84>
 800e2ba:	1a9b      	subs	r3, r3, r2
 800e2bc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800e2c0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e2c4:	da1e      	bge.n	800e304 <__ieee754_atan2+0x104>
 800e2c6:	2f00      	cmp	r7, #0
 800e2c8:	da01      	bge.n	800e2ce <__ieee754_atan2+0xce>
 800e2ca:	323c      	adds	r2, #60	; 0x3c
 800e2cc:	db1e      	blt.n	800e30c <__ieee754_atan2+0x10c>
 800e2ce:	4632      	mov	r2, r6
 800e2d0:	463b      	mov	r3, r7
 800e2d2:	f7f2 fb1b 	bl	800090c <__aeabi_ddiv>
 800e2d6:	ec41 0b10 	vmov	d0, r0, r1
 800e2da:	f001 f8d5 	bl	800f488 <fabs>
 800e2de:	f000 ff33 	bl	800f148 <atan>
 800e2e2:	ec51 0b10 	vmov	r0, r1, d0
 800e2e6:	2c01      	cmp	r4, #1
 800e2e8:	d013      	beq.n	800e312 <__ieee754_atan2+0x112>
 800e2ea:	2c02      	cmp	r4, #2
 800e2ec:	d015      	beq.n	800e31a <__ieee754_atan2+0x11a>
 800e2ee:	2c00      	cmp	r4, #0
 800e2f0:	d0a7      	beq.n	800e242 <__ieee754_atan2+0x42>
 800e2f2:	a319      	add	r3, pc, #100	; (adr r3, 800e358 <__ieee754_atan2+0x158>)
 800e2f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f8:	f7f2 f826 	bl	8000348 <__aeabi_dsub>
 800e2fc:	a318      	add	r3, pc, #96	; (adr r3, 800e360 <__ieee754_atan2+0x160>)
 800e2fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e302:	e014      	b.n	800e32e <__ieee754_atan2+0x12e>
 800e304:	a118      	add	r1, pc, #96	; (adr r1, 800e368 <__ieee754_atan2+0x168>)
 800e306:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e30a:	e7ec      	b.n	800e2e6 <__ieee754_atan2+0xe6>
 800e30c:	2000      	movs	r0, #0
 800e30e:	2100      	movs	r1, #0
 800e310:	e7e9      	b.n	800e2e6 <__ieee754_atan2+0xe6>
 800e312:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e316:	4619      	mov	r1, r3
 800e318:	e793      	b.n	800e242 <__ieee754_atan2+0x42>
 800e31a:	a30f      	add	r3, pc, #60	; (adr r3, 800e358 <__ieee754_atan2+0x158>)
 800e31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e320:	f7f2 f812 	bl	8000348 <__aeabi_dsub>
 800e324:	4602      	mov	r2, r0
 800e326:	460b      	mov	r3, r1
 800e328:	a10d      	add	r1, pc, #52	; (adr r1, 800e360 <__ieee754_atan2+0x160>)
 800e32a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e32e:	f7f2 f80b 	bl	8000348 <__aeabi_dsub>
 800e332:	e786      	b.n	800e242 <__ieee754_atan2+0x42>
 800e334:	a10a      	add	r1, pc, #40	; (adr r1, 800e360 <__ieee754_atan2+0x160>)
 800e336:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e33a:	e782      	b.n	800e242 <__ieee754_atan2+0x42>
 800e33c:	a10c      	add	r1, pc, #48	; (adr r1, 800e370 <__ieee754_atan2+0x170>)
 800e33e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e342:	e77e      	b.n	800e242 <__ieee754_atan2+0x42>
 800e344:	2000      	movs	r0, #0
 800e346:	2100      	movs	r1, #0
 800e348:	e77b      	b.n	800e242 <__ieee754_atan2+0x42>
 800e34a:	a107      	add	r1, pc, #28	; (adr r1, 800e368 <__ieee754_atan2+0x168>)
 800e34c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e350:	e777      	b.n	800e242 <__ieee754_atan2+0x42>
 800e352:	bf00      	nop
 800e354:	f3af 8000 	nop.w
 800e358:	33145c07 	.word	0x33145c07
 800e35c:	3ca1a626 	.word	0x3ca1a626
 800e360:	54442d18 	.word	0x54442d18
 800e364:	400921fb 	.word	0x400921fb
 800e368:	54442d18 	.word	0x54442d18
 800e36c:	3ff921fb 	.word	0x3ff921fb
 800e370:	54442d18 	.word	0x54442d18
 800e374:	3fe921fb 	.word	0x3fe921fb
 800e378:	080232f8 	.word	0x080232f8
 800e37c:	08023310 	.word	0x08023310
 800e380:	54442d18 	.word	0x54442d18
 800e384:	c00921fb 	.word	0xc00921fb
 800e388:	54442d18 	.word	0x54442d18
 800e38c:	bff921fb 	.word	0xbff921fb
 800e390:	7ff00000 	.word	0x7ff00000
 800e394:	00000000 	.word	0x00000000

0800e398 <__ieee754_rem_pio2>:
 800e398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e39c:	ed2d 8b02 	vpush	{d8}
 800e3a0:	ec55 4b10 	vmov	r4, r5, d0
 800e3a4:	4bca      	ldr	r3, [pc, #808]	; (800e6d0 <__ieee754_rem_pio2+0x338>)
 800e3a6:	b08b      	sub	sp, #44	; 0x2c
 800e3a8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e3ac:	4598      	cmp	r8, r3
 800e3ae:	4682      	mov	sl, r0
 800e3b0:	9502      	str	r5, [sp, #8]
 800e3b2:	dc08      	bgt.n	800e3c6 <__ieee754_rem_pio2+0x2e>
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	ed80 0b00 	vstr	d0, [r0]
 800e3bc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e3c0:	f04f 0b00 	mov.w	fp, #0
 800e3c4:	e028      	b.n	800e418 <__ieee754_rem_pio2+0x80>
 800e3c6:	4bc3      	ldr	r3, [pc, #780]	; (800e6d4 <__ieee754_rem_pio2+0x33c>)
 800e3c8:	4598      	cmp	r8, r3
 800e3ca:	dc78      	bgt.n	800e4be <__ieee754_rem_pio2+0x126>
 800e3cc:	9b02      	ldr	r3, [sp, #8]
 800e3ce:	4ec2      	ldr	r6, [pc, #776]	; (800e6d8 <__ieee754_rem_pio2+0x340>)
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	ee10 0a10 	vmov	r0, s0
 800e3d6:	a3b0      	add	r3, pc, #704	; (adr r3, 800e698 <__ieee754_rem_pio2+0x300>)
 800e3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3dc:	4629      	mov	r1, r5
 800e3de:	dd39      	ble.n	800e454 <__ieee754_rem_pio2+0xbc>
 800e3e0:	f7f1 ffb2 	bl	8000348 <__aeabi_dsub>
 800e3e4:	45b0      	cmp	r8, r6
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	460d      	mov	r5, r1
 800e3ea:	d01b      	beq.n	800e424 <__ieee754_rem_pio2+0x8c>
 800e3ec:	a3ac      	add	r3, pc, #688	; (adr r3, 800e6a0 <__ieee754_rem_pio2+0x308>)
 800e3ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3f2:	f7f1 ffa9 	bl	8000348 <__aeabi_dsub>
 800e3f6:	4602      	mov	r2, r0
 800e3f8:	460b      	mov	r3, r1
 800e3fa:	e9ca 2300 	strd	r2, r3, [sl]
 800e3fe:	4620      	mov	r0, r4
 800e400:	4629      	mov	r1, r5
 800e402:	f7f1 ffa1 	bl	8000348 <__aeabi_dsub>
 800e406:	a3a6      	add	r3, pc, #664	; (adr r3, 800e6a0 <__ieee754_rem_pio2+0x308>)
 800e408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e40c:	f7f1 ff9c 	bl	8000348 <__aeabi_dsub>
 800e410:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e414:	f04f 0b01 	mov.w	fp, #1
 800e418:	4658      	mov	r0, fp
 800e41a:	b00b      	add	sp, #44	; 0x2c
 800e41c:	ecbd 8b02 	vpop	{d8}
 800e420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e424:	a3a0      	add	r3, pc, #640	; (adr r3, 800e6a8 <__ieee754_rem_pio2+0x310>)
 800e426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42a:	f7f1 ff8d 	bl	8000348 <__aeabi_dsub>
 800e42e:	a3a0      	add	r3, pc, #640	; (adr r3, 800e6b0 <__ieee754_rem_pio2+0x318>)
 800e430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e434:	4604      	mov	r4, r0
 800e436:	460d      	mov	r5, r1
 800e438:	f7f1 ff86 	bl	8000348 <__aeabi_dsub>
 800e43c:	4602      	mov	r2, r0
 800e43e:	460b      	mov	r3, r1
 800e440:	e9ca 2300 	strd	r2, r3, [sl]
 800e444:	4620      	mov	r0, r4
 800e446:	4629      	mov	r1, r5
 800e448:	f7f1 ff7e 	bl	8000348 <__aeabi_dsub>
 800e44c:	a398      	add	r3, pc, #608	; (adr r3, 800e6b0 <__ieee754_rem_pio2+0x318>)
 800e44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e452:	e7db      	b.n	800e40c <__ieee754_rem_pio2+0x74>
 800e454:	f7f1 ff7a 	bl	800034c <__adddf3>
 800e458:	45b0      	cmp	r8, r6
 800e45a:	4604      	mov	r4, r0
 800e45c:	460d      	mov	r5, r1
 800e45e:	d016      	beq.n	800e48e <__ieee754_rem_pio2+0xf6>
 800e460:	a38f      	add	r3, pc, #572	; (adr r3, 800e6a0 <__ieee754_rem_pio2+0x308>)
 800e462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e466:	f7f1 ff71 	bl	800034c <__adddf3>
 800e46a:	4602      	mov	r2, r0
 800e46c:	460b      	mov	r3, r1
 800e46e:	e9ca 2300 	strd	r2, r3, [sl]
 800e472:	4620      	mov	r0, r4
 800e474:	4629      	mov	r1, r5
 800e476:	f7f1 ff67 	bl	8000348 <__aeabi_dsub>
 800e47a:	a389      	add	r3, pc, #548	; (adr r3, 800e6a0 <__ieee754_rem_pio2+0x308>)
 800e47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e480:	f7f1 ff64 	bl	800034c <__adddf3>
 800e484:	f04f 3bff 	mov.w	fp, #4294967295
 800e488:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e48c:	e7c4      	b.n	800e418 <__ieee754_rem_pio2+0x80>
 800e48e:	a386      	add	r3, pc, #536	; (adr r3, 800e6a8 <__ieee754_rem_pio2+0x310>)
 800e490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e494:	f7f1 ff5a 	bl	800034c <__adddf3>
 800e498:	a385      	add	r3, pc, #532	; (adr r3, 800e6b0 <__ieee754_rem_pio2+0x318>)
 800e49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e49e:	4604      	mov	r4, r0
 800e4a0:	460d      	mov	r5, r1
 800e4a2:	f7f1 ff53 	bl	800034c <__adddf3>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	460b      	mov	r3, r1
 800e4aa:	e9ca 2300 	strd	r2, r3, [sl]
 800e4ae:	4620      	mov	r0, r4
 800e4b0:	4629      	mov	r1, r5
 800e4b2:	f7f1 ff49 	bl	8000348 <__aeabi_dsub>
 800e4b6:	a37e      	add	r3, pc, #504	; (adr r3, 800e6b0 <__ieee754_rem_pio2+0x318>)
 800e4b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4bc:	e7e0      	b.n	800e480 <__ieee754_rem_pio2+0xe8>
 800e4be:	4b87      	ldr	r3, [pc, #540]	; (800e6dc <__ieee754_rem_pio2+0x344>)
 800e4c0:	4598      	cmp	r8, r3
 800e4c2:	f300 80d9 	bgt.w	800e678 <__ieee754_rem_pio2+0x2e0>
 800e4c6:	f000 ffdf 	bl	800f488 <fabs>
 800e4ca:	ec55 4b10 	vmov	r4, r5, d0
 800e4ce:	ee10 0a10 	vmov	r0, s0
 800e4d2:	a379      	add	r3, pc, #484	; (adr r3, 800e6b8 <__ieee754_rem_pio2+0x320>)
 800e4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d8:	4629      	mov	r1, r5
 800e4da:	f7f2 f8ed 	bl	80006b8 <__aeabi_dmul>
 800e4de:	4b80      	ldr	r3, [pc, #512]	; (800e6e0 <__ieee754_rem_pio2+0x348>)
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	f7f1 ff33 	bl	800034c <__adddf3>
 800e4e6:	f7f2 fb97 	bl	8000c18 <__aeabi_d2iz>
 800e4ea:	4683      	mov	fp, r0
 800e4ec:	f7f2 f87a 	bl	80005e4 <__aeabi_i2d>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	ec43 2b18 	vmov	d8, r2, r3
 800e4f8:	a367      	add	r3, pc, #412	; (adr r3, 800e698 <__ieee754_rem_pio2+0x300>)
 800e4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fe:	f7f2 f8db 	bl	80006b8 <__aeabi_dmul>
 800e502:	4602      	mov	r2, r0
 800e504:	460b      	mov	r3, r1
 800e506:	4620      	mov	r0, r4
 800e508:	4629      	mov	r1, r5
 800e50a:	f7f1 ff1d 	bl	8000348 <__aeabi_dsub>
 800e50e:	a364      	add	r3, pc, #400	; (adr r3, 800e6a0 <__ieee754_rem_pio2+0x308>)
 800e510:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e514:	4606      	mov	r6, r0
 800e516:	460f      	mov	r7, r1
 800e518:	ec51 0b18 	vmov	r0, r1, d8
 800e51c:	f7f2 f8cc 	bl	80006b8 <__aeabi_dmul>
 800e520:	f1bb 0f1f 	cmp.w	fp, #31
 800e524:	4604      	mov	r4, r0
 800e526:	460d      	mov	r5, r1
 800e528:	dc0d      	bgt.n	800e546 <__ieee754_rem_pio2+0x1ae>
 800e52a:	4b6e      	ldr	r3, [pc, #440]	; (800e6e4 <__ieee754_rem_pio2+0x34c>)
 800e52c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800e530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e534:	4543      	cmp	r3, r8
 800e536:	d006      	beq.n	800e546 <__ieee754_rem_pio2+0x1ae>
 800e538:	4622      	mov	r2, r4
 800e53a:	462b      	mov	r3, r5
 800e53c:	4630      	mov	r0, r6
 800e53e:	4639      	mov	r1, r7
 800e540:	f7f1 ff02 	bl	8000348 <__aeabi_dsub>
 800e544:	e00f      	b.n	800e566 <__ieee754_rem_pio2+0x1ce>
 800e546:	462b      	mov	r3, r5
 800e548:	4622      	mov	r2, r4
 800e54a:	4630      	mov	r0, r6
 800e54c:	4639      	mov	r1, r7
 800e54e:	f7f1 fefb 	bl	8000348 <__aeabi_dsub>
 800e552:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e556:	9303      	str	r3, [sp, #12]
 800e558:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e55c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800e560:	f1b8 0f10 	cmp.w	r8, #16
 800e564:	dc02      	bgt.n	800e56c <__ieee754_rem_pio2+0x1d4>
 800e566:	e9ca 0100 	strd	r0, r1, [sl]
 800e56a:	e039      	b.n	800e5e0 <__ieee754_rem_pio2+0x248>
 800e56c:	a34e      	add	r3, pc, #312	; (adr r3, 800e6a8 <__ieee754_rem_pio2+0x310>)
 800e56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e572:	ec51 0b18 	vmov	r0, r1, d8
 800e576:	f7f2 f89f 	bl	80006b8 <__aeabi_dmul>
 800e57a:	4604      	mov	r4, r0
 800e57c:	460d      	mov	r5, r1
 800e57e:	4602      	mov	r2, r0
 800e580:	460b      	mov	r3, r1
 800e582:	4630      	mov	r0, r6
 800e584:	4639      	mov	r1, r7
 800e586:	f7f1 fedf 	bl	8000348 <__aeabi_dsub>
 800e58a:	4602      	mov	r2, r0
 800e58c:	460b      	mov	r3, r1
 800e58e:	4680      	mov	r8, r0
 800e590:	4689      	mov	r9, r1
 800e592:	4630      	mov	r0, r6
 800e594:	4639      	mov	r1, r7
 800e596:	f7f1 fed7 	bl	8000348 <__aeabi_dsub>
 800e59a:	4622      	mov	r2, r4
 800e59c:	462b      	mov	r3, r5
 800e59e:	f7f1 fed3 	bl	8000348 <__aeabi_dsub>
 800e5a2:	a343      	add	r3, pc, #268	; (adr r3, 800e6b0 <__ieee754_rem_pio2+0x318>)
 800e5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a8:	4604      	mov	r4, r0
 800e5aa:	460d      	mov	r5, r1
 800e5ac:	ec51 0b18 	vmov	r0, r1, d8
 800e5b0:	f7f2 f882 	bl	80006b8 <__aeabi_dmul>
 800e5b4:	4622      	mov	r2, r4
 800e5b6:	462b      	mov	r3, r5
 800e5b8:	f7f1 fec6 	bl	8000348 <__aeabi_dsub>
 800e5bc:	4602      	mov	r2, r0
 800e5be:	460b      	mov	r3, r1
 800e5c0:	4604      	mov	r4, r0
 800e5c2:	460d      	mov	r5, r1
 800e5c4:	4640      	mov	r0, r8
 800e5c6:	4649      	mov	r1, r9
 800e5c8:	f7f1 febe 	bl	8000348 <__aeabi_dsub>
 800e5cc:	9a03      	ldr	r2, [sp, #12]
 800e5ce:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e5d2:	1ad3      	subs	r3, r2, r3
 800e5d4:	2b31      	cmp	r3, #49	; 0x31
 800e5d6:	dc24      	bgt.n	800e622 <__ieee754_rem_pio2+0x28a>
 800e5d8:	e9ca 0100 	strd	r0, r1, [sl]
 800e5dc:	4646      	mov	r6, r8
 800e5de:	464f      	mov	r7, r9
 800e5e0:	e9da 8900 	ldrd	r8, r9, [sl]
 800e5e4:	4630      	mov	r0, r6
 800e5e6:	4642      	mov	r2, r8
 800e5e8:	464b      	mov	r3, r9
 800e5ea:	4639      	mov	r1, r7
 800e5ec:	f7f1 feac 	bl	8000348 <__aeabi_dsub>
 800e5f0:	462b      	mov	r3, r5
 800e5f2:	4622      	mov	r2, r4
 800e5f4:	f7f1 fea8 	bl	8000348 <__aeabi_dsub>
 800e5f8:	9b02      	ldr	r3, [sp, #8]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e600:	f6bf af0a 	bge.w	800e418 <__ieee754_rem_pio2+0x80>
 800e604:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e608:	f8ca 3004 	str.w	r3, [sl, #4]
 800e60c:	f8ca 8000 	str.w	r8, [sl]
 800e610:	f8ca 0008 	str.w	r0, [sl, #8]
 800e614:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e618:	f8ca 300c 	str.w	r3, [sl, #12]
 800e61c:	f1cb 0b00 	rsb	fp, fp, #0
 800e620:	e6fa      	b.n	800e418 <__ieee754_rem_pio2+0x80>
 800e622:	a327      	add	r3, pc, #156	; (adr r3, 800e6c0 <__ieee754_rem_pio2+0x328>)
 800e624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e628:	ec51 0b18 	vmov	r0, r1, d8
 800e62c:	f7f2 f844 	bl	80006b8 <__aeabi_dmul>
 800e630:	4604      	mov	r4, r0
 800e632:	460d      	mov	r5, r1
 800e634:	4602      	mov	r2, r0
 800e636:	460b      	mov	r3, r1
 800e638:	4640      	mov	r0, r8
 800e63a:	4649      	mov	r1, r9
 800e63c:	f7f1 fe84 	bl	8000348 <__aeabi_dsub>
 800e640:	4602      	mov	r2, r0
 800e642:	460b      	mov	r3, r1
 800e644:	4606      	mov	r6, r0
 800e646:	460f      	mov	r7, r1
 800e648:	4640      	mov	r0, r8
 800e64a:	4649      	mov	r1, r9
 800e64c:	f7f1 fe7c 	bl	8000348 <__aeabi_dsub>
 800e650:	4622      	mov	r2, r4
 800e652:	462b      	mov	r3, r5
 800e654:	f7f1 fe78 	bl	8000348 <__aeabi_dsub>
 800e658:	a31b      	add	r3, pc, #108	; (adr r3, 800e6c8 <__ieee754_rem_pio2+0x330>)
 800e65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65e:	4604      	mov	r4, r0
 800e660:	460d      	mov	r5, r1
 800e662:	ec51 0b18 	vmov	r0, r1, d8
 800e666:	f7f2 f827 	bl	80006b8 <__aeabi_dmul>
 800e66a:	4622      	mov	r2, r4
 800e66c:	462b      	mov	r3, r5
 800e66e:	f7f1 fe6b 	bl	8000348 <__aeabi_dsub>
 800e672:	4604      	mov	r4, r0
 800e674:	460d      	mov	r5, r1
 800e676:	e75f      	b.n	800e538 <__ieee754_rem_pio2+0x1a0>
 800e678:	4b1b      	ldr	r3, [pc, #108]	; (800e6e8 <__ieee754_rem_pio2+0x350>)
 800e67a:	4598      	cmp	r8, r3
 800e67c:	dd36      	ble.n	800e6ec <__ieee754_rem_pio2+0x354>
 800e67e:	ee10 2a10 	vmov	r2, s0
 800e682:	462b      	mov	r3, r5
 800e684:	4620      	mov	r0, r4
 800e686:	4629      	mov	r1, r5
 800e688:	f7f1 fe5e 	bl	8000348 <__aeabi_dsub>
 800e68c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e690:	e9ca 0100 	strd	r0, r1, [sl]
 800e694:	e694      	b.n	800e3c0 <__ieee754_rem_pio2+0x28>
 800e696:	bf00      	nop
 800e698:	54400000 	.word	0x54400000
 800e69c:	3ff921fb 	.word	0x3ff921fb
 800e6a0:	1a626331 	.word	0x1a626331
 800e6a4:	3dd0b461 	.word	0x3dd0b461
 800e6a8:	1a600000 	.word	0x1a600000
 800e6ac:	3dd0b461 	.word	0x3dd0b461
 800e6b0:	2e037073 	.word	0x2e037073
 800e6b4:	3ba3198a 	.word	0x3ba3198a
 800e6b8:	6dc9c883 	.word	0x6dc9c883
 800e6bc:	3fe45f30 	.word	0x3fe45f30
 800e6c0:	2e000000 	.word	0x2e000000
 800e6c4:	3ba3198a 	.word	0x3ba3198a
 800e6c8:	252049c1 	.word	0x252049c1
 800e6cc:	397b839a 	.word	0x397b839a
 800e6d0:	3fe921fb 	.word	0x3fe921fb
 800e6d4:	4002d97b 	.word	0x4002d97b
 800e6d8:	3ff921fb 	.word	0x3ff921fb
 800e6dc:	413921fb 	.word	0x413921fb
 800e6e0:	3fe00000 	.word	0x3fe00000
 800e6e4:	08023328 	.word	0x08023328
 800e6e8:	7fefffff 	.word	0x7fefffff
 800e6ec:	ea4f 5428 	mov.w	r4, r8, asr #20
 800e6f0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800e6f4:	ee10 0a10 	vmov	r0, s0
 800e6f8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800e6fc:	ee10 6a10 	vmov	r6, s0
 800e700:	460f      	mov	r7, r1
 800e702:	f7f2 fa89 	bl	8000c18 <__aeabi_d2iz>
 800e706:	f7f1 ff6d 	bl	80005e4 <__aeabi_i2d>
 800e70a:	4602      	mov	r2, r0
 800e70c:	460b      	mov	r3, r1
 800e70e:	4630      	mov	r0, r6
 800e710:	4639      	mov	r1, r7
 800e712:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e716:	f7f1 fe17 	bl	8000348 <__aeabi_dsub>
 800e71a:	4b22      	ldr	r3, [pc, #136]	; (800e7a4 <__ieee754_rem_pio2+0x40c>)
 800e71c:	2200      	movs	r2, #0
 800e71e:	f7f1 ffcb 	bl	80006b8 <__aeabi_dmul>
 800e722:	460f      	mov	r7, r1
 800e724:	4606      	mov	r6, r0
 800e726:	f7f2 fa77 	bl	8000c18 <__aeabi_d2iz>
 800e72a:	f7f1 ff5b 	bl	80005e4 <__aeabi_i2d>
 800e72e:	4602      	mov	r2, r0
 800e730:	460b      	mov	r3, r1
 800e732:	4630      	mov	r0, r6
 800e734:	4639      	mov	r1, r7
 800e736:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e73a:	f7f1 fe05 	bl	8000348 <__aeabi_dsub>
 800e73e:	4b19      	ldr	r3, [pc, #100]	; (800e7a4 <__ieee754_rem_pio2+0x40c>)
 800e740:	2200      	movs	r2, #0
 800e742:	f7f1 ffb9 	bl	80006b8 <__aeabi_dmul>
 800e746:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e74a:	ad04      	add	r5, sp, #16
 800e74c:	f04f 0803 	mov.w	r8, #3
 800e750:	46a9      	mov	r9, r5
 800e752:	2600      	movs	r6, #0
 800e754:	2700      	movs	r7, #0
 800e756:	4632      	mov	r2, r6
 800e758:	463b      	mov	r3, r7
 800e75a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800e75e:	46c3      	mov	fp, r8
 800e760:	3d08      	subs	r5, #8
 800e762:	f108 38ff 	add.w	r8, r8, #4294967295
 800e766:	f7f2 fa0f 	bl	8000b88 <__aeabi_dcmpeq>
 800e76a:	2800      	cmp	r0, #0
 800e76c:	d1f3      	bne.n	800e756 <__ieee754_rem_pio2+0x3be>
 800e76e:	4b0e      	ldr	r3, [pc, #56]	; (800e7a8 <__ieee754_rem_pio2+0x410>)
 800e770:	9301      	str	r3, [sp, #4]
 800e772:	2302      	movs	r3, #2
 800e774:	9300      	str	r3, [sp, #0]
 800e776:	4622      	mov	r2, r4
 800e778:	465b      	mov	r3, fp
 800e77a:	4651      	mov	r1, sl
 800e77c:	4648      	mov	r0, r9
 800e77e:	f000 f8e3 	bl	800e948 <__kernel_rem_pio2>
 800e782:	9b02      	ldr	r3, [sp, #8]
 800e784:	2b00      	cmp	r3, #0
 800e786:	4683      	mov	fp, r0
 800e788:	f6bf ae46 	bge.w	800e418 <__ieee754_rem_pio2+0x80>
 800e78c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800e790:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e794:	f8ca 3004 	str.w	r3, [sl, #4]
 800e798:	f8da 300c 	ldr.w	r3, [sl, #12]
 800e79c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e7a0:	e73a      	b.n	800e618 <__ieee754_rem_pio2+0x280>
 800e7a2:	bf00      	nop
 800e7a4:	41700000 	.word	0x41700000
 800e7a8:	080233a8 	.word	0x080233a8

0800e7ac <__ieee754_sqrtf>:
 800e7ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e7b0:	4770      	bx	lr
 800e7b2:	0000      	movs	r0, r0
 800e7b4:	0000      	movs	r0, r0
	...

0800e7b8 <__kernel_cos>:
 800e7b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7bc:	ec57 6b10 	vmov	r6, r7, d0
 800e7c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800e7c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800e7c8:	ed8d 1b00 	vstr	d1, [sp]
 800e7cc:	da07      	bge.n	800e7de <__kernel_cos+0x26>
 800e7ce:	ee10 0a10 	vmov	r0, s0
 800e7d2:	4639      	mov	r1, r7
 800e7d4:	f7f2 fa20 	bl	8000c18 <__aeabi_d2iz>
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	f000 8088 	beq.w	800e8ee <__kernel_cos+0x136>
 800e7de:	4632      	mov	r2, r6
 800e7e0:	463b      	mov	r3, r7
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	4639      	mov	r1, r7
 800e7e6:	f7f1 ff67 	bl	80006b8 <__aeabi_dmul>
 800e7ea:	4b51      	ldr	r3, [pc, #324]	; (800e930 <__kernel_cos+0x178>)
 800e7ec:	2200      	movs	r2, #0
 800e7ee:	4604      	mov	r4, r0
 800e7f0:	460d      	mov	r5, r1
 800e7f2:	f7f1 ff61 	bl	80006b8 <__aeabi_dmul>
 800e7f6:	a340      	add	r3, pc, #256	; (adr r3, 800e8f8 <__kernel_cos+0x140>)
 800e7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7fc:	4682      	mov	sl, r0
 800e7fe:	468b      	mov	fp, r1
 800e800:	4620      	mov	r0, r4
 800e802:	4629      	mov	r1, r5
 800e804:	f7f1 ff58 	bl	80006b8 <__aeabi_dmul>
 800e808:	a33d      	add	r3, pc, #244	; (adr r3, 800e900 <__kernel_cos+0x148>)
 800e80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80e:	f7f1 fd9d 	bl	800034c <__adddf3>
 800e812:	4622      	mov	r2, r4
 800e814:	462b      	mov	r3, r5
 800e816:	f7f1 ff4f 	bl	80006b8 <__aeabi_dmul>
 800e81a:	a33b      	add	r3, pc, #236	; (adr r3, 800e908 <__kernel_cos+0x150>)
 800e81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e820:	f7f1 fd92 	bl	8000348 <__aeabi_dsub>
 800e824:	4622      	mov	r2, r4
 800e826:	462b      	mov	r3, r5
 800e828:	f7f1 ff46 	bl	80006b8 <__aeabi_dmul>
 800e82c:	a338      	add	r3, pc, #224	; (adr r3, 800e910 <__kernel_cos+0x158>)
 800e82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e832:	f7f1 fd8b 	bl	800034c <__adddf3>
 800e836:	4622      	mov	r2, r4
 800e838:	462b      	mov	r3, r5
 800e83a:	f7f1 ff3d 	bl	80006b8 <__aeabi_dmul>
 800e83e:	a336      	add	r3, pc, #216	; (adr r3, 800e918 <__kernel_cos+0x160>)
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	f7f1 fd80 	bl	8000348 <__aeabi_dsub>
 800e848:	4622      	mov	r2, r4
 800e84a:	462b      	mov	r3, r5
 800e84c:	f7f1 ff34 	bl	80006b8 <__aeabi_dmul>
 800e850:	a333      	add	r3, pc, #204	; (adr r3, 800e920 <__kernel_cos+0x168>)
 800e852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e856:	f7f1 fd79 	bl	800034c <__adddf3>
 800e85a:	4622      	mov	r2, r4
 800e85c:	462b      	mov	r3, r5
 800e85e:	f7f1 ff2b 	bl	80006b8 <__aeabi_dmul>
 800e862:	4622      	mov	r2, r4
 800e864:	462b      	mov	r3, r5
 800e866:	f7f1 ff27 	bl	80006b8 <__aeabi_dmul>
 800e86a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e86e:	4604      	mov	r4, r0
 800e870:	460d      	mov	r5, r1
 800e872:	4630      	mov	r0, r6
 800e874:	4639      	mov	r1, r7
 800e876:	f7f1 ff1f 	bl	80006b8 <__aeabi_dmul>
 800e87a:	460b      	mov	r3, r1
 800e87c:	4602      	mov	r2, r0
 800e87e:	4629      	mov	r1, r5
 800e880:	4620      	mov	r0, r4
 800e882:	f7f1 fd61 	bl	8000348 <__aeabi_dsub>
 800e886:	4b2b      	ldr	r3, [pc, #172]	; (800e934 <__kernel_cos+0x17c>)
 800e888:	4598      	cmp	r8, r3
 800e88a:	4606      	mov	r6, r0
 800e88c:	460f      	mov	r7, r1
 800e88e:	dc10      	bgt.n	800e8b2 <__kernel_cos+0xfa>
 800e890:	4602      	mov	r2, r0
 800e892:	460b      	mov	r3, r1
 800e894:	4650      	mov	r0, sl
 800e896:	4659      	mov	r1, fp
 800e898:	f7f1 fd56 	bl	8000348 <__aeabi_dsub>
 800e89c:	460b      	mov	r3, r1
 800e89e:	4926      	ldr	r1, [pc, #152]	; (800e938 <__kernel_cos+0x180>)
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	2000      	movs	r0, #0
 800e8a4:	f7f1 fd50 	bl	8000348 <__aeabi_dsub>
 800e8a8:	ec41 0b10 	vmov	d0, r0, r1
 800e8ac:	b003      	add	sp, #12
 800e8ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b2:	4b22      	ldr	r3, [pc, #136]	; (800e93c <__kernel_cos+0x184>)
 800e8b4:	4920      	ldr	r1, [pc, #128]	; (800e938 <__kernel_cos+0x180>)
 800e8b6:	4598      	cmp	r8, r3
 800e8b8:	bfcc      	ite	gt
 800e8ba:	4d21      	ldrgt	r5, [pc, #132]	; (800e940 <__kernel_cos+0x188>)
 800e8bc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800e8c0:	2400      	movs	r4, #0
 800e8c2:	4622      	mov	r2, r4
 800e8c4:	462b      	mov	r3, r5
 800e8c6:	2000      	movs	r0, #0
 800e8c8:	f7f1 fd3e 	bl	8000348 <__aeabi_dsub>
 800e8cc:	4622      	mov	r2, r4
 800e8ce:	4680      	mov	r8, r0
 800e8d0:	4689      	mov	r9, r1
 800e8d2:	462b      	mov	r3, r5
 800e8d4:	4650      	mov	r0, sl
 800e8d6:	4659      	mov	r1, fp
 800e8d8:	f7f1 fd36 	bl	8000348 <__aeabi_dsub>
 800e8dc:	4632      	mov	r2, r6
 800e8de:	463b      	mov	r3, r7
 800e8e0:	f7f1 fd32 	bl	8000348 <__aeabi_dsub>
 800e8e4:	4602      	mov	r2, r0
 800e8e6:	460b      	mov	r3, r1
 800e8e8:	4640      	mov	r0, r8
 800e8ea:	4649      	mov	r1, r9
 800e8ec:	e7da      	b.n	800e8a4 <__kernel_cos+0xec>
 800e8ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800e928 <__kernel_cos+0x170>
 800e8f2:	e7db      	b.n	800e8ac <__kernel_cos+0xf4>
 800e8f4:	f3af 8000 	nop.w
 800e8f8:	be8838d4 	.word	0xbe8838d4
 800e8fc:	bda8fae9 	.word	0xbda8fae9
 800e900:	bdb4b1c4 	.word	0xbdb4b1c4
 800e904:	3e21ee9e 	.word	0x3e21ee9e
 800e908:	809c52ad 	.word	0x809c52ad
 800e90c:	3e927e4f 	.word	0x3e927e4f
 800e910:	19cb1590 	.word	0x19cb1590
 800e914:	3efa01a0 	.word	0x3efa01a0
 800e918:	16c15177 	.word	0x16c15177
 800e91c:	3f56c16c 	.word	0x3f56c16c
 800e920:	5555554c 	.word	0x5555554c
 800e924:	3fa55555 	.word	0x3fa55555
 800e928:	00000000 	.word	0x00000000
 800e92c:	3ff00000 	.word	0x3ff00000
 800e930:	3fe00000 	.word	0x3fe00000
 800e934:	3fd33332 	.word	0x3fd33332
 800e938:	3ff00000 	.word	0x3ff00000
 800e93c:	3fe90000 	.word	0x3fe90000
 800e940:	3fd20000 	.word	0x3fd20000
 800e944:	00000000 	.word	0x00000000

0800e948 <__kernel_rem_pio2>:
 800e948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e94c:	ed2d 8b02 	vpush	{d8}
 800e950:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800e954:	f112 0f14 	cmn.w	r2, #20
 800e958:	9308      	str	r3, [sp, #32]
 800e95a:	9101      	str	r1, [sp, #4]
 800e95c:	4bc6      	ldr	r3, [pc, #792]	; (800ec78 <__kernel_rem_pio2+0x330>)
 800e95e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800e960:	9009      	str	r0, [sp, #36]	; 0x24
 800e962:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e966:	9304      	str	r3, [sp, #16]
 800e968:	9b08      	ldr	r3, [sp, #32]
 800e96a:	f103 33ff 	add.w	r3, r3, #4294967295
 800e96e:	bfa8      	it	ge
 800e970:	1ed4      	subge	r4, r2, #3
 800e972:	9306      	str	r3, [sp, #24]
 800e974:	bfb2      	itee	lt
 800e976:	2400      	movlt	r4, #0
 800e978:	2318      	movge	r3, #24
 800e97a:	fb94 f4f3 	sdivge	r4, r4, r3
 800e97e:	f06f 0317 	mvn.w	r3, #23
 800e982:	fb04 3303 	mla	r3, r4, r3, r3
 800e986:	eb03 0a02 	add.w	sl, r3, r2
 800e98a:	9b04      	ldr	r3, [sp, #16]
 800e98c:	9a06      	ldr	r2, [sp, #24]
 800e98e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800ec68 <__kernel_rem_pio2+0x320>
 800e992:	eb03 0802 	add.w	r8, r3, r2
 800e996:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800e998:	1aa7      	subs	r7, r4, r2
 800e99a:	ae20      	add	r6, sp, #128	; 0x80
 800e99c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e9a0:	2500      	movs	r5, #0
 800e9a2:	4545      	cmp	r5, r8
 800e9a4:	dd18      	ble.n	800e9d8 <__kernel_rem_pio2+0x90>
 800e9a6:	9b08      	ldr	r3, [sp, #32]
 800e9a8:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800e9ac:	aa20      	add	r2, sp, #128	; 0x80
 800e9ae:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800ec68 <__kernel_rem_pio2+0x320>
 800e9b2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800e9b6:	f1c3 0301 	rsb	r3, r3, #1
 800e9ba:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800e9be:	9307      	str	r3, [sp, #28]
 800e9c0:	9b07      	ldr	r3, [sp, #28]
 800e9c2:	9a04      	ldr	r2, [sp, #16]
 800e9c4:	4443      	add	r3, r8
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	db2f      	blt.n	800ea2a <__kernel_rem_pio2+0xe2>
 800e9ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800e9ce:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800e9d2:	462f      	mov	r7, r5
 800e9d4:	2600      	movs	r6, #0
 800e9d6:	e01b      	b.n	800ea10 <__kernel_rem_pio2+0xc8>
 800e9d8:	42ef      	cmn	r7, r5
 800e9da:	d407      	bmi.n	800e9ec <__kernel_rem_pio2+0xa4>
 800e9dc:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e9e0:	f7f1 fe00 	bl	80005e4 <__aeabi_i2d>
 800e9e4:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e9e8:	3501      	adds	r5, #1
 800e9ea:	e7da      	b.n	800e9a2 <__kernel_rem_pio2+0x5a>
 800e9ec:	ec51 0b18 	vmov	r0, r1, d8
 800e9f0:	e7f8      	b.n	800e9e4 <__kernel_rem_pio2+0x9c>
 800e9f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e9f6:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800e9fa:	f7f1 fe5d 	bl	80006b8 <__aeabi_dmul>
 800e9fe:	4602      	mov	r2, r0
 800ea00:	460b      	mov	r3, r1
 800ea02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea06:	f7f1 fca1 	bl	800034c <__adddf3>
 800ea0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea0e:	3601      	adds	r6, #1
 800ea10:	9b06      	ldr	r3, [sp, #24]
 800ea12:	429e      	cmp	r6, r3
 800ea14:	f1a7 0708 	sub.w	r7, r7, #8
 800ea18:	ddeb      	ble.n	800e9f2 <__kernel_rem_pio2+0xaa>
 800ea1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ea1e:	3508      	adds	r5, #8
 800ea20:	ecab 7b02 	vstmia	fp!, {d7}
 800ea24:	f108 0801 	add.w	r8, r8, #1
 800ea28:	e7ca      	b.n	800e9c0 <__kernel_rem_pio2+0x78>
 800ea2a:	9b04      	ldr	r3, [sp, #16]
 800ea2c:	aa0c      	add	r2, sp, #48	; 0x30
 800ea2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ea32:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea34:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ea36:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ea3a:	9c04      	ldr	r4, [sp, #16]
 800ea3c:	930a      	str	r3, [sp, #40]	; 0x28
 800ea3e:	ab98      	add	r3, sp, #608	; 0x260
 800ea40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ea44:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ea48:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800ea4c:	f8cd b008 	str.w	fp, [sp, #8]
 800ea50:	4625      	mov	r5, r4
 800ea52:	2d00      	cmp	r5, #0
 800ea54:	dc78      	bgt.n	800eb48 <__kernel_rem_pio2+0x200>
 800ea56:	ec47 6b10 	vmov	d0, r6, r7
 800ea5a:	4650      	mov	r0, sl
 800ea5c:	f000 fda0 	bl	800f5a0 <scalbn>
 800ea60:	ec57 6b10 	vmov	r6, r7, d0
 800ea64:	2200      	movs	r2, #0
 800ea66:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ea6a:	ee10 0a10 	vmov	r0, s0
 800ea6e:	4639      	mov	r1, r7
 800ea70:	f7f1 fe22 	bl	80006b8 <__aeabi_dmul>
 800ea74:	ec41 0b10 	vmov	d0, r0, r1
 800ea78:	f000 fd12 	bl	800f4a0 <floor>
 800ea7c:	4b7f      	ldr	r3, [pc, #508]	; (800ec7c <__kernel_rem_pio2+0x334>)
 800ea7e:	ec51 0b10 	vmov	r0, r1, d0
 800ea82:	2200      	movs	r2, #0
 800ea84:	f7f1 fe18 	bl	80006b8 <__aeabi_dmul>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	4630      	mov	r0, r6
 800ea8e:	4639      	mov	r1, r7
 800ea90:	f7f1 fc5a 	bl	8000348 <__aeabi_dsub>
 800ea94:	460f      	mov	r7, r1
 800ea96:	4606      	mov	r6, r0
 800ea98:	f7f2 f8be 	bl	8000c18 <__aeabi_d2iz>
 800ea9c:	9007      	str	r0, [sp, #28]
 800ea9e:	f7f1 fda1 	bl	80005e4 <__aeabi_i2d>
 800eaa2:	4602      	mov	r2, r0
 800eaa4:	460b      	mov	r3, r1
 800eaa6:	4630      	mov	r0, r6
 800eaa8:	4639      	mov	r1, r7
 800eaaa:	f7f1 fc4d 	bl	8000348 <__aeabi_dsub>
 800eaae:	f1ba 0f00 	cmp.w	sl, #0
 800eab2:	4606      	mov	r6, r0
 800eab4:	460f      	mov	r7, r1
 800eab6:	dd70      	ble.n	800eb9a <__kernel_rem_pio2+0x252>
 800eab8:	1e62      	subs	r2, r4, #1
 800eaba:	ab0c      	add	r3, sp, #48	; 0x30
 800eabc:	9d07      	ldr	r5, [sp, #28]
 800eabe:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800eac2:	f1ca 0118 	rsb	r1, sl, #24
 800eac6:	fa40 f301 	asr.w	r3, r0, r1
 800eaca:	441d      	add	r5, r3
 800eacc:	408b      	lsls	r3, r1
 800eace:	1ac0      	subs	r0, r0, r3
 800ead0:	ab0c      	add	r3, sp, #48	; 0x30
 800ead2:	9507      	str	r5, [sp, #28]
 800ead4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ead8:	f1ca 0317 	rsb	r3, sl, #23
 800eadc:	fa40 f303 	asr.w	r3, r0, r3
 800eae0:	9302      	str	r3, [sp, #8]
 800eae2:	9b02      	ldr	r3, [sp, #8]
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	dd66      	ble.n	800ebb6 <__kernel_rem_pio2+0x26e>
 800eae8:	9b07      	ldr	r3, [sp, #28]
 800eaea:	2200      	movs	r2, #0
 800eaec:	3301      	adds	r3, #1
 800eaee:	9307      	str	r3, [sp, #28]
 800eaf0:	4615      	mov	r5, r2
 800eaf2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800eaf6:	4294      	cmp	r4, r2
 800eaf8:	f300 8099 	bgt.w	800ec2e <__kernel_rem_pio2+0x2e6>
 800eafc:	f1ba 0f00 	cmp.w	sl, #0
 800eb00:	dd07      	ble.n	800eb12 <__kernel_rem_pio2+0x1ca>
 800eb02:	f1ba 0f01 	cmp.w	sl, #1
 800eb06:	f000 80a5 	beq.w	800ec54 <__kernel_rem_pio2+0x30c>
 800eb0a:	f1ba 0f02 	cmp.w	sl, #2
 800eb0e:	f000 80c1 	beq.w	800ec94 <__kernel_rem_pio2+0x34c>
 800eb12:	9b02      	ldr	r3, [sp, #8]
 800eb14:	2b02      	cmp	r3, #2
 800eb16:	d14e      	bne.n	800ebb6 <__kernel_rem_pio2+0x26e>
 800eb18:	4632      	mov	r2, r6
 800eb1a:	463b      	mov	r3, r7
 800eb1c:	4958      	ldr	r1, [pc, #352]	; (800ec80 <__kernel_rem_pio2+0x338>)
 800eb1e:	2000      	movs	r0, #0
 800eb20:	f7f1 fc12 	bl	8000348 <__aeabi_dsub>
 800eb24:	4606      	mov	r6, r0
 800eb26:	460f      	mov	r7, r1
 800eb28:	2d00      	cmp	r5, #0
 800eb2a:	d044      	beq.n	800ebb6 <__kernel_rem_pio2+0x26e>
 800eb2c:	4650      	mov	r0, sl
 800eb2e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800ec70 <__kernel_rem_pio2+0x328>
 800eb32:	f000 fd35 	bl	800f5a0 <scalbn>
 800eb36:	4630      	mov	r0, r6
 800eb38:	4639      	mov	r1, r7
 800eb3a:	ec53 2b10 	vmov	r2, r3, d0
 800eb3e:	f7f1 fc03 	bl	8000348 <__aeabi_dsub>
 800eb42:	4606      	mov	r6, r0
 800eb44:	460f      	mov	r7, r1
 800eb46:	e036      	b.n	800ebb6 <__kernel_rem_pio2+0x26e>
 800eb48:	4b4e      	ldr	r3, [pc, #312]	; (800ec84 <__kernel_rem_pio2+0x33c>)
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	4630      	mov	r0, r6
 800eb4e:	4639      	mov	r1, r7
 800eb50:	f7f1 fdb2 	bl	80006b8 <__aeabi_dmul>
 800eb54:	f7f2 f860 	bl	8000c18 <__aeabi_d2iz>
 800eb58:	f7f1 fd44 	bl	80005e4 <__aeabi_i2d>
 800eb5c:	4b4a      	ldr	r3, [pc, #296]	; (800ec88 <__kernel_rem_pio2+0x340>)
 800eb5e:	2200      	movs	r2, #0
 800eb60:	4680      	mov	r8, r0
 800eb62:	4689      	mov	r9, r1
 800eb64:	f7f1 fda8 	bl	80006b8 <__aeabi_dmul>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	4630      	mov	r0, r6
 800eb6e:	4639      	mov	r1, r7
 800eb70:	f7f1 fbea 	bl	8000348 <__aeabi_dsub>
 800eb74:	f7f2 f850 	bl	8000c18 <__aeabi_d2iz>
 800eb78:	9b02      	ldr	r3, [sp, #8]
 800eb7a:	f843 0b04 	str.w	r0, [r3], #4
 800eb7e:	3d01      	subs	r5, #1
 800eb80:	9302      	str	r3, [sp, #8]
 800eb82:	ab70      	add	r3, sp, #448	; 0x1c0
 800eb84:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800eb88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb8c:	4640      	mov	r0, r8
 800eb8e:	4649      	mov	r1, r9
 800eb90:	f7f1 fbdc 	bl	800034c <__adddf3>
 800eb94:	4606      	mov	r6, r0
 800eb96:	460f      	mov	r7, r1
 800eb98:	e75b      	b.n	800ea52 <__kernel_rem_pio2+0x10a>
 800eb9a:	d105      	bne.n	800eba8 <__kernel_rem_pio2+0x260>
 800eb9c:	1e63      	subs	r3, r4, #1
 800eb9e:	aa0c      	add	r2, sp, #48	; 0x30
 800eba0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800eba4:	15c3      	asrs	r3, r0, #23
 800eba6:	e79b      	b.n	800eae0 <__kernel_rem_pio2+0x198>
 800eba8:	4b38      	ldr	r3, [pc, #224]	; (800ec8c <__kernel_rem_pio2+0x344>)
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f7f2 f80a 	bl	8000bc4 <__aeabi_dcmpge>
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	d139      	bne.n	800ec28 <__kernel_rem_pio2+0x2e0>
 800ebb4:	9002      	str	r0, [sp, #8]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	2300      	movs	r3, #0
 800ebba:	4630      	mov	r0, r6
 800ebbc:	4639      	mov	r1, r7
 800ebbe:	f7f1 ffe3 	bl	8000b88 <__aeabi_dcmpeq>
 800ebc2:	2800      	cmp	r0, #0
 800ebc4:	f000 80b4 	beq.w	800ed30 <__kernel_rem_pio2+0x3e8>
 800ebc8:	f104 3bff 	add.w	fp, r4, #4294967295
 800ebcc:	465b      	mov	r3, fp
 800ebce:	2200      	movs	r2, #0
 800ebd0:	9904      	ldr	r1, [sp, #16]
 800ebd2:	428b      	cmp	r3, r1
 800ebd4:	da65      	bge.n	800eca2 <__kernel_rem_pio2+0x35a>
 800ebd6:	2a00      	cmp	r2, #0
 800ebd8:	d07b      	beq.n	800ecd2 <__kernel_rem_pio2+0x38a>
 800ebda:	ab0c      	add	r3, sp, #48	; 0x30
 800ebdc:	f1aa 0a18 	sub.w	sl, sl, #24
 800ebe0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	f000 80a0 	beq.w	800ed2a <__kernel_rem_pio2+0x3e2>
 800ebea:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800ec70 <__kernel_rem_pio2+0x328>
 800ebee:	4650      	mov	r0, sl
 800ebf0:	f000 fcd6 	bl	800f5a0 <scalbn>
 800ebf4:	4f23      	ldr	r7, [pc, #140]	; (800ec84 <__kernel_rem_pio2+0x33c>)
 800ebf6:	ec55 4b10 	vmov	r4, r5, d0
 800ebfa:	46d8      	mov	r8, fp
 800ebfc:	2600      	movs	r6, #0
 800ebfe:	f1b8 0f00 	cmp.w	r8, #0
 800ec02:	f280 80cf 	bge.w	800eda4 <__kernel_rem_pio2+0x45c>
 800ec06:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800ec68 <__kernel_rem_pio2+0x320>
 800ec0a:	465f      	mov	r7, fp
 800ec0c:	f04f 0800 	mov.w	r8, #0
 800ec10:	2f00      	cmp	r7, #0
 800ec12:	f2c0 80fd 	blt.w	800ee10 <__kernel_rem_pio2+0x4c8>
 800ec16:	ab70      	add	r3, sp, #448	; 0x1c0
 800ec18:	f8df a074 	ldr.w	sl, [pc, #116]	; 800ec90 <__kernel_rem_pio2+0x348>
 800ec1c:	ec55 4b18 	vmov	r4, r5, d8
 800ec20:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800ec24:	2600      	movs	r6, #0
 800ec26:	e0e5      	b.n	800edf4 <__kernel_rem_pio2+0x4ac>
 800ec28:	2302      	movs	r3, #2
 800ec2a:	9302      	str	r3, [sp, #8]
 800ec2c:	e75c      	b.n	800eae8 <__kernel_rem_pio2+0x1a0>
 800ec2e:	f8db 3000 	ldr.w	r3, [fp]
 800ec32:	b955      	cbnz	r5, 800ec4a <__kernel_rem_pio2+0x302>
 800ec34:	b123      	cbz	r3, 800ec40 <__kernel_rem_pio2+0x2f8>
 800ec36:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ec3a:	f8cb 3000 	str.w	r3, [fp]
 800ec3e:	2301      	movs	r3, #1
 800ec40:	3201      	adds	r2, #1
 800ec42:	f10b 0b04 	add.w	fp, fp, #4
 800ec46:	461d      	mov	r5, r3
 800ec48:	e755      	b.n	800eaf6 <__kernel_rem_pio2+0x1ae>
 800ec4a:	1acb      	subs	r3, r1, r3
 800ec4c:	f8cb 3000 	str.w	r3, [fp]
 800ec50:	462b      	mov	r3, r5
 800ec52:	e7f5      	b.n	800ec40 <__kernel_rem_pio2+0x2f8>
 800ec54:	1e62      	subs	r2, r4, #1
 800ec56:	ab0c      	add	r3, sp, #48	; 0x30
 800ec58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec5c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ec60:	a90c      	add	r1, sp, #48	; 0x30
 800ec62:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ec66:	e754      	b.n	800eb12 <__kernel_rem_pio2+0x1ca>
	...
 800ec74:	3ff00000 	.word	0x3ff00000
 800ec78:	080234f0 	.word	0x080234f0
 800ec7c:	40200000 	.word	0x40200000
 800ec80:	3ff00000 	.word	0x3ff00000
 800ec84:	3e700000 	.word	0x3e700000
 800ec88:	41700000 	.word	0x41700000
 800ec8c:	3fe00000 	.word	0x3fe00000
 800ec90:	080234b0 	.word	0x080234b0
 800ec94:	1e62      	subs	r2, r4, #1
 800ec96:	ab0c      	add	r3, sp, #48	; 0x30
 800ec98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec9c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800eca0:	e7de      	b.n	800ec60 <__kernel_rem_pio2+0x318>
 800eca2:	a90c      	add	r1, sp, #48	; 0x30
 800eca4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800eca8:	3b01      	subs	r3, #1
 800ecaa:	430a      	orrs	r2, r1
 800ecac:	e790      	b.n	800ebd0 <__kernel_rem_pio2+0x288>
 800ecae:	3301      	adds	r3, #1
 800ecb0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ecb4:	2900      	cmp	r1, #0
 800ecb6:	d0fa      	beq.n	800ecae <__kernel_rem_pio2+0x366>
 800ecb8:	9a08      	ldr	r2, [sp, #32]
 800ecba:	18e3      	adds	r3, r4, r3
 800ecbc:	18a6      	adds	r6, r4, r2
 800ecbe:	aa20      	add	r2, sp, #128	; 0x80
 800ecc0:	1c65      	adds	r5, r4, #1
 800ecc2:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ecc6:	9302      	str	r3, [sp, #8]
 800ecc8:	9b02      	ldr	r3, [sp, #8]
 800ecca:	42ab      	cmp	r3, r5
 800eccc:	da04      	bge.n	800ecd8 <__kernel_rem_pio2+0x390>
 800ecce:	461c      	mov	r4, r3
 800ecd0:	e6b5      	b.n	800ea3e <__kernel_rem_pio2+0xf6>
 800ecd2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ecd4:	2301      	movs	r3, #1
 800ecd6:	e7eb      	b.n	800ecb0 <__kernel_rem_pio2+0x368>
 800ecd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ecde:	f7f1 fc81 	bl	80005e4 <__aeabi_i2d>
 800ece2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ece6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ece8:	46b3      	mov	fp, r6
 800ecea:	461c      	mov	r4, r3
 800ecec:	2700      	movs	r7, #0
 800ecee:	f04f 0800 	mov.w	r8, #0
 800ecf2:	f04f 0900 	mov.w	r9, #0
 800ecf6:	9b06      	ldr	r3, [sp, #24]
 800ecf8:	429f      	cmp	r7, r3
 800ecfa:	dd06      	ble.n	800ed0a <__kernel_rem_pio2+0x3c2>
 800ecfc:	ab70      	add	r3, sp, #448	; 0x1c0
 800ecfe:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ed02:	e9c3 8900 	strd	r8, r9, [r3]
 800ed06:	3501      	adds	r5, #1
 800ed08:	e7de      	b.n	800ecc8 <__kernel_rem_pio2+0x380>
 800ed0a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ed0e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ed12:	f7f1 fcd1 	bl	80006b8 <__aeabi_dmul>
 800ed16:	4602      	mov	r2, r0
 800ed18:	460b      	mov	r3, r1
 800ed1a:	4640      	mov	r0, r8
 800ed1c:	4649      	mov	r1, r9
 800ed1e:	f7f1 fb15 	bl	800034c <__adddf3>
 800ed22:	3701      	adds	r7, #1
 800ed24:	4680      	mov	r8, r0
 800ed26:	4689      	mov	r9, r1
 800ed28:	e7e5      	b.n	800ecf6 <__kernel_rem_pio2+0x3ae>
 800ed2a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ed2e:	e754      	b.n	800ebda <__kernel_rem_pio2+0x292>
 800ed30:	ec47 6b10 	vmov	d0, r6, r7
 800ed34:	f1ca 0000 	rsb	r0, sl, #0
 800ed38:	f000 fc32 	bl	800f5a0 <scalbn>
 800ed3c:	ec57 6b10 	vmov	r6, r7, d0
 800ed40:	4b9f      	ldr	r3, [pc, #636]	; (800efc0 <__kernel_rem_pio2+0x678>)
 800ed42:	ee10 0a10 	vmov	r0, s0
 800ed46:	2200      	movs	r2, #0
 800ed48:	4639      	mov	r1, r7
 800ed4a:	f7f1 ff3b 	bl	8000bc4 <__aeabi_dcmpge>
 800ed4e:	b300      	cbz	r0, 800ed92 <__kernel_rem_pio2+0x44a>
 800ed50:	4b9c      	ldr	r3, [pc, #624]	; (800efc4 <__kernel_rem_pio2+0x67c>)
 800ed52:	2200      	movs	r2, #0
 800ed54:	4630      	mov	r0, r6
 800ed56:	4639      	mov	r1, r7
 800ed58:	f7f1 fcae 	bl	80006b8 <__aeabi_dmul>
 800ed5c:	f7f1 ff5c 	bl	8000c18 <__aeabi_d2iz>
 800ed60:	4605      	mov	r5, r0
 800ed62:	f7f1 fc3f 	bl	80005e4 <__aeabi_i2d>
 800ed66:	4b96      	ldr	r3, [pc, #600]	; (800efc0 <__kernel_rem_pio2+0x678>)
 800ed68:	2200      	movs	r2, #0
 800ed6a:	f7f1 fca5 	bl	80006b8 <__aeabi_dmul>
 800ed6e:	460b      	mov	r3, r1
 800ed70:	4602      	mov	r2, r0
 800ed72:	4639      	mov	r1, r7
 800ed74:	4630      	mov	r0, r6
 800ed76:	f7f1 fae7 	bl	8000348 <__aeabi_dsub>
 800ed7a:	f7f1 ff4d 	bl	8000c18 <__aeabi_d2iz>
 800ed7e:	f104 0b01 	add.w	fp, r4, #1
 800ed82:	ab0c      	add	r3, sp, #48	; 0x30
 800ed84:	f10a 0a18 	add.w	sl, sl, #24
 800ed88:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ed8c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800ed90:	e72b      	b.n	800ebea <__kernel_rem_pio2+0x2a2>
 800ed92:	4630      	mov	r0, r6
 800ed94:	4639      	mov	r1, r7
 800ed96:	f7f1 ff3f 	bl	8000c18 <__aeabi_d2iz>
 800ed9a:	ab0c      	add	r3, sp, #48	; 0x30
 800ed9c:	46a3      	mov	fp, r4
 800ed9e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800eda2:	e722      	b.n	800ebea <__kernel_rem_pio2+0x2a2>
 800eda4:	ab70      	add	r3, sp, #448	; 0x1c0
 800eda6:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800edaa:	ab0c      	add	r3, sp, #48	; 0x30
 800edac:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800edb0:	f7f1 fc18 	bl	80005e4 <__aeabi_i2d>
 800edb4:	4622      	mov	r2, r4
 800edb6:	462b      	mov	r3, r5
 800edb8:	f7f1 fc7e 	bl	80006b8 <__aeabi_dmul>
 800edbc:	4632      	mov	r2, r6
 800edbe:	e9c9 0100 	strd	r0, r1, [r9]
 800edc2:	463b      	mov	r3, r7
 800edc4:	4620      	mov	r0, r4
 800edc6:	4629      	mov	r1, r5
 800edc8:	f7f1 fc76 	bl	80006b8 <__aeabi_dmul>
 800edcc:	f108 38ff 	add.w	r8, r8, #4294967295
 800edd0:	4604      	mov	r4, r0
 800edd2:	460d      	mov	r5, r1
 800edd4:	e713      	b.n	800ebfe <__kernel_rem_pio2+0x2b6>
 800edd6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800edda:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800edde:	f7f1 fc6b 	bl	80006b8 <__aeabi_dmul>
 800ede2:	4602      	mov	r2, r0
 800ede4:	460b      	mov	r3, r1
 800ede6:	4620      	mov	r0, r4
 800ede8:	4629      	mov	r1, r5
 800edea:	f7f1 faaf 	bl	800034c <__adddf3>
 800edee:	3601      	adds	r6, #1
 800edf0:	4604      	mov	r4, r0
 800edf2:	460d      	mov	r5, r1
 800edf4:	9b04      	ldr	r3, [sp, #16]
 800edf6:	429e      	cmp	r6, r3
 800edf8:	dc01      	bgt.n	800edfe <__kernel_rem_pio2+0x4b6>
 800edfa:	45b0      	cmp	r8, r6
 800edfc:	daeb      	bge.n	800edd6 <__kernel_rem_pio2+0x48e>
 800edfe:	ab48      	add	r3, sp, #288	; 0x120
 800ee00:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ee04:	e9c3 4500 	strd	r4, r5, [r3]
 800ee08:	3f01      	subs	r7, #1
 800ee0a:	f108 0801 	add.w	r8, r8, #1
 800ee0e:	e6ff      	b.n	800ec10 <__kernel_rem_pio2+0x2c8>
 800ee10:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ee12:	2b02      	cmp	r3, #2
 800ee14:	dc0b      	bgt.n	800ee2e <__kernel_rem_pio2+0x4e6>
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	dc6e      	bgt.n	800eef8 <__kernel_rem_pio2+0x5b0>
 800ee1a:	d045      	beq.n	800eea8 <__kernel_rem_pio2+0x560>
 800ee1c:	9b07      	ldr	r3, [sp, #28]
 800ee1e:	f003 0007 	and.w	r0, r3, #7
 800ee22:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800ee26:	ecbd 8b02 	vpop	{d8}
 800ee2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee2e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800ee30:	2b03      	cmp	r3, #3
 800ee32:	d1f3      	bne.n	800ee1c <__kernel_rem_pio2+0x4d4>
 800ee34:	ab48      	add	r3, sp, #288	; 0x120
 800ee36:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800ee3a:	46d0      	mov	r8, sl
 800ee3c:	46d9      	mov	r9, fp
 800ee3e:	f1b9 0f00 	cmp.w	r9, #0
 800ee42:	f1a8 0808 	sub.w	r8, r8, #8
 800ee46:	dc64      	bgt.n	800ef12 <__kernel_rem_pio2+0x5ca>
 800ee48:	465c      	mov	r4, fp
 800ee4a:	2c01      	cmp	r4, #1
 800ee4c:	f1aa 0a08 	sub.w	sl, sl, #8
 800ee50:	dc7e      	bgt.n	800ef50 <__kernel_rem_pio2+0x608>
 800ee52:	2000      	movs	r0, #0
 800ee54:	2100      	movs	r1, #0
 800ee56:	f1bb 0f01 	cmp.w	fp, #1
 800ee5a:	f300 8097 	bgt.w	800ef8c <__kernel_rem_pio2+0x644>
 800ee5e:	9b02      	ldr	r3, [sp, #8]
 800ee60:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800ee64:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	f040 8099 	bne.w	800efa0 <__kernel_rem_pio2+0x658>
 800ee6e:	9b01      	ldr	r3, [sp, #4]
 800ee70:	e9c3 5600 	strd	r5, r6, [r3]
 800ee74:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ee78:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ee7c:	e7ce      	b.n	800ee1c <__kernel_rem_pio2+0x4d4>
 800ee7e:	ab48      	add	r3, sp, #288	; 0x120
 800ee80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ee84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee88:	f7f1 fa60 	bl	800034c <__adddf3>
 800ee8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ee90:	f1bb 0f00 	cmp.w	fp, #0
 800ee94:	daf3      	bge.n	800ee7e <__kernel_rem_pio2+0x536>
 800ee96:	9b02      	ldr	r3, [sp, #8]
 800ee98:	b113      	cbz	r3, 800eea0 <__kernel_rem_pio2+0x558>
 800ee9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee9e:	4619      	mov	r1, r3
 800eea0:	9b01      	ldr	r3, [sp, #4]
 800eea2:	e9c3 0100 	strd	r0, r1, [r3]
 800eea6:	e7b9      	b.n	800ee1c <__kernel_rem_pio2+0x4d4>
 800eea8:	2000      	movs	r0, #0
 800eeaa:	2100      	movs	r1, #0
 800eeac:	e7f0      	b.n	800ee90 <__kernel_rem_pio2+0x548>
 800eeae:	ab48      	add	r3, sp, #288	; 0x120
 800eeb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eeb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeb8:	f7f1 fa48 	bl	800034c <__adddf3>
 800eebc:	3c01      	subs	r4, #1
 800eebe:	2c00      	cmp	r4, #0
 800eec0:	daf5      	bge.n	800eeae <__kernel_rem_pio2+0x566>
 800eec2:	9b02      	ldr	r3, [sp, #8]
 800eec4:	b1e3      	cbz	r3, 800ef00 <__kernel_rem_pio2+0x5b8>
 800eec6:	4602      	mov	r2, r0
 800eec8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eecc:	9c01      	ldr	r4, [sp, #4]
 800eece:	e9c4 2300 	strd	r2, r3, [r4]
 800eed2:	4602      	mov	r2, r0
 800eed4:	460b      	mov	r3, r1
 800eed6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800eeda:	f7f1 fa35 	bl	8000348 <__aeabi_dsub>
 800eede:	ad4a      	add	r5, sp, #296	; 0x128
 800eee0:	2401      	movs	r4, #1
 800eee2:	45a3      	cmp	fp, r4
 800eee4:	da0f      	bge.n	800ef06 <__kernel_rem_pio2+0x5be>
 800eee6:	9b02      	ldr	r3, [sp, #8]
 800eee8:	b113      	cbz	r3, 800eef0 <__kernel_rem_pio2+0x5a8>
 800eeea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eeee:	4619      	mov	r1, r3
 800eef0:	9b01      	ldr	r3, [sp, #4]
 800eef2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800eef6:	e791      	b.n	800ee1c <__kernel_rem_pio2+0x4d4>
 800eef8:	465c      	mov	r4, fp
 800eefa:	2000      	movs	r0, #0
 800eefc:	2100      	movs	r1, #0
 800eefe:	e7de      	b.n	800eebe <__kernel_rem_pio2+0x576>
 800ef00:	4602      	mov	r2, r0
 800ef02:	460b      	mov	r3, r1
 800ef04:	e7e2      	b.n	800eecc <__kernel_rem_pio2+0x584>
 800ef06:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800ef0a:	f7f1 fa1f 	bl	800034c <__adddf3>
 800ef0e:	3401      	adds	r4, #1
 800ef10:	e7e7      	b.n	800eee2 <__kernel_rem_pio2+0x59a>
 800ef12:	e9d8 4500 	ldrd	r4, r5, [r8]
 800ef16:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	4632      	mov	r2, r6
 800ef1e:	463b      	mov	r3, r7
 800ef20:	4629      	mov	r1, r5
 800ef22:	f7f1 fa13 	bl	800034c <__adddf3>
 800ef26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ef2a:	4602      	mov	r2, r0
 800ef2c:	460b      	mov	r3, r1
 800ef2e:	4620      	mov	r0, r4
 800ef30:	4629      	mov	r1, r5
 800ef32:	f7f1 fa09 	bl	8000348 <__aeabi_dsub>
 800ef36:	4632      	mov	r2, r6
 800ef38:	463b      	mov	r3, r7
 800ef3a:	f7f1 fa07 	bl	800034c <__adddf3>
 800ef3e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ef42:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800ef46:	ed88 7b00 	vstr	d7, [r8]
 800ef4a:	f109 39ff 	add.w	r9, r9, #4294967295
 800ef4e:	e776      	b.n	800ee3e <__kernel_rem_pio2+0x4f6>
 800ef50:	e9da 8900 	ldrd	r8, r9, [sl]
 800ef54:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ef58:	4640      	mov	r0, r8
 800ef5a:	4632      	mov	r2, r6
 800ef5c:	463b      	mov	r3, r7
 800ef5e:	4649      	mov	r1, r9
 800ef60:	f7f1 f9f4 	bl	800034c <__adddf3>
 800ef64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ef68:	4602      	mov	r2, r0
 800ef6a:	460b      	mov	r3, r1
 800ef6c:	4640      	mov	r0, r8
 800ef6e:	4649      	mov	r1, r9
 800ef70:	f7f1 f9ea 	bl	8000348 <__aeabi_dsub>
 800ef74:	4632      	mov	r2, r6
 800ef76:	463b      	mov	r3, r7
 800ef78:	f7f1 f9e8 	bl	800034c <__adddf3>
 800ef7c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ef80:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ef84:	ed8a 7b00 	vstr	d7, [sl]
 800ef88:	3c01      	subs	r4, #1
 800ef8a:	e75e      	b.n	800ee4a <__kernel_rem_pio2+0x502>
 800ef8c:	ab48      	add	r3, sp, #288	; 0x120
 800ef8e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ef92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef96:	f7f1 f9d9 	bl	800034c <__adddf3>
 800ef9a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ef9e:	e75a      	b.n	800ee56 <__kernel_rem_pio2+0x50e>
 800efa0:	9b01      	ldr	r3, [sp, #4]
 800efa2:	9a01      	ldr	r2, [sp, #4]
 800efa4:	601d      	str	r5, [r3, #0]
 800efa6:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800efaa:	605c      	str	r4, [r3, #4]
 800efac:	609f      	str	r7, [r3, #8]
 800efae:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800efb2:	60d3      	str	r3, [r2, #12]
 800efb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efb8:	6110      	str	r0, [r2, #16]
 800efba:	6153      	str	r3, [r2, #20]
 800efbc:	e72e      	b.n	800ee1c <__kernel_rem_pio2+0x4d4>
 800efbe:	bf00      	nop
 800efc0:	41700000 	.word	0x41700000
 800efc4:	3e700000 	.word	0x3e700000

0800efc8 <__kernel_sin>:
 800efc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efcc:	ed2d 8b04 	vpush	{d8-d9}
 800efd0:	eeb0 8a41 	vmov.f32	s16, s2
 800efd4:	eef0 8a61 	vmov.f32	s17, s3
 800efd8:	ec55 4b10 	vmov	r4, r5, d0
 800efdc:	b083      	sub	sp, #12
 800efde:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800efe2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800efe6:	9001      	str	r0, [sp, #4]
 800efe8:	da06      	bge.n	800eff8 <__kernel_sin+0x30>
 800efea:	ee10 0a10 	vmov	r0, s0
 800efee:	4629      	mov	r1, r5
 800eff0:	f7f1 fe12 	bl	8000c18 <__aeabi_d2iz>
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d051      	beq.n	800f09c <__kernel_sin+0xd4>
 800eff8:	4622      	mov	r2, r4
 800effa:	462b      	mov	r3, r5
 800effc:	4620      	mov	r0, r4
 800effe:	4629      	mov	r1, r5
 800f000:	f7f1 fb5a 	bl	80006b8 <__aeabi_dmul>
 800f004:	4682      	mov	sl, r0
 800f006:	468b      	mov	fp, r1
 800f008:	4602      	mov	r2, r0
 800f00a:	460b      	mov	r3, r1
 800f00c:	4620      	mov	r0, r4
 800f00e:	4629      	mov	r1, r5
 800f010:	f7f1 fb52 	bl	80006b8 <__aeabi_dmul>
 800f014:	a341      	add	r3, pc, #260	; (adr r3, 800f11c <__kernel_sin+0x154>)
 800f016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f01a:	4680      	mov	r8, r0
 800f01c:	4689      	mov	r9, r1
 800f01e:	4650      	mov	r0, sl
 800f020:	4659      	mov	r1, fp
 800f022:	f7f1 fb49 	bl	80006b8 <__aeabi_dmul>
 800f026:	a33f      	add	r3, pc, #252	; (adr r3, 800f124 <__kernel_sin+0x15c>)
 800f028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02c:	f7f1 f98c 	bl	8000348 <__aeabi_dsub>
 800f030:	4652      	mov	r2, sl
 800f032:	465b      	mov	r3, fp
 800f034:	f7f1 fb40 	bl	80006b8 <__aeabi_dmul>
 800f038:	a33c      	add	r3, pc, #240	; (adr r3, 800f12c <__kernel_sin+0x164>)
 800f03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03e:	f7f1 f985 	bl	800034c <__adddf3>
 800f042:	4652      	mov	r2, sl
 800f044:	465b      	mov	r3, fp
 800f046:	f7f1 fb37 	bl	80006b8 <__aeabi_dmul>
 800f04a:	a33a      	add	r3, pc, #232	; (adr r3, 800f134 <__kernel_sin+0x16c>)
 800f04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f050:	f7f1 f97a 	bl	8000348 <__aeabi_dsub>
 800f054:	4652      	mov	r2, sl
 800f056:	465b      	mov	r3, fp
 800f058:	f7f1 fb2e 	bl	80006b8 <__aeabi_dmul>
 800f05c:	a337      	add	r3, pc, #220	; (adr r3, 800f13c <__kernel_sin+0x174>)
 800f05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f062:	f7f1 f973 	bl	800034c <__adddf3>
 800f066:	9b01      	ldr	r3, [sp, #4]
 800f068:	4606      	mov	r6, r0
 800f06a:	460f      	mov	r7, r1
 800f06c:	b9eb      	cbnz	r3, 800f0aa <__kernel_sin+0xe2>
 800f06e:	4602      	mov	r2, r0
 800f070:	460b      	mov	r3, r1
 800f072:	4650      	mov	r0, sl
 800f074:	4659      	mov	r1, fp
 800f076:	f7f1 fb1f 	bl	80006b8 <__aeabi_dmul>
 800f07a:	a325      	add	r3, pc, #148	; (adr r3, 800f110 <__kernel_sin+0x148>)
 800f07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f080:	f7f1 f962 	bl	8000348 <__aeabi_dsub>
 800f084:	4642      	mov	r2, r8
 800f086:	464b      	mov	r3, r9
 800f088:	f7f1 fb16 	bl	80006b8 <__aeabi_dmul>
 800f08c:	4602      	mov	r2, r0
 800f08e:	460b      	mov	r3, r1
 800f090:	4620      	mov	r0, r4
 800f092:	4629      	mov	r1, r5
 800f094:	f7f1 f95a 	bl	800034c <__adddf3>
 800f098:	4604      	mov	r4, r0
 800f09a:	460d      	mov	r5, r1
 800f09c:	ec45 4b10 	vmov	d0, r4, r5
 800f0a0:	b003      	add	sp, #12
 800f0a2:	ecbd 8b04 	vpop	{d8-d9}
 800f0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0aa:	4b1b      	ldr	r3, [pc, #108]	; (800f118 <__kernel_sin+0x150>)
 800f0ac:	ec51 0b18 	vmov	r0, r1, d8
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	f7f1 fb01 	bl	80006b8 <__aeabi_dmul>
 800f0b6:	4632      	mov	r2, r6
 800f0b8:	ec41 0b19 	vmov	d9, r0, r1
 800f0bc:	463b      	mov	r3, r7
 800f0be:	4640      	mov	r0, r8
 800f0c0:	4649      	mov	r1, r9
 800f0c2:	f7f1 faf9 	bl	80006b8 <__aeabi_dmul>
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	ec51 0b19 	vmov	r0, r1, d9
 800f0ce:	f7f1 f93b 	bl	8000348 <__aeabi_dsub>
 800f0d2:	4652      	mov	r2, sl
 800f0d4:	465b      	mov	r3, fp
 800f0d6:	f7f1 faef 	bl	80006b8 <__aeabi_dmul>
 800f0da:	ec53 2b18 	vmov	r2, r3, d8
 800f0de:	f7f1 f933 	bl	8000348 <__aeabi_dsub>
 800f0e2:	a30b      	add	r3, pc, #44	; (adr r3, 800f110 <__kernel_sin+0x148>)
 800f0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e8:	4606      	mov	r6, r0
 800f0ea:	460f      	mov	r7, r1
 800f0ec:	4640      	mov	r0, r8
 800f0ee:	4649      	mov	r1, r9
 800f0f0:	f7f1 fae2 	bl	80006b8 <__aeabi_dmul>
 800f0f4:	4602      	mov	r2, r0
 800f0f6:	460b      	mov	r3, r1
 800f0f8:	4630      	mov	r0, r6
 800f0fa:	4639      	mov	r1, r7
 800f0fc:	f7f1 f926 	bl	800034c <__adddf3>
 800f100:	4602      	mov	r2, r0
 800f102:	460b      	mov	r3, r1
 800f104:	4620      	mov	r0, r4
 800f106:	4629      	mov	r1, r5
 800f108:	f7f1 f91e 	bl	8000348 <__aeabi_dsub>
 800f10c:	e7c4      	b.n	800f098 <__kernel_sin+0xd0>
 800f10e:	bf00      	nop
 800f110:	55555549 	.word	0x55555549
 800f114:	3fc55555 	.word	0x3fc55555
 800f118:	3fe00000 	.word	0x3fe00000
 800f11c:	5acfd57c 	.word	0x5acfd57c
 800f120:	3de5d93a 	.word	0x3de5d93a
 800f124:	8a2b9ceb 	.word	0x8a2b9ceb
 800f128:	3e5ae5e6 	.word	0x3e5ae5e6
 800f12c:	57b1fe7d 	.word	0x57b1fe7d
 800f130:	3ec71de3 	.word	0x3ec71de3
 800f134:	19c161d5 	.word	0x19c161d5
 800f138:	3f2a01a0 	.word	0x3f2a01a0
 800f13c:	1110f8a6 	.word	0x1110f8a6
 800f140:	3f811111 	.word	0x3f811111
 800f144:	00000000 	.word	0x00000000

0800f148 <atan>:
 800f148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f14c:	ec55 4b10 	vmov	r4, r5, d0
 800f150:	4bc3      	ldr	r3, [pc, #780]	; (800f460 <atan+0x318>)
 800f152:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f156:	429e      	cmp	r6, r3
 800f158:	46ab      	mov	fp, r5
 800f15a:	dd18      	ble.n	800f18e <atan+0x46>
 800f15c:	4bc1      	ldr	r3, [pc, #772]	; (800f464 <atan+0x31c>)
 800f15e:	429e      	cmp	r6, r3
 800f160:	dc01      	bgt.n	800f166 <atan+0x1e>
 800f162:	d109      	bne.n	800f178 <atan+0x30>
 800f164:	b144      	cbz	r4, 800f178 <atan+0x30>
 800f166:	4622      	mov	r2, r4
 800f168:	462b      	mov	r3, r5
 800f16a:	4620      	mov	r0, r4
 800f16c:	4629      	mov	r1, r5
 800f16e:	f7f1 f8ed 	bl	800034c <__adddf3>
 800f172:	4604      	mov	r4, r0
 800f174:	460d      	mov	r5, r1
 800f176:	e006      	b.n	800f186 <atan+0x3e>
 800f178:	f1bb 0f00 	cmp.w	fp, #0
 800f17c:	f300 8131 	bgt.w	800f3e2 <atan+0x29a>
 800f180:	a59b      	add	r5, pc, #620	; (adr r5, 800f3f0 <atan+0x2a8>)
 800f182:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f186:	ec45 4b10 	vmov	d0, r4, r5
 800f18a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f18e:	4bb6      	ldr	r3, [pc, #728]	; (800f468 <atan+0x320>)
 800f190:	429e      	cmp	r6, r3
 800f192:	dc14      	bgt.n	800f1be <atan+0x76>
 800f194:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800f198:	429e      	cmp	r6, r3
 800f19a:	dc0d      	bgt.n	800f1b8 <atan+0x70>
 800f19c:	a396      	add	r3, pc, #600	; (adr r3, 800f3f8 <atan+0x2b0>)
 800f19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1a2:	ee10 0a10 	vmov	r0, s0
 800f1a6:	4629      	mov	r1, r5
 800f1a8:	f7f1 f8d0 	bl	800034c <__adddf3>
 800f1ac:	4baf      	ldr	r3, [pc, #700]	; (800f46c <atan+0x324>)
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	f7f1 fd12 	bl	8000bd8 <__aeabi_dcmpgt>
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	d1e6      	bne.n	800f186 <atan+0x3e>
 800f1b8:	f04f 3aff 	mov.w	sl, #4294967295
 800f1bc:	e02b      	b.n	800f216 <atan+0xce>
 800f1be:	f000 f963 	bl	800f488 <fabs>
 800f1c2:	4bab      	ldr	r3, [pc, #684]	; (800f470 <atan+0x328>)
 800f1c4:	429e      	cmp	r6, r3
 800f1c6:	ec55 4b10 	vmov	r4, r5, d0
 800f1ca:	f300 80bf 	bgt.w	800f34c <atan+0x204>
 800f1ce:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800f1d2:	429e      	cmp	r6, r3
 800f1d4:	f300 80a0 	bgt.w	800f318 <atan+0x1d0>
 800f1d8:	ee10 2a10 	vmov	r2, s0
 800f1dc:	ee10 0a10 	vmov	r0, s0
 800f1e0:	462b      	mov	r3, r5
 800f1e2:	4629      	mov	r1, r5
 800f1e4:	f7f1 f8b2 	bl	800034c <__adddf3>
 800f1e8:	4ba0      	ldr	r3, [pc, #640]	; (800f46c <atan+0x324>)
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	f7f1 f8ac 	bl	8000348 <__aeabi_dsub>
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	4606      	mov	r6, r0
 800f1f4:	460f      	mov	r7, r1
 800f1f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f1fa:	4620      	mov	r0, r4
 800f1fc:	4629      	mov	r1, r5
 800f1fe:	f7f1 f8a5 	bl	800034c <__adddf3>
 800f202:	4602      	mov	r2, r0
 800f204:	460b      	mov	r3, r1
 800f206:	4630      	mov	r0, r6
 800f208:	4639      	mov	r1, r7
 800f20a:	f7f1 fb7f 	bl	800090c <__aeabi_ddiv>
 800f20e:	f04f 0a00 	mov.w	sl, #0
 800f212:	4604      	mov	r4, r0
 800f214:	460d      	mov	r5, r1
 800f216:	4622      	mov	r2, r4
 800f218:	462b      	mov	r3, r5
 800f21a:	4620      	mov	r0, r4
 800f21c:	4629      	mov	r1, r5
 800f21e:	f7f1 fa4b 	bl	80006b8 <__aeabi_dmul>
 800f222:	4602      	mov	r2, r0
 800f224:	460b      	mov	r3, r1
 800f226:	4680      	mov	r8, r0
 800f228:	4689      	mov	r9, r1
 800f22a:	f7f1 fa45 	bl	80006b8 <__aeabi_dmul>
 800f22e:	a374      	add	r3, pc, #464	; (adr r3, 800f400 <atan+0x2b8>)
 800f230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f234:	4606      	mov	r6, r0
 800f236:	460f      	mov	r7, r1
 800f238:	f7f1 fa3e 	bl	80006b8 <__aeabi_dmul>
 800f23c:	a372      	add	r3, pc, #456	; (adr r3, 800f408 <atan+0x2c0>)
 800f23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f242:	f7f1 f883 	bl	800034c <__adddf3>
 800f246:	4632      	mov	r2, r6
 800f248:	463b      	mov	r3, r7
 800f24a:	f7f1 fa35 	bl	80006b8 <__aeabi_dmul>
 800f24e:	a370      	add	r3, pc, #448	; (adr r3, 800f410 <atan+0x2c8>)
 800f250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f254:	f7f1 f87a 	bl	800034c <__adddf3>
 800f258:	4632      	mov	r2, r6
 800f25a:	463b      	mov	r3, r7
 800f25c:	f7f1 fa2c 	bl	80006b8 <__aeabi_dmul>
 800f260:	a36d      	add	r3, pc, #436	; (adr r3, 800f418 <atan+0x2d0>)
 800f262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f266:	f7f1 f871 	bl	800034c <__adddf3>
 800f26a:	4632      	mov	r2, r6
 800f26c:	463b      	mov	r3, r7
 800f26e:	f7f1 fa23 	bl	80006b8 <__aeabi_dmul>
 800f272:	a36b      	add	r3, pc, #428	; (adr r3, 800f420 <atan+0x2d8>)
 800f274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f278:	f7f1 f868 	bl	800034c <__adddf3>
 800f27c:	4632      	mov	r2, r6
 800f27e:	463b      	mov	r3, r7
 800f280:	f7f1 fa1a 	bl	80006b8 <__aeabi_dmul>
 800f284:	a368      	add	r3, pc, #416	; (adr r3, 800f428 <atan+0x2e0>)
 800f286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28a:	f7f1 f85f 	bl	800034c <__adddf3>
 800f28e:	4642      	mov	r2, r8
 800f290:	464b      	mov	r3, r9
 800f292:	f7f1 fa11 	bl	80006b8 <__aeabi_dmul>
 800f296:	a366      	add	r3, pc, #408	; (adr r3, 800f430 <atan+0x2e8>)
 800f298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29c:	4680      	mov	r8, r0
 800f29e:	4689      	mov	r9, r1
 800f2a0:	4630      	mov	r0, r6
 800f2a2:	4639      	mov	r1, r7
 800f2a4:	f7f1 fa08 	bl	80006b8 <__aeabi_dmul>
 800f2a8:	a363      	add	r3, pc, #396	; (adr r3, 800f438 <atan+0x2f0>)
 800f2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ae:	f7f1 f84b 	bl	8000348 <__aeabi_dsub>
 800f2b2:	4632      	mov	r2, r6
 800f2b4:	463b      	mov	r3, r7
 800f2b6:	f7f1 f9ff 	bl	80006b8 <__aeabi_dmul>
 800f2ba:	a361      	add	r3, pc, #388	; (adr r3, 800f440 <atan+0x2f8>)
 800f2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c0:	f7f1 f842 	bl	8000348 <__aeabi_dsub>
 800f2c4:	4632      	mov	r2, r6
 800f2c6:	463b      	mov	r3, r7
 800f2c8:	f7f1 f9f6 	bl	80006b8 <__aeabi_dmul>
 800f2cc:	a35e      	add	r3, pc, #376	; (adr r3, 800f448 <atan+0x300>)
 800f2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2d2:	f7f1 f839 	bl	8000348 <__aeabi_dsub>
 800f2d6:	4632      	mov	r2, r6
 800f2d8:	463b      	mov	r3, r7
 800f2da:	f7f1 f9ed 	bl	80006b8 <__aeabi_dmul>
 800f2de:	a35c      	add	r3, pc, #368	; (adr r3, 800f450 <atan+0x308>)
 800f2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e4:	f7f1 f830 	bl	8000348 <__aeabi_dsub>
 800f2e8:	4632      	mov	r2, r6
 800f2ea:	463b      	mov	r3, r7
 800f2ec:	f7f1 f9e4 	bl	80006b8 <__aeabi_dmul>
 800f2f0:	4602      	mov	r2, r0
 800f2f2:	460b      	mov	r3, r1
 800f2f4:	4640      	mov	r0, r8
 800f2f6:	4649      	mov	r1, r9
 800f2f8:	f7f1 f828 	bl	800034c <__adddf3>
 800f2fc:	4622      	mov	r2, r4
 800f2fe:	462b      	mov	r3, r5
 800f300:	f7f1 f9da 	bl	80006b8 <__aeabi_dmul>
 800f304:	f1ba 3fff 	cmp.w	sl, #4294967295
 800f308:	4602      	mov	r2, r0
 800f30a:	460b      	mov	r3, r1
 800f30c:	d14b      	bne.n	800f3a6 <atan+0x25e>
 800f30e:	4620      	mov	r0, r4
 800f310:	4629      	mov	r1, r5
 800f312:	f7f1 f819 	bl	8000348 <__aeabi_dsub>
 800f316:	e72c      	b.n	800f172 <atan+0x2a>
 800f318:	ee10 0a10 	vmov	r0, s0
 800f31c:	4b53      	ldr	r3, [pc, #332]	; (800f46c <atan+0x324>)
 800f31e:	2200      	movs	r2, #0
 800f320:	4629      	mov	r1, r5
 800f322:	f7f1 f811 	bl	8000348 <__aeabi_dsub>
 800f326:	4b51      	ldr	r3, [pc, #324]	; (800f46c <atan+0x324>)
 800f328:	4606      	mov	r6, r0
 800f32a:	460f      	mov	r7, r1
 800f32c:	2200      	movs	r2, #0
 800f32e:	4620      	mov	r0, r4
 800f330:	4629      	mov	r1, r5
 800f332:	f7f1 f80b 	bl	800034c <__adddf3>
 800f336:	4602      	mov	r2, r0
 800f338:	460b      	mov	r3, r1
 800f33a:	4630      	mov	r0, r6
 800f33c:	4639      	mov	r1, r7
 800f33e:	f7f1 fae5 	bl	800090c <__aeabi_ddiv>
 800f342:	f04f 0a01 	mov.w	sl, #1
 800f346:	4604      	mov	r4, r0
 800f348:	460d      	mov	r5, r1
 800f34a:	e764      	b.n	800f216 <atan+0xce>
 800f34c:	4b49      	ldr	r3, [pc, #292]	; (800f474 <atan+0x32c>)
 800f34e:	429e      	cmp	r6, r3
 800f350:	da1d      	bge.n	800f38e <atan+0x246>
 800f352:	ee10 0a10 	vmov	r0, s0
 800f356:	4b48      	ldr	r3, [pc, #288]	; (800f478 <atan+0x330>)
 800f358:	2200      	movs	r2, #0
 800f35a:	4629      	mov	r1, r5
 800f35c:	f7f0 fff4 	bl	8000348 <__aeabi_dsub>
 800f360:	4b45      	ldr	r3, [pc, #276]	; (800f478 <atan+0x330>)
 800f362:	4606      	mov	r6, r0
 800f364:	460f      	mov	r7, r1
 800f366:	2200      	movs	r2, #0
 800f368:	4620      	mov	r0, r4
 800f36a:	4629      	mov	r1, r5
 800f36c:	f7f1 f9a4 	bl	80006b8 <__aeabi_dmul>
 800f370:	4b3e      	ldr	r3, [pc, #248]	; (800f46c <atan+0x324>)
 800f372:	2200      	movs	r2, #0
 800f374:	f7f0 ffea 	bl	800034c <__adddf3>
 800f378:	4602      	mov	r2, r0
 800f37a:	460b      	mov	r3, r1
 800f37c:	4630      	mov	r0, r6
 800f37e:	4639      	mov	r1, r7
 800f380:	f7f1 fac4 	bl	800090c <__aeabi_ddiv>
 800f384:	f04f 0a02 	mov.w	sl, #2
 800f388:	4604      	mov	r4, r0
 800f38a:	460d      	mov	r5, r1
 800f38c:	e743      	b.n	800f216 <atan+0xce>
 800f38e:	462b      	mov	r3, r5
 800f390:	ee10 2a10 	vmov	r2, s0
 800f394:	4939      	ldr	r1, [pc, #228]	; (800f47c <atan+0x334>)
 800f396:	2000      	movs	r0, #0
 800f398:	f7f1 fab8 	bl	800090c <__aeabi_ddiv>
 800f39c:	f04f 0a03 	mov.w	sl, #3
 800f3a0:	4604      	mov	r4, r0
 800f3a2:	460d      	mov	r5, r1
 800f3a4:	e737      	b.n	800f216 <atan+0xce>
 800f3a6:	4b36      	ldr	r3, [pc, #216]	; (800f480 <atan+0x338>)
 800f3a8:	4e36      	ldr	r6, [pc, #216]	; (800f484 <atan+0x33c>)
 800f3aa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800f3ae:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800f3b2:	e9da 2300 	ldrd	r2, r3, [sl]
 800f3b6:	f7f0 ffc7 	bl	8000348 <__aeabi_dsub>
 800f3ba:	4622      	mov	r2, r4
 800f3bc:	462b      	mov	r3, r5
 800f3be:	f7f0 ffc3 	bl	8000348 <__aeabi_dsub>
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	460b      	mov	r3, r1
 800f3c6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800f3ca:	f7f0 ffbd 	bl	8000348 <__aeabi_dsub>
 800f3ce:	f1bb 0f00 	cmp.w	fp, #0
 800f3d2:	4604      	mov	r4, r0
 800f3d4:	460d      	mov	r5, r1
 800f3d6:	f6bf aed6 	bge.w	800f186 <atan+0x3e>
 800f3da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f3de:	461d      	mov	r5, r3
 800f3e0:	e6d1      	b.n	800f186 <atan+0x3e>
 800f3e2:	a51d      	add	r5, pc, #116	; (adr r5, 800f458 <atan+0x310>)
 800f3e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800f3e8:	e6cd      	b.n	800f186 <atan+0x3e>
 800f3ea:	bf00      	nop
 800f3ec:	f3af 8000 	nop.w
 800f3f0:	54442d18 	.word	0x54442d18
 800f3f4:	bff921fb 	.word	0xbff921fb
 800f3f8:	8800759c 	.word	0x8800759c
 800f3fc:	7e37e43c 	.word	0x7e37e43c
 800f400:	e322da11 	.word	0xe322da11
 800f404:	3f90ad3a 	.word	0x3f90ad3a
 800f408:	24760deb 	.word	0x24760deb
 800f40c:	3fa97b4b 	.word	0x3fa97b4b
 800f410:	a0d03d51 	.word	0xa0d03d51
 800f414:	3fb10d66 	.word	0x3fb10d66
 800f418:	c54c206e 	.word	0xc54c206e
 800f41c:	3fb745cd 	.word	0x3fb745cd
 800f420:	920083ff 	.word	0x920083ff
 800f424:	3fc24924 	.word	0x3fc24924
 800f428:	5555550d 	.word	0x5555550d
 800f42c:	3fd55555 	.word	0x3fd55555
 800f430:	2c6a6c2f 	.word	0x2c6a6c2f
 800f434:	bfa2b444 	.word	0xbfa2b444
 800f438:	52defd9a 	.word	0x52defd9a
 800f43c:	3fadde2d 	.word	0x3fadde2d
 800f440:	af749a6d 	.word	0xaf749a6d
 800f444:	3fb3b0f2 	.word	0x3fb3b0f2
 800f448:	fe231671 	.word	0xfe231671
 800f44c:	3fbc71c6 	.word	0x3fbc71c6
 800f450:	9998ebc4 	.word	0x9998ebc4
 800f454:	3fc99999 	.word	0x3fc99999
 800f458:	54442d18 	.word	0x54442d18
 800f45c:	3ff921fb 	.word	0x3ff921fb
 800f460:	440fffff 	.word	0x440fffff
 800f464:	7ff00000 	.word	0x7ff00000
 800f468:	3fdbffff 	.word	0x3fdbffff
 800f46c:	3ff00000 	.word	0x3ff00000
 800f470:	3ff2ffff 	.word	0x3ff2ffff
 800f474:	40038000 	.word	0x40038000
 800f478:	3ff80000 	.word	0x3ff80000
 800f47c:	bff00000 	.word	0xbff00000
 800f480:	08023520 	.word	0x08023520
 800f484:	08023500 	.word	0x08023500

0800f488 <fabs>:
 800f488:	ec51 0b10 	vmov	r0, r1, d0
 800f48c:	ee10 2a10 	vmov	r2, s0
 800f490:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f494:	ec43 2b10 	vmov	d0, r2, r3
 800f498:	4770      	bx	lr
 800f49a:	0000      	movs	r0, r0
 800f49c:	0000      	movs	r0, r0
	...

0800f4a0 <floor>:
 800f4a0:	ec51 0b10 	vmov	r0, r1, d0
 800f4a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f4ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f4b0:	2e13      	cmp	r6, #19
 800f4b2:	ee10 5a10 	vmov	r5, s0
 800f4b6:	ee10 8a10 	vmov	r8, s0
 800f4ba:	460c      	mov	r4, r1
 800f4bc:	dc32      	bgt.n	800f524 <floor+0x84>
 800f4be:	2e00      	cmp	r6, #0
 800f4c0:	da14      	bge.n	800f4ec <floor+0x4c>
 800f4c2:	a333      	add	r3, pc, #204	; (adr r3, 800f590 <floor+0xf0>)
 800f4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c8:	f7f0 ff40 	bl	800034c <__adddf3>
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	f7f1 fb82 	bl	8000bd8 <__aeabi_dcmpgt>
 800f4d4:	b138      	cbz	r0, 800f4e6 <floor+0x46>
 800f4d6:	2c00      	cmp	r4, #0
 800f4d8:	da57      	bge.n	800f58a <floor+0xea>
 800f4da:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f4de:	431d      	orrs	r5, r3
 800f4e0:	d001      	beq.n	800f4e6 <floor+0x46>
 800f4e2:	4c2d      	ldr	r4, [pc, #180]	; (800f598 <floor+0xf8>)
 800f4e4:	2500      	movs	r5, #0
 800f4e6:	4621      	mov	r1, r4
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	e025      	b.n	800f538 <floor+0x98>
 800f4ec:	4f2b      	ldr	r7, [pc, #172]	; (800f59c <floor+0xfc>)
 800f4ee:	4137      	asrs	r7, r6
 800f4f0:	ea01 0307 	and.w	r3, r1, r7
 800f4f4:	4303      	orrs	r3, r0
 800f4f6:	d01f      	beq.n	800f538 <floor+0x98>
 800f4f8:	a325      	add	r3, pc, #148	; (adr r3, 800f590 <floor+0xf0>)
 800f4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4fe:	f7f0 ff25 	bl	800034c <__adddf3>
 800f502:	2200      	movs	r2, #0
 800f504:	2300      	movs	r3, #0
 800f506:	f7f1 fb67 	bl	8000bd8 <__aeabi_dcmpgt>
 800f50a:	2800      	cmp	r0, #0
 800f50c:	d0eb      	beq.n	800f4e6 <floor+0x46>
 800f50e:	2c00      	cmp	r4, #0
 800f510:	bfbe      	ittt	lt
 800f512:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f516:	fa43 f606 	asrlt.w	r6, r3, r6
 800f51a:	19a4      	addlt	r4, r4, r6
 800f51c:	ea24 0407 	bic.w	r4, r4, r7
 800f520:	2500      	movs	r5, #0
 800f522:	e7e0      	b.n	800f4e6 <floor+0x46>
 800f524:	2e33      	cmp	r6, #51	; 0x33
 800f526:	dd0b      	ble.n	800f540 <floor+0xa0>
 800f528:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f52c:	d104      	bne.n	800f538 <floor+0x98>
 800f52e:	ee10 2a10 	vmov	r2, s0
 800f532:	460b      	mov	r3, r1
 800f534:	f7f0 ff0a 	bl	800034c <__adddf3>
 800f538:	ec41 0b10 	vmov	d0, r0, r1
 800f53c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f540:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f544:	f04f 33ff 	mov.w	r3, #4294967295
 800f548:	fa23 f707 	lsr.w	r7, r3, r7
 800f54c:	4207      	tst	r7, r0
 800f54e:	d0f3      	beq.n	800f538 <floor+0x98>
 800f550:	a30f      	add	r3, pc, #60	; (adr r3, 800f590 <floor+0xf0>)
 800f552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f556:	f7f0 fef9 	bl	800034c <__adddf3>
 800f55a:	2200      	movs	r2, #0
 800f55c:	2300      	movs	r3, #0
 800f55e:	f7f1 fb3b 	bl	8000bd8 <__aeabi_dcmpgt>
 800f562:	2800      	cmp	r0, #0
 800f564:	d0bf      	beq.n	800f4e6 <floor+0x46>
 800f566:	2c00      	cmp	r4, #0
 800f568:	da02      	bge.n	800f570 <floor+0xd0>
 800f56a:	2e14      	cmp	r6, #20
 800f56c:	d103      	bne.n	800f576 <floor+0xd6>
 800f56e:	3401      	adds	r4, #1
 800f570:	ea25 0507 	bic.w	r5, r5, r7
 800f574:	e7b7      	b.n	800f4e6 <floor+0x46>
 800f576:	2301      	movs	r3, #1
 800f578:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f57c:	fa03 f606 	lsl.w	r6, r3, r6
 800f580:	4435      	add	r5, r6
 800f582:	4545      	cmp	r5, r8
 800f584:	bf38      	it	cc
 800f586:	18e4      	addcc	r4, r4, r3
 800f588:	e7f2      	b.n	800f570 <floor+0xd0>
 800f58a:	2500      	movs	r5, #0
 800f58c:	462c      	mov	r4, r5
 800f58e:	e7aa      	b.n	800f4e6 <floor+0x46>
 800f590:	8800759c 	.word	0x8800759c
 800f594:	7e37e43c 	.word	0x7e37e43c
 800f598:	bff00000 	.word	0xbff00000
 800f59c:	000fffff 	.word	0x000fffff

0800f5a0 <scalbn>:
 800f5a0:	b570      	push	{r4, r5, r6, lr}
 800f5a2:	ec55 4b10 	vmov	r4, r5, d0
 800f5a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f5aa:	4606      	mov	r6, r0
 800f5ac:	462b      	mov	r3, r5
 800f5ae:	b99a      	cbnz	r2, 800f5d8 <scalbn+0x38>
 800f5b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f5b4:	4323      	orrs	r3, r4
 800f5b6:	d036      	beq.n	800f626 <scalbn+0x86>
 800f5b8:	4b39      	ldr	r3, [pc, #228]	; (800f6a0 <scalbn+0x100>)
 800f5ba:	4629      	mov	r1, r5
 800f5bc:	ee10 0a10 	vmov	r0, s0
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	f7f1 f879 	bl	80006b8 <__aeabi_dmul>
 800f5c6:	4b37      	ldr	r3, [pc, #220]	; (800f6a4 <scalbn+0x104>)
 800f5c8:	429e      	cmp	r6, r3
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	460d      	mov	r5, r1
 800f5ce:	da10      	bge.n	800f5f2 <scalbn+0x52>
 800f5d0:	a32b      	add	r3, pc, #172	; (adr r3, 800f680 <scalbn+0xe0>)
 800f5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d6:	e03a      	b.n	800f64e <scalbn+0xae>
 800f5d8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f5dc:	428a      	cmp	r2, r1
 800f5de:	d10c      	bne.n	800f5fa <scalbn+0x5a>
 800f5e0:	ee10 2a10 	vmov	r2, s0
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	4629      	mov	r1, r5
 800f5e8:	f7f0 feb0 	bl	800034c <__adddf3>
 800f5ec:	4604      	mov	r4, r0
 800f5ee:	460d      	mov	r5, r1
 800f5f0:	e019      	b.n	800f626 <scalbn+0x86>
 800f5f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	3a36      	subs	r2, #54	; 0x36
 800f5fa:	4432      	add	r2, r6
 800f5fc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f600:	428a      	cmp	r2, r1
 800f602:	dd08      	ble.n	800f616 <scalbn+0x76>
 800f604:	2d00      	cmp	r5, #0
 800f606:	a120      	add	r1, pc, #128	; (adr r1, 800f688 <scalbn+0xe8>)
 800f608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f60c:	da1c      	bge.n	800f648 <scalbn+0xa8>
 800f60e:	a120      	add	r1, pc, #128	; (adr r1, 800f690 <scalbn+0xf0>)
 800f610:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f614:	e018      	b.n	800f648 <scalbn+0xa8>
 800f616:	2a00      	cmp	r2, #0
 800f618:	dd08      	ble.n	800f62c <scalbn+0x8c>
 800f61a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f61e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f622:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f626:	ec45 4b10 	vmov	d0, r4, r5
 800f62a:	bd70      	pop	{r4, r5, r6, pc}
 800f62c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f630:	da19      	bge.n	800f666 <scalbn+0xc6>
 800f632:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f636:	429e      	cmp	r6, r3
 800f638:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f63c:	dd0a      	ble.n	800f654 <scalbn+0xb4>
 800f63e:	a112      	add	r1, pc, #72	; (adr r1, 800f688 <scalbn+0xe8>)
 800f640:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d1e2      	bne.n	800f60e <scalbn+0x6e>
 800f648:	a30f      	add	r3, pc, #60	; (adr r3, 800f688 <scalbn+0xe8>)
 800f64a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f64e:	f7f1 f833 	bl	80006b8 <__aeabi_dmul>
 800f652:	e7cb      	b.n	800f5ec <scalbn+0x4c>
 800f654:	a10a      	add	r1, pc, #40	; (adr r1, 800f680 <scalbn+0xe0>)
 800f656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d0b8      	beq.n	800f5d0 <scalbn+0x30>
 800f65e:	a10e      	add	r1, pc, #56	; (adr r1, 800f698 <scalbn+0xf8>)
 800f660:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f664:	e7b4      	b.n	800f5d0 <scalbn+0x30>
 800f666:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f66a:	3236      	adds	r2, #54	; 0x36
 800f66c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f670:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f674:	4620      	mov	r0, r4
 800f676:	4b0c      	ldr	r3, [pc, #48]	; (800f6a8 <scalbn+0x108>)
 800f678:	2200      	movs	r2, #0
 800f67a:	e7e8      	b.n	800f64e <scalbn+0xae>
 800f67c:	f3af 8000 	nop.w
 800f680:	c2f8f359 	.word	0xc2f8f359
 800f684:	01a56e1f 	.word	0x01a56e1f
 800f688:	8800759c 	.word	0x8800759c
 800f68c:	7e37e43c 	.word	0x7e37e43c
 800f690:	8800759c 	.word	0x8800759c
 800f694:	fe37e43c 	.word	0xfe37e43c
 800f698:	c2f8f359 	.word	0xc2f8f359
 800f69c:	81a56e1f 	.word	0x81a56e1f
 800f6a0:	43500000 	.word	0x43500000
 800f6a4:	ffff3cb0 	.word	0xffff3cb0
 800f6a8:	3c900000 	.word	0x3c900000

0800f6ac <_init>:
 800f6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ae:	bf00      	nop
 800f6b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6b2:	bc08      	pop	{r3}
 800f6b4:	469e      	mov	lr, r3
 800f6b6:	4770      	bx	lr

0800f6b8 <_fini>:
 800f6b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6ba:	bf00      	nop
 800f6bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6be:	bc08      	pop	{r3}
 800f6c0:	469e      	mov	lr, r3
 800f6c2:	4770      	bx	lr
