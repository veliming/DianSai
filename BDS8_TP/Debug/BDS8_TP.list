
BDS8_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c688  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002364  0800c818  0800c818  0001c818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb7c  0800eb7c  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb7c  0800eb7c  0001eb7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb84  0800eb84  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb84  0800eb84  0001eb84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800eb88  0800eb88  0001eb88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800eb8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  200001e8  0800ed74  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  0800ed74  0002064c  2**0
                  ALLOC
 11 .ccm_ram      00000000  10000000  10000000  000201e8  2**0
                  CONTENTS
 12 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013cc0  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000282c  00000000  00000000  00033ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  00036708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001068  00000000  00000000  00037840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000246d2  00000000  00000000  000388a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014260  00000000  00000000  0005cf7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd402  00000000  00000000  000711da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c1  00000000  00000000  0014e5dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ec4  00000000  00000000  0014e6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c800 	.word	0x0800c800

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800c800 	.word	0x0800c800

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */




	DCPID.Kp = 0.5; 			/* Proportional --比例参数 */
 8000ff2:	4b62      	ldr	r3, [pc, #392]	; (800117c <main+0x190>)
 8000ff4:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000ff8:	619a      	str	r2, [r3, #24]
	DCPID.Ki = 0.01;         	/* Integral  --积分参数*/
 8000ffa:	4b60      	ldr	r3, [pc, #384]	; (800117c <main+0x190>)
 8000ffc:	4a60      	ldr	r2, [pc, #384]	; (8001180 <main+0x194>)
 8000ffe:	61da      	str	r2, [r3, #28]
	DCPID.Kd = 0; 			/* Derivative     --微分参数*/
 8001000:	4b5e      	ldr	r3, [pc, #376]	; (800117c <main+0x190>)
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001008:	f002 fddc 	bl	8003bc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100c:	f000 f8f4 	bl	80011f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_I2C1_Init();
 8001010:	f000 faec 	bl	80015ec <MX_I2C1_Init>
  MX_GPIO_Init();
 8001014:	f000 fc9a 	bl	800194c <MX_GPIO_Init>
  MX_DMA_Init();
 8001018:	f000 fc7e 	bl	8001918 <MX_DMA_Init>
  MX_ADC1_Init();
 800101c:	f000 f956 	bl	80012cc <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001020:	f000 fc50 	bl	80018c4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001024:	f000 fb10 	bl	8001648 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001028:	f000 fbb0 	bl	800178c <MX_TIM3_Init>
  MX_TIM5_Init();
 800102c:	f000 fbfc 	bl	8001828 <MX_TIM5_Init>
  MX_ADC3_Init();
 8001030:	f000 fa28 	bl	8001484 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

//  HAL_I2C_Mem_Write(&hi2c1, ADDR_AT24C02_Write, 0, I2C_MEMADD_SIZE_16BIT,(uint8_t*)(&(PHASE1[0])),8, 1000);
//  HAL_Delay(1);

  HAL_I2C_Mem_Read(&hi2c1, ADDR_AT24C02_Read, 0, I2C_MEMADD_SIZE_16BIT,(uint8_t*)(&(PHASE[0])),8, 1000);
 8001034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	2308      	movs	r3, #8
 800103c:	9301      	str	r3, [sp, #4]
 800103e:	4b51      	ldr	r3, [pc, #324]	; (8001184 <main+0x198>)
 8001040:	9300      	str	r3, [sp, #0]
 8001042:	2310      	movs	r3, #16
 8001044:	2200      	movs	r2, #0
 8001046:	21a1      	movs	r1, #161	; 0xa1
 8001048:	484f      	ldr	r0, [pc, #316]	; (8001188 <main+0x19c>)
 800104a:	f004 f9a5 	bl	8005398 <HAL_I2C_Mem_Read>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_Value, 12);
 800104e:	220c      	movs	r2, #12
 8001050:	494e      	ldr	r1, [pc, #312]	; (800118c <main+0x1a0>)
 8001052:	484f      	ldr	r0, [pc, #316]	; (8001190 <main+0x1a4>)
 8001054:	f002 fe90 	bl	8003d78 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)ADC3_Value, 8);
 8001058:	2208      	movs	r2, #8
 800105a:	494e      	ldr	r1, [pc, #312]	; (8001194 <main+0x1a8>)
 800105c:	484e      	ldr	r0, [pc, #312]	; (8001198 <main+0x1ac>)
 800105e:	f002 fe8b 	bl	8003d78 <HAL_ADC_Start_DMA>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);/*pwm波频�????????????????????????????????*/
 8001062:	2100      	movs	r1, #0
 8001064:	484d      	ldr	r0, [pc, #308]	; (800119c <main+0x1b0>)
 8001066:	f005 fd0f 	bl	8006a88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800106a:	2104      	movs	r1, #4
 800106c:	484b      	ldr	r0, [pc, #300]	; (800119c <main+0x1b0>)
 800106e:	f005 fd0b 	bl	8006a88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001072:	2108      	movs	r1, #8
 8001074:	4849      	ldr	r0, [pc, #292]	; (800119c <main+0x1b0>)
 8001076:	f005 fd07 	bl	8006a88 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 800107a:	210c      	movs	r1, #12
 800107c:	4847      	ldr	r0, [pc, #284]	; (800119c <main+0x1b0>)
 800107e:	f005 fdcb 	bl	8006c18 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);/*pid*/
 8001082:	4847      	ldr	r0, [pc, #284]	; (80011a0 <main+0x1b4>)
 8001084:	f005 fc36 	bl	80068f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);/*计数时间*/
 8001088:	4846      	ldr	r0, [pc, #280]	; (80011a4 <main+0x1b8>)
 800108a:	f005 fbcb 	bl	8006824 <HAL_TIM_Base_Start>

  arm_pid_init_f32(&DCPID, 1);
 800108e:	2101      	movs	r1, #1
 8001090:	483a      	ldr	r0, [pc, #232]	; (800117c <main+0x190>)
 8001092:	f006 ff41 	bl	8007f18 <arm_pid_init_f32>

  LCD_init();
 8001096:	f002 fcaf 	bl	80039f8 <LCD_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	if( (HAL_GetTick()-MainTick)>300)
 800109a:	f002 fdf9 	bl	8003c90 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	4b41      	ldr	r3, [pc, #260]	; (80011a8 <main+0x1bc>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80010aa:	d9f6      	bls.n	800109a <main+0xae>
	{
		sprintf(show0,"%d   ",Mode);
 80010ac:	4b3f      	ldr	r3, [pc, #252]	; (80011ac <main+0x1c0>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	493f      	ldr	r1, [pc, #252]	; (80011b0 <main+0x1c4>)
 80010b4:	483f      	ldr	r0, [pc, #252]	; (80011b4 <main+0x1c8>)
 80010b6:	f007 fdfd 	bl	8008cb4 <siprintf>
		sprintf(show1,"BT_C:%.3f",BT_CReal);
 80010ba:	4b3f      	ldr	r3, [pc, #252]	; (80011b8 <main+0x1cc>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fa42 	bl	8000548 <__aeabi_f2d>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	493c      	ldr	r1, [pc, #240]	; (80011bc <main+0x1d0>)
 80010ca:	483d      	ldr	r0, [pc, #244]	; (80011c0 <main+0x1d4>)
 80010cc:	f007 fdf2 	bl	8008cb4 <siprintf>
		sprintf(show2,"BT_V:%.3f",BT_VReal);
 80010d0:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <main+0x1d8>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa37 	bl	8000548 <__aeabi_f2d>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	493a      	ldr	r1, [pc, #232]	; (80011c8 <main+0x1dc>)
 80010e0:	483a      	ldr	r0, [pc, #232]	; (80011cc <main+0x1e0>)
 80010e2:	f007 fde7 	bl	8008cb4 <siprintf>
		sprintf(show3,"DC_V:%.3f",DC_VReal);
 80010e6:	4b3a      	ldr	r3, [pc, #232]	; (80011d0 <main+0x1e4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fa2c 	bl	8000548 <__aeabi_f2d>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4937      	ldr	r1, [pc, #220]	; (80011d4 <main+0x1e8>)
 80010f6:	4838      	ldr	r0, [pc, #224]	; (80011d8 <main+0x1ec>)
 80010f8:	f007 fddc 	bl	8008cb4 <siprintf>
		sprintf(show4,"PW_V:%.3f",PW_VReal);
 80010fc:	4b37      	ldr	r3, [pc, #220]	; (80011dc <main+0x1f0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fa21 	bl	8000548 <__aeabi_f2d>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4935      	ldr	r1, [pc, #212]	; (80011e0 <main+0x1f4>)
 800110c:	4835      	ldr	r0, [pc, #212]	; (80011e4 <main+0x1f8>)
 800110e:	f007 fdd1 	bl	8008cb4 <siprintf>
		sprintf(show5,"PW_C:%.3f",PW_CReal_1);
 8001112:	4b35      	ldr	r3, [pc, #212]	; (80011e8 <main+0x1fc>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fa16 	bl	8000548 <__aeabi_f2d>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4932      	ldr	r1, [pc, #200]	; (80011ec <main+0x200>)
 8001122:	4833      	ldr	r0, [pc, #204]	; (80011f0 <main+0x204>)
 8001124:	f007 fdc6 	bl	8008cb4 <siprintf>
		LCD_write_String(0,0,show0);
 8001128:	4a22      	ldr	r2, [pc, #136]	; (80011b4 <main+0x1c8>)
 800112a:	2100      	movs	r1, #0
 800112c:	2000      	movs	r0, #0
 800112e:	f002 fd29 	bl	8003b84 <LCD_write_String>
		LCD_write_String(0,1,show1);
 8001132:	4a23      	ldr	r2, [pc, #140]	; (80011c0 <main+0x1d4>)
 8001134:	2101      	movs	r1, #1
 8001136:	2000      	movs	r0, #0
 8001138:	f002 fd24 	bl	8003b84 <LCD_write_String>
		LCD_write_String(0,2,show2);
 800113c:	4a23      	ldr	r2, [pc, #140]	; (80011cc <main+0x1e0>)
 800113e:	2102      	movs	r1, #2
 8001140:	2000      	movs	r0, #0
 8001142:	f002 fd1f 	bl	8003b84 <LCD_write_String>
		LCD_write_String(0,3,show3);
 8001146:	4a24      	ldr	r2, [pc, #144]	; (80011d8 <main+0x1ec>)
 8001148:	2103      	movs	r1, #3
 800114a:	2000      	movs	r0, #0
 800114c:	f002 fd1a 	bl	8003b84 <LCD_write_String>
		LCD_write_String(0,4,show4);
 8001150:	4a24      	ldr	r2, [pc, #144]	; (80011e4 <main+0x1f8>)
 8001152:	2104      	movs	r1, #4
 8001154:	2000      	movs	r0, #0
 8001156:	f002 fd15 	bl	8003b84 <LCD_write_String>
		LCD_write_String(0,5,show5);
 800115a:	4a25      	ldr	r2, [pc, #148]	; (80011f0 <main+0x204>)
 800115c:	2105      	movs	r1, #5
 800115e:	2000      	movs	r0, #0
 8001160:	f002 fd10 	bl	8003b84 <LCD_write_String>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001168:	4822      	ldr	r0, [pc, #136]	; (80011f4 <main+0x208>)
 800116a:	f003 fe98 	bl	8004e9e <HAL_GPIO_TogglePin>
		MainTick=HAL_GetTick();
 800116e:	f002 fd8f 	bl	8003c90 <HAL_GetTick>
 8001172:	4603      	mov	r3, r0
 8001174:	4a0c      	ldr	r2, [pc, #48]	; (80011a8 <main+0x1bc>)
 8001176:	6013      	str	r3, [r2, #0]
  	if( (HAL_GetTick()-MainTick)>300)
 8001178:	e78f      	b.n	800109a <main+0xae>
 800117a:	bf00      	nop
 800117c:	20000244 	.word	0x20000244
 8001180:	3c23d70a 	.word	0x3c23d70a
 8001184:	20000004 	.word	0x20000004
 8001188:	20000268 	.word	0x20000268
 800118c:	200005c4 	.word	0x200005c4
 8001190:	200003d8 	.word	0x200003d8
 8001194:	20000234 	.word	0x20000234
 8001198:	2000042c 	.word	0x2000042c
 800119c:	20000560 	.word	0x20000560
 80011a0:	20000390 	.word	0x20000390
 80011a4:	20000348 	.word	0x20000348
 80011a8:	200004bc 	.word	0x200004bc
 80011ac:	20000204 	.word	0x20000204
 80011b0:	0800c818 	.word	0x0800c818
 80011b4:	200005dc 	.word	0x200005dc
 80011b8:	2000055c 	.word	0x2000055c
 80011bc:	0800c820 	.word	0x0800c820
 80011c0:	200002c0 	.word	0x200002c0
 80011c4:	200004b8 	.word	0x200004b8
 80011c8:	0800c82c 	.word	0x0800c82c
 80011cc:	20000220 	.word	0x20000220
 80011d0:	2000021c 	.word	0x2000021c
 80011d4:	0800c838 	.word	0x0800c838
 80011d8:	200002d4 	.word	0x200002d4
 80011dc:	20000558 	.word	0x20000558
 80011e0:	0800c844 	.word	0x0800c844
 80011e4:	20000544 	.word	0x20000544
 80011e8:	200005a8 	.word	0x200005a8
 80011ec:	0800c850 	.word	0x0800c850
 80011f0:	200005b0 	.word	0x200005b0
 80011f4:	40021800 	.word	0x40021800

080011f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b094      	sub	sp, #80	; 0x50
 80011fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	2230      	movs	r2, #48	; 0x30
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f006 fecc 	bl	8007fa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	60da      	str	r2, [r3, #12]
 800121a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <SystemClock_Config+0xcc>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	4a27      	ldr	r2, [pc, #156]	; (80012c4 <SystemClock_Config+0xcc>)
 8001226:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800122a:	6413      	str	r3, [r2, #64]	; 0x40
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <SystemClock_Config+0xcc>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001238:	2300      	movs	r3, #0
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <SystemClock_Config+0xd0>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a21      	ldr	r2, [pc, #132]	; (80012c8 <SystemClock_Config+0xd0>)
 8001242:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	4b1f      	ldr	r3, [pc, #124]	; (80012c8 <SystemClock_Config+0xd0>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001254:	2301      	movs	r3, #1
 8001256:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001258:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800125c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125e:	2302      	movs	r3, #2
 8001260:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001262:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001266:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001268:	2304      	movs	r3, #4
 800126a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800126c:	23a8      	movs	r3, #168	; 0xa8
 800126e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001270:	2302      	movs	r3, #2
 8001272:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001274:	2304      	movs	r3, #4
 8001276:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001278:	f107 0320 	add.w	r3, r7, #32
 800127c:	4618      	mov	r0, r3
 800127e:	f004 fe0d 	bl	8005e9c <HAL_RCC_OscConfig>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001288:	f000 fcec 	bl	8001c64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128c:	230f      	movs	r3, #15
 800128e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001290:	2302      	movs	r3, #2
 8001292:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001298:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800129c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012a4:	f107 030c 	add.w	r3, r7, #12
 80012a8:	2105      	movs	r1, #5
 80012aa:	4618      	mov	r0, r3
 80012ac:	f005 f86e 	bl	800638c <HAL_RCC_ClockConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012b6:	f000 fcd5 	bl	8001c64 <Error_Handler>
  }
}
 80012ba:	bf00      	nop
 80012bc:	3750      	adds	r7, #80	; 0x50
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40007000 	.word	0x40007000

080012cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012d2:	463b      	mov	r3, r7
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012de:	4b66      	ldr	r3, [pc, #408]	; (8001478 <MX_ADC1_Init+0x1ac>)
 80012e0:	4a66      	ldr	r2, [pc, #408]	; (800147c <MX_ADC1_Init+0x1b0>)
 80012e2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80012e4:	4b64      	ldr	r3, [pc, #400]	; (8001478 <MX_ADC1_Init+0x1ac>)
 80012e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012ec:	4b62      	ldr	r3, [pc, #392]	; (8001478 <MX_ADC1_Init+0x1ac>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012f2:	4b61      	ldr	r3, [pc, #388]	; (8001478 <MX_ADC1_Init+0x1ac>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012f8:	4b5f      	ldr	r3, [pc, #380]	; (8001478 <MX_ADC1_Init+0x1ac>)
 80012fa:	2201      	movs	r2, #1
 80012fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012fe:	4b5e      	ldr	r3, [pc, #376]	; (8001478 <MX_ADC1_Init+0x1ac>)
 8001300:	2200      	movs	r2, #0
 8001302:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001306:	4b5c      	ldr	r3, [pc, #368]	; (8001478 <MX_ADC1_Init+0x1ac>)
 8001308:	2200      	movs	r2, #0
 800130a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800130c:	4b5a      	ldr	r3, [pc, #360]	; (8001478 <MX_ADC1_Init+0x1ac>)
 800130e:	4a5c      	ldr	r2, [pc, #368]	; (8001480 <MX_ADC1_Init+0x1b4>)
 8001310:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001312:	4b59      	ldr	r3, [pc, #356]	; (8001478 <MX_ADC1_Init+0x1ac>)
 8001314:	2200      	movs	r2, #0
 8001316:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 12;
 8001318:	4b57      	ldr	r3, [pc, #348]	; (8001478 <MX_ADC1_Init+0x1ac>)
 800131a:	220c      	movs	r2, #12
 800131c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800131e:	4b56      	ldr	r3, [pc, #344]	; (8001478 <MX_ADC1_Init+0x1ac>)
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001326:	4b54      	ldr	r3, [pc, #336]	; (8001478 <MX_ADC1_Init+0x1ac>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800132c:	4852      	ldr	r0, [pc, #328]	; (8001478 <MX_ADC1_Init+0x1ac>)
 800132e:	f002 fcdf 	bl	8003cf0 <HAL_ADC_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001338:	f000 fc94 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800133c:	2308      	movs	r3, #8
 800133e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001344:	2301      	movs	r3, #1
 8001346:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001348:	463b      	mov	r3, r7
 800134a:	4619      	mov	r1, r3
 800134c:	484a      	ldr	r0, [pc, #296]	; (8001478 <MX_ADC1_Init+0x1ac>)
 800134e:	f002 fe41 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001358:	f000 fc84 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 800135c:	2302      	movs	r3, #2
 800135e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001360:	463b      	mov	r3, r7
 8001362:	4619      	mov	r1, r3
 8001364:	4844      	ldr	r0, [pc, #272]	; (8001478 <MX_ADC1_Init+0x1ac>)
 8001366:	f002 fe35 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001370:	f000 fc78 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 3;
 8001374:	2303      	movs	r3, #3
 8001376:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	483e      	ldr	r0, [pc, #248]	; (8001478 <MX_ADC1_Init+0x1ac>)
 800137e:	f002 fe29 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8001388:	f000 fc6c 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 4;
 800138c:	2304      	movs	r3, #4
 800138e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	4619      	mov	r1, r3
 8001394:	4838      	ldr	r0, [pc, #224]	; (8001478 <MX_ADC1_Init+0x1ac>)
 8001396:	f002 fe1d 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80013a0:	f000 fc60 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013a4:	230e      	movs	r3, #14
 80013a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80013a8:	2305      	movs	r3, #5
 80013aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013ac:	463b      	mov	r3, r7
 80013ae:	4619      	mov	r1, r3
 80013b0:	4831      	ldr	r0, [pc, #196]	; (8001478 <MX_ADC1_Init+0x1ac>)
 80013b2:	f002 fe0f 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 80013bc:	f000 fc52 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 6;
 80013c0:	2306      	movs	r3, #6
 80013c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013c4:	463b      	mov	r3, r7
 80013c6:	4619      	mov	r1, r3
 80013c8:	482b      	ldr	r0, [pc, #172]	; (8001478 <MX_ADC1_Init+0x1ac>)
 80013ca:	f002 fe03 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 80013d4:	f000 fc46 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 7;
 80013d8:	2307      	movs	r3, #7
 80013da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	4619      	mov	r1, r3
 80013e0:	4825      	ldr	r0, [pc, #148]	; (8001478 <MX_ADC1_Init+0x1ac>)
 80013e2:	f002 fdf7 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 80013ec:	f000 fc3a 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 8;
 80013f0:	2308      	movs	r3, #8
 80013f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	4619      	mov	r1, r3
 80013f8:	481f      	ldr	r0, [pc, #124]	; (8001478 <MX_ADC1_Init+0x1ac>)
 80013fa:	f002 fdeb 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC1_Init+0x13c>
  {
    Error_Handler();
 8001404:	f000 fc2e 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001408:	230a      	movs	r3, #10
 800140a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800140c:	2309      	movs	r3, #9
 800140e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001410:	2302      	movs	r3, #2
 8001412:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	4817      	ldr	r0, [pc, #92]	; (8001478 <MX_ADC1_Init+0x1ac>)
 800141a:	f002 fddb 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 8001424:	f000 fc1e 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 10;
 8001428:	230a      	movs	r3, #10
 800142a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	4619      	mov	r1, r3
 8001430:	4811      	ldr	r0, [pc, #68]	; (8001478 <MX_ADC1_Init+0x1ac>)
 8001432:	f002 fdcf 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_ADC1_Init+0x174>
  {
    Error_Handler();
 800143c:	f000 fc12 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 11;
 8001440:	230b      	movs	r3, #11
 8001442:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001444:	463b      	mov	r3, r7
 8001446:	4619      	mov	r1, r3
 8001448:	480b      	ldr	r0, [pc, #44]	; (8001478 <MX_ADC1_Init+0x1ac>)
 800144a:	f002 fdc3 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8001454:	f000 fc06 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 12;
 8001458:	230c      	movs	r3, #12
 800145a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145c:	463b      	mov	r3, r7
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_ADC1_Init+0x1ac>)
 8001462:	f002 fdb7 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_ADC1_Init+0x1a4>
  {
    Error_Handler();
 800146c:	f000 fbfa 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200003d8 	.word	0x200003d8
 800147c:	40012000 	.word	0x40012000
 8001480:	0f000001 	.word	0x0f000001

08001484 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800148a:	463b      	mov	r3, r7
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001496:	4b53      	ldr	r3, [pc, #332]	; (80015e4 <MX_ADC3_Init+0x160>)
 8001498:	4a53      	ldr	r2, [pc, #332]	; (80015e8 <MX_ADC3_Init+0x164>)
 800149a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800149c:	4b51      	ldr	r3, [pc, #324]	; (80015e4 <MX_ADC3_Init+0x160>)
 800149e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014a2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80014a4:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <MX_ADC3_Init+0x160>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80014aa:	4b4e      	ldr	r3, [pc, #312]	; (80015e4 <MX_ADC3_Init+0x160>)
 80014ac:	2201      	movs	r2, #1
 80014ae:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80014b0:	4b4c      	ldr	r3, [pc, #304]	; (80015e4 <MX_ADC3_Init+0x160>)
 80014b2:	2201      	movs	r2, #1
 80014b4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80014b6:	4b4b      	ldr	r3, [pc, #300]	; (80015e4 <MX_ADC3_Init+0x160>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80014be:	4b49      	ldr	r3, [pc, #292]	; (80015e4 <MX_ADC3_Init+0x160>)
 80014c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80014c6:	4b47      	ldr	r3, [pc, #284]	; (80015e4 <MX_ADC3_Init+0x160>)
 80014c8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80014cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014ce:	4b45      	ldr	r3, [pc, #276]	; (80015e4 <MX_ADC3_Init+0x160>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 8;
 80014d4:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <MX_ADC3_Init+0x160>)
 80014d6:	2208      	movs	r2, #8
 80014d8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80014da:	4b42      	ldr	r3, [pc, #264]	; (80015e4 <MX_ADC3_Init+0x160>)
 80014dc:	2201      	movs	r2, #1
 80014de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e2:	4b40      	ldr	r3, [pc, #256]	; (80015e4 <MX_ADC3_Init+0x160>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80014e8:	483e      	ldr	r0, [pc, #248]	; (80015e4 <MX_ADC3_Init+0x160>)
 80014ea:	f002 fc01 	bl	8003cf0 <HAL_ADC_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 80014f4:	f000 fbb6 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014f8:	2304      	movs	r3, #4
 80014fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014fc:	2301      	movs	r3, #1
 80014fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8001500:	2301      	movs	r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001504:	463b      	mov	r3, r7
 8001506:	4619      	mov	r1, r3
 8001508:	4836      	ldr	r0, [pc, #216]	; (80015e4 <MX_ADC3_Init+0x160>)
 800150a:	f002 fd63 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8001514:	f000 fba6 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001518:	2305      	movs	r3, #5
 800151a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800151c:	2302      	movs	r3, #2
 800151e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001520:	463b      	mov	r3, r7
 8001522:	4619      	mov	r1, r3
 8001524:	482f      	ldr	r0, [pc, #188]	; (80015e4 <MX_ADC3_Init+0x160>)
 8001526:	f002 fd55 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8001530:	f000 fb98 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001534:	2304      	movs	r3, #4
 8001536:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001538:	2303      	movs	r3, #3
 800153a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800153c:	463b      	mov	r3, r7
 800153e:	4619      	mov	r1, r3
 8001540:	4828      	ldr	r0, [pc, #160]	; (80015e4 <MX_ADC3_Init+0x160>)
 8001542:	f002 fd47 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 800154c:	f000 fb8a 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001550:	2305      	movs	r3, #5
 8001552:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001554:	2304      	movs	r3, #4
 8001556:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001558:	463b      	mov	r3, r7
 800155a:	4619      	mov	r1, r3
 800155c:	4821      	ldr	r0, [pc, #132]	; (80015e4 <MX_ADC3_Init+0x160>)
 800155e:	f002 fd39 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC3_Init+0xe8>
  {
    Error_Handler();
 8001568:	f000 fb7c 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800156c:	2304      	movs	r3, #4
 800156e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001570:	2305      	movs	r3, #5
 8001572:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	481a      	ldr	r0, [pc, #104]	; (80015e4 <MX_ADC3_Init+0x160>)
 800157a:	f002 fd2b 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADC3_Init+0x104>
  {
    Error_Handler();
 8001584:	f000 fb6e 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001588:	2305      	movs	r3, #5
 800158a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800158c:	2306      	movs	r3, #6
 800158e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001590:	463b      	mov	r3, r7
 8001592:	4619      	mov	r1, r3
 8001594:	4813      	ldr	r0, [pc, #76]	; (80015e4 <MX_ADC3_Init+0x160>)
 8001596:	f002 fd1d 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_ADC3_Init+0x120>
  {
    Error_Handler();
 80015a0:	f000 fb60 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015a4:	2304      	movs	r3, #4
 80015a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80015a8:	2307      	movs	r3, #7
 80015aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	4619      	mov	r1, r3
 80015b0:	480c      	ldr	r0, [pc, #48]	; (80015e4 <MX_ADC3_Init+0x160>)
 80015b2:	f002 fd0f 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_ADC3_Init+0x13c>
  {
    Error_Handler();
 80015bc:	f000 fb52 	bl	8001c64 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80015c0:	2305      	movs	r3, #5
 80015c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80015c4:	2308      	movs	r3, #8
 80015c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	4619      	mov	r1, r3
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <MX_ADC3_Init+0x160>)
 80015ce:	f002 fd01 	bl	8003fd4 <HAL_ADC_ConfigChannel>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_ADC3_Init+0x158>
  {
    Error_Handler();
 80015d8:	f000 fb44 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	3710      	adds	r7, #16
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	2000042c 	.word	0x2000042c
 80015e8:	40012200 	.word	0x40012200

080015ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <MX_I2C1_Init+0x50>)
 80015f2:	4a13      	ldr	r2, [pc, #76]	; (8001640 <MX_I2C1_Init+0x54>)
 80015f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80015f6:	4b11      	ldr	r3, [pc, #68]	; (800163c <MX_I2C1_Init+0x50>)
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <MX_I2C1_Init+0x58>)
 80015fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015fc:	4b0f      	ldr	r3, [pc, #60]	; (800163c <MX_I2C1_Init+0x50>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001602:	4b0e      	ldr	r3, [pc, #56]	; (800163c <MX_I2C1_Init+0x50>)
 8001604:	2200      	movs	r2, #0
 8001606:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <MX_I2C1_Init+0x50>)
 800160a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800160e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001610:	4b0a      	ldr	r3, [pc, #40]	; (800163c <MX_I2C1_Init+0x50>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <MX_I2C1_Init+0x50>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800161c:	4b07      	ldr	r3, [pc, #28]	; (800163c <MX_I2C1_Init+0x50>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <MX_I2C1_Init+0x50>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001628:	4804      	ldr	r0, [pc, #16]	; (800163c <MX_I2C1_Init+0x50>)
 800162a:	f003 fc77 	bl	8004f1c <HAL_I2C_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001634:	f000 fb16 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000268 	.word	0x20000268
 8001640:	40005400 	.word	0x40005400
 8001644:	00061a80 	.word	0x00061a80

08001648 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b08e      	sub	sp, #56	; 0x38
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
 8001656:	605a      	str	r2, [r3, #4]
 8001658:	609a      	str	r2, [r3, #8]
 800165a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165c:	f107 0320 	add.w	r3, r7, #32
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
 8001674:	615a      	str	r2, [r3, #20]
 8001676:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001678:	4b43      	ldr	r3, [pc, #268]	; (8001788 <MX_TIM2_Init+0x140>)
 800167a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800167e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 8001680:	4b41      	ldr	r3, [pc, #260]	; (8001788 <MX_TIM2_Init+0x140>)
 8001682:	2200      	movs	r2, #0
 8001684:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001686:	4b40      	ldr	r3, [pc, #256]	; (8001788 <MX_TIM2_Init+0x140>)
 8001688:	2210      	movs	r2, #16
 800168a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2700-1;
 800168c:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <MX_TIM2_Init+0x140>)
 800168e:	f640 228b 	movw	r2, #2699	; 0xa8b
 8001692:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001694:	4b3c      	ldr	r3, [pc, #240]	; (8001788 <MX_TIM2_Init+0x140>)
 8001696:	2200      	movs	r2, #0
 8001698:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169a:	4b3b      	ldr	r3, [pc, #236]	; (8001788 <MX_TIM2_Init+0x140>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016a0:	4839      	ldr	r0, [pc, #228]	; (8001788 <MX_TIM2_Init+0x140>)
 80016a2:	f005 f86f 	bl	8006784 <HAL_TIM_Base_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80016ac:	f000 fada 	bl	8001c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80016b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4832      	ldr	r0, [pc, #200]	; (8001788 <MX_TIM2_Init+0x140>)
 80016be:	f005 fd7f 	bl	80071c0 <HAL_TIM_ConfigClockSource>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80016c8:	f000 facc 	bl	8001c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016cc:	482e      	ldr	r0, [pc, #184]	; (8001788 <MX_TIM2_Init+0x140>)
 80016ce:	f005 f981 	bl	80069d4 <HAL_TIM_PWM_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80016d8:	f000 fac4 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80016dc:	2320      	movs	r3, #32
 80016de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016e4:	f107 0320 	add.w	r3, r7, #32
 80016e8:	4619      	mov	r1, r3
 80016ea:	4827      	ldr	r0, [pc, #156]	; (8001788 <MX_TIM2_Init+0x140>)
 80016ec:	f006 f96e 	bl	80079cc <HAL_TIMEx_MasterConfigSynchronization>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80016f6:	f000 fab5 	bl	8001c64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016fa:	2360      	movs	r3, #96	; 0x60
 80016fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1400-1;
 80016fe:	f240 5377 	movw	r3, #1399	; 0x577
 8001702:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001704:	2300      	movs	r3, #0
 8001706:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	4619      	mov	r1, r3
 8001712:	481d      	ldr	r0, [pc, #116]	; (8001788 <MX_TIM2_Init+0x140>)
 8001714:	f005 fc96 	bl	8007044 <HAL_TIM_PWM_ConfigChannel>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800171e:	f000 faa1 	bl	8001c64 <Error_Handler>
  }
  sConfigOC.Pulse = 2500-1;
 8001722:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8001726:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001728:	2304      	movs	r3, #4
 800172a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800172c:	1d3b      	adds	r3, r7, #4
 800172e:	2204      	movs	r2, #4
 8001730:	4619      	mov	r1, r3
 8001732:	4815      	ldr	r0, [pc, #84]	; (8001788 <MX_TIM2_Init+0x140>)
 8001734:	f005 fc86 	bl	8007044 <HAL_TIM_PWM_ConfigChannel>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 800173e:	f000 fa91 	bl	8001c64 <Error_Handler>
  }
  sConfigOC.Pulse = 1400-1;
 8001742:	f240 5377 	movw	r3, #1399	; 0x577
 8001746:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2208      	movs	r2, #8
 8001750:	4619      	mov	r1, r3
 8001752:	480d      	ldr	r0, [pc, #52]	; (8001788 <MX_TIM2_Init+0x140>)
 8001754:	f005 fc76 	bl	8007044 <HAL_TIM_PWM_ConfigChannel>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_TIM2_Init+0x11a>
  {
    Error_Handler();
 800175e:	f000 fa81 	bl	8001c64 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	220c      	movs	r2, #12
 8001766:	4619      	mov	r1, r3
 8001768:	4807      	ldr	r0, [pc, #28]	; (8001788 <MX_TIM2_Init+0x140>)
 800176a:	f005 fc6b 	bl	8007044 <HAL_TIM_PWM_ConfigChannel>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM2_Init+0x130>
  {
    Error_Handler();
 8001774:	f000 fa76 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001778:	4803      	ldr	r0, [pc, #12]	; (8001788 <MX_TIM2_Init+0x140>)
 800177a:	f000 fc3d 	bl	8001ff8 <HAL_TIM_MspPostInit>

}
 800177e:	bf00      	nop
 8001780:	3738      	adds	r7, #56	; 0x38
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000560 	.word	0x20000560

0800178c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a0:	463b      	mov	r3, r7
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017a8:	4b1d      	ldr	r3, [pc, #116]	; (8001820 <MX_TIM3_Init+0x94>)
 80017aa:	4a1e      	ldr	r2, [pc, #120]	; (8001824 <MX_TIM3_Init+0x98>)
 80017ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 210-1;
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <MX_TIM3_Init+0x94>)
 80017b0:	22d1      	movs	r2, #209	; 0xd1
 80017b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b4:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <MX_TIM3_Init+0x94>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <MX_TIM3_Init+0x94>)
 80017bc:	f242 720f 	movw	r2, #9999	; 0x270f
 80017c0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c2:	4b17      	ldr	r3, [pc, #92]	; (8001820 <MX_TIM3_Init+0x94>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c8:	4b15      	ldr	r3, [pc, #84]	; (8001820 <MX_TIM3_Init+0x94>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80017ce:	4814      	ldr	r0, [pc, #80]	; (8001820 <MX_TIM3_Init+0x94>)
 80017d0:	f004 ffd8 	bl	8006784 <HAL_TIM_Base_Init>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80017da:	f000 fa43 	bl	8001c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017e4:	f107 0308 	add.w	r3, r7, #8
 80017e8:	4619      	mov	r1, r3
 80017ea:	480d      	ldr	r0, [pc, #52]	; (8001820 <MX_TIM3_Init+0x94>)
 80017ec:	f005 fce8 	bl	80071c0 <HAL_TIM_ConfigClockSource>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80017f6:	f000 fa35 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fa:	2300      	movs	r3, #0
 80017fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017fe:	2300      	movs	r3, #0
 8001800:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001802:	463b      	mov	r3, r7
 8001804:	4619      	mov	r1, r3
 8001806:	4806      	ldr	r0, [pc, #24]	; (8001820 <MX_TIM3_Init+0x94>)
 8001808:	f006 f8e0 	bl	80079cc <HAL_TIMEx_MasterConfigSynchronization>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001812:	f000 fa27 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000390 	.word	0x20000390
 8001824:	40000400 	.word	0x40000400

08001828 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800183c:	463b      	mov	r3, r7
 800183e:	2200      	movs	r2, #0
 8001840:	601a      	str	r2, [r3, #0]
 8001842:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001844:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <MX_TIM5_Init+0x94>)
 8001846:	4a1e      	ldr	r2, [pc, #120]	; (80018c0 <MX_TIM5_Init+0x98>)
 8001848:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 800184a:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <MX_TIM5_Init+0x94>)
 800184c:	2253      	movs	r2, #83	; 0x53
 800184e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <MX_TIM5_Init+0x94>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001856:	4b19      	ldr	r3, [pc, #100]	; (80018bc <MX_TIM5_Init+0x94>)
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <MX_TIM5_Init+0x94>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <MX_TIM5_Init+0x94>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800186a:	4814      	ldr	r0, [pc, #80]	; (80018bc <MX_TIM5_Init+0x94>)
 800186c:	f004 ff8a 	bl	8006784 <HAL_TIM_Base_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001876:	f000 f9f5 	bl	8001c64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800187e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001880:	f107 0308 	add.w	r3, r7, #8
 8001884:	4619      	mov	r1, r3
 8001886:	480d      	ldr	r0, [pc, #52]	; (80018bc <MX_TIM5_Init+0x94>)
 8001888:	f005 fc9a 	bl	80071c0 <HAL_TIM_ConfigClockSource>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001892:	f000 f9e7 	bl	8001c64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001896:	2300      	movs	r3, #0
 8001898:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800189e:	463b      	mov	r3, r7
 80018a0:	4619      	mov	r1, r3
 80018a2:	4806      	ldr	r0, [pc, #24]	; (80018bc <MX_TIM5_Init+0x94>)
 80018a4:	f006 f892 	bl	80079cc <HAL_TIMEx_MasterConfigSynchronization>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80018ae:	f000 f9d9 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000348 	.word	0x20000348
 80018c0:	40000c00 	.word	0x40000c00

080018c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018c8:	4b11      	ldr	r3, [pc, #68]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <MX_USART1_UART_Init+0x50>)
 80018cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 921600;
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018d0:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80018d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018d6:	4b0e      	ldr	r3, [pc, #56]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018e2:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018e8:	4b09      	ldr	r3, [pc, #36]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018ea:	220c      	movs	r2, #12
 80018ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ee:	4b08      	ldr	r3, [pc, #32]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f4:	4b06      	ldr	r3, [pc, #24]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018fa:	4805      	ldr	r0, [pc, #20]	; (8001910 <MX_USART1_UART_Init+0x4c>)
 80018fc:	f006 f8f6 	bl	8007aec <HAL_UART_Init>
 8001900:	4603      	mov	r3, r0
 8001902:	2b00      	cmp	r3, #0
 8001904:	d001      	beq.n	800190a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001906:	f000 f9ad 	bl	8001c64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800190a:	bf00      	nop
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	20000474 	.word	0x20000474
 8001914:	40011000 	.word	0x40011000

08001918 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_DMA_Init+0x30>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a08      	ldr	r2, [pc, #32]	; (8001948 <MX_DMA_Init+0x30>)
 8001928:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_DMA_Init+0x30>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]

}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800

0800194c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08e      	sub	sp, #56	; 0x38
 8001950:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
 8001966:	4bb5      	ldr	r3, [pc, #724]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4ab4      	ldr	r2, [pc, #720]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 800196c:	f043 0310 	orr.w	r3, r3, #16
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4bb2      	ldr	r3, [pc, #712]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f003 0310 	and.w	r3, r3, #16
 800197a:	623b      	str	r3, [r7, #32]
 800197c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	4bae      	ldr	r3, [pc, #696]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4aad      	ldr	r2, [pc, #692]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4bab      	ldr	r3, [pc, #684]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	61bb      	str	r3, [r7, #24]
 800199e:	4ba7      	ldr	r3, [pc, #668]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4aa6      	ldr	r2, [pc, #664]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 80019a4:	f043 0320 	orr.w	r3, r3, #32
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4ba4      	ldr	r3, [pc, #656]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0320 	and.w	r3, r3, #32
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	4ba0      	ldr	r3, [pc, #640]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4a9f      	ldr	r2, [pc, #636]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 80019c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019c4:	6313      	str	r3, [r2, #48]	; 0x30
 80019c6:	4b9d      	ldr	r3, [pc, #628]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
 80019d6:	4b99      	ldr	r3, [pc, #612]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	4a98      	ldr	r2, [pc, #608]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	6313      	str	r3, [r2, #48]	; 0x30
 80019e2:	4b96      	ldr	r3, [pc, #600]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	60fb      	str	r3, [r7, #12]
 80019f2:	4b92      	ldr	r3, [pc, #584]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	4a91      	ldr	r2, [pc, #580]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 80019f8:	f043 0302 	orr.w	r3, r3, #2
 80019fc:	6313      	str	r3, [r2, #48]	; 0x30
 80019fe:	4b8f      	ldr	r3, [pc, #572]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	60fb      	str	r3, [r7, #12]
 8001a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60bb      	str	r3, [r7, #8]
 8001a0e:	4b8b      	ldr	r3, [pc, #556]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a8a      	ldr	r2, [pc, #552]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 8001a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b88      	ldr	r3, [pc, #544]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	4b84      	ldr	r3, [pc, #528]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a83      	ldr	r2, [pc, #524]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 8001a30:	f043 0308 	orr.w	r3, r3, #8
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b81      	ldr	r3, [pc, #516]	; (8001c3c <MX_GPIO_Init+0x2f0>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GND_Pin|COL3_Pin|COL2_Pin|COL1_Pin
 8001a42:	2200      	movs	r2, #0
 8001a44:	f244 31a0 	movw	r1, #17312	; 0x43a0
 8001a48:	487d      	ldr	r0, [pc, #500]	; (8001c40 <MX_GPIO_Init+0x2f4>)
 8001a4a:	f003 fa0f 	bl	8004e6c <HAL_GPIO_WritePin>
                          |LCD5110RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GNDC13_Pin|GNDC3_Pin, GPIO_PIN_RESET);
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f242 0108 	movw	r1, #8200	; 0x2008
 8001a54:	487b      	ldr	r0, [pc, #492]	; (8001c44 <MX_GPIO_Init+0x2f8>)
 8001a56:	f003 fa09 	bl	8004e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GNDF9_Pin|GNDF10_Pin, GPIO_PIN_RESET);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001a60:	4879      	ldr	r0, [pc, #484]	; (8001c48 <MX_GPIO_Init+0x2fc>)
 8001a62:	f003 fa03 	bl	8004e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GNDA1_Pin|GNDA4_Pin, GPIO_PIN_RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2112      	movs	r1, #18
 8001a6a:	4878      	ldr	r0, [pc, #480]	; (8001c4c <MX_GPIO_Init+0x300>)
 8001a6c:	f003 f9fe 	bl	8004e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, COL4_Pin|GNDG15_Pin, GPIO_PIN_RESET);
 8001a70:	2200      	movs	r2, #0
 8001a72:	f248 0102 	movw	r1, #32770	; 0x8002
 8001a76:	4876      	ldr	r0, [pc, #472]	; (8001c50 <MX_GPIO_Init+0x304>)
 8001a78:	f003 f9f8 	bl	8004e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD5110SCE_GPIO_Port, LCD5110SCE_Pin, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a82:	486f      	ldr	r0, [pc, #444]	; (8001c40 <MX_GPIO_Init+0x2f4>)
 8001a84:	f003 f9f2 	bl	8004e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD5110SDIN_Pin|LCD5110DC_Pin|LCD5110SCLK_Pin, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8001a8e:	4871      	ldr	r0, [pc, #452]	; (8001c54 <MX_GPIO_Init+0x308>)
 8001a90:	f003 f9ec 	bl	8004e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 8001a94:	2200      	movs	r2, #0
 8001a96:	213f      	movs	r1, #63	; 0x3f
 8001a98:	486f      	ldr	r0, [pc, #444]	; (8001c58 <MX_GPIO_Init+0x30c>)
 8001a9a:	f003 f9e7 	bl	8004e6c <HAL_GPIO_WritePin>
                          |SW5_Pin|SW6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8001aa4:	486a      	ldr	r0, [pc, #424]	; (8001c50 <MX_GPIO_Init+0x304>)
 8001aa6:	f003 f9e1 	bl	8004e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Trig2_Pin ROW1_Pin ROW2_Pin ROW3_Pin
                           ROW4_Pin */
  GPIO_InitStruct.Pin = Trig2_Pin|ROW1_Pin|ROW2_Pin|ROW3_Pin
 8001aaa:	f643 4304 	movw	r3, #15364	; 0x3c04
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
                          |ROW4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ab0:	4b6a      	ldr	r3, [pc, #424]	; (8001c5c <MX_GPIO_Init+0x310>)
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abc:	4619      	mov	r1, r3
 8001abe:	4860      	ldr	r0, [pc, #384]	; (8001c40 <MX_GPIO_Init+0x2f4>)
 8001ac0:	f003 f820 	bl	8004b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : GND_Pin COL3_Pin COL2_Pin COL1_Pin */
  GPIO_InitStruct.Pin = GND_Pin|COL3_Pin|COL2_Pin|COL1_Pin;
 8001ac4:	f44f 7368 	mov.w	r3, #928	; 0x3a0
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ada:	4619      	mov	r1, r3
 8001adc:	4858      	ldr	r0, [pc, #352]	; (8001c40 <MX_GPIO_Init+0x2f4>)
 8001ade:	f003 f811 	bl	8004b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNDC13_Pin GNDC3_Pin */
  GPIO_InitStruct.Pin = GNDC13_Pin|GNDC3_Pin;
 8001ae2:	f242 0308 	movw	r3, #8200	; 0x2008
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aec:	2302      	movs	r3, #2
 8001aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af8:	4619      	mov	r1, r3
 8001afa:	4852      	ldr	r0, [pc, #328]	; (8001c44 <MX_GPIO_Init+0x2f8>)
 8001afc:	f003 f802 	bl	8004b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : Trig1_Pin */
  GPIO_InitStruct.Pin = Trig1_Pin;
 8001b00:	2301      	movs	r3, #1
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b04:	4b56      	ldr	r3, [pc, #344]	; (8001c60 <MX_GPIO_Init+0x314>)
 8001b06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Trig1_GPIO_Port, &GPIO_InitStruct);
 8001b0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b10:	4619      	mov	r1, r3
 8001b12:	484d      	ldr	r0, [pc, #308]	; (8001c48 <MX_GPIO_Init+0x2fc>)
 8001b14:	f002 fff6 	bl	8004b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNDF9_Pin GNDF10_Pin */
  GPIO_InitStruct.Pin = GNDF9_Pin|GNDF10_Pin;
 8001b18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b22:	2302      	movs	r3, #2
 8001b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4845      	ldr	r0, [pc, #276]	; (8001c48 <MX_GPIO_Init+0x2fc>)
 8001b32:	f002 ffe7 	bl	8004b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : GNDA1_Pin GNDA4_Pin */
  GPIO_InitStruct.Pin = GNDA1_Pin|GNDA4_Pin;
 8001b36:	2312      	movs	r3, #18
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	483f      	ldr	r0, [pc, #252]	; (8001c4c <MX_GPIO_Init+0x300>)
 8001b4e:	f002 ffd9 	bl	8004b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL4_Pin GNDG15_Pin */
  GPIO_InitStruct.Pin = COL4_Pin|GNDG15_Pin;
 8001b52:	f248 0302 	movw	r3, #32770	; 0x8002
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b60:	2300      	movs	r3, #0
 8001b62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4839      	ldr	r0, [pc, #228]	; (8001c50 <MX_GPIO_Init+0x304>)
 8001b6c:	f002 ffca 	bl	8004b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD5110RESET_Pin */
  GPIO_InitStruct.Pin = LCD5110RESET_Pin;
 8001b70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b76:	2301      	movs	r3, #1
 8001b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD5110RESET_GPIO_Port, &GPIO_InitStruct);
 8001b82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b86:	4619      	mov	r1, r3
 8001b88:	482d      	ldr	r0, [pc, #180]	; (8001c40 <MX_GPIO_Init+0x2f4>)
 8001b8a:	f002 ffbb 	bl	8004b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD5110SCE_Pin */
  GPIO_InitStruct.Pin = LCD5110SCE_Pin;
 8001b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b94:	2301      	movs	r3, #1
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD5110SCE_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4826      	ldr	r0, [pc, #152]	; (8001c40 <MX_GPIO_Init+0x2f4>)
 8001ba8:	f002 ffac 	bl	8004b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD5110SDIN_Pin LCD5110DC_Pin LCD5110SCLK_Pin */
  GPIO_InitStruct.Pin = LCD5110SDIN_Pin|LCD5110DC_Pin|LCD5110SCLK_Pin;
 8001bac:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4823      	ldr	r0, [pc, #140]	; (8001c54 <MX_GPIO_Init+0x308>)
 8001bc6:	f002 ff9d 	bl	8004b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_Pin SW2_Pin SW3_Pin SW4_Pin
                           SW5_Pin SW6_Pin */
  GPIO_InitStruct.Pin = SW1_Pin|SW2_Pin|SW3_Pin|SW4_Pin
 8001bca:	233f      	movs	r3, #63	; 0x3f
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
                          |SW5_Pin|SW6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bde:	4619      	mov	r1, r3
 8001be0:	481d      	ldr	r0, [pc, #116]	; (8001c58 <MX_GPIO_Init+0x30c>)
 8001be2:	f002 ff8f 	bl	8004b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8001be6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bec:	2301      	movs	r3, #1
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4814      	ldr	r0, [pc, #80]	; (8001c50 <MX_GPIO_Init+0x304>)
 8001c00:	f002 ff80 	bl	8004b04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	2006      	movs	r0, #6
 8001c0a:	f002 fd5e 	bl	80046ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001c0e:	2006      	movs	r0, #6
 8001c10:	f002 fd77 	bl	8004702 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001c14:	2200      	movs	r2, #0
 8001c16:	2100      	movs	r1, #0
 8001c18:	2008      	movs	r0, #8
 8001c1a:	f002 fd56 	bl	80046ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c1e:	2008      	movs	r0, #8
 8001c20:	f002 fd6f 	bl	8004702 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2100      	movs	r1, #0
 8001c28:	2028      	movs	r0, #40	; 0x28
 8001c2a:	f002 fd4e 	bl	80046ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c2e:	2028      	movs	r0, #40	; 0x28
 8001c30:	f002 fd67 	bl	8004702 <HAL_NVIC_EnableIRQ>

}
 8001c34:	bf00      	nop
 8001c36:	3738      	adds	r7, #56	; 0x38
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40021400 	.word	0x40021400
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	40021800 	.word	0x40021800
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40020c00 	.word	0x40020c00
 8001c5c:	10210000 	.word	0x10210000
 8001c60:	10110000 	.word	0x10110000

08001c64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c68:	b672      	cpsid	i
}
 8001c6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <Error_Handler+0x8>
	...

08001c70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b10      	ldr	r3, [pc, #64]	; (8001cbc <HAL_MspInit+0x4c>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	4a0f      	ldr	r2, [pc, #60]	; (8001cbc <HAL_MspInit+0x4c>)
 8001c80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c84:	6453      	str	r3, [r2, #68]	; 0x44
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <HAL_MspInit+0x4c>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <HAL_MspInit+0x4c>)
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	4a08      	ldr	r2, [pc, #32]	; (8001cbc <HAL_MspInit+0x4c>)
 8001c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca2:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_MspInit+0x4c>)
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	603b      	str	r3, [r7, #0]
 8001cac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001cae:	2005      	movs	r0, #5
 8001cb0:	f002 fd00 	bl	80046b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40023800 	.word	0x40023800

08001cc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08c      	sub	sp, #48	; 0x30
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 031c 	add.w	r3, r7, #28
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a6b      	ldr	r2, [pc, #428]	; (8001e8c <HAL_ADC_MspInit+0x1cc>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d172      	bne.n	8001dc8 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61bb      	str	r3, [r7, #24]
 8001ce6:	4b6a      	ldr	r3, [pc, #424]	; (8001e90 <HAL_ADC_MspInit+0x1d0>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4a69      	ldr	r2, [pc, #420]	; (8001e90 <HAL_ADC_MspInit+0x1d0>)
 8001cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf2:	4b67      	ldr	r3, [pc, #412]	; (8001e90 <HAL_ADC_MspInit+0x1d0>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]
 8001d02:	4b63      	ldr	r3, [pc, #396]	; (8001e90 <HAL_ADC_MspInit+0x1d0>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a62      	ldr	r2, [pc, #392]	; (8001e90 <HAL_ADC_MspInit+0x1d0>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b60      	ldr	r3, [pc, #384]	; (8001e90 <HAL_ADC_MspInit+0x1d0>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	617b      	str	r3, [r7, #20]
 8001d18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	4b5c      	ldr	r3, [pc, #368]	; (8001e90 <HAL_ADC_MspInit+0x1d0>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a5b      	ldr	r2, [pc, #364]	; (8001e90 <HAL_ADC_MspInit+0x1d0>)
 8001d24:	f043 0302 	orr.w	r3, r3, #2
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b59      	ldr	r3, [pc, #356]	; (8001e90 <HAL_ADC_MspInit+0x1d0>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC4     ------> ADC1_IN14
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = DC_V_Pin|BT_C_Pin;
 8001d36:	2311      	movs	r3, #17
 8001d38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d42:	f107 031c 	add.w	r3, r7, #28
 8001d46:	4619      	mov	r1, r3
 8001d48:	4852      	ldr	r0, [pc, #328]	; (8001e94 <HAL_ADC_MspInit+0x1d4>)
 8001d4a:	f002 fedb 	bl	8004b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BT_V_Pin;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d52:	2303      	movs	r3, #3
 8001d54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BT_V_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	484d      	ldr	r0, [pc, #308]	; (8001e98 <HAL_ADC_MspInit+0x1d8>)
 8001d62:	f002 fecf 	bl	8004b04 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001d66:	4b4d      	ldr	r3, [pc, #308]	; (8001e9c <HAL_ADC_MspInit+0x1dc>)
 8001d68:	4a4d      	ldr	r2, [pc, #308]	; (8001ea0 <HAL_ADC_MspInit+0x1e0>)
 8001d6a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001d6c:	4b4b      	ldr	r3, [pc, #300]	; (8001e9c <HAL_ADC_MspInit+0x1dc>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d72:	4b4a      	ldr	r3, [pc, #296]	; (8001e9c <HAL_ADC_MspInit+0x1dc>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d78:	4b48      	ldr	r3, [pc, #288]	; (8001e9c <HAL_ADC_MspInit+0x1dc>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d7e:	4b47      	ldr	r3, [pc, #284]	; (8001e9c <HAL_ADC_MspInit+0x1dc>)
 8001d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d84:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d86:	4b45      	ldr	r3, [pc, #276]	; (8001e9c <HAL_ADC_MspInit+0x1dc>)
 8001d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d8c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d8e:	4b43      	ldr	r3, [pc, #268]	; (8001e9c <HAL_ADC_MspInit+0x1dc>)
 8001d90:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d94:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d96:	4b41      	ldr	r3, [pc, #260]	; (8001e9c <HAL_ADC_MspInit+0x1dc>)
 8001d98:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d9c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d9e:	4b3f      	ldr	r3, [pc, #252]	; (8001e9c <HAL_ADC_MspInit+0x1dc>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001da4:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <HAL_ADC_MspInit+0x1dc>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001daa:	483c      	ldr	r0, [pc, #240]	; (8001e9c <HAL_ADC_MspInit+0x1dc>)
 8001dac:	f002 fcc4 	bl	8004738 <HAL_DMA_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8001db6:	f7ff ff55 	bl	8001c64 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a37      	ldr	r2, [pc, #220]	; (8001e9c <HAL_ADC_MspInit+0x1dc>)
 8001dbe:	639a      	str	r2, [r3, #56]	; 0x38
 8001dc0:	4a36      	ldr	r2, [pc, #216]	; (8001e9c <HAL_ADC_MspInit+0x1dc>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001dc6:	e05d      	b.n	8001e84 <HAL_ADC_MspInit+0x1c4>
  else if(hadc->Instance==ADC3)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a35      	ldr	r2, [pc, #212]	; (8001ea4 <HAL_ADC_MspInit+0x1e4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d158      	bne.n	8001e84 <HAL_ADC_MspInit+0x1c4>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
 8001dd6:	4b2e      	ldr	r3, [pc, #184]	; (8001e90 <HAL_ADC_MspInit+0x1d0>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	4a2d      	ldr	r2, [pc, #180]	; (8001e90 <HAL_ADC_MspInit+0x1d0>)
 8001ddc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de0:	6453      	str	r3, [r2, #68]	; 0x44
 8001de2:	4b2b      	ldr	r3, [pc, #172]	; (8001e90 <HAL_ADC_MspInit+0x1d0>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	4b27      	ldr	r3, [pc, #156]	; (8001e90 <HAL_ADC_MspInit+0x1d0>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a26      	ldr	r2, [pc, #152]	; (8001e90 <HAL_ADC_MspInit+0x1d0>)
 8001df8:	f043 0320 	orr.w	r3, r3, #32
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b24      	ldr	r3, [pc, #144]	; (8001e90 <HAL_ADC_MspInit+0x1d0>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0320 	and.w	r3, r3, #32
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PW_C_Pin|PW_V_Pin;
 8001e0a:	23c0      	movs	r3, #192	; 0xc0
 8001e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e16:	f107 031c 	add.w	r3, r7, #28
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4822      	ldr	r0, [pc, #136]	; (8001ea8 <HAL_ADC_MspInit+0x1e8>)
 8001e1e:	f002 fe71 	bl	8004b04 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001e22:	4b22      	ldr	r3, [pc, #136]	; (8001eac <HAL_ADC_MspInit+0x1ec>)
 8001e24:	4a22      	ldr	r2, [pc, #136]	; (8001eb0 <HAL_ADC_MspInit+0x1f0>)
 8001e26:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001e28:	4b20      	ldr	r3, [pc, #128]	; (8001eac <HAL_ADC_MspInit+0x1ec>)
 8001e2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e2e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e30:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <HAL_ADC_MspInit+0x1ec>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e36:	4b1d      	ldr	r3, [pc, #116]	; (8001eac <HAL_ADC_MspInit+0x1ec>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <HAL_ADC_MspInit+0x1ec>)
 8001e3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e42:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e44:	4b19      	ldr	r3, [pc, #100]	; (8001eac <HAL_ADC_MspInit+0x1ec>)
 8001e46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e4a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_ADC_MspInit+0x1ec>)
 8001e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e52:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001e54:	4b15      	ldr	r3, [pc, #84]	; (8001eac <HAL_ADC_MspInit+0x1ec>)
 8001e56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e5a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001e5c:	4b13      	ldr	r3, [pc, #76]	; (8001eac <HAL_ADC_MspInit+0x1ec>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e62:	4b12      	ldr	r3, [pc, #72]	; (8001eac <HAL_ADC_MspInit+0x1ec>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001e68:	4810      	ldr	r0, [pc, #64]	; (8001eac <HAL_ADC_MspInit+0x1ec>)
 8001e6a:	f002 fc65 	bl	8004738 <HAL_DMA_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d001      	beq.n	8001e78 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 8001e74:	f7ff fef6 	bl	8001c64 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a0c      	ldr	r2, [pc, #48]	; (8001eac <HAL_ADC_MspInit+0x1ec>)
 8001e7c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <HAL_ADC_MspInit+0x1ec>)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001e84:	bf00      	nop
 8001e86:	3730      	adds	r7, #48	; 0x30
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40012000 	.word	0x40012000
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020800 	.word	0x40020800
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	200004c0 	.word	0x200004c0
 8001ea0:	40026410 	.word	0x40026410
 8001ea4:	40012200 	.word	0x40012200
 8001ea8:	40021400 	.word	0x40021400
 8001eac:	200002e8 	.word	0x200002e8
 8001eb0:	40026428 	.word	0x40026428

08001eb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	; 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a19      	ldr	r2, [pc, #100]	; (8001f38 <HAL_I2C_MspInit+0x84>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d12c      	bne.n	8001f30 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <HAL_I2C_MspInit+0x88>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <HAL_I2C_MspInit+0x88>)
 8001ee0:	f043 0302 	orr.w	r3, r3, #2
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_I2C_MspInit+0x88>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	613b      	str	r3, [r7, #16]
 8001ef0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ef2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ef8:	2312      	movs	r3, #18
 8001efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f00:	2303      	movs	r3, #3
 8001f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f04:	2304      	movs	r3, #4
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	480c      	ldr	r0, [pc, #48]	; (8001f40 <HAL_I2C_MspInit+0x8c>)
 8001f10:	f002 fdf8 	bl	8004b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <HAL_I2C_MspInit+0x88>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	4a07      	ldr	r2, [pc, #28]	; (8001f3c <HAL_I2C_MspInit+0x88>)
 8001f1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f22:	6413      	str	r3, [r2, #64]	; 0x40
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <HAL_I2C_MspInit+0x88>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	; 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40005400 	.word	0x40005400
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020400 	.word	0x40020400

08001f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f54:	d116      	bne.n	8001f84 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <HAL_TIM_Base_MspInit+0xa8>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a23      	ldr	r2, [pc, #140]	; (8001fec <HAL_TIM_Base_MspInit+0xa8>)
 8001f60:	f043 0301 	orr.w	r3, r3, #1
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b21      	ldr	r3, [pc, #132]	; (8001fec <HAL_TIM_Base_MspInit+0xa8>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	617b      	str	r3, [r7, #20]
 8001f70:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	201c      	movs	r0, #28
 8001f78:	f002 fba7 	bl	80046ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f7c:	201c      	movs	r0, #28
 8001f7e:	f002 fbc0 	bl	8004702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f82:	e02e      	b.n	8001fe2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a19      	ldr	r2, [pc, #100]	; (8001ff0 <HAL_TIM_Base_MspInit+0xac>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d116      	bne.n	8001fbc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	4b16      	ldr	r3, [pc, #88]	; (8001fec <HAL_TIM_Base_MspInit+0xa8>)
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	4a15      	ldr	r2, [pc, #84]	; (8001fec <HAL_TIM_Base_MspInit+0xa8>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f9e:	4b13      	ldr	r3, [pc, #76]	; (8001fec <HAL_TIM_Base_MspInit+0xa8>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	613b      	str	r3, [r7, #16]
 8001fa8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001faa:	2200      	movs	r2, #0
 8001fac:	2101      	movs	r1, #1
 8001fae:	201d      	movs	r0, #29
 8001fb0:	f002 fb8b 	bl	80046ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fb4:	201d      	movs	r0, #29
 8001fb6:	f002 fba4 	bl	8004702 <HAL_NVIC_EnableIRQ>
}
 8001fba:	e012      	b.n	8001fe2 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM5)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0c      	ldr	r2, [pc, #48]	; (8001ff4 <HAL_TIM_Base_MspInit+0xb0>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d10d      	bne.n	8001fe2 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b08      	ldr	r3, [pc, #32]	; (8001fec <HAL_TIM_Base_MspInit+0xa8>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	4a07      	ldr	r2, [pc, #28]	; (8001fec <HAL_TIM_Base_MspInit+0xa8>)
 8001fd0:	f043 0308 	orr.w	r3, r3, #8
 8001fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd6:	4b05      	ldr	r3, [pc, #20]	; (8001fec <HAL_TIM_Base_MspInit+0xa8>)
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
}
 8001fe2:	bf00      	nop
 8001fe4:	3718      	adds	r7, #24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	40000400 	.word	0x40000400
 8001ff4:	40000c00 	.word	0x40000c00

08001ff8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	; 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002000:	f107 0314 	add.w	r3, r7, #20
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002018:	d13b      	bne.n	8002092 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
 800201e:	4b1f      	ldr	r3, [pc, #124]	; (800209c <HAL_TIM_MspPostInit+0xa4>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	4a1e      	ldr	r2, [pc, #120]	; (800209c <HAL_TIM_MspPostInit+0xa4>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	6313      	str	r3, [r2, #48]	; 0x30
 800202a:	4b1c      	ldr	r3, [pc, #112]	; (800209c <HAL_TIM_MspPostInit+0xa4>)
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_TIM_MspPostInit+0xa4>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	4a17      	ldr	r2, [pc, #92]	; (800209c <HAL_TIM_MspPostInit+0xa4>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	6313      	str	r3, [r2, #48]	; 0x30
 8002046:	4b15      	ldr	r3, [pc, #84]	; (800209c <HAL_TIM_MspPostInit+0xa4>)
 8002048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8002052:	230d      	movs	r3, #13
 8002054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002056:	2302      	movs	r3, #2
 8002058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002062:	2301      	movs	r3, #1
 8002064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002066:	f107 0314 	add.w	r3, r7, #20
 800206a:	4619      	mov	r1, r3
 800206c:	480c      	ldr	r0, [pc, #48]	; (80020a0 <HAL_TIM_MspPostInit+0xa8>)
 800206e:	f002 fd49 	bl	8004b04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002072:	2308      	movs	r3, #8
 8002074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002076:	2302      	movs	r3, #2
 8002078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002082:	2301      	movs	r3, #1
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002086:	f107 0314 	add.w	r3, r7, #20
 800208a:	4619      	mov	r1, r3
 800208c:	4805      	ldr	r0, [pc, #20]	; (80020a4 <HAL_TIM_MspPostInit+0xac>)
 800208e:	f002 fd39 	bl	8004b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002092:	bf00      	nop
 8002094:	3728      	adds	r7, #40	; 0x28
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40023800 	.word	0x40023800
 80020a0:	40020000 	.word	0x40020000
 80020a4:	40020400 	.word	0x40020400

080020a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08a      	sub	sp, #40	; 0x28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 0314 	add.w	r3, r7, #20
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a19      	ldr	r2, [pc, #100]	; (800212c <HAL_UART_MspInit+0x84>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d12c      	bne.n	8002124 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
 80020ce:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_UART_MspInit+0x88>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a17      	ldr	r2, [pc, #92]	; (8002130 <HAL_UART_MspInit+0x88>)
 80020d4:	f043 0310 	orr.w	r3, r3, #16
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b15      	ldr	r3, [pc, #84]	; (8002130 <HAL_UART_MspInit+0x88>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f003 0310 	and.w	r3, r3, #16
 80020e2:	613b      	str	r3, [r7, #16]
 80020e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b11      	ldr	r3, [pc, #68]	; (8002130 <HAL_UART_MspInit+0x88>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a10      	ldr	r2, [pc, #64]	; (8002130 <HAL_UART_MspInit+0x88>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b0e      	ldr	r3, [pc, #56]	; (8002130 <HAL_UART_MspInit+0x88>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002102:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002108:	2302      	movs	r3, #2
 800210a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002110:	2303      	movs	r3, #3
 8002112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002114:	2307      	movs	r3, #7
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	4619      	mov	r1, r3
 800211e:	4805      	ldr	r0, [pc, #20]	; (8002134 <HAL_UART_MspInit+0x8c>)
 8002120:	f002 fcf0 	bl	8004b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002124:	bf00      	nop
 8002126:	3728      	adds	r7, #40	; 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40011000 	.word	0x40011000
 8002130:	40023800 	.word	0x40023800
 8002134:	40020000 	.word	0x40020000

08002138 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800213c:	e7fe      	b.n	800213c <NMI_Handler+0x4>

0800213e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <HardFault_Handler+0x4>

08002144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <MemManage_Handler+0x4>

0800214a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800214e:	e7fe      	b.n	800214e <BusFault_Handler+0x4>

08002150 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002154:	e7fe      	b.n	8002154 <UsageFault_Handler+0x4>

08002156 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002156:	b480      	push	{r7}
 8002158:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002184:	f001 fd70 	bl	8003c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}

0800218c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002190:	2001      	movs	r0, #1
 8002192:	f002 fe9f 	bl	8004ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  //if(	(((TIM5->CNT-A_tick)%20000-20000)>=-40)&&(((TIM5->CNT-A_tick)%20000-20000)<=40)&&ADCflag==0	)
  //{
  Ala_tick=A_tick;
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <EXTI0_IRQHandler+0x28>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a07      	ldr	r2, [pc, #28]	; (80021b8 <EXTI0_IRQHandler+0x2c>)
 800219c:	6013      	str	r3, [r2, #0]
  A_tick=TIM5->CNT;
 800219e:	4b07      	ldr	r3, [pc, #28]	; (80021bc <EXTI0_IRQHandler+0x30>)
 80021a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a2:	461a      	mov	r2, r3
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <EXTI0_IRQHandler+0x28>)
 80021a6:	601a      	str	r2, [r3, #0]
  ADCflag=1;
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <EXTI0_IRQHandler+0x34>)
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
  //}
  //HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  /* USER CODE END EXTI0_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	2000061c 	.word	0x2000061c
 80021b8:	20000610 	.word	0x20000610
 80021bc:	40000c00 	.word	0x40000c00
 80021c0:	20000208 	.word	0x20000208

080021c4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80021c8:	2004      	movs	r0, #4
 80021ca:	f002 fe83 	bl	8004ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  //if((TIM5->CNT-A_tick)<=20040&&(TIM5->CNT-A_tick)<=19960)

    B_tick=TIM5->CNT;
 80021ce:	4b03      	ldr	r3, [pc, #12]	; (80021dc <EXTI2_IRQHandler+0x18>)
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	461a      	mov	r2, r3
 80021d4:	4b02      	ldr	r3, [pc, #8]	; (80021e0 <EXTI2_IRQHandler+0x1c>)
 80021d6:	601a      	str	r2, [r3, #0]

  /* USER CODE END EXTI2_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40000c00 	.word	0x40000c00
 80021e0:	20000624 	.word	0x20000624

080021e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80021ea:	48ac      	ldr	r0, [pc, #688]	; (800249c <TIM2_IRQHandler+0x2b8>)
 80021ec:	f004 fe22 	bl	8006e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */


  TIM2->CCR1=(COSA[COSNum]*COSNul+1.0)*(TIM2->ARR-1)/2.0;
 80021f0:	4bab      	ldr	r3, [pc, #684]	; (80024a0 <TIM2_IRQHandler+0x2bc>)
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	4aab      	ldr	r2, [pc, #684]	; (80024a4 <TIM2_IRQHandler+0x2c0>)
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	ed93 7a00 	vldr	s14, [r3]
 80021fe:	4baa      	ldr	r3, [pc, #680]	; (80024a8 <TIM2_IRQHandler+0x2c4>)
 8002200:	edd3 7a00 	vldr	s15, [r3]
 8002204:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002208:	ee17 0a90 	vmov	r0, s15
 800220c:	f7fe f99c 	bl	8000548 <__aeabi_f2d>
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	4ba5      	ldr	r3, [pc, #660]	; (80024ac <TIM2_IRQHandler+0x2c8>)
 8002216:	f7fe f839 	bl	800028c <__adddf3>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4614      	mov	r4, r2
 8002220:	461d      	mov	r5, r3
 8002222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002228:	3b01      	subs	r3, #1
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe f96a 	bl	8000504 <__aeabi_ui2d>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4620      	mov	r0, r4
 8002236:	4629      	mov	r1, r5
 8002238:	f7fe f9de 	bl	80005f8 <__aeabi_dmul>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	4610      	mov	r0, r2
 8002242:	4619      	mov	r1, r3
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800224c:	f7fe fafe 	bl	800084c <__aeabi_ddiv>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	f7fe fca4 	bl	8000ba8 <__aeabi_d2uiz>
 8002260:	4603      	mov	r3, r0
 8002262:	6363      	str	r3, [r4, #52]	; 0x34
  TIM2->CCR3=(COSB[COSNum]*COSNul+1.0)*(TIM2->ARR-1)/2.0;
 8002264:	4b8e      	ldr	r3, [pc, #568]	; (80024a0 <TIM2_IRQHandler+0x2bc>)
 8002266:	881b      	ldrh	r3, [r3, #0]
 8002268:	4a91      	ldr	r2, [pc, #580]	; (80024b0 <TIM2_IRQHandler+0x2cc>)
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	ed93 7a00 	vldr	s14, [r3]
 8002272:	4b8d      	ldr	r3, [pc, #564]	; (80024a8 <TIM2_IRQHandler+0x2c4>)
 8002274:	edd3 7a00 	vldr	s15, [r3]
 8002278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227c:	ee17 0a90 	vmov	r0, s15
 8002280:	f7fe f962 	bl	8000548 <__aeabi_f2d>
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	4b88      	ldr	r3, [pc, #544]	; (80024ac <TIM2_IRQHandler+0x2c8>)
 800228a:	f7fd ffff 	bl	800028c <__adddf3>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4614      	mov	r4, r2
 8002294:	461d      	mov	r5, r3
 8002296:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	3b01      	subs	r3, #1
 800229e:	4618      	mov	r0, r3
 80022a0:	f7fe f930 	bl	8000504 <__aeabi_ui2d>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4620      	mov	r0, r4
 80022aa:	4629      	mov	r1, r5
 80022ac:	f7fe f9a4 	bl	80005f8 <__aeabi_dmul>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022c0:	f7fe fac4 	bl	800084c <__aeabi_ddiv>
 80022c4:	4602      	mov	r2, r0
 80022c6:	460b      	mov	r3, r1
 80022c8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80022cc:	4610      	mov	r0, r2
 80022ce:	4619      	mov	r1, r3
 80022d0:	f7fe fc6a 	bl	8000ba8 <__aeabi_d2uiz>
 80022d4:	4603      	mov	r3, r0
 80022d6:	63e3      	str	r3, [r4, #60]	; 0x3c
  TIM2->CCR4=(COSC[COSNum]*COSNul+1.0)*(TIM2->ARR-1)/2.0;
 80022d8:	4b71      	ldr	r3, [pc, #452]	; (80024a0 <TIM2_IRQHandler+0x2bc>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	4a75      	ldr	r2, [pc, #468]	; (80024b4 <TIM2_IRQHandler+0x2d0>)
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	ed93 7a00 	vldr	s14, [r3]
 80022e6:	4b70      	ldr	r3, [pc, #448]	; (80024a8 <TIM2_IRQHandler+0x2c4>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022f0:	ee17 0a90 	vmov	r0, s15
 80022f4:	f7fe f928 	bl	8000548 <__aeabi_f2d>
 80022f8:	f04f 0200 	mov.w	r2, #0
 80022fc:	4b6b      	ldr	r3, [pc, #428]	; (80024ac <TIM2_IRQHandler+0x2c8>)
 80022fe:	f7fd ffc5 	bl	800028c <__adddf3>
 8002302:	4602      	mov	r2, r0
 8002304:	460b      	mov	r3, r1
 8002306:	4614      	mov	r4, r2
 8002308:	461d      	mov	r5, r3
 800230a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800230e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002310:	3b01      	subs	r3, #1
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe f8f6 	bl	8000504 <__aeabi_ui2d>
 8002318:	4602      	mov	r2, r0
 800231a:	460b      	mov	r3, r1
 800231c:	4620      	mov	r0, r4
 800231e:	4629      	mov	r1, r5
 8002320:	f7fe f96a 	bl	80005f8 <__aeabi_dmul>
 8002324:	4602      	mov	r2, r0
 8002326:	460b      	mov	r3, r1
 8002328:	4610      	mov	r0, r2
 800232a:	4619      	mov	r1, r3
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002334:	f7fe fa8a 	bl	800084c <__aeabi_ddiv>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002340:	4610      	mov	r0, r2
 8002342:	4619      	mov	r1, r3
 8002344:	f7fe fc30 	bl	8000ba8 <__aeabi_d2uiz>
 8002348:	4603      	mov	r3, r0
 800234a:	6423      	str	r3, [r4, #64]	; 0x40
  COSNum++;
 800234c:	4b54      	ldr	r3, [pc, #336]	; (80024a0 <TIM2_IRQHandler+0x2bc>)
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	3301      	adds	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	4b52      	ldr	r3, [pc, #328]	; (80024a0 <TIM2_IRQHandler+0x2bc>)
 8002356:	801a      	strh	r2, [r3, #0]
  if (COSNum==600)
 8002358:	4b51      	ldr	r3, [pc, #324]	; (80024a0 <TIM2_IRQHandler+0x2bc>)
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8002360:	d102      	bne.n	8002368 <TIM2_IRQHandler+0x184>
  {
  	COSNum=0;
 8002362:	4b4f      	ldr	r3, [pc, #316]	; (80024a0 <TIM2_IRQHandler+0x2bc>)
 8002364:	2200      	movs	r2, #0
 8002366:	801a      	strh	r2, [r3, #0]
	}
  if((TIM5->CNT)-A_tick>(((A_tick-Ala_tick)/8.0)-PHASE[0])&&ADCflag==1)
 8002368:	4b53      	ldr	r3, [pc, #332]	; (80024b8 <TIM2_IRQHandler+0x2d4>)
 800236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800236c:	4a53      	ldr	r2, [pc, #332]	; (80024bc <TIM2_IRQHandler+0x2d8>)
 800236e:	6812      	ldr	r2, [r2, #0]
 8002370:	1a9b      	subs	r3, r3, r2
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe f8c6 	bl	8000504 <__aeabi_ui2d>
 8002378:	4604      	mov	r4, r0
 800237a:	460d      	mov	r5, r1
 800237c:	4b4f      	ldr	r3, [pc, #316]	; (80024bc <TIM2_IRQHandler+0x2d8>)
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	4b4f      	ldr	r3, [pc, #316]	; (80024c0 <TIM2_IRQHandler+0x2dc>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe f8cc 	bl	8000524 <__aeabi_i2d>
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	4b4c      	ldr	r3, [pc, #304]	; (80024c4 <TIM2_IRQHandler+0x2e0>)
 8002392:	f7fe fa5b 	bl	800084c <__aeabi_ddiv>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4690      	mov	r8, r2
 800239c:	4699      	mov	r9, r3
 800239e:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <TIM2_IRQHandler+0x2e4>)
 80023a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f8bd 	bl	8000524 <__aeabi_i2d>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4640      	mov	r0, r8
 80023b0:	4649      	mov	r1, r9
 80023b2:	f7fd ff69 	bl	8000288 <__aeabi_dsub>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4620      	mov	r0, r4
 80023bc:	4629      	mov	r1, r5
 80023be:	f7fe fbab 	bl	8000b18 <__aeabi_dcmpgt>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d019      	beq.n	80023fc <TIM2_IRQHandler+0x218>
 80023c8:	4b40      	ldr	r3, [pc, #256]	; (80024cc <TIM2_IRQHandler+0x2e8>)
 80023ca:	f993 3000 	ldrsb.w	r3, [r3]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d114      	bne.n	80023fc <TIM2_IRQHandler+0x218>
  {
		memcpy(ADC3_Value_mem1,ADC3_Value,16);
 80023d2:	4b3f      	ldr	r3, [pc, #252]	; (80024d0 <TIM2_IRQHandler+0x2ec>)
 80023d4:	4a3f      	ldr	r2, [pc, #252]	; (80024d4 <TIM2_IRQHandler+0x2f0>)
 80023d6:	6814      	ldr	r4, [r2, #0]
 80023d8:	6850      	ldr	r0, [r2, #4]
 80023da:	6891      	ldr	r1, [r2, #8]
 80023dc:	68d2      	ldr	r2, [r2, #12]
 80023de:	601c      	str	r4, [r3, #0]
 80023e0:	6058      	str	r0, [r3, #4]
 80023e2:	6099      	str	r1, [r3, #8]
 80023e4:	60da      	str	r2, [r3, #12]
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80023e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023ea:	483b      	ldr	r0, [pc, #236]	; (80024d8 <TIM2_IRQHandler+0x2f4>)
 80023ec:	f002 fd57 	bl	8004e9e <HAL_GPIO_TogglePin>
		COSNum=0;
 80023f0:	4b2b      	ldr	r3, [pc, #172]	; (80024a0 <TIM2_IRQHandler+0x2bc>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	801a      	strh	r2, [r3, #0]
		ADCflag=2;
 80023f6:	4b35      	ldr	r3, [pc, #212]	; (80024cc <TIM2_IRQHandler+0x2e8>)
 80023f8:	2202      	movs	r2, #2
 80023fa:	701a      	strb	r2, [r3, #0]
  }
  if((TIM5->CNT)-A_tick>((A_tick-Ala_tick)*5.0/8.0-PHASE[0])&&ADCflag==2)
 80023fc:	4b2e      	ldr	r3, [pc, #184]	; (80024b8 <TIM2_IRQHandler+0x2d4>)
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	4a2e      	ldr	r2, [pc, #184]	; (80024bc <TIM2_IRQHandler+0x2d8>)
 8002402:	6812      	ldr	r2, [r2, #0]
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f87c 	bl	8000504 <__aeabi_ui2d>
 800240c:	4604      	mov	r4, r0
 800240e:	460d      	mov	r5, r1
 8002410:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <TIM2_IRQHandler+0x2d8>)
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	4b2a      	ldr	r3, [pc, #168]	; (80024c0 <TIM2_IRQHandler+0x2dc>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	4618      	mov	r0, r3
 800241c:	f7fe f882 	bl	8000524 <__aeabi_i2d>
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <TIM2_IRQHandler+0x2f8>)
 8002426:	f7fe f8e7 	bl	80005f8 <__aeabi_dmul>
 800242a:	4602      	mov	r2, r0
 800242c:	460b      	mov	r3, r1
 800242e:	4610      	mov	r0, r2
 8002430:	4619      	mov	r1, r3
 8002432:	f04f 0200 	mov.w	r2, #0
 8002436:	4b23      	ldr	r3, [pc, #140]	; (80024c4 <TIM2_IRQHandler+0x2e0>)
 8002438:	f7fe fa08 	bl	800084c <__aeabi_ddiv>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4690      	mov	r8, r2
 8002442:	4699      	mov	r9, r3
 8002444:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <TIM2_IRQHandler+0x2e4>)
 8002446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe f86a 	bl	8000524 <__aeabi_i2d>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4640      	mov	r0, r8
 8002456:	4649      	mov	r1, r9
 8002458:	f7fd ff16 	bl	8000288 <__aeabi_dsub>
 800245c:	4602      	mov	r2, r0
 800245e:	460b      	mov	r3, r1
 8002460:	4620      	mov	r0, r4
 8002462:	4629      	mov	r1, r5
 8002464:	f7fe fb58 	bl	8000b18 <__aeabi_dcmpgt>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d100      	bne.n	8002470 <TIM2_IRQHandler+0x28c>
		//HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  	ADCflag=0;
  }

  /* USER CODE END TIM2_IRQn 1 */
}
 800246e:	e011      	b.n	8002494 <TIM2_IRQHandler+0x2b0>
  if((TIM5->CNT)-A_tick>((A_tick-Ala_tick)*5.0/8.0-PHASE[0])&&ADCflag==2)
 8002470:	4b16      	ldr	r3, [pc, #88]	; (80024cc <TIM2_IRQHandler+0x2e8>)
 8002472:	f993 3000 	ldrsb.w	r3, [r3]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d10c      	bne.n	8002494 <TIM2_IRQHandler+0x2b0>
		memcpy(ADC3_Value_mem2,ADC3_Value,16);
 800247a:	4b19      	ldr	r3, [pc, #100]	; (80024e0 <TIM2_IRQHandler+0x2fc>)
 800247c:	4a15      	ldr	r2, [pc, #84]	; (80024d4 <TIM2_IRQHandler+0x2f0>)
 800247e:	6814      	ldr	r4, [r2, #0]
 8002480:	6850      	ldr	r0, [r2, #4]
 8002482:	6891      	ldr	r1, [r2, #8]
 8002484:	68d2      	ldr	r2, [r2, #12]
 8002486:	601c      	str	r4, [r3, #0]
 8002488:	6058      	str	r0, [r3, #4]
 800248a:	6099      	str	r1, [r3, #8]
 800248c:	60da      	str	r2, [r3, #12]
  	ADCflag=0;
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <TIM2_IRQHandler+0x2e8>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
}
 8002494:	bf00      	nop
 8002496:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800249a:	bf00      	nop
 800249c:	20000560 	.word	0x20000560
 80024a0:	2000020a 	.word	0x2000020a
 80024a4:	0800d1bc 	.word	0x0800d1bc
 80024a8:	2000020c 	.word	0x2000020c
 80024ac:	3ff00000 	.word	0x3ff00000
 80024b0:	0800c85c 	.word	0x0800c85c
 80024b4:	0800db1c 	.word	0x0800db1c
 80024b8:	40000c00 	.word	0x40000c00
 80024bc:	2000061c 	.word	0x2000061c
 80024c0:	20000610 	.word	0x20000610
 80024c4:	40200000 	.word	0x40200000
 80024c8:	20000004 	.word	0x20000004
 80024cc:	20000208 	.word	0x20000208
 80024d0:	20000628 	.word	0x20000628
 80024d4:	20000234 	.word	0x20000234
 80024d8:	40021800 	.word	0x40021800
 80024dc:	40140000 	.word	0x40140000
 80024e0:	200005f0 	.word	0x200005f0
 80024e4:	00000000 	.word	0x00000000

080024e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024e8:	b5b0      	push	{r4, r5, r7, lr}
 80024ea:	b088      	sub	sp, #32
 80024ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024ee:	489e      	ldr	r0, [pc, #632]	; (8002768 <TIM3_IRQHandler+0x280>)
 80024f0:	f004 fca0 	bl	8006e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  		BT_VReal=0.0;
 80024f4:	4b9d      	ldr	r3, [pc, #628]	; (800276c <TIM3_IRQHandler+0x284>)
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]
  		BT_CReal=0.0;
 80024fc:	4b9c      	ldr	r3, [pc, #624]	; (8002770 <TIM3_IRQHandler+0x288>)
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
  		DC_VReal=0.0;
 8002504:	4b9b      	ldr	r3, [pc, #620]	; (8002774 <TIM3_IRQHandler+0x28c>)
 8002506:	f04f 0200 	mov.w	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
  		for(int i = 0; i < 4;i++)
 800250c:	2300      	movs	r3, #0
 800250e:	61fb      	str	r3, [r7, #28]
 8002510:	e03f      	b.n	8002592 <TIM3_IRQHandler+0xaa>
			{
  			BT_VReal += ADC1_Value[i]/4095.0*3.3/4.0*14.67;
 8002512:	4b96      	ldr	r3, [pc, #600]	; (800276c <TIM3_IRQHandler+0x284>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe f816 	bl	8000548 <__aeabi_f2d>
 800251c:	4604      	mov	r4, r0
 800251e:	460d      	mov	r5, r1
 8002520:	4a95      	ldr	r2, [pc, #596]	; (8002778 <TIM3_IRQHandler+0x290>)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002528:	4618      	mov	r0, r3
 800252a:	f7fd fffb 	bl	8000524 <__aeabi_i2d>
 800252e:	a386      	add	r3, pc, #536	; (adr r3, 8002748 <TIM3_IRQHandler+0x260>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	f7fe f98a 	bl	800084c <__aeabi_ddiv>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	4610      	mov	r0, r2
 800253e:	4619      	mov	r1, r3
 8002540:	a383      	add	r3, pc, #524	; (adr r3, 8002750 <TIM3_IRQHandler+0x268>)
 8002542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002546:	f7fe f857 	bl	80005f8 <__aeabi_dmul>
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	4b89      	ldr	r3, [pc, #548]	; (800277c <TIM3_IRQHandler+0x294>)
 8002558:	f7fe f978 	bl	800084c <__aeabi_ddiv>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	a37c      	add	r3, pc, #496	; (adr r3, 8002758 <TIM3_IRQHandler+0x270>)
 8002566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256a:	f7fe f845 	bl	80005f8 <__aeabi_dmul>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	4620      	mov	r0, r4
 8002574:	4629      	mov	r1, r5
 8002576:	f7fd fe89 	bl	800028c <__adddf3>
 800257a:	4602      	mov	r2, r0
 800257c:	460b      	mov	r3, r1
 800257e:	4610      	mov	r0, r2
 8002580:	4619      	mov	r1, r3
 8002582:	f7fe fb31 	bl	8000be8 <__aeabi_d2f>
 8002586:	4603      	mov	r3, r0
 8002588:	4a78      	ldr	r2, [pc, #480]	; (800276c <TIM3_IRQHandler+0x284>)
 800258a:	6013      	str	r3, [r2, #0]
  		for(int i = 0; i < 4;i++)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	3301      	adds	r3, #1
 8002590:	61fb      	str	r3, [r7, #28]
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	2b03      	cmp	r3, #3
 8002596:	ddbc      	ble.n	8002512 <TIM3_IRQHandler+0x2a>
			}
  		for(int i = 4; i < 8;i++)
 8002598:	2304      	movs	r3, #4
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	e036      	b.n	800260c <TIM3_IRQHandler+0x124>
			{
  			BT_CReal += ADC1_Value[i]/4095.0*3.3/4.0;
 800259e:	4b74      	ldr	r3, [pc, #464]	; (8002770 <TIM3_IRQHandler+0x288>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fd ffd0 	bl	8000548 <__aeabi_f2d>
 80025a8:	4604      	mov	r4, r0
 80025aa:	460d      	mov	r5, r1
 80025ac:	4a72      	ldr	r2, [pc, #456]	; (8002778 <TIM3_IRQHandler+0x290>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fd ffb5 	bl	8000524 <__aeabi_i2d>
 80025ba:	a363      	add	r3, pc, #396	; (adr r3, 8002748 <TIM3_IRQHandler+0x260>)
 80025bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c0:	f7fe f944 	bl	800084c <__aeabi_ddiv>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	a360      	add	r3, pc, #384	; (adr r3, 8002750 <TIM3_IRQHandler+0x268>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f7fe f811 	bl	80005f8 <__aeabi_dmul>
 80025d6:	4602      	mov	r2, r0
 80025d8:	460b      	mov	r3, r1
 80025da:	4610      	mov	r0, r2
 80025dc:	4619      	mov	r1, r3
 80025de:	f04f 0200 	mov.w	r2, #0
 80025e2:	4b66      	ldr	r3, [pc, #408]	; (800277c <TIM3_IRQHandler+0x294>)
 80025e4:	f7fe f932 	bl	800084c <__aeabi_ddiv>
 80025e8:	4602      	mov	r2, r0
 80025ea:	460b      	mov	r3, r1
 80025ec:	4620      	mov	r0, r4
 80025ee:	4629      	mov	r1, r5
 80025f0:	f7fd fe4c 	bl	800028c <__adddf3>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	f7fe faf4 	bl	8000be8 <__aeabi_d2f>
 8002600:	4603      	mov	r3, r0
 8002602:	4a5b      	ldr	r2, [pc, #364]	; (8002770 <TIM3_IRQHandler+0x288>)
 8002604:	6013      	str	r3, [r2, #0]
  		for(int i = 4; i < 8;i++)
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	3301      	adds	r3, #1
 800260a:	61bb      	str	r3, [r7, #24]
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	2b07      	cmp	r3, #7
 8002610:	ddc5      	ble.n	800259e <TIM3_IRQHandler+0xb6>
			}
  		for(int i = 8; i < 12;i++)
 8002612:	2308      	movs	r3, #8
 8002614:	617b      	str	r3, [r7, #20]
 8002616:	e03f      	b.n	8002698 <TIM3_IRQHandler+0x1b0>
			{
  			DC_VReal += ADC1_Value[i]/4095.0*3.3/4.0*20.0;
 8002618:	4b56      	ldr	r3, [pc, #344]	; (8002774 <TIM3_IRQHandler+0x28c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fd ff93 	bl	8000548 <__aeabi_f2d>
 8002622:	4604      	mov	r4, r0
 8002624:	460d      	mov	r5, r1
 8002626:	4a54      	ldr	r2, [pc, #336]	; (8002778 <TIM3_IRQHandler+0x290>)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd ff78 	bl	8000524 <__aeabi_i2d>
 8002634:	a344      	add	r3, pc, #272	; (adr r3, 8002748 <TIM3_IRQHandler+0x260>)
 8002636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263a:	f7fe f907 	bl	800084c <__aeabi_ddiv>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	a342      	add	r3, pc, #264	; (adr r3, 8002750 <TIM3_IRQHandler+0x268>)
 8002648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264c:	f7fd ffd4 	bl	80005f8 <__aeabi_dmul>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	4b47      	ldr	r3, [pc, #284]	; (800277c <TIM3_IRQHandler+0x294>)
 800265e:	f7fe f8f5 	bl	800084c <__aeabi_ddiv>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4610      	mov	r0, r2
 8002668:	4619      	mov	r1, r3
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	4b44      	ldr	r3, [pc, #272]	; (8002780 <TIM3_IRQHandler+0x298>)
 8002670:	f7fd ffc2 	bl	80005f8 <__aeabi_dmul>
 8002674:	4602      	mov	r2, r0
 8002676:	460b      	mov	r3, r1
 8002678:	4620      	mov	r0, r4
 800267a:	4629      	mov	r1, r5
 800267c:	f7fd fe06 	bl	800028c <__adddf3>
 8002680:	4602      	mov	r2, r0
 8002682:	460b      	mov	r3, r1
 8002684:	4610      	mov	r0, r2
 8002686:	4619      	mov	r1, r3
 8002688:	f7fe faae 	bl	8000be8 <__aeabi_d2f>
 800268c:	4603      	mov	r3, r0
 800268e:	4a39      	ldr	r2, [pc, #228]	; (8002774 <TIM3_IRQHandler+0x28c>)
 8002690:	6013      	str	r3, [r2, #0]
  		for(int i = 8; i < 12;i++)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3301      	adds	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b0b      	cmp	r3, #11
 800269c:	ddbc      	ble.n	8002618 <TIM3_IRQHandler+0x130>
			}

  	PW_VReal=0.0;
 800269e:	4b39      	ldr	r3, [pc, #228]	; (8002784 <TIM3_IRQHandler+0x29c>)
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	601a      	str	r2, [r3, #0]
  	PW_CReal_1=0.0;
 80026a6:	4b38      	ldr	r3, [pc, #224]	; (8002788 <TIM3_IRQHandler+0x2a0>)
 80026a8:	f04f 0200 	mov.w	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
  	PW_CReal_2=0.0;
 80026ae:	4b37      	ldr	r3, [pc, #220]	; (800278c <TIM3_IRQHandler+0x2a4>)
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 8;i++)
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	e0d6      	b.n	800286a <TIM3_IRQHandler+0x382>
  	{
    	if (i%2==0) {
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d166      	bne.n	8002794 <TIM3_IRQHandler+0x2ac>
    		PW_VReal += ADC3_Value_mem1[i]/4095.0*3.3*17.9/4.0;
 80026c6:	4b2f      	ldr	r3, [pc, #188]	; (8002784 <TIM3_IRQHandler+0x29c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd ff3c 	bl	8000548 <__aeabi_f2d>
 80026d0:	4604      	mov	r4, r0
 80026d2:	460d      	mov	r5, r1
 80026d4:	4a2e      	ldr	r2, [pc, #184]	; (8002790 <TIM3_IRQHandler+0x2a8>)
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fd ff21 	bl	8000524 <__aeabi_i2d>
 80026e2:	a319      	add	r3, pc, #100	; (adr r3, 8002748 <TIM3_IRQHandler+0x260>)
 80026e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e8:	f7fe f8b0 	bl	800084c <__aeabi_ddiv>
 80026ec:	4602      	mov	r2, r0
 80026ee:	460b      	mov	r3, r1
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	a316      	add	r3, pc, #88	; (adr r3, 8002750 <TIM3_IRQHandler+0x268>)
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	f7fd ff7d 	bl	80005f8 <__aeabi_dmul>
 80026fe:	4602      	mov	r2, r0
 8002700:	460b      	mov	r3, r1
 8002702:	4610      	mov	r0, r2
 8002704:	4619      	mov	r1, r3
 8002706:	a316      	add	r3, pc, #88	; (adr r3, 8002760 <TIM3_IRQHandler+0x278>)
 8002708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270c:	f7fd ff74 	bl	80005f8 <__aeabi_dmul>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	f04f 0200 	mov.w	r2, #0
 800271c:	4b17      	ldr	r3, [pc, #92]	; (800277c <TIM3_IRQHandler+0x294>)
 800271e:	f7fe f895 	bl	800084c <__aeabi_ddiv>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4620      	mov	r0, r4
 8002728:	4629      	mov	r1, r5
 800272a:	f7fd fdaf 	bl	800028c <__adddf3>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4610      	mov	r0, r2
 8002734:	4619      	mov	r1, r3
 8002736:	f7fe fa57 	bl	8000be8 <__aeabi_d2f>
 800273a:	4603      	mov	r3, r0
 800273c:	4a11      	ldr	r2, [pc, #68]	; (8002784 <TIM3_IRQHandler+0x29c>)
 800273e:	6013      	str	r3, [r2, #0]
 8002740:	e090      	b.n	8002864 <TIM3_IRQHandler+0x37c>
 8002742:	bf00      	nop
 8002744:	f3af 8000 	nop.w
 8002748:	00000000 	.word	0x00000000
 800274c:	40affe00 	.word	0x40affe00
 8002750:	66666666 	.word	0x66666666
 8002754:	400a6666 	.word	0x400a6666
 8002758:	3d70a3d7 	.word	0x3d70a3d7
 800275c:	402d570a 	.word	0x402d570a
 8002760:	66666666 	.word	0x66666666
 8002764:	4031e666 	.word	0x4031e666
 8002768:	20000390 	.word	0x20000390
 800276c:	200004b8 	.word	0x200004b8
 8002770:	2000055c 	.word	0x2000055c
 8002774:	2000021c 	.word	0x2000021c
 8002778:	200005c4 	.word	0x200005c4
 800277c:	40100000 	.word	0x40100000
 8002780:	40340000 	.word	0x40340000
 8002784:	20000558 	.word	0x20000558
 8002788:	200005a8 	.word	0x200005a8
 800278c:	20000428 	.word	0x20000428
 8002790:	20000628 	.word	0x20000628
			}
    	else
    	{
    		PW_CReal_1 += ADC3_Value_mem1[i]/4095.0*3.3/4.0;
 8002794:	4b90      	ldr	r3, [pc, #576]	; (80029d8 <TIM3_IRQHandler+0x4f0>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f7fd fed5 	bl	8000548 <__aeabi_f2d>
 800279e:	4604      	mov	r4, r0
 80027a0:	460d      	mov	r5, r1
 80027a2:	4a8e      	ldr	r2, [pc, #568]	; (80029dc <TIM3_IRQHandler+0x4f4>)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd feba 	bl	8000524 <__aeabi_i2d>
 80027b0:	a381      	add	r3, pc, #516	; (adr r3, 80029b8 <TIM3_IRQHandler+0x4d0>)
 80027b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027b6:	f7fe f849 	bl	800084c <__aeabi_ddiv>
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	a37f      	add	r3, pc, #508	; (adr r3, 80029c0 <TIM3_IRQHandler+0x4d8>)
 80027c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c8:	f7fd ff16 	bl	80005f8 <__aeabi_dmul>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	4b81      	ldr	r3, [pc, #516]	; (80029e0 <TIM3_IRQHandler+0x4f8>)
 80027da:	f7fe f837 	bl	800084c <__aeabi_ddiv>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4620      	mov	r0, r4
 80027e4:	4629      	mov	r1, r5
 80027e6:	f7fd fd51 	bl	800028c <__adddf3>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	f7fe f9f9 	bl	8000be8 <__aeabi_d2f>
 80027f6:	4603      	mov	r3, r0
 80027f8:	4a77      	ldr	r2, [pc, #476]	; (80029d8 <TIM3_IRQHandler+0x4f0>)
 80027fa:	6013      	str	r3, [r2, #0]
    		PW_CReal_2 += ADC3_Value_mem2[i]/4095.0*3.3/4.0;
 80027fc:	4b79      	ldr	r3, [pc, #484]	; (80029e4 <TIM3_IRQHandler+0x4fc>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7fd fea1 	bl	8000548 <__aeabi_f2d>
 8002806:	4604      	mov	r4, r0
 8002808:	460d      	mov	r5, r1
 800280a:	4a77      	ldr	r2, [pc, #476]	; (80029e8 <TIM3_IRQHandler+0x500>)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fe86 	bl	8000524 <__aeabi_i2d>
 8002818:	a367      	add	r3, pc, #412	; (adr r3, 80029b8 <TIM3_IRQHandler+0x4d0>)
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	f7fe f815 	bl	800084c <__aeabi_ddiv>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	a365      	add	r3, pc, #404	; (adr r3, 80029c0 <TIM3_IRQHandler+0x4d8>)
 800282c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002830:	f7fd fee2 	bl	80005f8 <__aeabi_dmul>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4610      	mov	r0, r2
 800283a:	4619      	mov	r1, r3
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	4b67      	ldr	r3, [pc, #412]	; (80029e0 <TIM3_IRQHandler+0x4f8>)
 8002842:	f7fe f803 	bl	800084c <__aeabi_ddiv>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	4620      	mov	r0, r4
 800284c:	4629      	mov	r1, r5
 800284e:	f7fd fd1d 	bl	800028c <__adddf3>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4610      	mov	r0, r2
 8002858:	4619      	mov	r1, r3
 800285a:	f7fe f9c5 	bl	8000be8 <__aeabi_d2f>
 800285e:	4603      	mov	r3, r0
 8002860:	4a60      	ldr	r2, [pc, #384]	; (80029e4 <TIM3_IRQHandler+0x4fc>)
 8002862:	6013      	str	r3, [r2, #0]
    for(int i = 0; i < 8;i++)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	3301      	adds	r3, #1
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2b07      	cmp	r3, #7
 800286e:	f77f af25 	ble.w	80026bc <TIM3_IRQHandler+0x1d4>
    	}
  	}

		switch (Mode) {
 8002872:	4b5e      	ldr	r3, [pc, #376]	; (80029ec <TIM3_IRQHandler+0x504>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b03      	cmp	r3, #3
 8002878:	f200 83bf 	bhi.w	8002ffa <TIM3_IRQHandler+0xb12>
 800287c:	a201      	add	r2, pc, #4	; (adr r2, 8002884 <TIM3_IRQHandler+0x39c>)
 800287e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002882:	bf00      	nop
 8002884:	08002895 	.word	0x08002895
 8002888:	0800290d 	.word	0x0800290d
 800288c:	08002ba5 	.word	0x08002ba5
 8002890:	08002d2d 	.word	0x08002d2d
			case 0:
			{
				if((A_tick-B_tick)>3300)
 8002894:	4b56      	ldr	r3, [pc, #344]	; (80029f0 <TIM3_IRQHandler+0x508>)
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	4b56      	ldr	r3, [pc, #344]	; (80029f4 <TIM3_IRQHandler+0x50c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f640 42e4 	movw	r2, #3300	; 0xce4
 80028a2:	4293      	cmp	r3, r2
 80028a4:	dd02      	ble.n	80028ac <TIM3_IRQHandler+0x3c4>
				{
					PHASE_Order=0;
 80028a6:	4b54      	ldr	r3, [pc, #336]	; (80029f8 <TIM3_IRQHandler+0x510>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	801a      	strh	r2, [r3, #0]
				}
				if((A_tick-B_tick)<-3300)
 80028ac:	4b50      	ldr	r3, [pc, #320]	; (80029f0 <TIM3_IRQHandler+0x508>)
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	4b50      	ldr	r3, [pc, #320]	; (80029f4 <TIM3_IRQHandler+0x50c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	4a51      	ldr	r2, [pc, #324]	; (80029fc <TIM3_IRQHandler+0x514>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	da02      	bge.n	80028c2 <TIM3_IRQHandler+0x3da>
				{
					PHASE_Order=1;
 80028bc:	4b4e      	ldr	r3, [pc, #312]	; (80029f8 <TIM3_IRQHandler+0x510>)
 80028be:	2201      	movs	r2, #1
 80028c0:	801a      	strh	r2, [r3, #0]
				}
				if(COSNul<=0.90)
 80028c2:	4b4f      	ldr	r3, [pc, #316]	; (8002a00 <TIM3_IRQHandler+0x518>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7fd fe3e 	bl	8000548 <__aeabi_f2d>
 80028cc:	a33e      	add	r3, pc, #248	; (adr r3, 80029c8 <TIM3_IRQHandler+0x4e0>)
 80028ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d2:	f7fe f90d 	bl	8000af0 <__aeabi_dcmple>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d013      	beq.n	8002904 <TIM3_IRQHandler+0x41c>
				{
					COSNul+=0.01;
 80028dc:	4b48      	ldr	r3, [pc, #288]	; (8002a00 <TIM3_IRQHandler+0x518>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fd fe31 	bl	8000548 <__aeabi_f2d>
 80028e6:	a33a      	add	r3, pc, #232	; (adr r3, 80029d0 <TIM3_IRQHandler+0x4e8>)
 80028e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ec:	f7fd fcce 	bl	800028c <__adddf3>
 80028f0:	4602      	mov	r2, r0
 80028f2:	460b      	mov	r3, r1
 80028f4:	4610      	mov	r0, r2
 80028f6:	4619      	mov	r1, r3
 80028f8:	f7fe f976 	bl	8000be8 <__aeabi_d2f>
 80028fc:	4603      	mov	r3, r0
 80028fe:	4a40      	ldr	r2, [pc, #256]	; (8002a00 <TIM3_IRQHandler+0x518>)
 8002900:	6013      	str	r3, [r2, #0]
				}
				else
				{
					Mode=1;
				}
				break;
 8002902:	e37b      	b.n	8002ffc <TIM3_IRQHandler+0xb14>
					Mode=1;
 8002904:	4b39      	ldr	r3, [pc, #228]	; (80029ec <TIM3_IRQHandler+0x504>)
 8002906:	2201      	movs	r2, #1
 8002908:	701a      	strb	r2, [r3, #0]
				break;
 800290a:	e377      	b.n	8002ffc <TIM3_IRQHandler+0xb14>
			}
			case 1:
			{
    		DCpid_error = PW_VReal*2.0 - DC_VReal;
 800290c:	4b3d      	ldr	r3, [pc, #244]	; (8002a04 <TIM3_IRQHandler+0x51c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4618      	mov	r0, r3
 8002912:	f7fd fe19 	bl	8000548 <__aeabi_f2d>
 8002916:	4602      	mov	r2, r0
 8002918:	460b      	mov	r3, r1
 800291a:	f7fd fcb7 	bl	800028c <__adddf3>
 800291e:	4602      	mov	r2, r0
 8002920:	460b      	mov	r3, r1
 8002922:	4614      	mov	r4, r2
 8002924:	461d      	mov	r5, r3
 8002926:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <TIM3_IRQHandler+0x520>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fd fe0c 	bl	8000548 <__aeabi_f2d>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4620      	mov	r0, r4
 8002936:	4629      	mov	r1, r5
 8002938:	f7fd fca6 	bl	8000288 <__aeabi_dsub>
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4932      	ldr	r1, [pc, #200]	; (8002a0c <TIM3_IRQHandler+0x524>)
 8002942:	e9c1 2300 	strd	r2, r3, [r1]
    		PWM -= arm_pid_f32(&DCPID, DCpid_error);
 8002946:	4b31      	ldr	r3, [pc, #196]	; (8002a0c <TIM3_IRQHandler+0x524>)
 8002948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294c:	4610      	mov	r0, r2
 800294e:	4619      	mov	r1, r3
 8002950:	f7fe f94a 	bl	8000be8 <__aeabi_d2f>
 8002954:	4603      	mov	r3, r0
 8002956:	4a2e      	ldr	r2, [pc, #184]	; (8002a10 <TIM3_IRQHandler+0x528>)
 8002958:	60fa      	str	r2, [r7, #12]
 800295a:	60bb      	str	r3, [r7, #8]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	ed93 7a00 	vldr	s14, [r3]
 8002962:	edd7 7a02 	vldr	s15, [r7, #8]
 8002966:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	edd3 6a01 	vldr	s13, [r3, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	edd3 7a03 	vldr	s15, [r3, #12]
 8002976:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 800297a:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	edd3 6a02 	vldr	s13, [r3, #8]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	edd3 7a04 	vldr	s15, [r3, #16]
 800298a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800298e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002998:	ee77 7a27 	vadd.f32	s15, s14, s15
 800299c:	edc7 7a01 	vstr	s15, [r7, #4]

    //限制增长
    if(out>100)
 80029a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80029a4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002a14 <TIM3_IRQHandler+0x52c>
 80029a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b0:	dd36      	ble.n	8002a20 <TIM3_IRQHandler+0x538>
    {
    	out=100;
 80029b2:	4b19      	ldr	r3, [pc, #100]	; (8002a18 <TIM3_IRQHandler+0x530>)
 80029b4:	607b      	str	r3, [r7, #4]
 80029b6:	e03e      	b.n	8002a36 <TIM3_IRQHandler+0x54e>
 80029b8:	00000000 	.word	0x00000000
 80029bc:	40affe00 	.word	0x40affe00
 80029c0:	66666666 	.word	0x66666666
 80029c4:	400a6666 	.word	0x400a6666
 80029c8:	cccccccd 	.word	0xcccccccd
 80029cc:	3feccccc 	.word	0x3feccccc
 80029d0:	47ae147b 	.word	0x47ae147b
 80029d4:	3f847ae1 	.word	0x3f847ae1
 80029d8:	200005a8 	.word	0x200005a8
 80029dc:	20000628 	.word	0x20000628
 80029e0:	40100000 	.word	0x40100000
 80029e4:	20000428 	.word	0x20000428
 80029e8:	200005f0 	.word	0x200005f0
 80029ec:	20000204 	.word	0x20000204
 80029f0:	2000061c 	.word	0x2000061c
 80029f4:	20000624 	.word	0x20000624
 80029f8:	20000206 	.word	0x20000206
 80029fc:	fffff31c 	.word	0xfffff31c
 8002a00:	2000020c 	.word	0x2000020c
 8002a04:	20000558 	.word	0x20000558
 8002a08:	2000021c 	.word	0x2000021c
 8002a0c:	20000608 	.word	0x20000608
 8002a10:	20000244 	.word	0x20000244
 8002a14:	42c80000 	.word	0x42c80000
 8002a18:	42c80000 	.word	0x42c80000
 8002a1c:	c2c80000 	.word	0xc2c80000
    }
    else if(out<-100)
 8002a20:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a24:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8002a1c <TIM3_IRQHandler+0x534>
 8002a28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a30:	d501      	bpl.n	8002a36 <TIM3_IRQHandler+0x54e>
    {
    	out=-100;
 8002a32:	4bb1      	ldr	r3, [pc, #708]	; (8002cf8 <TIM3_IRQHandler+0x810>)
 8002a34:	607b      	str	r3, [r7, #4]
    }

    /* Update state */
    S->state[1] = S->state[0];
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	68da      	ldr	r2, [r3, #12]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8002a4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a4e:	4bab      	ldr	r3, [pc, #684]	; (8002cfc <TIM3_IRQHandler+0x814>)
 8002a50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a54:	ee07 3a10 	vmov	s14, r3
 8002a58:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002a5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a64:	ee17 3a90 	vmov	r3, s15
 8002a68:	b21a      	sxth	r2, r3
 8002a6a:	4ba4      	ldr	r3, [pc, #656]	; (8002cfc <TIM3_IRQHandler+0x814>)
 8002a6c:	801a      	strh	r2, [r3, #0]
    		if(PWM>((TIM2->ARR-1))*0.9)
 8002a6e:	4ba3      	ldr	r3, [pc, #652]	; (8002cfc <TIM3_IRQHandler+0x814>)
 8002a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fd fd55 	bl	8000524 <__aeabi_i2d>
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	460d      	mov	r5, r1
 8002a7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a84:	3b01      	subs	r3, #1
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fd fd3c 	bl	8000504 <__aeabi_ui2d>
 8002a8c:	a396      	add	r3, pc, #600	; (adr r3, 8002ce8 <TIM3_IRQHandler+0x800>)
 8002a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a92:	f7fd fdb1 	bl	80005f8 <__aeabi_dmul>
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4620      	mov	r0, r4
 8002a9c:	4629      	mov	r1, r5
 8002a9e:	f7fe f83b 	bl	8000b18 <__aeabi_dcmpgt>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d02c      	beq.n	8002b02 <TIM3_IRQHandler+0x61a>
    		{
    			PWM=(TIM2->ARR-1)*0.9;
 8002aa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7fd fd27 	bl	8000504 <__aeabi_ui2d>
 8002ab6:	a38c      	add	r3, pc, #560	; (adr r3, 8002ce8 <TIM3_IRQHandler+0x800>)
 8002ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abc:	f7fd fd9c 	bl	80005f8 <__aeabi_dmul>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	f7fe f846 	bl	8000b58 <__aeabi_d2iz>
 8002acc:	4603      	mov	r3, r0
 8002ace:	b21a      	sxth	r2, r3
 8002ad0:	4b8a      	ldr	r3, [pc, #552]	; (8002cfc <TIM3_IRQHandler+0x814>)
 8002ad2:	801a      	strh	r2, [r3, #0]
    			TIM2->CCR2 = (TIM2->ARR-1)*0.9;
 8002ad4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	3b01      	subs	r3, #1
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fd fd11 	bl	8000504 <__aeabi_ui2d>
 8002ae2:	a381      	add	r3, pc, #516	; (adr r3, 8002ce8 <TIM3_IRQHandler+0x800>)
 8002ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae8:	f7fd fd86 	bl	80005f8 <__aeabi_dmul>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002af4:	4610      	mov	r0, r2
 8002af6:	4619      	mov	r1, r3
 8002af8:	f7fe f856 	bl	8000ba8 <__aeabi_d2uiz>
 8002afc:	4603      	mov	r3, r0
 8002afe:	63a3      	str	r3, [r4, #56]	; 0x38
    		}
    		else
    		{
    			TIM2->CCR2 = PWM;
    		}
    		break;
 8002b00:	e27c      	b.n	8002ffc <TIM3_IRQHandler+0xb14>
    		else if(PWM<(TIM2->ARR-1)*0.1)
 8002b02:	4b7e      	ldr	r3, [pc, #504]	; (8002cfc <TIM3_IRQHandler+0x814>)
 8002b04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fd0b 	bl	8000524 <__aeabi_i2d>
 8002b0e:	4604      	mov	r4, r0
 8002b10:	460d      	mov	r5, r1
 8002b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7fd fcf2 	bl	8000504 <__aeabi_ui2d>
 8002b20:	a373      	add	r3, pc, #460	; (adr r3, 8002cf0 <TIM3_IRQHandler+0x808>)
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	f7fd fd67 	bl	80005f8 <__aeabi_dmul>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4620      	mov	r0, r4
 8002b30:	4629      	mov	r1, r5
 8002b32:	f7fd ffd3 	bl	8000adc <__aeabi_dcmplt>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d02c      	beq.n	8002b96 <TIM3_IRQHandler+0x6ae>
    			PWM=(TIM2->ARR-1)*0.1;
 8002b3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	3b01      	subs	r3, #1
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd fcdd 	bl	8000504 <__aeabi_ui2d>
 8002b4a:	a369      	add	r3, pc, #420	; (adr r3, 8002cf0 <TIM3_IRQHandler+0x808>)
 8002b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b50:	f7fd fd52 	bl	80005f8 <__aeabi_dmul>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4610      	mov	r0, r2
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f7fd fffc 	bl	8000b58 <__aeabi_d2iz>
 8002b60:	4603      	mov	r3, r0
 8002b62:	b21a      	sxth	r2, r3
 8002b64:	4b65      	ldr	r3, [pc, #404]	; (8002cfc <TIM3_IRQHandler+0x814>)
 8002b66:	801a      	strh	r2, [r3, #0]
    			TIM2->CCR2 = (TIM2->ARR-1)*0.1;
 8002b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fcc7 	bl	8000504 <__aeabi_ui2d>
 8002b76:	a35e      	add	r3, pc, #376	; (adr r3, 8002cf0 <TIM3_IRQHandler+0x808>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	f7fd fd3c 	bl	80005f8 <__aeabi_dmul>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002b88:	4610      	mov	r0, r2
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f7fe f80c 	bl	8000ba8 <__aeabi_d2uiz>
 8002b90:	4603      	mov	r3, r0
 8002b92:	63a3      	str	r3, [r4, #56]	; 0x38
    		break;
 8002b94:	e232      	b.n	8002ffc <TIM3_IRQHandler+0xb14>
    			TIM2->CCR2 = PWM;
 8002b96:	4b59      	ldr	r3, [pc, #356]	; (8002cfc <TIM3_IRQHandler+0x814>)
 8002b98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002b9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ba0:	639a      	str	r2, [r3, #56]	; 0x38
    		break;
 8002ba2:	e22b      	b.n	8002ffc <TIM3_IRQHandler+0xb14>
			}
			case 2:
			{
				if((HAL_GetTick()-Mppt_tick)>100)
 8002ba4:	f001 f874 	bl	8003c90 <HAL_GetTick>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	4a55      	ldr	r2, [pc, #340]	; (8002d00 <TIM3_IRQHandler+0x818>)
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	2b64      	cmp	r3, #100	; 0x64
 8002bb2:	f240 80bb 	bls.w	8002d2c <TIM3_IRQHandler+0x844>
				{
					BT_PReal_La=BT_PReal;
 8002bb6:	4b53      	ldr	r3, [pc, #332]	; (8002d04 <TIM3_IRQHandler+0x81c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a53      	ldr	r2, [pc, #332]	; (8002d08 <TIM3_IRQHandler+0x820>)
 8002bbc:	6013      	str	r3, [r2, #0]
					BT_PReal=BT_VReal*BT_CReal;
 8002bbe:	4b53      	ldr	r3, [pc, #332]	; (8002d0c <TIM3_IRQHandler+0x824>)
 8002bc0:	ed93 7a00 	vldr	s14, [r3]
 8002bc4:	4b52      	ldr	r3, [pc, #328]	; (8002d10 <TIM3_IRQHandler+0x828>)
 8002bc6:	edd3 7a00 	vldr	s15, [r3]
 8002bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bce:	4b4d      	ldr	r3, [pc, #308]	; (8002d04 <TIM3_IRQHandler+0x81c>)
 8002bd0:	edc3 7a00 	vstr	s15, [r3]
					if(BT_PReal_La!=BT_PReal)
 8002bd4:	4b4c      	ldr	r3, [pc, #304]	; (8002d08 <TIM3_IRQHandler+0x820>)
 8002bd6:	ed93 7a00 	vldr	s14, [r3]
 8002bda:	4b4a      	ldr	r3, [pc, #296]	; (8002d04 <TIM3_IRQHandler+0x81c>)
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	eeb4 7a67 	vcmp.f32	s14, s15
 8002be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be8:	f000 809a 	beq.w	8002d20 <TIM3_IRQHandler+0x838>
					{
						if(BT_PReal>BT_PReal_La)
 8002bec:	4b45      	ldr	r3, [pc, #276]	; (8002d04 <TIM3_IRQHandler+0x81c>)
 8002bee:	ed93 7a00 	vldr	s14, [r3]
 8002bf2:	4b45      	ldr	r3, [pc, #276]	; (8002d08 <TIM3_IRQHandler+0x820>)
 8002bf4:	edd3 7a00 	vldr	s15, [r3]
 8002bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c00:	dd59      	ble.n	8002cb6 <TIM3_IRQHandler+0x7ce>
						{
							PWM+=20;
 8002c02:	4b3e      	ldr	r3, [pc, #248]	; (8002cfc <TIM3_IRQHandler+0x814>)
 8002c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3314      	adds	r3, #20
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	b21a      	sxth	r2, r3
 8002c10:	4b3a      	ldr	r3, [pc, #232]	; (8002cfc <TIM3_IRQHandler+0x814>)
 8002c12:	801a      	strh	r2, [r3, #0]
							if(PWM>((TIM2->ARR-1)*0.9))
 8002c14:	4b39      	ldr	r3, [pc, #228]	; (8002cfc <TIM3_IRQHandler+0x814>)
 8002c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fc82 	bl	8000524 <__aeabi_i2d>
 8002c20:	4604      	mov	r4, r0
 8002c22:	460d      	mov	r5, r1
 8002c24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fc69 	bl	8000504 <__aeabi_ui2d>
 8002c32:	a32d      	add	r3, pc, #180	; (adr r3, 8002ce8 <TIM3_IRQHandler+0x800>)
 8002c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c38:	f7fd fcde 	bl	80005f8 <__aeabi_dmul>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4620      	mov	r0, r4
 8002c42:	4629      	mov	r1, r5
 8002c44:	f7fd ff68 	bl	8000b18 <__aeabi_dcmpgt>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d02c      	beq.n	8002ca8 <TIM3_IRQHandler+0x7c0>
							{
			    			PWM=((TIM2->ARR-1)*0.9);
 8002c4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	3b01      	subs	r3, #1
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fd fc54 	bl	8000504 <__aeabi_ui2d>
 8002c5c:	a322      	add	r3, pc, #136	; (adr r3, 8002ce8 <TIM3_IRQHandler+0x800>)
 8002c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c62:	f7fd fcc9 	bl	80005f8 <__aeabi_dmul>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f7fd ff73 	bl	8000b58 <__aeabi_d2iz>
 8002c72:	4603      	mov	r3, r0
 8002c74:	b21a      	sxth	r2, r3
 8002c76:	4b21      	ldr	r3, [pc, #132]	; (8002cfc <TIM3_IRQHandler+0x814>)
 8002c78:	801a      	strh	r2, [r3, #0]
			    			TIM2->CCR2 = (TIM2->ARR-1)*0.9;
 8002c7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	3b01      	subs	r3, #1
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fd fc3e 	bl	8000504 <__aeabi_ui2d>
 8002c88:	a317      	add	r3, pc, #92	; (adr r3, 8002ce8 <TIM3_IRQHandler+0x800>)
 8002c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8e:	f7fd fcb3 	bl	80005f8 <__aeabi_dmul>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002c9a:	4610      	mov	r0, r2
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	f7fd ff83 	bl	8000ba8 <__aeabi_d2uiz>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	63a3      	str	r3, [r4, #56]	; 0x38
 8002ca6:	e03b      	b.n	8002d20 <TIM3_IRQHandler+0x838>
							}
							else
							{
								TIM2->CCR2 = PWM;
 8002ca8:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <TIM3_IRQHandler+0x814>)
 8002caa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002cae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cb2:	639a      	str	r2, [r3, #56]	; 0x38
 8002cb4:	e034      	b.n	8002d20 <TIM3_IRQHandler+0x838>
							}
						}
						else
						{
							PWM-=20;
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <TIM3_IRQHandler+0x814>)
 8002cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b14      	subs	r3, #20
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	b21a      	sxth	r2, r3
 8002cc4:	4b0d      	ldr	r3, [pc, #52]	; (8002cfc <TIM3_IRQHandler+0x814>)
 8002cc6:	801a      	strh	r2, [r3, #0]
							if(PWM<0)
 8002cc8:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <TIM3_IRQHandler+0x814>)
 8002cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	da20      	bge.n	8002d14 <TIM3_IRQHandler+0x82c>
							{
			    			PWM=0;
 8002cd2:	4b0a      	ldr	r3, [pc, #40]	; (8002cfc <TIM3_IRQHandler+0x814>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	801a      	strh	r2, [r3, #0]
			    			TIM2->CCR2 = 0;
 8002cd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cdc:	2200      	movs	r2, #0
 8002cde:	639a      	str	r2, [r3, #56]	; 0x38
 8002ce0:	e01e      	b.n	8002d20 <TIM3_IRQHandler+0x838>
 8002ce2:	bf00      	nop
 8002ce4:	f3af 8000 	nop.w
 8002ce8:	cccccccd 	.word	0xcccccccd
 8002cec:	3feccccc 	.word	0x3feccccc
 8002cf0:	9999999a 	.word	0x9999999a
 8002cf4:	3fb99999 	.word	0x3fb99999
 8002cf8:	c2c80000 	.word	0xc2c80000
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	20000620 	.word	0x20000620
 8002d04:	200005ac 	.word	0x200005ac
 8002d08:	200002bc 	.word	0x200002bc
 8002d0c:	200004b8 	.word	0x200004b8
 8002d10:	2000055c 	.word	0x2000055c
							}
							else
							{
								TIM2->CCR2 = PWM;
 8002d14:	4bcd      	ldr	r3, [pc, #820]	; (800304c <TIM3_IRQHandler+0xb64>)
 8002d16:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002d1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d1e:	639a      	str	r2, [r3, #56]	; 0x38
							}
						}
					}
					Mppt_tick=HAL_GetTick();
 8002d20:	f000 ffb6 	bl	8003c90 <HAL_GetTick>
 8002d24:	4603      	mov	r3, r0
 8002d26:	461a      	mov	r2, r3
 8002d28:	4bc9      	ldr	r3, [pc, #804]	; (8003050 <TIM3_IRQHandler+0xb68>)
 8002d2a:	601a      	str	r2, [r3, #0]
			}
			case 3:
			{
				//PWM=0;
				//TIM2->CCR2 = 0;
				COSNul=0.0;
 8002d2c:	4bc9      	ldr	r3, [pc, #804]	; (8003054 <TIM3_IRQHandler+0xb6c>)
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
				if(PHASE_Order==0)
 8002d34:	4bc8      	ldr	r3, [pc, #800]	; (8003058 <TIM3_IRQHandler+0xb70>)
 8002d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f040 80af 	bne.w	8002e9e <TIM3_IRQHandler+0x9b6>
				{
				  TIM2->CCR1=(COSA[COSNum]*COSNul+1.0)*(TIM2->ARR-1)/2.0;
 8002d40:	4bc6      	ldr	r3, [pc, #792]	; (800305c <TIM3_IRQHandler+0xb74>)
 8002d42:	881b      	ldrh	r3, [r3, #0]
 8002d44:	4ac6      	ldr	r2, [pc, #792]	; (8003060 <TIM3_IRQHandler+0xb78>)
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	ed93 7a00 	vldr	s14, [r3]
 8002d4e:	4bc1      	ldr	r3, [pc, #772]	; (8003054 <TIM3_IRQHandler+0xb6c>)
 8002d50:	edd3 7a00 	vldr	s15, [r3]
 8002d54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d58:	ee17 0a90 	vmov	r0, s15
 8002d5c:	f7fd fbf4 	bl	8000548 <__aeabi_f2d>
 8002d60:	f04f 0200 	mov.w	r2, #0
 8002d64:	4bbf      	ldr	r3, [pc, #764]	; (8003064 <TIM3_IRQHandler+0xb7c>)
 8002d66:	f7fd fa91 	bl	800028c <__adddf3>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4614      	mov	r4, r2
 8002d70:	461d      	mov	r5, r3
 8002d72:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7fd fbc2 	bl	8000504 <__aeabi_ui2d>
 8002d80:	4602      	mov	r2, r0
 8002d82:	460b      	mov	r3, r1
 8002d84:	4620      	mov	r0, r4
 8002d86:	4629      	mov	r1, r5
 8002d88:	f7fd fc36 	bl	80005f8 <__aeabi_dmul>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	f04f 0200 	mov.w	r2, #0
 8002d98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d9c:	f7fd fd56 	bl	800084c <__aeabi_ddiv>
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002da8:	4610      	mov	r0, r2
 8002daa:	4619      	mov	r1, r3
 8002dac:	f7fd fefc 	bl	8000ba8 <__aeabi_d2uiz>
 8002db0:	4603      	mov	r3, r0
 8002db2:	6363      	str	r3, [r4, #52]	; 0x34
				  TIM2->CCR3=(COSB[COSNum]*COSNul+1.0)*(TIM2->ARR-1)/2.0;
 8002db4:	4ba9      	ldr	r3, [pc, #676]	; (800305c <TIM3_IRQHandler+0xb74>)
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	4aab      	ldr	r2, [pc, #684]	; (8003068 <TIM3_IRQHandler+0xb80>)
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	ed93 7a00 	vldr	s14, [r3]
 8002dc2:	4ba4      	ldr	r3, [pc, #656]	; (8003054 <TIM3_IRQHandler+0xb6c>)
 8002dc4:	edd3 7a00 	vldr	s15, [r3]
 8002dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dcc:	ee17 0a90 	vmov	r0, s15
 8002dd0:	f7fd fbba 	bl	8000548 <__aeabi_f2d>
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	4ba2      	ldr	r3, [pc, #648]	; (8003064 <TIM3_IRQHandler+0xb7c>)
 8002dda:	f7fd fa57 	bl	800028c <__adddf3>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4614      	mov	r4, r2
 8002de4:	461d      	mov	r5, r3
 8002de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dec:	3b01      	subs	r3, #1
 8002dee:	4618      	mov	r0, r3
 8002df0:	f7fd fb88 	bl	8000504 <__aeabi_ui2d>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4620      	mov	r0, r4
 8002dfa:	4629      	mov	r1, r5
 8002dfc:	f7fd fbfc 	bl	80005f8 <__aeabi_dmul>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e10:	f7fd fd1c 	bl	800084c <__aeabi_ddiv>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f7fd fec2 	bl	8000ba8 <__aeabi_d2uiz>
 8002e24:	4603      	mov	r3, r0
 8002e26:	63e3      	str	r3, [r4, #60]	; 0x3c
				  TIM2->CCR4=(COSC[COSNum]*COSNul+1.0)*(TIM2->ARR-1)/2.0;
 8002e28:	4b8c      	ldr	r3, [pc, #560]	; (800305c <TIM3_IRQHandler+0xb74>)
 8002e2a:	881b      	ldrh	r3, [r3, #0]
 8002e2c:	4a8f      	ldr	r2, [pc, #572]	; (800306c <TIM3_IRQHandler+0xb84>)
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	ed93 7a00 	vldr	s14, [r3]
 8002e36:	4b87      	ldr	r3, [pc, #540]	; (8003054 <TIM3_IRQHandler+0xb6c>)
 8002e38:	edd3 7a00 	vldr	s15, [r3]
 8002e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e40:	ee17 0a90 	vmov	r0, s15
 8002e44:	f7fd fb80 	bl	8000548 <__aeabi_f2d>
 8002e48:	f04f 0200 	mov.w	r2, #0
 8002e4c:	4b85      	ldr	r3, [pc, #532]	; (8003064 <TIM3_IRQHandler+0xb7c>)
 8002e4e:	f7fd fa1d 	bl	800028c <__adddf3>
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	4614      	mov	r4, r2
 8002e58:	461d      	mov	r5, r3
 8002e5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e60:	3b01      	subs	r3, #1
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd fb4e 	bl	8000504 <__aeabi_ui2d>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4620      	mov	r0, r4
 8002e6e:	4629      	mov	r1, r5
 8002e70:	f7fd fbc2 	bl	80005f8 <__aeabi_dmul>
 8002e74:	4602      	mov	r2, r0
 8002e76:	460b      	mov	r3, r1
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	f04f 0200 	mov.w	r2, #0
 8002e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002e84:	f7fd fce2 	bl	800084c <__aeabi_ddiv>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	f7fd fe88 	bl	8000ba8 <__aeabi_d2uiz>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	6423      	str	r3, [r4, #64]	; 0x40
				}

			}

			default:
				break;
 8002e9c:	e0ad      	b.n	8002ffa <TIM3_IRQHandler+0xb12>
				  TIM2->CCR1=(COSC[COSNum]*COSNul+1.0)*(TIM2->ARR-1)/2.0;
 8002e9e:	4b6f      	ldr	r3, [pc, #444]	; (800305c <TIM3_IRQHandler+0xb74>)
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	4a72      	ldr	r2, [pc, #456]	; (800306c <TIM3_IRQHandler+0xb84>)
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	4413      	add	r3, r2
 8002ea8:	ed93 7a00 	vldr	s14, [r3]
 8002eac:	4b69      	ldr	r3, [pc, #420]	; (8003054 <TIM3_IRQHandler+0xb6c>)
 8002eae:	edd3 7a00 	vldr	s15, [r3]
 8002eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb6:	ee17 0a90 	vmov	r0, s15
 8002eba:	f7fd fb45 	bl	8000548 <__aeabi_f2d>
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	4b68      	ldr	r3, [pc, #416]	; (8003064 <TIM3_IRQHandler+0xb7c>)
 8002ec4:	f7fd f9e2 	bl	800028c <__adddf3>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4614      	mov	r4, r2
 8002ece:	461d      	mov	r5, r3
 8002ed0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed6:	3b01      	subs	r3, #1
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fb13 	bl	8000504 <__aeabi_ui2d>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	4629      	mov	r1, r5
 8002ee6:	f7fd fb87 	bl	80005f8 <__aeabi_dmul>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	4610      	mov	r0, r2
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002efa:	f7fd fca7 	bl	800084c <__aeabi_ddiv>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f7fd fe4d 	bl	8000ba8 <__aeabi_d2uiz>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	6363      	str	r3, [r4, #52]	; 0x34
				  TIM2->CCR3=(COSB[COSNum]*COSNul+1.0)*(TIM2->ARR-1)/2.0;
 8002f12:	4b52      	ldr	r3, [pc, #328]	; (800305c <TIM3_IRQHandler+0xb74>)
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	4a54      	ldr	r2, [pc, #336]	; (8003068 <TIM3_IRQHandler+0xb80>)
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	ed93 7a00 	vldr	s14, [r3]
 8002f20:	4b4c      	ldr	r3, [pc, #304]	; (8003054 <TIM3_IRQHandler+0xb6c>)
 8002f22:	edd3 7a00 	vldr	s15, [r3]
 8002f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2a:	ee17 0a90 	vmov	r0, s15
 8002f2e:	f7fd fb0b 	bl	8000548 <__aeabi_f2d>
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	4b4b      	ldr	r3, [pc, #300]	; (8003064 <TIM3_IRQHandler+0xb7c>)
 8002f38:	f7fd f9a8 	bl	800028c <__adddf3>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	460b      	mov	r3, r1
 8002f40:	4614      	mov	r4, r2
 8002f42:	461d      	mov	r5, r3
 8002f44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fd fad9 	bl	8000504 <__aeabi_ui2d>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4620      	mov	r0, r4
 8002f58:	4629      	mov	r1, r5
 8002f5a:	f7fd fb4d 	bl	80005f8 <__aeabi_dmul>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	460b      	mov	r3, r1
 8002f62:	4610      	mov	r0, r2
 8002f64:	4619      	mov	r1, r3
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f6e:	f7fd fc6d 	bl	800084c <__aeabi_ddiv>
 8002f72:	4602      	mov	r2, r0
 8002f74:	460b      	mov	r3, r1
 8002f76:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f7fd fe13 	bl	8000ba8 <__aeabi_d2uiz>
 8002f82:	4603      	mov	r3, r0
 8002f84:	63e3      	str	r3, [r4, #60]	; 0x3c
				  TIM2->CCR4=(COSA[COSNum]*COSNul+1.0)*(TIM2->ARR-1)/2.0;
 8002f86:	4b35      	ldr	r3, [pc, #212]	; (800305c <TIM3_IRQHandler+0xb74>)
 8002f88:	881b      	ldrh	r3, [r3, #0]
 8002f8a:	4a35      	ldr	r2, [pc, #212]	; (8003060 <TIM3_IRQHandler+0xb78>)
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	ed93 7a00 	vldr	s14, [r3]
 8002f94:	4b2f      	ldr	r3, [pc, #188]	; (8003054 <TIM3_IRQHandler+0xb6c>)
 8002f96:	edd3 7a00 	vldr	s15, [r3]
 8002f9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9e:	ee17 0a90 	vmov	r0, s15
 8002fa2:	f7fd fad1 	bl	8000548 <__aeabi_f2d>
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	4b2e      	ldr	r3, [pc, #184]	; (8003064 <TIM3_IRQHandler+0xb7c>)
 8002fac:	f7fd f96e 	bl	800028c <__adddf3>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	4614      	mov	r4, r2
 8002fb6:	461d      	mov	r5, r3
 8002fb8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd fa9f 	bl	8000504 <__aeabi_ui2d>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4620      	mov	r0, r4
 8002fcc:	4629      	mov	r1, r5
 8002fce:	f7fd fb13 	bl	80005f8 <__aeabi_dmul>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4610      	mov	r0, r2
 8002fd8:	4619      	mov	r1, r3
 8002fda:	f04f 0200 	mov.w	r2, #0
 8002fde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fe2:	f7fd fc33 	bl	800084c <__aeabi_ddiv>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	460b      	mov	r3, r1
 8002fea:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f7fd fdd9 	bl	8000ba8 <__aeabi_d2uiz>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6423      	str	r3, [r4, #64]	; 0x40
				break;
 8002ffa:	bf00      	nop
		}



	  //Freq=1000000.0/(A_tick-Ala_tick);
	  if((A_tick-Ala_tick)<20408&&(A_tick-Ala_tick)>19607)
 8002ffc:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <TIM3_IRQHandler+0xb88>)
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <TIM3_IRQHandler+0xb8c>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f644 72b7 	movw	r2, #20407	; 0x4fb7
 800300a:	4293      	cmp	r3, r2
 800300c:	dc1a      	bgt.n	8003044 <TIM3_IRQHandler+0xb5c>
 800300e:	4b18      	ldr	r3, [pc, #96]	; (8003070 <TIM3_IRQHandler+0xb88>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	4b18      	ldr	r3, [pc, #96]	; (8003074 <TIM3_IRQHandler+0xb8c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f644 4297 	movw	r2, #19607	; 0x4c97
 800301c:	4293      	cmp	r3, r2
 800301e:	dd11      	ble.n	8003044 <TIM3_IRQHandler+0xb5c>
	  {
//	  	if(TIM2->CNT>((((A_tick-Ala_tick)*84)/600)-1))
//	  	{
//	  		TIM2->CNT=((((A_tick-Ala_tick)*84)/600)-1);
//	  	}
	  	TIM2->ARR=(((A_tick-Ala_tick)*84)/600)-1;
 8003020:	4b13      	ldr	r3, [pc, #76]	; (8003070 <TIM3_IRQHandler+0xb88>)
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	4b13      	ldr	r3, [pc, #76]	; (8003074 <TIM3_IRQHandler+0xb8c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2254      	movs	r2, #84	; 0x54
 800302c:	fb02 f303 	mul.w	r3, r2, r3
 8003030:	4a11      	ldr	r2, [pc, #68]	; (8003078 <TIM3_IRQHandler+0xb90>)
 8003032:	fb82 1203 	smull	r1, r2, r2, r3
 8003036:	1192      	asrs	r2, r2, #6
 8003038:	17db      	asrs	r3, r3, #31
 800303a:	1ad3      	subs	r3, r2, r3
 800303c:	1e5a      	subs	r2, r3, #1
 800303e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003042:	62da      	str	r2, [r3, #44]	; 0x2c
	  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8003044:	bf00      	nop
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bdb0      	pop	{r4, r5, r7, pc}
 800304c:	20000000 	.word	0x20000000
 8003050:	20000620 	.word	0x20000620
 8003054:	2000020c 	.word	0x2000020c
 8003058:	20000206 	.word	0x20000206
 800305c:	2000020a 	.word	0x2000020a
 8003060:	0800d1bc 	.word	0x0800d1bc
 8003064:	3ff00000 	.word	0x3ff00000
 8003068:	0800c85c 	.word	0x0800c85c
 800306c:	0800db1c 	.word	0x0800db1c
 8003070:	2000061c 	.word	0x2000061c
 8003074:	20000610 	.word	0x20000610
 8003078:	1b4e81b5 	.word	0x1b4e81b5

0800307c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8003082:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003086:	f001 ff25 	bl	8004ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800308a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800308e:	f001 ff21 	bl	8004ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8003092:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003096:	f001 ff1d 	bl	8004ed4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800309a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800309e:	f001 ff19 	bl	8004ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

	if((HAL_GetTick()-tick)>30)
 80030a2:	f000 fdf5 	bl	8003c90 <HAL_GetTick>
 80030a6:	4603      	mov	r3, r0
 80030a8:	4ab8      	ldr	r2, [pc, #736]	; (800338c <EXTI15_10_IRQHandler+0x310>)
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	2b1e      	cmp	r3, #30
 80030b0:	f240 833a 	bls.w	8003728 <EXTI15_10_IRQHandler+0x6ac>
	{
		//ROW1
			if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)==0)
 80030b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80030b8:	48b5      	ldr	r0, [pc, #724]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 80030ba:	f001 febf 	bl	8004e3c <HAL_GPIO_ReadPin>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f040 80ff 	bne.w	80032c4 <EXTI15_10_IRQHandler+0x248>
			{
				for(uint8_t i=1;i<5;i++)
 80030c6:	2301      	movs	r3, #1
 80030c8:	71fb      	strb	r3, [r7, #7]
 80030ca:	e0df      	b.n	800328c <EXTI15_10_IRQHandler+0x210>
				{
						HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 80030cc:	2201      	movs	r2, #1
 80030ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80030d2:	48af      	ldr	r0, [pc, #700]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 80030d4:	f001 feca 	bl	8004e6c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 80030d8:	2201      	movs	r2, #1
 80030da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030de:	48ac      	ldr	r0, [pc, #688]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 80030e0:	f001 fec4 	bl	8004e6c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 80030e4:	2201      	movs	r2, #1
 80030e6:	2180      	movs	r1, #128	; 0x80
 80030e8:	48a9      	ldr	r0, [pc, #676]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 80030ea:	f001 febf 	bl	8004e6c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_SET);
 80030ee:	2201      	movs	r2, #1
 80030f0:	2102      	movs	r1, #2
 80030f2:	48a8      	ldr	r0, [pc, #672]	; (8003394 <EXTI15_10_IRQHandler+0x318>)
 80030f4:	f001 feba 	bl	8004e6c <HAL_GPIO_WritePin>

						switch (i) {
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	3b01      	subs	r3, #1
 80030fc:	2b03      	cmp	r3, #3
 80030fe:	d825      	bhi.n	800314c <EXTI15_10_IRQHandler+0xd0>
 8003100:	a201      	add	r2, pc, #4	; (adr r2, 8003108 <EXTI15_10_IRQHandler+0x8c>)
 8003102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003106:	bf00      	nop
 8003108:	08003119 	.word	0x08003119
 800310c:	08003127 	.word	0x08003127
 8003110:	08003135 	.word	0x08003135
 8003114:	08003141 	.word	0x08003141
							case 1:
								HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 8003118:	2200      	movs	r2, #0
 800311a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800311e:	489c      	ldr	r0, [pc, #624]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 8003120:	f001 fea4 	bl	8004e6c <HAL_GPIO_WritePin>
								break;
 8003124:	e013      	b.n	800314e <EXTI15_10_IRQHandler+0xd2>
							case 2:
								HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 8003126:	2200      	movs	r2, #0
 8003128:	f44f 7180 	mov.w	r1, #256	; 0x100
 800312c:	4898      	ldr	r0, [pc, #608]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 800312e:	f001 fe9d 	bl	8004e6c <HAL_GPIO_WritePin>
								break;
 8003132:	e00c      	b.n	800314e <EXTI15_10_IRQHandler+0xd2>
							case 3:
								HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 8003134:	2200      	movs	r2, #0
 8003136:	2180      	movs	r1, #128	; 0x80
 8003138:	4895      	ldr	r0, [pc, #596]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 800313a:	f001 fe97 	bl	8004e6c <HAL_GPIO_WritePin>
								break;
 800313e:	e006      	b.n	800314e <EXTI15_10_IRQHandler+0xd2>
							case 4:
								HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
 8003140:	2200      	movs	r2, #0
 8003142:	2102      	movs	r1, #2
 8003144:	4893      	ldr	r0, [pc, #588]	; (8003394 <EXTI15_10_IRQHandler+0x318>)
 8003146:	f001 fe91 	bl	8004e6c <HAL_GPIO_WritePin>
								break;
 800314a:	e000      	b.n	800314e <EXTI15_10_IRQHandler+0xd2>
							default:
								break;
 800314c:	bf00      	nop
						}

						if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)==0)
 800314e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003152:	488f      	ldr	r0, [pc, #572]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 8003154:	f001 fe72 	bl	8004e3c <HAL_GPIO_ReadPin>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 8093 	bne.w	8003286 <EXTI15_10_IRQHandler+0x20a>
						{
							switch(i)
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	3b01      	subs	r3, #1
 8003164:	2b03      	cmp	r3, #3
 8003166:	f200 8096 	bhi.w	8003296 <EXTI15_10_IRQHandler+0x21a>
 800316a:	a201      	add	r2, pc, #4	; (adr r2, 8003170 <EXTI15_10_IRQHandler+0xf4>)
 800316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003170:	08003181 	.word	0x08003181
 8003174:	080031c3 	.word	0x080031c3
 8003178:	08003203 	.word	0x08003203
 800317c:	08003243 	.word	0x08003243
							{
								case 1:
								{
									while(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)==0){}
 8003180:	bf00      	nop
 8003182:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003186:	4882      	ldr	r0, [pc, #520]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 8003188:	f001 fe58 	bl	8004e3c <HAL_GPIO_ReadPin>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	d0f7      	beq.n	8003182 <EXTI15_10_IRQHandler+0x106>
									PHASE[0]-=500;
 8003192:	4b81      	ldr	r3, [pc, #516]	; (8003398 <EXTI15_10_IRQHandler+0x31c>)
 8003194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003198:	b29b      	uxth	r3, r3
 800319a:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 800319e:	b29b      	uxth	r3, r3
 80031a0:	b21a      	sxth	r2, r3
 80031a2:	4b7d      	ldr	r3, [pc, #500]	; (8003398 <EXTI15_10_IRQHandler+0x31c>)
 80031a4:	801a      	strh	r2, [r3, #0]
									HAL_I2C_Mem_Write(&hi2c1, ADDR_AT24C02_Write, 0, I2C_MEMADD_SIZE_16BIT,(uint8_t*)(&(PHASE[0])),8, 1000);
 80031a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031aa:	9302      	str	r3, [sp, #8]
 80031ac:	2308      	movs	r3, #8
 80031ae:	9301      	str	r3, [sp, #4]
 80031b0:	4b79      	ldr	r3, [pc, #484]	; (8003398 <EXTI15_10_IRQHandler+0x31c>)
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	2310      	movs	r3, #16
 80031b6:	2200      	movs	r2, #0
 80031b8:	21a0      	movs	r1, #160	; 0xa0
 80031ba:	4878      	ldr	r0, [pc, #480]	; (800339c <EXTI15_10_IRQHandler+0x320>)
 80031bc:	f001 fff2 	bl	80051a4 <HAL_I2C_Mem_Write>
									//
									goto END1;
 80031c0:	e060      	b.n	8003284 <EXTI15_10_IRQHandler+0x208>
								}
								case 2:
								{
									while(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)==0){}
 80031c2:	bf00      	nop
 80031c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031c8:	4871      	ldr	r0, [pc, #452]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 80031ca:	f001 fe37 	bl	8004e3c <HAL_GPIO_ReadPin>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f7      	beq.n	80031c4 <EXTI15_10_IRQHandler+0x148>
									PHASE[0]-=50;
 80031d4:	4b70      	ldr	r3, [pc, #448]	; (8003398 <EXTI15_10_IRQHandler+0x31c>)
 80031d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031da:	b29b      	uxth	r3, r3
 80031dc:	3b32      	subs	r3, #50	; 0x32
 80031de:	b29b      	uxth	r3, r3
 80031e0:	b21a      	sxth	r2, r3
 80031e2:	4b6d      	ldr	r3, [pc, #436]	; (8003398 <EXTI15_10_IRQHandler+0x31c>)
 80031e4:	801a      	strh	r2, [r3, #0]
									HAL_I2C_Mem_Write(&hi2c1, ADDR_AT24C02_Write, 0, I2C_MEMADD_SIZE_16BIT,(uint8_t*)(&(PHASE[0])),8, 1000);
 80031e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ea:	9302      	str	r3, [sp, #8]
 80031ec:	2308      	movs	r3, #8
 80031ee:	9301      	str	r3, [sp, #4]
 80031f0:	4b69      	ldr	r3, [pc, #420]	; (8003398 <EXTI15_10_IRQHandler+0x31c>)
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	2310      	movs	r3, #16
 80031f6:	2200      	movs	r2, #0
 80031f8:	21a0      	movs	r1, #160	; 0xa0
 80031fa:	4868      	ldr	r0, [pc, #416]	; (800339c <EXTI15_10_IRQHandler+0x320>)
 80031fc:	f001 ffd2 	bl	80051a4 <HAL_I2C_Mem_Write>
									//
									goto END1;
 8003200:	e040      	b.n	8003284 <EXTI15_10_IRQHandler+0x208>
								}
								case 3:
								{
									while(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)==0){}
 8003202:	bf00      	nop
 8003204:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003208:	4861      	ldr	r0, [pc, #388]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 800320a:	f001 fe17 	bl	8004e3c <HAL_GPIO_ReadPin>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f7      	beq.n	8003204 <EXTI15_10_IRQHandler+0x188>
									PHASE[0]+=50;
 8003214:	4b60      	ldr	r3, [pc, #384]	; (8003398 <EXTI15_10_IRQHandler+0x31c>)
 8003216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800321a:	b29b      	uxth	r3, r3
 800321c:	3332      	adds	r3, #50	; 0x32
 800321e:	b29b      	uxth	r3, r3
 8003220:	b21a      	sxth	r2, r3
 8003222:	4b5d      	ldr	r3, [pc, #372]	; (8003398 <EXTI15_10_IRQHandler+0x31c>)
 8003224:	801a      	strh	r2, [r3, #0]
									HAL_I2C_Mem_Write(&hi2c1, ADDR_AT24C02_Write, 0, I2C_MEMADD_SIZE_16BIT,(uint8_t*)(&(PHASE[0])),8, 1000);
 8003226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800322a:	9302      	str	r3, [sp, #8]
 800322c:	2308      	movs	r3, #8
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	4b59      	ldr	r3, [pc, #356]	; (8003398 <EXTI15_10_IRQHandler+0x31c>)
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	2310      	movs	r3, #16
 8003236:	2200      	movs	r2, #0
 8003238:	21a0      	movs	r1, #160	; 0xa0
 800323a:	4858      	ldr	r0, [pc, #352]	; (800339c <EXTI15_10_IRQHandler+0x320>)
 800323c:	f001 ffb2 	bl	80051a4 <HAL_I2C_Mem_Write>
									//
									goto END1;
 8003240:	e020      	b.n	8003284 <EXTI15_10_IRQHandler+0x208>
								}
								case 4:
								{
									while(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)==0){}
 8003242:	bf00      	nop
 8003244:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003248:	4851      	ldr	r0, [pc, #324]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 800324a:	f001 fdf7 	bl	8004e3c <HAL_GPIO_ReadPin>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f7      	beq.n	8003244 <EXTI15_10_IRQHandler+0x1c8>
									PHASE[0]+=500;
 8003254:	4b50      	ldr	r3, [pc, #320]	; (8003398 <EXTI15_10_IRQHandler+0x31c>)
 8003256:	f9b3 3000 	ldrsh.w	r3, [r3]
 800325a:	b29b      	uxth	r3, r3
 800325c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8003260:	b29b      	uxth	r3, r3
 8003262:	b21a      	sxth	r2, r3
 8003264:	4b4c      	ldr	r3, [pc, #304]	; (8003398 <EXTI15_10_IRQHandler+0x31c>)
 8003266:	801a      	strh	r2, [r3, #0]
									HAL_I2C_Mem_Write(&hi2c1, ADDR_AT24C02_Write, 0, I2C_MEMADD_SIZE_16BIT,(uint8_t*)(&(PHASE[0])),8, 1000);
 8003268:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800326c:	9302      	str	r3, [sp, #8]
 800326e:	2308      	movs	r3, #8
 8003270:	9301      	str	r3, [sp, #4]
 8003272:	4b49      	ldr	r3, [pc, #292]	; (8003398 <EXTI15_10_IRQHandler+0x31c>)
 8003274:	9300      	str	r3, [sp, #0]
 8003276:	2310      	movs	r3, #16
 8003278:	2200      	movs	r2, #0
 800327a:	21a0      	movs	r1, #160	; 0xa0
 800327c:	4847      	ldr	r0, [pc, #284]	; (800339c <EXTI15_10_IRQHandler+0x320>)
 800327e:	f001 ff91 	bl	80051a4 <HAL_I2C_Mem_Write>
									//
									goto END1;
 8003282:	bf00      	nop
								}
							}
								END1:
								break;
 8003284:	e007      	b.n	8003296 <EXTI15_10_IRQHandler+0x21a>
				for(uint8_t i=1;i<5;i++)
 8003286:	79fb      	ldrb	r3, [r7, #7]
 8003288:	3301      	adds	r3, #1
 800328a:	71fb      	strb	r3, [r7, #7]
 800328c:	79fb      	ldrb	r3, [r7, #7]
 800328e:	2b04      	cmp	r3, #4
 8003290:	f67f af1c 	bls.w	80030cc <EXTI15_10_IRQHandler+0x50>
 8003294:	e000      	b.n	8003298 <EXTI15_10_IRQHandler+0x21c>
								break;
 8003296:	bf00      	nop
						}
			}
				HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 8003298:	2200      	movs	r2, #0
 800329a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800329e:	483c      	ldr	r0, [pc, #240]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 80032a0:	f001 fde4 	bl	8004e6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 80032a4:	2200      	movs	r2, #0
 80032a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032aa:	4839      	ldr	r0, [pc, #228]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 80032ac:	f001 fdde 	bl	8004e6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 80032b0:	2200      	movs	r2, #0
 80032b2:	2180      	movs	r1, #128	; 0x80
 80032b4:	4836      	ldr	r0, [pc, #216]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 80032b6:	f001 fdd9 	bl	8004e6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
 80032ba:	2200      	movs	r2, #0
 80032bc:	2102      	movs	r1, #2
 80032be:	4835      	ldr	r0, [pc, #212]	; (8003394 <EXTI15_10_IRQHandler+0x318>)
 80032c0:	f001 fdd4 	bl	8004e6c <HAL_GPIO_WritePin>
  }

		//ROW2
			if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)==0)
 80032c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032c8:	4831      	ldr	r0, [pc, #196]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 80032ca:	f001 fdb7 	bl	8004e3c <HAL_GPIO_ReadPin>
 80032ce:	4603      	mov	r3, r0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f040 80c5 	bne.w	8003460 <EXTI15_10_IRQHandler+0x3e4>
			{
				for(uint8_t i=1;i<5;i++)
 80032d6:	2301      	movs	r3, #1
 80032d8:	71bb      	strb	r3, [r7, #6]
 80032da:	e0a5      	b.n	8003428 <EXTI15_10_IRQHandler+0x3ac>
				{
						HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 80032dc:	2201      	movs	r2, #1
 80032de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032e2:	482b      	ldr	r0, [pc, #172]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 80032e4:	f001 fdc2 	bl	8004e6c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 80032e8:	2201      	movs	r2, #1
 80032ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032ee:	4828      	ldr	r0, [pc, #160]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 80032f0:	f001 fdbc 	bl	8004e6c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 80032f4:	2201      	movs	r2, #1
 80032f6:	2180      	movs	r1, #128	; 0x80
 80032f8:	4825      	ldr	r0, [pc, #148]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 80032fa:	f001 fdb7 	bl	8004e6c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_SET);
 80032fe:	2201      	movs	r2, #1
 8003300:	2102      	movs	r1, #2
 8003302:	4824      	ldr	r0, [pc, #144]	; (8003394 <EXTI15_10_IRQHandler+0x318>)
 8003304:	f001 fdb2 	bl	8004e6c <HAL_GPIO_WritePin>

						switch (i) {
 8003308:	79bb      	ldrb	r3, [r7, #6]
 800330a:	3b01      	subs	r3, #1
 800330c:	2b03      	cmp	r3, #3
 800330e:	d825      	bhi.n	800335c <EXTI15_10_IRQHandler+0x2e0>
 8003310:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <EXTI15_10_IRQHandler+0x29c>)
 8003312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003316:	bf00      	nop
 8003318:	08003329 	.word	0x08003329
 800331c:	08003337 	.word	0x08003337
 8003320:	08003345 	.word	0x08003345
 8003324:	08003351 	.word	0x08003351
							case 1:
								HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 8003328:	2200      	movs	r2, #0
 800332a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800332e:	4818      	ldr	r0, [pc, #96]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 8003330:	f001 fd9c 	bl	8004e6c <HAL_GPIO_WritePin>
								break;
 8003334:	e013      	b.n	800335e <EXTI15_10_IRQHandler+0x2e2>
							case 2:
								HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 8003336:	2200      	movs	r2, #0
 8003338:	f44f 7180 	mov.w	r1, #256	; 0x100
 800333c:	4814      	ldr	r0, [pc, #80]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 800333e:	f001 fd95 	bl	8004e6c <HAL_GPIO_WritePin>
								break;
 8003342:	e00c      	b.n	800335e <EXTI15_10_IRQHandler+0x2e2>
							case 3:
								HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 8003344:	2200      	movs	r2, #0
 8003346:	2180      	movs	r1, #128	; 0x80
 8003348:	4811      	ldr	r0, [pc, #68]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 800334a:	f001 fd8f 	bl	8004e6c <HAL_GPIO_WritePin>
								break;
 800334e:	e006      	b.n	800335e <EXTI15_10_IRQHandler+0x2e2>
							case 4:
								HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
 8003350:	2200      	movs	r2, #0
 8003352:	2102      	movs	r1, #2
 8003354:	480f      	ldr	r0, [pc, #60]	; (8003394 <EXTI15_10_IRQHandler+0x318>)
 8003356:	f001 fd89 	bl	8004e6c <HAL_GPIO_WritePin>
								break;
 800335a:	e000      	b.n	800335e <EXTI15_10_IRQHandler+0x2e2>
							default:
								break;
 800335c:	bf00      	nop
						}

						if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)==0)
 800335e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003362:	480b      	ldr	r0, [pc, #44]	; (8003390 <EXTI15_10_IRQHandler+0x314>)
 8003364:	f001 fd6a 	bl	8004e3c <HAL_GPIO_ReadPin>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d159      	bne.n	8003422 <EXTI15_10_IRQHandler+0x3a6>
						{
							switch(i)
 800336e:	79bb      	ldrb	r3, [r7, #6]
 8003370:	3b01      	subs	r3, #1
 8003372:	2b03      	cmp	r3, #3
 8003374:	d85d      	bhi.n	8003432 <EXTI15_10_IRQHandler+0x3b6>
 8003376:	a201      	add	r2, pc, #4	; (adr r2, 800337c <EXTI15_10_IRQHandler+0x300>)
 8003378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800337c:	080033a1 	.word	0x080033a1
 8003380:	080033cd 	.word	0x080033cd
 8003384:	080033f9 	.word	0x080033f9
 8003388:	0800340d 	.word	0x0800340d
 800338c:	20000614 	.word	0x20000614
 8003390:	40021000 	.word	0x40021000
 8003394:	40021800 	.word	0x40021800
 8003398:	20000004 	.word	0x20000004
 800339c:	20000268 	.word	0x20000268
							{
								case 1:
								{
									while(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)==0){}
 80033a0:	bf00      	nop
 80033a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033a6:	48c5      	ldr	r0, [pc, #788]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 80033a8:	f001 fd48 	bl	8004e3c <HAL_GPIO_ReadPin>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0f7      	beq.n	80033a2 <EXTI15_10_IRQHandler+0x326>
									//PWM=0;
									//TIM2->CCR2 = 0;
								  HAL_GPIO_TogglePin(SW1_GPIO_Port, SW1_Pin);
 80033b2:	2101      	movs	r1, #1
 80033b4:	48c2      	ldr	r0, [pc, #776]	; (80036c0 <EXTI15_10_IRQHandler+0x644>)
 80033b6:	f001 fd72 	bl	8004e9e <HAL_GPIO_TogglePin>
								  HAL_GPIO_TogglePin(SW2_GPIO_Port, SW2_Pin);
 80033ba:	2102      	movs	r1, #2
 80033bc:	48c0      	ldr	r0, [pc, #768]	; (80036c0 <EXTI15_10_IRQHandler+0x644>)
 80033be:	f001 fd6e 	bl	8004e9e <HAL_GPIO_TogglePin>
								  HAL_GPIO_TogglePin(SW3_GPIO_Port, SW3_Pin);
 80033c2:	2104      	movs	r1, #4
 80033c4:	48be      	ldr	r0, [pc, #760]	; (80036c0 <EXTI15_10_IRQHandler+0x644>)
 80033c6:	f001 fd6a 	bl	8004e9e <HAL_GPIO_TogglePin>
								  //Mode=3;
									//
									goto END2;
 80033ca:	e029      	b.n	8003420 <EXTI15_10_IRQHandler+0x3a4>
								}
								case 2:
								{
									while(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)==0){}
 80033cc:	bf00      	nop
 80033ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033d2:	48ba      	ldr	r0, [pc, #744]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 80033d4:	f001 fd32 	bl	8004e3c <HAL_GPIO_ReadPin>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f7      	beq.n	80033ce <EXTI15_10_IRQHandler+0x352>
									//Mode=2;
									HAL_GPIO_TogglePin(SW4_GPIO_Port, SW4_Pin);
 80033de:	2108      	movs	r1, #8
 80033e0:	48b7      	ldr	r0, [pc, #732]	; (80036c0 <EXTI15_10_IRQHandler+0x644>)
 80033e2:	f001 fd5c 	bl	8004e9e <HAL_GPIO_TogglePin>
									HAL_GPIO_TogglePin(SW5_GPIO_Port, SW5_Pin);
 80033e6:	2110      	movs	r1, #16
 80033e8:	48b5      	ldr	r0, [pc, #724]	; (80036c0 <EXTI15_10_IRQHandler+0x644>)
 80033ea:	f001 fd58 	bl	8004e9e <HAL_GPIO_TogglePin>
									HAL_GPIO_TogglePin(SW6_GPIO_Port, SW6_Pin);
 80033ee:	2120      	movs	r1, #32
 80033f0:	48b3      	ldr	r0, [pc, #716]	; (80036c0 <EXTI15_10_IRQHandler+0x644>)
 80033f2:	f001 fd54 	bl	8004e9e <HAL_GPIO_TogglePin>
									//
									goto END2;
 80033f6:	e013      	b.n	8003420 <EXTI15_10_IRQHandler+0x3a4>
								}
								case 3:
								{
									while(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)==0){}
 80033f8:	bf00      	nop
 80033fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033fe:	48af      	ldr	r0, [pc, #700]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 8003400:	f001 fd1c 	bl	8004e3c <HAL_GPIO_ReadPin>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f7      	beq.n	80033fa <EXTI15_10_IRQHandler+0x37e>
									//
									goto END2;
 800340a:	e009      	b.n	8003420 <EXTI15_10_IRQHandler+0x3a4>
								}
								case 4:
								{
									while(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)==0){}
 800340c:	bf00      	nop
 800340e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003412:	48aa      	ldr	r0, [pc, #680]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 8003414:	f001 fd12 	bl	8004e3c <HAL_GPIO_ReadPin>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f7      	beq.n	800340e <EXTI15_10_IRQHandler+0x392>
									//
									goto END2;
 800341e:	bf00      	nop
								}
							}
								END2:
								break;
 8003420:	e007      	b.n	8003432 <EXTI15_10_IRQHandler+0x3b6>
				for(uint8_t i=1;i<5;i++)
 8003422:	79bb      	ldrb	r3, [r7, #6]
 8003424:	3301      	adds	r3, #1
 8003426:	71bb      	strb	r3, [r7, #6]
 8003428:	79bb      	ldrb	r3, [r7, #6]
 800342a:	2b04      	cmp	r3, #4
 800342c:	f67f af56 	bls.w	80032dc <EXTI15_10_IRQHandler+0x260>
 8003430:	e000      	b.n	8003434 <EXTI15_10_IRQHandler+0x3b8>
								break;
 8003432:	bf00      	nop
						}
			}
				HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 8003434:	2200      	movs	r2, #0
 8003436:	f44f 7100 	mov.w	r1, #512	; 0x200
 800343a:	48a0      	ldr	r0, [pc, #640]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 800343c:	f001 fd16 	bl	8004e6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 8003440:	2200      	movs	r2, #0
 8003442:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003446:	489d      	ldr	r0, [pc, #628]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 8003448:	f001 fd10 	bl	8004e6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 800344c:	2200      	movs	r2, #0
 800344e:	2180      	movs	r1, #128	; 0x80
 8003450:	489a      	ldr	r0, [pc, #616]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 8003452:	f001 fd0b 	bl	8004e6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
 8003456:	2200      	movs	r2, #0
 8003458:	2102      	movs	r1, #2
 800345a:	489a      	ldr	r0, [pc, #616]	; (80036c4 <EXTI15_10_IRQHandler+0x648>)
 800345c:	f001 fd06 	bl	8004e6c <HAL_GPIO_WritePin>
  }

		//ROW3
			if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)==0)
 8003460:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003464:	4895      	ldr	r0, [pc, #596]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 8003466:	f001 fce9 	bl	8004e3c <HAL_GPIO_ReadPin>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	f040 80a3 	bne.w	80035b8 <EXTI15_10_IRQHandler+0x53c>
			{
				for(uint8_t i=1;i<5;i++)
 8003472:	2301      	movs	r3, #1
 8003474:	717b      	strb	r3, [r7, #5]
 8003476:	e083      	b.n	8003580 <EXTI15_10_IRQHandler+0x504>
				{
						HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 8003478:	2201      	movs	r2, #1
 800347a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800347e:	488f      	ldr	r0, [pc, #572]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 8003480:	f001 fcf4 	bl	8004e6c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 8003484:	2201      	movs	r2, #1
 8003486:	f44f 7180 	mov.w	r1, #256	; 0x100
 800348a:	488c      	ldr	r0, [pc, #560]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 800348c:	f001 fcee 	bl	8004e6c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 8003490:	2201      	movs	r2, #1
 8003492:	2180      	movs	r1, #128	; 0x80
 8003494:	4889      	ldr	r0, [pc, #548]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 8003496:	f001 fce9 	bl	8004e6c <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_SET);
 800349a:	2201      	movs	r2, #1
 800349c:	2102      	movs	r1, #2
 800349e:	4889      	ldr	r0, [pc, #548]	; (80036c4 <EXTI15_10_IRQHandler+0x648>)
 80034a0:	f001 fce4 	bl	8004e6c <HAL_GPIO_WritePin>

						switch (i) {
 80034a4:	797b      	ldrb	r3, [r7, #5]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d825      	bhi.n	80034f8 <EXTI15_10_IRQHandler+0x47c>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <EXTI15_10_IRQHandler+0x438>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034c5 	.word	0x080034c5
 80034b8:	080034d3 	.word	0x080034d3
 80034bc:	080034e1 	.word	0x080034e1
 80034c0:	080034ed 	.word	0x080034ed
							case 1:
								HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 80034c4:	2200      	movs	r2, #0
 80034c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034ca:	487c      	ldr	r0, [pc, #496]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 80034cc:	f001 fcce 	bl	8004e6c <HAL_GPIO_WritePin>
								break;
 80034d0:	e013      	b.n	80034fa <EXTI15_10_IRQHandler+0x47e>
							case 2:
								HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 80034d2:	2200      	movs	r2, #0
 80034d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034d8:	4878      	ldr	r0, [pc, #480]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 80034da:	f001 fcc7 	bl	8004e6c <HAL_GPIO_WritePin>
								break;
 80034de:	e00c      	b.n	80034fa <EXTI15_10_IRQHandler+0x47e>
							case 3:
								HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 80034e0:	2200      	movs	r2, #0
 80034e2:	2180      	movs	r1, #128	; 0x80
 80034e4:	4875      	ldr	r0, [pc, #468]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 80034e6:	f001 fcc1 	bl	8004e6c <HAL_GPIO_WritePin>
								break;
 80034ea:	e006      	b.n	80034fa <EXTI15_10_IRQHandler+0x47e>
							case 4:
								HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
 80034ec:	2200      	movs	r2, #0
 80034ee:	2102      	movs	r1, #2
 80034f0:	4874      	ldr	r0, [pc, #464]	; (80036c4 <EXTI15_10_IRQHandler+0x648>)
 80034f2:	f001 fcbb 	bl	8004e6c <HAL_GPIO_WritePin>
								break;
 80034f6:	e000      	b.n	80034fa <EXTI15_10_IRQHandler+0x47e>
							default:
								break;
 80034f8:	bf00      	nop
						}

						if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)==0)
 80034fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80034fe:	486f      	ldr	r0, [pc, #444]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 8003500:	f001 fc9c 	bl	8004e3c <HAL_GPIO_ReadPin>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d137      	bne.n	800357a <EXTI15_10_IRQHandler+0x4fe>
						{
							switch(i)
 800350a:	797b      	ldrb	r3, [r7, #5]
 800350c:	3b01      	subs	r3, #1
 800350e:	2b03      	cmp	r3, #3
 8003510:	d83b      	bhi.n	800358a <EXTI15_10_IRQHandler+0x50e>
 8003512:	a201      	add	r2, pc, #4	; (adr r2, 8003518 <EXTI15_10_IRQHandler+0x49c>)
 8003514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003518:	08003529 	.word	0x08003529
 800351c:	0800353d 	.word	0x0800353d
 8003520:	08003551 	.word	0x08003551
 8003524:	08003565 	.word	0x08003565
							{
								case 1:
								{
									while(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)==0){}
 8003528:	bf00      	nop
 800352a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800352e:	4863      	ldr	r0, [pc, #396]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 8003530:	f001 fc84 	bl	8004e3c <HAL_GPIO_ReadPin>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f7      	beq.n	800352a <EXTI15_10_IRQHandler+0x4ae>
									//
									goto END3;
 800353a:	e01d      	b.n	8003578 <EXTI15_10_IRQHandler+0x4fc>
								}
								case 2:
								{
									while(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)==0){}
 800353c:	bf00      	nop
 800353e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003542:	485e      	ldr	r0, [pc, #376]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 8003544:	f001 fc7a 	bl	8004e3c <HAL_GPIO_ReadPin>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f7      	beq.n	800353e <EXTI15_10_IRQHandler+0x4c2>
									//
									goto END3;
 800354e:	e013      	b.n	8003578 <EXTI15_10_IRQHandler+0x4fc>
								}
								case 3:
								{
									while(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)==0){}
 8003550:	bf00      	nop
 8003552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003556:	4859      	ldr	r0, [pc, #356]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 8003558:	f001 fc70 	bl	8004e3c <HAL_GPIO_ReadPin>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d0f7      	beq.n	8003552 <EXTI15_10_IRQHandler+0x4d6>
									//
									goto END3;
 8003562:	e009      	b.n	8003578 <EXTI15_10_IRQHandler+0x4fc>
								}
								case 4:
								{
									while(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)==0){}
 8003564:	bf00      	nop
 8003566:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800356a:	4854      	ldr	r0, [pc, #336]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 800356c:	f001 fc66 	bl	8004e3c <HAL_GPIO_ReadPin>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f7      	beq.n	8003566 <EXTI15_10_IRQHandler+0x4ea>
									//
									goto END3;
 8003576:	bf00      	nop
								}
							}
								END3:
								break;
 8003578:	e007      	b.n	800358a <EXTI15_10_IRQHandler+0x50e>
				for(uint8_t i=1;i<5;i++)
 800357a:	797b      	ldrb	r3, [r7, #5]
 800357c:	3301      	adds	r3, #1
 800357e:	717b      	strb	r3, [r7, #5]
 8003580:	797b      	ldrb	r3, [r7, #5]
 8003582:	2b04      	cmp	r3, #4
 8003584:	f67f af78 	bls.w	8003478 <EXTI15_10_IRQHandler+0x3fc>
 8003588:	e000      	b.n	800358c <EXTI15_10_IRQHandler+0x510>
								break;
 800358a:	bf00      	nop
						}
			}
				HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 800358c:	2200      	movs	r2, #0
 800358e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003592:	484a      	ldr	r0, [pc, #296]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 8003594:	f001 fc6a 	bl	8004e6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 8003598:	2200      	movs	r2, #0
 800359a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800359e:	4847      	ldr	r0, [pc, #284]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 80035a0:	f001 fc64 	bl	8004e6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 80035a4:	2200      	movs	r2, #0
 80035a6:	2180      	movs	r1, #128	; 0x80
 80035a8:	4844      	ldr	r0, [pc, #272]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 80035aa:	f001 fc5f 	bl	8004e6c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
 80035ae:	2200      	movs	r2, #0
 80035b0:	2102      	movs	r1, #2
 80035b2:	4844      	ldr	r0, [pc, #272]	; (80036c4 <EXTI15_10_IRQHandler+0x648>)
 80035b4:	f001 fc5a 	bl	8004e6c <HAL_GPIO_WritePin>
  }

			//ROW4
				if(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin)==0)
 80035b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035bc:	483f      	ldr	r0, [pc, #252]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 80035be:	f001 fc3d 	bl	8004e3c <HAL_GPIO_ReadPin>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f040 80a9 	bne.w	800371c <EXTI15_10_IRQHandler+0x6a0>
				{
					for(uint8_t i=1;i<5;i++)
 80035ca:	2301      	movs	r3, #1
 80035cc:	713b      	strb	r3, [r7, #4]
 80035ce:	e089      	b.n	80036e4 <EXTI15_10_IRQHandler+0x668>
					{
							HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 80035d0:	2201      	movs	r2, #1
 80035d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035d6:	4839      	ldr	r0, [pc, #228]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 80035d8:	f001 fc48 	bl	8004e6c <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 80035dc:	2201      	movs	r2, #1
 80035de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035e2:	4836      	ldr	r0, [pc, #216]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 80035e4:	f001 fc42 	bl	8004e6c <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 80035e8:	2201      	movs	r2, #1
 80035ea:	2180      	movs	r1, #128	; 0x80
 80035ec:	4833      	ldr	r0, [pc, #204]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 80035ee:	f001 fc3d 	bl	8004e6c <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_SET);
 80035f2:	2201      	movs	r2, #1
 80035f4:	2102      	movs	r1, #2
 80035f6:	4833      	ldr	r0, [pc, #204]	; (80036c4 <EXTI15_10_IRQHandler+0x648>)
 80035f8:	f001 fc38 	bl	8004e6c <HAL_GPIO_WritePin>

							switch (i) {
 80035fc:	793b      	ldrb	r3, [r7, #4]
 80035fe:	3b01      	subs	r3, #1
 8003600:	2b03      	cmp	r3, #3
 8003602:	d825      	bhi.n	8003650 <EXTI15_10_IRQHandler+0x5d4>
 8003604:	a201      	add	r2, pc, #4	; (adr r2, 800360c <EXTI15_10_IRQHandler+0x590>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	0800361d 	.word	0x0800361d
 8003610:	0800362b 	.word	0x0800362b
 8003614:	08003639 	.word	0x08003639
 8003618:	08003645 	.word	0x08003645
								case 1:
									HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 800361c:	2200      	movs	r2, #0
 800361e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003622:	4826      	ldr	r0, [pc, #152]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 8003624:	f001 fc22 	bl	8004e6c <HAL_GPIO_WritePin>
									break;
 8003628:	e013      	b.n	8003652 <EXTI15_10_IRQHandler+0x5d6>
								case 2:
									HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 800362a:	2200      	movs	r2, #0
 800362c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003630:	4822      	ldr	r0, [pc, #136]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 8003632:	f001 fc1b 	bl	8004e6c <HAL_GPIO_WritePin>
									break;
 8003636:	e00c      	b.n	8003652 <EXTI15_10_IRQHandler+0x5d6>
								case 3:
									HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 8003638:	2200      	movs	r2, #0
 800363a:	2180      	movs	r1, #128	; 0x80
 800363c:	481f      	ldr	r0, [pc, #124]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 800363e:	f001 fc15 	bl	8004e6c <HAL_GPIO_WritePin>
									break;
 8003642:	e006      	b.n	8003652 <EXTI15_10_IRQHandler+0x5d6>
								case 4:
									HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
 8003644:	2200      	movs	r2, #0
 8003646:	2102      	movs	r1, #2
 8003648:	481e      	ldr	r0, [pc, #120]	; (80036c4 <EXTI15_10_IRQHandler+0x648>)
 800364a:	f001 fc0f 	bl	8004e6c <HAL_GPIO_WritePin>
									break;
 800364e:	e000      	b.n	8003652 <EXTI15_10_IRQHandler+0x5d6>
								default:
									break;
 8003650:	bf00      	nop
							}

							if(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin)==0)
 8003652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003656:	4819      	ldr	r0, [pc, #100]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 8003658:	f001 fbf0 	bl	8004e3c <HAL_GPIO_ReadPin>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d13d      	bne.n	80036de <EXTI15_10_IRQHandler+0x662>
							{
								switch(i)
 8003662:	793b      	ldrb	r3, [r7, #4]
 8003664:	3b01      	subs	r3, #1
 8003666:	2b03      	cmp	r3, #3
 8003668:	d841      	bhi.n	80036ee <EXTI15_10_IRQHandler+0x672>
 800366a:	a201      	add	r2, pc, #4	; (adr r2, 8003670 <EXTI15_10_IRQHandler+0x5f4>)
 800366c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003670:	08003681 	.word	0x08003681
 8003674:	08003695 	.word	0x08003695
 8003678:	080036a9 	.word	0x080036a9
 800367c:	080036c9 	.word	0x080036c9
								{
									case 1:
									{
										while(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin)==0){}
 8003680:	bf00      	nop
 8003682:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003686:	480d      	ldr	r0, [pc, #52]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 8003688:	f001 fbd8 	bl	8004e3c <HAL_GPIO_ReadPin>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f7      	beq.n	8003682 <EXTI15_10_IRQHandler+0x606>
										//
										goto END4;
 8003692:	e023      	b.n	80036dc <EXTI15_10_IRQHandler+0x660>
									}
									case 2:
									{
										while(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin)==0){}
 8003694:	bf00      	nop
 8003696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800369a:	4808      	ldr	r0, [pc, #32]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 800369c:	f001 fbce 	bl	8004e3c <HAL_GPIO_ReadPin>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0f7      	beq.n	8003696 <EXTI15_10_IRQHandler+0x61a>
										//
										goto END4;
 80036a6:	e019      	b.n	80036dc <EXTI15_10_IRQHandler+0x660>
									}
									case 3:
									{
										while(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin)==0){}
 80036a8:	bf00      	nop
 80036aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036ae:	4803      	ldr	r0, [pc, #12]	; (80036bc <EXTI15_10_IRQHandler+0x640>)
 80036b0:	f001 fbc4 	bl	8004e3c <HAL_GPIO_ReadPin>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f7      	beq.n	80036aa <EXTI15_10_IRQHandler+0x62e>
										//
										goto END4;
 80036ba:	e00f      	b.n	80036dc <EXTI15_10_IRQHandler+0x660>
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40020c00 	.word	0x40020c00
 80036c4:	40021800 	.word	0x40021800
									}
									case 4:
									{
										while(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin)==0){}
 80036c8:	bf00      	nop
 80036ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80036ce:	4818      	ldr	r0, [pc, #96]	; (8003730 <EXTI15_10_IRQHandler+0x6b4>)
 80036d0:	f001 fbb4 	bl	8004e3c <HAL_GPIO_ReadPin>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f7      	beq.n	80036ca <EXTI15_10_IRQHandler+0x64e>
										//
										goto END4;
 80036da:	bf00      	nop
									}
								}
									END4:
									break;
 80036dc:	e007      	b.n	80036ee <EXTI15_10_IRQHandler+0x672>
					for(uint8_t i=1;i<5;i++)
 80036de:	793b      	ldrb	r3, [r7, #4]
 80036e0:	3301      	adds	r3, #1
 80036e2:	713b      	strb	r3, [r7, #4]
 80036e4:	793b      	ldrb	r3, [r7, #4]
 80036e6:	2b04      	cmp	r3, #4
 80036e8:	f67f af72 	bls.w	80035d0 <EXTI15_10_IRQHandler+0x554>
 80036ec:	e000      	b.n	80036f0 <EXTI15_10_IRQHandler+0x674>
									break;
 80036ee:	bf00      	nop
							}
				}
					HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 80036f0:	2200      	movs	r2, #0
 80036f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80036f6:	480e      	ldr	r0, [pc, #56]	; (8003730 <EXTI15_10_IRQHandler+0x6b4>)
 80036f8:	f001 fbb8 	bl	8004e6c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 80036fc:	2200      	movs	r2, #0
 80036fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003702:	480b      	ldr	r0, [pc, #44]	; (8003730 <EXTI15_10_IRQHandler+0x6b4>)
 8003704:	f001 fbb2 	bl	8004e6c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 8003708:	2200      	movs	r2, #0
 800370a:	2180      	movs	r1, #128	; 0x80
 800370c:	4808      	ldr	r0, [pc, #32]	; (8003730 <EXTI15_10_IRQHandler+0x6b4>)
 800370e:	f001 fbad 	bl	8004e6c <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
 8003712:	2200      	movs	r2, #0
 8003714:	2102      	movs	r1, #2
 8003716:	4807      	ldr	r0, [pc, #28]	; (8003734 <EXTI15_10_IRQHandler+0x6b8>)
 8003718:	f001 fba8 	bl	8004e6c <HAL_GPIO_WritePin>
	  }

				tick = HAL_GetTick();
 800371c:	f000 fab8 	bl	8003c90 <HAL_GetTick>
 8003720:	4603      	mov	r3, r0
 8003722:	461a      	mov	r2, r3
 8003724:	4b04      	ldr	r3, [pc, #16]	; (8003738 <EXTI15_10_IRQHandler+0x6bc>)
 8003726:	601a      	str	r2, [r3, #0]
}
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003728:	bf00      	nop
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40021000 	.word	0x40021000
 8003734:	40021800 	.word	0x40021800
 8003738:	20000614 	.word	0x20000614

0800373c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
	return 1;
 8003740:	2301      	movs	r3, #1
}
 8003742:	4618      	mov	r0, r3
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <_kill>:

int _kill(int pid, int sig)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003756:	f004 fbfb 	bl	8007f50 <__errno>
 800375a:	4603      	mov	r3, r0
 800375c:	2216      	movs	r2, #22
 800375e:	601a      	str	r2, [r3, #0]
	return -1;
 8003760:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}

0800376c <_exit>:

void _exit (int status)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003774:	f04f 31ff 	mov.w	r1, #4294967295
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7ff ffe7 	bl	800374c <_kill>
	while (1) {}		/* Make sure we hang here */
 800377e:	e7fe      	b.n	800377e <_exit+0x12>

08003780 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800378c:	2300      	movs	r3, #0
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	e00a      	b.n	80037a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003792:	f3af 8000 	nop.w
 8003796:	4601      	mov	r1, r0
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	60ba      	str	r2, [r7, #8]
 800379e:	b2ca      	uxtb	r2, r1
 80037a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	3301      	adds	r3, #1
 80037a6:	617b      	str	r3, [r7, #20]
 80037a8:	697a      	ldr	r2, [r7, #20]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	dbf0      	blt.n	8003792 <_read+0x12>
	}

return len;
 80037b0:	687b      	ldr	r3, [r7, #4]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b086      	sub	sp, #24
 80037be:	af00      	add	r7, sp, #0
 80037c0:	60f8      	str	r0, [r7, #12]
 80037c2:	60b9      	str	r1, [r7, #8]
 80037c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037c6:	2300      	movs	r3, #0
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e009      	b.n	80037e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	60ba      	str	r2, [r7, #8]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	3301      	adds	r3, #1
 80037de:	617b      	str	r3, [r7, #20]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	dbf1      	blt.n	80037cc <_write+0x12>
	}
	return len;
 80037e8:	687b      	ldr	r3, [r7, #4]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <_close>:

int _close(int file)
{
 80037f2:	b480      	push	{r7}
 80037f4:	b083      	sub	sp, #12
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
	return -1;
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80037fe:	4618      	mov	r0, r3
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr

0800380a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
 8003812:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800381a:	605a      	str	r2, [r3, #4]
	return 0;
 800381c:	2300      	movs	r3, #0
}
 800381e:	4618      	mov	r0, r3
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <_isatty>:

int _isatty(int file)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
	return 1;
 8003832:	2301      	movs	r3, #1
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
	return 0;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3714      	adds	r7, #20
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
	...

0800385c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003864:	4a14      	ldr	r2, [pc, #80]	; (80038b8 <_sbrk+0x5c>)
 8003866:	4b15      	ldr	r3, [pc, #84]	; (80038bc <_sbrk+0x60>)
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003870:	4b13      	ldr	r3, [pc, #76]	; (80038c0 <_sbrk+0x64>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d102      	bne.n	800387e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003878:	4b11      	ldr	r3, [pc, #68]	; (80038c0 <_sbrk+0x64>)
 800387a:	4a12      	ldr	r2, [pc, #72]	; (80038c4 <_sbrk+0x68>)
 800387c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <_sbrk+0x64>)
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4413      	add	r3, r2
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	429a      	cmp	r2, r3
 800388a:	d207      	bcs.n	800389c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800388c:	f004 fb60 	bl	8007f50 <__errno>
 8003890:	4603      	mov	r3, r0
 8003892:	220c      	movs	r2, #12
 8003894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003896:	f04f 33ff 	mov.w	r3, #4294967295
 800389a:	e009      	b.n	80038b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800389c:	4b08      	ldr	r3, [pc, #32]	; (80038c0 <_sbrk+0x64>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038a2:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <_sbrk+0x64>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4413      	add	r3, r2
 80038aa:	4a05      	ldr	r2, [pc, #20]	; (80038c0 <_sbrk+0x64>)
 80038ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80038ae:	68fb      	ldr	r3, [r7, #12]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20020000 	.word	0x20020000
 80038bc:	00000400 	.word	0x00000400
 80038c0:	20000210 	.word	0x20000210
 80038c4:	20000650 	.word	0x20000650

080038c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <SystemInit+0x20>)
 80038ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d2:	4a05      	ldr	r2, [pc, #20]	; (80038e8 <SystemInit+0x20>)
 80038d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80038d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038dc:	bf00      	nop
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80038ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003924 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80038f0:	480d      	ldr	r0, [pc, #52]	; (8003928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80038f2:	490e      	ldr	r1, [pc, #56]	; (800392c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80038f4:	4a0e      	ldr	r2, [pc, #56]	; (8003930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80038f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038f8:	e002      	b.n	8003900 <LoopCopyDataInit>

080038fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038fe:	3304      	adds	r3, #4

08003900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003904:	d3f9      	bcc.n	80038fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003906:	4a0b      	ldr	r2, [pc, #44]	; (8003934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003908:	4c0b      	ldr	r4, [pc, #44]	; (8003938 <LoopFillZerobss+0x26>)
  movs r3, #0
 800390a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800390c:	e001      	b.n	8003912 <LoopFillZerobss>

0800390e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800390e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003910:	3204      	adds	r2, #4

08003912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003914:	d3fb      	bcc.n	800390e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003916:	f7ff ffd7 	bl	80038c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800391a:	f004 fb1f 	bl	8007f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800391e:	f7fd fb65 	bl	8000fec <main>
  bx  lr    
 8003922:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003924:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800392c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8003930:	0800eb8c 	.word	0x0800eb8c
  ldr r2, =_sbss
 8003934:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003938:	2000064c 	.word	0x2000064c

0800393c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800393c:	e7fe      	b.n	800393c <ADC_IRQHandler>
	...

08003940 <LCD_write_byte>:

};


void LCD_write_byte(unsigned char dt, unsigned char command)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	460a      	mov	r2, r1
 800394a:	71fb      	strb	r3, [r7, #7]
 800394c:	4613      	mov	r3, r2
 800394e:	71bb      	strb	r3, [r7, #6]
	unsigned char i;  	
    sce0; 	
 8003950:	2200      	movs	r2, #0
 8003952:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003956:	4826      	ldr	r0, [pc, #152]	; (80039f0 <LCD_write_byte+0xb0>)
 8003958:	f001 fa88 	bl	8004e6c <HAL_GPIO_WritePin>
	if(command)
 800395c:	79bb      	ldrb	r3, [r7, #6]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d006      	beq.n	8003970 <LCD_write_byte+0x30>
		dc1;
 8003962:	2201      	movs	r2, #1
 8003964:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003968:	4822      	ldr	r0, [pc, #136]	; (80039f4 <LCD_write_byte+0xb4>)
 800396a:	f001 fa7f 	bl	8004e6c <HAL_GPIO_WritePin>
 800396e:	e005      	b.n	800397c <LCD_write_byte+0x3c>
	else
		dc0;		
 8003970:	2200      	movs	r2, #0
 8003972:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003976:	481f      	ldr	r0, [pc, #124]	; (80039f4 <LCD_write_byte+0xb4>)
 8003978:	f001 fa78 	bl	8004e6c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800397c:	2300      	movs	r3, #0
 800397e:	73fb      	strb	r3, [r7, #15]
 8003980:	e028      	b.n	80039d4 <LCD_write_byte+0x94>
	{ 
		if(dt&0x80)
 8003982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003986:	2b00      	cmp	r3, #0
 8003988:	da06      	bge.n	8003998 <LCD_write_byte+0x58>
			sdin1;
 800398a:	2201      	movs	r2, #1
 800398c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003990:	4818      	ldr	r0, [pc, #96]	; (80039f4 <LCD_write_byte+0xb4>)
 8003992:	f001 fa6b 	bl	8004e6c <HAL_GPIO_WritePin>
 8003996:	e005      	b.n	80039a4 <LCD_write_byte+0x64>
		else
			sdin0;
 8003998:	2200      	movs	r2, #0
 800399a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800399e:	4815      	ldr	r0, [pc, #84]	; (80039f4 <LCD_write_byte+0xb4>)
 80039a0:	f001 fa64 	bl	8004e6c <HAL_GPIO_WritePin>
		dt=dt<<1;	
 80039a4:	79fb      	ldrb	r3, [r7, #7]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	71fb      	strb	r3, [r7, #7]
		sclk0;
 80039aa:	2200      	movs	r2, #0
 80039ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039b0:	4810      	ldr	r0, [pc, #64]	; (80039f4 <LCD_write_byte+0xb4>)
 80039b2:	f001 fa5b 	bl	8004e6c <HAL_GPIO_WritePin>
		sclk1;
 80039b6:	2201      	movs	r2, #1
 80039b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039bc:	480d      	ldr	r0, [pc, #52]	; (80039f4 <LCD_write_byte+0xb4>)
 80039be:	f001 fa55 	bl	8004e6c <HAL_GPIO_WritePin>
		sclk0;		
 80039c2:	2200      	movs	r2, #0
 80039c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80039c8:	480a      	ldr	r0, [pc, #40]	; (80039f4 <LCD_write_byte+0xb4>)
 80039ca:	f001 fa4f 	bl	8004e6c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	3301      	adds	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	2b07      	cmp	r3, #7
 80039d8:	d9d3      	bls.n	8003982 <LCD_write_byte+0x42>
	}
	sce1;
 80039da:	2201      	movs	r2, #1
 80039dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80039e0:	4803      	ldr	r0, [pc, #12]	; (80039f0 <LCD_write_byte+0xb0>)
 80039e2:	f001 fa43 	bl	8004e6c <HAL_GPIO_WritePin>
}
 80039e6:	bf00      	nop
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40020400 	.word	0x40020400

080039f8 <LCD_init>:



void LCD_init(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
	//backled1;
	sce0;
 80039fc:	2200      	movs	r2, #0
 80039fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a02:	481e      	ldr	r0, [pc, #120]	; (8003a7c <LCD_init+0x84>)
 8003a04:	f001 fa32 	bl	8004e6c <HAL_GPIO_WritePin>
	res1;
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a0e:	481b      	ldr	r0, [pc, #108]	; (8003a7c <LCD_init+0x84>)
 8003a10:	f001 fa2c 	bl	8004e6c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003a14:	2064      	movs	r0, #100	; 0x64
 8003a16:	f000 f947 	bl	8003ca8 <HAL_Delay>
	res0;  	
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a20:	4816      	ldr	r0, [pc, #88]	; (8003a7c <LCD_init+0x84>)
 8003a22:	f001 fa23 	bl	8004e6c <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8003a26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a2a:	f000 f93d 	bl	8003ca8 <HAL_Delay>
	res1;
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a34:	4811      	ldr	r0, [pc, #68]	; (8003a7c <LCD_init+0x84>)
 8003a36:	f001 fa19 	bl	8004e6c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8003a3a:	2064      	movs	r0, #100	; 0x64
 8003a3c:	f000 f934 	bl	8003ca8 <HAL_Delay>
	LCD_write_byte(0x27,0);//LCD功能设置：芯片活动，水平寻址，使用扩展指令
 8003a40:	2100      	movs	r1, #0
 8003a42:	2027      	movs	r0, #39	; 0x27
 8003a44:	f7ff ff7c 	bl	8003940 <LCD_write_byte>
	LCD_write_byte(0xA1,0);//设置VOP值，室温下的编程范围为3.00-10.68
 8003a48:	2100      	movs	r1, #0
 8003a4a:	20a1      	movs	r0, #161	; 0xa1
 8003a4c:	f7ff ff78 	bl	8003940 <LCD_write_byte>
	//Vlcd=3.06+(VOP)*0.06,本例VOP为0B0101 0000为十进制的80，Vlcd=7.86V
	LCD_write_byte(0x14,0);//混合偏执率
 8003a50:	2100      	movs	r1, #0
 8003a52:	2014      	movs	r0, #20
 8003a54:	f7ff ff74 	bl	8003940 <LCD_write_byte>
	LCD_write_byte(0x20,0);//LCD功能设置：芯片活动，水平寻址，使用基本指令
 8003a58:	2100      	movs	r1, #0
 8003a5a:	2020      	movs	r0, #32
 8003a5c:	f7ff ff70 	bl	8003940 <LCD_write_byte>
	LCD_write_byte(0x0C,0);//设定显示配置:普通模式
 8003a60:	2100      	movs	r1, #0
 8003a62:	200c      	movs	r0, #12
 8003a64:	f7ff ff6c 	bl	8003940 <LCD_write_byte>

	LCD_clear();
 8003a68:	f000 f834 	bl	8003ad4 <LCD_clear>
	sce1;
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a72:	4802      	ldr	r0, [pc, #8]	; (8003a7c <LCD_init+0x84>)
 8003a74:	f001 f9fa 	bl	8004e6c <HAL_GPIO_WritePin>
}
 8003a78:	bf00      	nop
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40021000 	.word	0x40021000

08003a80 <LCD_set_XY>:

void LCD_set_XY(unsigned char X, unsigned char Y)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	460a      	mov	r2, r1
 8003a8a:	71fb      	strb	r3, [r7, #7]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	71bb      	strb	r3, [r7, #6]
	sce0;
 8003a90:	2200      	movs	r2, #0
 8003a92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003a96:	480e      	ldr	r0, [pc, #56]	; (8003ad0 <LCD_set_XY+0x50>)
 8003a98:	f001 f9e8 	bl	8004e6c <HAL_GPIO_WritePin>
	LCD_write_byte(0x40 | Y, 0);// column
 8003a9c:	79bb      	ldrb	r3, [r7, #6]
 8003a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2100      	movs	r1, #0
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f7ff ff4a 	bl	8003940 <LCD_write_byte>
	LCD_write_byte(0x80 | X, 0);// row
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff ff42 	bl	8003940 <LCD_write_byte>
	sce1;
 8003abc:	2201      	movs	r2, #1
 8003abe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ac2:	4803      	ldr	r0, [pc, #12]	; (8003ad0 <LCD_set_XY+0x50>)
 8003ac4:	f001 f9d2 	bl	8004e6c <HAL_GPIO_WritePin>
} 
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40021000 	.word	0x40021000

08003ad4 <LCD_clear>:

void LCD_clear(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
	sce0;
 8003ada:	2200      	movs	r2, #0
 8003adc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003ae0:	4814      	ldr	r0, [pc, #80]	; (8003b34 <LCD_clear+0x60>)
 8003ae2:	f001 f9c3 	bl	8004e6c <HAL_GPIO_WritePin>
	unsigned char t;
	unsigned char k;
	LCD_set_XY(0,0);
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	2000      	movs	r0, #0
 8003aea:	f7ff ffc9 	bl	8003a80 <LCD_set_XY>
	for(t=0;t<6;t++)
 8003aee:	2300      	movs	r3, #0
 8003af0:	71fb      	strb	r3, [r7, #7]
 8003af2:	e012      	b.n	8003b1a <LCD_clear+0x46>
	{ 
		for(k=0;k<84;k++)
 8003af4:	2300      	movs	r3, #0
 8003af6:	71bb      	strb	r3, [r7, #6]
 8003af8:	e009      	b.n	8003b0e <LCD_clear+0x3a>
		{ 
			HAL_Delay(1);
 8003afa:	2001      	movs	r0, #1
 8003afc:	f000 f8d4 	bl	8003ca8 <HAL_Delay>
			LCD_write_byte(0x00,1);	 						
 8003b00:	2101      	movs	r1, #1
 8003b02:	2000      	movs	r0, #0
 8003b04:	f7ff ff1c 	bl	8003940 <LCD_write_byte>
		for(k=0;k<84;k++)
 8003b08:	79bb      	ldrb	r3, [r7, #6]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	71bb      	strb	r3, [r7, #6]
 8003b0e:	79bb      	ldrb	r3, [r7, #6]
 8003b10:	2b53      	cmp	r3, #83	; 0x53
 8003b12:	d9f2      	bls.n	8003afa <LCD_clear+0x26>
	for(t=0;t<6;t++)
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	3301      	adds	r3, #1
 8003b18:	71fb      	strb	r3, [r7, #7]
 8003b1a:	79fb      	ldrb	r3, [r7, #7]
 8003b1c:	2b05      	cmp	r3, #5
 8003b1e:	d9e9      	bls.n	8003af4 <LCD_clear+0x20>
		} 
	}
	sce1;
 8003b20:	2201      	movs	r2, #1
 8003b22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b26:	4803      	ldr	r0, [pc, #12]	; (8003b34 <LCD_clear+0x60>)
 8003b28:	f001 f9a0 	bl	8004e6c <HAL_GPIO_WritePin>
}
 8003b2c:	bf00      	nop
 8003b2e:	3708      	adds	r7, #8
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}
 8003b34:	40021000 	.word	0x40021000

08003b38 <LCD_write_char>:

void LCD_write_char(unsigned char c)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	4603      	mov	r3, r0
 8003b40:	71fb      	strb	r3, [r7, #7]
	unsigned char line;
	c-= 32;
 8003b42:	79fb      	ldrb	r3, [r7, #7]
 8003b44:	3b20      	subs	r3, #32
 8003b46:	71fb      	strb	r3, [r7, #7]
	for (line=0; line<6; line++)
 8003b48:	2300      	movs	r3, #0
 8003b4a:	73fb      	strb	r3, [r7, #15]
 8003b4c:	e010      	b.n	8003b70 <LCD_write_char+0x38>
	LCD_write_byte(font6x8[c][line], 1);
 8003b4e:	79fa      	ldrb	r2, [r7, #7]
 8003b50:	7bf9      	ldrb	r1, [r7, #15]
 8003b52:	480b      	ldr	r0, [pc, #44]	; (8003b80 <LCD_write_char+0x48>)
 8003b54:	4613      	mov	r3, r2
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	4413      	add	r3, r2
 8003b5a:	005b      	lsls	r3, r3, #1
 8003b5c:	4403      	add	r3, r0
 8003b5e:	440b      	add	r3, r1
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2101      	movs	r1, #1
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff feeb 	bl	8003940 <LCD_write_byte>
	for (line=0; line<6; line++)
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	73fb      	strb	r3, [r7, #15]
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	2b05      	cmp	r3, #5
 8003b74:	d9eb      	bls.n	8003b4e <LCD_write_char+0x16>
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	3710      	adds	r7, #16
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	0800e494 	.word	0x0800e494

08003b84 <LCD_write_String>:

void LCD_write_String(unsigned char X,unsigned char Y,char *s)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	603a      	str	r2, [r7, #0]
 8003b8e:	71fb      	strb	r3, [r7, #7]
 8003b90:	460b      	mov	r3, r1
 8003b92:	71bb      	strb	r3, [r7, #6]
	LCD_set_XY(X,Y);
 8003b94:	79ba      	ldrb	r2, [r7, #6]
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	4611      	mov	r1, r2
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7ff ff70 	bl	8003a80 <LCD_set_XY>
	while (*s) 
 8003ba0:	e007      	b.n	8003bb2 <LCD_write_String+0x2e>
	{
		LCD_write_char(*s);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff ffc6 	bl	8003b38 <LCD_write_char>
		s++;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	603b      	str	r3, [r7, #0]
	while (*s) 
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f3      	bne.n	8003ba2 <LCD_write_String+0x1e>
	}
} 
 8003bba:	bf00      	nop
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bc8:	4b0e      	ldr	r3, [pc, #56]	; (8003c04 <HAL_Init+0x40>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a0d      	ldr	r2, [pc, #52]	; (8003c04 <HAL_Init+0x40>)
 8003bce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bd2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bd4:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <HAL_Init+0x40>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a0a      	ldr	r2, [pc, #40]	; (8003c04 <HAL_Init+0x40>)
 8003bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003bde:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003be0:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <HAL_Init+0x40>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a07      	ldr	r2, [pc, #28]	; (8003c04 <HAL_Init+0x40>)
 8003be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bec:	2003      	movs	r0, #3
 8003bee:	f000 fd61 	bl	80046b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bf2:	2000      	movs	r0, #0
 8003bf4:	f000 f808 	bl	8003c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bf8:	f7fe f83a 	bl	8001c70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40023c00 	.word	0x40023c00

08003c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c10:	4b12      	ldr	r3, [pc, #72]	; (8003c5c <HAL_InitTick+0x54>)
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	4b12      	ldr	r3, [pc, #72]	; (8003c60 <HAL_InitTick+0x58>)
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fd79 	bl	800471e <HAL_SYSTICK_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e00e      	b.n	8003c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b0f      	cmp	r3, #15
 8003c3a:	d80a      	bhi.n	8003c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	6879      	ldr	r1, [r7, #4]
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
 8003c44:	f000 fd41 	bl	80046ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c48:	4a06      	ldr	r2, [pc, #24]	; (8003c64 <HAL_InitTick+0x5c>)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	e000      	b.n	8003c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	20000008 	.word	0x20000008
 8003c60:	20000010 	.word	0x20000010
 8003c64:	2000000c 	.word	0x2000000c

08003c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <HAL_IncTick+0x20>)
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	461a      	mov	r2, r3
 8003c72:	4b06      	ldr	r3, [pc, #24]	; (8003c8c <HAL_IncTick+0x24>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4413      	add	r3, r2
 8003c78:	4a04      	ldr	r2, [pc, #16]	; (8003c8c <HAL_IncTick+0x24>)
 8003c7a:	6013      	str	r3, [r2, #0]
}
 8003c7c:	bf00      	nop
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr
 8003c86:	bf00      	nop
 8003c88:	20000010 	.word	0x20000010
 8003c8c:	20000638 	.word	0x20000638

08003c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c90:	b480      	push	{r7}
 8003c92:	af00      	add	r7, sp, #0
  return uwTick;
 8003c94:	4b03      	ldr	r3, [pc, #12]	; (8003ca4 <HAL_GetTick+0x14>)
 8003c96:	681b      	ldr	r3, [r3, #0]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	20000638 	.word	0x20000638

08003ca8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003cb0:	f7ff ffee 	bl	8003c90 <HAL_GetTick>
 8003cb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc0:	d005      	beq.n	8003cce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003cc2:	4b0a      	ldr	r3, [pc, #40]	; (8003cec <HAL_Delay+0x44>)
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003cce:	bf00      	nop
 8003cd0:	f7ff ffde 	bl	8003c90 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d8f7      	bhi.n	8003cd0 <HAL_Delay+0x28>
  {
  }
}
 8003ce0:	bf00      	nop
 8003ce2:	bf00      	nop
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20000010 	.word	0x20000010

08003cf0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b084      	sub	sp, #16
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e033      	b.n	8003d6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d109      	bne.n	8003d22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f7fd ffd6 	bl	8001cc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	f003 0310 	and.w	r3, r3, #16
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d118      	bne.n	8003d60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d36:	f023 0302 	bic.w	r3, r3, #2
 8003d3a:	f043 0202 	orr.w	r2, r3, #2
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 fa68 	bl	8004218 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d52:	f023 0303 	bic.w	r3, r3, #3
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
 8003d5e:	e001      	b.n	8003d64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003d84:	2300      	movs	r3, #0
 8003d86:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d8e:	2b01      	cmp	r3, #1
 8003d90:	d101      	bne.n	8003d96 <HAL_ADC_Start_DMA+0x1e>
 8003d92:	2302      	movs	r3, #2
 8003d94:	e0e9      	b.n	8003f6a <HAL_ADC_Start_DMA+0x1f2>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 0301 	and.w	r3, r3, #1
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d018      	beq.n	8003dde <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f042 0201 	orr.w	r2, r2, #1
 8003dba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003dbc:	4b6d      	ldr	r3, [pc, #436]	; (8003f74 <HAL_ADC_Start_DMA+0x1fc>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a6d      	ldr	r2, [pc, #436]	; (8003f78 <HAL_ADC_Start_DMA+0x200>)
 8003dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc6:	0c9a      	lsrs	r2, r3, #18
 8003dc8:	4613      	mov	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	4413      	add	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003dd0:	e002      	b.n	8003dd8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1f9      	bne.n	8003dd2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dec:	d107      	bne.n	8003dfe <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689a      	ldr	r2, [r3, #8]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dfc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	f040 80a1 	bne.w	8003f50 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e16:	f023 0301 	bic.w	r3, r3, #1
 8003e1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d007      	beq.n	8003e40 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e34:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e38:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e4c:	d106      	bne.n	8003e5c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f023 0206 	bic.w	r2, r3, #6
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44
 8003e5a:	e002      	b.n	8003e62 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e6a:	4b44      	ldr	r3, [pc, #272]	; (8003f7c <HAL_ADC_Start_DMA+0x204>)
 8003e6c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e72:	4a43      	ldr	r2, [pc, #268]	; (8003f80 <HAL_ADC_Start_DMA+0x208>)
 8003e74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	4a42      	ldr	r2, [pc, #264]	; (8003f84 <HAL_ADC_Start_DMA+0x20c>)
 8003e7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e82:	4a41      	ldr	r2, [pc, #260]	; (8003f88 <HAL_ADC_Start_DMA+0x210>)
 8003e84:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003e8e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003e9e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	334c      	adds	r3, #76	; 0x4c
 8003eba:	4619      	mov	r1, r3
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f000 fce8 	bl	8004894 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 031f 	and.w	r3, r3, #31
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d12a      	bne.n	8003f26 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a2d      	ldr	r2, [pc, #180]	; (8003f8c <HAL_ADC_Start_DMA+0x214>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d015      	beq.n	8003f06 <HAL_ADC_Start_DMA+0x18e>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a2c      	ldr	r2, [pc, #176]	; (8003f90 <HAL_ADC_Start_DMA+0x218>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d105      	bne.n	8003ef0 <HAL_ADC_Start_DMA+0x178>
 8003ee4:	4b25      	ldr	r3, [pc, #148]	; (8003f7c <HAL_ADC_Start_DMA+0x204>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f003 031f 	and.w	r3, r3, #31
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a27      	ldr	r2, [pc, #156]	; (8003f94 <HAL_ADC_Start_DMA+0x21c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d136      	bne.n	8003f68 <HAL_ADC_Start_DMA+0x1f0>
 8003efa:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <HAL_ADC_Start_DMA+0x204>)
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 0310 	and.w	r3, r3, #16
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d130      	bne.n	8003f68 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d129      	bne.n	8003f68 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f22:	609a      	str	r2, [r3, #8]
 8003f24:	e020      	b.n	8003f68 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a18      	ldr	r2, [pc, #96]	; (8003f8c <HAL_ADC_Start_DMA+0x214>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d11b      	bne.n	8003f68 <HAL_ADC_Start_DMA+0x1f0>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d114      	bne.n	8003f68 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689a      	ldr	r2, [r3, #8]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f4c:	609a      	str	r2, [r3, #8]
 8003f4e:	e00b      	b.n	8003f68 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	f043 0210 	orr.w	r2, r3, #16
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f60:	f043 0201 	orr.w	r2, r3, #1
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000008 	.word	0x20000008
 8003f78:	431bde83 	.word	0x431bde83
 8003f7c:	40012300 	.word	0x40012300
 8003f80:	08004411 	.word	0x08004411
 8003f84:	080044cb 	.word	0x080044cb
 8003f88:	080044e7 	.word	0x080044e7
 8003f8c:	40012000 	.word	0x40012000
 8003f90:	40012100 	.word	0x40012100
 8003f94:	40012200 	.word	0x40012200

08003f98 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_ADC_ConfigChannel+0x1c>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e105      	b.n	80041fc <HAL_ADC_ConfigChannel+0x228>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2b09      	cmp	r3, #9
 8003ffe:	d925      	bls.n	800404c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68d9      	ldr	r1, [r3, #12]
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	b29b      	uxth	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	4613      	mov	r3, r2
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	4413      	add	r3, r2
 8004014:	3b1e      	subs	r3, #30
 8004016:	2207      	movs	r2, #7
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43da      	mvns	r2, r3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	400a      	ands	r2, r1
 8004024:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68d9      	ldr	r1, [r3, #12]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	b29b      	uxth	r3, r3
 8004036:	4618      	mov	r0, r3
 8004038:	4603      	mov	r3, r0
 800403a:	005b      	lsls	r3, r3, #1
 800403c:	4403      	add	r3, r0
 800403e:	3b1e      	subs	r3, #30
 8004040:	409a      	lsls	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	60da      	str	r2, [r3, #12]
 800404a:	e022      	b.n	8004092 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6919      	ldr	r1, [r3, #16]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	b29b      	uxth	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	4613      	mov	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	2207      	movs	r2, #7
 8004062:	fa02 f303 	lsl.w	r3, r2, r3
 8004066:	43da      	mvns	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	400a      	ands	r2, r1
 800406e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6919      	ldr	r1, [r3, #16]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	689a      	ldr	r2, [r3, #8]
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	4618      	mov	r0, r3
 8004082:	4603      	mov	r3, r0
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4403      	add	r3, r0
 8004088:	409a      	lsls	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	2b06      	cmp	r3, #6
 8004098:	d824      	bhi.n	80040e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685a      	ldr	r2, [r3, #4]
 80040a4:	4613      	mov	r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	4413      	add	r3, r2
 80040aa:	3b05      	subs	r3, #5
 80040ac:	221f      	movs	r2, #31
 80040ae:	fa02 f303 	lsl.w	r3, r2, r3
 80040b2:	43da      	mvns	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	400a      	ands	r2, r1
 80040ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	4618      	mov	r0, r3
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	3b05      	subs	r3, #5
 80040d6:	fa00 f203 	lsl.w	r2, r0, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	635a      	str	r2, [r3, #52]	; 0x34
 80040e2:	e04c      	b.n	800417e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	2b0c      	cmp	r3, #12
 80040ea:	d824      	bhi.n	8004136 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	3b23      	subs	r3, #35	; 0x23
 80040fe:	221f      	movs	r2, #31
 8004100:	fa02 f303 	lsl.w	r3, r2, r3
 8004104:	43da      	mvns	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	400a      	ands	r2, r1
 800410c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	b29b      	uxth	r3, r3
 800411a:	4618      	mov	r0, r3
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	4413      	add	r3, r2
 8004126:	3b23      	subs	r3, #35	; 0x23
 8004128:	fa00 f203 	lsl.w	r2, r0, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	430a      	orrs	r2, r1
 8004132:	631a      	str	r2, [r3, #48]	; 0x30
 8004134:	e023      	b.n	800417e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	3b41      	subs	r3, #65	; 0x41
 8004148:	221f      	movs	r2, #31
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	43da      	mvns	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	400a      	ands	r2, r1
 8004156:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	b29b      	uxth	r3, r3
 8004164:	4618      	mov	r0, r3
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	3b41      	subs	r3, #65	; 0x41
 8004172:	fa00 f203 	lsl.w	r2, r0, r3
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800417e:	4b22      	ldr	r3, [pc, #136]	; (8004208 <HAL_ADC_ConfigChannel+0x234>)
 8004180:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a21      	ldr	r2, [pc, #132]	; (800420c <HAL_ADC_ConfigChannel+0x238>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d109      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x1cc>
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2b12      	cmp	r3, #18
 8004192:	d105      	bne.n	80041a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a19      	ldr	r2, [pc, #100]	; (800420c <HAL_ADC_ConfigChannel+0x238>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d123      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x21e>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	d003      	beq.n	80041ba <HAL_ADC_ConfigChannel+0x1e6>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b11      	cmp	r3, #17
 80041b8:	d11b      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	2b10      	cmp	r3, #16
 80041cc:	d111      	bne.n	80041f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <HAL_ADC_ConfigChannel+0x23c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a10      	ldr	r2, [pc, #64]	; (8004214 <HAL_ADC_ConfigChannel+0x240>)
 80041d4:	fba2 2303 	umull	r2, r3, r2, r3
 80041d8:	0c9a      	lsrs	r2, r3, #18
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80041e4:	e002      	b.n	80041ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	3b01      	subs	r3, #1
 80041ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f9      	bne.n	80041e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr
 8004208:	40012300 	.word	0x40012300
 800420c:	40012000 	.word	0x40012000
 8004210:	20000008 	.word	0x20000008
 8004214:	431bde83 	.word	0x431bde83

08004218 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004220:	4b79      	ldr	r3, [pc, #484]	; (8004408 <ADC_Init+0x1f0>)
 8004222:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	431a      	orrs	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800424c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6859      	ldr	r1, [r3, #4]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	021a      	lsls	r2, r3, #8
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004270:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6859      	ldr	r1, [r3, #4]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	430a      	orrs	r2, r1
 8004282:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	689a      	ldr	r2, [r3, #8]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004292:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	6899      	ldr	r1, [r3, #8]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	4a58      	ldr	r2, [pc, #352]	; (800440c <ADC_Init+0x1f4>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d022      	beq.n	80042f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6899      	ldr	r1, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80042e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6899      	ldr	r1, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	609a      	str	r2, [r3, #8]
 80042f4:	e00f      	b.n	8004316 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004304:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004314:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 0202 	bic.w	r2, r2, #2
 8004324:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6899      	ldr	r1, [r3, #8]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	7e1b      	ldrb	r3, [r3, #24]
 8004330:	005a      	lsls	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	430a      	orrs	r2, r1
 8004338:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01b      	beq.n	800437c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004352:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004362:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6859      	ldr	r1, [r3, #4]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	3b01      	subs	r3, #1
 8004370:	035a      	lsls	r2, r3, #13
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	605a      	str	r2, [r3, #4]
 800437a:	e007      	b.n	800438c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800438a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800439a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	051a      	lsls	r2, r3, #20
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80043c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	6899      	ldr	r1, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80043ce:	025a      	lsls	r2, r3, #9
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6899      	ldr	r1, [r3, #8]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	029a      	lsls	r2, r3, #10
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	609a      	str	r2, [r3, #8]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	40012300 	.word	0x40012300
 800440c:	0f000001 	.word	0x0f000001

08004410 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004426:	2b00      	cmp	r3, #0
 8004428:	d13c      	bne.n	80044a4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d12b      	bne.n	800449c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004448:	2b00      	cmp	r3, #0
 800444a:	d127      	bne.n	800449c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004452:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004456:	2b00      	cmp	r3, #0
 8004458:	d006      	beq.n	8004468 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004464:	2b00      	cmp	r3, #0
 8004466:	d119      	bne.n	800449c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0220 	bic.w	r2, r2, #32
 8004476:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d105      	bne.n	800449c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	f043 0201 	orr.w	r2, r3, #1
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f7ff fd7b 	bl	8003f98 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80044a2:	e00e      	b.n	80044c2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a8:	f003 0310 	and.w	r3, r3, #16
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f7ff fd85 	bl	8003fc0 <HAL_ADC_ErrorCallback>
}
 80044b6:	e004      	b.n	80044c2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
}
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7ff fd67 	bl	8003fac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2240      	movs	r2, #64	; 0x40
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fe:	f043 0204 	orr.w	r2, r3, #4
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f7ff fd5a 	bl	8003fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800450c:	bf00      	nop
 800450e:	3710      	adds	r7, #16
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004524:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <__NVIC_SetPriorityGrouping+0x44>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004530:	4013      	ands	r3, r2
 8004532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800453c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004546:	4a04      	ldr	r2, [pc, #16]	; (8004558 <__NVIC_SetPriorityGrouping+0x44>)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	60d3      	str	r3, [r2, #12]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004560:	4b04      	ldr	r3, [pc, #16]	; (8004574 <__NVIC_GetPriorityGrouping+0x18>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	f003 0307 	and.w	r3, r3, #7
}
 800456a:	4618      	mov	r0, r3
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	e000ed00 	.word	0xe000ed00

08004578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004586:	2b00      	cmp	r3, #0
 8004588:	db0b      	blt.n	80045a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	f003 021f 	and.w	r2, r3, #31
 8004590:	4907      	ldr	r1, [pc, #28]	; (80045b0 <__NVIC_EnableIRQ+0x38>)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	2001      	movs	r0, #1
 800459a:	fa00 f202 	lsl.w	r2, r0, r2
 800459e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	e000e100 	.word	0xe000e100

080045b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	6039      	str	r1, [r7, #0]
 80045be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	db0a      	blt.n	80045de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	490c      	ldr	r1, [pc, #48]	; (8004600 <__NVIC_SetPriority+0x4c>)
 80045ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d2:	0112      	lsls	r2, r2, #4
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	440b      	add	r3, r1
 80045d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045dc:	e00a      	b.n	80045f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	4908      	ldr	r1, [pc, #32]	; (8004604 <__NVIC_SetPriority+0x50>)
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	3b04      	subs	r3, #4
 80045ec:	0112      	lsls	r2, r2, #4
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	440b      	add	r3, r1
 80045f2:	761a      	strb	r2, [r3, #24]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	e000e100 	.word	0xe000e100
 8004604:	e000ed00 	.word	0xe000ed00

08004608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004608:	b480      	push	{r7}
 800460a:	b089      	sub	sp, #36	; 0x24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f1c3 0307 	rsb	r3, r3, #7
 8004622:	2b04      	cmp	r3, #4
 8004624:	bf28      	it	cs
 8004626:	2304      	movcs	r3, #4
 8004628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	3304      	adds	r3, #4
 800462e:	2b06      	cmp	r3, #6
 8004630:	d902      	bls.n	8004638 <NVIC_EncodePriority+0x30>
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3b03      	subs	r3, #3
 8004636:	e000      	b.n	800463a <NVIC_EncodePriority+0x32>
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800463c:	f04f 32ff 	mov.w	r2, #4294967295
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43da      	mvns	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	401a      	ands	r2, r3
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004650:	f04f 31ff 	mov.w	r1, #4294967295
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	fa01 f303 	lsl.w	r3, r1, r3
 800465a:	43d9      	mvns	r1, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004660:	4313      	orrs	r3, r2
         );
}
 8004662:	4618      	mov	r0, r3
 8004664:	3724      	adds	r7, #36	; 0x24
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
	...

08004670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3b01      	subs	r3, #1
 800467c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004680:	d301      	bcc.n	8004686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004682:	2301      	movs	r3, #1
 8004684:	e00f      	b.n	80046a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004686:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <SysTick_Config+0x40>)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3b01      	subs	r3, #1
 800468c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800468e:	210f      	movs	r1, #15
 8004690:	f04f 30ff 	mov.w	r0, #4294967295
 8004694:	f7ff ff8e 	bl	80045b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004698:	4b05      	ldr	r3, [pc, #20]	; (80046b0 <SysTick_Config+0x40>)
 800469a:	2200      	movs	r2, #0
 800469c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800469e:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <SysTick_Config+0x40>)
 80046a0:	2207      	movs	r2, #7
 80046a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	e000e010 	.word	0xe000e010

080046b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff ff29 	bl	8004514 <__NVIC_SetPriorityGrouping>
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b086      	sub	sp, #24
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	4603      	mov	r3, r0
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
 80046d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046dc:	f7ff ff3e 	bl	800455c <__NVIC_GetPriorityGrouping>
 80046e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	6978      	ldr	r0, [r7, #20]
 80046e8:	f7ff ff8e 	bl	8004608 <NVIC_EncodePriority>
 80046ec:	4602      	mov	r2, r0
 80046ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046f2:	4611      	mov	r1, r2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff5d 	bl	80045b4 <__NVIC_SetPriority>
}
 80046fa:	bf00      	nop
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	4603      	mov	r3, r0
 800470a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800470c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff ff31 	bl	8004578 <__NVIC_EnableIRQ>
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff ffa2 	bl	8004670 <SysTick_Config>
 800472c:	4603      	mov	r3, r0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004744:	f7ff faa4 	bl	8003c90 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e099      	b.n	8004888 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004774:	e00f      	b.n	8004796 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004776:	f7ff fa8b 	bl	8003c90 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b05      	cmp	r3, #5
 8004782:	d908      	bls.n	8004796 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2203      	movs	r2, #3
 800478e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e078      	b.n	8004888 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e8      	bne.n	8004776 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4b38      	ldr	r3, [pc, #224]	; (8004890 <HAL_DMA_Init+0x158>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d107      	bne.n	8004800 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f8:	4313      	orrs	r3, r2
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f023 0307 	bic.w	r3, r3, #7
 8004816:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004826:	2b04      	cmp	r3, #4
 8004828:	d117      	bne.n	800485a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00e      	beq.n	800485a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f8e5 	bl	8004a0c <DMA_CheckFifoParam>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2240      	movs	r2, #64	; 0x40
 800484c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004856:	2301      	movs	r3, #1
 8004858:	e016      	b.n	8004888 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f89c 	bl	80049a0 <DMA_CalcBaseAndBitshift>
 8004868:	4603      	mov	r3, r0
 800486a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004870:	223f      	movs	r2, #63	; 0x3f
 8004872:	409a      	lsls	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	f010803f 	.word	0xf010803f

08004894 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d101      	bne.n	80048ba <HAL_DMA_Start_IT+0x26>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e040      	b.n	800493c <HAL_DMA_Start_IT+0xa8>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d12f      	bne.n	800492e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2202      	movs	r2, #2
 80048d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f82e 	bl	8004944 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ec:	223f      	movs	r2, #63	; 0x3f
 80048ee:	409a      	lsls	r2, r3
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0216 	orr.w	r2, r2, #22
 8004902:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0208 	orr.w	r2, r2, #8
 800491a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e005      	b.n	800493a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004936:	2302      	movs	r3, #2
 8004938:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800493a:	7dfb      	ldrb	r3, [r7, #23]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004944:	b480      	push	{r7}
 8004946:	b085      	sub	sp, #20
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004960:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b40      	cmp	r3, #64	; 0x40
 8004970:	d108      	bne.n	8004984 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004982:	e007      	b.n	8004994 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	60da      	str	r2, [r3, #12]
}
 8004994:	bf00      	nop
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	3b10      	subs	r3, #16
 80049b0:	4a14      	ldr	r2, [pc, #80]	; (8004a04 <DMA_CalcBaseAndBitshift+0x64>)
 80049b2:	fba2 2303 	umull	r2, r3, r2, r3
 80049b6:	091b      	lsrs	r3, r3, #4
 80049b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80049ba:	4a13      	ldr	r2, [pc, #76]	; (8004a08 <DMA_CalcBaseAndBitshift+0x68>)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4413      	add	r3, r2
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	461a      	mov	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b03      	cmp	r3, #3
 80049cc:	d909      	bls.n	80049e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049d6:	f023 0303 	bic.w	r3, r3, #3
 80049da:	1d1a      	adds	r2, r3, #4
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	659a      	str	r2, [r3, #88]	; 0x58
 80049e0:	e007      	b.n	80049f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80049ea:	f023 0303 	bic.w	r3, r3, #3
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	aaaaaaab 	.word	0xaaaaaaab
 8004a08:	0800e6bc 	.word	0x0800e6bc

08004a0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a14:	2300      	movs	r3, #0
 8004a16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d11f      	bne.n	8004a66 <DMA_CheckFifoParam+0x5a>
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d856      	bhi.n	8004ada <DMA_CheckFifoParam+0xce>
 8004a2c:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <DMA_CheckFifoParam+0x28>)
 8004a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a32:	bf00      	nop
 8004a34:	08004a45 	.word	0x08004a45
 8004a38:	08004a57 	.word	0x08004a57
 8004a3c:	08004a45 	.word	0x08004a45
 8004a40:	08004adb 	.word	0x08004adb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d046      	beq.n	8004ade <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a54:	e043      	b.n	8004ade <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004a5e:	d140      	bne.n	8004ae2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a64:	e03d      	b.n	8004ae2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a6e:	d121      	bne.n	8004ab4 <DMA_CheckFifoParam+0xa8>
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d837      	bhi.n	8004ae6 <DMA_CheckFifoParam+0xda>
 8004a76:	a201      	add	r2, pc, #4	; (adr r2, 8004a7c <DMA_CheckFifoParam+0x70>)
 8004a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7c:	08004a8d 	.word	0x08004a8d
 8004a80:	08004a93 	.word	0x08004a93
 8004a84:	08004a8d 	.word	0x08004a8d
 8004a88:	08004aa5 	.word	0x08004aa5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a90:	e030      	b.n	8004af4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d025      	beq.n	8004aea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004aa2:	e022      	b.n	8004aea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004aac:	d11f      	bne.n	8004aee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004ab2:	e01c      	b.n	8004aee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d903      	bls.n	8004ac2 <DMA_CheckFifoParam+0xb6>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b03      	cmp	r3, #3
 8004abe:	d003      	beq.n	8004ac8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ac0:	e018      	b.n	8004af4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8004ac6:	e015      	b.n	8004af4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d00e      	beq.n	8004af2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ad8:	e00b      	b.n	8004af2 <DMA_CheckFifoParam+0xe6>
      break;
 8004ada:	bf00      	nop
 8004adc:	e00a      	b.n	8004af4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ade:	bf00      	nop
 8004ae0:	e008      	b.n	8004af4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ae2:	bf00      	nop
 8004ae4:	e006      	b.n	8004af4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ae6:	bf00      	nop
 8004ae8:	e004      	b.n	8004af4 <DMA_CheckFifoParam+0xe8>
      break;
 8004aea:	bf00      	nop
 8004aec:	e002      	b.n	8004af4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004aee:	bf00      	nop
 8004af0:	e000      	b.n	8004af4 <DMA_CheckFifoParam+0xe8>
      break;
 8004af2:	bf00      	nop
    }
  } 
  
  return status; 
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3714      	adds	r7, #20
 8004afa:	46bd      	mov	sp, r7
 8004afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop

08004b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b089      	sub	sp, #36	; 0x24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004b12:	2300      	movs	r3, #0
 8004b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	e16b      	b.n	8004df8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004b20:	2201      	movs	r2, #1
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	fa02 f303 	lsl.w	r3, r2, r3
 8004b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4013      	ands	r3, r2
 8004b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b34:	693a      	ldr	r2, [r7, #16]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	f040 815a 	bne.w	8004df2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d005      	beq.n	8004b56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d130      	bne.n	8004bb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	2203      	movs	r2, #3
 8004b62:	fa02 f303 	lsl.w	r3, r2, r3
 8004b66:	43db      	mvns	r3, r3
 8004b68:	69ba      	ldr	r2, [r7, #24]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	005b      	lsls	r3, r3, #1
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	43db      	mvns	r3, r3
 8004b96:	69ba      	ldr	r2, [r7, #24]
 8004b98:	4013      	ands	r3, r2
 8004b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	091b      	lsrs	r3, r3, #4
 8004ba2:	f003 0201 	and.w	r2, r3, #1
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	69ba      	ldr	r2, [r7, #24]
 8004bb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f003 0303 	and.w	r3, r3, #3
 8004bc0:	2b03      	cmp	r3, #3
 8004bc2:	d017      	beq.n	8004bf4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	2203      	movs	r2, #3
 8004bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	69ba      	ldr	r2, [r7, #24]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	689a      	ldr	r2, [r3, #8]
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	fa02 f303 	lsl.w	r3, r2, r3
 8004be8:	69ba      	ldr	r2, [r7, #24]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69ba      	ldr	r2, [r7, #24]
 8004bf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f003 0303 	and.w	r3, r3, #3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d123      	bne.n	8004c48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	08da      	lsrs	r2, r3, #3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	3208      	adds	r2, #8
 8004c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	220f      	movs	r2, #15
 8004c18:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	4013      	ands	r3, r2
 8004c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	fa02 f303 	lsl.w	r3, r2, r3
 8004c34:	69ba      	ldr	r2, [r7, #24]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	08da      	lsrs	r2, r3, #3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3208      	adds	r2, #8
 8004c42:	69b9      	ldr	r1, [r7, #24]
 8004c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	2203      	movs	r2, #3
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	69ba      	ldr	r2, [r7, #24]
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 0203 	and.w	r2, r3, #3
 8004c68:	69fb      	ldr	r3, [r7, #28]
 8004c6a:	005b      	lsls	r3, r3, #1
 8004c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 80b4 	beq.w	8004df2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	4b60      	ldr	r3, [pc, #384]	; (8004e10 <HAL_GPIO_Init+0x30c>)
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	4a5f      	ldr	r2, [pc, #380]	; (8004e10 <HAL_GPIO_Init+0x30c>)
 8004c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c98:	6453      	str	r3, [r2, #68]	; 0x44
 8004c9a:	4b5d      	ldr	r3, [pc, #372]	; (8004e10 <HAL_GPIO_Init+0x30c>)
 8004c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ca6:	4a5b      	ldr	r2, [pc, #364]	; (8004e14 <HAL_GPIO_Init+0x310>)
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	089b      	lsrs	r3, r3, #2
 8004cac:	3302      	adds	r3, #2
 8004cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	220f      	movs	r2, #15
 8004cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc2:	43db      	mvns	r3, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a52      	ldr	r2, [pc, #328]	; (8004e18 <HAL_GPIO_Init+0x314>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d02b      	beq.n	8004d2a <HAL_GPIO_Init+0x226>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a51      	ldr	r2, [pc, #324]	; (8004e1c <HAL_GPIO_Init+0x318>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d025      	beq.n	8004d26 <HAL_GPIO_Init+0x222>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a50      	ldr	r2, [pc, #320]	; (8004e20 <HAL_GPIO_Init+0x31c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01f      	beq.n	8004d22 <HAL_GPIO_Init+0x21e>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a4f      	ldr	r2, [pc, #316]	; (8004e24 <HAL_GPIO_Init+0x320>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d019      	beq.n	8004d1e <HAL_GPIO_Init+0x21a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a4e      	ldr	r2, [pc, #312]	; (8004e28 <HAL_GPIO_Init+0x324>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d013      	beq.n	8004d1a <HAL_GPIO_Init+0x216>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a4d      	ldr	r2, [pc, #308]	; (8004e2c <HAL_GPIO_Init+0x328>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00d      	beq.n	8004d16 <HAL_GPIO_Init+0x212>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a4c      	ldr	r2, [pc, #304]	; (8004e30 <HAL_GPIO_Init+0x32c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <HAL_GPIO_Init+0x20e>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a4b      	ldr	r2, [pc, #300]	; (8004e34 <HAL_GPIO_Init+0x330>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d101      	bne.n	8004d0e <HAL_GPIO_Init+0x20a>
 8004d0a:	2307      	movs	r3, #7
 8004d0c:	e00e      	b.n	8004d2c <HAL_GPIO_Init+0x228>
 8004d0e:	2308      	movs	r3, #8
 8004d10:	e00c      	b.n	8004d2c <HAL_GPIO_Init+0x228>
 8004d12:	2306      	movs	r3, #6
 8004d14:	e00a      	b.n	8004d2c <HAL_GPIO_Init+0x228>
 8004d16:	2305      	movs	r3, #5
 8004d18:	e008      	b.n	8004d2c <HAL_GPIO_Init+0x228>
 8004d1a:	2304      	movs	r3, #4
 8004d1c:	e006      	b.n	8004d2c <HAL_GPIO_Init+0x228>
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e004      	b.n	8004d2c <HAL_GPIO_Init+0x228>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e002      	b.n	8004d2c <HAL_GPIO_Init+0x228>
 8004d26:	2301      	movs	r3, #1
 8004d28:	e000      	b.n	8004d2c <HAL_GPIO_Init+0x228>
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	69fa      	ldr	r2, [r7, #28]
 8004d2e:	f002 0203 	and.w	r2, r2, #3
 8004d32:	0092      	lsls	r2, r2, #2
 8004d34:	4093      	lsls	r3, r2
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d3c:	4935      	ldr	r1, [pc, #212]	; (8004e14 <HAL_GPIO_Init+0x310>)
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	089b      	lsrs	r3, r3, #2
 8004d42:	3302      	adds	r3, #2
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d4a:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <HAL_GPIO_Init+0x334>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	43db      	mvns	r3, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4013      	ands	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d6e:	4a32      	ldr	r2, [pc, #200]	; (8004e38 <HAL_GPIO_Init+0x334>)
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004d74:	4b30      	ldr	r3, [pc, #192]	; (8004e38 <HAL_GPIO_Init+0x334>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4013      	ands	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d98:	4a27      	ldr	r2, [pc, #156]	; (8004e38 <HAL_GPIO_Init+0x334>)
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d9e:	4b26      	ldr	r3, [pc, #152]	; (8004e38 <HAL_GPIO_Init+0x334>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	43db      	mvns	r3, r3
 8004da8:	69ba      	ldr	r2, [r7, #24]
 8004daa:	4013      	ands	r3, r2
 8004dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004dc2:	4a1d      	ldr	r2, [pc, #116]	; (8004e38 <HAL_GPIO_Init+0x334>)
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004dc8:	4b1b      	ldr	r3, [pc, #108]	; (8004e38 <HAL_GPIO_Init+0x334>)
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	43db      	mvns	r3, r3
 8004dd2:	69ba      	ldr	r2, [r7, #24]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004de4:	69ba      	ldr	r2, [r7, #24]
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004dec:	4a12      	ldr	r2, [pc, #72]	; (8004e38 <HAL_GPIO_Init+0x334>)
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	3301      	adds	r3, #1
 8004df6:	61fb      	str	r3, [r7, #28]
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	2b0f      	cmp	r3, #15
 8004dfc:	f67f ae90 	bls.w	8004b20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e00:	bf00      	nop
 8004e02:	bf00      	nop
 8004e04:	3724      	adds	r7, #36	; 0x24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40013800 	.word	0x40013800
 8004e18:	40020000 	.word	0x40020000
 8004e1c:	40020400 	.word	0x40020400
 8004e20:	40020800 	.word	0x40020800
 8004e24:	40020c00 	.word	0x40020c00
 8004e28:	40021000 	.word	0x40021000
 8004e2c:	40021400 	.word	0x40021400
 8004e30:	40021800 	.word	0x40021800
 8004e34:	40021c00 	.word	0x40021c00
 8004e38:	40013c00 	.word	0x40013c00

08004e3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	460b      	mov	r3, r1
 8004e46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	887b      	ldrh	r3, [r7, #2]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e54:	2301      	movs	r3, #1
 8004e56:	73fb      	strb	r3, [r7, #15]
 8004e58:	e001      	b.n	8004e5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr

08004e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b083      	sub	sp, #12
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	807b      	strh	r3, [r7, #2]
 8004e78:	4613      	mov	r3, r2
 8004e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e7c:	787b      	ldrb	r3, [r7, #1]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e82:	887a      	ldrh	r2, [r7, #2]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e88:	e003      	b.n	8004e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e8a:	887b      	ldrh	r3, [r7, #2]
 8004e8c:	041a      	lsls	r2, r3, #16
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	619a      	str	r2, [r3, #24]
}
 8004e92:	bf00      	nop
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b085      	sub	sp, #20
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	695b      	ldr	r3, [r3, #20]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004eb0:	887a      	ldrh	r2, [r7, #2]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	041a      	lsls	r2, r3, #16
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	43d9      	mvns	r1, r3
 8004ebc:	887b      	ldrh	r3, [r7, #2]
 8004ebe:	400b      	ands	r3, r1
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	619a      	str	r2, [r3, #24]
}
 8004ec6:	bf00      	nop
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
	...

08004ed4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ede:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ee0:	695a      	ldr	r2, [r3, #20]
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d006      	beq.n	8004ef8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004eea:	4a05      	ldr	r2, [pc, #20]	; (8004f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004eec:	88fb      	ldrh	r3, [r7, #6]
 8004eee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ef0:	88fb      	ldrh	r3, [r7, #6]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 f806 	bl	8004f04 <HAL_GPIO_EXTI_Callback>
  }
}
 8004ef8:	bf00      	nop
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}
 8004f00:	40013c00 	.word	0x40013c00

08004f04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e12b      	b.n	8005186 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fc ffb6 	bl	8001eb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2224      	movs	r2, #36	; 0x24
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0201 	bic.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f80:	f001 fbd8 	bl	8006734 <HAL_RCC_GetPCLK1Freq>
 8004f84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	4a81      	ldr	r2, [pc, #516]	; (8005190 <HAL_I2C_Init+0x274>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d807      	bhi.n	8004fa0 <HAL_I2C_Init+0x84>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4a80      	ldr	r2, [pc, #512]	; (8005194 <HAL_I2C_Init+0x278>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	bf94      	ite	ls
 8004f98:	2301      	movls	r3, #1
 8004f9a:	2300      	movhi	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	e006      	b.n	8004fae <HAL_I2C_Init+0x92>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4a7d      	ldr	r2, [pc, #500]	; (8005198 <HAL_I2C_Init+0x27c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	bf94      	ite	ls
 8004fa8:	2301      	movls	r3, #1
 8004faa:	2300      	movhi	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e0e7      	b.n	8005186 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4a78      	ldr	r2, [pc, #480]	; (800519c <HAL_I2C_Init+0x280>)
 8004fba:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbe:	0c9b      	lsrs	r3, r3, #18
 8004fc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4a6a      	ldr	r2, [pc, #424]	; (8005190 <HAL_I2C_Init+0x274>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d802      	bhi.n	8004ff0 <HAL_I2C_Init+0xd4>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	3301      	adds	r3, #1
 8004fee:	e009      	b.n	8005004 <HAL_I2C_Init+0xe8>
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ff6:	fb02 f303 	mul.w	r3, r2, r3
 8004ffa:	4a69      	ldr	r2, [pc, #420]	; (80051a0 <HAL_I2C_Init+0x284>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	099b      	lsrs	r3, r3, #6
 8005002:	3301      	adds	r3, #1
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	430b      	orrs	r3, r1
 800500a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005016:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	495c      	ldr	r1, [pc, #368]	; (8005190 <HAL_I2C_Init+0x274>)
 8005020:	428b      	cmp	r3, r1
 8005022:	d819      	bhi.n	8005058 <HAL_I2C_Init+0x13c>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1e59      	subs	r1, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005032:	1c59      	adds	r1, r3, #1
 8005034:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005038:	400b      	ands	r3, r1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <HAL_I2C_Init+0x138>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1e59      	subs	r1, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	fbb1 f3f3 	udiv	r3, r1, r3
 800504c:	3301      	adds	r3, #1
 800504e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005052:	e051      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 8005054:	2304      	movs	r3, #4
 8005056:	e04f      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d111      	bne.n	8005084 <HAL_I2C_Init+0x168>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1e58      	subs	r0, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6859      	ldr	r1, [r3, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	440b      	add	r3, r1
 800506e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005072:	3301      	adds	r3, #1
 8005074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005078:	2b00      	cmp	r3, #0
 800507a:	bf0c      	ite	eq
 800507c:	2301      	moveq	r3, #1
 800507e:	2300      	movne	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	e012      	b.n	80050aa <HAL_I2C_Init+0x18e>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	1e58      	subs	r0, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6859      	ldr	r1, [r3, #4]
 800508c:	460b      	mov	r3, r1
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	0099      	lsls	r1, r3, #2
 8005094:	440b      	add	r3, r1
 8005096:	fbb0 f3f3 	udiv	r3, r0, r3
 800509a:	3301      	adds	r3, #1
 800509c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bf0c      	ite	eq
 80050a4:	2301      	moveq	r3, #1
 80050a6:	2300      	movne	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_I2C_Init+0x196>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e022      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10e      	bne.n	80050d8 <HAL_I2C_Init+0x1bc>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1e58      	subs	r0, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	460b      	mov	r3, r1
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	440b      	add	r3, r1
 80050c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80050cc:	3301      	adds	r3, #1
 80050ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d6:	e00f      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	1e58      	subs	r0, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6859      	ldr	r1, [r3, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	0099      	lsls	r1, r3, #2
 80050e8:	440b      	add	r3, r1
 80050ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80050ee:	3301      	adds	r3, #1
 80050f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	6809      	ldr	r1, [r1, #0]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69da      	ldr	r2, [r3, #28]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005126:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6911      	ldr	r1, [r2, #16]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68d2      	ldr	r2, [r2, #12]
 8005132:	4311      	orrs	r1, r2
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	430b      	orrs	r3, r1
 800513a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695a      	ldr	r2, [r3, #20]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	000186a0 	.word	0x000186a0
 8005194:	001e847f 	.word	0x001e847f
 8005198:	003d08ff 	.word	0x003d08ff
 800519c:	431bde83 	.word	0x431bde83
 80051a0:	10624dd3 	.word	0x10624dd3

080051a4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af02      	add	r7, sp, #8
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	4608      	mov	r0, r1
 80051ae:	4611      	mov	r1, r2
 80051b0:	461a      	mov	r2, r3
 80051b2:	4603      	mov	r3, r0
 80051b4:	817b      	strh	r3, [r7, #10]
 80051b6:	460b      	mov	r3, r1
 80051b8:	813b      	strh	r3, [r7, #8]
 80051ba:	4613      	mov	r3, r2
 80051bc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051be:	f7fe fd67 	bl	8003c90 <HAL_GetTick>
 80051c2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b20      	cmp	r3, #32
 80051ce:	f040 80d9 	bne.w	8005384 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	2319      	movs	r3, #25
 80051d8:	2201      	movs	r2, #1
 80051da:	496d      	ldr	r1, [pc, #436]	; (8005390 <HAL_I2C_Mem_Write+0x1ec>)
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 fc7f 	bl	8005ae0 <I2C_WaitOnFlagUntilTimeout>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d001      	beq.n	80051ec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80051e8:	2302      	movs	r3, #2
 80051ea:	e0cc      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <HAL_I2C_Mem_Write+0x56>
 80051f6:	2302      	movs	r3, #2
 80051f8:	e0c5      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b01      	cmp	r3, #1
 800520e:	d007      	beq.n	8005220 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800522e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2221      	movs	r2, #33	; 0x21
 8005234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2240      	movs	r2, #64	; 0x40
 800523c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a3a      	ldr	r2, [r7, #32]
 800524a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005250:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005256:	b29a      	uxth	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4a4d      	ldr	r2, [pc, #308]	; (8005394 <HAL_I2C_Mem_Write+0x1f0>)
 8005260:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005262:	88f8      	ldrh	r0, [r7, #6]
 8005264:	893a      	ldrh	r2, [r7, #8]
 8005266:	8979      	ldrh	r1, [r7, #10]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	9300      	str	r3, [sp, #0]
 8005270:	4603      	mov	r3, r0
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 fab6 	bl	80057e4 <I2C_RequestMemoryWrite>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	d052      	beq.n	8005324 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e081      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f000 fd00 	bl	8005c8c <I2C_WaitOnTXEFlagUntilTimeout>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00d      	beq.n	80052ae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	2b04      	cmp	r3, #4
 8005298:	d107      	bne.n	80052aa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e06b      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b2:	781a      	ldrb	r2, [r3, #0]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052be:	1c5a      	adds	r2, r3, #1
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052c8:	3b01      	subs	r3, #1
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	3b01      	subs	r3, #1
 80052d8:	b29a      	uxth	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695b      	ldr	r3, [r3, #20]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d11b      	bne.n	8005324 <HAL_I2C_Mem_Write+0x180>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d017      	beq.n	8005324 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	781a      	ldrb	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800530e:	3b01      	subs	r3, #1
 8005310:	b29a      	uxth	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800531a:	b29b      	uxth	r3, r3
 800531c:	3b01      	subs	r3, #1
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1aa      	bne.n	8005282 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f000 fcec 	bl	8005d0e <I2C_WaitOnBTFFlagUntilTimeout>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d00d      	beq.n	8005358 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005340:	2b04      	cmp	r3, #4
 8005342:	d107      	bne.n	8005354 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005352:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e016      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005380:	2300      	movs	r3, #0
 8005382:	e000      	b.n	8005386 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005384:	2302      	movs	r3, #2
  }
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	00100002 	.word	0x00100002
 8005394:	ffff0000 	.word	0xffff0000

08005398 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b08c      	sub	sp, #48	; 0x30
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	4608      	mov	r0, r1
 80053a2:	4611      	mov	r1, r2
 80053a4:	461a      	mov	r2, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	817b      	strh	r3, [r7, #10]
 80053aa:	460b      	mov	r3, r1
 80053ac:	813b      	strh	r3, [r7, #8]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053b2:	f7fe fc6d 	bl	8003c90 <HAL_GetTick>
 80053b6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	f040 8208 	bne.w	80057d6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	2319      	movs	r3, #25
 80053cc:	2201      	movs	r2, #1
 80053ce:	497b      	ldr	r1, [pc, #492]	; (80055bc <HAL_I2C_Mem_Read+0x224>)
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 fb85 	bl	8005ae0 <I2C_WaitOnFlagUntilTimeout>
 80053d6:	4603      	mov	r3, r0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80053dc:	2302      	movs	r3, #2
 80053de:	e1fb      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <HAL_I2C_Mem_Read+0x56>
 80053ea:	2302      	movs	r3, #2
 80053ec:	e1f4      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b01      	cmp	r3, #1
 8005402:	d007      	beq.n	8005414 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f042 0201 	orr.w	r2, r2, #1
 8005412:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005422:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2222      	movs	r2, #34	; 0x22
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2240      	movs	r2, #64	; 0x40
 8005430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800544a:	b29a      	uxth	r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	4a5b      	ldr	r2, [pc, #364]	; (80055c0 <HAL_I2C_Mem_Read+0x228>)
 8005454:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005456:	88f8      	ldrh	r0, [r7, #6]
 8005458:	893a      	ldrh	r2, [r7, #8]
 800545a:	8979      	ldrh	r1, [r7, #10]
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	9301      	str	r3, [sp, #4]
 8005460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	4603      	mov	r3, r0
 8005466:	68f8      	ldr	r0, [r7, #12]
 8005468:	f000 fa52 	bl	8005910 <I2C_RequestMemoryRead>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	d001      	beq.n	8005476 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e1b0      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800547a:	2b00      	cmp	r3, #0
 800547c:	d113      	bne.n	80054a6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800547e:	2300      	movs	r3, #0
 8005480:	623b      	str	r3, [r7, #32]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	695b      	ldr	r3, [r3, #20]
 8005488:	623b      	str	r3, [r7, #32]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	623b      	str	r3, [r7, #32]
 8005492:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054a2:	601a      	str	r2, [r3, #0]
 80054a4:	e184      	b.n	80057b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d11b      	bne.n	80054e6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054be:	2300      	movs	r3, #0
 80054c0:	61fb      	str	r3, [r7, #28]
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695b      	ldr	r3, [r3, #20]
 80054c8:	61fb      	str	r3, [r7, #28]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	61fb      	str	r3, [r7, #28]
 80054d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	e164      	b.n	80057b0 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d11b      	bne.n	8005526 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800550c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550e:	2300      	movs	r3, #0
 8005510:	61bb      	str	r3, [r7, #24]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	61bb      	str	r3, [r7, #24]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	61bb      	str	r3, [r7, #24]
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	e144      	b.n	80057b0 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	617b      	str	r3, [r7, #20]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800553c:	e138      	b.n	80057b0 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005542:	2b03      	cmp	r3, #3
 8005544:	f200 80f1 	bhi.w	800572a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800554c:	2b01      	cmp	r3, #1
 800554e:	d123      	bne.n	8005598 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005552:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 fc1b 	bl	8005d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e139      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005580:	3b01      	subs	r3, #1
 8005582:	b29a      	uxth	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005596:	e10b      	b.n	80057b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800559c:	2b02      	cmp	r3, #2
 800559e:	d14e      	bne.n	800563e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a2:	9300      	str	r3, [sp, #0]
 80055a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055a6:	2200      	movs	r2, #0
 80055a8:	4906      	ldr	r1, [pc, #24]	; (80055c4 <HAL_I2C_Mem_Read+0x22c>)
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 fa98 	bl	8005ae0 <I2C_WaitOnFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d008      	beq.n	80055c8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e10e      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
 80055ba:	bf00      	nop
 80055bc:	00100002 	.word	0x00100002
 80055c0:	ffff0000 	.word	0xffff0000
 80055c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	3b01      	subs	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	691a      	ldr	r2, [r3, #16]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005614:	b2d2      	uxtb	r2, r2
 8005616:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005626:	3b01      	subs	r3, #1
 8005628:	b29a      	uxth	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800563c:	e0b8      	b.n	80057b0 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005644:	2200      	movs	r2, #0
 8005646:	4966      	ldr	r1, [pc, #408]	; (80057e0 <HAL_I2C_Mem_Read+0x448>)
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 fa49 	bl	8005ae0 <I2C_WaitOnFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0bf      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005666:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	691a      	ldr	r2, [r3, #16]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800567a:	1c5a      	adds	r2, r3, #1
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005690:	b29b      	uxth	r3, r3
 8005692:	3b01      	subs	r3, #1
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	2200      	movs	r2, #0
 80056a2:	494f      	ldr	r1, [pc, #316]	; (80057e0 <HAL_I2C_Mem_Read+0x448>)
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 fa1b 	bl	8005ae0 <I2C_WaitOnFlagUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e091      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	691a      	ldr	r2, [r3, #16]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d6:	1c5a      	adds	r2, r3, #1
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29a      	uxth	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005712:	3b01      	subs	r3, #1
 8005714:	b29a      	uxth	r2, r3
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005728:	e042      	b.n	80057b0 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800572a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800572c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f000 fb2e 	bl	8005d90 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d001      	beq.n	800573e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e04c      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	1c5a      	adds	r2, r3, #1
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005766:	b29b      	uxth	r3, r3
 8005768:	3b01      	subs	r3, #1
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	f003 0304 	and.w	r3, r3, #4
 800577a:	2b04      	cmp	r3, #4
 800577c:	d118      	bne.n	80057b0 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	691a      	ldr	r2, [r3, #16]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	b2d2      	uxtb	r2, r2
 800578a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800579a:	3b01      	subs	r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f47f aec2 	bne.w	800553e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2220      	movs	r2, #32
 80057be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	e000      	b.n	80057d8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80057d6:	2302      	movs	r3, #2
  }
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3728      	adds	r7, #40	; 0x28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	00010004 	.word	0x00010004

080057e4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	4608      	mov	r0, r1
 80057ee:	4611      	mov	r1, r2
 80057f0:	461a      	mov	r2, r3
 80057f2:	4603      	mov	r3, r0
 80057f4:	817b      	strh	r3, [r7, #10]
 80057f6:	460b      	mov	r3, r1
 80057f8:	813b      	strh	r3, [r7, #8]
 80057fa:	4613      	mov	r3, r2
 80057fc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800580c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800580e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	6a3b      	ldr	r3, [r7, #32]
 8005814:	2200      	movs	r2, #0
 8005816:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f960 	bl	8005ae0 <I2C_WaitOnFlagUntilTimeout>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	d00d      	beq.n	8005842 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005834:	d103      	bne.n	800583e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800583e:	2303      	movs	r3, #3
 8005840:	e05f      	b.n	8005902 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005842:	897b      	ldrh	r3, [r7, #10]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	461a      	mov	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005850:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005854:	6a3a      	ldr	r2, [r7, #32]
 8005856:	492d      	ldr	r1, [pc, #180]	; (800590c <I2C_RequestMemoryWrite+0x128>)
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 f998 	bl	8005b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e04c      	b.n	8005902 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	617b      	str	r3, [r7, #20]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800587e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005880:	6a39      	ldr	r1, [r7, #32]
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f000 fa02 	bl	8005c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00d      	beq.n	80058aa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	2b04      	cmp	r3, #4
 8005894:	d107      	bne.n	80058a6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e02b      	b.n	8005902 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058aa:	88fb      	ldrh	r3, [r7, #6]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d105      	bne.n	80058bc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058b0:	893b      	ldrh	r3, [r7, #8]
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	611a      	str	r2, [r3, #16]
 80058ba:	e021      	b.n	8005900 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058bc:	893b      	ldrh	r3, [r7, #8]
 80058be:	0a1b      	lsrs	r3, r3, #8
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058cc:	6a39      	ldr	r1, [r7, #32]
 80058ce:	68f8      	ldr	r0, [r7, #12]
 80058d0:	f000 f9dc 	bl	8005c8c <I2C_WaitOnTXEFlagUntilTimeout>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00d      	beq.n	80058f6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	2b04      	cmp	r3, #4
 80058e0:	d107      	bne.n	80058f2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e005      	b.n	8005902 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058f6:	893b      	ldrh	r3, [r7, #8]
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	00010002 	.word	0x00010002

08005910 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af02      	add	r7, sp, #8
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	4608      	mov	r0, r1
 800591a:	4611      	mov	r1, r2
 800591c:	461a      	mov	r2, r3
 800591e:	4603      	mov	r3, r0
 8005920:	817b      	strh	r3, [r7, #10]
 8005922:	460b      	mov	r3, r1
 8005924:	813b      	strh	r3, [r7, #8]
 8005926:	4613      	mov	r3, r2
 8005928:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005938:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005948:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	9300      	str	r3, [sp, #0]
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	2200      	movs	r2, #0
 8005952:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 f8c2 	bl	8005ae0 <I2C_WaitOnFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005970:	d103      	bne.n	800597a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005978:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e0aa      	b.n	8005ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800597e:	897b      	ldrh	r3, [r7, #10]
 8005980:	b2db      	uxtb	r3, r3
 8005982:	461a      	mov	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800598c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800598e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005990:	6a3a      	ldr	r2, [r7, #32]
 8005992:	4952      	ldr	r1, [pc, #328]	; (8005adc <I2C_RequestMemoryRead+0x1cc>)
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f8fa 	bl	8005b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80059a0:	2301      	movs	r3, #1
 80059a2:	e097      	b.n	8005ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80059ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059bc:	6a39      	ldr	r1, [r7, #32]
 80059be:	68f8      	ldr	r0, [r7, #12]
 80059c0:	f000 f964 	bl	8005c8c <I2C_WaitOnTXEFlagUntilTimeout>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00d      	beq.n	80059e6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d107      	bne.n	80059e2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e076      	b.n	8005ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80059e6:	88fb      	ldrh	r3, [r7, #6]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d105      	bne.n	80059f8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80059ec:	893b      	ldrh	r3, [r7, #8]
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	611a      	str	r2, [r3, #16]
 80059f6:	e021      	b.n	8005a3c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80059f8:	893b      	ldrh	r3, [r7, #8]
 80059fa:	0a1b      	lsrs	r3, r3, #8
 80059fc:	b29b      	uxth	r3, r3
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a08:	6a39      	ldr	r1, [r7, #32]
 8005a0a:	68f8      	ldr	r0, [r7, #12]
 8005a0c:	f000 f93e 	bl	8005c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00d      	beq.n	8005a32 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d107      	bne.n	8005a2e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e050      	b.n	8005ad4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005a32:	893b      	ldrh	r3, [r7, #8]
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3e:	6a39      	ldr	r1, [r7, #32]
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f923 	bl	8005c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00d      	beq.n	8005a68 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	2b04      	cmp	r3, #4
 8005a52:	d107      	bne.n	8005a64 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a62:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e035      	b.n	8005ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a76:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f82b 	bl	8005ae0 <I2C_WaitOnFlagUntilTimeout>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00d      	beq.n	8005aac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a9e:	d103      	bne.n	8005aa8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005aa8:	2303      	movs	r3, #3
 8005aaa:	e013      	b.n	8005ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005aac:	897b      	ldrh	r3, [r7, #10]
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	f043 0301 	orr.w	r3, r3, #1
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	6a3a      	ldr	r2, [r7, #32]
 8005ac0:	4906      	ldr	r1, [pc, #24]	; (8005adc <I2C_RequestMemoryRead+0x1cc>)
 8005ac2:	68f8      	ldr	r0, [r7, #12]
 8005ac4:	f000 f863 	bl	8005b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	00010002 	.word	0x00010002

08005ae0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	603b      	str	r3, [r7, #0]
 8005aec:	4613      	mov	r3, r2
 8005aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005af0:	e025      	b.n	8005b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af8:	d021      	beq.n	8005b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afa:	f7fe f8c9 	bl	8003c90 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d302      	bcc.n	8005b10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d116      	bne.n	8005b3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2200      	movs	r2, #0
 8005b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2220      	movs	r2, #32
 8005b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2a:	f043 0220 	orr.w	r2, r3, #32
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e023      	b.n	8005b86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	0c1b      	lsrs	r3, r3, #16
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d10d      	bne.n	8005b64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	695b      	ldr	r3, [r3, #20]
 8005b4e:	43da      	mvns	r2, r3
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	4013      	ands	r3, r2
 8005b54:	b29b      	uxth	r3, r3
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	bf0c      	ite	eq
 8005b5a:	2301      	moveq	r3, #1
 8005b5c:	2300      	movne	r3, #0
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	461a      	mov	r2, r3
 8005b62:	e00c      	b.n	8005b7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	43da      	mvns	r2, r3
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	4013      	ands	r3, r2
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	bf0c      	ite	eq
 8005b76:	2301      	moveq	r3, #1
 8005b78:	2300      	movne	r3, #0
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d0b6      	beq.n	8005af2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b84:	2300      	movs	r3, #0
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b084      	sub	sp, #16
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	60f8      	str	r0, [r7, #12]
 8005b96:	60b9      	str	r1, [r7, #8]
 8005b98:	607a      	str	r2, [r7, #4]
 8005b9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b9c:	e051      	b.n	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bac:	d123      	bne.n	8005bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bbc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bc6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	f043 0204 	orr.w	r2, r3, #4
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e046      	b.n	8005c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bfc:	d021      	beq.n	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bfe:	f7fe f847 	bl	8003c90 <HAL_GetTick>
 8005c02:	4602      	mov	r2, r0
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	1ad3      	subs	r3, r2, r3
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d302      	bcc.n	8005c14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d116      	bne.n	8005c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	f043 0220 	orr.w	r2, r3, #32
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e020      	b.n	8005c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	0c1b      	lsrs	r3, r3, #16
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d10c      	bne.n	8005c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695b      	ldr	r3, [r3, #20]
 8005c52:	43da      	mvns	r2, r3
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4013      	ands	r3, r2
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	bf14      	ite	ne
 8005c5e:	2301      	movne	r3, #1
 8005c60:	2300      	moveq	r3, #0
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	e00b      	b.n	8005c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	699b      	ldr	r3, [r3, #24]
 8005c6c:	43da      	mvns	r2, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	4013      	ands	r3, r2
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	bf14      	ite	ne
 8005c78:	2301      	movne	r3, #1
 8005c7a:	2300      	moveq	r3, #0
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d18d      	bne.n	8005b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c98:	e02d      	b.n	8005cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 f8ce 	bl	8005e3c <I2C_IsAcknowledgeFailed>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d001      	beq.n	8005caa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e02d      	b.n	8005d06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cb0:	d021      	beq.n	8005cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cb2:	f7fd ffed 	bl	8003c90 <HAL_GetTick>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	68ba      	ldr	r2, [r7, #8]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d302      	bcc.n	8005cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d116      	bne.n	8005cf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	f043 0220 	orr.w	r2, r3, #32
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	e007      	b.n	8005d06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d00:	2b80      	cmp	r3, #128	; 0x80
 8005d02:	d1ca      	bne.n	8005c9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d0e:	b580      	push	{r7, lr}
 8005d10:	b084      	sub	sp, #16
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d1a:	e02d      	b.n	8005d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d1c:	68f8      	ldr	r0, [r7, #12]
 8005d1e:	f000 f88d 	bl	8005e3c <I2C_IsAcknowledgeFailed>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d001      	beq.n	8005d2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e02d      	b.n	8005d88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d32:	d021      	beq.n	8005d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d34:	f7fd ffac 	bl	8003c90 <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d302      	bcc.n	8005d4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d116      	bne.n	8005d78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2220      	movs	r2, #32
 8005d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	f043 0220 	orr.w	r2, r3, #32
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e007      	b.n	8005d88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	695b      	ldr	r3, [r3, #20]
 8005d7e:	f003 0304 	and.w	r3, r3, #4
 8005d82:	2b04      	cmp	r3, #4
 8005d84:	d1ca      	bne.n	8005d1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3710      	adds	r7, #16
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d9c:	e042      	b.n	8005e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	f003 0310 	and.w	r3, r3, #16
 8005da8:	2b10      	cmp	r3, #16
 8005daa:	d119      	bne.n	8005de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f06f 0210 	mvn.w	r2, #16
 8005db4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e029      	b.n	8005e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005de0:	f7fd ff56 	bl	8003c90 <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d302      	bcc.n	8005df6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d116      	bne.n	8005e24 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2220      	movs	r2, #32
 8005e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e10:	f043 0220 	orr.w	r2, r3, #32
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e007      	b.n	8005e34 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	d1b5      	bne.n	8005d9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e52:	d11b      	bne.n	8005e8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e78:	f043 0204 	orr.w	r2, r3, #4
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e000      	b.n	8005e8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e264      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d075      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005eba:	4ba3      	ldr	r3, [pc, #652]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005ebc:	689b      	ldr	r3, [r3, #8]
 8005ebe:	f003 030c 	and.w	r3, r3, #12
 8005ec2:	2b04      	cmp	r3, #4
 8005ec4:	d00c      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ec6:	4ba0      	ldr	r3, [pc, #640]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ece:	2b08      	cmp	r3, #8
 8005ed0:	d112      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ed2:	4b9d      	ldr	r3, [pc, #628]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ede:	d10b      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee0:	4b99      	ldr	r3, [pc, #612]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d05b      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x108>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d157      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e23f      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f00:	d106      	bne.n	8005f10 <HAL_RCC_OscConfig+0x74>
 8005f02:	4b91      	ldr	r3, [pc, #580]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a90      	ldr	r2, [pc, #576]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	e01d      	b.n	8005f4c <HAL_RCC_OscConfig+0xb0>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f18:	d10c      	bne.n	8005f34 <HAL_RCC_OscConfig+0x98>
 8005f1a:	4b8b      	ldr	r3, [pc, #556]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a8a      	ldr	r2, [pc, #552]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4b88      	ldr	r3, [pc, #544]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a87      	ldr	r2, [pc, #540]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e00b      	b.n	8005f4c <HAL_RCC_OscConfig+0xb0>
 8005f34:	4b84      	ldr	r3, [pc, #528]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a83      	ldr	r2, [pc, #524]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f3e:	6013      	str	r3, [r2, #0]
 8005f40:	4b81      	ldr	r3, [pc, #516]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a80      	ldr	r2, [pc, #512]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d013      	beq.n	8005f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f54:	f7fd fe9c 	bl	8003c90 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f5c:	f7fd fe98 	bl	8003c90 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b64      	cmp	r3, #100	; 0x64
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e204      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f6e:	4b76      	ldr	r3, [pc, #472]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0f0      	beq.n	8005f5c <HAL_RCC_OscConfig+0xc0>
 8005f7a:	e014      	b.n	8005fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7c:	f7fd fe88 	bl	8003c90 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f84:	f7fd fe84 	bl	8003c90 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b64      	cmp	r3, #100	; 0x64
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e1f0      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f96:	4b6c      	ldr	r3, [pc, #432]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f0      	bne.n	8005f84 <HAL_RCC_OscConfig+0xe8>
 8005fa2:	e000      	b.n	8005fa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d063      	beq.n	800607a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fb2:	4b65      	ldr	r3, [pc, #404]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005fb4:	689b      	ldr	r3, [r3, #8]
 8005fb6:	f003 030c 	and.w	r3, r3, #12
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00b      	beq.n	8005fd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fbe:	4b62      	ldr	r3, [pc, #392]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	d11c      	bne.n	8006004 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fca:	4b5f      	ldr	r3, [pc, #380]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d116      	bne.n	8006004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fd6:	4b5c      	ldr	r3, [pc, #368]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d005      	beq.n	8005fee <HAL_RCC_OscConfig+0x152>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d001      	beq.n	8005fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e1c4      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fee:	4b56      	ldr	r3, [pc, #344]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	00db      	lsls	r3, r3, #3
 8005ffc:	4952      	ldr	r1, [pc, #328]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006002:	e03a      	b.n	800607a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d020      	beq.n	800604e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800600c:	4b4f      	ldr	r3, [pc, #316]	; (800614c <HAL_RCC_OscConfig+0x2b0>)
 800600e:	2201      	movs	r2, #1
 8006010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006012:	f7fd fe3d 	bl	8003c90 <HAL_GetTick>
 8006016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006018:	e008      	b.n	800602c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800601a:	f7fd fe39 	bl	8003c90 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d901      	bls.n	800602c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e1a5      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800602c:	4b46      	ldr	r3, [pc, #280]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0f0      	beq.n	800601a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006038:	4b43      	ldr	r3, [pc, #268]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	691b      	ldr	r3, [r3, #16]
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	4940      	ldr	r1, [pc, #256]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8006048:	4313      	orrs	r3, r2
 800604a:	600b      	str	r3, [r1, #0]
 800604c:	e015      	b.n	800607a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800604e:	4b3f      	ldr	r3, [pc, #252]	; (800614c <HAL_RCC_OscConfig+0x2b0>)
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006054:	f7fd fe1c 	bl	8003c90 <HAL_GetTick>
 8006058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800605a:	e008      	b.n	800606e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800605c:	f7fd fe18 	bl	8003c90 <HAL_GetTick>
 8006060:	4602      	mov	r2, r0
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	1ad3      	subs	r3, r2, r3
 8006066:	2b02      	cmp	r3, #2
 8006068:	d901      	bls.n	800606e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e184      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800606e:	4b36      	ldr	r3, [pc, #216]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0302 	and.w	r3, r3, #2
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1f0      	bne.n	800605c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d030      	beq.n	80060e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	695b      	ldr	r3, [r3, #20]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d016      	beq.n	80060bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800608e:	4b30      	ldr	r3, [pc, #192]	; (8006150 <HAL_RCC_OscConfig+0x2b4>)
 8006090:	2201      	movs	r2, #1
 8006092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006094:	f7fd fdfc 	bl	8003c90 <HAL_GetTick>
 8006098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800609a:	e008      	b.n	80060ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800609c:	f7fd fdf8 	bl	8003c90 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b02      	cmp	r3, #2
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e164      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060ae:	4b26      	ldr	r3, [pc, #152]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 80060b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060b2:	f003 0302 	and.w	r3, r3, #2
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d0f0      	beq.n	800609c <HAL_RCC_OscConfig+0x200>
 80060ba:	e015      	b.n	80060e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060bc:	4b24      	ldr	r3, [pc, #144]	; (8006150 <HAL_RCC_OscConfig+0x2b4>)
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c2:	f7fd fde5 	bl	8003c90 <HAL_GetTick>
 80060c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060c8:	e008      	b.n	80060dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060ca:	f7fd fde1 	bl	8003c90 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	2b02      	cmp	r3, #2
 80060d6:	d901      	bls.n	80060dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e14d      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060dc:	4b1a      	ldr	r3, [pc, #104]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 80060de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1f0      	bne.n	80060ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 80a0 	beq.w	8006236 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060f6:	2300      	movs	r3, #0
 80060f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060fa:	4b13      	ldr	r3, [pc, #76]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 80060fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10f      	bne.n	8006126 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006106:	2300      	movs	r3, #0
 8006108:	60bb      	str	r3, [r7, #8]
 800610a:	4b0f      	ldr	r3, [pc, #60]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 800610c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610e:	4a0e      	ldr	r2, [pc, #56]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8006110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006114:	6413      	str	r3, [r2, #64]	; 0x40
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <HAL_RCC_OscConfig+0x2ac>)
 8006118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800611e:	60bb      	str	r3, [r7, #8]
 8006120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006122:	2301      	movs	r3, #1
 8006124:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006126:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <HAL_RCC_OscConfig+0x2b8>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612e:	2b00      	cmp	r3, #0
 8006130:	d121      	bne.n	8006176 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006132:	4b08      	ldr	r3, [pc, #32]	; (8006154 <HAL_RCC_OscConfig+0x2b8>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a07      	ldr	r2, [pc, #28]	; (8006154 <HAL_RCC_OscConfig+0x2b8>)
 8006138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800613c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800613e:	f7fd fda7 	bl	8003c90 <HAL_GetTick>
 8006142:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006144:	e011      	b.n	800616a <HAL_RCC_OscConfig+0x2ce>
 8006146:	bf00      	nop
 8006148:	40023800 	.word	0x40023800
 800614c:	42470000 	.word	0x42470000
 8006150:	42470e80 	.word	0x42470e80
 8006154:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006158:	f7fd fd9a 	bl	8003c90 <HAL_GetTick>
 800615c:	4602      	mov	r2, r0
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	2b02      	cmp	r3, #2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e106      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800616a:	4b85      	ldr	r3, [pc, #532]	; (8006380 <HAL_RCC_OscConfig+0x4e4>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006172:	2b00      	cmp	r3, #0
 8006174:	d0f0      	beq.n	8006158 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	2b01      	cmp	r3, #1
 800617c:	d106      	bne.n	800618c <HAL_RCC_OscConfig+0x2f0>
 800617e:	4b81      	ldr	r3, [pc, #516]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 8006180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006182:	4a80      	ldr	r2, [pc, #512]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 8006184:	f043 0301 	orr.w	r3, r3, #1
 8006188:	6713      	str	r3, [r2, #112]	; 0x70
 800618a:	e01c      	b.n	80061c6 <HAL_RCC_OscConfig+0x32a>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	2b05      	cmp	r3, #5
 8006192:	d10c      	bne.n	80061ae <HAL_RCC_OscConfig+0x312>
 8006194:	4b7b      	ldr	r3, [pc, #492]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 8006196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006198:	4a7a      	ldr	r2, [pc, #488]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 800619a:	f043 0304 	orr.w	r3, r3, #4
 800619e:	6713      	str	r3, [r2, #112]	; 0x70
 80061a0:	4b78      	ldr	r3, [pc, #480]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 80061a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a4:	4a77      	ldr	r2, [pc, #476]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 80061a6:	f043 0301 	orr.w	r3, r3, #1
 80061aa:	6713      	str	r3, [r2, #112]	; 0x70
 80061ac:	e00b      	b.n	80061c6 <HAL_RCC_OscConfig+0x32a>
 80061ae:	4b75      	ldr	r3, [pc, #468]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 80061b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b2:	4a74      	ldr	r2, [pc, #464]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 80061b4:	f023 0301 	bic.w	r3, r3, #1
 80061b8:	6713      	str	r3, [r2, #112]	; 0x70
 80061ba:	4b72      	ldr	r3, [pc, #456]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 80061bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061be:	4a71      	ldr	r2, [pc, #452]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 80061c0:	f023 0304 	bic.w	r3, r3, #4
 80061c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d015      	beq.n	80061fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ce:	f7fd fd5f 	bl	8003c90 <HAL_GetTick>
 80061d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061d4:	e00a      	b.n	80061ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061d6:	f7fd fd5b 	bl	8003c90 <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d901      	bls.n	80061ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80061e8:	2303      	movs	r3, #3
 80061ea:	e0c5      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061ec:	4b65      	ldr	r3, [pc, #404]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 80061ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f0:	f003 0302 	and.w	r3, r3, #2
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d0ee      	beq.n	80061d6 <HAL_RCC_OscConfig+0x33a>
 80061f8:	e014      	b.n	8006224 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061fa:	f7fd fd49 	bl	8003c90 <HAL_GetTick>
 80061fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006200:	e00a      	b.n	8006218 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006202:	f7fd fd45 	bl	8003c90 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006210:	4293      	cmp	r3, r2
 8006212:	d901      	bls.n	8006218 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e0af      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006218:	4b5a      	ldr	r3, [pc, #360]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 800621a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1ee      	bne.n	8006202 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006224:	7dfb      	ldrb	r3, [r7, #23]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d105      	bne.n	8006236 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800622a:	4b56      	ldr	r3, [pc, #344]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 800622c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622e:	4a55      	ldr	r2, [pc, #340]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 8006230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006234:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	2b00      	cmp	r3, #0
 800623c:	f000 809b 	beq.w	8006376 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006240:	4b50      	ldr	r3, [pc, #320]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f003 030c 	and.w	r3, r3, #12
 8006248:	2b08      	cmp	r3, #8
 800624a:	d05c      	beq.n	8006306 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	2b02      	cmp	r3, #2
 8006252:	d141      	bne.n	80062d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006254:	4b4c      	ldr	r3, [pc, #304]	; (8006388 <HAL_RCC_OscConfig+0x4ec>)
 8006256:	2200      	movs	r2, #0
 8006258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800625a:	f7fd fd19 	bl	8003c90 <HAL_GetTick>
 800625e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006260:	e008      	b.n	8006274 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006262:	f7fd fd15 	bl	8003c90 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e081      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006274:	4b43      	ldr	r3, [pc, #268]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1f0      	bne.n	8006262 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	69da      	ldr	r2, [r3, #28]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a1b      	ldr	r3, [r3, #32]
 8006288:	431a      	orrs	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	019b      	lsls	r3, r3, #6
 8006290:	431a      	orrs	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006296:	085b      	lsrs	r3, r3, #1
 8006298:	3b01      	subs	r3, #1
 800629a:	041b      	lsls	r3, r3, #16
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062a2:	061b      	lsls	r3, r3, #24
 80062a4:	4937      	ldr	r1, [pc, #220]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062aa:	4b37      	ldr	r3, [pc, #220]	; (8006388 <HAL_RCC_OscConfig+0x4ec>)
 80062ac:	2201      	movs	r2, #1
 80062ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b0:	f7fd fcee 	bl	8003c90 <HAL_GetTick>
 80062b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062b6:	e008      	b.n	80062ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062b8:	f7fd fcea 	bl	8003c90 <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d901      	bls.n	80062ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80062c6:	2303      	movs	r3, #3
 80062c8:	e056      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ca:	4b2e      	ldr	r3, [pc, #184]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d0f0      	beq.n	80062b8 <HAL_RCC_OscConfig+0x41c>
 80062d6:	e04e      	b.n	8006376 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062d8:	4b2b      	ldr	r3, [pc, #172]	; (8006388 <HAL_RCC_OscConfig+0x4ec>)
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062de:	f7fd fcd7 	bl	8003c90 <HAL_GetTick>
 80062e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062e4:	e008      	b.n	80062f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062e6:	f7fd fcd3 	bl	8003c90 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d901      	bls.n	80062f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e03f      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062f8:	4b22      	ldr	r3, [pc, #136]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1f0      	bne.n	80062e6 <HAL_RCC_OscConfig+0x44a>
 8006304:	e037      	b.n	8006376 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	699b      	ldr	r3, [r3, #24]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d101      	bne.n	8006312 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
 8006310:	e032      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006312:	4b1c      	ldr	r3, [pc, #112]	; (8006384 <HAL_RCC_OscConfig+0x4e8>)
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d028      	beq.n	8006372 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800632a:	429a      	cmp	r2, r3
 800632c:	d121      	bne.n	8006372 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006338:	429a      	cmp	r2, r3
 800633a:	d11a      	bne.n	8006372 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006342:	4013      	ands	r3, r2
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006348:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800634a:	4293      	cmp	r3, r2
 800634c:	d111      	bne.n	8006372 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	085b      	lsrs	r3, r3, #1
 800635a:	3b01      	subs	r3, #1
 800635c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800635e:	429a      	cmp	r2, r3
 8006360:	d107      	bne.n	8006372 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800636e:	429a      	cmp	r2, r3
 8006370:	d001      	beq.n	8006376 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006372:	2301      	movs	r3, #1
 8006374:	e000      	b.n	8006378 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3718      	adds	r7, #24
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	40007000 	.word	0x40007000
 8006384:	40023800 	.word	0x40023800
 8006388:	42470060 	.word	0x42470060

0800638c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0cc      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063a0:	4b68      	ldr	r3, [pc, #416]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f003 0307 	and.w	r3, r3, #7
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	429a      	cmp	r2, r3
 80063ac:	d90c      	bls.n	80063c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063ae:	4b65      	ldr	r3, [pc, #404]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80063b0:	683a      	ldr	r2, [r7, #0]
 80063b2:	b2d2      	uxtb	r2, r2
 80063b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063b6:	4b63      	ldr	r3, [pc, #396]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0307 	and.w	r3, r3, #7
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d001      	beq.n	80063c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0b8      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d020      	beq.n	8006416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d005      	beq.n	80063ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063e0:	4b59      	ldr	r3, [pc, #356]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	4a58      	ldr	r2, [pc, #352]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80063e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 0308 	and.w	r3, r3, #8
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d005      	beq.n	8006404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063f8:	4b53      	ldr	r3, [pc, #332]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	4a52      	ldr	r2, [pc, #328]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80063fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006404:	4b50      	ldr	r3, [pc, #320]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	494d      	ldr	r1, [pc, #308]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 8006412:	4313      	orrs	r3, r2
 8006414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0301 	and.w	r3, r3, #1
 800641e:	2b00      	cmp	r3, #0
 8006420:	d044      	beq.n	80064ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d107      	bne.n	800643a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800642a:	4b47      	ldr	r3, [pc, #284]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d119      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e07f      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d003      	beq.n	800644a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006446:	2b03      	cmp	r3, #3
 8006448:	d107      	bne.n	800645a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800644a:	4b3f      	ldr	r3, [pc, #252]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d109      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	e06f      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800645a:	4b3b      	ldr	r3, [pc, #236]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0302 	and.w	r3, r3, #2
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e067      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800646a:	4b37      	ldr	r3, [pc, #220]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	f023 0203 	bic.w	r2, r3, #3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	4934      	ldr	r1, [pc, #208]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 8006478:	4313      	orrs	r3, r2
 800647a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800647c:	f7fd fc08 	bl	8003c90 <HAL_GetTick>
 8006480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006482:	e00a      	b.n	800649a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006484:	f7fd fc04 	bl	8003c90 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006492:	4293      	cmp	r3, r2
 8006494:	d901      	bls.n	800649a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e04f      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800649a:	4b2b      	ldr	r3, [pc, #172]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	f003 020c 	and.w	r2, r3, #12
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d1eb      	bne.n	8006484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064ac:	4b25      	ldr	r3, [pc, #148]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d20c      	bcs.n	80064d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ba:	4b22      	ldr	r3, [pc, #136]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c2:	4b20      	ldr	r3, [pc, #128]	; (8006544 <HAL_RCC_ClockConfig+0x1b8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d001      	beq.n	80064d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e032      	b.n	800653a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0304 	and.w	r3, r3, #4
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064e0:	4b19      	ldr	r3, [pc, #100]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4916      	ldr	r1, [pc, #88]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 80064ee:	4313      	orrs	r3, r2
 80064f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d009      	beq.n	8006512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064fe:	4b12      	ldr	r3, [pc, #72]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	00db      	lsls	r3, r3, #3
 800650c:	490e      	ldr	r1, [pc, #56]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800650e:	4313      	orrs	r3, r2
 8006510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006512:	f000 f821 	bl	8006558 <HAL_RCC_GetSysClockFreq>
 8006516:	4602      	mov	r2, r0
 8006518:	4b0b      	ldr	r3, [pc, #44]	; (8006548 <HAL_RCC_ClockConfig+0x1bc>)
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	091b      	lsrs	r3, r3, #4
 800651e:	f003 030f 	and.w	r3, r3, #15
 8006522:	490a      	ldr	r1, [pc, #40]	; (800654c <HAL_RCC_ClockConfig+0x1c0>)
 8006524:	5ccb      	ldrb	r3, [r1, r3]
 8006526:	fa22 f303 	lsr.w	r3, r2, r3
 800652a:	4a09      	ldr	r2, [pc, #36]	; (8006550 <HAL_RCC_ClockConfig+0x1c4>)
 800652c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800652e:	4b09      	ldr	r3, [pc, #36]	; (8006554 <HAL_RCC_ClockConfig+0x1c8>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f7fd fb68 	bl	8003c08 <HAL_InitTick>

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3710      	adds	r7, #16
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	40023c00 	.word	0x40023c00
 8006548:	40023800 	.word	0x40023800
 800654c:	0800e47c 	.word	0x0800e47c
 8006550:	20000008 	.word	0x20000008
 8006554:	2000000c 	.word	0x2000000c

08006558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006558:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	607b      	str	r3, [r7, #4]
 8006564:	2300      	movs	r3, #0
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	2300      	movs	r3, #0
 800656a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006570:	4b67      	ldr	r3, [pc, #412]	; (8006710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f003 030c 	and.w	r3, r3, #12
 8006578:	2b08      	cmp	r3, #8
 800657a:	d00d      	beq.n	8006598 <HAL_RCC_GetSysClockFreq+0x40>
 800657c:	2b08      	cmp	r3, #8
 800657e:	f200 80bd 	bhi.w	80066fc <HAL_RCC_GetSysClockFreq+0x1a4>
 8006582:	2b00      	cmp	r3, #0
 8006584:	d002      	beq.n	800658c <HAL_RCC_GetSysClockFreq+0x34>
 8006586:	2b04      	cmp	r3, #4
 8006588:	d003      	beq.n	8006592 <HAL_RCC_GetSysClockFreq+0x3a>
 800658a:	e0b7      	b.n	80066fc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800658c:	4b61      	ldr	r3, [pc, #388]	; (8006714 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800658e:	60bb      	str	r3, [r7, #8]
       break;
 8006590:	e0b7      	b.n	8006702 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006592:	4b61      	ldr	r3, [pc, #388]	; (8006718 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006594:	60bb      	str	r3, [r7, #8]
      break;
 8006596:	e0b4      	b.n	8006702 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006598:	4b5d      	ldr	r3, [pc, #372]	; (8006710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065a0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065a2:	4b5b      	ldr	r3, [pc, #364]	; (8006710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d04d      	beq.n	800664a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065ae:	4b58      	ldr	r3, [pc, #352]	; (8006710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	099b      	lsrs	r3, r3, #6
 80065b4:	461a      	mov	r2, r3
 80065b6:	f04f 0300 	mov.w	r3, #0
 80065ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80065be:	f04f 0100 	mov.w	r1, #0
 80065c2:	ea02 0800 	and.w	r8, r2, r0
 80065c6:	ea03 0901 	and.w	r9, r3, r1
 80065ca:	4640      	mov	r0, r8
 80065cc:	4649      	mov	r1, r9
 80065ce:	f04f 0200 	mov.w	r2, #0
 80065d2:	f04f 0300 	mov.w	r3, #0
 80065d6:	014b      	lsls	r3, r1, #5
 80065d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80065dc:	0142      	lsls	r2, r0, #5
 80065de:	4610      	mov	r0, r2
 80065e0:	4619      	mov	r1, r3
 80065e2:	ebb0 0008 	subs.w	r0, r0, r8
 80065e6:	eb61 0109 	sbc.w	r1, r1, r9
 80065ea:	f04f 0200 	mov.w	r2, #0
 80065ee:	f04f 0300 	mov.w	r3, #0
 80065f2:	018b      	lsls	r3, r1, #6
 80065f4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80065f8:	0182      	lsls	r2, r0, #6
 80065fa:	1a12      	subs	r2, r2, r0
 80065fc:	eb63 0301 	sbc.w	r3, r3, r1
 8006600:	f04f 0000 	mov.w	r0, #0
 8006604:	f04f 0100 	mov.w	r1, #0
 8006608:	00d9      	lsls	r1, r3, #3
 800660a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800660e:	00d0      	lsls	r0, r2, #3
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	eb12 0208 	adds.w	r2, r2, r8
 8006618:	eb43 0309 	adc.w	r3, r3, r9
 800661c:	f04f 0000 	mov.w	r0, #0
 8006620:	f04f 0100 	mov.w	r1, #0
 8006624:	0259      	lsls	r1, r3, #9
 8006626:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800662a:	0250      	lsls	r0, r2, #9
 800662c:	4602      	mov	r2, r0
 800662e:	460b      	mov	r3, r1
 8006630:	4610      	mov	r0, r2
 8006632:	4619      	mov	r1, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	461a      	mov	r2, r3
 8006638:	f04f 0300 	mov.w	r3, #0
 800663c:	f7fa fb24 	bl	8000c88 <__aeabi_uldivmod>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	4613      	mov	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	e04a      	b.n	80066e0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800664a:	4b31      	ldr	r3, [pc, #196]	; (8006710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	099b      	lsrs	r3, r3, #6
 8006650:	461a      	mov	r2, r3
 8006652:	f04f 0300 	mov.w	r3, #0
 8006656:	f240 10ff 	movw	r0, #511	; 0x1ff
 800665a:	f04f 0100 	mov.w	r1, #0
 800665e:	ea02 0400 	and.w	r4, r2, r0
 8006662:	ea03 0501 	and.w	r5, r3, r1
 8006666:	4620      	mov	r0, r4
 8006668:	4629      	mov	r1, r5
 800666a:	f04f 0200 	mov.w	r2, #0
 800666e:	f04f 0300 	mov.w	r3, #0
 8006672:	014b      	lsls	r3, r1, #5
 8006674:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006678:	0142      	lsls	r2, r0, #5
 800667a:	4610      	mov	r0, r2
 800667c:	4619      	mov	r1, r3
 800667e:	1b00      	subs	r0, r0, r4
 8006680:	eb61 0105 	sbc.w	r1, r1, r5
 8006684:	f04f 0200 	mov.w	r2, #0
 8006688:	f04f 0300 	mov.w	r3, #0
 800668c:	018b      	lsls	r3, r1, #6
 800668e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006692:	0182      	lsls	r2, r0, #6
 8006694:	1a12      	subs	r2, r2, r0
 8006696:	eb63 0301 	sbc.w	r3, r3, r1
 800669a:	f04f 0000 	mov.w	r0, #0
 800669e:	f04f 0100 	mov.w	r1, #0
 80066a2:	00d9      	lsls	r1, r3, #3
 80066a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066a8:	00d0      	lsls	r0, r2, #3
 80066aa:	4602      	mov	r2, r0
 80066ac:	460b      	mov	r3, r1
 80066ae:	1912      	adds	r2, r2, r4
 80066b0:	eb45 0303 	adc.w	r3, r5, r3
 80066b4:	f04f 0000 	mov.w	r0, #0
 80066b8:	f04f 0100 	mov.w	r1, #0
 80066bc:	0299      	lsls	r1, r3, #10
 80066be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80066c2:	0290      	lsls	r0, r2, #10
 80066c4:	4602      	mov	r2, r0
 80066c6:	460b      	mov	r3, r1
 80066c8:	4610      	mov	r0, r2
 80066ca:	4619      	mov	r1, r3
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	461a      	mov	r2, r3
 80066d0:	f04f 0300 	mov.w	r3, #0
 80066d4:	f7fa fad8 	bl	8000c88 <__aeabi_uldivmod>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4613      	mov	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066e0:	4b0b      	ldr	r3, [pc, #44]	; (8006710 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	0c1b      	lsrs	r3, r3, #16
 80066e6:	f003 0303 	and.w	r3, r3, #3
 80066ea:	3301      	adds	r3, #1
 80066ec:	005b      	lsls	r3, r3, #1
 80066ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f8:	60bb      	str	r3, [r7, #8]
      break;
 80066fa:	e002      	b.n	8006702 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066fc:	4b05      	ldr	r3, [pc, #20]	; (8006714 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80066fe:	60bb      	str	r3, [r7, #8]
      break;
 8006700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006702:	68bb      	ldr	r3, [r7, #8]
}
 8006704:	4618      	mov	r0, r3
 8006706:	3710      	adds	r7, #16
 8006708:	46bd      	mov	sp, r7
 800670a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800670e:	bf00      	nop
 8006710:	40023800 	.word	0x40023800
 8006714:	00f42400 	.word	0x00f42400
 8006718:	007a1200 	.word	0x007a1200

0800671c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006720:	4b03      	ldr	r3, [pc, #12]	; (8006730 <HAL_RCC_GetHCLKFreq+0x14>)
 8006722:	681b      	ldr	r3, [r3, #0]
}
 8006724:	4618      	mov	r0, r3
 8006726:	46bd      	mov	sp, r7
 8006728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672c:	4770      	bx	lr
 800672e:	bf00      	nop
 8006730:	20000008 	.word	0x20000008

08006734 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006738:	f7ff fff0 	bl	800671c <HAL_RCC_GetHCLKFreq>
 800673c:	4602      	mov	r2, r0
 800673e:	4b05      	ldr	r3, [pc, #20]	; (8006754 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	0a9b      	lsrs	r3, r3, #10
 8006744:	f003 0307 	and.w	r3, r3, #7
 8006748:	4903      	ldr	r1, [pc, #12]	; (8006758 <HAL_RCC_GetPCLK1Freq+0x24>)
 800674a:	5ccb      	ldrb	r3, [r1, r3]
 800674c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006750:	4618      	mov	r0, r3
 8006752:	bd80      	pop	{r7, pc}
 8006754:	40023800 	.word	0x40023800
 8006758:	0800e48c 	.word	0x0800e48c

0800675c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006760:	f7ff ffdc 	bl	800671c <HAL_RCC_GetHCLKFreq>
 8006764:	4602      	mov	r2, r0
 8006766:	4b05      	ldr	r3, [pc, #20]	; (800677c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	0b5b      	lsrs	r3, r3, #13
 800676c:	f003 0307 	and.w	r3, r3, #7
 8006770:	4903      	ldr	r1, [pc, #12]	; (8006780 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006772:	5ccb      	ldrb	r3, [r1, r3]
 8006774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006778:	4618      	mov	r0, r3
 800677a:	bd80      	pop	{r7, pc}
 800677c:	40023800 	.word	0x40023800
 8006780:	0800e48c 	.word	0x0800e48c

08006784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d101      	bne.n	8006796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e041      	b.n	800681a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800679c:	b2db      	uxtb	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d106      	bne.n	80067b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f7fb fbca 	bl	8001f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2202      	movs	r2, #2
 80067b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3304      	adds	r3, #4
 80067c0:	4619      	mov	r1, r3
 80067c2:	4610      	mov	r0, r2
 80067c4:	f000 fdf2 	bl	80073ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2201      	movs	r2, #1
 8006804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006818:	2300      	movs	r3, #0
}
 800681a:	4618      	mov	r0, r3
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
	...

08006824 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b01      	cmp	r3, #1
 8006836:	d001      	beq.n	800683c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e046      	b.n	80068ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a23      	ldr	r2, [pc, #140]	; (80068d8 <HAL_TIM_Base_Start+0xb4>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d022      	beq.n	8006894 <HAL_TIM_Base_Start+0x70>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006856:	d01d      	beq.n	8006894 <HAL_TIM_Base_Start+0x70>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a1f      	ldr	r2, [pc, #124]	; (80068dc <HAL_TIM_Base_Start+0xb8>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d018      	beq.n	8006894 <HAL_TIM_Base_Start+0x70>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a1e      	ldr	r2, [pc, #120]	; (80068e0 <HAL_TIM_Base_Start+0xbc>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d013      	beq.n	8006894 <HAL_TIM_Base_Start+0x70>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a1c      	ldr	r2, [pc, #112]	; (80068e4 <HAL_TIM_Base_Start+0xc0>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d00e      	beq.n	8006894 <HAL_TIM_Base_Start+0x70>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a1b      	ldr	r2, [pc, #108]	; (80068e8 <HAL_TIM_Base_Start+0xc4>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d009      	beq.n	8006894 <HAL_TIM_Base_Start+0x70>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a19      	ldr	r2, [pc, #100]	; (80068ec <HAL_TIM_Base_Start+0xc8>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d004      	beq.n	8006894 <HAL_TIM_Base_Start+0x70>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a18      	ldr	r2, [pc, #96]	; (80068f0 <HAL_TIM_Base_Start+0xcc>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d111      	bne.n	80068b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 0307 	and.w	r3, r3, #7
 800689e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b06      	cmp	r3, #6
 80068a4:	d010      	beq.n	80068c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 0201 	orr.w	r2, r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b6:	e007      	b.n	80068c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681a      	ldr	r2, [r3, #0]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f042 0201 	orr.w	r2, r2, #1
 80068c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3714      	adds	r7, #20
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	40010000 	.word	0x40010000
 80068dc:	40000400 	.word	0x40000400
 80068e0:	40000800 	.word	0x40000800
 80068e4:	40000c00 	.word	0x40000c00
 80068e8:	40010400 	.word	0x40010400
 80068ec:	40014000 	.word	0x40014000
 80068f0:	40001800 	.word	0x40001800

080068f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b01      	cmp	r3, #1
 8006906:	d001      	beq.n	800690c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e04e      	b.n	80069aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2202      	movs	r2, #2
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68da      	ldr	r2, [r3, #12]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f042 0201 	orr.w	r2, r2, #1
 8006922:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a23      	ldr	r2, [pc, #140]	; (80069b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d022      	beq.n	8006974 <HAL_TIM_Base_Start_IT+0x80>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006936:	d01d      	beq.n	8006974 <HAL_TIM_Base_Start_IT+0x80>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a1f      	ldr	r2, [pc, #124]	; (80069bc <HAL_TIM_Base_Start_IT+0xc8>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d018      	beq.n	8006974 <HAL_TIM_Base_Start_IT+0x80>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a1e      	ldr	r2, [pc, #120]	; (80069c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d013      	beq.n	8006974 <HAL_TIM_Base_Start_IT+0x80>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a1c      	ldr	r2, [pc, #112]	; (80069c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d00e      	beq.n	8006974 <HAL_TIM_Base_Start_IT+0x80>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a1b      	ldr	r2, [pc, #108]	; (80069c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d009      	beq.n	8006974 <HAL_TIM_Base_Start_IT+0x80>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a19      	ldr	r2, [pc, #100]	; (80069cc <HAL_TIM_Base_Start_IT+0xd8>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d004      	beq.n	8006974 <HAL_TIM_Base_Start_IT+0x80>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a18      	ldr	r2, [pc, #96]	; (80069d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d111      	bne.n	8006998 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	f003 0307 	and.w	r3, r3, #7
 800697e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2b06      	cmp	r3, #6
 8006984:	d010      	beq.n	80069a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0201 	orr.w	r2, r2, #1
 8006994:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006996:	e007      	b.n	80069a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f042 0201 	orr.w	r2, r2, #1
 80069a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40010000 	.word	0x40010000
 80069bc:	40000400 	.word	0x40000400
 80069c0:	40000800 	.word	0x40000800
 80069c4:	40000c00 	.word	0x40000c00
 80069c8:	40010400 	.word	0x40010400
 80069cc:	40014000 	.word	0x40014000
 80069d0:	40001800 	.word	0x40001800

080069d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d101      	bne.n	80069e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80069e2:	2301      	movs	r3, #1
 80069e4:	e041      	b.n	8006a6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ec:	b2db      	uxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d106      	bne.n	8006a00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	f000 f839 	bl	8006a72 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	3304      	adds	r3, #4
 8006a10:	4619      	mov	r1, r3
 8006a12:	4610      	mov	r0, r2
 8006a14:	f000 fcca 	bl	80073ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a68:	2300      	movs	r3, #0
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3708      	adds	r7, #8
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bd80      	pop	{r7, pc}

08006a72 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a72:	b480      	push	{r7}
 8006a74:	b083      	sub	sp, #12
 8006a76:	af00      	add	r7, sp, #0
 8006a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a7a:	bf00      	nop
 8006a7c:	370c      	adds	r7, #12
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr
	...

08006a88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b084      	sub	sp, #16
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d109      	bne.n	8006aac <HAL_TIM_PWM_Start+0x24>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	bf14      	ite	ne
 8006aa4:	2301      	movne	r3, #1
 8006aa6:	2300      	moveq	r3, #0
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	e022      	b.n	8006af2 <HAL_TIM_PWM_Start+0x6a>
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	2b04      	cmp	r3, #4
 8006ab0:	d109      	bne.n	8006ac6 <HAL_TIM_PWM_Start+0x3e>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	bf14      	ite	ne
 8006abe:	2301      	movne	r3, #1
 8006ac0:	2300      	moveq	r3, #0
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	e015      	b.n	8006af2 <HAL_TIM_PWM_Start+0x6a>
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d109      	bne.n	8006ae0 <HAL_TIM_PWM_Start+0x58>
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	bf14      	ite	ne
 8006ad8:	2301      	movne	r3, #1
 8006ada:	2300      	moveq	r3, #0
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	e008      	b.n	8006af2 <HAL_TIM_PWM_Start+0x6a>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	bf14      	ite	ne
 8006aec:	2301      	movne	r3, #1
 8006aee:	2300      	moveq	r3, #0
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e07c      	b.n	8006bf4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d104      	bne.n	8006b0a <HAL_TIM_PWM_Start+0x82>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2202      	movs	r2, #2
 8006b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b08:	e013      	b.n	8006b32 <HAL_TIM_PWM_Start+0xaa>
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b04      	cmp	r3, #4
 8006b0e:	d104      	bne.n	8006b1a <HAL_TIM_PWM_Start+0x92>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2202      	movs	r2, #2
 8006b14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b18:	e00b      	b.n	8006b32 <HAL_TIM_PWM_Start+0xaa>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d104      	bne.n	8006b2a <HAL_TIM_PWM_Start+0xa2>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2202      	movs	r2, #2
 8006b24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b28:	e003      	b.n	8006b32 <HAL_TIM_PWM_Start+0xaa>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	2201      	movs	r2, #1
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	f000 ff20 	bl	8007980 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a2d      	ldr	r2, [pc, #180]	; (8006bfc <HAL_TIM_PWM_Start+0x174>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d004      	beq.n	8006b54 <HAL_TIM_PWM_Start+0xcc>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a2c      	ldr	r2, [pc, #176]	; (8006c00 <HAL_TIM_PWM_Start+0x178>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d101      	bne.n	8006b58 <HAL_TIM_PWM_Start+0xd0>
 8006b54:	2301      	movs	r3, #1
 8006b56:	e000      	b.n	8006b5a <HAL_TIM_PWM_Start+0xd2>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d007      	beq.n	8006b6e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006b6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a22      	ldr	r2, [pc, #136]	; (8006bfc <HAL_TIM_PWM_Start+0x174>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d022      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x136>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b80:	d01d      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x136>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a1f      	ldr	r2, [pc, #124]	; (8006c04 <HAL_TIM_PWM_Start+0x17c>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d018      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x136>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a1d      	ldr	r2, [pc, #116]	; (8006c08 <HAL_TIM_PWM_Start+0x180>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d013      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x136>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a1c      	ldr	r2, [pc, #112]	; (8006c0c <HAL_TIM_PWM_Start+0x184>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d00e      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x136>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a16      	ldr	r2, [pc, #88]	; (8006c00 <HAL_TIM_PWM_Start+0x178>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d009      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x136>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	4a18      	ldr	r2, [pc, #96]	; (8006c10 <HAL_TIM_PWM_Start+0x188>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d004      	beq.n	8006bbe <HAL_TIM_PWM_Start+0x136>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a16      	ldr	r2, [pc, #88]	; (8006c14 <HAL_TIM_PWM_Start+0x18c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d111      	bne.n	8006be2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2b06      	cmp	r3, #6
 8006bce:	d010      	beq.n	8006bf2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f042 0201 	orr.w	r2, r2, #1
 8006bde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006be0:	e007      	b.n	8006bf2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f042 0201 	orr.w	r2, r2, #1
 8006bf0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bf2:	2300      	movs	r3, #0
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}
 8006bfc:	40010000 	.word	0x40010000
 8006c00:	40010400 	.word	0x40010400
 8006c04:	40000400 	.word	0x40000400
 8006c08:	40000800 	.word	0x40000800
 8006c0c:	40000c00 	.word	0x40000c00
 8006c10:	40014000 	.word	0x40014000
 8006c14:	40001800 	.word	0x40001800

08006c18 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d109      	bne.n	8006c3c <HAL_TIM_PWM_Start_IT+0x24>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	bf14      	ite	ne
 8006c34:	2301      	movne	r3, #1
 8006c36:	2300      	moveq	r3, #0
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	e022      	b.n	8006c82 <HAL_TIM_PWM_Start_IT+0x6a>
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	2b04      	cmp	r3, #4
 8006c40:	d109      	bne.n	8006c56 <HAL_TIM_PWM_Start_IT+0x3e>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	bf14      	ite	ne
 8006c4e:	2301      	movne	r3, #1
 8006c50:	2300      	moveq	r3, #0
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	e015      	b.n	8006c82 <HAL_TIM_PWM_Start_IT+0x6a>
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	2b08      	cmp	r3, #8
 8006c5a:	d109      	bne.n	8006c70 <HAL_TIM_PWM_Start_IT+0x58>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	bf14      	ite	ne
 8006c68:	2301      	movne	r3, #1
 8006c6a:	2300      	moveq	r3, #0
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	e008      	b.n	8006c82 <HAL_TIM_PWM_Start_IT+0x6a>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	bf14      	ite	ne
 8006c7c:	2301      	movne	r3, #1
 8006c7e:	2300      	moveq	r3, #0
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d001      	beq.n	8006c8a <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e0c2      	b.n	8006e10 <HAL_TIM_PWM_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d104      	bne.n	8006c9a <HAL_TIM_PWM_Start_IT+0x82>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2202      	movs	r2, #2
 8006c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c98:	e013      	b.n	8006cc2 <HAL_TIM_PWM_Start_IT+0xaa>
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	2b04      	cmp	r3, #4
 8006c9e:	d104      	bne.n	8006caa <HAL_TIM_PWM_Start_IT+0x92>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2202      	movs	r2, #2
 8006ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ca8:	e00b      	b.n	8006cc2 <HAL_TIM_PWM_Start_IT+0xaa>
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	2b08      	cmp	r3, #8
 8006cae:	d104      	bne.n	8006cba <HAL_TIM_PWM_Start_IT+0xa2>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2202      	movs	r2, #2
 8006cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006cb8:	e003      	b.n	8006cc2 <HAL_TIM_PWM_Start_IT+0xaa>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b0c      	cmp	r3, #12
 8006cc6:	d841      	bhi.n	8006d4c <HAL_TIM_PWM_Start_IT+0x134>
 8006cc8:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <HAL_TIM_PWM_Start_IT+0xb8>)
 8006cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cce:	bf00      	nop
 8006cd0:	08006d05 	.word	0x08006d05
 8006cd4:	08006d4d 	.word	0x08006d4d
 8006cd8:	08006d4d 	.word	0x08006d4d
 8006cdc:	08006d4d 	.word	0x08006d4d
 8006ce0:	08006d17 	.word	0x08006d17
 8006ce4:	08006d4d 	.word	0x08006d4d
 8006ce8:	08006d4d 	.word	0x08006d4d
 8006cec:	08006d4d 	.word	0x08006d4d
 8006cf0:	08006d29 	.word	0x08006d29
 8006cf4:	08006d4d 	.word	0x08006d4d
 8006cf8:	08006d4d 	.word	0x08006d4d
 8006cfc:	08006d4d 	.word	0x08006d4d
 8006d00:	08006d3b 	.word	0x08006d3b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f042 0202 	orr.w	r2, r2, #2
 8006d12:	60da      	str	r2, [r3, #12]
      break;
 8006d14:	e01b      	b.n	8006d4e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0204 	orr.w	r2, r2, #4
 8006d24:	60da      	str	r2, [r3, #12]
      break;
 8006d26:	e012      	b.n	8006d4e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	68da      	ldr	r2, [r3, #12]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0208 	orr.w	r2, r2, #8
 8006d36:	60da      	str	r2, [r3, #12]
      break;
 8006d38:	e009      	b.n	8006d4e <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f042 0210 	orr.w	r2, r2, #16
 8006d48:	60da      	str	r2, [r3, #12]
      break;
 8006d4a:	e000      	b.n	8006d4e <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8006d4c:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2201      	movs	r2, #1
 8006d54:	6839      	ldr	r1, [r7, #0]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f000 fe12 	bl	8007980 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a2d      	ldr	r2, [pc, #180]	; (8006e18 <HAL_TIM_PWM_Start_IT+0x200>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d004      	beq.n	8006d70 <HAL_TIM_PWM_Start_IT+0x158>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a2c      	ldr	r2, [pc, #176]	; (8006e1c <HAL_TIM_PWM_Start_IT+0x204>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d101      	bne.n	8006d74 <HAL_TIM_PWM_Start_IT+0x15c>
 8006d70:	2301      	movs	r3, #1
 8006d72:	e000      	b.n	8006d76 <HAL_TIM_PWM_Start_IT+0x15e>
 8006d74:	2300      	movs	r3, #0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d007      	beq.n	8006d8a <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a22      	ldr	r2, [pc, #136]	; (8006e18 <HAL_TIM_PWM_Start_IT+0x200>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d022      	beq.n	8006dda <HAL_TIM_PWM_Start_IT+0x1c2>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9c:	d01d      	beq.n	8006dda <HAL_TIM_PWM_Start_IT+0x1c2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a1f      	ldr	r2, [pc, #124]	; (8006e20 <HAL_TIM_PWM_Start_IT+0x208>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d018      	beq.n	8006dda <HAL_TIM_PWM_Start_IT+0x1c2>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a1d      	ldr	r2, [pc, #116]	; (8006e24 <HAL_TIM_PWM_Start_IT+0x20c>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d013      	beq.n	8006dda <HAL_TIM_PWM_Start_IT+0x1c2>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a1c      	ldr	r2, [pc, #112]	; (8006e28 <HAL_TIM_PWM_Start_IT+0x210>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d00e      	beq.n	8006dda <HAL_TIM_PWM_Start_IT+0x1c2>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a16      	ldr	r2, [pc, #88]	; (8006e1c <HAL_TIM_PWM_Start_IT+0x204>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d009      	beq.n	8006dda <HAL_TIM_PWM_Start_IT+0x1c2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a18      	ldr	r2, [pc, #96]	; (8006e2c <HAL_TIM_PWM_Start_IT+0x214>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d004      	beq.n	8006dda <HAL_TIM_PWM_Start_IT+0x1c2>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a16      	ldr	r2, [pc, #88]	; (8006e30 <HAL_TIM_PWM_Start_IT+0x218>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d111      	bne.n	8006dfe <HAL_TIM_PWM_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	f003 0307 	and.w	r3, r3, #7
 8006de4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b06      	cmp	r3, #6
 8006dea:	d010      	beq.n	8006e0e <HAL_TIM_PWM_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f042 0201 	orr.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dfc:	e007      	b.n	8006e0e <HAL_TIM_PWM_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f042 0201 	orr.w	r2, r2, #1
 8006e0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}
 8006e18:	40010000 	.word	0x40010000
 8006e1c:	40010400 	.word	0x40010400
 8006e20:	40000400 	.word	0x40000400
 8006e24:	40000800 	.word	0x40000800
 8006e28:	40000c00 	.word	0x40000c00
 8006e2c:	40014000 	.word	0x40014000
 8006e30:	40001800 	.word	0x40001800

08006e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f003 0302 	and.w	r3, r3, #2
 8006e46:	2b02      	cmp	r3, #2
 8006e48:	d122      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	f003 0302 	and.w	r3, r3, #2
 8006e54:	2b02      	cmp	r3, #2
 8006e56:	d11b      	bne.n	8006e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f06f 0202 	mvn.w	r2, #2
 8006e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2201      	movs	r2, #1
 8006e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	699b      	ldr	r3, [r3, #24]
 8006e6e:	f003 0303 	and.w	r3, r3, #3
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d003      	beq.n	8006e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fa7a 	bl	8007370 <HAL_TIM_IC_CaptureCallback>
 8006e7c:	e005      	b.n	8006e8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fa6c 	bl	800735c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fa7d 	bl	8007384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	f003 0304 	and.w	r3, r3, #4
 8006e9a:	2b04      	cmp	r3, #4
 8006e9c:	d122      	bne.n	8006ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b04      	cmp	r3, #4
 8006eaa:	d11b      	bne.n	8006ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f06f 0204 	mvn.w	r2, #4
 8006eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2202      	movs	r2, #2
 8006eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d003      	beq.n	8006ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 fa50 	bl	8007370 <HAL_TIM_IC_CaptureCallback>
 8006ed0:	e005      	b.n	8006ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa42 	bl	800735c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fa53 	bl	8007384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	f003 0308 	and.w	r3, r3, #8
 8006eee:	2b08      	cmp	r3, #8
 8006ef0:	d122      	bne.n	8006f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f003 0308 	and.w	r3, r3, #8
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d11b      	bne.n	8006f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f06f 0208 	mvn.w	r2, #8
 8006f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2204      	movs	r2, #4
 8006f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	69db      	ldr	r3, [r3, #28]
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d003      	beq.n	8006f26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fa26 	bl	8007370 <HAL_TIM_IC_CaptureCallback>
 8006f24:	e005      	b.n	8006f32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fa18 	bl	800735c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fa29 	bl	8007384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f003 0310 	and.w	r3, r3, #16
 8006f42:	2b10      	cmp	r3, #16
 8006f44:	d122      	bne.n	8006f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f003 0310 	and.w	r3, r3, #16
 8006f50:	2b10      	cmp	r3, #16
 8006f52:	d11b      	bne.n	8006f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0210 	mvn.w	r2, #16
 8006f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2208      	movs	r2, #8
 8006f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	69db      	ldr	r3, [r3, #28]
 8006f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f9fc 	bl	8007370 <HAL_TIM_IC_CaptureCallback>
 8006f78:	e005      	b.n	8006f86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f9ee 	bl	800735c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f9ff 	bl	8007384 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d10e      	bne.n	8006fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f003 0301 	and.w	r3, r3, #1
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d107      	bne.n	8006fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f06f 0201 	mvn.w	r2, #1
 8006fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 f9c8 	bl	8007348 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fc2:	2b80      	cmp	r3, #128	; 0x80
 8006fc4:	d10e      	bne.n	8006fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd0:	2b80      	cmp	r3, #128	; 0x80
 8006fd2:	d107      	bne.n	8006fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fd7a 	bl	8007ad8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691b      	ldr	r3, [r3, #16]
 8006fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fee:	2b40      	cmp	r3, #64	; 0x40
 8006ff0:	d10e      	bne.n	8007010 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ffc:	2b40      	cmp	r3, #64	; 0x40
 8006ffe:	d107      	bne.n	8007010 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f9c4 	bl	8007398 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b20      	cmp	r3, #32
 800701c:	d10e      	bne.n	800703c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	f003 0320 	and.w	r3, r3, #32
 8007028:	2b20      	cmp	r3, #32
 800702a:	d107      	bne.n	800703c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f06f 0220 	mvn.w	r2, #32
 8007034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 fd44 	bl	8007ac4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800703c:	bf00      	nop
 800703e:	3708      	adds	r7, #8
 8007040:	46bd      	mov	sp, r7
 8007042:	bd80      	pop	{r7, pc}

08007044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b084      	sub	sp, #16
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007056:	2b01      	cmp	r3, #1
 8007058:	d101      	bne.n	800705e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800705a:	2302      	movs	r3, #2
 800705c:	e0ac      	b.n	80071b8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2201      	movs	r2, #1
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2b0c      	cmp	r3, #12
 800706a:	f200 809f 	bhi.w	80071ac <HAL_TIM_PWM_ConfigChannel+0x168>
 800706e:	a201      	add	r2, pc, #4	; (adr r2, 8007074 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007074:	080070a9 	.word	0x080070a9
 8007078:	080071ad 	.word	0x080071ad
 800707c:	080071ad 	.word	0x080071ad
 8007080:	080071ad 	.word	0x080071ad
 8007084:	080070e9 	.word	0x080070e9
 8007088:	080071ad 	.word	0x080071ad
 800708c:	080071ad 	.word	0x080071ad
 8007090:	080071ad 	.word	0x080071ad
 8007094:	0800712b 	.word	0x0800712b
 8007098:	080071ad 	.word	0x080071ad
 800709c:	080071ad 	.word	0x080071ad
 80070a0:	080071ad 	.word	0x080071ad
 80070a4:	0800716b 	.word	0x0800716b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68b9      	ldr	r1, [r7, #8]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f000 fa1c 	bl	80074ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	699a      	ldr	r2, [r3, #24]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f042 0208 	orr.w	r2, r2, #8
 80070c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	699a      	ldr	r2, [r3, #24]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f022 0204 	bic.w	r2, r2, #4
 80070d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6999      	ldr	r1, [r3, #24]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	691a      	ldr	r2, [r3, #16]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	430a      	orrs	r2, r1
 80070e4:	619a      	str	r2, [r3, #24]
      break;
 80070e6:	e062      	b.n	80071ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68b9      	ldr	r1, [r7, #8]
 80070ee:	4618      	mov	r0, r3
 80070f0:	f000 fa6c 	bl	80075cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	699a      	ldr	r2, [r3, #24]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	699a      	ldr	r2, [r3, #24]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	6999      	ldr	r1, [r3, #24]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	021a      	lsls	r2, r3, #8
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	430a      	orrs	r2, r1
 8007126:	619a      	str	r2, [r3, #24]
      break;
 8007128:	e041      	b.n	80071ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68b9      	ldr	r1, [r7, #8]
 8007130:	4618      	mov	r0, r3
 8007132:	f000 fac1 	bl	80076b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	69da      	ldr	r2, [r3, #28]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f042 0208 	orr.w	r2, r2, #8
 8007144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69da      	ldr	r2, [r3, #28]
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0204 	bic.w	r2, r2, #4
 8007154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	69d9      	ldr	r1, [r3, #28]
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	691a      	ldr	r2, [r3, #16]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	430a      	orrs	r2, r1
 8007166:	61da      	str	r2, [r3, #28]
      break;
 8007168:	e021      	b.n	80071ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68b9      	ldr	r1, [r7, #8]
 8007170:	4618      	mov	r0, r3
 8007172:	f000 fb15 	bl	80077a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	69da      	ldr	r2, [r3, #28]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69da      	ldr	r2, [r3, #28]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	69d9      	ldr	r1, [r3, #28]
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	691b      	ldr	r3, [r3, #16]
 80071a0:	021a      	lsls	r2, r3, #8
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	430a      	orrs	r2, r1
 80071a8:	61da      	str	r2, [r3, #28]
      break;
 80071aa:	e000      	b.n	80071ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80071ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071b6:	2300      	movs	r3, #0
}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3710      	adds	r7, #16
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d101      	bne.n	80071d8 <HAL_TIM_ConfigClockSource+0x18>
 80071d4:	2302      	movs	r3, #2
 80071d6:	e0b3      	b.n	8007340 <HAL_TIM_ConfigClockSource+0x180>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007210:	d03e      	beq.n	8007290 <HAL_TIM_ConfigClockSource+0xd0>
 8007212:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007216:	f200 8087 	bhi.w	8007328 <HAL_TIM_ConfigClockSource+0x168>
 800721a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800721e:	f000 8085 	beq.w	800732c <HAL_TIM_ConfigClockSource+0x16c>
 8007222:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007226:	d87f      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x168>
 8007228:	2b70      	cmp	r3, #112	; 0x70
 800722a:	d01a      	beq.n	8007262 <HAL_TIM_ConfigClockSource+0xa2>
 800722c:	2b70      	cmp	r3, #112	; 0x70
 800722e:	d87b      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x168>
 8007230:	2b60      	cmp	r3, #96	; 0x60
 8007232:	d050      	beq.n	80072d6 <HAL_TIM_ConfigClockSource+0x116>
 8007234:	2b60      	cmp	r3, #96	; 0x60
 8007236:	d877      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x168>
 8007238:	2b50      	cmp	r3, #80	; 0x50
 800723a:	d03c      	beq.n	80072b6 <HAL_TIM_ConfigClockSource+0xf6>
 800723c:	2b50      	cmp	r3, #80	; 0x50
 800723e:	d873      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x168>
 8007240:	2b40      	cmp	r3, #64	; 0x40
 8007242:	d058      	beq.n	80072f6 <HAL_TIM_ConfigClockSource+0x136>
 8007244:	2b40      	cmp	r3, #64	; 0x40
 8007246:	d86f      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x168>
 8007248:	2b30      	cmp	r3, #48	; 0x30
 800724a:	d064      	beq.n	8007316 <HAL_TIM_ConfigClockSource+0x156>
 800724c:	2b30      	cmp	r3, #48	; 0x30
 800724e:	d86b      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x168>
 8007250:	2b20      	cmp	r3, #32
 8007252:	d060      	beq.n	8007316 <HAL_TIM_ConfigClockSource+0x156>
 8007254:	2b20      	cmp	r3, #32
 8007256:	d867      	bhi.n	8007328 <HAL_TIM_ConfigClockSource+0x168>
 8007258:	2b00      	cmp	r3, #0
 800725a:	d05c      	beq.n	8007316 <HAL_TIM_ConfigClockSource+0x156>
 800725c:	2b10      	cmp	r3, #16
 800725e:	d05a      	beq.n	8007316 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007260:	e062      	b.n	8007328 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6818      	ldr	r0, [r3, #0]
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	6899      	ldr	r1, [r3, #8]
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	f000 fb65 	bl	8007940 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007284:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	609a      	str	r2, [r3, #8]
      break;
 800728e:	e04e      	b.n	800732e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6818      	ldr	r0, [r3, #0]
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	6899      	ldr	r1, [r3, #8]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f000 fb4e 	bl	8007940 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689a      	ldr	r2, [r3, #8]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072b2:	609a      	str	r2, [r3, #8]
      break;
 80072b4:	e03b      	b.n	800732e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6818      	ldr	r0, [r3, #0]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	6859      	ldr	r1, [r3, #4]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	461a      	mov	r2, r3
 80072c4:	f000 fac2 	bl	800784c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2150      	movs	r1, #80	; 0x50
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 fb1b 	bl	800790a <TIM_ITRx_SetConfig>
      break;
 80072d4:	e02b      	b.n	800732e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6818      	ldr	r0, [r3, #0]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	6859      	ldr	r1, [r3, #4]
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	68db      	ldr	r3, [r3, #12]
 80072e2:	461a      	mov	r2, r3
 80072e4:	f000 fae1 	bl	80078aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2160      	movs	r1, #96	; 0x60
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fb0b 	bl	800790a <TIM_ITRx_SetConfig>
      break;
 80072f4:	e01b      	b.n	800732e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6818      	ldr	r0, [r3, #0]
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	6859      	ldr	r1, [r3, #4]
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	461a      	mov	r2, r3
 8007304:	f000 faa2 	bl	800784c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2140      	movs	r1, #64	; 0x40
 800730e:	4618      	mov	r0, r3
 8007310:	f000 fafb 	bl	800790a <TIM_ITRx_SetConfig>
      break;
 8007314:	e00b      	b.n	800732e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4619      	mov	r1, r3
 8007320:	4610      	mov	r0, r2
 8007322:	f000 faf2 	bl	800790a <TIM_ITRx_SetConfig>
        break;
 8007326:	e002      	b.n	800732e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007328:	bf00      	nop
 800732a:	e000      	b.n	800732e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800732c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3710      	adds	r7, #16
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007348:	b480      	push	{r7}
 800734a:	b083      	sub	sp, #12
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007350:	bf00      	nop
 8007352:	370c      	adds	r7, #12
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	4a40      	ldr	r2, [pc, #256]	; (80074c0 <TIM_Base_SetConfig+0x114>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d013      	beq.n	80073ec <TIM_Base_SetConfig+0x40>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ca:	d00f      	beq.n	80073ec <TIM_Base_SetConfig+0x40>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a3d      	ldr	r2, [pc, #244]	; (80074c4 <TIM_Base_SetConfig+0x118>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d00b      	beq.n	80073ec <TIM_Base_SetConfig+0x40>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a3c      	ldr	r2, [pc, #240]	; (80074c8 <TIM_Base_SetConfig+0x11c>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d007      	beq.n	80073ec <TIM_Base_SetConfig+0x40>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a3b      	ldr	r2, [pc, #236]	; (80074cc <TIM_Base_SetConfig+0x120>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d003      	beq.n	80073ec <TIM_Base_SetConfig+0x40>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a3a      	ldr	r2, [pc, #232]	; (80074d0 <TIM_Base_SetConfig+0x124>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d108      	bne.n	80073fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a2f      	ldr	r2, [pc, #188]	; (80074c0 <TIM_Base_SetConfig+0x114>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d02b      	beq.n	800745e <TIM_Base_SetConfig+0xb2>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800740c:	d027      	beq.n	800745e <TIM_Base_SetConfig+0xb2>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a2c      	ldr	r2, [pc, #176]	; (80074c4 <TIM_Base_SetConfig+0x118>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d023      	beq.n	800745e <TIM_Base_SetConfig+0xb2>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a2b      	ldr	r2, [pc, #172]	; (80074c8 <TIM_Base_SetConfig+0x11c>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d01f      	beq.n	800745e <TIM_Base_SetConfig+0xb2>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a2a      	ldr	r2, [pc, #168]	; (80074cc <TIM_Base_SetConfig+0x120>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d01b      	beq.n	800745e <TIM_Base_SetConfig+0xb2>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a29      	ldr	r2, [pc, #164]	; (80074d0 <TIM_Base_SetConfig+0x124>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d017      	beq.n	800745e <TIM_Base_SetConfig+0xb2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a28      	ldr	r2, [pc, #160]	; (80074d4 <TIM_Base_SetConfig+0x128>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d013      	beq.n	800745e <TIM_Base_SetConfig+0xb2>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a27      	ldr	r2, [pc, #156]	; (80074d8 <TIM_Base_SetConfig+0x12c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d00f      	beq.n	800745e <TIM_Base_SetConfig+0xb2>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a26      	ldr	r2, [pc, #152]	; (80074dc <TIM_Base_SetConfig+0x130>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00b      	beq.n	800745e <TIM_Base_SetConfig+0xb2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a25      	ldr	r2, [pc, #148]	; (80074e0 <TIM_Base_SetConfig+0x134>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d007      	beq.n	800745e <TIM_Base_SetConfig+0xb2>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a24      	ldr	r2, [pc, #144]	; (80074e4 <TIM_Base_SetConfig+0x138>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d003      	beq.n	800745e <TIM_Base_SetConfig+0xb2>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4a23      	ldr	r2, [pc, #140]	; (80074e8 <TIM_Base_SetConfig+0x13c>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d108      	bne.n	8007470 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007464:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	68fa      	ldr	r2, [r7, #12]
 800746c:	4313      	orrs	r3, r2
 800746e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	4313      	orrs	r3, r2
 800747c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a0a      	ldr	r2, [pc, #40]	; (80074c0 <TIM_Base_SetConfig+0x114>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d003      	beq.n	80074a4 <TIM_Base_SetConfig+0xf8>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a0c      	ldr	r2, [pc, #48]	; (80074d0 <TIM_Base_SetConfig+0x124>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d103      	bne.n	80074ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	691a      	ldr	r2, [r3, #16]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	615a      	str	r2, [r3, #20]
}
 80074b2:	bf00      	nop
 80074b4:	3714      	adds	r7, #20
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr
 80074be:	bf00      	nop
 80074c0:	40010000 	.word	0x40010000
 80074c4:	40000400 	.word	0x40000400
 80074c8:	40000800 	.word	0x40000800
 80074cc:	40000c00 	.word	0x40000c00
 80074d0:	40010400 	.word	0x40010400
 80074d4:	40014000 	.word	0x40014000
 80074d8:	40014400 	.word	0x40014400
 80074dc:	40014800 	.word	0x40014800
 80074e0:	40001800 	.word	0x40001800
 80074e4:	40001c00 	.word	0x40001c00
 80074e8:	40002000 	.word	0x40002000

080074ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6a1b      	ldr	r3, [r3, #32]
 80074fa:	f023 0201 	bic.w	r2, r3, #1
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6a1b      	ldr	r3, [r3, #32]
 8007506:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	699b      	ldr	r3, [r3, #24]
 8007512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f023 0303 	bic.w	r3, r3, #3
 8007522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	4313      	orrs	r3, r2
 800752c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	f023 0302 	bic.w	r3, r3, #2
 8007534:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	689b      	ldr	r3, [r3, #8]
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	4313      	orrs	r3, r2
 800753e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	4a20      	ldr	r2, [pc, #128]	; (80075c4 <TIM_OC1_SetConfig+0xd8>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d003      	beq.n	8007550 <TIM_OC1_SetConfig+0x64>
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a1f      	ldr	r2, [pc, #124]	; (80075c8 <TIM_OC1_SetConfig+0xdc>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d10c      	bne.n	800756a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	f023 0308 	bic.w	r3, r3, #8
 8007556:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	697a      	ldr	r2, [r7, #20]
 800755e:	4313      	orrs	r3, r2
 8007560:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f023 0304 	bic.w	r3, r3, #4
 8007568:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a15      	ldr	r2, [pc, #84]	; (80075c4 <TIM_OC1_SetConfig+0xd8>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d003      	beq.n	800757a <TIM_OC1_SetConfig+0x8e>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	4a14      	ldr	r2, [pc, #80]	; (80075c8 <TIM_OC1_SetConfig+0xdc>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d111      	bne.n	800759e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	4313      	orrs	r3, r2
 8007592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	4313      	orrs	r3, r2
 800759c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	621a      	str	r2, [r3, #32]
}
 80075b8:	bf00      	nop
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	40010000 	.word	0x40010000
 80075c8:	40010400 	.word	0x40010400

080075cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b087      	sub	sp, #28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	f023 0210 	bic.w	r2, r3, #16
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007602:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	021b      	lsls	r3, r3, #8
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	4313      	orrs	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f023 0320 	bic.w	r3, r3, #32
 8007616:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	011b      	lsls	r3, r3, #4
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	4313      	orrs	r3, r2
 8007622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a22      	ldr	r2, [pc, #136]	; (80076b0 <TIM_OC2_SetConfig+0xe4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d003      	beq.n	8007634 <TIM_OC2_SetConfig+0x68>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	4a21      	ldr	r2, [pc, #132]	; (80076b4 <TIM_OC2_SetConfig+0xe8>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d10d      	bne.n	8007650 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800763a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	011b      	lsls	r3, r3, #4
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	4313      	orrs	r3, r2
 8007646:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800764e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a17      	ldr	r2, [pc, #92]	; (80076b0 <TIM_OC2_SetConfig+0xe4>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d003      	beq.n	8007660 <TIM_OC2_SetConfig+0x94>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a16      	ldr	r2, [pc, #88]	; (80076b4 <TIM_OC2_SetConfig+0xe8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d113      	bne.n	8007688 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007666:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800766e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	4313      	orrs	r3, r2
 800767a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	4313      	orrs	r3, r2
 8007686:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	621a      	str	r2, [r3, #32]
}
 80076a2:	bf00      	nop
 80076a4:	371c      	adds	r7, #28
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	40010000 	.word	0x40010000
 80076b4:	40010400 	.word	0x40010400

080076b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b087      	sub	sp, #28
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	69db      	ldr	r3, [r3, #28]
 80076de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0303 	bic.w	r3, r3, #3
 80076ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	021b      	lsls	r3, r3, #8
 8007708:	697a      	ldr	r2, [r7, #20]
 800770a:	4313      	orrs	r3, r2
 800770c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	4a21      	ldr	r2, [pc, #132]	; (8007798 <TIM_OC3_SetConfig+0xe0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d003      	beq.n	800771e <TIM_OC3_SetConfig+0x66>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	4a20      	ldr	r2, [pc, #128]	; (800779c <TIM_OC3_SetConfig+0xe4>)
 800771a:	4293      	cmp	r3, r2
 800771c:	d10d      	bne.n	800773a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007724:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	68db      	ldr	r3, [r3, #12]
 800772a:	021b      	lsls	r3, r3, #8
 800772c:	697a      	ldr	r2, [r7, #20]
 800772e:	4313      	orrs	r3, r2
 8007730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a16      	ldr	r2, [pc, #88]	; (8007798 <TIM_OC3_SetConfig+0xe0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d003      	beq.n	800774a <TIM_OC3_SetConfig+0x92>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a15      	ldr	r2, [pc, #84]	; (800779c <TIM_OC3_SetConfig+0xe4>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d113      	bne.n	8007772 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	011b      	lsls	r3, r3, #4
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	4313      	orrs	r3, r2
 8007764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	011b      	lsls	r3, r3, #4
 800776c:	693a      	ldr	r2, [r7, #16]
 800776e:	4313      	orrs	r3, r2
 8007770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	685a      	ldr	r2, [r3, #4]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	621a      	str	r2, [r3, #32]
}
 800778c:	bf00      	nop
 800778e:	371c      	adds	r7, #28
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr
 8007798:	40010000 	.word	0x40010000
 800779c:	40010400 	.word	0x40010400

080077a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b087      	sub	sp, #28
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	69db      	ldr	r3, [r3, #28]
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	021b      	lsls	r3, r3, #8
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	4313      	orrs	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077e4:	693b      	ldr	r3, [r7, #16]
 80077e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80077ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	689b      	ldr	r3, [r3, #8]
 80077f0:	031b      	lsls	r3, r3, #12
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	4a12      	ldr	r2, [pc, #72]	; (8007844 <TIM_OC4_SetConfig+0xa4>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d003      	beq.n	8007808 <TIM_OC4_SetConfig+0x68>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	4a11      	ldr	r2, [pc, #68]	; (8007848 <TIM_OC4_SetConfig+0xa8>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d109      	bne.n	800781c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800780e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	019b      	lsls	r3, r3, #6
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	4313      	orrs	r3, r2
 800781a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	685a      	ldr	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	693a      	ldr	r2, [r7, #16]
 8007834:	621a      	str	r2, [r3, #32]
}
 8007836:	bf00      	nop
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	40010000 	.word	0x40010000
 8007848:	40010400 	.word	0x40010400

0800784c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800784c:	b480      	push	{r7}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	6a1b      	ldr	r3, [r3, #32]
 8007862:	f023 0201 	bic.w	r2, r3, #1
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	699b      	ldr	r3, [r3, #24]
 800786e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007876:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	011b      	lsls	r3, r3, #4
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	4313      	orrs	r3, r2
 8007880:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f023 030a 	bic.w	r3, r3, #10
 8007888:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800788a:	697a      	ldr	r2, [r7, #20]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	4313      	orrs	r3, r2
 8007890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	621a      	str	r2, [r3, #32]
}
 800789e:	bf00      	nop
 80078a0:	371c      	adds	r7, #28
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b087      	sub	sp, #28
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	60f8      	str	r0, [r7, #12]
 80078b2:	60b9      	str	r1, [r7, #8]
 80078b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	f023 0210 	bic.w	r2, r3, #16
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	699b      	ldr	r3, [r3, #24]
 80078c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6a1b      	ldr	r3, [r3, #32]
 80078cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	031b      	lsls	r3, r3, #12
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	4313      	orrs	r3, r2
 80078de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80078e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	011b      	lsls	r3, r3, #4
 80078ec:	693a      	ldr	r2, [r7, #16]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	697a      	ldr	r2, [r7, #20]
 80078f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	693a      	ldr	r2, [r7, #16]
 80078fc:	621a      	str	r2, [r3, #32]
}
 80078fe:	bf00      	nop
 8007900:	371c      	adds	r7, #28
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr

0800790a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800790a:	b480      	push	{r7}
 800790c:	b085      	sub	sp, #20
 800790e:	af00      	add	r7, sp, #0
 8007910:	6078      	str	r0, [r7, #4]
 8007912:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007920:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007922:	683a      	ldr	r2, [r7, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	4313      	orrs	r3, r2
 8007928:	f043 0307 	orr.w	r3, r3, #7
 800792c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	68fa      	ldr	r2, [r7, #12]
 8007932:	609a      	str	r2, [r3, #8]
}
 8007934:	bf00      	nop
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007940:	b480      	push	{r7}
 8007942:	b087      	sub	sp, #28
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	607a      	str	r2, [r7, #4]
 800794c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800795a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	021a      	lsls	r2, r3, #8
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	431a      	orrs	r2, r3
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	4313      	orrs	r3, r2
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	4313      	orrs	r3, r2
 800796c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	609a      	str	r2, [r3, #8]
}
 8007974:	bf00      	nop
 8007976:	371c      	adds	r7, #28
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f003 031f 	and.w	r3, r3, #31
 8007992:	2201      	movs	r2, #1
 8007994:	fa02 f303 	lsl.w	r3, r2, r3
 8007998:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6a1a      	ldr	r2, [r3, #32]
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	43db      	mvns	r3, r3
 80079a2:	401a      	ands	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6a1a      	ldr	r2, [r3, #32]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f003 031f 	and.w	r3, r3, #31
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	fa01 f303 	lsl.w	r3, r1, r3
 80079b8:	431a      	orrs	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	621a      	str	r2, [r3, #32]
}
 80079be:	bf00      	nop
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
	...

080079cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b085      	sub	sp, #20
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d101      	bne.n	80079e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80079e0:	2302      	movs	r3, #2
 80079e2:	e05a      	b.n	8007a9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2202      	movs	r2, #2
 80079f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a21      	ldr	r2, [pc, #132]	; (8007aa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d022      	beq.n	8007a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a30:	d01d      	beq.n	8007a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a1d      	ldr	r2, [pc, #116]	; (8007aac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d018      	beq.n	8007a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a1b      	ldr	r2, [pc, #108]	; (8007ab0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d013      	beq.n	8007a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a1a      	ldr	r2, [pc, #104]	; (8007ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d00e      	beq.n	8007a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a18      	ldr	r2, [pc, #96]	; (8007ab8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d009      	beq.n	8007a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a17      	ldr	r2, [pc, #92]	; (8007abc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d004      	beq.n	8007a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a15      	ldr	r2, [pc, #84]	; (8007ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d10c      	bne.n	8007a88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	68ba      	ldr	r2, [r7, #8]
 8007a7c:	4313      	orrs	r3, r2
 8007a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2201      	movs	r2, #1
 8007a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr
 8007aa6:	bf00      	nop
 8007aa8:	40010000 	.word	0x40010000
 8007aac:	40000400 	.word	0x40000400
 8007ab0:	40000800 	.word	0x40000800
 8007ab4:	40000c00 	.word	0x40000c00
 8007ab8:	40010400 	.word	0x40010400
 8007abc:	40014000 	.word	0x40014000
 8007ac0:	40001800 	.word	0x40001800

08007ac4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b082      	sub	sp, #8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e03f      	b.n	8007b7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d106      	bne.n	8007b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7fa fac8 	bl	80020a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2224      	movs	r2, #36	; 0x24
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68da      	ldr	r2, [r3, #12]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 f829 	bl	8007b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	691a      	ldr	r2, [r3, #16]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	695a      	ldr	r2, [r3, #20]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3708      	adds	r7, #8
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	b09f      	sub	sp, #124	; 0x7c
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	691b      	ldr	r3, [r3, #16]
 8007b98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9e:	68d9      	ldr	r1, [r3, #12]
 8007ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	ea40 0301 	orr.w	r3, r0, r1
 8007ba8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bac:	689a      	ldr	r2, [r3, #8]
 8007bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	431a      	orrs	r2, r3
 8007bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	68db      	ldr	r3, [r3, #12]
 8007bc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007bcc:	f021 010c 	bic.w	r1, r1, #12
 8007bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007bd6:	430b      	orrs	r3, r1
 8007bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007be6:	6999      	ldr	r1, [r3, #24]
 8007be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	ea40 0301 	orr.w	r3, r0, r1
 8007bf0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	4bc5      	ldr	r3, [pc, #788]	; (8007f0c <UART_SetConfig+0x384>)
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d004      	beq.n	8007c06 <UART_SetConfig+0x7e>
 8007bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	4bc3      	ldr	r3, [pc, #780]	; (8007f10 <UART_SetConfig+0x388>)
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d103      	bne.n	8007c0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c06:	f7fe fda9 	bl	800675c <HAL_RCC_GetPCLK2Freq>
 8007c0a:	6778      	str	r0, [r7, #116]	; 0x74
 8007c0c:	e002      	b.n	8007c14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c0e:	f7fe fd91 	bl	8006734 <HAL_RCC_GetPCLK1Freq>
 8007c12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c16:	69db      	ldr	r3, [r3, #28]
 8007c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c1c:	f040 80b6 	bne.w	8007d8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c22:	461c      	mov	r4, r3
 8007c24:	f04f 0500 	mov.w	r5, #0
 8007c28:	4622      	mov	r2, r4
 8007c2a:	462b      	mov	r3, r5
 8007c2c:	1891      	adds	r1, r2, r2
 8007c2e:	6439      	str	r1, [r7, #64]	; 0x40
 8007c30:	415b      	adcs	r3, r3
 8007c32:	647b      	str	r3, [r7, #68]	; 0x44
 8007c34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007c38:	1912      	adds	r2, r2, r4
 8007c3a:	eb45 0303 	adc.w	r3, r5, r3
 8007c3e:	f04f 0000 	mov.w	r0, #0
 8007c42:	f04f 0100 	mov.w	r1, #0
 8007c46:	00d9      	lsls	r1, r3, #3
 8007c48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007c4c:	00d0      	lsls	r0, r2, #3
 8007c4e:	4602      	mov	r2, r0
 8007c50:	460b      	mov	r3, r1
 8007c52:	1911      	adds	r1, r2, r4
 8007c54:	6639      	str	r1, [r7, #96]	; 0x60
 8007c56:	416b      	adcs	r3, r5
 8007c58:	667b      	str	r3, [r7, #100]	; 0x64
 8007c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f04f 0300 	mov.w	r3, #0
 8007c64:	1891      	adds	r1, r2, r2
 8007c66:	63b9      	str	r1, [r7, #56]	; 0x38
 8007c68:	415b      	adcs	r3, r3
 8007c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007c6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007c70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007c74:	f7f9 f808 	bl	8000c88 <__aeabi_uldivmod>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	460b      	mov	r3, r1
 8007c7c:	4ba5      	ldr	r3, [pc, #660]	; (8007f14 <UART_SetConfig+0x38c>)
 8007c7e:	fba3 2302 	umull	r2, r3, r3, r2
 8007c82:	095b      	lsrs	r3, r3, #5
 8007c84:	011e      	lsls	r6, r3, #4
 8007c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c88:	461c      	mov	r4, r3
 8007c8a:	f04f 0500 	mov.w	r5, #0
 8007c8e:	4622      	mov	r2, r4
 8007c90:	462b      	mov	r3, r5
 8007c92:	1891      	adds	r1, r2, r2
 8007c94:	6339      	str	r1, [r7, #48]	; 0x30
 8007c96:	415b      	adcs	r3, r3
 8007c98:	637b      	str	r3, [r7, #52]	; 0x34
 8007c9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007c9e:	1912      	adds	r2, r2, r4
 8007ca0:	eb45 0303 	adc.w	r3, r5, r3
 8007ca4:	f04f 0000 	mov.w	r0, #0
 8007ca8:	f04f 0100 	mov.w	r1, #0
 8007cac:	00d9      	lsls	r1, r3, #3
 8007cae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007cb2:	00d0      	lsls	r0, r2, #3
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	1911      	adds	r1, r2, r4
 8007cba:	65b9      	str	r1, [r7, #88]	; 0x58
 8007cbc:	416b      	adcs	r3, r5
 8007cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	f04f 0300 	mov.w	r3, #0
 8007cca:	1891      	adds	r1, r2, r2
 8007ccc:	62b9      	str	r1, [r7, #40]	; 0x28
 8007cce:	415b      	adcs	r3, r3
 8007cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007cd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007cd6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007cda:	f7f8 ffd5 	bl	8000c88 <__aeabi_uldivmod>
 8007cde:	4602      	mov	r2, r0
 8007ce0:	460b      	mov	r3, r1
 8007ce2:	4b8c      	ldr	r3, [pc, #560]	; (8007f14 <UART_SetConfig+0x38c>)
 8007ce4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ce8:	095b      	lsrs	r3, r3, #5
 8007cea:	2164      	movs	r1, #100	; 0x64
 8007cec:	fb01 f303 	mul.w	r3, r1, r3
 8007cf0:	1ad3      	subs	r3, r2, r3
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	3332      	adds	r3, #50	; 0x32
 8007cf6:	4a87      	ldr	r2, [pc, #540]	; (8007f14 <UART_SetConfig+0x38c>)
 8007cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8007cfc:	095b      	lsrs	r3, r3, #5
 8007cfe:	005b      	lsls	r3, r3, #1
 8007d00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d04:	441e      	add	r6, r3
 8007d06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f04f 0100 	mov.w	r1, #0
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	1894      	adds	r4, r2, r2
 8007d14:	623c      	str	r4, [r7, #32]
 8007d16:	415b      	adcs	r3, r3
 8007d18:	627b      	str	r3, [r7, #36]	; 0x24
 8007d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007d1e:	1812      	adds	r2, r2, r0
 8007d20:	eb41 0303 	adc.w	r3, r1, r3
 8007d24:	f04f 0400 	mov.w	r4, #0
 8007d28:	f04f 0500 	mov.w	r5, #0
 8007d2c:	00dd      	lsls	r5, r3, #3
 8007d2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007d32:	00d4      	lsls	r4, r2, #3
 8007d34:	4622      	mov	r2, r4
 8007d36:	462b      	mov	r3, r5
 8007d38:	1814      	adds	r4, r2, r0
 8007d3a:	653c      	str	r4, [r7, #80]	; 0x50
 8007d3c:	414b      	adcs	r3, r1
 8007d3e:	657b      	str	r3, [r7, #84]	; 0x54
 8007d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	461a      	mov	r2, r3
 8007d46:	f04f 0300 	mov.w	r3, #0
 8007d4a:	1891      	adds	r1, r2, r2
 8007d4c:	61b9      	str	r1, [r7, #24]
 8007d4e:	415b      	adcs	r3, r3
 8007d50:	61fb      	str	r3, [r7, #28]
 8007d52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007d5a:	f7f8 ff95 	bl	8000c88 <__aeabi_uldivmod>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	460b      	mov	r3, r1
 8007d62:	4b6c      	ldr	r3, [pc, #432]	; (8007f14 <UART_SetConfig+0x38c>)
 8007d64:	fba3 1302 	umull	r1, r3, r3, r2
 8007d68:	095b      	lsrs	r3, r3, #5
 8007d6a:	2164      	movs	r1, #100	; 0x64
 8007d6c:	fb01 f303 	mul.w	r3, r1, r3
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	00db      	lsls	r3, r3, #3
 8007d74:	3332      	adds	r3, #50	; 0x32
 8007d76:	4a67      	ldr	r2, [pc, #412]	; (8007f14 <UART_SetConfig+0x38c>)
 8007d78:	fba2 2303 	umull	r2, r3, r2, r3
 8007d7c:	095b      	lsrs	r3, r3, #5
 8007d7e:	f003 0207 	and.w	r2, r3, #7
 8007d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4432      	add	r2, r6
 8007d88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d8a:	e0b9      	b.n	8007f00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d8e:	461c      	mov	r4, r3
 8007d90:	f04f 0500 	mov.w	r5, #0
 8007d94:	4622      	mov	r2, r4
 8007d96:	462b      	mov	r3, r5
 8007d98:	1891      	adds	r1, r2, r2
 8007d9a:	6139      	str	r1, [r7, #16]
 8007d9c:	415b      	adcs	r3, r3
 8007d9e:	617b      	str	r3, [r7, #20]
 8007da0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007da4:	1912      	adds	r2, r2, r4
 8007da6:	eb45 0303 	adc.w	r3, r5, r3
 8007daa:	f04f 0000 	mov.w	r0, #0
 8007dae:	f04f 0100 	mov.w	r1, #0
 8007db2:	00d9      	lsls	r1, r3, #3
 8007db4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007db8:	00d0      	lsls	r0, r2, #3
 8007dba:	4602      	mov	r2, r0
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	eb12 0804 	adds.w	r8, r2, r4
 8007dc2:	eb43 0905 	adc.w	r9, r3, r5
 8007dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f04f 0100 	mov.w	r1, #0
 8007dd0:	f04f 0200 	mov.w	r2, #0
 8007dd4:	f04f 0300 	mov.w	r3, #0
 8007dd8:	008b      	lsls	r3, r1, #2
 8007dda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007dde:	0082      	lsls	r2, r0, #2
 8007de0:	4640      	mov	r0, r8
 8007de2:	4649      	mov	r1, r9
 8007de4:	f7f8 ff50 	bl	8000c88 <__aeabi_uldivmod>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4b49      	ldr	r3, [pc, #292]	; (8007f14 <UART_SetConfig+0x38c>)
 8007dee:	fba3 2302 	umull	r2, r3, r3, r2
 8007df2:	095b      	lsrs	r3, r3, #5
 8007df4:	011e      	lsls	r6, r3, #4
 8007df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f04f 0100 	mov.w	r1, #0
 8007dfe:	4602      	mov	r2, r0
 8007e00:	460b      	mov	r3, r1
 8007e02:	1894      	adds	r4, r2, r2
 8007e04:	60bc      	str	r4, [r7, #8]
 8007e06:	415b      	adcs	r3, r3
 8007e08:	60fb      	str	r3, [r7, #12]
 8007e0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e0e:	1812      	adds	r2, r2, r0
 8007e10:	eb41 0303 	adc.w	r3, r1, r3
 8007e14:	f04f 0400 	mov.w	r4, #0
 8007e18:	f04f 0500 	mov.w	r5, #0
 8007e1c:	00dd      	lsls	r5, r3, #3
 8007e1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007e22:	00d4      	lsls	r4, r2, #3
 8007e24:	4622      	mov	r2, r4
 8007e26:	462b      	mov	r3, r5
 8007e28:	1814      	adds	r4, r2, r0
 8007e2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8007e2c:	414b      	adcs	r3, r1
 8007e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007e30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e32:	685b      	ldr	r3, [r3, #4]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f04f 0100 	mov.w	r1, #0
 8007e3a:	f04f 0200 	mov.w	r2, #0
 8007e3e:	f04f 0300 	mov.w	r3, #0
 8007e42:	008b      	lsls	r3, r1, #2
 8007e44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007e48:	0082      	lsls	r2, r0, #2
 8007e4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007e4e:	f7f8 ff1b 	bl	8000c88 <__aeabi_uldivmod>
 8007e52:	4602      	mov	r2, r0
 8007e54:	460b      	mov	r3, r1
 8007e56:	4b2f      	ldr	r3, [pc, #188]	; (8007f14 <UART_SetConfig+0x38c>)
 8007e58:	fba3 1302 	umull	r1, r3, r3, r2
 8007e5c:	095b      	lsrs	r3, r3, #5
 8007e5e:	2164      	movs	r1, #100	; 0x64
 8007e60:	fb01 f303 	mul.w	r3, r1, r3
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	011b      	lsls	r3, r3, #4
 8007e68:	3332      	adds	r3, #50	; 0x32
 8007e6a:	4a2a      	ldr	r2, [pc, #168]	; (8007f14 <UART_SetConfig+0x38c>)
 8007e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e70:	095b      	lsrs	r3, r3, #5
 8007e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e76:	441e      	add	r6, r3
 8007e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f04f 0100 	mov.w	r1, #0
 8007e80:	4602      	mov	r2, r0
 8007e82:	460b      	mov	r3, r1
 8007e84:	1894      	adds	r4, r2, r2
 8007e86:	603c      	str	r4, [r7, #0]
 8007e88:	415b      	adcs	r3, r3
 8007e8a:	607b      	str	r3, [r7, #4]
 8007e8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e90:	1812      	adds	r2, r2, r0
 8007e92:	eb41 0303 	adc.w	r3, r1, r3
 8007e96:	f04f 0400 	mov.w	r4, #0
 8007e9a:	f04f 0500 	mov.w	r5, #0
 8007e9e:	00dd      	lsls	r5, r3, #3
 8007ea0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ea4:	00d4      	lsls	r4, r2, #3
 8007ea6:	4622      	mov	r2, r4
 8007ea8:	462b      	mov	r3, r5
 8007eaa:	eb12 0a00 	adds.w	sl, r2, r0
 8007eae:	eb43 0b01 	adc.w	fp, r3, r1
 8007eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f04f 0100 	mov.w	r1, #0
 8007ebc:	f04f 0200 	mov.w	r2, #0
 8007ec0:	f04f 0300 	mov.w	r3, #0
 8007ec4:	008b      	lsls	r3, r1, #2
 8007ec6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007eca:	0082      	lsls	r2, r0, #2
 8007ecc:	4650      	mov	r0, sl
 8007ece:	4659      	mov	r1, fp
 8007ed0:	f7f8 feda 	bl	8000c88 <__aeabi_uldivmod>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	4b0e      	ldr	r3, [pc, #56]	; (8007f14 <UART_SetConfig+0x38c>)
 8007eda:	fba3 1302 	umull	r1, r3, r3, r2
 8007ede:	095b      	lsrs	r3, r3, #5
 8007ee0:	2164      	movs	r1, #100	; 0x64
 8007ee2:	fb01 f303 	mul.w	r3, r1, r3
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	011b      	lsls	r3, r3, #4
 8007eea:	3332      	adds	r3, #50	; 0x32
 8007eec:	4a09      	ldr	r2, [pc, #36]	; (8007f14 <UART_SetConfig+0x38c>)
 8007eee:	fba2 2303 	umull	r2, r3, r2, r3
 8007ef2:	095b      	lsrs	r3, r3, #5
 8007ef4:	f003 020f 	and.w	r2, r3, #15
 8007ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4432      	add	r2, r6
 8007efe:	609a      	str	r2, [r3, #8]
}
 8007f00:	bf00      	nop
 8007f02:	377c      	adds	r7, #124	; 0x7c
 8007f04:	46bd      	mov	sp, r7
 8007f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0a:	bf00      	nop
 8007f0c:	40011000 	.word	0x40011000
 8007f10:	40011400 	.word	0x40011400
 8007f14:	51eb851f 	.word	0x51eb851f

08007f18 <arm_pid_init_f32>:
 8007f18:	edd0 6a08 	vldr	s13, [r0, #32]
 8007f1c:	edd0 7a06 	vldr	s15, [r0, #24]
 8007f20:	ed90 7a07 	vldr	s14, [r0, #28]
 8007f24:	edc0 6a02 	vstr	s13, [r0, #8]
 8007f28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007f2c:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8007f30:	eef1 7a67 	vneg.f32	s15, s15
 8007f34:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007f38:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007f3c:	ed80 7a00 	vstr	s14, [r0]
 8007f40:	edc0 7a01 	vstr	s15, [r0, #4]
 8007f44:	b119      	cbz	r1, 8007f4e <arm_pid_init_f32+0x36>
 8007f46:	2300      	movs	r3, #0
 8007f48:	60c3      	str	r3, [r0, #12]
 8007f4a:	6103      	str	r3, [r0, #16]
 8007f4c:	6143      	str	r3, [r0, #20]
 8007f4e:	4770      	bx	lr

08007f50 <__errno>:
 8007f50:	4b01      	ldr	r3, [pc, #4]	; (8007f58 <__errno+0x8>)
 8007f52:	6818      	ldr	r0, [r3, #0]
 8007f54:	4770      	bx	lr
 8007f56:	bf00      	nop
 8007f58:	20000014 	.word	0x20000014

08007f5c <__libc_init_array>:
 8007f5c:	b570      	push	{r4, r5, r6, lr}
 8007f5e:	4d0d      	ldr	r5, [pc, #52]	; (8007f94 <__libc_init_array+0x38>)
 8007f60:	4c0d      	ldr	r4, [pc, #52]	; (8007f98 <__libc_init_array+0x3c>)
 8007f62:	1b64      	subs	r4, r4, r5
 8007f64:	10a4      	asrs	r4, r4, #2
 8007f66:	2600      	movs	r6, #0
 8007f68:	42a6      	cmp	r6, r4
 8007f6a:	d109      	bne.n	8007f80 <__libc_init_array+0x24>
 8007f6c:	4d0b      	ldr	r5, [pc, #44]	; (8007f9c <__libc_init_array+0x40>)
 8007f6e:	4c0c      	ldr	r4, [pc, #48]	; (8007fa0 <__libc_init_array+0x44>)
 8007f70:	f004 fc46 	bl	800c800 <_init>
 8007f74:	1b64      	subs	r4, r4, r5
 8007f76:	10a4      	asrs	r4, r4, #2
 8007f78:	2600      	movs	r6, #0
 8007f7a:	42a6      	cmp	r6, r4
 8007f7c:	d105      	bne.n	8007f8a <__libc_init_array+0x2e>
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}
 8007f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f84:	4798      	blx	r3
 8007f86:	3601      	adds	r6, #1
 8007f88:	e7ee      	b.n	8007f68 <__libc_init_array+0xc>
 8007f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f8e:	4798      	blx	r3
 8007f90:	3601      	adds	r6, #1
 8007f92:	e7f2      	b.n	8007f7a <__libc_init_array+0x1e>
 8007f94:	0800eb84 	.word	0x0800eb84
 8007f98:	0800eb84 	.word	0x0800eb84
 8007f9c:	0800eb84 	.word	0x0800eb84
 8007fa0:	0800eb88 	.word	0x0800eb88

08007fa4 <memset>:
 8007fa4:	4402      	add	r2, r0
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d100      	bne.n	8007fae <memset+0xa>
 8007fac:	4770      	bx	lr
 8007fae:	f803 1b01 	strb.w	r1, [r3], #1
 8007fb2:	e7f9      	b.n	8007fa8 <memset+0x4>

08007fb4 <__cvt>:
 8007fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fb8:	ec55 4b10 	vmov	r4, r5, d0
 8007fbc:	2d00      	cmp	r5, #0
 8007fbe:	460e      	mov	r6, r1
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	462b      	mov	r3, r5
 8007fc4:	bfbb      	ittet	lt
 8007fc6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007fca:	461d      	movlt	r5, r3
 8007fcc:	2300      	movge	r3, #0
 8007fce:	232d      	movlt	r3, #45	; 0x2d
 8007fd0:	700b      	strb	r3, [r1, #0]
 8007fd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fd4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007fd8:	4691      	mov	r9, r2
 8007fda:	f023 0820 	bic.w	r8, r3, #32
 8007fde:	bfbc      	itt	lt
 8007fe0:	4622      	movlt	r2, r4
 8007fe2:	4614      	movlt	r4, r2
 8007fe4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fe8:	d005      	beq.n	8007ff6 <__cvt+0x42>
 8007fea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007fee:	d100      	bne.n	8007ff2 <__cvt+0x3e>
 8007ff0:	3601      	adds	r6, #1
 8007ff2:	2102      	movs	r1, #2
 8007ff4:	e000      	b.n	8007ff8 <__cvt+0x44>
 8007ff6:	2103      	movs	r1, #3
 8007ff8:	ab03      	add	r3, sp, #12
 8007ffa:	9301      	str	r3, [sp, #4]
 8007ffc:	ab02      	add	r3, sp, #8
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	ec45 4b10 	vmov	d0, r4, r5
 8008004:	4653      	mov	r3, sl
 8008006:	4632      	mov	r2, r6
 8008008:	f001 fdb6 	bl	8009b78 <_dtoa_r>
 800800c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008010:	4607      	mov	r7, r0
 8008012:	d102      	bne.n	800801a <__cvt+0x66>
 8008014:	f019 0f01 	tst.w	r9, #1
 8008018:	d022      	beq.n	8008060 <__cvt+0xac>
 800801a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800801e:	eb07 0906 	add.w	r9, r7, r6
 8008022:	d110      	bne.n	8008046 <__cvt+0x92>
 8008024:	783b      	ldrb	r3, [r7, #0]
 8008026:	2b30      	cmp	r3, #48	; 0x30
 8008028:	d10a      	bne.n	8008040 <__cvt+0x8c>
 800802a:	2200      	movs	r2, #0
 800802c:	2300      	movs	r3, #0
 800802e:	4620      	mov	r0, r4
 8008030:	4629      	mov	r1, r5
 8008032:	f7f8 fd49 	bl	8000ac8 <__aeabi_dcmpeq>
 8008036:	b918      	cbnz	r0, 8008040 <__cvt+0x8c>
 8008038:	f1c6 0601 	rsb	r6, r6, #1
 800803c:	f8ca 6000 	str.w	r6, [sl]
 8008040:	f8da 3000 	ldr.w	r3, [sl]
 8008044:	4499      	add	r9, r3
 8008046:	2200      	movs	r2, #0
 8008048:	2300      	movs	r3, #0
 800804a:	4620      	mov	r0, r4
 800804c:	4629      	mov	r1, r5
 800804e:	f7f8 fd3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008052:	b108      	cbz	r0, 8008058 <__cvt+0xa4>
 8008054:	f8cd 900c 	str.w	r9, [sp, #12]
 8008058:	2230      	movs	r2, #48	; 0x30
 800805a:	9b03      	ldr	r3, [sp, #12]
 800805c:	454b      	cmp	r3, r9
 800805e:	d307      	bcc.n	8008070 <__cvt+0xbc>
 8008060:	9b03      	ldr	r3, [sp, #12]
 8008062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008064:	1bdb      	subs	r3, r3, r7
 8008066:	4638      	mov	r0, r7
 8008068:	6013      	str	r3, [r2, #0]
 800806a:	b004      	add	sp, #16
 800806c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008070:	1c59      	adds	r1, r3, #1
 8008072:	9103      	str	r1, [sp, #12]
 8008074:	701a      	strb	r2, [r3, #0]
 8008076:	e7f0      	b.n	800805a <__cvt+0xa6>

08008078 <__exponent>:
 8008078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800807a:	4603      	mov	r3, r0
 800807c:	2900      	cmp	r1, #0
 800807e:	bfb8      	it	lt
 8008080:	4249      	neglt	r1, r1
 8008082:	f803 2b02 	strb.w	r2, [r3], #2
 8008086:	bfb4      	ite	lt
 8008088:	222d      	movlt	r2, #45	; 0x2d
 800808a:	222b      	movge	r2, #43	; 0x2b
 800808c:	2909      	cmp	r1, #9
 800808e:	7042      	strb	r2, [r0, #1]
 8008090:	dd2a      	ble.n	80080e8 <__exponent+0x70>
 8008092:	f10d 0407 	add.w	r4, sp, #7
 8008096:	46a4      	mov	ip, r4
 8008098:	270a      	movs	r7, #10
 800809a:	46a6      	mov	lr, r4
 800809c:	460a      	mov	r2, r1
 800809e:	fb91 f6f7 	sdiv	r6, r1, r7
 80080a2:	fb07 1516 	mls	r5, r7, r6, r1
 80080a6:	3530      	adds	r5, #48	; 0x30
 80080a8:	2a63      	cmp	r2, #99	; 0x63
 80080aa:	f104 34ff 	add.w	r4, r4, #4294967295
 80080ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80080b2:	4631      	mov	r1, r6
 80080b4:	dcf1      	bgt.n	800809a <__exponent+0x22>
 80080b6:	3130      	adds	r1, #48	; 0x30
 80080b8:	f1ae 0502 	sub.w	r5, lr, #2
 80080bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80080c0:	1c44      	adds	r4, r0, #1
 80080c2:	4629      	mov	r1, r5
 80080c4:	4561      	cmp	r1, ip
 80080c6:	d30a      	bcc.n	80080de <__exponent+0x66>
 80080c8:	f10d 0209 	add.w	r2, sp, #9
 80080cc:	eba2 020e 	sub.w	r2, r2, lr
 80080d0:	4565      	cmp	r5, ip
 80080d2:	bf88      	it	hi
 80080d4:	2200      	movhi	r2, #0
 80080d6:	4413      	add	r3, r2
 80080d8:	1a18      	subs	r0, r3, r0
 80080da:	b003      	add	sp, #12
 80080dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80080e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80080e6:	e7ed      	b.n	80080c4 <__exponent+0x4c>
 80080e8:	2330      	movs	r3, #48	; 0x30
 80080ea:	3130      	adds	r1, #48	; 0x30
 80080ec:	7083      	strb	r3, [r0, #2]
 80080ee:	70c1      	strb	r1, [r0, #3]
 80080f0:	1d03      	adds	r3, r0, #4
 80080f2:	e7f1      	b.n	80080d8 <__exponent+0x60>

080080f4 <_printf_float>:
 80080f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080f8:	ed2d 8b02 	vpush	{d8}
 80080fc:	b08d      	sub	sp, #52	; 0x34
 80080fe:	460c      	mov	r4, r1
 8008100:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008104:	4616      	mov	r6, r2
 8008106:	461f      	mov	r7, r3
 8008108:	4605      	mov	r5, r0
 800810a:	f002 fe91 	bl	800ae30 <_localeconv_r>
 800810e:	f8d0 a000 	ldr.w	sl, [r0]
 8008112:	4650      	mov	r0, sl
 8008114:	f7f8 f85c 	bl	80001d0 <strlen>
 8008118:	2300      	movs	r3, #0
 800811a:	930a      	str	r3, [sp, #40]	; 0x28
 800811c:	6823      	ldr	r3, [r4, #0]
 800811e:	9305      	str	r3, [sp, #20]
 8008120:	f8d8 3000 	ldr.w	r3, [r8]
 8008124:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008128:	3307      	adds	r3, #7
 800812a:	f023 0307 	bic.w	r3, r3, #7
 800812e:	f103 0208 	add.w	r2, r3, #8
 8008132:	f8c8 2000 	str.w	r2, [r8]
 8008136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800813a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800813e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008142:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008146:	9307      	str	r3, [sp, #28]
 8008148:	f8cd 8018 	str.w	r8, [sp, #24]
 800814c:	ee08 0a10 	vmov	s16, r0
 8008150:	4b9f      	ldr	r3, [pc, #636]	; (80083d0 <_printf_float+0x2dc>)
 8008152:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008156:	f04f 32ff 	mov.w	r2, #4294967295
 800815a:	f7f8 fce7 	bl	8000b2c <__aeabi_dcmpun>
 800815e:	bb88      	cbnz	r0, 80081c4 <_printf_float+0xd0>
 8008160:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008164:	4b9a      	ldr	r3, [pc, #616]	; (80083d0 <_printf_float+0x2dc>)
 8008166:	f04f 32ff 	mov.w	r2, #4294967295
 800816a:	f7f8 fcc1 	bl	8000af0 <__aeabi_dcmple>
 800816e:	bb48      	cbnz	r0, 80081c4 <_printf_float+0xd0>
 8008170:	2200      	movs	r2, #0
 8008172:	2300      	movs	r3, #0
 8008174:	4640      	mov	r0, r8
 8008176:	4649      	mov	r1, r9
 8008178:	f7f8 fcb0 	bl	8000adc <__aeabi_dcmplt>
 800817c:	b110      	cbz	r0, 8008184 <_printf_float+0x90>
 800817e:	232d      	movs	r3, #45	; 0x2d
 8008180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008184:	4b93      	ldr	r3, [pc, #588]	; (80083d4 <_printf_float+0x2e0>)
 8008186:	4894      	ldr	r0, [pc, #592]	; (80083d8 <_printf_float+0x2e4>)
 8008188:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800818c:	bf94      	ite	ls
 800818e:	4698      	movls	r8, r3
 8008190:	4680      	movhi	r8, r0
 8008192:	2303      	movs	r3, #3
 8008194:	6123      	str	r3, [r4, #16]
 8008196:	9b05      	ldr	r3, [sp, #20]
 8008198:	f023 0204 	bic.w	r2, r3, #4
 800819c:	6022      	str	r2, [r4, #0]
 800819e:	f04f 0900 	mov.w	r9, #0
 80081a2:	9700      	str	r7, [sp, #0]
 80081a4:	4633      	mov	r3, r6
 80081a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80081a8:	4621      	mov	r1, r4
 80081aa:	4628      	mov	r0, r5
 80081ac:	f000 f9d8 	bl	8008560 <_printf_common>
 80081b0:	3001      	adds	r0, #1
 80081b2:	f040 8090 	bne.w	80082d6 <_printf_float+0x1e2>
 80081b6:	f04f 30ff 	mov.w	r0, #4294967295
 80081ba:	b00d      	add	sp, #52	; 0x34
 80081bc:	ecbd 8b02 	vpop	{d8}
 80081c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c4:	4642      	mov	r2, r8
 80081c6:	464b      	mov	r3, r9
 80081c8:	4640      	mov	r0, r8
 80081ca:	4649      	mov	r1, r9
 80081cc:	f7f8 fcae 	bl	8000b2c <__aeabi_dcmpun>
 80081d0:	b140      	cbz	r0, 80081e4 <_printf_float+0xf0>
 80081d2:	464b      	mov	r3, r9
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	bfbc      	itt	lt
 80081d8:	232d      	movlt	r3, #45	; 0x2d
 80081da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80081de:	487f      	ldr	r0, [pc, #508]	; (80083dc <_printf_float+0x2e8>)
 80081e0:	4b7f      	ldr	r3, [pc, #508]	; (80083e0 <_printf_float+0x2ec>)
 80081e2:	e7d1      	b.n	8008188 <_printf_float+0x94>
 80081e4:	6863      	ldr	r3, [r4, #4]
 80081e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80081ea:	9206      	str	r2, [sp, #24]
 80081ec:	1c5a      	adds	r2, r3, #1
 80081ee:	d13f      	bne.n	8008270 <_printf_float+0x17c>
 80081f0:	2306      	movs	r3, #6
 80081f2:	6063      	str	r3, [r4, #4]
 80081f4:	9b05      	ldr	r3, [sp, #20]
 80081f6:	6861      	ldr	r1, [r4, #4]
 80081f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80081fc:	2300      	movs	r3, #0
 80081fe:	9303      	str	r3, [sp, #12]
 8008200:	ab0a      	add	r3, sp, #40	; 0x28
 8008202:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008206:	ab09      	add	r3, sp, #36	; 0x24
 8008208:	ec49 8b10 	vmov	d0, r8, r9
 800820c:	9300      	str	r3, [sp, #0]
 800820e:	6022      	str	r2, [r4, #0]
 8008210:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008214:	4628      	mov	r0, r5
 8008216:	f7ff fecd 	bl	8007fb4 <__cvt>
 800821a:	9b06      	ldr	r3, [sp, #24]
 800821c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800821e:	2b47      	cmp	r3, #71	; 0x47
 8008220:	4680      	mov	r8, r0
 8008222:	d108      	bne.n	8008236 <_printf_float+0x142>
 8008224:	1cc8      	adds	r0, r1, #3
 8008226:	db02      	blt.n	800822e <_printf_float+0x13a>
 8008228:	6863      	ldr	r3, [r4, #4]
 800822a:	4299      	cmp	r1, r3
 800822c:	dd41      	ble.n	80082b2 <_printf_float+0x1be>
 800822e:	f1ab 0b02 	sub.w	fp, fp, #2
 8008232:	fa5f fb8b 	uxtb.w	fp, fp
 8008236:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800823a:	d820      	bhi.n	800827e <_printf_float+0x18a>
 800823c:	3901      	subs	r1, #1
 800823e:	465a      	mov	r2, fp
 8008240:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008244:	9109      	str	r1, [sp, #36]	; 0x24
 8008246:	f7ff ff17 	bl	8008078 <__exponent>
 800824a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800824c:	1813      	adds	r3, r2, r0
 800824e:	2a01      	cmp	r2, #1
 8008250:	4681      	mov	r9, r0
 8008252:	6123      	str	r3, [r4, #16]
 8008254:	dc02      	bgt.n	800825c <_printf_float+0x168>
 8008256:	6822      	ldr	r2, [r4, #0]
 8008258:	07d2      	lsls	r2, r2, #31
 800825a:	d501      	bpl.n	8008260 <_printf_float+0x16c>
 800825c:	3301      	adds	r3, #1
 800825e:	6123      	str	r3, [r4, #16]
 8008260:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008264:	2b00      	cmp	r3, #0
 8008266:	d09c      	beq.n	80081a2 <_printf_float+0xae>
 8008268:	232d      	movs	r3, #45	; 0x2d
 800826a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800826e:	e798      	b.n	80081a2 <_printf_float+0xae>
 8008270:	9a06      	ldr	r2, [sp, #24]
 8008272:	2a47      	cmp	r2, #71	; 0x47
 8008274:	d1be      	bne.n	80081f4 <_printf_float+0x100>
 8008276:	2b00      	cmp	r3, #0
 8008278:	d1bc      	bne.n	80081f4 <_printf_float+0x100>
 800827a:	2301      	movs	r3, #1
 800827c:	e7b9      	b.n	80081f2 <_printf_float+0xfe>
 800827e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008282:	d118      	bne.n	80082b6 <_printf_float+0x1c2>
 8008284:	2900      	cmp	r1, #0
 8008286:	6863      	ldr	r3, [r4, #4]
 8008288:	dd0b      	ble.n	80082a2 <_printf_float+0x1ae>
 800828a:	6121      	str	r1, [r4, #16]
 800828c:	b913      	cbnz	r3, 8008294 <_printf_float+0x1a0>
 800828e:	6822      	ldr	r2, [r4, #0]
 8008290:	07d0      	lsls	r0, r2, #31
 8008292:	d502      	bpl.n	800829a <_printf_float+0x1a6>
 8008294:	3301      	adds	r3, #1
 8008296:	440b      	add	r3, r1
 8008298:	6123      	str	r3, [r4, #16]
 800829a:	65a1      	str	r1, [r4, #88]	; 0x58
 800829c:	f04f 0900 	mov.w	r9, #0
 80082a0:	e7de      	b.n	8008260 <_printf_float+0x16c>
 80082a2:	b913      	cbnz	r3, 80082aa <_printf_float+0x1b6>
 80082a4:	6822      	ldr	r2, [r4, #0]
 80082a6:	07d2      	lsls	r2, r2, #31
 80082a8:	d501      	bpl.n	80082ae <_printf_float+0x1ba>
 80082aa:	3302      	adds	r3, #2
 80082ac:	e7f4      	b.n	8008298 <_printf_float+0x1a4>
 80082ae:	2301      	movs	r3, #1
 80082b0:	e7f2      	b.n	8008298 <_printf_float+0x1a4>
 80082b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80082b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082b8:	4299      	cmp	r1, r3
 80082ba:	db05      	blt.n	80082c8 <_printf_float+0x1d4>
 80082bc:	6823      	ldr	r3, [r4, #0]
 80082be:	6121      	str	r1, [r4, #16]
 80082c0:	07d8      	lsls	r0, r3, #31
 80082c2:	d5ea      	bpl.n	800829a <_printf_float+0x1a6>
 80082c4:	1c4b      	adds	r3, r1, #1
 80082c6:	e7e7      	b.n	8008298 <_printf_float+0x1a4>
 80082c8:	2900      	cmp	r1, #0
 80082ca:	bfd4      	ite	le
 80082cc:	f1c1 0202 	rsble	r2, r1, #2
 80082d0:	2201      	movgt	r2, #1
 80082d2:	4413      	add	r3, r2
 80082d4:	e7e0      	b.n	8008298 <_printf_float+0x1a4>
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	055a      	lsls	r2, r3, #21
 80082da:	d407      	bmi.n	80082ec <_printf_float+0x1f8>
 80082dc:	6923      	ldr	r3, [r4, #16]
 80082de:	4642      	mov	r2, r8
 80082e0:	4631      	mov	r1, r6
 80082e2:	4628      	mov	r0, r5
 80082e4:	47b8      	blx	r7
 80082e6:	3001      	adds	r0, #1
 80082e8:	d12c      	bne.n	8008344 <_printf_float+0x250>
 80082ea:	e764      	b.n	80081b6 <_printf_float+0xc2>
 80082ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082f0:	f240 80e0 	bls.w	80084b4 <_printf_float+0x3c0>
 80082f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082f8:	2200      	movs	r2, #0
 80082fa:	2300      	movs	r3, #0
 80082fc:	f7f8 fbe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008300:	2800      	cmp	r0, #0
 8008302:	d034      	beq.n	800836e <_printf_float+0x27a>
 8008304:	4a37      	ldr	r2, [pc, #220]	; (80083e4 <_printf_float+0x2f0>)
 8008306:	2301      	movs	r3, #1
 8008308:	4631      	mov	r1, r6
 800830a:	4628      	mov	r0, r5
 800830c:	47b8      	blx	r7
 800830e:	3001      	adds	r0, #1
 8008310:	f43f af51 	beq.w	80081b6 <_printf_float+0xc2>
 8008314:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008318:	429a      	cmp	r2, r3
 800831a:	db02      	blt.n	8008322 <_printf_float+0x22e>
 800831c:	6823      	ldr	r3, [r4, #0]
 800831e:	07d8      	lsls	r0, r3, #31
 8008320:	d510      	bpl.n	8008344 <_printf_float+0x250>
 8008322:	ee18 3a10 	vmov	r3, s16
 8008326:	4652      	mov	r2, sl
 8008328:	4631      	mov	r1, r6
 800832a:	4628      	mov	r0, r5
 800832c:	47b8      	blx	r7
 800832e:	3001      	adds	r0, #1
 8008330:	f43f af41 	beq.w	80081b6 <_printf_float+0xc2>
 8008334:	f04f 0800 	mov.w	r8, #0
 8008338:	f104 091a 	add.w	r9, r4, #26
 800833c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800833e:	3b01      	subs	r3, #1
 8008340:	4543      	cmp	r3, r8
 8008342:	dc09      	bgt.n	8008358 <_printf_float+0x264>
 8008344:	6823      	ldr	r3, [r4, #0]
 8008346:	079b      	lsls	r3, r3, #30
 8008348:	f100 8105 	bmi.w	8008556 <_printf_float+0x462>
 800834c:	68e0      	ldr	r0, [r4, #12]
 800834e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008350:	4298      	cmp	r0, r3
 8008352:	bfb8      	it	lt
 8008354:	4618      	movlt	r0, r3
 8008356:	e730      	b.n	80081ba <_printf_float+0xc6>
 8008358:	2301      	movs	r3, #1
 800835a:	464a      	mov	r2, r9
 800835c:	4631      	mov	r1, r6
 800835e:	4628      	mov	r0, r5
 8008360:	47b8      	blx	r7
 8008362:	3001      	adds	r0, #1
 8008364:	f43f af27 	beq.w	80081b6 <_printf_float+0xc2>
 8008368:	f108 0801 	add.w	r8, r8, #1
 800836c:	e7e6      	b.n	800833c <_printf_float+0x248>
 800836e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008370:	2b00      	cmp	r3, #0
 8008372:	dc39      	bgt.n	80083e8 <_printf_float+0x2f4>
 8008374:	4a1b      	ldr	r2, [pc, #108]	; (80083e4 <_printf_float+0x2f0>)
 8008376:	2301      	movs	r3, #1
 8008378:	4631      	mov	r1, r6
 800837a:	4628      	mov	r0, r5
 800837c:	47b8      	blx	r7
 800837e:	3001      	adds	r0, #1
 8008380:	f43f af19 	beq.w	80081b6 <_printf_float+0xc2>
 8008384:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008388:	4313      	orrs	r3, r2
 800838a:	d102      	bne.n	8008392 <_printf_float+0x29e>
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	07d9      	lsls	r1, r3, #31
 8008390:	d5d8      	bpl.n	8008344 <_printf_float+0x250>
 8008392:	ee18 3a10 	vmov	r3, s16
 8008396:	4652      	mov	r2, sl
 8008398:	4631      	mov	r1, r6
 800839a:	4628      	mov	r0, r5
 800839c:	47b8      	blx	r7
 800839e:	3001      	adds	r0, #1
 80083a0:	f43f af09 	beq.w	80081b6 <_printf_float+0xc2>
 80083a4:	f04f 0900 	mov.w	r9, #0
 80083a8:	f104 0a1a 	add.w	sl, r4, #26
 80083ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083ae:	425b      	negs	r3, r3
 80083b0:	454b      	cmp	r3, r9
 80083b2:	dc01      	bgt.n	80083b8 <_printf_float+0x2c4>
 80083b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b6:	e792      	b.n	80082de <_printf_float+0x1ea>
 80083b8:	2301      	movs	r3, #1
 80083ba:	4652      	mov	r2, sl
 80083bc:	4631      	mov	r1, r6
 80083be:	4628      	mov	r0, r5
 80083c0:	47b8      	blx	r7
 80083c2:	3001      	adds	r0, #1
 80083c4:	f43f aef7 	beq.w	80081b6 <_printf_float+0xc2>
 80083c8:	f109 0901 	add.w	r9, r9, #1
 80083cc:	e7ee      	b.n	80083ac <_printf_float+0x2b8>
 80083ce:	bf00      	nop
 80083d0:	7fefffff 	.word	0x7fefffff
 80083d4:	0800e6c8 	.word	0x0800e6c8
 80083d8:	0800e6cc 	.word	0x0800e6cc
 80083dc:	0800e6d4 	.word	0x0800e6d4
 80083e0:	0800e6d0 	.word	0x0800e6d0
 80083e4:	0800e6d8 	.word	0x0800e6d8
 80083e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083ec:	429a      	cmp	r2, r3
 80083ee:	bfa8      	it	ge
 80083f0:	461a      	movge	r2, r3
 80083f2:	2a00      	cmp	r2, #0
 80083f4:	4691      	mov	r9, r2
 80083f6:	dc37      	bgt.n	8008468 <_printf_float+0x374>
 80083f8:	f04f 0b00 	mov.w	fp, #0
 80083fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008400:	f104 021a 	add.w	r2, r4, #26
 8008404:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008406:	9305      	str	r3, [sp, #20]
 8008408:	eba3 0309 	sub.w	r3, r3, r9
 800840c:	455b      	cmp	r3, fp
 800840e:	dc33      	bgt.n	8008478 <_printf_float+0x384>
 8008410:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008414:	429a      	cmp	r2, r3
 8008416:	db3b      	blt.n	8008490 <_printf_float+0x39c>
 8008418:	6823      	ldr	r3, [r4, #0]
 800841a:	07da      	lsls	r2, r3, #31
 800841c:	d438      	bmi.n	8008490 <_printf_float+0x39c>
 800841e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008420:	9b05      	ldr	r3, [sp, #20]
 8008422:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008424:	1ad3      	subs	r3, r2, r3
 8008426:	eba2 0901 	sub.w	r9, r2, r1
 800842a:	4599      	cmp	r9, r3
 800842c:	bfa8      	it	ge
 800842e:	4699      	movge	r9, r3
 8008430:	f1b9 0f00 	cmp.w	r9, #0
 8008434:	dc35      	bgt.n	80084a2 <_printf_float+0x3ae>
 8008436:	f04f 0800 	mov.w	r8, #0
 800843a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800843e:	f104 0a1a 	add.w	sl, r4, #26
 8008442:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008446:	1a9b      	subs	r3, r3, r2
 8008448:	eba3 0309 	sub.w	r3, r3, r9
 800844c:	4543      	cmp	r3, r8
 800844e:	f77f af79 	ble.w	8008344 <_printf_float+0x250>
 8008452:	2301      	movs	r3, #1
 8008454:	4652      	mov	r2, sl
 8008456:	4631      	mov	r1, r6
 8008458:	4628      	mov	r0, r5
 800845a:	47b8      	blx	r7
 800845c:	3001      	adds	r0, #1
 800845e:	f43f aeaa 	beq.w	80081b6 <_printf_float+0xc2>
 8008462:	f108 0801 	add.w	r8, r8, #1
 8008466:	e7ec      	b.n	8008442 <_printf_float+0x34e>
 8008468:	4613      	mov	r3, r2
 800846a:	4631      	mov	r1, r6
 800846c:	4642      	mov	r2, r8
 800846e:	4628      	mov	r0, r5
 8008470:	47b8      	blx	r7
 8008472:	3001      	adds	r0, #1
 8008474:	d1c0      	bne.n	80083f8 <_printf_float+0x304>
 8008476:	e69e      	b.n	80081b6 <_printf_float+0xc2>
 8008478:	2301      	movs	r3, #1
 800847a:	4631      	mov	r1, r6
 800847c:	4628      	mov	r0, r5
 800847e:	9205      	str	r2, [sp, #20]
 8008480:	47b8      	blx	r7
 8008482:	3001      	adds	r0, #1
 8008484:	f43f ae97 	beq.w	80081b6 <_printf_float+0xc2>
 8008488:	9a05      	ldr	r2, [sp, #20]
 800848a:	f10b 0b01 	add.w	fp, fp, #1
 800848e:	e7b9      	b.n	8008404 <_printf_float+0x310>
 8008490:	ee18 3a10 	vmov	r3, s16
 8008494:	4652      	mov	r2, sl
 8008496:	4631      	mov	r1, r6
 8008498:	4628      	mov	r0, r5
 800849a:	47b8      	blx	r7
 800849c:	3001      	adds	r0, #1
 800849e:	d1be      	bne.n	800841e <_printf_float+0x32a>
 80084a0:	e689      	b.n	80081b6 <_printf_float+0xc2>
 80084a2:	9a05      	ldr	r2, [sp, #20]
 80084a4:	464b      	mov	r3, r9
 80084a6:	4442      	add	r2, r8
 80084a8:	4631      	mov	r1, r6
 80084aa:	4628      	mov	r0, r5
 80084ac:	47b8      	blx	r7
 80084ae:	3001      	adds	r0, #1
 80084b0:	d1c1      	bne.n	8008436 <_printf_float+0x342>
 80084b2:	e680      	b.n	80081b6 <_printf_float+0xc2>
 80084b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80084b6:	2a01      	cmp	r2, #1
 80084b8:	dc01      	bgt.n	80084be <_printf_float+0x3ca>
 80084ba:	07db      	lsls	r3, r3, #31
 80084bc:	d538      	bpl.n	8008530 <_printf_float+0x43c>
 80084be:	2301      	movs	r3, #1
 80084c0:	4642      	mov	r2, r8
 80084c2:	4631      	mov	r1, r6
 80084c4:	4628      	mov	r0, r5
 80084c6:	47b8      	blx	r7
 80084c8:	3001      	adds	r0, #1
 80084ca:	f43f ae74 	beq.w	80081b6 <_printf_float+0xc2>
 80084ce:	ee18 3a10 	vmov	r3, s16
 80084d2:	4652      	mov	r2, sl
 80084d4:	4631      	mov	r1, r6
 80084d6:	4628      	mov	r0, r5
 80084d8:	47b8      	blx	r7
 80084da:	3001      	adds	r0, #1
 80084dc:	f43f ae6b 	beq.w	80081b6 <_printf_float+0xc2>
 80084e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084e4:	2200      	movs	r2, #0
 80084e6:	2300      	movs	r3, #0
 80084e8:	f7f8 faee 	bl	8000ac8 <__aeabi_dcmpeq>
 80084ec:	b9d8      	cbnz	r0, 8008526 <_printf_float+0x432>
 80084ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084f0:	f108 0201 	add.w	r2, r8, #1
 80084f4:	3b01      	subs	r3, #1
 80084f6:	4631      	mov	r1, r6
 80084f8:	4628      	mov	r0, r5
 80084fa:	47b8      	blx	r7
 80084fc:	3001      	adds	r0, #1
 80084fe:	d10e      	bne.n	800851e <_printf_float+0x42a>
 8008500:	e659      	b.n	80081b6 <_printf_float+0xc2>
 8008502:	2301      	movs	r3, #1
 8008504:	4652      	mov	r2, sl
 8008506:	4631      	mov	r1, r6
 8008508:	4628      	mov	r0, r5
 800850a:	47b8      	blx	r7
 800850c:	3001      	adds	r0, #1
 800850e:	f43f ae52 	beq.w	80081b6 <_printf_float+0xc2>
 8008512:	f108 0801 	add.w	r8, r8, #1
 8008516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008518:	3b01      	subs	r3, #1
 800851a:	4543      	cmp	r3, r8
 800851c:	dcf1      	bgt.n	8008502 <_printf_float+0x40e>
 800851e:	464b      	mov	r3, r9
 8008520:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008524:	e6dc      	b.n	80082e0 <_printf_float+0x1ec>
 8008526:	f04f 0800 	mov.w	r8, #0
 800852a:	f104 0a1a 	add.w	sl, r4, #26
 800852e:	e7f2      	b.n	8008516 <_printf_float+0x422>
 8008530:	2301      	movs	r3, #1
 8008532:	4642      	mov	r2, r8
 8008534:	e7df      	b.n	80084f6 <_printf_float+0x402>
 8008536:	2301      	movs	r3, #1
 8008538:	464a      	mov	r2, r9
 800853a:	4631      	mov	r1, r6
 800853c:	4628      	mov	r0, r5
 800853e:	47b8      	blx	r7
 8008540:	3001      	adds	r0, #1
 8008542:	f43f ae38 	beq.w	80081b6 <_printf_float+0xc2>
 8008546:	f108 0801 	add.w	r8, r8, #1
 800854a:	68e3      	ldr	r3, [r4, #12]
 800854c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800854e:	1a5b      	subs	r3, r3, r1
 8008550:	4543      	cmp	r3, r8
 8008552:	dcf0      	bgt.n	8008536 <_printf_float+0x442>
 8008554:	e6fa      	b.n	800834c <_printf_float+0x258>
 8008556:	f04f 0800 	mov.w	r8, #0
 800855a:	f104 0919 	add.w	r9, r4, #25
 800855e:	e7f4      	b.n	800854a <_printf_float+0x456>

08008560 <_printf_common>:
 8008560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008564:	4616      	mov	r6, r2
 8008566:	4699      	mov	r9, r3
 8008568:	688a      	ldr	r2, [r1, #8]
 800856a:	690b      	ldr	r3, [r1, #16]
 800856c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008570:	4293      	cmp	r3, r2
 8008572:	bfb8      	it	lt
 8008574:	4613      	movlt	r3, r2
 8008576:	6033      	str	r3, [r6, #0]
 8008578:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800857c:	4607      	mov	r7, r0
 800857e:	460c      	mov	r4, r1
 8008580:	b10a      	cbz	r2, 8008586 <_printf_common+0x26>
 8008582:	3301      	adds	r3, #1
 8008584:	6033      	str	r3, [r6, #0]
 8008586:	6823      	ldr	r3, [r4, #0]
 8008588:	0699      	lsls	r1, r3, #26
 800858a:	bf42      	ittt	mi
 800858c:	6833      	ldrmi	r3, [r6, #0]
 800858e:	3302      	addmi	r3, #2
 8008590:	6033      	strmi	r3, [r6, #0]
 8008592:	6825      	ldr	r5, [r4, #0]
 8008594:	f015 0506 	ands.w	r5, r5, #6
 8008598:	d106      	bne.n	80085a8 <_printf_common+0x48>
 800859a:	f104 0a19 	add.w	sl, r4, #25
 800859e:	68e3      	ldr	r3, [r4, #12]
 80085a0:	6832      	ldr	r2, [r6, #0]
 80085a2:	1a9b      	subs	r3, r3, r2
 80085a4:	42ab      	cmp	r3, r5
 80085a6:	dc26      	bgt.n	80085f6 <_printf_common+0x96>
 80085a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085ac:	1e13      	subs	r3, r2, #0
 80085ae:	6822      	ldr	r2, [r4, #0]
 80085b0:	bf18      	it	ne
 80085b2:	2301      	movne	r3, #1
 80085b4:	0692      	lsls	r2, r2, #26
 80085b6:	d42b      	bmi.n	8008610 <_printf_common+0xb0>
 80085b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085bc:	4649      	mov	r1, r9
 80085be:	4638      	mov	r0, r7
 80085c0:	47c0      	blx	r8
 80085c2:	3001      	adds	r0, #1
 80085c4:	d01e      	beq.n	8008604 <_printf_common+0xa4>
 80085c6:	6823      	ldr	r3, [r4, #0]
 80085c8:	68e5      	ldr	r5, [r4, #12]
 80085ca:	6832      	ldr	r2, [r6, #0]
 80085cc:	f003 0306 	and.w	r3, r3, #6
 80085d0:	2b04      	cmp	r3, #4
 80085d2:	bf08      	it	eq
 80085d4:	1aad      	subeq	r5, r5, r2
 80085d6:	68a3      	ldr	r3, [r4, #8]
 80085d8:	6922      	ldr	r2, [r4, #16]
 80085da:	bf0c      	ite	eq
 80085dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085e0:	2500      	movne	r5, #0
 80085e2:	4293      	cmp	r3, r2
 80085e4:	bfc4      	itt	gt
 80085e6:	1a9b      	subgt	r3, r3, r2
 80085e8:	18ed      	addgt	r5, r5, r3
 80085ea:	2600      	movs	r6, #0
 80085ec:	341a      	adds	r4, #26
 80085ee:	42b5      	cmp	r5, r6
 80085f0:	d11a      	bne.n	8008628 <_printf_common+0xc8>
 80085f2:	2000      	movs	r0, #0
 80085f4:	e008      	b.n	8008608 <_printf_common+0xa8>
 80085f6:	2301      	movs	r3, #1
 80085f8:	4652      	mov	r2, sl
 80085fa:	4649      	mov	r1, r9
 80085fc:	4638      	mov	r0, r7
 80085fe:	47c0      	blx	r8
 8008600:	3001      	adds	r0, #1
 8008602:	d103      	bne.n	800860c <_printf_common+0xac>
 8008604:	f04f 30ff 	mov.w	r0, #4294967295
 8008608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800860c:	3501      	adds	r5, #1
 800860e:	e7c6      	b.n	800859e <_printf_common+0x3e>
 8008610:	18e1      	adds	r1, r4, r3
 8008612:	1c5a      	adds	r2, r3, #1
 8008614:	2030      	movs	r0, #48	; 0x30
 8008616:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800861a:	4422      	add	r2, r4
 800861c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008620:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008624:	3302      	adds	r3, #2
 8008626:	e7c7      	b.n	80085b8 <_printf_common+0x58>
 8008628:	2301      	movs	r3, #1
 800862a:	4622      	mov	r2, r4
 800862c:	4649      	mov	r1, r9
 800862e:	4638      	mov	r0, r7
 8008630:	47c0      	blx	r8
 8008632:	3001      	adds	r0, #1
 8008634:	d0e6      	beq.n	8008604 <_printf_common+0xa4>
 8008636:	3601      	adds	r6, #1
 8008638:	e7d9      	b.n	80085ee <_printf_common+0x8e>
	...

0800863c <_printf_i>:
 800863c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008640:	460c      	mov	r4, r1
 8008642:	4691      	mov	r9, r2
 8008644:	7e27      	ldrb	r7, [r4, #24]
 8008646:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008648:	2f78      	cmp	r7, #120	; 0x78
 800864a:	4680      	mov	r8, r0
 800864c:	469a      	mov	sl, r3
 800864e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008652:	d807      	bhi.n	8008664 <_printf_i+0x28>
 8008654:	2f62      	cmp	r7, #98	; 0x62
 8008656:	d80a      	bhi.n	800866e <_printf_i+0x32>
 8008658:	2f00      	cmp	r7, #0
 800865a:	f000 80d8 	beq.w	800880e <_printf_i+0x1d2>
 800865e:	2f58      	cmp	r7, #88	; 0x58
 8008660:	f000 80a3 	beq.w	80087aa <_printf_i+0x16e>
 8008664:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008668:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800866c:	e03a      	b.n	80086e4 <_printf_i+0xa8>
 800866e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008672:	2b15      	cmp	r3, #21
 8008674:	d8f6      	bhi.n	8008664 <_printf_i+0x28>
 8008676:	a001      	add	r0, pc, #4	; (adr r0, 800867c <_printf_i+0x40>)
 8008678:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800867c:	080086d5 	.word	0x080086d5
 8008680:	080086e9 	.word	0x080086e9
 8008684:	08008665 	.word	0x08008665
 8008688:	08008665 	.word	0x08008665
 800868c:	08008665 	.word	0x08008665
 8008690:	08008665 	.word	0x08008665
 8008694:	080086e9 	.word	0x080086e9
 8008698:	08008665 	.word	0x08008665
 800869c:	08008665 	.word	0x08008665
 80086a0:	08008665 	.word	0x08008665
 80086a4:	08008665 	.word	0x08008665
 80086a8:	080087f5 	.word	0x080087f5
 80086ac:	08008719 	.word	0x08008719
 80086b0:	080087d7 	.word	0x080087d7
 80086b4:	08008665 	.word	0x08008665
 80086b8:	08008665 	.word	0x08008665
 80086bc:	08008817 	.word	0x08008817
 80086c0:	08008665 	.word	0x08008665
 80086c4:	08008719 	.word	0x08008719
 80086c8:	08008665 	.word	0x08008665
 80086cc:	08008665 	.word	0x08008665
 80086d0:	080087df 	.word	0x080087df
 80086d4:	680b      	ldr	r3, [r1, #0]
 80086d6:	1d1a      	adds	r2, r3, #4
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	600a      	str	r2, [r1, #0]
 80086dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086e4:	2301      	movs	r3, #1
 80086e6:	e0a3      	b.n	8008830 <_printf_i+0x1f4>
 80086e8:	6825      	ldr	r5, [r4, #0]
 80086ea:	6808      	ldr	r0, [r1, #0]
 80086ec:	062e      	lsls	r6, r5, #24
 80086ee:	f100 0304 	add.w	r3, r0, #4
 80086f2:	d50a      	bpl.n	800870a <_printf_i+0xce>
 80086f4:	6805      	ldr	r5, [r0, #0]
 80086f6:	600b      	str	r3, [r1, #0]
 80086f8:	2d00      	cmp	r5, #0
 80086fa:	da03      	bge.n	8008704 <_printf_i+0xc8>
 80086fc:	232d      	movs	r3, #45	; 0x2d
 80086fe:	426d      	negs	r5, r5
 8008700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008704:	485e      	ldr	r0, [pc, #376]	; (8008880 <_printf_i+0x244>)
 8008706:	230a      	movs	r3, #10
 8008708:	e019      	b.n	800873e <_printf_i+0x102>
 800870a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800870e:	6805      	ldr	r5, [r0, #0]
 8008710:	600b      	str	r3, [r1, #0]
 8008712:	bf18      	it	ne
 8008714:	b22d      	sxthne	r5, r5
 8008716:	e7ef      	b.n	80086f8 <_printf_i+0xbc>
 8008718:	680b      	ldr	r3, [r1, #0]
 800871a:	6825      	ldr	r5, [r4, #0]
 800871c:	1d18      	adds	r0, r3, #4
 800871e:	6008      	str	r0, [r1, #0]
 8008720:	0628      	lsls	r0, r5, #24
 8008722:	d501      	bpl.n	8008728 <_printf_i+0xec>
 8008724:	681d      	ldr	r5, [r3, #0]
 8008726:	e002      	b.n	800872e <_printf_i+0xf2>
 8008728:	0669      	lsls	r1, r5, #25
 800872a:	d5fb      	bpl.n	8008724 <_printf_i+0xe8>
 800872c:	881d      	ldrh	r5, [r3, #0]
 800872e:	4854      	ldr	r0, [pc, #336]	; (8008880 <_printf_i+0x244>)
 8008730:	2f6f      	cmp	r7, #111	; 0x6f
 8008732:	bf0c      	ite	eq
 8008734:	2308      	moveq	r3, #8
 8008736:	230a      	movne	r3, #10
 8008738:	2100      	movs	r1, #0
 800873a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800873e:	6866      	ldr	r6, [r4, #4]
 8008740:	60a6      	str	r6, [r4, #8]
 8008742:	2e00      	cmp	r6, #0
 8008744:	bfa2      	ittt	ge
 8008746:	6821      	ldrge	r1, [r4, #0]
 8008748:	f021 0104 	bicge.w	r1, r1, #4
 800874c:	6021      	strge	r1, [r4, #0]
 800874e:	b90d      	cbnz	r5, 8008754 <_printf_i+0x118>
 8008750:	2e00      	cmp	r6, #0
 8008752:	d04d      	beq.n	80087f0 <_printf_i+0x1b4>
 8008754:	4616      	mov	r6, r2
 8008756:	fbb5 f1f3 	udiv	r1, r5, r3
 800875a:	fb03 5711 	mls	r7, r3, r1, r5
 800875e:	5dc7      	ldrb	r7, [r0, r7]
 8008760:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008764:	462f      	mov	r7, r5
 8008766:	42bb      	cmp	r3, r7
 8008768:	460d      	mov	r5, r1
 800876a:	d9f4      	bls.n	8008756 <_printf_i+0x11a>
 800876c:	2b08      	cmp	r3, #8
 800876e:	d10b      	bne.n	8008788 <_printf_i+0x14c>
 8008770:	6823      	ldr	r3, [r4, #0]
 8008772:	07df      	lsls	r7, r3, #31
 8008774:	d508      	bpl.n	8008788 <_printf_i+0x14c>
 8008776:	6923      	ldr	r3, [r4, #16]
 8008778:	6861      	ldr	r1, [r4, #4]
 800877a:	4299      	cmp	r1, r3
 800877c:	bfde      	ittt	le
 800877e:	2330      	movle	r3, #48	; 0x30
 8008780:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008784:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008788:	1b92      	subs	r2, r2, r6
 800878a:	6122      	str	r2, [r4, #16]
 800878c:	f8cd a000 	str.w	sl, [sp]
 8008790:	464b      	mov	r3, r9
 8008792:	aa03      	add	r2, sp, #12
 8008794:	4621      	mov	r1, r4
 8008796:	4640      	mov	r0, r8
 8008798:	f7ff fee2 	bl	8008560 <_printf_common>
 800879c:	3001      	adds	r0, #1
 800879e:	d14c      	bne.n	800883a <_printf_i+0x1fe>
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295
 80087a4:	b004      	add	sp, #16
 80087a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087aa:	4835      	ldr	r0, [pc, #212]	; (8008880 <_printf_i+0x244>)
 80087ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	680e      	ldr	r6, [r1, #0]
 80087b4:	061f      	lsls	r7, r3, #24
 80087b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80087ba:	600e      	str	r6, [r1, #0]
 80087bc:	d514      	bpl.n	80087e8 <_printf_i+0x1ac>
 80087be:	07d9      	lsls	r1, r3, #31
 80087c0:	bf44      	itt	mi
 80087c2:	f043 0320 	orrmi.w	r3, r3, #32
 80087c6:	6023      	strmi	r3, [r4, #0]
 80087c8:	b91d      	cbnz	r5, 80087d2 <_printf_i+0x196>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	f023 0320 	bic.w	r3, r3, #32
 80087d0:	6023      	str	r3, [r4, #0]
 80087d2:	2310      	movs	r3, #16
 80087d4:	e7b0      	b.n	8008738 <_printf_i+0xfc>
 80087d6:	6823      	ldr	r3, [r4, #0]
 80087d8:	f043 0320 	orr.w	r3, r3, #32
 80087dc:	6023      	str	r3, [r4, #0]
 80087de:	2378      	movs	r3, #120	; 0x78
 80087e0:	4828      	ldr	r0, [pc, #160]	; (8008884 <_printf_i+0x248>)
 80087e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80087e6:	e7e3      	b.n	80087b0 <_printf_i+0x174>
 80087e8:	065e      	lsls	r6, r3, #25
 80087ea:	bf48      	it	mi
 80087ec:	b2ad      	uxthmi	r5, r5
 80087ee:	e7e6      	b.n	80087be <_printf_i+0x182>
 80087f0:	4616      	mov	r6, r2
 80087f2:	e7bb      	b.n	800876c <_printf_i+0x130>
 80087f4:	680b      	ldr	r3, [r1, #0]
 80087f6:	6826      	ldr	r6, [r4, #0]
 80087f8:	6960      	ldr	r0, [r4, #20]
 80087fa:	1d1d      	adds	r5, r3, #4
 80087fc:	600d      	str	r5, [r1, #0]
 80087fe:	0635      	lsls	r5, r6, #24
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	d501      	bpl.n	8008808 <_printf_i+0x1cc>
 8008804:	6018      	str	r0, [r3, #0]
 8008806:	e002      	b.n	800880e <_printf_i+0x1d2>
 8008808:	0671      	lsls	r1, r6, #25
 800880a:	d5fb      	bpl.n	8008804 <_printf_i+0x1c8>
 800880c:	8018      	strh	r0, [r3, #0]
 800880e:	2300      	movs	r3, #0
 8008810:	6123      	str	r3, [r4, #16]
 8008812:	4616      	mov	r6, r2
 8008814:	e7ba      	b.n	800878c <_printf_i+0x150>
 8008816:	680b      	ldr	r3, [r1, #0]
 8008818:	1d1a      	adds	r2, r3, #4
 800881a:	600a      	str	r2, [r1, #0]
 800881c:	681e      	ldr	r6, [r3, #0]
 800881e:	6862      	ldr	r2, [r4, #4]
 8008820:	2100      	movs	r1, #0
 8008822:	4630      	mov	r0, r6
 8008824:	f7f7 fcdc 	bl	80001e0 <memchr>
 8008828:	b108      	cbz	r0, 800882e <_printf_i+0x1f2>
 800882a:	1b80      	subs	r0, r0, r6
 800882c:	6060      	str	r0, [r4, #4]
 800882e:	6863      	ldr	r3, [r4, #4]
 8008830:	6123      	str	r3, [r4, #16]
 8008832:	2300      	movs	r3, #0
 8008834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008838:	e7a8      	b.n	800878c <_printf_i+0x150>
 800883a:	6923      	ldr	r3, [r4, #16]
 800883c:	4632      	mov	r2, r6
 800883e:	4649      	mov	r1, r9
 8008840:	4640      	mov	r0, r8
 8008842:	47d0      	blx	sl
 8008844:	3001      	adds	r0, #1
 8008846:	d0ab      	beq.n	80087a0 <_printf_i+0x164>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	079b      	lsls	r3, r3, #30
 800884c:	d413      	bmi.n	8008876 <_printf_i+0x23a>
 800884e:	68e0      	ldr	r0, [r4, #12]
 8008850:	9b03      	ldr	r3, [sp, #12]
 8008852:	4298      	cmp	r0, r3
 8008854:	bfb8      	it	lt
 8008856:	4618      	movlt	r0, r3
 8008858:	e7a4      	b.n	80087a4 <_printf_i+0x168>
 800885a:	2301      	movs	r3, #1
 800885c:	4632      	mov	r2, r6
 800885e:	4649      	mov	r1, r9
 8008860:	4640      	mov	r0, r8
 8008862:	47d0      	blx	sl
 8008864:	3001      	adds	r0, #1
 8008866:	d09b      	beq.n	80087a0 <_printf_i+0x164>
 8008868:	3501      	adds	r5, #1
 800886a:	68e3      	ldr	r3, [r4, #12]
 800886c:	9903      	ldr	r1, [sp, #12]
 800886e:	1a5b      	subs	r3, r3, r1
 8008870:	42ab      	cmp	r3, r5
 8008872:	dcf2      	bgt.n	800885a <_printf_i+0x21e>
 8008874:	e7eb      	b.n	800884e <_printf_i+0x212>
 8008876:	2500      	movs	r5, #0
 8008878:	f104 0619 	add.w	r6, r4, #25
 800887c:	e7f5      	b.n	800886a <_printf_i+0x22e>
 800887e:	bf00      	nop
 8008880:	0800e6da 	.word	0x0800e6da
 8008884:	0800e6eb 	.word	0x0800e6eb

08008888 <_scanf_float>:
 8008888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800888c:	b087      	sub	sp, #28
 800888e:	4617      	mov	r7, r2
 8008890:	9303      	str	r3, [sp, #12]
 8008892:	688b      	ldr	r3, [r1, #8]
 8008894:	1e5a      	subs	r2, r3, #1
 8008896:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800889a:	bf83      	ittte	hi
 800889c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80088a0:	195b      	addhi	r3, r3, r5
 80088a2:	9302      	strhi	r3, [sp, #8]
 80088a4:	2300      	movls	r3, #0
 80088a6:	bf86      	itte	hi
 80088a8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80088ac:	608b      	strhi	r3, [r1, #8]
 80088ae:	9302      	strls	r3, [sp, #8]
 80088b0:	680b      	ldr	r3, [r1, #0]
 80088b2:	468b      	mov	fp, r1
 80088b4:	2500      	movs	r5, #0
 80088b6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80088ba:	f84b 3b1c 	str.w	r3, [fp], #28
 80088be:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80088c2:	4680      	mov	r8, r0
 80088c4:	460c      	mov	r4, r1
 80088c6:	465e      	mov	r6, fp
 80088c8:	46aa      	mov	sl, r5
 80088ca:	46a9      	mov	r9, r5
 80088cc:	9501      	str	r5, [sp, #4]
 80088ce:	68a2      	ldr	r2, [r4, #8]
 80088d0:	b152      	cbz	r2, 80088e8 <_scanf_float+0x60>
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	2b4e      	cmp	r3, #78	; 0x4e
 80088d8:	d864      	bhi.n	80089a4 <_scanf_float+0x11c>
 80088da:	2b40      	cmp	r3, #64	; 0x40
 80088dc:	d83c      	bhi.n	8008958 <_scanf_float+0xd0>
 80088de:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80088e2:	b2c8      	uxtb	r0, r1
 80088e4:	280e      	cmp	r0, #14
 80088e6:	d93a      	bls.n	800895e <_scanf_float+0xd6>
 80088e8:	f1b9 0f00 	cmp.w	r9, #0
 80088ec:	d003      	beq.n	80088f6 <_scanf_float+0x6e>
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088f4:	6023      	str	r3, [r4, #0]
 80088f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80088fa:	f1ba 0f01 	cmp.w	sl, #1
 80088fe:	f200 8113 	bhi.w	8008b28 <_scanf_float+0x2a0>
 8008902:	455e      	cmp	r6, fp
 8008904:	f200 8105 	bhi.w	8008b12 <_scanf_float+0x28a>
 8008908:	2501      	movs	r5, #1
 800890a:	4628      	mov	r0, r5
 800890c:	b007      	add	sp, #28
 800890e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008912:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008916:	2a0d      	cmp	r2, #13
 8008918:	d8e6      	bhi.n	80088e8 <_scanf_float+0x60>
 800891a:	a101      	add	r1, pc, #4	; (adr r1, 8008920 <_scanf_float+0x98>)
 800891c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008920:	08008a5f 	.word	0x08008a5f
 8008924:	080088e9 	.word	0x080088e9
 8008928:	080088e9 	.word	0x080088e9
 800892c:	080088e9 	.word	0x080088e9
 8008930:	08008abf 	.word	0x08008abf
 8008934:	08008a97 	.word	0x08008a97
 8008938:	080088e9 	.word	0x080088e9
 800893c:	080088e9 	.word	0x080088e9
 8008940:	08008a6d 	.word	0x08008a6d
 8008944:	080088e9 	.word	0x080088e9
 8008948:	080088e9 	.word	0x080088e9
 800894c:	080088e9 	.word	0x080088e9
 8008950:	080088e9 	.word	0x080088e9
 8008954:	08008a25 	.word	0x08008a25
 8008958:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800895c:	e7db      	b.n	8008916 <_scanf_float+0x8e>
 800895e:	290e      	cmp	r1, #14
 8008960:	d8c2      	bhi.n	80088e8 <_scanf_float+0x60>
 8008962:	a001      	add	r0, pc, #4	; (adr r0, 8008968 <_scanf_float+0xe0>)
 8008964:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008968:	08008a17 	.word	0x08008a17
 800896c:	080088e9 	.word	0x080088e9
 8008970:	08008a17 	.word	0x08008a17
 8008974:	08008aab 	.word	0x08008aab
 8008978:	080088e9 	.word	0x080088e9
 800897c:	080089c5 	.word	0x080089c5
 8008980:	08008a01 	.word	0x08008a01
 8008984:	08008a01 	.word	0x08008a01
 8008988:	08008a01 	.word	0x08008a01
 800898c:	08008a01 	.word	0x08008a01
 8008990:	08008a01 	.word	0x08008a01
 8008994:	08008a01 	.word	0x08008a01
 8008998:	08008a01 	.word	0x08008a01
 800899c:	08008a01 	.word	0x08008a01
 80089a0:	08008a01 	.word	0x08008a01
 80089a4:	2b6e      	cmp	r3, #110	; 0x6e
 80089a6:	d809      	bhi.n	80089bc <_scanf_float+0x134>
 80089a8:	2b60      	cmp	r3, #96	; 0x60
 80089aa:	d8b2      	bhi.n	8008912 <_scanf_float+0x8a>
 80089ac:	2b54      	cmp	r3, #84	; 0x54
 80089ae:	d077      	beq.n	8008aa0 <_scanf_float+0x218>
 80089b0:	2b59      	cmp	r3, #89	; 0x59
 80089b2:	d199      	bne.n	80088e8 <_scanf_float+0x60>
 80089b4:	2d07      	cmp	r5, #7
 80089b6:	d197      	bne.n	80088e8 <_scanf_float+0x60>
 80089b8:	2508      	movs	r5, #8
 80089ba:	e029      	b.n	8008a10 <_scanf_float+0x188>
 80089bc:	2b74      	cmp	r3, #116	; 0x74
 80089be:	d06f      	beq.n	8008aa0 <_scanf_float+0x218>
 80089c0:	2b79      	cmp	r3, #121	; 0x79
 80089c2:	e7f6      	b.n	80089b2 <_scanf_float+0x12a>
 80089c4:	6821      	ldr	r1, [r4, #0]
 80089c6:	05c8      	lsls	r0, r1, #23
 80089c8:	d51a      	bpl.n	8008a00 <_scanf_float+0x178>
 80089ca:	9b02      	ldr	r3, [sp, #8]
 80089cc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80089d0:	6021      	str	r1, [r4, #0]
 80089d2:	f109 0901 	add.w	r9, r9, #1
 80089d6:	b11b      	cbz	r3, 80089e0 <_scanf_float+0x158>
 80089d8:	3b01      	subs	r3, #1
 80089da:	3201      	adds	r2, #1
 80089dc:	9302      	str	r3, [sp, #8]
 80089de:	60a2      	str	r2, [r4, #8]
 80089e0:	68a3      	ldr	r3, [r4, #8]
 80089e2:	3b01      	subs	r3, #1
 80089e4:	60a3      	str	r3, [r4, #8]
 80089e6:	6923      	ldr	r3, [r4, #16]
 80089e8:	3301      	adds	r3, #1
 80089ea:	6123      	str	r3, [r4, #16]
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	3b01      	subs	r3, #1
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	607b      	str	r3, [r7, #4]
 80089f4:	f340 8084 	ble.w	8008b00 <_scanf_float+0x278>
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	3301      	adds	r3, #1
 80089fc:	603b      	str	r3, [r7, #0]
 80089fe:	e766      	b.n	80088ce <_scanf_float+0x46>
 8008a00:	eb1a 0f05 	cmn.w	sl, r5
 8008a04:	f47f af70 	bne.w	80088e8 <_scanf_float+0x60>
 8008a08:	6822      	ldr	r2, [r4, #0]
 8008a0a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008a0e:	6022      	str	r2, [r4, #0]
 8008a10:	f806 3b01 	strb.w	r3, [r6], #1
 8008a14:	e7e4      	b.n	80089e0 <_scanf_float+0x158>
 8008a16:	6822      	ldr	r2, [r4, #0]
 8008a18:	0610      	lsls	r0, r2, #24
 8008a1a:	f57f af65 	bpl.w	80088e8 <_scanf_float+0x60>
 8008a1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a22:	e7f4      	b.n	8008a0e <_scanf_float+0x186>
 8008a24:	f1ba 0f00 	cmp.w	sl, #0
 8008a28:	d10e      	bne.n	8008a48 <_scanf_float+0x1c0>
 8008a2a:	f1b9 0f00 	cmp.w	r9, #0
 8008a2e:	d10e      	bne.n	8008a4e <_scanf_float+0x1c6>
 8008a30:	6822      	ldr	r2, [r4, #0]
 8008a32:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a36:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a3a:	d108      	bne.n	8008a4e <_scanf_float+0x1c6>
 8008a3c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a40:	6022      	str	r2, [r4, #0]
 8008a42:	f04f 0a01 	mov.w	sl, #1
 8008a46:	e7e3      	b.n	8008a10 <_scanf_float+0x188>
 8008a48:	f1ba 0f02 	cmp.w	sl, #2
 8008a4c:	d055      	beq.n	8008afa <_scanf_float+0x272>
 8008a4e:	2d01      	cmp	r5, #1
 8008a50:	d002      	beq.n	8008a58 <_scanf_float+0x1d0>
 8008a52:	2d04      	cmp	r5, #4
 8008a54:	f47f af48 	bne.w	80088e8 <_scanf_float+0x60>
 8008a58:	3501      	adds	r5, #1
 8008a5a:	b2ed      	uxtb	r5, r5
 8008a5c:	e7d8      	b.n	8008a10 <_scanf_float+0x188>
 8008a5e:	f1ba 0f01 	cmp.w	sl, #1
 8008a62:	f47f af41 	bne.w	80088e8 <_scanf_float+0x60>
 8008a66:	f04f 0a02 	mov.w	sl, #2
 8008a6a:	e7d1      	b.n	8008a10 <_scanf_float+0x188>
 8008a6c:	b97d      	cbnz	r5, 8008a8e <_scanf_float+0x206>
 8008a6e:	f1b9 0f00 	cmp.w	r9, #0
 8008a72:	f47f af3c 	bne.w	80088ee <_scanf_float+0x66>
 8008a76:	6822      	ldr	r2, [r4, #0]
 8008a78:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008a7c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008a80:	f47f af39 	bne.w	80088f6 <_scanf_float+0x6e>
 8008a84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008a88:	6022      	str	r2, [r4, #0]
 8008a8a:	2501      	movs	r5, #1
 8008a8c:	e7c0      	b.n	8008a10 <_scanf_float+0x188>
 8008a8e:	2d03      	cmp	r5, #3
 8008a90:	d0e2      	beq.n	8008a58 <_scanf_float+0x1d0>
 8008a92:	2d05      	cmp	r5, #5
 8008a94:	e7de      	b.n	8008a54 <_scanf_float+0x1cc>
 8008a96:	2d02      	cmp	r5, #2
 8008a98:	f47f af26 	bne.w	80088e8 <_scanf_float+0x60>
 8008a9c:	2503      	movs	r5, #3
 8008a9e:	e7b7      	b.n	8008a10 <_scanf_float+0x188>
 8008aa0:	2d06      	cmp	r5, #6
 8008aa2:	f47f af21 	bne.w	80088e8 <_scanf_float+0x60>
 8008aa6:	2507      	movs	r5, #7
 8008aa8:	e7b2      	b.n	8008a10 <_scanf_float+0x188>
 8008aaa:	6822      	ldr	r2, [r4, #0]
 8008aac:	0591      	lsls	r1, r2, #22
 8008aae:	f57f af1b 	bpl.w	80088e8 <_scanf_float+0x60>
 8008ab2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008ab6:	6022      	str	r2, [r4, #0]
 8008ab8:	f8cd 9004 	str.w	r9, [sp, #4]
 8008abc:	e7a8      	b.n	8008a10 <_scanf_float+0x188>
 8008abe:	6822      	ldr	r2, [r4, #0]
 8008ac0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008ac4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008ac8:	d006      	beq.n	8008ad8 <_scanf_float+0x250>
 8008aca:	0550      	lsls	r0, r2, #21
 8008acc:	f57f af0c 	bpl.w	80088e8 <_scanf_float+0x60>
 8008ad0:	f1b9 0f00 	cmp.w	r9, #0
 8008ad4:	f43f af0f 	beq.w	80088f6 <_scanf_float+0x6e>
 8008ad8:	0591      	lsls	r1, r2, #22
 8008ada:	bf58      	it	pl
 8008adc:	9901      	ldrpl	r1, [sp, #4]
 8008ade:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008ae2:	bf58      	it	pl
 8008ae4:	eba9 0101 	subpl.w	r1, r9, r1
 8008ae8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008aec:	bf58      	it	pl
 8008aee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008af2:	6022      	str	r2, [r4, #0]
 8008af4:	f04f 0900 	mov.w	r9, #0
 8008af8:	e78a      	b.n	8008a10 <_scanf_float+0x188>
 8008afa:	f04f 0a03 	mov.w	sl, #3
 8008afe:	e787      	b.n	8008a10 <_scanf_float+0x188>
 8008b00:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b04:	4639      	mov	r1, r7
 8008b06:	4640      	mov	r0, r8
 8008b08:	4798      	blx	r3
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	f43f aedf 	beq.w	80088ce <_scanf_float+0x46>
 8008b10:	e6ea      	b.n	80088e8 <_scanf_float+0x60>
 8008b12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b1a:	463a      	mov	r2, r7
 8008b1c:	4640      	mov	r0, r8
 8008b1e:	4798      	blx	r3
 8008b20:	6923      	ldr	r3, [r4, #16]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	6123      	str	r3, [r4, #16]
 8008b26:	e6ec      	b.n	8008902 <_scanf_float+0x7a>
 8008b28:	1e6b      	subs	r3, r5, #1
 8008b2a:	2b06      	cmp	r3, #6
 8008b2c:	d825      	bhi.n	8008b7a <_scanf_float+0x2f2>
 8008b2e:	2d02      	cmp	r5, #2
 8008b30:	d836      	bhi.n	8008ba0 <_scanf_float+0x318>
 8008b32:	455e      	cmp	r6, fp
 8008b34:	f67f aee8 	bls.w	8008908 <_scanf_float+0x80>
 8008b38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b3c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b40:	463a      	mov	r2, r7
 8008b42:	4640      	mov	r0, r8
 8008b44:	4798      	blx	r3
 8008b46:	6923      	ldr	r3, [r4, #16]
 8008b48:	3b01      	subs	r3, #1
 8008b4a:	6123      	str	r3, [r4, #16]
 8008b4c:	e7f1      	b.n	8008b32 <_scanf_float+0x2aa>
 8008b4e:	9802      	ldr	r0, [sp, #8]
 8008b50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b54:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008b58:	9002      	str	r0, [sp, #8]
 8008b5a:	463a      	mov	r2, r7
 8008b5c:	4640      	mov	r0, r8
 8008b5e:	4798      	blx	r3
 8008b60:	6923      	ldr	r3, [r4, #16]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	6123      	str	r3, [r4, #16]
 8008b66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b6a:	fa5f fa8a 	uxtb.w	sl, sl
 8008b6e:	f1ba 0f02 	cmp.w	sl, #2
 8008b72:	d1ec      	bne.n	8008b4e <_scanf_float+0x2c6>
 8008b74:	3d03      	subs	r5, #3
 8008b76:	b2ed      	uxtb	r5, r5
 8008b78:	1b76      	subs	r6, r6, r5
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	05da      	lsls	r2, r3, #23
 8008b7e:	d52f      	bpl.n	8008be0 <_scanf_float+0x358>
 8008b80:	055b      	lsls	r3, r3, #21
 8008b82:	d510      	bpl.n	8008ba6 <_scanf_float+0x31e>
 8008b84:	455e      	cmp	r6, fp
 8008b86:	f67f aebf 	bls.w	8008908 <_scanf_float+0x80>
 8008b8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008b92:	463a      	mov	r2, r7
 8008b94:	4640      	mov	r0, r8
 8008b96:	4798      	blx	r3
 8008b98:	6923      	ldr	r3, [r4, #16]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	6123      	str	r3, [r4, #16]
 8008b9e:	e7f1      	b.n	8008b84 <_scanf_float+0x2fc>
 8008ba0:	46aa      	mov	sl, r5
 8008ba2:	9602      	str	r6, [sp, #8]
 8008ba4:	e7df      	b.n	8008b66 <_scanf_float+0x2de>
 8008ba6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008baa:	6923      	ldr	r3, [r4, #16]
 8008bac:	2965      	cmp	r1, #101	; 0x65
 8008bae:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bb2:	f106 35ff 	add.w	r5, r6, #4294967295
 8008bb6:	6123      	str	r3, [r4, #16]
 8008bb8:	d00c      	beq.n	8008bd4 <_scanf_float+0x34c>
 8008bba:	2945      	cmp	r1, #69	; 0x45
 8008bbc:	d00a      	beq.n	8008bd4 <_scanf_float+0x34c>
 8008bbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bc2:	463a      	mov	r2, r7
 8008bc4:	4640      	mov	r0, r8
 8008bc6:	4798      	blx	r3
 8008bc8:	6923      	ldr	r3, [r4, #16]
 8008bca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	1eb5      	subs	r5, r6, #2
 8008bd2:	6123      	str	r3, [r4, #16]
 8008bd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bd8:	463a      	mov	r2, r7
 8008bda:	4640      	mov	r0, r8
 8008bdc:	4798      	blx	r3
 8008bde:	462e      	mov	r6, r5
 8008be0:	6825      	ldr	r5, [r4, #0]
 8008be2:	f015 0510 	ands.w	r5, r5, #16
 8008be6:	d158      	bne.n	8008c9a <_scanf_float+0x412>
 8008be8:	7035      	strb	r5, [r6, #0]
 8008bea:	6823      	ldr	r3, [r4, #0]
 8008bec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008bf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bf4:	d11c      	bne.n	8008c30 <_scanf_float+0x3a8>
 8008bf6:	9b01      	ldr	r3, [sp, #4]
 8008bf8:	454b      	cmp	r3, r9
 8008bfa:	eba3 0209 	sub.w	r2, r3, r9
 8008bfe:	d124      	bne.n	8008c4a <_scanf_float+0x3c2>
 8008c00:	2200      	movs	r2, #0
 8008c02:	4659      	mov	r1, fp
 8008c04:	4640      	mov	r0, r8
 8008c06:	f000 fe9d 	bl	8009944 <_strtod_r>
 8008c0a:	9b03      	ldr	r3, [sp, #12]
 8008c0c:	6821      	ldr	r1, [r4, #0]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f011 0f02 	tst.w	r1, #2
 8008c14:	ec57 6b10 	vmov	r6, r7, d0
 8008c18:	f103 0204 	add.w	r2, r3, #4
 8008c1c:	d020      	beq.n	8008c60 <_scanf_float+0x3d8>
 8008c1e:	9903      	ldr	r1, [sp, #12]
 8008c20:	600a      	str	r2, [r1, #0]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	e9c3 6700 	strd	r6, r7, [r3]
 8008c28:	68e3      	ldr	r3, [r4, #12]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	60e3      	str	r3, [r4, #12]
 8008c2e:	e66c      	b.n	800890a <_scanf_float+0x82>
 8008c30:	9b04      	ldr	r3, [sp, #16]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d0e4      	beq.n	8008c00 <_scanf_float+0x378>
 8008c36:	9905      	ldr	r1, [sp, #20]
 8008c38:	230a      	movs	r3, #10
 8008c3a:	462a      	mov	r2, r5
 8008c3c:	3101      	adds	r1, #1
 8008c3e:	4640      	mov	r0, r8
 8008c40:	f000 ff0a 	bl	8009a58 <_strtol_r>
 8008c44:	9b04      	ldr	r3, [sp, #16]
 8008c46:	9e05      	ldr	r6, [sp, #20]
 8008c48:	1ac2      	subs	r2, r0, r3
 8008c4a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008c4e:	429e      	cmp	r6, r3
 8008c50:	bf28      	it	cs
 8008c52:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008c56:	4912      	ldr	r1, [pc, #72]	; (8008ca0 <_scanf_float+0x418>)
 8008c58:	4630      	mov	r0, r6
 8008c5a:	f000 f82b 	bl	8008cb4 <siprintf>
 8008c5e:	e7cf      	b.n	8008c00 <_scanf_float+0x378>
 8008c60:	f011 0f04 	tst.w	r1, #4
 8008c64:	9903      	ldr	r1, [sp, #12]
 8008c66:	600a      	str	r2, [r1, #0]
 8008c68:	d1db      	bne.n	8008c22 <_scanf_float+0x39a>
 8008c6a:	f8d3 8000 	ldr.w	r8, [r3]
 8008c6e:	ee10 2a10 	vmov	r2, s0
 8008c72:	ee10 0a10 	vmov	r0, s0
 8008c76:	463b      	mov	r3, r7
 8008c78:	4639      	mov	r1, r7
 8008c7a:	f7f7 ff57 	bl	8000b2c <__aeabi_dcmpun>
 8008c7e:	b128      	cbz	r0, 8008c8c <_scanf_float+0x404>
 8008c80:	4808      	ldr	r0, [pc, #32]	; (8008ca4 <_scanf_float+0x41c>)
 8008c82:	f000 f811 	bl	8008ca8 <nanf>
 8008c86:	ed88 0a00 	vstr	s0, [r8]
 8008c8a:	e7cd      	b.n	8008c28 <_scanf_float+0x3a0>
 8008c8c:	4630      	mov	r0, r6
 8008c8e:	4639      	mov	r1, r7
 8008c90:	f7f7 ffaa 	bl	8000be8 <__aeabi_d2f>
 8008c94:	f8c8 0000 	str.w	r0, [r8]
 8008c98:	e7c6      	b.n	8008c28 <_scanf_float+0x3a0>
 8008c9a:	2500      	movs	r5, #0
 8008c9c:	e635      	b.n	800890a <_scanf_float+0x82>
 8008c9e:	bf00      	nop
 8008ca0:	0800e6fc 	.word	0x0800e6fc
 8008ca4:	0800eb18 	.word	0x0800eb18

08008ca8 <nanf>:
 8008ca8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008cb0 <nanf+0x8>
 8008cac:	4770      	bx	lr
 8008cae:	bf00      	nop
 8008cb0:	7fc00000 	.word	0x7fc00000

08008cb4 <siprintf>:
 8008cb4:	b40e      	push	{r1, r2, r3}
 8008cb6:	b500      	push	{lr}
 8008cb8:	b09c      	sub	sp, #112	; 0x70
 8008cba:	ab1d      	add	r3, sp, #116	; 0x74
 8008cbc:	9002      	str	r0, [sp, #8]
 8008cbe:	9006      	str	r0, [sp, #24]
 8008cc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008cc4:	4809      	ldr	r0, [pc, #36]	; (8008cec <siprintf+0x38>)
 8008cc6:	9107      	str	r1, [sp, #28]
 8008cc8:	9104      	str	r1, [sp, #16]
 8008cca:	4909      	ldr	r1, [pc, #36]	; (8008cf0 <siprintf+0x3c>)
 8008ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd0:	9105      	str	r1, [sp, #20]
 8008cd2:	6800      	ldr	r0, [r0, #0]
 8008cd4:	9301      	str	r3, [sp, #4]
 8008cd6:	a902      	add	r1, sp, #8
 8008cd8:	f002 fea6 	bl	800ba28 <_svfiprintf_r>
 8008cdc:	9b02      	ldr	r3, [sp, #8]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	701a      	strb	r2, [r3, #0]
 8008ce2:	b01c      	add	sp, #112	; 0x70
 8008ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ce8:	b003      	add	sp, #12
 8008cea:	4770      	bx	lr
 8008cec:	20000014 	.word	0x20000014
 8008cf0:	ffff0208 	.word	0xffff0208

08008cf4 <sulp>:
 8008cf4:	b570      	push	{r4, r5, r6, lr}
 8008cf6:	4604      	mov	r4, r0
 8008cf8:	460d      	mov	r5, r1
 8008cfa:	ec45 4b10 	vmov	d0, r4, r5
 8008cfe:	4616      	mov	r6, r2
 8008d00:	f002 fc2e 	bl	800b560 <__ulp>
 8008d04:	ec51 0b10 	vmov	r0, r1, d0
 8008d08:	b17e      	cbz	r6, 8008d2a <sulp+0x36>
 8008d0a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008d0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	dd09      	ble.n	8008d2a <sulp+0x36>
 8008d16:	051b      	lsls	r3, r3, #20
 8008d18:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008d1c:	2400      	movs	r4, #0
 8008d1e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008d22:	4622      	mov	r2, r4
 8008d24:	462b      	mov	r3, r5
 8008d26:	f7f7 fc67 	bl	80005f8 <__aeabi_dmul>
 8008d2a:	bd70      	pop	{r4, r5, r6, pc}
 8008d2c:	0000      	movs	r0, r0
	...

08008d30 <_strtod_l>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	b0a3      	sub	sp, #140	; 0x8c
 8008d36:	461f      	mov	r7, r3
 8008d38:	2300      	movs	r3, #0
 8008d3a:	931e      	str	r3, [sp, #120]	; 0x78
 8008d3c:	4ba4      	ldr	r3, [pc, #656]	; (8008fd0 <_strtod_l+0x2a0>)
 8008d3e:	9219      	str	r2, [sp, #100]	; 0x64
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	9307      	str	r3, [sp, #28]
 8008d44:	4604      	mov	r4, r0
 8008d46:	4618      	mov	r0, r3
 8008d48:	4688      	mov	r8, r1
 8008d4a:	f7f7 fa41 	bl	80001d0 <strlen>
 8008d4e:	f04f 0a00 	mov.w	sl, #0
 8008d52:	4605      	mov	r5, r0
 8008d54:	f04f 0b00 	mov.w	fp, #0
 8008d58:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008d5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008d5e:	781a      	ldrb	r2, [r3, #0]
 8008d60:	2a2b      	cmp	r2, #43	; 0x2b
 8008d62:	d04c      	beq.n	8008dfe <_strtod_l+0xce>
 8008d64:	d839      	bhi.n	8008dda <_strtod_l+0xaa>
 8008d66:	2a0d      	cmp	r2, #13
 8008d68:	d832      	bhi.n	8008dd0 <_strtod_l+0xa0>
 8008d6a:	2a08      	cmp	r2, #8
 8008d6c:	d832      	bhi.n	8008dd4 <_strtod_l+0xa4>
 8008d6e:	2a00      	cmp	r2, #0
 8008d70:	d03c      	beq.n	8008dec <_strtod_l+0xbc>
 8008d72:	2300      	movs	r3, #0
 8008d74:	930e      	str	r3, [sp, #56]	; 0x38
 8008d76:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008d78:	7833      	ldrb	r3, [r6, #0]
 8008d7a:	2b30      	cmp	r3, #48	; 0x30
 8008d7c:	f040 80b4 	bne.w	8008ee8 <_strtod_l+0x1b8>
 8008d80:	7873      	ldrb	r3, [r6, #1]
 8008d82:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d86:	2b58      	cmp	r3, #88	; 0x58
 8008d88:	d16c      	bne.n	8008e64 <_strtod_l+0x134>
 8008d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d8c:	9301      	str	r3, [sp, #4]
 8008d8e:	ab1e      	add	r3, sp, #120	; 0x78
 8008d90:	9702      	str	r7, [sp, #8]
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	4a8f      	ldr	r2, [pc, #572]	; (8008fd4 <_strtod_l+0x2a4>)
 8008d96:	ab1f      	add	r3, sp, #124	; 0x7c
 8008d98:	a91d      	add	r1, sp, #116	; 0x74
 8008d9a:	4620      	mov	r0, r4
 8008d9c:	f001 fd40 	bl	800a820 <__gethex>
 8008da0:	f010 0707 	ands.w	r7, r0, #7
 8008da4:	4605      	mov	r5, r0
 8008da6:	d005      	beq.n	8008db4 <_strtod_l+0x84>
 8008da8:	2f06      	cmp	r7, #6
 8008daa:	d12a      	bne.n	8008e02 <_strtod_l+0xd2>
 8008dac:	3601      	adds	r6, #1
 8008dae:	2300      	movs	r3, #0
 8008db0:	961d      	str	r6, [sp, #116]	; 0x74
 8008db2:	930e      	str	r3, [sp, #56]	; 0x38
 8008db4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	f040 8596 	bne.w	80098e8 <_strtod_l+0xbb8>
 8008dbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008dbe:	b1db      	cbz	r3, 8008df8 <_strtod_l+0xc8>
 8008dc0:	4652      	mov	r2, sl
 8008dc2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008dc6:	ec43 2b10 	vmov	d0, r2, r3
 8008dca:	b023      	add	sp, #140	; 0x8c
 8008dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd0:	2a20      	cmp	r2, #32
 8008dd2:	d1ce      	bne.n	8008d72 <_strtod_l+0x42>
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	931d      	str	r3, [sp, #116]	; 0x74
 8008dd8:	e7c0      	b.n	8008d5c <_strtod_l+0x2c>
 8008dda:	2a2d      	cmp	r2, #45	; 0x2d
 8008ddc:	d1c9      	bne.n	8008d72 <_strtod_l+0x42>
 8008dde:	2201      	movs	r2, #1
 8008de0:	920e      	str	r2, [sp, #56]	; 0x38
 8008de2:	1c5a      	adds	r2, r3, #1
 8008de4:	921d      	str	r2, [sp, #116]	; 0x74
 8008de6:	785b      	ldrb	r3, [r3, #1]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1c4      	bne.n	8008d76 <_strtod_l+0x46>
 8008dec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008dee:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f040 8576 	bne.w	80098e4 <_strtod_l+0xbb4>
 8008df8:	4652      	mov	r2, sl
 8008dfa:	465b      	mov	r3, fp
 8008dfc:	e7e3      	b.n	8008dc6 <_strtod_l+0x96>
 8008dfe:	2200      	movs	r2, #0
 8008e00:	e7ee      	b.n	8008de0 <_strtod_l+0xb0>
 8008e02:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008e04:	b13a      	cbz	r2, 8008e16 <_strtod_l+0xe6>
 8008e06:	2135      	movs	r1, #53	; 0x35
 8008e08:	a820      	add	r0, sp, #128	; 0x80
 8008e0a:	f002 fcb4 	bl	800b776 <__copybits>
 8008e0e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008e10:	4620      	mov	r0, r4
 8008e12:	f002 f879 	bl	800af08 <_Bfree>
 8008e16:	3f01      	subs	r7, #1
 8008e18:	2f05      	cmp	r7, #5
 8008e1a:	d807      	bhi.n	8008e2c <_strtod_l+0xfc>
 8008e1c:	e8df f007 	tbb	[pc, r7]
 8008e20:	1d180b0e 	.word	0x1d180b0e
 8008e24:	030e      	.short	0x030e
 8008e26:	f04f 0b00 	mov.w	fp, #0
 8008e2a:	46da      	mov	sl, fp
 8008e2c:	0728      	lsls	r0, r5, #28
 8008e2e:	d5c1      	bpl.n	8008db4 <_strtod_l+0x84>
 8008e30:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008e34:	e7be      	b.n	8008db4 <_strtod_l+0x84>
 8008e36:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008e3a:	e7f7      	b.n	8008e2c <_strtod_l+0xfc>
 8008e3c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008e40:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008e42:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008e46:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008e4a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008e4e:	e7ed      	b.n	8008e2c <_strtod_l+0xfc>
 8008e50:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008fd8 <_strtod_l+0x2a8>
 8008e54:	f04f 0a00 	mov.w	sl, #0
 8008e58:	e7e8      	b.n	8008e2c <_strtod_l+0xfc>
 8008e5a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008e5e:	f04f 3aff 	mov.w	sl, #4294967295
 8008e62:	e7e3      	b.n	8008e2c <_strtod_l+0xfc>
 8008e64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e66:	1c5a      	adds	r2, r3, #1
 8008e68:	921d      	str	r2, [sp, #116]	; 0x74
 8008e6a:	785b      	ldrb	r3, [r3, #1]
 8008e6c:	2b30      	cmp	r3, #48	; 0x30
 8008e6e:	d0f9      	beq.n	8008e64 <_strtod_l+0x134>
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d09f      	beq.n	8008db4 <_strtod_l+0x84>
 8008e74:	2301      	movs	r3, #1
 8008e76:	f04f 0900 	mov.w	r9, #0
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008e7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e80:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008e84:	464f      	mov	r7, r9
 8008e86:	220a      	movs	r2, #10
 8008e88:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008e8a:	7806      	ldrb	r6, [r0, #0]
 8008e8c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008e90:	b2d9      	uxtb	r1, r3
 8008e92:	2909      	cmp	r1, #9
 8008e94:	d92a      	bls.n	8008eec <_strtod_l+0x1bc>
 8008e96:	9907      	ldr	r1, [sp, #28]
 8008e98:	462a      	mov	r2, r5
 8008e9a:	f002 fedd 	bl	800bc58 <strncmp>
 8008e9e:	b398      	cbz	r0, 8008f08 <_strtod_l+0x1d8>
 8008ea0:	2000      	movs	r0, #0
 8008ea2:	4633      	mov	r3, r6
 8008ea4:	463d      	mov	r5, r7
 8008ea6:	9007      	str	r0, [sp, #28]
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	2b65      	cmp	r3, #101	; 0x65
 8008eac:	d001      	beq.n	8008eb2 <_strtod_l+0x182>
 8008eae:	2b45      	cmp	r3, #69	; 0x45
 8008eb0:	d118      	bne.n	8008ee4 <_strtod_l+0x1b4>
 8008eb2:	b91d      	cbnz	r5, 8008ebc <_strtod_l+0x18c>
 8008eb4:	9b04      	ldr	r3, [sp, #16]
 8008eb6:	4303      	orrs	r3, r0
 8008eb8:	d098      	beq.n	8008dec <_strtod_l+0xbc>
 8008eba:	2500      	movs	r5, #0
 8008ebc:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008ec0:	f108 0301 	add.w	r3, r8, #1
 8008ec4:	931d      	str	r3, [sp, #116]	; 0x74
 8008ec6:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008eca:	2b2b      	cmp	r3, #43	; 0x2b
 8008ecc:	d075      	beq.n	8008fba <_strtod_l+0x28a>
 8008ece:	2b2d      	cmp	r3, #45	; 0x2d
 8008ed0:	d07b      	beq.n	8008fca <_strtod_l+0x29a>
 8008ed2:	f04f 0c00 	mov.w	ip, #0
 8008ed6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008eda:	2909      	cmp	r1, #9
 8008edc:	f240 8082 	bls.w	8008fe4 <_strtod_l+0x2b4>
 8008ee0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008ee4:	2600      	movs	r6, #0
 8008ee6:	e09d      	b.n	8009024 <_strtod_l+0x2f4>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	e7c4      	b.n	8008e76 <_strtod_l+0x146>
 8008eec:	2f08      	cmp	r7, #8
 8008eee:	bfd8      	it	le
 8008ef0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008ef2:	f100 0001 	add.w	r0, r0, #1
 8008ef6:	bfda      	itte	le
 8008ef8:	fb02 3301 	mlale	r3, r2, r1, r3
 8008efc:	9309      	strle	r3, [sp, #36]	; 0x24
 8008efe:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008f02:	3701      	adds	r7, #1
 8008f04:	901d      	str	r0, [sp, #116]	; 0x74
 8008f06:	e7bf      	b.n	8008e88 <_strtod_l+0x158>
 8008f08:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f0a:	195a      	adds	r2, r3, r5
 8008f0c:	921d      	str	r2, [sp, #116]	; 0x74
 8008f0e:	5d5b      	ldrb	r3, [r3, r5]
 8008f10:	2f00      	cmp	r7, #0
 8008f12:	d037      	beq.n	8008f84 <_strtod_l+0x254>
 8008f14:	9007      	str	r0, [sp, #28]
 8008f16:	463d      	mov	r5, r7
 8008f18:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008f1c:	2a09      	cmp	r2, #9
 8008f1e:	d912      	bls.n	8008f46 <_strtod_l+0x216>
 8008f20:	2201      	movs	r2, #1
 8008f22:	e7c2      	b.n	8008eaa <_strtod_l+0x17a>
 8008f24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	921d      	str	r2, [sp, #116]	; 0x74
 8008f2a:	785b      	ldrb	r3, [r3, #1]
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	2b30      	cmp	r3, #48	; 0x30
 8008f30:	d0f8      	beq.n	8008f24 <_strtod_l+0x1f4>
 8008f32:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008f36:	2a08      	cmp	r2, #8
 8008f38:	f200 84db 	bhi.w	80098f2 <_strtod_l+0xbc2>
 8008f3c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008f3e:	9007      	str	r0, [sp, #28]
 8008f40:	2000      	movs	r0, #0
 8008f42:	920a      	str	r2, [sp, #40]	; 0x28
 8008f44:	4605      	mov	r5, r0
 8008f46:	3b30      	subs	r3, #48	; 0x30
 8008f48:	f100 0201 	add.w	r2, r0, #1
 8008f4c:	d014      	beq.n	8008f78 <_strtod_l+0x248>
 8008f4e:	9907      	ldr	r1, [sp, #28]
 8008f50:	4411      	add	r1, r2
 8008f52:	9107      	str	r1, [sp, #28]
 8008f54:	462a      	mov	r2, r5
 8008f56:	eb00 0e05 	add.w	lr, r0, r5
 8008f5a:	210a      	movs	r1, #10
 8008f5c:	4572      	cmp	r2, lr
 8008f5e:	d113      	bne.n	8008f88 <_strtod_l+0x258>
 8008f60:	182a      	adds	r2, r5, r0
 8008f62:	2a08      	cmp	r2, #8
 8008f64:	f105 0501 	add.w	r5, r5, #1
 8008f68:	4405      	add	r5, r0
 8008f6a:	dc1c      	bgt.n	8008fa6 <_strtod_l+0x276>
 8008f6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f6e:	220a      	movs	r2, #10
 8008f70:	fb02 3301 	mla	r3, r2, r1, r3
 8008f74:	9309      	str	r3, [sp, #36]	; 0x24
 8008f76:	2200      	movs	r2, #0
 8008f78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008f7a:	1c59      	adds	r1, r3, #1
 8008f7c:	911d      	str	r1, [sp, #116]	; 0x74
 8008f7e:	785b      	ldrb	r3, [r3, #1]
 8008f80:	4610      	mov	r0, r2
 8008f82:	e7c9      	b.n	8008f18 <_strtod_l+0x1e8>
 8008f84:	4638      	mov	r0, r7
 8008f86:	e7d2      	b.n	8008f2e <_strtod_l+0x1fe>
 8008f88:	2a08      	cmp	r2, #8
 8008f8a:	dc04      	bgt.n	8008f96 <_strtod_l+0x266>
 8008f8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008f8e:	434e      	muls	r6, r1
 8008f90:	9609      	str	r6, [sp, #36]	; 0x24
 8008f92:	3201      	adds	r2, #1
 8008f94:	e7e2      	b.n	8008f5c <_strtod_l+0x22c>
 8008f96:	f102 0c01 	add.w	ip, r2, #1
 8008f9a:	f1bc 0f10 	cmp.w	ip, #16
 8008f9e:	bfd8      	it	le
 8008fa0:	fb01 f909 	mulle.w	r9, r1, r9
 8008fa4:	e7f5      	b.n	8008f92 <_strtod_l+0x262>
 8008fa6:	2d10      	cmp	r5, #16
 8008fa8:	bfdc      	itt	le
 8008faa:	220a      	movle	r2, #10
 8008fac:	fb02 3909 	mlale	r9, r2, r9, r3
 8008fb0:	e7e1      	b.n	8008f76 <_strtod_l+0x246>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	9307      	str	r3, [sp, #28]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	e77c      	b.n	8008eb4 <_strtod_l+0x184>
 8008fba:	f04f 0c00 	mov.w	ip, #0
 8008fbe:	f108 0302 	add.w	r3, r8, #2
 8008fc2:	931d      	str	r3, [sp, #116]	; 0x74
 8008fc4:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008fc8:	e785      	b.n	8008ed6 <_strtod_l+0x1a6>
 8008fca:	f04f 0c01 	mov.w	ip, #1
 8008fce:	e7f6      	b.n	8008fbe <_strtod_l+0x28e>
 8008fd0:	0800e958 	.word	0x0800e958
 8008fd4:	0800e704 	.word	0x0800e704
 8008fd8:	7ff00000 	.word	0x7ff00000
 8008fdc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008fde:	1c59      	adds	r1, r3, #1
 8008fe0:	911d      	str	r1, [sp, #116]	; 0x74
 8008fe2:	785b      	ldrb	r3, [r3, #1]
 8008fe4:	2b30      	cmp	r3, #48	; 0x30
 8008fe6:	d0f9      	beq.n	8008fdc <_strtod_l+0x2ac>
 8008fe8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008fec:	2908      	cmp	r1, #8
 8008fee:	f63f af79 	bhi.w	8008ee4 <_strtod_l+0x1b4>
 8008ff2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008ff6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ff8:	9308      	str	r3, [sp, #32]
 8008ffa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ffc:	1c59      	adds	r1, r3, #1
 8008ffe:	911d      	str	r1, [sp, #116]	; 0x74
 8009000:	785b      	ldrb	r3, [r3, #1]
 8009002:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8009006:	2e09      	cmp	r6, #9
 8009008:	d937      	bls.n	800907a <_strtod_l+0x34a>
 800900a:	9e08      	ldr	r6, [sp, #32]
 800900c:	1b89      	subs	r1, r1, r6
 800900e:	2908      	cmp	r1, #8
 8009010:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009014:	dc02      	bgt.n	800901c <_strtod_l+0x2ec>
 8009016:	4576      	cmp	r6, lr
 8009018:	bfa8      	it	ge
 800901a:	4676      	movge	r6, lr
 800901c:	f1bc 0f00 	cmp.w	ip, #0
 8009020:	d000      	beq.n	8009024 <_strtod_l+0x2f4>
 8009022:	4276      	negs	r6, r6
 8009024:	2d00      	cmp	r5, #0
 8009026:	d14f      	bne.n	80090c8 <_strtod_l+0x398>
 8009028:	9904      	ldr	r1, [sp, #16]
 800902a:	4301      	orrs	r1, r0
 800902c:	f47f aec2 	bne.w	8008db4 <_strtod_l+0x84>
 8009030:	2a00      	cmp	r2, #0
 8009032:	f47f aedb 	bne.w	8008dec <_strtod_l+0xbc>
 8009036:	2b69      	cmp	r3, #105	; 0x69
 8009038:	d027      	beq.n	800908a <_strtod_l+0x35a>
 800903a:	dc24      	bgt.n	8009086 <_strtod_l+0x356>
 800903c:	2b49      	cmp	r3, #73	; 0x49
 800903e:	d024      	beq.n	800908a <_strtod_l+0x35a>
 8009040:	2b4e      	cmp	r3, #78	; 0x4e
 8009042:	f47f aed3 	bne.w	8008dec <_strtod_l+0xbc>
 8009046:	499e      	ldr	r1, [pc, #632]	; (80092c0 <_strtod_l+0x590>)
 8009048:	a81d      	add	r0, sp, #116	; 0x74
 800904a:	f001 fe41 	bl	800acd0 <__match>
 800904e:	2800      	cmp	r0, #0
 8009050:	f43f aecc 	beq.w	8008dec <_strtod_l+0xbc>
 8009054:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009056:	781b      	ldrb	r3, [r3, #0]
 8009058:	2b28      	cmp	r3, #40	; 0x28
 800905a:	d12d      	bne.n	80090b8 <_strtod_l+0x388>
 800905c:	4999      	ldr	r1, [pc, #612]	; (80092c4 <_strtod_l+0x594>)
 800905e:	aa20      	add	r2, sp, #128	; 0x80
 8009060:	a81d      	add	r0, sp, #116	; 0x74
 8009062:	f001 fe49 	bl	800acf8 <__hexnan>
 8009066:	2805      	cmp	r0, #5
 8009068:	d126      	bne.n	80090b8 <_strtod_l+0x388>
 800906a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800906c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8009070:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009074:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009078:	e69c      	b.n	8008db4 <_strtod_l+0x84>
 800907a:	210a      	movs	r1, #10
 800907c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8009080:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009084:	e7b9      	b.n	8008ffa <_strtod_l+0x2ca>
 8009086:	2b6e      	cmp	r3, #110	; 0x6e
 8009088:	e7db      	b.n	8009042 <_strtod_l+0x312>
 800908a:	498f      	ldr	r1, [pc, #572]	; (80092c8 <_strtod_l+0x598>)
 800908c:	a81d      	add	r0, sp, #116	; 0x74
 800908e:	f001 fe1f 	bl	800acd0 <__match>
 8009092:	2800      	cmp	r0, #0
 8009094:	f43f aeaa 	beq.w	8008dec <_strtod_l+0xbc>
 8009098:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800909a:	498c      	ldr	r1, [pc, #560]	; (80092cc <_strtod_l+0x59c>)
 800909c:	3b01      	subs	r3, #1
 800909e:	a81d      	add	r0, sp, #116	; 0x74
 80090a0:	931d      	str	r3, [sp, #116]	; 0x74
 80090a2:	f001 fe15 	bl	800acd0 <__match>
 80090a6:	b910      	cbnz	r0, 80090ae <_strtod_l+0x37e>
 80090a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80090aa:	3301      	adds	r3, #1
 80090ac:	931d      	str	r3, [sp, #116]	; 0x74
 80090ae:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80092dc <_strtod_l+0x5ac>
 80090b2:	f04f 0a00 	mov.w	sl, #0
 80090b6:	e67d      	b.n	8008db4 <_strtod_l+0x84>
 80090b8:	4885      	ldr	r0, [pc, #532]	; (80092d0 <_strtod_l+0x5a0>)
 80090ba:	f002 fdb5 	bl	800bc28 <nan>
 80090be:	ed8d 0b04 	vstr	d0, [sp, #16]
 80090c2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80090c6:	e675      	b.n	8008db4 <_strtod_l+0x84>
 80090c8:	9b07      	ldr	r3, [sp, #28]
 80090ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090cc:	1af3      	subs	r3, r6, r3
 80090ce:	2f00      	cmp	r7, #0
 80090d0:	bf08      	it	eq
 80090d2:	462f      	moveq	r7, r5
 80090d4:	2d10      	cmp	r5, #16
 80090d6:	9308      	str	r3, [sp, #32]
 80090d8:	46a8      	mov	r8, r5
 80090da:	bfa8      	it	ge
 80090dc:	f04f 0810 	movge.w	r8, #16
 80090e0:	f7f7 fa10 	bl	8000504 <__aeabi_ui2d>
 80090e4:	2d09      	cmp	r5, #9
 80090e6:	4682      	mov	sl, r0
 80090e8:	468b      	mov	fp, r1
 80090ea:	dd13      	ble.n	8009114 <_strtod_l+0x3e4>
 80090ec:	4b79      	ldr	r3, [pc, #484]	; (80092d4 <_strtod_l+0x5a4>)
 80090ee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80090f2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80090f6:	f7f7 fa7f 	bl	80005f8 <__aeabi_dmul>
 80090fa:	4682      	mov	sl, r0
 80090fc:	4648      	mov	r0, r9
 80090fe:	468b      	mov	fp, r1
 8009100:	f7f7 fa00 	bl	8000504 <__aeabi_ui2d>
 8009104:	4602      	mov	r2, r0
 8009106:	460b      	mov	r3, r1
 8009108:	4650      	mov	r0, sl
 800910a:	4659      	mov	r1, fp
 800910c:	f7f7 f8be 	bl	800028c <__adddf3>
 8009110:	4682      	mov	sl, r0
 8009112:	468b      	mov	fp, r1
 8009114:	2d0f      	cmp	r5, #15
 8009116:	dc38      	bgt.n	800918a <_strtod_l+0x45a>
 8009118:	9b08      	ldr	r3, [sp, #32]
 800911a:	2b00      	cmp	r3, #0
 800911c:	f43f ae4a 	beq.w	8008db4 <_strtod_l+0x84>
 8009120:	dd24      	ble.n	800916c <_strtod_l+0x43c>
 8009122:	2b16      	cmp	r3, #22
 8009124:	dc0b      	bgt.n	800913e <_strtod_l+0x40e>
 8009126:	4d6b      	ldr	r5, [pc, #428]	; (80092d4 <_strtod_l+0x5a4>)
 8009128:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800912c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8009130:	4652      	mov	r2, sl
 8009132:	465b      	mov	r3, fp
 8009134:	f7f7 fa60 	bl	80005f8 <__aeabi_dmul>
 8009138:	4682      	mov	sl, r0
 800913a:	468b      	mov	fp, r1
 800913c:	e63a      	b.n	8008db4 <_strtod_l+0x84>
 800913e:	9a08      	ldr	r2, [sp, #32]
 8009140:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009144:	4293      	cmp	r3, r2
 8009146:	db20      	blt.n	800918a <_strtod_l+0x45a>
 8009148:	4c62      	ldr	r4, [pc, #392]	; (80092d4 <_strtod_l+0x5a4>)
 800914a:	f1c5 050f 	rsb	r5, r5, #15
 800914e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009152:	4652      	mov	r2, sl
 8009154:	465b      	mov	r3, fp
 8009156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800915a:	f7f7 fa4d 	bl	80005f8 <__aeabi_dmul>
 800915e:	9b08      	ldr	r3, [sp, #32]
 8009160:	1b5d      	subs	r5, r3, r5
 8009162:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009166:	e9d4 2300 	ldrd	r2, r3, [r4]
 800916a:	e7e3      	b.n	8009134 <_strtod_l+0x404>
 800916c:	9b08      	ldr	r3, [sp, #32]
 800916e:	3316      	adds	r3, #22
 8009170:	db0b      	blt.n	800918a <_strtod_l+0x45a>
 8009172:	9b07      	ldr	r3, [sp, #28]
 8009174:	4a57      	ldr	r2, [pc, #348]	; (80092d4 <_strtod_l+0x5a4>)
 8009176:	1b9e      	subs	r6, r3, r6
 8009178:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800917c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009180:	4650      	mov	r0, sl
 8009182:	4659      	mov	r1, fp
 8009184:	f7f7 fb62 	bl	800084c <__aeabi_ddiv>
 8009188:	e7d6      	b.n	8009138 <_strtod_l+0x408>
 800918a:	9b08      	ldr	r3, [sp, #32]
 800918c:	eba5 0808 	sub.w	r8, r5, r8
 8009190:	4498      	add	r8, r3
 8009192:	f1b8 0f00 	cmp.w	r8, #0
 8009196:	dd71      	ble.n	800927c <_strtod_l+0x54c>
 8009198:	f018 030f 	ands.w	r3, r8, #15
 800919c:	d00a      	beq.n	80091b4 <_strtod_l+0x484>
 800919e:	494d      	ldr	r1, [pc, #308]	; (80092d4 <_strtod_l+0x5a4>)
 80091a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091a4:	4652      	mov	r2, sl
 80091a6:	465b      	mov	r3, fp
 80091a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091ac:	f7f7 fa24 	bl	80005f8 <__aeabi_dmul>
 80091b0:	4682      	mov	sl, r0
 80091b2:	468b      	mov	fp, r1
 80091b4:	f038 080f 	bics.w	r8, r8, #15
 80091b8:	d04d      	beq.n	8009256 <_strtod_l+0x526>
 80091ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80091be:	dd22      	ble.n	8009206 <_strtod_l+0x4d6>
 80091c0:	2500      	movs	r5, #0
 80091c2:	462e      	mov	r6, r5
 80091c4:	9509      	str	r5, [sp, #36]	; 0x24
 80091c6:	9507      	str	r5, [sp, #28]
 80091c8:	2322      	movs	r3, #34	; 0x22
 80091ca:	f8df b110 	ldr.w	fp, [pc, #272]	; 80092dc <_strtod_l+0x5ac>
 80091ce:	6023      	str	r3, [r4, #0]
 80091d0:	f04f 0a00 	mov.w	sl, #0
 80091d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	f43f adec 	beq.w	8008db4 <_strtod_l+0x84>
 80091dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80091de:	4620      	mov	r0, r4
 80091e0:	f001 fe92 	bl	800af08 <_Bfree>
 80091e4:	9907      	ldr	r1, [sp, #28]
 80091e6:	4620      	mov	r0, r4
 80091e8:	f001 fe8e 	bl	800af08 <_Bfree>
 80091ec:	4631      	mov	r1, r6
 80091ee:	4620      	mov	r0, r4
 80091f0:	f001 fe8a 	bl	800af08 <_Bfree>
 80091f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091f6:	4620      	mov	r0, r4
 80091f8:	f001 fe86 	bl	800af08 <_Bfree>
 80091fc:	4629      	mov	r1, r5
 80091fe:	4620      	mov	r0, r4
 8009200:	f001 fe82 	bl	800af08 <_Bfree>
 8009204:	e5d6      	b.n	8008db4 <_strtod_l+0x84>
 8009206:	2300      	movs	r3, #0
 8009208:	ea4f 1828 	mov.w	r8, r8, asr #4
 800920c:	4650      	mov	r0, sl
 800920e:	4659      	mov	r1, fp
 8009210:	4699      	mov	r9, r3
 8009212:	f1b8 0f01 	cmp.w	r8, #1
 8009216:	dc21      	bgt.n	800925c <_strtod_l+0x52c>
 8009218:	b10b      	cbz	r3, 800921e <_strtod_l+0x4ee>
 800921a:	4682      	mov	sl, r0
 800921c:	468b      	mov	fp, r1
 800921e:	4b2e      	ldr	r3, [pc, #184]	; (80092d8 <_strtod_l+0x5a8>)
 8009220:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009224:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009228:	4652      	mov	r2, sl
 800922a:	465b      	mov	r3, fp
 800922c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009230:	f7f7 f9e2 	bl	80005f8 <__aeabi_dmul>
 8009234:	4b29      	ldr	r3, [pc, #164]	; (80092dc <_strtod_l+0x5ac>)
 8009236:	460a      	mov	r2, r1
 8009238:	400b      	ands	r3, r1
 800923a:	4929      	ldr	r1, [pc, #164]	; (80092e0 <_strtod_l+0x5b0>)
 800923c:	428b      	cmp	r3, r1
 800923e:	4682      	mov	sl, r0
 8009240:	d8be      	bhi.n	80091c0 <_strtod_l+0x490>
 8009242:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009246:	428b      	cmp	r3, r1
 8009248:	bf86      	itte	hi
 800924a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80092e4 <_strtod_l+0x5b4>
 800924e:	f04f 3aff 	movhi.w	sl, #4294967295
 8009252:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009256:	2300      	movs	r3, #0
 8009258:	9304      	str	r3, [sp, #16]
 800925a:	e081      	b.n	8009360 <_strtod_l+0x630>
 800925c:	f018 0f01 	tst.w	r8, #1
 8009260:	d007      	beq.n	8009272 <_strtod_l+0x542>
 8009262:	4b1d      	ldr	r3, [pc, #116]	; (80092d8 <_strtod_l+0x5a8>)
 8009264:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8009268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926c:	f7f7 f9c4 	bl	80005f8 <__aeabi_dmul>
 8009270:	2301      	movs	r3, #1
 8009272:	f109 0901 	add.w	r9, r9, #1
 8009276:	ea4f 0868 	mov.w	r8, r8, asr #1
 800927a:	e7ca      	b.n	8009212 <_strtod_l+0x4e2>
 800927c:	d0eb      	beq.n	8009256 <_strtod_l+0x526>
 800927e:	f1c8 0800 	rsb	r8, r8, #0
 8009282:	f018 020f 	ands.w	r2, r8, #15
 8009286:	d00a      	beq.n	800929e <_strtod_l+0x56e>
 8009288:	4b12      	ldr	r3, [pc, #72]	; (80092d4 <_strtod_l+0x5a4>)
 800928a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800928e:	4650      	mov	r0, sl
 8009290:	4659      	mov	r1, fp
 8009292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009296:	f7f7 fad9 	bl	800084c <__aeabi_ddiv>
 800929a:	4682      	mov	sl, r0
 800929c:	468b      	mov	fp, r1
 800929e:	ea5f 1828 	movs.w	r8, r8, asr #4
 80092a2:	d0d8      	beq.n	8009256 <_strtod_l+0x526>
 80092a4:	f1b8 0f1f 	cmp.w	r8, #31
 80092a8:	dd1e      	ble.n	80092e8 <_strtod_l+0x5b8>
 80092aa:	2500      	movs	r5, #0
 80092ac:	462e      	mov	r6, r5
 80092ae:	9509      	str	r5, [sp, #36]	; 0x24
 80092b0:	9507      	str	r5, [sp, #28]
 80092b2:	2322      	movs	r3, #34	; 0x22
 80092b4:	f04f 0a00 	mov.w	sl, #0
 80092b8:	f04f 0b00 	mov.w	fp, #0
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	e789      	b.n	80091d4 <_strtod_l+0x4a4>
 80092c0:	0800e6d5 	.word	0x0800e6d5
 80092c4:	0800e718 	.word	0x0800e718
 80092c8:	0800e6cd 	.word	0x0800e6cd
 80092cc:	0800e85c 	.word	0x0800e85c
 80092d0:	0800eb18 	.word	0x0800eb18
 80092d4:	0800e9f8 	.word	0x0800e9f8
 80092d8:	0800e9d0 	.word	0x0800e9d0
 80092dc:	7ff00000 	.word	0x7ff00000
 80092e0:	7ca00000 	.word	0x7ca00000
 80092e4:	7fefffff 	.word	0x7fefffff
 80092e8:	f018 0310 	ands.w	r3, r8, #16
 80092ec:	bf18      	it	ne
 80092ee:	236a      	movne	r3, #106	; 0x6a
 80092f0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80096a8 <_strtod_l+0x978>
 80092f4:	9304      	str	r3, [sp, #16]
 80092f6:	4650      	mov	r0, sl
 80092f8:	4659      	mov	r1, fp
 80092fa:	2300      	movs	r3, #0
 80092fc:	f018 0f01 	tst.w	r8, #1
 8009300:	d004      	beq.n	800930c <_strtod_l+0x5dc>
 8009302:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009306:	f7f7 f977 	bl	80005f8 <__aeabi_dmul>
 800930a:	2301      	movs	r3, #1
 800930c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009310:	f109 0908 	add.w	r9, r9, #8
 8009314:	d1f2      	bne.n	80092fc <_strtod_l+0x5cc>
 8009316:	b10b      	cbz	r3, 800931c <_strtod_l+0x5ec>
 8009318:	4682      	mov	sl, r0
 800931a:	468b      	mov	fp, r1
 800931c:	9b04      	ldr	r3, [sp, #16]
 800931e:	b1bb      	cbz	r3, 8009350 <_strtod_l+0x620>
 8009320:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8009324:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009328:	2b00      	cmp	r3, #0
 800932a:	4659      	mov	r1, fp
 800932c:	dd10      	ble.n	8009350 <_strtod_l+0x620>
 800932e:	2b1f      	cmp	r3, #31
 8009330:	f340 8128 	ble.w	8009584 <_strtod_l+0x854>
 8009334:	2b34      	cmp	r3, #52	; 0x34
 8009336:	bfde      	ittt	le
 8009338:	3b20      	suble	r3, #32
 800933a:	f04f 32ff 	movle.w	r2, #4294967295
 800933e:	fa02 f303 	lslle.w	r3, r2, r3
 8009342:	f04f 0a00 	mov.w	sl, #0
 8009346:	bfcc      	ite	gt
 8009348:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800934c:	ea03 0b01 	andle.w	fp, r3, r1
 8009350:	2200      	movs	r2, #0
 8009352:	2300      	movs	r3, #0
 8009354:	4650      	mov	r0, sl
 8009356:	4659      	mov	r1, fp
 8009358:	f7f7 fbb6 	bl	8000ac8 <__aeabi_dcmpeq>
 800935c:	2800      	cmp	r0, #0
 800935e:	d1a4      	bne.n	80092aa <_strtod_l+0x57a>
 8009360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009366:	462b      	mov	r3, r5
 8009368:	463a      	mov	r2, r7
 800936a:	4620      	mov	r0, r4
 800936c:	f001 fe38 	bl	800afe0 <__s2b>
 8009370:	9009      	str	r0, [sp, #36]	; 0x24
 8009372:	2800      	cmp	r0, #0
 8009374:	f43f af24 	beq.w	80091c0 <_strtod_l+0x490>
 8009378:	9b07      	ldr	r3, [sp, #28]
 800937a:	1b9e      	subs	r6, r3, r6
 800937c:	9b08      	ldr	r3, [sp, #32]
 800937e:	2b00      	cmp	r3, #0
 8009380:	bfb4      	ite	lt
 8009382:	4633      	movlt	r3, r6
 8009384:	2300      	movge	r3, #0
 8009386:	9310      	str	r3, [sp, #64]	; 0x40
 8009388:	9b08      	ldr	r3, [sp, #32]
 800938a:	2500      	movs	r5, #0
 800938c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009390:	9318      	str	r3, [sp, #96]	; 0x60
 8009392:	462e      	mov	r6, r5
 8009394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009396:	4620      	mov	r0, r4
 8009398:	6859      	ldr	r1, [r3, #4]
 800939a:	f001 fd75 	bl	800ae88 <_Balloc>
 800939e:	9007      	str	r0, [sp, #28]
 80093a0:	2800      	cmp	r0, #0
 80093a2:	f43f af11 	beq.w	80091c8 <_strtod_l+0x498>
 80093a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a8:	691a      	ldr	r2, [r3, #16]
 80093aa:	3202      	adds	r2, #2
 80093ac:	f103 010c 	add.w	r1, r3, #12
 80093b0:	0092      	lsls	r2, r2, #2
 80093b2:	300c      	adds	r0, #12
 80093b4:	f001 fd5a 	bl	800ae6c <memcpy>
 80093b8:	ec4b ab10 	vmov	d0, sl, fp
 80093bc:	aa20      	add	r2, sp, #128	; 0x80
 80093be:	a91f      	add	r1, sp, #124	; 0x7c
 80093c0:	4620      	mov	r0, r4
 80093c2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80093c6:	f002 f947 	bl	800b658 <__d2b>
 80093ca:	901e      	str	r0, [sp, #120]	; 0x78
 80093cc:	2800      	cmp	r0, #0
 80093ce:	f43f aefb 	beq.w	80091c8 <_strtod_l+0x498>
 80093d2:	2101      	movs	r1, #1
 80093d4:	4620      	mov	r0, r4
 80093d6:	f001 fe9d 	bl	800b114 <__i2b>
 80093da:	4606      	mov	r6, r0
 80093dc:	2800      	cmp	r0, #0
 80093de:	f43f aef3 	beq.w	80091c8 <_strtod_l+0x498>
 80093e2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80093e4:	9904      	ldr	r1, [sp, #16]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bfab      	itete	ge
 80093ea:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80093ec:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80093ee:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80093f0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80093f4:	bfac      	ite	ge
 80093f6:	eb03 0902 	addge.w	r9, r3, r2
 80093fa:	1ad7      	sublt	r7, r2, r3
 80093fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80093fe:	eba3 0801 	sub.w	r8, r3, r1
 8009402:	4490      	add	r8, r2
 8009404:	4ba3      	ldr	r3, [pc, #652]	; (8009694 <_strtod_l+0x964>)
 8009406:	f108 38ff 	add.w	r8, r8, #4294967295
 800940a:	4598      	cmp	r8, r3
 800940c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009410:	f280 80cc 	bge.w	80095ac <_strtod_l+0x87c>
 8009414:	eba3 0308 	sub.w	r3, r3, r8
 8009418:	2b1f      	cmp	r3, #31
 800941a:	eba2 0203 	sub.w	r2, r2, r3
 800941e:	f04f 0101 	mov.w	r1, #1
 8009422:	f300 80b6 	bgt.w	8009592 <_strtod_l+0x862>
 8009426:	fa01 f303 	lsl.w	r3, r1, r3
 800942a:	9311      	str	r3, [sp, #68]	; 0x44
 800942c:	2300      	movs	r3, #0
 800942e:	930c      	str	r3, [sp, #48]	; 0x30
 8009430:	eb09 0802 	add.w	r8, r9, r2
 8009434:	9b04      	ldr	r3, [sp, #16]
 8009436:	45c1      	cmp	r9, r8
 8009438:	4417      	add	r7, r2
 800943a:	441f      	add	r7, r3
 800943c:	464b      	mov	r3, r9
 800943e:	bfa8      	it	ge
 8009440:	4643      	movge	r3, r8
 8009442:	42bb      	cmp	r3, r7
 8009444:	bfa8      	it	ge
 8009446:	463b      	movge	r3, r7
 8009448:	2b00      	cmp	r3, #0
 800944a:	bfc2      	ittt	gt
 800944c:	eba8 0803 	subgt.w	r8, r8, r3
 8009450:	1aff      	subgt	r7, r7, r3
 8009452:	eba9 0903 	subgt.w	r9, r9, r3
 8009456:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009458:	2b00      	cmp	r3, #0
 800945a:	dd17      	ble.n	800948c <_strtod_l+0x75c>
 800945c:	4631      	mov	r1, r6
 800945e:	461a      	mov	r2, r3
 8009460:	4620      	mov	r0, r4
 8009462:	f001 ff13 	bl	800b28c <__pow5mult>
 8009466:	4606      	mov	r6, r0
 8009468:	2800      	cmp	r0, #0
 800946a:	f43f aead 	beq.w	80091c8 <_strtod_l+0x498>
 800946e:	4601      	mov	r1, r0
 8009470:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8009472:	4620      	mov	r0, r4
 8009474:	f001 fe64 	bl	800b140 <__multiply>
 8009478:	900f      	str	r0, [sp, #60]	; 0x3c
 800947a:	2800      	cmp	r0, #0
 800947c:	f43f aea4 	beq.w	80091c8 <_strtod_l+0x498>
 8009480:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009482:	4620      	mov	r0, r4
 8009484:	f001 fd40 	bl	800af08 <_Bfree>
 8009488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800948a:	931e      	str	r3, [sp, #120]	; 0x78
 800948c:	f1b8 0f00 	cmp.w	r8, #0
 8009490:	f300 8091 	bgt.w	80095b6 <_strtod_l+0x886>
 8009494:	9b08      	ldr	r3, [sp, #32]
 8009496:	2b00      	cmp	r3, #0
 8009498:	dd08      	ble.n	80094ac <_strtod_l+0x77c>
 800949a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800949c:	9907      	ldr	r1, [sp, #28]
 800949e:	4620      	mov	r0, r4
 80094a0:	f001 fef4 	bl	800b28c <__pow5mult>
 80094a4:	9007      	str	r0, [sp, #28]
 80094a6:	2800      	cmp	r0, #0
 80094a8:	f43f ae8e 	beq.w	80091c8 <_strtod_l+0x498>
 80094ac:	2f00      	cmp	r7, #0
 80094ae:	dd08      	ble.n	80094c2 <_strtod_l+0x792>
 80094b0:	9907      	ldr	r1, [sp, #28]
 80094b2:	463a      	mov	r2, r7
 80094b4:	4620      	mov	r0, r4
 80094b6:	f001 ff43 	bl	800b340 <__lshift>
 80094ba:	9007      	str	r0, [sp, #28]
 80094bc:	2800      	cmp	r0, #0
 80094be:	f43f ae83 	beq.w	80091c8 <_strtod_l+0x498>
 80094c2:	f1b9 0f00 	cmp.w	r9, #0
 80094c6:	dd08      	ble.n	80094da <_strtod_l+0x7aa>
 80094c8:	4631      	mov	r1, r6
 80094ca:	464a      	mov	r2, r9
 80094cc:	4620      	mov	r0, r4
 80094ce:	f001 ff37 	bl	800b340 <__lshift>
 80094d2:	4606      	mov	r6, r0
 80094d4:	2800      	cmp	r0, #0
 80094d6:	f43f ae77 	beq.w	80091c8 <_strtod_l+0x498>
 80094da:	9a07      	ldr	r2, [sp, #28]
 80094dc:	991e      	ldr	r1, [sp, #120]	; 0x78
 80094de:	4620      	mov	r0, r4
 80094e0:	f001 ffb6 	bl	800b450 <__mdiff>
 80094e4:	4605      	mov	r5, r0
 80094e6:	2800      	cmp	r0, #0
 80094e8:	f43f ae6e 	beq.w	80091c8 <_strtod_l+0x498>
 80094ec:	68c3      	ldr	r3, [r0, #12]
 80094ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80094f0:	2300      	movs	r3, #0
 80094f2:	60c3      	str	r3, [r0, #12]
 80094f4:	4631      	mov	r1, r6
 80094f6:	f001 ff8f 	bl	800b418 <__mcmp>
 80094fa:	2800      	cmp	r0, #0
 80094fc:	da65      	bge.n	80095ca <_strtod_l+0x89a>
 80094fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009500:	ea53 030a 	orrs.w	r3, r3, sl
 8009504:	f040 8087 	bne.w	8009616 <_strtod_l+0x8e6>
 8009508:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800950c:	2b00      	cmp	r3, #0
 800950e:	f040 8082 	bne.w	8009616 <_strtod_l+0x8e6>
 8009512:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009516:	0d1b      	lsrs	r3, r3, #20
 8009518:	051b      	lsls	r3, r3, #20
 800951a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800951e:	d97a      	bls.n	8009616 <_strtod_l+0x8e6>
 8009520:	696b      	ldr	r3, [r5, #20]
 8009522:	b913      	cbnz	r3, 800952a <_strtod_l+0x7fa>
 8009524:	692b      	ldr	r3, [r5, #16]
 8009526:	2b01      	cmp	r3, #1
 8009528:	dd75      	ble.n	8009616 <_strtod_l+0x8e6>
 800952a:	4629      	mov	r1, r5
 800952c:	2201      	movs	r2, #1
 800952e:	4620      	mov	r0, r4
 8009530:	f001 ff06 	bl	800b340 <__lshift>
 8009534:	4631      	mov	r1, r6
 8009536:	4605      	mov	r5, r0
 8009538:	f001 ff6e 	bl	800b418 <__mcmp>
 800953c:	2800      	cmp	r0, #0
 800953e:	dd6a      	ble.n	8009616 <_strtod_l+0x8e6>
 8009540:	9904      	ldr	r1, [sp, #16]
 8009542:	4a55      	ldr	r2, [pc, #340]	; (8009698 <_strtod_l+0x968>)
 8009544:	465b      	mov	r3, fp
 8009546:	2900      	cmp	r1, #0
 8009548:	f000 8085 	beq.w	8009656 <_strtod_l+0x926>
 800954c:	ea02 010b 	and.w	r1, r2, fp
 8009550:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009554:	dc7f      	bgt.n	8009656 <_strtod_l+0x926>
 8009556:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800955a:	f77f aeaa 	ble.w	80092b2 <_strtod_l+0x582>
 800955e:	4a4f      	ldr	r2, [pc, #316]	; (800969c <_strtod_l+0x96c>)
 8009560:	2300      	movs	r3, #0
 8009562:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8009566:	4650      	mov	r0, sl
 8009568:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800956c:	4659      	mov	r1, fp
 800956e:	f7f7 f843 	bl	80005f8 <__aeabi_dmul>
 8009572:	460b      	mov	r3, r1
 8009574:	4303      	orrs	r3, r0
 8009576:	bf08      	it	eq
 8009578:	2322      	moveq	r3, #34	; 0x22
 800957a:	4682      	mov	sl, r0
 800957c:	468b      	mov	fp, r1
 800957e:	bf08      	it	eq
 8009580:	6023      	streq	r3, [r4, #0]
 8009582:	e62b      	b.n	80091dc <_strtod_l+0x4ac>
 8009584:	f04f 32ff 	mov.w	r2, #4294967295
 8009588:	fa02 f303 	lsl.w	r3, r2, r3
 800958c:	ea03 0a0a 	and.w	sl, r3, sl
 8009590:	e6de      	b.n	8009350 <_strtod_l+0x620>
 8009592:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009596:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800959a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800959e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80095a2:	fa01 f308 	lsl.w	r3, r1, r8
 80095a6:	930c      	str	r3, [sp, #48]	; 0x30
 80095a8:	9111      	str	r1, [sp, #68]	; 0x44
 80095aa:	e741      	b.n	8009430 <_strtod_l+0x700>
 80095ac:	2300      	movs	r3, #0
 80095ae:	930c      	str	r3, [sp, #48]	; 0x30
 80095b0:	2301      	movs	r3, #1
 80095b2:	9311      	str	r3, [sp, #68]	; 0x44
 80095b4:	e73c      	b.n	8009430 <_strtod_l+0x700>
 80095b6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80095b8:	4642      	mov	r2, r8
 80095ba:	4620      	mov	r0, r4
 80095bc:	f001 fec0 	bl	800b340 <__lshift>
 80095c0:	901e      	str	r0, [sp, #120]	; 0x78
 80095c2:	2800      	cmp	r0, #0
 80095c4:	f47f af66 	bne.w	8009494 <_strtod_l+0x764>
 80095c8:	e5fe      	b.n	80091c8 <_strtod_l+0x498>
 80095ca:	465f      	mov	r7, fp
 80095cc:	d16e      	bne.n	80096ac <_strtod_l+0x97c>
 80095ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80095d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095d4:	b342      	cbz	r2, 8009628 <_strtod_l+0x8f8>
 80095d6:	4a32      	ldr	r2, [pc, #200]	; (80096a0 <_strtod_l+0x970>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d128      	bne.n	800962e <_strtod_l+0x8fe>
 80095dc:	9b04      	ldr	r3, [sp, #16]
 80095de:	4650      	mov	r0, sl
 80095e0:	b1eb      	cbz	r3, 800961e <_strtod_l+0x8ee>
 80095e2:	4a2d      	ldr	r2, [pc, #180]	; (8009698 <_strtod_l+0x968>)
 80095e4:	403a      	ands	r2, r7
 80095e6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80095ea:	f04f 31ff 	mov.w	r1, #4294967295
 80095ee:	d819      	bhi.n	8009624 <_strtod_l+0x8f4>
 80095f0:	0d12      	lsrs	r2, r2, #20
 80095f2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80095f6:	fa01 f303 	lsl.w	r3, r1, r3
 80095fa:	4298      	cmp	r0, r3
 80095fc:	d117      	bne.n	800962e <_strtod_l+0x8fe>
 80095fe:	4b29      	ldr	r3, [pc, #164]	; (80096a4 <_strtod_l+0x974>)
 8009600:	429f      	cmp	r7, r3
 8009602:	d102      	bne.n	800960a <_strtod_l+0x8da>
 8009604:	3001      	adds	r0, #1
 8009606:	f43f addf 	beq.w	80091c8 <_strtod_l+0x498>
 800960a:	4b23      	ldr	r3, [pc, #140]	; (8009698 <_strtod_l+0x968>)
 800960c:	403b      	ands	r3, r7
 800960e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009612:	f04f 0a00 	mov.w	sl, #0
 8009616:	9b04      	ldr	r3, [sp, #16]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1a0      	bne.n	800955e <_strtod_l+0x82e>
 800961c:	e5de      	b.n	80091dc <_strtod_l+0x4ac>
 800961e:	f04f 33ff 	mov.w	r3, #4294967295
 8009622:	e7ea      	b.n	80095fa <_strtod_l+0x8ca>
 8009624:	460b      	mov	r3, r1
 8009626:	e7e8      	b.n	80095fa <_strtod_l+0x8ca>
 8009628:	ea53 030a 	orrs.w	r3, r3, sl
 800962c:	d088      	beq.n	8009540 <_strtod_l+0x810>
 800962e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009630:	b1db      	cbz	r3, 800966a <_strtod_l+0x93a>
 8009632:	423b      	tst	r3, r7
 8009634:	d0ef      	beq.n	8009616 <_strtod_l+0x8e6>
 8009636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009638:	9a04      	ldr	r2, [sp, #16]
 800963a:	4650      	mov	r0, sl
 800963c:	4659      	mov	r1, fp
 800963e:	b1c3      	cbz	r3, 8009672 <_strtod_l+0x942>
 8009640:	f7ff fb58 	bl	8008cf4 <sulp>
 8009644:	4602      	mov	r2, r0
 8009646:	460b      	mov	r3, r1
 8009648:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800964c:	f7f6 fe1e 	bl	800028c <__adddf3>
 8009650:	4682      	mov	sl, r0
 8009652:	468b      	mov	fp, r1
 8009654:	e7df      	b.n	8009616 <_strtod_l+0x8e6>
 8009656:	4013      	ands	r3, r2
 8009658:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800965c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009660:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009664:	f04f 3aff 	mov.w	sl, #4294967295
 8009668:	e7d5      	b.n	8009616 <_strtod_l+0x8e6>
 800966a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800966c:	ea13 0f0a 	tst.w	r3, sl
 8009670:	e7e0      	b.n	8009634 <_strtod_l+0x904>
 8009672:	f7ff fb3f 	bl	8008cf4 <sulp>
 8009676:	4602      	mov	r2, r0
 8009678:	460b      	mov	r3, r1
 800967a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800967e:	f7f6 fe03 	bl	8000288 <__aeabi_dsub>
 8009682:	2200      	movs	r2, #0
 8009684:	2300      	movs	r3, #0
 8009686:	4682      	mov	sl, r0
 8009688:	468b      	mov	fp, r1
 800968a:	f7f7 fa1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800968e:	2800      	cmp	r0, #0
 8009690:	d0c1      	beq.n	8009616 <_strtod_l+0x8e6>
 8009692:	e60e      	b.n	80092b2 <_strtod_l+0x582>
 8009694:	fffffc02 	.word	0xfffffc02
 8009698:	7ff00000 	.word	0x7ff00000
 800969c:	39500000 	.word	0x39500000
 80096a0:	000fffff 	.word	0x000fffff
 80096a4:	7fefffff 	.word	0x7fefffff
 80096a8:	0800e730 	.word	0x0800e730
 80096ac:	4631      	mov	r1, r6
 80096ae:	4628      	mov	r0, r5
 80096b0:	f002 f82e 	bl	800b710 <__ratio>
 80096b4:	ec59 8b10 	vmov	r8, r9, d0
 80096b8:	ee10 0a10 	vmov	r0, s0
 80096bc:	2200      	movs	r2, #0
 80096be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80096c2:	4649      	mov	r1, r9
 80096c4:	f7f7 fa14 	bl	8000af0 <__aeabi_dcmple>
 80096c8:	2800      	cmp	r0, #0
 80096ca:	d07c      	beq.n	80097c6 <_strtod_l+0xa96>
 80096cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d04c      	beq.n	800976c <_strtod_l+0xa3c>
 80096d2:	4b95      	ldr	r3, [pc, #596]	; (8009928 <_strtod_l+0xbf8>)
 80096d4:	2200      	movs	r2, #0
 80096d6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80096da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009928 <_strtod_l+0xbf8>
 80096de:	f04f 0800 	mov.w	r8, #0
 80096e2:	4b92      	ldr	r3, [pc, #584]	; (800992c <_strtod_l+0xbfc>)
 80096e4:	403b      	ands	r3, r7
 80096e6:	9311      	str	r3, [sp, #68]	; 0x44
 80096e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80096ea:	4b91      	ldr	r3, [pc, #580]	; (8009930 <_strtod_l+0xc00>)
 80096ec:	429a      	cmp	r2, r3
 80096ee:	f040 80b2 	bne.w	8009856 <_strtod_l+0xb26>
 80096f2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80096f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80096fa:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80096fe:	ec4b ab10 	vmov	d0, sl, fp
 8009702:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009706:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800970a:	f001 ff29 	bl	800b560 <__ulp>
 800970e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009712:	ec53 2b10 	vmov	r2, r3, d0
 8009716:	f7f6 ff6f 	bl	80005f8 <__aeabi_dmul>
 800971a:	4652      	mov	r2, sl
 800971c:	465b      	mov	r3, fp
 800971e:	f7f6 fdb5 	bl	800028c <__adddf3>
 8009722:	460b      	mov	r3, r1
 8009724:	4981      	ldr	r1, [pc, #516]	; (800992c <_strtod_l+0xbfc>)
 8009726:	4a83      	ldr	r2, [pc, #524]	; (8009934 <_strtod_l+0xc04>)
 8009728:	4019      	ands	r1, r3
 800972a:	4291      	cmp	r1, r2
 800972c:	4682      	mov	sl, r0
 800972e:	d95e      	bls.n	80097ee <_strtod_l+0xabe>
 8009730:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009732:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009736:	4293      	cmp	r3, r2
 8009738:	d103      	bne.n	8009742 <_strtod_l+0xa12>
 800973a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800973c:	3301      	adds	r3, #1
 800973e:	f43f ad43 	beq.w	80091c8 <_strtod_l+0x498>
 8009742:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009940 <_strtod_l+0xc10>
 8009746:	f04f 3aff 	mov.w	sl, #4294967295
 800974a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800974c:	4620      	mov	r0, r4
 800974e:	f001 fbdb 	bl	800af08 <_Bfree>
 8009752:	9907      	ldr	r1, [sp, #28]
 8009754:	4620      	mov	r0, r4
 8009756:	f001 fbd7 	bl	800af08 <_Bfree>
 800975a:	4631      	mov	r1, r6
 800975c:	4620      	mov	r0, r4
 800975e:	f001 fbd3 	bl	800af08 <_Bfree>
 8009762:	4629      	mov	r1, r5
 8009764:	4620      	mov	r0, r4
 8009766:	f001 fbcf 	bl	800af08 <_Bfree>
 800976a:	e613      	b.n	8009394 <_strtod_l+0x664>
 800976c:	f1ba 0f00 	cmp.w	sl, #0
 8009770:	d11b      	bne.n	80097aa <_strtod_l+0xa7a>
 8009772:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009776:	b9f3      	cbnz	r3, 80097b6 <_strtod_l+0xa86>
 8009778:	4b6b      	ldr	r3, [pc, #428]	; (8009928 <_strtod_l+0xbf8>)
 800977a:	2200      	movs	r2, #0
 800977c:	4640      	mov	r0, r8
 800977e:	4649      	mov	r1, r9
 8009780:	f7f7 f9ac 	bl	8000adc <__aeabi_dcmplt>
 8009784:	b9d0      	cbnz	r0, 80097bc <_strtod_l+0xa8c>
 8009786:	4640      	mov	r0, r8
 8009788:	4649      	mov	r1, r9
 800978a:	4b6b      	ldr	r3, [pc, #428]	; (8009938 <_strtod_l+0xc08>)
 800978c:	2200      	movs	r2, #0
 800978e:	f7f6 ff33 	bl	80005f8 <__aeabi_dmul>
 8009792:	4680      	mov	r8, r0
 8009794:	4689      	mov	r9, r1
 8009796:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800979a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800979e:	931b      	str	r3, [sp, #108]	; 0x6c
 80097a0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80097a4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80097a8:	e79b      	b.n	80096e2 <_strtod_l+0x9b2>
 80097aa:	f1ba 0f01 	cmp.w	sl, #1
 80097ae:	d102      	bne.n	80097b6 <_strtod_l+0xa86>
 80097b0:	2f00      	cmp	r7, #0
 80097b2:	f43f ad7e 	beq.w	80092b2 <_strtod_l+0x582>
 80097b6:	4b61      	ldr	r3, [pc, #388]	; (800993c <_strtod_l+0xc0c>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	e78c      	b.n	80096d6 <_strtod_l+0x9a6>
 80097bc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009938 <_strtod_l+0xc08>
 80097c0:	f04f 0800 	mov.w	r8, #0
 80097c4:	e7e7      	b.n	8009796 <_strtod_l+0xa66>
 80097c6:	4b5c      	ldr	r3, [pc, #368]	; (8009938 <_strtod_l+0xc08>)
 80097c8:	4640      	mov	r0, r8
 80097ca:	4649      	mov	r1, r9
 80097cc:	2200      	movs	r2, #0
 80097ce:	f7f6 ff13 	bl	80005f8 <__aeabi_dmul>
 80097d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80097d4:	4680      	mov	r8, r0
 80097d6:	4689      	mov	r9, r1
 80097d8:	b933      	cbnz	r3, 80097e8 <_strtod_l+0xab8>
 80097da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097de:	9012      	str	r0, [sp, #72]	; 0x48
 80097e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80097e2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80097e6:	e7dd      	b.n	80097a4 <_strtod_l+0xa74>
 80097e8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 80097ec:	e7f9      	b.n	80097e2 <_strtod_l+0xab2>
 80097ee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80097f2:	9b04      	ldr	r3, [sp, #16]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d1a8      	bne.n	800974a <_strtod_l+0xa1a>
 80097f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80097fc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80097fe:	0d1b      	lsrs	r3, r3, #20
 8009800:	051b      	lsls	r3, r3, #20
 8009802:	429a      	cmp	r2, r3
 8009804:	d1a1      	bne.n	800974a <_strtod_l+0xa1a>
 8009806:	4640      	mov	r0, r8
 8009808:	4649      	mov	r1, r9
 800980a:	f7f7 fa55 	bl	8000cb8 <__aeabi_d2lz>
 800980e:	f7f6 fec5 	bl	800059c <__aeabi_l2d>
 8009812:	4602      	mov	r2, r0
 8009814:	460b      	mov	r3, r1
 8009816:	4640      	mov	r0, r8
 8009818:	4649      	mov	r1, r9
 800981a:	f7f6 fd35 	bl	8000288 <__aeabi_dsub>
 800981e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009820:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009824:	ea43 030a 	orr.w	r3, r3, sl
 8009828:	4313      	orrs	r3, r2
 800982a:	4680      	mov	r8, r0
 800982c:	4689      	mov	r9, r1
 800982e:	d053      	beq.n	80098d8 <_strtod_l+0xba8>
 8009830:	a335      	add	r3, pc, #212	; (adr r3, 8009908 <_strtod_l+0xbd8>)
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	f7f7 f951 	bl	8000adc <__aeabi_dcmplt>
 800983a:	2800      	cmp	r0, #0
 800983c:	f47f acce 	bne.w	80091dc <_strtod_l+0x4ac>
 8009840:	a333      	add	r3, pc, #204	; (adr r3, 8009910 <_strtod_l+0xbe0>)
 8009842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009846:	4640      	mov	r0, r8
 8009848:	4649      	mov	r1, r9
 800984a:	f7f7 f965 	bl	8000b18 <__aeabi_dcmpgt>
 800984e:	2800      	cmp	r0, #0
 8009850:	f43f af7b 	beq.w	800974a <_strtod_l+0xa1a>
 8009854:	e4c2      	b.n	80091dc <_strtod_l+0x4ac>
 8009856:	9b04      	ldr	r3, [sp, #16]
 8009858:	b333      	cbz	r3, 80098a8 <_strtod_l+0xb78>
 800985a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800985c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009860:	d822      	bhi.n	80098a8 <_strtod_l+0xb78>
 8009862:	a32d      	add	r3, pc, #180	; (adr r3, 8009918 <_strtod_l+0xbe8>)
 8009864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009868:	4640      	mov	r0, r8
 800986a:	4649      	mov	r1, r9
 800986c:	f7f7 f940 	bl	8000af0 <__aeabi_dcmple>
 8009870:	b1a0      	cbz	r0, 800989c <_strtod_l+0xb6c>
 8009872:	4649      	mov	r1, r9
 8009874:	4640      	mov	r0, r8
 8009876:	f7f7 f997 	bl	8000ba8 <__aeabi_d2uiz>
 800987a:	2801      	cmp	r0, #1
 800987c:	bf38      	it	cc
 800987e:	2001      	movcc	r0, #1
 8009880:	f7f6 fe40 	bl	8000504 <__aeabi_ui2d>
 8009884:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009886:	4680      	mov	r8, r0
 8009888:	4689      	mov	r9, r1
 800988a:	bb13      	cbnz	r3, 80098d2 <_strtod_l+0xba2>
 800988c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009890:	9014      	str	r0, [sp, #80]	; 0x50
 8009892:	9315      	str	r3, [sp, #84]	; 0x54
 8009894:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009898:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800989c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800989e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80098a0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80098a4:	1a9b      	subs	r3, r3, r2
 80098a6:	930d      	str	r3, [sp, #52]	; 0x34
 80098a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098ac:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80098b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80098b4:	f001 fe54 	bl	800b560 <__ulp>
 80098b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098bc:	ec53 2b10 	vmov	r2, r3, d0
 80098c0:	f7f6 fe9a 	bl	80005f8 <__aeabi_dmul>
 80098c4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80098c8:	f7f6 fce0 	bl	800028c <__adddf3>
 80098cc:	4682      	mov	sl, r0
 80098ce:	468b      	mov	fp, r1
 80098d0:	e78f      	b.n	80097f2 <_strtod_l+0xac2>
 80098d2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80098d6:	e7dd      	b.n	8009894 <_strtod_l+0xb64>
 80098d8:	a311      	add	r3, pc, #68	; (adr r3, 8009920 <_strtod_l+0xbf0>)
 80098da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098de:	f7f7 f8fd 	bl	8000adc <__aeabi_dcmplt>
 80098e2:	e7b4      	b.n	800984e <_strtod_l+0xb1e>
 80098e4:	2300      	movs	r3, #0
 80098e6:	930e      	str	r3, [sp, #56]	; 0x38
 80098e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80098ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098ec:	6013      	str	r3, [r2, #0]
 80098ee:	f7ff ba65 	b.w	8008dbc <_strtod_l+0x8c>
 80098f2:	2b65      	cmp	r3, #101	; 0x65
 80098f4:	f43f ab5d 	beq.w	8008fb2 <_strtod_l+0x282>
 80098f8:	2b45      	cmp	r3, #69	; 0x45
 80098fa:	f43f ab5a 	beq.w	8008fb2 <_strtod_l+0x282>
 80098fe:	2201      	movs	r2, #1
 8009900:	f7ff bb92 	b.w	8009028 <_strtod_l+0x2f8>
 8009904:	f3af 8000 	nop.w
 8009908:	94a03595 	.word	0x94a03595
 800990c:	3fdfffff 	.word	0x3fdfffff
 8009910:	35afe535 	.word	0x35afe535
 8009914:	3fe00000 	.word	0x3fe00000
 8009918:	ffc00000 	.word	0xffc00000
 800991c:	41dfffff 	.word	0x41dfffff
 8009920:	94a03595 	.word	0x94a03595
 8009924:	3fcfffff 	.word	0x3fcfffff
 8009928:	3ff00000 	.word	0x3ff00000
 800992c:	7ff00000 	.word	0x7ff00000
 8009930:	7fe00000 	.word	0x7fe00000
 8009934:	7c9fffff 	.word	0x7c9fffff
 8009938:	3fe00000 	.word	0x3fe00000
 800993c:	bff00000 	.word	0xbff00000
 8009940:	7fefffff 	.word	0x7fefffff

08009944 <_strtod_r>:
 8009944:	4b01      	ldr	r3, [pc, #4]	; (800994c <_strtod_r+0x8>)
 8009946:	f7ff b9f3 	b.w	8008d30 <_strtod_l>
 800994a:	bf00      	nop
 800994c:	2000007c 	.word	0x2000007c

08009950 <_strtol_l.isra.0>:
 8009950:	2b01      	cmp	r3, #1
 8009952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009956:	d001      	beq.n	800995c <_strtol_l.isra.0+0xc>
 8009958:	2b24      	cmp	r3, #36	; 0x24
 800995a:	d906      	bls.n	800996a <_strtol_l.isra.0+0x1a>
 800995c:	f7fe faf8 	bl	8007f50 <__errno>
 8009960:	2316      	movs	r3, #22
 8009962:	6003      	str	r3, [r0, #0]
 8009964:	2000      	movs	r0, #0
 8009966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800996a:	4f3a      	ldr	r7, [pc, #232]	; (8009a54 <_strtol_l.isra.0+0x104>)
 800996c:	468e      	mov	lr, r1
 800996e:	4676      	mov	r6, lr
 8009970:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009974:	5de5      	ldrb	r5, [r4, r7]
 8009976:	f015 0508 	ands.w	r5, r5, #8
 800997a:	d1f8      	bne.n	800996e <_strtol_l.isra.0+0x1e>
 800997c:	2c2d      	cmp	r4, #45	; 0x2d
 800997e:	d134      	bne.n	80099ea <_strtol_l.isra.0+0x9a>
 8009980:	f89e 4000 	ldrb.w	r4, [lr]
 8009984:	f04f 0801 	mov.w	r8, #1
 8009988:	f106 0e02 	add.w	lr, r6, #2
 800998c:	2b00      	cmp	r3, #0
 800998e:	d05c      	beq.n	8009a4a <_strtol_l.isra.0+0xfa>
 8009990:	2b10      	cmp	r3, #16
 8009992:	d10c      	bne.n	80099ae <_strtol_l.isra.0+0x5e>
 8009994:	2c30      	cmp	r4, #48	; 0x30
 8009996:	d10a      	bne.n	80099ae <_strtol_l.isra.0+0x5e>
 8009998:	f89e 4000 	ldrb.w	r4, [lr]
 800999c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80099a0:	2c58      	cmp	r4, #88	; 0x58
 80099a2:	d14d      	bne.n	8009a40 <_strtol_l.isra.0+0xf0>
 80099a4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80099a8:	2310      	movs	r3, #16
 80099aa:	f10e 0e02 	add.w	lr, lr, #2
 80099ae:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80099b2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80099b6:	2600      	movs	r6, #0
 80099b8:	fbbc f9f3 	udiv	r9, ip, r3
 80099bc:	4635      	mov	r5, r6
 80099be:	fb03 ca19 	mls	sl, r3, r9, ip
 80099c2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80099c6:	2f09      	cmp	r7, #9
 80099c8:	d818      	bhi.n	80099fc <_strtol_l.isra.0+0xac>
 80099ca:	463c      	mov	r4, r7
 80099cc:	42a3      	cmp	r3, r4
 80099ce:	dd24      	ble.n	8009a1a <_strtol_l.isra.0+0xca>
 80099d0:	2e00      	cmp	r6, #0
 80099d2:	db1f      	blt.n	8009a14 <_strtol_l.isra.0+0xc4>
 80099d4:	45a9      	cmp	r9, r5
 80099d6:	d31d      	bcc.n	8009a14 <_strtol_l.isra.0+0xc4>
 80099d8:	d101      	bne.n	80099de <_strtol_l.isra.0+0x8e>
 80099da:	45a2      	cmp	sl, r4
 80099dc:	db1a      	blt.n	8009a14 <_strtol_l.isra.0+0xc4>
 80099de:	fb05 4503 	mla	r5, r5, r3, r4
 80099e2:	2601      	movs	r6, #1
 80099e4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80099e8:	e7eb      	b.n	80099c2 <_strtol_l.isra.0+0x72>
 80099ea:	2c2b      	cmp	r4, #43	; 0x2b
 80099ec:	bf08      	it	eq
 80099ee:	f89e 4000 	ldrbeq.w	r4, [lr]
 80099f2:	46a8      	mov	r8, r5
 80099f4:	bf08      	it	eq
 80099f6:	f106 0e02 	addeq.w	lr, r6, #2
 80099fa:	e7c7      	b.n	800998c <_strtol_l.isra.0+0x3c>
 80099fc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009a00:	2f19      	cmp	r7, #25
 8009a02:	d801      	bhi.n	8009a08 <_strtol_l.isra.0+0xb8>
 8009a04:	3c37      	subs	r4, #55	; 0x37
 8009a06:	e7e1      	b.n	80099cc <_strtol_l.isra.0+0x7c>
 8009a08:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009a0c:	2f19      	cmp	r7, #25
 8009a0e:	d804      	bhi.n	8009a1a <_strtol_l.isra.0+0xca>
 8009a10:	3c57      	subs	r4, #87	; 0x57
 8009a12:	e7db      	b.n	80099cc <_strtol_l.isra.0+0x7c>
 8009a14:	f04f 36ff 	mov.w	r6, #4294967295
 8009a18:	e7e4      	b.n	80099e4 <_strtol_l.isra.0+0x94>
 8009a1a:	2e00      	cmp	r6, #0
 8009a1c:	da05      	bge.n	8009a2a <_strtol_l.isra.0+0xda>
 8009a1e:	2322      	movs	r3, #34	; 0x22
 8009a20:	6003      	str	r3, [r0, #0]
 8009a22:	4665      	mov	r5, ip
 8009a24:	b942      	cbnz	r2, 8009a38 <_strtol_l.isra.0+0xe8>
 8009a26:	4628      	mov	r0, r5
 8009a28:	e79d      	b.n	8009966 <_strtol_l.isra.0+0x16>
 8009a2a:	f1b8 0f00 	cmp.w	r8, #0
 8009a2e:	d000      	beq.n	8009a32 <_strtol_l.isra.0+0xe2>
 8009a30:	426d      	negs	r5, r5
 8009a32:	2a00      	cmp	r2, #0
 8009a34:	d0f7      	beq.n	8009a26 <_strtol_l.isra.0+0xd6>
 8009a36:	b10e      	cbz	r6, 8009a3c <_strtol_l.isra.0+0xec>
 8009a38:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009a3c:	6011      	str	r1, [r2, #0]
 8009a3e:	e7f2      	b.n	8009a26 <_strtol_l.isra.0+0xd6>
 8009a40:	2430      	movs	r4, #48	; 0x30
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1b3      	bne.n	80099ae <_strtol_l.isra.0+0x5e>
 8009a46:	2308      	movs	r3, #8
 8009a48:	e7b1      	b.n	80099ae <_strtol_l.isra.0+0x5e>
 8009a4a:	2c30      	cmp	r4, #48	; 0x30
 8009a4c:	d0a4      	beq.n	8009998 <_strtol_l.isra.0+0x48>
 8009a4e:	230a      	movs	r3, #10
 8009a50:	e7ad      	b.n	80099ae <_strtol_l.isra.0+0x5e>
 8009a52:	bf00      	nop
 8009a54:	0800e759 	.word	0x0800e759

08009a58 <_strtol_r>:
 8009a58:	f7ff bf7a 	b.w	8009950 <_strtol_l.isra.0>

08009a5c <quorem>:
 8009a5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a60:	6903      	ldr	r3, [r0, #16]
 8009a62:	690c      	ldr	r4, [r1, #16]
 8009a64:	42a3      	cmp	r3, r4
 8009a66:	4607      	mov	r7, r0
 8009a68:	f2c0 8081 	blt.w	8009b6e <quorem+0x112>
 8009a6c:	3c01      	subs	r4, #1
 8009a6e:	f101 0814 	add.w	r8, r1, #20
 8009a72:	f100 0514 	add.w	r5, r0, #20
 8009a76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a7a:	9301      	str	r3, [sp, #4]
 8009a7c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a80:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a84:	3301      	adds	r3, #1
 8009a86:	429a      	cmp	r2, r3
 8009a88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009a8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a90:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a94:	d331      	bcc.n	8009afa <quorem+0x9e>
 8009a96:	f04f 0e00 	mov.w	lr, #0
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	46ac      	mov	ip, r5
 8009a9e:	46f2      	mov	sl, lr
 8009aa0:	f850 2b04 	ldr.w	r2, [r0], #4
 8009aa4:	b293      	uxth	r3, r2
 8009aa6:	fb06 e303 	mla	r3, r6, r3, lr
 8009aaa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	ebaa 0303 	sub.w	r3, sl, r3
 8009ab4:	0c12      	lsrs	r2, r2, #16
 8009ab6:	f8dc a000 	ldr.w	sl, [ip]
 8009aba:	fb06 e202 	mla	r2, r6, r2, lr
 8009abe:	fa13 f38a 	uxtah	r3, r3, sl
 8009ac2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009ac6:	fa1f fa82 	uxth.w	sl, r2
 8009aca:	f8dc 2000 	ldr.w	r2, [ip]
 8009ace:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009ad2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009adc:	4581      	cmp	r9, r0
 8009ade:	f84c 3b04 	str.w	r3, [ip], #4
 8009ae2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009ae6:	d2db      	bcs.n	8009aa0 <quorem+0x44>
 8009ae8:	f855 300b 	ldr.w	r3, [r5, fp]
 8009aec:	b92b      	cbnz	r3, 8009afa <quorem+0x9e>
 8009aee:	9b01      	ldr	r3, [sp, #4]
 8009af0:	3b04      	subs	r3, #4
 8009af2:	429d      	cmp	r5, r3
 8009af4:	461a      	mov	r2, r3
 8009af6:	d32e      	bcc.n	8009b56 <quorem+0xfa>
 8009af8:	613c      	str	r4, [r7, #16]
 8009afa:	4638      	mov	r0, r7
 8009afc:	f001 fc8c 	bl	800b418 <__mcmp>
 8009b00:	2800      	cmp	r0, #0
 8009b02:	db24      	blt.n	8009b4e <quorem+0xf2>
 8009b04:	3601      	adds	r6, #1
 8009b06:	4628      	mov	r0, r5
 8009b08:	f04f 0c00 	mov.w	ip, #0
 8009b0c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009b10:	f8d0 e000 	ldr.w	lr, [r0]
 8009b14:	b293      	uxth	r3, r2
 8009b16:	ebac 0303 	sub.w	r3, ip, r3
 8009b1a:	0c12      	lsrs	r2, r2, #16
 8009b1c:	fa13 f38e 	uxtah	r3, r3, lr
 8009b20:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009b24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b2e:	45c1      	cmp	r9, r8
 8009b30:	f840 3b04 	str.w	r3, [r0], #4
 8009b34:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009b38:	d2e8      	bcs.n	8009b0c <quorem+0xb0>
 8009b3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b42:	b922      	cbnz	r2, 8009b4e <quorem+0xf2>
 8009b44:	3b04      	subs	r3, #4
 8009b46:	429d      	cmp	r5, r3
 8009b48:	461a      	mov	r2, r3
 8009b4a:	d30a      	bcc.n	8009b62 <quorem+0x106>
 8009b4c:	613c      	str	r4, [r7, #16]
 8009b4e:	4630      	mov	r0, r6
 8009b50:	b003      	add	sp, #12
 8009b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b56:	6812      	ldr	r2, [r2, #0]
 8009b58:	3b04      	subs	r3, #4
 8009b5a:	2a00      	cmp	r2, #0
 8009b5c:	d1cc      	bne.n	8009af8 <quorem+0x9c>
 8009b5e:	3c01      	subs	r4, #1
 8009b60:	e7c7      	b.n	8009af2 <quorem+0x96>
 8009b62:	6812      	ldr	r2, [r2, #0]
 8009b64:	3b04      	subs	r3, #4
 8009b66:	2a00      	cmp	r2, #0
 8009b68:	d1f0      	bne.n	8009b4c <quorem+0xf0>
 8009b6a:	3c01      	subs	r4, #1
 8009b6c:	e7eb      	b.n	8009b46 <quorem+0xea>
 8009b6e:	2000      	movs	r0, #0
 8009b70:	e7ee      	b.n	8009b50 <quorem+0xf4>
 8009b72:	0000      	movs	r0, r0
 8009b74:	0000      	movs	r0, r0
	...

08009b78 <_dtoa_r>:
 8009b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b7c:	ed2d 8b02 	vpush	{d8}
 8009b80:	ec57 6b10 	vmov	r6, r7, d0
 8009b84:	b095      	sub	sp, #84	; 0x54
 8009b86:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009b88:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009b8c:	9105      	str	r1, [sp, #20]
 8009b8e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009b92:	4604      	mov	r4, r0
 8009b94:	9209      	str	r2, [sp, #36]	; 0x24
 8009b96:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b98:	b975      	cbnz	r5, 8009bb8 <_dtoa_r+0x40>
 8009b9a:	2010      	movs	r0, #16
 8009b9c:	f001 f94c 	bl	800ae38 <malloc>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	6260      	str	r0, [r4, #36]	; 0x24
 8009ba4:	b920      	cbnz	r0, 8009bb0 <_dtoa_r+0x38>
 8009ba6:	4bb2      	ldr	r3, [pc, #712]	; (8009e70 <_dtoa_r+0x2f8>)
 8009ba8:	21ea      	movs	r1, #234	; 0xea
 8009baa:	48b2      	ldr	r0, [pc, #712]	; (8009e74 <_dtoa_r+0x2fc>)
 8009bac:	f002 f874 	bl	800bc98 <__assert_func>
 8009bb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009bb4:	6005      	str	r5, [r0, #0]
 8009bb6:	60c5      	str	r5, [r0, #12]
 8009bb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bba:	6819      	ldr	r1, [r3, #0]
 8009bbc:	b151      	cbz	r1, 8009bd4 <_dtoa_r+0x5c>
 8009bbe:	685a      	ldr	r2, [r3, #4]
 8009bc0:	604a      	str	r2, [r1, #4]
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	4093      	lsls	r3, r2
 8009bc6:	608b      	str	r3, [r1, #8]
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f001 f99d 	bl	800af08 <_Bfree>
 8009bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	1e3b      	subs	r3, r7, #0
 8009bd6:	bfb9      	ittee	lt
 8009bd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009bdc:	9303      	strlt	r3, [sp, #12]
 8009bde:	2300      	movge	r3, #0
 8009be0:	f8c8 3000 	strge.w	r3, [r8]
 8009be4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009be8:	4ba3      	ldr	r3, [pc, #652]	; (8009e78 <_dtoa_r+0x300>)
 8009bea:	bfbc      	itt	lt
 8009bec:	2201      	movlt	r2, #1
 8009bee:	f8c8 2000 	strlt.w	r2, [r8]
 8009bf2:	ea33 0309 	bics.w	r3, r3, r9
 8009bf6:	d11b      	bne.n	8009c30 <_dtoa_r+0xb8>
 8009bf8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009bfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8009bfe:	6013      	str	r3, [r2, #0]
 8009c00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c04:	4333      	orrs	r3, r6
 8009c06:	f000 857a 	beq.w	800a6fe <_dtoa_r+0xb86>
 8009c0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c0c:	b963      	cbnz	r3, 8009c28 <_dtoa_r+0xb0>
 8009c0e:	4b9b      	ldr	r3, [pc, #620]	; (8009e7c <_dtoa_r+0x304>)
 8009c10:	e024      	b.n	8009c5c <_dtoa_r+0xe4>
 8009c12:	4b9b      	ldr	r3, [pc, #620]	; (8009e80 <_dtoa_r+0x308>)
 8009c14:	9300      	str	r3, [sp, #0]
 8009c16:	3308      	adds	r3, #8
 8009c18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	9800      	ldr	r0, [sp, #0]
 8009c1e:	b015      	add	sp, #84	; 0x54
 8009c20:	ecbd 8b02 	vpop	{d8}
 8009c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c28:	4b94      	ldr	r3, [pc, #592]	; (8009e7c <_dtoa_r+0x304>)
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	3303      	adds	r3, #3
 8009c2e:	e7f3      	b.n	8009c18 <_dtoa_r+0xa0>
 8009c30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c34:	2200      	movs	r2, #0
 8009c36:	ec51 0b17 	vmov	r0, r1, d7
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009c40:	f7f6 ff42 	bl	8000ac8 <__aeabi_dcmpeq>
 8009c44:	4680      	mov	r8, r0
 8009c46:	b158      	cbz	r0, 8009c60 <_dtoa_r+0xe8>
 8009c48:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	6013      	str	r3, [r2, #0]
 8009c4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	f000 8551 	beq.w	800a6f8 <_dtoa_r+0xb80>
 8009c56:	488b      	ldr	r0, [pc, #556]	; (8009e84 <_dtoa_r+0x30c>)
 8009c58:	6018      	str	r0, [r3, #0]
 8009c5a:	1e43      	subs	r3, r0, #1
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	e7dd      	b.n	8009c1c <_dtoa_r+0xa4>
 8009c60:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009c64:	aa12      	add	r2, sp, #72	; 0x48
 8009c66:	a913      	add	r1, sp, #76	; 0x4c
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f001 fcf5 	bl	800b658 <__d2b>
 8009c6e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c72:	4683      	mov	fp, r0
 8009c74:	2d00      	cmp	r5, #0
 8009c76:	d07c      	beq.n	8009d72 <_dtoa_r+0x1fa>
 8009c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c7a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8009c7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c82:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009c86:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009c8a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009c8e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009c92:	4b7d      	ldr	r3, [pc, #500]	; (8009e88 <_dtoa_r+0x310>)
 8009c94:	2200      	movs	r2, #0
 8009c96:	4630      	mov	r0, r6
 8009c98:	4639      	mov	r1, r7
 8009c9a:	f7f6 faf5 	bl	8000288 <__aeabi_dsub>
 8009c9e:	a36e      	add	r3, pc, #440	; (adr r3, 8009e58 <_dtoa_r+0x2e0>)
 8009ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca4:	f7f6 fca8 	bl	80005f8 <__aeabi_dmul>
 8009ca8:	a36d      	add	r3, pc, #436	; (adr r3, 8009e60 <_dtoa_r+0x2e8>)
 8009caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cae:	f7f6 faed 	bl	800028c <__adddf3>
 8009cb2:	4606      	mov	r6, r0
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	460f      	mov	r7, r1
 8009cb8:	f7f6 fc34 	bl	8000524 <__aeabi_i2d>
 8009cbc:	a36a      	add	r3, pc, #424	; (adr r3, 8009e68 <_dtoa_r+0x2f0>)
 8009cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc2:	f7f6 fc99 	bl	80005f8 <__aeabi_dmul>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4630      	mov	r0, r6
 8009ccc:	4639      	mov	r1, r7
 8009cce:	f7f6 fadd 	bl	800028c <__adddf3>
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460f      	mov	r7, r1
 8009cd6:	f7f6 ff3f 	bl	8000b58 <__aeabi_d2iz>
 8009cda:	2200      	movs	r2, #0
 8009cdc:	4682      	mov	sl, r0
 8009cde:	2300      	movs	r3, #0
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	4639      	mov	r1, r7
 8009ce4:	f7f6 fefa 	bl	8000adc <__aeabi_dcmplt>
 8009ce8:	b148      	cbz	r0, 8009cfe <_dtoa_r+0x186>
 8009cea:	4650      	mov	r0, sl
 8009cec:	f7f6 fc1a 	bl	8000524 <__aeabi_i2d>
 8009cf0:	4632      	mov	r2, r6
 8009cf2:	463b      	mov	r3, r7
 8009cf4:	f7f6 fee8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cf8:	b908      	cbnz	r0, 8009cfe <_dtoa_r+0x186>
 8009cfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009cfe:	f1ba 0f16 	cmp.w	sl, #22
 8009d02:	d854      	bhi.n	8009dae <_dtoa_r+0x236>
 8009d04:	4b61      	ldr	r3, [pc, #388]	; (8009e8c <_dtoa_r+0x314>)
 8009d06:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009d12:	f7f6 fee3 	bl	8000adc <__aeabi_dcmplt>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d04b      	beq.n	8009db2 <_dtoa_r+0x23a>
 8009d1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d1e:	2300      	movs	r3, #0
 8009d20:	930e      	str	r3, [sp, #56]	; 0x38
 8009d22:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d24:	1b5d      	subs	r5, r3, r5
 8009d26:	1e6b      	subs	r3, r5, #1
 8009d28:	9304      	str	r3, [sp, #16]
 8009d2a:	bf43      	ittte	mi
 8009d2c:	2300      	movmi	r3, #0
 8009d2e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009d32:	9304      	strmi	r3, [sp, #16]
 8009d34:	f04f 0800 	movpl.w	r8, #0
 8009d38:	f1ba 0f00 	cmp.w	sl, #0
 8009d3c:	db3b      	blt.n	8009db6 <_dtoa_r+0x23e>
 8009d3e:	9b04      	ldr	r3, [sp, #16]
 8009d40:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009d44:	4453      	add	r3, sl
 8009d46:	9304      	str	r3, [sp, #16]
 8009d48:	2300      	movs	r3, #0
 8009d4a:	9306      	str	r3, [sp, #24]
 8009d4c:	9b05      	ldr	r3, [sp, #20]
 8009d4e:	2b09      	cmp	r3, #9
 8009d50:	d869      	bhi.n	8009e26 <_dtoa_r+0x2ae>
 8009d52:	2b05      	cmp	r3, #5
 8009d54:	bfc4      	itt	gt
 8009d56:	3b04      	subgt	r3, #4
 8009d58:	9305      	strgt	r3, [sp, #20]
 8009d5a:	9b05      	ldr	r3, [sp, #20]
 8009d5c:	f1a3 0302 	sub.w	r3, r3, #2
 8009d60:	bfcc      	ite	gt
 8009d62:	2500      	movgt	r5, #0
 8009d64:	2501      	movle	r5, #1
 8009d66:	2b03      	cmp	r3, #3
 8009d68:	d869      	bhi.n	8009e3e <_dtoa_r+0x2c6>
 8009d6a:	e8df f003 	tbb	[pc, r3]
 8009d6e:	4e2c      	.short	0x4e2c
 8009d70:	5a4c      	.short	0x5a4c
 8009d72:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009d76:	441d      	add	r5, r3
 8009d78:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009d7c:	2b20      	cmp	r3, #32
 8009d7e:	bfc1      	itttt	gt
 8009d80:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009d84:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009d88:	fa09 f303 	lslgt.w	r3, r9, r3
 8009d8c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009d90:	bfda      	itte	le
 8009d92:	f1c3 0320 	rsble	r3, r3, #32
 8009d96:	fa06 f003 	lslle.w	r0, r6, r3
 8009d9a:	4318      	orrgt	r0, r3
 8009d9c:	f7f6 fbb2 	bl	8000504 <__aeabi_ui2d>
 8009da0:	2301      	movs	r3, #1
 8009da2:	4606      	mov	r6, r0
 8009da4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009da8:	3d01      	subs	r5, #1
 8009daa:	9310      	str	r3, [sp, #64]	; 0x40
 8009dac:	e771      	b.n	8009c92 <_dtoa_r+0x11a>
 8009dae:	2301      	movs	r3, #1
 8009db0:	e7b6      	b.n	8009d20 <_dtoa_r+0x1a8>
 8009db2:	900e      	str	r0, [sp, #56]	; 0x38
 8009db4:	e7b5      	b.n	8009d22 <_dtoa_r+0x1aa>
 8009db6:	f1ca 0300 	rsb	r3, sl, #0
 8009dba:	9306      	str	r3, [sp, #24]
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	eba8 080a 	sub.w	r8, r8, sl
 8009dc2:	930d      	str	r3, [sp, #52]	; 0x34
 8009dc4:	e7c2      	b.n	8009d4c <_dtoa_r+0x1d4>
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	9308      	str	r3, [sp, #32]
 8009dca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	dc39      	bgt.n	8009e44 <_dtoa_r+0x2cc>
 8009dd0:	f04f 0901 	mov.w	r9, #1
 8009dd4:	f8cd 9004 	str.w	r9, [sp, #4]
 8009dd8:	464b      	mov	r3, r9
 8009dda:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009dde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009de0:	2200      	movs	r2, #0
 8009de2:	6042      	str	r2, [r0, #4]
 8009de4:	2204      	movs	r2, #4
 8009de6:	f102 0614 	add.w	r6, r2, #20
 8009dea:	429e      	cmp	r6, r3
 8009dec:	6841      	ldr	r1, [r0, #4]
 8009dee:	d92f      	bls.n	8009e50 <_dtoa_r+0x2d8>
 8009df0:	4620      	mov	r0, r4
 8009df2:	f001 f849 	bl	800ae88 <_Balloc>
 8009df6:	9000      	str	r0, [sp, #0]
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d14b      	bne.n	8009e94 <_dtoa_r+0x31c>
 8009dfc:	4b24      	ldr	r3, [pc, #144]	; (8009e90 <_dtoa_r+0x318>)
 8009dfe:	4602      	mov	r2, r0
 8009e00:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009e04:	e6d1      	b.n	8009baa <_dtoa_r+0x32>
 8009e06:	2301      	movs	r3, #1
 8009e08:	e7de      	b.n	8009dc8 <_dtoa_r+0x250>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	9308      	str	r3, [sp, #32]
 8009e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e10:	eb0a 0903 	add.w	r9, sl, r3
 8009e14:	f109 0301 	add.w	r3, r9, #1
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	9301      	str	r3, [sp, #4]
 8009e1c:	bfb8      	it	lt
 8009e1e:	2301      	movlt	r3, #1
 8009e20:	e7dd      	b.n	8009dde <_dtoa_r+0x266>
 8009e22:	2301      	movs	r3, #1
 8009e24:	e7f2      	b.n	8009e0c <_dtoa_r+0x294>
 8009e26:	2501      	movs	r5, #1
 8009e28:	2300      	movs	r3, #0
 8009e2a:	9305      	str	r3, [sp, #20]
 8009e2c:	9508      	str	r5, [sp, #32]
 8009e2e:	f04f 39ff 	mov.w	r9, #4294967295
 8009e32:	2200      	movs	r2, #0
 8009e34:	f8cd 9004 	str.w	r9, [sp, #4]
 8009e38:	2312      	movs	r3, #18
 8009e3a:	9209      	str	r2, [sp, #36]	; 0x24
 8009e3c:	e7cf      	b.n	8009dde <_dtoa_r+0x266>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	9308      	str	r3, [sp, #32]
 8009e42:	e7f4      	b.n	8009e2e <_dtoa_r+0x2b6>
 8009e44:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009e48:	f8cd 9004 	str.w	r9, [sp, #4]
 8009e4c:	464b      	mov	r3, r9
 8009e4e:	e7c6      	b.n	8009dde <_dtoa_r+0x266>
 8009e50:	3101      	adds	r1, #1
 8009e52:	6041      	str	r1, [r0, #4]
 8009e54:	0052      	lsls	r2, r2, #1
 8009e56:	e7c6      	b.n	8009de6 <_dtoa_r+0x26e>
 8009e58:	636f4361 	.word	0x636f4361
 8009e5c:	3fd287a7 	.word	0x3fd287a7
 8009e60:	8b60c8b3 	.word	0x8b60c8b3
 8009e64:	3fc68a28 	.word	0x3fc68a28
 8009e68:	509f79fb 	.word	0x509f79fb
 8009e6c:	3fd34413 	.word	0x3fd34413
 8009e70:	0800e866 	.word	0x0800e866
 8009e74:	0800e87d 	.word	0x0800e87d
 8009e78:	7ff00000 	.word	0x7ff00000
 8009e7c:	0800e862 	.word	0x0800e862
 8009e80:	0800e859 	.word	0x0800e859
 8009e84:	0800e6d9 	.word	0x0800e6d9
 8009e88:	3ff80000 	.word	0x3ff80000
 8009e8c:	0800e9f8 	.word	0x0800e9f8
 8009e90:	0800e8dc 	.word	0x0800e8dc
 8009e94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009e96:	9a00      	ldr	r2, [sp, #0]
 8009e98:	601a      	str	r2, [r3, #0]
 8009e9a:	9b01      	ldr	r3, [sp, #4]
 8009e9c:	2b0e      	cmp	r3, #14
 8009e9e:	f200 80ad 	bhi.w	8009ffc <_dtoa_r+0x484>
 8009ea2:	2d00      	cmp	r5, #0
 8009ea4:	f000 80aa 	beq.w	8009ffc <_dtoa_r+0x484>
 8009ea8:	f1ba 0f00 	cmp.w	sl, #0
 8009eac:	dd36      	ble.n	8009f1c <_dtoa_r+0x3a4>
 8009eae:	4ac3      	ldr	r2, [pc, #780]	; (800a1bc <_dtoa_r+0x644>)
 8009eb0:	f00a 030f 	and.w	r3, sl, #15
 8009eb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009eb8:	ed93 7b00 	vldr	d7, [r3]
 8009ebc:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009ec0:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009ec4:	eeb0 8a47 	vmov.f32	s16, s14
 8009ec8:	eef0 8a67 	vmov.f32	s17, s15
 8009ecc:	d016      	beq.n	8009efc <_dtoa_r+0x384>
 8009ece:	4bbc      	ldr	r3, [pc, #752]	; (800a1c0 <_dtoa_r+0x648>)
 8009ed0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009ed4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009ed8:	f7f6 fcb8 	bl	800084c <__aeabi_ddiv>
 8009edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ee0:	f007 070f 	and.w	r7, r7, #15
 8009ee4:	2503      	movs	r5, #3
 8009ee6:	4eb6      	ldr	r6, [pc, #728]	; (800a1c0 <_dtoa_r+0x648>)
 8009ee8:	b957      	cbnz	r7, 8009f00 <_dtoa_r+0x388>
 8009eea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eee:	ec53 2b18 	vmov	r2, r3, d8
 8009ef2:	f7f6 fcab 	bl	800084c <__aeabi_ddiv>
 8009ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009efa:	e029      	b.n	8009f50 <_dtoa_r+0x3d8>
 8009efc:	2502      	movs	r5, #2
 8009efe:	e7f2      	b.n	8009ee6 <_dtoa_r+0x36e>
 8009f00:	07f9      	lsls	r1, r7, #31
 8009f02:	d508      	bpl.n	8009f16 <_dtoa_r+0x39e>
 8009f04:	ec51 0b18 	vmov	r0, r1, d8
 8009f08:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009f0c:	f7f6 fb74 	bl	80005f8 <__aeabi_dmul>
 8009f10:	ec41 0b18 	vmov	d8, r0, r1
 8009f14:	3501      	adds	r5, #1
 8009f16:	107f      	asrs	r7, r7, #1
 8009f18:	3608      	adds	r6, #8
 8009f1a:	e7e5      	b.n	8009ee8 <_dtoa_r+0x370>
 8009f1c:	f000 80a6 	beq.w	800a06c <_dtoa_r+0x4f4>
 8009f20:	f1ca 0600 	rsb	r6, sl, #0
 8009f24:	4ba5      	ldr	r3, [pc, #660]	; (800a1bc <_dtoa_r+0x644>)
 8009f26:	4fa6      	ldr	r7, [pc, #664]	; (800a1c0 <_dtoa_r+0x648>)
 8009f28:	f006 020f 	and.w	r2, r6, #15
 8009f2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f34:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009f38:	f7f6 fb5e 	bl	80005f8 <__aeabi_dmul>
 8009f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f40:	1136      	asrs	r6, r6, #4
 8009f42:	2300      	movs	r3, #0
 8009f44:	2502      	movs	r5, #2
 8009f46:	2e00      	cmp	r6, #0
 8009f48:	f040 8085 	bne.w	800a056 <_dtoa_r+0x4de>
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d1d2      	bne.n	8009ef6 <_dtoa_r+0x37e>
 8009f50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 808c 	beq.w	800a070 <_dtoa_r+0x4f8>
 8009f58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f5c:	4b99      	ldr	r3, [pc, #612]	; (800a1c4 <_dtoa_r+0x64c>)
 8009f5e:	2200      	movs	r2, #0
 8009f60:	4630      	mov	r0, r6
 8009f62:	4639      	mov	r1, r7
 8009f64:	f7f6 fdba 	bl	8000adc <__aeabi_dcmplt>
 8009f68:	2800      	cmp	r0, #0
 8009f6a:	f000 8081 	beq.w	800a070 <_dtoa_r+0x4f8>
 8009f6e:	9b01      	ldr	r3, [sp, #4]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d07d      	beq.n	800a070 <_dtoa_r+0x4f8>
 8009f74:	f1b9 0f00 	cmp.w	r9, #0
 8009f78:	dd3c      	ble.n	8009ff4 <_dtoa_r+0x47c>
 8009f7a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009f7e:	9307      	str	r3, [sp, #28]
 8009f80:	2200      	movs	r2, #0
 8009f82:	4b91      	ldr	r3, [pc, #580]	; (800a1c8 <_dtoa_r+0x650>)
 8009f84:	4630      	mov	r0, r6
 8009f86:	4639      	mov	r1, r7
 8009f88:	f7f6 fb36 	bl	80005f8 <__aeabi_dmul>
 8009f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f90:	3501      	adds	r5, #1
 8009f92:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009f96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009f9a:	4628      	mov	r0, r5
 8009f9c:	f7f6 fac2 	bl	8000524 <__aeabi_i2d>
 8009fa0:	4632      	mov	r2, r6
 8009fa2:	463b      	mov	r3, r7
 8009fa4:	f7f6 fb28 	bl	80005f8 <__aeabi_dmul>
 8009fa8:	4b88      	ldr	r3, [pc, #544]	; (800a1cc <_dtoa_r+0x654>)
 8009faa:	2200      	movs	r2, #0
 8009fac:	f7f6 f96e 	bl	800028c <__adddf3>
 8009fb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009fb8:	9303      	str	r3, [sp, #12]
 8009fba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d15c      	bne.n	800a07a <_dtoa_r+0x502>
 8009fc0:	4b83      	ldr	r3, [pc, #524]	; (800a1d0 <_dtoa_r+0x658>)
 8009fc2:	2200      	movs	r2, #0
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	4639      	mov	r1, r7
 8009fc8:	f7f6 f95e 	bl	8000288 <__aeabi_dsub>
 8009fcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009fd0:	4606      	mov	r6, r0
 8009fd2:	460f      	mov	r7, r1
 8009fd4:	f7f6 fda0 	bl	8000b18 <__aeabi_dcmpgt>
 8009fd8:	2800      	cmp	r0, #0
 8009fda:	f040 8296 	bne.w	800a50a <_dtoa_r+0x992>
 8009fde:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009fe2:	4630      	mov	r0, r6
 8009fe4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fe8:	4639      	mov	r1, r7
 8009fea:	f7f6 fd77 	bl	8000adc <__aeabi_dcmplt>
 8009fee:	2800      	cmp	r0, #0
 8009ff0:	f040 8288 	bne.w	800a504 <_dtoa_r+0x98c>
 8009ff4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009ff8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009ffc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	f2c0 8158 	blt.w	800a2b4 <_dtoa_r+0x73c>
 800a004:	f1ba 0f0e 	cmp.w	sl, #14
 800a008:	f300 8154 	bgt.w	800a2b4 <_dtoa_r+0x73c>
 800a00c:	4b6b      	ldr	r3, [pc, #428]	; (800a1bc <_dtoa_r+0x644>)
 800a00e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a012:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a016:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a018:	2b00      	cmp	r3, #0
 800a01a:	f280 80e3 	bge.w	800a1e4 <_dtoa_r+0x66c>
 800a01e:	9b01      	ldr	r3, [sp, #4]
 800a020:	2b00      	cmp	r3, #0
 800a022:	f300 80df 	bgt.w	800a1e4 <_dtoa_r+0x66c>
 800a026:	f040 826d 	bne.w	800a504 <_dtoa_r+0x98c>
 800a02a:	4b69      	ldr	r3, [pc, #420]	; (800a1d0 <_dtoa_r+0x658>)
 800a02c:	2200      	movs	r2, #0
 800a02e:	4640      	mov	r0, r8
 800a030:	4649      	mov	r1, r9
 800a032:	f7f6 fae1 	bl	80005f8 <__aeabi_dmul>
 800a036:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a03a:	f7f6 fd63 	bl	8000b04 <__aeabi_dcmpge>
 800a03e:	9e01      	ldr	r6, [sp, #4]
 800a040:	4637      	mov	r7, r6
 800a042:	2800      	cmp	r0, #0
 800a044:	f040 8243 	bne.w	800a4ce <_dtoa_r+0x956>
 800a048:	9d00      	ldr	r5, [sp, #0]
 800a04a:	2331      	movs	r3, #49	; 0x31
 800a04c:	f805 3b01 	strb.w	r3, [r5], #1
 800a050:	f10a 0a01 	add.w	sl, sl, #1
 800a054:	e23f      	b.n	800a4d6 <_dtoa_r+0x95e>
 800a056:	07f2      	lsls	r2, r6, #31
 800a058:	d505      	bpl.n	800a066 <_dtoa_r+0x4ee>
 800a05a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a05e:	f7f6 facb 	bl	80005f8 <__aeabi_dmul>
 800a062:	3501      	adds	r5, #1
 800a064:	2301      	movs	r3, #1
 800a066:	1076      	asrs	r6, r6, #1
 800a068:	3708      	adds	r7, #8
 800a06a:	e76c      	b.n	8009f46 <_dtoa_r+0x3ce>
 800a06c:	2502      	movs	r5, #2
 800a06e:	e76f      	b.n	8009f50 <_dtoa_r+0x3d8>
 800a070:	9b01      	ldr	r3, [sp, #4]
 800a072:	f8cd a01c 	str.w	sl, [sp, #28]
 800a076:	930c      	str	r3, [sp, #48]	; 0x30
 800a078:	e78d      	b.n	8009f96 <_dtoa_r+0x41e>
 800a07a:	9900      	ldr	r1, [sp, #0]
 800a07c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a07e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a080:	4b4e      	ldr	r3, [pc, #312]	; (800a1bc <_dtoa_r+0x644>)
 800a082:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a086:	4401      	add	r1, r0
 800a088:	9102      	str	r1, [sp, #8]
 800a08a:	9908      	ldr	r1, [sp, #32]
 800a08c:	eeb0 8a47 	vmov.f32	s16, s14
 800a090:	eef0 8a67 	vmov.f32	s17, s15
 800a094:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a098:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a09c:	2900      	cmp	r1, #0
 800a09e:	d045      	beq.n	800a12c <_dtoa_r+0x5b4>
 800a0a0:	494c      	ldr	r1, [pc, #304]	; (800a1d4 <_dtoa_r+0x65c>)
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	f7f6 fbd2 	bl	800084c <__aeabi_ddiv>
 800a0a8:	ec53 2b18 	vmov	r2, r3, d8
 800a0ac:	f7f6 f8ec 	bl	8000288 <__aeabi_dsub>
 800a0b0:	9d00      	ldr	r5, [sp, #0]
 800a0b2:	ec41 0b18 	vmov	d8, r0, r1
 800a0b6:	4639      	mov	r1, r7
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f7f6 fd4d 	bl	8000b58 <__aeabi_d2iz>
 800a0be:	900c      	str	r0, [sp, #48]	; 0x30
 800a0c0:	f7f6 fa30 	bl	8000524 <__aeabi_i2d>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4630      	mov	r0, r6
 800a0ca:	4639      	mov	r1, r7
 800a0cc:	f7f6 f8dc 	bl	8000288 <__aeabi_dsub>
 800a0d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0d2:	3330      	adds	r3, #48	; 0x30
 800a0d4:	f805 3b01 	strb.w	r3, [r5], #1
 800a0d8:	ec53 2b18 	vmov	r2, r3, d8
 800a0dc:	4606      	mov	r6, r0
 800a0de:	460f      	mov	r7, r1
 800a0e0:	f7f6 fcfc 	bl	8000adc <__aeabi_dcmplt>
 800a0e4:	2800      	cmp	r0, #0
 800a0e6:	d165      	bne.n	800a1b4 <_dtoa_r+0x63c>
 800a0e8:	4632      	mov	r2, r6
 800a0ea:	463b      	mov	r3, r7
 800a0ec:	4935      	ldr	r1, [pc, #212]	; (800a1c4 <_dtoa_r+0x64c>)
 800a0ee:	2000      	movs	r0, #0
 800a0f0:	f7f6 f8ca 	bl	8000288 <__aeabi_dsub>
 800a0f4:	ec53 2b18 	vmov	r2, r3, d8
 800a0f8:	f7f6 fcf0 	bl	8000adc <__aeabi_dcmplt>
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	f040 80b9 	bne.w	800a274 <_dtoa_r+0x6fc>
 800a102:	9b02      	ldr	r3, [sp, #8]
 800a104:	429d      	cmp	r5, r3
 800a106:	f43f af75 	beq.w	8009ff4 <_dtoa_r+0x47c>
 800a10a:	4b2f      	ldr	r3, [pc, #188]	; (800a1c8 <_dtoa_r+0x650>)
 800a10c:	ec51 0b18 	vmov	r0, r1, d8
 800a110:	2200      	movs	r2, #0
 800a112:	f7f6 fa71 	bl	80005f8 <__aeabi_dmul>
 800a116:	4b2c      	ldr	r3, [pc, #176]	; (800a1c8 <_dtoa_r+0x650>)
 800a118:	ec41 0b18 	vmov	d8, r0, r1
 800a11c:	2200      	movs	r2, #0
 800a11e:	4630      	mov	r0, r6
 800a120:	4639      	mov	r1, r7
 800a122:	f7f6 fa69 	bl	80005f8 <__aeabi_dmul>
 800a126:	4606      	mov	r6, r0
 800a128:	460f      	mov	r7, r1
 800a12a:	e7c4      	b.n	800a0b6 <_dtoa_r+0x53e>
 800a12c:	ec51 0b17 	vmov	r0, r1, d7
 800a130:	f7f6 fa62 	bl	80005f8 <__aeabi_dmul>
 800a134:	9b02      	ldr	r3, [sp, #8]
 800a136:	9d00      	ldr	r5, [sp, #0]
 800a138:	930c      	str	r3, [sp, #48]	; 0x30
 800a13a:	ec41 0b18 	vmov	d8, r0, r1
 800a13e:	4639      	mov	r1, r7
 800a140:	4630      	mov	r0, r6
 800a142:	f7f6 fd09 	bl	8000b58 <__aeabi_d2iz>
 800a146:	9011      	str	r0, [sp, #68]	; 0x44
 800a148:	f7f6 f9ec 	bl	8000524 <__aeabi_i2d>
 800a14c:	4602      	mov	r2, r0
 800a14e:	460b      	mov	r3, r1
 800a150:	4630      	mov	r0, r6
 800a152:	4639      	mov	r1, r7
 800a154:	f7f6 f898 	bl	8000288 <__aeabi_dsub>
 800a158:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a15a:	3330      	adds	r3, #48	; 0x30
 800a15c:	f805 3b01 	strb.w	r3, [r5], #1
 800a160:	9b02      	ldr	r3, [sp, #8]
 800a162:	429d      	cmp	r5, r3
 800a164:	4606      	mov	r6, r0
 800a166:	460f      	mov	r7, r1
 800a168:	f04f 0200 	mov.w	r2, #0
 800a16c:	d134      	bne.n	800a1d8 <_dtoa_r+0x660>
 800a16e:	4b19      	ldr	r3, [pc, #100]	; (800a1d4 <_dtoa_r+0x65c>)
 800a170:	ec51 0b18 	vmov	r0, r1, d8
 800a174:	f7f6 f88a 	bl	800028c <__adddf3>
 800a178:	4602      	mov	r2, r0
 800a17a:	460b      	mov	r3, r1
 800a17c:	4630      	mov	r0, r6
 800a17e:	4639      	mov	r1, r7
 800a180:	f7f6 fcca 	bl	8000b18 <__aeabi_dcmpgt>
 800a184:	2800      	cmp	r0, #0
 800a186:	d175      	bne.n	800a274 <_dtoa_r+0x6fc>
 800a188:	ec53 2b18 	vmov	r2, r3, d8
 800a18c:	4911      	ldr	r1, [pc, #68]	; (800a1d4 <_dtoa_r+0x65c>)
 800a18e:	2000      	movs	r0, #0
 800a190:	f7f6 f87a 	bl	8000288 <__aeabi_dsub>
 800a194:	4602      	mov	r2, r0
 800a196:	460b      	mov	r3, r1
 800a198:	4630      	mov	r0, r6
 800a19a:	4639      	mov	r1, r7
 800a19c:	f7f6 fc9e 	bl	8000adc <__aeabi_dcmplt>
 800a1a0:	2800      	cmp	r0, #0
 800a1a2:	f43f af27 	beq.w	8009ff4 <_dtoa_r+0x47c>
 800a1a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1a8:	1e6b      	subs	r3, r5, #1
 800a1aa:	930c      	str	r3, [sp, #48]	; 0x30
 800a1ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a1b0:	2b30      	cmp	r3, #48	; 0x30
 800a1b2:	d0f8      	beq.n	800a1a6 <_dtoa_r+0x62e>
 800a1b4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a1b8:	e04a      	b.n	800a250 <_dtoa_r+0x6d8>
 800a1ba:	bf00      	nop
 800a1bc:	0800e9f8 	.word	0x0800e9f8
 800a1c0:	0800e9d0 	.word	0x0800e9d0
 800a1c4:	3ff00000 	.word	0x3ff00000
 800a1c8:	40240000 	.word	0x40240000
 800a1cc:	401c0000 	.word	0x401c0000
 800a1d0:	40140000 	.word	0x40140000
 800a1d4:	3fe00000 	.word	0x3fe00000
 800a1d8:	4baf      	ldr	r3, [pc, #700]	; (800a498 <_dtoa_r+0x920>)
 800a1da:	f7f6 fa0d 	bl	80005f8 <__aeabi_dmul>
 800a1de:	4606      	mov	r6, r0
 800a1e0:	460f      	mov	r7, r1
 800a1e2:	e7ac      	b.n	800a13e <_dtoa_r+0x5c6>
 800a1e4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a1e8:	9d00      	ldr	r5, [sp, #0]
 800a1ea:	4642      	mov	r2, r8
 800a1ec:	464b      	mov	r3, r9
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	f7f6 fb2b 	bl	800084c <__aeabi_ddiv>
 800a1f6:	f7f6 fcaf 	bl	8000b58 <__aeabi_d2iz>
 800a1fa:	9002      	str	r0, [sp, #8]
 800a1fc:	f7f6 f992 	bl	8000524 <__aeabi_i2d>
 800a200:	4642      	mov	r2, r8
 800a202:	464b      	mov	r3, r9
 800a204:	f7f6 f9f8 	bl	80005f8 <__aeabi_dmul>
 800a208:	4602      	mov	r2, r0
 800a20a:	460b      	mov	r3, r1
 800a20c:	4630      	mov	r0, r6
 800a20e:	4639      	mov	r1, r7
 800a210:	f7f6 f83a 	bl	8000288 <__aeabi_dsub>
 800a214:	9e02      	ldr	r6, [sp, #8]
 800a216:	9f01      	ldr	r7, [sp, #4]
 800a218:	3630      	adds	r6, #48	; 0x30
 800a21a:	f805 6b01 	strb.w	r6, [r5], #1
 800a21e:	9e00      	ldr	r6, [sp, #0]
 800a220:	1bae      	subs	r6, r5, r6
 800a222:	42b7      	cmp	r7, r6
 800a224:	4602      	mov	r2, r0
 800a226:	460b      	mov	r3, r1
 800a228:	d137      	bne.n	800a29a <_dtoa_r+0x722>
 800a22a:	f7f6 f82f 	bl	800028c <__adddf3>
 800a22e:	4642      	mov	r2, r8
 800a230:	464b      	mov	r3, r9
 800a232:	4606      	mov	r6, r0
 800a234:	460f      	mov	r7, r1
 800a236:	f7f6 fc6f 	bl	8000b18 <__aeabi_dcmpgt>
 800a23a:	b9c8      	cbnz	r0, 800a270 <_dtoa_r+0x6f8>
 800a23c:	4642      	mov	r2, r8
 800a23e:	464b      	mov	r3, r9
 800a240:	4630      	mov	r0, r6
 800a242:	4639      	mov	r1, r7
 800a244:	f7f6 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 800a248:	b110      	cbz	r0, 800a250 <_dtoa_r+0x6d8>
 800a24a:	9b02      	ldr	r3, [sp, #8]
 800a24c:	07d9      	lsls	r1, r3, #31
 800a24e:	d40f      	bmi.n	800a270 <_dtoa_r+0x6f8>
 800a250:	4620      	mov	r0, r4
 800a252:	4659      	mov	r1, fp
 800a254:	f000 fe58 	bl	800af08 <_Bfree>
 800a258:	2300      	movs	r3, #0
 800a25a:	702b      	strb	r3, [r5, #0]
 800a25c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a25e:	f10a 0001 	add.w	r0, sl, #1
 800a262:	6018      	str	r0, [r3, #0]
 800a264:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a266:	2b00      	cmp	r3, #0
 800a268:	f43f acd8 	beq.w	8009c1c <_dtoa_r+0xa4>
 800a26c:	601d      	str	r5, [r3, #0]
 800a26e:	e4d5      	b.n	8009c1c <_dtoa_r+0xa4>
 800a270:	f8cd a01c 	str.w	sl, [sp, #28]
 800a274:	462b      	mov	r3, r5
 800a276:	461d      	mov	r5, r3
 800a278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a27c:	2a39      	cmp	r2, #57	; 0x39
 800a27e:	d108      	bne.n	800a292 <_dtoa_r+0x71a>
 800a280:	9a00      	ldr	r2, [sp, #0]
 800a282:	429a      	cmp	r2, r3
 800a284:	d1f7      	bne.n	800a276 <_dtoa_r+0x6fe>
 800a286:	9a07      	ldr	r2, [sp, #28]
 800a288:	9900      	ldr	r1, [sp, #0]
 800a28a:	3201      	adds	r2, #1
 800a28c:	9207      	str	r2, [sp, #28]
 800a28e:	2230      	movs	r2, #48	; 0x30
 800a290:	700a      	strb	r2, [r1, #0]
 800a292:	781a      	ldrb	r2, [r3, #0]
 800a294:	3201      	adds	r2, #1
 800a296:	701a      	strb	r2, [r3, #0]
 800a298:	e78c      	b.n	800a1b4 <_dtoa_r+0x63c>
 800a29a:	4b7f      	ldr	r3, [pc, #508]	; (800a498 <_dtoa_r+0x920>)
 800a29c:	2200      	movs	r2, #0
 800a29e:	f7f6 f9ab 	bl	80005f8 <__aeabi_dmul>
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	4606      	mov	r6, r0
 800a2a8:	460f      	mov	r7, r1
 800a2aa:	f7f6 fc0d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d09b      	beq.n	800a1ea <_dtoa_r+0x672>
 800a2b2:	e7cd      	b.n	800a250 <_dtoa_r+0x6d8>
 800a2b4:	9a08      	ldr	r2, [sp, #32]
 800a2b6:	2a00      	cmp	r2, #0
 800a2b8:	f000 80c4 	beq.w	800a444 <_dtoa_r+0x8cc>
 800a2bc:	9a05      	ldr	r2, [sp, #20]
 800a2be:	2a01      	cmp	r2, #1
 800a2c0:	f300 80a8 	bgt.w	800a414 <_dtoa_r+0x89c>
 800a2c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a2c6:	2a00      	cmp	r2, #0
 800a2c8:	f000 80a0 	beq.w	800a40c <_dtoa_r+0x894>
 800a2cc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a2d0:	9e06      	ldr	r6, [sp, #24]
 800a2d2:	4645      	mov	r5, r8
 800a2d4:	9a04      	ldr	r2, [sp, #16]
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	441a      	add	r2, r3
 800a2da:	4620      	mov	r0, r4
 800a2dc:	4498      	add	r8, r3
 800a2de:	9204      	str	r2, [sp, #16]
 800a2e0:	f000 ff18 	bl	800b114 <__i2b>
 800a2e4:	4607      	mov	r7, r0
 800a2e6:	2d00      	cmp	r5, #0
 800a2e8:	dd0b      	ble.n	800a302 <_dtoa_r+0x78a>
 800a2ea:	9b04      	ldr	r3, [sp, #16]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	dd08      	ble.n	800a302 <_dtoa_r+0x78a>
 800a2f0:	42ab      	cmp	r3, r5
 800a2f2:	9a04      	ldr	r2, [sp, #16]
 800a2f4:	bfa8      	it	ge
 800a2f6:	462b      	movge	r3, r5
 800a2f8:	eba8 0803 	sub.w	r8, r8, r3
 800a2fc:	1aed      	subs	r5, r5, r3
 800a2fe:	1ad3      	subs	r3, r2, r3
 800a300:	9304      	str	r3, [sp, #16]
 800a302:	9b06      	ldr	r3, [sp, #24]
 800a304:	b1fb      	cbz	r3, 800a346 <_dtoa_r+0x7ce>
 800a306:	9b08      	ldr	r3, [sp, #32]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 809f 	beq.w	800a44c <_dtoa_r+0x8d4>
 800a30e:	2e00      	cmp	r6, #0
 800a310:	dd11      	ble.n	800a336 <_dtoa_r+0x7be>
 800a312:	4639      	mov	r1, r7
 800a314:	4632      	mov	r2, r6
 800a316:	4620      	mov	r0, r4
 800a318:	f000 ffb8 	bl	800b28c <__pow5mult>
 800a31c:	465a      	mov	r2, fp
 800a31e:	4601      	mov	r1, r0
 800a320:	4607      	mov	r7, r0
 800a322:	4620      	mov	r0, r4
 800a324:	f000 ff0c 	bl	800b140 <__multiply>
 800a328:	4659      	mov	r1, fp
 800a32a:	9007      	str	r0, [sp, #28]
 800a32c:	4620      	mov	r0, r4
 800a32e:	f000 fdeb 	bl	800af08 <_Bfree>
 800a332:	9b07      	ldr	r3, [sp, #28]
 800a334:	469b      	mov	fp, r3
 800a336:	9b06      	ldr	r3, [sp, #24]
 800a338:	1b9a      	subs	r2, r3, r6
 800a33a:	d004      	beq.n	800a346 <_dtoa_r+0x7ce>
 800a33c:	4659      	mov	r1, fp
 800a33e:	4620      	mov	r0, r4
 800a340:	f000 ffa4 	bl	800b28c <__pow5mult>
 800a344:	4683      	mov	fp, r0
 800a346:	2101      	movs	r1, #1
 800a348:	4620      	mov	r0, r4
 800a34a:	f000 fee3 	bl	800b114 <__i2b>
 800a34e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a350:	2b00      	cmp	r3, #0
 800a352:	4606      	mov	r6, r0
 800a354:	dd7c      	ble.n	800a450 <_dtoa_r+0x8d8>
 800a356:	461a      	mov	r2, r3
 800a358:	4601      	mov	r1, r0
 800a35a:	4620      	mov	r0, r4
 800a35c:	f000 ff96 	bl	800b28c <__pow5mult>
 800a360:	9b05      	ldr	r3, [sp, #20]
 800a362:	2b01      	cmp	r3, #1
 800a364:	4606      	mov	r6, r0
 800a366:	dd76      	ble.n	800a456 <_dtoa_r+0x8de>
 800a368:	2300      	movs	r3, #0
 800a36a:	9306      	str	r3, [sp, #24]
 800a36c:	6933      	ldr	r3, [r6, #16]
 800a36e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a372:	6918      	ldr	r0, [r3, #16]
 800a374:	f000 fe7e 	bl	800b074 <__hi0bits>
 800a378:	f1c0 0020 	rsb	r0, r0, #32
 800a37c:	9b04      	ldr	r3, [sp, #16]
 800a37e:	4418      	add	r0, r3
 800a380:	f010 001f 	ands.w	r0, r0, #31
 800a384:	f000 8086 	beq.w	800a494 <_dtoa_r+0x91c>
 800a388:	f1c0 0320 	rsb	r3, r0, #32
 800a38c:	2b04      	cmp	r3, #4
 800a38e:	dd7f      	ble.n	800a490 <_dtoa_r+0x918>
 800a390:	f1c0 001c 	rsb	r0, r0, #28
 800a394:	9b04      	ldr	r3, [sp, #16]
 800a396:	4403      	add	r3, r0
 800a398:	4480      	add	r8, r0
 800a39a:	4405      	add	r5, r0
 800a39c:	9304      	str	r3, [sp, #16]
 800a39e:	f1b8 0f00 	cmp.w	r8, #0
 800a3a2:	dd05      	ble.n	800a3b0 <_dtoa_r+0x838>
 800a3a4:	4659      	mov	r1, fp
 800a3a6:	4642      	mov	r2, r8
 800a3a8:	4620      	mov	r0, r4
 800a3aa:	f000 ffc9 	bl	800b340 <__lshift>
 800a3ae:	4683      	mov	fp, r0
 800a3b0:	9b04      	ldr	r3, [sp, #16]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	dd05      	ble.n	800a3c2 <_dtoa_r+0x84a>
 800a3b6:	4631      	mov	r1, r6
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f000 ffc0 	bl	800b340 <__lshift>
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d069      	beq.n	800a49c <_dtoa_r+0x924>
 800a3c8:	4631      	mov	r1, r6
 800a3ca:	4658      	mov	r0, fp
 800a3cc:	f001 f824 	bl	800b418 <__mcmp>
 800a3d0:	2800      	cmp	r0, #0
 800a3d2:	da63      	bge.n	800a49c <_dtoa_r+0x924>
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	4659      	mov	r1, fp
 800a3d8:	220a      	movs	r2, #10
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f000 fdb6 	bl	800af4c <__multadd>
 800a3e0:	9b08      	ldr	r3, [sp, #32]
 800a3e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a3e6:	4683      	mov	fp, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	f000 818f 	beq.w	800a70c <_dtoa_r+0xb94>
 800a3ee:	4639      	mov	r1, r7
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	220a      	movs	r2, #10
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	f000 fda9 	bl	800af4c <__multadd>
 800a3fa:	f1b9 0f00 	cmp.w	r9, #0
 800a3fe:	4607      	mov	r7, r0
 800a400:	f300 808e 	bgt.w	800a520 <_dtoa_r+0x9a8>
 800a404:	9b05      	ldr	r3, [sp, #20]
 800a406:	2b02      	cmp	r3, #2
 800a408:	dc50      	bgt.n	800a4ac <_dtoa_r+0x934>
 800a40a:	e089      	b.n	800a520 <_dtoa_r+0x9a8>
 800a40c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a40e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a412:	e75d      	b.n	800a2d0 <_dtoa_r+0x758>
 800a414:	9b01      	ldr	r3, [sp, #4]
 800a416:	1e5e      	subs	r6, r3, #1
 800a418:	9b06      	ldr	r3, [sp, #24]
 800a41a:	42b3      	cmp	r3, r6
 800a41c:	bfbf      	itttt	lt
 800a41e:	9b06      	ldrlt	r3, [sp, #24]
 800a420:	9606      	strlt	r6, [sp, #24]
 800a422:	1af2      	sublt	r2, r6, r3
 800a424:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a426:	bfb6      	itet	lt
 800a428:	189b      	addlt	r3, r3, r2
 800a42a:	1b9e      	subge	r6, r3, r6
 800a42c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a42e:	9b01      	ldr	r3, [sp, #4]
 800a430:	bfb8      	it	lt
 800a432:	2600      	movlt	r6, #0
 800a434:	2b00      	cmp	r3, #0
 800a436:	bfb5      	itete	lt
 800a438:	eba8 0503 	sublt.w	r5, r8, r3
 800a43c:	9b01      	ldrge	r3, [sp, #4]
 800a43e:	2300      	movlt	r3, #0
 800a440:	4645      	movge	r5, r8
 800a442:	e747      	b.n	800a2d4 <_dtoa_r+0x75c>
 800a444:	9e06      	ldr	r6, [sp, #24]
 800a446:	9f08      	ldr	r7, [sp, #32]
 800a448:	4645      	mov	r5, r8
 800a44a:	e74c      	b.n	800a2e6 <_dtoa_r+0x76e>
 800a44c:	9a06      	ldr	r2, [sp, #24]
 800a44e:	e775      	b.n	800a33c <_dtoa_r+0x7c4>
 800a450:	9b05      	ldr	r3, [sp, #20]
 800a452:	2b01      	cmp	r3, #1
 800a454:	dc18      	bgt.n	800a488 <_dtoa_r+0x910>
 800a456:	9b02      	ldr	r3, [sp, #8]
 800a458:	b9b3      	cbnz	r3, 800a488 <_dtoa_r+0x910>
 800a45a:	9b03      	ldr	r3, [sp, #12]
 800a45c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a460:	b9a3      	cbnz	r3, 800a48c <_dtoa_r+0x914>
 800a462:	9b03      	ldr	r3, [sp, #12]
 800a464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a468:	0d1b      	lsrs	r3, r3, #20
 800a46a:	051b      	lsls	r3, r3, #20
 800a46c:	b12b      	cbz	r3, 800a47a <_dtoa_r+0x902>
 800a46e:	9b04      	ldr	r3, [sp, #16]
 800a470:	3301      	adds	r3, #1
 800a472:	9304      	str	r3, [sp, #16]
 800a474:	f108 0801 	add.w	r8, r8, #1
 800a478:	2301      	movs	r3, #1
 800a47a:	9306      	str	r3, [sp, #24]
 800a47c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a47e:	2b00      	cmp	r3, #0
 800a480:	f47f af74 	bne.w	800a36c <_dtoa_r+0x7f4>
 800a484:	2001      	movs	r0, #1
 800a486:	e779      	b.n	800a37c <_dtoa_r+0x804>
 800a488:	2300      	movs	r3, #0
 800a48a:	e7f6      	b.n	800a47a <_dtoa_r+0x902>
 800a48c:	9b02      	ldr	r3, [sp, #8]
 800a48e:	e7f4      	b.n	800a47a <_dtoa_r+0x902>
 800a490:	d085      	beq.n	800a39e <_dtoa_r+0x826>
 800a492:	4618      	mov	r0, r3
 800a494:	301c      	adds	r0, #28
 800a496:	e77d      	b.n	800a394 <_dtoa_r+0x81c>
 800a498:	40240000 	.word	0x40240000
 800a49c:	9b01      	ldr	r3, [sp, #4]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	dc38      	bgt.n	800a514 <_dtoa_r+0x99c>
 800a4a2:	9b05      	ldr	r3, [sp, #20]
 800a4a4:	2b02      	cmp	r3, #2
 800a4a6:	dd35      	ble.n	800a514 <_dtoa_r+0x99c>
 800a4a8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a4ac:	f1b9 0f00 	cmp.w	r9, #0
 800a4b0:	d10d      	bne.n	800a4ce <_dtoa_r+0x956>
 800a4b2:	4631      	mov	r1, r6
 800a4b4:	464b      	mov	r3, r9
 800a4b6:	2205      	movs	r2, #5
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	f000 fd47 	bl	800af4c <__multadd>
 800a4be:	4601      	mov	r1, r0
 800a4c0:	4606      	mov	r6, r0
 800a4c2:	4658      	mov	r0, fp
 800a4c4:	f000 ffa8 	bl	800b418 <__mcmp>
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	f73f adbd 	bgt.w	800a048 <_dtoa_r+0x4d0>
 800a4ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4d0:	9d00      	ldr	r5, [sp, #0]
 800a4d2:	ea6f 0a03 	mvn.w	sl, r3
 800a4d6:	f04f 0800 	mov.w	r8, #0
 800a4da:	4631      	mov	r1, r6
 800a4dc:	4620      	mov	r0, r4
 800a4de:	f000 fd13 	bl	800af08 <_Bfree>
 800a4e2:	2f00      	cmp	r7, #0
 800a4e4:	f43f aeb4 	beq.w	800a250 <_dtoa_r+0x6d8>
 800a4e8:	f1b8 0f00 	cmp.w	r8, #0
 800a4ec:	d005      	beq.n	800a4fa <_dtoa_r+0x982>
 800a4ee:	45b8      	cmp	r8, r7
 800a4f0:	d003      	beq.n	800a4fa <_dtoa_r+0x982>
 800a4f2:	4641      	mov	r1, r8
 800a4f4:	4620      	mov	r0, r4
 800a4f6:	f000 fd07 	bl	800af08 <_Bfree>
 800a4fa:	4639      	mov	r1, r7
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	f000 fd03 	bl	800af08 <_Bfree>
 800a502:	e6a5      	b.n	800a250 <_dtoa_r+0x6d8>
 800a504:	2600      	movs	r6, #0
 800a506:	4637      	mov	r7, r6
 800a508:	e7e1      	b.n	800a4ce <_dtoa_r+0x956>
 800a50a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a50c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a510:	4637      	mov	r7, r6
 800a512:	e599      	b.n	800a048 <_dtoa_r+0x4d0>
 800a514:	9b08      	ldr	r3, [sp, #32]
 800a516:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	f000 80fd 	beq.w	800a71a <_dtoa_r+0xba2>
 800a520:	2d00      	cmp	r5, #0
 800a522:	dd05      	ble.n	800a530 <_dtoa_r+0x9b8>
 800a524:	4639      	mov	r1, r7
 800a526:	462a      	mov	r2, r5
 800a528:	4620      	mov	r0, r4
 800a52a:	f000 ff09 	bl	800b340 <__lshift>
 800a52e:	4607      	mov	r7, r0
 800a530:	9b06      	ldr	r3, [sp, #24]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d05c      	beq.n	800a5f0 <_dtoa_r+0xa78>
 800a536:	6879      	ldr	r1, [r7, #4]
 800a538:	4620      	mov	r0, r4
 800a53a:	f000 fca5 	bl	800ae88 <_Balloc>
 800a53e:	4605      	mov	r5, r0
 800a540:	b928      	cbnz	r0, 800a54e <_dtoa_r+0x9d6>
 800a542:	4b80      	ldr	r3, [pc, #512]	; (800a744 <_dtoa_r+0xbcc>)
 800a544:	4602      	mov	r2, r0
 800a546:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a54a:	f7ff bb2e 	b.w	8009baa <_dtoa_r+0x32>
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	3202      	adds	r2, #2
 800a552:	0092      	lsls	r2, r2, #2
 800a554:	f107 010c 	add.w	r1, r7, #12
 800a558:	300c      	adds	r0, #12
 800a55a:	f000 fc87 	bl	800ae6c <memcpy>
 800a55e:	2201      	movs	r2, #1
 800a560:	4629      	mov	r1, r5
 800a562:	4620      	mov	r0, r4
 800a564:	f000 feec 	bl	800b340 <__lshift>
 800a568:	9b00      	ldr	r3, [sp, #0]
 800a56a:	3301      	adds	r3, #1
 800a56c:	9301      	str	r3, [sp, #4]
 800a56e:	9b00      	ldr	r3, [sp, #0]
 800a570:	444b      	add	r3, r9
 800a572:	9307      	str	r3, [sp, #28]
 800a574:	9b02      	ldr	r3, [sp, #8]
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	46b8      	mov	r8, r7
 800a57c:	9306      	str	r3, [sp, #24]
 800a57e:	4607      	mov	r7, r0
 800a580:	9b01      	ldr	r3, [sp, #4]
 800a582:	4631      	mov	r1, r6
 800a584:	3b01      	subs	r3, #1
 800a586:	4658      	mov	r0, fp
 800a588:	9302      	str	r3, [sp, #8]
 800a58a:	f7ff fa67 	bl	8009a5c <quorem>
 800a58e:	4603      	mov	r3, r0
 800a590:	3330      	adds	r3, #48	; 0x30
 800a592:	9004      	str	r0, [sp, #16]
 800a594:	4641      	mov	r1, r8
 800a596:	4658      	mov	r0, fp
 800a598:	9308      	str	r3, [sp, #32]
 800a59a:	f000 ff3d 	bl	800b418 <__mcmp>
 800a59e:	463a      	mov	r2, r7
 800a5a0:	4681      	mov	r9, r0
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	f000 ff53 	bl	800b450 <__mdiff>
 800a5aa:	68c2      	ldr	r2, [r0, #12]
 800a5ac:	9b08      	ldr	r3, [sp, #32]
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	bb02      	cbnz	r2, 800a5f4 <_dtoa_r+0xa7c>
 800a5b2:	4601      	mov	r1, r0
 800a5b4:	4658      	mov	r0, fp
 800a5b6:	f000 ff2f 	bl	800b418 <__mcmp>
 800a5ba:	9b08      	ldr	r3, [sp, #32]
 800a5bc:	4602      	mov	r2, r0
 800a5be:	4629      	mov	r1, r5
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800a5c6:	f000 fc9f 	bl	800af08 <_Bfree>
 800a5ca:	9b05      	ldr	r3, [sp, #20]
 800a5cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5ce:	9d01      	ldr	r5, [sp, #4]
 800a5d0:	ea43 0102 	orr.w	r1, r3, r2
 800a5d4:	9b06      	ldr	r3, [sp, #24]
 800a5d6:	430b      	orrs	r3, r1
 800a5d8:	9b08      	ldr	r3, [sp, #32]
 800a5da:	d10d      	bne.n	800a5f8 <_dtoa_r+0xa80>
 800a5dc:	2b39      	cmp	r3, #57	; 0x39
 800a5de:	d029      	beq.n	800a634 <_dtoa_r+0xabc>
 800a5e0:	f1b9 0f00 	cmp.w	r9, #0
 800a5e4:	dd01      	ble.n	800a5ea <_dtoa_r+0xa72>
 800a5e6:	9b04      	ldr	r3, [sp, #16]
 800a5e8:	3331      	adds	r3, #49	; 0x31
 800a5ea:	9a02      	ldr	r2, [sp, #8]
 800a5ec:	7013      	strb	r3, [r2, #0]
 800a5ee:	e774      	b.n	800a4da <_dtoa_r+0x962>
 800a5f0:	4638      	mov	r0, r7
 800a5f2:	e7b9      	b.n	800a568 <_dtoa_r+0x9f0>
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	e7e2      	b.n	800a5be <_dtoa_r+0xa46>
 800a5f8:	f1b9 0f00 	cmp.w	r9, #0
 800a5fc:	db06      	blt.n	800a60c <_dtoa_r+0xa94>
 800a5fe:	9905      	ldr	r1, [sp, #20]
 800a600:	ea41 0909 	orr.w	r9, r1, r9
 800a604:	9906      	ldr	r1, [sp, #24]
 800a606:	ea59 0101 	orrs.w	r1, r9, r1
 800a60a:	d120      	bne.n	800a64e <_dtoa_r+0xad6>
 800a60c:	2a00      	cmp	r2, #0
 800a60e:	ddec      	ble.n	800a5ea <_dtoa_r+0xa72>
 800a610:	4659      	mov	r1, fp
 800a612:	2201      	movs	r2, #1
 800a614:	4620      	mov	r0, r4
 800a616:	9301      	str	r3, [sp, #4]
 800a618:	f000 fe92 	bl	800b340 <__lshift>
 800a61c:	4631      	mov	r1, r6
 800a61e:	4683      	mov	fp, r0
 800a620:	f000 fefa 	bl	800b418 <__mcmp>
 800a624:	2800      	cmp	r0, #0
 800a626:	9b01      	ldr	r3, [sp, #4]
 800a628:	dc02      	bgt.n	800a630 <_dtoa_r+0xab8>
 800a62a:	d1de      	bne.n	800a5ea <_dtoa_r+0xa72>
 800a62c:	07da      	lsls	r2, r3, #31
 800a62e:	d5dc      	bpl.n	800a5ea <_dtoa_r+0xa72>
 800a630:	2b39      	cmp	r3, #57	; 0x39
 800a632:	d1d8      	bne.n	800a5e6 <_dtoa_r+0xa6e>
 800a634:	9a02      	ldr	r2, [sp, #8]
 800a636:	2339      	movs	r3, #57	; 0x39
 800a638:	7013      	strb	r3, [r2, #0]
 800a63a:	462b      	mov	r3, r5
 800a63c:	461d      	mov	r5, r3
 800a63e:	3b01      	subs	r3, #1
 800a640:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a644:	2a39      	cmp	r2, #57	; 0x39
 800a646:	d050      	beq.n	800a6ea <_dtoa_r+0xb72>
 800a648:	3201      	adds	r2, #1
 800a64a:	701a      	strb	r2, [r3, #0]
 800a64c:	e745      	b.n	800a4da <_dtoa_r+0x962>
 800a64e:	2a00      	cmp	r2, #0
 800a650:	dd03      	ble.n	800a65a <_dtoa_r+0xae2>
 800a652:	2b39      	cmp	r3, #57	; 0x39
 800a654:	d0ee      	beq.n	800a634 <_dtoa_r+0xabc>
 800a656:	3301      	adds	r3, #1
 800a658:	e7c7      	b.n	800a5ea <_dtoa_r+0xa72>
 800a65a:	9a01      	ldr	r2, [sp, #4]
 800a65c:	9907      	ldr	r1, [sp, #28]
 800a65e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a662:	428a      	cmp	r2, r1
 800a664:	d02a      	beq.n	800a6bc <_dtoa_r+0xb44>
 800a666:	4659      	mov	r1, fp
 800a668:	2300      	movs	r3, #0
 800a66a:	220a      	movs	r2, #10
 800a66c:	4620      	mov	r0, r4
 800a66e:	f000 fc6d 	bl	800af4c <__multadd>
 800a672:	45b8      	cmp	r8, r7
 800a674:	4683      	mov	fp, r0
 800a676:	f04f 0300 	mov.w	r3, #0
 800a67a:	f04f 020a 	mov.w	r2, #10
 800a67e:	4641      	mov	r1, r8
 800a680:	4620      	mov	r0, r4
 800a682:	d107      	bne.n	800a694 <_dtoa_r+0xb1c>
 800a684:	f000 fc62 	bl	800af4c <__multadd>
 800a688:	4680      	mov	r8, r0
 800a68a:	4607      	mov	r7, r0
 800a68c:	9b01      	ldr	r3, [sp, #4]
 800a68e:	3301      	adds	r3, #1
 800a690:	9301      	str	r3, [sp, #4]
 800a692:	e775      	b.n	800a580 <_dtoa_r+0xa08>
 800a694:	f000 fc5a 	bl	800af4c <__multadd>
 800a698:	4639      	mov	r1, r7
 800a69a:	4680      	mov	r8, r0
 800a69c:	2300      	movs	r3, #0
 800a69e:	220a      	movs	r2, #10
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f000 fc53 	bl	800af4c <__multadd>
 800a6a6:	4607      	mov	r7, r0
 800a6a8:	e7f0      	b.n	800a68c <_dtoa_r+0xb14>
 800a6aa:	f1b9 0f00 	cmp.w	r9, #0
 800a6ae:	9a00      	ldr	r2, [sp, #0]
 800a6b0:	bfcc      	ite	gt
 800a6b2:	464d      	movgt	r5, r9
 800a6b4:	2501      	movle	r5, #1
 800a6b6:	4415      	add	r5, r2
 800a6b8:	f04f 0800 	mov.w	r8, #0
 800a6bc:	4659      	mov	r1, fp
 800a6be:	2201      	movs	r2, #1
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	9301      	str	r3, [sp, #4]
 800a6c4:	f000 fe3c 	bl	800b340 <__lshift>
 800a6c8:	4631      	mov	r1, r6
 800a6ca:	4683      	mov	fp, r0
 800a6cc:	f000 fea4 	bl	800b418 <__mcmp>
 800a6d0:	2800      	cmp	r0, #0
 800a6d2:	dcb2      	bgt.n	800a63a <_dtoa_r+0xac2>
 800a6d4:	d102      	bne.n	800a6dc <_dtoa_r+0xb64>
 800a6d6:	9b01      	ldr	r3, [sp, #4]
 800a6d8:	07db      	lsls	r3, r3, #31
 800a6da:	d4ae      	bmi.n	800a63a <_dtoa_r+0xac2>
 800a6dc:	462b      	mov	r3, r5
 800a6de:	461d      	mov	r5, r3
 800a6e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a6e4:	2a30      	cmp	r2, #48	; 0x30
 800a6e6:	d0fa      	beq.n	800a6de <_dtoa_r+0xb66>
 800a6e8:	e6f7      	b.n	800a4da <_dtoa_r+0x962>
 800a6ea:	9a00      	ldr	r2, [sp, #0]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d1a5      	bne.n	800a63c <_dtoa_r+0xac4>
 800a6f0:	f10a 0a01 	add.w	sl, sl, #1
 800a6f4:	2331      	movs	r3, #49	; 0x31
 800a6f6:	e779      	b.n	800a5ec <_dtoa_r+0xa74>
 800a6f8:	4b13      	ldr	r3, [pc, #76]	; (800a748 <_dtoa_r+0xbd0>)
 800a6fa:	f7ff baaf 	b.w	8009c5c <_dtoa_r+0xe4>
 800a6fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a700:	2b00      	cmp	r3, #0
 800a702:	f47f aa86 	bne.w	8009c12 <_dtoa_r+0x9a>
 800a706:	4b11      	ldr	r3, [pc, #68]	; (800a74c <_dtoa_r+0xbd4>)
 800a708:	f7ff baa8 	b.w	8009c5c <_dtoa_r+0xe4>
 800a70c:	f1b9 0f00 	cmp.w	r9, #0
 800a710:	dc03      	bgt.n	800a71a <_dtoa_r+0xba2>
 800a712:	9b05      	ldr	r3, [sp, #20]
 800a714:	2b02      	cmp	r3, #2
 800a716:	f73f aec9 	bgt.w	800a4ac <_dtoa_r+0x934>
 800a71a:	9d00      	ldr	r5, [sp, #0]
 800a71c:	4631      	mov	r1, r6
 800a71e:	4658      	mov	r0, fp
 800a720:	f7ff f99c 	bl	8009a5c <quorem>
 800a724:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a728:	f805 3b01 	strb.w	r3, [r5], #1
 800a72c:	9a00      	ldr	r2, [sp, #0]
 800a72e:	1aaa      	subs	r2, r5, r2
 800a730:	4591      	cmp	r9, r2
 800a732:	ddba      	ble.n	800a6aa <_dtoa_r+0xb32>
 800a734:	4659      	mov	r1, fp
 800a736:	2300      	movs	r3, #0
 800a738:	220a      	movs	r2, #10
 800a73a:	4620      	mov	r0, r4
 800a73c:	f000 fc06 	bl	800af4c <__multadd>
 800a740:	4683      	mov	fp, r0
 800a742:	e7eb      	b.n	800a71c <_dtoa_r+0xba4>
 800a744:	0800e8dc 	.word	0x0800e8dc
 800a748:	0800e6d8 	.word	0x0800e6d8
 800a74c:	0800e859 	.word	0x0800e859

0800a750 <rshift>:
 800a750:	6903      	ldr	r3, [r0, #16]
 800a752:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a756:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a75a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a75e:	f100 0414 	add.w	r4, r0, #20
 800a762:	dd45      	ble.n	800a7f0 <rshift+0xa0>
 800a764:	f011 011f 	ands.w	r1, r1, #31
 800a768:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a76c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a770:	d10c      	bne.n	800a78c <rshift+0x3c>
 800a772:	f100 0710 	add.w	r7, r0, #16
 800a776:	4629      	mov	r1, r5
 800a778:	42b1      	cmp	r1, r6
 800a77a:	d334      	bcc.n	800a7e6 <rshift+0x96>
 800a77c:	1a9b      	subs	r3, r3, r2
 800a77e:	009b      	lsls	r3, r3, #2
 800a780:	1eea      	subs	r2, r5, #3
 800a782:	4296      	cmp	r6, r2
 800a784:	bf38      	it	cc
 800a786:	2300      	movcc	r3, #0
 800a788:	4423      	add	r3, r4
 800a78a:	e015      	b.n	800a7b8 <rshift+0x68>
 800a78c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a790:	f1c1 0820 	rsb	r8, r1, #32
 800a794:	40cf      	lsrs	r7, r1
 800a796:	f105 0e04 	add.w	lr, r5, #4
 800a79a:	46a1      	mov	r9, r4
 800a79c:	4576      	cmp	r6, lr
 800a79e:	46f4      	mov	ip, lr
 800a7a0:	d815      	bhi.n	800a7ce <rshift+0x7e>
 800a7a2:	1a9b      	subs	r3, r3, r2
 800a7a4:	009a      	lsls	r2, r3, #2
 800a7a6:	3a04      	subs	r2, #4
 800a7a8:	3501      	adds	r5, #1
 800a7aa:	42ae      	cmp	r6, r5
 800a7ac:	bf38      	it	cc
 800a7ae:	2200      	movcc	r2, #0
 800a7b0:	18a3      	adds	r3, r4, r2
 800a7b2:	50a7      	str	r7, [r4, r2]
 800a7b4:	b107      	cbz	r7, 800a7b8 <rshift+0x68>
 800a7b6:	3304      	adds	r3, #4
 800a7b8:	1b1a      	subs	r2, r3, r4
 800a7ba:	42a3      	cmp	r3, r4
 800a7bc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a7c0:	bf08      	it	eq
 800a7c2:	2300      	moveq	r3, #0
 800a7c4:	6102      	str	r2, [r0, #16]
 800a7c6:	bf08      	it	eq
 800a7c8:	6143      	streq	r3, [r0, #20]
 800a7ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7ce:	f8dc c000 	ldr.w	ip, [ip]
 800a7d2:	fa0c fc08 	lsl.w	ip, ip, r8
 800a7d6:	ea4c 0707 	orr.w	r7, ip, r7
 800a7da:	f849 7b04 	str.w	r7, [r9], #4
 800a7de:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7e2:	40cf      	lsrs	r7, r1
 800a7e4:	e7da      	b.n	800a79c <rshift+0x4c>
 800a7e6:	f851 cb04 	ldr.w	ip, [r1], #4
 800a7ea:	f847 cf04 	str.w	ip, [r7, #4]!
 800a7ee:	e7c3      	b.n	800a778 <rshift+0x28>
 800a7f0:	4623      	mov	r3, r4
 800a7f2:	e7e1      	b.n	800a7b8 <rshift+0x68>

0800a7f4 <__hexdig_fun>:
 800a7f4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a7f8:	2b09      	cmp	r3, #9
 800a7fa:	d802      	bhi.n	800a802 <__hexdig_fun+0xe>
 800a7fc:	3820      	subs	r0, #32
 800a7fe:	b2c0      	uxtb	r0, r0
 800a800:	4770      	bx	lr
 800a802:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a806:	2b05      	cmp	r3, #5
 800a808:	d801      	bhi.n	800a80e <__hexdig_fun+0x1a>
 800a80a:	3847      	subs	r0, #71	; 0x47
 800a80c:	e7f7      	b.n	800a7fe <__hexdig_fun+0xa>
 800a80e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a812:	2b05      	cmp	r3, #5
 800a814:	d801      	bhi.n	800a81a <__hexdig_fun+0x26>
 800a816:	3827      	subs	r0, #39	; 0x27
 800a818:	e7f1      	b.n	800a7fe <__hexdig_fun+0xa>
 800a81a:	2000      	movs	r0, #0
 800a81c:	4770      	bx	lr
	...

0800a820 <__gethex>:
 800a820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a824:	ed2d 8b02 	vpush	{d8}
 800a828:	b089      	sub	sp, #36	; 0x24
 800a82a:	ee08 0a10 	vmov	s16, r0
 800a82e:	9304      	str	r3, [sp, #16]
 800a830:	4bbc      	ldr	r3, [pc, #752]	; (800ab24 <__gethex+0x304>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	9301      	str	r3, [sp, #4]
 800a836:	4618      	mov	r0, r3
 800a838:	468b      	mov	fp, r1
 800a83a:	4690      	mov	r8, r2
 800a83c:	f7f5 fcc8 	bl	80001d0 <strlen>
 800a840:	9b01      	ldr	r3, [sp, #4]
 800a842:	f8db 2000 	ldr.w	r2, [fp]
 800a846:	4403      	add	r3, r0
 800a848:	4682      	mov	sl, r0
 800a84a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a84e:	9305      	str	r3, [sp, #20]
 800a850:	1c93      	adds	r3, r2, #2
 800a852:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a856:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a85a:	32fe      	adds	r2, #254	; 0xfe
 800a85c:	18d1      	adds	r1, r2, r3
 800a85e:	461f      	mov	r7, r3
 800a860:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a864:	9100      	str	r1, [sp, #0]
 800a866:	2830      	cmp	r0, #48	; 0x30
 800a868:	d0f8      	beq.n	800a85c <__gethex+0x3c>
 800a86a:	f7ff ffc3 	bl	800a7f4 <__hexdig_fun>
 800a86e:	4604      	mov	r4, r0
 800a870:	2800      	cmp	r0, #0
 800a872:	d13a      	bne.n	800a8ea <__gethex+0xca>
 800a874:	9901      	ldr	r1, [sp, #4]
 800a876:	4652      	mov	r2, sl
 800a878:	4638      	mov	r0, r7
 800a87a:	f001 f9ed 	bl	800bc58 <strncmp>
 800a87e:	4605      	mov	r5, r0
 800a880:	2800      	cmp	r0, #0
 800a882:	d168      	bne.n	800a956 <__gethex+0x136>
 800a884:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a888:	eb07 060a 	add.w	r6, r7, sl
 800a88c:	f7ff ffb2 	bl	800a7f4 <__hexdig_fun>
 800a890:	2800      	cmp	r0, #0
 800a892:	d062      	beq.n	800a95a <__gethex+0x13a>
 800a894:	4633      	mov	r3, r6
 800a896:	7818      	ldrb	r0, [r3, #0]
 800a898:	2830      	cmp	r0, #48	; 0x30
 800a89a:	461f      	mov	r7, r3
 800a89c:	f103 0301 	add.w	r3, r3, #1
 800a8a0:	d0f9      	beq.n	800a896 <__gethex+0x76>
 800a8a2:	f7ff ffa7 	bl	800a7f4 <__hexdig_fun>
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	fab0 f480 	clz	r4, r0
 800a8ac:	0964      	lsrs	r4, r4, #5
 800a8ae:	4635      	mov	r5, r6
 800a8b0:	9300      	str	r3, [sp, #0]
 800a8b2:	463a      	mov	r2, r7
 800a8b4:	4616      	mov	r6, r2
 800a8b6:	3201      	adds	r2, #1
 800a8b8:	7830      	ldrb	r0, [r6, #0]
 800a8ba:	f7ff ff9b 	bl	800a7f4 <__hexdig_fun>
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	d1f8      	bne.n	800a8b4 <__gethex+0x94>
 800a8c2:	9901      	ldr	r1, [sp, #4]
 800a8c4:	4652      	mov	r2, sl
 800a8c6:	4630      	mov	r0, r6
 800a8c8:	f001 f9c6 	bl	800bc58 <strncmp>
 800a8cc:	b980      	cbnz	r0, 800a8f0 <__gethex+0xd0>
 800a8ce:	b94d      	cbnz	r5, 800a8e4 <__gethex+0xc4>
 800a8d0:	eb06 050a 	add.w	r5, r6, sl
 800a8d4:	462a      	mov	r2, r5
 800a8d6:	4616      	mov	r6, r2
 800a8d8:	3201      	adds	r2, #1
 800a8da:	7830      	ldrb	r0, [r6, #0]
 800a8dc:	f7ff ff8a 	bl	800a7f4 <__hexdig_fun>
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	d1f8      	bne.n	800a8d6 <__gethex+0xb6>
 800a8e4:	1bad      	subs	r5, r5, r6
 800a8e6:	00ad      	lsls	r5, r5, #2
 800a8e8:	e004      	b.n	800a8f4 <__gethex+0xd4>
 800a8ea:	2400      	movs	r4, #0
 800a8ec:	4625      	mov	r5, r4
 800a8ee:	e7e0      	b.n	800a8b2 <__gethex+0x92>
 800a8f0:	2d00      	cmp	r5, #0
 800a8f2:	d1f7      	bne.n	800a8e4 <__gethex+0xc4>
 800a8f4:	7833      	ldrb	r3, [r6, #0]
 800a8f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a8fa:	2b50      	cmp	r3, #80	; 0x50
 800a8fc:	d13b      	bne.n	800a976 <__gethex+0x156>
 800a8fe:	7873      	ldrb	r3, [r6, #1]
 800a900:	2b2b      	cmp	r3, #43	; 0x2b
 800a902:	d02c      	beq.n	800a95e <__gethex+0x13e>
 800a904:	2b2d      	cmp	r3, #45	; 0x2d
 800a906:	d02e      	beq.n	800a966 <__gethex+0x146>
 800a908:	1c71      	adds	r1, r6, #1
 800a90a:	f04f 0900 	mov.w	r9, #0
 800a90e:	7808      	ldrb	r0, [r1, #0]
 800a910:	f7ff ff70 	bl	800a7f4 <__hexdig_fun>
 800a914:	1e43      	subs	r3, r0, #1
 800a916:	b2db      	uxtb	r3, r3
 800a918:	2b18      	cmp	r3, #24
 800a91a:	d82c      	bhi.n	800a976 <__gethex+0x156>
 800a91c:	f1a0 0210 	sub.w	r2, r0, #16
 800a920:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a924:	f7ff ff66 	bl	800a7f4 <__hexdig_fun>
 800a928:	1e43      	subs	r3, r0, #1
 800a92a:	b2db      	uxtb	r3, r3
 800a92c:	2b18      	cmp	r3, #24
 800a92e:	d91d      	bls.n	800a96c <__gethex+0x14c>
 800a930:	f1b9 0f00 	cmp.w	r9, #0
 800a934:	d000      	beq.n	800a938 <__gethex+0x118>
 800a936:	4252      	negs	r2, r2
 800a938:	4415      	add	r5, r2
 800a93a:	f8cb 1000 	str.w	r1, [fp]
 800a93e:	b1e4      	cbz	r4, 800a97a <__gethex+0x15a>
 800a940:	9b00      	ldr	r3, [sp, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	bf14      	ite	ne
 800a946:	2700      	movne	r7, #0
 800a948:	2706      	moveq	r7, #6
 800a94a:	4638      	mov	r0, r7
 800a94c:	b009      	add	sp, #36	; 0x24
 800a94e:	ecbd 8b02 	vpop	{d8}
 800a952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a956:	463e      	mov	r6, r7
 800a958:	4625      	mov	r5, r4
 800a95a:	2401      	movs	r4, #1
 800a95c:	e7ca      	b.n	800a8f4 <__gethex+0xd4>
 800a95e:	f04f 0900 	mov.w	r9, #0
 800a962:	1cb1      	adds	r1, r6, #2
 800a964:	e7d3      	b.n	800a90e <__gethex+0xee>
 800a966:	f04f 0901 	mov.w	r9, #1
 800a96a:	e7fa      	b.n	800a962 <__gethex+0x142>
 800a96c:	230a      	movs	r3, #10
 800a96e:	fb03 0202 	mla	r2, r3, r2, r0
 800a972:	3a10      	subs	r2, #16
 800a974:	e7d4      	b.n	800a920 <__gethex+0x100>
 800a976:	4631      	mov	r1, r6
 800a978:	e7df      	b.n	800a93a <__gethex+0x11a>
 800a97a:	1bf3      	subs	r3, r6, r7
 800a97c:	3b01      	subs	r3, #1
 800a97e:	4621      	mov	r1, r4
 800a980:	2b07      	cmp	r3, #7
 800a982:	dc0b      	bgt.n	800a99c <__gethex+0x17c>
 800a984:	ee18 0a10 	vmov	r0, s16
 800a988:	f000 fa7e 	bl	800ae88 <_Balloc>
 800a98c:	4604      	mov	r4, r0
 800a98e:	b940      	cbnz	r0, 800a9a2 <__gethex+0x182>
 800a990:	4b65      	ldr	r3, [pc, #404]	; (800ab28 <__gethex+0x308>)
 800a992:	4602      	mov	r2, r0
 800a994:	21de      	movs	r1, #222	; 0xde
 800a996:	4865      	ldr	r0, [pc, #404]	; (800ab2c <__gethex+0x30c>)
 800a998:	f001 f97e 	bl	800bc98 <__assert_func>
 800a99c:	3101      	adds	r1, #1
 800a99e:	105b      	asrs	r3, r3, #1
 800a9a0:	e7ee      	b.n	800a980 <__gethex+0x160>
 800a9a2:	f100 0914 	add.w	r9, r0, #20
 800a9a6:	f04f 0b00 	mov.w	fp, #0
 800a9aa:	f1ca 0301 	rsb	r3, sl, #1
 800a9ae:	f8cd 9008 	str.w	r9, [sp, #8]
 800a9b2:	f8cd b000 	str.w	fp, [sp]
 800a9b6:	9306      	str	r3, [sp, #24]
 800a9b8:	42b7      	cmp	r7, r6
 800a9ba:	d340      	bcc.n	800aa3e <__gethex+0x21e>
 800a9bc:	9802      	ldr	r0, [sp, #8]
 800a9be:	9b00      	ldr	r3, [sp, #0]
 800a9c0:	f840 3b04 	str.w	r3, [r0], #4
 800a9c4:	eba0 0009 	sub.w	r0, r0, r9
 800a9c8:	1080      	asrs	r0, r0, #2
 800a9ca:	0146      	lsls	r6, r0, #5
 800a9cc:	6120      	str	r0, [r4, #16]
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f000 fb50 	bl	800b074 <__hi0bits>
 800a9d4:	1a30      	subs	r0, r6, r0
 800a9d6:	f8d8 6000 	ldr.w	r6, [r8]
 800a9da:	42b0      	cmp	r0, r6
 800a9dc:	dd63      	ble.n	800aaa6 <__gethex+0x286>
 800a9de:	1b87      	subs	r7, r0, r6
 800a9e0:	4639      	mov	r1, r7
 800a9e2:	4620      	mov	r0, r4
 800a9e4:	f000 feea 	bl	800b7bc <__any_on>
 800a9e8:	4682      	mov	sl, r0
 800a9ea:	b1a8      	cbz	r0, 800aa18 <__gethex+0x1f8>
 800a9ec:	1e7b      	subs	r3, r7, #1
 800a9ee:	1159      	asrs	r1, r3, #5
 800a9f0:	f003 021f 	and.w	r2, r3, #31
 800a9f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a9f8:	f04f 0a01 	mov.w	sl, #1
 800a9fc:	fa0a f202 	lsl.w	r2, sl, r2
 800aa00:	420a      	tst	r2, r1
 800aa02:	d009      	beq.n	800aa18 <__gethex+0x1f8>
 800aa04:	4553      	cmp	r3, sl
 800aa06:	dd05      	ble.n	800aa14 <__gethex+0x1f4>
 800aa08:	1eb9      	subs	r1, r7, #2
 800aa0a:	4620      	mov	r0, r4
 800aa0c:	f000 fed6 	bl	800b7bc <__any_on>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	d145      	bne.n	800aaa0 <__gethex+0x280>
 800aa14:	f04f 0a02 	mov.w	sl, #2
 800aa18:	4639      	mov	r1, r7
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f7ff fe98 	bl	800a750 <rshift>
 800aa20:	443d      	add	r5, r7
 800aa22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa26:	42ab      	cmp	r3, r5
 800aa28:	da4c      	bge.n	800aac4 <__gethex+0x2a4>
 800aa2a:	ee18 0a10 	vmov	r0, s16
 800aa2e:	4621      	mov	r1, r4
 800aa30:	f000 fa6a 	bl	800af08 <_Bfree>
 800aa34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa36:	2300      	movs	r3, #0
 800aa38:	6013      	str	r3, [r2, #0]
 800aa3a:	27a3      	movs	r7, #163	; 0xa3
 800aa3c:	e785      	b.n	800a94a <__gethex+0x12a>
 800aa3e:	1e73      	subs	r3, r6, #1
 800aa40:	9a05      	ldr	r2, [sp, #20]
 800aa42:	9303      	str	r3, [sp, #12]
 800aa44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d019      	beq.n	800aa80 <__gethex+0x260>
 800aa4c:	f1bb 0f20 	cmp.w	fp, #32
 800aa50:	d107      	bne.n	800aa62 <__gethex+0x242>
 800aa52:	9b02      	ldr	r3, [sp, #8]
 800aa54:	9a00      	ldr	r2, [sp, #0]
 800aa56:	f843 2b04 	str.w	r2, [r3], #4
 800aa5a:	9302      	str	r3, [sp, #8]
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	9300      	str	r3, [sp, #0]
 800aa60:	469b      	mov	fp, r3
 800aa62:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800aa66:	f7ff fec5 	bl	800a7f4 <__hexdig_fun>
 800aa6a:	9b00      	ldr	r3, [sp, #0]
 800aa6c:	f000 000f 	and.w	r0, r0, #15
 800aa70:	fa00 f00b 	lsl.w	r0, r0, fp
 800aa74:	4303      	orrs	r3, r0
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	f10b 0b04 	add.w	fp, fp, #4
 800aa7c:	9b03      	ldr	r3, [sp, #12]
 800aa7e:	e00d      	b.n	800aa9c <__gethex+0x27c>
 800aa80:	9b03      	ldr	r3, [sp, #12]
 800aa82:	9a06      	ldr	r2, [sp, #24]
 800aa84:	4413      	add	r3, r2
 800aa86:	42bb      	cmp	r3, r7
 800aa88:	d3e0      	bcc.n	800aa4c <__gethex+0x22c>
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	9901      	ldr	r1, [sp, #4]
 800aa8e:	9307      	str	r3, [sp, #28]
 800aa90:	4652      	mov	r2, sl
 800aa92:	f001 f8e1 	bl	800bc58 <strncmp>
 800aa96:	9b07      	ldr	r3, [sp, #28]
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	d1d7      	bne.n	800aa4c <__gethex+0x22c>
 800aa9c:	461e      	mov	r6, r3
 800aa9e:	e78b      	b.n	800a9b8 <__gethex+0x198>
 800aaa0:	f04f 0a03 	mov.w	sl, #3
 800aaa4:	e7b8      	b.n	800aa18 <__gethex+0x1f8>
 800aaa6:	da0a      	bge.n	800aabe <__gethex+0x29e>
 800aaa8:	1a37      	subs	r7, r6, r0
 800aaaa:	4621      	mov	r1, r4
 800aaac:	ee18 0a10 	vmov	r0, s16
 800aab0:	463a      	mov	r2, r7
 800aab2:	f000 fc45 	bl	800b340 <__lshift>
 800aab6:	1bed      	subs	r5, r5, r7
 800aab8:	4604      	mov	r4, r0
 800aaba:	f100 0914 	add.w	r9, r0, #20
 800aabe:	f04f 0a00 	mov.w	sl, #0
 800aac2:	e7ae      	b.n	800aa22 <__gethex+0x202>
 800aac4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aac8:	42a8      	cmp	r0, r5
 800aaca:	dd72      	ble.n	800abb2 <__gethex+0x392>
 800aacc:	1b45      	subs	r5, r0, r5
 800aace:	42ae      	cmp	r6, r5
 800aad0:	dc36      	bgt.n	800ab40 <__gethex+0x320>
 800aad2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d02a      	beq.n	800ab30 <__gethex+0x310>
 800aada:	2b03      	cmp	r3, #3
 800aadc:	d02c      	beq.n	800ab38 <__gethex+0x318>
 800aade:	2b01      	cmp	r3, #1
 800aae0:	d115      	bne.n	800ab0e <__gethex+0x2ee>
 800aae2:	42ae      	cmp	r6, r5
 800aae4:	d113      	bne.n	800ab0e <__gethex+0x2ee>
 800aae6:	2e01      	cmp	r6, #1
 800aae8:	d10b      	bne.n	800ab02 <__gethex+0x2e2>
 800aaea:	9a04      	ldr	r2, [sp, #16]
 800aaec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800aaf0:	6013      	str	r3, [r2, #0]
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	6123      	str	r3, [r4, #16]
 800aaf6:	f8c9 3000 	str.w	r3, [r9]
 800aafa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800aafc:	2762      	movs	r7, #98	; 0x62
 800aafe:	601c      	str	r4, [r3, #0]
 800ab00:	e723      	b.n	800a94a <__gethex+0x12a>
 800ab02:	1e71      	subs	r1, r6, #1
 800ab04:	4620      	mov	r0, r4
 800ab06:	f000 fe59 	bl	800b7bc <__any_on>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	d1ed      	bne.n	800aaea <__gethex+0x2ca>
 800ab0e:	ee18 0a10 	vmov	r0, s16
 800ab12:	4621      	mov	r1, r4
 800ab14:	f000 f9f8 	bl	800af08 <_Bfree>
 800ab18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	6013      	str	r3, [r2, #0]
 800ab1e:	2750      	movs	r7, #80	; 0x50
 800ab20:	e713      	b.n	800a94a <__gethex+0x12a>
 800ab22:	bf00      	nop
 800ab24:	0800e958 	.word	0x0800e958
 800ab28:	0800e8dc 	.word	0x0800e8dc
 800ab2c:	0800e8ed 	.word	0x0800e8ed
 800ab30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d1eb      	bne.n	800ab0e <__gethex+0x2ee>
 800ab36:	e7d8      	b.n	800aaea <__gethex+0x2ca>
 800ab38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1d5      	bne.n	800aaea <__gethex+0x2ca>
 800ab3e:	e7e6      	b.n	800ab0e <__gethex+0x2ee>
 800ab40:	1e6f      	subs	r7, r5, #1
 800ab42:	f1ba 0f00 	cmp.w	sl, #0
 800ab46:	d131      	bne.n	800abac <__gethex+0x38c>
 800ab48:	b127      	cbz	r7, 800ab54 <__gethex+0x334>
 800ab4a:	4639      	mov	r1, r7
 800ab4c:	4620      	mov	r0, r4
 800ab4e:	f000 fe35 	bl	800b7bc <__any_on>
 800ab52:	4682      	mov	sl, r0
 800ab54:	117b      	asrs	r3, r7, #5
 800ab56:	2101      	movs	r1, #1
 800ab58:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800ab5c:	f007 071f 	and.w	r7, r7, #31
 800ab60:	fa01 f707 	lsl.w	r7, r1, r7
 800ab64:	421f      	tst	r7, r3
 800ab66:	4629      	mov	r1, r5
 800ab68:	4620      	mov	r0, r4
 800ab6a:	bf18      	it	ne
 800ab6c:	f04a 0a02 	orrne.w	sl, sl, #2
 800ab70:	1b76      	subs	r6, r6, r5
 800ab72:	f7ff fded 	bl	800a750 <rshift>
 800ab76:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ab7a:	2702      	movs	r7, #2
 800ab7c:	f1ba 0f00 	cmp.w	sl, #0
 800ab80:	d048      	beq.n	800ac14 <__gethex+0x3f4>
 800ab82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	d015      	beq.n	800abb6 <__gethex+0x396>
 800ab8a:	2b03      	cmp	r3, #3
 800ab8c:	d017      	beq.n	800abbe <__gethex+0x39e>
 800ab8e:	2b01      	cmp	r3, #1
 800ab90:	d109      	bne.n	800aba6 <__gethex+0x386>
 800ab92:	f01a 0f02 	tst.w	sl, #2
 800ab96:	d006      	beq.n	800aba6 <__gethex+0x386>
 800ab98:	f8d9 0000 	ldr.w	r0, [r9]
 800ab9c:	ea4a 0a00 	orr.w	sl, sl, r0
 800aba0:	f01a 0f01 	tst.w	sl, #1
 800aba4:	d10e      	bne.n	800abc4 <__gethex+0x3a4>
 800aba6:	f047 0710 	orr.w	r7, r7, #16
 800abaa:	e033      	b.n	800ac14 <__gethex+0x3f4>
 800abac:	f04f 0a01 	mov.w	sl, #1
 800abb0:	e7d0      	b.n	800ab54 <__gethex+0x334>
 800abb2:	2701      	movs	r7, #1
 800abb4:	e7e2      	b.n	800ab7c <__gethex+0x35c>
 800abb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abb8:	f1c3 0301 	rsb	r3, r3, #1
 800abbc:	9315      	str	r3, [sp, #84]	; 0x54
 800abbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d0f0      	beq.n	800aba6 <__gethex+0x386>
 800abc4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800abc8:	f104 0314 	add.w	r3, r4, #20
 800abcc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800abd0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800abd4:	f04f 0c00 	mov.w	ip, #0
 800abd8:	4618      	mov	r0, r3
 800abda:	f853 2b04 	ldr.w	r2, [r3], #4
 800abde:	f1b2 3fff 	cmp.w	r2, #4294967295
 800abe2:	d01c      	beq.n	800ac1e <__gethex+0x3fe>
 800abe4:	3201      	adds	r2, #1
 800abe6:	6002      	str	r2, [r0, #0]
 800abe8:	2f02      	cmp	r7, #2
 800abea:	f104 0314 	add.w	r3, r4, #20
 800abee:	d13f      	bne.n	800ac70 <__gethex+0x450>
 800abf0:	f8d8 2000 	ldr.w	r2, [r8]
 800abf4:	3a01      	subs	r2, #1
 800abf6:	42b2      	cmp	r2, r6
 800abf8:	d10a      	bne.n	800ac10 <__gethex+0x3f0>
 800abfa:	1171      	asrs	r1, r6, #5
 800abfc:	2201      	movs	r2, #1
 800abfe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac02:	f006 061f 	and.w	r6, r6, #31
 800ac06:	fa02 f606 	lsl.w	r6, r2, r6
 800ac0a:	421e      	tst	r6, r3
 800ac0c:	bf18      	it	ne
 800ac0e:	4617      	movne	r7, r2
 800ac10:	f047 0720 	orr.w	r7, r7, #32
 800ac14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ac16:	601c      	str	r4, [r3, #0]
 800ac18:	9b04      	ldr	r3, [sp, #16]
 800ac1a:	601d      	str	r5, [r3, #0]
 800ac1c:	e695      	b.n	800a94a <__gethex+0x12a>
 800ac1e:	4299      	cmp	r1, r3
 800ac20:	f843 cc04 	str.w	ip, [r3, #-4]
 800ac24:	d8d8      	bhi.n	800abd8 <__gethex+0x3b8>
 800ac26:	68a3      	ldr	r3, [r4, #8]
 800ac28:	459b      	cmp	fp, r3
 800ac2a:	db19      	blt.n	800ac60 <__gethex+0x440>
 800ac2c:	6861      	ldr	r1, [r4, #4]
 800ac2e:	ee18 0a10 	vmov	r0, s16
 800ac32:	3101      	adds	r1, #1
 800ac34:	f000 f928 	bl	800ae88 <_Balloc>
 800ac38:	4681      	mov	r9, r0
 800ac3a:	b918      	cbnz	r0, 800ac44 <__gethex+0x424>
 800ac3c:	4b1a      	ldr	r3, [pc, #104]	; (800aca8 <__gethex+0x488>)
 800ac3e:	4602      	mov	r2, r0
 800ac40:	2184      	movs	r1, #132	; 0x84
 800ac42:	e6a8      	b.n	800a996 <__gethex+0x176>
 800ac44:	6922      	ldr	r2, [r4, #16]
 800ac46:	3202      	adds	r2, #2
 800ac48:	f104 010c 	add.w	r1, r4, #12
 800ac4c:	0092      	lsls	r2, r2, #2
 800ac4e:	300c      	adds	r0, #12
 800ac50:	f000 f90c 	bl	800ae6c <memcpy>
 800ac54:	4621      	mov	r1, r4
 800ac56:	ee18 0a10 	vmov	r0, s16
 800ac5a:	f000 f955 	bl	800af08 <_Bfree>
 800ac5e:	464c      	mov	r4, r9
 800ac60:	6923      	ldr	r3, [r4, #16]
 800ac62:	1c5a      	adds	r2, r3, #1
 800ac64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ac68:	6122      	str	r2, [r4, #16]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	615a      	str	r2, [r3, #20]
 800ac6e:	e7bb      	b.n	800abe8 <__gethex+0x3c8>
 800ac70:	6922      	ldr	r2, [r4, #16]
 800ac72:	455a      	cmp	r2, fp
 800ac74:	dd0b      	ble.n	800ac8e <__gethex+0x46e>
 800ac76:	2101      	movs	r1, #1
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f7ff fd69 	bl	800a750 <rshift>
 800ac7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ac82:	3501      	adds	r5, #1
 800ac84:	42ab      	cmp	r3, r5
 800ac86:	f6ff aed0 	blt.w	800aa2a <__gethex+0x20a>
 800ac8a:	2701      	movs	r7, #1
 800ac8c:	e7c0      	b.n	800ac10 <__gethex+0x3f0>
 800ac8e:	f016 061f 	ands.w	r6, r6, #31
 800ac92:	d0fa      	beq.n	800ac8a <__gethex+0x46a>
 800ac94:	449a      	add	sl, r3
 800ac96:	f1c6 0620 	rsb	r6, r6, #32
 800ac9a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ac9e:	f000 f9e9 	bl	800b074 <__hi0bits>
 800aca2:	42b0      	cmp	r0, r6
 800aca4:	dbe7      	blt.n	800ac76 <__gethex+0x456>
 800aca6:	e7f0      	b.n	800ac8a <__gethex+0x46a>
 800aca8:	0800e8dc 	.word	0x0800e8dc

0800acac <L_shift>:
 800acac:	f1c2 0208 	rsb	r2, r2, #8
 800acb0:	0092      	lsls	r2, r2, #2
 800acb2:	b570      	push	{r4, r5, r6, lr}
 800acb4:	f1c2 0620 	rsb	r6, r2, #32
 800acb8:	6843      	ldr	r3, [r0, #4]
 800acba:	6804      	ldr	r4, [r0, #0]
 800acbc:	fa03 f506 	lsl.w	r5, r3, r6
 800acc0:	432c      	orrs	r4, r5
 800acc2:	40d3      	lsrs	r3, r2
 800acc4:	6004      	str	r4, [r0, #0]
 800acc6:	f840 3f04 	str.w	r3, [r0, #4]!
 800acca:	4288      	cmp	r0, r1
 800accc:	d3f4      	bcc.n	800acb8 <L_shift+0xc>
 800acce:	bd70      	pop	{r4, r5, r6, pc}

0800acd0 <__match>:
 800acd0:	b530      	push	{r4, r5, lr}
 800acd2:	6803      	ldr	r3, [r0, #0]
 800acd4:	3301      	adds	r3, #1
 800acd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acda:	b914      	cbnz	r4, 800ace2 <__match+0x12>
 800acdc:	6003      	str	r3, [r0, #0]
 800acde:	2001      	movs	r0, #1
 800ace0:	bd30      	pop	{r4, r5, pc}
 800ace2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ace6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800acea:	2d19      	cmp	r5, #25
 800acec:	bf98      	it	ls
 800acee:	3220      	addls	r2, #32
 800acf0:	42a2      	cmp	r2, r4
 800acf2:	d0f0      	beq.n	800acd6 <__match+0x6>
 800acf4:	2000      	movs	r0, #0
 800acf6:	e7f3      	b.n	800ace0 <__match+0x10>

0800acf8 <__hexnan>:
 800acf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acfc:	680b      	ldr	r3, [r1, #0]
 800acfe:	6801      	ldr	r1, [r0, #0]
 800ad00:	115e      	asrs	r6, r3, #5
 800ad02:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ad06:	f013 031f 	ands.w	r3, r3, #31
 800ad0a:	b087      	sub	sp, #28
 800ad0c:	bf18      	it	ne
 800ad0e:	3604      	addne	r6, #4
 800ad10:	2500      	movs	r5, #0
 800ad12:	1f37      	subs	r7, r6, #4
 800ad14:	4682      	mov	sl, r0
 800ad16:	4690      	mov	r8, r2
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800ad1e:	46b9      	mov	r9, r7
 800ad20:	463c      	mov	r4, r7
 800ad22:	9502      	str	r5, [sp, #8]
 800ad24:	46ab      	mov	fp, r5
 800ad26:	784a      	ldrb	r2, [r1, #1]
 800ad28:	1c4b      	adds	r3, r1, #1
 800ad2a:	9303      	str	r3, [sp, #12]
 800ad2c:	b342      	cbz	r2, 800ad80 <__hexnan+0x88>
 800ad2e:	4610      	mov	r0, r2
 800ad30:	9105      	str	r1, [sp, #20]
 800ad32:	9204      	str	r2, [sp, #16]
 800ad34:	f7ff fd5e 	bl	800a7f4 <__hexdig_fun>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	d14f      	bne.n	800addc <__hexnan+0xe4>
 800ad3c:	9a04      	ldr	r2, [sp, #16]
 800ad3e:	9905      	ldr	r1, [sp, #20]
 800ad40:	2a20      	cmp	r2, #32
 800ad42:	d818      	bhi.n	800ad76 <__hexnan+0x7e>
 800ad44:	9b02      	ldr	r3, [sp, #8]
 800ad46:	459b      	cmp	fp, r3
 800ad48:	dd13      	ble.n	800ad72 <__hexnan+0x7a>
 800ad4a:	454c      	cmp	r4, r9
 800ad4c:	d206      	bcs.n	800ad5c <__hexnan+0x64>
 800ad4e:	2d07      	cmp	r5, #7
 800ad50:	dc04      	bgt.n	800ad5c <__hexnan+0x64>
 800ad52:	462a      	mov	r2, r5
 800ad54:	4649      	mov	r1, r9
 800ad56:	4620      	mov	r0, r4
 800ad58:	f7ff ffa8 	bl	800acac <L_shift>
 800ad5c:	4544      	cmp	r4, r8
 800ad5e:	d950      	bls.n	800ae02 <__hexnan+0x10a>
 800ad60:	2300      	movs	r3, #0
 800ad62:	f1a4 0904 	sub.w	r9, r4, #4
 800ad66:	f844 3c04 	str.w	r3, [r4, #-4]
 800ad6a:	f8cd b008 	str.w	fp, [sp, #8]
 800ad6e:	464c      	mov	r4, r9
 800ad70:	461d      	mov	r5, r3
 800ad72:	9903      	ldr	r1, [sp, #12]
 800ad74:	e7d7      	b.n	800ad26 <__hexnan+0x2e>
 800ad76:	2a29      	cmp	r2, #41	; 0x29
 800ad78:	d156      	bne.n	800ae28 <__hexnan+0x130>
 800ad7a:	3102      	adds	r1, #2
 800ad7c:	f8ca 1000 	str.w	r1, [sl]
 800ad80:	f1bb 0f00 	cmp.w	fp, #0
 800ad84:	d050      	beq.n	800ae28 <__hexnan+0x130>
 800ad86:	454c      	cmp	r4, r9
 800ad88:	d206      	bcs.n	800ad98 <__hexnan+0xa0>
 800ad8a:	2d07      	cmp	r5, #7
 800ad8c:	dc04      	bgt.n	800ad98 <__hexnan+0xa0>
 800ad8e:	462a      	mov	r2, r5
 800ad90:	4649      	mov	r1, r9
 800ad92:	4620      	mov	r0, r4
 800ad94:	f7ff ff8a 	bl	800acac <L_shift>
 800ad98:	4544      	cmp	r4, r8
 800ad9a:	d934      	bls.n	800ae06 <__hexnan+0x10e>
 800ad9c:	f1a8 0204 	sub.w	r2, r8, #4
 800ada0:	4623      	mov	r3, r4
 800ada2:	f853 1b04 	ldr.w	r1, [r3], #4
 800ada6:	f842 1f04 	str.w	r1, [r2, #4]!
 800adaa:	429f      	cmp	r7, r3
 800adac:	d2f9      	bcs.n	800ada2 <__hexnan+0xaa>
 800adae:	1b3b      	subs	r3, r7, r4
 800adb0:	f023 0303 	bic.w	r3, r3, #3
 800adb4:	3304      	adds	r3, #4
 800adb6:	3401      	adds	r4, #1
 800adb8:	3e03      	subs	r6, #3
 800adba:	42b4      	cmp	r4, r6
 800adbc:	bf88      	it	hi
 800adbe:	2304      	movhi	r3, #4
 800adc0:	4443      	add	r3, r8
 800adc2:	2200      	movs	r2, #0
 800adc4:	f843 2b04 	str.w	r2, [r3], #4
 800adc8:	429f      	cmp	r7, r3
 800adca:	d2fb      	bcs.n	800adc4 <__hexnan+0xcc>
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	b91b      	cbnz	r3, 800add8 <__hexnan+0xe0>
 800add0:	4547      	cmp	r7, r8
 800add2:	d127      	bne.n	800ae24 <__hexnan+0x12c>
 800add4:	2301      	movs	r3, #1
 800add6:	603b      	str	r3, [r7, #0]
 800add8:	2005      	movs	r0, #5
 800adda:	e026      	b.n	800ae2a <__hexnan+0x132>
 800addc:	3501      	adds	r5, #1
 800adde:	2d08      	cmp	r5, #8
 800ade0:	f10b 0b01 	add.w	fp, fp, #1
 800ade4:	dd06      	ble.n	800adf4 <__hexnan+0xfc>
 800ade6:	4544      	cmp	r4, r8
 800ade8:	d9c3      	bls.n	800ad72 <__hexnan+0x7a>
 800adea:	2300      	movs	r3, #0
 800adec:	f844 3c04 	str.w	r3, [r4, #-4]
 800adf0:	2501      	movs	r5, #1
 800adf2:	3c04      	subs	r4, #4
 800adf4:	6822      	ldr	r2, [r4, #0]
 800adf6:	f000 000f 	and.w	r0, r0, #15
 800adfa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800adfe:	6022      	str	r2, [r4, #0]
 800ae00:	e7b7      	b.n	800ad72 <__hexnan+0x7a>
 800ae02:	2508      	movs	r5, #8
 800ae04:	e7b5      	b.n	800ad72 <__hexnan+0x7a>
 800ae06:	9b01      	ldr	r3, [sp, #4]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d0df      	beq.n	800adcc <__hexnan+0xd4>
 800ae0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae10:	f1c3 0320 	rsb	r3, r3, #32
 800ae14:	fa22 f303 	lsr.w	r3, r2, r3
 800ae18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ae1c:	401a      	ands	r2, r3
 800ae1e:	f846 2c04 	str.w	r2, [r6, #-4]
 800ae22:	e7d3      	b.n	800adcc <__hexnan+0xd4>
 800ae24:	3f04      	subs	r7, #4
 800ae26:	e7d1      	b.n	800adcc <__hexnan+0xd4>
 800ae28:	2004      	movs	r0, #4
 800ae2a:	b007      	add	sp, #28
 800ae2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ae30 <_localeconv_r>:
 800ae30:	4800      	ldr	r0, [pc, #0]	; (800ae34 <_localeconv_r+0x4>)
 800ae32:	4770      	bx	lr
 800ae34:	2000016c 	.word	0x2000016c

0800ae38 <malloc>:
 800ae38:	4b02      	ldr	r3, [pc, #8]	; (800ae44 <malloc+0xc>)
 800ae3a:	4601      	mov	r1, r0
 800ae3c:	6818      	ldr	r0, [r3, #0]
 800ae3e:	f000 bd3d 	b.w	800b8bc <_malloc_r>
 800ae42:	bf00      	nop
 800ae44:	20000014 	.word	0x20000014

0800ae48 <__ascii_mbtowc>:
 800ae48:	b082      	sub	sp, #8
 800ae4a:	b901      	cbnz	r1, 800ae4e <__ascii_mbtowc+0x6>
 800ae4c:	a901      	add	r1, sp, #4
 800ae4e:	b142      	cbz	r2, 800ae62 <__ascii_mbtowc+0x1a>
 800ae50:	b14b      	cbz	r3, 800ae66 <__ascii_mbtowc+0x1e>
 800ae52:	7813      	ldrb	r3, [r2, #0]
 800ae54:	600b      	str	r3, [r1, #0]
 800ae56:	7812      	ldrb	r2, [r2, #0]
 800ae58:	1e10      	subs	r0, r2, #0
 800ae5a:	bf18      	it	ne
 800ae5c:	2001      	movne	r0, #1
 800ae5e:	b002      	add	sp, #8
 800ae60:	4770      	bx	lr
 800ae62:	4610      	mov	r0, r2
 800ae64:	e7fb      	b.n	800ae5e <__ascii_mbtowc+0x16>
 800ae66:	f06f 0001 	mvn.w	r0, #1
 800ae6a:	e7f8      	b.n	800ae5e <__ascii_mbtowc+0x16>

0800ae6c <memcpy>:
 800ae6c:	440a      	add	r2, r1
 800ae6e:	4291      	cmp	r1, r2
 800ae70:	f100 33ff 	add.w	r3, r0, #4294967295
 800ae74:	d100      	bne.n	800ae78 <memcpy+0xc>
 800ae76:	4770      	bx	lr
 800ae78:	b510      	push	{r4, lr}
 800ae7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae82:	4291      	cmp	r1, r2
 800ae84:	d1f9      	bne.n	800ae7a <memcpy+0xe>
 800ae86:	bd10      	pop	{r4, pc}

0800ae88 <_Balloc>:
 800ae88:	b570      	push	{r4, r5, r6, lr}
 800ae8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae8c:	4604      	mov	r4, r0
 800ae8e:	460d      	mov	r5, r1
 800ae90:	b976      	cbnz	r6, 800aeb0 <_Balloc+0x28>
 800ae92:	2010      	movs	r0, #16
 800ae94:	f7ff ffd0 	bl	800ae38 <malloc>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	6260      	str	r0, [r4, #36]	; 0x24
 800ae9c:	b920      	cbnz	r0, 800aea8 <_Balloc+0x20>
 800ae9e:	4b18      	ldr	r3, [pc, #96]	; (800af00 <_Balloc+0x78>)
 800aea0:	4818      	ldr	r0, [pc, #96]	; (800af04 <_Balloc+0x7c>)
 800aea2:	2166      	movs	r1, #102	; 0x66
 800aea4:	f000 fef8 	bl	800bc98 <__assert_func>
 800aea8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aeac:	6006      	str	r6, [r0, #0]
 800aeae:	60c6      	str	r6, [r0, #12]
 800aeb0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800aeb2:	68f3      	ldr	r3, [r6, #12]
 800aeb4:	b183      	cbz	r3, 800aed8 <_Balloc+0x50>
 800aeb6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800aebe:	b9b8      	cbnz	r0, 800aef0 <_Balloc+0x68>
 800aec0:	2101      	movs	r1, #1
 800aec2:	fa01 f605 	lsl.w	r6, r1, r5
 800aec6:	1d72      	adds	r2, r6, #5
 800aec8:	0092      	lsls	r2, r2, #2
 800aeca:	4620      	mov	r0, r4
 800aecc:	f000 fc97 	bl	800b7fe <_calloc_r>
 800aed0:	b160      	cbz	r0, 800aeec <_Balloc+0x64>
 800aed2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800aed6:	e00e      	b.n	800aef6 <_Balloc+0x6e>
 800aed8:	2221      	movs	r2, #33	; 0x21
 800aeda:	2104      	movs	r1, #4
 800aedc:	4620      	mov	r0, r4
 800aede:	f000 fc8e 	bl	800b7fe <_calloc_r>
 800aee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aee4:	60f0      	str	r0, [r6, #12]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1e4      	bne.n	800aeb6 <_Balloc+0x2e>
 800aeec:	2000      	movs	r0, #0
 800aeee:	bd70      	pop	{r4, r5, r6, pc}
 800aef0:	6802      	ldr	r2, [r0, #0]
 800aef2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aef6:	2300      	movs	r3, #0
 800aef8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aefc:	e7f7      	b.n	800aeee <_Balloc+0x66>
 800aefe:	bf00      	nop
 800af00:	0800e866 	.word	0x0800e866
 800af04:	0800e96c 	.word	0x0800e96c

0800af08 <_Bfree>:
 800af08:	b570      	push	{r4, r5, r6, lr}
 800af0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af0c:	4605      	mov	r5, r0
 800af0e:	460c      	mov	r4, r1
 800af10:	b976      	cbnz	r6, 800af30 <_Bfree+0x28>
 800af12:	2010      	movs	r0, #16
 800af14:	f7ff ff90 	bl	800ae38 <malloc>
 800af18:	4602      	mov	r2, r0
 800af1a:	6268      	str	r0, [r5, #36]	; 0x24
 800af1c:	b920      	cbnz	r0, 800af28 <_Bfree+0x20>
 800af1e:	4b09      	ldr	r3, [pc, #36]	; (800af44 <_Bfree+0x3c>)
 800af20:	4809      	ldr	r0, [pc, #36]	; (800af48 <_Bfree+0x40>)
 800af22:	218a      	movs	r1, #138	; 0x8a
 800af24:	f000 feb8 	bl	800bc98 <__assert_func>
 800af28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af2c:	6006      	str	r6, [r0, #0]
 800af2e:	60c6      	str	r6, [r0, #12]
 800af30:	b13c      	cbz	r4, 800af42 <_Bfree+0x3a>
 800af32:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800af34:	6862      	ldr	r2, [r4, #4]
 800af36:	68db      	ldr	r3, [r3, #12]
 800af38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af3c:	6021      	str	r1, [r4, #0]
 800af3e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af42:	bd70      	pop	{r4, r5, r6, pc}
 800af44:	0800e866 	.word	0x0800e866
 800af48:	0800e96c 	.word	0x0800e96c

0800af4c <__multadd>:
 800af4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af50:	690e      	ldr	r6, [r1, #16]
 800af52:	4607      	mov	r7, r0
 800af54:	4698      	mov	r8, r3
 800af56:	460c      	mov	r4, r1
 800af58:	f101 0014 	add.w	r0, r1, #20
 800af5c:	2300      	movs	r3, #0
 800af5e:	6805      	ldr	r5, [r0, #0]
 800af60:	b2a9      	uxth	r1, r5
 800af62:	fb02 8101 	mla	r1, r2, r1, r8
 800af66:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800af6a:	0c2d      	lsrs	r5, r5, #16
 800af6c:	fb02 c505 	mla	r5, r2, r5, ip
 800af70:	b289      	uxth	r1, r1
 800af72:	3301      	adds	r3, #1
 800af74:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800af78:	429e      	cmp	r6, r3
 800af7a:	f840 1b04 	str.w	r1, [r0], #4
 800af7e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800af82:	dcec      	bgt.n	800af5e <__multadd+0x12>
 800af84:	f1b8 0f00 	cmp.w	r8, #0
 800af88:	d022      	beq.n	800afd0 <__multadd+0x84>
 800af8a:	68a3      	ldr	r3, [r4, #8]
 800af8c:	42b3      	cmp	r3, r6
 800af8e:	dc19      	bgt.n	800afc4 <__multadd+0x78>
 800af90:	6861      	ldr	r1, [r4, #4]
 800af92:	4638      	mov	r0, r7
 800af94:	3101      	adds	r1, #1
 800af96:	f7ff ff77 	bl	800ae88 <_Balloc>
 800af9a:	4605      	mov	r5, r0
 800af9c:	b928      	cbnz	r0, 800afaa <__multadd+0x5e>
 800af9e:	4602      	mov	r2, r0
 800afa0:	4b0d      	ldr	r3, [pc, #52]	; (800afd8 <__multadd+0x8c>)
 800afa2:	480e      	ldr	r0, [pc, #56]	; (800afdc <__multadd+0x90>)
 800afa4:	21b5      	movs	r1, #181	; 0xb5
 800afa6:	f000 fe77 	bl	800bc98 <__assert_func>
 800afaa:	6922      	ldr	r2, [r4, #16]
 800afac:	3202      	adds	r2, #2
 800afae:	f104 010c 	add.w	r1, r4, #12
 800afb2:	0092      	lsls	r2, r2, #2
 800afb4:	300c      	adds	r0, #12
 800afb6:	f7ff ff59 	bl	800ae6c <memcpy>
 800afba:	4621      	mov	r1, r4
 800afbc:	4638      	mov	r0, r7
 800afbe:	f7ff ffa3 	bl	800af08 <_Bfree>
 800afc2:	462c      	mov	r4, r5
 800afc4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800afc8:	3601      	adds	r6, #1
 800afca:	f8c3 8014 	str.w	r8, [r3, #20]
 800afce:	6126      	str	r6, [r4, #16]
 800afd0:	4620      	mov	r0, r4
 800afd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afd6:	bf00      	nop
 800afd8:	0800e8dc 	.word	0x0800e8dc
 800afdc:	0800e96c 	.word	0x0800e96c

0800afe0 <__s2b>:
 800afe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afe4:	460c      	mov	r4, r1
 800afe6:	4615      	mov	r5, r2
 800afe8:	461f      	mov	r7, r3
 800afea:	2209      	movs	r2, #9
 800afec:	3308      	adds	r3, #8
 800afee:	4606      	mov	r6, r0
 800aff0:	fb93 f3f2 	sdiv	r3, r3, r2
 800aff4:	2100      	movs	r1, #0
 800aff6:	2201      	movs	r2, #1
 800aff8:	429a      	cmp	r2, r3
 800affa:	db09      	blt.n	800b010 <__s2b+0x30>
 800affc:	4630      	mov	r0, r6
 800affe:	f7ff ff43 	bl	800ae88 <_Balloc>
 800b002:	b940      	cbnz	r0, 800b016 <__s2b+0x36>
 800b004:	4602      	mov	r2, r0
 800b006:	4b19      	ldr	r3, [pc, #100]	; (800b06c <__s2b+0x8c>)
 800b008:	4819      	ldr	r0, [pc, #100]	; (800b070 <__s2b+0x90>)
 800b00a:	21ce      	movs	r1, #206	; 0xce
 800b00c:	f000 fe44 	bl	800bc98 <__assert_func>
 800b010:	0052      	lsls	r2, r2, #1
 800b012:	3101      	adds	r1, #1
 800b014:	e7f0      	b.n	800aff8 <__s2b+0x18>
 800b016:	9b08      	ldr	r3, [sp, #32]
 800b018:	6143      	str	r3, [r0, #20]
 800b01a:	2d09      	cmp	r5, #9
 800b01c:	f04f 0301 	mov.w	r3, #1
 800b020:	6103      	str	r3, [r0, #16]
 800b022:	dd16      	ble.n	800b052 <__s2b+0x72>
 800b024:	f104 0909 	add.w	r9, r4, #9
 800b028:	46c8      	mov	r8, r9
 800b02a:	442c      	add	r4, r5
 800b02c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b030:	4601      	mov	r1, r0
 800b032:	3b30      	subs	r3, #48	; 0x30
 800b034:	220a      	movs	r2, #10
 800b036:	4630      	mov	r0, r6
 800b038:	f7ff ff88 	bl	800af4c <__multadd>
 800b03c:	45a0      	cmp	r8, r4
 800b03e:	d1f5      	bne.n	800b02c <__s2b+0x4c>
 800b040:	f1a5 0408 	sub.w	r4, r5, #8
 800b044:	444c      	add	r4, r9
 800b046:	1b2d      	subs	r5, r5, r4
 800b048:	1963      	adds	r3, r4, r5
 800b04a:	42bb      	cmp	r3, r7
 800b04c:	db04      	blt.n	800b058 <__s2b+0x78>
 800b04e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b052:	340a      	adds	r4, #10
 800b054:	2509      	movs	r5, #9
 800b056:	e7f6      	b.n	800b046 <__s2b+0x66>
 800b058:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b05c:	4601      	mov	r1, r0
 800b05e:	3b30      	subs	r3, #48	; 0x30
 800b060:	220a      	movs	r2, #10
 800b062:	4630      	mov	r0, r6
 800b064:	f7ff ff72 	bl	800af4c <__multadd>
 800b068:	e7ee      	b.n	800b048 <__s2b+0x68>
 800b06a:	bf00      	nop
 800b06c:	0800e8dc 	.word	0x0800e8dc
 800b070:	0800e96c 	.word	0x0800e96c

0800b074 <__hi0bits>:
 800b074:	0c03      	lsrs	r3, r0, #16
 800b076:	041b      	lsls	r3, r3, #16
 800b078:	b9d3      	cbnz	r3, 800b0b0 <__hi0bits+0x3c>
 800b07a:	0400      	lsls	r0, r0, #16
 800b07c:	2310      	movs	r3, #16
 800b07e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b082:	bf04      	itt	eq
 800b084:	0200      	lsleq	r0, r0, #8
 800b086:	3308      	addeq	r3, #8
 800b088:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b08c:	bf04      	itt	eq
 800b08e:	0100      	lsleq	r0, r0, #4
 800b090:	3304      	addeq	r3, #4
 800b092:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b096:	bf04      	itt	eq
 800b098:	0080      	lsleq	r0, r0, #2
 800b09a:	3302      	addeq	r3, #2
 800b09c:	2800      	cmp	r0, #0
 800b09e:	db05      	blt.n	800b0ac <__hi0bits+0x38>
 800b0a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0a4:	f103 0301 	add.w	r3, r3, #1
 800b0a8:	bf08      	it	eq
 800b0aa:	2320      	moveq	r3, #32
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	4770      	bx	lr
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	e7e4      	b.n	800b07e <__hi0bits+0xa>

0800b0b4 <__lo0bits>:
 800b0b4:	6803      	ldr	r3, [r0, #0]
 800b0b6:	f013 0207 	ands.w	r2, r3, #7
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	d00b      	beq.n	800b0d6 <__lo0bits+0x22>
 800b0be:	07da      	lsls	r2, r3, #31
 800b0c0:	d424      	bmi.n	800b10c <__lo0bits+0x58>
 800b0c2:	0798      	lsls	r0, r3, #30
 800b0c4:	bf49      	itett	mi
 800b0c6:	085b      	lsrmi	r3, r3, #1
 800b0c8:	089b      	lsrpl	r3, r3, #2
 800b0ca:	2001      	movmi	r0, #1
 800b0cc:	600b      	strmi	r3, [r1, #0]
 800b0ce:	bf5c      	itt	pl
 800b0d0:	600b      	strpl	r3, [r1, #0]
 800b0d2:	2002      	movpl	r0, #2
 800b0d4:	4770      	bx	lr
 800b0d6:	b298      	uxth	r0, r3
 800b0d8:	b9b0      	cbnz	r0, 800b108 <__lo0bits+0x54>
 800b0da:	0c1b      	lsrs	r3, r3, #16
 800b0dc:	2010      	movs	r0, #16
 800b0de:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b0e2:	bf04      	itt	eq
 800b0e4:	0a1b      	lsreq	r3, r3, #8
 800b0e6:	3008      	addeq	r0, #8
 800b0e8:	071a      	lsls	r2, r3, #28
 800b0ea:	bf04      	itt	eq
 800b0ec:	091b      	lsreq	r3, r3, #4
 800b0ee:	3004      	addeq	r0, #4
 800b0f0:	079a      	lsls	r2, r3, #30
 800b0f2:	bf04      	itt	eq
 800b0f4:	089b      	lsreq	r3, r3, #2
 800b0f6:	3002      	addeq	r0, #2
 800b0f8:	07da      	lsls	r2, r3, #31
 800b0fa:	d403      	bmi.n	800b104 <__lo0bits+0x50>
 800b0fc:	085b      	lsrs	r3, r3, #1
 800b0fe:	f100 0001 	add.w	r0, r0, #1
 800b102:	d005      	beq.n	800b110 <__lo0bits+0x5c>
 800b104:	600b      	str	r3, [r1, #0]
 800b106:	4770      	bx	lr
 800b108:	4610      	mov	r0, r2
 800b10a:	e7e8      	b.n	800b0de <__lo0bits+0x2a>
 800b10c:	2000      	movs	r0, #0
 800b10e:	4770      	bx	lr
 800b110:	2020      	movs	r0, #32
 800b112:	4770      	bx	lr

0800b114 <__i2b>:
 800b114:	b510      	push	{r4, lr}
 800b116:	460c      	mov	r4, r1
 800b118:	2101      	movs	r1, #1
 800b11a:	f7ff feb5 	bl	800ae88 <_Balloc>
 800b11e:	4602      	mov	r2, r0
 800b120:	b928      	cbnz	r0, 800b12e <__i2b+0x1a>
 800b122:	4b05      	ldr	r3, [pc, #20]	; (800b138 <__i2b+0x24>)
 800b124:	4805      	ldr	r0, [pc, #20]	; (800b13c <__i2b+0x28>)
 800b126:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b12a:	f000 fdb5 	bl	800bc98 <__assert_func>
 800b12e:	2301      	movs	r3, #1
 800b130:	6144      	str	r4, [r0, #20]
 800b132:	6103      	str	r3, [r0, #16]
 800b134:	bd10      	pop	{r4, pc}
 800b136:	bf00      	nop
 800b138:	0800e8dc 	.word	0x0800e8dc
 800b13c:	0800e96c 	.word	0x0800e96c

0800b140 <__multiply>:
 800b140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b144:	4614      	mov	r4, r2
 800b146:	690a      	ldr	r2, [r1, #16]
 800b148:	6923      	ldr	r3, [r4, #16]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	bfb8      	it	lt
 800b14e:	460b      	movlt	r3, r1
 800b150:	460d      	mov	r5, r1
 800b152:	bfbc      	itt	lt
 800b154:	4625      	movlt	r5, r4
 800b156:	461c      	movlt	r4, r3
 800b158:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b15c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b160:	68ab      	ldr	r3, [r5, #8]
 800b162:	6869      	ldr	r1, [r5, #4]
 800b164:	eb0a 0709 	add.w	r7, sl, r9
 800b168:	42bb      	cmp	r3, r7
 800b16a:	b085      	sub	sp, #20
 800b16c:	bfb8      	it	lt
 800b16e:	3101      	addlt	r1, #1
 800b170:	f7ff fe8a 	bl	800ae88 <_Balloc>
 800b174:	b930      	cbnz	r0, 800b184 <__multiply+0x44>
 800b176:	4602      	mov	r2, r0
 800b178:	4b42      	ldr	r3, [pc, #264]	; (800b284 <__multiply+0x144>)
 800b17a:	4843      	ldr	r0, [pc, #268]	; (800b288 <__multiply+0x148>)
 800b17c:	f240 115d 	movw	r1, #349	; 0x15d
 800b180:	f000 fd8a 	bl	800bc98 <__assert_func>
 800b184:	f100 0614 	add.w	r6, r0, #20
 800b188:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b18c:	4633      	mov	r3, r6
 800b18e:	2200      	movs	r2, #0
 800b190:	4543      	cmp	r3, r8
 800b192:	d31e      	bcc.n	800b1d2 <__multiply+0x92>
 800b194:	f105 0c14 	add.w	ip, r5, #20
 800b198:	f104 0314 	add.w	r3, r4, #20
 800b19c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b1a0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b1a4:	9202      	str	r2, [sp, #8]
 800b1a6:	ebac 0205 	sub.w	r2, ip, r5
 800b1aa:	3a15      	subs	r2, #21
 800b1ac:	f022 0203 	bic.w	r2, r2, #3
 800b1b0:	3204      	adds	r2, #4
 800b1b2:	f105 0115 	add.w	r1, r5, #21
 800b1b6:	458c      	cmp	ip, r1
 800b1b8:	bf38      	it	cc
 800b1ba:	2204      	movcc	r2, #4
 800b1bc:	9201      	str	r2, [sp, #4]
 800b1be:	9a02      	ldr	r2, [sp, #8]
 800b1c0:	9303      	str	r3, [sp, #12]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d808      	bhi.n	800b1d8 <__multiply+0x98>
 800b1c6:	2f00      	cmp	r7, #0
 800b1c8:	dc55      	bgt.n	800b276 <__multiply+0x136>
 800b1ca:	6107      	str	r7, [r0, #16]
 800b1cc:	b005      	add	sp, #20
 800b1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d2:	f843 2b04 	str.w	r2, [r3], #4
 800b1d6:	e7db      	b.n	800b190 <__multiply+0x50>
 800b1d8:	f8b3 a000 	ldrh.w	sl, [r3]
 800b1dc:	f1ba 0f00 	cmp.w	sl, #0
 800b1e0:	d020      	beq.n	800b224 <__multiply+0xe4>
 800b1e2:	f105 0e14 	add.w	lr, r5, #20
 800b1e6:	46b1      	mov	r9, r6
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b1ee:	f8d9 b000 	ldr.w	fp, [r9]
 800b1f2:	b2a1      	uxth	r1, r4
 800b1f4:	fa1f fb8b 	uxth.w	fp, fp
 800b1f8:	fb0a b101 	mla	r1, sl, r1, fp
 800b1fc:	4411      	add	r1, r2
 800b1fe:	f8d9 2000 	ldr.w	r2, [r9]
 800b202:	0c24      	lsrs	r4, r4, #16
 800b204:	0c12      	lsrs	r2, r2, #16
 800b206:	fb0a 2404 	mla	r4, sl, r4, r2
 800b20a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b20e:	b289      	uxth	r1, r1
 800b210:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b214:	45f4      	cmp	ip, lr
 800b216:	f849 1b04 	str.w	r1, [r9], #4
 800b21a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b21e:	d8e4      	bhi.n	800b1ea <__multiply+0xaa>
 800b220:	9901      	ldr	r1, [sp, #4]
 800b222:	5072      	str	r2, [r6, r1]
 800b224:	9a03      	ldr	r2, [sp, #12]
 800b226:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b22a:	3304      	adds	r3, #4
 800b22c:	f1b9 0f00 	cmp.w	r9, #0
 800b230:	d01f      	beq.n	800b272 <__multiply+0x132>
 800b232:	6834      	ldr	r4, [r6, #0]
 800b234:	f105 0114 	add.w	r1, r5, #20
 800b238:	46b6      	mov	lr, r6
 800b23a:	f04f 0a00 	mov.w	sl, #0
 800b23e:	880a      	ldrh	r2, [r1, #0]
 800b240:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b244:	fb09 b202 	mla	r2, r9, r2, fp
 800b248:	4492      	add	sl, r2
 800b24a:	b2a4      	uxth	r4, r4
 800b24c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b250:	f84e 4b04 	str.w	r4, [lr], #4
 800b254:	f851 4b04 	ldr.w	r4, [r1], #4
 800b258:	f8be 2000 	ldrh.w	r2, [lr]
 800b25c:	0c24      	lsrs	r4, r4, #16
 800b25e:	fb09 2404 	mla	r4, r9, r4, r2
 800b262:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b266:	458c      	cmp	ip, r1
 800b268:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b26c:	d8e7      	bhi.n	800b23e <__multiply+0xfe>
 800b26e:	9a01      	ldr	r2, [sp, #4]
 800b270:	50b4      	str	r4, [r6, r2]
 800b272:	3604      	adds	r6, #4
 800b274:	e7a3      	b.n	800b1be <__multiply+0x7e>
 800b276:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d1a5      	bne.n	800b1ca <__multiply+0x8a>
 800b27e:	3f01      	subs	r7, #1
 800b280:	e7a1      	b.n	800b1c6 <__multiply+0x86>
 800b282:	bf00      	nop
 800b284:	0800e8dc 	.word	0x0800e8dc
 800b288:	0800e96c 	.word	0x0800e96c

0800b28c <__pow5mult>:
 800b28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b290:	4615      	mov	r5, r2
 800b292:	f012 0203 	ands.w	r2, r2, #3
 800b296:	4606      	mov	r6, r0
 800b298:	460f      	mov	r7, r1
 800b29a:	d007      	beq.n	800b2ac <__pow5mult+0x20>
 800b29c:	4c25      	ldr	r4, [pc, #148]	; (800b334 <__pow5mult+0xa8>)
 800b29e:	3a01      	subs	r2, #1
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2a6:	f7ff fe51 	bl	800af4c <__multadd>
 800b2aa:	4607      	mov	r7, r0
 800b2ac:	10ad      	asrs	r5, r5, #2
 800b2ae:	d03d      	beq.n	800b32c <__pow5mult+0xa0>
 800b2b0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2b2:	b97c      	cbnz	r4, 800b2d4 <__pow5mult+0x48>
 800b2b4:	2010      	movs	r0, #16
 800b2b6:	f7ff fdbf 	bl	800ae38 <malloc>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	6270      	str	r0, [r6, #36]	; 0x24
 800b2be:	b928      	cbnz	r0, 800b2cc <__pow5mult+0x40>
 800b2c0:	4b1d      	ldr	r3, [pc, #116]	; (800b338 <__pow5mult+0xac>)
 800b2c2:	481e      	ldr	r0, [pc, #120]	; (800b33c <__pow5mult+0xb0>)
 800b2c4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b2c8:	f000 fce6 	bl	800bc98 <__assert_func>
 800b2cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2d0:	6004      	str	r4, [r0, #0]
 800b2d2:	60c4      	str	r4, [r0, #12]
 800b2d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2dc:	b94c      	cbnz	r4, 800b2f2 <__pow5mult+0x66>
 800b2de:	f240 2171 	movw	r1, #625	; 0x271
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f7ff ff16 	bl	800b114 <__i2b>
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2ee:	4604      	mov	r4, r0
 800b2f0:	6003      	str	r3, [r0, #0]
 800b2f2:	f04f 0900 	mov.w	r9, #0
 800b2f6:	07eb      	lsls	r3, r5, #31
 800b2f8:	d50a      	bpl.n	800b310 <__pow5mult+0x84>
 800b2fa:	4639      	mov	r1, r7
 800b2fc:	4622      	mov	r2, r4
 800b2fe:	4630      	mov	r0, r6
 800b300:	f7ff ff1e 	bl	800b140 <__multiply>
 800b304:	4639      	mov	r1, r7
 800b306:	4680      	mov	r8, r0
 800b308:	4630      	mov	r0, r6
 800b30a:	f7ff fdfd 	bl	800af08 <_Bfree>
 800b30e:	4647      	mov	r7, r8
 800b310:	106d      	asrs	r5, r5, #1
 800b312:	d00b      	beq.n	800b32c <__pow5mult+0xa0>
 800b314:	6820      	ldr	r0, [r4, #0]
 800b316:	b938      	cbnz	r0, 800b328 <__pow5mult+0x9c>
 800b318:	4622      	mov	r2, r4
 800b31a:	4621      	mov	r1, r4
 800b31c:	4630      	mov	r0, r6
 800b31e:	f7ff ff0f 	bl	800b140 <__multiply>
 800b322:	6020      	str	r0, [r4, #0]
 800b324:	f8c0 9000 	str.w	r9, [r0]
 800b328:	4604      	mov	r4, r0
 800b32a:	e7e4      	b.n	800b2f6 <__pow5mult+0x6a>
 800b32c:	4638      	mov	r0, r7
 800b32e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b332:	bf00      	nop
 800b334:	0800eac0 	.word	0x0800eac0
 800b338:	0800e866 	.word	0x0800e866
 800b33c:	0800e96c 	.word	0x0800e96c

0800b340 <__lshift>:
 800b340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b344:	460c      	mov	r4, r1
 800b346:	6849      	ldr	r1, [r1, #4]
 800b348:	6923      	ldr	r3, [r4, #16]
 800b34a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b34e:	68a3      	ldr	r3, [r4, #8]
 800b350:	4607      	mov	r7, r0
 800b352:	4691      	mov	r9, r2
 800b354:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b358:	f108 0601 	add.w	r6, r8, #1
 800b35c:	42b3      	cmp	r3, r6
 800b35e:	db0b      	blt.n	800b378 <__lshift+0x38>
 800b360:	4638      	mov	r0, r7
 800b362:	f7ff fd91 	bl	800ae88 <_Balloc>
 800b366:	4605      	mov	r5, r0
 800b368:	b948      	cbnz	r0, 800b37e <__lshift+0x3e>
 800b36a:	4602      	mov	r2, r0
 800b36c:	4b28      	ldr	r3, [pc, #160]	; (800b410 <__lshift+0xd0>)
 800b36e:	4829      	ldr	r0, [pc, #164]	; (800b414 <__lshift+0xd4>)
 800b370:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b374:	f000 fc90 	bl	800bc98 <__assert_func>
 800b378:	3101      	adds	r1, #1
 800b37a:	005b      	lsls	r3, r3, #1
 800b37c:	e7ee      	b.n	800b35c <__lshift+0x1c>
 800b37e:	2300      	movs	r3, #0
 800b380:	f100 0114 	add.w	r1, r0, #20
 800b384:	f100 0210 	add.w	r2, r0, #16
 800b388:	4618      	mov	r0, r3
 800b38a:	4553      	cmp	r3, sl
 800b38c:	db33      	blt.n	800b3f6 <__lshift+0xb6>
 800b38e:	6920      	ldr	r0, [r4, #16]
 800b390:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b394:	f104 0314 	add.w	r3, r4, #20
 800b398:	f019 091f 	ands.w	r9, r9, #31
 800b39c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3a4:	d02b      	beq.n	800b3fe <__lshift+0xbe>
 800b3a6:	f1c9 0e20 	rsb	lr, r9, #32
 800b3aa:	468a      	mov	sl, r1
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	6818      	ldr	r0, [r3, #0]
 800b3b0:	fa00 f009 	lsl.w	r0, r0, r9
 800b3b4:	4302      	orrs	r2, r0
 800b3b6:	f84a 2b04 	str.w	r2, [sl], #4
 800b3ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3be:	459c      	cmp	ip, r3
 800b3c0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b3c4:	d8f3      	bhi.n	800b3ae <__lshift+0x6e>
 800b3c6:	ebac 0304 	sub.w	r3, ip, r4
 800b3ca:	3b15      	subs	r3, #21
 800b3cc:	f023 0303 	bic.w	r3, r3, #3
 800b3d0:	3304      	adds	r3, #4
 800b3d2:	f104 0015 	add.w	r0, r4, #21
 800b3d6:	4584      	cmp	ip, r0
 800b3d8:	bf38      	it	cc
 800b3da:	2304      	movcc	r3, #4
 800b3dc:	50ca      	str	r2, [r1, r3]
 800b3de:	b10a      	cbz	r2, 800b3e4 <__lshift+0xa4>
 800b3e0:	f108 0602 	add.w	r6, r8, #2
 800b3e4:	3e01      	subs	r6, #1
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	612e      	str	r6, [r5, #16]
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	f7ff fd8c 	bl	800af08 <_Bfree>
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3fa:	3301      	adds	r3, #1
 800b3fc:	e7c5      	b.n	800b38a <__lshift+0x4a>
 800b3fe:	3904      	subs	r1, #4
 800b400:	f853 2b04 	ldr.w	r2, [r3], #4
 800b404:	f841 2f04 	str.w	r2, [r1, #4]!
 800b408:	459c      	cmp	ip, r3
 800b40a:	d8f9      	bhi.n	800b400 <__lshift+0xc0>
 800b40c:	e7ea      	b.n	800b3e4 <__lshift+0xa4>
 800b40e:	bf00      	nop
 800b410:	0800e8dc 	.word	0x0800e8dc
 800b414:	0800e96c 	.word	0x0800e96c

0800b418 <__mcmp>:
 800b418:	b530      	push	{r4, r5, lr}
 800b41a:	6902      	ldr	r2, [r0, #16]
 800b41c:	690c      	ldr	r4, [r1, #16]
 800b41e:	1b12      	subs	r2, r2, r4
 800b420:	d10e      	bne.n	800b440 <__mcmp+0x28>
 800b422:	f100 0314 	add.w	r3, r0, #20
 800b426:	3114      	adds	r1, #20
 800b428:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b42c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b430:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b434:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b438:	42a5      	cmp	r5, r4
 800b43a:	d003      	beq.n	800b444 <__mcmp+0x2c>
 800b43c:	d305      	bcc.n	800b44a <__mcmp+0x32>
 800b43e:	2201      	movs	r2, #1
 800b440:	4610      	mov	r0, r2
 800b442:	bd30      	pop	{r4, r5, pc}
 800b444:	4283      	cmp	r3, r0
 800b446:	d3f3      	bcc.n	800b430 <__mcmp+0x18>
 800b448:	e7fa      	b.n	800b440 <__mcmp+0x28>
 800b44a:	f04f 32ff 	mov.w	r2, #4294967295
 800b44e:	e7f7      	b.n	800b440 <__mcmp+0x28>

0800b450 <__mdiff>:
 800b450:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	460c      	mov	r4, r1
 800b456:	4606      	mov	r6, r0
 800b458:	4611      	mov	r1, r2
 800b45a:	4620      	mov	r0, r4
 800b45c:	4617      	mov	r7, r2
 800b45e:	f7ff ffdb 	bl	800b418 <__mcmp>
 800b462:	1e05      	subs	r5, r0, #0
 800b464:	d110      	bne.n	800b488 <__mdiff+0x38>
 800b466:	4629      	mov	r1, r5
 800b468:	4630      	mov	r0, r6
 800b46a:	f7ff fd0d 	bl	800ae88 <_Balloc>
 800b46e:	b930      	cbnz	r0, 800b47e <__mdiff+0x2e>
 800b470:	4b39      	ldr	r3, [pc, #228]	; (800b558 <__mdiff+0x108>)
 800b472:	4602      	mov	r2, r0
 800b474:	f240 2132 	movw	r1, #562	; 0x232
 800b478:	4838      	ldr	r0, [pc, #224]	; (800b55c <__mdiff+0x10c>)
 800b47a:	f000 fc0d 	bl	800bc98 <__assert_func>
 800b47e:	2301      	movs	r3, #1
 800b480:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b484:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b488:	bfa4      	itt	ge
 800b48a:	463b      	movge	r3, r7
 800b48c:	4627      	movge	r7, r4
 800b48e:	4630      	mov	r0, r6
 800b490:	6879      	ldr	r1, [r7, #4]
 800b492:	bfa6      	itte	ge
 800b494:	461c      	movge	r4, r3
 800b496:	2500      	movge	r5, #0
 800b498:	2501      	movlt	r5, #1
 800b49a:	f7ff fcf5 	bl	800ae88 <_Balloc>
 800b49e:	b920      	cbnz	r0, 800b4aa <__mdiff+0x5a>
 800b4a0:	4b2d      	ldr	r3, [pc, #180]	; (800b558 <__mdiff+0x108>)
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b4a8:	e7e6      	b.n	800b478 <__mdiff+0x28>
 800b4aa:	693e      	ldr	r6, [r7, #16]
 800b4ac:	60c5      	str	r5, [r0, #12]
 800b4ae:	6925      	ldr	r5, [r4, #16]
 800b4b0:	f107 0114 	add.w	r1, r7, #20
 800b4b4:	f104 0914 	add.w	r9, r4, #20
 800b4b8:	f100 0e14 	add.w	lr, r0, #20
 800b4bc:	f107 0210 	add.w	r2, r7, #16
 800b4c0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b4c4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b4c8:	46f2      	mov	sl, lr
 800b4ca:	2700      	movs	r7, #0
 800b4cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b4d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b4d4:	fa1f f883 	uxth.w	r8, r3
 800b4d8:	fa17 f78b 	uxtah	r7, r7, fp
 800b4dc:	0c1b      	lsrs	r3, r3, #16
 800b4de:	eba7 0808 	sub.w	r8, r7, r8
 800b4e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b4e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b4ea:	fa1f f888 	uxth.w	r8, r8
 800b4ee:	141f      	asrs	r7, r3, #16
 800b4f0:	454d      	cmp	r5, r9
 800b4f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b4f6:	f84a 3b04 	str.w	r3, [sl], #4
 800b4fa:	d8e7      	bhi.n	800b4cc <__mdiff+0x7c>
 800b4fc:	1b2b      	subs	r3, r5, r4
 800b4fe:	3b15      	subs	r3, #21
 800b500:	f023 0303 	bic.w	r3, r3, #3
 800b504:	3304      	adds	r3, #4
 800b506:	3415      	adds	r4, #21
 800b508:	42a5      	cmp	r5, r4
 800b50a:	bf38      	it	cc
 800b50c:	2304      	movcc	r3, #4
 800b50e:	4419      	add	r1, r3
 800b510:	4473      	add	r3, lr
 800b512:	469e      	mov	lr, r3
 800b514:	460d      	mov	r5, r1
 800b516:	4565      	cmp	r5, ip
 800b518:	d30e      	bcc.n	800b538 <__mdiff+0xe8>
 800b51a:	f10c 0203 	add.w	r2, ip, #3
 800b51e:	1a52      	subs	r2, r2, r1
 800b520:	f022 0203 	bic.w	r2, r2, #3
 800b524:	3903      	subs	r1, #3
 800b526:	458c      	cmp	ip, r1
 800b528:	bf38      	it	cc
 800b52a:	2200      	movcc	r2, #0
 800b52c:	441a      	add	r2, r3
 800b52e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b532:	b17b      	cbz	r3, 800b554 <__mdiff+0x104>
 800b534:	6106      	str	r6, [r0, #16]
 800b536:	e7a5      	b.n	800b484 <__mdiff+0x34>
 800b538:	f855 8b04 	ldr.w	r8, [r5], #4
 800b53c:	fa17 f488 	uxtah	r4, r7, r8
 800b540:	1422      	asrs	r2, r4, #16
 800b542:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b546:	b2a4      	uxth	r4, r4
 800b548:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b54c:	f84e 4b04 	str.w	r4, [lr], #4
 800b550:	1417      	asrs	r7, r2, #16
 800b552:	e7e0      	b.n	800b516 <__mdiff+0xc6>
 800b554:	3e01      	subs	r6, #1
 800b556:	e7ea      	b.n	800b52e <__mdiff+0xde>
 800b558:	0800e8dc 	.word	0x0800e8dc
 800b55c:	0800e96c 	.word	0x0800e96c

0800b560 <__ulp>:
 800b560:	b082      	sub	sp, #8
 800b562:	ed8d 0b00 	vstr	d0, [sp]
 800b566:	9b01      	ldr	r3, [sp, #4]
 800b568:	4912      	ldr	r1, [pc, #72]	; (800b5b4 <__ulp+0x54>)
 800b56a:	4019      	ands	r1, r3
 800b56c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b570:	2900      	cmp	r1, #0
 800b572:	dd05      	ble.n	800b580 <__ulp+0x20>
 800b574:	2200      	movs	r2, #0
 800b576:	460b      	mov	r3, r1
 800b578:	ec43 2b10 	vmov	d0, r2, r3
 800b57c:	b002      	add	sp, #8
 800b57e:	4770      	bx	lr
 800b580:	4249      	negs	r1, r1
 800b582:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b586:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b58a:	f04f 0200 	mov.w	r2, #0
 800b58e:	f04f 0300 	mov.w	r3, #0
 800b592:	da04      	bge.n	800b59e <__ulp+0x3e>
 800b594:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b598:	fa41 f300 	asr.w	r3, r1, r0
 800b59c:	e7ec      	b.n	800b578 <__ulp+0x18>
 800b59e:	f1a0 0114 	sub.w	r1, r0, #20
 800b5a2:	291e      	cmp	r1, #30
 800b5a4:	bfda      	itte	le
 800b5a6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b5aa:	fa20 f101 	lsrle.w	r1, r0, r1
 800b5ae:	2101      	movgt	r1, #1
 800b5b0:	460a      	mov	r2, r1
 800b5b2:	e7e1      	b.n	800b578 <__ulp+0x18>
 800b5b4:	7ff00000 	.word	0x7ff00000

0800b5b8 <__b2d>:
 800b5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ba:	6905      	ldr	r5, [r0, #16]
 800b5bc:	f100 0714 	add.w	r7, r0, #20
 800b5c0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b5c4:	1f2e      	subs	r6, r5, #4
 800b5c6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b5ca:	4620      	mov	r0, r4
 800b5cc:	f7ff fd52 	bl	800b074 <__hi0bits>
 800b5d0:	f1c0 0320 	rsb	r3, r0, #32
 800b5d4:	280a      	cmp	r0, #10
 800b5d6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b654 <__b2d+0x9c>
 800b5da:	600b      	str	r3, [r1, #0]
 800b5dc:	dc14      	bgt.n	800b608 <__b2d+0x50>
 800b5de:	f1c0 0e0b 	rsb	lr, r0, #11
 800b5e2:	fa24 f10e 	lsr.w	r1, r4, lr
 800b5e6:	42b7      	cmp	r7, r6
 800b5e8:	ea41 030c 	orr.w	r3, r1, ip
 800b5ec:	bf34      	ite	cc
 800b5ee:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b5f2:	2100      	movcs	r1, #0
 800b5f4:	3015      	adds	r0, #21
 800b5f6:	fa04 f000 	lsl.w	r0, r4, r0
 800b5fa:	fa21 f10e 	lsr.w	r1, r1, lr
 800b5fe:	ea40 0201 	orr.w	r2, r0, r1
 800b602:	ec43 2b10 	vmov	d0, r2, r3
 800b606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b608:	42b7      	cmp	r7, r6
 800b60a:	bf3a      	itte	cc
 800b60c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b610:	f1a5 0608 	subcc.w	r6, r5, #8
 800b614:	2100      	movcs	r1, #0
 800b616:	380b      	subs	r0, #11
 800b618:	d017      	beq.n	800b64a <__b2d+0x92>
 800b61a:	f1c0 0c20 	rsb	ip, r0, #32
 800b61e:	fa04 f500 	lsl.w	r5, r4, r0
 800b622:	42be      	cmp	r6, r7
 800b624:	fa21 f40c 	lsr.w	r4, r1, ip
 800b628:	ea45 0504 	orr.w	r5, r5, r4
 800b62c:	bf8c      	ite	hi
 800b62e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b632:	2400      	movls	r4, #0
 800b634:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b638:	fa01 f000 	lsl.w	r0, r1, r0
 800b63c:	fa24 f40c 	lsr.w	r4, r4, ip
 800b640:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b644:	ea40 0204 	orr.w	r2, r0, r4
 800b648:	e7db      	b.n	800b602 <__b2d+0x4a>
 800b64a:	ea44 030c 	orr.w	r3, r4, ip
 800b64e:	460a      	mov	r2, r1
 800b650:	e7d7      	b.n	800b602 <__b2d+0x4a>
 800b652:	bf00      	nop
 800b654:	3ff00000 	.word	0x3ff00000

0800b658 <__d2b>:
 800b658:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b65c:	4689      	mov	r9, r1
 800b65e:	2101      	movs	r1, #1
 800b660:	ec57 6b10 	vmov	r6, r7, d0
 800b664:	4690      	mov	r8, r2
 800b666:	f7ff fc0f 	bl	800ae88 <_Balloc>
 800b66a:	4604      	mov	r4, r0
 800b66c:	b930      	cbnz	r0, 800b67c <__d2b+0x24>
 800b66e:	4602      	mov	r2, r0
 800b670:	4b25      	ldr	r3, [pc, #148]	; (800b708 <__d2b+0xb0>)
 800b672:	4826      	ldr	r0, [pc, #152]	; (800b70c <__d2b+0xb4>)
 800b674:	f240 310a 	movw	r1, #778	; 0x30a
 800b678:	f000 fb0e 	bl	800bc98 <__assert_func>
 800b67c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b680:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b684:	bb35      	cbnz	r5, 800b6d4 <__d2b+0x7c>
 800b686:	2e00      	cmp	r6, #0
 800b688:	9301      	str	r3, [sp, #4]
 800b68a:	d028      	beq.n	800b6de <__d2b+0x86>
 800b68c:	4668      	mov	r0, sp
 800b68e:	9600      	str	r6, [sp, #0]
 800b690:	f7ff fd10 	bl	800b0b4 <__lo0bits>
 800b694:	9900      	ldr	r1, [sp, #0]
 800b696:	b300      	cbz	r0, 800b6da <__d2b+0x82>
 800b698:	9a01      	ldr	r2, [sp, #4]
 800b69a:	f1c0 0320 	rsb	r3, r0, #32
 800b69e:	fa02 f303 	lsl.w	r3, r2, r3
 800b6a2:	430b      	orrs	r3, r1
 800b6a4:	40c2      	lsrs	r2, r0
 800b6a6:	6163      	str	r3, [r4, #20]
 800b6a8:	9201      	str	r2, [sp, #4]
 800b6aa:	9b01      	ldr	r3, [sp, #4]
 800b6ac:	61a3      	str	r3, [r4, #24]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	bf14      	ite	ne
 800b6b2:	2202      	movne	r2, #2
 800b6b4:	2201      	moveq	r2, #1
 800b6b6:	6122      	str	r2, [r4, #16]
 800b6b8:	b1d5      	cbz	r5, 800b6f0 <__d2b+0x98>
 800b6ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b6be:	4405      	add	r5, r0
 800b6c0:	f8c9 5000 	str.w	r5, [r9]
 800b6c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6c8:	f8c8 0000 	str.w	r0, [r8]
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	b003      	add	sp, #12
 800b6d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6d8:	e7d5      	b.n	800b686 <__d2b+0x2e>
 800b6da:	6161      	str	r1, [r4, #20]
 800b6dc:	e7e5      	b.n	800b6aa <__d2b+0x52>
 800b6de:	a801      	add	r0, sp, #4
 800b6e0:	f7ff fce8 	bl	800b0b4 <__lo0bits>
 800b6e4:	9b01      	ldr	r3, [sp, #4]
 800b6e6:	6163      	str	r3, [r4, #20]
 800b6e8:	2201      	movs	r2, #1
 800b6ea:	6122      	str	r2, [r4, #16]
 800b6ec:	3020      	adds	r0, #32
 800b6ee:	e7e3      	b.n	800b6b8 <__d2b+0x60>
 800b6f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b6f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b6f8:	f8c9 0000 	str.w	r0, [r9]
 800b6fc:	6918      	ldr	r0, [r3, #16]
 800b6fe:	f7ff fcb9 	bl	800b074 <__hi0bits>
 800b702:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b706:	e7df      	b.n	800b6c8 <__d2b+0x70>
 800b708:	0800e8dc 	.word	0x0800e8dc
 800b70c:	0800e96c 	.word	0x0800e96c

0800b710 <__ratio>:
 800b710:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b714:	4688      	mov	r8, r1
 800b716:	4669      	mov	r1, sp
 800b718:	4681      	mov	r9, r0
 800b71a:	f7ff ff4d 	bl	800b5b8 <__b2d>
 800b71e:	a901      	add	r1, sp, #4
 800b720:	4640      	mov	r0, r8
 800b722:	ec55 4b10 	vmov	r4, r5, d0
 800b726:	f7ff ff47 	bl	800b5b8 <__b2d>
 800b72a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b72e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b732:	eba3 0c02 	sub.w	ip, r3, r2
 800b736:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b73a:	1a9b      	subs	r3, r3, r2
 800b73c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b740:	ec51 0b10 	vmov	r0, r1, d0
 800b744:	2b00      	cmp	r3, #0
 800b746:	bfd6      	itet	le
 800b748:	460a      	movle	r2, r1
 800b74a:	462a      	movgt	r2, r5
 800b74c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b750:	468b      	mov	fp, r1
 800b752:	462f      	mov	r7, r5
 800b754:	bfd4      	ite	le
 800b756:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b75a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b75e:	4620      	mov	r0, r4
 800b760:	ee10 2a10 	vmov	r2, s0
 800b764:	465b      	mov	r3, fp
 800b766:	4639      	mov	r1, r7
 800b768:	f7f5 f870 	bl	800084c <__aeabi_ddiv>
 800b76c:	ec41 0b10 	vmov	d0, r0, r1
 800b770:	b003      	add	sp, #12
 800b772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b776 <__copybits>:
 800b776:	3901      	subs	r1, #1
 800b778:	b570      	push	{r4, r5, r6, lr}
 800b77a:	1149      	asrs	r1, r1, #5
 800b77c:	6914      	ldr	r4, [r2, #16]
 800b77e:	3101      	adds	r1, #1
 800b780:	f102 0314 	add.w	r3, r2, #20
 800b784:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b788:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b78c:	1f05      	subs	r5, r0, #4
 800b78e:	42a3      	cmp	r3, r4
 800b790:	d30c      	bcc.n	800b7ac <__copybits+0x36>
 800b792:	1aa3      	subs	r3, r4, r2
 800b794:	3b11      	subs	r3, #17
 800b796:	f023 0303 	bic.w	r3, r3, #3
 800b79a:	3211      	adds	r2, #17
 800b79c:	42a2      	cmp	r2, r4
 800b79e:	bf88      	it	hi
 800b7a0:	2300      	movhi	r3, #0
 800b7a2:	4418      	add	r0, r3
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	4288      	cmp	r0, r1
 800b7a8:	d305      	bcc.n	800b7b6 <__copybits+0x40>
 800b7aa:	bd70      	pop	{r4, r5, r6, pc}
 800b7ac:	f853 6b04 	ldr.w	r6, [r3], #4
 800b7b0:	f845 6f04 	str.w	r6, [r5, #4]!
 800b7b4:	e7eb      	b.n	800b78e <__copybits+0x18>
 800b7b6:	f840 3b04 	str.w	r3, [r0], #4
 800b7ba:	e7f4      	b.n	800b7a6 <__copybits+0x30>

0800b7bc <__any_on>:
 800b7bc:	f100 0214 	add.w	r2, r0, #20
 800b7c0:	6900      	ldr	r0, [r0, #16]
 800b7c2:	114b      	asrs	r3, r1, #5
 800b7c4:	4298      	cmp	r0, r3
 800b7c6:	b510      	push	{r4, lr}
 800b7c8:	db11      	blt.n	800b7ee <__any_on+0x32>
 800b7ca:	dd0a      	ble.n	800b7e2 <__any_on+0x26>
 800b7cc:	f011 011f 	ands.w	r1, r1, #31
 800b7d0:	d007      	beq.n	800b7e2 <__any_on+0x26>
 800b7d2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b7d6:	fa24 f001 	lsr.w	r0, r4, r1
 800b7da:	fa00 f101 	lsl.w	r1, r0, r1
 800b7de:	428c      	cmp	r4, r1
 800b7e0:	d10b      	bne.n	800b7fa <__any_on+0x3e>
 800b7e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d803      	bhi.n	800b7f2 <__any_on+0x36>
 800b7ea:	2000      	movs	r0, #0
 800b7ec:	bd10      	pop	{r4, pc}
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	e7f7      	b.n	800b7e2 <__any_on+0x26>
 800b7f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b7f6:	2900      	cmp	r1, #0
 800b7f8:	d0f5      	beq.n	800b7e6 <__any_on+0x2a>
 800b7fa:	2001      	movs	r0, #1
 800b7fc:	e7f6      	b.n	800b7ec <__any_on+0x30>

0800b7fe <_calloc_r>:
 800b7fe:	b513      	push	{r0, r1, r4, lr}
 800b800:	434a      	muls	r2, r1
 800b802:	4611      	mov	r1, r2
 800b804:	9201      	str	r2, [sp, #4]
 800b806:	f000 f859 	bl	800b8bc <_malloc_r>
 800b80a:	4604      	mov	r4, r0
 800b80c:	b118      	cbz	r0, 800b816 <_calloc_r+0x18>
 800b80e:	9a01      	ldr	r2, [sp, #4]
 800b810:	2100      	movs	r1, #0
 800b812:	f7fc fbc7 	bl	8007fa4 <memset>
 800b816:	4620      	mov	r0, r4
 800b818:	b002      	add	sp, #8
 800b81a:	bd10      	pop	{r4, pc}

0800b81c <_free_r>:
 800b81c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b81e:	2900      	cmp	r1, #0
 800b820:	d048      	beq.n	800b8b4 <_free_r+0x98>
 800b822:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b826:	9001      	str	r0, [sp, #4]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	f1a1 0404 	sub.w	r4, r1, #4
 800b82e:	bfb8      	it	lt
 800b830:	18e4      	addlt	r4, r4, r3
 800b832:	f000 fa7b 	bl	800bd2c <__malloc_lock>
 800b836:	4a20      	ldr	r2, [pc, #128]	; (800b8b8 <_free_r+0x9c>)
 800b838:	9801      	ldr	r0, [sp, #4]
 800b83a:	6813      	ldr	r3, [r2, #0]
 800b83c:	4615      	mov	r5, r2
 800b83e:	b933      	cbnz	r3, 800b84e <_free_r+0x32>
 800b840:	6063      	str	r3, [r4, #4]
 800b842:	6014      	str	r4, [r2, #0]
 800b844:	b003      	add	sp, #12
 800b846:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b84a:	f000 ba75 	b.w	800bd38 <__malloc_unlock>
 800b84e:	42a3      	cmp	r3, r4
 800b850:	d90b      	bls.n	800b86a <_free_r+0x4e>
 800b852:	6821      	ldr	r1, [r4, #0]
 800b854:	1862      	adds	r2, r4, r1
 800b856:	4293      	cmp	r3, r2
 800b858:	bf04      	itt	eq
 800b85a:	681a      	ldreq	r2, [r3, #0]
 800b85c:	685b      	ldreq	r3, [r3, #4]
 800b85e:	6063      	str	r3, [r4, #4]
 800b860:	bf04      	itt	eq
 800b862:	1852      	addeq	r2, r2, r1
 800b864:	6022      	streq	r2, [r4, #0]
 800b866:	602c      	str	r4, [r5, #0]
 800b868:	e7ec      	b.n	800b844 <_free_r+0x28>
 800b86a:	461a      	mov	r2, r3
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	b10b      	cbz	r3, 800b874 <_free_r+0x58>
 800b870:	42a3      	cmp	r3, r4
 800b872:	d9fa      	bls.n	800b86a <_free_r+0x4e>
 800b874:	6811      	ldr	r1, [r2, #0]
 800b876:	1855      	adds	r5, r2, r1
 800b878:	42a5      	cmp	r5, r4
 800b87a:	d10b      	bne.n	800b894 <_free_r+0x78>
 800b87c:	6824      	ldr	r4, [r4, #0]
 800b87e:	4421      	add	r1, r4
 800b880:	1854      	adds	r4, r2, r1
 800b882:	42a3      	cmp	r3, r4
 800b884:	6011      	str	r1, [r2, #0]
 800b886:	d1dd      	bne.n	800b844 <_free_r+0x28>
 800b888:	681c      	ldr	r4, [r3, #0]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	6053      	str	r3, [r2, #4]
 800b88e:	4421      	add	r1, r4
 800b890:	6011      	str	r1, [r2, #0]
 800b892:	e7d7      	b.n	800b844 <_free_r+0x28>
 800b894:	d902      	bls.n	800b89c <_free_r+0x80>
 800b896:	230c      	movs	r3, #12
 800b898:	6003      	str	r3, [r0, #0]
 800b89a:	e7d3      	b.n	800b844 <_free_r+0x28>
 800b89c:	6825      	ldr	r5, [r4, #0]
 800b89e:	1961      	adds	r1, r4, r5
 800b8a0:	428b      	cmp	r3, r1
 800b8a2:	bf04      	itt	eq
 800b8a4:	6819      	ldreq	r1, [r3, #0]
 800b8a6:	685b      	ldreq	r3, [r3, #4]
 800b8a8:	6063      	str	r3, [r4, #4]
 800b8aa:	bf04      	itt	eq
 800b8ac:	1949      	addeq	r1, r1, r5
 800b8ae:	6021      	streq	r1, [r4, #0]
 800b8b0:	6054      	str	r4, [r2, #4]
 800b8b2:	e7c7      	b.n	800b844 <_free_r+0x28>
 800b8b4:	b003      	add	sp, #12
 800b8b6:	bd30      	pop	{r4, r5, pc}
 800b8b8:	20000214 	.word	0x20000214

0800b8bc <_malloc_r>:
 800b8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8be:	1ccd      	adds	r5, r1, #3
 800b8c0:	f025 0503 	bic.w	r5, r5, #3
 800b8c4:	3508      	adds	r5, #8
 800b8c6:	2d0c      	cmp	r5, #12
 800b8c8:	bf38      	it	cc
 800b8ca:	250c      	movcc	r5, #12
 800b8cc:	2d00      	cmp	r5, #0
 800b8ce:	4606      	mov	r6, r0
 800b8d0:	db01      	blt.n	800b8d6 <_malloc_r+0x1a>
 800b8d2:	42a9      	cmp	r1, r5
 800b8d4:	d903      	bls.n	800b8de <_malloc_r+0x22>
 800b8d6:	230c      	movs	r3, #12
 800b8d8:	6033      	str	r3, [r6, #0]
 800b8da:	2000      	movs	r0, #0
 800b8dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8de:	f000 fa25 	bl	800bd2c <__malloc_lock>
 800b8e2:	4921      	ldr	r1, [pc, #132]	; (800b968 <_malloc_r+0xac>)
 800b8e4:	680a      	ldr	r2, [r1, #0]
 800b8e6:	4614      	mov	r4, r2
 800b8e8:	b99c      	cbnz	r4, 800b912 <_malloc_r+0x56>
 800b8ea:	4f20      	ldr	r7, [pc, #128]	; (800b96c <_malloc_r+0xb0>)
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	b923      	cbnz	r3, 800b8fa <_malloc_r+0x3e>
 800b8f0:	4621      	mov	r1, r4
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	f000 f9a0 	bl	800bc38 <_sbrk_r>
 800b8f8:	6038      	str	r0, [r7, #0]
 800b8fa:	4629      	mov	r1, r5
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f000 f99b 	bl	800bc38 <_sbrk_r>
 800b902:	1c43      	adds	r3, r0, #1
 800b904:	d123      	bne.n	800b94e <_malloc_r+0x92>
 800b906:	230c      	movs	r3, #12
 800b908:	6033      	str	r3, [r6, #0]
 800b90a:	4630      	mov	r0, r6
 800b90c:	f000 fa14 	bl	800bd38 <__malloc_unlock>
 800b910:	e7e3      	b.n	800b8da <_malloc_r+0x1e>
 800b912:	6823      	ldr	r3, [r4, #0]
 800b914:	1b5b      	subs	r3, r3, r5
 800b916:	d417      	bmi.n	800b948 <_malloc_r+0x8c>
 800b918:	2b0b      	cmp	r3, #11
 800b91a:	d903      	bls.n	800b924 <_malloc_r+0x68>
 800b91c:	6023      	str	r3, [r4, #0]
 800b91e:	441c      	add	r4, r3
 800b920:	6025      	str	r5, [r4, #0]
 800b922:	e004      	b.n	800b92e <_malloc_r+0x72>
 800b924:	6863      	ldr	r3, [r4, #4]
 800b926:	42a2      	cmp	r2, r4
 800b928:	bf0c      	ite	eq
 800b92a:	600b      	streq	r3, [r1, #0]
 800b92c:	6053      	strne	r3, [r2, #4]
 800b92e:	4630      	mov	r0, r6
 800b930:	f000 fa02 	bl	800bd38 <__malloc_unlock>
 800b934:	f104 000b 	add.w	r0, r4, #11
 800b938:	1d23      	adds	r3, r4, #4
 800b93a:	f020 0007 	bic.w	r0, r0, #7
 800b93e:	1ac2      	subs	r2, r0, r3
 800b940:	d0cc      	beq.n	800b8dc <_malloc_r+0x20>
 800b942:	1a1b      	subs	r3, r3, r0
 800b944:	50a3      	str	r3, [r4, r2]
 800b946:	e7c9      	b.n	800b8dc <_malloc_r+0x20>
 800b948:	4622      	mov	r2, r4
 800b94a:	6864      	ldr	r4, [r4, #4]
 800b94c:	e7cc      	b.n	800b8e8 <_malloc_r+0x2c>
 800b94e:	1cc4      	adds	r4, r0, #3
 800b950:	f024 0403 	bic.w	r4, r4, #3
 800b954:	42a0      	cmp	r0, r4
 800b956:	d0e3      	beq.n	800b920 <_malloc_r+0x64>
 800b958:	1a21      	subs	r1, r4, r0
 800b95a:	4630      	mov	r0, r6
 800b95c:	f000 f96c 	bl	800bc38 <_sbrk_r>
 800b960:	3001      	adds	r0, #1
 800b962:	d1dd      	bne.n	800b920 <_malloc_r+0x64>
 800b964:	e7cf      	b.n	800b906 <_malloc_r+0x4a>
 800b966:	bf00      	nop
 800b968:	20000214 	.word	0x20000214
 800b96c:	20000218 	.word	0x20000218

0800b970 <__ssputs_r>:
 800b970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b974:	688e      	ldr	r6, [r1, #8]
 800b976:	429e      	cmp	r6, r3
 800b978:	4682      	mov	sl, r0
 800b97a:	460c      	mov	r4, r1
 800b97c:	4690      	mov	r8, r2
 800b97e:	461f      	mov	r7, r3
 800b980:	d838      	bhi.n	800b9f4 <__ssputs_r+0x84>
 800b982:	898a      	ldrh	r2, [r1, #12]
 800b984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b988:	d032      	beq.n	800b9f0 <__ssputs_r+0x80>
 800b98a:	6825      	ldr	r5, [r4, #0]
 800b98c:	6909      	ldr	r1, [r1, #16]
 800b98e:	eba5 0901 	sub.w	r9, r5, r1
 800b992:	6965      	ldr	r5, [r4, #20]
 800b994:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b998:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b99c:	3301      	adds	r3, #1
 800b99e:	444b      	add	r3, r9
 800b9a0:	106d      	asrs	r5, r5, #1
 800b9a2:	429d      	cmp	r5, r3
 800b9a4:	bf38      	it	cc
 800b9a6:	461d      	movcc	r5, r3
 800b9a8:	0553      	lsls	r3, r2, #21
 800b9aa:	d531      	bpl.n	800ba10 <__ssputs_r+0xa0>
 800b9ac:	4629      	mov	r1, r5
 800b9ae:	f7ff ff85 	bl	800b8bc <_malloc_r>
 800b9b2:	4606      	mov	r6, r0
 800b9b4:	b950      	cbnz	r0, 800b9cc <__ssputs_r+0x5c>
 800b9b6:	230c      	movs	r3, #12
 800b9b8:	f8ca 3000 	str.w	r3, [sl]
 800b9bc:	89a3      	ldrh	r3, [r4, #12]
 800b9be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9c2:	81a3      	strh	r3, [r4, #12]
 800b9c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9cc:	6921      	ldr	r1, [r4, #16]
 800b9ce:	464a      	mov	r2, r9
 800b9d0:	f7ff fa4c 	bl	800ae6c <memcpy>
 800b9d4:	89a3      	ldrh	r3, [r4, #12]
 800b9d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9de:	81a3      	strh	r3, [r4, #12]
 800b9e0:	6126      	str	r6, [r4, #16]
 800b9e2:	6165      	str	r5, [r4, #20]
 800b9e4:	444e      	add	r6, r9
 800b9e6:	eba5 0509 	sub.w	r5, r5, r9
 800b9ea:	6026      	str	r6, [r4, #0]
 800b9ec:	60a5      	str	r5, [r4, #8]
 800b9ee:	463e      	mov	r6, r7
 800b9f0:	42be      	cmp	r6, r7
 800b9f2:	d900      	bls.n	800b9f6 <__ssputs_r+0x86>
 800b9f4:	463e      	mov	r6, r7
 800b9f6:	4632      	mov	r2, r6
 800b9f8:	6820      	ldr	r0, [r4, #0]
 800b9fa:	4641      	mov	r1, r8
 800b9fc:	f000 f97c 	bl	800bcf8 <memmove>
 800ba00:	68a3      	ldr	r3, [r4, #8]
 800ba02:	6822      	ldr	r2, [r4, #0]
 800ba04:	1b9b      	subs	r3, r3, r6
 800ba06:	4432      	add	r2, r6
 800ba08:	60a3      	str	r3, [r4, #8]
 800ba0a:	6022      	str	r2, [r4, #0]
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	e7db      	b.n	800b9c8 <__ssputs_r+0x58>
 800ba10:	462a      	mov	r2, r5
 800ba12:	f000 f997 	bl	800bd44 <_realloc_r>
 800ba16:	4606      	mov	r6, r0
 800ba18:	2800      	cmp	r0, #0
 800ba1a:	d1e1      	bne.n	800b9e0 <__ssputs_r+0x70>
 800ba1c:	6921      	ldr	r1, [r4, #16]
 800ba1e:	4650      	mov	r0, sl
 800ba20:	f7ff fefc 	bl	800b81c <_free_r>
 800ba24:	e7c7      	b.n	800b9b6 <__ssputs_r+0x46>
	...

0800ba28 <_svfiprintf_r>:
 800ba28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba2c:	4698      	mov	r8, r3
 800ba2e:	898b      	ldrh	r3, [r1, #12]
 800ba30:	061b      	lsls	r3, r3, #24
 800ba32:	b09d      	sub	sp, #116	; 0x74
 800ba34:	4607      	mov	r7, r0
 800ba36:	460d      	mov	r5, r1
 800ba38:	4614      	mov	r4, r2
 800ba3a:	d50e      	bpl.n	800ba5a <_svfiprintf_r+0x32>
 800ba3c:	690b      	ldr	r3, [r1, #16]
 800ba3e:	b963      	cbnz	r3, 800ba5a <_svfiprintf_r+0x32>
 800ba40:	2140      	movs	r1, #64	; 0x40
 800ba42:	f7ff ff3b 	bl	800b8bc <_malloc_r>
 800ba46:	6028      	str	r0, [r5, #0]
 800ba48:	6128      	str	r0, [r5, #16]
 800ba4a:	b920      	cbnz	r0, 800ba56 <_svfiprintf_r+0x2e>
 800ba4c:	230c      	movs	r3, #12
 800ba4e:	603b      	str	r3, [r7, #0]
 800ba50:	f04f 30ff 	mov.w	r0, #4294967295
 800ba54:	e0d1      	b.n	800bbfa <_svfiprintf_r+0x1d2>
 800ba56:	2340      	movs	r3, #64	; 0x40
 800ba58:	616b      	str	r3, [r5, #20]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba5e:	2320      	movs	r3, #32
 800ba60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba68:	2330      	movs	r3, #48	; 0x30
 800ba6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc14 <_svfiprintf_r+0x1ec>
 800ba6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba72:	f04f 0901 	mov.w	r9, #1
 800ba76:	4623      	mov	r3, r4
 800ba78:	469a      	mov	sl, r3
 800ba7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba7e:	b10a      	cbz	r2, 800ba84 <_svfiprintf_r+0x5c>
 800ba80:	2a25      	cmp	r2, #37	; 0x25
 800ba82:	d1f9      	bne.n	800ba78 <_svfiprintf_r+0x50>
 800ba84:	ebba 0b04 	subs.w	fp, sl, r4
 800ba88:	d00b      	beq.n	800baa2 <_svfiprintf_r+0x7a>
 800ba8a:	465b      	mov	r3, fp
 800ba8c:	4622      	mov	r2, r4
 800ba8e:	4629      	mov	r1, r5
 800ba90:	4638      	mov	r0, r7
 800ba92:	f7ff ff6d 	bl	800b970 <__ssputs_r>
 800ba96:	3001      	adds	r0, #1
 800ba98:	f000 80aa 	beq.w	800bbf0 <_svfiprintf_r+0x1c8>
 800ba9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba9e:	445a      	add	r2, fp
 800baa0:	9209      	str	r2, [sp, #36]	; 0x24
 800baa2:	f89a 3000 	ldrb.w	r3, [sl]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	f000 80a2 	beq.w	800bbf0 <_svfiprintf_r+0x1c8>
 800baac:	2300      	movs	r3, #0
 800baae:	f04f 32ff 	mov.w	r2, #4294967295
 800bab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bab6:	f10a 0a01 	add.w	sl, sl, #1
 800baba:	9304      	str	r3, [sp, #16]
 800babc:	9307      	str	r3, [sp, #28]
 800babe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bac2:	931a      	str	r3, [sp, #104]	; 0x68
 800bac4:	4654      	mov	r4, sl
 800bac6:	2205      	movs	r2, #5
 800bac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bacc:	4851      	ldr	r0, [pc, #324]	; (800bc14 <_svfiprintf_r+0x1ec>)
 800bace:	f7f4 fb87 	bl	80001e0 <memchr>
 800bad2:	9a04      	ldr	r2, [sp, #16]
 800bad4:	b9d8      	cbnz	r0, 800bb0e <_svfiprintf_r+0xe6>
 800bad6:	06d0      	lsls	r0, r2, #27
 800bad8:	bf44      	itt	mi
 800bada:	2320      	movmi	r3, #32
 800badc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bae0:	0711      	lsls	r1, r2, #28
 800bae2:	bf44      	itt	mi
 800bae4:	232b      	movmi	r3, #43	; 0x2b
 800bae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baea:	f89a 3000 	ldrb.w	r3, [sl]
 800baee:	2b2a      	cmp	r3, #42	; 0x2a
 800baf0:	d015      	beq.n	800bb1e <_svfiprintf_r+0xf6>
 800baf2:	9a07      	ldr	r2, [sp, #28]
 800baf4:	4654      	mov	r4, sl
 800baf6:	2000      	movs	r0, #0
 800baf8:	f04f 0c0a 	mov.w	ip, #10
 800bafc:	4621      	mov	r1, r4
 800bafe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb02:	3b30      	subs	r3, #48	; 0x30
 800bb04:	2b09      	cmp	r3, #9
 800bb06:	d94e      	bls.n	800bba6 <_svfiprintf_r+0x17e>
 800bb08:	b1b0      	cbz	r0, 800bb38 <_svfiprintf_r+0x110>
 800bb0a:	9207      	str	r2, [sp, #28]
 800bb0c:	e014      	b.n	800bb38 <_svfiprintf_r+0x110>
 800bb0e:	eba0 0308 	sub.w	r3, r0, r8
 800bb12:	fa09 f303 	lsl.w	r3, r9, r3
 800bb16:	4313      	orrs	r3, r2
 800bb18:	9304      	str	r3, [sp, #16]
 800bb1a:	46a2      	mov	sl, r4
 800bb1c:	e7d2      	b.n	800bac4 <_svfiprintf_r+0x9c>
 800bb1e:	9b03      	ldr	r3, [sp, #12]
 800bb20:	1d19      	adds	r1, r3, #4
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	9103      	str	r1, [sp, #12]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	bfbb      	ittet	lt
 800bb2a:	425b      	neglt	r3, r3
 800bb2c:	f042 0202 	orrlt.w	r2, r2, #2
 800bb30:	9307      	strge	r3, [sp, #28]
 800bb32:	9307      	strlt	r3, [sp, #28]
 800bb34:	bfb8      	it	lt
 800bb36:	9204      	strlt	r2, [sp, #16]
 800bb38:	7823      	ldrb	r3, [r4, #0]
 800bb3a:	2b2e      	cmp	r3, #46	; 0x2e
 800bb3c:	d10c      	bne.n	800bb58 <_svfiprintf_r+0x130>
 800bb3e:	7863      	ldrb	r3, [r4, #1]
 800bb40:	2b2a      	cmp	r3, #42	; 0x2a
 800bb42:	d135      	bne.n	800bbb0 <_svfiprintf_r+0x188>
 800bb44:	9b03      	ldr	r3, [sp, #12]
 800bb46:	1d1a      	adds	r2, r3, #4
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	9203      	str	r2, [sp, #12]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	bfb8      	it	lt
 800bb50:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb54:	3402      	adds	r4, #2
 800bb56:	9305      	str	r3, [sp, #20]
 800bb58:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc24 <_svfiprintf_r+0x1fc>
 800bb5c:	7821      	ldrb	r1, [r4, #0]
 800bb5e:	2203      	movs	r2, #3
 800bb60:	4650      	mov	r0, sl
 800bb62:	f7f4 fb3d 	bl	80001e0 <memchr>
 800bb66:	b140      	cbz	r0, 800bb7a <_svfiprintf_r+0x152>
 800bb68:	2340      	movs	r3, #64	; 0x40
 800bb6a:	eba0 000a 	sub.w	r0, r0, sl
 800bb6e:	fa03 f000 	lsl.w	r0, r3, r0
 800bb72:	9b04      	ldr	r3, [sp, #16]
 800bb74:	4303      	orrs	r3, r0
 800bb76:	3401      	adds	r4, #1
 800bb78:	9304      	str	r3, [sp, #16]
 800bb7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb7e:	4826      	ldr	r0, [pc, #152]	; (800bc18 <_svfiprintf_r+0x1f0>)
 800bb80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb84:	2206      	movs	r2, #6
 800bb86:	f7f4 fb2b 	bl	80001e0 <memchr>
 800bb8a:	2800      	cmp	r0, #0
 800bb8c:	d038      	beq.n	800bc00 <_svfiprintf_r+0x1d8>
 800bb8e:	4b23      	ldr	r3, [pc, #140]	; (800bc1c <_svfiprintf_r+0x1f4>)
 800bb90:	bb1b      	cbnz	r3, 800bbda <_svfiprintf_r+0x1b2>
 800bb92:	9b03      	ldr	r3, [sp, #12]
 800bb94:	3307      	adds	r3, #7
 800bb96:	f023 0307 	bic.w	r3, r3, #7
 800bb9a:	3308      	adds	r3, #8
 800bb9c:	9303      	str	r3, [sp, #12]
 800bb9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bba0:	4433      	add	r3, r6
 800bba2:	9309      	str	r3, [sp, #36]	; 0x24
 800bba4:	e767      	b.n	800ba76 <_svfiprintf_r+0x4e>
 800bba6:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbaa:	460c      	mov	r4, r1
 800bbac:	2001      	movs	r0, #1
 800bbae:	e7a5      	b.n	800bafc <_svfiprintf_r+0xd4>
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	3401      	adds	r4, #1
 800bbb4:	9305      	str	r3, [sp, #20]
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	f04f 0c0a 	mov.w	ip, #10
 800bbbc:	4620      	mov	r0, r4
 800bbbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbc2:	3a30      	subs	r2, #48	; 0x30
 800bbc4:	2a09      	cmp	r2, #9
 800bbc6:	d903      	bls.n	800bbd0 <_svfiprintf_r+0x1a8>
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d0c5      	beq.n	800bb58 <_svfiprintf_r+0x130>
 800bbcc:	9105      	str	r1, [sp, #20]
 800bbce:	e7c3      	b.n	800bb58 <_svfiprintf_r+0x130>
 800bbd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	e7f0      	b.n	800bbbc <_svfiprintf_r+0x194>
 800bbda:	ab03      	add	r3, sp, #12
 800bbdc:	9300      	str	r3, [sp, #0]
 800bbde:	462a      	mov	r2, r5
 800bbe0:	4b0f      	ldr	r3, [pc, #60]	; (800bc20 <_svfiprintf_r+0x1f8>)
 800bbe2:	a904      	add	r1, sp, #16
 800bbe4:	4638      	mov	r0, r7
 800bbe6:	f7fc fa85 	bl	80080f4 <_printf_float>
 800bbea:	1c42      	adds	r2, r0, #1
 800bbec:	4606      	mov	r6, r0
 800bbee:	d1d6      	bne.n	800bb9e <_svfiprintf_r+0x176>
 800bbf0:	89ab      	ldrh	r3, [r5, #12]
 800bbf2:	065b      	lsls	r3, r3, #25
 800bbf4:	f53f af2c 	bmi.w	800ba50 <_svfiprintf_r+0x28>
 800bbf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbfa:	b01d      	add	sp, #116	; 0x74
 800bbfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc00:	ab03      	add	r3, sp, #12
 800bc02:	9300      	str	r3, [sp, #0]
 800bc04:	462a      	mov	r2, r5
 800bc06:	4b06      	ldr	r3, [pc, #24]	; (800bc20 <_svfiprintf_r+0x1f8>)
 800bc08:	a904      	add	r1, sp, #16
 800bc0a:	4638      	mov	r0, r7
 800bc0c:	f7fc fd16 	bl	800863c <_printf_i>
 800bc10:	e7eb      	b.n	800bbea <_svfiprintf_r+0x1c2>
 800bc12:	bf00      	nop
 800bc14:	0800eacc 	.word	0x0800eacc
 800bc18:	0800ead6 	.word	0x0800ead6
 800bc1c:	080080f5 	.word	0x080080f5
 800bc20:	0800b971 	.word	0x0800b971
 800bc24:	0800ead2 	.word	0x0800ead2

0800bc28 <nan>:
 800bc28:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bc30 <nan+0x8>
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	00000000 	.word	0x00000000
 800bc34:	7ff80000 	.word	0x7ff80000

0800bc38 <_sbrk_r>:
 800bc38:	b538      	push	{r3, r4, r5, lr}
 800bc3a:	4d06      	ldr	r5, [pc, #24]	; (800bc54 <_sbrk_r+0x1c>)
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	4604      	mov	r4, r0
 800bc40:	4608      	mov	r0, r1
 800bc42:	602b      	str	r3, [r5, #0]
 800bc44:	f7f7 fe0a 	bl	800385c <_sbrk>
 800bc48:	1c43      	adds	r3, r0, #1
 800bc4a:	d102      	bne.n	800bc52 <_sbrk_r+0x1a>
 800bc4c:	682b      	ldr	r3, [r5, #0]
 800bc4e:	b103      	cbz	r3, 800bc52 <_sbrk_r+0x1a>
 800bc50:	6023      	str	r3, [r4, #0]
 800bc52:	bd38      	pop	{r3, r4, r5, pc}
 800bc54:	2000063c 	.word	0x2000063c

0800bc58 <strncmp>:
 800bc58:	b510      	push	{r4, lr}
 800bc5a:	b16a      	cbz	r2, 800bc78 <strncmp+0x20>
 800bc5c:	3901      	subs	r1, #1
 800bc5e:	1884      	adds	r4, r0, r2
 800bc60:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bc64:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	d103      	bne.n	800bc74 <strncmp+0x1c>
 800bc6c:	42a0      	cmp	r0, r4
 800bc6e:	d001      	beq.n	800bc74 <strncmp+0x1c>
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d1f5      	bne.n	800bc60 <strncmp+0x8>
 800bc74:	1a98      	subs	r0, r3, r2
 800bc76:	bd10      	pop	{r4, pc}
 800bc78:	4610      	mov	r0, r2
 800bc7a:	e7fc      	b.n	800bc76 <strncmp+0x1e>

0800bc7c <__ascii_wctomb>:
 800bc7c:	b149      	cbz	r1, 800bc92 <__ascii_wctomb+0x16>
 800bc7e:	2aff      	cmp	r2, #255	; 0xff
 800bc80:	bf85      	ittet	hi
 800bc82:	238a      	movhi	r3, #138	; 0x8a
 800bc84:	6003      	strhi	r3, [r0, #0]
 800bc86:	700a      	strbls	r2, [r1, #0]
 800bc88:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc8c:	bf98      	it	ls
 800bc8e:	2001      	movls	r0, #1
 800bc90:	4770      	bx	lr
 800bc92:	4608      	mov	r0, r1
 800bc94:	4770      	bx	lr
	...

0800bc98 <__assert_func>:
 800bc98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bc9a:	4614      	mov	r4, r2
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	4b09      	ldr	r3, [pc, #36]	; (800bcc4 <__assert_func+0x2c>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	4605      	mov	r5, r0
 800bca4:	68d8      	ldr	r0, [r3, #12]
 800bca6:	b14c      	cbz	r4, 800bcbc <__assert_func+0x24>
 800bca8:	4b07      	ldr	r3, [pc, #28]	; (800bcc8 <__assert_func+0x30>)
 800bcaa:	9100      	str	r1, [sp, #0]
 800bcac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bcb0:	4906      	ldr	r1, [pc, #24]	; (800bccc <__assert_func+0x34>)
 800bcb2:	462b      	mov	r3, r5
 800bcb4:	f000 f80e 	bl	800bcd4 <fiprintf>
 800bcb8:	f000 fa84 	bl	800c1c4 <abort>
 800bcbc:	4b04      	ldr	r3, [pc, #16]	; (800bcd0 <__assert_func+0x38>)
 800bcbe:	461c      	mov	r4, r3
 800bcc0:	e7f3      	b.n	800bcaa <__assert_func+0x12>
 800bcc2:	bf00      	nop
 800bcc4:	20000014 	.word	0x20000014
 800bcc8:	0800eadd 	.word	0x0800eadd
 800bccc:	0800eaea 	.word	0x0800eaea
 800bcd0:	0800eb18 	.word	0x0800eb18

0800bcd4 <fiprintf>:
 800bcd4:	b40e      	push	{r1, r2, r3}
 800bcd6:	b503      	push	{r0, r1, lr}
 800bcd8:	4601      	mov	r1, r0
 800bcda:	ab03      	add	r3, sp, #12
 800bcdc:	4805      	ldr	r0, [pc, #20]	; (800bcf4 <fiprintf+0x20>)
 800bcde:	f853 2b04 	ldr.w	r2, [r3], #4
 800bce2:	6800      	ldr	r0, [r0, #0]
 800bce4:	9301      	str	r3, [sp, #4]
 800bce6:	f000 f87d 	bl	800bde4 <_vfiprintf_r>
 800bcea:	b002      	add	sp, #8
 800bcec:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcf0:	b003      	add	sp, #12
 800bcf2:	4770      	bx	lr
 800bcf4:	20000014 	.word	0x20000014

0800bcf8 <memmove>:
 800bcf8:	4288      	cmp	r0, r1
 800bcfa:	b510      	push	{r4, lr}
 800bcfc:	eb01 0402 	add.w	r4, r1, r2
 800bd00:	d902      	bls.n	800bd08 <memmove+0x10>
 800bd02:	4284      	cmp	r4, r0
 800bd04:	4623      	mov	r3, r4
 800bd06:	d807      	bhi.n	800bd18 <memmove+0x20>
 800bd08:	1e43      	subs	r3, r0, #1
 800bd0a:	42a1      	cmp	r1, r4
 800bd0c:	d008      	beq.n	800bd20 <memmove+0x28>
 800bd0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd16:	e7f8      	b.n	800bd0a <memmove+0x12>
 800bd18:	4402      	add	r2, r0
 800bd1a:	4601      	mov	r1, r0
 800bd1c:	428a      	cmp	r2, r1
 800bd1e:	d100      	bne.n	800bd22 <memmove+0x2a>
 800bd20:	bd10      	pop	{r4, pc}
 800bd22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd2a:	e7f7      	b.n	800bd1c <memmove+0x24>

0800bd2c <__malloc_lock>:
 800bd2c:	4801      	ldr	r0, [pc, #4]	; (800bd34 <__malloc_lock+0x8>)
 800bd2e:	f000 bc09 	b.w	800c544 <__retarget_lock_acquire_recursive>
 800bd32:	bf00      	nop
 800bd34:	20000644 	.word	0x20000644

0800bd38 <__malloc_unlock>:
 800bd38:	4801      	ldr	r0, [pc, #4]	; (800bd40 <__malloc_unlock+0x8>)
 800bd3a:	f000 bc04 	b.w	800c546 <__retarget_lock_release_recursive>
 800bd3e:	bf00      	nop
 800bd40:	20000644 	.word	0x20000644

0800bd44 <_realloc_r>:
 800bd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd46:	4607      	mov	r7, r0
 800bd48:	4614      	mov	r4, r2
 800bd4a:	460e      	mov	r6, r1
 800bd4c:	b921      	cbnz	r1, 800bd58 <_realloc_r+0x14>
 800bd4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bd52:	4611      	mov	r1, r2
 800bd54:	f7ff bdb2 	b.w	800b8bc <_malloc_r>
 800bd58:	b922      	cbnz	r2, 800bd64 <_realloc_r+0x20>
 800bd5a:	f7ff fd5f 	bl	800b81c <_free_r>
 800bd5e:	4625      	mov	r5, r4
 800bd60:	4628      	mov	r0, r5
 800bd62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd64:	f000 fc54 	bl	800c610 <_malloc_usable_size_r>
 800bd68:	42a0      	cmp	r0, r4
 800bd6a:	d20f      	bcs.n	800bd8c <_realloc_r+0x48>
 800bd6c:	4621      	mov	r1, r4
 800bd6e:	4638      	mov	r0, r7
 800bd70:	f7ff fda4 	bl	800b8bc <_malloc_r>
 800bd74:	4605      	mov	r5, r0
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d0f2      	beq.n	800bd60 <_realloc_r+0x1c>
 800bd7a:	4631      	mov	r1, r6
 800bd7c:	4622      	mov	r2, r4
 800bd7e:	f7ff f875 	bl	800ae6c <memcpy>
 800bd82:	4631      	mov	r1, r6
 800bd84:	4638      	mov	r0, r7
 800bd86:	f7ff fd49 	bl	800b81c <_free_r>
 800bd8a:	e7e9      	b.n	800bd60 <_realloc_r+0x1c>
 800bd8c:	4635      	mov	r5, r6
 800bd8e:	e7e7      	b.n	800bd60 <_realloc_r+0x1c>

0800bd90 <__sfputc_r>:
 800bd90:	6893      	ldr	r3, [r2, #8]
 800bd92:	3b01      	subs	r3, #1
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	b410      	push	{r4}
 800bd98:	6093      	str	r3, [r2, #8]
 800bd9a:	da08      	bge.n	800bdae <__sfputc_r+0x1e>
 800bd9c:	6994      	ldr	r4, [r2, #24]
 800bd9e:	42a3      	cmp	r3, r4
 800bda0:	db01      	blt.n	800bda6 <__sfputc_r+0x16>
 800bda2:	290a      	cmp	r1, #10
 800bda4:	d103      	bne.n	800bdae <__sfputc_r+0x1e>
 800bda6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdaa:	f000 b94b 	b.w	800c044 <__swbuf_r>
 800bdae:	6813      	ldr	r3, [r2, #0]
 800bdb0:	1c58      	adds	r0, r3, #1
 800bdb2:	6010      	str	r0, [r2, #0]
 800bdb4:	7019      	strb	r1, [r3, #0]
 800bdb6:	4608      	mov	r0, r1
 800bdb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdbc:	4770      	bx	lr

0800bdbe <__sfputs_r>:
 800bdbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdc0:	4606      	mov	r6, r0
 800bdc2:	460f      	mov	r7, r1
 800bdc4:	4614      	mov	r4, r2
 800bdc6:	18d5      	adds	r5, r2, r3
 800bdc8:	42ac      	cmp	r4, r5
 800bdca:	d101      	bne.n	800bdd0 <__sfputs_r+0x12>
 800bdcc:	2000      	movs	r0, #0
 800bdce:	e007      	b.n	800bde0 <__sfputs_r+0x22>
 800bdd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdd4:	463a      	mov	r2, r7
 800bdd6:	4630      	mov	r0, r6
 800bdd8:	f7ff ffda 	bl	800bd90 <__sfputc_r>
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d1f3      	bne.n	800bdc8 <__sfputs_r+0xa>
 800bde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bde4 <_vfiprintf_r>:
 800bde4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bde8:	460d      	mov	r5, r1
 800bdea:	b09d      	sub	sp, #116	; 0x74
 800bdec:	4614      	mov	r4, r2
 800bdee:	4698      	mov	r8, r3
 800bdf0:	4606      	mov	r6, r0
 800bdf2:	b118      	cbz	r0, 800bdfc <_vfiprintf_r+0x18>
 800bdf4:	6983      	ldr	r3, [r0, #24]
 800bdf6:	b90b      	cbnz	r3, 800bdfc <_vfiprintf_r+0x18>
 800bdf8:	f000 fb06 	bl	800c408 <__sinit>
 800bdfc:	4b89      	ldr	r3, [pc, #548]	; (800c024 <_vfiprintf_r+0x240>)
 800bdfe:	429d      	cmp	r5, r3
 800be00:	d11b      	bne.n	800be3a <_vfiprintf_r+0x56>
 800be02:	6875      	ldr	r5, [r6, #4]
 800be04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be06:	07d9      	lsls	r1, r3, #31
 800be08:	d405      	bmi.n	800be16 <_vfiprintf_r+0x32>
 800be0a:	89ab      	ldrh	r3, [r5, #12]
 800be0c:	059a      	lsls	r2, r3, #22
 800be0e:	d402      	bmi.n	800be16 <_vfiprintf_r+0x32>
 800be10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be12:	f000 fb97 	bl	800c544 <__retarget_lock_acquire_recursive>
 800be16:	89ab      	ldrh	r3, [r5, #12]
 800be18:	071b      	lsls	r3, r3, #28
 800be1a:	d501      	bpl.n	800be20 <_vfiprintf_r+0x3c>
 800be1c:	692b      	ldr	r3, [r5, #16]
 800be1e:	b9eb      	cbnz	r3, 800be5c <_vfiprintf_r+0x78>
 800be20:	4629      	mov	r1, r5
 800be22:	4630      	mov	r0, r6
 800be24:	f000 f960 	bl	800c0e8 <__swsetup_r>
 800be28:	b1c0      	cbz	r0, 800be5c <_vfiprintf_r+0x78>
 800be2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800be2c:	07dc      	lsls	r4, r3, #31
 800be2e:	d50e      	bpl.n	800be4e <_vfiprintf_r+0x6a>
 800be30:	f04f 30ff 	mov.w	r0, #4294967295
 800be34:	b01d      	add	sp, #116	; 0x74
 800be36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be3a:	4b7b      	ldr	r3, [pc, #492]	; (800c028 <_vfiprintf_r+0x244>)
 800be3c:	429d      	cmp	r5, r3
 800be3e:	d101      	bne.n	800be44 <_vfiprintf_r+0x60>
 800be40:	68b5      	ldr	r5, [r6, #8]
 800be42:	e7df      	b.n	800be04 <_vfiprintf_r+0x20>
 800be44:	4b79      	ldr	r3, [pc, #484]	; (800c02c <_vfiprintf_r+0x248>)
 800be46:	429d      	cmp	r5, r3
 800be48:	bf08      	it	eq
 800be4a:	68f5      	ldreq	r5, [r6, #12]
 800be4c:	e7da      	b.n	800be04 <_vfiprintf_r+0x20>
 800be4e:	89ab      	ldrh	r3, [r5, #12]
 800be50:	0598      	lsls	r0, r3, #22
 800be52:	d4ed      	bmi.n	800be30 <_vfiprintf_r+0x4c>
 800be54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800be56:	f000 fb76 	bl	800c546 <__retarget_lock_release_recursive>
 800be5a:	e7e9      	b.n	800be30 <_vfiprintf_r+0x4c>
 800be5c:	2300      	movs	r3, #0
 800be5e:	9309      	str	r3, [sp, #36]	; 0x24
 800be60:	2320      	movs	r3, #32
 800be62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be66:	f8cd 800c 	str.w	r8, [sp, #12]
 800be6a:	2330      	movs	r3, #48	; 0x30
 800be6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c030 <_vfiprintf_r+0x24c>
 800be70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be74:	f04f 0901 	mov.w	r9, #1
 800be78:	4623      	mov	r3, r4
 800be7a:	469a      	mov	sl, r3
 800be7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be80:	b10a      	cbz	r2, 800be86 <_vfiprintf_r+0xa2>
 800be82:	2a25      	cmp	r2, #37	; 0x25
 800be84:	d1f9      	bne.n	800be7a <_vfiprintf_r+0x96>
 800be86:	ebba 0b04 	subs.w	fp, sl, r4
 800be8a:	d00b      	beq.n	800bea4 <_vfiprintf_r+0xc0>
 800be8c:	465b      	mov	r3, fp
 800be8e:	4622      	mov	r2, r4
 800be90:	4629      	mov	r1, r5
 800be92:	4630      	mov	r0, r6
 800be94:	f7ff ff93 	bl	800bdbe <__sfputs_r>
 800be98:	3001      	adds	r0, #1
 800be9a:	f000 80aa 	beq.w	800bff2 <_vfiprintf_r+0x20e>
 800be9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bea0:	445a      	add	r2, fp
 800bea2:	9209      	str	r2, [sp, #36]	; 0x24
 800bea4:	f89a 3000 	ldrb.w	r3, [sl]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f000 80a2 	beq.w	800bff2 <_vfiprintf_r+0x20e>
 800beae:	2300      	movs	r3, #0
 800beb0:	f04f 32ff 	mov.w	r2, #4294967295
 800beb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800beb8:	f10a 0a01 	add.w	sl, sl, #1
 800bebc:	9304      	str	r3, [sp, #16]
 800bebe:	9307      	str	r3, [sp, #28]
 800bec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bec4:	931a      	str	r3, [sp, #104]	; 0x68
 800bec6:	4654      	mov	r4, sl
 800bec8:	2205      	movs	r2, #5
 800beca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bece:	4858      	ldr	r0, [pc, #352]	; (800c030 <_vfiprintf_r+0x24c>)
 800bed0:	f7f4 f986 	bl	80001e0 <memchr>
 800bed4:	9a04      	ldr	r2, [sp, #16]
 800bed6:	b9d8      	cbnz	r0, 800bf10 <_vfiprintf_r+0x12c>
 800bed8:	06d1      	lsls	r1, r2, #27
 800beda:	bf44      	itt	mi
 800bedc:	2320      	movmi	r3, #32
 800bede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bee2:	0713      	lsls	r3, r2, #28
 800bee4:	bf44      	itt	mi
 800bee6:	232b      	movmi	r3, #43	; 0x2b
 800bee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800beec:	f89a 3000 	ldrb.w	r3, [sl]
 800bef0:	2b2a      	cmp	r3, #42	; 0x2a
 800bef2:	d015      	beq.n	800bf20 <_vfiprintf_r+0x13c>
 800bef4:	9a07      	ldr	r2, [sp, #28]
 800bef6:	4654      	mov	r4, sl
 800bef8:	2000      	movs	r0, #0
 800befa:	f04f 0c0a 	mov.w	ip, #10
 800befe:	4621      	mov	r1, r4
 800bf00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf04:	3b30      	subs	r3, #48	; 0x30
 800bf06:	2b09      	cmp	r3, #9
 800bf08:	d94e      	bls.n	800bfa8 <_vfiprintf_r+0x1c4>
 800bf0a:	b1b0      	cbz	r0, 800bf3a <_vfiprintf_r+0x156>
 800bf0c:	9207      	str	r2, [sp, #28]
 800bf0e:	e014      	b.n	800bf3a <_vfiprintf_r+0x156>
 800bf10:	eba0 0308 	sub.w	r3, r0, r8
 800bf14:	fa09 f303 	lsl.w	r3, r9, r3
 800bf18:	4313      	orrs	r3, r2
 800bf1a:	9304      	str	r3, [sp, #16]
 800bf1c:	46a2      	mov	sl, r4
 800bf1e:	e7d2      	b.n	800bec6 <_vfiprintf_r+0xe2>
 800bf20:	9b03      	ldr	r3, [sp, #12]
 800bf22:	1d19      	adds	r1, r3, #4
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	9103      	str	r1, [sp, #12]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	bfbb      	ittet	lt
 800bf2c:	425b      	neglt	r3, r3
 800bf2e:	f042 0202 	orrlt.w	r2, r2, #2
 800bf32:	9307      	strge	r3, [sp, #28]
 800bf34:	9307      	strlt	r3, [sp, #28]
 800bf36:	bfb8      	it	lt
 800bf38:	9204      	strlt	r2, [sp, #16]
 800bf3a:	7823      	ldrb	r3, [r4, #0]
 800bf3c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf3e:	d10c      	bne.n	800bf5a <_vfiprintf_r+0x176>
 800bf40:	7863      	ldrb	r3, [r4, #1]
 800bf42:	2b2a      	cmp	r3, #42	; 0x2a
 800bf44:	d135      	bne.n	800bfb2 <_vfiprintf_r+0x1ce>
 800bf46:	9b03      	ldr	r3, [sp, #12]
 800bf48:	1d1a      	adds	r2, r3, #4
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	9203      	str	r2, [sp, #12]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	bfb8      	it	lt
 800bf52:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf56:	3402      	adds	r4, #2
 800bf58:	9305      	str	r3, [sp, #20]
 800bf5a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c040 <_vfiprintf_r+0x25c>
 800bf5e:	7821      	ldrb	r1, [r4, #0]
 800bf60:	2203      	movs	r2, #3
 800bf62:	4650      	mov	r0, sl
 800bf64:	f7f4 f93c 	bl	80001e0 <memchr>
 800bf68:	b140      	cbz	r0, 800bf7c <_vfiprintf_r+0x198>
 800bf6a:	2340      	movs	r3, #64	; 0x40
 800bf6c:	eba0 000a 	sub.w	r0, r0, sl
 800bf70:	fa03 f000 	lsl.w	r0, r3, r0
 800bf74:	9b04      	ldr	r3, [sp, #16]
 800bf76:	4303      	orrs	r3, r0
 800bf78:	3401      	adds	r4, #1
 800bf7a:	9304      	str	r3, [sp, #16]
 800bf7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf80:	482c      	ldr	r0, [pc, #176]	; (800c034 <_vfiprintf_r+0x250>)
 800bf82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf86:	2206      	movs	r2, #6
 800bf88:	f7f4 f92a 	bl	80001e0 <memchr>
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d03f      	beq.n	800c010 <_vfiprintf_r+0x22c>
 800bf90:	4b29      	ldr	r3, [pc, #164]	; (800c038 <_vfiprintf_r+0x254>)
 800bf92:	bb1b      	cbnz	r3, 800bfdc <_vfiprintf_r+0x1f8>
 800bf94:	9b03      	ldr	r3, [sp, #12]
 800bf96:	3307      	adds	r3, #7
 800bf98:	f023 0307 	bic.w	r3, r3, #7
 800bf9c:	3308      	adds	r3, #8
 800bf9e:	9303      	str	r3, [sp, #12]
 800bfa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfa2:	443b      	add	r3, r7
 800bfa4:	9309      	str	r3, [sp, #36]	; 0x24
 800bfa6:	e767      	b.n	800be78 <_vfiprintf_r+0x94>
 800bfa8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfac:	460c      	mov	r4, r1
 800bfae:	2001      	movs	r0, #1
 800bfb0:	e7a5      	b.n	800befe <_vfiprintf_r+0x11a>
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	3401      	adds	r4, #1
 800bfb6:	9305      	str	r3, [sp, #20]
 800bfb8:	4619      	mov	r1, r3
 800bfba:	f04f 0c0a 	mov.w	ip, #10
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfc4:	3a30      	subs	r2, #48	; 0x30
 800bfc6:	2a09      	cmp	r2, #9
 800bfc8:	d903      	bls.n	800bfd2 <_vfiprintf_r+0x1ee>
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d0c5      	beq.n	800bf5a <_vfiprintf_r+0x176>
 800bfce:	9105      	str	r1, [sp, #20]
 800bfd0:	e7c3      	b.n	800bf5a <_vfiprintf_r+0x176>
 800bfd2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e7f0      	b.n	800bfbe <_vfiprintf_r+0x1da>
 800bfdc:	ab03      	add	r3, sp, #12
 800bfde:	9300      	str	r3, [sp, #0]
 800bfe0:	462a      	mov	r2, r5
 800bfe2:	4b16      	ldr	r3, [pc, #88]	; (800c03c <_vfiprintf_r+0x258>)
 800bfe4:	a904      	add	r1, sp, #16
 800bfe6:	4630      	mov	r0, r6
 800bfe8:	f7fc f884 	bl	80080f4 <_printf_float>
 800bfec:	4607      	mov	r7, r0
 800bfee:	1c78      	adds	r0, r7, #1
 800bff0:	d1d6      	bne.n	800bfa0 <_vfiprintf_r+0x1bc>
 800bff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bff4:	07d9      	lsls	r1, r3, #31
 800bff6:	d405      	bmi.n	800c004 <_vfiprintf_r+0x220>
 800bff8:	89ab      	ldrh	r3, [r5, #12]
 800bffa:	059a      	lsls	r2, r3, #22
 800bffc:	d402      	bmi.n	800c004 <_vfiprintf_r+0x220>
 800bffe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c000:	f000 faa1 	bl	800c546 <__retarget_lock_release_recursive>
 800c004:	89ab      	ldrh	r3, [r5, #12]
 800c006:	065b      	lsls	r3, r3, #25
 800c008:	f53f af12 	bmi.w	800be30 <_vfiprintf_r+0x4c>
 800c00c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c00e:	e711      	b.n	800be34 <_vfiprintf_r+0x50>
 800c010:	ab03      	add	r3, sp, #12
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	462a      	mov	r2, r5
 800c016:	4b09      	ldr	r3, [pc, #36]	; (800c03c <_vfiprintf_r+0x258>)
 800c018:	a904      	add	r1, sp, #16
 800c01a:	4630      	mov	r0, r6
 800c01c:	f7fc fb0e 	bl	800863c <_printf_i>
 800c020:	e7e4      	b.n	800bfec <_vfiprintf_r+0x208>
 800c022:	bf00      	nop
 800c024:	0800eb3c 	.word	0x0800eb3c
 800c028:	0800eb5c 	.word	0x0800eb5c
 800c02c:	0800eb1c 	.word	0x0800eb1c
 800c030:	0800eacc 	.word	0x0800eacc
 800c034:	0800ead6 	.word	0x0800ead6
 800c038:	080080f5 	.word	0x080080f5
 800c03c:	0800bdbf 	.word	0x0800bdbf
 800c040:	0800ead2 	.word	0x0800ead2

0800c044 <__swbuf_r>:
 800c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c046:	460e      	mov	r6, r1
 800c048:	4614      	mov	r4, r2
 800c04a:	4605      	mov	r5, r0
 800c04c:	b118      	cbz	r0, 800c056 <__swbuf_r+0x12>
 800c04e:	6983      	ldr	r3, [r0, #24]
 800c050:	b90b      	cbnz	r3, 800c056 <__swbuf_r+0x12>
 800c052:	f000 f9d9 	bl	800c408 <__sinit>
 800c056:	4b21      	ldr	r3, [pc, #132]	; (800c0dc <__swbuf_r+0x98>)
 800c058:	429c      	cmp	r4, r3
 800c05a:	d12b      	bne.n	800c0b4 <__swbuf_r+0x70>
 800c05c:	686c      	ldr	r4, [r5, #4]
 800c05e:	69a3      	ldr	r3, [r4, #24]
 800c060:	60a3      	str	r3, [r4, #8]
 800c062:	89a3      	ldrh	r3, [r4, #12]
 800c064:	071a      	lsls	r2, r3, #28
 800c066:	d52f      	bpl.n	800c0c8 <__swbuf_r+0x84>
 800c068:	6923      	ldr	r3, [r4, #16]
 800c06a:	b36b      	cbz	r3, 800c0c8 <__swbuf_r+0x84>
 800c06c:	6923      	ldr	r3, [r4, #16]
 800c06e:	6820      	ldr	r0, [r4, #0]
 800c070:	1ac0      	subs	r0, r0, r3
 800c072:	6963      	ldr	r3, [r4, #20]
 800c074:	b2f6      	uxtb	r6, r6
 800c076:	4283      	cmp	r3, r0
 800c078:	4637      	mov	r7, r6
 800c07a:	dc04      	bgt.n	800c086 <__swbuf_r+0x42>
 800c07c:	4621      	mov	r1, r4
 800c07e:	4628      	mov	r0, r5
 800c080:	f000 f92e 	bl	800c2e0 <_fflush_r>
 800c084:	bb30      	cbnz	r0, 800c0d4 <__swbuf_r+0x90>
 800c086:	68a3      	ldr	r3, [r4, #8]
 800c088:	3b01      	subs	r3, #1
 800c08a:	60a3      	str	r3, [r4, #8]
 800c08c:	6823      	ldr	r3, [r4, #0]
 800c08e:	1c5a      	adds	r2, r3, #1
 800c090:	6022      	str	r2, [r4, #0]
 800c092:	701e      	strb	r6, [r3, #0]
 800c094:	6963      	ldr	r3, [r4, #20]
 800c096:	3001      	adds	r0, #1
 800c098:	4283      	cmp	r3, r0
 800c09a:	d004      	beq.n	800c0a6 <__swbuf_r+0x62>
 800c09c:	89a3      	ldrh	r3, [r4, #12]
 800c09e:	07db      	lsls	r3, r3, #31
 800c0a0:	d506      	bpl.n	800c0b0 <__swbuf_r+0x6c>
 800c0a2:	2e0a      	cmp	r6, #10
 800c0a4:	d104      	bne.n	800c0b0 <__swbuf_r+0x6c>
 800c0a6:	4621      	mov	r1, r4
 800c0a8:	4628      	mov	r0, r5
 800c0aa:	f000 f919 	bl	800c2e0 <_fflush_r>
 800c0ae:	b988      	cbnz	r0, 800c0d4 <__swbuf_r+0x90>
 800c0b0:	4638      	mov	r0, r7
 800c0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0b4:	4b0a      	ldr	r3, [pc, #40]	; (800c0e0 <__swbuf_r+0x9c>)
 800c0b6:	429c      	cmp	r4, r3
 800c0b8:	d101      	bne.n	800c0be <__swbuf_r+0x7a>
 800c0ba:	68ac      	ldr	r4, [r5, #8]
 800c0bc:	e7cf      	b.n	800c05e <__swbuf_r+0x1a>
 800c0be:	4b09      	ldr	r3, [pc, #36]	; (800c0e4 <__swbuf_r+0xa0>)
 800c0c0:	429c      	cmp	r4, r3
 800c0c2:	bf08      	it	eq
 800c0c4:	68ec      	ldreq	r4, [r5, #12]
 800c0c6:	e7ca      	b.n	800c05e <__swbuf_r+0x1a>
 800c0c8:	4621      	mov	r1, r4
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	f000 f80c 	bl	800c0e8 <__swsetup_r>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	d0cb      	beq.n	800c06c <__swbuf_r+0x28>
 800c0d4:	f04f 37ff 	mov.w	r7, #4294967295
 800c0d8:	e7ea      	b.n	800c0b0 <__swbuf_r+0x6c>
 800c0da:	bf00      	nop
 800c0dc:	0800eb3c 	.word	0x0800eb3c
 800c0e0:	0800eb5c 	.word	0x0800eb5c
 800c0e4:	0800eb1c 	.word	0x0800eb1c

0800c0e8 <__swsetup_r>:
 800c0e8:	4b32      	ldr	r3, [pc, #200]	; (800c1b4 <__swsetup_r+0xcc>)
 800c0ea:	b570      	push	{r4, r5, r6, lr}
 800c0ec:	681d      	ldr	r5, [r3, #0]
 800c0ee:	4606      	mov	r6, r0
 800c0f0:	460c      	mov	r4, r1
 800c0f2:	b125      	cbz	r5, 800c0fe <__swsetup_r+0x16>
 800c0f4:	69ab      	ldr	r3, [r5, #24]
 800c0f6:	b913      	cbnz	r3, 800c0fe <__swsetup_r+0x16>
 800c0f8:	4628      	mov	r0, r5
 800c0fa:	f000 f985 	bl	800c408 <__sinit>
 800c0fe:	4b2e      	ldr	r3, [pc, #184]	; (800c1b8 <__swsetup_r+0xd0>)
 800c100:	429c      	cmp	r4, r3
 800c102:	d10f      	bne.n	800c124 <__swsetup_r+0x3c>
 800c104:	686c      	ldr	r4, [r5, #4]
 800c106:	89a3      	ldrh	r3, [r4, #12]
 800c108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c10c:	0719      	lsls	r1, r3, #28
 800c10e:	d42c      	bmi.n	800c16a <__swsetup_r+0x82>
 800c110:	06dd      	lsls	r5, r3, #27
 800c112:	d411      	bmi.n	800c138 <__swsetup_r+0x50>
 800c114:	2309      	movs	r3, #9
 800c116:	6033      	str	r3, [r6, #0]
 800c118:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c11c:	81a3      	strh	r3, [r4, #12]
 800c11e:	f04f 30ff 	mov.w	r0, #4294967295
 800c122:	e03e      	b.n	800c1a2 <__swsetup_r+0xba>
 800c124:	4b25      	ldr	r3, [pc, #148]	; (800c1bc <__swsetup_r+0xd4>)
 800c126:	429c      	cmp	r4, r3
 800c128:	d101      	bne.n	800c12e <__swsetup_r+0x46>
 800c12a:	68ac      	ldr	r4, [r5, #8]
 800c12c:	e7eb      	b.n	800c106 <__swsetup_r+0x1e>
 800c12e:	4b24      	ldr	r3, [pc, #144]	; (800c1c0 <__swsetup_r+0xd8>)
 800c130:	429c      	cmp	r4, r3
 800c132:	bf08      	it	eq
 800c134:	68ec      	ldreq	r4, [r5, #12]
 800c136:	e7e6      	b.n	800c106 <__swsetup_r+0x1e>
 800c138:	0758      	lsls	r0, r3, #29
 800c13a:	d512      	bpl.n	800c162 <__swsetup_r+0x7a>
 800c13c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c13e:	b141      	cbz	r1, 800c152 <__swsetup_r+0x6a>
 800c140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c144:	4299      	cmp	r1, r3
 800c146:	d002      	beq.n	800c14e <__swsetup_r+0x66>
 800c148:	4630      	mov	r0, r6
 800c14a:	f7ff fb67 	bl	800b81c <_free_r>
 800c14e:	2300      	movs	r3, #0
 800c150:	6363      	str	r3, [r4, #52]	; 0x34
 800c152:	89a3      	ldrh	r3, [r4, #12]
 800c154:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c158:	81a3      	strh	r3, [r4, #12]
 800c15a:	2300      	movs	r3, #0
 800c15c:	6063      	str	r3, [r4, #4]
 800c15e:	6923      	ldr	r3, [r4, #16]
 800c160:	6023      	str	r3, [r4, #0]
 800c162:	89a3      	ldrh	r3, [r4, #12]
 800c164:	f043 0308 	orr.w	r3, r3, #8
 800c168:	81a3      	strh	r3, [r4, #12]
 800c16a:	6923      	ldr	r3, [r4, #16]
 800c16c:	b94b      	cbnz	r3, 800c182 <__swsetup_r+0x9a>
 800c16e:	89a3      	ldrh	r3, [r4, #12]
 800c170:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c178:	d003      	beq.n	800c182 <__swsetup_r+0x9a>
 800c17a:	4621      	mov	r1, r4
 800c17c:	4630      	mov	r0, r6
 800c17e:	f000 fa07 	bl	800c590 <__smakebuf_r>
 800c182:	89a0      	ldrh	r0, [r4, #12]
 800c184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c188:	f010 0301 	ands.w	r3, r0, #1
 800c18c:	d00a      	beq.n	800c1a4 <__swsetup_r+0xbc>
 800c18e:	2300      	movs	r3, #0
 800c190:	60a3      	str	r3, [r4, #8]
 800c192:	6963      	ldr	r3, [r4, #20]
 800c194:	425b      	negs	r3, r3
 800c196:	61a3      	str	r3, [r4, #24]
 800c198:	6923      	ldr	r3, [r4, #16]
 800c19a:	b943      	cbnz	r3, 800c1ae <__swsetup_r+0xc6>
 800c19c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c1a0:	d1ba      	bne.n	800c118 <__swsetup_r+0x30>
 800c1a2:	bd70      	pop	{r4, r5, r6, pc}
 800c1a4:	0781      	lsls	r1, r0, #30
 800c1a6:	bf58      	it	pl
 800c1a8:	6963      	ldrpl	r3, [r4, #20]
 800c1aa:	60a3      	str	r3, [r4, #8]
 800c1ac:	e7f4      	b.n	800c198 <__swsetup_r+0xb0>
 800c1ae:	2000      	movs	r0, #0
 800c1b0:	e7f7      	b.n	800c1a2 <__swsetup_r+0xba>
 800c1b2:	bf00      	nop
 800c1b4:	20000014 	.word	0x20000014
 800c1b8:	0800eb3c 	.word	0x0800eb3c
 800c1bc:	0800eb5c 	.word	0x0800eb5c
 800c1c0:	0800eb1c 	.word	0x0800eb1c

0800c1c4 <abort>:
 800c1c4:	b508      	push	{r3, lr}
 800c1c6:	2006      	movs	r0, #6
 800c1c8:	f000 fa52 	bl	800c670 <raise>
 800c1cc:	2001      	movs	r0, #1
 800c1ce:	f7f7 facd 	bl	800376c <_exit>
	...

0800c1d4 <__sflush_r>:
 800c1d4:	898a      	ldrh	r2, [r1, #12]
 800c1d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1da:	4605      	mov	r5, r0
 800c1dc:	0710      	lsls	r0, r2, #28
 800c1de:	460c      	mov	r4, r1
 800c1e0:	d458      	bmi.n	800c294 <__sflush_r+0xc0>
 800c1e2:	684b      	ldr	r3, [r1, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	dc05      	bgt.n	800c1f4 <__sflush_r+0x20>
 800c1e8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	dc02      	bgt.n	800c1f4 <__sflush_r+0x20>
 800c1ee:	2000      	movs	r0, #0
 800c1f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c1f6:	2e00      	cmp	r6, #0
 800c1f8:	d0f9      	beq.n	800c1ee <__sflush_r+0x1a>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c200:	682f      	ldr	r7, [r5, #0]
 800c202:	602b      	str	r3, [r5, #0]
 800c204:	d032      	beq.n	800c26c <__sflush_r+0x98>
 800c206:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	075a      	lsls	r2, r3, #29
 800c20c:	d505      	bpl.n	800c21a <__sflush_r+0x46>
 800c20e:	6863      	ldr	r3, [r4, #4]
 800c210:	1ac0      	subs	r0, r0, r3
 800c212:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c214:	b10b      	cbz	r3, 800c21a <__sflush_r+0x46>
 800c216:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c218:	1ac0      	subs	r0, r0, r3
 800c21a:	2300      	movs	r3, #0
 800c21c:	4602      	mov	r2, r0
 800c21e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c220:	6a21      	ldr	r1, [r4, #32]
 800c222:	4628      	mov	r0, r5
 800c224:	47b0      	blx	r6
 800c226:	1c43      	adds	r3, r0, #1
 800c228:	89a3      	ldrh	r3, [r4, #12]
 800c22a:	d106      	bne.n	800c23a <__sflush_r+0x66>
 800c22c:	6829      	ldr	r1, [r5, #0]
 800c22e:	291d      	cmp	r1, #29
 800c230:	d82c      	bhi.n	800c28c <__sflush_r+0xb8>
 800c232:	4a2a      	ldr	r2, [pc, #168]	; (800c2dc <__sflush_r+0x108>)
 800c234:	40ca      	lsrs	r2, r1
 800c236:	07d6      	lsls	r6, r2, #31
 800c238:	d528      	bpl.n	800c28c <__sflush_r+0xb8>
 800c23a:	2200      	movs	r2, #0
 800c23c:	6062      	str	r2, [r4, #4]
 800c23e:	04d9      	lsls	r1, r3, #19
 800c240:	6922      	ldr	r2, [r4, #16]
 800c242:	6022      	str	r2, [r4, #0]
 800c244:	d504      	bpl.n	800c250 <__sflush_r+0x7c>
 800c246:	1c42      	adds	r2, r0, #1
 800c248:	d101      	bne.n	800c24e <__sflush_r+0x7a>
 800c24a:	682b      	ldr	r3, [r5, #0]
 800c24c:	b903      	cbnz	r3, 800c250 <__sflush_r+0x7c>
 800c24e:	6560      	str	r0, [r4, #84]	; 0x54
 800c250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c252:	602f      	str	r7, [r5, #0]
 800c254:	2900      	cmp	r1, #0
 800c256:	d0ca      	beq.n	800c1ee <__sflush_r+0x1a>
 800c258:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c25c:	4299      	cmp	r1, r3
 800c25e:	d002      	beq.n	800c266 <__sflush_r+0x92>
 800c260:	4628      	mov	r0, r5
 800c262:	f7ff fadb 	bl	800b81c <_free_r>
 800c266:	2000      	movs	r0, #0
 800c268:	6360      	str	r0, [r4, #52]	; 0x34
 800c26a:	e7c1      	b.n	800c1f0 <__sflush_r+0x1c>
 800c26c:	6a21      	ldr	r1, [r4, #32]
 800c26e:	2301      	movs	r3, #1
 800c270:	4628      	mov	r0, r5
 800c272:	47b0      	blx	r6
 800c274:	1c41      	adds	r1, r0, #1
 800c276:	d1c7      	bne.n	800c208 <__sflush_r+0x34>
 800c278:	682b      	ldr	r3, [r5, #0]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d0c4      	beq.n	800c208 <__sflush_r+0x34>
 800c27e:	2b1d      	cmp	r3, #29
 800c280:	d001      	beq.n	800c286 <__sflush_r+0xb2>
 800c282:	2b16      	cmp	r3, #22
 800c284:	d101      	bne.n	800c28a <__sflush_r+0xb6>
 800c286:	602f      	str	r7, [r5, #0]
 800c288:	e7b1      	b.n	800c1ee <__sflush_r+0x1a>
 800c28a:	89a3      	ldrh	r3, [r4, #12]
 800c28c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c290:	81a3      	strh	r3, [r4, #12]
 800c292:	e7ad      	b.n	800c1f0 <__sflush_r+0x1c>
 800c294:	690f      	ldr	r7, [r1, #16]
 800c296:	2f00      	cmp	r7, #0
 800c298:	d0a9      	beq.n	800c1ee <__sflush_r+0x1a>
 800c29a:	0793      	lsls	r3, r2, #30
 800c29c:	680e      	ldr	r6, [r1, #0]
 800c29e:	bf08      	it	eq
 800c2a0:	694b      	ldreq	r3, [r1, #20]
 800c2a2:	600f      	str	r7, [r1, #0]
 800c2a4:	bf18      	it	ne
 800c2a6:	2300      	movne	r3, #0
 800c2a8:	eba6 0807 	sub.w	r8, r6, r7
 800c2ac:	608b      	str	r3, [r1, #8]
 800c2ae:	f1b8 0f00 	cmp.w	r8, #0
 800c2b2:	dd9c      	ble.n	800c1ee <__sflush_r+0x1a>
 800c2b4:	6a21      	ldr	r1, [r4, #32]
 800c2b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c2b8:	4643      	mov	r3, r8
 800c2ba:	463a      	mov	r2, r7
 800c2bc:	4628      	mov	r0, r5
 800c2be:	47b0      	blx	r6
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	dc06      	bgt.n	800c2d2 <__sflush_r+0xfe>
 800c2c4:	89a3      	ldrh	r3, [r4, #12]
 800c2c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2ca:	81a3      	strh	r3, [r4, #12]
 800c2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d0:	e78e      	b.n	800c1f0 <__sflush_r+0x1c>
 800c2d2:	4407      	add	r7, r0
 800c2d4:	eba8 0800 	sub.w	r8, r8, r0
 800c2d8:	e7e9      	b.n	800c2ae <__sflush_r+0xda>
 800c2da:	bf00      	nop
 800c2dc:	20400001 	.word	0x20400001

0800c2e0 <_fflush_r>:
 800c2e0:	b538      	push	{r3, r4, r5, lr}
 800c2e2:	690b      	ldr	r3, [r1, #16]
 800c2e4:	4605      	mov	r5, r0
 800c2e6:	460c      	mov	r4, r1
 800c2e8:	b913      	cbnz	r3, 800c2f0 <_fflush_r+0x10>
 800c2ea:	2500      	movs	r5, #0
 800c2ec:	4628      	mov	r0, r5
 800c2ee:	bd38      	pop	{r3, r4, r5, pc}
 800c2f0:	b118      	cbz	r0, 800c2fa <_fflush_r+0x1a>
 800c2f2:	6983      	ldr	r3, [r0, #24]
 800c2f4:	b90b      	cbnz	r3, 800c2fa <_fflush_r+0x1a>
 800c2f6:	f000 f887 	bl	800c408 <__sinit>
 800c2fa:	4b14      	ldr	r3, [pc, #80]	; (800c34c <_fflush_r+0x6c>)
 800c2fc:	429c      	cmp	r4, r3
 800c2fe:	d11b      	bne.n	800c338 <_fflush_r+0x58>
 800c300:	686c      	ldr	r4, [r5, #4]
 800c302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d0ef      	beq.n	800c2ea <_fflush_r+0xa>
 800c30a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c30c:	07d0      	lsls	r0, r2, #31
 800c30e:	d404      	bmi.n	800c31a <_fflush_r+0x3a>
 800c310:	0599      	lsls	r1, r3, #22
 800c312:	d402      	bmi.n	800c31a <_fflush_r+0x3a>
 800c314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c316:	f000 f915 	bl	800c544 <__retarget_lock_acquire_recursive>
 800c31a:	4628      	mov	r0, r5
 800c31c:	4621      	mov	r1, r4
 800c31e:	f7ff ff59 	bl	800c1d4 <__sflush_r>
 800c322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c324:	07da      	lsls	r2, r3, #31
 800c326:	4605      	mov	r5, r0
 800c328:	d4e0      	bmi.n	800c2ec <_fflush_r+0xc>
 800c32a:	89a3      	ldrh	r3, [r4, #12]
 800c32c:	059b      	lsls	r3, r3, #22
 800c32e:	d4dd      	bmi.n	800c2ec <_fflush_r+0xc>
 800c330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c332:	f000 f908 	bl	800c546 <__retarget_lock_release_recursive>
 800c336:	e7d9      	b.n	800c2ec <_fflush_r+0xc>
 800c338:	4b05      	ldr	r3, [pc, #20]	; (800c350 <_fflush_r+0x70>)
 800c33a:	429c      	cmp	r4, r3
 800c33c:	d101      	bne.n	800c342 <_fflush_r+0x62>
 800c33e:	68ac      	ldr	r4, [r5, #8]
 800c340:	e7df      	b.n	800c302 <_fflush_r+0x22>
 800c342:	4b04      	ldr	r3, [pc, #16]	; (800c354 <_fflush_r+0x74>)
 800c344:	429c      	cmp	r4, r3
 800c346:	bf08      	it	eq
 800c348:	68ec      	ldreq	r4, [r5, #12]
 800c34a:	e7da      	b.n	800c302 <_fflush_r+0x22>
 800c34c:	0800eb3c 	.word	0x0800eb3c
 800c350:	0800eb5c 	.word	0x0800eb5c
 800c354:	0800eb1c 	.word	0x0800eb1c

0800c358 <std>:
 800c358:	2300      	movs	r3, #0
 800c35a:	b510      	push	{r4, lr}
 800c35c:	4604      	mov	r4, r0
 800c35e:	e9c0 3300 	strd	r3, r3, [r0]
 800c362:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c366:	6083      	str	r3, [r0, #8]
 800c368:	8181      	strh	r1, [r0, #12]
 800c36a:	6643      	str	r3, [r0, #100]	; 0x64
 800c36c:	81c2      	strh	r2, [r0, #14]
 800c36e:	6183      	str	r3, [r0, #24]
 800c370:	4619      	mov	r1, r3
 800c372:	2208      	movs	r2, #8
 800c374:	305c      	adds	r0, #92	; 0x5c
 800c376:	f7fb fe15 	bl	8007fa4 <memset>
 800c37a:	4b05      	ldr	r3, [pc, #20]	; (800c390 <std+0x38>)
 800c37c:	6263      	str	r3, [r4, #36]	; 0x24
 800c37e:	4b05      	ldr	r3, [pc, #20]	; (800c394 <std+0x3c>)
 800c380:	62a3      	str	r3, [r4, #40]	; 0x28
 800c382:	4b05      	ldr	r3, [pc, #20]	; (800c398 <std+0x40>)
 800c384:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c386:	4b05      	ldr	r3, [pc, #20]	; (800c39c <std+0x44>)
 800c388:	6224      	str	r4, [r4, #32]
 800c38a:	6323      	str	r3, [r4, #48]	; 0x30
 800c38c:	bd10      	pop	{r4, pc}
 800c38e:	bf00      	nop
 800c390:	0800c6a9 	.word	0x0800c6a9
 800c394:	0800c6cb 	.word	0x0800c6cb
 800c398:	0800c703 	.word	0x0800c703
 800c39c:	0800c727 	.word	0x0800c727

0800c3a0 <_cleanup_r>:
 800c3a0:	4901      	ldr	r1, [pc, #4]	; (800c3a8 <_cleanup_r+0x8>)
 800c3a2:	f000 b8af 	b.w	800c504 <_fwalk_reent>
 800c3a6:	bf00      	nop
 800c3a8:	0800c2e1 	.word	0x0800c2e1

0800c3ac <__sfmoreglue>:
 800c3ac:	b570      	push	{r4, r5, r6, lr}
 800c3ae:	1e4a      	subs	r2, r1, #1
 800c3b0:	2568      	movs	r5, #104	; 0x68
 800c3b2:	4355      	muls	r5, r2
 800c3b4:	460e      	mov	r6, r1
 800c3b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c3ba:	f7ff fa7f 	bl	800b8bc <_malloc_r>
 800c3be:	4604      	mov	r4, r0
 800c3c0:	b140      	cbz	r0, 800c3d4 <__sfmoreglue+0x28>
 800c3c2:	2100      	movs	r1, #0
 800c3c4:	e9c0 1600 	strd	r1, r6, [r0]
 800c3c8:	300c      	adds	r0, #12
 800c3ca:	60a0      	str	r0, [r4, #8]
 800c3cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c3d0:	f7fb fde8 	bl	8007fa4 <memset>
 800c3d4:	4620      	mov	r0, r4
 800c3d6:	bd70      	pop	{r4, r5, r6, pc}

0800c3d8 <__sfp_lock_acquire>:
 800c3d8:	4801      	ldr	r0, [pc, #4]	; (800c3e0 <__sfp_lock_acquire+0x8>)
 800c3da:	f000 b8b3 	b.w	800c544 <__retarget_lock_acquire_recursive>
 800c3de:	bf00      	nop
 800c3e0:	20000648 	.word	0x20000648

0800c3e4 <__sfp_lock_release>:
 800c3e4:	4801      	ldr	r0, [pc, #4]	; (800c3ec <__sfp_lock_release+0x8>)
 800c3e6:	f000 b8ae 	b.w	800c546 <__retarget_lock_release_recursive>
 800c3ea:	bf00      	nop
 800c3ec:	20000648 	.word	0x20000648

0800c3f0 <__sinit_lock_acquire>:
 800c3f0:	4801      	ldr	r0, [pc, #4]	; (800c3f8 <__sinit_lock_acquire+0x8>)
 800c3f2:	f000 b8a7 	b.w	800c544 <__retarget_lock_acquire_recursive>
 800c3f6:	bf00      	nop
 800c3f8:	20000643 	.word	0x20000643

0800c3fc <__sinit_lock_release>:
 800c3fc:	4801      	ldr	r0, [pc, #4]	; (800c404 <__sinit_lock_release+0x8>)
 800c3fe:	f000 b8a2 	b.w	800c546 <__retarget_lock_release_recursive>
 800c402:	bf00      	nop
 800c404:	20000643 	.word	0x20000643

0800c408 <__sinit>:
 800c408:	b510      	push	{r4, lr}
 800c40a:	4604      	mov	r4, r0
 800c40c:	f7ff fff0 	bl	800c3f0 <__sinit_lock_acquire>
 800c410:	69a3      	ldr	r3, [r4, #24]
 800c412:	b11b      	cbz	r3, 800c41c <__sinit+0x14>
 800c414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c418:	f7ff bff0 	b.w	800c3fc <__sinit_lock_release>
 800c41c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c420:	6523      	str	r3, [r4, #80]	; 0x50
 800c422:	4b13      	ldr	r3, [pc, #76]	; (800c470 <__sinit+0x68>)
 800c424:	4a13      	ldr	r2, [pc, #76]	; (800c474 <__sinit+0x6c>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	62a2      	str	r2, [r4, #40]	; 0x28
 800c42a:	42a3      	cmp	r3, r4
 800c42c:	bf04      	itt	eq
 800c42e:	2301      	moveq	r3, #1
 800c430:	61a3      	streq	r3, [r4, #24]
 800c432:	4620      	mov	r0, r4
 800c434:	f000 f820 	bl	800c478 <__sfp>
 800c438:	6060      	str	r0, [r4, #4]
 800c43a:	4620      	mov	r0, r4
 800c43c:	f000 f81c 	bl	800c478 <__sfp>
 800c440:	60a0      	str	r0, [r4, #8]
 800c442:	4620      	mov	r0, r4
 800c444:	f000 f818 	bl	800c478 <__sfp>
 800c448:	2200      	movs	r2, #0
 800c44a:	60e0      	str	r0, [r4, #12]
 800c44c:	2104      	movs	r1, #4
 800c44e:	6860      	ldr	r0, [r4, #4]
 800c450:	f7ff ff82 	bl	800c358 <std>
 800c454:	68a0      	ldr	r0, [r4, #8]
 800c456:	2201      	movs	r2, #1
 800c458:	2109      	movs	r1, #9
 800c45a:	f7ff ff7d 	bl	800c358 <std>
 800c45e:	68e0      	ldr	r0, [r4, #12]
 800c460:	2202      	movs	r2, #2
 800c462:	2112      	movs	r1, #18
 800c464:	f7ff ff78 	bl	800c358 <std>
 800c468:	2301      	movs	r3, #1
 800c46a:	61a3      	str	r3, [r4, #24]
 800c46c:	e7d2      	b.n	800c414 <__sinit+0xc>
 800c46e:	bf00      	nop
 800c470:	0800e6c4 	.word	0x0800e6c4
 800c474:	0800c3a1 	.word	0x0800c3a1

0800c478 <__sfp>:
 800c478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c47a:	4607      	mov	r7, r0
 800c47c:	f7ff ffac 	bl	800c3d8 <__sfp_lock_acquire>
 800c480:	4b1e      	ldr	r3, [pc, #120]	; (800c4fc <__sfp+0x84>)
 800c482:	681e      	ldr	r6, [r3, #0]
 800c484:	69b3      	ldr	r3, [r6, #24]
 800c486:	b913      	cbnz	r3, 800c48e <__sfp+0x16>
 800c488:	4630      	mov	r0, r6
 800c48a:	f7ff ffbd 	bl	800c408 <__sinit>
 800c48e:	3648      	adds	r6, #72	; 0x48
 800c490:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c494:	3b01      	subs	r3, #1
 800c496:	d503      	bpl.n	800c4a0 <__sfp+0x28>
 800c498:	6833      	ldr	r3, [r6, #0]
 800c49a:	b30b      	cbz	r3, 800c4e0 <__sfp+0x68>
 800c49c:	6836      	ldr	r6, [r6, #0]
 800c49e:	e7f7      	b.n	800c490 <__sfp+0x18>
 800c4a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c4a4:	b9d5      	cbnz	r5, 800c4dc <__sfp+0x64>
 800c4a6:	4b16      	ldr	r3, [pc, #88]	; (800c500 <__sfp+0x88>)
 800c4a8:	60e3      	str	r3, [r4, #12]
 800c4aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c4ae:	6665      	str	r5, [r4, #100]	; 0x64
 800c4b0:	f000 f847 	bl	800c542 <__retarget_lock_init_recursive>
 800c4b4:	f7ff ff96 	bl	800c3e4 <__sfp_lock_release>
 800c4b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c4bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c4c0:	6025      	str	r5, [r4, #0]
 800c4c2:	61a5      	str	r5, [r4, #24]
 800c4c4:	2208      	movs	r2, #8
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c4cc:	f7fb fd6a 	bl	8007fa4 <memset>
 800c4d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c4d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c4d8:	4620      	mov	r0, r4
 800c4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4dc:	3468      	adds	r4, #104	; 0x68
 800c4de:	e7d9      	b.n	800c494 <__sfp+0x1c>
 800c4e0:	2104      	movs	r1, #4
 800c4e2:	4638      	mov	r0, r7
 800c4e4:	f7ff ff62 	bl	800c3ac <__sfmoreglue>
 800c4e8:	4604      	mov	r4, r0
 800c4ea:	6030      	str	r0, [r6, #0]
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	d1d5      	bne.n	800c49c <__sfp+0x24>
 800c4f0:	f7ff ff78 	bl	800c3e4 <__sfp_lock_release>
 800c4f4:	230c      	movs	r3, #12
 800c4f6:	603b      	str	r3, [r7, #0]
 800c4f8:	e7ee      	b.n	800c4d8 <__sfp+0x60>
 800c4fa:	bf00      	nop
 800c4fc:	0800e6c4 	.word	0x0800e6c4
 800c500:	ffff0001 	.word	0xffff0001

0800c504 <_fwalk_reent>:
 800c504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c508:	4606      	mov	r6, r0
 800c50a:	4688      	mov	r8, r1
 800c50c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c510:	2700      	movs	r7, #0
 800c512:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c516:	f1b9 0901 	subs.w	r9, r9, #1
 800c51a:	d505      	bpl.n	800c528 <_fwalk_reent+0x24>
 800c51c:	6824      	ldr	r4, [r4, #0]
 800c51e:	2c00      	cmp	r4, #0
 800c520:	d1f7      	bne.n	800c512 <_fwalk_reent+0xe>
 800c522:	4638      	mov	r0, r7
 800c524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c528:	89ab      	ldrh	r3, [r5, #12]
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	d907      	bls.n	800c53e <_fwalk_reent+0x3a>
 800c52e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c532:	3301      	adds	r3, #1
 800c534:	d003      	beq.n	800c53e <_fwalk_reent+0x3a>
 800c536:	4629      	mov	r1, r5
 800c538:	4630      	mov	r0, r6
 800c53a:	47c0      	blx	r8
 800c53c:	4307      	orrs	r7, r0
 800c53e:	3568      	adds	r5, #104	; 0x68
 800c540:	e7e9      	b.n	800c516 <_fwalk_reent+0x12>

0800c542 <__retarget_lock_init_recursive>:
 800c542:	4770      	bx	lr

0800c544 <__retarget_lock_acquire_recursive>:
 800c544:	4770      	bx	lr

0800c546 <__retarget_lock_release_recursive>:
 800c546:	4770      	bx	lr

0800c548 <__swhatbuf_r>:
 800c548:	b570      	push	{r4, r5, r6, lr}
 800c54a:	460e      	mov	r6, r1
 800c54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c550:	2900      	cmp	r1, #0
 800c552:	b096      	sub	sp, #88	; 0x58
 800c554:	4614      	mov	r4, r2
 800c556:	461d      	mov	r5, r3
 800c558:	da07      	bge.n	800c56a <__swhatbuf_r+0x22>
 800c55a:	2300      	movs	r3, #0
 800c55c:	602b      	str	r3, [r5, #0]
 800c55e:	89b3      	ldrh	r3, [r6, #12]
 800c560:	061a      	lsls	r2, r3, #24
 800c562:	d410      	bmi.n	800c586 <__swhatbuf_r+0x3e>
 800c564:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c568:	e00e      	b.n	800c588 <__swhatbuf_r+0x40>
 800c56a:	466a      	mov	r2, sp
 800c56c:	f000 f902 	bl	800c774 <_fstat_r>
 800c570:	2800      	cmp	r0, #0
 800c572:	dbf2      	blt.n	800c55a <__swhatbuf_r+0x12>
 800c574:	9a01      	ldr	r2, [sp, #4]
 800c576:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c57a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c57e:	425a      	negs	r2, r3
 800c580:	415a      	adcs	r2, r3
 800c582:	602a      	str	r2, [r5, #0]
 800c584:	e7ee      	b.n	800c564 <__swhatbuf_r+0x1c>
 800c586:	2340      	movs	r3, #64	; 0x40
 800c588:	2000      	movs	r0, #0
 800c58a:	6023      	str	r3, [r4, #0]
 800c58c:	b016      	add	sp, #88	; 0x58
 800c58e:	bd70      	pop	{r4, r5, r6, pc}

0800c590 <__smakebuf_r>:
 800c590:	898b      	ldrh	r3, [r1, #12]
 800c592:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c594:	079d      	lsls	r5, r3, #30
 800c596:	4606      	mov	r6, r0
 800c598:	460c      	mov	r4, r1
 800c59a:	d507      	bpl.n	800c5ac <__smakebuf_r+0x1c>
 800c59c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c5a0:	6023      	str	r3, [r4, #0]
 800c5a2:	6123      	str	r3, [r4, #16]
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	6163      	str	r3, [r4, #20]
 800c5a8:	b002      	add	sp, #8
 800c5aa:	bd70      	pop	{r4, r5, r6, pc}
 800c5ac:	ab01      	add	r3, sp, #4
 800c5ae:	466a      	mov	r2, sp
 800c5b0:	f7ff ffca 	bl	800c548 <__swhatbuf_r>
 800c5b4:	9900      	ldr	r1, [sp, #0]
 800c5b6:	4605      	mov	r5, r0
 800c5b8:	4630      	mov	r0, r6
 800c5ba:	f7ff f97f 	bl	800b8bc <_malloc_r>
 800c5be:	b948      	cbnz	r0, 800c5d4 <__smakebuf_r+0x44>
 800c5c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5c4:	059a      	lsls	r2, r3, #22
 800c5c6:	d4ef      	bmi.n	800c5a8 <__smakebuf_r+0x18>
 800c5c8:	f023 0303 	bic.w	r3, r3, #3
 800c5cc:	f043 0302 	orr.w	r3, r3, #2
 800c5d0:	81a3      	strh	r3, [r4, #12]
 800c5d2:	e7e3      	b.n	800c59c <__smakebuf_r+0xc>
 800c5d4:	4b0d      	ldr	r3, [pc, #52]	; (800c60c <__smakebuf_r+0x7c>)
 800c5d6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c5d8:	89a3      	ldrh	r3, [r4, #12]
 800c5da:	6020      	str	r0, [r4, #0]
 800c5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5e0:	81a3      	strh	r3, [r4, #12]
 800c5e2:	9b00      	ldr	r3, [sp, #0]
 800c5e4:	6163      	str	r3, [r4, #20]
 800c5e6:	9b01      	ldr	r3, [sp, #4]
 800c5e8:	6120      	str	r0, [r4, #16]
 800c5ea:	b15b      	cbz	r3, 800c604 <__smakebuf_r+0x74>
 800c5ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5f0:	4630      	mov	r0, r6
 800c5f2:	f000 f8d1 	bl	800c798 <_isatty_r>
 800c5f6:	b128      	cbz	r0, 800c604 <__smakebuf_r+0x74>
 800c5f8:	89a3      	ldrh	r3, [r4, #12]
 800c5fa:	f023 0303 	bic.w	r3, r3, #3
 800c5fe:	f043 0301 	orr.w	r3, r3, #1
 800c602:	81a3      	strh	r3, [r4, #12]
 800c604:	89a0      	ldrh	r0, [r4, #12]
 800c606:	4305      	orrs	r5, r0
 800c608:	81a5      	strh	r5, [r4, #12]
 800c60a:	e7cd      	b.n	800c5a8 <__smakebuf_r+0x18>
 800c60c:	0800c3a1 	.word	0x0800c3a1

0800c610 <_malloc_usable_size_r>:
 800c610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c614:	1f18      	subs	r0, r3, #4
 800c616:	2b00      	cmp	r3, #0
 800c618:	bfbc      	itt	lt
 800c61a:	580b      	ldrlt	r3, [r1, r0]
 800c61c:	18c0      	addlt	r0, r0, r3
 800c61e:	4770      	bx	lr

0800c620 <_raise_r>:
 800c620:	291f      	cmp	r1, #31
 800c622:	b538      	push	{r3, r4, r5, lr}
 800c624:	4604      	mov	r4, r0
 800c626:	460d      	mov	r5, r1
 800c628:	d904      	bls.n	800c634 <_raise_r+0x14>
 800c62a:	2316      	movs	r3, #22
 800c62c:	6003      	str	r3, [r0, #0]
 800c62e:	f04f 30ff 	mov.w	r0, #4294967295
 800c632:	bd38      	pop	{r3, r4, r5, pc}
 800c634:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c636:	b112      	cbz	r2, 800c63e <_raise_r+0x1e>
 800c638:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c63c:	b94b      	cbnz	r3, 800c652 <_raise_r+0x32>
 800c63e:	4620      	mov	r0, r4
 800c640:	f000 f830 	bl	800c6a4 <_getpid_r>
 800c644:	462a      	mov	r2, r5
 800c646:	4601      	mov	r1, r0
 800c648:	4620      	mov	r0, r4
 800c64a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c64e:	f000 b817 	b.w	800c680 <_kill_r>
 800c652:	2b01      	cmp	r3, #1
 800c654:	d00a      	beq.n	800c66c <_raise_r+0x4c>
 800c656:	1c59      	adds	r1, r3, #1
 800c658:	d103      	bne.n	800c662 <_raise_r+0x42>
 800c65a:	2316      	movs	r3, #22
 800c65c:	6003      	str	r3, [r0, #0]
 800c65e:	2001      	movs	r0, #1
 800c660:	e7e7      	b.n	800c632 <_raise_r+0x12>
 800c662:	2400      	movs	r4, #0
 800c664:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c668:	4628      	mov	r0, r5
 800c66a:	4798      	blx	r3
 800c66c:	2000      	movs	r0, #0
 800c66e:	e7e0      	b.n	800c632 <_raise_r+0x12>

0800c670 <raise>:
 800c670:	4b02      	ldr	r3, [pc, #8]	; (800c67c <raise+0xc>)
 800c672:	4601      	mov	r1, r0
 800c674:	6818      	ldr	r0, [r3, #0]
 800c676:	f7ff bfd3 	b.w	800c620 <_raise_r>
 800c67a:	bf00      	nop
 800c67c:	20000014 	.word	0x20000014

0800c680 <_kill_r>:
 800c680:	b538      	push	{r3, r4, r5, lr}
 800c682:	4d07      	ldr	r5, [pc, #28]	; (800c6a0 <_kill_r+0x20>)
 800c684:	2300      	movs	r3, #0
 800c686:	4604      	mov	r4, r0
 800c688:	4608      	mov	r0, r1
 800c68a:	4611      	mov	r1, r2
 800c68c:	602b      	str	r3, [r5, #0]
 800c68e:	f7f7 f85d 	bl	800374c <_kill>
 800c692:	1c43      	adds	r3, r0, #1
 800c694:	d102      	bne.n	800c69c <_kill_r+0x1c>
 800c696:	682b      	ldr	r3, [r5, #0]
 800c698:	b103      	cbz	r3, 800c69c <_kill_r+0x1c>
 800c69a:	6023      	str	r3, [r4, #0]
 800c69c:	bd38      	pop	{r3, r4, r5, pc}
 800c69e:	bf00      	nop
 800c6a0:	2000063c 	.word	0x2000063c

0800c6a4 <_getpid_r>:
 800c6a4:	f7f7 b84a 	b.w	800373c <_getpid>

0800c6a8 <__sread>:
 800c6a8:	b510      	push	{r4, lr}
 800c6aa:	460c      	mov	r4, r1
 800c6ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6b0:	f000 f894 	bl	800c7dc <_read_r>
 800c6b4:	2800      	cmp	r0, #0
 800c6b6:	bfab      	itete	ge
 800c6b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6ba:	89a3      	ldrhlt	r3, [r4, #12]
 800c6bc:	181b      	addge	r3, r3, r0
 800c6be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6c2:	bfac      	ite	ge
 800c6c4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6c6:	81a3      	strhlt	r3, [r4, #12]
 800c6c8:	bd10      	pop	{r4, pc}

0800c6ca <__swrite>:
 800c6ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ce:	461f      	mov	r7, r3
 800c6d0:	898b      	ldrh	r3, [r1, #12]
 800c6d2:	05db      	lsls	r3, r3, #23
 800c6d4:	4605      	mov	r5, r0
 800c6d6:	460c      	mov	r4, r1
 800c6d8:	4616      	mov	r6, r2
 800c6da:	d505      	bpl.n	800c6e8 <__swrite+0x1e>
 800c6dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6e0:	2302      	movs	r3, #2
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	f000 f868 	bl	800c7b8 <_lseek_r>
 800c6e8:	89a3      	ldrh	r3, [r4, #12]
 800c6ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6f2:	81a3      	strh	r3, [r4, #12]
 800c6f4:	4632      	mov	r2, r6
 800c6f6:	463b      	mov	r3, r7
 800c6f8:	4628      	mov	r0, r5
 800c6fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6fe:	f000 b817 	b.w	800c730 <_write_r>

0800c702 <__sseek>:
 800c702:	b510      	push	{r4, lr}
 800c704:	460c      	mov	r4, r1
 800c706:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c70a:	f000 f855 	bl	800c7b8 <_lseek_r>
 800c70e:	1c43      	adds	r3, r0, #1
 800c710:	89a3      	ldrh	r3, [r4, #12]
 800c712:	bf15      	itete	ne
 800c714:	6560      	strne	r0, [r4, #84]	; 0x54
 800c716:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c71a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c71e:	81a3      	strheq	r3, [r4, #12]
 800c720:	bf18      	it	ne
 800c722:	81a3      	strhne	r3, [r4, #12]
 800c724:	bd10      	pop	{r4, pc}

0800c726 <__sclose>:
 800c726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c72a:	f000 b813 	b.w	800c754 <_close_r>
	...

0800c730 <_write_r>:
 800c730:	b538      	push	{r3, r4, r5, lr}
 800c732:	4d07      	ldr	r5, [pc, #28]	; (800c750 <_write_r+0x20>)
 800c734:	4604      	mov	r4, r0
 800c736:	4608      	mov	r0, r1
 800c738:	4611      	mov	r1, r2
 800c73a:	2200      	movs	r2, #0
 800c73c:	602a      	str	r2, [r5, #0]
 800c73e:	461a      	mov	r2, r3
 800c740:	f7f7 f83b 	bl	80037ba <_write>
 800c744:	1c43      	adds	r3, r0, #1
 800c746:	d102      	bne.n	800c74e <_write_r+0x1e>
 800c748:	682b      	ldr	r3, [r5, #0]
 800c74a:	b103      	cbz	r3, 800c74e <_write_r+0x1e>
 800c74c:	6023      	str	r3, [r4, #0]
 800c74e:	bd38      	pop	{r3, r4, r5, pc}
 800c750:	2000063c 	.word	0x2000063c

0800c754 <_close_r>:
 800c754:	b538      	push	{r3, r4, r5, lr}
 800c756:	4d06      	ldr	r5, [pc, #24]	; (800c770 <_close_r+0x1c>)
 800c758:	2300      	movs	r3, #0
 800c75a:	4604      	mov	r4, r0
 800c75c:	4608      	mov	r0, r1
 800c75e:	602b      	str	r3, [r5, #0]
 800c760:	f7f7 f847 	bl	80037f2 <_close>
 800c764:	1c43      	adds	r3, r0, #1
 800c766:	d102      	bne.n	800c76e <_close_r+0x1a>
 800c768:	682b      	ldr	r3, [r5, #0]
 800c76a:	b103      	cbz	r3, 800c76e <_close_r+0x1a>
 800c76c:	6023      	str	r3, [r4, #0]
 800c76e:	bd38      	pop	{r3, r4, r5, pc}
 800c770:	2000063c 	.word	0x2000063c

0800c774 <_fstat_r>:
 800c774:	b538      	push	{r3, r4, r5, lr}
 800c776:	4d07      	ldr	r5, [pc, #28]	; (800c794 <_fstat_r+0x20>)
 800c778:	2300      	movs	r3, #0
 800c77a:	4604      	mov	r4, r0
 800c77c:	4608      	mov	r0, r1
 800c77e:	4611      	mov	r1, r2
 800c780:	602b      	str	r3, [r5, #0]
 800c782:	f7f7 f842 	bl	800380a <_fstat>
 800c786:	1c43      	adds	r3, r0, #1
 800c788:	d102      	bne.n	800c790 <_fstat_r+0x1c>
 800c78a:	682b      	ldr	r3, [r5, #0]
 800c78c:	b103      	cbz	r3, 800c790 <_fstat_r+0x1c>
 800c78e:	6023      	str	r3, [r4, #0]
 800c790:	bd38      	pop	{r3, r4, r5, pc}
 800c792:	bf00      	nop
 800c794:	2000063c 	.word	0x2000063c

0800c798 <_isatty_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	4d06      	ldr	r5, [pc, #24]	; (800c7b4 <_isatty_r+0x1c>)
 800c79c:	2300      	movs	r3, #0
 800c79e:	4604      	mov	r4, r0
 800c7a0:	4608      	mov	r0, r1
 800c7a2:	602b      	str	r3, [r5, #0]
 800c7a4:	f7f7 f841 	bl	800382a <_isatty>
 800c7a8:	1c43      	adds	r3, r0, #1
 800c7aa:	d102      	bne.n	800c7b2 <_isatty_r+0x1a>
 800c7ac:	682b      	ldr	r3, [r5, #0]
 800c7ae:	b103      	cbz	r3, 800c7b2 <_isatty_r+0x1a>
 800c7b0:	6023      	str	r3, [r4, #0]
 800c7b2:	bd38      	pop	{r3, r4, r5, pc}
 800c7b4:	2000063c 	.word	0x2000063c

0800c7b8 <_lseek_r>:
 800c7b8:	b538      	push	{r3, r4, r5, lr}
 800c7ba:	4d07      	ldr	r5, [pc, #28]	; (800c7d8 <_lseek_r+0x20>)
 800c7bc:	4604      	mov	r4, r0
 800c7be:	4608      	mov	r0, r1
 800c7c0:	4611      	mov	r1, r2
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	602a      	str	r2, [r5, #0]
 800c7c6:	461a      	mov	r2, r3
 800c7c8:	f7f7 f83a 	bl	8003840 <_lseek>
 800c7cc:	1c43      	adds	r3, r0, #1
 800c7ce:	d102      	bne.n	800c7d6 <_lseek_r+0x1e>
 800c7d0:	682b      	ldr	r3, [r5, #0]
 800c7d2:	b103      	cbz	r3, 800c7d6 <_lseek_r+0x1e>
 800c7d4:	6023      	str	r3, [r4, #0]
 800c7d6:	bd38      	pop	{r3, r4, r5, pc}
 800c7d8:	2000063c 	.word	0x2000063c

0800c7dc <_read_r>:
 800c7dc:	b538      	push	{r3, r4, r5, lr}
 800c7de:	4d07      	ldr	r5, [pc, #28]	; (800c7fc <_read_r+0x20>)
 800c7e0:	4604      	mov	r4, r0
 800c7e2:	4608      	mov	r0, r1
 800c7e4:	4611      	mov	r1, r2
 800c7e6:	2200      	movs	r2, #0
 800c7e8:	602a      	str	r2, [r5, #0]
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	f7f6 ffc8 	bl	8003780 <_read>
 800c7f0:	1c43      	adds	r3, r0, #1
 800c7f2:	d102      	bne.n	800c7fa <_read_r+0x1e>
 800c7f4:	682b      	ldr	r3, [r5, #0]
 800c7f6:	b103      	cbz	r3, 800c7fa <_read_r+0x1e>
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	bd38      	pop	{r3, r4, r5, pc}
 800c7fc:	2000063c 	.word	0x2000063c

0800c800 <_init>:
 800c800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c802:	bf00      	nop
 800c804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c806:	bc08      	pop	{r3}
 800c808:	469e      	mov	lr, r3
 800c80a:	4770      	bx	lr

0800c80c <_fini>:
 800c80c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c80e:	bf00      	nop
 800c810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c812:	bc08      	pop	{r3}
 800c814:	469e      	mov	lr, r3
 800c816:	4770      	bx	lr
