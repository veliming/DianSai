
BDS8_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b8d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000035ec  0800ba60  0800ba60  0001ba60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f04c  0800f04c  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f04c  0800f04c  0001f04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f054  0800f054  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f054  0800f054  0001f054  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f058  0800f058  0001f058  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0800f05c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  200001f8  0800f254  000201f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000604  0800f254  00020604  2**0
                  ALLOC
 11 .ccm_ram      00000000  10000000  10000000  000201f8  2**0
                  CONTENTS
 12 .ARM.attributes 00000030  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f43  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000025a1  00000000  00000000  0003216b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00034710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e30  00000000  00000000  00035630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023fbc  00000000  00000000  00036460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000122e9  00000000  00000000  0005a41c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dab86  00000000  00000000  0006c705  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c1  00000000  00000000  0014728b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000553c  00000000  00000000  0014734c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ba48 	.word	0x0800ba48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800ba48 	.word	0x0800ba48

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fec:	b5b0      	push	{r4, r5, r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

	DCPID.Kp = 50; 			/* Proportional --比例参数 */
 8000ff2:	4b66      	ldr	r3, [pc, #408]	; (800118c <main+0x1a0>)
 8000ff4:	4a66      	ldr	r2, [pc, #408]	; (8001190 <main+0x1a4>)
 8000ff6:	619a      	str	r2, [r3, #24]
	DCPID.Ki = 2;         	/* Integral  --积分参数*/
 8000ff8:	4b64      	ldr	r3, [pc, #400]	; (800118c <main+0x1a0>)
 8000ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffe:	61da      	str	r2, [r3, #28]
	DCPID.Kd = 0; 			/* Derivative     --微分参数*/
 8001000:	4b62      	ldr	r3, [pc, #392]	; (800118c <main+0x1a0>)
 8001002:	f04f 0200 	mov.w	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001008:	f002 f92a 	bl	8003260 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100c:	f000 f8f0 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_I2C1_Init();
 8001010:	f000 f9fc 	bl	800140c <MX_I2C1_Init>
  MX_GPIO_Init();
 8001014:	f000 fb7e 	bl	8001714 <MX_GPIO_Init>
  MX_DMA_Init();
 8001018:	f000 fb62 	bl	80016e0 <MX_DMA_Init>
  MX_TIM5_Init();
 800101c:	f000 fb12 	bl	8001644 <MX_TIM5_Init>
  MX_TIM2_Init();
 8001020:	f000 fa22 	bl	8001468 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001024:	f000 fac0 	bl	80015a8 <MX_TIM3_Init>
  MX_ADC1_Init();
 8001028:	f000 f94c 	bl	80012c4 <MX_ADC1_Init>
  MX_ADC3_Init();
 800102c:	f000 f99c 	bl	8001368 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

//  HAL_I2C_Mem_Write(&hi2c1, ADDR_AT24C02_Write, 0, I2C_MEMADD_SIZE_16BIT,(uint8_t*)(&(PHASE1[0])),8, 1000);
//  HAL_Delay(1);

  HAL_I2C_Mem_Read(&hi2c1, ADDR_AT24C02_Read, 0, I2C_MEMADD_SIZE_16BIT,(uint8_t*)(&(PHASE[0])),8, 1000);
 8001030:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001034:	9302      	str	r3, [sp, #8]
 8001036:	2308      	movs	r3, #8
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	4b56      	ldr	r3, [pc, #344]	; (8001194 <main+0x1a8>)
 800103c:	9300      	str	r3, [sp, #0]
 800103e:	2310      	movs	r3, #16
 8001040:	2200      	movs	r2, #0
 8001042:	21a1      	movs	r1, #161	; 0xa1
 8001044:	4854      	ldr	r0, [pc, #336]	; (8001198 <main+0x1ac>)
 8001046:	f003 fcf5 	bl	8004a34 <HAL_I2C_Mem_Read>



  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);/*pwm波频�????????????????????????????????????????????????????????*/
 800104a:	2100      	movs	r1, #0
 800104c:	4853      	ldr	r0, [pc, #332]	; (800119c <main+0x1b0>)
 800104e:	f005 f855 	bl	80060fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001052:	2104      	movs	r1, #4
 8001054:	4851      	ldr	r0, [pc, #324]	; (800119c <main+0x1b0>)
 8001056:	f005 f851 	bl	80060fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800105a:	2108      	movs	r1, #8
 800105c:	484f      	ldr	r0, [pc, #316]	; (800119c <main+0x1b0>)
 800105e:	f005 f84d 	bl	80060fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_4);
 8001062:	210c      	movs	r1, #12
 8001064:	484d      	ldr	r0, [pc, #308]	; (800119c <main+0x1b0>)
 8001066:	f005 f911 	bl	800628c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);/*pid*/
 800106a:	484d      	ldr	r0, [pc, #308]	; (80011a0 <main+0x1b4>)
 800106c:	f004 ff7c 	bl	8005f68 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);/*计数时间*/
 8001070:	484c      	ldr	r0, [pc, #304]	; (80011a4 <main+0x1b8>)
 8001072:	f004 ff11 	bl	8005e98 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, ADC_Value1, 10);
 8001076:	220a      	movs	r2, #10
 8001078:	494b      	ldr	r1, [pc, #300]	; (80011a8 <main+0x1bc>)
 800107a:	484c      	ldr	r0, [pc, #304]	; (80011ac <main+0x1c0>)
 800107c:	f002 f9ca 	bl	8003414 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc3, ADC_Value3, 10);
 8001080:	220a      	movs	r2, #10
 8001082:	494b      	ldr	r1, [pc, #300]	; (80011b0 <main+0x1c4>)
 8001084:	484b      	ldr	r0, [pc, #300]	; (80011b4 <main+0x1c8>)
 8001086:	f002 f9c5 	bl	8003414 <HAL_ADC_Start_DMA>

  arm_pid_init_f32(&DCPID, 1);
 800108a:	2101      	movs	r1, #1
 800108c:	483f      	ldr	r0, [pc, #252]	; (800118c <main+0x1a0>)
 800108e:	f006 f867 	bl	8007160 <arm_pid_init_f32>

  LCD_init();
 8001092:	f001 ffff 	bl	8003094 <LCD_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

  	if( (HAL_GetTick()-MainTick)>300)
 8001096:	f002 f949 	bl	800332c <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	4b46      	ldr	r3, [pc, #280]	; (80011b8 <main+0x1cc>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80010a6:	d9f6      	bls.n	8001096 <main+0xaa>
	{
  		HAL_I2C_Mem_Write(&hi2c1, ADDR_AT24C02_Write, 0, I2C_MEMADD_SIZE_16BIT,(uint8_t*)(&(PHASE[0])),8, 1000);
 80010a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ac:	9302      	str	r3, [sp, #8]
 80010ae:	2308      	movs	r3, #8
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	4b38      	ldr	r3, [pc, #224]	; (8001194 <main+0x1a8>)
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2310      	movs	r3, #16
 80010b8:	2200      	movs	r2, #0
 80010ba:	21a0      	movs	r1, #160	; 0xa0
 80010bc:	4836      	ldr	r0, [pc, #216]	; (8001198 <main+0x1ac>)
 80010be:	f003 fbbf 	bl	8004840 <HAL_I2C_Mem_Write>
  	sprintf(show0,"1 %.4f",1.2*(((ADC_Value3[0])*1.0)/(ADC_Value1[0])*1.0));
 80010c2:	4b3b      	ldr	r3, [pc, #236]	; (80011b0 <main+0x1c4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fa1c 	bl	8000504 <__aeabi_ui2d>
 80010cc:	4604      	mov	r4, r0
 80010ce:	460d      	mov	r5, r1
 80010d0:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <main+0x1bc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fa15 	bl	8000504 <__aeabi_ui2d>
 80010da:	4602      	mov	r2, r0
 80010dc:	460b      	mov	r3, r1
 80010de:	4620      	mov	r0, r4
 80010e0:	4629      	mov	r1, r5
 80010e2:	f7ff fbb3 	bl	800084c <__aeabi_ddiv>
 80010e6:	4602      	mov	r2, r0
 80010e8:	460b      	mov	r3, r1
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80010f2:	4b32      	ldr	r3, [pc, #200]	; (80011bc <main+0x1d0>)
 80010f4:	f7ff fa80 	bl	80005f8 <__aeabi_dmul>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4930      	ldr	r1, [pc, #192]	; (80011c0 <main+0x1d4>)
 80010fe:	4831      	ldr	r0, [pc, #196]	; (80011c4 <main+0x1d8>)
 8001100:	f006 fefc 	bl	8007efc <siprintf>
  	sprintf(show1,"%d",(int)PHASE[0]);
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <main+0x1a8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	492f      	ldr	r1, [pc, #188]	; (80011c8 <main+0x1dc>)
 800110c:	482f      	ldr	r0, [pc, #188]	; (80011cc <main+0x1e0>)
 800110e:	f006 fef5 	bl	8007efc <siprintf>
  	sprintf(show2,"%d",COSCom2_plus);
 8001112:	4b2f      	ldr	r3, [pc, #188]	; (80011d0 <main+0x1e4>)
 8001114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001118:	461a      	mov	r2, r3
 800111a:	492b      	ldr	r1, [pc, #172]	; (80011c8 <main+0x1dc>)
 800111c:	482d      	ldr	r0, [pc, #180]	; (80011d4 <main+0x1e8>)
 800111e:	f006 feed 	bl	8007efc <siprintf>
  	sprintf(show3,"%f",COSCom2);
 8001122:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <main+0x1ec>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff fa0e 	bl	8000548 <__aeabi_f2d>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	492a      	ldr	r1, [pc, #168]	; (80011dc <main+0x1f0>)
 8001132:	482b      	ldr	r0, [pc, #172]	; (80011e0 <main+0x1f4>)
 8001134:	f006 fee2 	bl	8007efc <siprintf>
		sprintf(show2,"BT_V:%.3f",BT_VReal);
		sprintf(show3,"DC_V:%.3f",DC_VReal);
		sprintf(show4,"PW_V:%.3f",PW_VReal);
		sprintf(show5,"PW_C:%.3f",PW_CReal_1);
		*/
		LCD_write_String(0,0,show0);
 8001138:	4a22      	ldr	r2, [pc, #136]	; (80011c4 <main+0x1d8>)
 800113a:	2100      	movs	r1, #0
 800113c:	2000      	movs	r0, #0
 800113e:	f002 f86f 	bl	8003220 <LCD_write_String>
		LCD_write_String(0,1,show1);
 8001142:	4a22      	ldr	r2, [pc, #136]	; (80011cc <main+0x1e0>)
 8001144:	2101      	movs	r1, #1
 8001146:	2000      	movs	r0, #0
 8001148:	f002 f86a 	bl	8003220 <LCD_write_String>
		LCD_write_String(0,2,show2);
 800114c:	4a21      	ldr	r2, [pc, #132]	; (80011d4 <main+0x1e8>)
 800114e:	2102      	movs	r1, #2
 8001150:	2000      	movs	r0, #0
 8001152:	f002 f865 	bl	8003220 <LCD_write_String>
		LCD_write_String(0,3,show3);
 8001156:	4a22      	ldr	r2, [pc, #136]	; (80011e0 <main+0x1f4>)
 8001158:	2103      	movs	r1, #3
 800115a:	2000      	movs	r0, #0
 800115c:	f002 f860 	bl	8003220 <LCD_write_String>
		LCD_write_String(0,4,show4);
 8001160:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <main+0x1f8>)
 8001162:	2104      	movs	r1, #4
 8001164:	2000      	movs	r0, #0
 8001166:	f002 f85b 	bl	8003220 <LCD_write_String>
		LCD_write_String(0,5,show5);
 800116a:	4a1f      	ldr	r2, [pc, #124]	; (80011e8 <main+0x1fc>)
 800116c:	2105      	movs	r1, #5
 800116e:	2000      	movs	r0, #0
 8001170:	f002 f856 	bl	8003220 <LCD_write_String>
		HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001174:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001178:	481c      	ldr	r0, [pc, #112]	; (80011ec <main+0x200>)
 800117a:	f003 f9de 	bl	800453a <HAL_GPIO_TogglePin>
		MainTick=HAL_GetTick();
 800117e:	f002 f8d5 	bl	800332c <HAL_GetTick>
 8001182:	4603      	mov	r3, r0
 8001184:	4a0c      	ldr	r2, [pc, #48]	; (80011b8 <main+0x1cc>)
 8001186:	6013      	str	r3, [r2, #0]
  	if( (HAL_GetTick()-MainTick)>300)
 8001188:	e785      	b.n	8001096 <main+0xaa>
 800118a:	bf00      	nop
 800118c:	20000248 	.word	0x20000248
 8001190:	42480000 	.word	0x42480000
 8001194:	20000008 	.word	0x20000008
 8001198:	2000026c 	.word	0x2000026c
 800119c:	20000554 	.word	0x20000554
 80011a0:	200003b8 	.word	0x200003b8
 80011a4:	20000370 	.word	0x20000370
 80011a8:	2000052c 	.word	0x2000052c
 80011ac:	20000400 	.word	0x20000400
 80011b0:	200002e8 	.word	0x200002e8
 80011b4:	20000448 	.word	0x20000448
 80011b8:	20000490 	.word	0x20000490
 80011bc:	3ff33333 	.word	0x3ff33333
 80011c0:	0800ba60 	.word	0x0800ba60
 80011c4:	200005b0 	.word	0x200005b0
 80011c8:	0800ba68 	.word	0x0800ba68
 80011cc:	200002c0 	.word	0x200002c0
 80011d0:	20000002 	.word	0x20000002
 80011d4:	20000234 	.word	0x20000234
 80011d8:	20000004 	.word	0x20000004
 80011dc:	0800ba6c 	.word	0x0800ba6c
 80011e0:	200002d4 	.word	0x200002d4
 80011e4:	20000518 	.word	0x20000518
 80011e8:	2000059c 	.word	0x2000059c
 80011ec:	40021800 	.word	0x40021800

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b094      	sub	sp, #80	; 0x50
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0320 	add.w	r3, r7, #32
 80011fa:	2230      	movs	r2, #48	; 0x30
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f005 fff4 	bl	80071ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	4b28      	ldr	r3, [pc, #160]	; (80012bc <SystemClock_Config+0xcc>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	4a27      	ldr	r2, [pc, #156]	; (80012bc <SystemClock_Config+0xcc>)
 800121e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001222:	6413      	str	r3, [r2, #64]	; 0x40
 8001224:	4b25      	ldr	r3, [pc, #148]	; (80012bc <SystemClock_Config+0xcc>)
 8001226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001228:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001230:	2300      	movs	r3, #0
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <SystemClock_Config+0xd0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a21      	ldr	r2, [pc, #132]	; (80012c0 <SystemClock_Config+0xd0>)
 800123a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <SystemClock_Config+0xd0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800124c:	2302      	movs	r3, #2
 800124e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001250:	2301      	movs	r3, #1
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001254:	2310      	movs	r3, #16
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001258:	2302      	movs	r3, #2
 800125a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800125c:	2300      	movs	r3, #0
 800125e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001260:	2308      	movs	r3, #8
 8001262:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001264:	23a8      	movs	r3, #168	; 0xa8
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001268:	2302      	movs	r3, #2
 800126a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800126c:	2304      	movs	r3, #4
 800126e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001270:	f107 0320 	add.w	r3, r7, #32
 8001274:	4618      	mov	r0, r3
 8001276:	f004 f95f 	bl	8005538 <HAL_RCC_OscConfig>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001280:	f000 fb82 	bl	8001988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001284:	230f      	movs	r3, #15
 8001286:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001288:	2302      	movs	r3, #2
 800128a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001290:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001294:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800129c:	f107 030c 	add.w	r3, r7, #12
 80012a0:	2105      	movs	r1, #5
 80012a2:	4618      	mov	r0, r3
 80012a4:	f004 fbc0 	bl	8005a28 <HAL_RCC_ClockConfig>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012ae:	f000 fb6b 	bl	8001988 <Error_Handler>
  }
}
 80012b2:	bf00      	nop
 80012b4:	3750      	adds	r7, #80	; 0x50
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40007000 	.word	0x40007000

080012c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012ca:	463b      	mov	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80012d6:	4b22      	ldr	r3, [pc, #136]	; (8001360 <MX_ADC1_Init+0x9c>)
 80012d8:	4a22      	ldr	r2, [pc, #136]	; (8001364 <MX_ADC1_Init+0xa0>)
 80012da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80012dc:	4b20      	ldr	r3, [pc, #128]	; (8001360 <MX_ADC1_Init+0x9c>)
 80012de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <MX_ADC1_Init+0x9c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80012ea:	4b1d      	ldr	r3, [pc, #116]	; (8001360 <MX_ADC1_Init+0x9c>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012f0:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <MX_ADC1_Init+0x9c>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f6:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <MX_ADC1_Init+0x9c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80012fe:	4b18      	ldr	r3, [pc, #96]	; (8001360 <MX_ADC1_Init+0x9c>)
 8001300:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001306:	4b16      	ldr	r3, [pc, #88]	; (8001360 <MX_ADC1_Init+0x9c>)
 8001308:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800130c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800130e:	4b14      	ldr	r3, [pc, #80]	; (8001360 <MX_ADC1_Init+0x9c>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_ADC1_Init+0x9c>)
 8001316:	2201      	movs	r2, #1
 8001318:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_ADC1_Init+0x9c>)
 800131c:	2201      	movs	r2, #1
 800131e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <MX_ADC1_Init+0x9c>)
 8001324:	2201      	movs	r2, #1
 8001326:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <MX_ADC1_Init+0x9c>)
 800132a:	f002 f82f 	bl	800338c <HAL_ADC_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001334:	f000 fb28 	bl	8001988 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001338:	2311      	movs	r3, #17
 800133a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800133c:	2301      	movs	r3, #1
 800133e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001340:	2307      	movs	r3, #7
 8001342:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	4619      	mov	r1, r3
 8001348:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_ADC1_Init+0x9c>)
 800134a:	f002 f991 	bl	8003670 <HAL_ADC_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001354:	f000 fb18 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000400 	.word	0x20000400
 8001364:	40012000 	.word	0x40012000

08001368 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800136e:	463b      	mov	r3, r7
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800137a:	4b22      	ldr	r3, [pc, #136]	; (8001404 <MX_ADC3_Init+0x9c>)
 800137c:	4a22      	ldr	r2, [pc, #136]	; (8001408 <MX_ADC3_Init+0xa0>)
 800137e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001380:	4b20      	ldr	r3, [pc, #128]	; (8001404 <MX_ADC3_Init+0x9c>)
 8001382:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001386:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <MX_ADC3_Init+0x9c>)
 800138a:	2200      	movs	r2, #0
 800138c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800138e:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <MX_ADC3_Init+0x9c>)
 8001390:	2201      	movs	r2, #1
 8001392:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <MX_ADC3_Init+0x9c>)
 8001396:	2201      	movs	r2, #1
 8001398:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_ADC3_Init+0x9c>)
 800139c:	2200      	movs	r2, #0
 800139e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <MX_ADC3_Init+0x9c>)
 80013a4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80013a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <MX_ADC3_Init+0x9c>)
 80013ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_ADC3_Init+0x9c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_ADC3_Init+0x9c>)
 80013ba:	2201      	movs	r2, #1
 80013bc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_ADC3_Init+0x9c>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_ADC3_Init+0x9c>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80013cc:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_ADC3_Init+0x9c>)
 80013ce:	f001 ffdd 	bl	800338c <HAL_ADC_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 80013d8:	f000 fad6 	bl	8001988 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80013dc:	230e      	movs	r3, #14
 80013de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80013e0:	2301      	movs	r3, #1
 80013e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80013e4:	2307      	movs	r3, #7
 80013e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_ADC3_Init+0x9c>)
 80013ee:	f002 f93f 	bl	8003670 <HAL_ADC_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 80013f8:	f000 fac6 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000448 	.word	0x20000448
 8001408:	40012200 	.word	0x40012200

0800140c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001410:	4b12      	ldr	r3, [pc, #72]	; (800145c <MX_I2C1_Init+0x50>)
 8001412:	4a13      	ldr	r2, [pc, #76]	; (8001460 <MX_I2C1_Init+0x54>)
 8001414:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001416:	4b11      	ldr	r3, [pc, #68]	; (800145c <MX_I2C1_Init+0x50>)
 8001418:	4a12      	ldr	r2, [pc, #72]	; (8001464 <MX_I2C1_Init+0x58>)
 800141a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800141c:	4b0f      	ldr	r3, [pc, #60]	; (800145c <MX_I2C1_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001422:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MX_I2C1_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001428:	4b0c      	ldr	r3, [pc, #48]	; (800145c <MX_I2C1_Init+0x50>)
 800142a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800142e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <MX_I2C1_Init+0x50>)
 8001432:	2200      	movs	r2, #0
 8001434:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <MX_I2C1_Init+0x50>)
 8001438:	2200      	movs	r2, #0
 800143a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <MX_I2C1_Init+0x50>)
 800143e:	2200      	movs	r2, #0
 8001440:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <MX_I2C1_Init+0x50>)
 8001444:	2200      	movs	r2, #0
 8001446:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001448:	4804      	ldr	r0, [pc, #16]	; (800145c <MX_I2C1_Init+0x50>)
 800144a:	f003 f8b5 	bl	80045b8 <HAL_I2C_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001454:	f000 fa98 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001458:	bf00      	nop
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000026c 	.word	0x2000026c
 8001460:	40005400 	.word	0x40005400
 8001464:	00061a80 	.word	0x00061a80

08001468 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b08e      	sub	sp, #56	; 0x38
 800146c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800146e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]
 800147a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800147c:	f107 0320 	add.w	r3, r7, #32
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
 8001494:	615a      	str	r2, [r3, #20]
 8001496:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001498:	4b42      	ldr	r3, [pc, #264]	; (80015a4 <MX_TIM2_Init+0x13c>)
 800149a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800149e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 80014a0:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <MX_TIM2_Init+0x13c>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80014a6:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <MX_TIM2_Init+0x13c>)
 80014a8:	2210      	movs	r2, #16
 80014aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2800-1;
 80014ac:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <MX_TIM2_Init+0x13c>)
 80014ae:	f640 22ef 	movw	r2, #2799	; 0xaef
 80014b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014b4:	4b3b      	ldr	r3, [pc, #236]	; (80015a4 <MX_TIM2_Init+0x13c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ba:	4b3a      	ldr	r3, [pc, #232]	; (80015a4 <MX_TIM2_Init+0x13c>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014c0:	4838      	ldr	r0, [pc, #224]	; (80015a4 <MX_TIM2_Init+0x13c>)
 80014c2:	f004 fc99 	bl	8005df8 <HAL_TIM_Base_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014cc:	f000 fa5c 	bl	8001988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014da:	4619      	mov	r1, r3
 80014dc:	4831      	ldr	r0, [pc, #196]	; (80015a4 <MX_TIM2_Init+0x13c>)
 80014de:	f005 f9a9 	bl	8006834 <HAL_TIM_ConfigClockSource>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014e8:	f000 fa4e 	bl	8001988 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80014ec:	482d      	ldr	r0, [pc, #180]	; (80015a4 <MX_TIM2_Init+0x13c>)
 80014ee:	f004 fdab 	bl	8006048 <HAL_TIM_PWM_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80014f8:	f000 fa46 	bl	8001988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014fc:	2320      	movs	r3, #32
 80014fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001504:	f107 0320 	add.w	r3, r7, #32
 8001508:	4619      	mov	r1, r3
 800150a:	4826      	ldr	r0, [pc, #152]	; (80015a4 <MX_TIM2_Init+0x13c>)
 800150c:	f005 fd98 	bl	8007040 <HAL_TIMEx_MasterConfigSynchronization>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001516:	f000 fa37 	bl	8001988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800151a:	2360      	movs	r3, #96	; 0x60
 800151c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1400-1;
 800151e:	f240 5377 	movw	r3, #1399	; 0x577
 8001522:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2200      	movs	r2, #0
 8001530:	4619      	mov	r1, r3
 8001532:	481c      	ldr	r0, [pc, #112]	; (80015a4 <MX_TIM2_Init+0x13c>)
 8001534:	f005 f8c0 	bl	80066b8 <HAL_TIM_PWM_ConfigChannel>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800153e:	f000 fa23 	bl	8001988 <Error_Handler>
  }
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001542:	2304      	movs	r3, #4
 8001544:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001546:	1d3b      	adds	r3, r7, #4
 8001548:	2204      	movs	r2, #4
 800154a:	4619      	mov	r1, r3
 800154c:	4815      	ldr	r0, [pc, #84]	; (80015a4 <MX_TIM2_Init+0x13c>)
 800154e:	f005 f8b3 	bl	80066b8 <HAL_TIM_PWM_ConfigChannel>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_TIM2_Init+0xf4>
  {
    Error_Handler();
 8001558:	f000 fa16 	bl	8001988 <Error_Handler>
  }
  sConfigOC.Pulse = 100-1;
 800155c:	2363      	movs	r3, #99	; 0x63
 800155e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2208      	movs	r2, #8
 8001568:	4619      	mov	r1, r3
 800156a:	480e      	ldr	r0, [pc, #56]	; (80015a4 <MX_TIM2_Init+0x13c>)
 800156c:	f005 f8a4 	bl	80066b8 <HAL_TIM_PWM_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM2_Init+0x112>
  {
    Error_Handler();
 8001576:	f000 fa07 	bl	8001988 <Error_Handler>
  }
  sConfigOC.Pulse = 1400-1;
 800157a:	f240 5377 	movw	r3, #1399	; 0x577
 800157e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	220c      	movs	r2, #12
 8001584:	4619      	mov	r1, r3
 8001586:	4807      	ldr	r0, [pc, #28]	; (80015a4 <MX_TIM2_Init+0x13c>)
 8001588:	f005 f896 	bl	80066b8 <HAL_TIM_PWM_ConfigChannel>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_TIM2_Init+0x12e>
  {
    Error_Handler();
 8001592:	f000 f9f9 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001596:	4803      	ldr	r0, [pc, #12]	; (80015a4 <MX_TIM2_Init+0x13c>)
 8001598:	f000 fb8a 	bl	8001cb0 <HAL_TIM_MspPostInit>

}
 800159c:	bf00      	nop
 800159e:	3738      	adds	r7, #56	; 0x38
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	20000554 	.word	0x20000554

080015a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ae:	f107 0308 	add.w	r3, r7, #8
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
 80015b6:	605a      	str	r2, [r3, #4]
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015bc:	463b      	mov	r3, r7
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <MX_TIM3_Init+0x94>)
 80015c6:	4a1e      	ldr	r2, [pc, #120]	; (8001640 <MX_TIM3_Init+0x98>)
 80015c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 210-1;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <MX_TIM3_Init+0x94>)
 80015cc:	22d1      	movs	r2, #209	; 0xd1
 80015ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d0:	4b1a      	ldr	r3, [pc, #104]	; (800163c <MX_TIM3_Init+0x94>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <MX_TIM3_Init+0x94>)
 80015d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80015dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <MX_TIM3_Init+0x94>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <MX_TIM3_Init+0x94>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015ea:	4814      	ldr	r0, [pc, #80]	; (800163c <MX_TIM3_Init+0x94>)
 80015ec:	f004 fc04 	bl	8005df8 <HAL_TIM_Base_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80015f6:	f000 f9c7 	bl	8001988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001600:	f107 0308 	add.w	r3, r7, #8
 8001604:	4619      	mov	r1, r3
 8001606:	480d      	ldr	r0, [pc, #52]	; (800163c <MX_TIM3_Init+0x94>)
 8001608:	f005 f914 	bl	8006834 <HAL_TIM_ConfigClockSource>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001612:	f000 f9b9 	bl	8001988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001616:	2320      	movs	r3, #32
 8001618:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800161e:	463b      	mov	r3, r7
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	; (800163c <MX_TIM3_Init+0x94>)
 8001624:	f005 fd0c 	bl	8007040 <HAL_TIMEx_MasterConfigSynchronization>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800162e:	f000 f9ab 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200003b8 	.word	0x200003b8
 8001640:	40000400 	.word	0x40000400

08001644 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b086      	sub	sp, #24
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800164a:	f107 0308 	add.w	r3, r7, #8
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]
 8001656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001658:	463b      	mov	r3, r7
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001660:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <MX_TIM5_Init+0x94>)
 8001662:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <MX_TIM5_Init+0x98>)
 8001664:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 8001666:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <MX_TIM5_Init+0x94>)
 8001668:	2253      	movs	r2, #83	; 0x53
 800166a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166c:	4b1a      	ldr	r3, [pc, #104]	; (80016d8 <MX_TIM5_Init+0x94>)
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <MX_TIM5_Init+0x94>)
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167a:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <MX_TIM5_Init+0x94>)
 800167c:	2200      	movs	r2, #0
 800167e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <MX_TIM5_Init+0x94>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001686:	4814      	ldr	r0, [pc, #80]	; (80016d8 <MX_TIM5_Init+0x94>)
 8001688:	f004 fbb6 	bl	8005df8 <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001692:	f000 f979 	bl	8001988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	4619      	mov	r1, r3
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <MX_TIM5_Init+0x94>)
 80016a4:	f005 f8c6 	bl	8006834 <HAL_TIM_ConfigClockSource>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80016ae:	f000 f96b 	bl	8001988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016ba:	463b      	mov	r3, r7
 80016bc:	4619      	mov	r1, r3
 80016be:	4806      	ldr	r0, [pc, #24]	; (80016d8 <MX_TIM5_Init+0x94>)
 80016c0:	f005 fcbe 	bl	8007040 <HAL_TIMEx_MasterConfigSynchronization>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80016ca:	f000 f95d 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20000370 	.word	0x20000370
 80016dc:	40000c00 	.word	0x40000c00

080016e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80016e6:	2300      	movs	r3, #0
 80016e8:	607b      	str	r3, [r7, #4]
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_DMA_Init+0x30>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a08      	ldr	r2, [pc, #32]	; (8001710 <MX_DMA_Init+0x30>)
 80016f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b06      	ldr	r3, [pc, #24]	; (8001710 <MX_DMA_Init+0x30>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	687b      	ldr	r3, [r7, #4]

}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800

08001714 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08c      	sub	sp, #48	; 0x30
 8001718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171a:	f107 031c 	add.w	r3, r7, #28
 800171e:	2200      	movs	r2, #0
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	605a      	str	r2, [r3, #4]
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	60da      	str	r2, [r3, #12]
 8001728:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	61bb      	str	r3, [r7, #24]
 800172e:	4b8f      	ldr	r3, [pc, #572]	; (800196c <MX_GPIO_Init+0x258>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a8e      	ldr	r2, [pc, #568]	; (800196c <MX_GPIO_Init+0x258>)
 8001734:	f043 0310 	orr.w	r3, r3, #16
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b8c      	ldr	r3, [pc, #560]	; (800196c <MX_GPIO_Init+0x258>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	4b88      	ldr	r3, [pc, #544]	; (800196c <MX_GPIO_Init+0x258>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a87      	ldr	r2, [pc, #540]	; (800196c <MX_GPIO_Init+0x258>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b85      	ldr	r3, [pc, #532]	; (800196c <MX_GPIO_Init+0x258>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b81      	ldr	r3, [pc, #516]	; (800196c <MX_GPIO_Init+0x258>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176a:	4a80      	ldr	r2, [pc, #512]	; (800196c <MX_GPIO_Init+0x258>)
 800176c:	f043 0320 	orr.w	r3, r3, #32
 8001770:	6313      	str	r3, [r2, #48]	; 0x30
 8001772:	4b7e      	ldr	r3, [pc, #504]	; (800196c <MX_GPIO_Init+0x258>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	f003 0320 	and.w	r3, r3, #32
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b7a      	ldr	r3, [pc, #488]	; (800196c <MX_GPIO_Init+0x258>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	4a79      	ldr	r2, [pc, #484]	; (800196c <MX_GPIO_Init+0x258>)
 8001788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800178c:	6313      	str	r3, [r2, #48]	; 0x30
 800178e:	4b77      	ldr	r3, [pc, #476]	; (800196c <MX_GPIO_Init+0x258>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	4b73      	ldr	r3, [pc, #460]	; (800196c <MX_GPIO_Init+0x258>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a72      	ldr	r2, [pc, #456]	; (800196c <MX_GPIO_Init+0x258>)
 80017a4:	f043 0301 	orr.w	r3, r3, #1
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b70      	ldr	r3, [pc, #448]	; (800196c <MX_GPIO_Init+0x258>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	4b6c      	ldr	r3, [pc, #432]	; (800196c <MX_GPIO_Init+0x258>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a6b      	ldr	r2, [pc, #428]	; (800196c <MX_GPIO_Init+0x258>)
 80017c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b69      	ldr	r3, [pc, #420]	; (800196c <MX_GPIO_Init+0x258>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	603b      	str	r3, [r7, #0]
 80017d6:	4b65      	ldr	r3, [pc, #404]	; (800196c <MX_GPIO_Init+0x258>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a64      	ldr	r2, [pc, #400]	; (800196c <MX_GPIO_Init+0x258>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b62      	ldr	r3, [pc, #392]	; (800196c <MX_GPIO_Init+0x258>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LOCK_GPIO_Port, LOCK_Pin, GPIO_PIN_SET);
 80017ee:	2201      	movs	r2, #1
 80017f0:	2140      	movs	r1, #64	; 0x40
 80017f2:	485f      	ldr	r0, [pc, #380]	; (8001970 <MX_GPIO_Init+0x25c>)
 80017f4:	f002 fe88 	bl	8004508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(COL4_GPIO_Port, COL4_Pin, GPIO_PIN_RESET);
 80017f8:	2200      	movs	r2, #0
 80017fa:	2102      	movs	r1, #2
 80017fc:	485d      	ldr	r0, [pc, #372]	; (8001974 <MX_GPIO_Init+0x260>)
 80017fe:	f002 fe83 	bl	8004508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, COL3_Pin|COL2_Pin|COL1_Pin|LCD5110RESET_Pin, GPIO_PIN_RESET);
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 4187 	mov.w	r1, #17280	; 0x4380
 8001808:	485b      	ldr	r0, [pc, #364]	; (8001978 <MX_GPIO_Init+0x264>)
 800180a:	f002 fe7d 	bl	8004508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD5110SCE_GPIO_Port, LCD5110SCE_Pin, GPIO_PIN_SET);
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001814:	4858      	ldr	r0, [pc, #352]	; (8001978 <MX_GPIO_Init+0x264>)
 8001816:	f002 fe77 	bl	8004508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD5110SDIN_Pin|LCD5110DC_Pin|LCD5110SCLK_Pin, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	f44f 5130 	mov.w	r1, #11264	; 0x2c00
 8001820:	4856      	ldr	r0, [pc, #344]	; (800197c <MX_GPIO_Init+0x268>)
 8001822:	f002 fe71 	bl	8004508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED0_Pin|LED1_Pin, GPIO_PIN_SET);
 8001826:	2201      	movs	r2, #1
 8001828:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 800182c:	4851      	ldr	r0, [pc, #324]	; (8001974 <MX_GPIO_Init+0x260>)
 800182e:	f002 fe6b 	bl	8004508 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Trig2_Pin Trig1_Pin */
  GPIO_InitStruct.Pin = Trig2_Pin|Trig1_Pin;
 8001832:	2314      	movs	r3, #20
 8001834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001836:	4b52      	ldr	r3, [pc, #328]	; (8001980 <MX_GPIO_Init+0x26c>)
 8001838:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800183a:	2302      	movs	r3, #2
 800183c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800183e:	f107 031c 	add.w	r3, r7, #28
 8001842:	4619      	mov	r1, r3
 8001844:	484c      	ldr	r0, [pc, #304]	; (8001978 <MX_GPIO_Init+0x264>)
 8001846:	f002 fcab 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LOCK_Pin */
  GPIO_InitStruct.Pin = LOCK_Pin;
 800184a:	2340      	movs	r3, #64	; 0x40
 800184c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184e:	2301      	movs	r3, #1
 8001850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LOCK_GPIO_Port, &GPIO_InitStruct);
 800185a:	f107 031c 	add.w	r3, r7, #28
 800185e:	4619      	mov	r1, r3
 8001860:	4843      	ldr	r0, [pc, #268]	; (8001970 <MX_GPIO_Init+0x25c>)
 8001862:	f002 fc9d 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : COL4_Pin */
  GPIO_InitStruct.Pin = COL4_Pin;
 8001866:	2302      	movs	r3, #2
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800186e:	2302      	movs	r3, #2
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(COL4_GPIO_Port, &GPIO_InitStruct);
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	4619      	mov	r1, r3
 800187c:	483d      	ldr	r0, [pc, #244]	; (8001974 <MX_GPIO_Init+0x260>)
 800187e:	f002 fc8f 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : COL3_Pin COL2_Pin COL1_Pin */
  GPIO_InitStruct.Pin = COL3_Pin|COL2_Pin|COL1_Pin;
 8001882:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800188c:	2302      	movs	r3, #2
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	4619      	mov	r1, r3
 800189a:	4837      	ldr	r0, [pc, #220]	; (8001978 <MX_GPIO_Init+0x264>)
 800189c:	f002 fc80 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ROW1_Pin ROW2_Pin ROW3_Pin ROW4_Pin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin|ROW4_Pin;
 80018a0:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80018a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018a6:	4b37      	ldr	r3, [pc, #220]	; (8001984 <MX_GPIO_Init+0x270>)
 80018a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018aa:	2301      	movs	r3, #1
 80018ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ae:	f107 031c 	add.w	r3, r7, #28
 80018b2:	4619      	mov	r1, r3
 80018b4:	4830      	ldr	r0, [pc, #192]	; (8001978 <MX_GPIO_Init+0x264>)
 80018b6:	f002 fc73 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD5110RESET_Pin */
  GPIO_InitStruct.Pin = LCD5110RESET_Pin;
 80018ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	2303      	movs	r3, #3
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD5110RESET_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	4829      	ldr	r0, [pc, #164]	; (8001978 <MX_GPIO_Init+0x264>)
 80018d4:	f002 fc64 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD5110SCE_Pin */
  GPIO_InitStruct.Pin = LCD5110SCE_Pin;
 80018d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018e2:	2301      	movs	r3, #1
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e6:	2303      	movs	r3, #3
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD5110SCE_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	4619      	mov	r1, r3
 80018f0:	4821      	ldr	r0, [pc, #132]	; (8001978 <MX_GPIO_Init+0x264>)
 80018f2:	f002 fc55 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD5110SDIN_Pin LCD5110DC_Pin LCD5110SCLK_Pin */
  GPIO_InitStruct.Pin = LCD5110SDIN_Pin|LCD5110DC_Pin|LCD5110SCLK_Pin;
 80018f6:	f44f 5330 	mov.w	r3, #11264	; 0x2c00
 80018fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fc:	2301      	movs	r3, #1
 80018fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001904:	2303      	movs	r3, #3
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001908:	f107 031c 	add.w	r3, r7, #28
 800190c:	4619      	mov	r1, r3
 800190e:	481b      	ldr	r0, [pc, #108]	; (800197c <MX_GPIO_Init+0x268>)
 8001910:	f002 fc46 	bl	80041a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin;
 8001914:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800191a:	2301      	movs	r3, #1
 800191c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191e:	2301      	movs	r3, #1
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001922:	2300      	movs	r3, #0
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001926:	f107 031c 	add.w	r3, r7, #28
 800192a:	4619      	mov	r1, r3
 800192c:	4811      	ldr	r0, [pc, #68]	; (8001974 <MX_GPIO_Init+0x260>)
 800192e:	f002 fc37 	bl	80041a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001932:	2200      	movs	r2, #0
 8001934:	2100      	movs	r1, #0
 8001936:	2008      	movs	r0, #8
 8001938:	f002 fa15 	bl	8003d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800193c:	2008      	movs	r0, #8
 800193e:	f002 fa2e 	bl	8003d9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	2100      	movs	r1, #0
 8001946:	200a      	movs	r0, #10
 8001948:	f002 fa0d 	bl	8003d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800194c:	200a      	movs	r0, #10
 800194e:	f002 fa26 	bl	8003d9e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001952:	2200      	movs	r2, #0
 8001954:	2100      	movs	r1, #0
 8001956:	2028      	movs	r0, #40	; 0x28
 8001958:	f002 fa05 	bl	8003d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800195c:	2028      	movs	r0, #40	; 0x28
 800195e:	f002 fa1e 	bl	8003d9e <HAL_NVIC_EnableIRQ>

}
 8001962:	bf00      	nop
 8001964:	3730      	adds	r7, #48	; 0x30
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800
 8001970:	40020000 	.word	0x40020000
 8001974:	40021800 	.word	0x40021800
 8001978:	40021000 	.word	0x40021000
 800197c:	40020400 	.word	0x40020400
 8001980:	10110000 	.word	0x10110000
 8001984:	10210000 	.word	0x10210000

08001988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800198c:	b672      	cpsid	i
}
 800198e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001990:	e7fe      	b.n	8001990 <Error_Handler+0x8>
	...

08001994 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <HAL_MspInit+0x4c>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <HAL_MspInit+0x4c>)
 80019a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_MspInit+0x4c>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_MspInit+0x4c>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_MspInit+0x4c>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_MspInit+0x4c>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80019d2:	2005      	movs	r0, #5
 80019d4:	f002 f9bc 	bl	8003d50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40023800 	.word	0x40023800

080019e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a52      	ldr	r2, [pc, #328]	; (8001b4c <HAL_ADC_MspInit+0x168>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d13f      	bne.n	8001a86 <HAL_ADC_MspInit+0xa2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	4b51      	ldr	r3, [pc, #324]	; (8001b50 <HAL_ADC_MspInit+0x16c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a50      	ldr	r2, [pc, #320]	; (8001b50 <HAL_ADC_MspInit+0x16c>)
 8001a10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b4e      	ldr	r3, [pc, #312]	; (8001b50 <HAL_ADC_MspInit+0x16c>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8001a22:	4b4c      	ldr	r3, [pc, #304]	; (8001b54 <HAL_ADC_MspInit+0x170>)
 8001a24:	4a4c      	ldr	r2, [pc, #304]	; (8001b58 <HAL_ADC_MspInit+0x174>)
 8001a26:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a28:	4b4a      	ldr	r3, [pc, #296]	; (8001b54 <HAL_ADC_MspInit+0x170>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a2e:	4b49      	ldr	r3, [pc, #292]	; (8001b54 <HAL_ADC_MspInit+0x170>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a34:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <HAL_ADC_MspInit+0x170>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a3a:	4b46      	ldr	r3, [pc, #280]	; (8001b54 <HAL_ADC_MspInit+0x170>)
 8001a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a40:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a42:	4b44      	ldr	r3, [pc, #272]	; (8001b54 <HAL_ADC_MspInit+0x170>)
 8001a44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a48:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a4a:	4b42      	ldr	r3, [pc, #264]	; (8001b54 <HAL_ADC_MspInit+0x170>)
 8001a4c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a50:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a52:	4b40      	ldr	r3, [pc, #256]	; (8001b54 <HAL_ADC_MspInit+0x170>)
 8001a54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a58:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a5a:	4b3e      	ldr	r3, [pc, #248]	; (8001b54 <HAL_ADC_MspInit+0x170>)
 8001a5c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001a60:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a62:	4b3c      	ldr	r3, [pc, #240]	; (8001b54 <HAL_ADC_MspInit+0x170>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a68:	483a      	ldr	r0, [pc, #232]	; (8001b54 <HAL_ADC_MspInit+0x170>)
 8001a6a:	f002 f9b3 	bl	8003dd4 <HAL_DMA_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_ADC_MspInit+0x94>
    {
      Error_Handler();
 8001a74:	f7ff ff88 	bl	8001988 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a36      	ldr	r2, [pc, #216]	; (8001b54 <HAL_ADC_MspInit+0x170>)
 8001a7c:	639a      	str	r2, [r3, #56]	; 0x38
 8001a7e:	4a35      	ldr	r2, [pc, #212]	; (8001b54 <HAL_ADC_MspInit+0x170>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001a84:	e05d      	b.n	8001b42 <HAL_ADC_MspInit+0x15e>
  else if(hadc->Instance==ADC3)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a34      	ldr	r2, [pc, #208]	; (8001b5c <HAL_ADC_MspInit+0x178>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d158      	bne.n	8001b42 <HAL_ADC_MspInit+0x15e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <HAL_ADC_MspInit+0x16c>)
 8001a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a98:	4a2d      	ldr	r2, [pc, #180]	; (8001b50 <HAL_ADC_MspInit+0x16c>)
 8001a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9e:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa0:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <HAL_ADC_MspInit+0x16c>)
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001aac:	2300      	movs	r3, #0
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <HAL_ADC_MspInit+0x16c>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	4a26      	ldr	r2, [pc, #152]	; (8001b50 <HAL_ADC_MspInit+0x16c>)
 8001ab6:	f043 0320 	orr.w	r3, r3, #32
 8001aba:	6313      	str	r3, [r2, #48]	; 0x30
 8001abc:	4b24      	ldr	r3, [pc, #144]	; (8001b50 <HAL_ADC_MspInit+0x16c>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	f003 0320 	and.w	r3, r3, #32
 8001ac4:	60bb      	str	r3, [r7, #8]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ac8:	2310      	movs	r3, #16
 8001aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001acc:	2303      	movs	r3, #3
 8001ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4821      	ldr	r0, [pc, #132]	; (8001b60 <HAL_ADC_MspInit+0x17c>)
 8001adc:	f002 fb60 	bl	80041a0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream0;
 8001ae0:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <HAL_ADC_MspInit+0x180>)
 8001ae2:	4a21      	ldr	r2, [pc, #132]	; (8001b68 <HAL_ADC_MspInit+0x184>)
 8001ae4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <HAL_ADC_MspInit+0x180>)
 8001ae8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001aec:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aee:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <HAL_ADC_MspInit+0x180>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_ADC_MspInit+0x180>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <HAL_ADC_MspInit+0x180>)
 8001afc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b00:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001b02:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <HAL_ADC_MspInit+0x180>)
 8001b04:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b08:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_ADC_MspInit+0x180>)
 8001b0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b10:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001b12:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_ADC_MspInit+0x180>)
 8001b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b18:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001b1a:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <HAL_ADC_MspInit+0x180>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b20:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_ADC_MspInit+0x180>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001b26:	480f      	ldr	r0, [pc, #60]	; (8001b64 <HAL_ADC_MspInit+0x180>)
 8001b28:	f002 f954 	bl	8003dd4 <HAL_DMA_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <HAL_ADC_MspInit+0x152>
      Error_Handler();
 8001b32:	f7ff ff29 	bl	8001988 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_ADC_MspInit+0x180>)
 8001b3a:	639a      	str	r2, [r3, #56]	; 0x38
 8001b3c:	4a09      	ldr	r2, [pc, #36]	; (8001b64 <HAL_ADC_MspInit+0x180>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b42:	bf00      	nop
 8001b44:	3728      	adds	r7, #40	; 0x28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40012000 	.word	0x40012000
 8001b50:	40023800 	.word	0x40023800
 8001b54:	20000494 	.word	0x20000494
 8001b58:	40026470 	.word	0x40026470
 8001b5c:	40012200 	.word	0x40012200
 8001b60:	40021400 	.word	0x40021400
 8001b64:	20000310 	.word	0x20000310
 8001b68:	40026410 	.word	0x40026410

08001b6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a19      	ldr	r2, [pc, #100]	; (8001bf0 <HAL_I2C_MspInit+0x84>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d12c      	bne.n	8001be8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_I2C_MspInit+0x88>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b96:	4a17      	ldr	r2, [pc, #92]	; (8001bf4 <HAL_I2C_MspInit+0x88>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_I2C_MspInit+0x88>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001baa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb0:	2312      	movs	r3, #18
 8001bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <HAL_I2C_MspInit+0x8c>)
 8001bc8:	f002 faea 	bl	80041a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <HAL_I2C_MspInit+0x88>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	4a07      	ldr	r2, [pc, #28]	; (8001bf4 <HAL_I2C_MspInit+0x88>)
 8001bd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bda:	6413      	str	r3, [r2, #64]	; 0x40
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <HAL_I2C_MspInit+0x88>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40005400 	.word	0x40005400
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020400 	.word	0x40020400

08001bfc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c0c:	d116      	bne.n	8001c3c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
 8001c12:	4b24      	ldr	r3, [pc, #144]	; (8001ca4 <HAL_TIM_Base_MspInit+0xa8>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	4a23      	ldr	r2, [pc, #140]	; (8001ca4 <HAL_TIM_Base_MspInit+0xa8>)
 8001c18:	f043 0301 	orr.w	r3, r3, #1
 8001c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1e:	4b21      	ldr	r3, [pc, #132]	; (8001ca4 <HAL_TIM_Base_MspInit+0xa8>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	201c      	movs	r0, #28
 8001c30:	f002 f899 	bl	8003d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c34:	201c      	movs	r0, #28
 8001c36:	f002 f8b2 	bl	8003d9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001c3a:	e02e      	b.n	8001c9a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a19      	ldr	r2, [pc, #100]	; (8001ca8 <HAL_TIM_Base_MspInit+0xac>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d116      	bne.n	8001c74 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	4b16      	ldr	r3, [pc, #88]	; (8001ca4 <HAL_TIM_Base_MspInit+0xa8>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	4a15      	ldr	r2, [pc, #84]	; (8001ca4 <HAL_TIM_Base_MspInit+0xa8>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	6413      	str	r3, [r2, #64]	; 0x40
 8001c56:	4b13      	ldr	r3, [pc, #76]	; (8001ca4 <HAL_TIM_Base_MspInit+0xa8>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5a:	f003 0302 	and.w	r3, r3, #2
 8001c5e:	613b      	str	r3, [r7, #16]
 8001c60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2101      	movs	r1, #1
 8001c66:	201d      	movs	r0, #29
 8001c68:	f002 f87d 	bl	8003d66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c6c:	201d      	movs	r0, #29
 8001c6e:	f002 f896 	bl	8003d9e <HAL_NVIC_EnableIRQ>
}
 8001c72:	e012      	b.n	8001c9a <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM5)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <HAL_TIM_Base_MspInit+0xb0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d10d      	bne.n	8001c9a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
 8001c82:	4b08      	ldr	r3, [pc, #32]	; (8001ca4 <HAL_TIM_Base_MspInit+0xa8>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a07      	ldr	r2, [pc, #28]	; (8001ca4 <HAL_TIM_Base_MspInit+0xa8>)
 8001c88:	f043 0308 	orr.w	r3, r3, #8
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b05      	ldr	r3, [pc, #20]	; (8001ca4 <HAL_TIM_Base_MspInit+0xa8>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 0308 	and.w	r3, r3, #8
 8001c96:	60fb      	str	r3, [r7, #12]
 8001c98:	68fb      	ldr	r3, [r7, #12]
}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	40000400 	.word	0x40000400
 8001cac:	40000c00 	.word	0x40000c00

08001cb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b088      	sub	sp, #32
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 030c 	add.w	r3, r7, #12
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd0:	d11d      	bne.n	8001d0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_TIM_MspPostInit+0x68>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	4a0f      	ldr	r2, [pc, #60]	; (8001d18 <HAL_TIM_MspPostInit+0x68>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ce2:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <HAL_TIM_MspPostInit+0x68>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	60bb      	str	r3, [r7, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5;
 8001cee:	232e      	movs	r3, #46	; 0x2e
 8001cf0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d02:	f107 030c 	add.w	r3, r7, #12
 8001d06:	4619      	mov	r1, r3
 8001d08:	4804      	ldr	r0, [pc, #16]	; (8001d1c <HAL_TIM_MspPostInit+0x6c>)
 8001d0a:	f002 fa49 	bl	80041a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001d0e:	bf00      	nop
 8001d10:	3720      	adds	r7, #32
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40023800 	.word	0x40023800
 8001d1c:	40020000 	.word	0x40020000

08001d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <NMI_Handler+0x4>

08001d26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d2a:	e7fe      	b.n	8001d2a <HardFault_Handler+0x4>

08001d2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d30:	e7fe      	b.n	8001d30 <MemManage_Handler+0x4>

08001d32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d36:	e7fe      	b.n	8001d36 <BusFault_Handler+0x4>

08001d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d3c:	e7fe      	b.n	8001d3c <UsageFault_Handler+0x4>

08001d3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d6c:	f001 faca 	bl	8003304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001d78:	2004      	movs	r0, #4
 8001d7a:	f002 fbf9 	bl	8004570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */
  //if((TIM5->CNT-A_tick)<=20040&&(TIM5->CNT-A_tick)<=19960)

    B_tick=TIM5->CNT;
 8001d7e:	4b03      	ldr	r3, [pc, #12]	; (8001d8c <EXTI2_IRQHandler+0x18>)
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	4a03      	ldr	r2, [pc, #12]	; (8001d90 <EXTI2_IRQHandler+0x1c>)
 8001d84:	6013      	str	r3, [r2, #0]

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40000c00 	.word	0x40000c00
 8001d90:	200005ec 	.word	0x200005ec

08001d94 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001d98:	2010      	movs	r0, #16
 8001d9a:	f002 fbe9 	bl	8004570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  if(Notrig==0)//第一次对�??????????????????//
 8001d9e:	4b4c      	ldr	r3, [pc, #304]	; (8001ed0 <EXTI4_IRQHandler+0x13c>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d110      	bne.n	8001dc8 <EXTI4_IRQHandler+0x34>
  {
    Ala_tick=A_tick;
 8001da6:	4b4b      	ldr	r3, [pc, #300]	; (8001ed4 <EXTI4_IRQHandler+0x140>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a4b      	ldr	r2, [pc, #300]	; (8001ed8 <EXTI4_IRQHandler+0x144>)
 8001dac:	6013      	str	r3, [r2, #0]
    A_tick=TIM5->CNT;
 8001dae:	4b4b      	ldr	r3, [pc, #300]	; (8001edc <EXTI4_IRQHandler+0x148>)
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	4a48      	ldr	r2, [pc, #288]	; (8001ed4 <EXTI4_IRQHandler+0x140>)
 8001db4:	6013      	str	r3, [r2, #0]
    HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001db6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dba:	4849      	ldr	r0, [pc, #292]	; (8001ee0 <EXTI4_IRQHandler+0x14c>)
 8001dbc:	f002 fbbd 	bl	800453a <HAL_GPIO_TogglePin>
    Notrig=1;
 8001dc0:	4b43      	ldr	r3, [pc, #268]	; (8001ed0 <EXTI4_IRQHandler+0x13c>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	701a      	strb	r2, [r3, #0]
  Ala_tick=A_tick;
  A_tick=TIM5->CNT;
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
  }
  /* USER CODE END EXTI4_IRQn 1 */
}
 8001dc6:	e080      	b.n	8001eca <EXTI4_IRQHandler+0x136>
  else if(Trig_Ok==0&&Notrig==2)//下一次重对相//
 8001dc8:	4b46      	ldr	r3, [pc, #280]	; (8001ee4 <EXTI4_IRQHandler+0x150>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d11c      	bne.n	8001e0a <EXTI4_IRQHandler+0x76>
 8001dd0:	4b3f      	ldr	r3, [pc, #252]	; (8001ed0 <EXTI4_IRQHandler+0x13c>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d118      	bne.n	8001e0a <EXTI4_IRQHandler+0x76>
  	if((TIM5->CNT-Retrig_tick)>8000)
 8001dd8:	4b40      	ldr	r3, [pc, #256]	; (8001edc <EXTI4_IRQHandler+0x148>)
 8001dda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ddc:	4b42      	ldr	r3, [pc, #264]	; (8001ee8 <EXTI4_IRQHandler+0x154>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8001de6:	d970      	bls.n	8001eca <EXTI4_IRQHandler+0x136>
  	  Ala_tick=A_tick;
 8001de8:	4b3a      	ldr	r3, [pc, #232]	; (8001ed4 <EXTI4_IRQHandler+0x140>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a3a      	ldr	r2, [pc, #232]	; (8001ed8 <EXTI4_IRQHandler+0x144>)
 8001dee:	6013      	str	r3, [r2, #0]
  	  A_tick=TIM5->CNT;
 8001df0:	4b3a      	ldr	r3, [pc, #232]	; (8001edc <EXTI4_IRQHandler+0x148>)
 8001df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df4:	4a37      	ldr	r2, [pc, #220]	; (8001ed4 <EXTI4_IRQHandler+0x140>)
 8001df6:	6013      	str	r3, [r2, #0]
  	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001df8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dfc:	4838      	ldr	r0, [pc, #224]	; (8001ee0 <EXTI4_IRQHandler+0x14c>)
 8001dfe:	f002 fb9c 	bl	800453a <HAL_GPIO_TogglePin>
  		Notrig=1;
 8001e02:	4b33      	ldr	r3, [pc, #204]	; (8001ed0 <EXTI4_IRQHandler+0x13c>)
 8001e04:	2201      	movs	r2, #1
 8001e06:	701a      	strb	r2, [r3, #0]
  	if((TIM5->CNT-Retrig_tick)>8000)
 8001e08:	e05f      	b.n	8001eca <EXTI4_IRQHandler+0x136>
			((TIM5->CNT-A_tick)>=17500)&&
 8001e0a:	4b34      	ldr	r3, [pc, #208]	; (8001edc <EXTI4_IRQHandler+0x148>)
 8001e0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e0e:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <EXTI4_IRQHandler+0x140>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	1ad3      	subs	r3, r2, r3
	(
 8001e14:	f244 425b 	movw	r2, #17499	; 0x445b
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d956      	bls.n	8001eca <EXTI4_IRQHandler+0x136>
							(((int32_t)((TIM5->CNT-A_tick)%20000)>=0)&&((int32_t)((TIM5->CNT-A_tick)%20000)<=200))
 8001e1c:	4b2f      	ldr	r3, [pc, #188]	; (8001edc <EXTI4_IRQHandler+0x148>)
 8001e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e20:	4b2c      	ldr	r3, [pc, #176]	; (8001ed4 <EXTI4_IRQHandler+0x140>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	1ad2      	subs	r2, r2, r3
 8001e26:	4b31      	ldr	r3, [pc, #196]	; (8001eec <EXTI4_IRQHandler+0x158>)
 8001e28:	fba3 1302 	umull	r1, r3, r3, r2
 8001e2c:	0b9b      	lsrs	r3, r3, #14
 8001e2e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001e32:	fb01 f303 	mul.w	r3, r1, r3
 8001e36:	1ad3      	subs	r3, r2, r3
			((TIM5->CNT-A_tick)>=17500)&&
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db0f      	blt.n	8001e5c <EXTI4_IRQHandler+0xc8>
							(((int32_t)((TIM5->CNT-A_tick)%20000)>=0)&&((int32_t)((TIM5->CNT-A_tick)%20000)<=200))
 8001e3c:	4b27      	ldr	r3, [pc, #156]	; (8001edc <EXTI4_IRQHandler+0x148>)
 8001e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e40:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <EXTI4_IRQHandler+0x140>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	1ad2      	subs	r2, r2, r3
 8001e46:	4b29      	ldr	r3, [pc, #164]	; (8001eec <EXTI4_IRQHandler+0x158>)
 8001e48:	fba3 1302 	umull	r1, r3, r3, r2
 8001e4c:	0b9b      	lsrs	r3, r3, #14
 8001e4e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001e52:	fb01 f303 	mul.w	r3, r1, r3
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2bc8      	cmp	r3, #200	; 0xc8
 8001e5a:	dd25      	ble.n	8001ea8 <EXTI4_IRQHandler+0x114>
							||(((int32_t)((TIM5->CNT-A_tick)%20000)>=19800)&&((int32_t)((TIM5->CNT-A_tick)%20000)<=20000))
 8001e5c:	4b1f      	ldr	r3, [pc, #124]	; (8001edc <EXTI4_IRQHandler+0x148>)
 8001e5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e60:	4b1c      	ldr	r3, [pc, #112]	; (8001ed4 <EXTI4_IRQHandler+0x140>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	1ad2      	subs	r2, r2, r3
 8001e66:	4b21      	ldr	r3, [pc, #132]	; (8001eec <EXTI4_IRQHandler+0x158>)
 8001e68:	fba3 1302 	umull	r1, r3, r3, r2
 8001e6c:	0b9b      	lsrs	r3, r3, #14
 8001e6e:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001e72:	fb01 f303 	mul.w	r3, r1, r3
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f644 5357 	movw	r3, #19799	; 0x4d57
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	dd23      	ble.n	8001eca <EXTI4_IRQHandler+0x136>
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <EXTI4_IRQHandler+0x148>)
 8001e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e86:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <EXTI4_IRQHandler+0x140>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	1ad2      	subs	r2, r2, r3
 8001e8c:	4b17      	ldr	r3, [pc, #92]	; (8001eec <EXTI4_IRQHandler+0x158>)
 8001e8e:	fba3 1302 	umull	r1, r3, r3, r2
 8001e92:	0b9b      	lsrs	r3, r3, #14
 8001e94:	f644 6120 	movw	r1, #20000	; 0x4e20
 8001e98:	fb01 f303 	mul.w	r3, r1, r3
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dc10      	bgt.n	8001eca <EXTI4_IRQHandler+0x136>
  	trigon=1;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	; (8001ef0 <EXTI4_IRQHandler+0x15c>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	701a      	strb	r2, [r3, #0]
  Ala_tick=A_tick;
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <EXTI4_IRQHandler+0x140>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a09      	ldr	r2, [pc, #36]	; (8001ed8 <EXTI4_IRQHandler+0x144>)
 8001eb4:	6013      	str	r3, [r2, #0]
  A_tick=TIM5->CNT;
 8001eb6:	4b09      	ldr	r3, [pc, #36]	; (8001edc <EXTI4_IRQHandler+0x148>)
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	4a06      	ldr	r2, [pc, #24]	; (8001ed4 <EXTI4_IRQHandler+0x140>)
 8001ebc:	6013      	str	r3, [r2, #0]
  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001ebe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ec2:	4807      	ldr	r0, [pc, #28]	; (8001ee0 <EXTI4_IRQHandler+0x14c>)
 8001ec4:	f002 fb39 	bl	800453a <HAL_GPIO_TogglePin>
}
 8001ec8:	e7ff      	b.n	8001eca <EXTI4_IRQHandler+0x136>
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000218 	.word	0x20000218
 8001ed4:	200005e8 	.word	0x200005e8
 8001ed8:	200005e0 	.word	0x200005e0
 8001edc:	40000c00 	.word	0x40000c00
 8001ee0:	40021800 	.word	0x40021800
 8001ee4:	20000219 	.word	0x20000219
 8001ee8:	200005d4 	.word	0x200005d4
 8001eec:	d1b71759 	.word	0xd1b71759
 8001ef0:	2000021a 	.word	0x2000021a

08001ef4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ef4:	b5b0      	push	{r4, r5, r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ef8:	4823      	ldr	r0, [pc, #140]	; (8001f88 <TIM2_IRQHandler+0x94>)
 8001efa:	f004 fad5 	bl	80064a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  COSNum++;//波表加一//
 8001efe:	4b23      	ldr	r3, [pc, #140]	; (8001f8c <TIM2_IRQHandler+0x98>)
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	3301      	adds	r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	4b21      	ldr	r3, [pc, #132]	; (8001f8c <TIM2_IRQHandler+0x98>)
 8001f08:	801a      	strh	r2, [r3, #0]

  if (COSNum==600)
 8001f0a:	4b20      	ldr	r3, [pc, #128]	; (8001f8c <TIM2_IRQHandler+0x98>)
 8001f0c:	881b      	ldrh	r3, [r3, #0]
 8001f0e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001f12:	d102      	bne.n	8001f1a <TIM2_IRQHandler+0x26>
  {
  	COSNum=0;
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <TIM2_IRQHandler+0x98>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	801a      	strh	r2, [r3, #0]
	}//波表清零//

  if (COSCom2_Num==600)
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <TIM2_IRQHandler+0x9c>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001f22:	d102      	bne.n	8001f2a <TIM2_IRQHandler+0x36>
  {
  	COSCom2_Num=0;
 8001f24:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <TIM2_IRQHandler+0x9c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	801a      	strh	r2, [r3, #0]
	}//波表清零//

  if(COSNum+COSCom2_plus>=600)
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <TIM2_IRQHandler+0x98>)
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <TIM2_IRQHandler+0xa0>)
 8001f32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f36:	4413      	add	r3, r2
 8001f38:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001f3c:	db0d      	blt.n	8001f5a <TIM2_IRQHandler+0x66>
  {
  	COSCom2_Num=COSNum+COSCom2_plus-600;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <TIM2_IRQHandler+0x98>)
 8001f40:	881a      	ldrh	r2, [r3, #0]
 8001f42:	4b14      	ldr	r3, [pc, #80]	; (8001f94 <TIM2_IRQHandler+0xa0>)
 8001f44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <TIM2_IRQHandler+0x9c>)
 8001f56:	801a      	strh	r2, [r3, #0]
 8001f58:	e028      	b.n	8001fac <TIM2_IRQHandler+0xb8>
  }
  else if(COSNum+COSCom2_plus<0)
 8001f5a:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <TIM2_IRQHandler+0x98>)
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <TIM2_IRQHandler+0xa0>)
 8001f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f66:	4413      	add	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	da15      	bge.n	8001f98 <TIM2_IRQHandler+0xa4>
  {
  	COSCom2_Num=600+COSNum+COSCom2_plus;
 8001f6c:	4b07      	ldr	r3, [pc, #28]	; (8001f8c <TIM2_IRQHandler+0x98>)
 8001f6e:	881a      	ldrh	r2, [r3, #0]
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <TIM2_IRQHandler+0xa0>)
 8001f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	4413      	add	r3, r2
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	4b03      	ldr	r3, [pc, #12]	; (8001f90 <TIM2_IRQHandler+0x9c>)
 8001f84:	801a      	strh	r2, [r3, #0]
 8001f86:	e011      	b.n	8001fac <TIM2_IRQHandler+0xb8>
 8001f88:	20000554 	.word	0x20000554
 8001f8c:	2000021c 	.word	0x2000021c
 8001f90:	200005d0 	.word	0x200005d0
 8001f94:	20000002 	.word	0x20000002
  }
  else
  {
  	COSCom2_Num=COSNum+COSCom2_plus;
 8001f98:	4ba8      	ldr	r3, [pc, #672]	; (800223c <TIM2_IRQHandler+0x348>)
 8001f9a:	881a      	ldrh	r2, [r3, #0]
 8001f9c:	4ba8      	ldr	r3, [pc, #672]	; (8002240 <TIM2_IRQHandler+0x34c>)
 8001f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	4ba6      	ldr	r3, [pc, #664]	; (8002244 <TIM2_IRQHandler+0x350>)
 8001faa:	801a      	strh	r2, [r3, #0]
  }

  TIM2->CCR2=(COSA[COSNum]*COSNul-COSS[COSNum]*COSCom-COSS2[COSCom2_Num]*COSCom2+1.0)*(TIM2->ARR-1)/2.0;//超前 Pa1//PF4//
 8001fac:	4ba3      	ldr	r3, [pc, #652]	; (800223c <TIM2_IRQHandler+0x348>)
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	4aa5      	ldr	r2, [pc, #660]	; (8002248 <TIM2_IRQHandler+0x354>)
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	4413      	add	r3, r2
 8001fb6:	ed93 7a00 	vldr	s14, [r3]
 8001fba:	4ba4      	ldr	r3, [pc, #656]	; (800224c <TIM2_IRQHandler+0x358>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fc4:	4b9d      	ldr	r3, [pc, #628]	; (800223c <TIM2_IRQHandler+0x348>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	4aa1      	ldr	r2, [pc, #644]	; (8002250 <TIM2_IRQHandler+0x35c>)
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	edd3 6a00 	vldr	s13, [r3]
 8001fd2:	4ba0      	ldr	r3, [pc, #640]	; (8002254 <TIM2_IRQHandler+0x360>)
 8001fd4:	edd3 7a00 	vldr	s15, [r3]
 8001fd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fe0:	4b98      	ldr	r3, [pc, #608]	; (8002244 <TIM2_IRQHandler+0x350>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	4a9c      	ldr	r2, [pc, #624]	; (8002258 <TIM2_IRQHandler+0x364>)
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	edd3 6a00 	vldr	s13, [r3]
 8001fee:	4b9b      	ldr	r3, [pc, #620]	; (800225c <TIM2_IRQHandler+0x368>)
 8001ff0:	edd3 7a00 	vldr	s15, [r3]
 8001ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffc:	ee17 0a90 	vmov	r0, s15
 8002000:	f7fe faa2 	bl	8000548 <__aeabi_f2d>
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	4b95      	ldr	r3, [pc, #596]	; (8002260 <TIM2_IRQHandler+0x36c>)
 800200a:	f7fe f93f 	bl	800028c <__adddf3>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	4614      	mov	r4, r2
 8002014:	461d      	mov	r5, r3
 8002016:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800201a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201c:	3b01      	subs	r3, #1
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fa70 	bl	8000504 <__aeabi_ui2d>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4620      	mov	r0, r4
 800202a:	4629      	mov	r1, r5
 800202c:	f7fe fae4 	bl	80005f8 <__aeabi_dmul>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002040:	f7fe fc04 	bl	800084c <__aeabi_ddiv>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	f7fe fdaa 	bl	8000ba8 <__aeabi_d2uiz>
 8002054:	4603      	mov	r3, r0
 8002056:	63a3      	str	r3, [r4, #56]	; 0x38
  TIM2->CCR4=(COSB[COSNum]*COSNul-COSS[COSNum]*COSCom-COSS2[COSCom2_Num]*COSCom2+1.0)*(TIM2->ARR-1)/2.0;//正确 pa3//PF6//
 8002058:	4b78      	ldr	r3, [pc, #480]	; (800223c <TIM2_IRQHandler+0x348>)
 800205a:	881b      	ldrh	r3, [r3, #0]
 800205c:	4a81      	ldr	r2, [pc, #516]	; (8002264 <TIM2_IRQHandler+0x370>)
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	ed93 7a00 	vldr	s14, [r3]
 8002066:	4b79      	ldr	r3, [pc, #484]	; (800224c <TIM2_IRQHandler+0x358>)
 8002068:	edd3 7a00 	vldr	s15, [r3]
 800206c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002070:	4b72      	ldr	r3, [pc, #456]	; (800223c <TIM2_IRQHandler+0x348>)
 8002072:	881b      	ldrh	r3, [r3, #0]
 8002074:	4a76      	ldr	r2, [pc, #472]	; (8002250 <TIM2_IRQHandler+0x35c>)
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	4413      	add	r3, r2
 800207a:	edd3 6a00 	vldr	s13, [r3]
 800207e:	4b75      	ldr	r3, [pc, #468]	; (8002254 <TIM2_IRQHandler+0x360>)
 8002080:	edd3 7a00 	vldr	s15, [r3]
 8002084:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002088:	ee37 7a67 	vsub.f32	s14, s14, s15
 800208c:	4b6d      	ldr	r3, [pc, #436]	; (8002244 <TIM2_IRQHandler+0x350>)
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	4a71      	ldr	r2, [pc, #452]	; (8002258 <TIM2_IRQHandler+0x364>)
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	edd3 6a00 	vldr	s13, [r3]
 800209a:	4b70      	ldr	r3, [pc, #448]	; (800225c <TIM2_IRQHandler+0x368>)
 800209c:	edd3 7a00 	vldr	s15, [r3]
 80020a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020a8:	ee17 0a90 	vmov	r0, s15
 80020ac:	f7fe fa4c 	bl	8000548 <__aeabi_f2d>
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	4b6a      	ldr	r3, [pc, #424]	; (8002260 <TIM2_IRQHandler+0x36c>)
 80020b6:	f7fe f8e9 	bl	800028c <__adddf3>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4614      	mov	r4, r2
 80020c0:	461d      	mov	r5, r3
 80020c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c8:	3b01      	subs	r3, #1
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe fa1a 	bl	8000504 <__aeabi_ui2d>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4620      	mov	r0, r4
 80020d6:	4629      	mov	r1, r5
 80020d8:	f7fe fa8e 	bl	80005f8 <__aeabi_dmul>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	4610      	mov	r0, r2
 80020e2:	4619      	mov	r1, r3
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020ec:	f7fe fbae 	bl	800084c <__aeabi_ddiv>
 80020f0:	4602      	mov	r2, r0
 80020f2:	460b      	mov	r3, r1
 80020f4:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	f7fe fd54 	bl	8000ba8 <__aeabi_d2uiz>
 8002100:	4603      	mov	r3, r0
 8002102:	6423      	str	r3, [r4, #64]	; 0x40
  TIM2->CCR1=(COSC[COSNum]*COSNul-COSS[COSNum]*COSCom-COSS2[COSCom2_Num]*COSCom2+1.0)*(TIM2->ARR-1)/2.0;//滞后 pa5//PF8//
 8002104:	4b4d      	ldr	r3, [pc, #308]	; (800223c <TIM2_IRQHandler+0x348>)
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	4a57      	ldr	r2, [pc, #348]	; (8002268 <TIM2_IRQHandler+0x374>)
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	4413      	add	r3, r2
 800210e:	ed93 7a00 	vldr	s14, [r3]
 8002112:	4b4e      	ldr	r3, [pc, #312]	; (800224c <TIM2_IRQHandler+0x358>)
 8002114:	edd3 7a00 	vldr	s15, [r3]
 8002118:	ee27 7a27 	vmul.f32	s14, s14, s15
 800211c:	4b47      	ldr	r3, [pc, #284]	; (800223c <TIM2_IRQHandler+0x348>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	4a4b      	ldr	r2, [pc, #300]	; (8002250 <TIM2_IRQHandler+0x35c>)
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	edd3 6a00 	vldr	s13, [r3]
 800212a:	4b4a      	ldr	r3, [pc, #296]	; (8002254 <TIM2_IRQHandler+0x360>)
 800212c:	edd3 7a00 	vldr	s15, [r3]
 8002130:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002134:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002138:	4b42      	ldr	r3, [pc, #264]	; (8002244 <TIM2_IRQHandler+0x350>)
 800213a:	881b      	ldrh	r3, [r3, #0]
 800213c:	4a46      	ldr	r2, [pc, #280]	; (8002258 <TIM2_IRQHandler+0x364>)
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4413      	add	r3, r2
 8002142:	edd3 6a00 	vldr	s13, [r3]
 8002146:	4b45      	ldr	r3, [pc, #276]	; (800225c <TIM2_IRQHandler+0x368>)
 8002148:	edd3 7a00 	vldr	s15, [r3]
 800214c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002150:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002154:	ee17 0a90 	vmov	r0, s15
 8002158:	f7fe f9f6 	bl	8000548 <__aeabi_f2d>
 800215c:	f04f 0200 	mov.w	r2, #0
 8002160:	4b3f      	ldr	r3, [pc, #252]	; (8002260 <TIM2_IRQHandler+0x36c>)
 8002162:	f7fe f893 	bl	800028c <__adddf3>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4614      	mov	r4, r2
 800216c:	461d      	mov	r5, r3
 800216e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	3b01      	subs	r3, #1
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f9c4 	bl	8000504 <__aeabi_ui2d>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4620      	mov	r0, r4
 8002182:	4629      	mov	r1, r5
 8002184:	f7fe fa38 	bl	80005f8 <__aeabi_dmul>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	4610      	mov	r0, r2
 800218e:	4619      	mov	r1, r3
 8002190:	f04f 0200 	mov.w	r2, #0
 8002194:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002198:	f7fe fb58 	bl	800084c <__aeabi_ddiv>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80021a4:	4610      	mov	r0, r2
 80021a6:	4619      	mov	r1, r3
 80021a8:	f7fe fcfe 	bl	8000ba8 <__aeabi_d2uiz>
 80021ac:	4603      	mov	r3, r0
 80021ae:	6363      	str	r3, [r4, #52]	; 0x34





  if (((TIM5->CNT-A_tick)>=PHASE[0])&&trigon==1)
 80021b0:	4b2e      	ldr	r3, [pc, #184]	; (800226c <TIM2_IRQHandler+0x378>)
 80021b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021b4:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <TIM2_IRQHandler+0x37c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	4a2e      	ldr	r2, [pc, #184]	; (8002274 <TIM2_IRQHandler+0x380>)
 80021bc:	f9b2 2000 	ldrsh.w	r2, [r2]
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d309      	bcc.n	80021d8 <TIM2_IRQHandler+0x2e4>
 80021c4:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <TIM2_IRQHandler+0x384>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d105      	bne.n	80021d8 <TIM2_IRQHandler+0x2e4>
  {
  	trigon=0;
 80021cc:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <TIM2_IRQHandler+0x384>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	701a      	strb	r2, [r3, #0]
  	COSNum=0;
 80021d2:	4b1a      	ldr	r3, [pc, #104]	; (800223c <TIM2_IRQHandler+0x348>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	801a      	strh	r2, [r3, #0]
	}//波表清零//

  if(Trig_Ok==0)//判断是否正确触发//
 80021d8:	4b28      	ldr	r3, [pc, #160]	; (800227c <TIM2_IRQHandler+0x388>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d11f      	bne.n	8002220 <TIM2_IRQHandler+0x32c>
  {
    if((TIM5->CNT-A_tick)>17400&&(TIM5->CNT-A_tick)<17600)
 80021e0:	4b22      	ldr	r3, [pc, #136]	; (800226c <TIM2_IRQHandler+0x378>)
 80021e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e4:	4b22      	ldr	r3, [pc, #136]	; (8002270 <TIM2_IRQHandler+0x37c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	f244 32f8 	movw	r2, #17400	; 0x43f8
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d916      	bls.n	8002220 <TIM2_IRQHandler+0x32c>
 80021f2:	4b1e      	ldr	r3, [pc, #120]	; (800226c <TIM2_IRQHandler+0x378>)
 80021f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021f6:	4b1e      	ldr	r3, [pc, #120]	; (8002270 <TIM2_IRQHandler+0x37c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f244 42bf 	movw	r2, #17599	; 0x44bf
 8002200:	4293      	cmp	r3, r2
 8002202:	d80d      	bhi.n	8002220 <TIM2_IRQHandler+0x32c>
    {
    	if(HAL_GPIO_ReadPin(Trig1_GPIO_Port, Trig1_Pin)==1)
 8002204:	2110      	movs	r1, #16
 8002206:	481e      	ldr	r0, [pc, #120]	; (8002280 <TIM2_IRQHandler+0x38c>)
 8002208:	f002 f966 	bl	80044d8 <HAL_GPIO_ReadPin>
 800220c:	4603      	mov	r3, r0
 800220e:	2b01      	cmp	r3, #1
 8002210:	d106      	bne.n	8002220 <TIM2_IRQHandler+0x32c>
    	{
    		Notrig=2;
 8002212:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <TIM2_IRQHandler+0x390>)
 8002214:	2202      	movs	r2, #2
 8002216:	701a      	strb	r2, [r3, #0]
    		Retrig_tick=TIM5->CNT;
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <TIM2_IRQHandler+0x378>)
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	4a1a      	ldr	r2, [pc, #104]	; (8002288 <TIM2_IRQHandler+0x394>)
 800221e:	6013      	str	r3, [r2, #0]
    	}
    }
  }
  if((TIM5->CNT-A_tick)>20000*3)
 8002220:	4b12      	ldr	r3, [pc, #72]	; (800226c <TIM2_IRQHandler+0x378>)
 8002222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <TIM2_IRQHandler+0x37c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800222e:	4293      	cmp	r3, r2
 8002230:	d902      	bls.n	8002238 <TIM2_IRQHandler+0x344>
  {
  	Notrig=0;
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <TIM2_IRQHandler+0x390>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8002238:	bf00      	nop
 800223a:	bdb0      	pop	{r4, r5, r7, pc}
 800223c:	2000021c 	.word	0x2000021c
 8002240:	20000002 	.word	0x20000002
 8002244:	200005d0 	.word	0x200005d0
 8002248:	0800ba70 	.word	0x0800ba70
 800224c:	20000220 	.word	0x20000220
 8002250:	0800d690 	.word	0x0800d690
 8002254:	20000224 	.word	0x20000224
 8002258:	0800dff0 	.word	0x0800dff0
 800225c:	20000004 	.word	0x20000004
 8002260:	3ff00000 	.word	0x3ff00000
 8002264:	0800c3d0 	.word	0x0800c3d0
 8002268:	0800cd30 	.word	0x0800cd30
 800226c:	40000c00 	.word	0x40000c00
 8002270:	200005e8 	.word	0x200005e8
 8002274:	20000008 	.word	0x20000008
 8002278:	2000021a 	.word	0x2000021a
 800227c:	20000219 	.word	0x20000219
 8002280:	40021000 	.word	0x40021000
 8002284:	20000218 	.word	0x20000218
 8002288:	200005d4 	.word	0x200005d4
 800228c:	00000000 	.word	0x00000000

08002290 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002296:	48ae      	ldr	r0, [pc, #696]	; (8002550 <TIM3_IRQHandler+0x2c0>)
 8002298:	f004 f906 	bl	80064a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  DC_VReal=0;
 800229c:	49ad      	ldr	r1, [pc, #692]	; (8002554 <TIM3_IRQHandler+0x2c4>)
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	e9c1 2300 	strd	r2, r3, [r1]

	for (int var = 0; var < 10; ++var) {
 80022aa:	2300      	movs	r3, #0
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	e038      	b.n	8002322 <TIM3_IRQHandler+0x92>
		DC_VReal+=1.2*((ADC_Value3[var])*1.0/(ADC_Value1[var])*1.0)*15.0;//缩小倍数
 80022b0:	4aa9      	ldr	r2, [pc, #676]	; (8002558 <TIM3_IRQHandler+0x2c8>)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe f923 	bl	8000504 <__aeabi_ui2d>
 80022be:	4604      	mov	r4, r0
 80022c0:	460d      	mov	r5, r1
 80022c2:	4aa6      	ldr	r2, [pc, #664]	; (800255c <TIM3_IRQHandler+0x2cc>)
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fe f91a 	bl	8000504 <__aeabi_ui2d>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4620      	mov	r0, r4
 80022d6:	4629      	mov	r1, r5
 80022d8:	f7fe fab8 	bl	800084c <__aeabi_ddiv>
 80022dc:	4602      	mov	r2, r0
 80022de:	460b      	mov	r3, r1
 80022e0:	4610      	mov	r0, r2
 80022e2:	4619      	mov	r1, r3
 80022e4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80022e8:	4b9d      	ldr	r3, [pc, #628]	; (8002560 <TIM3_IRQHandler+0x2d0>)
 80022ea:	f7fe f985 	bl	80005f8 <__aeabi_dmul>
 80022ee:	4602      	mov	r2, r0
 80022f0:	460b      	mov	r3, r1
 80022f2:	4610      	mov	r0, r2
 80022f4:	4619      	mov	r1, r3
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	4b9a      	ldr	r3, [pc, #616]	; (8002564 <TIM3_IRQHandler+0x2d4>)
 80022fc:	f7fe f97c 	bl	80005f8 <__aeabi_dmul>
 8002300:	4602      	mov	r2, r0
 8002302:	460b      	mov	r3, r1
 8002304:	4610      	mov	r0, r2
 8002306:	4619      	mov	r1, r3
 8002308:	4b92      	ldr	r3, [pc, #584]	; (8002554 <TIM3_IRQHandler+0x2c4>)
 800230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230e:	f7fd ffbd 	bl	800028c <__adddf3>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	498f      	ldr	r1, [pc, #572]	; (8002554 <TIM3_IRQHandler+0x2c4>)
 8002318:	e9c1 2300 	strd	r2, r3, [r1]
	for (int var = 0; var < 10; ++var) {
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3301      	adds	r3, #1
 8002320:	60fb      	str	r3, [r7, #12]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2b09      	cmp	r3, #9
 8002326:	ddc3      	ble.n	80022b0 <TIM3_IRQHandler+0x20>
	}
	DC_VReal/=10;
 8002328:	4b8a      	ldr	r3, [pc, #552]	; (8002554 <TIM3_IRQHandler+0x2c4>)
 800232a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	4b8d      	ldr	r3, [pc, #564]	; (8002568 <TIM3_IRQHandler+0x2d8>)
 8002334:	f7fe fa8a 	bl	800084c <__aeabi_ddiv>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4985      	ldr	r1, [pc, #532]	; (8002554 <TIM3_IRQHandler+0x2c4>)
 800233e:	e9c1 2300 	strd	r2, r3, [r1]

		switch (Mode) {
 8002342:	4b8a      	ldr	r3, [pc, #552]	; (800256c <TIM3_IRQHandler+0x2dc>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d002      	beq.n	8002350 <TIM3_IRQHandler+0xc0>
 800234a:	2b01      	cmp	r3, #1
 800234c:	d03c      	beq.n	80023c8 <TIM3_IRQHandler+0x138>
    			TIM2->CCR3 = PWM;
    		}
    		break;
			}
			default:
				break;
 800234e:	e17a      	b.n	8002646 <TIM3_IRQHandler+0x3b6>
				if((A_tick-B_tick)>3300)//测量相序//
 8002350:	4b87      	ldr	r3, [pc, #540]	; (8002570 <TIM3_IRQHandler+0x2e0>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b87      	ldr	r3, [pc, #540]	; (8002574 <TIM3_IRQHandler+0x2e4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	f640 42e4 	movw	r2, #3300	; 0xce4
 800235e:	4293      	cmp	r3, r2
 8002360:	d902      	bls.n	8002368 <TIM3_IRQHandler+0xd8>
					PHASE_Order=0;
 8002362:	4b85      	ldr	r3, [pc, #532]	; (8002578 <TIM3_IRQHandler+0x2e8>)
 8002364:	2200      	movs	r2, #0
 8002366:	801a      	strh	r2, [r3, #0]
				if((A_tick-B_tick)<-3300)
 8002368:	4b81      	ldr	r3, [pc, #516]	; (8002570 <TIM3_IRQHandler+0x2e0>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	4b81      	ldr	r3, [pc, #516]	; (8002574 <TIM3_IRQHandler+0x2e4>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	4a82      	ldr	r2, [pc, #520]	; (800257c <TIM3_IRQHandler+0x2ec>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d802      	bhi.n	800237e <TIM3_IRQHandler+0xee>
					PHASE_Order=1;
 8002378:	4b7f      	ldr	r3, [pc, #508]	; (8002578 <TIM3_IRQHandler+0x2e8>)
 800237a:	2201      	movs	r2, #1
 800237c:	801a      	strh	r2, [r3, #0]
				if(COSNul<=0.85)//逐步加到90%//
 800237e:	4b80      	ldr	r3, [pc, #512]	; (8002580 <TIM3_IRQHandler+0x2f0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe f8e0 	bl	8000548 <__aeabi_f2d>
 8002388:	a36b      	add	r3, pc, #428	; (adr r3, 8002538 <TIM3_IRQHandler+0x2a8>)
 800238a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238e:	f7fe fbaf 	bl	8000af0 <__aeabi_dcmple>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d013      	beq.n	80023c0 <TIM3_IRQHandler+0x130>
					COSNul+=0.01;
 8002398:	4b79      	ldr	r3, [pc, #484]	; (8002580 <TIM3_IRQHandler+0x2f0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f8d3 	bl	8000548 <__aeabi_f2d>
 80023a2:	a367      	add	r3, pc, #412	; (adr r3, 8002540 <TIM3_IRQHandler+0x2b0>)
 80023a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a8:	f7fd ff70 	bl	800028c <__adddf3>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	f7fe fc18 	bl	8000be8 <__aeabi_d2f>
 80023b8:	4603      	mov	r3, r0
 80023ba:	4a71      	ldr	r2, [pc, #452]	; (8002580 <TIM3_IRQHandler+0x2f0>)
 80023bc:	6013      	str	r3, [r2, #0]
				break;
 80023be:	e142      	b.n	8002646 <TIM3_IRQHandler+0x3b6>
					Mode=1;
 80023c0:	4b6a      	ldr	r3, [pc, #424]	; (800256c <TIM3_IRQHandler+0x2dc>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	701a      	strb	r2, [r3, #0]
				break;
 80023c6:	e13e      	b.n	8002646 <TIM3_IRQHandler+0x3b6>
    		DCpid_error = DC_VSet - DC_VReal;
 80023c8:	4b6e      	ldr	r3, [pc, #440]	; (8002584 <TIM3_IRQHandler+0x2f4>)
 80023ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023ce:	4b61      	ldr	r3, [pc, #388]	; (8002554 <TIM3_IRQHandler+0x2c4>)
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f7fd ff58 	bl	8000288 <__aeabi_dsub>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	496a      	ldr	r1, [pc, #424]	; (8002588 <TIM3_IRQHandler+0x2f8>)
 80023de:	e9c1 2300 	strd	r2, r3, [r1]
    		PWM += arm_pid_f32(&DCPID, DCpid_error);
 80023e2:	4b69      	ldr	r3, [pc, #420]	; (8002588 <TIM3_IRQHandler+0x2f8>)
 80023e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	f7fe fbfc 	bl	8000be8 <__aeabi_d2f>
 80023f0:	4603      	mov	r3, r0
 80023f2:	4a66      	ldr	r2, [pc, #408]	; (800258c <TIM3_IRQHandler+0x2fc>)
 80023f4:	60ba      	str	r2, [r7, #8]
 80023f6:	607b      	str	r3, [r7, #4]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	ed93 7a00 	vldr	s14, [r3]
 80023fe:	edd7 7a01 	vldr	s15, [r7, #4]
 8002402:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	edd3 6a01 	vldr	s13, [r3, #4]
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002412:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8002416:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	edd3 7a04 	vldr	s15, [r3, #16]
 8002426:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800242a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8002434:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002438:	edc7 7a00 	vstr	s15, [r7]

    //限制增长
    if(out>100)
 800243c:	edd7 7a00 	vldr	s15, [r7]
 8002440:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8002590 <TIM3_IRQHandler+0x300>
 8002444:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800244c:	dd02      	ble.n	8002454 <TIM3_IRQHandler+0x1c4>
    {
    	out=100;
 800244e:	4b51      	ldr	r3, [pc, #324]	; (8002594 <TIM3_IRQHandler+0x304>)
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	e00a      	b.n	800246a <TIM3_IRQHandler+0x1da>
    }
    else if(out<-100)
 8002454:	edd7 7a00 	vldr	s15, [r7]
 8002458:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002598 <TIM3_IRQHandler+0x308>
 800245c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002464:	d501      	bpl.n	800246a <TIM3_IRQHandler+0x1da>
    {
    	out=-100;
 8002466:	4b4d      	ldr	r3, [pc, #308]	; (800259c <TIM3_IRQHandler+0x30c>)
 8002468:	603b      	str	r3, [r7, #0]
    }

    /* Update state */
    S->state[1] = S->state[0];
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 800247e:	ed97 7a00 	vldr	s14, [r7]
 8002482:	4b47      	ldr	r3, [pc, #284]	; (80025a0 <TIM3_IRQHandler+0x310>)
 8002484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002488:	ee07 3a90 	vmov	s15, r3
 800248c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002498:	ee17 3a90 	vmov	r3, s15
 800249c:	b21a      	sxth	r2, r3
 800249e:	4b40      	ldr	r3, [pc, #256]	; (80025a0 <TIM3_IRQHandler+0x310>)
 80024a0:	801a      	strh	r2, [r3, #0]
    		if(PWM>((TIM2->ARR-1))*0.95)
 80024a2:	4b3f      	ldr	r3, [pc, #252]	; (80025a0 <TIM3_IRQHandler+0x310>)
 80024a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe f83b 	bl	8000524 <__aeabi_i2d>
 80024ae:	4604      	mov	r4, r0
 80024b0:	460d      	mov	r5, r1
 80024b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b8:	3b01      	subs	r3, #1
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe f822 	bl	8000504 <__aeabi_ui2d>
 80024c0:	a321      	add	r3, pc, #132	; (adr r3, 8002548 <TIM3_IRQHandler+0x2b8>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	f7fe f897 	bl	80005f8 <__aeabi_dmul>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4620      	mov	r0, r4
 80024d0:	4629      	mov	r1, r5
 80024d2:	f7fe fb21 	bl	8000b18 <__aeabi_dcmpgt>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d063      	beq.n	80025a4 <TIM3_IRQHandler+0x314>
    			PWM=(TIM2->ARR-1)*0.95;
 80024dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	3b01      	subs	r3, #1
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fe f80d 	bl	8000504 <__aeabi_ui2d>
 80024ea:	a317      	add	r3, pc, #92	; (adr r3, 8002548 <TIM3_IRQHandler+0x2b8>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	f7fe f882 	bl	80005f8 <__aeabi_dmul>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4610      	mov	r0, r2
 80024fa:	4619      	mov	r1, r3
 80024fc:	f7fe fb2c 	bl	8000b58 <__aeabi_d2iz>
 8002500:	4603      	mov	r3, r0
 8002502:	b21a      	sxth	r2, r3
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <TIM3_IRQHandler+0x310>)
 8002506:	801a      	strh	r2, [r3, #0]
    			TIM2->CCR3 = (TIM2->ARR-1)*0.95;
 8002508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800250c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250e:	3b01      	subs	r3, #1
 8002510:	4618      	mov	r0, r3
 8002512:	f7fd fff7 	bl	8000504 <__aeabi_ui2d>
 8002516:	a30c      	add	r3, pc, #48	; (adr r3, 8002548 <TIM3_IRQHandler+0x2b8>)
 8002518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251c:	f7fe f86c 	bl	80005f8 <__aeabi_dmul>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002528:	4610      	mov	r0, r2
 800252a:	4619      	mov	r1, r3
 800252c:	f7fe fb3c 	bl	8000ba8 <__aeabi_d2uiz>
 8002530:	4603      	mov	r3, r0
 8002532:	63e3      	str	r3, [r4, #60]	; 0x3c
    		break;
 8002534:	e086      	b.n	8002644 <TIM3_IRQHandler+0x3b4>
 8002536:	bf00      	nop
 8002538:	33333333 	.word	0x33333333
 800253c:	3feb3333 	.word	0x3feb3333
 8002540:	47ae147b 	.word	0x47ae147b
 8002544:	3f847ae1 	.word	0x3f847ae1
 8002548:	66666666 	.word	0x66666666
 800254c:	3fee6666 	.word	0x3fee6666
 8002550:	200003b8 	.word	0x200003b8
 8002554:	200005c8 	.word	0x200005c8
 8002558:	200002e8 	.word	0x200002e8
 800255c:	2000052c 	.word	0x2000052c
 8002560:	3ff33333 	.word	0x3ff33333
 8002564:	402e0000 	.word	0x402e0000
 8002568:	40240000 	.word	0x40240000
 800256c:	20000214 	.word	0x20000214
 8002570:	200005e8 	.word	0x200005e8
 8002574:	200005ec 	.word	0x200005ec
 8002578:	20000216 	.word	0x20000216
 800257c:	fffff31b 	.word	0xfffff31b
 8002580:	20000220 	.word	0x20000220
 8002584:	20000010 	.word	0x20000010
 8002588:	200005d8 	.word	0x200005d8
 800258c:	20000248 	.word	0x20000248
 8002590:	42c80000 	.word	0x42c80000
 8002594:	42c80000 	.word	0x42c80000
 8002598:	c2c80000 	.word	0xc2c80000
 800259c:	c2c80000 	.word	0xc2c80000
 80025a0:	20000000 	.word	0x20000000
    		else if(PWM<(TIM2->ARR-1)*0.1)
 80025a4:	4b2c      	ldr	r3, [pc, #176]	; (8002658 <TIM3_IRQHandler+0x3c8>)
 80025a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fd ffba 	bl	8000524 <__aeabi_i2d>
 80025b0:	4604      	mov	r4, r0
 80025b2:	460d      	mov	r5, r1
 80025b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ba:	3b01      	subs	r3, #1
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd ffa1 	bl	8000504 <__aeabi_ui2d>
 80025c2:	a323      	add	r3, pc, #140	; (adr r3, 8002650 <TIM3_IRQHandler+0x3c0>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	f7fe f816 	bl	80005f8 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4620      	mov	r0, r4
 80025d2:	4629      	mov	r1, r5
 80025d4:	f7fe fa82 	bl	8000adc <__aeabi_dcmplt>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d02c      	beq.n	8002638 <TIM3_IRQHandler+0x3a8>
    			PWM=(TIM2->ARR-1)*0.1;
 80025de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	3b01      	subs	r3, #1
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ff8c 	bl	8000504 <__aeabi_ui2d>
 80025ec:	a318      	add	r3, pc, #96	; (adr r3, 8002650 <TIM3_IRQHandler+0x3c0>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fe f801 	bl	80005f8 <__aeabi_dmul>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4610      	mov	r0, r2
 80025fc:	4619      	mov	r1, r3
 80025fe:	f7fe faab 	bl	8000b58 <__aeabi_d2iz>
 8002602:	4603      	mov	r3, r0
 8002604:	b21a      	sxth	r2, r3
 8002606:	4b14      	ldr	r3, [pc, #80]	; (8002658 <TIM3_IRQHandler+0x3c8>)
 8002608:	801a      	strh	r2, [r3, #0]
    			TIM2->CCR3 = (TIM2->ARR-1)*0.1;
 800260a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800260e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002610:	3b01      	subs	r3, #1
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd ff76 	bl	8000504 <__aeabi_ui2d>
 8002618:	a30d      	add	r3, pc, #52	; (adr r3, 8002650 <TIM3_IRQHandler+0x3c0>)
 800261a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800261e:	f7fd ffeb 	bl	80005f8 <__aeabi_dmul>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800262a:	4610      	mov	r0, r2
 800262c:	4619      	mov	r1, r3
 800262e:	f7fe fabb 	bl	8000ba8 <__aeabi_d2uiz>
 8002632:	4603      	mov	r3, r0
 8002634:	63e3      	str	r3, [r4, #60]	; 0x3c
    		break;
 8002636:	e005      	b.n	8002644 <TIM3_IRQHandler+0x3b4>
    			TIM2->CCR3 = PWM;
 8002638:	4b07      	ldr	r3, [pc, #28]	; (8002658 <TIM3_IRQHandler+0x3c8>)
 800263a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800263e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002642:	63da      	str	r2, [r3, #60]	; 0x3c
    		break;
 8002644:	bf00      	nop
		}
  /* USER CODE END TIM3_IRQn 1 */
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bdb0      	pop	{r4, r5, r7, pc}
 800264e:	bf00      	nop
 8002650:	9999999a 	.word	0x9999999a
 8002654:	3fb99999 	.word	0x3fb99999
 8002658:	20000000 	.word	0x20000000
 800265c:	00000000 	.word	0x00000000

08002660 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002666:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800266a:	f001 ff81 	bl	8004570 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800266e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002672:	f001 ff7d 	bl	8004570 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002676:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800267a:	f001 ff79 	bl	8004570 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800267e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002682:	f001 ff75 	bl	8004570 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

	if((HAL_GetTick()-tick)>30)
 8002686:	f000 fe51 	bl	800332c <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	4bbe      	ldr	r3, [pc, #760]	; (8002988 <EXTI15_10_IRQHandler+0x328>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b1e      	cmp	r3, #30
 8002694:	f240 838c 	bls.w	8002db0 <EXTI15_10_IRQHandler+0x750>
	{
		//ROW1
			if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)==0)
 8002698:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800269c:	48bb      	ldr	r0, [pc, #748]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 800269e:	f001 ff1b 	bl	80044d8 <HAL_GPIO_ReadPin>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f040 80fd 	bne.w	80028a4 <EXTI15_10_IRQHandler+0x244>
			{
				for(uint8_t i=1;i<5;i++)
 80026aa:	2301      	movs	r3, #1
 80026ac:	71fb      	strb	r3, [r7, #7]
 80026ae:	e0dd      	b.n	800286c <EXTI15_10_IRQHandler+0x20c>
				{
						HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 80026b0:	2201      	movs	r2, #1
 80026b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026b6:	48b5      	ldr	r0, [pc, #724]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 80026b8:	f001 ff26 	bl	8004508 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 80026bc:	2201      	movs	r2, #1
 80026be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026c2:	48b2      	ldr	r0, [pc, #712]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 80026c4:	f001 ff20 	bl	8004508 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 80026c8:	2201      	movs	r2, #1
 80026ca:	2180      	movs	r1, #128	; 0x80
 80026cc:	48af      	ldr	r0, [pc, #700]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 80026ce:	f001 ff1b 	bl	8004508 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_SET);
 80026d2:	2201      	movs	r2, #1
 80026d4:	2102      	movs	r1, #2
 80026d6:	48ae      	ldr	r0, [pc, #696]	; (8002990 <EXTI15_10_IRQHandler+0x330>)
 80026d8:	f001 ff16 	bl	8004508 <HAL_GPIO_WritePin>

						switch (i) {
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	3b01      	subs	r3, #1
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d825      	bhi.n	8002730 <EXTI15_10_IRQHandler+0xd0>
 80026e4:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <EXTI15_10_IRQHandler+0x8c>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	080026fd 	.word	0x080026fd
 80026f0:	0800270b 	.word	0x0800270b
 80026f4:	08002719 	.word	0x08002719
 80026f8:	08002725 	.word	0x08002725
							case 1:
								HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 80026fc:	2200      	movs	r2, #0
 80026fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002702:	48a2      	ldr	r0, [pc, #648]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 8002704:	f001 ff00 	bl	8004508 <HAL_GPIO_WritePin>
								break;
 8002708:	e013      	b.n	8002732 <EXTI15_10_IRQHandler+0xd2>
							case 2:
								HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 800270a:	2200      	movs	r2, #0
 800270c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002710:	489e      	ldr	r0, [pc, #632]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 8002712:	f001 fef9 	bl	8004508 <HAL_GPIO_WritePin>
								break;
 8002716:	e00c      	b.n	8002732 <EXTI15_10_IRQHandler+0xd2>
							case 3:
								HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 8002718:	2200      	movs	r2, #0
 800271a:	2180      	movs	r1, #128	; 0x80
 800271c:	489b      	ldr	r0, [pc, #620]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 800271e:	f001 fef3 	bl	8004508 <HAL_GPIO_WritePin>
								break;
 8002722:	e006      	b.n	8002732 <EXTI15_10_IRQHandler+0xd2>
							case 4:
								HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
 8002724:	2200      	movs	r2, #0
 8002726:	2102      	movs	r1, #2
 8002728:	4899      	ldr	r0, [pc, #612]	; (8002990 <EXTI15_10_IRQHandler+0x330>)
 800272a:	f001 feed 	bl	8004508 <HAL_GPIO_WritePin>
								break;
 800272e:	e000      	b.n	8002732 <EXTI15_10_IRQHandler+0xd2>
							default:
								break;
 8002730:	bf00      	nop
						}

						if(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)==0)
 8002732:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002736:	4895      	ldr	r0, [pc, #596]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 8002738:	f001 fece 	bl	80044d8 <HAL_GPIO_ReadPin>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	f040 8091 	bne.w	8002866 <EXTI15_10_IRQHandler+0x206>
						{
							switch(i)
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	3b01      	subs	r3, #1
 8002748:	2b03      	cmp	r3, #3
 800274a:	f200 8094 	bhi.w	8002876 <EXTI15_10_IRQHandler+0x216>
 800274e:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <EXTI15_10_IRQHandler+0xf4>)
 8002750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002754:	08002765 	.word	0x08002765
 8002758:	080027a5 	.word	0x080027a5
 800275c:	080027e5 	.word	0x080027e5
 8002760:	08002825 	.word	0x08002825
							{
								case 1:
								{
									while(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)==0){}
 8002764:	bf00      	nop
 8002766:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800276a:	4888      	ldr	r0, [pc, #544]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 800276c:	f001 feb4 	bl	80044d8 <HAL_GPIO_ReadPin>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0f7      	beq.n	8002766 <EXTI15_10_IRQHandler+0x106>
									PHASE[0]-=50;
 8002776:	4b87      	ldr	r3, [pc, #540]	; (8002994 <EXTI15_10_IRQHandler+0x334>)
 8002778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b32      	subs	r3, #50	; 0x32
 8002780:	b29b      	uxth	r3, r3
 8002782:	b21a      	sxth	r2, r3
 8002784:	4b83      	ldr	r3, [pc, #524]	; (8002994 <EXTI15_10_IRQHandler+0x334>)
 8002786:	801a      	strh	r2, [r3, #0]
									HAL_I2C_Mem_Write(&hi2c1, ADDR_AT24C02_Write, 0, I2C_MEMADD_SIZE_16BIT,(uint8_t*)(&(PHASE[0])),8, 1000);
 8002788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278c:	9302      	str	r3, [sp, #8]
 800278e:	2308      	movs	r3, #8
 8002790:	9301      	str	r3, [sp, #4]
 8002792:	4b80      	ldr	r3, [pc, #512]	; (8002994 <EXTI15_10_IRQHandler+0x334>)
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	2310      	movs	r3, #16
 8002798:	2200      	movs	r2, #0
 800279a:	21a0      	movs	r1, #160	; 0xa0
 800279c:	487e      	ldr	r0, [pc, #504]	; (8002998 <EXTI15_10_IRQHandler+0x338>)
 800279e:	f002 f84f 	bl	8004840 <HAL_I2C_Mem_Write>
									//
									goto END1;
 80027a2:	e05f      	b.n	8002864 <EXTI15_10_IRQHandler+0x204>
								}
								case 2:
								{
									while(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)==0){}
 80027a4:	bf00      	nop
 80027a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027aa:	4878      	ldr	r0, [pc, #480]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 80027ac:	f001 fe94 	bl	80044d8 <HAL_GPIO_ReadPin>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f7      	beq.n	80027a6 <EXTI15_10_IRQHandler+0x146>
									PHASE[0]-=10;
 80027b6:	4b77      	ldr	r3, [pc, #476]	; (8002994 <EXTI15_10_IRQHandler+0x334>)
 80027b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	3b0a      	subs	r3, #10
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	b21a      	sxth	r2, r3
 80027c4:	4b73      	ldr	r3, [pc, #460]	; (8002994 <EXTI15_10_IRQHandler+0x334>)
 80027c6:	801a      	strh	r2, [r3, #0]
									HAL_I2C_Mem_Write(&hi2c1, ADDR_AT24C02_Write, 0, I2C_MEMADD_SIZE_16BIT,(uint8_t*)(&(PHASE[0])),8, 1000);
 80027c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027cc:	9302      	str	r3, [sp, #8]
 80027ce:	2308      	movs	r3, #8
 80027d0:	9301      	str	r3, [sp, #4]
 80027d2:	4b70      	ldr	r3, [pc, #448]	; (8002994 <EXTI15_10_IRQHandler+0x334>)
 80027d4:	9300      	str	r3, [sp, #0]
 80027d6:	2310      	movs	r3, #16
 80027d8:	2200      	movs	r2, #0
 80027da:	21a0      	movs	r1, #160	; 0xa0
 80027dc:	486e      	ldr	r0, [pc, #440]	; (8002998 <EXTI15_10_IRQHandler+0x338>)
 80027de:	f002 f82f 	bl	8004840 <HAL_I2C_Mem_Write>
									//
									goto END1;
 80027e2:	e03f      	b.n	8002864 <EXTI15_10_IRQHandler+0x204>
								}
								case 3:
								{
									while(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)==0){}
 80027e4:	bf00      	nop
 80027e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80027ea:	4868      	ldr	r0, [pc, #416]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 80027ec:	f001 fe74 	bl	80044d8 <HAL_GPIO_ReadPin>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f7      	beq.n	80027e6 <EXTI15_10_IRQHandler+0x186>
									PHASE[0]+=10;
 80027f6:	4b67      	ldr	r3, [pc, #412]	; (8002994 <EXTI15_10_IRQHandler+0x334>)
 80027f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	330a      	adds	r3, #10
 8002800:	b29b      	uxth	r3, r3
 8002802:	b21a      	sxth	r2, r3
 8002804:	4b63      	ldr	r3, [pc, #396]	; (8002994 <EXTI15_10_IRQHandler+0x334>)
 8002806:	801a      	strh	r2, [r3, #0]
									HAL_I2C_Mem_Write(&hi2c1, ADDR_AT24C02_Write, 0, I2C_MEMADD_SIZE_16BIT,(uint8_t*)(&(PHASE[0])),8, 1000);
 8002808:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800280c:	9302      	str	r3, [sp, #8]
 800280e:	2308      	movs	r3, #8
 8002810:	9301      	str	r3, [sp, #4]
 8002812:	4b60      	ldr	r3, [pc, #384]	; (8002994 <EXTI15_10_IRQHandler+0x334>)
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	2310      	movs	r3, #16
 8002818:	2200      	movs	r2, #0
 800281a:	21a0      	movs	r1, #160	; 0xa0
 800281c:	485e      	ldr	r0, [pc, #376]	; (8002998 <EXTI15_10_IRQHandler+0x338>)
 800281e:	f002 f80f 	bl	8004840 <HAL_I2C_Mem_Write>
									//
									goto END1;
 8002822:	e01f      	b.n	8002864 <EXTI15_10_IRQHandler+0x204>
								}
								case 4:
								{
									while(HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin)==0){}
 8002824:	bf00      	nop
 8002826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800282a:	4858      	ldr	r0, [pc, #352]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 800282c:	f001 fe54 	bl	80044d8 <HAL_GPIO_ReadPin>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d0f7      	beq.n	8002826 <EXTI15_10_IRQHandler+0x1c6>
									PHASE[0]+=50;
 8002836:	4b57      	ldr	r3, [pc, #348]	; (8002994 <EXTI15_10_IRQHandler+0x334>)
 8002838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800283c:	b29b      	uxth	r3, r3
 800283e:	3332      	adds	r3, #50	; 0x32
 8002840:	b29b      	uxth	r3, r3
 8002842:	b21a      	sxth	r2, r3
 8002844:	4b53      	ldr	r3, [pc, #332]	; (8002994 <EXTI15_10_IRQHandler+0x334>)
 8002846:	801a      	strh	r2, [r3, #0]
									HAL_I2C_Mem_Write(&hi2c1, ADDR_AT24C02_Write, 0, I2C_MEMADD_SIZE_16BIT,(uint8_t*)(&(PHASE[0])),8, 1000);
 8002848:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800284c:	9302      	str	r3, [sp, #8]
 800284e:	2308      	movs	r3, #8
 8002850:	9301      	str	r3, [sp, #4]
 8002852:	4b50      	ldr	r3, [pc, #320]	; (8002994 <EXTI15_10_IRQHandler+0x334>)
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	2310      	movs	r3, #16
 8002858:	2200      	movs	r2, #0
 800285a:	21a0      	movs	r1, #160	; 0xa0
 800285c:	484e      	ldr	r0, [pc, #312]	; (8002998 <EXTI15_10_IRQHandler+0x338>)
 800285e:	f001 ffef 	bl	8004840 <HAL_I2C_Mem_Write>
									//
									goto END1;
 8002862:	bf00      	nop
								}
							}
								END1:
								break;
 8002864:	e007      	b.n	8002876 <EXTI15_10_IRQHandler+0x216>
				for(uint8_t i=1;i<5;i++)
 8002866:	79fb      	ldrb	r3, [r7, #7]
 8002868:	3301      	adds	r3, #1
 800286a:	71fb      	strb	r3, [r7, #7]
 800286c:	79fb      	ldrb	r3, [r7, #7]
 800286e:	2b04      	cmp	r3, #4
 8002870:	f67f af1e 	bls.w	80026b0 <EXTI15_10_IRQHandler+0x50>
 8002874:	e000      	b.n	8002878 <EXTI15_10_IRQHandler+0x218>
								break;
 8002876:	bf00      	nop
						}
			}
				HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 8002878:	2200      	movs	r2, #0
 800287a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800287e:	4843      	ldr	r0, [pc, #268]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 8002880:	f001 fe42 	bl	8004508 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 8002884:	2200      	movs	r2, #0
 8002886:	f44f 7180 	mov.w	r1, #256	; 0x100
 800288a:	4840      	ldr	r0, [pc, #256]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 800288c:	f001 fe3c 	bl	8004508 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 8002890:	2200      	movs	r2, #0
 8002892:	2180      	movs	r1, #128	; 0x80
 8002894:	483d      	ldr	r0, [pc, #244]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 8002896:	f001 fe37 	bl	8004508 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
 800289a:	2200      	movs	r2, #0
 800289c:	2102      	movs	r1, #2
 800289e:	483c      	ldr	r0, [pc, #240]	; (8002990 <EXTI15_10_IRQHandler+0x330>)
 80028a0:	f001 fe32 	bl	8004508 <HAL_GPIO_WritePin>
  }

		//ROW2
			if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)==0)
 80028a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028a8:	4838      	ldr	r0, [pc, #224]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 80028aa:	f001 fe15 	bl	80044d8 <HAL_GPIO_ReadPin>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f040 80b3 	bne.w	8002a1c <EXTI15_10_IRQHandler+0x3bc>
			{
				for(uint8_t i=1;i<5;i++)
 80028b6:	2301      	movs	r3, #1
 80028b8:	71bb      	strb	r3, [r7, #6]
 80028ba:	e093      	b.n	80029e4 <EXTI15_10_IRQHandler+0x384>
				{
						HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 80028bc:	2201      	movs	r2, #1
 80028be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028c2:	4832      	ldr	r0, [pc, #200]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 80028c4:	f001 fe20 	bl	8004508 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 80028c8:	2201      	movs	r2, #1
 80028ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028ce:	482f      	ldr	r0, [pc, #188]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 80028d0:	f001 fe1a 	bl	8004508 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 80028d4:	2201      	movs	r2, #1
 80028d6:	2180      	movs	r1, #128	; 0x80
 80028d8:	482c      	ldr	r0, [pc, #176]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 80028da:	f001 fe15 	bl	8004508 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_SET);
 80028de:	2201      	movs	r2, #1
 80028e0:	2102      	movs	r1, #2
 80028e2:	482b      	ldr	r0, [pc, #172]	; (8002990 <EXTI15_10_IRQHandler+0x330>)
 80028e4:	f001 fe10 	bl	8004508 <HAL_GPIO_WritePin>

						switch (i) {
 80028e8:	79bb      	ldrb	r3, [r7, #6]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d825      	bhi.n	800293c <EXTI15_10_IRQHandler+0x2dc>
 80028f0:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <EXTI15_10_IRQHandler+0x298>)
 80028f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f6:	bf00      	nop
 80028f8:	08002909 	.word	0x08002909
 80028fc:	08002917 	.word	0x08002917
 8002900:	08002925 	.word	0x08002925
 8002904:	08002931 	.word	0x08002931
							case 1:
								HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 8002908:	2200      	movs	r2, #0
 800290a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800290e:	481f      	ldr	r0, [pc, #124]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 8002910:	f001 fdfa 	bl	8004508 <HAL_GPIO_WritePin>
								break;
 8002914:	e013      	b.n	800293e <EXTI15_10_IRQHandler+0x2de>
							case 2:
								HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 8002916:	2200      	movs	r2, #0
 8002918:	f44f 7180 	mov.w	r1, #256	; 0x100
 800291c:	481b      	ldr	r0, [pc, #108]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 800291e:	f001 fdf3 	bl	8004508 <HAL_GPIO_WritePin>
								break;
 8002922:	e00c      	b.n	800293e <EXTI15_10_IRQHandler+0x2de>
							case 3:
								HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 8002924:	2200      	movs	r2, #0
 8002926:	2180      	movs	r1, #128	; 0x80
 8002928:	4818      	ldr	r0, [pc, #96]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 800292a:	f001 fded 	bl	8004508 <HAL_GPIO_WritePin>
								break;
 800292e:	e006      	b.n	800293e <EXTI15_10_IRQHandler+0x2de>
							case 4:
								HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
 8002930:	2200      	movs	r2, #0
 8002932:	2102      	movs	r1, #2
 8002934:	4816      	ldr	r0, [pc, #88]	; (8002990 <EXTI15_10_IRQHandler+0x330>)
 8002936:	f001 fde7 	bl	8004508 <HAL_GPIO_WritePin>
								break;
 800293a:	e000      	b.n	800293e <EXTI15_10_IRQHandler+0x2de>
							default:
								break;
 800293c:	bf00      	nop
						}

						if(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)==0)
 800293e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002942:	4812      	ldr	r0, [pc, #72]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 8002944:	f001 fdc8 	bl	80044d8 <HAL_GPIO_ReadPin>
 8002948:	4603      	mov	r3, r0
 800294a:	2b00      	cmp	r3, #0
 800294c:	d147      	bne.n	80029de <EXTI15_10_IRQHandler+0x37e>
						{
							switch(i)
 800294e:	79bb      	ldrb	r3, [r7, #6]
 8002950:	3b01      	subs	r3, #1
 8002952:	2b03      	cmp	r3, #3
 8002954:	d84b      	bhi.n	80029ee <EXTI15_10_IRQHandler+0x38e>
 8002956:	a201      	add	r2, pc, #4	; (adr r2, 800295c <EXTI15_10_IRQHandler+0x2fc>)
 8002958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295c:	0800296d 	.word	0x0800296d
 8002960:	080029a1 	.word	0x080029a1
 8002964:	080029b5 	.word	0x080029b5
 8002968:	080029c9 	.word	0x080029c9
							{
								case 1:
								{
									while(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)==0){}
 800296c:	bf00      	nop
 800296e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002972:	4806      	ldr	r0, [pc, #24]	; (800298c <EXTI15_10_IRQHandler+0x32c>)
 8002974:	f001 fdb0 	bl	80044d8 <HAL_GPIO_ReadPin>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f7      	beq.n	800296e <EXTI15_10_IRQHandler+0x30e>
									HAL_GPIO_TogglePin(LOCK_GPIO_Port, LOCK_Pin);
 800297e:	2140      	movs	r1, #64	; 0x40
 8002980:	4806      	ldr	r0, [pc, #24]	; (800299c <EXTI15_10_IRQHandler+0x33c>)
 8002982:	f001 fdda 	bl	800453a <HAL_GPIO_TogglePin>
									goto END2;
 8002986:	e029      	b.n	80029dc <EXTI15_10_IRQHandler+0x37c>
 8002988:	200005e4 	.word	0x200005e4
 800298c:	40021000 	.word	0x40021000
 8002990:	40021800 	.word	0x40021800
 8002994:	20000008 	.word	0x20000008
 8002998:	2000026c 	.word	0x2000026c
 800299c:	40020000 	.word	0x40020000
								}
								case 2:
								{
									while(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)==0){}
 80029a0:	bf00      	nop
 80029a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029a6:	48c0      	ldr	r0, [pc, #768]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 80029a8:	f001 fd96 	bl	80044d8 <HAL_GPIO_ReadPin>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f7      	beq.n	80029a2 <EXTI15_10_IRQHandler+0x342>
									//
									goto END2;
 80029b2:	e013      	b.n	80029dc <EXTI15_10_IRQHandler+0x37c>
								}
								case 3:
								{
									while(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)==0){}
 80029b4:	bf00      	nop
 80029b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029ba:	48bb      	ldr	r0, [pc, #748]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 80029bc:	f001 fd8c 	bl	80044d8 <HAL_GPIO_ReadPin>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f7      	beq.n	80029b6 <EXTI15_10_IRQHandler+0x356>
									//
									goto END2;
 80029c6:	e009      	b.n	80029dc <EXTI15_10_IRQHandler+0x37c>
								}
								case 4:
								{
									while(HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin)==0){}
 80029c8:	bf00      	nop
 80029ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80029ce:	48b6      	ldr	r0, [pc, #728]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 80029d0:	f001 fd82 	bl	80044d8 <HAL_GPIO_ReadPin>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f7      	beq.n	80029ca <EXTI15_10_IRQHandler+0x36a>
									//
									goto END2;
 80029da:	bf00      	nop
								}
							}
								END2:
								break;
 80029dc:	e007      	b.n	80029ee <EXTI15_10_IRQHandler+0x38e>
				for(uint8_t i=1;i<5;i++)
 80029de:	79bb      	ldrb	r3, [r7, #6]
 80029e0:	3301      	adds	r3, #1
 80029e2:	71bb      	strb	r3, [r7, #6]
 80029e4:	79bb      	ldrb	r3, [r7, #6]
 80029e6:	2b04      	cmp	r3, #4
 80029e8:	f67f af68 	bls.w	80028bc <EXTI15_10_IRQHandler+0x25c>
 80029ec:	e000      	b.n	80029f0 <EXTI15_10_IRQHandler+0x390>
								break;
 80029ee:	bf00      	nop
						}
			}
				HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 80029f0:	2200      	movs	r2, #0
 80029f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029f6:	48ac      	ldr	r0, [pc, #688]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 80029f8:	f001 fd86 	bl	8004508 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 80029fc:	2200      	movs	r2, #0
 80029fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a02:	48a9      	ldr	r0, [pc, #676]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002a04:	f001 fd80 	bl	8004508 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 8002a08:	2200      	movs	r2, #0
 8002a0a:	2180      	movs	r1, #128	; 0x80
 8002a0c:	48a6      	ldr	r0, [pc, #664]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002a0e:	f001 fd7b 	bl	8004508 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2102      	movs	r1, #2
 8002a16:	48a5      	ldr	r0, [pc, #660]	; (8002cac <EXTI15_10_IRQHandler+0x64c>)
 8002a18:	f001 fd76 	bl	8004508 <HAL_GPIO_WritePin>
  }

		//ROW3
			if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)==0)
 8002a1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a20:	48a1      	ldr	r0, [pc, #644]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002a22:	f001 fd59 	bl	80044d8 <HAL_GPIO_ReadPin>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f040 80b5 	bne.w	8002b98 <EXTI15_10_IRQHandler+0x538>
			{
				for(uint8_t i=1;i<5;i++)
 8002a2e:	2301      	movs	r3, #1
 8002a30:	717b      	strb	r3, [r7, #5]
 8002a32:	e095      	b.n	8002b60 <EXTI15_10_IRQHandler+0x500>
				{
						HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 8002a34:	2201      	movs	r2, #1
 8002a36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a3a:	489b      	ldr	r0, [pc, #620]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002a3c:	f001 fd64 	bl	8004508 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 8002a40:	2201      	movs	r2, #1
 8002a42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a46:	4898      	ldr	r0, [pc, #608]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002a48:	f001 fd5e 	bl	8004508 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	2180      	movs	r1, #128	; 0x80
 8002a50:	4895      	ldr	r0, [pc, #596]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002a52:	f001 fd59 	bl	8004508 <HAL_GPIO_WritePin>
						HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_SET);
 8002a56:	2201      	movs	r2, #1
 8002a58:	2102      	movs	r1, #2
 8002a5a:	4894      	ldr	r0, [pc, #592]	; (8002cac <EXTI15_10_IRQHandler+0x64c>)
 8002a5c:	f001 fd54 	bl	8004508 <HAL_GPIO_WritePin>

						switch (i) {
 8002a60:	797b      	ldrb	r3, [r7, #5]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d825      	bhi.n	8002ab4 <EXTI15_10_IRQHandler+0x454>
 8002a68:	a201      	add	r2, pc, #4	; (adr r2, 8002a70 <EXTI15_10_IRQHandler+0x410>)
 8002a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a6e:	bf00      	nop
 8002a70:	08002a81 	.word	0x08002a81
 8002a74:	08002a8f 	.word	0x08002a8f
 8002a78:	08002a9d 	.word	0x08002a9d
 8002a7c:	08002aa9 	.word	0x08002aa9
							case 1:
								HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 8002a80:	2200      	movs	r2, #0
 8002a82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a86:	4888      	ldr	r0, [pc, #544]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002a88:	f001 fd3e 	bl	8004508 <HAL_GPIO_WritePin>
								break;
 8002a8c:	e013      	b.n	8002ab6 <EXTI15_10_IRQHandler+0x456>
							case 2:
								HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a94:	4884      	ldr	r0, [pc, #528]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002a96:	f001 fd37 	bl	8004508 <HAL_GPIO_WritePin>
								break;
 8002a9a:	e00c      	b.n	8002ab6 <EXTI15_10_IRQHandler+0x456>
							case 3:
								HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	2180      	movs	r1, #128	; 0x80
 8002aa0:	4881      	ldr	r0, [pc, #516]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002aa2:	f001 fd31 	bl	8004508 <HAL_GPIO_WritePin>
								break;
 8002aa6:	e006      	b.n	8002ab6 <EXTI15_10_IRQHandler+0x456>
							case 4:
								HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	2102      	movs	r1, #2
 8002aac:	487f      	ldr	r0, [pc, #508]	; (8002cac <EXTI15_10_IRQHandler+0x64c>)
 8002aae:	f001 fd2b 	bl	8004508 <HAL_GPIO_WritePin>
								break;
 8002ab2:	e000      	b.n	8002ab6 <EXTI15_10_IRQHandler+0x456>
							default:
								break;
 8002ab4:	bf00      	nop
						}

						if(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)==0)
 8002ab6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002aba:	487b      	ldr	r0, [pc, #492]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002abc:	f001 fd0c 	bl	80044d8 <HAL_GPIO_ReadPin>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d149      	bne.n	8002b5a <EXTI15_10_IRQHandler+0x4fa>
						{
							switch(i)
 8002ac6:	797b      	ldrb	r3, [r7, #5]
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	d84d      	bhi.n	8002b6a <EXTI15_10_IRQHandler+0x50a>
 8002ace:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <EXTI15_10_IRQHandler+0x474>)
 8002ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad4:	08002ae5 	.word	0x08002ae5
 8002ad8:	08002b0b 	.word	0x08002b0b
 8002adc:	08002b31 	.word	0x08002b31
 8002ae0:	08002b45 	.word	0x08002b45
							{
								case 1:
								{
									while(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)==0){}
 8002ae4:	bf00      	nop
 8002ae6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002aea:	486f      	ldr	r0, [pc, #444]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002aec:	f001 fcf4 	bl	80044d8 <HAL_GPIO_ReadPin>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0f7      	beq.n	8002ae6 <EXTI15_10_IRQHandler+0x486>
									//
									COSCom2_plus++;
 8002af6:	4b6e      	ldr	r3, [pc, #440]	; (8002cb0 <EXTI15_10_IRQHandler+0x650>)
 8002af8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	3301      	adds	r3, #1
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	b21a      	sxth	r2, r3
 8002b04:	4b6a      	ldr	r3, [pc, #424]	; (8002cb0 <EXTI15_10_IRQHandler+0x650>)
 8002b06:	801a      	strh	r2, [r3, #0]
									goto END3;
 8002b08:	e026      	b.n	8002b58 <EXTI15_10_IRQHandler+0x4f8>
								}
								case 2:
								{
									while(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)==0){}
 8002b0a:	bf00      	nop
 8002b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b10:	4865      	ldr	r0, [pc, #404]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002b12:	f001 fce1 	bl	80044d8 <HAL_GPIO_ReadPin>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f7      	beq.n	8002b0c <EXTI15_10_IRQHandler+0x4ac>
									//
									COSCom2_plus--;
 8002b1c:	4b64      	ldr	r3, [pc, #400]	; (8002cb0 <EXTI15_10_IRQHandler+0x650>)
 8002b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	b21a      	sxth	r2, r3
 8002b2a:	4b61      	ldr	r3, [pc, #388]	; (8002cb0 <EXTI15_10_IRQHandler+0x650>)
 8002b2c:	801a      	strh	r2, [r3, #0]
									goto END3;
 8002b2e:	e013      	b.n	8002b58 <EXTI15_10_IRQHandler+0x4f8>
								}
								case 3:
								{
									while(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)==0){}
 8002b30:	bf00      	nop
 8002b32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b36:	485c      	ldr	r0, [pc, #368]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002b38:	f001 fcce 	bl	80044d8 <HAL_GPIO_ReadPin>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f7      	beq.n	8002b32 <EXTI15_10_IRQHandler+0x4d2>
									//
									goto END3;
 8002b42:	e009      	b.n	8002b58 <EXTI15_10_IRQHandler+0x4f8>
								}
								case 4:
								{
									while(HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin)==0){}
 8002b44:	bf00      	nop
 8002b46:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002b4a:	4857      	ldr	r0, [pc, #348]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002b4c:	f001 fcc4 	bl	80044d8 <HAL_GPIO_ReadPin>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f7      	beq.n	8002b46 <EXTI15_10_IRQHandler+0x4e6>
									//
									goto END3;
 8002b56:	bf00      	nop
								}
							}
								END3:
								break;
 8002b58:	e007      	b.n	8002b6a <EXTI15_10_IRQHandler+0x50a>
				for(uint8_t i=1;i<5;i++)
 8002b5a:	797b      	ldrb	r3, [r7, #5]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	717b      	strb	r3, [r7, #5]
 8002b60:	797b      	ldrb	r3, [r7, #5]
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	f67f af66 	bls.w	8002a34 <EXTI15_10_IRQHandler+0x3d4>
 8002b68:	e000      	b.n	8002b6c <EXTI15_10_IRQHandler+0x50c>
								break;
 8002b6a:	bf00      	nop
						}
			}
				HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b72:	484d      	ldr	r0, [pc, #308]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002b74:	f001 fcc8 	bl	8004508 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b7e:	484a      	ldr	r0, [pc, #296]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002b80:	f001 fcc2 	bl	8004508 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 8002b84:	2200      	movs	r2, #0
 8002b86:	2180      	movs	r1, #128	; 0x80
 8002b88:	4847      	ldr	r0, [pc, #284]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002b8a:	f001 fcbd 	bl	8004508 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
 8002b8e:	2200      	movs	r2, #0
 8002b90:	2102      	movs	r1, #2
 8002b92:	4846      	ldr	r0, [pc, #280]	; (8002cac <EXTI15_10_IRQHandler+0x64c>)
 8002b94:	f001 fcb8 	bl	8004508 <HAL_GPIO_WritePin>
  }

			//ROW4
				if(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin)==0)
 8002b98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b9c:	4842      	ldr	r0, [pc, #264]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002b9e:	f001 fc9b 	bl	80044d8 <HAL_GPIO_ReadPin>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f040 80fe 	bne.w	8002da6 <EXTI15_10_IRQHandler+0x746>
				{
					for(uint8_t i=1;i<5;i++)
 8002baa:	2301      	movs	r3, #1
 8002bac:	713b      	strb	r3, [r7, #4]
 8002bae:	e0de      	b.n	8002d6e <EXTI15_10_IRQHandler+0x70e>
					{
							HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_SET);
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002bb6:	483c      	ldr	r0, [pc, #240]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002bb8:	f001 fca6 	bl	8004508 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_SET);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bc2:	4839      	ldr	r0, [pc, #228]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002bc4:	f001 fca0 	bl	8004508 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_SET);
 8002bc8:	2201      	movs	r2, #1
 8002bca:	2180      	movs	r1, #128	; 0x80
 8002bcc:	4836      	ldr	r0, [pc, #216]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002bce:	f001 fc9b 	bl	8004508 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_SET);
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	2102      	movs	r1, #2
 8002bd6:	4835      	ldr	r0, [pc, #212]	; (8002cac <EXTI15_10_IRQHandler+0x64c>)
 8002bd8:	f001 fc96 	bl	8004508 <HAL_GPIO_WritePin>

							switch (i) {
 8002bdc:	793b      	ldrb	r3, [r7, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d825      	bhi.n	8002c30 <EXTI15_10_IRQHandler+0x5d0>
 8002be4:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <EXTI15_10_IRQHandler+0x58c>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002bfd 	.word	0x08002bfd
 8002bf0:	08002c0b 	.word	0x08002c0b
 8002bf4:	08002c19 	.word	0x08002c19
 8002bf8:	08002c25 	.word	0x08002c25
								case 1:
									HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c02:	4829      	ldr	r0, [pc, #164]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002c04:	f001 fc80 	bl	8004508 <HAL_GPIO_WritePin>
									break;
 8002c08:	e013      	b.n	8002c32 <EXTI15_10_IRQHandler+0x5d2>
								case 2:
									HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c10:	4825      	ldr	r0, [pc, #148]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002c12:	f001 fc79 	bl	8004508 <HAL_GPIO_WritePin>
									break;
 8002c16:	e00c      	b.n	8002c32 <EXTI15_10_IRQHandler+0x5d2>
								case 3:
									HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2180      	movs	r1, #128	; 0x80
 8002c1c:	4822      	ldr	r0, [pc, #136]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002c1e:	f001 fc73 	bl	8004508 <HAL_GPIO_WritePin>
									break;
 8002c22:	e006      	b.n	8002c32 <EXTI15_10_IRQHandler+0x5d2>
								case 4:
									HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
 8002c24:	2200      	movs	r2, #0
 8002c26:	2102      	movs	r1, #2
 8002c28:	4820      	ldr	r0, [pc, #128]	; (8002cac <EXTI15_10_IRQHandler+0x64c>)
 8002c2a:	f001 fc6d 	bl	8004508 <HAL_GPIO_WritePin>
									break;
 8002c2e:	e000      	b.n	8002c32 <EXTI15_10_IRQHandler+0x5d2>
								default:
									break;
 8002c30:	bf00      	nop
							}

							if(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin)==0)
 8002c32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c36:	481c      	ldr	r0, [pc, #112]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002c38:	f001 fc4e 	bl	80044d8 <HAL_GPIO_ReadPin>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	f040 8092 	bne.w	8002d68 <EXTI15_10_IRQHandler+0x708>
							{
								switch(i)
 8002c44:	793b      	ldrb	r3, [r7, #4]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	f200 8095 	bhi.w	8002d78 <EXTI15_10_IRQHandler+0x718>
 8002c4e:	a201      	add	r2, pc, #4	; (adr r2, 8002c54 <EXTI15_10_IRQHandler+0x5f4>)
 8002c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c54:	08002c65 	.word	0x08002c65
 8002c58:	08002cb9 	.word	0x08002cb9
 8002c5c:	08002cf3 	.word	0x08002cf3
 8002c60:	08002d2d 	.word	0x08002d2d
								{
									case 1:
									{
										while(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin)==0){}
 8002c64:	bf00      	nop
 8002c66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c6a:	480f      	ldr	r0, [pc, #60]	; (8002ca8 <EXTI15_10_IRQHandler+0x648>)
 8002c6c:	f001 fc34 	bl	80044d8 <HAL_GPIO_ReadPin>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d0f7      	beq.n	8002c66 <EXTI15_10_IRQHandler+0x606>
										//
										COSCom2+=0.1;
 8002c76:	4b0f      	ldr	r3, [pc, #60]	; (8002cb4 <EXTI15_10_IRQHandler+0x654>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fd fc64 	bl	8000548 <__aeabi_f2d>
 8002c80:	a307      	add	r3, pc, #28	; (adr r3, 8002ca0 <EXTI15_10_IRQHandler+0x640>)
 8002c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c86:	f7fd fb01 	bl	800028c <__adddf3>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4610      	mov	r0, r2
 8002c90:	4619      	mov	r1, r3
 8002c92:	f7fd ffa9 	bl	8000be8 <__aeabi_d2f>
 8002c96:	4603      	mov	r3, r0
 8002c98:	4a06      	ldr	r2, [pc, #24]	; (8002cb4 <EXTI15_10_IRQHandler+0x654>)
 8002c9a:	6013      	str	r3, [r2, #0]
										goto END4;
 8002c9c:	e063      	b.n	8002d66 <EXTI15_10_IRQHandler+0x706>
 8002c9e:	bf00      	nop
 8002ca0:	9999999a 	.word	0x9999999a
 8002ca4:	3fb99999 	.word	0x3fb99999
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40021800 	.word	0x40021800
 8002cb0:	20000002 	.word	0x20000002
 8002cb4:	20000004 	.word	0x20000004
									}
									case 2:
									{
										while(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin)==0){}
 8002cb8:	bf00      	nop
 8002cba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cbe:	4842      	ldr	r0, [pc, #264]	; (8002dc8 <EXTI15_10_IRQHandler+0x768>)
 8002cc0:	f001 fc0a 	bl	80044d8 <HAL_GPIO_ReadPin>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f7      	beq.n	8002cba <EXTI15_10_IRQHandler+0x65a>
										//
										COSCom2+=0.01;
 8002cca:	4b40      	ldr	r3, [pc, #256]	; (8002dcc <EXTI15_10_IRQHandler+0x76c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fc3a 	bl	8000548 <__aeabi_f2d>
 8002cd4:	a338      	add	r3, pc, #224	; (adr r3, 8002db8 <EXTI15_10_IRQHandler+0x758>)
 8002cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cda:	f7fd fad7 	bl	800028c <__adddf3>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f7fd ff7f 	bl	8000be8 <__aeabi_d2f>
 8002cea:	4603      	mov	r3, r0
 8002cec:	4a37      	ldr	r2, [pc, #220]	; (8002dcc <EXTI15_10_IRQHandler+0x76c>)
 8002cee:	6013      	str	r3, [r2, #0]
										goto END4;
 8002cf0:	e039      	b.n	8002d66 <EXTI15_10_IRQHandler+0x706>
									}
									case 3:
									{
										while(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin)==0){}
 8002cf2:	bf00      	nop
 8002cf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cf8:	4833      	ldr	r0, [pc, #204]	; (8002dc8 <EXTI15_10_IRQHandler+0x768>)
 8002cfa:	f001 fbed 	bl	80044d8 <HAL_GPIO_ReadPin>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0f7      	beq.n	8002cf4 <EXTI15_10_IRQHandler+0x694>
										//
										COSCom2-=0.01;
 8002d04:	4b31      	ldr	r3, [pc, #196]	; (8002dcc <EXTI15_10_IRQHandler+0x76c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fd fc1d 	bl	8000548 <__aeabi_f2d>
 8002d0e:	a32a      	add	r3, pc, #168	; (adr r3, 8002db8 <EXTI15_10_IRQHandler+0x758>)
 8002d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d14:	f7fd fab8 	bl	8000288 <__aeabi_dsub>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	f7fd ff62 	bl	8000be8 <__aeabi_d2f>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4a29      	ldr	r2, [pc, #164]	; (8002dcc <EXTI15_10_IRQHandler+0x76c>)
 8002d28:	6013      	str	r3, [r2, #0]
										goto END4;
 8002d2a:	e01c      	b.n	8002d66 <EXTI15_10_IRQHandler+0x706>
									}
									case 4:
									{
										while(HAL_GPIO_ReadPin(ROW4_GPIO_Port, ROW4_Pin)==0){}
 8002d2c:	bf00      	nop
 8002d2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002d32:	4825      	ldr	r0, [pc, #148]	; (8002dc8 <EXTI15_10_IRQHandler+0x768>)
 8002d34:	f001 fbd0 	bl	80044d8 <HAL_GPIO_ReadPin>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d0f7      	beq.n	8002d2e <EXTI15_10_IRQHandler+0x6ce>
										//
										COSCom2-=0.1;
 8002d3e:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <EXTI15_10_IRQHandler+0x76c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fc00 	bl	8000548 <__aeabi_f2d>
 8002d48:	a31d      	add	r3, pc, #116	; (adr r3, 8002dc0 <EXTI15_10_IRQHandler+0x760>)
 8002d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4e:	f7fd fa9b 	bl	8000288 <__aeabi_dsub>
 8002d52:	4602      	mov	r2, r0
 8002d54:	460b      	mov	r3, r1
 8002d56:	4610      	mov	r0, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f7fd ff45 	bl	8000be8 <__aeabi_d2f>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	4a1a      	ldr	r2, [pc, #104]	; (8002dcc <EXTI15_10_IRQHandler+0x76c>)
 8002d62:	6013      	str	r3, [r2, #0]
										goto END4;
 8002d64:	bf00      	nop
									}
								}
									END4:
									break;
 8002d66:	e007      	b.n	8002d78 <EXTI15_10_IRQHandler+0x718>
					for(uint8_t i=1;i<5;i++)
 8002d68:	793b      	ldrb	r3, [r7, #4]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	713b      	strb	r3, [r7, #4]
 8002d6e:	793b      	ldrb	r3, [r7, #4]
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	f67f af1d 	bls.w	8002bb0 <EXTI15_10_IRQHandler+0x550>
 8002d76:	e000      	b.n	8002d7a <EXTI15_10_IRQHandler+0x71a>
									break;
 8002d78:	bf00      	nop
							}
				}
					HAL_GPIO_WritePin(COL1_GPIO_Port,COL1_Pin, GPIO_PIN_RESET);
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d80:	4811      	ldr	r0, [pc, #68]	; (8002dc8 <EXTI15_10_IRQHandler+0x768>)
 8002d82:	f001 fbc1 	bl	8004508 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COL2_GPIO_Port,COL2_Pin, GPIO_PIN_RESET);
 8002d86:	2200      	movs	r2, #0
 8002d88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d8c:	480e      	ldr	r0, [pc, #56]	; (8002dc8 <EXTI15_10_IRQHandler+0x768>)
 8002d8e:	f001 fbbb 	bl	8004508 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COL3_GPIO_Port,COL3_Pin, GPIO_PIN_RESET);
 8002d92:	2200      	movs	r2, #0
 8002d94:	2180      	movs	r1, #128	; 0x80
 8002d96:	480c      	ldr	r0, [pc, #48]	; (8002dc8 <EXTI15_10_IRQHandler+0x768>)
 8002d98:	f001 fbb6 	bl	8004508 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(COL4_GPIO_Port,COL4_Pin, GPIO_PIN_RESET);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2102      	movs	r1, #2
 8002da0:	480b      	ldr	r0, [pc, #44]	; (8002dd0 <EXTI15_10_IRQHandler+0x770>)
 8002da2:	f001 fbb1 	bl	8004508 <HAL_GPIO_WritePin>
	  }

				tick = HAL_GetTick();
 8002da6:	f000 fac1 	bl	800332c <HAL_GetTick>
 8002daa:	4603      	mov	r3, r0
 8002dac:	4a09      	ldr	r2, [pc, #36]	; (8002dd4 <EXTI15_10_IRQHandler+0x774>)
 8002dae:	6013      	str	r3, [r2, #0]
}
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002db0:	bf00      	nop
 8002db2:	3708      	adds	r7, #8
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	47ae147b 	.word	0x47ae147b
 8002dbc:	3f847ae1 	.word	0x3f847ae1
 8002dc0:	9999999a 	.word	0x9999999a
 8002dc4:	3fb99999 	.word	0x3fb99999
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	20000004 	.word	0x20000004
 8002dd0:	40021800 	.word	0x40021800
 8002dd4:	200005e4 	.word	0x200005e4

08002dd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
	return 1;
 8002ddc:	2301      	movs	r3, #1
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <_kill>:

int _kill(int pid, int sig)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002df2:	f004 f9d1 	bl	8007198 <__errno>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2216      	movs	r2, #22
 8002dfa:	601a      	str	r2, [r3, #0]
	return -1;
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_exit>:

void _exit (int status)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e10:	f04f 31ff 	mov.w	r1, #4294967295
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ffe7 	bl	8002de8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e1a:	e7fe      	b.n	8002e1a <_exit+0x12>

08002e1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e00a      	b.n	8002e44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e2e:	f3af 8000 	nop.w
 8002e32:	4601      	mov	r1, r0
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	60ba      	str	r2, [r7, #8]
 8002e3a:	b2ca      	uxtb	r2, r1
 8002e3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3301      	adds	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	dbf0      	blt.n	8002e2e <_read+0x12>
	}

return len;
 8002e4c:	687b      	ldr	r3, [r7, #4]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b086      	sub	sp, #24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e009      	b.n	8002e7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	60ba      	str	r2, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	dbf1      	blt.n	8002e68 <_write+0x12>
	}
	return len;
 8002e84:	687b      	ldr	r3, [r7, #4]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <_close>:

int _close(int file)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
	return -1;
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eb6:	605a      	str	r2, [r3, #4]
	return 0;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <_isatty>:

int _isatty(int file)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
	return 1;
 8002ece:	2301      	movs	r3, #1
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
	return 0;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <_sbrk+0x5c>)
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <_sbrk+0x60>)
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <_sbrk+0x64>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <_sbrk+0x64>)
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <_sbrk+0x68>)
 8002f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d207      	bcs.n	8002f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f28:	f004 f936 	bl	8007198 <__errno>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	220c      	movs	r2, #12
 8002f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295
 8002f36:	e009      	b.n	8002f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <_sbrk+0x64>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f3e:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <_sbrk+0x64>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <_sbrk+0x64>)
 8002f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20020000 	.word	0x20020000
 8002f58:	00000400 	.word	0x00000400
 8002f5c:	20000228 	.word	0x20000228
 8002f60:	20000608 	.word	0x20000608

08002f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <SystemInit+0x20>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	4a05      	ldr	r2, [pc, #20]	; (8002f84 <SystemInit+0x20>)
 8002f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f8c:	480d      	ldr	r0, [pc, #52]	; (8002fc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f8e:	490e      	ldr	r1, [pc, #56]	; (8002fc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f90:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f94:	e002      	b.n	8002f9c <LoopCopyDataInit>

08002f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f9a:	3304      	adds	r3, #4

08002f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fa0:	d3f9      	bcc.n	8002f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fa2:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fa4:	4c0b      	ldr	r4, [pc, #44]	; (8002fd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fa8:	e001      	b.n	8002fae <LoopFillZerobss>

08002faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fac:	3204      	adds	r2, #4

08002fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fb0:	d3fb      	bcc.n	8002faa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002fb2:	f7ff ffd7 	bl	8002f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fb6:	f004 f8f5 	bl	80071a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fba:	f7fe f817 	bl	8000fec <main>
  bx  lr    
 8002fbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fc8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002fcc:	0800f05c 	.word	0x0800f05c
  ldr r2, =_sbss
 8002fd0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002fd4:	20000604 	.word	0x20000604

08002fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fd8:	e7fe      	b.n	8002fd8 <ADC_IRQHandler>
	...

08002fdc <LCD_write_byte>:

};


void LCD_write_byte(unsigned char dt, unsigned char command)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	460a      	mov	r2, r1
 8002fe6:	71fb      	strb	r3, [r7, #7]
 8002fe8:	4613      	mov	r3, r2
 8002fea:	71bb      	strb	r3, [r7, #6]
	unsigned char i;  	
    sce0; 	
 8002fec:	2200      	movs	r2, #0
 8002fee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ff2:	4826      	ldr	r0, [pc, #152]	; (800308c <LCD_write_byte+0xb0>)
 8002ff4:	f001 fa88 	bl	8004508 <HAL_GPIO_WritePin>
	if(command)
 8002ff8:	79bb      	ldrb	r3, [r7, #6]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d006      	beq.n	800300c <LCD_write_byte+0x30>
		dc1;
 8002ffe:	2201      	movs	r2, #1
 8003000:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003004:	4822      	ldr	r0, [pc, #136]	; (8003090 <LCD_write_byte+0xb4>)
 8003006:	f001 fa7f 	bl	8004508 <HAL_GPIO_WritePin>
 800300a:	e005      	b.n	8003018 <LCD_write_byte+0x3c>
	else
		dc0;		
 800300c:	2200      	movs	r2, #0
 800300e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003012:	481f      	ldr	r0, [pc, #124]	; (8003090 <LCD_write_byte+0xb4>)
 8003014:	f001 fa78 	bl	8004508 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8003018:	2300      	movs	r3, #0
 800301a:	73fb      	strb	r3, [r7, #15]
 800301c:	e028      	b.n	8003070 <LCD_write_byte+0x94>
	{ 
		if(dt&0x80)
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	2b00      	cmp	r3, #0
 8003024:	da06      	bge.n	8003034 <LCD_write_byte+0x58>
			sdin1;
 8003026:	2201      	movs	r2, #1
 8003028:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800302c:	4818      	ldr	r0, [pc, #96]	; (8003090 <LCD_write_byte+0xb4>)
 800302e:	f001 fa6b 	bl	8004508 <HAL_GPIO_WritePin>
 8003032:	e005      	b.n	8003040 <LCD_write_byte+0x64>
		else
			sdin0;
 8003034:	2200      	movs	r2, #0
 8003036:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800303a:	4815      	ldr	r0, [pc, #84]	; (8003090 <LCD_write_byte+0xb4>)
 800303c:	f001 fa64 	bl	8004508 <HAL_GPIO_WritePin>
		dt=dt<<1;	
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	71fb      	strb	r3, [r7, #7]
		sclk0;
 8003046:	2200      	movs	r2, #0
 8003048:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800304c:	4810      	ldr	r0, [pc, #64]	; (8003090 <LCD_write_byte+0xb4>)
 800304e:	f001 fa5b 	bl	8004508 <HAL_GPIO_WritePin>
		sclk1;
 8003052:	2201      	movs	r2, #1
 8003054:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003058:	480d      	ldr	r0, [pc, #52]	; (8003090 <LCD_write_byte+0xb4>)
 800305a:	f001 fa55 	bl	8004508 <HAL_GPIO_WritePin>
		sclk0;		
 800305e:	2200      	movs	r2, #0
 8003060:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003064:	480a      	ldr	r0, [pc, #40]	; (8003090 <LCD_write_byte+0xb4>)
 8003066:	f001 fa4f 	bl	8004508 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800306a:	7bfb      	ldrb	r3, [r7, #15]
 800306c:	3301      	adds	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
 8003070:	7bfb      	ldrb	r3, [r7, #15]
 8003072:	2b07      	cmp	r3, #7
 8003074:	d9d3      	bls.n	800301e <LCD_write_byte+0x42>
	}
	sce1;
 8003076:	2201      	movs	r2, #1
 8003078:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800307c:	4803      	ldr	r0, [pc, #12]	; (800308c <LCD_write_byte+0xb0>)
 800307e:	f001 fa43 	bl	8004508 <HAL_GPIO_WritePin>
}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000
 8003090:	40020400 	.word	0x40020400

08003094 <LCD_init>:



void LCD_init(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
	//backled1;
	sce0;
 8003098:	2200      	movs	r2, #0
 800309a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800309e:	481e      	ldr	r0, [pc, #120]	; (8003118 <LCD_init+0x84>)
 80030a0:	f001 fa32 	bl	8004508 <HAL_GPIO_WritePin>
	res1;
 80030a4:	2201      	movs	r2, #1
 80030a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030aa:	481b      	ldr	r0, [pc, #108]	; (8003118 <LCD_init+0x84>)
 80030ac:	f001 fa2c 	bl	8004508 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80030b0:	2064      	movs	r0, #100	; 0x64
 80030b2:	f000 f947 	bl	8003344 <HAL_Delay>
	res0;  	
 80030b6:	2200      	movs	r2, #0
 80030b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030bc:	4816      	ldr	r0, [pc, #88]	; (8003118 <LCD_init+0x84>)
 80030be:	f001 fa23 	bl	8004508 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80030c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80030c6:	f000 f93d 	bl	8003344 <HAL_Delay>
	res1;
 80030ca:	2201      	movs	r2, #1
 80030cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030d0:	4811      	ldr	r0, [pc, #68]	; (8003118 <LCD_init+0x84>)
 80030d2:	f001 fa19 	bl	8004508 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80030d6:	2064      	movs	r0, #100	; 0x64
 80030d8:	f000 f934 	bl	8003344 <HAL_Delay>
	LCD_write_byte(0x27,0);//LCD功能设置：芯片活动，水平寻址，使用扩展指令
 80030dc:	2100      	movs	r1, #0
 80030de:	2027      	movs	r0, #39	; 0x27
 80030e0:	f7ff ff7c 	bl	8002fdc <LCD_write_byte>
	LCD_write_byte(0xA1,0);//设置VOP值，室温下的编程范围为3.00-10.68
 80030e4:	2100      	movs	r1, #0
 80030e6:	20a1      	movs	r0, #161	; 0xa1
 80030e8:	f7ff ff78 	bl	8002fdc <LCD_write_byte>
	//Vlcd=3.06+(VOP)*0.06,本例VOP为0B0101 0000为十进制的80，Vlcd=7.86V
	LCD_write_byte(0x14,0);//混合偏执率
 80030ec:	2100      	movs	r1, #0
 80030ee:	2014      	movs	r0, #20
 80030f0:	f7ff ff74 	bl	8002fdc <LCD_write_byte>
	LCD_write_byte(0x20,0);//LCD功能设置：芯片活动，水平寻址，使用基本指令
 80030f4:	2100      	movs	r1, #0
 80030f6:	2020      	movs	r0, #32
 80030f8:	f7ff ff70 	bl	8002fdc <LCD_write_byte>
	LCD_write_byte(0x0C,0);//设定显示配置:普通模式
 80030fc:	2100      	movs	r1, #0
 80030fe:	200c      	movs	r0, #12
 8003100:	f7ff ff6c 	bl	8002fdc <LCD_write_byte>

	LCD_clear();
 8003104:	f000 f834 	bl	8003170 <LCD_clear>
	sce1;
 8003108:	2201      	movs	r2, #1
 800310a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800310e:	4802      	ldr	r0, [pc, #8]	; (8003118 <LCD_init+0x84>)
 8003110:	f001 f9fa 	bl	8004508 <HAL_GPIO_WritePin>
}
 8003114:	bf00      	nop
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40021000 	.word	0x40021000

0800311c <LCD_set_XY>:

void LCD_set_XY(unsigned char X, unsigned char Y)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
 8003122:	4603      	mov	r3, r0
 8003124:	460a      	mov	r2, r1
 8003126:	71fb      	strb	r3, [r7, #7]
 8003128:	4613      	mov	r3, r2
 800312a:	71bb      	strb	r3, [r7, #6]
	sce0;
 800312c:	2200      	movs	r2, #0
 800312e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003132:	480e      	ldr	r0, [pc, #56]	; (800316c <LCD_set_XY+0x50>)
 8003134:	f001 f9e8 	bl	8004508 <HAL_GPIO_WritePin>
	LCD_write_byte(0x40 | Y, 0);// column
 8003138:	79bb      	ldrb	r3, [r7, #6]
 800313a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff ff4a 	bl	8002fdc <LCD_write_byte>
	LCD_write_byte(0x80 | X, 0);// row
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2100      	movs	r1, #0
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff ff42 	bl	8002fdc <LCD_write_byte>
	sce1;
 8003158:	2201      	movs	r2, #1
 800315a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800315e:	4803      	ldr	r0, [pc, #12]	; (800316c <LCD_set_XY+0x50>)
 8003160:	f001 f9d2 	bl	8004508 <HAL_GPIO_WritePin>
} 
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021000 	.word	0x40021000

08003170 <LCD_clear>:

void LCD_clear(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
	sce0;
 8003176:	2200      	movs	r2, #0
 8003178:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800317c:	4814      	ldr	r0, [pc, #80]	; (80031d0 <LCD_clear+0x60>)
 800317e:	f001 f9c3 	bl	8004508 <HAL_GPIO_WritePin>
	unsigned char t;
	unsigned char k;
	LCD_set_XY(0,0);
 8003182:	2100      	movs	r1, #0
 8003184:	2000      	movs	r0, #0
 8003186:	f7ff ffc9 	bl	800311c <LCD_set_XY>
	for(t=0;t<6;t++)
 800318a:	2300      	movs	r3, #0
 800318c:	71fb      	strb	r3, [r7, #7]
 800318e:	e012      	b.n	80031b6 <LCD_clear+0x46>
	{ 
		for(k=0;k<84;k++)
 8003190:	2300      	movs	r3, #0
 8003192:	71bb      	strb	r3, [r7, #6]
 8003194:	e009      	b.n	80031aa <LCD_clear+0x3a>
		{ 
			HAL_Delay(1);
 8003196:	2001      	movs	r0, #1
 8003198:	f000 f8d4 	bl	8003344 <HAL_Delay>
			LCD_write_byte(0x00,1);	 						
 800319c:	2101      	movs	r1, #1
 800319e:	2000      	movs	r0, #0
 80031a0:	f7ff ff1c 	bl	8002fdc <LCD_write_byte>
		for(k=0;k<84;k++)
 80031a4:	79bb      	ldrb	r3, [r7, #6]
 80031a6:	3301      	adds	r3, #1
 80031a8:	71bb      	strb	r3, [r7, #6]
 80031aa:	79bb      	ldrb	r3, [r7, #6]
 80031ac:	2b53      	cmp	r3, #83	; 0x53
 80031ae:	d9f2      	bls.n	8003196 <LCD_clear+0x26>
	for(t=0;t<6;t++)
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	3301      	adds	r3, #1
 80031b4:	71fb      	strb	r3, [r7, #7]
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	2b05      	cmp	r3, #5
 80031ba:	d9e9      	bls.n	8003190 <LCD_clear+0x20>
		} 
	}
	sce1;
 80031bc:	2201      	movs	r2, #1
 80031be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80031c2:	4803      	ldr	r0, [pc, #12]	; (80031d0 <LCD_clear+0x60>)
 80031c4:	f001 f9a0 	bl	8004508 <HAL_GPIO_WritePin>
}
 80031c8:	bf00      	nop
 80031ca:	3708      	adds	r7, #8
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40021000 	.word	0x40021000

080031d4 <LCD_write_char>:

void LCD_write_char(unsigned char c)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b084      	sub	sp, #16
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	71fb      	strb	r3, [r7, #7]
	unsigned char line;
	c-= 32;
 80031de:	79fb      	ldrb	r3, [r7, #7]
 80031e0:	3b20      	subs	r3, #32
 80031e2:	71fb      	strb	r3, [r7, #7]
	for (line=0; line<6; line++)
 80031e4:	2300      	movs	r3, #0
 80031e6:	73fb      	strb	r3, [r7, #15]
 80031e8:	e010      	b.n	800320c <LCD_write_char+0x38>
	LCD_write_byte(font6x8[c][line], 1);
 80031ea:	79fa      	ldrb	r2, [r7, #7]
 80031ec:	7bf9      	ldrb	r1, [r7, #15]
 80031ee:	480b      	ldr	r0, [pc, #44]	; (800321c <LCD_write_char+0x48>)
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4403      	add	r3, r0
 80031fa:	440b      	add	r3, r1
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2101      	movs	r1, #1
 8003200:	4618      	mov	r0, r3
 8003202:	f7ff feeb 	bl	8002fdc <LCD_write_byte>
	for (line=0; line<6; line++)
 8003206:	7bfb      	ldrb	r3, [r7, #15]
 8003208:	3301      	adds	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	2b05      	cmp	r3, #5
 8003210:	d9eb      	bls.n	80031ea <LCD_write_char+0x16>
}
 8003212:	bf00      	nop
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	0800e968 	.word	0x0800e968

08003220 <LCD_write_String>:

void LCD_write_String(unsigned char X,unsigned char Y,char *s)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	603a      	str	r2, [r7, #0]
 800322a:	71fb      	strb	r3, [r7, #7]
 800322c:	460b      	mov	r3, r1
 800322e:	71bb      	strb	r3, [r7, #6]
	LCD_set_XY(X,Y);
 8003230:	79ba      	ldrb	r2, [r7, #6]
 8003232:	79fb      	ldrb	r3, [r7, #7]
 8003234:	4611      	mov	r1, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff ff70 	bl	800311c <LCD_set_XY>
	while (*s) 
 800323c:	e007      	b.n	800324e <LCD_write_String+0x2e>
	{
		LCD_write_char(*s);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	f7ff ffc6 	bl	80031d4 <LCD_write_char>
		s++;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	3301      	adds	r3, #1
 800324c:	603b      	str	r3, [r7, #0]
	while (*s) 
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f3      	bne.n	800323e <LCD_write_String+0x1e>
	}
} 
 8003256:	bf00      	nop
 8003258:	bf00      	nop
 800325a:	3708      	adds	r7, #8
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}

08003260 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003264:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <HAL_Init+0x40>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a0d      	ldr	r2, [pc, #52]	; (80032a0 <HAL_Init+0x40>)
 800326a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800326e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <HAL_Init+0x40>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <HAL_Init+0x40>)
 8003276:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800327a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800327c:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <HAL_Init+0x40>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a07      	ldr	r2, [pc, #28]	; (80032a0 <HAL_Init+0x40>)
 8003282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003286:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003288:	2003      	movs	r0, #3
 800328a:	f000 fd61 	bl	8003d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800328e:	2000      	movs	r0, #0
 8003290:	f000 f808 	bl	80032a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003294:	f7fe fb7e 	bl	8001994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40023c00 	.word	0x40023c00

080032a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <HAL_InitTick+0x54>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	4b12      	ldr	r3, [pc, #72]	; (80032fc <HAL_InitTick+0x58>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	4619      	mov	r1, r3
 80032b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80032be:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fd79 	bl	8003dba <HAL_SYSTICK_Config>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e00e      	b.n	80032f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b0f      	cmp	r3, #15
 80032d6:	d80a      	bhi.n	80032ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032d8:	2200      	movs	r2, #0
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	f04f 30ff 	mov.w	r0, #4294967295
 80032e0:	f000 fd41 	bl	8003d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032e4:	4a06      	ldr	r2, [pc, #24]	; (8003300 <HAL_InitTick+0x5c>)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
 80032ec:	e000      	b.n	80032f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	20000018 	.word	0x20000018
 80032fc:	20000020 	.word	0x20000020
 8003300:	2000001c 	.word	0x2000001c

08003304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_IncTick+0x20>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	461a      	mov	r2, r3
 800330e:	4b06      	ldr	r3, [pc, #24]	; (8003328 <HAL_IncTick+0x24>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4413      	add	r3, r2
 8003314:	4a04      	ldr	r2, [pc, #16]	; (8003328 <HAL_IncTick+0x24>)
 8003316:	6013      	str	r3, [r2, #0]
}
 8003318:	bf00      	nop
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	20000020 	.word	0x20000020
 8003328:	200005f0 	.word	0x200005f0

0800332c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return uwTick;
 8003330:	4b03      	ldr	r3, [pc, #12]	; (8003340 <HAL_GetTick+0x14>)
 8003332:	681b      	ldr	r3, [r3, #0]
}
 8003334:	4618      	mov	r0, r3
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	200005f0 	.word	0x200005f0

08003344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800334c:	f7ff ffee 	bl	800332c <HAL_GetTick>
 8003350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d005      	beq.n	800336a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800335e:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <HAL_Delay+0x44>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	461a      	mov	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800336a:	bf00      	nop
 800336c:	f7ff ffde 	bl	800332c <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	429a      	cmp	r2, r3
 800337a:	d8f7      	bhi.n	800336c <HAL_Delay+0x28>
  {
  }
}
 800337c:	bf00      	nop
 800337e:	bf00      	nop
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	20000020 	.word	0x20000020

0800338c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e033      	b.n	800340a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d109      	bne.n	80033be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f7fe fb1a 	bl	80019e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f003 0310 	and.w	r3, r3, #16
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d118      	bne.n	80033fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80033d2:	f023 0302 	bic.w	r3, r3, #2
 80033d6:	f043 0202 	orr.w	r2, r3, #2
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f000 fa68 	bl	80038b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ee:	f023 0303 	bic.w	r3, r3, #3
 80033f2:	f043 0201 	orr.w	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
 80033fa:	e001      	b.n	8003400 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003408:	7bfb      	ldrb	r3, [r7, #15]
}
 800340a:	4618      	mov	r0, r3
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_ADC_Start_DMA+0x1e>
 800342e:	2302      	movs	r3, #2
 8003430:	e0e9      	b.n	8003606 <HAL_ADC_Start_DMA+0x1f2>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d018      	beq.n	800347a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003458:	4b6d      	ldr	r3, [pc, #436]	; (8003610 <HAL_ADC_Start_DMA+0x1fc>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a6d      	ldr	r2, [pc, #436]	; (8003614 <HAL_ADC_Start_DMA+0x200>)
 800345e:	fba2 2303 	umull	r2, r3, r2, r3
 8003462:	0c9a      	lsrs	r2, r3, #18
 8003464:	4613      	mov	r3, r2
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	4413      	add	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800346c:	e002      	b.n	8003474 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	3b01      	subs	r3, #1
 8003472:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f9      	bne.n	800346e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003488:	d107      	bne.n	800349a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003498:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	f040 80a1 	bne.w	80035ec <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80034d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034e8:	d106      	bne.n	80034f8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ee:	f023 0206 	bic.w	r2, r3, #6
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44
 80034f6:	e002      	b.n	80034fe <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003506:	4b44      	ldr	r3, [pc, #272]	; (8003618 <HAL_ADC_Start_DMA+0x204>)
 8003508:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350e:	4a43      	ldr	r2, [pc, #268]	; (800361c <HAL_ADC_Start_DMA+0x208>)
 8003510:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003516:	4a42      	ldr	r2, [pc, #264]	; (8003620 <HAL_ADC_Start_DMA+0x20c>)
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	4a41      	ldr	r2, [pc, #260]	; (8003624 <HAL_ADC_Start_DMA+0x210>)
 8003520:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800352a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800353a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800354a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	334c      	adds	r3, #76	; 0x4c
 8003556:	4619      	mov	r1, r3
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	f000 fce8 	bl	8003f30 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 031f 	and.w	r3, r3, #31
 8003568:	2b00      	cmp	r3, #0
 800356a:	d12a      	bne.n	80035c2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2d      	ldr	r2, [pc, #180]	; (8003628 <HAL_ADC_Start_DMA+0x214>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d015      	beq.n	80035a2 <HAL_ADC_Start_DMA+0x18e>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2c      	ldr	r2, [pc, #176]	; (800362c <HAL_ADC_Start_DMA+0x218>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d105      	bne.n	800358c <HAL_ADC_Start_DMA+0x178>
 8003580:	4b25      	ldr	r3, [pc, #148]	; (8003618 <HAL_ADC_Start_DMA+0x204>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a27      	ldr	r2, [pc, #156]	; (8003630 <HAL_ADC_Start_DMA+0x21c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d136      	bne.n	8003604 <HAL_ADC_Start_DMA+0x1f0>
 8003596:	4b20      	ldr	r3, [pc, #128]	; (8003618 <HAL_ADC_Start_DMA+0x204>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f003 0310 	and.w	r3, r3, #16
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d130      	bne.n	8003604 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d129      	bne.n	8003604 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	e020      	b.n	8003604 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a18      	ldr	r2, [pc, #96]	; (8003628 <HAL_ADC_Start_DMA+0x214>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d11b      	bne.n	8003604 <HAL_ADC_Start_DMA+0x1f0>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d114      	bne.n	8003604 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80035e8:	609a      	str	r2, [r3, #8]
 80035ea:	e00b      	b.n	8003604 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	f043 0210 	orr.w	r2, r3, #16
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fc:	f043 0201 	orr.w	r2, r3, #1
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000018 	.word	0x20000018
 8003614:	431bde83 	.word	0x431bde83
 8003618:	40012300 	.word	0x40012300
 800361c:	08003aad 	.word	0x08003aad
 8003620:	08003b67 	.word	0x08003b67
 8003624:	08003b83 	.word	0x08003b83
 8003628:	40012000 	.word	0x40012000
 800362c:	40012100 	.word	0x40012100
 8003630:	40012200 	.word	0x40012200

08003634 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003670:	b480      	push	{r7}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800367a:	2300      	movs	r3, #0
 800367c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_ADC_ConfigChannel+0x1c>
 8003688:	2302      	movs	r3, #2
 800368a:	e105      	b.n	8003898 <HAL_ADC_ConfigChannel+0x228>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b09      	cmp	r3, #9
 800369a:	d925      	bls.n	80036e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68d9      	ldr	r1, [r3, #12]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	461a      	mov	r2, r3
 80036aa:	4613      	mov	r3, r2
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	4413      	add	r3, r2
 80036b0:	3b1e      	subs	r3, #30
 80036b2:	2207      	movs	r2, #7
 80036b4:	fa02 f303 	lsl.w	r3, r2, r3
 80036b8:	43da      	mvns	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	400a      	ands	r2, r1
 80036c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68d9      	ldr	r1, [r3, #12]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	4618      	mov	r0, r3
 80036d4:	4603      	mov	r3, r0
 80036d6:	005b      	lsls	r3, r3, #1
 80036d8:	4403      	add	r3, r0
 80036da:	3b1e      	subs	r3, #30
 80036dc:	409a      	lsls	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	430a      	orrs	r2, r1
 80036e4:	60da      	str	r2, [r3, #12]
 80036e6:	e022      	b.n	800372e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6919      	ldr	r1, [r3, #16]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	4613      	mov	r3, r2
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	4413      	add	r3, r2
 80036fc:	2207      	movs	r2, #7
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43da      	mvns	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	400a      	ands	r2, r1
 800370a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6919      	ldr	r1, [r3, #16]
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	689a      	ldr	r2, [r3, #8]
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	b29b      	uxth	r3, r3
 800371c:	4618      	mov	r0, r3
 800371e:	4603      	mov	r3, r0
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	4403      	add	r3, r0
 8003724:	409a      	lsls	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b06      	cmp	r3, #6
 8003734:	d824      	bhi.n	8003780 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685a      	ldr	r2, [r3, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	3b05      	subs	r3, #5
 8003748:	221f      	movs	r2, #31
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43da      	mvns	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	400a      	ands	r2, r1
 8003756:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	4618      	mov	r0, r3
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	3b05      	subs	r3, #5
 8003772:	fa00 f203 	lsl.w	r2, r0, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	635a      	str	r2, [r3, #52]	; 0x34
 800377e:	e04c      	b.n	800381a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	2b0c      	cmp	r3, #12
 8003786:	d824      	bhi.n	80037d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685a      	ldr	r2, [r3, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	3b23      	subs	r3, #35	; 0x23
 800379a:	221f      	movs	r2, #31
 800379c:	fa02 f303 	lsl.w	r3, r2, r3
 80037a0:	43da      	mvns	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	400a      	ands	r2, r1
 80037a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	4618      	mov	r0, r3
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	4413      	add	r3, r2
 80037c2:	3b23      	subs	r3, #35	; 0x23
 80037c4:	fa00 f203 	lsl.w	r2, r0, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	430a      	orrs	r2, r1
 80037ce:	631a      	str	r2, [r3, #48]	; 0x30
 80037d0:	e023      	b.n	800381a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685a      	ldr	r2, [r3, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	3b41      	subs	r3, #65	; 0x41
 80037e4:	221f      	movs	r2, #31
 80037e6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ea:	43da      	mvns	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	400a      	ands	r2, r1
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	b29b      	uxth	r3, r3
 8003800:	4618      	mov	r0, r3
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	3b41      	subs	r3, #65	; 0x41
 800380e:	fa00 f203 	lsl.w	r2, r0, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800381a:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <HAL_ADC_ConfigChannel+0x234>)
 800381c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a21      	ldr	r2, [pc, #132]	; (80038a8 <HAL_ADC_ConfigChannel+0x238>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d109      	bne.n	800383c <HAL_ADC_ConfigChannel+0x1cc>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b12      	cmp	r3, #18
 800382e:	d105      	bne.n	800383c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a19      	ldr	r2, [pc, #100]	; (80038a8 <HAL_ADC_ConfigChannel+0x238>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d123      	bne.n	800388e <HAL_ADC_ConfigChannel+0x21e>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b10      	cmp	r3, #16
 800384c:	d003      	beq.n	8003856 <HAL_ADC_ConfigChannel+0x1e6>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b11      	cmp	r3, #17
 8003854:	d11b      	bne.n	800388e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2b10      	cmp	r3, #16
 8003868:	d111      	bne.n	800388e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800386a:	4b10      	ldr	r3, [pc, #64]	; (80038ac <HAL_ADC_ConfigChannel+0x23c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a10      	ldr	r2, [pc, #64]	; (80038b0 <HAL_ADC_ConfigChannel+0x240>)
 8003870:	fba2 2303 	umull	r2, r3, r2, r3
 8003874:	0c9a      	lsrs	r2, r3, #18
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003880:	e002      	b.n	8003888 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	3b01      	subs	r3, #1
 8003886:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f9      	bne.n	8003882 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3714      	adds	r7, #20
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40012300 	.word	0x40012300
 80038a8:	40012000 	.word	0x40012000
 80038ac:	20000018 	.word	0x20000018
 80038b0:	431bde83 	.word	0x431bde83

080038b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038bc:	4b79      	ldr	r3, [pc, #484]	; (8003aa4 <ADC_Init+0x1f0>)
 80038be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	431a      	orrs	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6859      	ldr	r1, [r3, #4]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	021a      	lsls	r2, r3, #8
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800390c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6859      	ldr	r1, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689a      	ldr	r2, [r3, #8]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689a      	ldr	r2, [r3, #8]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800392e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6899      	ldr	r1, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	430a      	orrs	r2, r1
 8003940:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003946:	4a58      	ldr	r2, [pc, #352]	; (8003aa8 <ADC_Init+0x1f4>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d022      	beq.n	8003992 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800395a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6899      	ldr	r1, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	430a      	orrs	r2, r1
 800396c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	689a      	ldr	r2, [r3, #8]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800397c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6899      	ldr	r1, [r3, #8]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	e00f      	b.n	80039b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689a      	ldr	r2, [r3, #8]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80039a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	689a      	ldr	r2, [r3, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80039b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0202 	bic.w	r2, r2, #2
 80039c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6899      	ldr	r1, [r3, #8]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	7e1b      	ldrb	r3, [r3, #24]
 80039cc:	005a      	lsls	r2, r3, #1
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d01b      	beq.n	8003a18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80039fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6859      	ldr	r1, [r3, #4]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	035a      	lsls	r2, r3, #13
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	e007      	b.n	8003a28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685a      	ldr	r2, [r3, #4]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69db      	ldr	r3, [r3, #28]
 8003a42:	3b01      	subs	r3, #1
 8003a44:	051a      	lsls	r2, r3, #20
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6899      	ldr	r1, [r3, #8]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003a6a:	025a      	lsls	r2, r3, #9
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6899      	ldr	r1, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	029a      	lsls	r2, r3, #10
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	609a      	str	r2, [r3, #8]
}
 8003a98:	bf00      	nop
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr
 8003aa4:	40012300 	.word	0x40012300
 8003aa8:	0f000001 	.word	0x0f000001

08003aac <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d13c      	bne.n	8003b40 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d12b      	bne.n	8003b38 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d127      	bne.n	8003b38 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aee:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d006      	beq.n	8003b04 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d119      	bne.n	8003b38 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685a      	ldr	r2, [r3, #4]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0220 	bic.w	r2, r2, #32
 8003b12:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d105      	bne.n	8003b38 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b30:	f043 0201 	orr.w	r2, r3, #1
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f7ff fd7b 	bl	8003634 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003b3e:	e00e      	b.n	8003b5e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f7ff fd85 	bl	800365c <HAL_ADC_ErrorCallback>
}
 8003b52:	e004      	b.n	8003b5e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
}
 8003b5e:	bf00      	nop
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b72:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f7ff fd67 	bl	8003648 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003b7a:	bf00      	nop
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b084      	sub	sp, #16
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b8e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2240      	movs	r2, #64	; 0x40
 8003b94:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f043 0204 	orr.w	r2, r3, #4
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f7ff fd5a 	bl	800365c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ba8:	bf00      	nop
 8003baa:	3710      	adds	r7, #16
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f003 0307 	and.w	r3, r3, #7
 8003bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bc0:	4b0c      	ldr	r3, [pc, #48]	; (8003bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bcc:	4013      	ands	r3, r2
 8003bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003bd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003be2:	4a04      	ldr	r2, [pc, #16]	; (8003bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	60d3      	str	r3, [r2, #12]
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr
 8003bf4:	e000ed00 	.word	0xe000ed00

08003bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bfc:	4b04      	ldr	r3, [pc, #16]	; (8003c10 <__NVIC_GetPriorityGrouping+0x18>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	0a1b      	lsrs	r3, r3, #8
 8003c02:	f003 0307 	and.w	r3, r3, #7
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	e000ed00 	.word	0xe000ed00

08003c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	db0b      	blt.n	8003c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c26:	79fb      	ldrb	r3, [r7, #7]
 8003c28:	f003 021f 	and.w	r2, r3, #31
 8003c2c:	4907      	ldr	r1, [pc, #28]	; (8003c4c <__NVIC_EnableIRQ+0x38>)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	2001      	movs	r0, #1
 8003c36:	fa00 f202 	lsl.w	r2, r0, r2
 8003c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	e000e100 	.word	0xe000e100

08003c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	6039      	str	r1, [r7, #0]
 8003c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	db0a      	blt.n	8003c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	490c      	ldr	r1, [pc, #48]	; (8003c9c <__NVIC_SetPriority+0x4c>)
 8003c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6e:	0112      	lsls	r2, r2, #4
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	440b      	add	r3, r1
 8003c74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c78:	e00a      	b.n	8003c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	b2da      	uxtb	r2, r3
 8003c7e:	4908      	ldr	r1, [pc, #32]	; (8003ca0 <__NVIC_SetPriority+0x50>)
 8003c80:	79fb      	ldrb	r3, [r7, #7]
 8003c82:	f003 030f 	and.w	r3, r3, #15
 8003c86:	3b04      	subs	r3, #4
 8003c88:	0112      	lsls	r2, r2, #4
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	761a      	strb	r2, [r3, #24]
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	e000e100 	.word	0xe000e100
 8003ca0:	e000ed00 	.word	0xe000ed00

08003ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b089      	sub	sp, #36	; 0x24
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 0307 	and.w	r3, r3, #7
 8003cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f1c3 0307 	rsb	r3, r3, #7
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	bf28      	it	cs
 8003cc2:	2304      	movcs	r3, #4
 8003cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	2b06      	cmp	r3, #6
 8003ccc:	d902      	bls.n	8003cd4 <NVIC_EncodePriority+0x30>
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3b03      	subs	r3, #3
 8003cd2:	e000      	b.n	8003cd6 <NVIC_EncodePriority+0x32>
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43da      	mvns	r2, r3
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	401a      	ands	r2, r3
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cec:	f04f 31ff 	mov.w	r1, #4294967295
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf6:	43d9      	mvns	r1, r3
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cfc:	4313      	orrs	r3, r2
         );
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3724      	adds	r7, #36	; 0x24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
	...

08003d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d1c:	d301      	bcc.n	8003d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e00f      	b.n	8003d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d22:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <SysTick_Config+0x40>)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	3b01      	subs	r3, #1
 8003d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d2a:	210f      	movs	r1, #15
 8003d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d30:	f7ff ff8e 	bl	8003c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d34:	4b05      	ldr	r3, [pc, #20]	; (8003d4c <SysTick_Config+0x40>)
 8003d36:	2200      	movs	r2, #0
 8003d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d3a:	4b04      	ldr	r3, [pc, #16]	; (8003d4c <SysTick_Config+0x40>)
 8003d3c:	2207      	movs	r2, #7
 8003d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	e000e010 	.word	0xe000e010

08003d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff ff29 	bl	8003bb0 <__NVIC_SetPriorityGrouping>
}
 8003d5e:	bf00      	nop
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b086      	sub	sp, #24
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	607a      	str	r2, [r7, #4]
 8003d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d78:	f7ff ff3e 	bl	8003bf8 <__NVIC_GetPriorityGrouping>
 8003d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68b9      	ldr	r1, [r7, #8]
 8003d82:	6978      	ldr	r0, [r7, #20]
 8003d84:	f7ff ff8e 	bl	8003ca4 <NVIC_EncodePriority>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d8e:	4611      	mov	r1, r2
 8003d90:	4618      	mov	r0, r3
 8003d92:	f7ff ff5d 	bl	8003c50 <__NVIC_SetPriority>
}
 8003d96:	bf00      	nop
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d9e:	b580      	push	{r7, lr}
 8003da0:	b082      	sub	sp, #8
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	4603      	mov	r3, r0
 8003da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7ff ff31 	bl	8003c14 <__NVIC_EnableIRQ>
}
 8003db2:	bf00      	nop
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f7ff ffa2 	bl	8003d0c <SysTick_Config>
 8003dc8:	4603      	mov	r3, r0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
	...

08003dd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003de0:	f7ff faa4 	bl	800332c <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d101      	bne.n	8003df0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e099      	b.n	8003f24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0201 	bic.w	r2, r2, #1
 8003e0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e10:	e00f      	b.n	8003e32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e12:	f7ff fa8b 	bl	800332c <HAL_GetTick>
 8003e16:	4602      	mov	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d908      	bls.n	8003e32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2203      	movs	r2, #3
 8003e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e078      	b.n	8003f24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e8      	bne.n	8003e12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	4b38      	ldr	r3, [pc, #224]	; (8003f2c <HAL_DMA_Init+0x158>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685a      	ldr	r2, [r3, #4]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
 8003e70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	2b04      	cmp	r3, #4
 8003e8a:	d107      	bne.n	8003e9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e94:	4313      	orrs	r3, r2
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	f023 0307 	bic.w	r3, r3, #7
 8003eb2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	d117      	bne.n	8003ef6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00e      	beq.n	8003ef6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f8e5 	bl	80040a8 <DMA_CheckFifoParam>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2240      	movs	r2, #64	; 0x40
 8003ee8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e016      	b.n	8003f24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f000 f89c 	bl	800403c <DMA_CalcBaseAndBitshift>
 8003f04:	4603      	mov	r3, r0
 8003f06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f0c:	223f      	movs	r2, #63	; 0x3f
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2200      	movs	r2, #0
 8003f18:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	f010803f 	.word	0xf010803f

08003f30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b086      	sub	sp, #24
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	60f8      	str	r0, [r7, #12]
 8003f38:	60b9      	str	r1, [r7, #8]
 8003f3a:	607a      	str	r2, [r7, #4]
 8003f3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d101      	bne.n	8003f56 <HAL_DMA_Start_IT+0x26>
 8003f52:	2302      	movs	r3, #2
 8003f54:	e040      	b.n	8003fd8 <HAL_DMA_Start_IT+0xa8>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d12f      	bne.n	8003fca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2200      	movs	r2, #0
 8003f76:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	68b9      	ldr	r1, [r7, #8]
 8003f7e:	68f8      	ldr	r0, [r7, #12]
 8003f80:	f000 f82e 	bl	8003fe0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f88:	223f      	movs	r2, #63	; 0x3f
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0216 	orr.w	r2, r2, #22
 8003f9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0208 	orr.w	r2, r2, #8
 8003fb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	e005      	b.n	8003fd6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ffc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b40      	cmp	r3, #64	; 0x40
 800400c:	d108      	bne.n	8004020 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800401e:	e007      	b.n	8004030 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	60da      	str	r2, [r3, #12]
}
 8004030:	bf00      	nop
 8004032:	3714      	adds	r7, #20
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr

0800403c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800403c:	b480      	push	{r7}
 800403e:	b085      	sub	sp, #20
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	3b10      	subs	r3, #16
 800404c:	4a14      	ldr	r2, [pc, #80]	; (80040a0 <DMA_CalcBaseAndBitshift+0x64>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	091b      	lsrs	r3, r3, #4
 8004054:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004056:	4a13      	ldr	r2, [pc, #76]	; (80040a4 <DMA_CalcBaseAndBitshift+0x68>)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4413      	add	r3, r2
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2b03      	cmp	r3, #3
 8004068:	d909      	bls.n	800407e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004072:	f023 0303 	bic.w	r3, r3, #3
 8004076:	1d1a      	adds	r2, r3, #4
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	659a      	str	r2, [r3, #88]	; 0x58
 800407c:	e007      	b.n	800408e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004086:	f023 0303 	bic.w	r3, r3, #3
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004092:	4618      	mov	r0, r3
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr
 800409e:	bf00      	nop
 80040a0:	aaaaaaab 	.word	0xaaaaaaab
 80040a4:	0800eb90 	.word	0x0800eb90

080040a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b0:	2300      	movs	r3, #0
 80040b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699b      	ldr	r3, [r3, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d11f      	bne.n	8004102 <DMA_CheckFifoParam+0x5a>
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	2b03      	cmp	r3, #3
 80040c6:	d856      	bhi.n	8004176 <DMA_CheckFifoParam+0xce>
 80040c8:	a201      	add	r2, pc, #4	; (adr r2, 80040d0 <DMA_CheckFifoParam+0x28>)
 80040ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ce:	bf00      	nop
 80040d0:	080040e1 	.word	0x080040e1
 80040d4:	080040f3 	.word	0x080040f3
 80040d8:	080040e1 	.word	0x080040e1
 80040dc:	08004177 	.word	0x08004177
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d046      	beq.n	800417a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040f0:	e043      	b.n	800417a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80040fa:	d140      	bne.n	800417e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004100:	e03d      	b.n	800417e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800410a:	d121      	bne.n	8004150 <DMA_CheckFifoParam+0xa8>
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b03      	cmp	r3, #3
 8004110:	d837      	bhi.n	8004182 <DMA_CheckFifoParam+0xda>
 8004112:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <DMA_CheckFifoParam+0x70>)
 8004114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004118:	08004129 	.word	0x08004129
 800411c:	0800412f 	.word	0x0800412f
 8004120:	08004129 	.word	0x08004129
 8004124:	08004141 	.word	0x08004141
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	73fb      	strb	r3, [r7, #15]
      break;
 800412c:	e030      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d025      	beq.n	8004186 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800413e:	e022      	b.n	8004186 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004144:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004148:	d11f      	bne.n	800418a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800414e:	e01c      	b.n	800418a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d903      	bls.n	800415e <DMA_CheckFifoParam+0xb6>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b03      	cmp	r3, #3
 800415a:	d003      	beq.n	8004164 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800415c:	e018      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	73fb      	strb	r3, [r7, #15]
      break;
 8004162:	e015      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00e      	beq.n	800418e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
      break;
 8004174:	e00b      	b.n	800418e <DMA_CheckFifoParam+0xe6>
      break;
 8004176:	bf00      	nop
 8004178:	e00a      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
      break;
 800417a:	bf00      	nop
 800417c:	e008      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
      break;
 800417e:	bf00      	nop
 8004180:	e006      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
      break;
 8004182:	bf00      	nop
 8004184:	e004      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
      break;
 8004186:	bf00      	nop
 8004188:	e002      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
      break;   
 800418a:	bf00      	nop
 800418c:	e000      	b.n	8004190 <DMA_CheckFifoParam+0xe8>
      break;
 800418e:	bf00      	nop
    }
  } 
  
  return status; 
 8004190:	7bfb      	ldrb	r3, [r7, #15]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop

080041a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b089      	sub	sp, #36	; 0x24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041b6:	2300      	movs	r3, #0
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	e16b      	b.n	8004494 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80041bc:	2201      	movs	r2, #1
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4013      	ands	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	f040 815a 	bne.w	800448e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d005      	beq.n	80041f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d130      	bne.n	8004254 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	005b      	lsls	r3, r3, #1
 80041fc:	2203      	movs	r2, #3
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43db      	mvns	r3, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4013      	ands	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	005b      	lsls	r3, r3, #1
 8004212:	fa02 f303 	lsl.w	r3, r2, r3
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4313      	orrs	r3, r2
 800421a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004228:	2201      	movs	r2, #1
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4013      	ands	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	091b      	lsrs	r3, r3, #4
 800423e:	f003 0201 	and.w	r2, r3, #1
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4313      	orrs	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f003 0303 	and.w	r3, r3, #3
 800425c:	2b03      	cmp	r3, #3
 800425e:	d017      	beq.n	8004290 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	2203      	movs	r2, #3
 800426c:	fa02 f303 	lsl.w	r3, r2, r3
 8004270:	43db      	mvns	r3, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4013      	ands	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689a      	ldr	r2, [r3, #8]
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d123      	bne.n	80042e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	08da      	lsrs	r2, r3, #3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3208      	adds	r2, #8
 80042a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	220f      	movs	r2, #15
 80042b4:	fa02 f303 	lsl.w	r3, r2, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69ba      	ldr	r2, [r7, #24]
 80042bc:	4013      	ands	r3, r2
 80042be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	691a      	ldr	r2, [r3, #16]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	08da      	lsrs	r2, r3, #3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3208      	adds	r2, #8
 80042de:	69b9      	ldr	r1, [r7, #24]
 80042e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	2203      	movs	r2, #3
 80042f0:	fa02 f303 	lsl.w	r3, r2, r3
 80042f4:	43db      	mvns	r3, r3
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4013      	ands	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 0203 	and.w	r2, r3, #3
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	4313      	orrs	r3, r2
 8004310:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80b4 	beq.w	800448e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004326:	2300      	movs	r3, #0
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	4b60      	ldr	r3, [pc, #384]	; (80044ac <HAL_GPIO_Init+0x30c>)
 800432c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800432e:	4a5f      	ldr	r2, [pc, #380]	; (80044ac <HAL_GPIO_Init+0x30c>)
 8004330:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004334:	6453      	str	r3, [r2, #68]	; 0x44
 8004336:	4b5d      	ldr	r3, [pc, #372]	; (80044ac <HAL_GPIO_Init+0x30c>)
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004342:	4a5b      	ldr	r2, [pc, #364]	; (80044b0 <HAL_GPIO_Init+0x310>)
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	089b      	lsrs	r3, r3, #2
 8004348:	3302      	adds	r3, #2
 800434a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800434e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f003 0303 	and.w	r3, r3, #3
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	220f      	movs	r2, #15
 800435a:	fa02 f303 	lsl.w	r3, r2, r3
 800435e:	43db      	mvns	r3, r3
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	4013      	ands	r3, r2
 8004364:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a52      	ldr	r2, [pc, #328]	; (80044b4 <HAL_GPIO_Init+0x314>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d02b      	beq.n	80043c6 <HAL_GPIO_Init+0x226>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a51      	ldr	r2, [pc, #324]	; (80044b8 <HAL_GPIO_Init+0x318>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d025      	beq.n	80043c2 <HAL_GPIO_Init+0x222>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a50      	ldr	r2, [pc, #320]	; (80044bc <HAL_GPIO_Init+0x31c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d01f      	beq.n	80043be <HAL_GPIO_Init+0x21e>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a4f      	ldr	r2, [pc, #316]	; (80044c0 <HAL_GPIO_Init+0x320>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d019      	beq.n	80043ba <HAL_GPIO_Init+0x21a>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a4e      	ldr	r2, [pc, #312]	; (80044c4 <HAL_GPIO_Init+0x324>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d013      	beq.n	80043b6 <HAL_GPIO_Init+0x216>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a4d      	ldr	r2, [pc, #308]	; (80044c8 <HAL_GPIO_Init+0x328>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d00d      	beq.n	80043b2 <HAL_GPIO_Init+0x212>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a4c      	ldr	r2, [pc, #304]	; (80044cc <HAL_GPIO_Init+0x32c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d007      	beq.n	80043ae <HAL_GPIO_Init+0x20e>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a4b      	ldr	r2, [pc, #300]	; (80044d0 <HAL_GPIO_Init+0x330>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d101      	bne.n	80043aa <HAL_GPIO_Init+0x20a>
 80043a6:	2307      	movs	r3, #7
 80043a8:	e00e      	b.n	80043c8 <HAL_GPIO_Init+0x228>
 80043aa:	2308      	movs	r3, #8
 80043ac:	e00c      	b.n	80043c8 <HAL_GPIO_Init+0x228>
 80043ae:	2306      	movs	r3, #6
 80043b0:	e00a      	b.n	80043c8 <HAL_GPIO_Init+0x228>
 80043b2:	2305      	movs	r3, #5
 80043b4:	e008      	b.n	80043c8 <HAL_GPIO_Init+0x228>
 80043b6:	2304      	movs	r3, #4
 80043b8:	e006      	b.n	80043c8 <HAL_GPIO_Init+0x228>
 80043ba:	2303      	movs	r3, #3
 80043bc:	e004      	b.n	80043c8 <HAL_GPIO_Init+0x228>
 80043be:	2302      	movs	r3, #2
 80043c0:	e002      	b.n	80043c8 <HAL_GPIO_Init+0x228>
 80043c2:	2301      	movs	r3, #1
 80043c4:	e000      	b.n	80043c8 <HAL_GPIO_Init+0x228>
 80043c6:	2300      	movs	r3, #0
 80043c8:	69fa      	ldr	r2, [r7, #28]
 80043ca:	f002 0203 	and.w	r2, r2, #3
 80043ce:	0092      	lsls	r2, r2, #2
 80043d0:	4093      	lsls	r3, r2
 80043d2:	69ba      	ldr	r2, [r7, #24]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043d8:	4935      	ldr	r1, [pc, #212]	; (80044b0 <HAL_GPIO_Init+0x310>)
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	089b      	lsrs	r3, r3, #2
 80043de:	3302      	adds	r3, #2
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80043e6:	4b3b      	ldr	r3, [pc, #236]	; (80044d4 <HAL_GPIO_Init+0x334>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	43db      	mvns	r3, r3
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4013      	ands	r3, r2
 80043f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d003      	beq.n	800440a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4313      	orrs	r3, r2
 8004408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800440a:	4a32      	ldr	r2, [pc, #200]	; (80044d4 <HAL_GPIO_Init+0x334>)
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004410:	4b30      	ldr	r3, [pc, #192]	; (80044d4 <HAL_GPIO_Init+0x334>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	43db      	mvns	r3, r3
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	4013      	ands	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004434:	4a27      	ldr	r2, [pc, #156]	; (80044d4 <HAL_GPIO_Init+0x334>)
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800443a:	4b26      	ldr	r3, [pc, #152]	; (80044d4 <HAL_GPIO_Init+0x334>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	43db      	mvns	r3, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4013      	ands	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800445e:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <HAL_GPIO_Init+0x334>)
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004464:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <HAL_GPIO_Init+0x334>)
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	43db      	mvns	r3, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4013      	ands	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4313      	orrs	r3, r2
 8004486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004488:	4a12      	ldr	r2, [pc, #72]	; (80044d4 <HAL_GPIO_Init+0x334>)
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	3301      	adds	r3, #1
 8004492:	61fb      	str	r3, [r7, #28]
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	2b0f      	cmp	r3, #15
 8004498:	f67f ae90 	bls.w	80041bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800449c:	bf00      	nop
 800449e:	bf00      	nop
 80044a0:	3724      	adds	r7, #36	; 0x24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40023800 	.word	0x40023800
 80044b0:	40013800 	.word	0x40013800
 80044b4:	40020000 	.word	0x40020000
 80044b8:	40020400 	.word	0x40020400
 80044bc:	40020800 	.word	0x40020800
 80044c0:	40020c00 	.word	0x40020c00
 80044c4:	40021000 	.word	0x40021000
 80044c8:	40021400 	.word	0x40021400
 80044cc:	40021800 	.word	0x40021800
 80044d0:	40021c00 	.word	0x40021c00
 80044d4:	40013c00 	.word	0x40013c00

080044d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	460b      	mov	r3, r1
 80044e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	887b      	ldrh	r3, [r7, #2]
 80044ea:	4013      	ands	r3, r2
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80044f0:	2301      	movs	r3, #1
 80044f2:	73fb      	strb	r3, [r7, #15]
 80044f4:	e001      	b.n	80044fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80044f6:	2300      	movs	r3, #0
 80044f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80044fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3714      	adds	r7, #20
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	807b      	strh	r3, [r7, #2]
 8004514:	4613      	mov	r3, r2
 8004516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004518:	787b      	ldrb	r3, [r7, #1]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800451e:	887a      	ldrh	r2, [r7, #2]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004524:	e003      	b.n	800452e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004526:	887b      	ldrh	r3, [r7, #2]
 8004528:	041a      	lsls	r2, r3, #16
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	619a      	str	r2, [r3, #24]
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800453a:	b480      	push	{r7}
 800453c:	b085      	sub	sp, #20
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
 8004542:	460b      	mov	r3, r1
 8004544:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800454c:	887a      	ldrh	r2, [r7, #2]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	4013      	ands	r3, r2
 8004552:	041a      	lsls	r2, r3, #16
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	43d9      	mvns	r1, r3
 8004558:	887b      	ldrh	r3, [r7, #2]
 800455a:	400b      	ands	r3, r1
 800455c:	431a      	orrs	r2, r3
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	619a      	str	r2, [r3, #24]
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
	...

08004570 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b082      	sub	sp, #8
 8004574:	af00      	add	r7, sp, #0
 8004576:	4603      	mov	r3, r0
 8004578:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800457a:	4b08      	ldr	r3, [pc, #32]	; (800459c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	88fb      	ldrh	r3, [r7, #6]
 8004580:	4013      	ands	r3, r2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d006      	beq.n	8004594 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004586:	4a05      	ldr	r2, [pc, #20]	; (800459c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004588:	88fb      	ldrh	r3, [r7, #6]
 800458a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800458c:	88fb      	ldrh	r3, [r7, #6]
 800458e:	4618      	mov	r0, r3
 8004590:	f000 f806 	bl	80045a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8004594:	bf00      	nop
 8004596:	3708      	adds	r7, #8
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40013c00 	.word	0x40013c00

080045a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
	...

080045b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e12b      	b.n	8004822 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d106      	bne.n	80045e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045de:	6878      	ldr	r0, [r7, #4]
 80045e0:	f7fd fac4 	bl	8001b6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2224      	movs	r2, #36	; 0x24
 80045e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0201 	bic.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800460a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800461a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800461c:	f001 fbd8 	bl	8005dd0 <HAL_RCC_GetPCLK1Freq>
 8004620:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	4a81      	ldr	r2, [pc, #516]	; (800482c <HAL_I2C_Init+0x274>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d807      	bhi.n	800463c <HAL_I2C_Init+0x84>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	4a80      	ldr	r2, [pc, #512]	; (8004830 <HAL_I2C_Init+0x278>)
 8004630:	4293      	cmp	r3, r2
 8004632:	bf94      	ite	ls
 8004634:	2301      	movls	r3, #1
 8004636:	2300      	movhi	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	e006      	b.n	800464a <HAL_I2C_Init+0x92>
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a7d      	ldr	r2, [pc, #500]	; (8004834 <HAL_I2C_Init+0x27c>)
 8004640:	4293      	cmp	r3, r2
 8004642:	bf94      	ite	ls
 8004644:	2301      	movls	r3, #1
 8004646:	2300      	movhi	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e0e7      	b.n	8004822 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	4a78      	ldr	r2, [pc, #480]	; (8004838 <HAL_I2C_Init+0x280>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	0c9b      	lsrs	r3, r3, #18
 800465c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	430a      	orrs	r2, r1
 8004670:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4a6a      	ldr	r2, [pc, #424]	; (800482c <HAL_I2C_Init+0x274>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d802      	bhi.n	800468c <HAL_I2C_Init+0xd4>
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	3301      	adds	r3, #1
 800468a:	e009      	b.n	80046a0 <HAL_I2C_Init+0xe8>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004692:	fb02 f303 	mul.w	r3, r2, r3
 8004696:	4a69      	ldr	r2, [pc, #420]	; (800483c <HAL_I2C_Init+0x284>)
 8004698:	fba2 2303 	umull	r2, r3, r2, r3
 800469c:	099b      	lsrs	r3, r3, #6
 800469e:	3301      	adds	r3, #1
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6812      	ldr	r2, [r2, #0]
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	69db      	ldr	r3, [r3, #28]
 80046ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80046b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	495c      	ldr	r1, [pc, #368]	; (800482c <HAL_I2C_Init+0x274>)
 80046bc:	428b      	cmp	r3, r1
 80046be:	d819      	bhi.n	80046f4 <HAL_I2C_Init+0x13c>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	1e59      	subs	r1, r3, #1
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	005b      	lsls	r3, r3, #1
 80046ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80046ce:	1c59      	adds	r1, r3, #1
 80046d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80046d4:	400b      	ands	r3, r1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <HAL_I2C_Init+0x138>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1e59      	subs	r1, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80046e8:	3301      	adds	r3, #1
 80046ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ee:	e051      	b.n	8004794 <HAL_I2C_Init+0x1dc>
 80046f0:	2304      	movs	r3, #4
 80046f2:	e04f      	b.n	8004794 <HAL_I2C_Init+0x1dc>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d111      	bne.n	8004720 <HAL_I2C_Init+0x168>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	1e58      	subs	r0, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6859      	ldr	r1, [r3, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	440b      	add	r3, r1
 800470a:	fbb0 f3f3 	udiv	r3, r0, r3
 800470e:	3301      	adds	r3, #1
 8004710:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004714:	2b00      	cmp	r3, #0
 8004716:	bf0c      	ite	eq
 8004718:	2301      	moveq	r3, #1
 800471a:	2300      	movne	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	e012      	b.n	8004746 <HAL_I2C_Init+0x18e>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	1e58      	subs	r0, r3, #1
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6859      	ldr	r1, [r3, #4]
 8004728:	460b      	mov	r3, r1
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	0099      	lsls	r1, r3, #2
 8004730:	440b      	add	r3, r1
 8004732:	fbb0 f3f3 	udiv	r3, r0, r3
 8004736:	3301      	adds	r3, #1
 8004738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800473c:	2b00      	cmp	r3, #0
 800473e:	bf0c      	ite	eq
 8004740:	2301      	moveq	r3, #1
 8004742:	2300      	movne	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <HAL_I2C_Init+0x196>
 800474a:	2301      	movs	r3, #1
 800474c:	e022      	b.n	8004794 <HAL_I2C_Init+0x1dc>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10e      	bne.n	8004774 <HAL_I2C_Init+0x1bc>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1e58      	subs	r0, r3, #1
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6859      	ldr	r1, [r3, #4]
 800475e:	460b      	mov	r3, r1
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	440b      	add	r3, r1
 8004764:	fbb0 f3f3 	udiv	r3, r0, r3
 8004768:	3301      	adds	r3, #1
 800476a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800476e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004772:	e00f      	b.n	8004794 <HAL_I2C_Init+0x1dc>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	1e58      	subs	r0, r3, #1
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6859      	ldr	r1, [r3, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	0099      	lsls	r1, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	fbb0 f3f3 	udiv	r3, r0, r3
 800478a:	3301      	adds	r3, #1
 800478c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004790:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	6809      	ldr	r1, [r1, #0]
 8004798:	4313      	orrs	r3, r2
 800479a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	69da      	ldr	r2, [r3, #28]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	431a      	orrs	r2, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80047c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6911      	ldr	r1, [r2, #16]
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	68d2      	ldr	r2, [r2, #12]
 80047ce:	4311      	orrs	r1, r2
 80047d0:	687a      	ldr	r2, [r7, #4]
 80047d2:	6812      	ldr	r2, [r2, #0]
 80047d4:	430b      	orrs	r3, r1
 80047d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695a      	ldr	r2, [r3, #20]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	000186a0 	.word	0x000186a0
 8004830:	001e847f 	.word	0x001e847f
 8004834:	003d08ff 	.word	0x003d08ff
 8004838:	431bde83 	.word	0x431bde83
 800483c:	10624dd3 	.word	0x10624dd3

08004840 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af02      	add	r7, sp, #8
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	4608      	mov	r0, r1
 800484a:	4611      	mov	r1, r2
 800484c:	461a      	mov	r2, r3
 800484e:	4603      	mov	r3, r0
 8004850:	817b      	strh	r3, [r7, #10]
 8004852:	460b      	mov	r3, r1
 8004854:	813b      	strh	r3, [r7, #8]
 8004856:	4613      	mov	r3, r2
 8004858:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800485a:	f7fe fd67 	bl	800332c <HAL_GetTick>
 800485e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b20      	cmp	r3, #32
 800486a:	f040 80d9 	bne.w	8004a20 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	2319      	movs	r3, #25
 8004874:	2201      	movs	r2, #1
 8004876:	496d      	ldr	r1, [pc, #436]	; (8004a2c <HAL_I2C_Mem_Write+0x1ec>)
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 fc7f 	bl	800517c <I2C_WaitOnFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004884:	2302      	movs	r3, #2
 8004886:	e0cc      	b.n	8004a22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800488e:	2b01      	cmp	r3, #1
 8004890:	d101      	bne.n	8004896 <HAL_I2C_Mem_Write+0x56>
 8004892:	2302      	movs	r3, #2
 8004894:	e0c5      	b.n	8004a22 <HAL_I2C_Mem_Write+0x1e2>
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d007      	beq.n	80048bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f042 0201 	orr.w	r2, r2, #1
 80048ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80048ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2221      	movs	r2, #33	; 0x21
 80048d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2240      	movs	r2, #64	; 0x40
 80048d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6a3a      	ldr	r2, [r7, #32]
 80048e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048f2:	b29a      	uxth	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4a4d      	ldr	r2, [pc, #308]	; (8004a30 <HAL_I2C_Mem_Write+0x1f0>)
 80048fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80048fe:	88f8      	ldrh	r0, [r7, #6]
 8004900:	893a      	ldrh	r2, [r7, #8]
 8004902:	8979      	ldrh	r1, [r7, #10]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	9301      	str	r3, [sp, #4]
 8004908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	4603      	mov	r3, r0
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 fab6 	bl	8004e80 <I2C_RequestMemoryWrite>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d052      	beq.n	80049c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e081      	b.n	8004a22 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fd00 	bl	8005328 <I2C_WaitOnTXEFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00d      	beq.n	800494a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004932:	2b04      	cmp	r3, #4
 8004934:	d107      	bne.n	8004946 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004944:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	e06b      	b.n	8004a22 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	781a      	ldrb	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b04      	cmp	r3, #4
 8004986:	d11b      	bne.n	80049c0 <HAL_I2C_Mem_Write+0x180>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498c:	2b00      	cmp	r3, #0
 800498e:	d017      	beq.n	80049c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004994:	781a      	ldrb	r2, [r3, #0]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a0:	1c5a      	adds	r2, r3, #1
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	3b01      	subs	r3, #1
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1aa      	bne.n	800491e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 fcec 	bl	80053aa <I2C_WaitOnBTFFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00d      	beq.n	80049f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d107      	bne.n	80049f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e016      	b.n	8004a22 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	e000      	b.n	8004a22 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004a20:	2302      	movs	r3, #2
  }
}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
 8004a2a:	bf00      	nop
 8004a2c:	00100002 	.word	0x00100002
 8004a30:	ffff0000 	.word	0xffff0000

08004a34 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b08c      	sub	sp, #48	; 0x30
 8004a38:	af02      	add	r7, sp, #8
 8004a3a:	60f8      	str	r0, [r7, #12]
 8004a3c:	4608      	mov	r0, r1
 8004a3e:	4611      	mov	r1, r2
 8004a40:	461a      	mov	r2, r3
 8004a42:	4603      	mov	r3, r0
 8004a44:	817b      	strh	r3, [r7, #10]
 8004a46:	460b      	mov	r3, r1
 8004a48:	813b      	strh	r3, [r7, #8]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a4e:	f7fe fc6d 	bl	800332c <HAL_GetTick>
 8004a52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	f040 8208 	bne.w	8004e72 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	2319      	movs	r3, #25
 8004a68:	2201      	movs	r2, #1
 8004a6a:	497b      	ldr	r1, [pc, #492]	; (8004c58 <HAL_I2C_Mem_Read+0x224>)
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f000 fb85 	bl	800517c <I2C_WaitOnFlagUntilTimeout>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e1fb      	b.n	8004e74 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <HAL_I2C_Mem_Read+0x56>
 8004a86:	2302      	movs	r3, #2
 8004a88:	e1f4      	b.n	8004e74 <HAL_I2C_Mem_Read+0x440>
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d007      	beq.n	8004ab0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004abe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2222      	movs	r2, #34	; 0x22
 8004ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2240      	movs	r2, #64	; 0x40
 8004acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ada:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4a5b      	ldr	r2, [pc, #364]	; (8004c5c <HAL_I2C_Mem_Read+0x228>)
 8004af0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004af2:	88f8      	ldrh	r0, [r7, #6]
 8004af4:	893a      	ldrh	r2, [r7, #8]
 8004af6:	8979      	ldrh	r1, [r7, #10]
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	9301      	str	r3, [sp, #4]
 8004afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afe:	9300      	str	r3, [sp, #0]
 8004b00:	4603      	mov	r3, r0
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 fa52 	bl	8004fac <I2C_RequestMemoryRead>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d001      	beq.n	8004b12 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e1b0      	b.n	8004e74 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d113      	bne.n	8004b42 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	623b      	str	r3, [r7, #32]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695b      	ldr	r3, [r3, #20]
 8004b24:	623b      	str	r3, [r7, #32]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	623b      	str	r3, [r7, #32]
 8004b2e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	e184      	b.n	8004e4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	d11b      	bne.n	8004b82 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695b      	ldr	r3, [r3, #20]
 8004b64:	61fb      	str	r3, [r7, #28]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699b      	ldr	r3, [r3, #24]
 8004b6c:	61fb      	str	r3, [r7, #28]
 8004b6e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	e164      	b.n	8004e4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b86:	2b02      	cmp	r3, #2
 8004b88:	d11b      	bne.n	8004bc2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b98:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ba8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004baa:	2300      	movs	r3, #0
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	695b      	ldr	r3, [r3, #20]
 8004bb4:	61bb      	str	r3, [r7, #24]
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	61bb      	str	r3, [r7, #24]
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	e144      	b.n	8004e4c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	695b      	ldr	r3, [r3, #20]
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bd8:	e138      	b.n	8004e4c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bde:	2b03      	cmp	r3, #3
 8004be0:	f200 80f1 	bhi.w	8004dc6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d123      	bne.n	8004c34 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 fc1b 	bl	800542c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e139      	b.n	8004e74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	b2d2      	uxtb	r2, r2
 8004c0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c32:	e10b      	b.n	8004e4c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c38:	2b02      	cmp	r3, #2
 8004c3a:	d14e      	bne.n	8004cda <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c42:	2200      	movs	r2, #0
 8004c44:	4906      	ldr	r1, [pc, #24]	; (8004c60 <HAL_I2C_Mem_Read+0x22c>)
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 fa98 	bl	800517c <I2C_WaitOnFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d008      	beq.n	8004c64 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e10e      	b.n	8004e74 <HAL_I2C_Mem_Read+0x440>
 8004c56:	bf00      	nop
 8004c58:	00100002 	.word	0x00100002
 8004c5c:	ffff0000 	.word	0xffff0000
 8004c60:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	691a      	ldr	r2, [r3, #16]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	1c5a      	adds	r2, r3, #1
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c90:	3b01      	subs	r3, #1
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691a      	ldr	r2, [r3, #16]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	b2d2      	uxtb	r2, r2
 8004cb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004cd8:	e0b8      	b.n	8004e4c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	4966      	ldr	r1, [pc, #408]	; (8004e7c <HAL_I2C_Mem_Read+0x448>)
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 fa49 	bl	800517c <I2C_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e0bf      	b.n	8004e74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	691a      	ldr	r2, [r3, #16]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	b2d2      	uxtb	r2, r2
 8004d10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	494f      	ldr	r1, [pc, #316]	; (8004e7c <HAL_I2C_Mem_Read+0x448>)
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 fa1b 	bl	800517c <I2C_WaitOnFlagUntilTimeout>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d001      	beq.n	8004d50 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e091      	b.n	8004e74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691a      	ldr	r2, [r3, #16]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6a:	b2d2      	uxtb	r2, r2
 8004d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	691a      	ldr	r2, [r3, #16]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9c:	b2d2      	uxtb	r2, r2
 8004d9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	1c5a      	adds	r2, r3, #1
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dae:	3b01      	subs	r3, #1
 8004db0:	b29a      	uxth	r2, r3
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004dc4:	e042      	b.n	8004e4c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dc8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004dca:	68f8      	ldr	r0, [r7, #12]
 8004dcc:	f000 fb2e 	bl	800542c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d001      	beq.n	8004dda <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e04c      	b.n	8004e74 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004df6:	3b01      	subs	r3, #1
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e02:	b29b      	uxth	r3, r3
 8004e04:	3b01      	subs	r3, #1
 8004e06:	b29a      	uxth	r2, r3
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b04      	cmp	r3, #4
 8004e18:	d118      	bne.n	8004e4c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e42:	b29b      	uxth	r3, r3
 8004e44:	3b01      	subs	r3, #1
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f47f aec2 	bne.w	8004bda <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2220      	movs	r2, #32
 8004e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e000      	b.n	8004e74 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004e72:	2302      	movs	r3, #2
  }
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3728      	adds	r7, #40	; 0x28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	00010004 	.word	0x00010004

08004e80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af02      	add	r7, sp, #8
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	4608      	mov	r0, r1
 8004e8a:	4611      	mov	r1, r2
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4603      	mov	r3, r0
 8004e90:	817b      	strh	r3, [r7, #10]
 8004e92:	460b      	mov	r3, r1
 8004e94:	813b      	strh	r3, [r7, #8]
 8004e96:	4613      	mov	r3, r2
 8004e98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ea8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 f960 	bl	800517c <I2C_WaitOnFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00d      	beq.n	8004ede <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ecc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ed0:	d103      	bne.n	8004eda <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ed8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e05f      	b.n	8004f9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004ede:	897b      	ldrh	r3, [r7, #10]
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004eec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	6a3a      	ldr	r2, [r7, #32]
 8004ef2:	492d      	ldr	r1, [pc, #180]	; (8004fa8 <I2C_RequestMemoryWrite+0x128>)
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f998 	bl	800522a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004efa:	4603      	mov	r3, r0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d001      	beq.n	8004f04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e04c      	b.n	8004f9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	695b      	ldr	r3, [r3, #20]
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	617b      	str	r3, [r7, #20]
 8004f18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1c:	6a39      	ldr	r1, [r7, #32]
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 fa02 	bl	8005328 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00d      	beq.n	8004f46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	2b04      	cmp	r3, #4
 8004f30:	d107      	bne.n	8004f42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e02b      	b.n	8004f9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f46:	88fb      	ldrh	r3, [r7, #6]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d105      	bne.n	8004f58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f4c:	893b      	ldrh	r3, [r7, #8]
 8004f4e:	b2da      	uxtb	r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	611a      	str	r2, [r3, #16]
 8004f56:	e021      	b.n	8004f9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f58:	893b      	ldrh	r3, [r7, #8]
 8004f5a:	0a1b      	lsrs	r3, r3, #8
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	b2da      	uxtb	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f68:	6a39      	ldr	r1, [r7, #32]
 8004f6a:	68f8      	ldr	r0, [r7, #12]
 8004f6c:	f000 f9dc 	bl	8005328 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00d      	beq.n	8004f92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	d107      	bne.n	8004f8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e005      	b.n	8004f9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f92:	893b      	ldrh	r3, [r7, #8]
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3718      	adds	r7, #24
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	00010002 	.word	0x00010002

08004fac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b088      	sub	sp, #32
 8004fb0:	af02      	add	r7, sp, #8
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	4608      	mov	r0, r1
 8004fb6:	4611      	mov	r1, r2
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4603      	mov	r3, r0
 8004fbc:	817b      	strh	r3, [r7, #10]
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	813b      	strh	r3, [r7, #8]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004fd4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fe4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	9300      	str	r3, [sp, #0]
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	2200      	movs	r2, #0
 8004fee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f8c2 	bl	800517c <I2C_WaitOnFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00d      	beq.n	800501a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005008:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800500c:	d103      	bne.n	8005016 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005014:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e0aa      	b.n	8005170 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800501a:	897b      	ldrh	r3, [r7, #10]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	461a      	mov	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005028:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	6a3a      	ldr	r2, [r7, #32]
 800502e:	4952      	ldr	r1, [pc, #328]	; (8005178 <I2C_RequestMemoryRead+0x1cc>)
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f8fa 	bl	800522a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e097      	b.n	8005170 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005040:	2300      	movs	r3, #0
 8005042:	617b      	str	r3, [r7, #20]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005058:	6a39      	ldr	r1, [r7, #32]
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 f964 	bl	8005328 <I2C_WaitOnTXEFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00d      	beq.n	8005082 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	2b04      	cmp	r3, #4
 800506c:	d107      	bne.n	800507e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800507c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e076      	b.n	8005170 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005082:	88fb      	ldrh	r3, [r7, #6]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d105      	bne.n	8005094 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005088:	893b      	ldrh	r3, [r7, #8]
 800508a:	b2da      	uxtb	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	611a      	str	r2, [r3, #16]
 8005092:	e021      	b.n	80050d8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005094:	893b      	ldrh	r3, [r7, #8]
 8005096:	0a1b      	lsrs	r3, r3, #8
 8005098:	b29b      	uxth	r3, r3
 800509a:	b2da      	uxtb	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050a4:	6a39      	ldr	r1, [r7, #32]
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f93e 	bl	8005328 <I2C_WaitOnTXEFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00d      	beq.n	80050ce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	2b04      	cmp	r3, #4
 80050b8:	d107      	bne.n	80050ca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e050      	b.n	8005170 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80050ce:	893b      	ldrh	r3, [r7, #8]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80050d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050da:	6a39      	ldr	r1, [r7, #32]
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	f000 f923 	bl	8005328 <I2C_WaitOnTXEFlagUntilTimeout>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00d      	beq.n	8005104 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d107      	bne.n	8005100 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050fe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e035      	b.n	8005170 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005112:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	2200      	movs	r2, #0
 800511c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f000 f82b 	bl	800517c <I2C_WaitOnFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00d      	beq.n	8005148 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800513a:	d103      	bne.n	8005144 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005142:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e013      	b.n	8005170 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005148:	897b      	ldrh	r3, [r7, #10]
 800514a:	b2db      	uxtb	r3, r3
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	b2da      	uxtb	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	6a3a      	ldr	r2, [r7, #32]
 800515c:	4906      	ldr	r1, [pc, #24]	; (8005178 <I2C_RequestMemoryRead+0x1cc>)
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f000 f863 	bl	800522a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d001      	beq.n	800516e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e000      	b.n	8005170 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800516e:	2300      	movs	r3, #0
}
 8005170:	4618      	mov	r0, r3
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	00010002 	.word	0x00010002

0800517c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	603b      	str	r3, [r7, #0]
 8005188:	4613      	mov	r3, r2
 800518a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800518c:	e025      	b.n	80051da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005194:	d021      	beq.n	80051da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005196:	f7fe f8c9 	bl	800332c <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d302      	bcc.n	80051ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d116      	bne.n	80051da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e023      	b.n	8005222 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	0c1b      	lsrs	r3, r3, #16
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d10d      	bne.n	8005200 <I2C_WaitOnFlagUntilTimeout+0x84>
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	43da      	mvns	r2, r3
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4013      	ands	r3, r2
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	bf0c      	ite	eq
 80051f6:	2301      	moveq	r3, #1
 80051f8:	2300      	movne	r3, #0
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	461a      	mov	r2, r3
 80051fe:	e00c      	b.n	800521a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	43da      	mvns	r2, r3
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	4013      	ands	r3, r2
 800520c:	b29b      	uxth	r3, r3
 800520e:	2b00      	cmp	r3, #0
 8005210:	bf0c      	ite	eq
 8005212:	2301      	moveq	r3, #1
 8005214:	2300      	movne	r3, #0
 8005216:	b2db      	uxtb	r3, r3
 8005218:	461a      	mov	r2, r3
 800521a:	79fb      	ldrb	r3, [r7, #7]
 800521c:	429a      	cmp	r2, r3
 800521e:	d0b6      	beq.n	800518e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800522a:	b580      	push	{r7, lr}
 800522c:	b084      	sub	sp, #16
 800522e:	af00      	add	r7, sp, #0
 8005230:	60f8      	str	r0, [r7, #12]
 8005232:	60b9      	str	r1, [r7, #8]
 8005234:	607a      	str	r2, [r7, #4]
 8005236:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005238:	e051      	b.n	80052de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005248:	d123      	bne.n	8005292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005258:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005262:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2220      	movs	r2, #32
 800526e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f043 0204 	orr.w	r2, r3, #4
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e046      	b.n	8005320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005298:	d021      	beq.n	80052de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800529a:	f7fe f847 	bl	800332c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d302      	bcc.n	80052b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d116      	bne.n	80052de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ca:	f043 0220 	orr.w	r2, r3, #32
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e020      	b.n	8005320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	0c1b      	lsrs	r3, r3, #16
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d10c      	bne.n	8005302 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	695b      	ldr	r3, [r3, #20]
 80052ee:	43da      	mvns	r2, r3
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	4013      	ands	r3, r2
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bf14      	ite	ne
 80052fa:	2301      	movne	r3, #1
 80052fc:	2300      	moveq	r3, #0
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	e00b      	b.n	800531a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	43da      	mvns	r2, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4013      	ands	r3, r2
 800530e:	b29b      	uxth	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf14      	ite	ne
 8005314:	2301      	movne	r3, #1
 8005316:	2300      	moveq	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d18d      	bne.n	800523a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005334:	e02d      	b.n	8005392 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f000 f8ce 	bl	80054d8 <I2C_IsAcknowledgeFailed>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e02d      	b.n	80053a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534c:	d021      	beq.n	8005392 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800534e:	f7fd ffed 	bl	800332c <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	d302      	bcc.n	8005364 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d116      	bne.n	8005392 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2220      	movs	r2, #32
 800536e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f043 0220 	orr.w	r2, r3, #32
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e007      	b.n	80053a2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539c:	2b80      	cmp	r3, #128	; 0x80
 800539e:	d1ca      	bne.n	8005336 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
 80053b2:	60b9      	str	r1, [r7, #8]
 80053b4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053b6:	e02d      	b.n	8005414 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053b8:	68f8      	ldr	r0, [r7, #12]
 80053ba:	f000 f88d 	bl	80054d8 <I2C_IsAcknowledgeFailed>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053c4:	2301      	movs	r3, #1
 80053c6:	e02d      	b.n	8005424 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ce:	d021      	beq.n	8005414 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053d0:	f7fd ffac 	bl	800332c <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d302      	bcc.n	80053e6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d116      	bne.n	8005414 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2220      	movs	r2, #32
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005400:	f043 0220 	orr.w	r2, r3, #32
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e007      	b.n	8005424 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b04      	cmp	r3, #4
 8005420:	d1ca      	bne.n	80053b8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005438:	e042      	b.n	80054c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	695b      	ldr	r3, [r3, #20]
 8005440:	f003 0310 	and.w	r3, r3, #16
 8005444:	2b10      	cmp	r3, #16
 8005446:	d119      	bne.n	800547c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f06f 0210 	mvn.w	r2, #16
 8005450:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	e029      	b.n	80054d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547c:	f7fd ff56 	bl	800332c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	429a      	cmp	r2, r3
 800548a:	d302      	bcc.n	8005492 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d116      	bne.n	80054c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ac:	f043 0220 	orr.w	r2, r3, #32
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e007      	b.n	80054d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ca:	2b40      	cmp	r3, #64	; 0x40
 80054cc:	d1b5      	bne.n	800543a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80054ce:	2300      	movs	r3, #0
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ee:	d11b      	bne.n	8005528 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005514:	f043 0204 	orr.w	r2, r3, #4
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e000      	b.n	800552a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	370c      	adds	r7, #12
 800552e:	46bd      	mov	sp, r7
 8005530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005534:	4770      	bx	lr
	...

08005538 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d101      	bne.n	800554a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e264      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d075      	beq.n	8005642 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005556:	4ba3      	ldr	r3, [pc, #652]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f003 030c 	and.w	r3, r3, #12
 800555e:	2b04      	cmp	r3, #4
 8005560:	d00c      	beq.n	800557c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005562:	4ba0      	ldr	r3, [pc, #640]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800556a:	2b08      	cmp	r3, #8
 800556c:	d112      	bne.n	8005594 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800556e:	4b9d      	ldr	r3, [pc, #628]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800557a:	d10b      	bne.n	8005594 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800557c:	4b99      	ldr	r3, [pc, #612]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d05b      	beq.n	8005640 <HAL_RCC_OscConfig+0x108>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d157      	bne.n	8005640 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e23f      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800559c:	d106      	bne.n	80055ac <HAL_RCC_OscConfig+0x74>
 800559e:	4b91      	ldr	r3, [pc, #580]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a90      	ldr	r2, [pc, #576]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 80055a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055a8:	6013      	str	r3, [r2, #0]
 80055aa:	e01d      	b.n	80055e8 <HAL_RCC_OscConfig+0xb0>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055b4:	d10c      	bne.n	80055d0 <HAL_RCC_OscConfig+0x98>
 80055b6:	4b8b      	ldr	r3, [pc, #556]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a8a      	ldr	r2, [pc, #552]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 80055bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055c0:	6013      	str	r3, [r2, #0]
 80055c2:	4b88      	ldr	r3, [pc, #544]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a87      	ldr	r2, [pc, #540]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 80055c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	e00b      	b.n	80055e8 <HAL_RCC_OscConfig+0xb0>
 80055d0:	4b84      	ldr	r3, [pc, #528]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a83      	ldr	r2, [pc, #524]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 80055d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055da:	6013      	str	r3, [r2, #0]
 80055dc:	4b81      	ldr	r3, [pc, #516]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a80      	ldr	r2, [pc, #512]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 80055e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d013      	beq.n	8005618 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055f0:	f7fd fe9c 	bl	800332c <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f6:	e008      	b.n	800560a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80055f8:	f7fd fe98 	bl	800332c <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b64      	cmp	r3, #100	; 0x64
 8005604:	d901      	bls.n	800560a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e204      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800560a:	4b76      	ldr	r3, [pc, #472]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d0f0      	beq.n	80055f8 <HAL_RCC_OscConfig+0xc0>
 8005616:	e014      	b.n	8005642 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005618:	f7fd fe88 	bl	800332c <HAL_GetTick>
 800561c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800561e:	e008      	b.n	8005632 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005620:	f7fd fe84 	bl	800332c <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	2b64      	cmp	r3, #100	; 0x64
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e1f0      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005632:	4b6c      	ldr	r3, [pc, #432]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1f0      	bne.n	8005620 <HAL_RCC_OscConfig+0xe8>
 800563e:	e000      	b.n	8005642 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d063      	beq.n	8005716 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800564e:	4b65      	ldr	r3, [pc, #404]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 030c 	and.w	r3, r3, #12
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00b      	beq.n	8005672 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800565a:	4b62      	ldr	r3, [pc, #392]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005662:	2b08      	cmp	r3, #8
 8005664:	d11c      	bne.n	80056a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005666:	4b5f      	ldr	r3, [pc, #380]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d116      	bne.n	80056a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005672:	4b5c      	ldr	r3, [pc, #368]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d005      	beq.n	800568a <HAL_RCC_OscConfig+0x152>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	2b01      	cmp	r3, #1
 8005684:	d001      	beq.n	800568a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e1c4      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800568a:	4b56      	ldr	r3, [pc, #344]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	4952      	ldr	r1, [pc, #328]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 800569a:	4313      	orrs	r3, r2
 800569c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800569e:	e03a      	b.n	8005716 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d020      	beq.n	80056ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056a8:	4b4f      	ldr	r3, [pc, #316]	; (80057e8 <HAL_RCC_OscConfig+0x2b0>)
 80056aa:	2201      	movs	r2, #1
 80056ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ae:	f7fd fe3d 	bl	800332c <HAL_GetTick>
 80056b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056b4:	e008      	b.n	80056c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056b6:	f7fd fe39 	bl	800332c <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	2b02      	cmp	r3, #2
 80056c2:	d901      	bls.n	80056c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80056c4:	2303      	movs	r3, #3
 80056c6:	e1a5      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80056c8:	4b46      	ldr	r3, [pc, #280]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0302 	and.w	r3, r3, #2
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d0f0      	beq.n	80056b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056d4:	4b43      	ldr	r3, [pc, #268]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	4940      	ldr	r1, [pc, #256]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	600b      	str	r3, [r1, #0]
 80056e8:	e015      	b.n	8005716 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056ea:	4b3f      	ldr	r3, [pc, #252]	; (80057e8 <HAL_RCC_OscConfig+0x2b0>)
 80056ec:	2200      	movs	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056f0:	f7fd fe1c 	bl	800332c <HAL_GetTick>
 80056f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056f6:	e008      	b.n	800570a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80056f8:	f7fd fe18 	bl	800332c <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	2b02      	cmp	r3, #2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e184      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800570a:	4b36      	ldr	r3, [pc, #216]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1f0      	bne.n	80056f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0308 	and.w	r3, r3, #8
 800571e:	2b00      	cmp	r3, #0
 8005720:	d030      	beq.n	8005784 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d016      	beq.n	8005758 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800572a:	4b30      	ldr	r3, [pc, #192]	; (80057ec <HAL_RCC_OscConfig+0x2b4>)
 800572c:	2201      	movs	r2, #1
 800572e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005730:	f7fd fdfc 	bl	800332c <HAL_GetTick>
 8005734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005736:	e008      	b.n	800574a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005738:	f7fd fdf8 	bl	800332c <HAL_GetTick>
 800573c:	4602      	mov	r2, r0
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	2b02      	cmp	r3, #2
 8005744:	d901      	bls.n	800574a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005746:	2303      	movs	r3, #3
 8005748:	e164      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800574a:	4b26      	ldr	r3, [pc, #152]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 800574c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0f0      	beq.n	8005738 <HAL_RCC_OscConfig+0x200>
 8005756:	e015      	b.n	8005784 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005758:	4b24      	ldr	r3, [pc, #144]	; (80057ec <HAL_RCC_OscConfig+0x2b4>)
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800575e:	f7fd fde5 	bl	800332c <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005766:	f7fd fde1 	bl	800332c <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e14d      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005778:	4b1a      	ldr	r3, [pc, #104]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 800577a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800577c:	f003 0302 	and.w	r3, r3, #2
 8005780:	2b00      	cmp	r3, #0
 8005782:	d1f0      	bne.n	8005766 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 0304 	and.w	r3, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 80a0 	beq.w	80058d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005792:	2300      	movs	r3, #0
 8005794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005796:	4b13      	ldr	r3, [pc, #76]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 8005798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10f      	bne.n	80057c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057a2:	2300      	movs	r3, #0
 80057a4:	60bb      	str	r3, [r7, #8]
 80057a6:	4b0f      	ldr	r3, [pc, #60]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 80057a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057aa:	4a0e      	ldr	r2, [pc, #56]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 80057ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057b0:	6413      	str	r3, [r2, #64]	; 0x40
 80057b2:	4b0c      	ldr	r3, [pc, #48]	; (80057e4 <HAL_RCC_OscConfig+0x2ac>)
 80057b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ba:	60bb      	str	r3, [r7, #8]
 80057bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057be:	2301      	movs	r3, #1
 80057c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057c2:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <HAL_RCC_OscConfig+0x2b8>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d121      	bne.n	8005812 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057ce:	4b08      	ldr	r3, [pc, #32]	; (80057f0 <HAL_RCC_OscConfig+0x2b8>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a07      	ldr	r2, [pc, #28]	; (80057f0 <HAL_RCC_OscConfig+0x2b8>)
 80057d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057da:	f7fd fda7 	bl	800332c <HAL_GetTick>
 80057de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057e0:	e011      	b.n	8005806 <HAL_RCC_OscConfig+0x2ce>
 80057e2:	bf00      	nop
 80057e4:	40023800 	.word	0x40023800
 80057e8:	42470000 	.word	0x42470000
 80057ec:	42470e80 	.word	0x42470e80
 80057f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f4:	f7fd fd9a 	bl	800332c <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e106      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005806:	4b85      	ldr	r3, [pc, #532]	; (8005a1c <HAL_RCC_OscConfig+0x4e4>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0f0      	beq.n	80057f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d106      	bne.n	8005828 <HAL_RCC_OscConfig+0x2f0>
 800581a:	4b81      	ldr	r3, [pc, #516]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 800581c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581e:	4a80      	ldr	r2, [pc, #512]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 8005820:	f043 0301 	orr.w	r3, r3, #1
 8005824:	6713      	str	r3, [r2, #112]	; 0x70
 8005826:	e01c      	b.n	8005862 <HAL_RCC_OscConfig+0x32a>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2b05      	cmp	r3, #5
 800582e:	d10c      	bne.n	800584a <HAL_RCC_OscConfig+0x312>
 8005830:	4b7b      	ldr	r3, [pc, #492]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 8005832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005834:	4a7a      	ldr	r2, [pc, #488]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 8005836:	f043 0304 	orr.w	r3, r3, #4
 800583a:	6713      	str	r3, [r2, #112]	; 0x70
 800583c:	4b78      	ldr	r3, [pc, #480]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 800583e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005840:	4a77      	ldr	r2, [pc, #476]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 8005842:	f043 0301 	orr.w	r3, r3, #1
 8005846:	6713      	str	r3, [r2, #112]	; 0x70
 8005848:	e00b      	b.n	8005862 <HAL_RCC_OscConfig+0x32a>
 800584a:	4b75      	ldr	r3, [pc, #468]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 800584c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584e:	4a74      	ldr	r2, [pc, #464]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 8005850:	f023 0301 	bic.w	r3, r3, #1
 8005854:	6713      	str	r3, [r2, #112]	; 0x70
 8005856:	4b72      	ldr	r3, [pc, #456]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 8005858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800585a:	4a71      	ldr	r2, [pc, #452]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 800585c:	f023 0304 	bic.w	r3, r3, #4
 8005860:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d015      	beq.n	8005896 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800586a:	f7fd fd5f 	bl	800332c <HAL_GetTick>
 800586e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005870:	e00a      	b.n	8005888 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005872:	f7fd fd5b 	bl	800332c <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005880:	4293      	cmp	r3, r2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e0c5      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005888:	4b65      	ldr	r3, [pc, #404]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 800588a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d0ee      	beq.n	8005872 <HAL_RCC_OscConfig+0x33a>
 8005894:	e014      	b.n	80058c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005896:	f7fd fd49 	bl	800332c <HAL_GetTick>
 800589a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800589c:	e00a      	b.n	80058b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800589e:	f7fd fd45 	bl	800332c <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d901      	bls.n	80058b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80058b0:	2303      	movs	r3, #3
 80058b2:	e0af      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80058b4:	4b5a      	ldr	r3, [pc, #360]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 80058b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d1ee      	bne.n	800589e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058c0:	7dfb      	ldrb	r3, [r7, #23]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d105      	bne.n	80058d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c6:	4b56      	ldr	r3, [pc, #344]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	4a55      	ldr	r2, [pc, #340]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 80058cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	f000 809b 	beq.w	8005a12 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058dc:	4b50      	ldr	r3, [pc, #320]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	f003 030c 	and.w	r3, r3, #12
 80058e4:	2b08      	cmp	r3, #8
 80058e6:	d05c      	beq.n	80059a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d141      	bne.n	8005974 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f0:	4b4c      	ldr	r3, [pc, #304]	; (8005a24 <HAL_RCC_OscConfig+0x4ec>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058f6:	f7fd fd19 	bl	800332c <HAL_GetTick>
 80058fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058fc:	e008      	b.n	8005910 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058fe:	f7fd fd15 	bl	800332c <HAL_GetTick>
 8005902:	4602      	mov	r2, r0
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	2b02      	cmp	r3, #2
 800590a:	d901      	bls.n	8005910 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800590c:	2303      	movs	r3, #3
 800590e:	e081      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005910:	4b43      	ldr	r3, [pc, #268]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1f0      	bne.n	80058fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	69da      	ldr	r2, [r3, #28]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	431a      	orrs	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	019b      	lsls	r3, r3, #6
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005932:	085b      	lsrs	r3, r3, #1
 8005934:	3b01      	subs	r3, #1
 8005936:	041b      	lsls	r3, r3, #16
 8005938:	431a      	orrs	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593e:	061b      	lsls	r3, r3, #24
 8005940:	4937      	ldr	r1, [pc, #220]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 8005942:	4313      	orrs	r3, r2
 8005944:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005946:	4b37      	ldr	r3, [pc, #220]	; (8005a24 <HAL_RCC_OscConfig+0x4ec>)
 8005948:	2201      	movs	r2, #1
 800594a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800594c:	f7fd fcee 	bl	800332c <HAL_GetTick>
 8005950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005952:	e008      	b.n	8005966 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005954:	f7fd fcea 	bl	800332c <HAL_GetTick>
 8005958:	4602      	mov	r2, r0
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d901      	bls.n	8005966 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005962:	2303      	movs	r3, #3
 8005964:	e056      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005966:	4b2e      	ldr	r3, [pc, #184]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800596e:	2b00      	cmp	r3, #0
 8005970:	d0f0      	beq.n	8005954 <HAL_RCC_OscConfig+0x41c>
 8005972:	e04e      	b.n	8005a12 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005974:	4b2b      	ldr	r3, [pc, #172]	; (8005a24 <HAL_RCC_OscConfig+0x4ec>)
 8005976:	2200      	movs	r2, #0
 8005978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800597a:	f7fd fcd7 	bl	800332c <HAL_GetTick>
 800597e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005980:	e008      	b.n	8005994 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005982:	f7fd fcd3 	bl	800332c <HAL_GetTick>
 8005986:	4602      	mov	r2, r0
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	1ad3      	subs	r3, r2, r3
 800598c:	2b02      	cmp	r3, #2
 800598e:	d901      	bls.n	8005994 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005990:	2303      	movs	r3, #3
 8005992:	e03f      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005994:	4b22      	ldr	r3, [pc, #136]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1f0      	bne.n	8005982 <HAL_RCC_OscConfig+0x44a>
 80059a0:	e037      	b.n	8005a12 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e032      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80059ae:	4b1c      	ldr	r3, [pc, #112]	; (8005a20 <HAL_RCC_OscConfig+0x4e8>)
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d028      	beq.n	8005a0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d121      	bne.n	8005a0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d11a      	bne.n	8005a0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80059de:	4013      	ands	r3, r2
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d111      	bne.n	8005a0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059f4:	085b      	lsrs	r3, r3, #1
 80059f6:	3b01      	subs	r3, #1
 80059f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d107      	bne.n	8005a0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d001      	beq.n	8005a12 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e000      	b.n	8005a14 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40007000 	.word	0x40007000
 8005a20:	40023800 	.word	0x40023800
 8005a24:	42470060 	.word	0x42470060

08005a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e0cc      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a3c:	4b68      	ldr	r3, [pc, #416]	; (8005be0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0307 	and.w	r3, r3, #7
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d90c      	bls.n	8005a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4a:	4b65      	ldr	r3, [pc, #404]	; (8005be0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a52:	4b63      	ldr	r3, [pc, #396]	; (8005be0 <HAL_RCC_ClockConfig+0x1b8>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a60:	2301      	movs	r3, #1
 8005a62:	e0b8      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d020      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0304 	and.w	r3, r3, #4
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d005      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a7c:	4b59      	ldr	r3, [pc, #356]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	4a58      	ldr	r2, [pc, #352]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a94:	4b53      	ldr	r3, [pc, #332]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	4a52      	ldr	r2, [pc, #328]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aa0:	4b50      	ldr	r3, [pc, #320]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	494d      	ldr	r1, [pc, #308]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0301 	and.w	r3, r3, #1
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d044      	beq.n	8005b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d107      	bne.n	8005ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ac6:	4b47      	ldr	r3, [pc, #284]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d119      	bne.n	8005b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e07f      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d003      	beq.n	8005ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d107      	bne.n	8005af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ae6:	4b3f      	ldr	r3, [pc, #252]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d109      	bne.n	8005b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e06f      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005af6:	4b3b      	ldr	r3, [pc, #236]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0302 	and.w	r3, r3, #2
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d101      	bne.n	8005b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e067      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005b06:	4b37      	ldr	r3, [pc, #220]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f023 0203 	bic.w	r2, r3, #3
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	4934      	ldr	r1, [pc, #208]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005b18:	f7fd fc08 	bl	800332c <HAL_GetTick>
 8005b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b1e:	e00a      	b.n	8005b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b20:	f7fd fc04 	bl	800332c <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d901      	bls.n	8005b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e04f      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b36:	4b2b      	ldr	r3, [pc, #172]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 020c 	and.w	r2, r3, #12
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d1eb      	bne.n	8005b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005b48:	4b25      	ldr	r3, [pc, #148]	; (8005be0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d20c      	bcs.n	8005b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b56:	4b22      	ldr	r3, [pc, #136]	; (8005be0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b58:	683a      	ldr	r2, [r7, #0]
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b5e:	4b20      	ldr	r3, [pc, #128]	; (8005be0 <HAL_RCC_ClockConfig+0x1b8>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0307 	and.w	r3, r3, #7
 8005b66:	683a      	ldr	r2, [r7, #0]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d001      	beq.n	8005b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	e032      	b.n	8005bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 0304 	and.w	r3, r3, #4
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d008      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b7c:	4b19      	ldr	r3, [pc, #100]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	4916      	ldr	r1, [pc, #88]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0308 	and.w	r3, r3, #8
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d009      	beq.n	8005bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b9a:	4b12      	ldr	r3, [pc, #72]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	490e      	ldr	r1, [pc, #56]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005bae:	f000 f821 	bl	8005bf4 <HAL_RCC_GetSysClockFreq>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <HAL_RCC_ClockConfig+0x1bc>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	091b      	lsrs	r3, r3, #4
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	490a      	ldr	r1, [pc, #40]	; (8005be8 <HAL_RCC_ClockConfig+0x1c0>)
 8005bc0:	5ccb      	ldrb	r3, [r1, r3]
 8005bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc6:	4a09      	ldr	r2, [pc, #36]	; (8005bec <HAL_RCC_ClockConfig+0x1c4>)
 8005bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005bca:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fd fb68 	bl	80032a4 <HAL_InitTick>

  return HAL_OK;
 8005bd4:	2300      	movs	r3, #0
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}
 8005bde:	bf00      	nop
 8005be0:	40023c00 	.word	0x40023c00
 8005be4:	40023800 	.word	0x40023800
 8005be8:	0800e950 	.word	0x0800e950
 8005bec:	20000018 	.word	0x20000018
 8005bf0:	2000001c 	.word	0x2000001c

08005bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bf4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005bf8:	b084      	sub	sp, #16
 8005bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	607b      	str	r3, [r7, #4]
 8005c00:	2300      	movs	r3, #0
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	2300      	movs	r3, #0
 8005c06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c0c:	4b67      	ldr	r3, [pc, #412]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f003 030c 	and.w	r3, r3, #12
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d00d      	beq.n	8005c34 <HAL_RCC_GetSysClockFreq+0x40>
 8005c18:	2b08      	cmp	r3, #8
 8005c1a:	f200 80bd 	bhi.w	8005d98 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <HAL_RCC_GetSysClockFreq+0x34>
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d003      	beq.n	8005c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8005c26:	e0b7      	b.n	8005d98 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c28:	4b61      	ldr	r3, [pc, #388]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005c2a:	60bb      	str	r3, [r7, #8]
       break;
 8005c2c:	e0b7      	b.n	8005d9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c2e:	4b61      	ldr	r3, [pc, #388]	; (8005db4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005c30:	60bb      	str	r3, [r7, #8]
      break;
 8005c32:	e0b4      	b.n	8005d9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c34:	4b5d      	ldr	r3, [pc, #372]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c3e:	4b5b      	ldr	r3, [pc, #364]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d04d      	beq.n	8005ce6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c4a:	4b58      	ldr	r3, [pc, #352]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	099b      	lsrs	r3, r3, #6
 8005c50:	461a      	mov	r2, r3
 8005c52:	f04f 0300 	mov.w	r3, #0
 8005c56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005c5a:	f04f 0100 	mov.w	r1, #0
 8005c5e:	ea02 0800 	and.w	r8, r2, r0
 8005c62:	ea03 0901 	and.w	r9, r3, r1
 8005c66:	4640      	mov	r0, r8
 8005c68:	4649      	mov	r1, r9
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	014b      	lsls	r3, r1, #5
 8005c74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005c78:	0142      	lsls	r2, r0, #5
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	ebb0 0008 	subs.w	r0, r0, r8
 8005c82:	eb61 0109 	sbc.w	r1, r1, r9
 8005c86:	f04f 0200 	mov.w	r2, #0
 8005c8a:	f04f 0300 	mov.w	r3, #0
 8005c8e:	018b      	lsls	r3, r1, #6
 8005c90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005c94:	0182      	lsls	r2, r0, #6
 8005c96:	1a12      	subs	r2, r2, r0
 8005c98:	eb63 0301 	sbc.w	r3, r3, r1
 8005c9c:	f04f 0000 	mov.w	r0, #0
 8005ca0:	f04f 0100 	mov.w	r1, #0
 8005ca4:	00d9      	lsls	r1, r3, #3
 8005ca6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005caa:	00d0      	lsls	r0, r2, #3
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	eb12 0208 	adds.w	r2, r2, r8
 8005cb4:	eb43 0309 	adc.w	r3, r3, r9
 8005cb8:	f04f 0000 	mov.w	r0, #0
 8005cbc:	f04f 0100 	mov.w	r1, #0
 8005cc0:	0259      	lsls	r1, r3, #9
 8005cc2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005cc6:	0250      	lsls	r0, r2, #9
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4610      	mov	r0, r2
 8005cce:	4619      	mov	r1, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	f04f 0300 	mov.w	r3, #0
 8005cd8:	f7fa ffd6 	bl	8000c88 <__aeabi_uldivmod>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	e04a      	b.n	8005d7c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ce6:	4b31      	ldr	r3, [pc, #196]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	099b      	lsrs	r3, r3, #6
 8005cec:	461a      	mov	r2, r3
 8005cee:	f04f 0300 	mov.w	r3, #0
 8005cf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005cf6:	f04f 0100 	mov.w	r1, #0
 8005cfa:	ea02 0400 	and.w	r4, r2, r0
 8005cfe:	ea03 0501 	and.w	r5, r3, r1
 8005d02:	4620      	mov	r0, r4
 8005d04:	4629      	mov	r1, r5
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	f04f 0300 	mov.w	r3, #0
 8005d0e:	014b      	lsls	r3, r1, #5
 8005d10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005d14:	0142      	lsls	r2, r0, #5
 8005d16:	4610      	mov	r0, r2
 8005d18:	4619      	mov	r1, r3
 8005d1a:	1b00      	subs	r0, r0, r4
 8005d1c:	eb61 0105 	sbc.w	r1, r1, r5
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	018b      	lsls	r3, r1, #6
 8005d2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005d2e:	0182      	lsls	r2, r0, #6
 8005d30:	1a12      	subs	r2, r2, r0
 8005d32:	eb63 0301 	sbc.w	r3, r3, r1
 8005d36:	f04f 0000 	mov.w	r0, #0
 8005d3a:	f04f 0100 	mov.w	r1, #0
 8005d3e:	00d9      	lsls	r1, r3, #3
 8005d40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d44:	00d0      	lsls	r0, r2, #3
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	1912      	adds	r2, r2, r4
 8005d4c:	eb45 0303 	adc.w	r3, r5, r3
 8005d50:	f04f 0000 	mov.w	r0, #0
 8005d54:	f04f 0100 	mov.w	r1, #0
 8005d58:	0299      	lsls	r1, r3, #10
 8005d5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005d5e:	0290      	lsls	r0, r2, #10
 8005d60:	4602      	mov	r2, r0
 8005d62:	460b      	mov	r3, r1
 8005d64:	4610      	mov	r0, r2
 8005d66:	4619      	mov	r1, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	f04f 0300 	mov.w	r3, #0
 8005d70:	f7fa ff8a 	bl	8000c88 <__aeabi_uldivmod>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4613      	mov	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	; (8005dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	0c1b      	lsrs	r3, r3, #16
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	3301      	adds	r3, #1
 8005d88:	005b      	lsls	r3, r3, #1
 8005d8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d94:	60bb      	str	r3, [r7, #8]
      break;
 8005d96:	e002      	b.n	8005d9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005d9a:	60bb      	str	r3, [r7, #8]
      break;
 8005d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3710      	adds	r7, #16
 8005da4:	46bd      	mov	sp, r7
 8005da6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005daa:	bf00      	nop
 8005dac:	40023800 	.word	0x40023800
 8005db0:	00f42400 	.word	0x00f42400
 8005db4:	007a1200 	.word	0x007a1200

08005db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005db8:	b480      	push	{r7}
 8005dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005dbc:	4b03      	ldr	r3, [pc, #12]	; (8005dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	20000018 	.word	0x20000018

08005dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005dd4:	f7ff fff0 	bl	8005db8 <HAL_RCC_GetHCLKFreq>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	4b05      	ldr	r3, [pc, #20]	; (8005df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	0a9b      	lsrs	r3, r3, #10
 8005de0:	f003 0307 	and.w	r3, r3, #7
 8005de4:	4903      	ldr	r1, [pc, #12]	; (8005df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005de6:	5ccb      	ldrb	r3, [r1, r3]
 8005de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	40023800 	.word	0x40023800
 8005df4:	0800e960 	.word	0x0800e960

08005df8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d101      	bne.n	8005e0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e06:	2301      	movs	r3, #1
 8005e08:	e041      	b.n	8005e8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e10:	b2db      	uxtb	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d106      	bne.n	8005e24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7fb feec 	bl	8001bfc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3304      	adds	r3, #4
 8005e34:	4619      	mov	r1, r3
 8005e36:	4610      	mov	r0, r2
 8005e38:	f000 fdf2 	bl	8006a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d001      	beq.n	8005eb0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e046      	b.n	8005f3e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a23      	ldr	r2, [pc, #140]	; (8005f4c <HAL_TIM_Base_Start+0xb4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d022      	beq.n	8005f08 <HAL_TIM_Base_Start+0x70>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eca:	d01d      	beq.n	8005f08 <HAL_TIM_Base_Start+0x70>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1f      	ldr	r2, [pc, #124]	; (8005f50 <HAL_TIM_Base_Start+0xb8>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d018      	beq.n	8005f08 <HAL_TIM_Base_Start+0x70>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1e      	ldr	r2, [pc, #120]	; (8005f54 <HAL_TIM_Base_Start+0xbc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d013      	beq.n	8005f08 <HAL_TIM_Base_Start+0x70>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1c      	ldr	r2, [pc, #112]	; (8005f58 <HAL_TIM_Base_Start+0xc0>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00e      	beq.n	8005f08 <HAL_TIM_Base_Start+0x70>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1b      	ldr	r2, [pc, #108]	; (8005f5c <HAL_TIM_Base_Start+0xc4>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d009      	beq.n	8005f08 <HAL_TIM_Base_Start+0x70>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a19      	ldr	r2, [pc, #100]	; (8005f60 <HAL_TIM_Base_Start+0xc8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d004      	beq.n	8005f08 <HAL_TIM_Base_Start+0x70>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a18      	ldr	r2, [pc, #96]	; (8005f64 <HAL_TIM_Base_Start+0xcc>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d111      	bne.n	8005f2c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2b06      	cmp	r3, #6
 8005f18:	d010      	beq.n	8005f3c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f042 0201 	orr.w	r2, r2, #1
 8005f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2a:	e007      	b.n	8005f3c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0201 	orr.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f3c:	2300      	movs	r3, #0
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40010400 	.word	0x40010400
 8005f60:	40014000 	.word	0x40014000
 8005f64:	40001800 	.word	0x40001800

08005f68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d001      	beq.n	8005f80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e04e      	b.n	800601e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f042 0201 	orr.w	r2, r2, #1
 8005f96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a23      	ldr	r2, [pc, #140]	; (800602c <HAL_TIM_Base_Start_IT+0xc4>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d022      	beq.n	8005fe8 <HAL_TIM_Base_Start_IT+0x80>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005faa:	d01d      	beq.n	8005fe8 <HAL_TIM_Base_Start_IT+0x80>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a1f      	ldr	r2, [pc, #124]	; (8006030 <HAL_TIM_Base_Start_IT+0xc8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d018      	beq.n	8005fe8 <HAL_TIM_Base_Start_IT+0x80>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1e      	ldr	r2, [pc, #120]	; (8006034 <HAL_TIM_Base_Start_IT+0xcc>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d013      	beq.n	8005fe8 <HAL_TIM_Base_Start_IT+0x80>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1c      	ldr	r2, [pc, #112]	; (8006038 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d00e      	beq.n	8005fe8 <HAL_TIM_Base_Start_IT+0x80>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a1b      	ldr	r2, [pc, #108]	; (800603c <HAL_TIM_Base_Start_IT+0xd4>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d009      	beq.n	8005fe8 <HAL_TIM_Base_Start_IT+0x80>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a19      	ldr	r2, [pc, #100]	; (8006040 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <HAL_TIM_Base_Start_IT+0x80>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a18      	ldr	r2, [pc, #96]	; (8006044 <HAL_TIM_Base_Start_IT+0xdc>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d111      	bne.n	800600c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0307 	and.w	r3, r3, #7
 8005ff2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b06      	cmp	r3, #6
 8005ff8:	d010      	beq.n	800601c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0201 	orr.w	r2, r2, #1
 8006008:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800600a:	e007      	b.n	800601c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0201 	orr.w	r2, r2, #1
 800601a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	40010000 	.word	0x40010000
 8006030:	40000400 	.word	0x40000400
 8006034:	40000800 	.word	0x40000800
 8006038:	40000c00 	.word	0x40000c00
 800603c:	40010400 	.word	0x40010400
 8006040:	40014000 	.word	0x40014000
 8006044:	40001800 	.word	0x40001800

08006048 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d101      	bne.n	800605a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	e041      	b.n	80060de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006060:	b2db      	uxtb	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 f839 	bl	80060e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2202      	movs	r2, #2
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3304      	adds	r3, #4
 8006084:	4619      	mov	r1, r3
 8006086:	4610      	mov	r0, r2
 8006088:	f000 fcca 	bl	8006a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2201      	movs	r2, #1
 8006098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2201      	movs	r2, #1
 80060b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2201      	movs	r2, #1
 80060c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3708      	adds	r7, #8
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
	...

080060fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d109      	bne.n	8006120 <HAL_TIM_PWM_Start+0x24>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b01      	cmp	r3, #1
 8006116:	bf14      	ite	ne
 8006118:	2301      	movne	r3, #1
 800611a:	2300      	moveq	r3, #0
 800611c:	b2db      	uxtb	r3, r3
 800611e:	e022      	b.n	8006166 <HAL_TIM_PWM_Start+0x6a>
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b04      	cmp	r3, #4
 8006124:	d109      	bne.n	800613a <HAL_TIM_PWM_Start+0x3e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b01      	cmp	r3, #1
 8006130:	bf14      	ite	ne
 8006132:	2301      	movne	r3, #1
 8006134:	2300      	moveq	r3, #0
 8006136:	b2db      	uxtb	r3, r3
 8006138:	e015      	b.n	8006166 <HAL_TIM_PWM_Start+0x6a>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b08      	cmp	r3, #8
 800613e:	d109      	bne.n	8006154 <HAL_TIM_PWM_Start+0x58>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006146:	b2db      	uxtb	r3, r3
 8006148:	2b01      	cmp	r3, #1
 800614a:	bf14      	ite	ne
 800614c:	2301      	movne	r3, #1
 800614e:	2300      	moveq	r3, #0
 8006150:	b2db      	uxtb	r3, r3
 8006152:	e008      	b.n	8006166 <HAL_TIM_PWM_Start+0x6a>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b01      	cmp	r3, #1
 800615e:	bf14      	ite	ne
 8006160:	2301      	movne	r3, #1
 8006162:	2300      	moveq	r3, #0
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e07c      	b.n	8006268 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d104      	bne.n	800617e <HAL_TIM_PWM_Start+0x82>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800617c:	e013      	b.n	80061a6 <HAL_TIM_PWM_Start+0xaa>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b04      	cmp	r3, #4
 8006182:	d104      	bne.n	800618e <HAL_TIM_PWM_Start+0x92>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800618c:	e00b      	b.n	80061a6 <HAL_TIM_PWM_Start+0xaa>
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	2b08      	cmp	r3, #8
 8006192:	d104      	bne.n	800619e <HAL_TIM_PWM_Start+0xa2>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2202      	movs	r2, #2
 8006198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800619c:	e003      	b.n	80061a6 <HAL_TIM_PWM_Start+0xaa>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2202      	movs	r2, #2
 80061a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2201      	movs	r2, #1
 80061ac:	6839      	ldr	r1, [r7, #0]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 ff20 	bl	8006ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a2d      	ldr	r2, [pc, #180]	; (8006270 <HAL_TIM_PWM_Start+0x174>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d004      	beq.n	80061c8 <HAL_TIM_PWM_Start+0xcc>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a2c      	ldr	r2, [pc, #176]	; (8006274 <HAL_TIM_PWM_Start+0x178>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d101      	bne.n	80061cc <HAL_TIM_PWM_Start+0xd0>
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <HAL_TIM_PWM_Start+0xd2>
 80061cc:	2300      	movs	r3, #0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d007      	beq.n	80061e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a22      	ldr	r2, [pc, #136]	; (8006270 <HAL_TIM_PWM_Start+0x174>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d022      	beq.n	8006232 <HAL_TIM_PWM_Start+0x136>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f4:	d01d      	beq.n	8006232 <HAL_TIM_PWM_Start+0x136>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a1f      	ldr	r2, [pc, #124]	; (8006278 <HAL_TIM_PWM_Start+0x17c>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d018      	beq.n	8006232 <HAL_TIM_PWM_Start+0x136>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	4a1d      	ldr	r2, [pc, #116]	; (800627c <HAL_TIM_PWM_Start+0x180>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d013      	beq.n	8006232 <HAL_TIM_PWM_Start+0x136>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4a1c      	ldr	r2, [pc, #112]	; (8006280 <HAL_TIM_PWM_Start+0x184>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d00e      	beq.n	8006232 <HAL_TIM_PWM_Start+0x136>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a16      	ldr	r2, [pc, #88]	; (8006274 <HAL_TIM_PWM_Start+0x178>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d009      	beq.n	8006232 <HAL_TIM_PWM_Start+0x136>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a18      	ldr	r2, [pc, #96]	; (8006284 <HAL_TIM_PWM_Start+0x188>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d004      	beq.n	8006232 <HAL_TIM_PWM_Start+0x136>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a16      	ldr	r2, [pc, #88]	; (8006288 <HAL_TIM_PWM_Start+0x18c>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d111      	bne.n	8006256 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b06      	cmp	r3, #6
 8006242:	d010      	beq.n	8006266 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0201 	orr.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006254:	e007      	b.n	8006266 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f042 0201 	orr.w	r2, r2, #1
 8006264:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3710      	adds	r7, #16
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40010000 	.word	0x40010000
 8006274:	40010400 	.word	0x40010400
 8006278:	40000400 	.word	0x40000400
 800627c:	40000800 	.word	0x40000800
 8006280:	40000c00 	.word	0x40000c00
 8006284:	40014000 	.word	0x40014000
 8006288:	40001800 	.word	0x40001800

0800628c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d109      	bne.n	80062b0 <HAL_TIM_PWM_Start_IT+0x24>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	2b01      	cmp	r3, #1
 80062a6:	bf14      	ite	ne
 80062a8:	2301      	movne	r3, #1
 80062aa:	2300      	moveq	r3, #0
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	e022      	b.n	80062f6 <HAL_TIM_PWM_Start_IT+0x6a>
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d109      	bne.n	80062ca <HAL_TIM_PWM_Start_IT+0x3e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b01      	cmp	r3, #1
 80062c0:	bf14      	ite	ne
 80062c2:	2301      	movne	r3, #1
 80062c4:	2300      	moveq	r3, #0
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	e015      	b.n	80062f6 <HAL_TIM_PWM_Start_IT+0x6a>
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d109      	bne.n	80062e4 <HAL_TIM_PWM_Start_IT+0x58>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	2b01      	cmp	r3, #1
 80062da:	bf14      	ite	ne
 80062dc:	2301      	movne	r3, #1
 80062de:	2300      	moveq	r3, #0
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	e008      	b.n	80062f6 <HAL_TIM_PWM_Start_IT+0x6a>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	bf14      	ite	ne
 80062f0:	2301      	movne	r3, #1
 80062f2:	2300      	moveq	r3, #0
 80062f4:	b2db      	uxtb	r3, r3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e0c2      	b.n	8006484 <HAL_TIM_PWM_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d104      	bne.n	800630e <HAL_TIM_PWM_Start_IT+0x82>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2202      	movs	r2, #2
 8006308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800630c:	e013      	b.n	8006336 <HAL_TIM_PWM_Start_IT+0xaa>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b04      	cmp	r3, #4
 8006312:	d104      	bne.n	800631e <HAL_TIM_PWM_Start_IT+0x92>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800631c:	e00b      	b.n	8006336 <HAL_TIM_PWM_Start_IT+0xaa>
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	2b08      	cmp	r3, #8
 8006322:	d104      	bne.n	800632e <HAL_TIM_PWM_Start_IT+0xa2>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2202      	movs	r2, #2
 8006328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800632c:	e003      	b.n	8006336 <HAL_TIM_PWM_Start_IT+0xaa>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2202      	movs	r2, #2
 8006332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b0c      	cmp	r3, #12
 800633a:	d841      	bhi.n	80063c0 <HAL_TIM_PWM_Start_IT+0x134>
 800633c:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <HAL_TIM_PWM_Start_IT+0xb8>)
 800633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006342:	bf00      	nop
 8006344:	08006379 	.word	0x08006379
 8006348:	080063c1 	.word	0x080063c1
 800634c:	080063c1 	.word	0x080063c1
 8006350:	080063c1 	.word	0x080063c1
 8006354:	0800638b 	.word	0x0800638b
 8006358:	080063c1 	.word	0x080063c1
 800635c:	080063c1 	.word	0x080063c1
 8006360:	080063c1 	.word	0x080063c1
 8006364:	0800639d 	.word	0x0800639d
 8006368:	080063c1 	.word	0x080063c1
 800636c:	080063c1 	.word	0x080063c1
 8006370:	080063c1 	.word	0x080063c1
 8006374:	080063af 	.word	0x080063af
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68da      	ldr	r2, [r3, #12]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0202 	orr.w	r2, r2, #2
 8006386:	60da      	str	r2, [r3, #12]
      break;
 8006388:	e01b      	b.n	80063c2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	68da      	ldr	r2, [r3, #12]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0204 	orr.w	r2, r2, #4
 8006398:	60da      	str	r2, [r3, #12]
      break;
 800639a:	e012      	b.n	80063c2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0208 	orr.w	r2, r2, #8
 80063aa:	60da      	str	r2, [r3, #12]
      break;
 80063ac:	e009      	b.n	80063c2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0210 	orr.w	r2, r2, #16
 80063bc:	60da      	str	r2, [r3, #12]
      break;
 80063be:	e000      	b.n	80063c2 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 80063c0:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2201      	movs	r2, #1
 80063c8:	6839      	ldr	r1, [r7, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 fe12 	bl	8006ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a2d      	ldr	r2, [pc, #180]	; (800648c <HAL_TIM_PWM_Start_IT+0x200>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d004      	beq.n	80063e4 <HAL_TIM_PWM_Start_IT+0x158>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a2c      	ldr	r2, [pc, #176]	; (8006490 <HAL_TIM_PWM_Start_IT+0x204>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d101      	bne.n	80063e8 <HAL_TIM_PWM_Start_IT+0x15c>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <HAL_TIM_PWM_Start_IT+0x15e>
 80063e8:	2300      	movs	r3, #0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d007      	beq.n	80063fe <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a22      	ldr	r2, [pc, #136]	; (800648c <HAL_TIM_PWM_Start_IT+0x200>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d022      	beq.n	800644e <HAL_TIM_PWM_Start_IT+0x1c2>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006410:	d01d      	beq.n	800644e <HAL_TIM_PWM_Start_IT+0x1c2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a1f      	ldr	r2, [pc, #124]	; (8006494 <HAL_TIM_PWM_Start_IT+0x208>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d018      	beq.n	800644e <HAL_TIM_PWM_Start_IT+0x1c2>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a1d      	ldr	r2, [pc, #116]	; (8006498 <HAL_TIM_PWM_Start_IT+0x20c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d013      	beq.n	800644e <HAL_TIM_PWM_Start_IT+0x1c2>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	4a1c      	ldr	r2, [pc, #112]	; (800649c <HAL_TIM_PWM_Start_IT+0x210>)
 800642c:	4293      	cmp	r3, r2
 800642e:	d00e      	beq.n	800644e <HAL_TIM_PWM_Start_IT+0x1c2>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a16      	ldr	r2, [pc, #88]	; (8006490 <HAL_TIM_PWM_Start_IT+0x204>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d009      	beq.n	800644e <HAL_TIM_PWM_Start_IT+0x1c2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a18      	ldr	r2, [pc, #96]	; (80064a0 <HAL_TIM_PWM_Start_IT+0x214>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d004      	beq.n	800644e <HAL_TIM_PWM_Start_IT+0x1c2>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a16      	ldr	r2, [pc, #88]	; (80064a4 <HAL_TIM_PWM_Start_IT+0x218>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d111      	bne.n	8006472 <HAL_TIM_PWM_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	f003 0307 	and.w	r3, r3, #7
 8006458:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b06      	cmp	r3, #6
 800645e:	d010      	beq.n	8006482 <HAL_TIM_PWM_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f042 0201 	orr.w	r2, r2, #1
 800646e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006470:	e007      	b.n	8006482 <HAL_TIM_PWM_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0201 	orr.w	r2, r2, #1
 8006480:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3710      	adds	r7, #16
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}
 800648c:	40010000 	.word	0x40010000
 8006490:	40010400 	.word	0x40010400
 8006494:	40000400 	.word	0x40000400
 8006498:	40000800 	.word	0x40000800
 800649c:	40000c00 	.word	0x40000c00
 80064a0:	40014000 	.word	0x40014000
 80064a4:	40001800 	.word	0x40001800

080064a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b02      	cmp	r3, #2
 80064bc:	d122      	bne.n	8006504 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0302 	and.w	r3, r3, #2
 80064c8:	2b02      	cmp	r3, #2
 80064ca:	d11b      	bne.n	8006504 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f06f 0202 	mvn.w	r2, #2
 80064d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2201      	movs	r2, #1
 80064da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	f003 0303 	and.w	r3, r3, #3
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fa7a 	bl	80069e4 <HAL_TIM_IC_CaptureCallback>
 80064f0:	e005      	b.n	80064fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fa6c 	bl	80069d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fa7d 	bl	80069f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b04      	cmp	r3, #4
 8006510:	d122      	bne.n	8006558 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f003 0304 	and.w	r3, r3, #4
 800651c:	2b04      	cmp	r3, #4
 800651e:	d11b      	bne.n	8006558 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f06f 0204 	mvn.w	r2, #4
 8006528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2202      	movs	r2, #2
 800652e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800653a:	2b00      	cmp	r3, #0
 800653c:	d003      	beq.n	8006546 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 fa50 	bl	80069e4 <HAL_TIM_IC_CaptureCallback>
 8006544:	e005      	b.n	8006552 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fa42 	bl	80069d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 fa53 	bl	80069f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2200      	movs	r2, #0
 8006556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f003 0308 	and.w	r3, r3, #8
 8006562:	2b08      	cmp	r3, #8
 8006564:	d122      	bne.n	80065ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	f003 0308 	and.w	r3, r3, #8
 8006570:	2b08      	cmp	r3, #8
 8006572:	d11b      	bne.n	80065ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f06f 0208 	mvn.w	r2, #8
 800657c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2204      	movs	r2, #4
 8006582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	69db      	ldr	r3, [r3, #28]
 800658a:	f003 0303 	and.w	r3, r3, #3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d003      	beq.n	800659a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 fa26 	bl	80069e4 <HAL_TIM_IC_CaptureCallback>
 8006598:	e005      	b.n	80065a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fa18 	bl	80069d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fa29 	bl	80069f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	f003 0310 	and.w	r3, r3, #16
 80065b6:	2b10      	cmp	r3, #16
 80065b8:	d122      	bne.n	8006600 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	f003 0310 	and.w	r3, r3, #16
 80065c4:	2b10      	cmp	r3, #16
 80065c6:	d11b      	bne.n	8006600 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f06f 0210 	mvn.w	r2, #16
 80065d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2208      	movs	r2, #8
 80065d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	69db      	ldr	r3, [r3, #28]
 80065de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 f9fc 	bl	80069e4 <HAL_TIM_IC_CaptureCallback>
 80065ec:	e005      	b.n	80065fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f9ee 	bl	80069d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 f9ff 	bl	80069f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b01      	cmp	r3, #1
 800660c:	d10e      	bne.n	800662c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b01      	cmp	r3, #1
 800661a:	d107      	bne.n	800662c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f06f 0201 	mvn.w	r2, #1
 8006624:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 f9c8 	bl	80069bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006636:	2b80      	cmp	r3, #128	; 0x80
 8006638:	d10e      	bne.n	8006658 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006644:	2b80      	cmp	r3, #128	; 0x80
 8006646:	d107      	bne.n	8006658 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 fd7a 	bl	800714c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006662:	2b40      	cmp	r3, #64	; 0x40
 8006664:	d10e      	bne.n	8006684 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006670:	2b40      	cmp	r3, #64	; 0x40
 8006672:	d107      	bne.n	8006684 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800667c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 f9c4 	bl	8006a0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	f003 0320 	and.w	r3, r3, #32
 800668e:	2b20      	cmp	r3, #32
 8006690:	d10e      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	f003 0320 	and.w	r3, r3, #32
 800669c:	2b20      	cmp	r3, #32
 800669e:	d107      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f06f 0220 	mvn.w	r2, #32
 80066a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fd44 	bl	8007138 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066b0:	bf00      	nop
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d101      	bne.n	80066d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80066ce:	2302      	movs	r3, #2
 80066d0:	e0ac      	b.n	800682c <HAL_TIM_PWM_ConfigChannel+0x174>
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2201      	movs	r2, #1
 80066d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2b0c      	cmp	r3, #12
 80066de:	f200 809f 	bhi.w	8006820 <HAL_TIM_PWM_ConfigChannel+0x168>
 80066e2:	a201      	add	r2, pc, #4	; (adr r2, 80066e8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80066e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e8:	0800671d 	.word	0x0800671d
 80066ec:	08006821 	.word	0x08006821
 80066f0:	08006821 	.word	0x08006821
 80066f4:	08006821 	.word	0x08006821
 80066f8:	0800675d 	.word	0x0800675d
 80066fc:	08006821 	.word	0x08006821
 8006700:	08006821 	.word	0x08006821
 8006704:	08006821 	.word	0x08006821
 8006708:	0800679f 	.word	0x0800679f
 800670c:	08006821 	.word	0x08006821
 8006710:	08006821 	.word	0x08006821
 8006714:	08006821 	.word	0x08006821
 8006718:	080067df 	.word	0x080067df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68b9      	ldr	r1, [r7, #8]
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fa1c 	bl	8006b60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	699a      	ldr	r2, [r3, #24]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0208 	orr.w	r2, r2, #8
 8006736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	699a      	ldr	r2, [r3, #24]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f022 0204 	bic.w	r2, r2, #4
 8006746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6999      	ldr	r1, [r3, #24]
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	691a      	ldr	r2, [r3, #16]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	619a      	str	r2, [r3, #24]
      break;
 800675a:	e062      	b.n	8006822 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68b9      	ldr	r1, [r7, #8]
 8006762:	4618      	mov	r0, r3
 8006764:	f000 fa6c 	bl	8006c40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	699a      	ldr	r2, [r3, #24]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6999      	ldr	r1, [r3, #24]
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	021a      	lsls	r2, r3, #8
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	619a      	str	r2, [r3, #24]
      break;
 800679c:	e041      	b.n	8006822 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68b9      	ldr	r1, [r7, #8]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 fac1 	bl	8006d2c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	69da      	ldr	r2, [r3, #28]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f042 0208 	orr.w	r2, r2, #8
 80067b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0204 	bic.w	r2, r2, #4
 80067c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	69d9      	ldr	r1, [r3, #28]
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	691a      	ldr	r2, [r3, #16]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	430a      	orrs	r2, r1
 80067da:	61da      	str	r2, [r3, #28]
      break;
 80067dc:	e021      	b.n	8006822 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68b9      	ldr	r1, [r7, #8]
 80067e4:	4618      	mov	r0, r3
 80067e6:	f000 fb15 	bl	8006e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	69da      	ldr	r2, [r3, #28]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69da      	ldr	r2, [r3, #28]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69d9      	ldr	r1, [r3, #28]
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	021a      	lsls	r2, r3, #8
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	430a      	orrs	r2, r1
 800681c:	61da      	str	r2, [r3, #28]
      break;
 800681e:	e000      	b.n	8006822 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006820:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006844:	2b01      	cmp	r3, #1
 8006846:	d101      	bne.n	800684c <HAL_TIM_ConfigClockSource+0x18>
 8006848:	2302      	movs	r3, #2
 800684a:	e0b3      	b.n	80069b4 <HAL_TIM_ConfigClockSource+0x180>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2202      	movs	r2, #2
 8006858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800686a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006872:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006884:	d03e      	beq.n	8006904 <HAL_TIM_ConfigClockSource+0xd0>
 8006886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800688a:	f200 8087 	bhi.w	800699c <HAL_TIM_ConfigClockSource+0x168>
 800688e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006892:	f000 8085 	beq.w	80069a0 <HAL_TIM_ConfigClockSource+0x16c>
 8006896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800689a:	d87f      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x168>
 800689c:	2b70      	cmp	r3, #112	; 0x70
 800689e:	d01a      	beq.n	80068d6 <HAL_TIM_ConfigClockSource+0xa2>
 80068a0:	2b70      	cmp	r3, #112	; 0x70
 80068a2:	d87b      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x168>
 80068a4:	2b60      	cmp	r3, #96	; 0x60
 80068a6:	d050      	beq.n	800694a <HAL_TIM_ConfigClockSource+0x116>
 80068a8:	2b60      	cmp	r3, #96	; 0x60
 80068aa:	d877      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x168>
 80068ac:	2b50      	cmp	r3, #80	; 0x50
 80068ae:	d03c      	beq.n	800692a <HAL_TIM_ConfigClockSource+0xf6>
 80068b0:	2b50      	cmp	r3, #80	; 0x50
 80068b2:	d873      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x168>
 80068b4:	2b40      	cmp	r3, #64	; 0x40
 80068b6:	d058      	beq.n	800696a <HAL_TIM_ConfigClockSource+0x136>
 80068b8:	2b40      	cmp	r3, #64	; 0x40
 80068ba:	d86f      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x168>
 80068bc:	2b30      	cmp	r3, #48	; 0x30
 80068be:	d064      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x156>
 80068c0:	2b30      	cmp	r3, #48	; 0x30
 80068c2:	d86b      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x168>
 80068c4:	2b20      	cmp	r3, #32
 80068c6:	d060      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x156>
 80068c8:	2b20      	cmp	r3, #32
 80068ca:	d867      	bhi.n	800699c <HAL_TIM_ConfigClockSource+0x168>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d05c      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x156>
 80068d0:	2b10      	cmp	r3, #16
 80068d2:	d05a      	beq.n	800698a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80068d4:	e062      	b.n	800699c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	6899      	ldr	r1, [r3, #8]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f000 fb65 	bl	8006fb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80068f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	609a      	str	r2, [r3, #8]
      break;
 8006902:	e04e      	b.n	80069a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6818      	ldr	r0, [r3, #0]
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	6899      	ldr	r1, [r3, #8]
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	685a      	ldr	r2, [r3, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f000 fb4e 	bl	8006fb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006926:	609a      	str	r2, [r3, #8]
      break;
 8006928:	e03b      	b.n	80069a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	6859      	ldr	r1, [r3, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	461a      	mov	r2, r3
 8006938:	f000 fac2 	bl	8006ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2150      	movs	r1, #80	; 0x50
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fb1b 	bl	8006f7e <TIM_ITRx_SetConfig>
      break;
 8006948:	e02b      	b.n	80069a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6818      	ldr	r0, [r3, #0]
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	6859      	ldr	r1, [r3, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	461a      	mov	r2, r3
 8006958:	f000 fae1 	bl	8006f1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	2160      	movs	r1, #96	; 0x60
 8006962:	4618      	mov	r0, r3
 8006964:	f000 fb0b 	bl	8006f7e <TIM_ITRx_SetConfig>
      break;
 8006968:	e01b      	b.n	80069a2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6818      	ldr	r0, [r3, #0]
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	6859      	ldr	r1, [r3, #4]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	461a      	mov	r2, r3
 8006978:	f000 faa2 	bl	8006ec0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2140      	movs	r1, #64	; 0x40
 8006982:	4618      	mov	r0, r3
 8006984:	f000 fafb 	bl	8006f7e <TIM_ITRx_SetConfig>
      break;
 8006988:	e00b      	b.n	80069a2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4619      	mov	r1, r3
 8006994:	4610      	mov	r0, r2
 8006996:	f000 faf2 	bl	8006f7e <TIM_ITRx_SetConfig>
        break;
 800699a:	e002      	b.n	80069a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800699c:	bf00      	nop
 800699e:	e000      	b.n	80069a2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80069a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a40      	ldr	r2, [pc, #256]	; (8006b34 <TIM_Base_SetConfig+0x114>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d013      	beq.n	8006a60 <TIM_Base_SetConfig+0x40>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a3e:	d00f      	beq.n	8006a60 <TIM_Base_SetConfig+0x40>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a3d      	ldr	r2, [pc, #244]	; (8006b38 <TIM_Base_SetConfig+0x118>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d00b      	beq.n	8006a60 <TIM_Base_SetConfig+0x40>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a3c      	ldr	r2, [pc, #240]	; (8006b3c <TIM_Base_SetConfig+0x11c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d007      	beq.n	8006a60 <TIM_Base_SetConfig+0x40>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a3b      	ldr	r2, [pc, #236]	; (8006b40 <TIM_Base_SetConfig+0x120>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d003      	beq.n	8006a60 <TIM_Base_SetConfig+0x40>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a3a      	ldr	r2, [pc, #232]	; (8006b44 <TIM_Base_SetConfig+0x124>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d108      	bne.n	8006a72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	4a2f      	ldr	r2, [pc, #188]	; (8006b34 <TIM_Base_SetConfig+0x114>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d02b      	beq.n	8006ad2 <TIM_Base_SetConfig+0xb2>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a80:	d027      	beq.n	8006ad2 <TIM_Base_SetConfig+0xb2>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a2c      	ldr	r2, [pc, #176]	; (8006b38 <TIM_Base_SetConfig+0x118>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d023      	beq.n	8006ad2 <TIM_Base_SetConfig+0xb2>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a2b      	ldr	r2, [pc, #172]	; (8006b3c <TIM_Base_SetConfig+0x11c>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d01f      	beq.n	8006ad2 <TIM_Base_SetConfig+0xb2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a2a      	ldr	r2, [pc, #168]	; (8006b40 <TIM_Base_SetConfig+0x120>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d01b      	beq.n	8006ad2 <TIM_Base_SetConfig+0xb2>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a29      	ldr	r2, [pc, #164]	; (8006b44 <TIM_Base_SetConfig+0x124>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d017      	beq.n	8006ad2 <TIM_Base_SetConfig+0xb2>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	4a28      	ldr	r2, [pc, #160]	; (8006b48 <TIM_Base_SetConfig+0x128>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d013      	beq.n	8006ad2 <TIM_Base_SetConfig+0xb2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4a27      	ldr	r2, [pc, #156]	; (8006b4c <TIM_Base_SetConfig+0x12c>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d00f      	beq.n	8006ad2 <TIM_Base_SetConfig+0xb2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	4a26      	ldr	r2, [pc, #152]	; (8006b50 <TIM_Base_SetConfig+0x130>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00b      	beq.n	8006ad2 <TIM_Base_SetConfig+0xb2>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a25      	ldr	r2, [pc, #148]	; (8006b54 <TIM_Base_SetConfig+0x134>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d007      	beq.n	8006ad2 <TIM_Base_SetConfig+0xb2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a24      	ldr	r2, [pc, #144]	; (8006b58 <TIM_Base_SetConfig+0x138>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d003      	beq.n	8006ad2 <TIM_Base_SetConfig+0xb2>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a23      	ldr	r2, [pc, #140]	; (8006b5c <TIM_Base_SetConfig+0x13c>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d108      	bne.n	8006ae4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	695b      	ldr	r3, [r3, #20]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689a      	ldr	r2, [r3, #8]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a0a      	ldr	r2, [pc, #40]	; (8006b34 <TIM_Base_SetConfig+0x114>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d003      	beq.n	8006b18 <TIM_Base_SetConfig+0xf8>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a0c      	ldr	r2, [pc, #48]	; (8006b44 <TIM_Base_SetConfig+0x124>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d103      	bne.n	8006b20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	691a      	ldr	r2, [r3, #16]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	615a      	str	r2, [r3, #20]
}
 8006b26:	bf00      	nop
 8006b28:	3714      	adds	r7, #20
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b30:	4770      	bx	lr
 8006b32:	bf00      	nop
 8006b34:	40010000 	.word	0x40010000
 8006b38:	40000400 	.word	0x40000400
 8006b3c:	40000800 	.word	0x40000800
 8006b40:	40000c00 	.word	0x40000c00
 8006b44:	40010400 	.word	0x40010400
 8006b48:	40014000 	.word	0x40014000
 8006b4c:	40014400 	.word	0x40014400
 8006b50:	40014800 	.word	0x40014800
 8006b54:	40001800 	.word	0x40001800
 8006b58:	40001c00 	.word	0x40001c00
 8006b5c:	40002000 	.word	0x40002000

08006b60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	f023 0201 	bic.w	r2, r3, #1
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0303 	bic.w	r3, r3, #3
 8006b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f023 0302 	bic.w	r3, r3, #2
 8006ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4a20      	ldr	r2, [pc, #128]	; (8006c38 <TIM_OC1_SetConfig+0xd8>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d003      	beq.n	8006bc4 <TIM_OC1_SetConfig+0x64>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a1f      	ldr	r2, [pc, #124]	; (8006c3c <TIM_OC1_SetConfig+0xdc>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d10c      	bne.n	8006bde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f023 0308 	bic.w	r3, r3, #8
 8006bca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f023 0304 	bic.w	r3, r3, #4
 8006bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a15      	ldr	r2, [pc, #84]	; (8006c38 <TIM_OC1_SetConfig+0xd8>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d003      	beq.n	8006bee <TIM_OC1_SetConfig+0x8e>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a14      	ldr	r2, [pc, #80]	; (8006c3c <TIM_OC1_SetConfig+0xdc>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d111      	bne.n	8006c12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	4313      	orrs	r3, r2
 8006c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68fa      	ldr	r2, [r7, #12]
 8006c1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	621a      	str	r2, [r3, #32]
}
 8006c2c:	bf00      	nop
 8006c2e:	371c      	adds	r7, #28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	40010000 	.word	0x40010000
 8006c3c:	40010400 	.word	0x40010400

08006c40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b087      	sub	sp, #28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	f023 0210 	bic.w	r2, r3, #16
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	021b      	lsls	r3, r3, #8
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4313      	orrs	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f023 0320 	bic.w	r3, r3, #32
 8006c8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	011b      	lsls	r3, r3, #4
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a22      	ldr	r2, [pc, #136]	; (8006d24 <TIM_OC2_SetConfig+0xe4>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d003      	beq.n	8006ca8 <TIM_OC2_SetConfig+0x68>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a21      	ldr	r2, [pc, #132]	; (8006d28 <TIM_OC2_SetConfig+0xe8>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d10d      	bne.n	8006cc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	011b      	lsls	r3, r3, #4
 8006cb6:	697a      	ldr	r2, [r7, #20]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a17      	ldr	r2, [pc, #92]	; (8006d24 <TIM_OC2_SetConfig+0xe4>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d003      	beq.n	8006cd4 <TIM_OC2_SetConfig+0x94>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a16      	ldr	r2, [pc, #88]	; (8006d28 <TIM_OC2_SetConfig+0xe8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d113      	bne.n	8006cfc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006cda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ce2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	695b      	ldr	r3, [r3, #20]
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68fa      	ldr	r2, [r7, #12]
 8006d06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	621a      	str	r2, [r3, #32]
}
 8006d16:	bf00      	nop
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	40010000 	.word	0x40010000
 8006d28:	40010400 	.word	0x40010400

08006d2c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a1b      	ldr	r3, [r3, #32]
 8006d46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	69db      	ldr	r3, [r3, #28]
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f023 0303 	bic.w	r3, r3, #3
 8006d62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	68fa      	ldr	r2, [r7, #12]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	021b      	lsls	r3, r3, #8
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4a21      	ldr	r2, [pc, #132]	; (8006e0c <TIM_OC3_SetConfig+0xe0>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d003      	beq.n	8006d92 <TIM_OC3_SetConfig+0x66>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a20      	ldr	r2, [pc, #128]	; (8006e10 <TIM_OC3_SetConfig+0xe4>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d10d      	bne.n	8006dae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	68db      	ldr	r3, [r3, #12]
 8006d9e:	021b      	lsls	r3, r3, #8
 8006da0:	697a      	ldr	r2, [r7, #20]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a16      	ldr	r2, [pc, #88]	; (8006e0c <TIM_OC3_SetConfig+0xe0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d003      	beq.n	8006dbe <TIM_OC3_SetConfig+0x92>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a15      	ldr	r2, [pc, #84]	; (8006e10 <TIM_OC3_SetConfig+0xe4>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d113      	bne.n	8006de6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	685a      	ldr	r2, [r3, #4]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	621a      	str	r2, [r3, #32]
}
 8006e00:	bf00      	nop
 8006e02:	371c      	adds	r7, #28
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	40010000 	.word	0x40010000
 8006e10:	40010400 	.word	0x40010400

08006e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a1b      	ldr	r3, [r3, #32]
 8006e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a1b      	ldr	r3, [r3, #32]
 8006e2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	69db      	ldr	r3, [r3, #28]
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	021b      	lsls	r3, r3, #8
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	031b      	lsls	r3, r3, #12
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a12      	ldr	r2, [pc, #72]	; (8006eb8 <TIM_OC4_SetConfig+0xa4>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d003      	beq.n	8006e7c <TIM_OC4_SetConfig+0x68>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a11      	ldr	r2, [pc, #68]	; (8006ebc <TIM_OC4_SetConfig+0xa8>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d109      	bne.n	8006e90 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	019b      	lsls	r3, r3, #6
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685a      	ldr	r2, [r3, #4]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	621a      	str	r2, [r3, #32]
}
 8006eaa:	bf00      	nop
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr
 8006eb6:	bf00      	nop
 8006eb8:	40010000 	.word	0x40010000
 8006ebc:	40010400 	.word	0x40010400

08006ec0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	f023 0201 	bic.w	r2, r3, #1
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	699b      	ldr	r3, [r3, #24]
 8006ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	011b      	lsls	r3, r3, #4
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	4313      	orrs	r3, r2
 8006ef4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f023 030a 	bic.w	r3, r3, #10
 8006efc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006efe:	697a      	ldr	r2, [r7, #20]
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	693a      	ldr	r2, [r7, #16]
 8006f0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	621a      	str	r2, [r3, #32]
}
 8006f12:	bf00      	nop
 8006f14:	371c      	adds	r7, #28
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f1e:	b480      	push	{r7}
 8006f20:	b087      	sub	sp, #28
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	60b9      	str	r1, [r7, #8]
 8006f28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	f023 0210 	bic.w	r2, r3, #16
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	031b      	lsls	r3, r3, #12
 8006f4e:	697a      	ldr	r2, [r7, #20]
 8006f50:	4313      	orrs	r3, r2
 8006f52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	011b      	lsls	r3, r3, #4
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	697a      	ldr	r2, [r7, #20]
 8006f6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	693a      	ldr	r2, [r7, #16]
 8006f70:	621a      	str	r2, [r3, #32]
}
 8006f72:	bf00      	nop
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7c:	4770      	bx	lr

08006f7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f7e:	b480      	push	{r7}
 8006f80:	b085      	sub	sp, #20
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
 8006f86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	f043 0307 	orr.w	r3, r3, #7
 8006fa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	609a      	str	r2, [r3, #8]
}
 8006fa8:	bf00      	nop
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b087      	sub	sp, #28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	021a      	lsls	r2, r3, #8
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	697a      	ldr	r2, [r7, #20]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	609a      	str	r2, [r3, #8]
}
 8006fe8:	bf00      	nop
 8006fea:	371c      	adds	r7, #28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f003 031f 	and.w	r3, r3, #31
 8007006:	2201      	movs	r2, #1
 8007008:	fa02 f303 	lsl.w	r3, r2, r3
 800700c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6a1a      	ldr	r2, [r3, #32]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	43db      	mvns	r3, r3
 8007016:	401a      	ands	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a1a      	ldr	r2, [r3, #32]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f003 031f 	and.w	r3, r3, #31
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	fa01 f303 	lsl.w	r3, r1, r3
 800702c:	431a      	orrs	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	621a      	str	r2, [r3, #32]
}
 8007032:	bf00      	nop
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
	...

08007040 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007050:	2b01      	cmp	r3, #1
 8007052:	d101      	bne.n	8007058 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007054:	2302      	movs	r3, #2
 8007056:	e05a      	b.n	800710e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2201      	movs	r2, #1
 800705c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2202      	movs	r2, #2
 8007064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800707e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	4313      	orrs	r3, r2
 8007088:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68fa      	ldr	r2, [r7, #12]
 8007090:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a21      	ldr	r2, [pc, #132]	; (800711c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d022      	beq.n	80070e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070a4:	d01d      	beq.n	80070e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a1d      	ldr	r2, [pc, #116]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d018      	beq.n	80070e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	4a1b      	ldr	r2, [pc, #108]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d013      	beq.n	80070e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4a1a      	ldr	r2, [pc, #104]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d00e      	beq.n	80070e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a18      	ldr	r2, [pc, #96]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d009      	beq.n	80070e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a17      	ldr	r2, [pc, #92]	; (8007130 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d004      	beq.n	80070e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4a15      	ldr	r2, [pc, #84]	; (8007134 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d10c      	bne.n	80070fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	4313      	orrs	r3, r2
 80070f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68ba      	ldr	r2, [r7, #8]
 80070fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	40010000 	.word	0x40010000
 8007120:	40000400 	.word	0x40000400
 8007124:	40000800 	.word	0x40000800
 8007128:	40000c00 	.word	0x40000c00
 800712c:	40010400 	.word	0x40010400
 8007130:	40014000 	.word	0x40014000
 8007134:	40001800 	.word	0x40001800

08007138 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007138:	b480      	push	{r7}
 800713a:	b083      	sub	sp, #12
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <arm_pid_init_f32>:
 8007160:	edd0 6a08 	vldr	s13, [r0, #32]
 8007164:	edd0 7a06 	vldr	s15, [r0, #24]
 8007168:	ed90 7a07 	vldr	s14, [r0, #28]
 800716c:	edc0 6a02 	vstr	s13, [r0, #8]
 8007170:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007174:	ee36 6aa6 	vadd.f32	s12, s13, s13
 8007178:	eef1 7a67 	vneg.f32	s15, s15
 800717c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007180:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007184:	ed80 7a00 	vstr	s14, [r0]
 8007188:	edc0 7a01 	vstr	s15, [r0, #4]
 800718c:	b119      	cbz	r1, 8007196 <arm_pid_init_f32+0x36>
 800718e:	2300      	movs	r3, #0
 8007190:	60c3      	str	r3, [r0, #12]
 8007192:	6103      	str	r3, [r0, #16]
 8007194:	6143      	str	r3, [r0, #20]
 8007196:	4770      	bx	lr

08007198 <__errno>:
 8007198:	4b01      	ldr	r3, [pc, #4]	; (80071a0 <__errno+0x8>)
 800719a:	6818      	ldr	r0, [r3, #0]
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	20000024 	.word	0x20000024

080071a4 <__libc_init_array>:
 80071a4:	b570      	push	{r4, r5, r6, lr}
 80071a6:	4d0d      	ldr	r5, [pc, #52]	; (80071dc <__libc_init_array+0x38>)
 80071a8:	4c0d      	ldr	r4, [pc, #52]	; (80071e0 <__libc_init_array+0x3c>)
 80071aa:	1b64      	subs	r4, r4, r5
 80071ac:	10a4      	asrs	r4, r4, #2
 80071ae:	2600      	movs	r6, #0
 80071b0:	42a6      	cmp	r6, r4
 80071b2:	d109      	bne.n	80071c8 <__libc_init_array+0x24>
 80071b4:	4d0b      	ldr	r5, [pc, #44]	; (80071e4 <__libc_init_array+0x40>)
 80071b6:	4c0c      	ldr	r4, [pc, #48]	; (80071e8 <__libc_init_array+0x44>)
 80071b8:	f004 fc46 	bl	800ba48 <_init>
 80071bc:	1b64      	subs	r4, r4, r5
 80071be:	10a4      	asrs	r4, r4, #2
 80071c0:	2600      	movs	r6, #0
 80071c2:	42a6      	cmp	r6, r4
 80071c4:	d105      	bne.n	80071d2 <__libc_init_array+0x2e>
 80071c6:	bd70      	pop	{r4, r5, r6, pc}
 80071c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071cc:	4798      	blx	r3
 80071ce:	3601      	adds	r6, #1
 80071d0:	e7ee      	b.n	80071b0 <__libc_init_array+0xc>
 80071d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071d6:	4798      	blx	r3
 80071d8:	3601      	adds	r6, #1
 80071da:	e7f2      	b.n	80071c2 <__libc_init_array+0x1e>
 80071dc:	0800f054 	.word	0x0800f054
 80071e0:	0800f054 	.word	0x0800f054
 80071e4:	0800f054 	.word	0x0800f054
 80071e8:	0800f058 	.word	0x0800f058

080071ec <memset>:
 80071ec:	4402      	add	r2, r0
 80071ee:	4603      	mov	r3, r0
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d100      	bne.n	80071f6 <memset+0xa>
 80071f4:	4770      	bx	lr
 80071f6:	f803 1b01 	strb.w	r1, [r3], #1
 80071fa:	e7f9      	b.n	80071f0 <memset+0x4>

080071fc <__cvt>:
 80071fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007200:	ec55 4b10 	vmov	r4, r5, d0
 8007204:	2d00      	cmp	r5, #0
 8007206:	460e      	mov	r6, r1
 8007208:	4619      	mov	r1, r3
 800720a:	462b      	mov	r3, r5
 800720c:	bfbb      	ittet	lt
 800720e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007212:	461d      	movlt	r5, r3
 8007214:	2300      	movge	r3, #0
 8007216:	232d      	movlt	r3, #45	; 0x2d
 8007218:	700b      	strb	r3, [r1, #0]
 800721a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800721c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007220:	4691      	mov	r9, r2
 8007222:	f023 0820 	bic.w	r8, r3, #32
 8007226:	bfbc      	itt	lt
 8007228:	4622      	movlt	r2, r4
 800722a:	4614      	movlt	r4, r2
 800722c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007230:	d005      	beq.n	800723e <__cvt+0x42>
 8007232:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007236:	d100      	bne.n	800723a <__cvt+0x3e>
 8007238:	3601      	adds	r6, #1
 800723a:	2102      	movs	r1, #2
 800723c:	e000      	b.n	8007240 <__cvt+0x44>
 800723e:	2103      	movs	r1, #3
 8007240:	ab03      	add	r3, sp, #12
 8007242:	9301      	str	r3, [sp, #4]
 8007244:	ab02      	add	r3, sp, #8
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	ec45 4b10 	vmov	d0, r4, r5
 800724c:	4653      	mov	r3, sl
 800724e:	4632      	mov	r2, r6
 8007250:	f001 fdb6 	bl	8008dc0 <_dtoa_r>
 8007254:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007258:	4607      	mov	r7, r0
 800725a:	d102      	bne.n	8007262 <__cvt+0x66>
 800725c:	f019 0f01 	tst.w	r9, #1
 8007260:	d022      	beq.n	80072a8 <__cvt+0xac>
 8007262:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007266:	eb07 0906 	add.w	r9, r7, r6
 800726a:	d110      	bne.n	800728e <__cvt+0x92>
 800726c:	783b      	ldrb	r3, [r7, #0]
 800726e:	2b30      	cmp	r3, #48	; 0x30
 8007270:	d10a      	bne.n	8007288 <__cvt+0x8c>
 8007272:	2200      	movs	r2, #0
 8007274:	2300      	movs	r3, #0
 8007276:	4620      	mov	r0, r4
 8007278:	4629      	mov	r1, r5
 800727a:	f7f9 fc25 	bl	8000ac8 <__aeabi_dcmpeq>
 800727e:	b918      	cbnz	r0, 8007288 <__cvt+0x8c>
 8007280:	f1c6 0601 	rsb	r6, r6, #1
 8007284:	f8ca 6000 	str.w	r6, [sl]
 8007288:	f8da 3000 	ldr.w	r3, [sl]
 800728c:	4499      	add	r9, r3
 800728e:	2200      	movs	r2, #0
 8007290:	2300      	movs	r3, #0
 8007292:	4620      	mov	r0, r4
 8007294:	4629      	mov	r1, r5
 8007296:	f7f9 fc17 	bl	8000ac8 <__aeabi_dcmpeq>
 800729a:	b108      	cbz	r0, 80072a0 <__cvt+0xa4>
 800729c:	f8cd 900c 	str.w	r9, [sp, #12]
 80072a0:	2230      	movs	r2, #48	; 0x30
 80072a2:	9b03      	ldr	r3, [sp, #12]
 80072a4:	454b      	cmp	r3, r9
 80072a6:	d307      	bcc.n	80072b8 <__cvt+0xbc>
 80072a8:	9b03      	ldr	r3, [sp, #12]
 80072aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072ac:	1bdb      	subs	r3, r3, r7
 80072ae:	4638      	mov	r0, r7
 80072b0:	6013      	str	r3, [r2, #0]
 80072b2:	b004      	add	sp, #16
 80072b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b8:	1c59      	adds	r1, r3, #1
 80072ba:	9103      	str	r1, [sp, #12]
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	e7f0      	b.n	80072a2 <__cvt+0xa6>

080072c0 <__exponent>:
 80072c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072c2:	4603      	mov	r3, r0
 80072c4:	2900      	cmp	r1, #0
 80072c6:	bfb8      	it	lt
 80072c8:	4249      	neglt	r1, r1
 80072ca:	f803 2b02 	strb.w	r2, [r3], #2
 80072ce:	bfb4      	ite	lt
 80072d0:	222d      	movlt	r2, #45	; 0x2d
 80072d2:	222b      	movge	r2, #43	; 0x2b
 80072d4:	2909      	cmp	r1, #9
 80072d6:	7042      	strb	r2, [r0, #1]
 80072d8:	dd2a      	ble.n	8007330 <__exponent+0x70>
 80072da:	f10d 0407 	add.w	r4, sp, #7
 80072de:	46a4      	mov	ip, r4
 80072e0:	270a      	movs	r7, #10
 80072e2:	46a6      	mov	lr, r4
 80072e4:	460a      	mov	r2, r1
 80072e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80072ea:	fb07 1516 	mls	r5, r7, r6, r1
 80072ee:	3530      	adds	r5, #48	; 0x30
 80072f0:	2a63      	cmp	r2, #99	; 0x63
 80072f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80072f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80072fa:	4631      	mov	r1, r6
 80072fc:	dcf1      	bgt.n	80072e2 <__exponent+0x22>
 80072fe:	3130      	adds	r1, #48	; 0x30
 8007300:	f1ae 0502 	sub.w	r5, lr, #2
 8007304:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007308:	1c44      	adds	r4, r0, #1
 800730a:	4629      	mov	r1, r5
 800730c:	4561      	cmp	r1, ip
 800730e:	d30a      	bcc.n	8007326 <__exponent+0x66>
 8007310:	f10d 0209 	add.w	r2, sp, #9
 8007314:	eba2 020e 	sub.w	r2, r2, lr
 8007318:	4565      	cmp	r5, ip
 800731a:	bf88      	it	hi
 800731c:	2200      	movhi	r2, #0
 800731e:	4413      	add	r3, r2
 8007320:	1a18      	subs	r0, r3, r0
 8007322:	b003      	add	sp, #12
 8007324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007326:	f811 2b01 	ldrb.w	r2, [r1], #1
 800732a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800732e:	e7ed      	b.n	800730c <__exponent+0x4c>
 8007330:	2330      	movs	r3, #48	; 0x30
 8007332:	3130      	adds	r1, #48	; 0x30
 8007334:	7083      	strb	r3, [r0, #2]
 8007336:	70c1      	strb	r1, [r0, #3]
 8007338:	1d03      	adds	r3, r0, #4
 800733a:	e7f1      	b.n	8007320 <__exponent+0x60>

0800733c <_printf_float>:
 800733c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007340:	ed2d 8b02 	vpush	{d8}
 8007344:	b08d      	sub	sp, #52	; 0x34
 8007346:	460c      	mov	r4, r1
 8007348:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800734c:	4616      	mov	r6, r2
 800734e:	461f      	mov	r7, r3
 8007350:	4605      	mov	r5, r0
 8007352:	f002 fe91 	bl	800a078 <_localeconv_r>
 8007356:	f8d0 a000 	ldr.w	sl, [r0]
 800735a:	4650      	mov	r0, sl
 800735c:	f7f8 ff38 	bl	80001d0 <strlen>
 8007360:	2300      	movs	r3, #0
 8007362:	930a      	str	r3, [sp, #40]	; 0x28
 8007364:	6823      	ldr	r3, [r4, #0]
 8007366:	9305      	str	r3, [sp, #20]
 8007368:	f8d8 3000 	ldr.w	r3, [r8]
 800736c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007370:	3307      	adds	r3, #7
 8007372:	f023 0307 	bic.w	r3, r3, #7
 8007376:	f103 0208 	add.w	r2, r3, #8
 800737a:	f8c8 2000 	str.w	r2, [r8]
 800737e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007382:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007386:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800738a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800738e:	9307      	str	r3, [sp, #28]
 8007390:	f8cd 8018 	str.w	r8, [sp, #24]
 8007394:	ee08 0a10 	vmov	s16, r0
 8007398:	4b9f      	ldr	r3, [pc, #636]	; (8007618 <_printf_float+0x2dc>)
 800739a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800739e:	f04f 32ff 	mov.w	r2, #4294967295
 80073a2:	f7f9 fbc3 	bl	8000b2c <__aeabi_dcmpun>
 80073a6:	bb88      	cbnz	r0, 800740c <_printf_float+0xd0>
 80073a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073ac:	4b9a      	ldr	r3, [pc, #616]	; (8007618 <_printf_float+0x2dc>)
 80073ae:	f04f 32ff 	mov.w	r2, #4294967295
 80073b2:	f7f9 fb9d 	bl	8000af0 <__aeabi_dcmple>
 80073b6:	bb48      	cbnz	r0, 800740c <_printf_float+0xd0>
 80073b8:	2200      	movs	r2, #0
 80073ba:	2300      	movs	r3, #0
 80073bc:	4640      	mov	r0, r8
 80073be:	4649      	mov	r1, r9
 80073c0:	f7f9 fb8c 	bl	8000adc <__aeabi_dcmplt>
 80073c4:	b110      	cbz	r0, 80073cc <_printf_float+0x90>
 80073c6:	232d      	movs	r3, #45	; 0x2d
 80073c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073cc:	4b93      	ldr	r3, [pc, #588]	; (800761c <_printf_float+0x2e0>)
 80073ce:	4894      	ldr	r0, [pc, #592]	; (8007620 <_printf_float+0x2e4>)
 80073d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80073d4:	bf94      	ite	ls
 80073d6:	4698      	movls	r8, r3
 80073d8:	4680      	movhi	r8, r0
 80073da:	2303      	movs	r3, #3
 80073dc:	6123      	str	r3, [r4, #16]
 80073de:	9b05      	ldr	r3, [sp, #20]
 80073e0:	f023 0204 	bic.w	r2, r3, #4
 80073e4:	6022      	str	r2, [r4, #0]
 80073e6:	f04f 0900 	mov.w	r9, #0
 80073ea:	9700      	str	r7, [sp, #0]
 80073ec:	4633      	mov	r3, r6
 80073ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80073f0:	4621      	mov	r1, r4
 80073f2:	4628      	mov	r0, r5
 80073f4:	f000 f9d8 	bl	80077a8 <_printf_common>
 80073f8:	3001      	adds	r0, #1
 80073fa:	f040 8090 	bne.w	800751e <_printf_float+0x1e2>
 80073fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007402:	b00d      	add	sp, #52	; 0x34
 8007404:	ecbd 8b02 	vpop	{d8}
 8007408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800740c:	4642      	mov	r2, r8
 800740e:	464b      	mov	r3, r9
 8007410:	4640      	mov	r0, r8
 8007412:	4649      	mov	r1, r9
 8007414:	f7f9 fb8a 	bl	8000b2c <__aeabi_dcmpun>
 8007418:	b140      	cbz	r0, 800742c <_printf_float+0xf0>
 800741a:	464b      	mov	r3, r9
 800741c:	2b00      	cmp	r3, #0
 800741e:	bfbc      	itt	lt
 8007420:	232d      	movlt	r3, #45	; 0x2d
 8007422:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007426:	487f      	ldr	r0, [pc, #508]	; (8007624 <_printf_float+0x2e8>)
 8007428:	4b7f      	ldr	r3, [pc, #508]	; (8007628 <_printf_float+0x2ec>)
 800742a:	e7d1      	b.n	80073d0 <_printf_float+0x94>
 800742c:	6863      	ldr	r3, [r4, #4]
 800742e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007432:	9206      	str	r2, [sp, #24]
 8007434:	1c5a      	adds	r2, r3, #1
 8007436:	d13f      	bne.n	80074b8 <_printf_float+0x17c>
 8007438:	2306      	movs	r3, #6
 800743a:	6063      	str	r3, [r4, #4]
 800743c:	9b05      	ldr	r3, [sp, #20]
 800743e:	6861      	ldr	r1, [r4, #4]
 8007440:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007444:	2300      	movs	r3, #0
 8007446:	9303      	str	r3, [sp, #12]
 8007448:	ab0a      	add	r3, sp, #40	; 0x28
 800744a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800744e:	ab09      	add	r3, sp, #36	; 0x24
 8007450:	ec49 8b10 	vmov	d0, r8, r9
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	6022      	str	r2, [r4, #0]
 8007458:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800745c:	4628      	mov	r0, r5
 800745e:	f7ff fecd 	bl	80071fc <__cvt>
 8007462:	9b06      	ldr	r3, [sp, #24]
 8007464:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007466:	2b47      	cmp	r3, #71	; 0x47
 8007468:	4680      	mov	r8, r0
 800746a:	d108      	bne.n	800747e <_printf_float+0x142>
 800746c:	1cc8      	adds	r0, r1, #3
 800746e:	db02      	blt.n	8007476 <_printf_float+0x13a>
 8007470:	6863      	ldr	r3, [r4, #4]
 8007472:	4299      	cmp	r1, r3
 8007474:	dd41      	ble.n	80074fa <_printf_float+0x1be>
 8007476:	f1ab 0b02 	sub.w	fp, fp, #2
 800747a:	fa5f fb8b 	uxtb.w	fp, fp
 800747e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007482:	d820      	bhi.n	80074c6 <_printf_float+0x18a>
 8007484:	3901      	subs	r1, #1
 8007486:	465a      	mov	r2, fp
 8007488:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800748c:	9109      	str	r1, [sp, #36]	; 0x24
 800748e:	f7ff ff17 	bl	80072c0 <__exponent>
 8007492:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007494:	1813      	adds	r3, r2, r0
 8007496:	2a01      	cmp	r2, #1
 8007498:	4681      	mov	r9, r0
 800749a:	6123      	str	r3, [r4, #16]
 800749c:	dc02      	bgt.n	80074a4 <_printf_float+0x168>
 800749e:	6822      	ldr	r2, [r4, #0]
 80074a0:	07d2      	lsls	r2, r2, #31
 80074a2:	d501      	bpl.n	80074a8 <_printf_float+0x16c>
 80074a4:	3301      	adds	r3, #1
 80074a6:	6123      	str	r3, [r4, #16]
 80074a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d09c      	beq.n	80073ea <_printf_float+0xae>
 80074b0:	232d      	movs	r3, #45	; 0x2d
 80074b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074b6:	e798      	b.n	80073ea <_printf_float+0xae>
 80074b8:	9a06      	ldr	r2, [sp, #24]
 80074ba:	2a47      	cmp	r2, #71	; 0x47
 80074bc:	d1be      	bne.n	800743c <_printf_float+0x100>
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d1bc      	bne.n	800743c <_printf_float+0x100>
 80074c2:	2301      	movs	r3, #1
 80074c4:	e7b9      	b.n	800743a <_printf_float+0xfe>
 80074c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80074ca:	d118      	bne.n	80074fe <_printf_float+0x1c2>
 80074cc:	2900      	cmp	r1, #0
 80074ce:	6863      	ldr	r3, [r4, #4]
 80074d0:	dd0b      	ble.n	80074ea <_printf_float+0x1ae>
 80074d2:	6121      	str	r1, [r4, #16]
 80074d4:	b913      	cbnz	r3, 80074dc <_printf_float+0x1a0>
 80074d6:	6822      	ldr	r2, [r4, #0]
 80074d8:	07d0      	lsls	r0, r2, #31
 80074da:	d502      	bpl.n	80074e2 <_printf_float+0x1a6>
 80074dc:	3301      	adds	r3, #1
 80074de:	440b      	add	r3, r1
 80074e0:	6123      	str	r3, [r4, #16]
 80074e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80074e4:	f04f 0900 	mov.w	r9, #0
 80074e8:	e7de      	b.n	80074a8 <_printf_float+0x16c>
 80074ea:	b913      	cbnz	r3, 80074f2 <_printf_float+0x1b6>
 80074ec:	6822      	ldr	r2, [r4, #0]
 80074ee:	07d2      	lsls	r2, r2, #31
 80074f0:	d501      	bpl.n	80074f6 <_printf_float+0x1ba>
 80074f2:	3302      	adds	r3, #2
 80074f4:	e7f4      	b.n	80074e0 <_printf_float+0x1a4>
 80074f6:	2301      	movs	r3, #1
 80074f8:	e7f2      	b.n	80074e0 <_printf_float+0x1a4>
 80074fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80074fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007500:	4299      	cmp	r1, r3
 8007502:	db05      	blt.n	8007510 <_printf_float+0x1d4>
 8007504:	6823      	ldr	r3, [r4, #0]
 8007506:	6121      	str	r1, [r4, #16]
 8007508:	07d8      	lsls	r0, r3, #31
 800750a:	d5ea      	bpl.n	80074e2 <_printf_float+0x1a6>
 800750c:	1c4b      	adds	r3, r1, #1
 800750e:	e7e7      	b.n	80074e0 <_printf_float+0x1a4>
 8007510:	2900      	cmp	r1, #0
 8007512:	bfd4      	ite	le
 8007514:	f1c1 0202 	rsble	r2, r1, #2
 8007518:	2201      	movgt	r2, #1
 800751a:	4413      	add	r3, r2
 800751c:	e7e0      	b.n	80074e0 <_printf_float+0x1a4>
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	055a      	lsls	r2, r3, #21
 8007522:	d407      	bmi.n	8007534 <_printf_float+0x1f8>
 8007524:	6923      	ldr	r3, [r4, #16]
 8007526:	4642      	mov	r2, r8
 8007528:	4631      	mov	r1, r6
 800752a:	4628      	mov	r0, r5
 800752c:	47b8      	blx	r7
 800752e:	3001      	adds	r0, #1
 8007530:	d12c      	bne.n	800758c <_printf_float+0x250>
 8007532:	e764      	b.n	80073fe <_printf_float+0xc2>
 8007534:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007538:	f240 80e0 	bls.w	80076fc <_printf_float+0x3c0>
 800753c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007540:	2200      	movs	r2, #0
 8007542:	2300      	movs	r3, #0
 8007544:	f7f9 fac0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007548:	2800      	cmp	r0, #0
 800754a:	d034      	beq.n	80075b6 <_printf_float+0x27a>
 800754c:	4a37      	ldr	r2, [pc, #220]	; (800762c <_printf_float+0x2f0>)
 800754e:	2301      	movs	r3, #1
 8007550:	4631      	mov	r1, r6
 8007552:	4628      	mov	r0, r5
 8007554:	47b8      	blx	r7
 8007556:	3001      	adds	r0, #1
 8007558:	f43f af51 	beq.w	80073fe <_printf_float+0xc2>
 800755c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007560:	429a      	cmp	r2, r3
 8007562:	db02      	blt.n	800756a <_printf_float+0x22e>
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	07d8      	lsls	r0, r3, #31
 8007568:	d510      	bpl.n	800758c <_printf_float+0x250>
 800756a:	ee18 3a10 	vmov	r3, s16
 800756e:	4652      	mov	r2, sl
 8007570:	4631      	mov	r1, r6
 8007572:	4628      	mov	r0, r5
 8007574:	47b8      	blx	r7
 8007576:	3001      	adds	r0, #1
 8007578:	f43f af41 	beq.w	80073fe <_printf_float+0xc2>
 800757c:	f04f 0800 	mov.w	r8, #0
 8007580:	f104 091a 	add.w	r9, r4, #26
 8007584:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007586:	3b01      	subs	r3, #1
 8007588:	4543      	cmp	r3, r8
 800758a:	dc09      	bgt.n	80075a0 <_printf_float+0x264>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	079b      	lsls	r3, r3, #30
 8007590:	f100 8105 	bmi.w	800779e <_printf_float+0x462>
 8007594:	68e0      	ldr	r0, [r4, #12]
 8007596:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007598:	4298      	cmp	r0, r3
 800759a:	bfb8      	it	lt
 800759c:	4618      	movlt	r0, r3
 800759e:	e730      	b.n	8007402 <_printf_float+0xc6>
 80075a0:	2301      	movs	r3, #1
 80075a2:	464a      	mov	r2, r9
 80075a4:	4631      	mov	r1, r6
 80075a6:	4628      	mov	r0, r5
 80075a8:	47b8      	blx	r7
 80075aa:	3001      	adds	r0, #1
 80075ac:	f43f af27 	beq.w	80073fe <_printf_float+0xc2>
 80075b0:	f108 0801 	add.w	r8, r8, #1
 80075b4:	e7e6      	b.n	8007584 <_printf_float+0x248>
 80075b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	dc39      	bgt.n	8007630 <_printf_float+0x2f4>
 80075bc:	4a1b      	ldr	r2, [pc, #108]	; (800762c <_printf_float+0x2f0>)
 80075be:	2301      	movs	r3, #1
 80075c0:	4631      	mov	r1, r6
 80075c2:	4628      	mov	r0, r5
 80075c4:	47b8      	blx	r7
 80075c6:	3001      	adds	r0, #1
 80075c8:	f43f af19 	beq.w	80073fe <_printf_float+0xc2>
 80075cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075d0:	4313      	orrs	r3, r2
 80075d2:	d102      	bne.n	80075da <_printf_float+0x29e>
 80075d4:	6823      	ldr	r3, [r4, #0]
 80075d6:	07d9      	lsls	r1, r3, #31
 80075d8:	d5d8      	bpl.n	800758c <_printf_float+0x250>
 80075da:	ee18 3a10 	vmov	r3, s16
 80075de:	4652      	mov	r2, sl
 80075e0:	4631      	mov	r1, r6
 80075e2:	4628      	mov	r0, r5
 80075e4:	47b8      	blx	r7
 80075e6:	3001      	adds	r0, #1
 80075e8:	f43f af09 	beq.w	80073fe <_printf_float+0xc2>
 80075ec:	f04f 0900 	mov.w	r9, #0
 80075f0:	f104 0a1a 	add.w	sl, r4, #26
 80075f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075f6:	425b      	negs	r3, r3
 80075f8:	454b      	cmp	r3, r9
 80075fa:	dc01      	bgt.n	8007600 <_printf_float+0x2c4>
 80075fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075fe:	e792      	b.n	8007526 <_printf_float+0x1ea>
 8007600:	2301      	movs	r3, #1
 8007602:	4652      	mov	r2, sl
 8007604:	4631      	mov	r1, r6
 8007606:	4628      	mov	r0, r5
 8007608:	47b8      	blx	r7
 800760a:	3001      	adds	r0, #1
 800760c:	f43f aef7 	beq.w	80073fe <_printf_float+0xc2>
 8007610:	f109 0901 	add.w	r9, r9, #1
 8007614:	e7ee      	b.n	80075f4 <_printf_float+0x2b8>
 8007616:	bf00      	nop
 8007618:	7fefffff 	.word	0x7fefffff
 800761c:	0800eb9c 	.word	0x0800eb9c
 8007620:	0800eba0 	.word	0x0800eba0
 8007624:	0800eba8 	.word	0x0800eba8
 8007628:	0800eba4 	.word	0x0800eba4
 800762c:	0800ebac 	.word	0x0800ebac
 8007630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007632:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007634:	429a      	cmp	r2, r3
 8007636:	bfa8      	it	ge
 8007638:	461a      	movge	r2, r3
 800763a:	2a00      	cmp	r2, #0
 800763c:	4691      	mov	r9, r2
 800763e:	dc37      	bgt.n	80076b0 <_printf_float+0x374>
 8007640:	f04f 0b00 	mov.w	fp, #0
 8007644:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007648:	f104 021a 	add.w	r2, r4, #26
 800764c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800764e:	9305      	str	r3, [sp, #20]
 8007650:	eba3 0309 	sub.w	r3, r3, r9
 8007654:	455b      	cmp	r3, fp
 8007656:	dc33      	bgt.n	80076c0 <_printf_float+0x384>
 8007658:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800765c:	429a      	cmp	r2, r3
 800765e:	db3b      	blt.n	80076d8 <_printf_float+0x39c>
 8007660:	6823      	ldr	r3, [r4, #0]
 8007662:	07da      	lsls	r2, r3, #31
 8007664:	d438      	bmi.n	80076d8 <_printf_float+0x39c>
 8007666:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007668:	9b05      	ldr	r3, [sp, #20]
 800766a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	eba2 0901 	sub.w	r9, r2, r1
 8007672:	4599      	cmp	r9, r3
 8007674:	bfa8      	it	ge
 8007676:	4699      	movge	r9, r3
 8007678:	f1b9 0f00 	cmp.w	r9, #0
 800767c:	dc35      	bgt.n	80076ea <_printf_float+0x3ae>
 800767e:	f04f 0800 	mov.w	r8, #0
 8007682:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007686:	f104 0a1a 	add.w	sl, r4, #26
 800768a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800768e:	1a9b      	subs	r3, r3, r2
 8007690:	eba3 0309 	sub.w	r3, r3, r9
 8007694:	4543      	cmp	r3, r8
 8007696:	f77f af79 	ble.w	800758c <_printf_float+0x250>
 800769a:	2301      	movs	r3, #1
 800769c:	4652      	mov	r2, sl
 800769e:	4631      	mov	r1, r6
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b8      	blx	r7
 80076a4:	3001      	adds	r0, #1
 80076a6:	f43f aeaa 	beq.w	80073fe <_printf_float+0xc2>
 80076aa:	f108 0801 	add.w	r8, r8, #1
 80076ae:	e7ec      	b.n	800768a <_printf_float+0x34e>
 80076b0:	4613      	mov	r3, r2
 80076b2:	4631      	mov	r1, r6
 80076b4:	4642      	mov	r2, r8
 80076b6:	4628      	mov	r0, r5
 80076b8:	47b8      	blx	r7
 80076ba:	3001      	adds	r0, #1
 80076bc:	d1c0      	bne.n	8007640 <_printf_float+0x304>
 80076be:	e69e      	b.n	80073fe <_printf_float+0xc2>
 80076c0:	2301      	movs	r3, #1
 80076c2:	4631      	mov	r1, r6
 80076c4:	4628      	mov	r0, r5
 80076c6:	9205      	str	r2, [sp, #20]
 80076c8:	47b8      	blx	r7
 80076ca:	3001      	adds	r0, #1
 80076cc:	f43f ae97 	beq.w	80073fe <_printf_float+0xc2>
 80076d0:	9a05      	ldr	r2, [sp, #20]
 80076d2:	f10b 0b01 	add.w	fp, fp, #1
 80076d6:	e7b9      	b.n	800764c <_printf_float+0x310>
 80076d8:	ee18 3a10 	vmov	r3, s16
 80076dc:	4652      	mov	r2, sl
 80076de:	4631      	mov	r1, r6
 80076e0:	4628      	mov	r0, r5
 80076e2:	47b8      	blx	r7
 80076e4:	3001      	adds	r0, #1
 80076e6:	d1be      	bne.n	8007666 <_printf_float+0x32a>
 80076e8:	e689      	b.n	80073fe <_printf_float+0xc2>
 80076ea:	9a05      	ldr	r2, [sp, #20]
 80076ec:	464b      	mov	r3, r9
 80076ee:	4442      	add	r2, r8
 80076f0:	4631      	mov	r1, r6
 80076f2:	4628      	mov	r0, r5
 80076f4:	47b8      	blx	r7
 80076f6:	3001      	adds	r0, #1
 80076f8:	d1c1      	bne.n	800767e <_printf_float+0x342>
 80076fa:	e680      	b.n	80073fe <_printf_float+0xc2>
 80076fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076fe:	2a01      	cmp	r2, #1
 8007700:	dc01      	bgt.n	8007706 <_printf_float+0x3ca>
 8007702:	07db      	lsls	r3, r3, #31
 8007704:	d538      	bpl.n	8007778 <_printf_float+0x43c>
 8007706:	2301      	movs	r3, #1
 8007708:	4642      	mov	r2, r8
 800770a:	4631      	mov	r1, r6
 800770c:	4628      	mov	r0, r5
 800770e:	47b8      	blx	r7
 8007710:	3001      	adds	r0, #1
 8007712:	f43f ae74 	beq.w	80073fe <_printf_float+0xc2>
 8007716:	ee18 3a10 	vmov	r3, s16
 800771a:	4652      	mov	r2, sl
 800771c:	4631      	mov	r1, r6
 800771e:	4628      	mov	r0, r5
 8007720:	47b8      	blx	r7
 8007722:	3001      	adds	r0, #1
 8007724:	f43f ae6b 	beq.w	80073fe <_printf_float+0xc2>
 8007728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800772c:	2200      	movs	r2, #0
 800772e:	2300      	movs	r3, #0
 8007730:	f7f9 f9ca 	bl	8000ac8 <__aeabi_dcmpeq>
 8007734:	b9d8      	cbnz	r0, 800776e <_printf_float+0x432>
 8007736:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007738:	f108 0201 	add.w	r2, r8, #1
 800773c:	3b01      	subs	r3, #1
 800773e:	4631      	mov	r1, r6
 8007740:	4628      	mov	r0, r5
 8007742:	47b8      	blx	r7
 8007744:	3001      	adds	r0, #1
 8007746:	d10e      	bne.n	8007766 <_printf_float+0x42a>
 8007748:	e659      	b.n	80073fe <_printf_float+0xc2>
 800774a:	2301      	movs	r3, #1
 800774c:	4652      	mov	r2, sl
 800774e:	4631      	mov	r1, r6
 8007750:	4628      	mov	r0, r5
 8007752:	47b8      	blx	r7
 8007754:	3001      	adds	r0, #1
 8007756:	f43f ae52 	beq.w	80073fe <_printf_float+0xc2>
 800775a:	f108 0801 	add.w	r8, r8, #1
 800775e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007760:	3b01      	subs	r3, #1
 8007762:	4543      	cmp	r3, r8
 8007764:	dcf1      	bgt.n	800774a <_printf_float+0x40e>
 8007766:	464b      	mov	r3, r9
 8007768:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800776c:	e6dc      	b.n	8007528 <_printf_float+0x1ec>
 800776e:	f04f 0800 	mov.w	r8, #0
 8007772:	f104 0a1a 	add.w	sl, r4, #26
 8007776:	e7f2      	b.n	800775e <_printf_float+0x422>
 8007778:	2301      	movs	r3, #1
 800777a:	4642      	mov	r2, r8
 800777c:	e7df      	b.n	800773e <_printf_float+0x402>
 800777e:	2301      	movs	r3, #1
 8007780:	464a      	mov	r2, r9
 8007782:	4631      	mov	r1, r6
 8007784:	4628      	mov	r0, r5
 8007786:	47b8      	blx	r7
 8007788:	3001      	adds	r0, #1
 800778a:	f43f ae38 	beq.w	80073fe <_printf_float+0xc2>
 800778e:	f108 0801 	add.w	r8, r8, #1
 8007792:	68e3      	ldr	r3, [r4, #12]
 8007794:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007796:	1a5b      	subs	r3, r3, r1
 8007798:	4543      	cmp	r3, r8
 800779a:	dcf0      	bgt.n	800777e <_printf_float+0x442>
 800779c:	e6fa      	b.n	8007594 <_printf_float+0x258>
 800779e:	f04f 0800 	mov.w	r8, #0
 80077a2:	f104 0919 	add.w	r9, r4, #25
 80077a6:	e7f4      	b.n	8007792 <_printf_float+0x456>

080077a8 <_printf_common>:
 80077a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077ac:	4616      	mov	r6, r2
 80077ae:	4699      	mov	r9, r3
 80077b0:	688a      	ldr	r2, [r1, #8]
 80077b2:	690b      	ldr	r3, [r1, #16]
 80077b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077b8:	4293      	cmp	r3, r2
 80077ba:	bfb8      	it	lt
 80077bc:	4613      	movlt	r3, r2
 80077be:	6033      	str	r3, [r6, #0]
 80077c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077c4:	4607      	mov	r7, r0
 80077c6:	460c      	mov	r4, r1
 80077c8:	b10a      	cbz	r2, 80077ce <_printf_common+0x26>
 80077ca:	3301      	adds	r3, #1
 80077cc:	6033      	str	r3, [r6, #0]
 80077ce:	6823      	ldr	r3, [r4, #0]
 80077d0:	0699      	lsls	r1, r3, #26
 80077d2:	bf42      	ittt	mi
 80077d4:	6833      	ldrmi	r3, [r6, #0]
 80077d6:	3302      	addmi	r3, #2
 80077d8:	6033      	strmi	r3, [r6, #0]
 80077da:	6825      	ldr	r5, [r4, #0]
 80077dc:	f015 0506 	ands.w	r5, r5, #6
 80077e0:	d106      	bne.n	80077f0 <_printf_common+0x48>
 80077e2:	f104 0a19 	add.w	sl, r4, #25
 80077e6:	68e3      	ldr	r3, [r4, #12]
 80077e8:	6832      	ldr	r2, [r6, #0]
 80077ea:	1a9b      	subs	r3, r3, r2
 80077ec:	42ab      	cmp	r3, r5
 80077ee:	dc26      	bgt.n	800783e <_printf_common+0x96>
 80077f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077f4:	1e13      	subs	r3, r2, #0
 80077f6:	6822      	ldr	r2, [r4, #0]
 80077f8:	bf18      	it	ne
 80077fa:	2301      	movne	r3, #1
 80077fc:	0692      	lsls	r2, r2, #26
 80077fe:	d42b      	bmi.n	8007858 <_printf_common+0xb0>
 8007800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007804:	4649      	mov	r1, r9
 8007806:	4638      	mov	r0, r7
 8007808:	47c0      	blx	r8
 800780a:	3001      	adds	r0, #1
 800780c:	d01e      	beq.n	800784c <_printf_common+0xa4>
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	68e5      	ldr	r5, [r4, #12]
 8007812:	6832      	ldr	r2, [r6, #0]
 8007814:	f003 0306 	and.w	r3, r3, #6
 8007818:	2b04      	cmp	r3, #4
 800781a:	bf08      	it	eq
 800781c:	1aad      	subeq	r5, r5, r2
 800781e:	68a3      	ldr	r3, [r4, #8]
 8007820:	6922      	ldr	r2, [r4, #16]
 8007822:	bf0c      	ite	eq
 8007824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007828:	2500      	movne	r5, #0
 800782a:	4293      	cmp	r3, r2
 800782c:	bfc4      	itt	gt
 800782e:	1a9b      	subgt	r3, r3, r2
 8007830:	18ed      	addgt	r5, r5, r3
 8007832:	2600      	movs	r6, #0
 8007834:	341a      	adds	r4, #26
 8007836:	42b5      	cmp	r5, r6
 8007838:	d11a      	bne.n	8007870 <_printf_common+0xc8>
 800783a:	2000      	movs	r0, #0
 800783c:	e008      	b.n	8007850 <_printf_common+0xa8>
 800783e:	2301      	movs	r3, #1
 8007840:	4652      	mov	r2, sl
 8007842:	4649      	mov	r1, r9
 8007844:	4638      	mov	r0, r7
 8007846:	47c0      	blx	r8
 8007848:	3001      	adds	r0, #1
 800784a:	d103      	bne.n	8007854 <_printf_common+0xac>
 800784c:	f04f 30ff 	mov.w	r0, #4294967295
 8007850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007854:	3501      	adds	r5, #1
 8007856:	e7c6      	b.n	80077e6 <_printf_common+0x3e>
 8007858:	18e1      	adds	r1, r4, r3
 800785a:	1c5a      	adds	r2, r3, #1
 800785c:	2030      	movs	r0, #48	; 0x30
 800785e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007862:	4422      	add	r2, r4
 8007864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800786c:	3302      	adds	r3, #2
 800786e:	e7c7      	b.n	8007800 <_printf_common+0x58>
 8007870:	2301      	movs	r3, #1
 8007872:	4622      	mov	r2, r4
 8007874:	4649      	mov	r1, r9
 8007876:	4638      	mov	r0, r7
 8007878:	47c0      	blx	r8
 800787a:	3001      	adds	r0, #1
 800787c:	d0e6      	beq.n	800784c <_printf_common+0xa4>
 800787e:	3601      	adds	r6, #1
 8007880:	e7d9      	b.n	8007836 <_printf_common+0x8e>
	...

08007884 <_printf_i>:
 8007884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007888:	460c      	mov	r4, r1
 800788a:	4691      	mov	r9, r2
 800788c:	7e27      	ldrb	r7, [r4, #24]
 800788e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007890:	2f78      	cmp	r7, #120	; 0x78
 8007892:	4680      	mov	r8, r0
 8007894:	469a      	mov	sl, r3
 8007896:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800789a:	d807      	bhi.n	80078ac <_printf_i+0x28>
 800789c:	2f62      	cmp	r7, #98	; 0x62
 800789e:	d80a      	bhi.n	80078b6 <_printf_i+0x32>
 80078a0:	2f00      	cmp	r7, #0
 80078a2:	f000 80d8 	beq.w	8007a56 <_printf_i+0x1d2>
 80078a6:	2f58      	cmp	r7, #88	; 0x58
 80078a8:	f000 80a3 	beq.w	80079f2 <_printf_i+0x16e>
 80078ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80078b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078b4:	e03a      	b.n	800792c <_printf_i+0xa8>
 80078b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078ba:	2b15      	cmp	r3, #21
 80078bc:	d8f6      	bhi.n	80078ac <_printf_i+0x28>
 80078be:	a001      	add	r0, pc, #4	; (adr r0, 80078c4 <_printf_i+0x40>)
 80078c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80078c4:	0800791d 	.word	0x0800791d
 80078c8:	08007931 	.word	0x08007931
 80078cc:	080078ad 	.word	0x080078ad
 80078d0:	080078ad 	.word	0x080078ad
 80078d4:	080078ad 	.word	0x080078ad
 80078d8:	080078ad 	.word	0x080078ad
 80078dc:	08007931 	.word	0x08007931
 80078e0:	080078ad 	.word	0x080078ad
 80078e4:	080078ad 	.word	0x080078ad
 80078e8:	080078ad 	.word	0x080078ad
 80078ec:	080078ad 	.word	0x080078ad
 80078f0:	08007a3d 	.word	0x08007a3d
 80078f4:	08007961 	.word	0x08007961
 80078f8:	08007a1f 	.word	0x08007a1f
 80078fc:	080078ad 	.word	0x080078ad
 8007900:	080078ad 	.word	0x080078ad
 8007904:	08007a5f 	.word	0x08007a5f
 8007908:	080078ad 	.word	0x080078ad
 800790c:	08007961 	.word	0x08007961
 8007910:	080078ad 	.word	0x080078ad
 8007914:	080078ad 	.word	0x080078ad
 8007918:	08007a27 	.word	0x08007a27
 800791c:	680b      	ldr	r3, [r1, #0]
 800791e:	1d1a      	adds	r2, r3, #4
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	600a      	str	r2, [r1, #0]
 8007924:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800792c:	2301      	movs	r3, #1
 800792e:	e0a3      	b.n	8007a78 <_printf_i+0x1f4>
 8007930:	6825      	ldr	r5, [r4, #0]
 8007932:	6808      	ldr	r0, [r1, #0]
 8007934:	062e      	lsls	r6, r5, #24
 8007936:	f100 0304 	add.w	r3, r0, #4
 800793a:	d50a      	bpl.n	8007952 <_printf_i+0xce>
 800793c:	6805      	ldr	r5, [r0, #0]
 800793e:	600b      	str	r3, [r1, #0]
 8007940:	2d00      	cmp	r5, #0
 8007942:	da03      	bge.n	800794c <_printf_i+0xc8>
 8007944:	232d      	movs	r3, #45	; 0x2d
 8007946:	426d      	negs	r5, r5
 8007948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800794c:	485e      	ldr	r0, [pc, #376]	; (8007ac8 <_printf_i+0x244>)
 800794e:	230a      	movs	r3, #10
 8007950:	e019      	b.n	8007986 <_printf_i+0x102>
 8007952:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007956:	6805      	ldr	r5, [r0, #0]
 8007958:	600b      	str	r3, [r1, #0]
 800795a:	bf18      	it	ne
 800795c:	b22d      	sxthne	r5, r5
 800795e:	e7ef      	b.n	8007940 <_printf_i+0xbc>
 8007960:	680b      	ldr	r3, [r1, #0]
 8007962:	6825      	ldr	r5, [r4, #0]
 8007964:	1d18      	adds	r0, r3, #4
 8007966:	6008      	str	r0, [r1, #0]
 8007968:	0628      	lsls	r0, r5, #24
 800796a:	d501      	bpl.n	8007970 <_printf_i+0xec>
 800796c:	681d      	ldr	r5, [r3, #0]
 800796e:	e002      	b.n	8007976 <_printf_i+0xf2>
 8007970:	0669      	lsls	r1, r5, #25
 8007972:	d5fb      	bpl.n	800796c <_printf_i+0xe8>
 8007974:	881d      	ldrh	r5, [r3, #0]
 8007976:	4854      	ldr	r0, [pc, #336]	; (8007ac8 <_printf_i+0x244>)
 8007978:	2f6f      	cmp	r7, #111	; 0x6f
 800797a:	bf0c      	ite	eq
 800797c:	2308      	moveq	r3, #8
 800797e:	230a      	movne	r3, #10
 8007980:	2100      	movs	r1, #0
 8007982:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007986:	6866      	ldr	r6, [r4, #4]
 8007988:	60a6      	str	r6, [r4, #8]
 800798a:	2e00      	cmp	r6, #0
 800798c:	bfa2      	ittt	ge
 800798e:	6821      	ldrge	r1, [r4, #0]
 8007990:	f021 0104 	bicge.w	r1, r1, #4
 8007994:	6021      	strge	r1, [r4, #0]
 8007996:	b90d      	cbnz	r5, 800799c <_printf_i+0x118>
 8007998:	2e00      	cmp	r6, #0
 800799a:	d04d      	beq.n	8007a38 <_printf_i+0x1b4>
 800799c:	4616      	mov	r6, r2
 800799e:	fbb5 f1f3 	udiv	r1, r5, r3
 80079a2:	fb03 5711 	mls	r7, r3, r1, r5
 80079a6:	5dc7      	ldrb	r7, [r0, r7]
 80079a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80079ac:	462f      	mov	r7, r5
 80079ae:	42bb      	cmp	r3, r7
 80079b0:	460d      	mov	r5, r1
 80079b2:	d9f4      	bls.n	800799e <_printf_i+0x11a>
 80079b4:	2b08      	cmp	r3, #8
 80079b6:	d10b      	bne.n	80079d0 <_printf_i+0x14c>
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	07df      	lsls	r7, r3, #31
 80079bc:	d508      	bpl.n	80079d0 <_printf_i+0x14c>
 80079be:	6923      	ldr	r3, [r4, #16]
 80079c0:	6861      	ldr	r1, [r4, #4]
 80079c2:	4299      	cmp	r1, r3
 80079c4:	bfde      	ittt	le
 80079c6:	2330      	movle	r3, #48	; 0x30
 80079c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80079cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80079d0:	1b92      	subs	r2, r2, r6
 80079d2:	6122      	str	r2, [r4, #16]
 80079d4:	f8cd a000 	str.w	sl, [sp]
 80079d8:	464b      	mov	r3, r9
 80079da:	aa03      	add	r2, sp, #12
 80079dc:	4621      	mov	r1, r4
 80079de:	4640      	mov	r0, r8
 80079e0:	f7ff fee2 	bl	80077a8 <_printf_common>
 80079e4:	3001      	adds	r0, #1
 80079e6:	d14c      	bne.n	8007a82 <_printf_i+0x1fe>
 80079e8:	f04f 30ff 	mov.w	r0, #4294967295
 80079ec:	b004      	add	sp, #16
 80079ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079f2:	4835      	ldr	r0, [pc, #212]	; (8007ac8 <_printf_i+0x244>)
 80079f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079f8:	6823      	ldr	r3, [r4, #0]
 80079fa:	680e      	ldr	r6, [r1, #0]
 80079fc:	061f      	lsls	r7, r3, #24
 80079fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8007a02:	600e      	str	r6, [r1, #0]
 8007a04:	d514      	bpl.n	8007a30 <_printf_i+0x1ac>
 8007a06:	07d9      	lsls	r1, r3, #31
 8007a08:	bf44      	itt	mi
 8007a0a:	f043 0320 	orrmi.w	r3, r3, #32
 8007a0e:	6023      	strmi	r3, [r4, #0]
 8007a10:	b91d      	cbnz	r5, 8007a1a <_printf_i+0x196>
 8007a12:	6823      	ldr	r3, [r4, #0]
 8007a14:	f023 0320 	bic.w	r3, r3, #32
 8007a18:	6023      	str	r3, [r4, #0]
 8007a1a:	2310      	movs	r3, #16
 8007a1c:	e7b0      	b.n	8007980 <_printf_i+0xfc>
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	f043 0320 	orr.w	r3, r3, #32
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	2378      	movs	r3, #120	; 0x78
 8007a28:	4828      	ldr	r0, [pc, #160]	; (8007acc <_printf_i+0x248>)
 8007a2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a2e:	e7e3      	b.n	80079f8 <_printf_i+0x174>
 8007a30:	065e      	lsls	r6, r3, #25
 8007a32:	bf48      	it	mi
 8007a34:	b2ad      	uxthmi	r5, r5
 8007a36:	e7e6      	b.n	8007a06 <_printf_i+0x182>
 8007a38:	4616      	mov	r6, r2
 8007a3a:	e7bb      	b.n	80079b4 <_printf_i+0x130>
 8007a3c:	680b      	ldr	r3, [r1, #0]
 8007a3e:	6826      	ldr	r6, [r4, #0]
 8007a40:	6960      	ldr	r0, [r4, #20]
 8007a42:	1d1d      	adds	r5, r3, #4
 8007a44:	600d      	str	r5, [r1, #0]
 8007a46:	0635      	lsls	r5, r6, #24
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	d501      	bpl.n	8007a50 <_printf_i+0x1cc>
 8007a4c:	6018      	str	r0, [r3, #0]
 8007a4e:	e002      	b.n	8007a56 <_printf_i+0x1d2>
 8007a50:	0671      	lsls	r1, r6, #25
 8007a52:	d5fb      	bpl.n	8007a4c <_printf_i+0x1c8>
 8007a54:	8018      	strh	r0, [r3, #0]
 8007a56:	2300      	movs	r3, #0
 8007a58:	6123      	str	r3, [r4, #16]
 8007a5a:	4616      	mov	r6, r2
 8007a5c:	e7ba      	b.n	80079d4 <_printf_i+0x150>
 8007a5e:	680b      	ldr	r3, [r1, #0]
 8007a60:	1d1a      	adds	r2, r3, #4
 8007a62:	600a      	str	r2, [r1, #0]
 8007a64:	681e      	ldr	r6, [r3, #0]
 8007a66:	6862      	ldr	r2, [r4, #4]
 8007a68:	2100      	movs	r1, #0
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	f7f8 fbb8 	bl	80001e0 <memchr>
 8007a70:	b108      	cbz	r0, 8007a76 <_printf_i+0x1f2>
 8007a72:	1b80      	subs	r0, r0, r6
 8007a74:	6060      	str	r0, [r4, #4]
 8007a76:	6863      	ldr	r3, [r4, #4]
 8007a78:	6123      	str	r3, [r4, #16]
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a80:	e7a8      	b.n	80079d4 <_printf_i+0x150>
 8007a82:	6923      	ldr	r3, [r4, #16]
 8007a84:	4632      	mov	r2, r6
 8007a86:	4649      	mov	r1, r9
 8007a88:	4640      	mov	r0, r8
 8007a8a:	47d0      	blx	sl
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	d0ab      	beq.n	80079e8 <_printf_i+0x164>
 8007a90:	6823      	ldr	r3, [r4, #0]
 8007a92:	079b      	lsls	r3, r3, #30
 8007a94:	d413      	bmi.n	8007abe <_printf_i+0x23a>
 8007a96:	68e0      	ldr	r0, [r4, #12]
 8007a98:	9b03      	ldr	r3, [sp, #12]
 8007a9a:	4298      	cmp	r0, r3
 8007a9c:	bfb8      	it	lt
 8007a9e:	4618      	movlt	r0, r3
 8007aa0:	e7a4      	b.n	80079ec <_printf_i+0x168>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	4632      	mov	r2, r6
 8007aa6:	4649      	mov	r1, r9
 8007aa8:	4640      	mov	r0, r8
 8007aaa:	47d0      	blx	sl
 8007aac:	3001      	adds	r0, #1
 8007aae:	d09b      	beq.n	80079e8 <_printf_i+0x164>
 8007ab0:	3501      	adds	r5, #1
 8007ab2:	68e3      	ldr	r3, [r4, #12]
 8007ab4:	9903      	ldr	r1, [sp, #12]
 8007ab6:	1a5b      	subs	r3, r3, r1
 8007ab8:	42ab      	cmp	r3, r5
 8007aba:	dcf2      	bgt.n	8007aa2 <_printf_i+0x21e>
 8007abc:	e7eb      	b.n	8007a96 <_printf_i+0x212>
 8007abe:	2500      	movs	r5, #0
 8007ac0:	f104 0619 	add.w	r6, r4, #25
 8007ac4:	e7f5      	b.n	8007ab2 <_printf_i+0x22e>
 8007ac6:	bf00      	nop
 8007ac8:	0800ebae 	.word	0x0800ebae
 8007acc:	0800ebbf 	.word	0x0800ebbf

08007ad0 <_scanf_float>:
 8007ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ad4:	b087      	sub	sp, #28
 8007ad6:	4617      	mov	r7, r2
 8007ad8:	9303      	str	r3, [sp, #12]
 8007ada:	688b      	ldr	r3, [r1, #8]
 8007adc:	1e5a      	subs	r2, r3, #1
 8007ade:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007ae2:	bf83      	ittte	hi
 8007ae4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007ae8:	195b      	addhi	r3, r3, r5
 8007aea:	9302      	strhi	r3, [sp, #8]
 8007aec:	2300      	movls	r3, #0
 8007aee:	bf86      	itte	hi
 8007af0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007af4:	608b      	strhi	r3, [r1, #8]
 8007af6:	9302      	strls	r3, [sp, #8]
 8007af8:	680b      	ldr	r3, [r1, #0]
 8007afa:	468b      	mov	fp, r1
 8007afc:	2500      	movs	r5, #0
 8007afe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007b02:	f84b 3b1c 	str.w	r3, [fp], #28
 8007b06:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007b0a:	4680      	mov	r8, r0
 8007b0c:	460c      	mov	r4, r1
 8007b0e:	465e      	mov	r6, fp
 8007b10:	46aa      	mov	sl, r5
 8007b12:	46a9      	mov	r9, r5
 8007b14:	9501      	str	r5, [sp, #4]
 8007b16:	68a2      	ldr	r2, [r4, #8]
 8007b18:	b152      	cbz	r2, 8007b30 <_scanf_float+0x60>
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	781b      	ldrb	r3, [r3, #0]
 8007b1e:	2b4e      	cmp	r3, #78	; 0x4e
 8007b20:	d864      	bhi.n	8007bec <_scanf_float+0x11c>
 8007b22:	2b40      	cmp	r3, #64	; 0x40
 8007b24:	d83c      	bhi.n	8007ba0 <_scanf_float+0xd0>
 8007b26:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007b2a:	b2c8      	uxtb	r0, r1
 8007b2c:	280e      	cmp	r0, #14
 8007b2e:	d93a      	bls.n	8007ba6 <_scanf_float+0xd6>
 8007b30:	f1b9 0f00 	cmp.w	r9, #0
 8007b34:	d003      	beq.n	8007b3e <_scanf_float+0x6e>
 8007b36:	6823      	ldr	r3, [r4, #0]
 8007b38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b42:	f1ba 0f01 	cmp.w	sl, #1
 8007b46:	f200 8113 	bhi.w	8007d70 <_scanf_float+0x2a0>
 8007b4a:	455e      	cmp	r6, fp
 8007b4c:	f200 8105 	bhi.w	8007d5a <_scanf_float+0x28a>
 8007b50:	2501      	movs	r5, #1
 8007b52:	4628      	mov	r0, r5
 8007b54:	b007      	add	sp, #28
 8007b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007b5e:	2a0d      	cmp	r2, #13
 8007b60:	d8e6      	bhi.n	8007b30 <_scanf_float+0x60>
 8007b62:	a101      	add	r1, pc, #4	; (adr r1, 8007b68 <_scanf_float+0x98>)
 8007b64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007b68:	08007ca7 	.word	0x08007ca7
 8007b6c:	08007b31 	.word	0x08007b31
 8007b70:	08007b31 	.word	0x08007b31
 8007b74:	08007b31 	.word	0x08007b31
 8007b78:	08007d07 	.word	0x08007d07
 8007b7c:	08007cdf 	.word	0x08007cdf
 8007b80:	08007b31 	.word	0x08007b31
 8007b84:	08007b31 	.word	0x08007b31
 8007b88:	08007cb5 	.word	0x08007cb5
 8007b8c:	08007b31 	.word	0x08007b31
 8007b90:	08007b31 	.word	0x08007b31
 8007b94:	08007b31 	.word	0x08007b31
 8007b98:	08007b31 	.word	0x08007b31
 8007b9c:	08007c6d 	.word	0x08007c6d
 8007ba0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007ba4:	e7db      	b.n	8007b5e <_scanf_float+0x8e>
 8007ba6:	290e      	cmp	r1, #14
 8007ba8:	d8c2      	bhi.n	8007b30 <_scanf_float+0x60>
 8007baa:	a001      	add	r0, pc, #4	; (adr r0, 8007bb0 <_scanf_float+0xe0>)
 8007bac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007bb0:	08007c5f 	.word	0x08007c5f
 8007bb4:	08007b31 	.word	0x08007b31
 8007bb8:	08007c5f 	.word	0x08007c5f
 8007bbc:	08007cf3 	.word	0x08007cf3
 8007bc0:	08007b31 	.word	0x08007b31
 8007bc4:	08007c0d 	.word	0x08007c0d
 8007bc8:	08007c49 	.word	0x08007c49
 8007bcc:	08007c49 	.word	0x08007c49
 8007bd0:	08007c49 	.word	0x08007c49
 8007bd4:	08007c49 	.word	0x08007c49
 8007bd8:	08007c49 	.word	0x08007c49
 8007bdc:	08007c49 	.word	0x08007c49
 8007be0:	08007c49 	.word	0x08007c49
 8007be4:	08007c49 	.word	0x08007c49
 8007be8:	08007c49 	.word	0x08007c49
 8007bec:	2b6e      	cmp	r3, #110	; 0x6e
 8007bee:	d809      	bhi.n	8007c04 <_scanf_float+0x134>
 8007bf0:	2b60      	cmp	r3, #96	; 0x60
 8007bf2:	d8b2      	bhi.n	8007b5a <_scanf_float+0x8a>
 8007bf4:	2b54      	cmp	r3, #84	; 0x54
 8007bf6:	d077      	beq.n	8007ce8 <_scanf_float+0x218>
 8007bf8:	2b59      	cmp	r3, #89	; 0x59
 8007bfa:	d199      	bne.n	8007b30 <_scanf_float+0x60>
 8007bfc:	2d07      	cmp	r5, #7
 8007bfe:	d197      	bne.n	8007b30 <_scanf_float+0x60>
 8007c00:	2508      	movs	r5, #8
 8007c02:	e029      	b.n	8007c58 <_scanf_float+0x188>
 8007c04:	2b74      	cmp	r3, #116	; 0x74
 8007c06:	d06f      	beq.n	8007ce8 <_scanf_float+0x218>
 8007c08:	2b79      	cmp	r3, #121	; 0x79
 8007c0a:	e7f6      	b.n	8007bfa <_scanf_float+0x12a>
 8007c0c:	6821      	ldr	r1, [r4, #0]
 8007c0e:	05c8      	lsls	r0, r1, #23
 8007c10:	d51a      	bpl.n	8007c48 <_scanf_float+0x178>
 8007c12:	9b02      	ldr	r3, [sp, #8]
 8007c14:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007c18:	6021      	str	r1, [r4, #0]
 8007c1a:	f109 0901 	add.w	r9, r9, #1
 8007c1e:	b11b      	cbz	r3, 8007c28 <_scanf_float+0x158>
 8007c20:	3b01      	subs	r3, #1
 8007c22:	3201      	adds	r2, #1
 8007c24:	9302      	str	r3, [sp, #8]
 8007c26:	60a2      	str	r2, [r4, #8]
 8007c28:	68a3      	ldr	r3, [r4, #8]
 8007c2a:	3b01      	subs	r3, #1
 8007c2c:	60a3      	str	r3, [r4, #8]
 8007c2e:	6923      	ldr	r3, [r4, #16]
 8007c30:	3301      	adds	r3, #1
 8007c32:	6123      	str	r3, [r4, #16]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3b01      	subs	r3, #1
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	607b      	str	r3, [r7, #4]
 8007c3c:	f340 8084 	ble.w	8007d48 <_scanf_float+0x278>
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	3301      	adds	r3, #1
 8007c44:	603b      	str	r3, [r7, #0]
 8007c46:	e766      	b.n	8007b16 <_scanf_float+0x46>
 8007c48:	eb1a 0f05 	cmn.w	sl, r5
 8007c4c:	f47f af70 	bne.w	8007b30 <_scanf_float+0x60>
 8007c50:	6822      	ldr	r2, [r4, #0]
 8007c52:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007c56:	6022      	str	r2, [r4, #0]
 8007c58:	f806 3b01 	strb.w	r3, [r6], #1
 8007c5c:	e7e4      	b.n	8007c28 <_scanf_float+0x158>
 8007c5e:	6822      	ldr	r2, [r4, #0]
 8007c60:	0610      	lsls	r0, r2, #24
 8007c62:	f57f af65 	bpl.w	8007b30 <_scanf_float+0x60>
 8007c66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c6a:	e7f4      	b.n	8007c56 <_scanf_float+0x186>
 8007c6c:	f1ba 0f00 	cmp.w	sl, #0
 8007c70:	d10e      	bne.n	8007c90 <_scanf_float+0x1c0>
 8007c72:	f1b9 0f00 	cmp.w	r9, #0
 8007c76:	d10e      	bne.n	8007c96 <_scanf_float+0x1c6>
 8007c78:	6822      	ldr	r2, [r4, #0]
 8007c7a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007c7e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007c82:	d108      	bne.n	8007c96 <_scanf_float+0x1c6>
 8007c84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c88:	6022      	str	r2, [r4, #0]
 8007c8a:	f04f 0a01 	mov.w	sl, #1
 8007c8e:	e7e3      	b.n	8007c58 <_scanf_float+0x188>
 8007c90:	f1ba 0f02 	cmp.w	sl, #2
 8007c94:	d055      	beq.n	8007d42 <_scanf_float+0x272>
 8007c96:	2d01      	cmp	r5, #1
 8007c98:	d002      	beq.n	8007ca0 <_scanf_float+0x1d0>
 8007c9a:	2d04      	cmp	r5, #4
 8007c9c:	f47f af48 	bne.w	8007b30 <_scanf_float+0x60>
 8007ca0:	3501      	adds	r5, #1
 8007ca2:	b2ed      	uxtb	r5, r5
 8007ca4:	e7d8      	b.n	8007c58 <_scanf_float+0x188>
 8007ca6:	f1ba 0f01 	cmp.w	sl, #1
 8007caa:	f47f af41 	bne.w	8007b30 <_scanf_float+0x60>
 8007cae:	f04f 0a02 	mov.w	sl, #2
 8007cb2:	e7d1      	b.n	8007c58 <_scanf_float+0x188>
 8007cb4:	b97d      	cbnz	r5, 8007cd6 <_scanf_float+0x206>
 8007cb6:	f1b9 0f00 	cmp.w	r9, #0
 8007cba:	f47f af3c 	bne.w	8007b36 <_scanf_float+0x66>
 8007cbe:	6822      	ldr	r2, [r4, #0]
 8007cc0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007cc4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007cc8:	f47f af39 	bne.w	8007b3e <_scanf_float+0x6e>
 8007ccc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007cd0:	6022      	str	r2, [r4, #0]
 8007cd2:	2501      	movs	r5, #1
 8007cd4:	e7c0      	b.n	8007c58 <_scanf_float+0x188>
 8007cd6:	2d03      	cmp	r5, #3
 8007cd8:	d0e2      	beq.n	8007ca0 <_scanf_float+0x1d0>
 8007cda:	2d05      	cmp	r5, #5
 8007cdc:	e7de      	b.n	8007c9c <_scanf_float+0x1cc>
 8007cde:	2d02      	cmp	r5, #2
 8007ce0:	f47f af26 	bne.w	8007b30 <_scanf_float+0x60>
 8007ce4:	2503      	movs	r5, #3
 8007ce6:	e7b7      	b.n	8007c58 <_scanf_float+0x188>
 8007ce8:	2d06      	cmp	r5, #6
 8007cea:	f47f af21 	bne.w	8007b30 <_scanf_float+0x60>
 8007cee:	2507      	movs	r5, #7
 8007cf0:	e7b2      	b.n	8007c58 <_scanf_float+0x188>
 8007cf2:	6822      	ldr	r2, [r4, #0]
 8007cf4:	0591      	lsls	r1, r2, #22
 8007cf6:	f57f af1b 	bpl.w	8007b30 <_scanf_float+0x60>
 8007cfa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007cfe:	6022      	str	r2, [r4, #0]
 8007d00:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d04:	e7a8      	b.n	8007c58 <_scanf_float+0x188>
 8007d06:	6822      	ldr	r2, [r4, #0]
 8007d08:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007d0c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007d10:	d006      	beq.n	8007d20 <_scanf_float+0x250>
 8007d12:	0550      	lsls	r0, r2, #21
 8007d14:	f57f af0c 	bpl.w	8007b30 <_scanf_float+0x60>
 8007d18:	f1b9 0f00 	cmp.w	r9, #0
 8007d1c:	f43f af0f 	beq.w	8007b3e <_scanf_float+0x6e>
 8007d20:	0591      	lsls	r1, r2, #22
 8007d22:	bf58      	it	pl
 8007d24:	9901      	ldrpl	r1, [sp, #4]
 8007d26:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d2a:	bf58      	it	pl
 8007d2c:	eba9 0101 	subpl.w	r1, r9, r1
 8007d30:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007d34:	bf58      	it	pl
 8007d36:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007d3a:	6022      	str	r2, [r4, #0]
 8007d3c:	f04f 0900 	mov.w	r9, #0
 8007d40:	e78a      	b.n	8007c58 <_scanf_float+0x188>
 8007d42:	f04f 0a03 	mov.w	sl, #3
 8007d46:	e787      	b.n	8007c58 <_scanf_float+0x188>
 8007d48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007d4c:	4639      	mov	r1, r7
 8007d4e:	4640      	mov	r0, r8
 8007d50:	4798      	blx	r3
 8007d52:	2800      	cmp	r0, #0
 8007d54:	f43f aedf 	beq.w	8007b16 <_scanf_float+0x46>
 8007d58:	e6ea      	b.n	8007b30 <_scanf_float+0x60>
 8007d5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d62:	463a      	mov	r2, r7
 8007d64:	4640      	mov	r0, r8
 8007d66:	4798      	blx	r3
 8007d68:	6923      	ldr	r3, [r4, #16]
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	6123      	str	r3, [r4, #16]
 8007d6e:	e6ec      	b.n	8007b4a <_scanf_float+0x7a>
 8007d70:	1e6b      	subs	r3, r5, #1
 8007d72:	2b06      	cmp	r3, #6
 8007d74:	d825      	bhi.n	8007dc2 <_scanf_float+0x2f2>
 8007d76:	2d02      	cmp	r5, #2
 8007d78:	d836      	bhi.n	8007de8 <_scanf_float+0x318>
 8007d7a:	455e      	cmp	r6, fp
 8007d7c:	f67f aee8 	bls.w	8007b50 <_scanf_float+0x80>
 8007d80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d84:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d88:	463a      	mov	r2, r7
 8007d8a:	4640      	mov	r0, r8
 8007d8c:	4798      	blx	r3
 8007d8e:	6923      	ldr	r3, [r4, #16]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	6123      	str	r3, [r4, #16]
 8007d94:	e7f1      	b.n	8007d7a <_scanf_float+0x2aa>
 8007d96:	9802      	ldr	r0, [sp, #8]
 8007d98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d9c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007da0:	9002      	str	r0, [sp, #8]
 8007da2:	463a      	mov	r2, r7
 8007da4:	4640      	mov	r0, r8
 8007da6:	4798      	blx	r3
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	3b01      	subs	r3, #1
 8007dac:	6123      	str	r3, [r4, #16]
 8007dae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007db2:	fa5f fa8a 	uxtb.w	sl, sl
 8007db6:	f1ba 0f02 	cmp.w	sl, #2
 8007dba:	d1ec      	bne.n	8007d96 <_scanf_float+0x2c6>
 8007dbc:	3d03      	subs	r5, #3
 8007dbe:	b2ed      	uxtb	r5, r5
 8007dc0:	1b76      	subs	r6, r6, r5
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	05da      	lsls	r2, r3, #23
 8007dc6:	d52f      	bpl.n	8007e28 <_scanf_float+0x358>
 8007dc8:	055b      	lsls	r3, r3, #21
 8007dca:	d510      	bpl.n	8007dee <_scanf_float+0x31e>
 8007dcc:	455e      	cmp	r6, fp
 8007dce:	f67f aebf 	bls.w	8007b50 <_scanf_float+0x80>
 8007dd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007dd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007dda:	463a      	mov	r2, r7
 8007ddc:	4640      	mov	r0, r8
 8007dde:	4798      	blx	r3
 8007de0:	6923      	ldr	r3, [r4, #16]
 8007de2:	3b01      	subs	r3, #1
 8007de4:	6123      	str	r3, [r4, #16]
 8007de6:	e7f1      	b.n	8007dcc <_scanf_float+0x2fc>
 8007de8:	46aa      	mov	sl, r5
 8007dea:	9602      	str	r6, [sp, #8]
 8007dec:	e7df      	b.n	8007dae <_scanf_float+0x2de>
 8007dee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007df2:	6923      	ldr	r3, [r4, #16]
 8007df4:	2965      	cmp	r1, #101	; 0x65
 8007df6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007dfa:	f106 35ff 	add.w	r5, r6, #4294967295
 8007dfe:	6123      	str	r3, [r4, #16]
 8007e00:	d00c      	beq.n	8007e1c <_scanf_float+0x34c>
 8007e02:	2945      	cmp	r1, #69	; 0x45
 8007e04:	d00a      	beq.n	8007e1c <_scanf_float+0x34c>
 8007e06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e0a:	463a      	mov	r2, r7
 8007e0c:	4640      	mov	r0, r8
 8007e0e:	4798      	blx	r3
 8007e10:	6923      	ldr	r3, [r4, #16]
 8007e12:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	1eb5      	subs	r5, r6, #2
 8007e1a:	6123      	str	r3, [r4, #16]
 8007e1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e20:	463a      	mov	r2, r7
 8007e22:	4640      	mov	r0, r8
 8007e24:	4798      	blx	r3
 8007e26:	462e      	mov	r6, r5
 8007e28:	6825      	ldr	r5, [r4, #0]
 8007e2a:	f015 0510 	ands.w	r5, r5, #16
 8007e2e:	d158      	bne.n	8007ee2 <_scanf_float+0x412>
 8007e30:	7035      	strb	r5, [r6, #0]
 8007e32:	6823      	ldr	r3, [r4, #0]
 8007e34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e3c:	d11c      	bne.n	8007e78 <_scanf_float+0x3a8>
 8007e3e:	9b01      	ldr	r3, [sp, #4]
 8007e40:	454b      	cmp	r3, r9
 8007e42:	eba3 0209 	sub.w	r2, r3, r9
 8007e46:	d124      	bne.n	8007e92 <_scanf_float+0x3c2>
 8007e48:	2200      	movs	r2, #0
 8007e4a:	4659      	mov	r1, fp
 8007e4c:	4640      	mov	r0, r8
 8007e4e:	f000 fe9d 	bl	8008b8c <_strtod_r>
 8007e52:	9b03      	ldr	r3, [sp, #12]
 8007e54:	6821      	ldr	r1, [r4, #0]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f011 0f02 	tst.w	r1, #2
 8007e5c:	ec57 6b10 	vmov	r6, r7, d0
 8007e60:	f103 0204 	add.w	r2, r3, #4
 8007e64:	d020      	beq.n	8007ea8 <_scanf_float+0x3d8>
 8007e66:	9903      	ldr	r1, [sp, #12]
 8007e68:	600a      	str	r2, [r1, #0]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	e9c3 6700 	strd	r6, r7, [r3]
 8007e70:	68e3      	ldr	r3, [r4, #12]
 8007e72:	3301      	adds	r3, #1
 8007e74:	60e3      	str	r3, [r4, #12]
 8007e76:	e66c      	b.n	8007b52 <_scanf_float+0x82>
 8007e78:	9b04      	ldr	r3, [sp, #16]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d0e4      	beq.n	8007e48 <_scanf_float+0x378>
 8007e7e:	9905      	ldr	r1, [sp, #20]
 8007e80:	230a      	movs	r3, #10
 8007e82:	462a      	mov	r2, r5
 8007e84:	3101      	adds	r1, #1
 8007e86:	4640      	mov	r0, r8
 8007e88:	f000 ff0a 	bl	8008ca0 <_strtol_r>
 8007e8c:	9b04      	ldr	r3, [sp, #16]
 8007e8e:	9e05      	ldr	r6, [sp, #20]
 8007e90:	1ac2      	subs	r2, r0, r3
 8007e92:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007e96:	429e      	cmp	r6, r3
 8007e98:	bf28      	it	cs
 8007e9a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007e9e:	4912      	ldr	r1, [pc, #72]	; (8007ee8 <_scanf_float+0x418>)
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f000 f82b 	bl	8007efc <siprintf>
 8007ea6:	e7cf      	b.n	8007e48 <_scanf_float+0x378>
 8007ea8:	f011 0f04 	tst.w	r1, #4
 8007eac:	9903      	ldr	r1, [sp, #12]
 8007eae:	600a      	str	r2, [r1, #0]
 8007eb0:	d1db      	bne.n	8007e6a <_scanf_float+0x39a>
 8007eb2:	f8d3 8000 	ldr.w	r8, [r3]
 8007eb6:	ee10 2a10 	vmov	r2, s0
 8007eba:	ee10 0a10 	vmov	r0, s0
 8007ebe:	463b      	mov	r3, r7
 8007ec0:	4639      	mov	r1, r7
 8007ec2:	f7f8 fe33 	bl	8000b2c <__aeabi_dcmpun>
 8007ec6:	b128      	cbz	r0, 8007ed4 <_scanf_float+0x404>
 8007ec8:	4808      	ldr	r0, [pc, #32]	; (8007eec <_scanf_float+0x41c>)
 8007eca:	f000 f811 	bl	8007ef0 <nanf>
 8007ece:	ed88 0a00 	vstr	s0, [r8]
 8007ed2:	e7cd      	b.n	8007e70 <_scanf_float+0x3a0>
 8007ed4:	4630      	mov	r0, r6
 8007ed6:	4639      	mov	r1, r7
 8007ed8:	f7f8 fe86 	bl	8000be8 <__aeabi_d2f>
 8007edc:	f8c8 0000 	str.w	r0, [r8]
 8007ee0:	e7c6      	b.n	8007e70 <_scanf_float+0x3a0>
 8007ee2:	2500      	movs	r5, #0
 8007ee4:	e635      	b.n	8007b52 <_scanf_float+0x82>
 8007ee6:	bf00      	nop
 8007ee8:	0800ebd0 	.word	0x0800ebd0
 8007eec:	0800efe8 	.word	0x0800efe8

08007ef0 <nanf>:
 8007ef0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007ef8 <nanf+0x8>
 8007ef4:	4770      	bx	lr
 8007ef6:	bf00      	nop
 8007ef8:	7fc00000 	.word	0x7fc00000

08007efc <siprintf>:
 8007efc:	b40e      	push	{r1, r2, r3}
 8007efe:	b500      	push	{lr}
 8007f00:	b09c      	sub	sp, #112	; 0x70
 8007f02:	ab1d      	add	r3, sp, #116	; 0x74
 8007f04:	9002      	str	r0, [sp, #8]
 8007f06:	9006      	str	r0, [sp, #24]
 8007f08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f0c:	4809      	ldr	r0, [pc, #36]	; (8007f34 <siprintf+0x38>)
 8007f0e:	9107      	str	r1, [sp, #28]
 8007f10:	9104      	str	r1, [sp, #16]
 8007f12:	4909      	ldr	r1, [pc, #36]	; (8007f38 <siprintf+0x3c>)
 8007f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f18:	9105      	str	r1, [sp, #20]
 8007f1a:	6800      	ldr	r0, [r0, #0]
 8007f1c:	9301      	str	r3, [sp, #4]
 8007f1e:	a902      	add	r1, sp, #8
 8007f20:	f002 fea6 	bl	800ac70 <_svfiprintf_r>
 8007f24:	9b02      	ldr	r3, [sp, #8]
 8007f26:	2200      	movs	r2, #0
 8007f28:	701a      	strb	r2, [r3, #0]
 8007f2a:	b01c      	add	sp, #112	; 0x70
 8007f2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f30:	b003      	add	sp, #12
 8007f32:	4770      	bx	lr
 8007f34:	20000024 	.word	0x20000024
 8007f38:	ffff0208 	.word	0xffff0208

08007f3c <sulp>:
 8007f3c:	b570      	push	{r4, r5, r6, lr}
 8007f3e:	4604      	mov	r4, r0
 8007f40:	460d      	mov	r5, r1
 8007f42:	ec45 4b10 	vmov	d0, r4, r5
 8007f46:	4616      	mov	r6, r2
 8007f48:	f002 fc2e 	bl	800a7a8 <__ulp>
 8007f4c:	ec51 0b10 	vmov	r0, r1, d0
 8007f50:	b17e      	cbz	r6, 8007f72 <sulp+0x36>
 8007f52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007f56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	dd09      	ble.n	8007f72 <sulp+0x36>
 8007f5e:	051b      	lsls	r3, r3, #20
 8007f60:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007f64:	2400      	movs	r4, #0
 8007f66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007f6a:	4622      	mov	r2, r4
 8007f6c:	462b      	mov	r3, r5
 8007f6e:	f7f8 fb43 	bl	80005f8 <__aeabi_dmul>
 8007f72:	bd70      	pop	{r4, r5, r6, pc}
 8007f74:	0000      	movs	r0, r0
	...

08007f78 <_strtod_l>:
 8007f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f7c:	b0a3      	sub	sp, #140	; 0x8c
 8007f7e:	461f      	mov	r7, r3
 8007f80:	2300      	movs	r3, #0
 8007f82:	931e      	str	r3, [sp, #120]	; 0x78
 8007f84:	4ba4      	ldr	r3, [pc, #656]	; (8008218 <_strtod_l+0x2a0>)
 8007f86:	9219      	str	r2, [sp, #100]	; 0x64
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	9307      	str	r3, [sp, #28]
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	4618      	mov	r0, r3
 8007f90:	4688      	mov	r8, r1
 8007f92:	f7f8 f91d 	bl	80001d0 <strlen>
 8007f96:	f04f 0a00 	mov.w	sl, #0
 8007f9a:	4605      	mov	r5, r0
 8007f9c:	f04f 0b00 	mov.w	fp, #0
 8007fa0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8007fa4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007fa6:	781a      	ldrb	r2, [r3, #0]
 8007fa8:	2a2b      	cmp	r2, #43	; 0x2b
 8007faa:	d04c      	beq.n	8008046 <_strtod_l+0xce>
 8007fac:	d839      	bhi.n	8008022 <_strtod_l+0xaa>
 8007fae:	2a0d      	cmp	r2, #13
 8007fb0:	d832      	bhi.n	8008018 <_strtod_l+0xa0>
 8007fb2:	2a08      	cmp	r2, #8
 8007fb4:	d832      	bhi.n	800801c <_strtod_l+0xa4>
 8007fb6:	2a00      	cmp	r2, #0
 8007fb8:	d03c      	beq.n	8008034 <_strtod_l+0xbc>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	930e      	str	r3, [sp, #56]	; 0x38
 8007fbe:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007fc0:	7833      	ldrb	r3, [r6, #0]
 8007fc2:	2b30      	cmp	r3, #48	; 0x30
 8007fc4:	f040 80b4 	bne.w	8008130 <_strtod_l+0x1b8>
 8007fc8:	7873      	ldrb	r3, [r6, #1]
 8007fca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007fce:	2b58      	cmp	r3, #88	; 0x58
 8007fd0:	d16c      	bne.n	80080ac <_strtod_l+0x134>
 8007fd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007fd4:	9301      	str	r3, [sp, #4]
 8007fd6:	ab1e      	add	r3, sp, #120	; 0x78
 8007fd8:	9702      	str	r7, [sp, #8]
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	4a8f      	ldr	r2, [pc, #572]	; (800821c <_strtod_l+0x2a4>)
 8007fde:	ab1f      	add	r3, sp, #124	; 0x7c
 8007fe0:	a91d      	add	r1, sp, #116	; 0x74
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	f001 fd40 	bl	8009a68 <__gethex>
 8007fe8:	f010 0707 	ands.w	r7, r0, #7
 8007fec:	4605      	mov	r5, r0
 8007fee:	d005      	beq.n	8007ffc <_strtod_l+0x84>
 8007ff0:	2f06      	cmp	r7, #6
 8007ff2:	d12a      	bne.n	800804a <_strtod_l+0xd2>
 8007ff4:	3601      	adds	r6, #1
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	961d      	str	r6, [sp, #116]	; 0x74
 8007ffa:	930e      	str	r3, [sp, #56]	; 0x38
 8007ffc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	f040 8596 	bne.w	8008b30 <_strtod_l+0xbb8>
 8008004:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008006:	b1db      	cbz	r3, 8008040 <_strtod_l+0xc8>
 8008008:	4652      	mov	r2, sl
 800800a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800800e:	ec43 2b10 	vmov	d0, r2, r3
 8008012:	b023      	add	sp, #140	; 0x8c
 8008014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008018:	2a20      	cmp	r2, #32
 800801a:	d1ce      	bne.n	8007fba <_strtod_l+0x42>
 800801c:	3301      	adds	r3, #1
 800801e:	931d      	str	r3, [sp, #116]	; 0x74
 8008020:	e7c0      	b.n	8007fa4 <_strtod_l+0x2c>
 8008022:	2a2d      	cmp	r2, #45	; 0x2d
 8008024:	d1c9      	bne.n	8007fba <_strtod_l+0x42>
 8008026:	2201      	movs	r2, #1
 8008028:	920e      	str	r2, [sp, #56]	; 0x38
 800802a:	1c5a      	adds	r2, r3, #1
 800802c:	921d      	str	r2, [sp, #116]	; 0x74
 800802e:	785b      	ldrb	r3, [r3, #1]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1c4      	bne.n	8007fbe <_strtod_l+0x46>
 8008034:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008036:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800803a:	2b00      	cmp	r3, #0
 800803c:	f040 8576 	bne.w	8008b2c <_strtod_l+0xbb4>
 8008040:	4652      	mov	r2, sl
 8008042:	465b      	mov	r3, fp
 8008044:	e7e3      	b.n	800800e <_strtod_l+0x96>
 8008046:	2200      	movs	r2, #0
 8008048:	e7ee      	b.n	8008028 <_strtod_l+0xb0>
 800804a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800804c:	b13a      	cbz	r2, 800805e <_strtod_l+0xe6>
 800804e:	2135      	movs	r1, #53	; 0x35
 8008050:	a820      	add	r0, sp, #128	; 0x80
 8008052:	f002 fcb4 	bl	800a9be <__copybits>
 8008056:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008058:	4620      	mov	r0, r4
 800805a:	f002 f879 	bl	800a150 <_Bfree>
 800805e:	3f01      	subs	r7, #1
 8008060:	2f05      	cmp	r7, #5
 8008062:	d807      	bhi.n	8008074 <_strtod_l+0xfc>
 8008064:	e8df f007 	tbb	[pc, r7]
 8008068:	1d180b0e 	.word	0x1d180b0e
 800806c:	030e      	.short	0x030e
 800806e:	f04f 0b00 	mov.w	fp, #0
 8008072:	46da      	mov	sl, fp
 8008074:	0728      	lsls	r0, r5, #28
 8008076:	d5c1      	bpl.n	8007ffc <_strtod_l+0x84>
 8008078:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800807c:	e7be      	b.n	8007ffc <_strtod_l+0x84>
 800807e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008082:	e7f7      	b.n	8008074 <_strtod_l+0xfc>
 8008084:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008088:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800808a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800808e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008092:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008096:	e7ed      	b.n	8008074 <_strtod_l+0xfc>
 8008098:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008220 <_strtod_l+0x2a8>
 800809c:	f04f 0a00 	mov.w	sl, #0
 80080a0:	e7e8      	b.n	8008074 <_strtod_l+0xfc>
 80080a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80080a6:	f04f 3aff 	mov.w	sl, #4294967295
 80080aa:	e7e3      	b.n	8008074 <_strtod_l+0xfc>
 80080ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080ae:	1c5a      	adds	r2, r3, #1
 80080b0:	921d      	str	r2, [sp, #116]	; 0x74
 80080b2:	785b      	ldrb	r3, [r3, #1]
 80080b4:	2b30      	cmp	r3, #48	; 0x30
 80080b6:	d0f9      	beq.n	80080ac <_strtod_l+0x134>
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d09f      	beq.n	8007ffc <_strtod_l+0x84>
 80080bc:	2301      	movs	r3, #1
 80080be:	f04f 0900 	mov.w	r9, #0
 80080c2:	9304      	str	r3, [sp, #16]
 80080c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80080c6:	930a      	str	r3, [sp, #40]	; 0x28
 80080c8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80080cc:	464f      	mov	r7, r9
 80080ce:	220a      	movs	r2, #10
 80080d0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80080d2:	7806      	ldrb	r6, [r0, #0]
 80080d4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80080d8:	b2d9      	uxtb	r1, r3
 80080da:	2909      	cmp	r1, #9
 80080dc:	d92a      	bls.n	8008134 <_strtod_l+0x1bc>
 80080de:	9907      	ldr	r1, [sp, #28]
 80080e0:	462a      	mov	r2, r5
 80080e2:	f002 fedd 	bl	800aea0 <strncmp>
 80080e6:	b398      	cbz	r0, 8008150 <_strtod_l+0x1d8>
 80080e8:	2000      	movs	r0, #0
 80080ea:	4633      	mov	r3, r6
 80080ec:	463d      	mov	r5, r7
 80080ee:	9007      	str	r0, [sp, #28]
 80080f0:	4602      	mov	r2, r0
 80080f2:	2b65      	cmp	r3, #101	; 0x65
 80080f4:	d001      	beq.n	80080fa <_strtod_l+0x182>
 80080f6:	2b45      	cmp	r3, #69	; 0x45
 80080f8:	d118      	bne.n	800812c <_strtod_l+0x1b4>
 80080fa:	b91d      	cbnz	r5, 8008104 <_strtod_l+0x18c>
 80080fc:	9b04      	ldr	r3, [sp, #16]
 80080fe:	4303      	orrs	r3, r0
 8008100:	d098      	beq.n	8008034 <_strtod_l+0xbc>
 8008102:	2500      	movs	r5, #0
 8008104:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008108:	f108 0301 	add.w	r3, r8, #1
 800810c:	931d      	str	r3, [sp, #116]	; 0x74
 800810e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008112:	2b2b      	cmp	r3, #43	; 0x2b
 8008114:	d075      	beq.n	8008202 <_strtod_l+0x28a>
 8008116:	2b2d      	cmp	r3, #45	; 0x2d
 8008118:	d07b      	beq.n	8008212 <_strtod_l+0x29a>
 800811a:	f04f 0c00 	mov.w	ip, #0
 800811e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008122:	2909      	cmp	r1, #9
 8008124:	f240 8082 	bls.w	800822c <_strtod_l+0x2b4>
 8008128:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800812c:	2600      	movs	r6, #0
 800812e:	e09d      	b.n	800826c <_strtod_l+0x2f4>
 8008130:	2300      	movs	r3, #0
 8008132:	e7c4      	b.n	80080be <_strtod_l+0x146>
 8008134:	2f08      	cmp	r7, #8
 8008136:	bfd8      	it	le
 8008138:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800813a:	f100 0001 	add.w	r0, r0, #1
 800813e:	bfda      	itte	le
 8008140:	fb02 3301 	mlale	r3, r2, r1, r3
 8008144:	9309      	strle	r3, [sp, #36]	; 0x24
 8008146:	fb02 3909 	mlagt	r9, r2, r9, r3
 800814a:	3701      	adds	r7, #1
 800814c:	901d      	str	r0, [sp, #116]	; 0x74
 800814e:	e7bf      	b.n	80080d0 <_strtod_l+0x158>
 8008150:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008152:	195a      	adds	r2, r3, r5
 8008154:	921d      	str	r2, [sp, #116]	; 0x74
 8008156:	5d5b      	ldrb	r3, [r3, r5]
 8008158:	2f00      	cmp	r7, #0
 800815a:	d037      	beq.n	80081cc <_strtod_l+0x254>
 800815c:	9007      	str	r0, [sp, #28]
 800815e:	463d      	mov	r5, r7
 8008160:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008164:	2a09      	cmp	r2, #9
 8008166:	d912      	bls.n	800818e <_strtod_l+0x216>
 8008168:	2201      	movs	r2, #1
 800816a:	e7c2      	b.n	80080f2 <_strtod_l+0x17a>
 800816c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	921d      	str	r2, [sp, #116]	; 0x74
 8008172:	785b      	ldrb	r3, [r3, #1]
 8008174:	3001      	adds	r0, #1
 8008176:	2b30      	cmp	r3, #48	; 0x30
 8008178:	d0f8      	beq.n	800816c <_strtod_l+0x1f4>
 800817a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800817e:	2a08      	cmp	r2, #8
 8008180:	f200 84db 	bhi.w	8008b3a <_strtod_l+0xbc2>
 8008184:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008186:	9007      	str	r0, [sp, #28]
 8008188:	2000      	movs	r0, #0
 800818a:	920a      	str	r2, [sp, #40]	; 0x28
 800818c:	4605      	mov	r5, r0
 800818e:	3b30      	subs	r3, #48	; 0x30
 8008190:	f100 0201 	add.w	r2, r0, #1
 8008194:	d014      	beq.n	80081c0 <_strtod_l+0x248>
 8008196:	9907      	ldr	r1, [sp, #28]
 8008198:	4411      	add	r1, r2
 800819a:	9107      	str	r1, [sp, #28]
 800819c:	462a      	mov	r2, r5
 800819e:	eb00 0e05 	add.w	lr, r0, r5
 80081a2:	210a      	movs	r1, #10
 80081a4:	4572      	cmp	r2, lr
 80081a6:	d113      	bne.n	80081d0 <_strtod_l+0x258>
 80081a8:	182a      	adds	r2, r5, r0
 80081aa:	2a08      	cmp	r2, #8
 80081ac:	f105 0501 	add.w	r5, r5, #1
 80081b0:	4405      	add	r5, r0
 80081b2:	dc1c      	bgt.n	80081ee <_strtod_l+0x276>
 80081b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081b6:	220a      	movs	r2, #10
 80081b8:	fb02 3301 	mla	r3, r2, r1, r3
 80081bc:	9309      	str	r3, [sp, #36]	; 0x24
 80081be:	2200      	movs	r2, #0
 80081c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80081c2:	1c59      	adds	r1, r3, #1
 80081c4:	911d      	str	r1, [sp, #116]	; 0x74
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	4610      	mov	r0, r2
 80081ca:	e7c9      	b.n	8008160 <_strtod_l+0x1e8>
 80081cc:	4638      	mov	r0, r7
 80081ce:	e7d2      	b.n	8008176 <_strtod_l+0x1fe>
 80081d0:	2a08      	cmp	r2, #8
 80081d2:	dc04      	bgt.n	80081de <_strtod_l+0x266>
 80081d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80081d6:	434e      	muls	r6, r1
 80081d8:	9609      	str	r6, [sp, #36]	; 0x24
 80081da:	3201      	adds	r2, #1
 80081dc:	e7e2      	b.n	80081a4 <_strtod_l+0x22c>
 80081de:	f102 0c01 	add.w	ip, r2, #1
 80081e2:	f1bc 0f10 	cmp.w	ip, #16
 80081e6:	bfd8      	it	le
 80081e8:	fb01 f909 	mulle.w	r9, r1, r9
 80081ec:	e7f5      	b.n	80081da <_strtod_l+0x262>
 80081ee:	2d10      	cmp	r5, #16
 80081f0:	bfdc      	itt	le
 80081f2:	220a      	movle	r2, #10
 80081f4:	fb02 3909 	mlale	r9, r2, r9, r3
 80081f8:	e7e1      	b.n	80081be <_strtod_l+0x246>
 80081fa:	2300      	movs	r3, #0
 80081fc:	9307      	str	r3, [sp, #28]
 80081fe:	2201      	movs	r2, #1
 8008200:	e77c      	b.n	80080fc <_strtod_l+0x184>
 8008202:	f04f 0c00 	mov.w	ip, #0
 8008206:	f108 0302 	add.w	r3, r8, #2
 800820a:	931d      	str	r3, [sp, #116]	; 0x74
 800820c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008210:	e785      	b.n	800811e <_strtod_l+0x1a6>
 8008212:	f04f 0c01 	mov.w	ip, #1
 8008216:	e7f6      	b.n	8008206 <_strtod_l+0x28e>
 8008218:	0800ee28 	.word	0x0800ee28
 800821c:	0800ebd8 	.word	0x0800ebd8
 8008220:	7ff00000 	.word	0x7ff00000
 8008224:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008226:	1c59      	adds	r1, r3, #1
 8008228:	911d      	str	r1, [sp, #116]	; 0x74
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	2b30      	cmp	r3, #48	; 0x30
 800822e:	d0f9      	beq.n	8008224 <_strtod_l+0x2ac>
 8008230:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008234:	2908      	cmp	r1, #8
 8008236:	f63f af79 	bhi.w	800812c <_strtod_l+0x1b4>
 800823a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800823e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008240:	9308      	str	r3, [sp, #32]
 8008242:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008244:	1c59      	adds	r1, r3, #1
 8008246:	911d      	str	r1, [sp, #116]	; 0x74
 8008248:	785b      	ldrb	r3, [r3, #1]
 800824a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800824e:	2e09      	cmp	r6, #9
 8008250:	d937      	bls.n	80082c2 <_strtod_l+0x34a>
 8008252:	9e08      	ldr	r6, [sp, #32]
 8008254:	1b89      	subs	r1, r1, r6
 8008256:	2908      	cmp	r1, #8
 8008258:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800825c:	dc02      	bgt.n	8008264 <_strtod_l+0x2ec>
 800825e:	4576      	cmp	r6, lr
 8008260:	bfa8      	it	ge
 8008262:	4676      	movge	r6, lr
 8008264:	f1bc 0f00 	cmp.w	ip, #0
 8008268:	d000      	beq.n	800826c <_strtod_l+0x2f4>
 800826a:	4276      	negs	r6, r6
 800826c:	2d00      	cmp	r5, #0
 800826e:	d14f      	bne.n	8008310 <_strtod_l+0x398>
 8008270:	9904      	ldr	r1, [sp, #16]
 8008272:	4301      	orrs	r1, r0
 8008274:	f47f aec2 	bne.w	8007ffc <_strtod_l+0x84>
 8008278:	2a00      	cmp	r2, #0
 800827a:	f47f aedb 	bne.w	8008034 <_strtod_l+0xbc>
 800827e:	2b69      	cmp	r3, #105	; 0x69
 8008280:	d027      	beq.n	80082d2 <_strtod_l+0x35a>
 8008282:	dc24      	bgt.n	80082ce <_strtod_l+0x356>
 8008284:	2b49      	cmp	r3, #73	; 0x49
 8008286:	d024      	beq.n	80082d2 <_strtod_l+0x35a>
 8008288:	2b4e      	cmp	r3, #78	; 0x4e
 800828a:	f47f aed3 	bne.w	8008034 <_strtod_l+0xbc>
 800828e:	499e      	ldr	r1, [pc, #632]	; (8008508 <_strtod_l+0x590>)
 8008290:	a81d      	add	r0, sp, #116	; 0x74
 8008292:	f001 fe41 	bl	8009f18 <__match>
 8008296:	2800      	cmp	r0, #0
 8008298:	f43f aecc 	beq.w	8008034 <_strtod_l+0xbc>
 800829c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	2b28      	cmp	r3, #40	; 0x28
 80082a2:	d12d      	bne.n	8008300 <_strtod_l+0x388>
 80082a4:	4999      	ldr	r1, [pc, #612]	; (800850c <_strtod_l+0x594>)
 80082a6:	aa20      	add	r2, sp, #128	; 0x80
 80082a8:	a81d      	add	r0, sp, #116	; 0x74
 80082aa:	f001 fe49 	bl	8009f40 <__hexnan>
 80082ae:	2805      	cmp	r0, #5
 80082b0:	d126      	bne.n	8008300 <_strtod_l+0x388>
 80082b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082b4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80082b8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80082bc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80082c0:	e69c      	b.n	8007ffc <_strtod_l+0x84>
 80082c2:	210a      	movs	r1, #10
 80082c4:	fb01 3e0e 	mla	lr, r1, lr, r3
 80082c8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80082cc:	e7b9      	b.n	8008242 <_strtod_l+0x2ca>
 80082ce:	2b6e      	cmp	r3, #110	; 0x6e
 80082d0:	e7db      	b.n	800828a <_strtod_l+0x312>
 80082d2:	498f      	ldr	r1, [pc, #572]	; (8008510 <_strtod_l+0x598>)
 80082d4:	a81d      	add	r0, sp, #116	; 0x74
 80082d6:	f001 fe1f 	bl	8009f18 <__match>
 80082da:	2800      	cmp	r0, #0
 80082dc:	f43f aeaa 	beq.w	8008034 <_strtod_l+0xbc>
 80082e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082e2:	498c      	ldr	r1, [pc, #560]	; (8008514 <_strtod_l+0x59c>)
 80082e4:	3b01      	subs	r3, #1
 80082e6:	a81d      	add	r0, sp, #116	; 0x74
 80082e8:	931d      	str	r3, [sp, #116]	; 0x74
 80082ea:	f001 fe15 	bl	8009f18 <__match>
 80082ee:	b910      	cbnz	r0, 80082f6 <_strtod_l+0x37e>
 80082f0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082f2:	3301      	adds	r3, #1
 80082f4:	931d      	str	r3, [sp, #116]	; 0x74
 80082f6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008524 <_strtod_l+0x5ac>
 80082fa:	f04f 0a00 	mov.w	sl, #0
 80082fe:	e67d      	b.n	8007ffc <_strtod_l+0x84>
 8008300:	4885      	ldr	r0, [pc, #532]	; (8008518 <_strtod_l+0x5a0>)
 8008302:	f002 fdb5 	bl	800ae70 <nan>
 8008306:	ed8d 0b04 	vstr	d0, [sp, #16]
 800830a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800830e:	e675      	b.n	8007ffc <_strtod_l+0x84>
 8008310:	9b07      	ldr	r3, [sp, #28]
 8008312:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008314:	1af3      	subs	r3, r6, r3
 8008316:	2f00      	cmp	r7, #0
 8008318:	bf08      	it	eq
 800831a:	462f      	moveq	r7, r5
 800831c:	2d10      	cmp	r5, #16
 800831e:	9308      	str	r3, [sp, #32]
 8008320:	46a8      	mov	r8, r5
 8008322:	bfa8      	it	ge
 8008324:	f04f 0810 	movge.w	r8, #16
 8008328:	f7f8 f8ec 	bl	8000504 <__aeabi_ui2d>
 800832c:	2d09      	cmp	r5, #9
 800832e:	4682      	mov	sl, r0
 8008330:	468b      	mov	fp, r1
 8008332:	dd13      	ble.n	800835c <_strtod_l+0x3e4>
 8008334:	4b79      	ldr	r3, [pc, #484]	; (800851c <_strtod_l+0x5a4>)
 8008336:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800833a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800833e:	f7f8 f95b 	bl	80005f8 <__aeabi_dmul>
 8008342:	4682      	mov	sl, r0
 8008344:	4648      	mov	r0, r9
 8008346:	468b      	mov	fp, r1
 8008348:	f7f8 f8dc 	bl	8000504 <__aeabi_ui2d>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	4650      	mov	r0, sl
 8008352:	4659      	mov	r1, fp
 8008354:	f7f7 ff9a 	bl	800028c <__adddf3>
 8008358:	4682      	mov	sl, r0
 800835a:	468b      	mov	fp, r1
 800835c:	2d0f      	cmp	r5, #15
 800835e:	dc38      	bgt.n	80083d2 <_strtod_l+0x45a>
 8008360:	9b08      	ldr	r3, [sp, #32]
 8008362:	2b00      	cmp	r3, #0
 8008364:	f43f ae4a 	beq.w	8007ffc <_strtod_l+0x84>
 8008368:	dd24      	ble.n	80083b4 <_strtod_l+0x43c>
 800836a:	2b16      	cmp	r3, #22
 800836c:	dc0b      	bgt.n	8008386 <_strtod_l+0x40e>
 800836e:	4d6b      	ldr	r5, [pc, #428]	; (800851c <_strtod_l+0x5a4>)
 8008370:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008374:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008378:	4652      	mov	r2, sl
 800837a:	465b      	mov	r3, fp
 800837c:	f7f8 f93c 	bl	80005f8 <__aeabi_dmul>
 8008380:	4682      	mov	sl, r0
 8008382:	468b      	mov	fp, r1
 8008384:	e63a      	b.n	8007ffc <_strtod_l+0x84>
 8008386:	9a08      	ldr	r2, [sp, #32]
 8008388:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800838c:	4293      	cmp	r3, r2
 800838e:	db20      	blt.n	80083d2 <_strtod_l+0x45a>
 8008390:	4c62      	ldr	r4, [pc, #392]	; (800851c <_strtod_l+0x5a4>)
 8008392:	f1c5 050f 	rsb	r5, r5, #15
 8008396:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800839a:	4652      	mov	r2, sl
 800839c:	465b      	mov	r3, fp
 800839e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083a2:	f7f8 f929 	bl	80005f8 <__aeabi_dmul>
 80083a6:	9b08      	ldr	r3, [sp, #32]
 80083a8:	1b5d      	subs	r5, r3, r5
 80083aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80083ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80083b2:	e7e3      	b.n	800837c <_strtod_l+0x404>
 80083b4:	9b08      	ldr	r3, [sp, #32]
 80083b6:	3316      	adds	r3, #22
 80083b8:	db0b      	blt.n	80083d2 <_strtod_l+0x45a>
 80083ba:	9b07      	ldr	r3, [sp, #28]
 80083bc:	4a57      	ldr	r2, [pc, #348]	; (800851c <_strtod_l+0x5a4>)
 80083be:	1b9e      	subs	r6, r3, r6
 80083c0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80083c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083c8:	4650      	mov	r0, sl
 80083ca:	4659      	mov	r1, fp
 80083cc:	f7f8 fa3e 	bl	800084c <__aeabi_ddiv>
 80083d0:	e7d6      	b.n	8008380 <_strtod_l+0x408>
 80083d2:	9b08      	ldr	r3, [sp, #32]
 80083d4:	eba5 0808 	sub.w	r8, r5, r8
 80083d8:	4498      	add	r8, r3
 80083da:	f1b8 0f00 	cmp.w	r8, #0
 80083de:	dd71      	ble.n	80084c4 <_strtod_l+0x54c>
 80083e0:	f018 030f 	ands.w	r3, r8, #15
 80083e4:	d00a      	beq.n	80083fc <_strtod_l+0x484>
 80083e6:	494d      	ldr	r1, [pc, #308]	; (800851c <_strtod_l+0x5a4>)
 80083e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80083ec:	4652      	mov	r2, sl
 80083ee:	465b      	mov	r3, fp
 80083f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083f4:	f7f8 f900 	bl	80005f8 <__aeabi_dmul>
 80083f8:	4682      	mov	sl, r0
 80083fa:	468b      	mov	fp, r1
 80083fc:	f038 080f 	bics.w	r8, r8, #15
 8008400:	d04d      	beq.n	800849e <_strtod_l+0x526>
 8008402:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008406:	dd22      	ble.n	800844e <_strtod_l+0x4d6>
 8008408:	2500      	movs	r5, #0
 800840a:	462e      	mov	r6, r5
 800840c:	9509      	str	r5, [sp, #36]	; 0x24
 800840e:	9507      	str	r5, [sp, #28]
 8008410:	2322      	movs	r3, #34	; 0x22
 8008412:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008524 <_strtod_l+0x5ac>
 8008416:	6023      	str	r3, [r4, #0]
 8008418:	f04f 0a00 	mov.w	sl, #0
 800841c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841e:	2b00      	cmp	r3, #0
 8008420:	f43f adec 	beq.w	8007ffc <_strtod_l+0x84>
 8008424:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008426:	4620      	mov	r0, r4
 8008428:	f001 fe92 	bl	800a150 <_Bfree>
 800842c:	9907      	ldr	r1, [sp, #28]
 800842e:	4620      	mov	r0, r4
 8008430:	f001 fe8e 	bl	800a150 <_Bfree>
 8008434:	4631      	mov	r1, r6
 8008436:	4620      	mov	r0, r4
 8008438:	f001 fe8a 	bl	800a150 <_Bfree>
 800843c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800843e:	4620      	mov	r0, r4
 8008440:	f001 fe86 	bl	800a150 <_Bfree>
 8008444:	4629      	mov	r1, r5
 8008446:	4620      	mov	r0, r4
 8008448:	f001 fe82 	bl	800a150 <_Bfree>
 800844c:	e5d6      	b.n	8007ffc <_strtod_l+0x84>
 800844e:	2300      	movs	r3, #0
 8008450:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008454:	4650      	mov	r0, sl
 8008456:	4659      	mov	r1, fp
 8008458:	4699      	mov	r9, r3
 800845a:	f1b8 0f01 	cmp.w	r8, #1
 800845e:	dc21      	bgt.n	80084a4 <_strtod_l+0x52c>
 8008460:	b10b      	cbz	r3, 8008466 <_strtod_l+0x4ee>
 8008462:	4682      	mov	sl, r0
 8008464:	468b      	mov	fp, r1
 8008466:	4b2e      	ldr	r3, [pc, #184]	; (8008520 <_strtod_l+0x5a8>)
 8008468:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800846c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008470:	4652      	mov	r2, sl
 8008472:	465b      	mov	r3, fp
 8008474:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008478:	f7f8 f8be 	bl	80005f8 <__aeabi_dmul>
 800847c:	4b29      	ldr	r3, [pc, #164]	; (8008524 <_strtod_l+0x5ac>)
 800847e:	460a      	mov	r2, r1
 8008480:	400b      	ands	r3, r1
 8008482:	4929      	ldr	r1, [pc, #164]	; (8008528 <_strtod_l+0x5b0>)
 8008484:	428b      	cmp	r3, r1
 8008486:	4682      	mov	sl, r0
 8008488:	d8be      	bhi.n	8008408 <_strtod_l+0x490>
 800848a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800848e:	428b      	cmp	r3, r1
 8008490:	bf86      	itte	hi
 8008492:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800852c <_strtod_l+0x5b4>
 8008496:	f04f 3aff 	movhi.w	sl, #4294967295
 800849a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800849e:	2300      	movs	r3, #0
 80084a0:	9304      	str	r3, [sp, #16]
 80084a2:	e081      	b.n	80085a8 <_strtod_l+0x630>
 80084a4:	f018 0f01 	tst.w	r8, #1
 80084a8:	d007      	beq.n	80084ba <_strtod_l+0x542>
 80084aa:	4b1d      	ldr	r3, [pc, #116]	; (8008520 <_strtod_l+0x5a8>)
 80084ac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	f7f8 f8a0 	bl	80005f8 <__aeabi_dmul>
 80084b8:	2301      	movs	r3, #1
 80084ba:	f109 0901 	add.w	r9, r9, #1
 80084be:	ea4f 0868 	mov.w	r8, r8, asr #1
 80084c2:	e7ca      	b.n	800845a <_strtod_l+0x4e2>
 80084c4:	d0eb      	beq.n	800849e <_strtod_l+0x526>
 80084c6:	f1c8 0800 	rsb	r8, r8, #0
 80084ca:	f018 020f 	ands.w	r2, r8, #15
 80084ce:	d00a      	beq.n	80084e6 <_strtod_l+0x56e>
 80084d0:	4b12      	ldr	r3, [pc, #72]	; (800851c <_strtod_l+0x5a4>)
 80084d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084d6:	4650      	mov	r0, sl
 80084d8:	4659      	mov	r1, fp
 80084da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084de:	f7f8 f9b5 	bl	800084c <__aeabi_ddiv>
 80084e2:	4682      	mov	sl, r0
 80084e4:	468b      	mov	fp, r1
 80084e6:	ea5f 1828 	movs.w	r8, r8, asr #4
 80084ea:	d0d8      	beq.n	800849e <_strtod_l+0x526>
 80084ec:	f1b8 0f1f 	cmp.w	r8, #31
 80084f0:	dd1e      	ble.n	8008530 <_strtod_l+0x5b8>
 80084f2:	2500      	movs	r5, #0
 80084f4:	462e      	mov	r6, r5
 80084f6:	9509      	str	r5, [sp, #36]	; 0x24
 80084f8:	9507      	str	r5, [sp, #28]
 80084fa:	2322      	movs	r3, #34	; 0x22
 80084fc:	f04f 0a00 	mov.w	sl, #0
 8008500:	f04f 0b00 	mov.w	fp, #0
 8008504:	6023      	str	r3, [r4, #0]
 8008506:	e789      	b.n	800841c <_strtod_l+0x4a4>
 8008508:	0800eba9 	.word	0x0800eba9
 800850c:	0800ebec 	.word	0x0800ebec
 8008510:	0800eba1 	.word	0x0800eba1
 8008514:	0800ed2c 	.word	0x0800ed2c
 8008518:	0800efe8 	.word	0x0800efe8
 800851c:	0800eec8 	.word	0x0800eec8
 8008520:	0800eea0 	.word	0x0800eea0
 8008524:	7ff00000 	.word	0x7ff00000
 8008528:	7ca00000 	.word	0x7ca00000
 800852c:	7fefffff 	.word	0x7fefffff
 8008530:	f018 0310 	ands.w	r3, r8, #16
 8008534:	bf18      	it	ne
 8008536:	236a      	movne	r3, #106	; 0x6a
 8008538:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80088f0 <_strtod_l+0x978>
 800853c:	9304      	str	r3, [sp, #16]
 800853e:	4650      	mov	r0, sl
 8008540:	4659      	mov	r1, fp
 8008542:	2300      	movs	r3, #0
 8008544:	f018 0f01 	tst.w	r8, #1
 8008548:	d004      	beq.n	8008554 <_strtod_l+0x5dc>
 800854a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800854e:	f7f8 f853 	bl	80005f8 <__aeabi_dmul>
 8008552:	2301      	movs	r3, #1
 8008554:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008558:	f109 0908 	add.w	r9, r9, #8
 800855c:	d1f2      	bne.n	8008544 <_strtod_l+0x5cc>
 800855e:	b10b      	cbz	r3, 8008564 <_strtod_l+0x5ec>
 8008560:	4682      	mov	sl, r0
 8008562:	468b      	mov	fp, r1
 8008564:	9b04      	ldr	r3, [sp, #16]
 8008566:	b1bb      	cbz	r3, 8008598 <_strtod_l+0x620>
 8008568:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800856c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008570:	2b00      	cmp	r3, #0
 8008572:	4659      	mov	r1, fp
 8008574:	dd10      	ble.n	8008598 <_strtod_l+0x620>
 8008576:	2b1f      	cmp	r3, #31
 8008578:	f340 8128 	ble.w	80087cc <_strtod_l+0x854>
 800857c:	2b34      	cmp	r3, #52	; 0x34
 800857e:	bfde      	ittt	le
 8008580:	3b20      	suble	r3, #32
 8008582:	f04f 32ff 	movle.w	r2, #4294967295
 8008586:	fa02 f303 	lslle.w	r3, r2, r3
 800858a:	f04f 0a00 	mov.w	sl, #0
 800858e:	bfcc      	ite	gt
 8008590:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008594:	ea03 0b01 	andle.w	fp, r3, r1
 8008598:	2200      	movs	r2, #0
 800859a:	2300      	movs	r3, #0
 800859c:	4650      	mov	r0, sl
 800859e:	4659      	mov	r1, fp
 80085a0:	f7f8 fa92 	bl	8000ac8 <__aeabi_dcmpeq>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d1a4      	bne.n	80084f2 <_strtod_l+0x57a>
 80085a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085aa:	9300      	str	r3, [sp, #0]
 80085ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80085ae:	462b      	mov	r3, r5
 80085b0:	463a      	mov	r2, r7
 80085b2:	4620      	mov	r0, r4
 80085b4:	f001 fe38 	bl	800a228 <__s2b>
 80085b8:	9009      	str	r0, [sp, #36]	; 0x24
 80085ba:	2800      	cmp	r0, #0
 80085bc:	f43f af24 	beq.w	8008408 <_strtod_l+0x490>
 80085c0:	9b07      	ldr	r3, [sp, #28]
 80085c2:	1b9e      	subs	r6, r3, r6
 80085c4:	9b08      	ldr	r3, [sp, #32]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	bfb4      	ite	lt
 80085ca:	4633      	movlt	r3, r6
 80085cc:	2300      	movge	r3, #0
 80085ce:	9310      	str	r3, [sp, #64]	; 0x40
 80085d0:	9b08      	ldr	r3, [sp, #32]
 80085d2:	2500      	movs	r5, #0
 80085d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80085d8:	9318      	str	r3, [sp, #96]	; 0x60
 80085da:	462e      	mov	r6, r5
 80085dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085de:	4620      	mov	r0, r4
 80085e0:	6859      	ldr	r1, [r3, #4]
 80085e2:	f001 fd75 	bl	800a0d0 <_Balloc>
 80085e6:	9007      	str	r0, [sp, #28]
 80085e8:	2800      	cmp	r0, #0
 80085ea:	f43f af11 	beq.w	8008410 <_strtod_l+0x498>
 80085ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f0:	691a      	ldr	r2, [r3, #16]
 80085f2:	3202      	adds	r2, #2
 80085f4:	f103 010c 	add.w	r1, r3, #12
 80085f8:	0092      	lsls	r2, r2, #2
 80085fa:	300c      	adds	r0, #12
 80085fc:	f001 fd5a 	bl	800a0b4 <memcpy>
 8008600:	ec4b ab10 	vmov	d0, sl, fp
 8008604:	aa20      	add	r2, sp, #128	; 0x80
 8008606:	a91f      	add	r1, sp, #124	; 0x7c
 8008608:	4620      	mov	r0, r4
 800860a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800860e:	f002 f947 	bl	800a8a0 <__d2b>
 8008612:	901e      	str	r0, [sp, #120]	; 0x78
 8008614:	2800      	cmp	r0, #0
 8008616:	f43f aefb 	beq.w	8008410 <_strtod_l+0x498>
 800861a:	2101      	movs	r1, #1
 800861c:	4620      	mov	r0, r4
 800861e:	f001 fe9d 	bl	800a35c <__i2b>
 8008622:	4606      	mov	r6, r0
 8008624:	2800      	cmp	r0, #0
 8008626:	f43f aef3 	beq.w	8008410 <_strtod_l+0x498>
 800862a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800862c:	9904      	ldr	r1, [sp, #16]
 800862e:	2b00      	cmp	r3, #0
 8008630:	bfab      	itete	ge
 8008632:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008634:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008636:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008638:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800863c:	bfac      	ite	ge
 800863e:	eb03 0902 	addge.w	r9, r3, r2
 8008642:	1ad7      	sublt	r7, r2, r3
 8008644:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008646:	eba3 0801 	sub.w	r8, r3, r1
 800864a:	4490      	add	r8, r2
 800864c:	4ba3      	ldr	r3, [pc, #652]	; (80088dc <_strtod_l+0x964>)
 800864e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008652:	4598      	cmp	r8, r3
 8008654:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008658:	f280 80cc 	bge.w	80087f4 <_strtod_l+0x87c>
 800865c:	eba3 0308 	sub.w	r3, r3, r8
 8008660:	2b1f      	cmp	r3, #31
 8008662:	eba2 0203 	sub.w	r2, r2, r3
 8008666:	f04f 0101 	mov.w	r1, #1
 800866a:	f300 80b6 	bgt.w	80087da <_strtod_l+0x862>
 800866e:	fa01 f303 	lsl.w	r3, r1, r3
 8008672:	9311      	str	r3, [sp, #68]	; 0x44
 8008674:	2300      	movs	r3, #0
 8008676:	930c      	str	r3, [sp, #48]	; 0x30
 8008678:	eb09 0802 	add.w	r8, r9, r2
 800867c:	9b04      	ldr	r3, [sp, #16]
 800867e:	45c1      	cmp	r9, r8
 8008680:	4417      	add	r7, r2
 8008682:	441f      	add	r7, r3
 8008684:	464b      	mov	r3, r9
 8008686:	bfa8      	it	ge
 8008688:	4643      	movge	r3, r8
 800868a:	42bb      	cmp	r3, r7
 800868c:	bfa8      	it	ge
 800868e:	463b      	movge	r3, r7
 8008690:	2b00      	cmp	r3, #0
 8008692:	bfc2      	ittt	gt
 8008694:	eba8 0803 	subgt.w	r8, r8, r3
 8008698:	1aff      	subgt	r7, r7, r3
 800869a:	eba9 0903 	subgt.w	r9, r9, r3
 800869e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	dd17      	ble.n	80086d4 <_strtod_l+0x75c>
 80086a4:	4631      	mov	r1, r6
 80086a6:	461a      	mov	r2, r3
 80086a8:	4620      	mov	r0, r4
 80086aa:	f001 ff13 	bl	800a4d4 <__pow5mult>
 80086ae:	4606      	mov	r6, r0
 80086b0:	2800      	cmp	r0, #0
 80086b2:	f43f aead 	beq.w	8008410 <_strtod_l+0x498>
 80086b6:	4601      	mov	r1, r0
 80086b8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80086ba:	4620      	mov	r0, r4
 80086bc:	f001 fe64 	bl	800a388 <__multiply>
 80086c0:	900f      	str	r0, [sp, #60]	; 0x3c
 80086c2:	2800      	cmp	r0, #0
 80086c4:	f43f aea4 	beq.w	8008410 <_strtod_l+0x498>
 80086c8:	991e      	ldr	r1, [sp, #120]	; 0x78
 80086ca:	4620      	mov	r0, r4
 80086cc:	f001 fd40 	bl	800a150 <_Bfree>
 80086d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086d2:	931e      	str	r3, [sp, #120]	; 0x78
 80086d4:	f1b8 0f00 	cmp.w	r8, #0
 80086d8:	f300 8091 	bgt.w	80087fe <_strtod_l+0x886>
 80086dc:	9b08      	ldr	r3, [sp, #32]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	dd08      	ble.n	80086f4 <_strtod_l+0x77c>
 80086e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80086e4:	9907      	ldr	r1, [sp, #28]
 80086e6:	4620      	mov	r0, r4
 80086e8:	f001 fef4 	bl	800a4d4 <__pow5mult>
 80086ec:	9007      	str	r0, [sp, #28]
 80086ee:	2800      	cmp	r0, #0
 80086f0:	f43f ae8e 	beq.w	8008410 <_strtod_l+0x498>
 80086f4:	2f00      	cmp	r7, #0
 80086f6:	dd08      	ble.n	800870a <_strtod_l+0x792>
 80086f8:	9907      	ldr	r1, [sp, #28]
 80086fa:	463a      	mov	r2, r7
 80086fc:	4620      	mov	r0, r4
 80086fe:	f001 ff43 	bl	800a588 <__lshift>
 8008702:	9007      	str	r0, [sp, #28]
 8008704:	2800      	cmp	r0, #0
 8008706:	f43f ae83 	beq.w	8008410 <_strtod_l+0x498>
 800870a:	f1b9 0f00 	cmp.w	r9, #0
 800870e:	dd08      	ble.n	8008722 <_strtod_l+0x7aa>
 8008710:	4631      	mov	r1, r6
 8008712:	464a      	mov	r2, r9
 8008714:	4620      	mov	r0, r4
 8008716:	f001 ff37 	bl	800a588 <__lshift>
 800871a:	4606      	mov	r6, r0
 800871c:	2800      	cmp	r0, #0
 800871e:	f43f ae77 	beq.w	8008410 <_strtod_l+0x498>
 8008722:	9a07      	ldr	r2, [sp, #28]
 8008724:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008726:	4620      	mov	r0, r4
 8008728:	f001 ffb6 	bl	800a698 <__mdiff>
 800872c:	4605      	mov	r5, r0
 800872e:	2800      	cmp	r0, #0
 8008730:	f43f ae6e 	beq.w	8008410 <_strtod_l+0x498>
 8008734:	68c3      	ldr	r3, [r0, #12]
 8008736:	930f      	str	r3, [sp, #60]	; 0x3c
 8008738:	2300      	movs	r3, #0
 800873a:	60c3      	str	r3, [r0, #12]
 800873c:	4631      	mov	r1, r6
 800873e:	f001 ff8f 	bl	800a660 <__mcmp>
 8008742:	2800      	cmp	r0, #0
 8008744:	da65      	bge.n	8008812 <_strtod_l+0x89a>
 8008746:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008748:	ea53 030a 	orrs.w	r3, r3, sl
 800874c:	f040 8087 	bne.w	800885e <_strtod_l+0x8e6>
 8008750:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008754:	2b00      	cmp	r3, #0
 8008756:	f040 8082 	bne.w	800885e <_strtod_l+0x8e6>
 800875a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800875e:	0d1b      	lsrs	r3, r3, #20
 8008760:	051b      	lsls	r3, r3, #20
 8008762:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008766:	d97a      	bls.n	800885e <_strtod_l+0x8e6>
 8008768:	696b      	ldr	r3, [r5, #20]
 800876a:	b913      	cbnz	r3, 8008772 <_strtod_l+0x7fa>
 800876c:	692b      	ldr	r3, [r5, #16]
 800876e:	2b01      	cmp	r3, #1
 8008770:	dd75      	ble.n	800885e <_strtod_l+0x8e6>
 8008772:	4629      	mov	r1, r5
 8008774:	2201      	movs	r2, #1
 8008776:	4620      	mov	r0, r4
 8008778:	f001 ff06 	bl	800a588 <__lshift>
 800877c:	4631      	mov	r1, r6
 800877e:	4605      	mov	r5, r0
 8008780:	f001 ff6e 	bl	800a660 <__mcmp>
 8008784:	2800      	cmp	r0, #0
 8008786:	dd6a      	ble.n	800885e <_strtod_l+0x8e6>
 8008788:	9904      	ldr	r1, [sp, #16]
 800878a:	4a55      	ldr	r2, [pc, #340]	; (80088e0 <_strtod_l+0x968>)
 800878c:	465b      	mov	r3, fp
 800878e:	2900      	cmp	r1, #0
 8008790:	f000 8085 	beq.w	800889e <_strtod_l+0x926>
 8008794:	ea02 010b 	and.w	r1, r2, fp
 8008798:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800879c:	dc7f      	bgt.n	800889e <_strtod_l+0x926>
 800879e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80087a2:	f77f aeaa 	ble.w	80084fa <_strtod_l+0x582>
 80087a6:	4a4f      	ldr	r2, [pc, #316]	; (80088e4 <_strtod_l+0x96c>)
 80087a8:	2300      	movs	r3, #0
 80087aa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80087ae:	4650      	mov	r0, sl
 80087b0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80087b4:	4659      	mov	r1, fp
 80087b6:	f7f7 ff1f 	bl	80005f8 <__aeabi_dmul>
 80087ba:	460b      	mov	r3, r1
 80087bc:	4303      	orrs	r3, r0
 80087be:	bf08      	it	eq
 80087c0:	2322      	moveq	r3, #34	; 0x22
 80087c2:	4682      	mov	sl, r0
 80087c4:	468b      	mov	fp, r1
 80087c6:	bf08      	it	eq
 80087c8:	6023      	streq	r3, [r4, #0]
 80087ca:	e62b      	b.n	8008424 <_strtod_l+0x4ac>
 80087cc:	f04f 32ff 	mov.w	r2, #4294967295
 80087d0:	fa02 f303 	lsl.w	r3, r2, r3
 80087d4:	ea03 0a0a 	and.w	sl, r3, sl
 80087d8:	e6de      	b.n	8008598 <_strtod_l+0x620>
 80087da:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80087de:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80087e2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80087e6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80087ea:	fa01 f308 	lsl.w	r3, r1, r8
 80087ee:	930c      	str	r3, [sp, #48]	; 0x30
 80087f0:	9111      	str	r1, [sp, #68]	; 0x44
 80087f2:	e741      	b.n	8008678 <_strtod_l+0x700>
 80087f4:	2300      	movs	r3, #0
 80087f6:	930c      	str	r3, [sp, #48]	; 0x30
 80087f8:	2301      	movs	r3, #1
 80087fa:	9311      	str	r3, [sp, #68]	; 0x44
 80087fc:	e73c      	b.n	8008678 <_strtod_l+0x700>
 80087fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008800:	4642      	mov	r2, r8
 8008802:	4620      	mov	r0, r4
 8008804:	f001 fec0 	bl	800a588 <__lshift>
 8008808:	901e      	str	r0, [sp, #120]	; 0x78
 800880a:	2800      	cmp	r0, #0
 800880c:	f47f af66 	bne.w	80086dc <_strtod_l+0x764>
 8008810:	e5fe      	b.n	8008410 <_strtod_l+0x498>
 8008812:	465f      	mov	r7, fp
 8008814:	d16e      	bne.n	80088f4 <_strtod_l+0x97c>
 8008816:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008818:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800881c:	b342      	cbz	r2, 8008870 <_strtod_l+0x8f8>
 800881e:	4a32      	ldr	r2, [pc, #200]	; (80088e8 <_strtod_l+0x970>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d128      	bne.n	8008876 <_strtod_l+0x8fe>
 8008824:	9b04      	ldr	r3, [sp, #16]
 8008826:	4650      	mov	r0, sl
 8008828:	b1eb      	cbz	r3, 8008866 <_strtod_l+0x8ee>
 800882a:	4a2d      	ldr	r2, [pc, #180]	; (80088e0 <_strtod_l+0x968>)
 800882c:	403a      	ands	r2, r7
 800882e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8008832:	f04f 31ff 	mov.w	r1, #4294967295
 8008836:	d819      	bhi.n	800886c <_strtod_l+0x8f4>
 8008838:	0d12      	lsrs	r2, r2, #20
 800883a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800883e:	fa01 f303 	lsl.w	r3, r1, r3
 8008842:	4298      	cmp	r0, r3
 8008844:	d117      	bne.n	8008876 <_strtod_l+0x8fe>
 8008846:	4b29      	ldr	r3, [pc, #164]	; (80088ec <_strtod_l+0x974>)
 8008848:	429f      	cmp	r7, r3
 800884a:	d102      	bne.n	8008852 <_strtod_l+0x8da>
 800884c:	3001      	adds	r0, #1
 800884e:	f43f addf 	beq.w	8008410 <_strtod_l+0x498>
 8008852:	4b23      	ldr	r3, [pc, #140]	; (80088e0 <_strtod_l+0x968>)
 8008854:	403b      	ands	r3, r7
 8008856:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800885a:	f04f 0a00 	mov.w	sl, #0
 800885e:	9b04      	ldr	r3, [sp, #16]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1a0      	bne.n	80087a6 <_strtod_l+0x82e>
 8008864:	e5de      	b.n	8008424 <_strtod_l+0x4ac>
 8008866:	f04f 33ff 	mov.w	r3, #4294967295
 800886a:	e7ea      	b.n	8008842 <_strtod_l+0x8ca>
 800886c:	460b      	mov	r3, r1
 800886e:	e7e8      	b.n	8008842 <_strtod_l+0x8ca>
 8008870:	ea53 030a 	orrs.w	r3, r3, sl
 8008874:	d088      	beq.n	8008788 <_strtod_l+0x810>
 8008876:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008878:	b1db      	cbz	r3, 80088b2 <_strtod_l+0x93a>
 800887a:	423b      	tst	r3, r7
 800887c:	d0ef      	beq.n	800885e <_strtod_l+0x8e6>
 800887e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008880:	9a04      	ldr	r2, [sp, #16]
 8008882:	4650      	mov	r0, sl
 8008884:	4659      	mov	r1, fp
 8008886:	b1c3      	cbz	r3, 80088ba <_strtod_l+0x942>
 8008888:	f7ff fb58 	bl	8007f3c <sulp>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008894:	f7f7 fcfa 	bl	800028c <__adddf3>
 8008898:	4682      	mov	sl, r0
 800889a:	468b      	mov	fp, r1
 800889c:	e7df      	b.n	800885e <_strtod_l+0x8e6>
 800889e:	4013      	ands	r3, r2
 80088a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80088a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80088a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80088ac:	f04f 3aff 	mov.w	sl, #4294967295
 80088b0:	e7d5      	b.n	800885e <_strtod_l+0x8e6>
 80088b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80088b4:	ea13 0f0a 	tst.w	r3, sl
 80088b8:	e7e0      	b.n	800887c <_strtod_l+0x904>
 80088ba:	f7ff fb3f 	bl	8007f3c <sulp>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80088c6:	f7f7 fcdf 	bl	8000288 <__aeabi_dsub>
 80088ca:	2200      	movs	r2, #0
 80088cc:	2300      	movs	r3, #0
 80088ce:	4682      	mov	sl, r0
 80088d0:	468b      	mov	fp, r1
 80088d2:	f7f8 f8f9 	bl	8000ac8 <__aeabi_dcmpeq>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d0c1      	beq.n	800885e <_strtod_l+0x8e6>
 80088da:	e60e      	b.n	80084fa <_strtod_l+0x582>
 80088dc:	fffffc02 	.word	0xfffffc02
 80088e0:	7ff00000 	.word	0x7ff00000
 80088e4:	39500000 	.word	0x39500000
 80088e8:	000fffff 	.word	0x000fffff
 80088ec:	7fefffff 	.word	0x7fefffff
 80088f0:	0800ec00 	.word	0x0800ec00
 80088f4:	4631      	mov	r1, r6
 80088f6:	4628      	mov	r0, r5
 80088f8:	f002 f82e 	bl	800a958 <__ratio>
 80088fc:	ec59 8b10 	vmov	r8, r9, d0
 8008900:	ee10 0a10 	vmov	r0, s0
 8008904:	2200      	movs	r2, #0
 8008906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800890a:	4649      	mov	r1, r9
 800890c:	f7f8 f8f0 	bl	8000af0 <__aeabi_dcmple>
 8008910:	2800      	cmp	r0, #0
 8008912:	d07c      	beq.n	8008a0e <_strtod_l+0xa96>
 8008914:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008916:	2b00      	cmp	r3, #0
 8008918:	d04c      	beq.n	80089b4 <_strtod_l+0xa3c>
 800891a:	4b95      	ldr	r3, [pc, #596]	; (8008b70 <_strtod_l+0xbf8>)
 800891c:	2200      	movs	r2, #0
 800891e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008922:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008b70 <_strtod_l+0xbf8>
 8008926:	f04f 0800 	mov.w	r8, #0
 800892a:	4b92      	ldr	r3, [pc, #584]	; (8008b74 <_strtod_l+0xbfc>)
 800892c:	403b      	ands	r3, r7
 800892e:	9311      	str	r3, [sp, #68]	; 0x44
 8008930:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008932:	4b91      	ldr	r3, [pc, #580]	; (8008b78 <_strtod_l+0xc00>)
 8008934:	429a      	cmp	r2, r3
 8008936:	f040 80b2 	bne.w	8008a9e <_strtod_l+0xb26>
 800893a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800893e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008942:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008946:	ec4b ab10 	vmov	d0, sl, fp
 800894a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800894e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008952:	f001 ff29 	bl	800a7a8 <__ulp>
 8008956:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800895a:	ec53 2b10 	vmov	r2, r3, d0
 800895e:	f7f7 fe4b 	bl	80005f8 <__aeabi_dmul>
 8008962:	4652      	mov	r2, sl
 8008964:	465b      	mov	r3, fp
 8008966:	f7f7 fc91 	bl	800028c <__adddf3>
 800896a:	460b      	mov	r3, r1
 800896c:	4981      	ldr	r1, [pc, #516]	; (8008b74 <_strtod_l+0xbfc>)
 800896e:	4a83      	ldr	r2, [pc, #524]	; (8008b7c <_strtod_l+0xc04>)
 8008970:	4019      	ands	r1, r3
 8008972:	4291      	cmp	r1, r2
 8008974:	4682      	mov	sl, r0
 8008976:	d95e      	bls.n	8008a36 <_strtod_l+0xabe>
 8008978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800897a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800897e:	4293      	cmp	r3, r2
 8008980:	d103      	bne.n	800898a <_strtod_l+0xa12>
 8008982:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008984:	3301      	adds	r3, #1
 8008986:	f43f ad43 	beq.w	8008410 <_strtod_l+0x498>
 800898a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008b88 <_strtod_l+0xc10>
 800898e:	f04f 3aff 	mov.w	sl, #4294967295
 8008992:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008994:	4620      	mov	r0, r4
 8008996:	f001 fbdb 	bl	800a150 <_Bfree>
 800899a:	9907      	ldr	r1, [sp, #28]
 800899c:	4620      	mov	r0, r4
 800899e:	f001 fbd7 	bl	800a150 <_Bfree>
 80089a2:	4631      	mov	r1, r6
 80089a4:	4620      	mov	r0, r4
 80089a6:	f001 fbd3 	bl	800a150 <_Bfree>
 80089aa:	4629      	mov	r1, r5
 80089ac:	4620      	mov	r0, r4
 80089ae:	f001 fbcf 	bl	800a150 <_Bfree>
 80089b2:	e613      	b.n	80085dc <_strtod_l+0x664>
 80089b4:	f1ba 0f00 	cmp.w	sl, #0
 80089b8:	d11b      	bne.n	80089f2 <_strtod_l+0xa7a>
 80089ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089be:	b9f3      	cbnz	r3, 80089fe <_strtod_l+0xa86>
 80089c0:	4b6b      	ldr	r3, [pc, #428]	; (8008b70 <_strtod_l+0xbf8>)
 80089c2:	2200      	movs	r2, #0
 80089c4:	4640      	mov	r0, r8
 80089c6:	4649      	mov	r1, r9
 80089c8:	f7f8 f888 	bl	8000adc <__aeabi_dcmplt>
 80089cc:	b9d0      	cbnz	r0, 8008a04 <_strtod_l+0xa8c>
 80089ce:	4640      	mov	r0, r8
 80089d0:	4649      	mov	r1, r9
 80089d2:	4b6b      	ldr	r3, [pc, #428]	; (8008b80 <_strtod_l+0xc08>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	f7f7 fe0f 	bl	80005f8 <__aeabi_dmul>
 80089da:	4680      	mov	r8, r0
 80089dc:	4689      	mov	r9, r1
 80089de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80089e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80089e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80089e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80089ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80089f0:	e79b      	b.n	800892a <_strtod_l+0x9b2>
 80089f2:	f1ba 0f01 	cmp.w	sl, #1
 80089f6:	d102      	bne.n	80089fe <_strtod_l+0xa86>
 80089f8:	2f00      	cmp	r7, #0
 80089fa:	f43f ad7e 	beq.w	80084fa <_strtod_l+0x582>
 80089fe:	4b61      	ldr	r3, [pc, #388]	; (8008b84 <_strtod_l+0xc0c>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	e78c      	b.n	800891e <_strtod_l+0x9a6>
 8008a04:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008b80 <_strtod_l+0xc08>
 8008a08:	f04f 0800 	mov.w	r8, #0
 8008a0c:	e7e7      	b.n	80089de <_strtod_l+0xa66>
 8008a0e:	4b5c      	ldr	r3, [pc, #368]	; (8008b80 <_strtod_l+0xc08>)
 8008a10:	4640      	mov	r0, r8
 8008a12:	4649      	mov	r1, r9
 8008a14:	2200      	movs	r2, #0
 8008a16:	f7f7 fdef 	bl	80005f8 <__aeabi_dmul>
 8008a1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008a1c:	4680      	mov	r8, r0
 8008a1e:	4689      	mov	r9, r1
 8008a20:	b933      	cbnz	r3, 8008a30 <_strtod_l+0xab8>
 8008a22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a26:	9012      	str	r0, [sp, #72]	; 0x48
 8008a28:	9313      	str	r3, [sp, #76]	; 0x4c
 8008a2a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008a2e:	e7dd      	b.n	80089ec <_strtod_l+0xa74>
 8008a30:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008a34:	e7f9      	b.n	8008a2a <_strtod_l+0xab2>
 8008a36:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008a3a:	9b04      	ldr	r3, [sp, #16]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1a8      	bne.n	8008992 <_strtod_l+0xa1a>
 8008a40:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a46:	0d1b      	lsrs	r3, r3, #20
 8008a48:	051b      	lsls	r3, r3, #20
 8008a4a:	429a      	cmp	r2, r3
 8008a4c:	d1a1      	bne.n	8008992 <_strtod_l+0xa1a>
 8008a4e:	4640      	mov	r0, r8
 8008a50:	4649      	mov	r1, r9
 8008a52:	f7f8 f931 	bl	8000cb8 <__aeabi_d2lz>
 8008a56:	f7f7 fda1 	bl	800059c <__aeabi_l2d>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	4640      	mov	r0, r8
 8008a60:	4649      	mov	r1, r9
 8008a62:	f7f7 fc11 	bl	8000288 <__aeabi_dsub>
 8008a66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008a68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a6c:	ea43 030a 	orr.w	r3, r3, sl
 8008a70:	4313      	orrs	r3, r2
 8008a72:	4680      	mov	r8, r0
 8008a74:	4689      	mov	r9, r1
 8008a76:	d053      	beq.n	8008b20 <_strtod_l+0xba8>
 8008a78:	a335      	add	r3, pc, #212	; (adr r3, 8008b50 <_strtod_l+0xbd8>)
 8008a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a7e:	f7f8 f82d 	bl	8000adc <__aeabi_dcmplt>
 8008a82:	2800      	cmp	r0, #0
 8008a84:	f47f acce 	bne.w	8008424 <_strtod_l+0x4ac>
 8008a88:	a333      	add	r3, pc, #204	; (adr r3, 8008b58 <_strtod_l+0xbe0>)
 8008a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a8e:	4640      	mov	r0, r8
 8008a90:	4649      	mov	r1, r9
 8008a92:	f7f8 f841 	bl	8000b18 <__aeabi_dcmpgt>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	f43f af7b 	beq.w	8008992 <_strtod_l+0xa1a>
 8008a9c:	e4c2      	b.n	8008424 <_strtod_l+0x4ac>
 8008a9e:	9b04      	ldr	r3, [sp, #16]
 8008aa0:	b333      	cbz	r3, 8008af0 <_strtod_l+0xb78>
 8008aa2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008aa4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008aa8:	d822      	bhi.n	8008af0 <_strtod_l+0xb78>
 8008aaa:	a32d      	add	r3, pc, #180	; (adr r3, 8008b60 <_strtod_l+0xbe8>)
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	4640      	mov	r0, r8
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	f7f8 f81c 	bl	8000af0 <__aeabi_dcmple>
 8008ab8:	b1a0      	cbz	r0, 8008ae4 <_strtod_l+0xb6c>
 8008aba:	4649      	mov	r1, r9
 8008abc:	4640      	mov	r0, r8
 8008abe:	f7f8 f873 	bl	8000ba8 <__aeabi_d2uiz>
 8008ac2:	2801      	cmp	r0, #1
 8008ac4:	bf38      	it	cc
 8008ac6:	2001      	movcc	r0, #1
 8008ac8:	f7f7 fd1c 	bl	8000504 <__aeabi_ui2d>
 8008acc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ace:	4680      	mov	r8, r0
 8008ad0:	4689      	mov	r9, r1
 8008ad2:	bb13      	cbnz	r3, 8008b1a <_strtod_l+0xba2>
 8008ad4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ad8:	9014      	str	r0, [sp, #80]	; 0x50
 8008ada:	9315      	str	r3, [sp, #84]	; 0x54
 8008adc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008ae0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008ae4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ae6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008ae8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008aec:	1a9b      	subs	r3, r3, r2
 8008aee:	930d      	str	r3, [sp, #52]	; 0x34
 8008af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008af4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008af8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008afc:	f001 fe54 	bl	800a7a8 <__ulp>
 8008b00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b04:	ec53 2b10 	vmov	r2, r3, d0
 8008b08:	f7f7 fd76 	bl	80005f8 <__aeabi_dmul>
 8008b0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008b10:	f7f7 fbbc 	bl	800028c <__adddf3>
 8008b14:	4682      	mov	sl, r0
 8008b16:	468b      	mov	fp, r1
 8008b18:	e78f      	b.n	8008a3a <_strtod_l+0xac2>
 8008b1a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008b1e:	e7dd      	b.n	8008adc <_strtod_l+0xb64>
 8008b20:	a311      	add	r3, pc, #68	; (adr r3, 8008b68 <_strtod_l+0xbf0>)
 8008b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b26:	f7f7 ffd9 	bl	8000adc <__aeabi_dcmplt>
 8008b2a:	e7b4      	b.n	8008a96 <_strtod_l+0xb1e>
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	930e      	str	r3, [sp, #56]	; 0x38
 8008b30:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008b32:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	f7ff ba65 	b.w	8008004 <_strtod_l+0x8c>
 8008b3a:	2b65      	cmp	r3, #101	; 0x65
 8008b3c:	f43f ab5d 	beq.w	80081fa <_strtod_l+0x282>
 8008b40:	2b45      	cmp	r3, #69	; 0x45
 8008b42:	f43f ab5a 	beq.w	80081fa <_strtod_l+0x282>
 8008b46:	2201      	movs	r2, #1
 8008b48:	f7ff bb92 	b.w	8008270 <_strtod_l+0x2f8>
 8008b4c:	f3af 8000 	nop.w
 8008b50:	94a03595 	.word	0x94a03595
 8008b54:	3fdfffff 	.word	0x3fdfffff
 8008b58:	35afe535 	.word	0x35afe535
 8008b5c:	3fe00000 	.word	0x3fe00000
 8008b60:	ffc00000 	.word	0xffc00000
 8008b64:	41dfffff 	.word	0x41dfffff
 8008b68:	94a03595 	.word	0x94a03595
 8008b6c:	3fcfffff 	.word	0x3fcfffff
 8008b70:	3ff00000 	.word	0x3ff00000
 8008b74:	7ff00000 	.word	0x7ff00000
 8008b78:	7fe00000 	.word	0x7fe00000
 8008b7c:	7c9fffff 	.word	0x7c9fffff
 8008b80:	3fe00000 	.word	0x3fe00000
 8008b84:	bff00000 	.word	0xbff00000
 8008b88:	7fefffff 	.word	0x7fefffff

08008b8c <_strtod_r>:
 8008b8c:	4b01      	ldr	r3, [pc, #4]	; (8008b94 <_strtod_r+0x8>)
 8008b8e:	f7ff b9f3 	b.w	8007f78 <_strtod_l>
 8008b92:	bf00      	nop
 8008b94:	2000008c 	.word	0x2000008c

08008b98 <_strtol_l.isra.0>:
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b9e:	d001      	beq.n	8008ba4 <_strtol_l.isra.0+0xc>
 8008ba0:	2b24      	cmp	r3, #36	; 0x24
 8008ba2:	d906      	bls.n	8008bb2 <_strtol_l.isra.0+0x1a>
 8008ba4:	f7fe faf8 	bl	8007198 <__errno>
 8008ba8:	2316      	movs	r3, #22
 8008baa:	6003      	str	r3, [r0, #0]
 8008bac:	2000      	movs	r0, #0
 8008bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bb2:	4f3a      	ldr	r7, [pc, #232]	; (8008c9c <_strtol_l.isra.0+0x104>)
 8008bb4:	468e      	mov	lr, r1
 8008bb6:	4676      	mov	r6, lr
 8008bb8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008bbc:	5de5      	ldrb	r5, [r4, r7]
 8008bbe:	f015 0508 	ands.w	r5, r5, #8
 8008bc2:	d1f8      	bne.n	8008bb6 <_strtol_l.isra.0+0x1e>
 8008bc4:	2c2d      	cmp	r4, #45	; 0x2d
 8008bc6:	d134      	bne.n	8008c32 <_strtol_l.isra.0+0x9a>
 8008bc8:	f89e 4000 	ldrb.w	r4, [lr]
 8008bcc:	f04f 0801 	mov.w	r8, #1
 8008bd0:	f106 0e02 	add.w	lr, r6, #2
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d05c      	beq.n	8008c92 <_strtol_l.isra.0+0xfa>
 8008bd8:	2b10      	cmp	r3, #16
 8008bda:	d10c      	bne.n	8008bf6 <_strtol_l.isra.0+0x5e>
 8008bdc:	2c30      	cmp	r4, #48	; 0x30
 8008bde:	d10a      	bne.n	8008bf6 <_strtol_l.isra.0+0x5e>
 8008be0:	f89e 4000 	ldrb.w	r4, [lr]
 8008be4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008be8:	2c58      	cmp	r4, #88	; 0x58
 8008bea:	d14d      	bne.n	8008c88 <_strtol_l.isra.0+0xf0>
 8008bec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008bf0:	2310      	movs	r3, #16
 8008bf2:	f10e 0e02 	add.w	lr, lr, #2
 8008bf6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008bfa:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008bfe:	2600      	movs	r6, #0
 8008c00:	fbbc f9f3 	udiv	r9, ip, r3
 8008c04:	4635      	mov	r5, r6
 8008c06:	fb03 ca19 	mls	sl, r3, r9, ip
 8008c0a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008c0e:	2f09      	cmp	r7, #9
 8008c10:	d818      	bhi.n	8008c44 <_strtol_l.isra.0+0xac>
 8008c12:	463c      	mov	r4, r7
 8008c14:	42a3      	cmp	r3, r4
 8008c16:	dd24      	ble.n	8008c62 <_strtol_l.isra.0+0xca>
 8008c18:	2e00      	cmp	r6, #0
 8008c1a:	db1f      	blt.n	8008c5c <_strtol_l.isra.0+0xc4>
 8008c1c:	45a9      	cmp	r9, r5
 8008c1e:	d31d      	bcc.n	8008c5c <_strtol_l.isra.0+0xc4>
 8008c20:	d101      	bne.n	8008c26 <_strtol_l.isra.0+0x8e>
 8008c22:	45a2      	cmp	sl, r4
 8008c24:	db1a      	blt.n	8008c5c <_strtol_l.isra.0+0xc4>
 8008c26:	fb05 4503 	mla	r5, r5, r3, r4
 8008c2a:	2601      	movs	r6, #1
 8008c2c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008c30:	e7eb      	b.n	8008c0a <_strtol_l.isra.0+0x72>
 8008c32:	2c2b      	cmp	r4, #43	; 0x2b
 8008c34:	bf08      	it	eq
 8008c36:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008c3a:	46a8      	mov	r8, r5
 8008c3c:	bf08      	it	eq
 8008c3e:	f106 0e02 	addeq.w	lr, r6, #2
 8008c42:	e7c7      	b.n	8008bd4 <_strtol_l.isra.0+0x3c>
 8008c44:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008c48:	2f19      	cmp	r7, #25
 8008c4a:	d801      	bhi.n	8008c50 <_strtol_l.isra.0+0xb8>
 8008c4c:	3c37      	subs	r4, #55	; 0x37
 8008c4e:	e7e1      	b.n	8008c14 <_strtol_l.isra.0+0x7c>
 8008c50:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008c54:	2f19      	cmp	r7, #25
 8008c56:	d804      	bhi.n	8008c62 <_strtol_l.isra.0+0xca>
 8008c58:	3c57      	subs	r4, #87	; 0x57
 8008c5a:	e7db      	b.n	8008c14 <_strtol_l.isra.0+0x7c>
 8008c5c:	f04f 36ff 	mov.w	r6, #4294967295
 8008c60:	e7e4      	b.n	8008c2c <_strtol_l.isra.0+0x94>
 8008c62:	2e00      	cmp	r6, #0
 8008c64:	da05      	bge.n	8008c72 <_strtol_l.isra.0+0xda>
 8008c66:	2322      	movs	r3, #34	; 0x22
 8008c68:	6003      	str	r3, [r0, #0]
 8008c6a:	4665      	mov	r5, ip
 8008c6c:	b942      	cbnz	r2, 8008c80 <_strtol_l.isra.0+0xe8>
 8008c6e:	4628      	mov	r0, r5
 8008c70:	e79d      	b.n	8008bae <_strtol_l.isra.0+0x16>
 8008c72:	f1b8 0f00 	cmp.w	r8, #0
 8008c76:	d000      	beq.n	8008c7a <_strtol_l.isra.0+0xe2>
 8008c78:	426d      	negs	r5, r5
 8008c7a:	2a00      	cmp	r2, #0
 8008c7c:	d0f7      	beq.n	8008c6e <_strtol_l.isra.0+0xd6>
 8008c7e:	b10e      	cbz	r6, 8008c84 <_strtol_l.isra.0+0xec>
 8008c80:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008c84:	6011      	str	r1, [r2, #0]
 8008c86:	e7f2      	b.n	8008c6e <_strtol_l.isra.0+0xd6>
 8008c88:	2430      	movs	r4, #48	; 0x30
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1b3      	bne.n	8008bf6 <_strtol_l.isra.0+0x5e>
 8008c8e:	2308      	movs	r3, #8
 8008c90:	e7b1      	b.n	8008bf6 <_strtol_l.isra.0+0x5e>
 8008c92:	2c30      	cmp	r4, #48	; 0x30
 8008c94:	d0a4      	beq.n	8008be0 <_strtol_l.isra.0+0x48>
 8008c96:	230a      	movs	r3, #10
 8008c98:	e7ad      	b.n	8008bf6 <_strtol_l.isra.0+0x5e>
 8008c9a:	bf00      	nop
 8008c9c:	0800ec29 	.word	0x0800ec29

08008ca0 <_strtol_r>:
 8008ca0:	f7ff bf7a 	b.w	8008b98 <_strtol_l.isra.0>

08008ca4 <quorem>:
 8008ca4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca8:	6903      	ldr	r3, [r0, #16]
 8008caa:	690c      	ldr	r4, [r1, #16]
 8008cac:	42a3      	cmp	r3, r4
 8008cae:	4607      	mov	r7, r0
 8008cb0:	f2c0 8081 	blt.w	8008db6 <quorem+0x112>
 8008cb4:	3c01      	subs	r4, #1
 8008cb6:	f101 0814 	add.w	r8, r1, #20
 8008cba:	f100 0514 	add.w	r5, r0, #20
 8008cbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cc2:	9301      	str	r3, [sp, #4]
 8008cc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008cd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cd8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cdc:	d331      	bcc.n	8008d42 <quorem+0x9e>
 8008cde:	f04f 0e00 	mov.w	lr, #0
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	46ac      	mov	ip, r5
 8008ce6:	46f2      	mov	sl, lr
 8008ce8:	f850 2b04 	ldr.w	r2, [r0], #4
 8008cec:	b293      	uxth	r3, r2
 8008cee:	fb06 e303 	mla	r3, r6, r3, lr
 8008cf2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	ebaa 0303 	sub.w	r3, sl, r3
 8008cfc:	0c12      	lsrs	r2, r2, #16
 8008cfe:	f8dc a000 	ldr.w	sl, [ip]
 8008d02:	fb06 e202 	mla	r2, r6, r2, lr
 8008d06:	fa13 f38a 	uxtah	r3, r3, sl
 8008d0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d0e:	fa1f fa82 	uxth.w	sl, r2
 8008d12:	f8dc 2000 	ldr.w	r2, [ip]
 8008d16:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008d1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d24:	4581      	cmp	r9, r0
 8008d26:	f84c 3b04 	str.w	r3, [ip], #4
 8008d2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d2e:	d2db      	bcs.n	8008ce8 <quorem+0x44>
 8008d30:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d34:	b92b      	cbnz	r3, 8008d42 <quorem+0x9e>
 8008d36:	9b01      	ldr	r3, [sp, #4]
 8008d38:	3b04      	subs	r3, #4
 8008d3a:	429d      	cmp	r5, r3
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	d32e      	bcc.n	8008d9e <quorem+0xfa>
 8008d40:	613c      	str	r4, [r7, #16]
 8008d42:	4638      	mov	r0, r7
 8008d44:	f001 fc8c 	bl	800a660 <__mcmp>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	db24      	blt.n	8008d96 <quorem+0xf2>
 8008d4c:	3601      	adds	r6, #1
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f04f 0c00 	mov.w	ip, #0
 8008d54:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d58:	f8d0 e000 	ldr.w	lr, [r0]
 8008d5c:	b293      	uxth	r3, r2
 8008d5e:	ebac 0303 	sub.w	r3, ip, r3
 8008d62:	0c12      	lsrs	r2, r2, #16
 8008d64:	fa13 f38e 	uxtah	r3, r3, lr
 8008d68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d76:	45c1      	cmp	r9, r8
 8008d78:	f840 3b04 	str.w	r3, [r0], #4
 8008d7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008d80:	d2e8      	bcs.n	8008d54 <quorem+0xb0>
 8008d82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d8a:	b922      	cbnz	r2, 8008d96 <quorem+0xf2>
 8008d8c:	3b04      	subs	r3, #4
 8008d8e:	429d      	cmp	r5, r3
 8008d90:	461a      	mov	r2, r3
 8008d92:	d30a      	bcc.n	8008daa <quorem+0x106>
 8008d94:	613c      	str	r4, [r7, #16]
 8008d96:	4630      	mov	r0, r6
 8008d98:	b003      	add	sp, #12
 8008d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9e:	6812      	ldr	r2, [r2, #0]
 8008da0:	3b04      	subs	r3, #4
 8008da2:	2a00      	cmp	r2, #0
 8008da4:	d1cc      	bne.n	8008d40 <quorem+0x9c>
 8008da6:	3c01      	subs	r4, #1
 8008da8:	e7c7      	b.n	8008d3a <quorem+0x96>
 8008daa:	6812      	ldr	r2, [r2, #0]
 8008dac:	3b04      	subs	r3, #4
 8008dae:	2a00      	cmp	r2, #0
 8008db0:	d1f0      	bne.n	8008d94 <quorem+0xf0>
 8008db2:	3c01      	subs	r4, #1
 8008db4:	e7eb      	b.n	8008d8e <quorem+0xea>
 8008db6:	2000      	movs	r0, #0
 8008db8:	e7ee      	b.n	8008d98 <quorem+0xf4>
 8008dba:	0000      	movs	r0, r0
 8008dbc:	0000      	movs	r0, r0
	...

08008dc0 <_dtoa_r>:
 8008dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	ed2d 8b02 	vpush	{d8}
 8008dc8:	ec57 6b10 	vmov	r6, r7, d0
 8008dcc:	b095      	sub	sp, #84	; 0x54
 8008dce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008dd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008dd4:	9105      	str	r1, [sp, #20]
 8008dd6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008dda:	4604      	mov	r4, r0
 8008ddc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dde:	930f      	str	r3, [sp, #60]	; 0x3c
 8008de0:	b975      	cbnz	r5, 8008e00 <_dtoa_r+0x40>
 8008de2:	2010      	movs	r0, #16
 8008de4:	f001 f94c 	bl	800a080 <malloc>
 8008de8:	4602      	mov	r2, r0
 8008dea:	6260      	str	r0, [r4, #36]	; 0x24
 8008dec:	b920      	cbnz	r0, 8008df8 <_dtoa_r+0x38>
 8008dee:	4bb2      	ldr	r3, [pc, #712]	; (80090b8 <_dtoa_r+0x2f8>)
 8008df0:	21ea      	movs	r1, #234	; 0xea
 8008df2:	48b2      	ldr	r0, [pc, #712]	; (80090bc <_dtoa_r+0x2fc>)
 8008df4:	f002 f874 	bl	800aee0 <__assert_func>
 8008df8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008dfc:	6005      	str	r5, [r0, #0]
 8008dfe:	60c5      	str	r5, [r0, #12]
 8008e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e02:	6819      	ldr	r1, [r3, #0]
 8008e04:	b151      	cbz	r1, 8008e1c <_dtoa_r+0x5c>
 8008e06:	685a      	ldr	r2, [r3, #4]
 8008e08:	604a      	str	r2, [r1, #4]
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	4093      	lsls	r3, r2
 8008e0e:	608b      	str	r3, [r1, #8]
 8008e10:	4620      	mov	r0, r4
 8008e12:	f001 f99d 	bl	800a150 <_Bfree>
 8008e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	1e3b      	subs	r3, r7, #0
 8008e1e:	bfb9      	ittee	lt
 8008e20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008e24:	9303      	strlt	r3, [sp, #12]
 8008e26:	2300      	movge	r3, #0
 8008e28:	f8c8 3000 	strge.w	r3, [r8]
 8008e2c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008e30:	4ba3      	ldr	r3, [pc, #652]	; (80090c0 <_dtoa_r+0x300>)
 8008e32:	bfbc      	itt	lt
 8008e34:	2201      	movlt	r2, #1
 8008e36:	f8c8 2000 	strlt.w	r2, [r8]
 8008e3a:	ea33 0309 	bics.w	r3, r3, r9
 8008e3e:	d11b      	bne.n	8008e78 <_dtoa_r+0xb8>
 8008e40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e42:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e46:	6013      	str	r3, [r2, #0]
 8008e48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e4c:	4333      	orrs	r3, r6
 8008e4e:	f000 857a 	beq.w	8009946 <_dtoa_r+0xb86>
 8008e52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e54:	b963      	cbnz	r3, 8008e70 <_dtoa_r+0xb0>
 8008e56:	4b9b      	ldr	r3, [pc, #620]	; (80090c4 <_dtoa_r+0x304>)
 8008e58:	e024      	b.n	8008ea4 <_dtoa_r+0xe4>
 8008e5a:	4b9b      	ldr	r3, [pc, #620]	; (80090c8 <_dtoa_r+0x308>)
 8008e5c:	9300      	str	r3, [sp, #0]
 8008e5e:	3308      	adds	r3, #8
 8008e60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	9800      	ldr	r0, [sp, #0]
 8008e66:	b015      	add	sp, #84	; 0x54
 8008e68:	ecbd 8b02 	vpop	{d8}
 8008e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e70:	4b94      	ldr	r3, [pc, #592]	; (80090c4 <_dtoa_r+0x304>)
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	3303      	adds	r3, #3
 8008e76:	e7f3      	b.n	8008e60 <_dtoa_r+0xa0>
 8008e78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	ec51 0b17 	vmov	r0, r1, d7
 8008e82:	2300      	movs	r3, #0
 8008e84:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008e88:	f7f7 fe1e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e8c:	4680      	mov	r8, r0
 8008e8e:	b158      	cbz	r0, 8008ea8 <_dtoa_r+0xe8>
 8008e90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008e92:	2301      	movs	r3, #1
 8008e94:	6013      	str	r3, [r2, #0]
 8008e96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f000 8551 	beq.w	8009940 <_dtoa_r+0xb80>
 8008e9e:	488b      	ldr	r0, [pc, #556]	; (80090cc <_dtoa_r+0x30c>)
 8008ea0:	6018      	str	r0, [r3, #0]
 8008ea2:	1e43      	subs	r3, r0, #1
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	e7dd      	b.n	8008e64 <_dtoa_r+0xa4>
 8008ea8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008eac:	aa12      	add	r2, sp, #72	; 0x48
 8008eae:	a913      	add	r1, sp, #76	; 0x4c
 8008eb0:	4620      	mov	r0, r4
 8008eb2:	f001 fcf5 	bl	800a8a0 <__d2b>
 8008eb6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008eba:	4683      	mov	fp, r0
 8008ebc:	2d00      	cmp	r5, #0
 8008ebe:	d07c      	beq.n	8008fba <_dtoa_r+0x1fa>
 8008ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ec2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8008ec6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008eca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8008ece:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008ed2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008ed6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008eda:	4b7d      	ldr	r3, [pc, #500]	; (80090d0 <_dtoa_r+0x310>)
 8008edc:	2200      	movs	r2, #0
 8008ede:	4630      	mov	r0, r6
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	f7f7 f9d1 	bl	8000288 <__aeabi_dsub>
 8008ee6:	a36e      	add	r3, pc, #440	; (adr r3, 80090a0 <_dtoa_r+0x2e0>)
 8008ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eec:	f7f7 fb84 	bl	80005f8 <__aeabi_dmul>
 8008ef0:	a36d      	add	r3, pc, #436	; (adr r3, 80090a8 <_dtoa_r+0x2e8>)
 8008ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef6:	f7f7 f9c9 	bl	800028c <__adddf3>
 8008efa:	4606      	mov	r6, r0
 8008efc:	4628      	mov	r0, r5
 8008efe:	460f      	mov	r7, r1
 8008f00:	f7f7 fb10 	bl	8000524 <__aeabi_i2d>
 8008f04:	a36a      	add	r3, pc, #424	; (adr r3, 80090b0 <_dtoa_r+0x2f0>)
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	f7f7 fb75 	bl	80005f8 <__aeabi_dmul>
 8008f0e:	4602      	mov	r2, r0
 8008f10:	460b      	mov	r3, r1
 8008f12:	4630      	mov	r0, r6
 8008f14:	4639      	mov	r1, r7
 8008f16:	f7f7 f9b9 	bl	800028c <__adddf3>
 8008f1a:	4606      	mov	r6, r0
 8008f1c:	460f      	mov	r7, r1
 8008f1e:	f7f7 fe1b 	bl	8000b58 <__aeabi_d2iz>
 8008f22:	2200      	movs	r2, #0
 8008f24:	4682      	mov	sl, r0
 8008f26:	2300      	movs	r3, #0
 8008f28:	4630      	mov	r0, r6
 8008f2a:	4639      	mov	r1, r7
 8008f2c:	f7f7 fdd6 	bl	8000adc <__aeabi_dcmplt>
 8008f30:	b148      	cbz	r0, 8008f46 <_dtoa_r+0x186>
 8008f32:	4650      	mov	r0, sl
 8008f34:	f7f7 faf6 	bl	8000524 <__aeabi_i2d>
 8008f38:	4632      	mov	r2, r6
 8008f3a:	463b      	mov	r3, r7
 8008f3c:	f7f7 fdc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f40:	b908      	cbnz	r0, 8008f46 <_dtoa_r+0x186>
 8008f42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f46:	f1ba 0f16 	cmp.w	sl, #22
 8008f4a:	d854      	bhi.n	8008ff6 <_dtoa_r+0x236>
 8008f4c:	4b61      	ldr	r3, [pc, #388]	; (80090d4 <_dtoa_r+0x314>)
 8008f4e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f5a:	f7f7 fdbf 	bl	8000adc <__aeabi_dcmplt>
 8008f5e:	2800      	cmp	r0, #0
 8008f60:	d04b      	beq.n	8008ffa <_dtoa_r+0x23a>
 8008f62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008f66:	2300      	movs	r3, #0
 8008f68:	930e      	str	r3, [sp, #56]	; 0x38
 8008f6a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f6c:	1b5d      	subs	r5, r3, r5
 8008f6e:	1e6b      	subs	r3, r5, #1
 8008f70:	9304      	str	r3, [sp, #16]
 8008f72:	bf43      	ittte	mi
 8008f74:	2300      	movmi	r3, #0
 8008f76:	f1c5 0801 	rsbmi	r8, r5, #1
 8008f7a:	9304      	strmi	r3, [sp, #16]
 8008f7c:	f04f 0800 	movpl.w	r8, #0
 8008f80:	f1ba 0f00 	cmp.w	sl, #0
 8008f84:	db3b      	blt.n	8008ffe <_dtoa_r+0x23e>
 8008f86:	9b04      	ldr	r3, [sp, #16]
 8008f88:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008f8c:	4453      	add	r3, sl
 8008f8e:	9304      	str	r3, [sp, #16]
 8008f90:	2300      	movs	r3, #0
 8008f92:	9306      	str	r3, [sp, #24]
 8008f94:	9b05      	ldr	r3, [sp, #20]
 8008f96:	2b09      	cmp	r3, #9
 8008f98:	d869      	bhi.n	800906e <_dtoa_r+0x2ae>
 8008f9a:	2b05      	cmp	r3, #5
 8008f9c:	bfc4      	itt	gt
 8008f9e:	3b04      	subgt	r3, #4
 8008fa0:	9305      	strgt	r3, [sp, #20]
 8008fa2:	9b05      	ldr	r3, [sp, #20]
 8008fa4:	f1a3 0302 	sub.w	r3, r3, #2
 8008fa8:	bfcc      	ite	gt
 8008faa:	2500      	movgt	r5, #0
 8008fac:	2501      	movle	r5, #1
 8008fae:	2b03      	cmp	r3, #3
 8008fb0:	d869      	bhi.n	8009086 <_dtoa_r+0x2c6>
 8008fb2:	e8df f003 	tbb	[pc, r3]
 8008fb6:	4e2c      	.short	0x4e2c
 8008fb8:	5a4c      	.short	0x5a4c
 8008fba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8008fbe:	441d      	add	r5, r3
 8008fc0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008fc4:	2b20      	cmp	r3, #32
 8008fc6:	bfc1      	itttt	gt
 8008fc8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008fcc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008fd0:	fa09 f303 	lslgt.w	r3, r9, r3
 8008fd4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008fd8:	bfda      	itte	le
 8008fda:	f1c3 0320 	rsble	r3, r3, #32
 8008fde:	fa06 f003 	lslle.w	r0, r6, r3
 8008fe2:	4318      	orrgt	r0, r3
 8008fe4:	f7f7 fa8e 	bl	8000504 <__aeabi_ui2d>
 8008fe8:	2301      	movs	r3, #1
 8008fea:	4606      	mov	r6, r0
 8008fec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008ff0:	3d01      	subs	r5, #1
 8008ff2:	9310      	str	r3, [sp, #64]	; 0x40
 8008ff4:	e771      	b.n	8008eda <_dtoa_r+0x11a>
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e7b6      	b.n	8008f68 <_dtoa_r+0x1a8>
 8008ffa:	900e      	str	r0, [sp, #56]	; 0x38
 8008ffc:	e7b5      	b.n	8008f6a <_dtoa_r+0x1aa>
 8008ffe:	f1ca 0300 	rsb	r3, sl, #0
 8009002:	9306      	str	r3, [sp, #24]
 8009004:	2300      	movs	r3, #0
 8009006:	eba8 080a 	sub.w	r8, r8, sl
 800900a:	930d      	str	r3, [sp, #52]	; 0x34
 800900c:	e7c2      	b.n	8008f94 <_dtoa_r+0x1d4>
 800900e:	2300      	movs	r3, #0
 8009010:	9308      	str	r3, [sp, #32]
 8009012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009014:	2b00      	cmp	r3, #0
 8009016:	dc39      	bgt.n	800908c <_dtoa_r+0x2cc>
 8009018:	f04f 0901 	mov.w	r9, #1
 800901c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009020:	464b      	mov	r3, r9
 8009022:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8009026:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009028:	2200      	movs	r2, #0
 800902a:	6042      	str	r2, [r0, #4]
 800902c:	2204      	movs	r2, #4
 800902e:	f102 0614 	add.w	r6, r2, #20
 8009032:	429e      	cmp	r6, r3
 8009034:	6841      	ldr	r1, [r0, #4]
 8009036:	d92f      	bls.n	8009098 <_dtoa_r+0x2d8>
 8009038:	4620      	mov	r0, r4
 800903a:	f001 f849 	bl	800a0d0 <_Balloc>
 800903e:	9000      	str	r0, [sp, #0]
 8009040:	2800      	cmp	r0, #0
 8009042:	d14b      	bne.n	80090dc <_dtoa_r+0x31c>
 8009044:	4b24      	ldr	r3, [pc, #144]	; (80090d8 <_dtoa_r+0x318>)
 8009046:	4602      	mov	r2, r0
 8009048:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800904c:	e6d1      	b.n	8008df2 <_dtoa_r+0x32>
 800904e:	2301      	movs	r3, #1
 8009050:	e7de      	b.n	8009010 <_dtoa_r+0x250>
 8009052:	2300      	movs	r3, #0
 8009054:	9308      	str	r3, [sp, #32]
 8009056:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009058:	eb0a 0903 	add.w	r9, sl, r3
 800905c:	f109 0301 	add.w	r3, r9, #1
 8009060:	2b01      	cmp	r3, #1
 8009062:	9301      	str	r3, [sp, #4]
 8009064:	bfb8      	it	lt
 8009066:	2301      	movlt	r3, #1
 8009068:	e7dd      	b.n	8009026 <_dtoa_r+0x266>
 800906a:	2301      	movs	r3, #1
 800906c:	e7f2      	b.n	8009054 <_dtoa_r+0x294>
 800906e:	2501      	movs	r5, #1
 8009070:	2300      	movs	r3, #0
 8009072:	9305      	str	r3, [sp, #20]
 8009074:	9508      	str	r5, [sp, #32]
 8009076:	f04f 39ff 	mov.w	r9, #4294967295
 800907a:	2200      	movs	r2, #0
 800907c:	f8cd 9004 	str.w	r9, [sp, #4]
 8009080:	2312      	movs	r3, #18
 8009082:	9209      	str	r2, [sp, #36]	; 0x24
 8009084:	e7cf      	b.n	8009026 <_dtoa_r+0x266>
 8009086:	2301      	movs	r3, #1
 8009088:	9308      	str	r3, [sp, #32]
 800908a:	e7f4      	b.n	8009076 <_dtoa_r+0x2b6>
 800908c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009090:	f8cd 9004 	str.w	r9, [sp, #4]
 8009094:	464b      	mov	r3, r9
 8009096:	e7c6      	b.n	8009026 <_dtoa_r+0x266>
 8009098:	3101      	adds	r1, #1
 800909a:	6041      	str	r1, [r0, #4]
 800909c:	0052      	lsls	r2, r2, #1
 800909e:	e7c6      	b.n	800902e <_dtoa_r+0x26e>
 80090a0:	636f4361 	.word	0x636f4361
 80090a4:	3fd287a7 	.word	0x3fd287a7
 80090a8:	8b60c8b3 	.word	0x8b60c8b3
 80090ac:	3fc68a28 	.word	0x3fc68a28
 80090b0:	509f79fb 	.word	0x509f79fb
 80090b4:	3fd34413 	.word	0x3fd34413
 80090b8:	0800ed36 	.word	0x0800ed36
 80090bc:	0800ed4d 	.word	0x0800ed4d
 80090c0:	7ff00000 	.word	0x7ff00000
 80090c4:	0800ed32 	.word	0x0800ed32
 80090c8:	0800ed29 	.word	0x0800ed29
 80090cc:	0800ebad 	.word	0x0800ebad
 80090d0:	3ff80000 	.word	0x3ff80000
 80090d4:	0800eec8 	.word	0x0800eec8
 80090d8:	0800edac 	.word	0x0800edac
 80090dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090de:	9a00      	ldr	r2, [sp, #0]
 80090e0:	601a      	str	r2, [r3, #0]
 80090e2:	9b01      	ldr	r3, [sp, #4]
 80090e4:	2b0e      	cmp	r3, #14
 80090e6:	f200 80ad 	bhi.w	8009244 <_dtoa_r+0x484>
 80090ea:	2d00      	cmp	r5, #0
 80090ec:	f000 80aa 	beq.w	8009244 <_dtoa_r+0x484>
 80090f0:	f1ba 0f00 	cmp.w	sl, #0
 80090f4:	dd36      	ble.n	8009164 <_dtoa_r+0x3a4>
 80090f6:	4ac3      	ldr	r2, [pc, #780]	; (8009404 <_dtoa_r+0x644>)
 80090f8:	f00a 030f 	and.w	r3, sl, #15
 80090fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009100:	ed93 7b00 	vldr	d7, [r3]
 8009104:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009108:	ea4f 172a 	mov.w	r7, sl, asr #4
 800910c:	eeb0 8a47 	vmov.f32	s16, s14
 8009110:	eef0 8a67 	vmov.f32	s17, s15
 8009114:	d016      	beq.n	8009144 <_dtoa_r+0x384>
 8009116:	4bbc      	ldr	r3, [pc, #752]	; (8009408 <_dtoa_r+0x648>)
 8009118:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800911c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009120:	f7f7 fb94 	bl	800084c <__aeabi_ddiv>
 8009124:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009128:	f007 070f 	and.w	r7, r7, #15
 800912c:	2503      	movs	r5, #3
 800912e:	4eb6      	ldr	r6, [pc, #728]	; (8009408 <_dtoa_r+0x648>)
 8009130:	b957      	cbnz	r7, 8009148 <_dtoa_r+0x388>
 8009132:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009136:	ec53 2b18 	vmov	r2, r3, d8
 800913a:	f7f7 fb87 	bl	800084c <__aeabi_ddiv>
 800913e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009142:	e029      	b.n	8009198 <_dtoa_r+0x3d8>
 8009144:	2502      	movs	r5, #2
 8009146:	e7f2      	b.n	800912e <_dtoa_r+0x36e>
 8009148:	07f9      	lsls	r1, r7, #31
 800914a:	d508      	bpl.n	800915e <_dtoa_r+0x39e>
 800914c:	ec51 0b18 	vmov	r0, r1, d8
 8009150:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009154:	f7f7 fa50 	bl	80005f8 <__aeabi_dmul>
 8009158:	ec41 0b18 	vmov	d8, r0, r1
 800915c:	3501      	adds	r5, #1
 800915e:	107f      	asrs	r7, r7, #1
 8009160:	3608      	adds	r6, #8
 8009162:	e7e5      	b.n	8009130 <_dtoa_r+0x370>
 8009164:	f000 80a6 	beq.w	80092b4 <_dtoa_r+0x4f4>
 8009168:	f1ca 0600 	rsb	r6, sl, #0
 800916c:	4ba5      	ldr	r3, [pc, #660]	; (8009404 <_dtoa_r+0x644>)
 800916e:	4fa6      	ldr	r7, [pc, #664]	; (8009408 <_dtoa_r+0x648>)
 8009170:	f006 020f 	and.w	r2, r6, #15
 8009174:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800917c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009180:	f7f7 fa3a 	bl	80005f8 <__aeabi_dmul>
 8009184:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009188:	1136      	asrs	r6, r6, #4
 800918a:	2300      	movs	r3, #0
 800918c:	2502      	movs	r5, #2
 800918e:	2e00      	cmp	r6, #0
 8009190:	f040 8085 	bne.w	800929e <_dtoa_r+0x4de>
 8009194:	2b00      	cmp	r3, #0
 8009196:	d1d2      	bne.n	800913e <_dtoa_r+0x37e>
 8009198:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 808c 	beq.w	80092b8 <_dtoa_r+0x4f8>
 80091a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091a4:	4b99      	ldr	r3, [pc, #612]	; (800940c <_dtoa_r+0x64c>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	4630      	mov	r0, r6
 80091aa:	4639      	mov	r1, r7
 80091ac:	f7f7 fc96 	bl	8000adc <__aeabi_dcmplt>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	f000 8081 	beq.w	80092b8 <_dtoa_r+0x4f8>
 80091b6:	9b01      	ldr	r3, [sp, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d07d      	beq.n	80092b8 <_dtoa_r+0x4f8>
 80091bc:	f1b9 0f00 	cmp.w	r9, #0
 80091c0:	dd3c      	ble.n	800923c <_dtoa_r+0x47c>
 80091c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80091c6:	9307      	str	r3, [sp, #28]
 80091c8:	2200      	movs	r2, #0
 80091ca:	4b91      	ldr	r3, [pc, #580]	; (8009410 <_dtoa_r+0x650>)
 80091cc:	4630      	mov	r0, r6
 80091ce:	4639      	mov	r1, r7
 80091d0:	f7f7 fa12 	bl	80005f8 <__aeabi_dmul>
 80091d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091d8:	3501      	adds	r5, #1
 80091da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80091de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091e2:	4628      	mov	r0, r5
 80091e4:	f7f7 f99e 	bl	8000524 <__aeabi_i2d>
 80091e8:	4632      	mov	r2, r6
 80091ea:	463b      	mov	r3, r7
 80091ec:	f7f7 fa04 	bl	80005f8 <__aeabi_dmul>
 80091f0:	4b88      	ldr	r3, [pc, #544]	; (8009414 <_dtoa_r+0x654>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	f7f7 f84a 	bl	800028c <__adddf3>
 80091f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80091fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009200:	9303      	str	r3, [sp, #12]
 8009202:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009204:	2b00      	cmp	r3, #0
 8009206:	d15c      	bne.n	80092c2 <_dtoa_r+0x502>
 8009208:	4b83      	ldr	r3, [pc, #524]	; (8009418 <_dtoa_r+0x658>)
 800920a:	2200      	movs	r2, #0
 800920c:	4630      	mov	r0, r6
 800920e:	4639      	mov	r1, r7
 8009210:	f7f7 f83a 	bl	8000288 <__aeabi_dsub>
 8009214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009218:	4606      	mov	r6, r0
 800921a:	460f      	mov	r7, r1
 800921c:	f7f7 fc7c 	bl	8000b18 <__aeabi_dcmpgt>
 8009220:	2800      	cmp	r0, #0
 8009222:	f040 8296 	bne.w	8009752 <_dtoa_r+0x992>
 8009226:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800922a:	4630      	mov	r0, r6
 800922c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009230:	4639      	mov	r1, r7
 8009232:	f7f7 fc53 	bl	8000adc <__aeabi_dcmplt>
 8009236:	2800      	cmp	r0, #0
 8009238:	f040 8288 	bne.w	800974c <_dtoa_r+0x98c>
 800923c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009240:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009244:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009246:	2b00      	cmp	r3, #0
 8009248:	f2c0 8158 	blt.w	80094fc <_dtoa_r+0x73c>
 800924c:	f1ba 0f0e 	cmp.w	sl, #14
 8009250:	f300 8154 	bgt.w	80094fc <_dtoa_r+0x73c>
 8009254:	4b6b      	ldr	r3, [pc, #428]	; (8009404 <_dtoa_r+0x644>)
 8009256:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800925a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800925e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009260:	2b00      	cmp	r3, #0
 8009262:	f280 80e3 	bge.w	800942c <_dtoa_r+0x66c>
 8009266:	9b01      	ldr	r3, [sp, #4]
 8009268:	2b00      	cmp	r3, #0
 800926a:	f300 80df 	bgt.w	800942c <_dtoa_r+0x66c>
 800926e:	f040 826d 	bne.w	800974c <_dtoa_r+0x98c>
 8009272:	4b69      	ldr	r3, [pc, #420]	; (8009418 <_dtoa_r+0x658>)
 8009274:	2200      	movs	r2, #0
 8009276:	4640      	mov	r0, r8
 8009278:	4649      	mov	r1, r9
 800927a:	f7f7 f9bd 	bl	80005f8 <__aeabi_dmul>
 800927e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009282:	f7f7 fc3f 	bl	8000b04 <__aeabi_dcmpge>
 8009286:	9e01      	ldr	r6, [sp, #4]
 8009288:	4637      	mov	r7, r6
 800928a:	2800      	cmp	r0, #0
 800928c:	f040 8243 	bne.w	8009716 <_dtoa_r+0x956>
 8009290:	9d00      	ldr	r5, [sp, #0]
 8009292:	2331      	movs	r3, #49	; 0x31
 8009294:	f805 3b01 	strb.w	r3, [r5], #1
 8009298:	f10a 0a01 	add.w	sl, sl, #1
 800929c:	e23f      	b.n	800971e <_dtoa_r+0x95e>
 800929e:	07f2      	lsls	r2, r6, #31
 80092a0:	d505      	bpl.n	80092ae <_dtoa_r+0x4ee>
 80092a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092a6:	f7f7 f9a7 	bl	80005f8 <__aeabi_dmul>
 80092aa:	3501      	adds	r5, #1
 80092ac:	2301      	movs	r3, #1
 80092ae:	1076      	asrs	r6, r6, #1
 80092b0:	3708      	adds	r7, #8
 80092b2:	e76c      	b.n	800918e <_dtoa_r+0x3ce>
 80092b4:	2502      	movs	r5, #2
 80092b6:	e76f      	b.n	8009198 <_dtoa_r+0x3d8>
 80092b8:	9b01      	ldr	r3, [sp, #4]
 80092ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80092be:	930c      	str	r3, [sp, #48]	; 0x30
 80092c0:	e78d      	b.n	80091de <_dtoa_r+0x41e>
 80092c2:	9900      	ldr	r1, [sp, #0]
 80092c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80092c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092c8:	4b4e      	ldr	r3, [pc, #312]	; (8009404 <_dtoa_r+0x644>)
 80092ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80092ce:	4401      	add	r1, r0
 80092d0:	9102      	str	r1, [sp, #8]
 80092d2:	9908      	ldr	r1, [sp, #32]
 80092d4:	eeb0 8a47 	vmov.f32	s16, s14
 80092d8:	eef0 8a67 	vmov.f32	s17, s15
 80092dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092e4:	2900      	cmp	r1, #0
 80092e6:	d045      	beq.n	8009374 <_dtoa_r+0x5b4>
 80092e8:	494c      	ldr	r1, [pc, #304]	; (800941c <_dtoa_r+0x65c>)
 80092ea:	2000      	movs	r0, #0
 80092ec:	f7f7 faae 	bl	800084c <__aeabi_ddiv>
 80092f0:	ec53 2b18 	vmov	r2, r3, d8
 80092f4:	f7f6 ffc8 	bl	8000288 <__aeabi_dsub>
 80092f8:	9d00      	ldr	r5, [sp, #0]
 80092fa:	ec41 0b18 	vmov	d8, r0, r1
 80092fe:	4639      	mov	r1, r7
 8009300:	4630      	mov	r0, r6
 8009302:	f7f7 fc29 	bl	8000b58 <__aeabi_d2iz>
 8009306:	900c      	str	r0, [sp, #48]	; 0x30
 8009308:	f7f7 f90c 	bl	8000524 <__aeabi_i2d>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	4630      	mov	r0, r6
 8009312:	4639      	mov	r1, r7
 8009314:	f7f6 ffb8 	bl	8000288 <__aeabi_dsub>
 8009318:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800931a:	3330      	adds	r3, #48	; 0x30
 800931c:	f805 3b01 	strb.w	r3, [r5], #1
 8009320:	ec53 2b18 	vmov	r2, r3, d8
 8009324:	4606      	mov	r6, r0
 8009326:	460f      	mov	r7, r1
 8009328:	f7f7 fbd8 	bl	8000adc <__aeabi_dcmplt>
 800932c:	2800      	cmp	r0, #0
 800932e:	d165      	bne.n	80093fc <_dtoa_r+0x63c>
 8009330:	4632      	mov	r2, r6
 8009332:	463b      	mov	r3, r7
 8009334:	4935      	ldr	r1, [pc, #212]	; (800940c <_dtoa_r+0x64c>)
 8009336:	2000      	movs	r0, #0
 8009338:	f7f6 ffa6 	bl	8000288 <__aeabi_dsub>
 800933c:	ec53 2b18 	vmov	r2, r3, d8
 8009340:	f7f7 fbcc 	bl	8000adc <__aeabi_dcmplt>
 8009344:	2800      	cmp	r0, #0
 8009346:	f040 80b9 	bne.w	80094bc <_dtoa_r+0x6fc>
 800934a:	9b02      	ldr	r3, [sp, #8]
 800934c:	429d      	cmp	r5, r3
 800934e:	f43f af75 	beq.w	800923c <_dtoa_r+0x47c>
 8009352:	4b2f      	ldr	r3, [pc, #188]	; (8009410 <_dtoa_r+0x650>)
 8009354:	ec51 0b18 	vmov	r0, r1, d8
 8009358:	2200      	movs	r2, #0
 800935a:	f7f7 f94d 	bl	80005f8 <__aeabi_dmul>
 800935e:	4b2c      	ldr	r3, [pc, #176]	; (8009410 <_dtoa_r+0x650>)
 8009360:	ec41 0b18 	vmov	d8, r0, r1
 8009364:	2200      	movs	r2, #0
 8009366:	4630      	mov	r0, r6
 8009368:	4639      	mov	r1, r7
 800936a:	f7f7 f945 	bl	80005f8 <__aeabi_dmul>
 800936e:	4606      	mov	r6, r0
 8009370:	460f      	mov	r7, r1
 8009372:	e7c4      	b.n	80092fe <_dtoa_r+0x53e>
 8009374:	ec51 0b17 	vmov	r0, r1, d7
 8009378:	f7f7 f93e 	bl	80005f8 <__aeabi_dmul>
 800937c:	9b02      	ldr	r3, [sp, #8]
 800937e:	9d00      	ldr	r5, [sp, #0]
 8009380:	930c      	str	r3, [sp, #48]	; 0x30
 8009382:	ec41 0b18 	vmov	d8, r0, r1
 8009386:	4639      	mov	r1, r7
 8009388:	4630      	mov	r0, r6
 800938a:	f7f7 fbe5 	bl	8000b58 <__aeabi_d2iz>
 800938e:	9011      	str	r0, [sp, #68]	; 0x44
 8009390:	f7f7 f8c8 	bl	8000524 <__aeabi_i2d>
 8009394:	4602      	mov	r2, r0
 8009396:	460b      	mov	r3, r1
 8009398:	4630      	mov	r0, r6
 800939a:	4639      	mov	r1, r7
 800939c:	f7f6 ff74 	bl	8000288 <__aeabi_dsub>
 80093a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093a2:	3330      	adds	r3, #48	; 0x30
 80093a4:	f805 3b01 	strb.w	r3, [r5], #1
 80093a8:	9b02      	ldr	r3, [sp, #8]
 80093aa:	429d      	cmp	r5, r3
 80093ac:	4606      	mov	r6, r0
 80093ae:	460f      	mov	r7, r1
 80093b0:	f04f 0200 	mov.w	r2, #0
 80093b4:	d134      	bne.n	8009420 <_dtoa_r+0x660>
 80093b6:	4b19      	ldr	r3, [pc, #100]	; (800941c <_dtoa_r+0x65c>)
 80093b8:	ec51 0b18 	vmov	r0, r1, d8
 80093bc:	f7f6 ff66 	bl	800028c <__adddf3>
 80093c0:	4602      	mov	r2, r0
 80093c2:	460b      	mov	r3, r1
 80093c4:	4630      	mov	r0, r6
 80093c6:	4639      	mov	r1, r7
 80093c8:	f7f7 fba6 	bl	8000b18 <__aeabi_dcmpgt>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d175      	bne.n	80094bc <_dtoa_r+0x6fc>
 80093d0:	ec53 2b18 	vmov	r2, r3, d8
 80093d4:	4911      	ldr	r1, [pc, #68]	; (800941c <_dtoa_r+0x65c>)
 80093d6:	2000      	movs	r0, #0
 80093d8:	f7f6 ff56 	bl	8000288 <__aeabi_dsub>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	4630      	mov	r0, r6
 80093e2:	4639      	mov	r1, r7
 80093e4:	f7f7 fb7a 	bl	8000adc <__aeabi_dcmplt>
 80093e8:	2800      	cmp	r0, #0
 80093ea:	f43f af27 	beq.w	800923c <_dtoa_r+0x47c>
 80093ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80093f0:	1e6b      	subs	r3, r5, #1
 80093f2:	930c      	str	r3, [sp, #48]	; 0x30
 80093f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093f8:	2b30      	cmp	r3, #48	; 0x30
 80093fa:	d0f8      	beq.n	80093ee <_dtoa_r+0x62e>
 80093fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009400:	e04a      	b.n	8009498 <_dtoa_r+0x6d8>
 8009402:	bf00      	nop
 8009404:	0800eec8 	.word	0x0800eec8
 8009408:	0800eea0 	.word	0x0800eea0
 800940c:	3ff00000 	.word	0x3ff00000
 8009410:	40240000 	.word	0x40240000
 8009414:	401c0000 	.word	0x401c0000
 8009418:	40140000 	.word	0x40140000
 800941c:	3fe00000 	.word	0x3fe00000
 8009420:	4baf      	ldr	r3, [pc, #700]	; (80096e0 <_dtoa_r+0x920>)
 8009422:	f7f7 f8e9 	bl	80005f8 <__aeabi_dmul>
 8009426:	4606      	mov	r6, r0
 8009428:	460f      	mov	r7, r1
 800942a:	e7ac      	b.n	8009386 <_dtoa_r+0x5c6>
 800942c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009430:	9d00      	ldr	r5, [sp, #0]
 8009432:	4642      	mov	r2, r8
 8009434:	464b      	mov	r3, r9
 8009436:	4630      	mov	r0, r6
 8009438:	4639      	mov	r1, r7
 800943a:	f7f7 fa07 	bl	800084c <__aeabi_ddiv>
 800943e:	f7f7 fb8b 	bl	8000b58 <__aeabi_d2iz>
 8009442:	9002      	str	r0, [sp, #8]
 8009444:	f7f7 f86e 	bl	8000524 <__aeabi_i2d>
 8009448:	4642      	mov	r2, r8
 800944a:	464b      	mov	r3, r9
 800944c:	f7f7 f8d4 	bl	80005f8 <__aeabi_dmul>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	4630      	mov	r0, r6
 8009456:	4639      	mov	r1, r7
 8009458:	f7f6 ff16 	bl	8000288 <__aeabi_dsub>
 800945c:	9e02      	ldr	r6, [sp, #8]
 800945e:	9f01      	ldr	r7, [sp, #4]
 8009460:	3630      	adds	r6, #48	; 0x30
 8009462:	f805 6b01 	strb.w	r6, [r5], #1
 8009466:	9e00      	ldr	r6, [sp, #0]
 8009468:	1bae      	subs	r6, r5, r6
 800946a:	42b7      	cmp	r7, r6
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	d137      	bne.n	80094e2 <_dtoa_r+0x722>
 8009472:	f7f6 ff0b 	bl	800028c <__adddf3>
 8009476:	4642      	mov	r2, r8
 8009478:	464b      	mov	r3, r9
 800947a:	4606      	mov	r6, r0
 800947c:	460f      	mov	r7, r1
 800947e:	f7f7 fb4b 	bl	8000b18 <__aeabi_dcmpgt>
 8009482:	b9c8      	cbnz	r0, 80094b8 <_dtoa_r+0x6f8>
 8009484:	4642      	mov	r2, r8
 8009486:	464b      	mov	r3, r9
 8009488:	4630      	mov	r0, r6
 800948a:	4639      	mov	r1, r7
 800948c:	f7f7 fb1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009490:	b110      	cbz	r0, 8009498 <_dtoa_r+0x6d8>
 8009492:	9b02      	ldr	r3, [sp, #8]
 8009494:	07d9      	lsls	r1, r3, #31
 8009496:	d40f      	bmi.n	80094b8 <_dtoa_r+0x6f8>
 8009498:	4620      	mov	r0, r4
 800949a:	4659      	mov	r1, fp
 800949c:	f000 fe58 	bl	800a150 <_Bfree>
 80094a0:	2300      	movs	r3, #0
 80094a2:	702b      	strb	r3, [r5, #0]
 80094a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094a6:	f10a 0001 	add.w	r0, sl, #1
 80094aa:	6018      	str	r0, [r3, #0]
 80094ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	f43f acd8 	beq.w	8008e64 <_dtoa_r+0xa4>
 80094b4:	601d      	str	r5, [r3, #0]
 80094b6:	e4d5      	b.n	8008e64 <_dtoa_r+0xa4>
 80094b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80094bc:	462b      	mov	r3, r5
 80094be:	461d      	mov	r5, r3
 80094c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094c4:	2a39      	cmp	r2, #57	; 0x39
 80094c6:	d108      	bne.n	80094da <_dtoa_r+0x71a>
 80094c8:	9a00      	ldr	r2, [sp, #0]
 80094ca:	429a      	cmp	r2, r3
 80094cc:	d1f7      	bne.n	80094be <_dtoa_r+0x6fe>
 80094ce:	9a07      	ldr	r2, [sp, #28]
 80094d0:	9900      	ldr	r1, [sp, #0]
 80094d2:	3201      	adds	r2, #1
 80094d4:	9207      	str	r2, [sp, #28]
 80094d6:	2230      	movs	r2, #48	; 0x30
 80094d8:	700a      	strb	r2, [r1, #0]
 80094da:	781a      	ldrb	r2, [r3, #0]
 80094dc:	3201      	adds	r2, #1
 80094de:	701a      	strb	r2, [r3, #0]
 80094e0:	e78c      	b.n	80093fc <_dtoa_r+0x63c>
 80094e2:	4b7f      	ldr	r3, [pc, #508]	; (80096e0 <_dtoa_r+0x920>)
 80094e4:	2200      	movs	r2, #0
 80094e6:	f7f7 f887 	bl	80005f8 <__aeabi_dmul>
 80094ea:	2200      	movs	r2, #0
 80094ec:	2300      	movs	r3, #0
 80094ee:	4606      	mov	r6, r0
 80094f0:	460f      	mov	r7, r1
 80094f2:	f7f7 fae9 	bl	8000ac8 <__aeabi_dcmpeq>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d09b      	beq.n	8009432 <_dtoa_r+0x672>
 80094fa:	e7cd      	b.n	8009498 <_dtoa_r+0x6d8>
 80094fc:	9a08      	ldr	r2, [sp, #32]
 80094fe:	2a00      	cmp	r2, #0
 8009500:	f000 80c4 	beq.w	800968c <_dtoa_r+0x8cc>
 8009504:	9a05      	ldr	r2, [sp, #20]
 8009506:	2a01      	cmp	r2, #1
 8009508:	f300 80a8 	bgt.w	800965c <_dtoa_r+0x89c>
 800950c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800950e:	2a00      	cmp	r2, #0
 8009510:	f000 80a0 	beq.w	8009654 <_dtoa_r+0x894>
 8009514:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009518:	9e06      	ldr	r6, [sp, #24]
 800951a:	4645      	mov	r5, r8
 800951c:	9a04      	ldr	r2, [sp, #16]
 800951e:	2101      	movs	r1, #1
 8009520:	441a      	add	r2, r3
 8009522:	4620      	mov	r0, r4
 8009524:	4498      	add	r8, r3
 8009526:	9204      	str	r2, [sp, #16]
 8009528:	f000 ff18 	bl	800a35c <__i2b>
 800952c:	4607      	mov	r7, r0
 800952e:	2d00      	cmp	r5, #0
 8009530:	dd0b      	ble.n	800954a <_dtoa_r+0x78a>
 8009532:	9b04      	ldr	r3, [sp, #16]
 8009534:	2b00      	cmp	r3, #0
 8009536:	dd08      	ble.n	800954a <_dtoa_r+0x78a>
 8009538:	42ab      	cmp	r3, r5
 800953a:	9a04      	ldr	r2, [sp, #16]
 800953c:	bfa8      	it	ge
 800953e:	462b      	movge	r3, r5
 8009540:	eba8 0803 	sub.w	r8, r8, r3
 8009544:	1aed      	subs	r5, r5, r3
 8009546:	1ad3      	subs	r3, r2, r3
 8009548:	9304      	str	r3, [sp, #16]
 800954a:	9b06      	ldr	r3, [sp, #24]
 800954c:	b1fb      	cbz	r3, 800958e <_dtoa_r+0x7ce>
 800954e:	9b08      	ldr	r3, [sp, #32]
 8009550:	2b00      	cmp	r3, #0
 8009552:	f000 809f 	beq.w	8009694 <_dtoa_r+0x8d4>
 8009556:	2e00      	cmp	r6, #0
 8009558:	dd11      	ble.n	800957e <_dtoa_r+0x7be>
 800955a:	4639      	mov	r1, r7
 800955c:	4632      	mov	r2, r6
 800955e:	4620      	mov	r0, r4
 8009560:	f000 ffb8 	bl	800a4d4 <__pow5mult>
 8009564:	465a      	mov	r2, fp
 8009566:	4601      	mov	r1, r0
 8009568:	4607      	mov	r7, r0
 800956a:	4620      	mov	r0, r4
 800956c:	f000 ff0c 	bl	800a388 <__multiply>
 8009570:	4659      	mov	r1, fp
 8009572:	9007      	str	r0, [sp, #28]
 8009574:	4620      	mov	r0, r4
 8009576:	f000 fdeb 	bl	800a150 <_Bfree>
 800957a:	9b07      	ldr	r3, [sp, #28]
 800957c:	469b      	mov	fp, r3
 800957e:	9b06      	ldr	r3, [sp, #24]
 8009580:	1b9a      	subs	r2, r3, r6
 8009582:	d004      	beq.n	800958e <_dtoa_r+0x7ce>
 8009584:	4659      	mov	r1, fp
 8009586:	4620      	mov	r0, r4
 8009588:	f000 ffa4 	bl	800a4d4 <__pow5mult>
 800958c:	4683      	mov	fp, r0
 800958e:	2101      	movs	r1, #1
 8009590:	4620      	mov	r0, r4
 8009592:	f000 fee3 	bl	800a35c <__i2b>
 8009596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009598:	2b00      	cmp	r3, #0
 800959a:	4606      	mov	r6, r0
 800959c:	dd7c      	ble.n	8009698 <_dtoa_r+0x8d8>
 800959e:	461a      	mov	r2, r3
 80095a0:	4601      	mov	r1, r0
 80095a2:	4620      	mov	r0, r4
 80095a4:	f000 ff96 	bl	800a4d4 <__pow5mult>
 80095a8:	9b05      	ldr	r3, [sp, #20]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	4606      	mov	r6, r0
 80095ae:	dd76      	ble.n	800969e <_dtoa_r+0x8de>
 80095b0:	2300      	movs	r3, #0
 80095b2:	9306      	str	r3, [sp, #24]
 80095b4:	6933      	ldr	r3, [r6, #16]
 80095b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095ba:	6918      	ldr	r0, [r3, #16]
 80095bc:	f000 fe7e 	bl	800a2bc <__hi0bits>
 80095c0:	f1c0 0020 	rsb	r0, r0, #32
 80095c4:	9b04      	ldr	r3, [sp, #16]
 80095c6:	4418      	add	r0, r3
 80095c8:	f010 001f 	ands.w	r0, r0, #31
 80095cc:	f000 8086 	beq.w	80096dc <_dtoa_r+0x91c>
 80095d0:	f1c0 0320 	rsb	r3, r0, #32
 80095d4:	2b04      	cmp	r3, #4
 80095d6:	dd7f      	ble.n	80096d8 <_dtoa_r+0x918>
 80095d8:	f1c0 001c 	rsb	r0, r0, #28
 80095dc:	9b04      	ldr	r3, [sp, #16]
 80095de:	4403      	add	r3, r0
 80095e0:	4480      	add	r8, r0
 80095e2:	4405      	add	r5, r0
 80095e4:	9304      	str	r3, [sp, #16]
 80095e6:	f1b8 0f00 	cmp.w	r8, #0
 80095ea:	dd05      	ble.n	80095f8 <_dtoa_r+0x838>
 80095ec:	4659      	mov	r1, fp
 80095ee:	4642      	mov	r2, r8
 80095f0:	4620      	mov	r0, r4
 80095f2:	f000 ffc9 	bl	800a588 <__lshift>
 80095f6:	4683      	mov	fp, r0
 80095f8:	9b04      	ldr	r3, [sp, #16]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	dd05      	ble.n	800960a <_dtoa_r+0x84a>
 80095fe:	4631      	mov	r1, r6
 8009600:	461a      	mov	r2, r3
 8009602:	4620      	mov	r0, r4
 8009604:	f000 ffc0 	bl	800a588 <__lshift>
 8009608:	4606      	mov	r6, r0
 800960a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800960c:	2b00      	cmp	r3, #0
 800960e:	d069      	beq.n	80096e4 <_dtoa_r+0x924>
 8009610:	4631      	mov	r1, r6
 8009612:	4658      	mov	r0, fp
 8009614:	f001 f824 	bl	800a660 <__mcmp>
 8009618:	2800      	cmp	r0, #0
 800961a:	da63      	bge.n	80096e4 <_dtoa_r+0x924>
 800961c:	2300      	movs	r3, #0
 800961e:	4659      	mov	r1, fp
 8009620:	220a      	movs	r2, #10
 8009622:	4620      	mov	r0, r4
 8009624:	f000 fdb6 	bl	800a194 <__multadd>
 8009628:	9b08      	ldr	r3, [sp, #32]
 800962a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800962e:	4683      	mov	fp, r0
 8009630:	2b00      	cmp	r3, #0
 8009632:	f000 818f 	beq.w	8009954 <_dtoa_r+0xb94>
 8009636:	4639      	mov	r1, r7
 8009638:	2300      	movs	r3, #0
 800963a:	220a      	movs	r2, #10
 800963c:	4620      	mov	r0, r4
 800963e:	f000 fda9 	bl	800a194 <__multadd>
 8009642:	f1b9 0f00 	cmp.w	r9, #0
 8009646:	4607      	mov	r7, r0
 8009648:	f300 808e 	bgt.w	8009768 <_dtoa_r+0x9a8>
 800964c:	9b05      	ldr	r3, [sp, #20]
 800964e:	2b02      	cmp	r3, #2
 8009650:	dc50      	bgt.n	80096f4 <_dtoa_r+0x934>
 8009652:	e089      	b.n	8009768 <_dtoa_r+0x9a8>
 8009654:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009656:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800965a:	e75d      	b.n	8009518 <_dtoa_r+0x758>
 800965c:	9b01      	ldr	r3, [sp, #4]
 800965e:	1e5e      	subs	r6, r3, #1
 8009660:	9b06      	ldr	r3, [sp, #24]
 8009662:	42b3      	cmp	r3, r6
 8009664:	bfbf      	itttt	lt
 8009666:	9b06      	ldrlt	r3, [sp, #24]
 8009668:	9606      	strlt	r6, [sp, #24]
 800966a:	1af2      	sublt	r2, r6, r3
 800966c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800966e:	bfb6      	itet	lt
 8009670:	189b      	addlt	r3, r3, r2
 8009672:	1b9e      	subge	r6, r3, r6
 8009674:	930d      	strlt	r3, [sp, #52]	; 0x34
 8009676:	9b01      	ldr	r3, [sp, #4]
 8009678:	bfb8      	it	lt
 800967a:	2600      	movlt	r6, #0
 800967c:	2b00      	cmp	r3, #0
 800967e:	bfb5      	itete	lt
 8009680:	eba8 0503 	sublt.w	r5, r8, r3
 8009684:	9b01      	ldrge	r3, [sp, #4]
 8009686:	2300      	movlt	r3, #0
 8009688:	4645      	movge	r5, r8
 800968a:	e747      	b.n	800951c <_dtoa_r+0x75c>
 800968c:	9e06      	ldr	r6, [sp, #24]
 800968e:	9f08      	ldr	r7, [sp, #32]
 8009690:	4645      	mov	r5, r8
 8009692:	e74c      	b.n	800952e <_dtoa_r+0x76e>
 8009694:	9a06      	ldr	r2, [sp, #24]
 8009696:	e775      	b.n	8009584 <_dtoa_r+0x7c4>
 8009698:	9b05      	ldr	r3, [sp, #20]
 800969a:	2b01      	cmp	r3, #1
 800969c:	dc18      	bgt.n	80096d0 <_dtoa_r+0x910>
 800969e:	9b02      	ldr	r3, [sp, #8]
 80096a0:	b9b3      	cbnz	r3, 80096d0 <_dtoa_r+0x910>
 80096a2:	9b03      	ldr	r3, [sp, #12]
 80096a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096a8:	b9a3      	cbnz	r3, 80096d4 <_dtoa_r+0x914>
 80096aa:	9b03      	ldr	r3, [sp, #12]
 80096ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80096b0:	0d1b      	lsrs	r3, r3, #20
 80096b2:	051b      	lsls	r3, r3, #20
 80096b4:	b12b      	cbz	r3, 80096c2 <_dtoa_r+0x902>
 80096b6:	9b04      	ldr	r3, [sp, #16]
 80096b8:	3301      	adds	r3, #1
 80096ba:	9304      	str	r3, [sp, #16]
 80096bc:	f108 0801 	add.w	r8, r8, #1
 80096c0:	2301      	movs	r3, #1
 80096c2:	9306      	str	r3, [sp, #24]
 80096c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f47f af74 	bne.w	80095b4 <_dtoa_r+0x7f4>
 80096cc:	2001      	movs	r0, #1
 80096ce:	e779      	b.n	80095c4 <_dtoa_r+0x804>
 80096d0:	2300      	movs	r3, #0
 80096d2:	e7f6      	b.n	80096c2 <_dtoa_r+0x902>
 80096d4:	9b02      	ldr	r3, [sp, #8]
 80096d6:	e7f4      	b.n	80096c2 <_dtoa_r+0x902>
 80096d8:	d085      	beq.n	80095e6 <_dtoa_r+0x826>
 80096da:	4618      	mov	r0, r3
 80096dc:	301c      	adds	r0, #28
 80096de:	e77d      	b.n	80095dc <_dtoa_r+0x81c>
 80096e0:	40240000 	.word	0x40240000
 80096e4:	9b01      	ldr	r3, [sp, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	dc38      	bgt.n	800975c <_dtoa_r+0x99c>
 80096ea:	9b05      	ldr	r3, [sp, #20]
 80096ec:	2b02      	cmp	r3, #2
 80096ee:	dd35      	ble.n	800975c <_dtoa_r+0x99c>
 80096f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80096f4:	f1b9 0f00 	cmp.w	r9, #0
 80096f8:	d10d      	bne.n	8009716 <_dtoa_r+0x956>
 80096fa:	4631      	mov	r1, r6
 80096fc:	464b      	mov	r3, r9
 80096fe:	2205      	movs	r2, #5
 8009700:	4620      	mov	r0, r4
 8009702:	f000 fd47 	bl	800a194 <__multadd>
 8009706:	4601      	mov	r1, r0
 8009708:	4606      	mov	r6, r0
 800970a:	4658      	mov	r0, fp
 800970c:	f000 ffa8 	bl	800a660 <__mcmp>
 8009710:	2800      	cmp	r0, #0
 8009712:	f73f adbd 	bgt.w	8009290 <_dtoa_r+0x4d0>
 8009716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009718:	9d00      	ldr	r5, [sp, #0]
 800971a:	ea6f 0a03 	mvn.w	sl, r3
 800971e:	f04f 0800 	mov.w	r8, #0
 8009722:	4631      	mov	r1, r6
 8009724:	4620      	mov	r0, r4
 8009726:	f000 fd13 	bl	800a150 <_Bfree>
 800972a:	2f00      	cmp	r7, #0
 800972c:	f43f aeb4 	beq.w	8009498 <_dtoa_r+0x6d8>
 8009730:	f1b8 0f00 	cmp.w	r8, #0
 8009734:	d005      	beq.n	8009742 <_dtoa_r+0x982>
 8009736:	45b8      	cmp	r8, r7
 8009738:	d003      	beq.n	8009742 <_dtoa_r+0x982>
 800973a:	4641      	mov	r1, r8
 800973c:	4620      	mov	r0, r4
 800973e:	f000 fd07 	bl	800a150 <_Bfree>
 8009742:	4639      	mov	r1, r7
 8009744:	4620      	mov	r0, r4
 8009746:	f000 fd03 	bl	800a150 <_Bfree>
 800974a:	e6a5      	b.n	8009498 <_dtoa_r+0x6d8>
 800974c:	2600      	movs	r6, #0
 800974e:	4637      	mov	r7, r6
 8009750:	e7e1      	b.n	8009716 <_dtoa_r+0x956>
 8009752:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009754:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009758:	4637      	mov	r7, r6
 800975a:	e599      	b.n	8009290 <_dtoa_r+0x4d0>
 800975c:	9b08      	ldr	r3, [sp, #32]
 800975e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009762:	2b00      	cmp	r3, #0
 8009764:	f000 80fd 	beq.w	8009962 <_dtoa_r+0xba2>
 8009768:	2d00      	cmp	r5, #0
 800976a:	dd05      	ble.n	8009778 <_dtoa_r+0x9b8>
 800976c:	4639      	mov	r1, r7
 800976e:	462a      	mov	r2, r5
 8009770:	4620      	mov	r0, r4
 8009772:	f000 ff09 	bl	800a588 <__lshift>
 8009776:	4607      	mov	r7, r0
 8009778:	9b06      	ldr	r3, [sp, #24]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d05c      	beq.n	8009838 <_dtoa_r+0xa78>
 800977e:	6879      	ldr	r1, [r7, #4]
 8009780:	4620      	mov	r0, r4
 8009782:	f000 fca5 	bl	800a0d0 <_Balloc>
 8009786:	4605      	mov	r5, r0
 8009788:	b928      	cbnz	r0, 8009796 <_dtoa_r+0x9d6>
 800978a:	4b80      	ldr	r3, [pc, #512]	; (800998c <_dtoa_r+0xbcc>)
 800978c:	4602      	mov	r2, r0
 800978e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009792:	f7ff bb2e 	b.w	8008df2 <_dtoa_r+0x32>
 8009796:	693a      	ldr	r2, [r7, #16]
 8009798:	3202      	adds	r2, #2
 800979a:	0092      	lsls	r2, r2, #2
 800979c:	f107 010c 	add.w	r1, r7, #12
 80097a0:	300c      	adds	r0, #12
 80097a2:	f000 fc87 	bl	800a0b4 <memcpy>
 80097a6:	2201      	movs	r2, #1
 80097a8:	4629      	mov	r1, r5
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 feec 	bl	800a588 <__lshift>
 80097b0:	9b00      	ldr	r3, [sp, #0]
 80097b2:	3301      	adds	r3, #1
 80097b4:	9301      	str	r3, [sp, #4]
 80097b6:	9b00      	ldr	r3, [sp, #0]
 80097b8:	444b      	add	r3, r9
 80097ba:	9307      	str	r3, [sp, #28]
 80097bc:	9b02      	ldr	r3, [sp, #8]
 80097be:	f003 0301 	and.w	r3, r3, #1
 80097c2:	46b8      	mov	r8, r7
 80097c4:	9306      	str	r3, [sp, #24]
 80097c6:	4607      	mov	r7, r0
 80097c8:	9b01      	ldr	r3, [sp, #4]
 80097ca:	4631      	mov	r1, r6
 80097cc:	3b01      	subs	r3, #1
 80097ce:	4658      	mov	r0, fp
 80097d0:	9302      	str	r3, [sp, #8]
 80097d2:	f7ff fa67 	bl	8008ca4 <quorem>
 80097d6:	4603      	mov	r3, r0
 80097d8:	3330      	adds	r3, #48	; 0x30
 80097da:	9004      	str	r0, [sp, #16]
 80097dc:	4641      	mov	r1, r8
 80097de:	4658      	mov	r0, fp
 80097e0:	9308      	str	r3, [sp, #32]
 80097e2:	f000 ff3d 	bl	800a660 <__mcmp>
 80097e6:	463a      	mov	r2, r7
 80097e8:	4681      	mov	r9, r0
 80097ea:	4631      	mov	r1, r6
 80097ec:	4620      	mov	r0, r4
 80097ee:	f000 ff53 	bl	800a698 <__mdiff>
 80097f2:	68c2      	ldr	r2, [r0, #12]
 80097f4:	9b08      	ldr	r3, [sp, #32]
 80097f6:	4605      	mov	r5, r0
 80097f8:	bb02      	cbnz	r2, 800983c <_dtoa_r+0xa7c>
 80097fa:	4601      	mov	r1, r0
 80097fc:	4658      	mov	r0, fp
 80097fe:	f000 ff2f 	bl	800a660 <__mcmp>
 8009802:	9b08      	ldr	r3, [sp, #32]
 8009804:	4602      	mov	r2, r0
 8009806:	4629      	mov	r1, r5
 8009808:	4620      	mov	r0, r4
 800980a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800980e:	f000 fc9f 	bl	800a150 <_Bfree>
 8009812:	9b05      	ldr	r3, [sp, #20]
 8009814:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009816:	9d01      	ldr	r5, [sp, #4]
 8009818:	ea43 0102 	orr.w	r1, r3, r2
 800981c:	9b06      	ldr	r3, [sp, #24]
 800981e:	430b      	orrs	r3, r1
 8009820:	9b08      	ldr	r3, [sp, #32]
 8009822:	d10d      	bne.n	8009840 <_dtoa_r+0xa80>
 8009824:	2b39      	cmp	r3, #57	; 0x39
 8009826:	d029      	beq.n	800987c <_dtoa_r+0xabc>
 8009828:	f1b9 0f00 	cmp.w	r9, #0
 800982c:	dd01      	ble.n	8009832 <_dtoa_r+0xa72>
 800982e:	9b04      	ldr	r3, [sp, #16]
 8009830:	3331      	adds	r3, #49	; 0x31
 8009832:	9a02      	ldr	r2, [sp, #8]
 8009834:	7013      	strb	r3, [r2, #0]
 8009836:	e774      	b.n	8009722 <_dtoa_r+0x962>
 8009838:	4638      	mov	r0, r7
 800983a:	e7b9      	b.n	80097b0 <_dtoa_r+0x9f0>
 800983c:	2201      	movs	r2, #1
 800983e:	e7e2      	b.n	8009806 <_dtoa_r+0xa46>
 8009840:	f1b9 0f00 	cmp.w	r9, #0
 8009844:	db06      	blt.n	8009854 <_dtoa_r+0xa94>
 8009846:	9905      	ldr	r1, [sp, #20]
 8009848:	ea41 0909 	orr.w	r9, r1, r9
 800984c:	9906      	ldr	r1, [sp, #24]
 800984e:	ea59 0101 	orrs.w	r1, r9, r1
 8009852:	d120      	bne.n	8009896 <_dtoa_r+0xad6>
 8009854:	2a00      	cmp	r2, #0
 8009856:	ddec      	ble.n	8009832 <_dtoa_r+0xa72>
 8009858:	4659      	mov	r1, fp
 800985a:	2201      	movs	r2, #1
 800985c:	4620      	mov	r0, r4
 800985e:	9301      	str	r3, [sp, #4]
 8009860:	f000 fe92 	bl	800a588 <__lshift>
 8009864:	4631      	mov	r1, r6
 8009866:	4683      	mov	fp, r0
 8009868:	f000 fefa 	bl	800a660 <__mcmp>
 800986c:	2800      	cmp	r0, #0
 800986e:	9b01      	ldr	r3, [sp, #4]
 8009870:	dc02      	bgt.n	8009878 <_dtoa_r+0xab8>
 8009872:	d1de      	bne.n	8009832 <_dtoa_r+0xa72>
 8009874:	07da      	lsls	r2, r3, #31
 8009876:	d5dc      	bpl.n	8009832 <_dtoa_r+0xa72>
 8009878:	2b39      	cmp	r3, #57	; 0x39
 800987a:	d1d8      	bne.n	800982e <_dtoa_r+0xa6e>
 800987c:	9a02      	ldr	r2, [sp, #8]
 800987e:	2339      	movs	r3, #57	; 0x39
 8009880:	7013      	strb	r3, [r2, #0]
 8009882:	462b      	mov	r3, r5
 8009884:	461d      	mov	r5, r3
 8009886:	3b01      	subs	r3, #1
 8009888:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800988c:	2a39      	cmp	r2, #57	; 0x39
 800988e:	d050      	beq.n	8009932 <_dtoa_r+0xb72>
 8009890:	3201      	adds	r2, #1
 8009892:	701a      	strb	r2, [r3, #0]
 8009894:	e745      	b.n	8009722 <_dtoa_r+0x962>
 8009896:	2a00      	cmp	r2, #0
 8009898:	dd03      	ble.n	80098a2 <_dtoa_r+0xae2>
 800989a:	2b39      	cmp	r3, #57	; 0x39
 800989c:	d0ee      	beq.n	800987c <_dtoa_r+0xabc>
 800989e:	3301      	adds	r3, #1
 80098a0:	e7c7      	b.n	8009832 <_dtoa_r+0xa72>
 80098a2:	9a01      	ldr	r2, [sp, #4]
 80098a4:	9907      	ldr	r1, [sp, #28]
 80098a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80098aa:	428a      	cmp	r2, r1
 80098ac:	d02a      	beq.n	8009904 <_dtoa_r+0xb44>
 80098ae:	4659      	mov	r1, fp
 80098b0:	2300      	movs	r3, #0
 80098b2:	220a      	movs	r2, #10
 80098b4:	4620      	mov	r0, r4
 80098b6:	f000 fc6d 	bl	800a194 <__multadd>
 80098ba:	45b8      	cmp	r8, r7
 80098bc:	4683      	mov	fp, r0
 80098be:	f04f 0300 	mov.w	r3, #0
 80098c2:	f04f 020a 	mov.w	r2, #10
 80098c6:	4641      	mov	r1, r8
 80098c8:	4620      	mov	r0, r4
 80098ca:	d107      	bne.n	80098dc <_dtoa_r+0xb1c>
 80098cc:	f000 fc62 	bl	800a194 <__multadd>
 80098d0:	4680      	mov	r8, r0
 80098d2:	4607      	mov	r7, r0
 80098d4:	9b01      	ldr	r3, [sp, #4]
 80098d6:	3301      	adds	r3, #1
 80098d8:	9301      	str	r3, [sp, #4]
 80098da:	e775      	b.n	80097c8 <_dtoa_r+0xa08>
 80098dc:	f000 fc5a 	bl	800a194 <__multadd>
 80098e0:	4639      	mov	r1, r7
 80098e2:	4680      	mov	r8, r0
 80098e4:	2300      	movs	r3, #0
 80098e6:	220a      	movs	r2, #10
 80098e8:	4620      	mov	r0, r4
 80098ea:	f000 fc53 	bl	800a194 <__multadd>
 80098ee:	4607      	mov	r7, r0
 80098f0:	e7f0      	b.n	80098d4 <_dtoa_r+0xb14>
 80098f2:	f1b9 0f00 	cmp.w	r9, #0
 80098f6:	9a00      	ldr	r2, [sp, #0]
 80098f8:	bfcc      	ite	gt
 80098fa:	464d      	movgt	r5, r9
 80098fc:	2501      	movle	r5, #1
 80098fe:	4415      	add	r5, r2
 8009900:	f04f 0800 	mov.w	r8, #0
 8009904:	4659      	mov	r1, fp
 8009906:	2201      	movs	r2, #1
 8009908:	4620      	mov	r0, r4
 800990a:	9301      	str	r3, [sp, #4]
 800990c:	f000 fe3c 	bl	800a588 <__lshift>
 8009910:	4631      	mov	r1, r6
 8009912:	4683      	mov	fp, r0
 8009914:	f000 fea4 	bl	800a660 <__mcmp>
 8009918:	2800      	cmp	r0, #0
 800991a:	dcb2      	bgt.n	8009882 <_dtoa_r+0xac2>
 800991c:	d102      	bne.n	8009924 <_dtoa_r+0xb64>
 800991e:	9b01      	ldr	r3, [sp, #4]
 8009920:	07db      	lsls	r3, r3, #31
 8009922:	d4ae      	bmi.n	8009882 <_dtoa_r+0xac2>
 8009924:	462b      	mov	r3, r5
 8009926:	461d      	mov	r5, r3
 8009928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800992c:	2a30      	cmp	r2, #48	; 0x30
 800992e:	d0fa      	beq.n	8009926 <_dtoa_r+0xb66>
 8009930:	e6f7      	b.n	8009722 <_dtoa_r+0x962>
 8009932:	9a00      	ldr	r2, [sp, #0]
 8009934:	429a      	cmp	r2, r3
 8009936:	d1a5      	bne.n	8009884 <_dtoa_r+0xac4>
 8009938:	f10a 0a01 	add.w	sl, sl, #1
 800993c:	2331      	movs	r3, #49	; 0x31
 800993e:	e779      	b.n	8009834 <_dtoa_r+0xa74>
 8009940:	4b13      	ldr	r3, [pc, #76]	; (8009990 <_dtoa_r+0xbd0>)
 8009942:	f7ff baaf 	b.w	8008ea4 <_dtoa_r+0xe4>
 8009946:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009948:	2b00      	cmp	r3, #0
 800994a:	f47f aa86 	bne.w	8008e5a <_dtoa_r+0x9a>
 800994e:	4b11      	ldr	r3, [pc, #68]	; (8009994 <_dtoa_r+0xbd4>)
 8009950:	f7ff baa8 	b.w	8008ea4 <_dtoa_r+0xe4>
 8009954:	f1b9 0f00 	cmp.w	r9, #0
 8009958:	dc03      	bgt.n	8009962 <_dtoa_r+0xba2>
 800995a:	9b05      	ldr	r3, [sp, #20]
 800995c:	2b02      	cmp	r3, #2
 800995e:	f73f aec9 	bgt.w	80096f4 <_dtoa_r+0x934>
 8009962:	9d00      	ldr	r5, [sp, #0]
 8009964:	4631      	mov	r1, r6
 8009966:	4658      	mov	r0, fp
 8009968:	f7ff f99c 	bl	8008ca4 <quorem>
 800996c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009970:	f805 3b01 	strb.w	r3, [r5], #1
 8009974:	9a00      	ldr	r2, [sp, #0]
 8009976:	1aaa      	subs	r2, r5, r2
 8009978:	4591      	cmp	r9, r2
 800997a:	ddba      	ble.n	80098f2 <_dtoa_r+0xb32>
 800997c:	4659      	mov	r1, fp
 800997e:	2300      	movs	r3, #0
 8009980:	220a      	movs	r2, #10
 8009982:	4620      	mov	r0, r4
 8009984:	f000 fc06 	bl	800a194 <__multadd>
 8009988:	4683      	mov	fp, r0
 800998a:	e7eb      	b.n	8009964 <_dtoa_r+0xba4>
 800998c:	0800edac 	.word	0x0800edac
 8009990:	0800ebac 	.word	0x0800ebac
 8009994:	0800ed29 	.word	0x0800ed29

08009998 <rshift>:
 8009998:	6903      	ldr	r3, [r0, #16]
 800999a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800999e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099a2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80099a6:	f100 0414 	add.w	r4, r0, #20
 80099aa:	dd45      	ble.n	8009a38 <rshift+0xa0>
 80099ac:	f011 011f 	ands.w	r1, r1, #31
 80099b0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80099b4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80099b8:	d10c      	bne.n	80099d4 <rshift+0x3c>
 80099ba:	f100 0710 	add.w	r7, r0, #16
 80099be:	4629      	mov	r1, r5
 80099c0:	42b1      	cmp	r1, r6
 80099c2:	d334      	bcc.n	8009a2e <rshift+0x96>
 80099c4:	1a9b      	subs	r3, r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	1eea      	subs	r2, r5, #3
 80099ca:	4296      	cmp	r6, r2
 80099cc:	bf38      	it	cc
 80099ce:	2300      	movcc	r3, #0
 80099d0:	4423      	add	r3, r4
 80099d2:	e015      	b.n	8009a00 <rshift+0x68>
 80099d4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80099d8:	f1c1 0820 	rsb	r8, r1, #32
 80099dc:	40cf      	lsrs	r7, r1
 80099de:	f105 0e04 	add.w	lr, r5, #4
 80099e2:	46a1      	mov	r9, r4
 80099e4:	4576      	cmp	r6, lr
 80099e6:	46f4      	mov	ip, lr
 80099e8:	d815      	bhi.n	8009a16 <rshift+0x7e>
 80099ea:	1a9b      	subs	r3, r3, r2
 80099ec:	009a      	lsls	r2, r3, #2
 80099ee:	3a04      	subs	r2, #4
 80099f0:	3501      	adds	r5, #1
 80099f2:	42ae      	cmp	r6, r5
 80099f4:	bf38      	it	cc
 80099f6:	2200      	movcc	r2, #0
 80099f8:	18a3      	adds	r3, r4, r2
 80099fa:	50a7      	str	r7, [r4, r2]
 80099fc:	b107      	cbz	r7, 8009a00 <rshift+0x68>
 80099fe:	3304      	adds	r3, #4
 8009a00:	1b1a      	subs	r2, r3, r4
 8009a02:	42a3      	cmp	r3, r4
 8009a04:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a08:	bf08      	it	eq
 8009a0a:	2300      	moveq	r3, #0
 8009a0c:	6102      	str	r2, [r0, #16]
 8009a0e:	bf08      	it	eq
 8009a10:	6143      	streq	r3, [r0, #20]
 8009a12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a16:	f8dc c000 	ldr.w	ip, [ip]
 8009a1a:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a1e:	ea4c 0707 	orr.w	r7, ip, r7
 8009a22:	f849 7b04 	str.w	r7, [r9], #4
 8009a26:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a2a:	40cf      	lsrs	r7, r1
 8009a2c:	e7da      	b.n	80099e4 <rshift+0x4c>
 8009a2e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a32:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a36:	e7c3      	b.n	80099c0 <rshift+0x28>
 8009a38:	4623      	mov	r3, r4
 8009a3a:	e7e1      	b.n	8009a00 <rshift+0x68>

08009a3c <__hexdig_fun>:
 8009a3c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009a40:	2b09      	cmp	r3, #9
 8009a42:	d802      	bhi.n	8009a4a <__hexdig_fun+0xe>
 8009a44:	3820      	subs	r0, #32
 8009a46:	b2c0      	uxtb	r0, r0
 8009a48:	4770      	bx	lr
 8009a4a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009a4e:	2b05      	cmp	r3, #5
 8009a50:	d801      	bhi.n	8009a56 <__hexdig_fun+0x1a>
 8009a52:	3847      	subs	r0, #71	; 0x47
 8009a54:	e7f7      	b.n	8009a46 <__hexdig_fun+0xa>
 8009a56:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009a5a:	2b05      	cmp	r3, #5
 8009a5c:	d801      	bhi.n	8009a62 <__hexdig_fun+0x26>
 8009a5e:	3827      	subs	r0, #39	; 0x27
 8009a60:	e7f1      	b.n	8009a46 <__hexdig_fun+0xa>
 8009a62:	2000      	movs	r0, #0
 8009a64:	4770      	bx	lr
	...

08009a68 <__gethex>:
 8009a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a6c:	ed2d 8b02 	vpush	{d8}
 8009a70:	b089      	sub	sp, #36	; 0x24
 8009a72:	ee08 0a10 	vmov	s16, r0
 8009a76:	9304      	str	r3, [sp, #16]
 8009a78:	4bbc      	ldr	r3, [pc, #752]	; (8009d6c <__gethex+0x304>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	9301      	str	r3, [sp, #4]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	468b      	mov	fp, r1
 8009a82:	4690      	mov	r8, r2
 8009a84:	f7f6 fba4 	bl	80001d0 <strlen>
 8009a88:	9b01      	ldr	r3, [sp, #4]
 8009a8a:	f8db 2000 	ldr.w	r2, [fp]
 8009a8e:	4403      	add	r3, r0
 8009a90:	4682      	mov	sl, r0
 8009a92:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009a96:	9305      	str	r3, [sp, #20]
 8009a98:	1c93      	adds	r3, r2, #2
 8009a9a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009a9e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009aa2:	32fe      	adds	r2, #254	; 0xfe
 8009aa4:	18d1      	adds	r1, r2, r3
 8009aa6:	461f      	mov	r7, r3
 8009aa8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009aac:	9100      	str	r1, [sp, #0]
 8009aae:	2830      	cmp	r0, #48	; 0x30
 8009ab0:	d0f8      	beq.n	8009aa4 <__gethex+0x3c>
 8009ab2:	f7ff ffc3 	bl	8009a3c <__hexdig_fun>
 8009ab6:	4604      	mov	r4, r0
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	d13a      	bne.n	8009b32 <__gethex+0xca>
 8009abc:	9901      	ldr	r1, [sp, #4]
 8009abe:	4652      	mov	r2, sl
 8009ac0:	4638      	mov	r0, r7
 8009ac2:	f001 f9ed 	bl	800aea0 <strncmp>
 8009ac6:	4605      	mov	r5, r0
 8009ac8:	2800      	cmp	r0, #0
 8009aca:	d168      	bne.n	8009b9e <__gethex+0x136>
 8009acc:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009ad0:	eb07 060a 	add.w	r6, r7, sl
 8009ad4:	f7ff ffb2 	bl	8009a3c <__hexdig_fun>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d062      	beq.n	8009ba2 <__gethex+0x13a>
 8009adc:	4633      	mov	r3, r6
 8009ade:	7818      	ldrb	r0, [r3, #0]
 8009ae0:	2830      	cmp	r0, #48	; 0x30
 8009ae2:	461f      	mov	r7, r3
 8009ae4:	f103 0301 	add.w	r3, r3, #1
 8009ae8:	d0f9      	beq.n	8009ade <__gethex+0x76>
 8009aea:	f7ff ffa7 	bl	8009a3c <__hexdig_fun>
 8009aee:	2301      	movs	r3, #1
 8009af0:	fab0 f480 	clz	r4, r0
 8009af4:	0964      	lsrs	r4, r4, #5
 8009af6:	4635      	mov	r5, r6
 8009af8:	9300      	str	r3, [sp, #0]
 8009afa:	463a      	mov	r2, r7
 8009afc:	4616      	mov	r6, r2
 8009afe:	3201      	adds	r2, #1
 8009b00:	7830      	ldrb	r0, [r6, #0]
 8009b02:	f7ff ff9b 	bl	8009a3c <__hexdig_fun>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d1f8      	bne.n	8009afc <__gethex+0x94>
 8009b0a:	9901      	ldr	r1, [sp, #4]
 8009b0c:	4652      	mov	r2, sl
 8009b0e:	4630      	mov	r0, r6
 8009b10:	f001 f9c6 	bl	800aea0 <strncmp>
 8009b14:	b980      	cbnz	r0, 8009b38 <__gethex+0xd0>
 8009b16:	b94d      	cbnz	r5, 8009b2c <__gethex+0xc4>
 8009b18:	eb06 050a 	add.w	r5, r6, sl
 8009b1c:	462a      	mov	r2, r5
 8009b1e:	4616      	mov	r6, r2
 8009b20:	3201      	adds	r2, #1
 8009b22:	7830      	ldrb	r0, [r6, #0]
 8009b24:	f7ff ff8a 	bl	8009a3c <__hexdig_fun>
 8009b28:	2800      	cmp	r0, #0
 8009b2a:	d1f8      	bne.n	8009b1e <__gethex+0xb6>
 8009b2c:	1bad      	subs	r5, r5, r6
 8009b2e:	00ad      	lsls	r5, r5, #2
 8009b30:	e004      	b.n	8009b3c <__gethex+0xd4>
 8009b32:	2400      	movs	r4, #0
 8009b34:	4625      	mov	r5, r4
 8009b36:	e7e0      	b.n	8009afa <__gethex+0x92>
 8009b38:	2d00      	cmp	r5, #0
 8009b3a:	d1f7      	bne.n	8009b2c <__gethex+0xc4>
 8009b3c:	7833      	ldrb	r3, [r6, #0]
 8009b3e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b42:	2b50      	cmp	r3, #80	; 0x50
 8009b44:	d13b      	bne.n	8009bbe <__gethex+0x156>
 8009b46:	7873      	ldrb	r3, [r6, #1]
 8009b48:	2b2b      	cmp	r3, #43	; 0x2b
 8009b4a:	d02c      	beq.n	8009ba6 <__gethex+0x13e>
 8009b4c:	2b2d      	cmp	r3, #45	; 0x2d
 8009b4e:	d02e      	beq.n	8009bae <__gethex+0x146>
 8009b50:	1c71      	adds	r1, r6, #1
 8009b52:	f04f 0900 	mov.w	r9, #0
 8009b56:	7808      	ldrb	r0, [r1, #0]
 8009b58:	f7ff ff70 	bl	8009a3c <__hexdig_fun>
 8009b5c:	1e43      	subs	r3, r0, #1
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b18      	cmp	r3, #24
 8009b62:	d82c      	bhi.n	8009bbe <__gethex+0x156>
 8009b64:	f1a0 0210 	sub.w	r2, r0, #16
 8009b68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b6c:	f7ff ff66 	bl	8009a3c <__hexdig_fun>
 8009b70:	1e43      	subs	r3, r0, #1
 8009b72:	b2db      	uxtb	r3, r3
 8009b74:	2b18      	cmp	r3, #24
 8009b76:	d91d      	bls.n	8009bb4 <__gethex+0x14c>
 8009b78:	f1b9 0f00 	cmp.w	r9, #0
 8009b7c:	d000      	beq.n	8009b80 <__gethex+0x118>
 8009b7e:	4252      	negs	r2, r2
 8009b80:	4415      	add	r5, r2
 8009b82:	f8cb 1000 	str.w	r1, [fp]
 8009b86:	b1e4      	cbz	r4, 8009bc2 <__gethex+0x15a>
 8009b88:	9b00      	ldr	r3, [sp, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	bf14      	ite	ne
 8009b8e:	2700      	movne	r7, #0
 8009b90:	2706      	moveq	r7, #6
 8009b92:	4638      	mov	r0, r7
 8009b94:	b009      	add	sp, #36	; 0x24
 8009b96:	ecbd 8b02 	vpop	{d8}
 8009b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9e:	463e      	mov	r6, r7
 8009ba0:	4625      	mov	r5, r4
 8009ba2:	2401      	movs	r4, #1
 8009ba4:	e7ca      	b.n	8009b3c <__gethex+0xd4>
 8009ba6:	f04f 0900 	mov.w	r9, #0
 8009baa:	1cb1      	adds	r1, r6, #2
 8009bac:	e7d3      	b.n	8009b56 <__gethex+0xee>
 8009bae:	f04f 0901 	mov.w	r9, #1
 8009bb2:	e7fa      	b.n	8009baa <__gethex+0x142>
 8009bb4:	230a      	movs	r3, #10
 8009bb6:	fb03 0202 	mla	r2, r3, r2, r0
 8009bba:	3a10      	subs	r2, #16
 8009bbc:	e7d4      	b.n	8009b68 <__gethex+0x100>
 8009bbe:	4631      	mov	r1, r6
 8009bc0:	e7df      	b.n	8009b82 <__gethex+0x11a>
 8009bc2:	1bf3      	subs	r3, r6, r7
 8009bc4:	3b01      	subs	r3, #1
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	2b07      	cmp	r3, #7
 8009bca:	dc0b      	bgt.n	8009be4 <__gethex+0x17c>
 8009bcc:	ee18 0a10 	vmov	r0, s16
 8009bd0:	f000 fa7e 	bl	800a0d0 <_Balloc>
 8009bd4:	4604      	mov	r4, r0
 8009bd6:	b940      	cbnz	r0, 8009bea <__gethex+0x182>
 8009bd8:	4b65      	ldr	r3, [pc, #404]	; (8009d70 <__gethex+0x308>)
 8009bda:	4602      	mov	r2, r0
 8009bdc:	21de      	movs	r1, #222	; 0xde
 8009bde:	4865      	ldr	r0, [pc, #404]	; (8009d74 <__gethex+0x30c>)
 8009be0:	f001 f97e 	bl	800aee0 <__assert_func>
 8009be4:	3101      	adds	r1, #1
 8009be6:	105b      	asrs	r3, r3, #1
 8009be8:	e7ee      	b.n	8009bc8 <__gethex+0x160>
 8009bea:	f100 0914 	add.w	r9, r0, #20
 8009bee:	f04f 0b00 	mov.w	fp, #0
 8009bf2:	f1ca 0301 	rsb	r3, sl, #1
 8009bf6:	f8cd 9008 	str.w	r9, [sp, #8]
 8009bfa:	f8cd b000 	str.w	fp, [sp]
 8009bfe:	9306      	str	r3, [sp, #24]
 8009c00:	42b7      	cmp	r7, r6
 8009c02:	d340      	bcc.n	8009c86 <__gethex+0x21e>
 8009c04:	9802      	ldr	r0, [sp, #8]
 8009c06:	9b00      	ldr	r3, [sp, #0]
 8009c08:	f840 3b04 	str.w	r3, [r0], #4
 8009c0c:	eba0 0009 	sub.w	r0, r0, r9
 8009c10:	1080      	asrs	r0, r0, #2
 8009c12:	0146      	lsls	r6, r0, #5
 8009c14:	6120      	str	r0, [r4, #16]
 8009c16:	4618      	mov	r0, r3
 8009c18:	f000 fb50 	bl	800a2bc <__hi0bits>
 8009c1c:	1a30      	subs	r0, r6, r0
 8009c1e:	f8d8 6000 	ldr.w	r6, [r8]
 8009c22:	42b0      	cmp	r0, r6
 8009c24:	dd63      	ble.n	8009cee <__gethex+0x286>
 8009c26:	1b87      	subs	r7, r0, r6
 8009c28:	4639      	mov	r1, r7
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	f000 feea 	bl	800aa04 <__any_on>
 8009c30:	4682      	mov	sl, r0
 8009c32:	b1a8      	cbz	r0, 8009c60 <__gethex+0x1f8>
 8009c34:	1e7b      	subs	r3, r7, #1
 8009c36:	1159      	asrs	r1, r3, #5
 8009c38:	f003 021f 	and.w	r2, r3, #31
 8009c3c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009c40:	f04f 0a01 	mov.w	sl, #1
 8009c44:	fa0a f202 	lsl.w	r2, sl, r2
 8009c48:	420a      	tst	r2, r1
 8009c4a:	d009      	beq.n	8009c60 <__gethex+0x1f8>
 8009c4c:	4553      	cmp	r3, sl
 8009c4e:	dd05      	ble.n	8009c5c <__gethex+0x1f4>
 8009c50:	1eb9      	subs	r1, r7, #2
 8009c52:	4620      	mov	r0, r4
 8009c54:	f000 fed6 	bl	800aa04 <__any_on>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d145      	bne.n	8009ce8 <__gethex+0x280>
 8009c5c:	f04f 0a02 	mov.w	sl, #2
 8009c60:	4639      	mov	r1, r7
 8009c62:	4620      	mov	r0, r4
 8009c64:	f7ff fe98 	bl	8009998 <rshift>
 8009c68:	443d      	add	r5, r7
 8009c6a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c6e:	42ab      	cmp	r3, r5
 8009c70:	da4c      	bge.n	8009d0c <__gethex+0x2a4>
 8009c72:	ee18 0a10 	vmov	r0, s16
 8009c76:	4621      	mov	r1, r4
 8009c78:	f000 fa6a 	bl	800a150 <_Bfree>
 8009c7c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009c7e:	2300      	movs	r3, #0
 8009c80:	6013      	str	r3, [r2, #0]
 8009c82:	27a3      	movs	r7, #163	; 0xa3
 8009c84:	e785      	b.n	8009b92 <__gethex+0x12a>
 8009c86:	1e73      	subs	r3, r6, #1
 8009c88:	9a05      	ldr	r2, [sp, #20]
 8009c8a:	9303      	str	r3, [sp, #12]
 8009c8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d019      	beq.n	8009cc8 <__gethex+0x260>
 8009c94:	f1bb 0f20 	cmp.w	fp, #32
 8009c98:	d107      	bne.n	8009caa <__gethex+0x242>
 8009c9a:	9b02      	ldr	r3, [sp, #8]
 8009c9c:	9a00      	ldr	r2, [sp, #0]
 8009c9e:	f843 2b04 	str.w	r2, [r3], #4
 8009ca2:	9302      	str	r3, [sp, #8]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	469b      	mov	fp, r3
 8009caa:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009cae:	f7ff fec5 	bl	8009a3c <__hexdig_fun>
 8009cb2:	9b00      	ldr	r3, [sp, #0]
 8009cb4:	f000 000f 	and.w	r0, r0, #15
 8009cb8:	fa00 f00b 	lsl.w	r0, r0, fp
 8009cbc:	4303      	orrs	r3, r0
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	f10b 0b04 	add.w	fp, fp, #4
 8009cc4:	9b03      	ldr	r3, [sp, #12]
 8009cc6:	e00d      	b.n	8009ce4 <__gethex+0x27c>
 8009cc8:	9b03      	ldr	r3, [sp, #12]
 8009cca:	9a06      	ldr	r2, [sp, #24]
 8009ccc:	4413      	add	r3, r2
 8009cce:	42bb      	cmp	r3, r7
 8009cd0:	d3e0      	bcc.n	8009c94 <__gethex+0x22c>
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	9901      	ldr	r1, [sp, #4]
 8009cd6:	9307      	str	r3, [sp, #28]
 8009cd8:	4652      	mov	r2, sl
 8009cda:	f001 f8e1 	bl	800aea0 <strncmp>
 8009cde:	9b07      	ldr	r3, [sp, #28]
 8009ce0:	2800      	cmp	r0, #0
 8009ce2:	d1d7      	bne.n	8009c94 <__gethex+0x22c>
 8009ce4:	461e      	mov	r6, r3
 8009ce6:	e78b      	b.n	8009c00 <__gethex+0x198>
 8009ce8:	f04f 0a03 	mov.w	sl, #3
 8009cec:	e7b8      	b.n	8009c60 <__gethex+0x1f8>
 8009cee:	da0a      	bge.n	8009d06 <__gethex+0x29e>
 8009cf0:	1a37      	subs	r7, r6, r0
 8009cf2:	4621      	mov	r1, r4
 8009cf4:	ee18 0a10 	vmov	r0, s16
 8009cf8:	463a      	mov	r2, r7
 8009cfa:	f000 fc45 	bl	800a588 <__lshift>
 8009cfe:	1bed      	subs	r5, r5, r7
 8009d00:	4604      	mov	r4, r0
 8009d02:	f100 0914 	add.w	r9, r0, #20
 8009d06:	f04f 0a00 	mov.w	sl, #0
 8009d0a:	e7ae      	b.n	8009c6a <__gethex+0x202>
 8009d0c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009d10:	42a8      	cmp	r0, r5
 8009d12:	dd72      	ble.n	8009dfa <__gethex+0x392>
 8009d14:	1b45      	subs	r5, r0, r5
 8009d16:	42ae      	cmp	r6, r5
 8009d18:	dc36      	bgt.n	8009d88 <__gethex+0x320>
 8009d1a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d1e:	2b02      	cmp	r3, #2
 8009d20:	d02a      	beq.n	8009d78 <__gethex+0x310>
 8009d22:	2b03      	cmp	r3, #3
 8009d24:	d02c      	beq.n	8009d80 <__gethex+0x318>
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d115      	bne.n	8009d56 <__gethex+0x2ee>
 8009d2a:	42ae      	cmp	r6, r5
 8009d2c:	d113      	bne.n	8009d56 <__gethex+0x2ee>
 8009d2e:	2e01      	cmp	r6, #1
 8009d30:	d10b      	bne.n	8009d4a <__gethex+0x2e2>
 8009d32:	9a04      	ldr	r2, [sp, #16]
 8009d34:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d38:	6013      	str	r3, [r2, #0]
 8009d3a:	2301      	movs	r3, #1
 8009d3c:	6123      	str	r3, [r4, #16]
 8009d3e:	f8c9 3000 	str.w	r3, [r9]
 8009d42:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d44:	2762      	movs	r7, #98	; 0x62
 8009d46:	601c      	str	r4, [r3, #0]
 8009d48:	e723      	b.n	8009b92 <__gethex+0x12a>
 8009d4a:	1e71      	subs	r1, r6, #1
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f000 fe59 	bl	800aa04 <__any_on>
 8009d52:	2800      	cmp	r0, #0
 8009d54:	d1ed      	bne.n	8009d32 <__gethex+0x2ca>
 8009d56:	ee18 0a10 	vmov	r0, s16
 8009d5a:	4621      	mov	r1, r4
 8009d5c:	f000 f9f8 	bl	800a150 <_Bfree>
 8009d60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d62:	2300      	movs	r3, #0
 8009d64:	6013      	str	r3, [r2, #0]
 8009d66:	2750      	movs	r7, #80	; 0x50
 8009d68:	e713      	b.n	8009b92 <__gethex+0x12a>
 8009d6a:	bf00      	nop
 8009d6c:	0800ee28 	.word	0x0800ee28
 8009d70:	0800edac 	.word	0x0800edac
 8009d74:	0800edbd 	.word	0x0800edbd
 8009d78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1eb      	bne.n	8009d56 <__gethex+0x2ee>
 8009d7e:	e7d8      	b.n	8009d32 <__gethex+0x2ca>
 8009d80:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d1d5      	bne.n	8009d32 <__gethex+0x2ca>
 8009d86:	e7e6      	b.n	8009d56 <__gethex+0x2ee>
 8009d88:	1e6f      	subs	r7, r5, #1
 8009d8a:	f1ba 0f00 	cmp.w	sl, #0
 8009d8e:	d131      	bne.n	8009df4 <__gethex+0x38c>
 8009d90:	b127      	cbz	r7, 8009d9c <__gethex+0x334>
 8009d92:	4639      	mov	r1, r7
 8009d94:	4620      	mov	r0, r4
 8009d96:	f000 fe35 	bl	800aa04 <__any_on>
 8009d9a:	4682      	mov	sl, r0
 8009d9c:	117b      	asrs	r3, r7, #5
 8009d9e:	2101      	movs	r1, #1
 8009da0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009da4:	f007 071f 	and.w	r7, r7, #31
 8009da8:	fa01 f707 	lsl.w	r7, r1, r7
 8009dac:	421f      	tst	r7, r3
 8009dae:	4629      	mov	r1, r5
 8009db0:	4620      	mov	r0, r4
 8009db2:	bf18      	it	ne
 8009db4:	f04a 0a02 	orrne.w	sl, sl, #2
 8009db8:	1b76      	subs	r6, r6, r5
 8009dba:	f7ff fded 	bl	8009998 <rshift>
 8009dbe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009dc2:	2702      	movs	r7, #2
 8009dc4:	f1ba 0f00 	cmp.w	sl, #0
 8009dc8:	d048      	beq.n	8009e5c <__gethex+0x3f4>
 8009dca:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dce:	2b02      	cmp	r3, #2
 8009dd0:	d015      	beq.n	8009dfe <__gethex+0x396>
 8009dd2:	2b03      	cmp	r3, #3
 8009dd4:	d017      	beq.n	8009e06 <__gethex+0x39e>
 8009dd6:	2b01      	cmp	r3, #1
 8009dd8:	d109      	bne.n	8009dee <__gethex+0x386>
 8009dda:	f01a 0f02 	tst.w	sl, #2
 8009dde:	d006      	beq.n	8009dee <__gethex+0x386>
 8009de0:	f8d9 0000 	ldr.w	r0, [r9]
 8009de4:	ea4a 0a00 	orr.w	sl, sl, r0
 8009de8:	f01a 0f01 	tst.w	sl, #1
 8009dec:	d10e      	bne.n	8009e0c <__gethex+0x3a4>
 8009dee:	f047 0710 	orr.w	r7, r7, #16
 8009df2:	e033      	b.n	8009e5c <__gethex+0x3f4>
 8009df4:	f04f 0a01 	mov.w	sl, #1
 8009df8:	e7d0      	b.n	8009d9c <__gethex+0x334>
 8009dfa:	2701      	movs	r7, #1
 8009dfc:	e7e2      	b.n	8009dc4 <__gethex+0x35c>
 8009dfe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e00:	f1c3 0301 	rsb	r3, r3, #1
 8009e04:	9315      	str	r3, [sp, #84]	; 0x54
 8009e06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d0f0      	beq.n	8009dee <__gethex+0x386>
 8009e0c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e10:	f104 0314 	add.w	r3, r4, #20
 8009e14:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e18:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e1c:	f04f 0c00 	mov.w	ip, #0
 8009e20:	4618      	mov	r0, r3
 8009e22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e26:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e2a:	d01c      	beq.n	8009e66 <__gethex+0x3fe>
 8009e2c:	3201      	adds	r2, #1
 8009e2e:	6002      	str	r2, [r0, #0]
 8009e30:	2f02      	cmp	r7, #2
 8009e32:	f104 0314 	add.w	r3, r4, #20
 8009e36:	d13f      	bne.n	8009eb8 <__gethex+0x450>
 8009e38:	f8d8 2000 	ldr.w	r2, [r8]
 8009e3c:	3a01      	subs	r2, #1
 8009e3e:	42b2      	cmp	r2, r6
 8009e40:	d10a      	bne.n	8009e58 <__gethex+0x3f0>
 8009e42:	1171      	asrs	r1, r6, #5
 8009e44:	2201      	movs	r2, #1
 8009e46:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e4a:	f006 061f 	and.w	r6, r6, #31
 8009e4e:	fa02 f606 	lsl.w	r6, r2, r6
 8009e52:	421e      	tst	r6, r3
 8009e54:	bf18      	it	ne
 8009e56:	4617      	movne	r7, r2
 8009e58:	f047 0720 	orr.w	r7, r7, #32
 8009e5c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e5e:	601c      	str	r4, [r3, #0]
 8009e60:	9b04      	ldr	r3, [sp, #16]
 8009e62:	601d      	str	r5, [r3, #0]
 8009e64:	e695      	b.n	8009b92 <__gethex+0x12a>
 8009e66:	4299      	cmp	r1, r3
 8009e68:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e6c:	d8d8      	bhi.n	8009e20 <__gethex+0x3b8>
 8009e6e:	68a3      	ldr	r3, [r4, #8]
 8009e70:	459b      	cmp	fp, r3
 8009e72:	db19      	blt.n	8009ea8 <__gethex+0x440>
 8009e74:	6861      	ldr	r1, [r4, #4]
 8009e76:	ee18 0a10 	vmov	r0, s16
 8009e7a:	3101      	adds	r1, #1
 8009e7c:	f000 f928 	bl	800a0d0 <_Balloc>
 8009e80:	4681      	mov	r9, r0
 8009e82:	b918      	cbnz	r0, 8009e8c <__gethex+0x424>
 8009e84:	4b1a      	ldr	r3, [pc, #104]	; (8009ef0 <__gethex+0x488>)
 8009e86:	4602      	mov	r2, r0
 8009e88:	2184      	movs	r1, #132	; 0x84
 8009e8a:	e6a8      	b.n	8009bde <__gethex+0x176>
 8009e8c:	6922      	ldr	r2, [r4, #16]
 8009e8e:	3202      	adds	r2, #2
 8009e90:	f104 010c 	add.w	r1, r4, #12
 8009e94:	0092      	lsls	r2, r2, #2
 8009e96:	300c      	adds	r0, #12
 8009e98:	f000 f90c 	bl	800a0b4 <memcpy>
 8009e9c:	4621      	mov	r1, r4
 8009e9e:	ee18 0a10 	vmov	r0, s16
 8009ea2:	f000 f955 	bl	800a150 <_Bfree>
 8009ea6:	464c      	mov	r4, r9
 8009ea8:	6923      	ldr	r3, [r4, #16]
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009eb0:	6122      	str	r2, [r4, #16]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	615a      	str	r2, [r3, #20]
 8009eb6:	e7bb      	b.n	8009e30 <__gethex+0x3c8>
 8009eb8:	6922      	ldr	r2, [r4, #16]
 8009eba:	455a      	cmp	r2, fp
 8009ebc:	dd0b      	ble.n	8009ed6 <__gethex+0x46e>
 8009ebe:	2101      	movs	r1, #1
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f7ff fd69 	bl	8009998 <rshift>
 8009ec6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009eca:	3501      	adds	r5, #1
 8009ecc:	42ab      	cmp	r3, r5
 8009ece:	f6ff aed0 	blt.w	8009c72 <__gethex+0x20a>
 8009ed2:	2701      	movs	r7, #1
 8009ed4:	e7c0      	b.n	8009e58 <__gethex+0x3f0>
 8009ed6:	f016 061f 	ands.w	r6, r6, #31
 8009eda:	d0fa      	beq.n	8009ed2 <__gethex+0x46a>
 8009edc:	449a      	add	sl, r3
 8009ede:	f1c6 0620 	rsb	r6, r6, #32
 8009ee2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009ee6:	f000 f9e9 	bl	800a2bc <__hi0bits>
 8009eea:	42b0      	cmp	r0, r6
 8009eec:	dbe7      	blt.n	8009ebe <__gethex+0x456>
 8009eee:	e7f0      	b.n	8009ed2 <__gethex+0x46a>
 8009ef0:	0800edac 	.word	0x0800edac

08009ef4 <L_shift>:
 8009ef4:	f1c2 0208 	rsb	r2, r2, #8
 8009ef8:	0092      	lsls	r2, r2, #2
 8009efa:	b570      	push	{r4, r5, r6, lr}
 8009efc:	f1c2 0620 	rsb	r6, r2, #32
 8009f00:	6843      	ldr	r3, [r0, #4]
 8009f02:	6804      	ldr	r4, [r0, #0]
 8009f04:	fa03 f506 	lsl.w	r5, r3, r6
 8009f08:	432c      	orrs	r4, r5
 8009f0a:	40d3      	lsrs	r3, r2
 8009f0c:	6004      	str	r4, [r0, #0]
 8009f0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f12:	4288      	cmp	r0, r1
 8009f14:	d3f4      	bcc.n	8009f00 <L_shift+0xc>
 8009f16:	bd70      	pop	{r4, r5, r6, pc}

08009f18 <__match>:
 8009f18:	b530      	push	{r4, r5, lr}
 8009f1a:	6803      	ldr	r3, [r0, #0]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f22:	b914      	cbnz	r4, 8009f2a <__match+0x12>
 8009f24:	6003      	str	r3, [r0, #0]
 8009f26:	2001      	movs	r0, #1
 8009f28:	bd30      	pop	{r4, r5, pc}
 8009f2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009f32:	2d19      	cmp	r5, #25
 8009f34:	bf98      	it	ls
 8009f36:	3220      	addls	r2, #32
 8009f38:	42a2      	cmp	r2, r4
 8009f3a:	d0f0      	beq.n	8009f1e <__match+0x6>
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	e7f3      	b.n	8009f28 <__match+0x10>

08009f40 <__hexnan>:
 8009f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f44:	680b      	ldr	r3, [r1, #0]
 8009f46:	6801      	ldr	r1, [r0, #0]
 8009f48:	115e      	asrs	r6, r3, #5
 8009f4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f4e:	f013 031f 	ands.w	r3, r3, #31
 8009f52:	b087      	sub	sp, #28
 8009f54:	bf18      	it	ne
 8009f56:	3604      	addne	r6, #4
 8009f58:	2500      	movs	r5, #0
 8009f5a:	1f37      	subs	r7, r6, #4
 8009f5c:	4682      	mov	sl, r0
 8009f5e:	4690      	mov	r8, r2
 8009f60:	9301      	str	r3, [sp, #4]
 8009f62:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f66:	46b9      	mov	r9, r7
 8009f68:	463c      	mov	r4, r7
 8009f6a:	9502      	str	r5, [sp, #8]
 8009f6c:	46ab      	mov	fp, r5
 8009f6e:	784a      	ldrb	r2, [r1, #1]
 8009f70:	1c4b      	adds	r3, r1, #1
 8009f72:	9303      	str	r3, [sp, #12]
 8009f74:	b342      	cbz	r2, 8009fc8 <__hexnan+0x88>
 8009f76:	4610      	mov	r0, r2
 8009f78:	9105      	str	r1, [sp, #20]
 8009f7a:	9204      	str	r2, [sp, #16]
 8009f7c:	f7ff fd5e 	bl	8009a3c <__hexdig_fun>
 8009f80:	2800      	cmp	r0, #0
 8009f82:	d14f      	bne.n	800a024 <__hexnan+0xe4>
 8009f84:	9a04      	ldr	r2, [sp, #16]
 8009f86:	9905      	ldr	r1, [sp, #20]
 8009f88:	2a20      	cmp	r2, #32
 8009f8a:	d818      	bhi.n	8009fbe <__hexnan+0x7e>
 8009f8c:	9b02      	ldr	r3, [sp, #8]
 8009f8e:	459b      	cmp	fp, r3
 8009f90:	dd13      	ble.n	8009fba <__hexnan+0x7a>
 8009f92:	454c      	cmp	r4, r9
 8009f94:	d206      	bcs.n	8009fa4 <__hexnan+0x64>
 8009f96:	2d07      	cmp	r5, #7
 8009f98:	dc04      	bgt.n	8009fa4 <__hexnan+0x64>
 8009f9a:	462a      	mov	r2, r5
 8009f9c:	4649      	mov	r1, r9
 8009f9e:	4620      	mov	r0, r4
 8009fa0:	f7ff ffa8 	bl	8009ef4 <L_shift>
 8009fa4:	4544      	cmp	r4, r8
 8009fa6:	d950      	bls.n	800a04a <__hexnan+0x10a>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	f1a4 0904 	sub.w	r9, r4, #4
 8009fae:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fb2:	f8cd b008 	str.w	fp, [sp, #8]
 8009fb6:	464c      	mov	r4, r9
 8009fb8:	461d      	mov	r5, r3
 8009fba:	9903      	ldr	r1, [sp, #12]
 8009fbc:	e7d7      	b.n	8009f6e <__hexnan+0x2e>
 8009fbe:	2a29      	cmp	r2, #41	; 0x29
 8009fc0:	d156      	bne.n	800a070 <__hexnan+0x130>
 8009fc2:	3102      	adds	r1, #2
 8009fc4:	f8ca 1000 	str.w	r1, [sl]
 8009fc8:	f1bb 0f00 	cmp.w	fp, #0
 8009fcc:	d050      	beq.n	800a070 <__hexnan+0x130>
 8009fce:	454c      	cmp	r4, r9
 8009fd0:	d206      	bcs.n	8009fe0 <__hexnan+0xa0>
 8009fd2:	2d07      	cmp	r5, #7
 8009fd4:	dc04      	bgt.n	8009fe0 <__hexnan+0xa0>
 8009fd6:	462a      	mov	r2, r5
 8009fd8:	4649      	mov	r1, r9
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f7ff ff8a 	bl	8009ef4 <L_shift>
 8009fe0:	4544      	cmp	r4, r8
 8009fe2:	d934      	bls.n	800a04e <__hexnan+0x10e>
 8009fe4:	f1a8 0204 	sub.w	r2, r8, #4
 8009fe8:	4623      	mov	r3, r4
 8009fea:	f853 1b04 	ldr.w	r1, [r3], #4
 8009fee:	f842 1f04 	str.w	r1, [r2, #4]!
 8009ff2:	429f      	cmp	r7, r3
 8009ff4:	d2f9      	bcs.n	8009fea <__hexnan+0xaa>
 8009ff6:	1b3b      	subs	r3, r7, r4
 8009ff8:	f023 0303 	bic.w	r3, r3, #3
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	3401      	adds	r4, #1
 800a000:	3e03      	subs	r6, #3
 800a002:	42b4      	cmp	r4, r6
 800a004:	bf88      	it	hi
 800a006:	2304      	movhi	r3, #4
 800a008:	4443      	add	r3, r8
 800a00a:	2200      	movs	r2, #0
 800a00c:	f843 2b04 	str.w	r2, [r3], #4
 800a010:	429f      	cmp	r7, r3
 800a012:	d2fb      	bcs.n	800a00c <__hexnan+0xcc>
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	b91b      	cbnz	r3, 800a020 <__hexnan+0xe0>
 800a018:	4547      	cmp	r7, r8
 800a01a:	d127      	bne.n	800a06c <__hexnan+0x12c>
 800a01c:	2301      	movs	r3, #1
 800a01e:	603b      	str	r3, [r7, #0]
 800a020:	2005      	movs	r0, #5
 800a022:	e026      	b.n	800a072 <__hexnan+0x132>
 800a024:	3501      	adds	r5, #1
 800a026:	2d08      	cmp	r5, #8
 800a028:	f10b 0b01 	add.w	fp, fp, #1
 800a02c:	dd06      	ble.n	800a03c <__hexnan+0xfc>
 800a02e:	4544      	cmp	r4, r8
 800a030:	d9c3      	bls.n	8009fba <__hexnan+0x7a>
 800a032:	2300      	movs	r3, #0
 800a034:	f844 3c04 	str.w	r3, [r4, #-4]
 800a038:	2501      	movs	r5, #1
 800a03a:	3c04      	subs	r4, #4
 800a03c:	6822      	ldr	r2, [r4, #0]
 800a03e:	f000 000f 	and.w	r0, r0, #15
 800a042:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a046:	6022      	str	r2, [r4, #0]
 800a048:	e7b7      	b.n	8009fba <__hexnan+0x7a>
 800a04a:	2508      	movs	r5, #8
 800a04c:	e7b5      	b.n	8009fba <__hexnan+0x7a>
 800a04e:	9b01      	ldr	r3, [sp, #4]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d0df      	beq.n	800a014 <__hexnan+0xd4>
 800a054:	f04f 32ff 	mov.w	r2, #4294967295
 800a058:	f1c3 0320 	rsb	r3, r3, #32
 800a05c:	fa22 f303 	lsr.w	r3, r2, r3
 800a060:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a064:	401a      	ands	r2, r3
 800a066:	f846 2c04 	str.w	r2, [r6, #-4]
 800a06a:	e7d3      	b.n	800a014 <__hexnan+0xd4>
 800a06c:	3f04      	subs	r7, #4
 800a06e:	e7d1      	b.n	800a014 <__hexnan+0xd4>
 800a070:	2004      	movs	r0, #4
 800a072:	b007      	add	sp, #28
 800a074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a078 <_localeconv_r>:
 800a078:	4800      	ldr	r0, [pc, #0]	; (800a07c <_localeconv_r+0x4>)
 800a07a:	4770      	bx	lr
 800a07c:	2000017c 	.word	0x2000017c

0800a080 <malloc>:
 800a080:	4b02      	ldr	r3, [pc, #8]	; (800a08c <malloc+0xc>)
 800a082:	4601      	mov	r1, r0
 800a084:	6818      	ldr	r0, [r3, #0]
 800a086:	f000 bd3d 	b.w	800ab04 <_malloc_r>
 800a08a:	bf00      	nop
 800a08c:	20000024 	.word	0x20000024

0800a090 <__ascii_mbtowc>:
 800a090:	b082      	sub	sp, #8
 800a092:	b901      	cbnz	r1, 800a096 <__ascii_mbtowc+0x6>
 800a094:	a901      	add	r1, sp, #4
 800a096:	b142      	cbz	r2, 800a0aa <__ascii_mbtowc+0x1a>
 800a098:	b14b      	cbz	r3, 800a0ae <__ascii_mbtowc+0x1e>
 800a09a:	7813      	ldrb	r3, [r2, #0]
 800a09c:	600b      	str	r3, [r1, #0]
 800a09e:	7812      	ldrb	r2, [r2, #0]
 800a0a0:	1e10      	subs	r0, r2, #0
 800a0a2:	bf18      	it	ne
 800a0a4:	2001      	movne	r0, #1
 800a0a6:	b002      	add	sp, #8
 800a0a8:	4770      	bx	lr
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	e7fb      	b.n	800a0a6 <__ascii_mbtowc+0x16>
 800a0ae:	f06f 0001 	mvn.w	r0, #1
 800a0b2:	e7f8      	b.n	800a0a6 <__ascii_mbtowc+0x16>

0800a0b4 <memcpy>:
 800a0b4:	440a      	add	r2, r1
 800a0b6:	4291      	cmp	r1, r2
 800a0b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0bc:	d100      	bne.n	800a0c0 <memcpy+0xc>
 800a0be:	4770      	bx	lr
 800a0c0:	b510      	push	{r4, lr}
 800a0c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0ca:	4291      	cmp	r1, r2
 800a0cc:	d1f9      	bne.n	800a0c2 <memcpy+0xe>
 800a0ce:	bd10      	pop	{r4, pc}

0800a0d0 <_Balloc>:
 800a0d0:	b570      	push	{r4, r5, r6, lr}
 800a0d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0d4:	4604      	mov	r4, r0
 800a0d6:	460d      	mov	r5, r1
 800a0d8:	b976      	cbnz	r6, 800a0f8 <_Balloc+0x28>
 800a0da:	2010      	movs	r0, #16
 800a0dc:	f7ff ffd0 	bl	800a080 <malloc>
 800a0e0:	4602      	mov	r2, r0
 800a0e2:	6260      	str	r0, [r4, #36]	; 0x24
 800a0e4:	b920      	cbnz	r0, 800a0f0 <_Balloc+0x20>
 800a0e6:	4b18      	ldr	r3, [pc, #96]	; (800a148 <_Balloc+0x78>)
 800a0e8:	4818      	ldr	r0, [pc, #96]	; (800a14c <_Balloc+0x7c>)
 800a0ea:	2166      	movs	r1, #102	; 0x66
 800a0ec:	f000 fef8 	bl	800aee0 <__assert_func>
 800a0f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a0f4:	6006      	str	r6, [r0, #0]
 800a0f6:	60c6      	str	r6, [r0, #12]
 800a0f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a0fa:	68f3      	ldr	r3, [r6, #12]
 800a0fc:	b183      	cbz	r3, 800a120 <_Balloc+0x50>
 800a0fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a100:	68db      	ldr	r3, [r3, #12]
 800a102:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a106:	b9b8      	cbnz	r0, 800a138 <_Balloc+0x68>
 800a108:	2101      	movs	r1, #1
 800a10a:	fa01 f605 	lsl.w	r6, r1, r5
 800a10e:	1d72      	adds	r2, r6, #5
 800a110:	0092      	lsls	r2, r2, #2
 800a112:	4620      	mov	r0, r4
 800a114:	f000 fc97 	bl	800aa46 <_calloc_r>
 800a118:	b160      	cbz	r0, 800a134 <_Balloc+0x64>
 800a11a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a11e:	e00e      	b.n	800a13e <_Balloc+0x6e>
 800a120:	2221      	movs	r2, #33	; 0x21
 800a122:	2104      	movs	r1, #4
 800a124:	4620      	mov	r0, r4
 800a126:	f000 fc8e 	bl	800aa46 <_calloc_r>
 800a12a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a12c:	60f0      	str	r0, [r6, #12]
 800a12e:	68db      	ldr	r3, [r3, #12]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d1e4      	bne.n	800a0fe <_Balloc+0x2e>
 800a134:	2000      	movs	r0, #0
 800a136:	bd70      	pop	{r4, r5, r6, pc}
 800a138:	6802      	ldr	r2, [r0, #0]
 800a13a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a13e:	2300      	movs	r3, #0
 800a140:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a144:	e7f7      	b.n	800a136 <_Balloc+0x66>
 800a146:	bf00      	nop
 800a148:	0800ed36 	.word	0x0800ed36
 800a14c:	0800ee3c 	.word	0x0800ee3c

0800a150 <_Bfree>:
 800a150:	b570      	push	{r4, r5, r6, lr}
 800a152:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a154:	4605      	mov	r5, r0
 800a156:	460c      	mov	r4, r1
 800a158:	b976      	cbnz	r6, 800a178 <_Bfree+0x28>
 800a15a:	2010      	movs	r0, #16
 800a15c:	f7ff ff90 	bl	800a080 <malloc>
 800a160:	4602      	mov	r2, r0
 800a162:	6268      	str	r0, [r5, #36]	; 0x24
 800a164:	b920      	cbnz	r0, 800a170 <_Bfree+0x20>
 800a166:	4b09      	ldr	r3, [pc, #36]	; (800a18c <_Bfree+0x3c>)
 800a168:	4809      	ldr	r0, [pc, #36]	; (800a190 <_Bfree+0x40>)
 800a16a:	218a      	movs	r1, #138	; 0x8a
 800a16c:	f000 feb8 	bl	800aee0 <__assert_func>
 800a170:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a174:	6006      	str	r6, [r0, #0]
 800a176:	60c6      	str	r6, [r0, #12]
 800a178:	b13c      	cbz	r4, 800a18a <_Bfree+0x3a>
 800a17a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a17c:	6862      	ldr	r2, [r4, #4]
 800a17e:	68db      	ldr	r3, [r3, #12]
 800a180:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a184:	6021      	str	r1, [r4, #0]
 800a186:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a18a:	bd70      	pop	{r4, r5, r6, pc}
 800a18c:	0800ed36 	.word	0x0800ed36
 800a190:	0800ee3c 	.word	0x0800ee3c

0800a194 <__multadd>:
 800a194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a198:	690e      	ldr	r6, [r1, #16]
 800a19a:	4607      	mov	r7, r0
 800a19c:	4698      	mov	r8, r3
 800a19e:	460c      	mov	r4, r1
 800a1a0:	f101 0014 	add.w	r0, r1, #20
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	6805      	ldr	r5, [r0, #0]
 800a1a8:	b2a9      	uxth	r1, r5
 800a1aa:	fb02 8101 	mla	r1, r2, r1, r8
 800a1ae:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a1b2:	0c2d      	lsrs	r5, r5, #16
 800a1b4:	fb02 c505 	mla	r5, r2, r5, ip
 800a1b8:	b289      	uxth	r1, r1
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a1c0:	429e      	cmp	r6, r3
 800a1c2:	f840 1b04 	str.w	r1, [r0], #4
 800a1c6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a1ca:	dcec      	bgt.n	800a1a6 <__multadd+0x12>
 800a1cc:	f1b8 0f00 	cmp.w	r8, #0
 800a1d0:	d022      	beq.n	800a218 <__multadd+0x84>
 800a1d2:	68a3      	ldr	r3, [r4, #8]
 800a1d4:	42b3      	cmp	r3, r6
 800a1d6:	dc19      	bgt.n	800a20c <__multadd+0x78>
 800a1d8:	6861      	ldr	r1, [r4, #4]
 800a1da:	4638      	mov	r0, r7
 800a1dc:	3101      	adds	r1, #1
 800a1de:	f7ff ff77 	bl	800a0d0 <_Balloc>
 800a1e2:	4605      	mov	r5, r0
 800a1e4:	b928      	cbnz	r0, 800a1f2 <__multadd+0x5e>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	4b0d      	ldr	r3, [pc, #52]	; (800a220 <__multadd+0x8c>)
 800a1ea:	480e      	ldr	r0, [pc, #56]	; (800a224 <__multadd+0x90>)
 800a1ec:	21b5      	movs	r1, #181	; 0xb5
 800a1ee:	f000 fe77 	bl	800aee0 <__assert_func>
 800a1f2:	6922      	ldr	r2, [r4, #16]
 800a1f4:	3202      	adds	r2, #2
 800a1f6:	f104 010c 	add.w	r1, r4, #12
 800a1fa:	0092      	lsls	r2, r2, #2
 800a1fc:	300c      	adds	r0, #12
 800a1fe:	f7ff ff59 	bl	800a0b4 <memcpy>
 800a202:	4621      	mov	r1, r4
 800a204:	4638      	mov	r0, r7
 800a206:	f7ff ffa3 	bl	800a150 <_Bfree>
 800a20a:	462c      	mov	r4, r5
 800a20c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a210:	3601      	adds	r6, #1
 800a212:	f8c3 8014 	str.w	r8, [r3, #20]
 800a216:	6126      	str	r6, [r4, #16]
 800a218:	4620      	mov	r0, r4
 800a21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a21e:	bf00      	nop
 800a220:	0800edac 	.word	0x0800edac
 800a224:	0800ee3c 	.word	0x0800ee3c

0800a228 <__s2b>:
 800a228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a22c:	460c      	mov	r4, r1
 800a22e:	4615      	mov	r5, r2
 800a230:	461f      	mov	r7, r3
 800a232:	2209      	movs	r2, #9
 800a234:	3308      	adds	r3, #8
 800a236:	4606      	mov	r6, r0
 800a238:	fb93 f3f2 	sdiv	r3, r3, r2
 800a23c:	2100      	movs	r1, #0
 800a23e:	2201      	movs	r2, #1
 800a240:	429a      	cmp	r2, r3
 800a242:	db09      	blt.n	800a258 <__s2b+0x30>
 800a244:	4630      	mov	r0, r6
 800a246:	f7ff ff43 	bl	800a0d0 <_Balloc>
 800a24a:	b940      	cbnz	r0, 800a25e <__s2b+0x36>
 800a24c:	4602      	mov	r2, r0
 800a24e:	4b19      	ldr	r3, [pc, #100]	; (800a2b4 <__s2b+0x8c>)
 800a250:	4819      	ldr	r0, [pc, #100]	; (800a2b8 <__s2b+0x90>)
 800a252:	21ce      	movs	r1, #206	; 0xce
 800a254:	f000 fe44 	bl	800aee0 <__assert_func>
 800a258:	0052      	lsls	r2, r2, #1
 800a25a:	3101      	adds	r1, #1
 800a25c:	e7f0      	b.n	800a240 <__s2b+0x18>
 800a25e:	9b08      	ldr	r3, [sp, #32]
 800a260:	6143      	str	r3, [r0, #20]
 800a262:	2d09      	cmp	r5, #9
 800a264:	f04f 0301 	mov.w	r3, #1
 800a268:	6103      	str	r3, [r0, #16]
 800a26a:	dd16      	ble.n	800a29a <__s2b+0x72>
 800a26c:	f104 0909 	add.w	r9, r4, #9
 800a270:	46c8      	mov	r8, r9
 800a272:	442c      	add	r4, r5
 800a274:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a278:	4601      	mov	r1, r0
 800a27a:	3b30      	subs	r3, #48	; 0x30
 800a27c:	220a      	movs	r2, #10
 800a27e:	4630      	mov	r0, r6
 800a280:	f7ff ff88 	bl	800a194 <__multadd>
 800a284:	45a0      	cmp	r8, r4
 800a286:	d1f5      	bne.n	800a274 <__s2b+0x4c>
 800a288:	f1a5 0408 	sub.w	r4, r5, #8
 800a28c:	444c      	add	r4, r9
 800a28e:	1b2d      	subs	r5, r5, r4
 800a290:	1963      	adds	r3, r4, r5
 800a292:	42bb      	cmp	r3, r7
 800a294:	db04      	blt.n	800a2a0 <__s2b+0x78>
 800a296:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a29a:	340a      	adds	r4, #10
 800a29c:	2509      	movs	r5, #9
 800a29e:	e7f6      	b.n	800a28e <__s2b+0x66>
 800a2a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a2a4:	4601      	mov	r1, r0
 800a2a6:	3b30      	subs	r3, #48	; 0x30
 800a2a8:	220a      	movs	r2, #10
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	f7ff ff72 	bl	800a194 <__multadd>
 800a2b0:	e7ee      	b.n	800a290 <__s2b+0x68>
 800a2b2:	bf00      	nop
 800a2b4:	0800edac 	.word	0x0800edac
 800a2b8:	0800ee3c 	.word	0x0800ee3c

0800a2bc <__hi0bits>:
 800a2bc:	0c03      	lsrs	r3, r0, #16
 800a2be:	041b      	lsls	r3, r3, #16
 800a2c0:	b9d3      	cbnz	r3, 800a2f8 <__hi0bits+0x3c>
 800a2c2:	0400      	lsls	r0, r0, #16
 800a2c4:	2310      	movs	r3, #16
 800a2c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a2ca:	bf04      	itt	eq
 800a2cc:	0200      	lsleq	r0, r0, #8
 800a2ce:	3308      	addeq	r3, #8
 800a2d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a2d4:	bf04      	itt	eq
 800a2d6:	0100      	lsleq	r0, r0, #4
 800a2d8:	3304      	addeq	r3, #4
 800a2da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a2de:	bf04      	itt	eq
 800a2e0:	0080      	lsleq	r0, r0, #2
 800a2e2:	3302      	addeq	r3, #2
 800a2e4:	2800      	cmp	r0, #0
 800a2e6:	db05      	blt.n	800a2f4 <__hi0bits+0x38>
 800a2e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a2ec:	f103 0301 	add.w	r3, r3, #1
 800a2f0:	bf08      	it	eq
 800a2f2:	2320      	moveq	r3, #32
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	4770      	bx	lr
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	e7e4      	b.n	800a2c6 <__hi0bits+0xa>

0800a2fc <__lo0bits>:
 800a2fc:	6803      	ldr	r3, [r0, #0]
 800a2fe:	f013 0207 	ands.w	r2, r3, #7
 800a302:	4601      	mov	r1, r0
 800a304:	d00b      	beq.n	800a31e <__lo0bits+0x22>
 800a306:	07da      	lsls	r2, r3, #31
 800a308:	d424      	bmi.n	800a354 <__lo0bits+0x58>
 800a30a:	0798      	lsls	r0, r3, #30
 800a30c:	bf49      	itett	mi
 800a30e:	085b      	lsrmi	r3, r3, #1
 800a310:	089b      	lsrpl	r3, r3, #2
 800a312:	2001      	movmi	r0, #1
 800a314:	600b      	strmi	r3, [r1, #0]
 800a316:	bf5c      	itt	pl
 800a318:	600b      	strpl	r3, [r1, #0]
 800a31a:	2002      	movpl	r0, #2
 800a31c:	4770      	bx	lr
 800a31e:	b298      	uxth	r0, r3
 800a320:	b9b0      	cbnz	r0, 800a350 <__lo0bits+0x54>
 800a322:	0c1b      	lsrs	r3, r3, #16
 800a324:	2010      	movs	r0, #16
 800a326:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a32a:	bf04      	itt	eq
 800a32c:	0a1b      	lsreq	r3, r3, #8
 800a32e:	3008      	addeq	r0, #8
 800a330:	071a      	lsls	r2, r3, #28
 800a332:	bf04      	itt	eq
 800a334:	091b      	lsreq	r3, r3, #4
 800a336:	3004      	addeq	r0, #4
 800a338:	079a      	lsls	r2, r3, #30
 800a33a:	bf04      	itt	eq
 800a33c:	089b      	lsreq	r3, r3, #2
 800a33e:	3002      	addeq	r0, #2
 800a340:	07da      	lsls	r2, r3, #31
 800a342:	d403      	bmi.n	800a34c <__lo0bits+0x50>
 800a344:	085b      	lsrs	r3, r3, #1
 800a346:	f100 0001 	add.w	r0, r0, #1
 800a34a:	d005      	beq.n	800a358 <__lo0bits+0x5c>
 800a34c:	600b      	str	r3, [r1, #0]
 800a34e:	4770      	bx	lr
 800a350:	4610      	mov	r0, r2
 800a352:	e7e8      	b.n	800a326 <__lo0bits+0x2a>
 800a354:	2000      	movs	r0, #0
 800a356:	4770      	bx	lr
 800a358:	2020      	movs	r0, #32
 800a35a:	4770      	bx	lr

0800a35c <__i2b>:
 800a35c:	b510      	push	{r4, lr}
 800a35e:	460c      	mov	r4, r1
 800a360:	2101      	movs	r1, #1
 800a362:	f7ff feb5 	bl	800a0d0 <_Balloc>
 800a366:	4602      	mov	r2, r0
 800a368:	b928      	cbnz	r0, 800a376 <__i2b+0x1a>
 800a36a:	4b05      	ldr	r3, [pc, #20]	; (800a380 <__i2b+0x24>)
 800a36c:	4805      	ldr	r0, [pc, #20]	; (800a384 <__i2b+0x28>)
 800a36e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a372:	f000 fdb5 	bl	800aee0 <__assert_func>
 800a376:	2301      	movs	r3, #1
 800a378:	6144      	str	r4, [r0, #20]
 800a37a:	6103      	str	r3, [r0, #16]
 800a37c:	bd10      	pop	{r4, pc}
 800a37e:	bf00      	nop
 800a380:	0800edac 	.word	0x0800edac
 800a384:	0800ee3c 	.word	0x0800ee3c

0800a388 <__multiply>:
 800a388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a38c:	4614      	mov	r4, r2
 800a38e:	690a      	ldr	r2, [r1, #16]
 800a390:	6923      	ldr	r3, [r4, #16]
 800a392:	429a      	cmp	r2, r3
 800a394:	bfb8      	it	lt
 800a396:	460b      	movlt	r3, r1
 800a398:	460d      	mov	r5, r1
 800a39a:	bfbc      	itt	lt
 800a39c:	4625      	movlt	r5, r4
 800a39e:	461c      	movlt	r4, r3
 800a3a0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a3a4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a3a8:	68ab      	ldr	r3, [r5, #8]
 800a3aa:	6869      	ldr	r1, [r5, #4]
 800a3ac:	eb0a 0709 	add.w	r7, sl, r9
 800a3b0:	42bb      	cmp	r3, r7
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	bfb8      	it	lt
 800a3b6:	3101      	addlt	r1, #1
 800a3b8:	f7ff fe8a 	bl	800a0d0 <_Balloc>
 800a3bc:	b930      	cbnz	r0, 800a3cc <__multiply+0x44>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	4b42      	ldr	r3, [pc, #264]	; (800a4cc <__multiply+0x144>)
 800a3c2:	4843      	ldr	r0, [pc, #268]	; (800a4d0 <__multiply+0x148>)
 800a3c4:	f240 115d 	movw	r1, #349	; 0x15d
 800a3c8:	f000 fd8a 	bl	800aee0 <__assert_func>
 800a3cc:	f100 0614 	add.w	r6, r0, #20
 800a3d0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a3d4:	4633      	mov	r3, r6
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	4543      	cmp	r3, r8
 800a3da:	d31e      	bcc.n	800a41a <__multiply+0x92>
 800a3dc:	f105 0c14 	add.w	ip, r5, #20
 800a3e0:	f104 0314 	add.w	r3, r4, #20
 800a3e4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a3e8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a3ec:	9202      	str	r2, [sp, #8]
 800a3ee:	ebac 0205 	sub.w	r2, ip, r5
 800a3f2:	3a15      	subs	r2, #21
 800a3f4:	f022 0203 	bic.w	r2, r2, #3
 800a3f8:	3204      	adds	r2, #4
 800a3fa:	f105 0115 	add.w	r1, r5, #21
 800a3fe:	458c      	cmp	ip, r1
 800a400:	bf38      	it	cc
 800a402:	2204      	movcc	r2, #4
 800a404:	9201      	str	r2, [sp, #4]
 800a406:	9a02      	ldr	r2, [sp, #8]
 800a408:	9303      	str	r3, [sp, #12]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d808      	bhi.n	800a420 <__multiply+0x98>
 800a40e:	2f00      	cmp	r7, #0
 800a410:	dc55      	bgt.n	800a4be <__multiply+0x136>
 800a412:	6107      	str	r7, [r0, #16]
 800a414:	b005      	add	sp, #20
 800a416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a41a:	f843 2b04 	str.w	r2, [r3], #4
 800a41e:	e7db      	b.n	800a3d8 <__multiply+0x50>
 800a420:	f8b3 a000 	ldrh.w	sl, [r3]
 800a424:	f1ba 0f00 	cmp.w	sl, #0
 800a428:	d020      	beq.n	800a46c <__multiply+0xe4>
 800a42a:	f105 0e14 	add.w	lr, r5, #20
 800a42e:	46b1      	mov	r9, r6
 800a430:	2200      	movs	r2, #0
 800a432:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a436:	f8d9 b000 	ldr.w	fp, [r9]
 800a43a:	b2a1      	uxth	r1, r4
 800a43c:	fa1f fb8b 	uxth.w	fp, fp
 800a440:	fb0a b101 	mla	r1, sl, r1, fp
 800a444:	4411      	add	r1, r2
 800a446:	f8d9 2000 	ldr.w	r2, [r9]
 800a44a:	0c24      	lsrs	r4, r4, #16
 800a44c:	0c12      	lsrs	r2, r2, #16
 800a44e:	fb0a 2404 	mla	r4, sl, r4, r2
 800a452:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a456:	b289      	uxth	r1, r1
 800a458:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a45c:	45f4      	cmp	ip, lr
 800a45e:	f849 1b04 	str.w	r1, [r9], #4
 800a462:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a466:	d8e4      	bhi.n	800a432 <__multiply+0xaa>
 800a468:	9901      	ldr	r1, [sp, #4]
 800a46a:	5072      	str	r2, [r6, r1]
 800a46c:	9a03      	ldr	r2, [sp, #12]
 800a46e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a472:	3304      	adds	r3, #4
 800a474:	f1b9 0f00 	cmp.w	r9, #0
 800a478:	d01f      	beq.n	800a4ba <__multiply+0x132>
 800a47a:	6834      	ldr	r4, [r6, #0]
 800a47c:	f105 0114 	add.w	r1, r5, #20
 800a480:	46b6      	mov	lr, r6
 800a482:	f04f 0a00 	mov.w	sl, #0
 800a486:	880a      	ldrh	r2, [r1, #0]
 800a488:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a48c:	fb09 b202 	mla	r2, r9, r2, fp
 800a490:	4492      	add	sl, r2
 800a492:	b2a4      	uxth	r4, r4
 800a494:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a498:	f84e 4b04 	str.w	r4, [lr], #4
 800a49c:	f851 4b04 	ldr.w	r4, [r1], #4
 800a4a0:	f8be 2000 	ldrh.w	r2, [lr]
 800a4a4:	0c24      	lsrs	r4, r4, #16
 800a4a6:	fb09 2404 	mla	r4, r9, r4, r2
 800a4aa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a4ae:	458c      	cmp	ip, r1
 800a4b0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a4b4:	d8e7      	bhi.n	800a486 <__multiply+0xfe>
 800a4b6:	9a01      	ldr	r2, [sp, #4]
 800a4b8:	50b4      	str	r4, [r6, r2]
 800a4ba:	3604      	adds	r6, #4
 800a4bc:	e7a3      	b.n	800a406 <__multiply+0x7e>
 800a4be:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1a5      	bne.n	800a412 <__multiply+0x8a>
 800a4c6:	3f01      	subs	r7, #1
 800a4c8:	e7a1      	b.n	800a40e <__multiply+0x86>
 800a4ca:	bf00      	nop
 800a4cc:	0800edac 	.word	0x0800edac
 800a4d0:	0800ee3c 	.word	0x0800ee3c

0800a4d4 <__pow5mult>:
 800a4d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4d8:	4615      	mov	r5, r2
 800a4da:	f012 0203 	ands.w	r2, r2, #3
 800a4de:	4606      	mov	r6, r0
 800a4e0:	460f      	mov	r7, r1
 800a4e2:	d007      	beq.n	800a4f4 <__pow5mult+0x20>
 800a4e4:	4c25      	ldr	r4, [pc, #148]	; (800a57c <__pow5mult+0xa8>)
 800a4e6:	3a01      	subs	r2, #1
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a4ee:	f7ff fe51 	bl	800a194 <__multadd>
 800a4f2:	4607      	mov	r7, r0
 800a4f4:	10ad      	asrs	r5, r5, #2
 800a4f6:	d03d      	beq.n	800a574 <__pow5mult+0xa0>
 800a4f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a4fa:	b97c      	cbnz	r4, 800a51c <__pow5mult+0x48>
 800a4fc:	2010      	movs	r0, #16
 800a4fe:	f7ff fdbf 	bl	800a080 <malloc>
 800a502:	4602      	mov	r2, r0
 800a504:	6270      	str	r0, [r6, #36]	; 0x24
 800a506:	b928      	cbnz	r0, 800a514 <__pow5mult+0x40>
 800a508:	4b1d      	ldr	r3, [pc, #116]	; (800a580 <__pow5mult+0xac>)
 800a50a:	481e      	ldr	r0, [pc, #120]	; (800a584 <__pow5mult+0xb0>)
 800a50c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a510:	f000 fce6 	bl	800aee0 <__assert_func>
 800a514:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a518:	6004      	str	r4, [r0, #0]
 800a51a:	60c4      	str	r4, [r0, #12]
 800a51c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a520:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a524:	b94c      	cbnz	r4, 800a53a <__pow5mult+0x66>
 800a526:	f240 2171 	movw	r1, #625	; 0x271
 800a52a:	4630      	mov	r0, r6
 800a52c:	f7ff ff16 	bl	800a35c <__i2b>
 800a530:	2300      	movs	r3, #0
 800a532:	f8c8 0008 	str.w	r0, [r8, #8]
 800a536:	4604      	mov	r4, r0
 800a538:	6003      	str	r3, [r0, #0]
 800a53a:	f04f 0900 	mov.w	r9, #0
 800a53e:	07eb      	lsls	r3, r5, #31
 800a540:	d50a      	bpl.n	800a558 <__pow5mult+0x84>
 800a542:	4639      	mov	r1, r7
 800a544:	4622      	mov	r2, r4
 800a546:	4630      	mov	r0, r6
 800a548:	f7ff ff1e 	bl	800a388 <__multiply>
 800a54c:	4639      	mov	r1, r7
 800a54e:	4680      	mov	r8, r0
 800a550:	4630      	mov	r0, r6
 800a552:	f7ff fdfd 	bl	800a150 <_Bfree>
 800a556:	4647      	mov	r7, r8
 800a558:	106d      	asrs	r5, r5, #1
 800a55a:	d00b      	beq.n	800a574 <__pow5mult+0xa0>
 800a55c:	6820      	ldr	r0, [r4, #0]
 800a55e:	b938      	cbnz	r0, 800a570 <__pow5mult+0x9c>
 800a560:	4622      	mov	r2, r4
 800a562:	4621      	mov	r1, r4
 800a564:	4630      	mov	r0, r6
 800a566:	f7ff ff0f 	bl	800a388 <__multiply>
 800a56a:	6020      	str	r0, [r4, #0]
 800a56c:	f8c0 9000 	str.w	r9, [r0]
 800a570:	4604      	mov	r4, r0
 800a572:	e7e4      	b.n	800a53e <__pow5mult+0x6a>
 800a574:	4638      	mov	r0, r7
 800a576:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a57a:	bf00      	nop
 800a57c:	0800ef90 	.word	0x0800ef90
 800a580:	0800ed36 	.word	0x0800ed36
 800a584:	0800ee3c 	.word	0x0800ee3c

0800a588 <__lshift>:
 800a588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a58c:	460c      	mov	r4, r1
 800a58e:	6849      	ldr	r1, [r1, #4]
 800a590:	6923      	ldr	r3, [r4, #16]
 800a592:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a596:	68a3      	ldr	r3, [r4, #8]
 800a598:	4607      	mov	r7, r0
 800a59a:	4691      	mov	r9, r2
 800a59c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5a0:	f108 0601 	add.w	r6, r8, #1
 800a5a4:	42b3      	cmp	r3, r6
 800a5a6:	db0b      	blt.n	800a5c0 <__lshift+0x38>
 800a5a8:	4638      	mov	r0, r7
 800a5aa:	f7ff fd91 	bl	800a0d0 <_Balloc>
 800a5ae:	4605      	mov	r5, r0
 800a5b0:	b948      	cbnz	r0, 800a5c6 <__lshift+0x3e>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	4b28      	ldr	r3, [pc, #160]	; (800a658 <__lshift+0xd0>)
 800a5b6:	4829      	ldr	r0, [pc, #164]	; (800a65c <__lshift+0xd4>)
 800a5b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a5bc:	f000 fc90 	bl	800aee0 <__assert_func>
 800a5c0:	3101      	adds	r1, #1
 800a5c2:	005b      	lsls	r3, r3, #1
 800a5c4:	e7ee      	b.n	800a5a4 <__lshift+0x1c>
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	f100 0114 	add.w	r1, r0, #20
 800a5cc:	f100 0210 	add.w	r2, r0, #16
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	4553      	cmp	r3, sl
 800a5d4:	db33      	blt.n	800a63e <__lshift+0xb6>
 800a5d6:	6920      	ldr	r0, [r4, #16]
 800a5d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5dc:	f104 0314 	add.w	r3, r4, #20
 800a5e0:	f019 091f 	ands.w	r9, r9, #31
 800a5e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a5e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a5ec:	d02b      	beq.n	800a646 <__lshift+0xbe>
 800a5ee:	f1c9 0e20 	rsb	lr, r9, #32
 800a5f2:	468a      	mov	sl, r1
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	6818      	ldr	r0, [r3, #0]
 800a5f8:	fa00 f009 	lsl.w	r0, r0, r9
 800a5fc:	4302      	orrs	r2, r0
 800a5fe:	f84a 2b04 	str.w	r2, [sl], #4
 800a602:	f853 2b04 	ldr.w	r2, [r3], #4
 800a606:	459c      	cmp	ip, r3
 800a608:	fa22 f20e 	lsr.w	r2, r2, lr
 800a60c:	d8f3      	bhi.n	800a5f6 <__lshift+0x6e>
 800a60e:	ebac 0304 	sub.w	r3, ip, r4
 800a612:	3b15      	subs	r3, #21
 800a614:	f023 0303 	bic.w	r3, r3, #3
 800a618:	3304      	adds	r3, #4
 800a61a:	f104 0015 	add.w	r0, r4, #21
 800a61e:	4584      	cmp	ip, r0
 800a620:	bf38      	it	cc
 800a622:	2304      	movcc	r3, #4
 800a624:	50ca      	str	r2, [r1, r3]
 800a626:	b10a      	cbz	r2, 800a62c <__lshift+0xa4>
 800a628:	f108 0602 	add.w	r6, r8, #2
 800a62c:	3e01      	subs	r6, #1
 800a62e:	4638      	mov	r0, r7
 800a630:	612e      	str	r6, [r5, #16]
 800a632:	4621      	mov	r1, r4
 800a634:	f7ff fd8c 	bl	800a150 <_Bfree>
 800a638:	4628      	mov	r0, r5
 800a63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a642:	3301      	adds	r3, #1
 800a644:	e7c5      	b.n	800a5d2 <__lshift+0x4a>
 800a646:	3904      	subs	r1, #4
 800a648:	f853 2b04 	ldr.w	r2, [r3], #4
 800a64c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a650:	459c      	cmp	ip, r3
 800a652:	d8f9      	bhi.n	800a648 <__lshift+0xc0>
 800a654:	e7ea      	b.n	800a62c <__lshift+0xa4>
 800a656:	bf00      	nop
 800a658:	0800edac 	.word	0x0800edac
 800a65c:	0800ee3c 	.word	0x0800ee3c

0800a660 <__mcmp>:
 800a660:	b530      	push	{r4, r5, lr}
 800a662:	6902      	ldr	r2, [r0, #16]
 800a664:	690c      	ldr	r4, [r1, #16]
 800a666:	1b12      	subs	r2, r2, r4
 800a668:	d10e      	bne.n	800a688 <__mcmp+0x28>
 800a66a:	f100 0314 	add.w	r3, r0, #20
 800a66e:	3114      	adds	r1, #20
 800a670:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a674:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a678:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a67c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a680:	42a5      	cmp	r5, r4
 800a682:	d003      	beq.n	800a68c <__mcmp+0x2c>
 800a684:	d305      	bcc.n	800a692 <__mcmp+0x32>
 800a686:	2201      	movs	r2, #1
 800a688:	4610      	mov	r0, r2
 800a68a:	bd30      	pop	{r4, r5, pc}
 800a68c:	4283      	cmp	r3, r0
 800a68e:	d3f3      	bcc.n	800a678 <__mcmp+0x18>
 800a690:	e7fa      	b.n	800a688 <__mcmp+0x28>
 800a692:	f04f 32ff 	mov.w	r2, #4294967295
 800a696:	e7f7      	b.n	800a688 <__mcmp+0x28>

0800a698 <__mdiff>:
 800a698:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69c:	460c      	mov	r4, r1
 800a69e:	4606      	mov	r6, r0
 800a6a0:	4611      	mov	r1, r2
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	4617      	mov	r7, r2
 800a6a6:	f7ff ffdb 	bl	800a660 <__mcmp>
 800a6aa:	1e05      	subs	r5, r0, #0
 800a6ac:	d110      	bne.n	800a6d0 <__mdiff+0x38>
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4630      	mov	r0, r6
 800a6b2:	f7ff fd0d 	bl	800a0d0 <_Balloc>
 800a6b6:	b930      	cbnz	r0, 800a6c6 <__mdiff+0x2e>
 800a6b8:	4b39      	ldr	r3, [pc, #228]	; (800a7a0 <__mdiff+0x108>)
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	f240 2132 	movw	r1, #562	; 0x232
 800a6c0:	4838      	ldr	r0, [pc, #224]	; (800a7a4 <__mdiff+0x10c>)
 800a6c2:	f000 fc0d 	bl	800aee0 <__assert_func>
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d0:	bfa4      	itt	ge
 800a6d2:	463b      	movge	r3, r7
 800a6d4:	4627      	movge	r7, r4
 800a6d6:	4630      	mov	r0, r6
 800a6d8:	6879      	ldr	r1, [r7, #4]
 800a6da:	bfa6      	itte	ge
 800a6dc:	461c      	movge	r4, r3
 800a6de:	2500      	movge	r5, #0
 800a6e0:	2501      	movlt	r5, #1
 800a6e2:	f7ff fcf5 	bl	800a0d0 <_Balloc>
 800a6e6:	b920      	cbnz	r0, 800a6f2 <__mdiff+0x5a>
 800a6e8:	4b2d      	ldr	r3, [pc, #180]	; (800a7a0 <__mdiff+0x108>)
 800a6ea:	4602      	mov	r2, r0
 800a6ec:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a6f0:	e7e6      	b.n	800a6c0 <__mdiff+0x28>
 800a6f2:	693e      	ldr	r6, [r7, #16]
 800a6f4:	60c5      	str	r5, [r0, #12]
 800a6f6:	6925      	ldr	r5, [r4, #16]
 800a6f8:	f107 0114 	add.w	r1, r7, #20
 800a6fc:	f104 0914 	add.w	r9, r4, #20
 800a700:	f100 0e14 	add.w	lr, r0, #20
 800a704:	f107 0210 	add.w	r2, r7, #16
 800a708:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a70c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a710:	46f2      	mov	sl, lr
 800a712:	2700      	movs	r7, #0
 800a714:	f859 3b04 	ldr.w	r3, [r9], #4
 800a718:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a71c:	fa1f f883 	uxth.w	r8, r3
 800a720:	fa17 f78b 	uxtah	r7, r7, fp
 800a724:	0c1b      	lsrs	r3, r3, #16
 800a726:	eba7 0808 	sub.w	r8, r7, r8
 800a72a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a72e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a732:	fa1f f888 	uxth.w	r8, r8
 800a736:	141f      	asrs	r7, r3, #16
 800a738:	454d      	cmp	r5, r9
 800a73a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a73e:	f84a 3b04 	str.w	r3, [sl], #4
 800a742:	d8e7      	bhi.n	800a714 <__mdiff+0x7c>
 800a744:	1b2b      	subs	r3, r5, r4
 800a746:	3b15      	subs	r3, #21
 800a748:	f023 0303 	bic.w	r3, r3, #3
 800a74c:	3304      	adds	r3, #4
 800a74e:	3415      	adds	r4, #21
 800a750:	42a5      	cmp	r5, r4
 800a752:	bf38      	it	cc
 800a754:	2304      	movcc	r3, #4
 800a756:	4419      	add	r1, r3
 800a758:	4473      	add	r3, lr
 800a75a:	469e      	mov	lr, r3
 800a75c:	460d      	mov	r5, r1
 800a75e:	4565      	cmp	r5, ip
 800a760:	d30e      	bcc.n	800a780 <__mdiff+0xe8>
 800a762:	f10c 0203 	add.w	r2, ip, #3
 800a766:	1a52      	subs	r2, r2, r1
 800a768:	f022 0203 	bic.w	r2, r2, #3
 800a76c:	3903      	subs	r1, #3
 800a76e:	458c      	cmp	ip, r1
 800a770:	bf38      	it	cc
 800a772:	2200      	movcc	r2, #0
 800a774:	441a      	add	r2, r3
 800a776:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a77a:	b17b      	cbz	r3, 800a79c <__mdiff+0x104>
 800a77c:	6106      	str	r6, [r0, #16]
 800a77e:	e7a5      	b.n	800a6cc <__mdiff+0x34>
 800a780:	f855 8b04 	ldr.w	r8, [r5], #4
 800a784:	fa17 f488 	uxtah	r4, r7, r8
 800a788:	1422      	asrs	r2, r4, #16
 800a78a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a78e:	b2a4      	uxth	r4, r4
 800a790:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a794:	f84e 4b04 	str.w	r4, [lr], #4
 800a798:	1417      	asrs	r7, r2, #16
 800a79a:	e7e0      	b.n	800a75e <__mdiff+0xc6>
 800a79c:	3e01      	subs	r6, #1
 800a79e:	e7ea      	b.n	800a776 <__mdiff+0xde>
 800a7a0:	0800edac 	.word	0x0800edac
 800a7a4:	0800ee3c 	.word	0x0800ee3c

0800a7a8 <__ulp>:
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	ed8d 0b00 	vstr	d0, [sp]
 800a7ae:	9b01      	ldr	r3, [sp, #4]
 800a7b0:	4912      	ldr	r1, [pc, #72]	; (800a7fc <__ulp+0x54>)
 800a7b2:	4019      	ands	r1, r3
 800a7b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a7b8:	2900      	cmp	r1, #0
 800a7ba:	dd05      	ble.n	800a7c8 <__ulp+0x20>
 800a7bc:	2200      	movs	r2, #0
 800a7be:	460b      	mov	r3, r1
 800a7c0:	ec43 2b10 	vmov	d0, r2, r3
 800a7c4:	b002      	add	sp, #8
 800a7c6:	4770      	bx	lr
 800a7c8:	4249      	negs	r1, r1
 800a7ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a7ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a7d2:	f04f 0200 	mov.w	r2, #0
 800a7d6:	f04f 0300 	mov.w	r3, #0
 800a7da:	da04      	bge.n	800a7e6 <__ulp+0x3e>
 800a7dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a7e0:	fa41 f300 	asr.w	r3, r1, r0
 800a7e4:	e7ec      	b.n	800a7c0 <__ulp+0x18>
 800a7e6:	f1a0 0114 	sub.w	r1, r0, #20
 800a7ea:	291e      	cmp	r1, #30
 800a7ec:	bfda      	itte	le
 800a7ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a7f2:	fa20 f101 	lsrle.w	r1, r0, r1
 800a7f6:	2101      	movgt	r1, #1
 800a7f8:	460a      	mov	r2, r1
 800a7fa:	e7e1      	b.n	800a7c0 <__ulp+0x18>
 800a7fc:	7ff00000 	.word	0x7ff00000

0800a800 <__b2d>:
 800a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a802:	6905      	ldr	r5, [r0, #16]
 800a804:	f100 0714 	add.w	r7, r0, #20
 800a808:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a80c:	1f2e      	subs	r6, r5, #4
 800a80e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a812:	4620      	mov	r0, r4
 800a814:	f7ff fd52 	bl	800a2bc <__hi0bits>
 800a818:	f1c0 0320 	rsb	r3, r0, #32
 800a81c:	280a      	cmp	r0, #10
 800a81e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a89c <__b2d+0x9c>
 800a822:	600b      	str	r3, [r1, #0]
 800a824:	dc14      	bgt.n	800a850 <__b2d+0x50>
 800a826:	f1c0 0e0b 	rsb	lr, r0, #11
 800a82a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a82e:	42b7      	cmp	r7, r6
 800a830:	ea41 030c 	orr.w	r3, r1, ip
 800a834:	bf34      	ite	cc
 800a836:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a83a:	2100      	movcs	r1, #0
 800a83c:	3015      	adds	r0, #21
 800a83e:	fa04 f000 	lsl.w	r0, r4, r0
 800a842:	fa21 f10e 	lsr.w	r1, r1, lr
 800a846:	ea40 0201 	orr.w	r2, r0, r1
 800a84a:	ec43 2b10 	vmov	d0, r2, r3
 800a84e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a850:	42b7      	cmp	r7, r6
 800a852:	bf3a      	itte	cc
 800a854:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a858:	f1a5 0608 	subcc.w	r6, r5, #8
 800a85c:	2100      	movcs	r1, #0
 800a85e:	380b      	subs	r0, #11
 800a860:	d017      	beq.n	800a892 <__b2d+0x92>
 800a862:	f1c0 0c20 	rsb	ip, r0, #32
 800a866:	fa04 f500 	lsl.w	r5, r4, r0
 800a86a:	42be      	cmp	r6, r7
 800a86c:	fa21 f40c 	lsr.w	r4, r1, ip
 800a870:	ea45 0504 	orr.w	r5, r5, r4
 800a874:	bf8c      	ite	hi
 800a876:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a87a:	2400      	movls	r4, #0
 800a87c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a880:	fa01 f000 	lsl.w	r0, r1, r0
 800a884:	fa24 f40c 	lsr.w	r4, r4, ip
 800a888:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a88c:	ea40 0204 	orr.w	r2, r0, r4
 800a890:	e7db      	b.n	800a84a <__b2d+0x4a>
 800a892:	ea44 030c 	orr.w	r3, r4, ip
 800a896:	460a      	mov	r2, r1
 800a898:	e7d7      	b.n	800a84a <__b2d+0x4a>
 800a89a:	bf00      	nop
 800a89c:	3ff00000 	.word	0x3ff00000

0800a8a0 <__d2b>:
 800a8a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8a4:	4689      	mov	r9, r1
 800a8a6:	2101      	movs	r1, #1
 800a8a8:	ec57 6b10 	vmov	r6, r7, d0
 800a8ac:	4690      	mov	r8, r2
 800a8ae:	f7ff fc0f 	bl	800a0d0 <_Balloc>
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	b930      	cbnz	r0, 800a8c4 <__d2b+0x24>
 800a8b6:	4602      	mov	r2, r0
 800a8b8:	4b25      	ldr	r3, [pc, #148]	; (800a950 <__d2b+0xb0>)
 800a8ba:	4826      	ldr	r0, [pc, #152]	; (800a954 <__d2b+0xb4>)
 800a8bc:	f240 310a 	movw	r1, #778	; 0x30a
 800a8c0:	f000 fb0e 	bl	800aee0 <__assert_func>
 800a8c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a8c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a8cc:	bb35      	cbnz	r5, 800a91c <__d2b+0x7c>
 800a8ce:	2e00      	cmp	r6, #0
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	d028      	beq.n	800a926 <__d2b+0x86>
 800a8d4:	4668      	mov	r0, sp
 800a8d6:	9600      	str	r6, [sp, #0]
 800a8d8:	f7ff fd10 	bl	800a2fc <__lo0bits>
 800a8dc:	9900      	ldr	r1, [sp, #0]
 800a8de:	b300      	cbz	r0, 800a922 <__d2b+0x82>
 800a8e0:	9a01      	ldr	r2, [sp, #4]
 800a8e2:	f1c0 0320 	rsb	r3, r0, #32
 800a8e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ea:	430b      	orrs	r3, r1
 800a8ec:	40c2      	lsrs	r2, r0
 800a8ee:	6163      	str	r3, [r4, #20]
 800a8f0:	9201      	str	r2, [sp, #4]
 800a8f2:	9b01      	ldr	r3, [sp, #4]
 800a8f4:	61a3      	str	r3, [r4, #24]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	bf14      	ite	ne
 800a8fa:	2202      	movne	r2, #2
 800a8fc:	2201      	moveq	r2, #1
 800a8fe:	6122      	str	r2, [r4, #16]
 800a900:	b1d5      	cbz	r5, 800a938 <__d2b+0x98>
 800a902:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a906:	4405      	add	r5, r0
 800a908:	f8c9 5000 	str.w	r5, [r9]
 800a90c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a910:	f8c8 0000 	str.w	r0, [r8]
 800a914:	4620      	mov	r0, r4
 800a916:	b003      	add	sp, #12
 800a918:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a91c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a920:	e7d5      	b.n	800a8ce <__d2b+0x2e>
 800a922:	6161      	str	r1, [r4, #20]
 800a924:	e7e5      	b.n	800a8f2 <__d2b+0x52>
 800a926:	a801      	add	r0, sp, #4
 800a928:	f7ff fce8 	bl	800a2fc <__lo0bits>
 800a92c:	9b01      	ldr	r3, [sp, #4]
 800a92e:	6163      	str	r3, [r4, #20]
 800a930:	2201      	movs	r2, #1
 800a932:	6122      	str	r2, [r4, #16]
 800a934:	3020      	adds	r0, #32
 800a936:	e7e3      	b.n	800a900 <__d2b+0x60>
 800a938:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a93c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a940:	f8c9 0000 	str.w	r0, [r9]
 800a944:	6918      	ldr	r0, [r3, #16]
 800a946:	f7ff fcb9 	bl	800a2bc <__hi0bits>
 800a94a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a94e:	e7df      	b.n	800a910 <__d2b+0x70>
 800a950:	0800edac 	.word	0x0800edac
 800a954:	0800ee3c 	.word	0x0800ee3c

0800a958 <__ratio>:
 800a958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a95c:	4688      	mov	r8, r1
 800a95e:	4669      	mov	r1, sp
 800a960:	4681      	mov	r9, r0
 800a962:	f7ff ff4d 	bl	800a800 <__b2d>
 800a966:	a901      	add	r1, sp, #4
 800a968:	4640      	mov	r0, r8
 800a96a:	ec55 4b10 	vmov	r4, r5, d0
 800a96e:	f7ff ff47 	bl	800a800 <__b2d>
 800a972:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a976:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a97a:	eba3 0c02 	sub.w	ip, r3, r2
 800a97e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a982:	1a9b      	subs	r3, r3, r2
 800a984:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a988:	ec51 0b10 	vmov	r0, r1, d0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	bfd6      	itet	le
 800a990:	460a      	movle	r2, r1
 800a992:	462a      	movgt	r2, r5
 800a994:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a998:	468b      	mov	fp, r1
 800a99a:	462f      	mov	r7, r5
 800a99c:	bfd4      	ite	le
 800a99e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a9a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a9a6:	4620      	mov	r0, r4
 800a9a8:	ee10 2a10 	vmov	r2, s0
 800a9ac:	465b      	mov	r3, fp
 800a9ae:	4639      	mov	r1, r7
 800a9b0:	f7f5 ff4c 	bl	800084c <__aeabi_ddiv>
 800a9b4:	ec41 0b10 	vmov	d0, r0, r1
 800a9b8:	b003      	add	sp, #12
 800a9ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9be <__copybits>:
 800a9be:	3901      	subs	r1, #1
 800a9c0:	b570      	push	{r4, r5, r6, lr}
 800a9c2:	1149      	asrs	r1, r1, #5
 800a9c4:	6914      	ldr	r4, [r2, #16]
 800a9c6:	3101      	adds	r1, #1
 800a9c8:	f102 0314 	add.w	r3, r2, #20
 800a9cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a9d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9d4:	1f05      	subs	r5, r0, #4
 800a9d6:	42a3      	cmp	r3, r4
 800a9d8:	d30c      	bcc.n	800a9f4 <__copybits+0x36>
 800a9da:	1aa3      	subs	r3, r4, r2
 800a9dc:	3b11      	subs	r3, #17
 800a9de:	f023 0303 	bic.w	r3, r3, #3
 800a9e2:	3211      	adds	r2, #17
 800a9e4:	42a2      	cmp	r2, r4
 800a9e6:	bf88      	it	hi
 800a9e8:	2300      	movhi	r3, #0
 800a9ea:	4418      	add	r0, r3
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	4288      	cmp	r0, r1
 800a9f0:	d305      	bcc.n	800a9fe <__copybits+0x40>
 800a9f2:	bd70      	pop	{r4, r5, r6, pc}
 800a9f4:	f853 6b04 	ldr.w	r6, [r3], #4
 800a9f8:	f845 6f04 	str.w	r6, [r5, #4]!
 800a9fc:	e7eb      	b.n	800a9d6 <__copybits+0x18>
 800a9fe:	f840 3b04 	str.w	r3, [r0], #4
 800aa02:	e7f4      	b.n	800a9ee <__copybits+0x30>

0800aa04 <__any_on>:
 800aa04:	f100 0214 	add.w	r2, r0, #20
 800aa08:	6900      	ldr	r0, [r0, #16]
 800aa0a:	114b      	asrs	r3, r1, #5
 800aa0c:	4298      	cmp	r0, r3
 800aa0e:	b510      	push	{r4, lr}
 800aa10:	db11      	blt.n	800aa36 <__any_on+0x32>
 800aa12:	dd0a      	ble.n	800aa2a <__any_on+0x26>
 800aa14:	f011 011f 	ands.w	r1, r1, #31
 800aa18:	d007      	beq.n	800aa2a <__any_on+0x26>
 800aa1a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa1e:	fa24 f001 	lsr.w	r0, r4, r1
 800aa22:	fa00 f101 	lsl.w	r1, r0, r1
 800aa26:	428c      	cmp	r4, r1
 800aa28:	d10b      	bne.n	800aa42 <__any_on+0x3e>
 800aa2a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d803      	bhi.n	800aa3a <__any_on+0x36>
 800aa32:	2000      	movs	r0, #0
 800aa34:	bd10      	pop	{r4, pc}
 800aa36:	4603      	mov	r3, r0
 800aa38:	e7f7      	b.n	800aa2a <__any_on+0x26>
 800aa3a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa3e:	2900      	cmp	r1, #0
 800aa40:	d0f5      	beq.n	800aa2e <__any_on+0x2a>
 800aa42:	2001      	movs	r0, #1
 800aa44:	e7f6      	b.n	800aa34 <__any_on+0x30>

0800aa46 <_calloc_r>:
 800aa46:	b513      	push	{r0, r1, r4, lr}
 800aa48:	434a      	muls	r2, r1
 800aa4a:	4611      	mov	r1, r2
 800aa4c:	9201      	str	r2, [sp, #4]
 800aa4e:	f000 f859 	bl	800ab04 <_malloc_r>
 800aa52:	4604      	mov	r4, r0
 800aa54:	b118      	cbz	r0, 800aa5e <_calloc_r+0x18>
 800aa56:	9a01      	ldr	r2, [sp, #4]
 800aa58:	2100      	movs	r1, #0
 800aa5a:	f7fc fbc7 	bl	80071ec <memset>
 800aa5e:	4620      	mov	r0, r4
 800aa60:	b002      	add	sp, #8
 800aa62:	bd10      	pop	{r4, pc}

0800aa64 <_free_r>:
 800aa64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa66:	2900      	cmp	r1, #0
 800aa68:	d048      	beq.n	800aafc <_free_r+0x98>
 800aa6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa6e:	9001      	str	r0, [sp, #4]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f1a1 0404 	sub.w	r4, r1, #4
 800aa76:	bfb8      	it	lt
 800aa78:	18e4      	addlt	r4, r4, r3
 800aa7a:	f000 fa7b 	bl	800af74 <__malloc_lock>
 800aa7e:	4a20      	ldr	r2, [pc, #128]	; (800ab00 <_free_r+0x9c>)
 800aa80:	9801      	ldr	r0, [sp, #4]
 800aa82:	6813      	ldr	r3, [r2, #0]
 800aa84:	4615      	mov	r5, r2
 800aa86:	b933      	cbnz	r3, 800aa96 <_free_r+0x32>
 800aa88:	6063      	str	r3, [r4, #4]
 800aa8a:	6014      	str	r4, [r2, #0]
 800aa8c:	b003      	add	sp, #12
 800aa8e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aa92:	f000 ba75 	b.w	800af80 <__malloc_unlock>
 800aa96:	42a3      	cmp	r3, r4
 800aa98:	d90b      	bls.n	800aab2 <_free_r+0x4e>
 800aa9a:	6821      	ldr	r1, [r4, #0]
 800aa9c:	1862      	adds	r2, r4, r1
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	bf04      	itt	eq
 800aaa2:	681a      	ldreq	r2, [r3, #0]
 800aaa4:	685b      	ldreq	r3, [r3, #4]
 800aaa6:	6063      	str	r3, [r4, #4]
 800aaa8:	bf04      	itt	eq
 800aaaa:	1852      	addeq	r2, r2, r1
 800aaac:	6022      	streq	r2, [r4, #0]
 800aaae:	602c      	str	r4, [r5, #0]
 800aab0:	e7ec      	b.n	800aa8c <_free_r+0x28>
 800aab2:	461a      	mov	r2, r3
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	b10b      	cbz	r3, 800aabc <_free_r+0x58>
 800aab8:	42a3      	cmp	r3, r4
 800aaba:	d9fa      	bls.n	800aab2 <_free_r+0x4e>
 800aabc:	6811      	ldr	r1, [r2, #0]
 800aabe:	1855      	adds	r5, r2, r1
 800aac0:	42a5      	cmp	r5, r4
 800aac2:	d10b      	bne.n	800aadc <_free_r+0x78>
 800aac4:	6824      	ldr	r4, [r4, #0]
 800aac6:	4421      	add	r1, r4
 800aac8:	1854      	adds	r4, r2, r1
 800aaca:	42a3      	cmp	r3, r4
 800aacc:	6011      	str	r1, [r2, #0]
 800aace:	d1dd      	bne.n	800aa8c <_free_r+0x28>
 800aad0:	681c      	ldr	r4, [r3, #0]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	6053      	str	r3, [r2, #4]
 800aad6:	4421      	add	r1, r4
 800aad8:	6011      	str	r1, [r2, #0]
 800aada:	e7d7      	b.n	800aa8c <_free_r+0x28>
 800aadc:	d902      	bls.n	800aae4 <_free_r+0x80>
 800aade:	230c      	movs	r3, #12
 800aae0:	6003      	str	r3, [r0, #0]
 800aae2:	e7d3      	b.n	800aa8c <_free_r+0x28>
 800aae4:	6825      	ldr	r5, [r4, #0]
 800aae6:	1961      	adds	r1, r4, r5
 800aae8:	428b      	cmp	r3, r1
 800aaea:	bf04      	itt	eq
 800aaec:	6819      	ldreq	r1, [r3, #0]
 800aaee:	685b      	ldreq	r3, [r3, #4]
 800aaf0:	6063      	str	r3, [r4, #4]
 800aaf2:	bf04      	itt	eq
 800aaf4:	1949      	addeq	r1, r1, r5
 800aaf6:	6021      	streq	r1, [r4, #0]
 800aaf8:	6054      	str	r4, [r2, #4]
 800aafa:	e7c7      	b.n	800aa8c <_free_r+0x28>
 800aafc:	b003      	add	sp, #12
 800aafe:	bd30      	pop	{r4, r5, pc}
 800ab00:	2000022c 	.word	0x2000022c

0800ab04 <_malloc_r>:
 800ab04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab06:	1ccd      	adds	r5, r1, #3
 800ab08:	f025 0503 	bic.w	r5, r5, #3
 800ab0c:	3508      	adds	r5, #8
 800ab0e:	2d0c      	cmp	r5, #12
 800ab10:	bf38      	it	cc
 800ab12:	250c      	movcc	r5, #12
 800ab14:	2d00      	cmp	r5, #0
 800ab16:	4606      	mov	r6, r0
 800ab18:	db01      	blt.n	800ab1e <_malloc_r+0x1a>
 800ab1a:	42a9      	cmp	r1, r5
 800ab1c:	d903      	bls.n	800ab26 <_malloc_r+0x22>
 800ab1e:	230c      	movs	r3, #12
 800ab20:	6033      	str	r3, [r6, #0]
 800ab22:	2000      	movs	r0, #0
 800ab24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab26:	f000 fa25 	bl	800af74 <__malloc_lock>
 800ab2a:	4921      	ldr	r1, [pc, #132]	; (800abb0 <_malloc_r+0xac>)
 800ab2c:	680a      	ldr	r2, [r1, #0]
 800ab2e:	4614      	mov	r4, r2
 800ab30:	b99c      	cbnz	r4, 800ab5a <_malloc_r+0x56>
 800ab32:	4f20      	ldr	r7, [pc, #128]	; (800abb4 <_malloc_r+0xb0>)
 800ab34:	683b      	ldr	r3, [r7, #0]
 800ab36:	b923      	cbnz	r3, 800ab42 <_malloc_r+0x3e>
 800ab38:	4621      	mov	r1, r4
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f000 f9a0 	bl	800ae80 <_sbrk_r>
 800ab40:	6038      	str	r0, [r7, #0]
 800ab42:	4629      	mov	r1, r5
 800ab44:	4630      	mov	r0, r6
 800ab46:	f000 f99b 	bl	800ae80 <_sbrk_r>
 800ab4a:	1c43      	adds	r3, r0, #1
 800ab4c:	d123      	bne.n	800ab96 <_malloc_r+0x92>
 800ab4e:	230c      	movs	r3, #12
 800ab50:	6033      	str	r3, [r6, #0]
 800ab52:	4630      	mov	r0, r6
 800ab54:	f000 fa14 	bl	800af80 <__malloc_unlock>
 800ab58:	e7e3      	b.n	800ab22 <_malloc_r+0x1e>
 800ab5a:	6823      	ldr	r3, [r4, #0]
 800ab5c:	1b5b      	subs	r3, r3, r5
 800ab5e:	d417      	bmi.n	800ab90 <_malloc_r+0x8c>
 800ab60:	2b0b      	cmp	r3, #11
 800ab62:	d903      	bls.n	800ab6c <_malloc_r+0x68>
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	441c      	add	r4, r3
 800ab68:	6025      	str	r5, [r4, #0]
 800ab6a:	e004      	b.n	800ab76 <_malloc_r+0x72>
 800ab6c:	6863      	ldr	r3, [r4, #4]
 800ab6e:	42a2      	cmp	r2, r4
 800ab70:	bf0c      	ite	eq
 800ab72:	600b      	streq	r3, [r1, #0]
 800ab74:	6053      	strne	r3, [r2, #4]
 800ab76:	4630      	mov	r0, r6
 800ab78:	f000 fa02 	bl	800af80 <__malloc_unlock>
 800ab7c:	f104 000b 	add.w	r0, r4, #11
 800ab80:	1d23      	adds	r3, r4, #4
 800ab82:	f020 0007 	bic.w	r0, r0, #7
 800ab86:	1ac2      	subs	r2, r0, r3
 800ab88:	d0cc      	beq.n	800ab24 <_malloc_r+0x20>
 800ab8a:	1a1b      	subs	r3, r3, r0
 800ab8c:	50a3      	str	r3, [r4, r2]
 800ab8e:	e7c9      	b.n	800ab24 <_malloc_r+0x20>
 800ab90:	4622      	mov	r2, r4
 800ab92:	6864      	ldr	r4, [r4, #4]
 800ab94:	e7cc      	b.n	800ab30 <_malloc_r+0x2c>
 800ab96:	1cc4      	adds	r4, r0, #3
 800ab98:	f024 0403 	bic.w	r4, r4, #3
 800ab9c:	42a0      	cmp	r0, r4
 800ab9e:	d0e3      	beq.n	800ab68 <_malloc_r+0x64>
 800aba0:	1a21      	subs	r1, r4, r0
 800aba2:	4630      	mov	r0, r6
 800aba4:	f000 f96c 	bl	800ae80 <_sbrk_r>
 800aba8:	3001      	adds	r0, #1
 800abaa:	d1dd      	bne.n	800ab68 <_malloc_r+0x64>
 800abac:	e7cf      	b.n	800ab4e <_malloc_r+0x4a>
 800abae:	bf00      	nop
 800abb0:	2000022c 	.word	0x2000022c
 800abb4:	20000230 	.word	0x20000230

0800abb8 <__ssputs_r>:
 800abb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abbc:	688e      	ldr	r6, [r1, #8]
 800abbe:	429e      	cmp	r6, r3
 800abc0:	4682      	mov	sl, r0
 800abc2:	460c      	mov	r4, r1
 800abc4:	4690      	mov	r8, r2
 800abc6:	461f      	mov	r7, r3
 800abc8:	d838      	bhi.n	800ac3c <__ssputs_r+0x84>
 800abca:	898a      	ldrh	r2, [r1, #12]
 800abcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800abd0:	d032      	beq.n	800ac38 <__ssputs_r+0x80>
 800abd2:	6825      	ldr	r5, [r4, #0]
 800abd4:	6909      	ldr	r1, [r1, #16]
 800abd6:	eba5 0901 	sub.w	r9, r5, r1
 800abda:	6965      	ldr	r5, [r4, #20]
 800abdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abe0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abe4:	3301      	adds	r3, #1
 800abe6:	444b      	add	r3, r9
 800abe8:	106d      	asrs	r5, r5, #1
 800abea:	429d      	cmp	r5, r3
 800abec:	bf38      	it	cc
 800abee:	461d      	movcc	r5, r3
 800abf0:	0553      	lsls	r3, r2, #21
 800abf2:	d531      	bpl.n	800ac58 <__ssputs_r+0xa0>
 800abf4:	4629      	mov	r1, r5
 800abf6:	f7ff ff85 	bl	800ab04 <_malloc_r>
 800abfa:	4606      	mov	r6, r0
 800abfc:	b950      	cbnz	r0, 800ac14 <__ssputs_r+0x5c>
 800abfe:	230c      	movs	r3, #12
 800ac00:	f8ca 3000 	str.w	r3, [sl]
 800ac04:	89a3      	ldrh	r3, [r4, #12]
 800ac06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac0a:	81a3      	strh	r3, [r4, #12]
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac14:	6921      	ldr	r1, [r4, #16]
 800ac16:	464a      	mov	r2, r9
 800ac18:	f7ff fa4c 	bl	800a0b4 <memcpy>
 800ac1c:	89a3      	ldrh	r3, [r4, #12]
 800ac1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ac22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac26:	81a3      	strh	r3, [r4, #12]
 800ac28:	6126      	str	r6, [r4, #16]
 800ac2a:	6165      	str	r5, [r4, #20]
 800ac2c:	444e      	add	r6, r9
 800ac2e:	eba5 0509 	sub.w	r5, r5, r9
 800ac32:	6026      	str	r6, [r4, #0]
 800ac34:	60a5      	str	r5, [r4, #8]
 800ac36:	463e      	mov	r6, r7
 800ac38:	42be      	cmp	r6, r7
 800ac3a:	d900      	bls.n	800ac3e <__ssputs_r+0x86>
 800ac3c:	463e      	mov	r6, r7
 800ac3e:	4632      	mov	r2, r6
 800ac40:	6820      	ldr	r0, [r4, #0]
 800ac42:	4641      	mov	r1, r8
 800ac44:	f000 f97c 	bl	800af40 <memmove>
 800ac48:	68a3      	ldr	r3, [r4, #8]
 800ac4a:	6822      	ldr	r2, [r4, #0]
 800ac4c:	1b9b      	subs	r3, r3, r6
 800ac4e:	4432      	add	r2, r6
 800ac50:	60a3      	str	r3, [r4, #8]
 800ac52:	6022      	str	r2, [r4, #0]
 800ac54:	2000      	movs	r0, #0
 800ac56:	e7db      	b.n	800ac10 <__ssputs_r+0x58>
 800ac58:	462a      	mov	r2, r5
 800ac5a:	f000 f997 	bl	800af8c <_realloc_r>
 800ac5e:	4606      	mov	r6, r0
 800ac60:	2800      	cmp	r0, #0
 800ac62:	d1e1      	bne.n	800ac28 <__ssputs_r+0x70>
 800ac64:	6921      	ldr	r1, [r4, #16]
 800ac66:	4650      	mov	r0, sl
 800ac68:	f7ff fefc 	bl	800aa64 <_free_r>
 800ac6c:	e7c7      	b.n	800abfe <__ssputs_r+0x46>
	...

0800ac70 <_svfiprintf_r>:
 800ac70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac74:	4698      	mov	r8, r3
 800ac76:	898b      	ldrh	r3, [r1, #12]
 800ac78:	061b      	lsls	r3, r3, #24
 800ac7a:	b09d      	sub	sp, #116	; 0x74
 800ac7c:	4607      	mov	r7, r0
 800ac7e:	460d      	mov	r5, r1
 800ac80:	4614      	mov	r4, r2
 800ac82:	d50e      	bpl.n	800aca2 <_svfiprintf_r+0x32>
 800ac84:	690b      	ldr	r3, [r1, #16]
 800ac86:	b963      	cbnz	r3, 800aca2 <_svfiprintf_r+0x32>
 800ac88:	2140      	movs	r1, #64	; 0x40
 800ac8a:	f7ff ff3b 	bl	800ab04 <_malloc_r>
 800ac8e:	6028      	str	r0, [r5, #0]
 800ac90:	6128      	str	r0, [r5, #16]
 800ac92:	b920      	cbnz	r0, 800ac9e <_svfiprintf_r+0x2e>
 800ac94:	230c      	movs	r3, #12
 800ac96:	603b      	str	r3, [r7, #0]
 800ac98:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9c:	e0d1      	b.n	800ae42 <_svfiprintf_r+0x1d2>
 800ac9e:	2340      	movs	r3, #64	; 0x40
 800aca0:	616b      	str	r3, [r5, #20]
 800aca2:	2300      	movs	r3, #0
 800aca4:	9309      	str	r3, [sp, #36]	; 0x24
 800aca6:	2320      	movs	r3, #32
 800aca8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acac:	f8cd 800c 	str.w	r8, [sp, #12]
 800acb0:	2330      	movs	r3, #48	; 0x30
 800acb2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ae5c <_svfiprintf_r+0x1ec>
 800acb6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800acba:	f04f 0901 	mov.w	r9, #1
 800acbe:	4623      	mov	r3, r4
 800acc0:	469a      	mov	sl, r3
 800acc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acc6:	b10a      	cbz	r2, 800accc <_svfiprintf_r+0x5c>
 800acc8:	2a25      	cmp	r2, #37	; 0x25
 800acca:	d1f9      	bne.n	800acc0 <_svfiprintf_r+0x50>
 800accc:	ebba 0b04 	subs.w	fp, sl, r4
 800acd0:	d00b      	beq.n	800acea <_svfiprintf_r+0x7a>
 800acd2:	465b      	mov	r3, fp
 800acd4:	4622      	mov	r2, r4
 800acd6:	4629      	mov	r1, r5
 800acd8:	4638      	mov	r0, r7
 800acda:	f7ff ff6d 	bl	800abb8 <__ssputs_r>
 800acde:	3001      	adds	r0, #1
 800ace0:	f000 80aa 	beq.w	800ae38 <_svfiprintf_r+0x1c8>
 800ace4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ace6:	445a      	add	r2, fp
 800ace8:	9209      	str	r2, [sp, #36]	; 0x24
 800acea:	f89a 3000 	ldrb.w	r3, [sl]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	f000 80a2 	beq.w	800ae38 <_svfiprintf_r+0x1c8>
 800acf4:	2300      	movs	r3, #0
 800acf6:	f04f 32ff 	mov.w	r2, #4294967295
 800acfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acfe:	f10a 0a01 	add.w	sl, sl, #1
 800ad02:	9304      	str	r3, [sp, #16]
 800ad04:	9307      	str	r3, [sp, #28]
 800ad06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad0a:	931a      	str	r3, [sp, #104]	; 0x68
 800ad0c:	4654      	mov	r4, sl
 800ad0e:	2205      	movs	r2, #5
 800ad10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad14:	4851      	ldr	r0, [pc, #324]	; (800ae5c <_svfiprintf_r+0x1ec>)
 800ad16:	f7f5 fa63 	bl	80001e0 <memchr>
 800ad1a:	9a04      	ldr	r2, [sp, #16]
 800ad1c:	b9d8      	cbnz	r0, 800ad56 <_svfiprintf_r+0xe6>
 800ad1e:	06d0      	lsls	r0, r2, #27
 800ad20:	bf44      	itt	mi
 800ad22:	2320      	movmi	r3, #32
 800ad24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad28:	0711      	lsls	r1, r2, #28
 800ad2a:	bf44      	itt	mi
 800ad2c:	232b      	movmi	r3, #43	; 0x2b
 800ad2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad32:	f89a 3000 	ldrb.w	r3, [sl]
 800ad36:	2b2a      	cmp	r3, #42	; 0x2a
 800ad38:	d015      	beq.n	800ad66 <_svfiprintf_r+0xf6>
 800ad3a:	9a07      	ldr	r2, [sp, #28]
 800ad3c:	4654      	mov	r4, sl
 800ad3e:	2000      	movs	r0, #0
 800ad40:	f04f 0c0a 	mov.w	ip, #10
 800ad44:	4621      	mov	r1, r4
 800ad46:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad4a:	3b30      	subs	r3, #48	; 0x30
 800ad4c:	2b09      	cmp	r3, #9
 800ad4e:	d94e      	bls.n	800adee <_svfiprintf_r+0x17e>
 800ad50:	b1b0      	cbz	r0, 800ad80 <_svfiprintf_r+0x110>
 800ad52:	9207      	str	r2, [sp, #28]
 800ad54:	e014      	b.n	800ad80 <_svfiprintf_r+0x110>
 800ad56:	eba0 0308 	sub.w	r3, r0, r8
 800ad5a:	fa09 f303 	lsl.w	r3, r9, r3
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	9304      	str	r3, [sp, #16]
 800ad62:	46a2      	mov	sl, r4
 800ad64:	e7d2      	b.n	800ad0c <_svfiprintf_r+0x9c>
 800ad66:	9b03      	ldr	r3, [sp, #12]
 800ad68:	1d19      	adds	r1, r3, #4
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	9103      	str	r1, [sp, #12]
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	bfbb      	ittet	lt
 800ad72:	425b      	neglt	r3, r3
 800ad74:	f042 0202 	orrlt.w	r2, r2, #2
 800ad78:	9307      	strge	r3, [sp, #28]
 800ad7a:	9307      	strlt	r3, [sp, #28]
 800ad7c:	bfb8      	it	lt
 800ad7e:	9204      	strlt	r2, [sp, #16]
 800ad80:	7823      	ldrb	r3, [r4, #0]
 800ad82:	2b2e      	cmp	r3, #46	; 0x2e
 800ad84:	d10c      	bne.n	800ada0 <_svfiprintf_r+0x130>
 800ad86:	7863      	ldrb	r3, [r4, #1]
 800ad88:	2b2a      	cmp	r3, #42	; 0x2a
 800ad8a:	d135      	bne.n	800adf8 <_svfiprintf_r+0x188>
 800ad8c:	9b03      	ldr	r3, [sp, #12]
 800ad8e:	1d1a      	adds	r2, r3, #4
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	9203      	str	r2, [sp, #12]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	bfb8      	it	lt
 800ad98:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad9c:	3402      	adds	r4, #2
 800ad9e:	9305      	str	r3, [sp, #20]
 800ada0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ae6c <_svfiprintf_r+0x1fc>
 800ada4:	7821      	ldrb	r1, [r4, #0]
 800ada6:	2203      	movs	r2, #3
 800ada8:	4650      	mov	r0, sl
 800adaa:	f7f5 fa19 	bl	80001e0 <memchr>
 800adae:	b140      	cbz	r0, 800adc2 <_svfiprintf_r+0x152>
 800adb0:	2340      	movs	r3, #64	; 0x40
 800adb2:	eba0 000a 	sub.w	r0, r0, sl
 800adb6:	fa03 f000 	lsl.w	r0, r3, r0
 800adba:	9b04      	ldr	r3, [sp, #16]
 800adbc:	4303      	orrs	r3, r0
 800adbe:	3401      	adds	r4, #1
 800adc0:	9304      	str	r3, [sp, #16]
 800adc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adc6:	4826      	ldr	r0, [pc, #152]	; (800ae60 <_svfiprintf_r+0x1f0>)
 800adc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adcc:	2206      	movs	r2, #6
 800adce:	f7f5 fa07 	bl	80001e0 <memchr>
 800add2:	2800      	cmp	r0, #0
 800add4:	d038      	beq.n	800ae48 <_svfiprintf_r+0x1d8>
 800add6:	4b23      	ldr	r3, [pc, #140]	; (800ae64 <_svfiprintf_r+0x1f4>)
 800add8:	bb1b      	cbnz	r3, 800ae22 <_svfiprintf_r+0x1b2>
 800adda:	9b03      	ldr	r3, [sp, #12]
 800addc:	3307      	adds	r3, #7
 800adde:	f023 0307 	bic.w	r3, r3, #7
 800ade2:	3308      	adds	r3, #8
 800ade4:	9303      	str	r3, [sp, #12]
 800ade6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ade8:	4433      	add	r3, r6
 800adea:	9309      	str	r3, [sp, #36]	; 0x24
 800adec:	e767      	b.n	800acbe <_svfiprintf_r+0x4e>
 800adee:	fb0c 3202 	mla	r2, ip, r2, r3
 800adf2:	460c      	mov	r4, r1
 800adf4:	2001      	movs	r0, #1
 800adf6:	e7a5      	b.n	800ad44 <_svfiprintf_r+0xd4>
 800adf8:	2300      	movs	r3, #0
 800adfa:	3401      	adds	r4, #1
 800adfc:	9305      	str	r3, [sp, #20]
 800adfe:	4619      	mov	r1, r3
 800ae00:	f04f 0c0a 	mov.w	ip, #10
 800ae04:	4620      	mov	r0, r4
 800ae06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae0a:	3a30      	subs	r2, #48	; 0x30
 800ae0c:	2a09      	cmp	r2, #9
 800ae0e:	d903      	bls.n	800ae18 <_svfiprintf_r+0x1a8>
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d0c5      	beq.n	800ada0 <_svfiprintf_r+0x130>
 800ae14:	9105      	str	r1, [sp, #20]
 800ae16:	e7c3      	b.n	800ada0 <_svfiprintf_r+0x130>
 800ae18:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae1c:	4604      	mov	r4, r0
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e7f0      	b.n	800ae04 <_svfiprintf_r+0x194>
 800ae22:	ab03      	add	r3, sp, #12
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	462a      	mov	r2, r5
 800ae28:	4b0f      	ldr	r3, [pc, #60]	; (800ae68 <_svfiprintf_r+0x1f8>)
 800ae2a:	a904      	add	r1, sp, #16
 800ae2c:	4638      	mov	r0, r7
 800ae2e:	f7fc fa85 	bl	800733c <_printf_float>
 800ae32:	1c42      	adds	r2, r0, #1
 800ae34:	4606      	mov	r6, r0
 800ae36:	d1d6      	bne.n	800ade6 <_svfiprintf_r+0x176>
 800ae38:	89ab      	ldrh	r3, [r5, #12]
 800ae3a:	065b      	lsls	r3, r3, #25
 800ae3c:	f53f af2c 	bmi.w	800ac98 <_svfiprintf_r+0x28>
 800ae40:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae42:	b01d      	add	sp, #116	; 0x74
 800ae44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae48:	ab03      	add	r3, sp, #12
 800ae4a:	9300      	str	r3, [sp, #0]
 800ae4c:	462a      	mov	r2, r5
 800ae4e:	4b06      	ldr	r3, [pc, #24]	; (800ae68 <_svfiprintf_r+0x1f8>)
 800ae50:	a904      	add	r1, sp, #16
 800ae52:	4638      	mov	r0, r7
 800ae54:	f7fc fd16 	bl	8007884 <_printf_i>
 800ae58:	e7eb      	b.n	800ae32 <_svfiprintf_r+0x1c2>
 800ae5a:	bf00      	nop
 800ae5c:	0800ef9c 	.word	0x0800ef9c
 800ae60:	0800efa6 	.word	0x0800efa6
 800ae64:	0800733d 	.word	0x0800733d
 800ae68:	0800abb9 	.word	0x0800abb9
 800ae6c:	0800efa2 	.word	0x0800efa2

0800ae70 <nan>:
 800ae70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ae78 <nan+0x8>
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop
 800ae78:	00000000 	.word	0x00000000
 800ae7c:	7ff80000 	.word	0x7ff80000

0800ae80 <_sbrk_r>:
 800ae80:	b538      	push	{r3, r4, r5, lr}
 800ae82:	4d06      	ldr	r5, [pc, #24]	; (800ae9c <_sbrk_r+0x1c>)
 800ae84:	2300      	movs	r3, #0
 800ae86:	4604      	mov	r4, r0
 800ae88:	4608      	mov	r0, r1
 800ae8a:	602b      	str	r3, [r5, #0]
 800ae8c:	f7f8 f834 	bl	8002ef8 <_sbrk>
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	d102      	bne.n	800ae9a <_sbrk_r+0x1a>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	b103      	cbz	r3, 800ae9a <_sbrk_r+0x1a>
 800ae98:	6023      	str	r3, [r4, #0]
 800ae9a:	bd38      	pop	{r3, r4, r5, pc}
 800ae9c:	200005f4 	.word	0x200005f4

0800aea0 <strncmp>:
 800aea0:	b510      	push	{r4, lr}
 800aea2:	b16a      	cbz	r2, 800aec0 <strncmp+0x20>
 800aea4:	3901      	subs	r1, #1
 800aea6:	1884      	adds	r4, r0, r2
 800aea8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800aeac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d103      	bne.n	800aebc <strncmp+0x1c>
 800aeb4:	42a0      	cmp	r0, r4
 800aeb6:	d001      	beq.n	800aebc <strncmp+0x1c>
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1f5      	bne.n	800aea8 <strncmp+0x8>
 800aebc:	1a98      	subs	r0, r3, r2
 800aebe:	bd10      	pop	{r4, pc}
 800aec0:	4610      	mov	r0, r2
 800aec2:	e7fc      	b.n	800aebe <strncmp+0x1e>

0800aec4 <__ascii_wctomb>:
 800aec4:	b149      	cbz	r1, 800aeda <__ascii_wctomb+0x16>
 800aec6:	2aff      	cmp	r2, #255	; 0xff
 800aec8:	bf85      	ittet	hi
 800aeca:	238a      	movhi	r3, #138	; 0x8a
 800aecc:	6003      	strhi	r3, [r0, #0]
 800aece:	700a      	strbls	r2, [r1, #0]
 800aed0:	f04f 30ff 	movhi.w	r0, #4294967295
 800aed4:	bf98      	it	ls
 800aed6:	2001      	movls	r0, #1
 800aed8:	4770      	bx	lr
 800aeda:	4608      	mov	r0, r1
 800aedc:	4770      	bx	lr
	...

0800aee0 <__assert_func>:
 800aee0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aee2:	4614      	mov	r4, r2
 800aee4:	461a      	mov	r2, r3
 800aee6:	4b09      	ldr	r3, [pc, #36]	; (800af0c <__assert_func+0x2c>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4605      	mov	r5, r0
 800aeec:	68d8      	ldr	r0, [r3, #12]
 800aeee:	b14c      	cbz	r4, 800af04 <__assert_func+0x24>
 800aef0:	4b07      	ldr	r3, [pc, #28]	; (800af10 <__assert_func+0x30>)
 800aef2:	9100      	str	r1, [sp, #0]
 800aef4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800aef8:	4906      	ldr	r1, [pc, #24]	; (800af14 <__assert_func+0x34>)
 800aefa:	462b      	mov	r3, r5
 800aefc:	f000 f80e 	bl	800af1c <fiprintf>
 800af00:	f000 fa84 	bl	800b40c <abort>
 800af04:	4b04      	ldr	r3, [pc, #16]	; (800af18 <__assert_func+0x38>)
 800af06:	461c      	mov	r4, r3
 800af08:	e7f3      	b.n	800aef2 <__assert_func+0x12>
 800af0a:	bf00      	nop
 800af0c:	20000024 	.word	0x20000024
 800af10:	0800efad 	.word	0x0800efad
 800af14:	0800efba 	.word	0x0800efba
 800af18:	0800efe8 	.word	0x0800efe8

0800af1c <fiprintf>:
 800af1c:	b40e      	push	{r1, r2, r3}
 800af1e:	b503      	push	{r0, r1, lr}
 800af20:	4601      	mov	r1, r0
 800af22:	ab03      	add	r3, sp, #12
 800af24:	4805      	ldr	r0, [pc, #20]	; (800af3c <fiprintf+0x20>)
 800af26:	f853 2b04 	ldr.w	r2, [r3], #4
 800af2a:	6800      	ldr	r0, [r0, #0]
 800af2c:	9301      	str	r3, [sp, #4]
 800af2e:	f000 f87d 	bl	800b02c <_vfiprintf_r>
 800af32:	b002      	add	sp, #8
 800af34:	f85d eb04 	ldr.w	lr, [sp], #4
 800af38:	b003      	add	sp, #12
 800af3a:	4770      	bx	lr
 800af3c:	20000024 	.word	0x20000024

0800af40 <memmove>:
 800af40:	4288      	cmp	r0, r1
 800af42:	b510      	push	{r4, lr}
 800af44:	eb01 0402 	add.w	r4, r1, r2
 800af48:	d902      	bls.n	800af50 <memmove+0x10>
 800af4a:	4284      	cmp	r4, r0
 800af4c:	4623      	mov	r3, r4
 800af4e:	d807      	bhi.n	800af60 <memmove+0x20>
 800af50:	1e43      	subs	r3, r0, #1
 800af52:	42a1      	cmp	r1, r4
 800af54:	d008      	beq.n	800af68 <memmove+0x28>
 800af56:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af5e:	e7f8      	b.n	800af52 <memmove+0x12>
 800af60:	4402      	add	r2, r0
 800af62:	4601      	mov	r1, r0
 800af64:	428a      	cmp	r2, r1
 800af66:	d100      	bne.n	800af6a <memmove+0x2a>
 800af68:	bd10      	pop	{r4, pc}
 800af6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af72:	e7f7      	b.n	800af64 <memmove+0x24>

0800af74 <__malloc_lock>:
 800af74:	4801      	ldr	r0, [pc, #4]	; (800af7c <__malloc_lock+0x8>)
 800af76:	f000 bc09 	b.w	800b78c <__retarget_lock_acquire_recursive>
 800af7a:	bf00      	nop
 800af7c:	200005fc 	.word	0x200005fc

0800af80 <__malloc_unlock>:
 800af80:	4801      	ldr	r0, [pc, #4]	; (800af88 <__malloc_unlock+0x8>)
 800af82:	f000 bc04 	b.w	800b78e <__retarget_lock_release_recursive>
 800af86:	bf00      	nop
 800af88:	200005fc 	.word	0x200005fc

0800af8c <_realloc_r>:
 800af8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af8e:	4607      	mov	r7, r0
 800af90:	4614      	mov	r4, r2
 800af92:	460e      	mov	r6, r1
 800af94:	b921      	cbnz	r1, 800afa0 <_realloc_r+0x14>
 800af96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af9a:	4611      	mov	r1, r2
 800af9c:	f7ff bdb2 	b.w	800ab04 <_malloc_r>
 800afa0:	b922      	cbnz	r2, 800afac <_realloc_r+0x20>
 800afa2:	f7ff fd5f 	bl	800aa64 <_free_r>
 800afa6:	4625      	mov	r5, r4
 800afa8:	4628      	mov	r0, r5
 800afaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afac:	f000 fc54 	bl	800b858 <_malloc_usable_size_r>
 800afb0:	42a0      	cmp	r0, r4
 800afb2:	d20f      	bcs.n	800afd4 <_realloc_r+0x48>
 800afb4:	4621      	mov	r1, r4
 800afb6:	4638      	mov	r0, r7
 800afb8:	f7ff fda4 	bl	800ab04 <_malloc_r>
 800afbc:	4605      	mov	r5, r0
 800afbe:	2800      	cmp	r0, #0
 800afc0:	d0f2      	beq.n	800afa8 <_realloc_r+0x1c>
 800afc2:	4631      	mov	r1, r6
 800afc4:	4622      	mov	r2, r4
 800afc6:	f7ff f875 	bl	800a0b4 <memcpy>
 800afca:	4631      	mov	r1, r6
 800afcc:	4638      	mov	r0, r7
 800afce:	f7ff fd49 	bl	800aa64 <_free_r>
 800afd2:	e7e9      	b.n	800afa8 <_realloc_r+0x1c>
 800afd4:	4635      	mov	r5, r6
 800afd6:	e7e7      	b.n	800afa8 <_realloc_r+0x1c>

0800afd8 <__sfputc_r>:
 800afd8:	6893      	ldr	r3, [r2, #8]
 800afda:	3b01      	subs	r3, #1
 800afdc:	2b00      	cmp	r3, #0
 800afde:	b410      	push	{r4}
 800afe0:	6093      	str	r3, [r2, #8]
 800afe2:	da08      	bge.n	800aff6 <__sfputc_r+0x1e>
 800afe4:	6994      	ldr	r4, [r2, #24]
 800afe6:	42a3      	cmp	r3, r4
 800afe8:	db01      	blt.n	800afee <__sfputc_r+0x16>
 800afea:	290a      	cmp	r1, #10
 800afec:	d103      	bne.n	800aff6 <__sfputc_r+0x1e>
 800afee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aff2:	f000 b94b 	b.w	800b28c <__swbuf_r>
 800aff6:	6813      	ldr	r3, [r2, #0]
 800aff8:	1c58      	adds	r0, r3, #1
 800affa:	6010      	str	r0, [r2, #0]
 800affc:	7019      	strb	r1, [r3, #0]
 800affe:	4608      	mov	r0, r1
 800b000:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <__sfputs_r>:
 800b006:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b008:	4606      	mov	r6, r0
 800b00a:	460f      	mov	r7, r1
 800b00c:	4614      	mov	r4, r2
 800b00e:	18d5      	adds	r5, r2, r3
 800b010:	42ac      	cmp	r4, r5
 800b012:	d101      	bne.n	800b018 <__sfputs_r+0x12>
 800b014:	2000      	movs	r0, #0
 800b016:	e007      	b.n	800b028 <__sfputs_r+0x22>
 800b018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b01c:	463a      	mov	r2, r7
 800b01e:	4630      	mov	r0, r6
 800b020:	f7ff ffda 	bl	800afd8 <__sfputc_r>
 800b024:	1c43      	adds	r3, r0, #1
 800b026:	d1f3      	bne.n	800b010 <__sfputs_r+0xa>
 800b028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b02c <_vfiprintf_r>:
 800b02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b030:	460d      	mov	r5, r1
 800b032:	b09d      	sub	sp, #116	; 0x74
 800b034:	4614      	mov	r4, r2
 800b036:	4698      	mov	r8, r3
 800b038:	4606      	mov	r6, r0
 800b03a:	b118      	cbz	r0, 800b044 <_vfiprintf_r+0x18>
 800b03c:	6983      	ldr	r3, [r0, #24]
 800b03e:	b90b      	cbnz	r3, 800b044 <_vfiprintf_r+0x18>
 800b040:	f000 fb06 	bl	800b650 <__sinit>
 800b044:	4b89      	ldr	r3, [pc, #548]	; (800b26c <_vfiprintf_r+0x240>)
 800b046:	429d      	cmp	r5, r3
 800b048:	d11b      	bne.n	800b082 <_vfiprintf_r+0x56>
 800b04a:	6875      	ldr	r5, [r6, #4]
 800b04c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b04e:	07d9      	lsls	r1, r3, #31
 800b050:	d405      	bmi.n	800b05e <_vfiprintf_r+0x32>
 800b052:	89ab      	ldrh	r3, [r5, #12]
 800b054:	059a      	lsls	r2, r3, #22
 800b056:	d402      	bmi.n	800b05e <_vfiprintf_r+0x32>
 800b058:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b05a:	f000 fb97 	bl	800b78c <__retarget_lock_acquire_recursive>
 800b05e:	89ab      	ldrh	r3, [r5, #12]
 800b060:	071b      	lsls	r3, r3, #28
 800b062:	d501      	bpl.n	800b068 <_vfiprintf_r+0x3c>
 800b064:	692b      	ldr	r3, [r5, #16]
 800b066:	b9eb      	cbnz	r3, 800b0a4 <_vfiprintf_r+0x78>
 800b068:	4629      	mov	r1, r5
 800b06a:	4630      	mov	r0, r6
 800b06c:	f000 f960 	bl	800b330 <__swsetup_r>
 800b070:	b1c0      	cbz	r0, 800b0a4 <_vfiprintf_r+0x78>
 800b072:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b074:	07dc      	lsls	r4, r3, #31
 800b076:	d50e      	bpl.n	800b096 <_vfiprintf_r+0x6a>
 800b078:	f04f 30ff 	mov.w	r0, #4294967295
 800b07c:	b01d      	add	sp, #116	; 0x74
 800b07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b082:	4b7b      	ldr	r3, [pc, #492]	; (800b270 <_vfiprintf_r+0x244>)
 800b084:	429d      	cmp	r5, r3
 800b086:	d101      	bne.n	800b08c <_vfiprintf_r+0x60>
 800b088:	68b5      	ldr	r5, [r6, #8]
 800b08a:	e7df      	b.n	800b04c <_vfiprintf_r+0x20>
 800b08c:	4b79      	ldr	r3, [pc, #484]	; (800b274 <_vfiprintf_r+0x248>)
 800b08e:	429d      	cmp	r5, r3
 800b090:	bf08      	it	eq
 800b092:	68f5      	ldreq	r5, [r6, #12]
 800b094:	e7da      	b.n	800b04c <_vfiprintf_r+0x20>
 800b096:	89ab      	ldrh	r3, [r5, #12]
 800b098:	0598      	lsls	r0, r3, #22
 800b09a:	d4ed      	bmi.n	800b078 <_vfiprintf_r+0x4c>
 800b09c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b09e:	f000 fb76 	bl	800b78e <__retarget_lock_release_recursive>
 800b0a2:	e7e9      	b.n	800b078 <_vfiprintf_r+0x4c>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b0a8:	2320      	movs	r3, #32
 800b0aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b0ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0b2:	2330      	movs	r3, #48	; 0x30
 800b0b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b278 <_vfiprintf_r+0x24c>
 800b0b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b0bc:	f04f 0901 	mov.w	r9, #1
 800b0c0:	4623      	mov	r3, r4
 800b0c2:	469a      	mov	sl, r3
 800b0c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0c8:	b10a      	cbz	r2, 800b0ce <_vfiprintf_r+0xa2>
 800b0ca:	2a25      	cmp	r2, #37	; 0x25
 800b0cc:	d1f9      	bne.n	800b0c2 <_vfiprintf_r+0x96>
 800b0ce:	ebba 0b04 	subs.w	fp, sl, r4
 800b0d2:	d00b      	beq.n	800b0ec <_vfiprintf_r+0xc0>
 800b0d4:	465b      	mov	r3, fp
 800b0d6:	4622      	mov	r2, r4
 800b0d8:	4629      	mov	r1, r5
 800b0da:	4630      	mov	r0, r6
 800b0dc:	f7ff ff93 	bl	800b006 <__sfputs_r>
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	f000 80aa 	beq.w	800b23a <_vfiprintf_r+0x20e>
 800b0e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b0e8:	445a      	add	r2, fp
 800b0ea:	9209      	str	r2, [sp, #36]	; 0x24
 800b0ec:	f89a 3000 	ldrb.w	r3, [sl]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	f000 80a2 	beq.w	800b23a <_vfiprintf_r+0x20e>
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b100:	f10a 0a01 	add.w	sl, sl, #1
 800b104:	9304      	str	r3, [sp, #16]
 800b106:	9307      	str	r3, [sp, #28]
 800b108:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b10c:	931a      	str	r3, [sp, #104]	; 0x68
 800b10e:	4654      	mov	r4, sl
 800b110:	2205      	movs	r2, #5
 800b112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b116:	4858      	ldr	r0, [pc, #352]	; (800b278 <_vfiprintf_r+0x24c>)
 800b118:	f7f5 f862 	bl	80001e0 <memchr>
 800b11c:	9a04      	ldr	r2, [sp, #16]
 800b11e:	b9d8      	cbnz	r0, 800b158 <_vfiprintf_r+0x12c>
 800b120:	06d1      	lsls	r1, r2, #27
 800b122:	bf44      	itt	mi
 800b124:	2320      	movmi	r3, #32
 800b126:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b12a:	0713      	lsls	r3, r2, #28
 800b12c:	bf44      	itt	mi
 800b12e:	232b      	movmi	r3, #43	; 0x2b
 800b130:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b134:	f89a 3000 	ldrb.w	r3, [sl]
 800b138:	2b2a      	cmp	r3, #42	; 0x2a
 800b13a:	d015      	beq.n	800b168 <_vfiprintf_r+0x13c>
 800b13c:	9a07      	ldr	r2, [sp, #28]
 800b13e:	4654      	mov	r4, sl
 800b140:	2000      	movs	r0, #0
 800b142:	f04f 0c0a 	mov.w	ip, #10
 800b146:	4621      	mov	r1, r4
 800b148:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b14c:	3b30      	subs	r3, #48	; 0x30
 800b14e:	2b09      	cmp	r3, #9
 800b150:	d94e      	bls.n	800b1f0 <_vfiprintf_r+0x1c4>
 800b152:	b1b0      	cbz	r0, 800b182 <_vfiprintf_r+0x156>
 800b154:	9207      	str	r2, [sp, #28]
 800b156:	e014      	b.n	800b182 <_vfiprintf_r+0x156>
 800b158:	eba0 0308 	sub.w	r3, r0, r8
 800b15c:	fa09 f303 	lsl.w	r3, r9, r3
 800b160:	4313      	orrs	r3, r2
 800b162:	9304      	str	r3, [sp, #16]
 800b164:	46a2      	mov	sl, r4
 800b166:	e7d2      	b.n	800b10e <_vfiprintf_r+0xe2>
 800b168:	9b03      	ldr	r3, [sp, #12]
 800b16a:	1d19      	adds	r1, r3, #4
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	9103      	str	r1, [sp, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	bfbb      	ittet	lt
 800b174:	425b      	neglt	r3, r3
 800b176:	f042 0202 	orrlt.w	r2, r2, #2
 800b17a:	9307      	strge	r3, [sp, #28]
 800b17c:	9307      	strlt	r3, [sp, #28]
 800b17e:	bfb8      	it	lt
 800b180:	9204      	strlt	r2, [sp, #16]
 800b182:	7823      	ldrb	r3, [r4, #0]
 800b184:	2b2e      	cmp	r3, #46	; 0x2e
 800b186:	d10c      	bne.n	800b1a2 <_vfiprintf_r+0x176>
 800b188:	7863      	ldrb	r3, [r4, #1]
 800b18a:	2b2a      	cmp	r3, #42	; 0x2a
 800b18c:	d135      	bne.n	800b1fa <_vfiprintf_r+0x1ce>
 800b18e:	9b03      	ldr	r3, [sp, #12]
 800b190:	1d1a      	adds	r2, r3, #4
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	9203      	str	r2, [sp, #12]
 800b196:	2b00      	cmp	r3, #0
 800b198:	bfb8      	it	lt
 800b19a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b19e:	3402      	adds	r4, #2
 800b1a0:	9305      	str	r3, [sp, #20]
 800b1a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b288 <_vfiprintf_r+0x25c>
 800b1a6:	7821      	ldrb	r1, [r4, #0]
 800b1a8:	2203      	movs	r2, #3
 800b1aa:	4650      	mov	r0, sl
 800b1ac:	f7f5 f818 	bl	80001e0 <memchr>
 800b1b0:	b140      	cbz	r0, 800b1c4 <_vfiprintf_r+0x198>
 800b1b2:	2340      	movs	r3, #64	; 0x40
 800b1b4:	eba0 000a 	sub.w	r0, r0, sl
 800b1b8:	fa03 f000 	lsl.w	r0, r3, r0
 800b1bc:	9b04      	ldr	r3, [sp, #16]
 800b1be:	4303      	orrs	r3, r0
 800b1c0:	3401      	adds	r4, #1
 800b1c2:	9304      	str	r3, [sp, #16]
 800b1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1c8:	482c      	ldr	r0, [pc, #176]	; (800b27c <_vfiprintf_r+0x250>)
 800b1ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b1ce:	2206      	movs	r2, #6
 800b1d0:	f7f5 f806 	bl	80001e0 <memchr>
 800b1d4:	2800      	cmp	r0, #0
 800b1d6:	d03f      	beq.n	800b258 <_vfiprintf_r+0x22c>
 800b1d8:	4b29      	ldr	r3, [pc, #164]	; (800b280 <_vfiprintf_r+0x254>)
 800b1da:	bb1b      	cbnz	r3, 800b224 <_vfiprintf_r+0x1f8>
 800b1dc:	9b03      	ldr	r3, [sp, #12]
 800b1de:	3307      	adds	r3, #7
 800b1e0:	f023 0307 	bic.w	r3, r3, #7
 800b1e4:	3308      	adds	r3, #8
 800b1e6:	9303      	str	r3, [sp, #12]
 800b1e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1ea:	443b      	add	r3, r7
 800b1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b1ee:	e767      	b.n	800b0c0 <_vfiprintf_r+0x94>
 800b1f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1f4:	460c      	mov	r4, r1
 800b1f6:	2001      	movs	r0, #1
 800b1f8:	e7a5      	b.n	800b146 <_vfiprintf_r+0x11a>
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	3401      	adds	r4, #1
 800b1fe:	9305      	str	r3, [sp, #20]
 800b200:	4619      	mov	r1, r3
 800b202:	f04f 0c0a 	mov.w	ip, #10
 800b206:	4620      	mov	r0, r4
 800b208:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b20c:	3a30      	subs	r2, #48	; 0x30
 800b20e:	2a09      	cmp	r2, #9
 800b210:	d903      	bls.n	800b21a <_vfiprintf_r+0x1ee>
 800b212:	2b00      	cmp	r3, #0
 800b214:	d0c5      	beq.n	800b1a2 <_vfiprintf_r+0x176>
 800b216:	9105      	str	r1, [sp, #20]
 800b218:	e7c3      	b.n	800b1a2 <_vfiprintf_r+0x176>
 800b21a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b21e:	4604      	mov	r4, r0
 800b220:	2301      	movs	r3, #1
 800b222:	e7f0      	b.n	800b206 <_vfiprintf_r+0x1da>
 800b224:	ab03      	add	r3, sp, #12
 800b226:	9300      	str	r3, [sp, #0]
 800b228:	462a      	mov	r2, r5
 800b22a:	4b16      	ldr	r3, [pc, #88]	; (800b284 <_vfiprintf_r+0x258>)
 800b22c:	a904      	add	r1, sp, #16
 800b22e:	4630      	mov	r0, r6
 800b230:	f7fc f884 	bl	800733c <_printf_float>
 800b234:	4607      	mov	r7, r0
 800b236:	1c78      	adds	r0, r7, #1
 800b238:	d1d6      	bne.n	800b1e8 <_vfiprintf_r+0x1bc>
 800b23a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b23c:	07d9      	lsls	r1, r3, #31
 800b23e:	d405      	bmi.n	800b24c <_vfiprintf_r+0x220>
 800b240:	89ab      	ldrh	r3, [r5, #12]
 800b242:	059a      	lsls	r2, r3, #22
 800b244:	d402      	bmi.n	800b24c <_vfiprintf_r+0x220>
 800b246:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b248:	f000 faa1 	bl	800b78e <__retarget_lock_release_recursive>
 800b24c:	89ab      	ldrh	r3, [r5, #12]
 800b24e:	065b      	lsls	r3, r3, #25
 800b250:	f53f af12 	bmi.w	800b078 <_vfiprintf_r+0x4c>
 800b254:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b256:	e711      	b.n	800b07c <_vfiprintf_r+0x50>
 800b258:	ab03      	add	r3, sp, #12
 800b25a:	9300      	str	r3, [sp, #0]
 800b25c:	462a      	mov	r2, r5
 800b25e:	4b09      	ldr	r3, [pc, #36]	; (800b284 <_vfiprintf_r+0x258>)
 800b260:	a904      	add	r1, sp, #16
 800b262:	4630      	mov	r0, r6
 800b264:	f7fc fb0e 	bl	8007884 <_printf_i>
 800b268:	e7e4      	b.n	800b234 <_vfiprintf_r+0x208>
 800b26a:	bf00      	nop
 800b26c:	0800f00c 	.word	0x0800f00c
 800b270:	0800f02c 	.word	0x0800f02c
 800b274:	0800efec 	.word	0x0800efec
 800b278:	0800ef9c 	.word	0x0800ef9c
 800b27c:	0800efa6 	.word	0x0800efa6
 800b280:	0800733d 	.word	0x0800733d
 800b284:	0800b007 	.word	0x0800b007
 800b288:	0800efa2 	.word	0x0800efa2

0800b28c <__swbuf_r>:
 800b28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b28e:	460e      	mov	r6, r1
 800b290:	4614      	mov	r4, r2
 800b292:	4605      	mov	r5, r0
 800b294:	b118      	cbz	r0, 800b29e <__swbuf_r+0x12>
 800b296:	6983      	ldr	r3, [r0, #24]
 800b298:	b90b      	cbnz	r3, 800b29e <__swbuf_r+0x12>
 800b29a:	f000 f9d9 	bl	800b650 <__sinit>
 800b29e:	4b21      	ldr	r3, [pc, #132]	; (800b324 <__swbuf_r+0x98>)
 800b2a0:	429c      	cmp	r4, r3
 800b2a2:	d12b      	bne.n	800b2fc <__swbuf_r+0x70>
 800b2a4:	686c      	ldr	r4, [r5, #4]
 800b2a6:	69a3      	ldr	r3, [r4, #24]
 800b2a8:	60a3      	str	r3, [r4, #8]
 800b2aa:	89a3      	ldrh	r3, [r4, #12]
 800b2ac:	071a      	lsls	r2, r3, #28
 800b2ae:	d52f      	bpl.n	800b310 <__swbuf_r+0x84>
 800b2b0:	6923      	ldr	r3, [r4, #16]
 800b2b2:	b36b      	cbz	r3, 800b310 <__swbuf_r+0x84>
 800b2b4:	6923      	ldr	r3, [r4, #16]
 800b2b6:	6820      	ldr	r0, [r4, #0]
 800b2b8:	1ac0      	subs	r0, r0, r3
 800b2ba:	6963      	ldr	r3, [r4, #20]
 800b2bc:	b2f6      	uxtb	r6, r6
 800b2be:	4283      	cmp	r3, r0
 800b2c0:	4637      	mov	r7, r6
 800b2c2:	dc04      	bgt.n	800b2ce <__swbuf_r+0x42>
 800b2c4:	4621      	mov	r1, r4
 800b2c6:	4628      	mov	r0, r5
 800b2c8:	f000 f92e 	bl	800b528 <_fflush_r>
 800b2cc:	bb30      	cbnz	r0, 800b31c <__swbuf_r+0x90>
 800b2ce:	68a3      	ldr	r3, [r4, #8]
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	60a3      	str	r3, [r4, #8]
 800b2d4:	6823      	ldr	r3, [r4, #0]
 800b2d6:	1c5a      	adds	r2, r3, #1
 800b2d8:	6022      	str	r2, [r4, #0]
 800b2da:	701e      	strb	r6, [r3, #0]
 800b2dc:	6963      	ldr	r3, [r4, #20]
 800b2de:	3001      	adds	r0, #1
 800b2e0:	4283      	cmp	r3, r0
 800b2e2:	d004      	beq.n	800b2ee <__swbuf_r+0x62>
 800b2e4:	89a3      	ldrh	r3, [r4, #12]
 800b2e6:	07db      	lsls	r3, r3, #31
 800b2e8:	d506      	bpl.n	800b2f8 <__swbuf_r+0x6c>
 800b2ea:	2e0a      	cmp	r6, #10
 800b2ec:	d104      	bne.n	800b2f8 <__swbuf_r+0x6c>
 800b2ee:	4621      	mov	r1, r4
 800b2f0:	4628      	mov	r0, r5
 800b2f2:	f000 f919 	bl	800b528 <_fflush_r>
 800b2f6:	b988      	cbnz	r0, 800b31c <__swbuf_r+0x90>
 800b2f8:	4638      	mov	r0, r7
 800b2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b2fc:	4b0a      	ldr	r3, [pc, #40]	; (800b328 <__swbuf_r+0x9c>)
 800b2fe:	429c      	cmp	r4, r3
 800b300:	d101      	bne.n	800b306 <__swbuf_r+0x7a>
 800b302:	68ac      	ldr	r4, [r5, #8]
 800b304:	e7cf      	b.n	800b2a6 <__swbuf_r+0x1a>
 800b306:	4b09      	ldr	r3, [pc, #36]	; (800b32c <__swbuf_r+0xa0>)
 800b308:	429c      	cmp	r4, r3
 800b30a:	bf08      	it	eq
 800b30c:	68ec      	ldreq	r4, [r5, #12]
 800b30e:	e7ca      	b.n	800b2a6 <__swbuf_r+0x1a>
 800b310:	4621      	mov	r1, r4
 800b312:	4628      	mov	r0, r5
 800b314:	f000 f80c 	bl	800b330 <__swsetup_r>
 800b318:	2800      	cmp	r0, #0
 800b31a:	d0cb      	beq.n	800b2b4 <__swbuf_r+0x28>
 800b31c:	f04f 37ff 	mov.w	r7, #4294967295
 800b320:	e7ea      	b.n	800b2f8 <__swbuf_r+0x6c>
 800b322:	bf00      	nop
 800b324:	0800f00c 	.word	0x0800f00c
 800b328:	0800f02c 	.word	0x0800f02c
 800b32c:	0800efec 	.word	0x0800efec

0800b330 <__swsetup_r>:
 800b330:	4b32      	ldr	r3, [pc, #200]	; (800b3fc <__swsetup_r+0xcc>)
 800b332:	b570      	push	{r4, r5, r6, lr}
 800b334:	681d      	ldr	r5, [r3, #0]
 800b336:	4606      	mov	r6, r0
 800b338:	460c      	mov	r4, r1
 800b33a:	b125      	cbz	r5, 800b346 <__swsetup_r+0x16>
 800b33c:	69ab      	ldr	r3, [r5, #24]
 800b33e:	b913      	cbnz	r3, 800b346 <__swsetup_r+0x16>
 800b340:	4628      	mov	r0, r5
 800b342:	f000 f985 	bl	800b650 <__sinit>
 800b346:	4b2e      	ldr	r3, [pc, #184]	; (800b400 <__swsetup_r+0xd0>)
 800b348:	429c      	cmp	r4, r3
 800b34a:	d10f      	bne.n	800b36c <__swsetup_r+0x3c>
 800b34c:	686c      	ldr	r4, [r5, #4]
 800b34e:	89a3      	ldrh	r3, [r4, #12]
 800b350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b354:	0719      	lsls	r1, r3, #28
 800b356:	d42c      	bmi.n	800b3b2 <__swsetup_r+0x82>
 800b358:	06dd      	lsls	r5, r3, #27
 800b35a:	d411      	bmi.n	800b380 <__swsetup_r+0x50>
 800b35c:	2309      	movs	r3, #9
 800b35e:	6033      	str	r3, [r6, #0]
 800b360:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b364:	81a3      	strh	r3, [r4, #12]
 800b366:	f04f 30ff 	mov.w	r0, #4294967295
 800b36a:	e03e      	b.n	800b3ea <__swsetup_r+0xba>
 800b36c:	4b25      	ldr	r3, [pc, #148]	; (800b404 <__swsetup_r+0xd4>)
 800b36e:	429c      	cmp	r4, r3
 800b370:	d101      	bne.n	800b376 <__swsetup_r+0x46>
 800b372:	68ac      	ldr	r4, [r5, #8]
 800b374:	e7eb      	b.n	800b34e <__swsetup_r+0x1e>
 800b376:	4b24      	ldr	r3, [pc, #144]	; (800b408 <__swsetup_r+0xd8>)
 800b378:	429c      	cmp	r4, r3
 800b37a:	bf08      	it	eq
 800b37c:	68ec      	ldreq	r4, [r5, #12]
 800b37e:	e7e6      	b.n	800b34e <__swsetup_r+0x1e>
 800b380:	0758      	lsls	r0, r3, #29
 800b382:	d512      	bpl.n	800b3aa <__swsetup_r+0x7a>
 800b384:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b386:	b141      	cbz	r1, 800b39a <__swsetup_r+0x6a>
 800b388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b38c:	4299      	cmp	r1, r3
 800b38e:	d002      	beq.n	800b396 <__swsetup_r+0x66>
 800b390:	4630      	mov	r0, r6
 800b392:	f7ff fb67 	bl	800aa64 <_free_r>
 800b396:	2300      	movs	r3, #0
 800b398:	6363      	str	r3, [r4, #52]	; 0x34
 800b39a:	89a3      	ldrh	r3, [r4, #12]
 800b39c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b3a0:	81a3      	strh	r3, [r4, #12]
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	6063      	str	r3, [r4, #4]
 800b3a6:	6923      	ldr	r3, [r4, #16]
 800b3a8:	6023      	str	r3, [r4, #0]
 800b3aa:	89a3      	ldrh	r3, [r4, #12]
 800b3ac:	f043 0308 	orr.w	r3, r3, #8
 800b3b0:	81a3      	strh	r3, [r4, #12]
 800b3b2:	6923      	ldr	r3, [r4, #16]
 800b3b4:	b94b      	cbnz	r3, 800b3ca <__swsetup_r+0x9a>
 800b3b6:	89a3      	ldrh	r3, [r4, #12]
 800b3b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b3bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b3c0:	d003      	beq.n	800b3ca <__swsetup_r+0x9a>
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	f000 fa07 	bl	800b7d8 <__smakebuf_r>
 800b3ca:	89a0      	ldrh	r0, [r4, #12]
 800b3cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3d0:	f010 0301 	ands.w	r3, r0, #1
 800b3d4:	d00a      	beq.n	800b3ec <__swsetup_r+0xbc>
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	60a3      	str	r3, [r4, #8]
 800b3da:	6963      	ldr	r3, [r4, #20]
 800b3dc:	425b      	negs	r3, r3
 800b3de:	61a3      	str	r3, [r4, #24]
 800b3e0:	6923      	ldr	r3, [r4, #16]
 800b3e2:	b943      	cbnz	r3, 800b3f6 <__swsetup_r+0xc6>
 800b3e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b3e8:	d1ba      	bne.n	800b360 <__swsetup_r+0x30>
 800b3ea:	bd70      	pop	{r4, r5, r6, pc}
 800b3ec:	0781      	lsls	r1, r0, #30
 800b3ee:	bf58      	it	pl
 800b3f0:	6963      	ldrpl	r3, [r4, #20]
 800b3f2:	60a3      	str	r3, [r4, #8]
 800b3f4:	e7f4      	b.n	800b3e0 <__swsetup_r+0xb0>
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	e7f7      	b.n	800b3ea <__swsetup_r+0xba>
 800b3fa:	bf00      	nop
 800b3fc:	20000024 	.word	0x20000024
 800b400:	0800f00c 	.word	0x0800f00c
 800b404:	0800f02c 	.word	0x0800f02c
 800b408:	0800efec 	.word	0x0800efec

0800b40c <abort>:
 800b40c:	b508      	push	{r3, lr}
 800b40e:	2006      	movs	r0, #6
 800b410:	f000 fa52 	bl	800b8b8 <raise>
 800b414:	2001      	movs	r0, #1
 800b416:	f7f7 fcf7 	bl	8002e08 <_exit>
	...

0800b41c <__sflush_r>:
 800b41c:	898a      	ldrh	r2, [r1, #12]
 800b41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b422:	4605      	mov	r5, r0
 800b424:	0710      	lsls	r0, r2, #28
 800b426:	460c      	mov	r4, r1
 800b428:	d458      	bmi.n	800b4dc <__sflush_r+0xc0>
 800b42a:	684b      	ldr	r3, [r1, #4]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	dc05      	bgt.n	800b43c <__sflush_r+0x20>
 800b430:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b432:	2b00      	cmp	r3, #0
 800b434:	dc02      	bgt.n	800b43c <__sflush_r+0x20>
 800b436:	2000      	movs	r0, #0
 800b438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b43c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b43e:	2e00      	cmp	r6, #0
 800b440:	d0f9      	beq.n	800b436 <__sflush_r+0x1a>
 800b442:	2300      	movs	r3, #0
 800b444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b448:	682f      	ldr	r7, [r5, #0]
 800b44a:	602b      	str	r3, [r5, #0]
 800b44c:	d032      	beq.n	800b4b4 <__sflush_r+0x98>
 800b44e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b450:	89a3      	ldrh	r3, [r4, #12]
 800b452:	075a      	lsls	r2, r3, #29
 800b454:	d505      	bpl.n	800b462 <__sflush_r+0x46>
 800b456:	6863      	ldr	r3, [r4, #4]
 800b458:	1ac0      	subs	r0, r0, r3
 800b45a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b45c:	b10b      	cbz	r3, 800b462 <__sflush_r+0x46>
 800b45e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b460:	1ac0      	subs	r0, r0, r3
 800b462:	2300      	movs	r3, #0
 800b464:	4602      	mov	r2, r0
 800b466:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b468:	6a21      	ldr	r1, [r4, #32]
 800b46a:	4628      	mov	r0, r5
 800b46c:	47b0      	blx	r6
 800b46e:	1c43      	adds	r3, r0, #1
 800b470:	89a3      	ldrh	r3, [r4, #12]
 800b472:	d106      	bne.n	800b482 <__sflush_r+0x66>
 800b474:	6829      	ldr	r1, [r5, #0]
 800b476:	291d      	cmp	r1, #29
 800b478:	d82c      	bhi.n	800b4d4 <__sflush_r+0xb8>
 800b47a:	4a2a      	ldr	r2, [pc, #168]	; (800b524 <__sflush_r+0x108>)
 800b47c:	40ca      	lsrs	r2, r1
 800b47e:	07d6      	lsls	r6, r2, #31
 800b480:	d528      	bpl.n	800b4d4 <__sflush_r+0xb8>
 800b482:	2200      	movs	r2, #0
 800b484:	6062      	str	r2, [r4, #4]
 800b486:	04d9      	lsls	r1, r3, #19
 800b488:	6922      	ldr	r2, [r4, #16]
 800b48a:	6022      	str	r2, [r4, #0]
 800b48c:	d504      	bpl.n	800b498 <__sflush_r+0x7c>
 800b48e:	1c42      	adds	r2, r0, #1
 800b490:	d101      	bne.n	800b496 <__sflush_r+0x7a>
 800b492:	682b      	ldr	r3, [r5, #0]
 800b494:	b903      	cbnz	r3, 800b498 <__sflush_r+0x7c>
 800b496:	6560      	str	r0, [r4, #84]	; 0x54
 800b498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b49a:	602f      	str	r7, [r5, #0]
 800b49c:	2900      	cmp	r1, #0
 800b49e:	d0ca      	beq.n	800b436 <__sflush_r+0x1a>
 800b4a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4a4:	4299      	cmp	r1, r3
 800b4a6:	d002      	beq.n	800b4ae <__sflush_r+0x92>
 800b4a8:	4628      	mov	r0, r5
 800b4aa:	f7ff fadb 	bl	800aa64 <_free_r>
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	6360      	str	r0, [r4, #52]	; 0x34
 800b4b2:	e7c1      	b.n	800b438 <__sflush_r+0x1c>
 800b4b4:	6a21      	ldr	r1, [r4, #32]
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	4628      	mov	r0, r5
 800b4ba:	47b0      	blx	r6
 800b4bc:	1c41      	adds	r1, r0, #1
 800b4be:	d1c7      	bne.n	800b450 <__sflush_r+0x34>
 800b4c0:	682b      	ldr	r3, [r5, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d0c4      	beq.n	800b450 <__sflush_r+0x34>
 800b4c6:	2b1d      	cmp	r3, #29
 800b4c8:	d001      	beq.n	800b4ce <__sflush_r+0xb2>
 800b4ca:	2b16      	cmp	r3, #22
 800b4cc:	d101      	bne.n	800b4d2 <__sflush_r+0xb6>
 800b4ce:	602f      	str	r7, [r5, #0]
 800b4d0:	e7b1      	b.n	800b436 <__sflush_r+0x1a>
 800b4d2:	89a3      	ldrh	r3, [r4, #12]
 800b4d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4d8:	81a3      	strh	r3, [r4, #12]
 800b4da:	e7ad      	b.n	800b438 <__sflush_r+0x1c>
 800b4dc:	690f      	ldr	r7, [r1, #16]
 800b4de:	2f00      	cmp	r7, #0
 800b4e0:	d0a9      	beq.n	800b436 <__sflush_r+0x1a>
 800b4e2:	0793      	lsls	r3, r2, #30
 800b4e4:	680e      	ldr	r6, [r1, #0]
 800b4e6:	bf08      	it	eq
 800b4e8:	694b      	ldreq	r3, [r1, #20]
 800b4ea:	600f      	str	r7, [r1, #0]
 800b4ec:	bf18      	it	ne
 800b4ee:	2300      	movne	r3, #0
 800b4f0:	eba6 0807 	sub.w	r8, r6, r7
 800b4f4:	608b      	str	r3, [r1, #8]
 800b4f6:	f1b8 0f00 	cmp.w	r8, #0
 800b4fa:	dd9c      	ble.n	800b436 <__sflush_r+0x1a>
 800b4fc:	6a21      	ldr	r1, [r4, #32]
 800b4fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b500:	4643      	mov	r3, r8
 800b502:	463a      	mov	r2, r7
 800b504:	4628      	mov	r0, r5
 800b506:	47b0      	blx	r6
 800b508:	2800      	cmp	r0, #0
 800b50a:	dc06      	bgt.n	800b51a <__sflush_r+0xfe>
 800b50c:	89a3      	ldrh	r3, [r4, #12]
 800b50e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b512:	81a3      	strh	r3, [r4, #12]
 800b514:	f04f 30ff 	mov.w	r0, #4294967295
 800b518:	e78e      	b.n	800b438 <__sflush_r+0x1c>
 800b51a:	4407      	add	r7, r0
 800b51c:	eba8 0800 	sub.w	r8, r8, r0
 800b520:	e7e9      	b.n	800b4f6 <__sflush_r+0xda>
 800b522:	bf00      	nop
 800b524:	20400001 	.word	0x20400001

0800b528 <_fflush_r>:
 800b528:	b538      	push	{r3, r4, r5, lr}
 800b52a:	690b      	ldr	r3, [r1, #16]
 800b52c:	4605      	mov	r5, r0
 800b52e:	460c      	mov	r4, r1
 800b530:	b913      	cbnz	r3, 800b538 <_fflush_r+0x10>
 800b532:	2500      	movs	r5, #0
 800b534:	4628      	mov	r0, r5
 800b536:	bd38      	pop	{r3, r4, r5, pc}
 800b538:	b118      	cbz	r0, 800b542 <_fflush_r+0x1a>
 800b53a:	6983      	ldr	r3, [r0, #24]
 800b53c:	b90b      	cbnz	r3, 800b542 <_fflush_r+0x1a>
 800b53e:	f000 f887 	bl	800b650 <__sinit>
 800b542:	4b14      	ldr	r3, [pc, #80]	; (800b594 <_fflush_r+0x6c>)
 800b544:	429c      	cmp	r4, r3
 800b546:	d11b      	bne.n	800b580 <_fflush_r+0x58>
 800b548:	686c      	ldr	r4, [r5, #4]
 800b54a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d0ef      	beq.n	800b532 <_fflush_r+0xa>
 800b552:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b554:	07d0      	lsls	r0, r2, #31
 800b556:	d404      	bmi.n	800b562 <_fflush_r+0x3a>
 800b558:	0599      	lsls	r1, r3, #22
 800b55a:	d402      	bmi.n	800b562 <_fflush_r+0x3a>
 800b55c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b55e:	f000 f915 	bl	800b78c <__retarget_lock_acquire_recursive>
 800b562:	4628      	mov	r0, r5
 800b564:	4621      	mov	r1, r4
 800b566:	f7ff ff59 	bl	800b41c <__sflush_r>
 800b56a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b56c:	07da      	lsls	r2, r3, #31
 800b56e:	4605      	mov	r5, r0
 800b570:	d4e0      	bmi.n	800b534 <_fflush_r+0xc>
 800b572:	89a3      	ldrh	r3, [r4, #12]
 800b574:	059b      	lsls	r3, r3, #22
 800b576:	d4dd      	bmi.n	800b534 <_fflush_r+0xc>
 800b578:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b57a:	f000 f908 	bl	800b78e <__retarget_lock_release_recursive>
 800b57e:	e7d9      	b.n	800b534 <_fflush_r+0xc>
 800b580:	4b05      	ldr	r3, [pc, #20]	; (800b598 <_fflush_r+0x70>)
 800b582:	429c      	cmp	r4, r3
 800b584:	d101      	bne.n	800b58a <_fflush_r+0x62>
 800b586:	68ac      	ldr	r4, [r5, #8]
 800b588:	e7df      	b.n	800b54a <_fflush_r+0x22>
 800b58a:	4b04      	ldr	r3, [pc, #16]	; (800b59c <_fflush_r+0x74>)
 800b58c:	429c      	cmp	r4, r3
 800b58e:	bf08      	it	eq
 800b590:	68ec      	ldreq	r4, [r5, #12]
 800b592:	e7da      	b.n	800b54a <_fflush_r+0x22>
 800b594:	0800f00c 	.word	0x0800f00c
 800b598:	0800f02c 	.word	0x0800f02c
 800b59c:	0800efec 	.word	0x0800efec

0800b5a0 <std>:
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	b510      	push	{r4, lr}
 800b5a4:	4604      	mov	r4, r0
 800b5a6:	e9c0 3300 	strd	r3, r3, [r0]
 800b5aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5ae:	6083      	str	r3, [r0, #8]
 800b5b0:	8181      	strh	r1, [r0, #12]
 800b5b2:	6643      	str	r3, [r0, #100]	; 0x64
 800b5b4:	81c2      	strh	r2, [r0, #14]
 800b5b6:	6183      	str	r3, [r0, #24]
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	2208      	movs	r2, #8
 800b5bc:	305c      	adds	r0, #92	; 0x5c
 800b5be:	f7fb fe15 	bl	80071ec <memset>
 800b5c2:	4b05      	ldr	r3, [pc, #20]	; (800b5d8 <std+0x38>)
 800b5c4:	6263      	str	r3, [r4, #36]	; 0x24
 800b5c6:	4b05      	ldr	r3, [pc, #20]	; (800b5dc <std+0x3c>)
 800b5c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800b5ca:	4b05      	ldr	r3, [pc, #20]	; (800b5e0 <std+0x40>)
 800b5cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b5ce:	4b05      	ldr	r3, [pc, #20]	; (800b5e4 <std+0x44>)
 800b5d0:	6224      	str	r4, [r4, #32]
 800b5d2:	6323      	str	r3, [r4, #48]	; 0x30
 800b5d4:	bd10      	pop	{r4, pc}
 800b5d6:	bf00      	nop
 800b5d8:	0800b8f1 	.word	0x0800b8f1
 800b5dc:	0800b913 	.word	0x0800b913
 800b5e0:	0800b94b 	.word	0x0800b94b
 800b5e4:	0800b96f 	.word	0x0800b96f

0800b5e8 <_cleanup_r>:
 800b5e8:	4901      	ldr	r1, [pc, #4]	; (800b5f0 <_cleanup_r+0x8>)
 800b5ea:	f000 b8af 	b.w	800b74c <_fwalk_reent>
 800b5ee:	bf00      	nop
 800b5f0:	0800b529 	.word	0x0800b529

0800b5f4 <__sfmoreglue>:
 800b5f4:	b570      	push	{r4, r5, r6, lr}
 800b5f6:	1e4a      	subs	r2, r1, #1
 800b5f8:	2568      	movs	r5, #104	; 0x68
 800b5fa:	4355      	muls	r5, r2
 800b5fc:	460e      	mov	r6, r1
 800b5fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b602:	f7ff fa7f 	bl	800ab04 <_malloc_r>
 800b606:	4604      	mov	r4, r0
 800b608:	b140      	cbz	r0, 800b61c <__sfmoreglue+0x28>
 800b60a:	2100      	movs	r1, #0
 800b60c:	e9c0 1600 	strd	r1, r6, [r0]
 800b610:	300c      	adds	r0, #12
 800b612:	60a0      	str	r0, [r4, #8]
 800b614:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b618:	f7fb fde8 	bl	80071ec <memset>
 800b61c:	4620      	mov	r0, r4
 800b61e:	bd70      	pop	{r4, r5, r6, pc}

0800b620 <__sfp_lock_acquire>:
 800b620:	4801      	ldr	r0, [pc, #4]	; (800b628 <__sfp_lock_acquire+0x8>)
 800b622:	f000 b8b3 	b.w	800b78c <__retarget_lock_acquire_recursive>
 800b626:	bf00      	nop
 800b628:	20000600 	.word	0x20000600

0800b62c <__sfp_lock_release>:
 800b62c:	4801      	ldr	r0, [pc, #4]	; (800b634 <__sfp_lock_release+0x8>)
 800b62e:	f000 b8ae 	b.w	800b78e <__retarget_lock_release_recursive>
 800b632:	bf00      	nop
 800b634:	20000600 	.word	0x20000600

0800b638 <__sinit_lock_acquire>:
 800b638:	4801      	ldr	r0, [pc, #4]	; (800b640 <__sinit_lock_acquire+0x8>)
 800b63a:	f000 b8a7 	b.w	800b78c <__retarget_lock_acquire_recursive>
 800b63e:	bf00      	nop
 800b640:	200005fb 	.word	0x200005fb

0800b644 <__sinit_lock_release>:
 800b644:	4801      	ldr	r0, [pc, #4]	; (800b64c <__sinit_lock_release+0x8>)
 800b646:	f000 b8a2 	b.w	800b78e <__retarget_lock_release_recursive>
 800b64a:	bf00      	nop
 800b64c:	200005fb 	.word	0x200005fb

0800b650 <__sinit>:
 800b650:	b510      	push	{r4, lr}
 800b652:	4604      	mov	r4, r0
 800b654:	f7ff fff0 	bl	800b638 <__sinit_lock_acquire>
 800b658:	69a3      	ldr	r3, [r4, #24]
 800b65a:	b11b      	cbz	r3, 800b664 <__sinit+0x14>
 800b65c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b660:	f7ff bff0 	b.w	800b644 <__sinit_lock_release>
 800b664:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b668:	6523      	str	r3, [r4, #80]	; 0x50
 800b66a:	4b13      	ldr	r3, [pc, #76]	; (800b6b8 <__sinit+0x68>)
 800b66c:	4a13      	ldr	r2, [pc, #76]	; (800b6bc <__sinit+0x6c>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	62a2      	str	r2, [r4, #40]	; 0x28
 800b672:	42a3      	cmp	r3, r4
 800b674:	bf04      	itt	eq
 800b676:	2301      	moveq	r3, #1
 800b678:	61a3      	streq	r3, [r4, #24]
 800b67a:	4620      	mov	r0, r4
 800b67c:	f000 f820 	bl	800b6c0 <__sfp>
 800b680:	6060      	str	r0, [r4, #4]
 800b682:	4620      	mov	r0, r4
 800b684:	f000 f81c 	bl	800b6c0 <__sfp>
 800b688:	60a0      	str	r0, [r4, #8]
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 f818 	bl	800b6c0 <__sfp>
 800b690:	2200      	movs	r2, #0
 800b692:	60e0      	str	r0, [r4, #12]
 800b694:	2104      	movs	r1, #4
 800b696:	6860      	ldr	r0, [r4, #4]
 800b698:	f7ff ff82 	bl	800b5a0 <std>
 800b69c:	68a0      	ldr	r0, [r4, #8]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	2109      	movs	r1, #9
 800b6a2:	f7ff ff7d 	bl	800b5a0 <std>
 800b6a6:	68e0      	ldr	r0, [r4, #12]
 800b6a8:	2202      	movs	r2, #2
 800b6aa:	2112      	movs	r1, #18
 800b6ac:	f7ff ff78 	bl	800b5a0 <std>
 800b6b0:	2301      	movs	r3, #1
 800b6b2:	61a3      	str	r3, [r4, #24]
 800b6b4:	e7d2      	b.n	800b65c <__sinit+0xc>
 800b6b6:	bf00      	nop
 800b6b8:	0800eb98 	.word	0x0800eb98
 800b6bc:	0800b5e9 	.word	0x0800b5e9

0800b6c0 <__sfp>:
 800b6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6c2:	4607      	mov	r7, r0
 800b6c4:	f7ff ffac 	bl	800b620 <__sfp_lock_acquire>
 800b6c8:	4b1e      	ldr	r3, [pc, #120]	; (800b744 <__sfp+0x84>)
 800b6ca:	681e      	ldr	r6, [r3, #0]
 800b6cc:	69b3      	ldr	r3, [r6, #24]
 800b6ce:	b913      	cbnz	r3, 800b6d6 <__sfp+0x16>
 800b6d0:	4630      	mov	r0, r6
 800b6d2:	f7ff ffbd 	bl	800b650 <__sinit>
 800b6d6:	3648      	adds	r6, #72	; 0x48
 800b6d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b6dc:	3b01      	subs	r3, #1
 800b6de:	d503      	bpl.n	800b6e8 <__sfp+0x28>
 800b6e0:	6833      	ldr	r3, [r6, #0]
 800b6e2:	b30b      	cbz	r3, 800b728 <__sfp+0x68>
 800b6e4:	6836      	ldr	r6, [r6, #0]
 800b6e6:	e7f7      	b.n	800b6d8 <__sfp+0x18>
 800b6e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b6ec:	b9d5      	cbnz	r5, 800b724 <__sfp+0x64>
 800b6ee:	4b16      	ldr	r3, [pc, #88]	; (800b748 <__sfp+0x88>)
 800b6f0:	60e3      	str	r3, [r4, #12]
 800b6f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b6f6:	6665      	str	r5, [r4, #100]	; 0x64
 800b6f8:	f000 f847 	bl	800b78a <__retarget_lock_init_recursive>
 800b6fc:	f7ff ff96 	bl	800b62c <__sfp_lock_release>
 800b700:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b704:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b708:	6025      	str	r5, [r4, #0]
 800b70a:	61a5      	str	r5, [r4, #24]
 800b70c:	2208      	movs	r2, #8
 800b70e:	4629      	mov	r1, r5
 800b710:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b714:	f7fb fd6a 	bl	80071ec <memset>
 800b718:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b71c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b720:	4620      	mov	r0, r4
 800b722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b724:	3468      	adds	r4, #104	; 0x68
 800b726:	e7d9      	b.n	800b6dc <__sfp+0x1c>
 800b728:	2104      	movs	r1, #4
 800b72a:	4638      	mov	r0, r7
 800b72c:	f7ff ff62 	bl	800b5f4 <__sfmoreglue>
 800b730:	4604      	mov	r4, r0
 800b732:	6030      	str	r0, [r6, #0]
 800b734:	2800      	cmp	r0, #0
 800b736:	d1d5      	bne.n	800b6e4 <__sfp+0x24>
 800b738:	f7ff ff78 	bl	800b62c <__sfp_lock_release>
 800b73c:	230c      	movs	r3, #12
 800b73e:	603b      	str	r3, [r7, #0]
 800b740:	e7ee      	b.n	800b720 <__sfp+0x60>
 800b742:	bf00      	nop
 800b744:	0800eb98 	.word	0x0800eb98
 800b748:	ffff0001 	.word	0xffff0001

0800b74c <_fwalk_reent>:
 800b74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b750:	4606      	mov	r6, r0
 800b752:	4688      	mov	r8, r1
 800b754:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b758:	2700      	movs	r7, #0
 800b75a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b75e:	f1b9 0901 	subs.w	r9, r9, #1
 800b762:	d505      	bpl.n	800b770 <_fwalk_reent+0x24>
 800b764:	6824      	ldr	r4, [r4, #0]
 800b766:	2c00      	cmp	r4, #0
 800b768:	d1f7      	bne.n	800b75a <_fwalk_reent+0xe>
 800b76a:	4638      	mov	r0, r7
 800b76c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b770:	89ab      	ldrh	r3, [r5, #12]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d907      	bls.n	800b786 <_fwalk_reent+0x3a>
 800b776:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b77a:	3301      	adds	r3, #1
 800b77c:	d003      	beq.n	800b786 <_fwalk_reent+0x3a>
 800b77e:	4629      	mov	r1, r5
 800b780:	4630      	mov	r0, r6
 800b782:	47c0      	blx	r8
 800b784:	4307      	orrs	r7, r0
 800b786:	3568      	adds	r5, #104	; 0x68
 800b788:	e7e9      	b.n	800b75e <_fwalk_reent+0x12>

0800b78a <__retarget_lock_init_recursive>:
 800b78a:	4770      	bx	lr

0800b78c <__retarget_lock_acquire_recursive>:
 800b78c:	4770      	bx	lr

0800b78e <__retarget_lock_release_recursive>:
 800b78e:	4770      	bx	lr

0800b790 <__swhatbuf_r>:
 800b790:	b570      	push	{r4, r5, r6, lr}
 800b792:	460e      	mov	r6, r1
 800b794:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b798:	2900      	cmp	r1, #0
 800b79a:	b096      	sub	sp, #88	; 0x58
 800b79c:	4614      	mov	r4, r2
 800b79e:	461d      	mov	r5, r3
 800b7a0:	da07      	bge.n	800b7b2 <__swhatbuf_r+0x22>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	602b      	str	r3, [r5, #0]
 800b7a6:	89b3      	ldrh	r3, [r6, #12]
 800b7a8:	061a      	lsls	r2, r3, #24
 800b7aa:	d410      	bmi.n	800b7ce <__swhatbuf_r+0x3e>
 800b7ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b7b0:	e00e      	b.n	800b7d0 <__swhatbuf_r+0x40>
 800b7b2:	466a      	mov	r2, sp
 800b7b4:	f000 f902 	bl	800b9bc <_fstat_r>
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	dbf2      	blt.n	800b7a2 <__swhatbuf_r+0x12>
 800b7bc:	9a01      	ldr	r2, [sp, #4]
 800b7be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b7c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b7c6:	425a      	negs	r2, r3
 800b7c8:	415a      	adcs	r2, r3
 800b7ca:	602a      	str	r2, [r5, #0]
 800b7cc:	e7ee      	b.n	800b7ac <__swhatbuf_r+0x1c>
 800b7ce:	2340      	movs	r3, #64	; 0x40
 800b7d0:	2000      	movs	r0, #0
 800b7d2:	6023      	str	r3, [r4, #0]
 800b7d4:	b016      	add	sp, #88	; 0x58
 800b7d6:	bd70      	pop	{r4, r5, r6, pc}

0800b7d8 <__smakebuf_r>:
 800b7d8:	898b      	ldrh	r3, [r1, #12]
 800b7da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b7dc:	079d      	lsls	r5, r3, #30
 800b7de:	4606      	mov	r6, r0
 800b7e0:	460c      	mov	r4, r1
 800b7e2:	d507      	bpl.n	800b7f4 <__smakebuf_r+0x1c>
 800b7e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b7e8:	6023      	str	r3, [r4, #0]
 800b7ea:	6123      	str	r3, [r4, #16]
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	6163      	str	r3, [r4, #20]
 800b7f0:	b002      	add	sp, #8
 800b7f2:	bd70      	pop	{r4, r5, r6, pc}
 800b7f4:	ab01      	add	r3, sp, #4
 800b7f6:	466a      	mov	r2, sp
 800b7f8:	f7ff ffca 	bl	800b790 <__swhatbuf_r>
 800b7fc:	9900      	ldr	r1, [sp, #0]
 800b7fe:	4605      	mov	r5, r0
 800b800:	4630      	mov	r0, r6
 800b802:	f7ff f97f 	bl	800ab04 <_malloc_r>
 800b806:	b948      	cbnz	r0, 800b81c <__smakebuf_r+0x44>
 800b808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b80c:	059a      	lsls	r2, r3, #22
 800b80e:	d4ef      	bmi.n	800b7f0 <__smakebuf_r+0x18>
 800b810:	f023 0303 	bic.w	r3, r3, #3
 800b814:	f043 0302 	orr.w	r3, r3, #2
 800b818:	81a3      	strh	r3, [r4, #12]
 800b81a:	e7e3      	b.n	800b7e4 <__smakebuf_r+0xc>
 800b81c:	4b0d      	ldr	r3, [pc, #52]	; (800b854 <__smakebuf_r+0x7c>)
 800b81e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b820:	89a3      	ldrh	r3, [r4, #12]
 800b822:	6020      	str	r0, [r4, #0]
 800b824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b828:	81a3      	strh	r3, [r4, #12]
 800b82a:	9b00      	ldr	r3, [sp, #0]
 800b82c:	6163      	str	r3, [r4, #20]
 800b82e:	9b01      	ldr	r3, [sp, #4]
 800b830:	6120      	str	r0, [r4, #16]
 800b832:	b15b      	cbz	r3, 800b84c <__smakebuf_r+0x74>
 800b834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b838:	4630      	mov	r0, r6
 800b83a:	f000 f8d1 	bl	800b9e0 <_isatty_r>
 800b83e:	b128      	cbz	r0, 800b84c <__smakebuf_r+0x74>
 800b840:	89a3      	ldrh	r3, [r4, #12]
 800b842:	f023 0303 	bic.w	r3, r3, #3
 800b846:	f043 0301 	orr.w	r3, r3, #1
 800b84a:	81a3      	strh	r3, [r4, #12]
 800b84c:	89a0      	ldrh	r0, [r4, #12]
 800b84e:	4305      	orrs	r5, r0
 800b850:	81a5      	strh	r5, [r4, #12]
 800b852:	e7cd      	b.n	800b7f0 <__smakebuf_r+0x18>
 800b854:	0800b5e9 	.word	0x0800b5e9

0800b858 <_malloc_usable_size_r>:
 800b858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b85c:	1f18      	subs	r0, r3, #4
 800b85e:	2b00      	cmp	r3, #0
 800b860:	bfbc      	itt	lt
 800b862:	580b      	ldrlt	r3, [r1, r0]
 800b864:	18c0      	addlt	r0, r0, r3
 800b866:	4770      	bx	lr

0800b868 <_raise_r>:
 800b868:	291f      	cmp	r1, #31
 800b86a:	b538      	push	{r3, r4, r5, lr}
 800b86c:	4604      	mov	r4, r0
 800b86e:	460d      	mov	r5, r1
 800b870:	d904      	bls.n	800b87c <_raise_r+0x14>
 800b872:	2316      	movs	r3, #22
 800b874:	6003      	str	r3, [r0, #0]
 800b876:	f04f 30ff 	mov.w	r0, #4294967295
 800b87a:	bd38      	pop	{r3, r4, r5, pc}
 800b87c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b87e:	b112      	cbz	r2, 800b886 <_raise_r+0x1e>
 800b880:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b884:	b94b      	cbnz	r3, 800b89a <_raise_r+0x32>
 800b886:	4620      	mov	r0, r4
 800b888:	f000 f830 	bl	800b8ec <_getpid_r>
 800b88c:	462a      	mov	r2, r5
 800b88e:	4601      	mov	r1, r0
 800b890:	4620      	mov	r0, r4
 800b892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b896:	f000 b817 	b.w	800b8c8 <_kill_r>
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d00a      	beq.n	800b8b4 <_raise_r+0x4c>
 800b89e:	1c59      	adds	r1, r3, #1
 800b8a0:	d103      	bne.n	800b8aa <_raise_r+0x42>
 800b8a2:	2316      	movs	r3, #22
 800b8a4:	6003      	str	r3, [r0, #0]
 800b8a6:	2001      	movs	r0, #1
 800b8a8:	e7e7      	b.n	800b87a <_raise_r+0x12>
 800b8aa:	2400      	movs	r4, #0
 800b8ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b8b0:	4628      	mov	r0, r5
 800b8b2:	4798      	blx	r3
 800b8b4:	2000      	movs	r0, #0
 800b8b6:	e7e0      	b.n	800b87a <_raise_r+0x12>

0800b8b8 <raise>:
 800b8b8:	4b02      	ldr	r3, [pc, #8]	; (800b8c4 <raise+0xc>)
 800b8ba:	4601      	mov	r1, r0
 800b8bc:	6818      	ldr	r0, [r3, #0]
 800b8be:	f7ff bfd3 	b.w	800b868 <_raise_r>
 800b8c2:	bf00      	nop
 800b8c4:	20000024 	.word	0x20000024

0800b8c8 <_kill_r>:
 800b8c8:	b538      	push	{r3, r4, r5, lr}
 800b8ca:	4d07      	ldr	r5, [pc, #28]	; (800b8e8 <_kill_r+0x20>)
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	4608      	mov	r0, r1
 800b8d2:	4611      	mov	r1, r2
 800b8d4:	602b      	str	r3, [r5, #0]
 800b8d6:	f7f7 fa87 	bl	8002de8 <_kill>
 800b8da:	1c43      	adds	r3, r0, #1
 800b8dc:	d102      	bne.n	800b8e4 <_kill_r+0x1c>
 800b8de:	682b      	ldr	r3, [r5, #0]
 800b8e0:	b103      	cbz	r3, 800b8e4 <_kill_r+0x1c>
 800b8e2:	6023      	str	r3, [r4, #0]
 800b8e4:	bd38      	pop	{r3, r4, r5, pc}
 800b8e6:	bf00      	nop
 800b8e8:	200005f4 	.word	0x200005f4

0800b8ec <_getpid_r>:
 800b8ec:	f7f7 ba74 	b.w	8002dd8 <_getpid>

0800b8f0 <__sread>:
 800b8f0:	b510      	push	{r4, lr}
 800b8f2:	460c      	mov	r4, r1
 800b8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8f8:	f000 f894 	bl	800ba24 <_read_r>
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	bfab      	itete	ge
 800b900:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b902:	89a3      	ldrhlt	r3, [r4, #12]
 800b904:	181b      	addge	r3, r3, r0
 800b906:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b90a:	bfac      	ite	ge
 800b90c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b90e:	81a3      	strhlt	r3, [r4, #12]
 800b910:	bd10      	pop	{r4, pc}

0800b912 <__swrite>:
 800b912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b916:	461f      	mov	r7, r3
 800b918:	898b      	ldrh	r3, [r1, #12]
 800b91a:	05db      	lsls	r3, r3, #23
 800b91c:	4605      	mov	r5, r0
 800b91e:	460c      	mov	r4, r1
 800b920:	4616      	mov	r6, r2
 800b922:	d505      	bpl.n	800b930 <__swrite+0x1e>
 800b924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b928:	2302      	movs	r3, #2
 800b92a:	2200      	movs	r2, #0
 800b92c:	f000 f868 	bl	800ba00 <_lseek_r>
 800b930:	89a3      	ldrh	r3, [r4, #12]
 800b932:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b936:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b93a:	81a3      	strh	r3, [r4, #12]
 800b93c:	4632      	mov	r2, r6
 800b93e:	463b      	mov	r3, r7
 800b940:	4628      	mov	r0, r5
 800b942:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b946:	f000 b817 	b.w	800b978 <_write_r>

0800b94a <__sseek>:
 800b94a:	b510      	push	{r4, lr}
 800b94c:	460c      	mov	r4, r1
 800b94e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b952:	f000 f855 	bl	800ba00 <_lseek_r>
 800b956:	1c43      	adds	r3, r0, #1
 800b958:	89a3      	ldrh	r3, [r4, #12]
 800b95a:	bf15      	itete	ne
 800b95c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b95e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b962:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b966:	81a3      	strheq	r3, [r4, #12]
 800b968:	bf18      	it	ne
 800b96a:	81a3      	strhne	r3, [r4, #12]
 800b96c:	bd10      	pop	{r4, pc}

0800b96e <__sclose>:
 800b96e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b972:	f000 b813 	b.w	800b99c <_close_r>
	...

0800b978 <_write_r>:
 800b978:	b538      	push	{r3, r4, r5, lr}
 800b97a:	4d07      	ldr	r5, [pc, #28]	; (800b998 <_write_r+0x20>)
 800b97c:	4604      	mov	r4, r0
 800b97e:	4608      	mov	r0, r1
 800b980:	4611      	mov	r1, r2
 800b982:	2200      	movs	r2, #0
 800b984:	602a      	str	r2, [r5, #0]
 800b986:	461a      	mov	r2, r3
 800b988:	f7f7 fa65 	bl	8002e56 <_write>
 800b98c:	1c43      	adds	r3, r0, #1
 800b98e:	d102      	bne.n	800b996 <_write_r+0x1e>
 800b990:	682b      	ldr	r3, [r5, #0]
 800b992:	b103      	cbz	r3, 800b996 <_write_r+0x1e>
 800b994:	6023      	str	r3, [r4, #0]
 800b996:	bd38      	pop	{r3, r4, r5, pc}
 800b998:	200005f4 	.word	0x200005f4

0800b99c <_close_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	4d06      	ldr	r5, [pc, #24]	; (800b9b8 <_close_r+0x1c>)
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	4604      	mov	r4, r0
 800b9a4:	4608      	mov	r0, r1
 800b9a6:	602b      	str	r3, [r5, #0]
 800b9a8:	f7f7 fa71 	bl	8002e8e <_close>
 800b9ac:	1c43      	adds	r3, r0, #1
 800b9ae:	d102      	bne.n	800b9b6 <_close_r+0x1a>
 800b9b0:	682b      	ldr	r3, [r5, #0]
 800b9b2:	b103      	cbz	r3, 800b9b6 <_close_r+0x1a>
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	bd38      	pop	{r3, r4, r5, pc}
 800b9b8:	200005f4 	.word	0x200005f4

0800b9bc <_fstat_r>:
 800b9bc:	b538      	push	{r3, r4, r5, lr}
 800b9be:	4d07      	ldr	r5, [pc, #28]	; (800b9dc <_fstat_r+0x20>)
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	4608      	mov	r0, r1
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	602b      	str	r3, [r5, #0]
 800b9ca:	f7f7 fa6c 	bl	8002ea6 <_fstat>
 800b9ce:	1c43      	adds	r3, r0, #1
 800b9d0:	d102      	bne.n	800b9d8 <_fstat_r+0x1c>
 800b9d2:	682b      	ldr	r3, [r5, #0]
 800b9d4:	b103      	cbz	r3, 800b9d8 <_fstat_r+0x1c>
 800b9d6:	6023      	str	r3, [r4, #0]
 800b9d8:	bd38      	pop	{r3, r4, r5, pc}
 800b9da:	bf00      	nop
 800b9dc:	200005f4 	.word	0x200005f4

0800b9e0 <_isatty_r>:
 800b9e0:	b538      	push	{r3, r4, r5, lr}
 800b9e2:	4d06      	ldr	r5, [pc, #24]	; (800b9fc <_isatty_r+0x1c>)
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	4604      	mov	r4, r0
 800b9e8:	4608      	mov	r0, r1
 800b9ea:	602b      	str	r3, [r5, #0]
 800b9ec:	f7f7 fa6b 	bl	8002ec6 <_isatty>
 800b9f0:	1c43      	adds	r3, r0, #1
 800b9f2:	d102      	bne.n	800b9fa <_isatty_r+0x1a>
 800b9f4:	682b      	ldr	r3, [r5, #0]
 800b9f6:	b103      	cbz	r3, 800b9fa <_isatty_r+0x1a>
 800b9f8:	6023      	str	r3, [r4, #0]
 800b9fa:	bd38      	pop	{r3, r4, r5, pc}
 800b9fc:	200005f4 	.word	0x200005f4

0800ba00 <_lseek_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4d07      	ldr	r5, [pc, #28]	; (800ba20 <_lseek_r+0x20>)
 800ba04:	4604      	mov	r4, r0
 800ba06:	4608      	mov	r0, r1
 800ba08:	4611      	mov	r1, r2
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	602a      	str	r2, [r5, #0]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	f7f7 fa64 	bl	8002edc <_lseek>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d102      	bne.n	800ba1e <_lseek_r+0x1e>
 800ba18:	682b      	ldr	r3, [r5, #0]
 800ba1a:	b103      	cbz	r3, 800ba1e <_lseek_r+0x1e>
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	200005f4 	.word	0x200005f4

0800ba24 <_read_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	4d07      	ldr	r5, [pc, #28]	; (800ba44 <_read_r+0x20>)
 800ba28:	4604      	mov	r4, r0
 800ba2a:	4608      	mov	r0, r1
 800ba2c:	4611      	mov	r1, r2
 800ba2e:	2200      	movs	r2, #0
 800ba30:	602a      	str	r2, [r5, #0]
 800ba32:	461a      	mov	r2, r3
 800ba34:	f7f7 f9f2 	bl	8002e1c <_read>
 800ba38:	1c43      	adds	r3, r0, #1
 800ba3a:	d102      	bne.n	800ba42 <_read_r+0x1e>
 800ba3c:	682b      	ldr	r3, [r5, #0]
 800ba3e:	b103      	cbz	r3, 800ba42 <_read_r+0x1e>
 800ba40:	6023      	str	r3, [r4, #0]
 800ba42:	bd38      	pop	{r3, r4, r5, pc}
 800ba44:	200005f4 	.word	0x200005f4

0800ba48 <_init>:
 800ba48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba4a:	bf00      	nop
 800ba4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba4e:	bc08      	pop	{r3}
 800ba50:	469e      	mov	lr, r3
 800ba52:	4770      	bx	lr

0800ba54 <_fini>:
 800ba54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba56:	bf00      	nop
 800ba58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ba5a:	bc08      	pop	{r3}
 800ba5c:	469e      	mov	lr, r3
 800ba5e:	4770      	bx	lr
