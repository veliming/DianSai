
PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000743c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004810  08007624  08007624  00017624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be34  0800be34  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  0800be34  0800be34  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be34  0800be34  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be34  0800be34  0001be34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be38  0800be38  0001be38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  0800be3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000018  0800be54  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  0800be54  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c573  00000000  00000000  00020041  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d9b  00000000  00000000  0002c5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc0  00000000  00000000  0002e350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc8  00000000  00000000  0002f010  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000026a6  00000000  00000000  0002fbd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009f80  00000000  00000000  0003227e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085e41  00000000  00000000  0003c1fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c203f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003744  00000000  00000000  000c20bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000018 	.word	0x20000018
 8000204:	00000000 	.word	0x00000000
 8000208:	0800760c 	.word	0x0800760c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000001c 	.word	0x2000001c
 8000224:	0800760c 	.word	0x0800760c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000376:	f1a4 0401 	sub.w	r4, r4, #1
 800037a:	d1e9      	bne.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__aeabi_d2uiz>:
 80009d4:	004a      	lsls	r2, r1, #1
 80009d6:	d211      	bcs.n	80009fc <__aeabi_d2uiz+0x28>
 80009d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009dc:	d211      	bcs.n	8000a02 <__aeabi_d2uiz+0x2e>
 80009de:	d50d      	bpl.n	80009fc <__aeabi_d2uiz+0x28>
 80009e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009e8:	d40e      	bmi.n	8000a08 <__aeabi_d2uiz+0x34>
 80009ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009f6:	fa23 f002 	lsr.w	r0, r3, r2
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a06:	d102      	bne.n	8000a0e <__aeabi_d2uiz+0x3a>
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	4770      	bx	lr
 8000a0e:	f04f 0000 	mov.w	r0, #0
 8000a12:	4770      	bx	lr

08000a14 <__aeabi_d2f>:
 8000a14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a1c:	bf24      	itt	cs
 8000a1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a26:	d90d      	bls.n	8000a44 <__aeabi_d2f+0x30>
 8000a28:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a34:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a3c:	bf08      	it	eq
 8000a3e:	f020 0001 	biceq.w	r0, r0, #1
 8000a42:	4770      	bx	lr
 8000a44:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a48:	d121      	bne.n	8000a8e <__aeabi_d2f+0x7a>
 8000a4a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a4e:	bfbc      	itt	lt
 8000a50:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a54:	4770      	bxlt	lr
 8000a56:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a5e:	f1c2 0218 	rsb	r2, r2, #24
 8000a62:	f1c2 0c20 	rsb	ip, r2, #32
 8000a66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a6e:	bf18      	it	ne
 8000a70:	f040 0001 	orrne.w	r0, r0, #1
 8000a74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a80:	ea40 000c 	orr.w	r0, r0, ip
 8000a84:	fa23 f302 	lsr.w	r3, r3, r2
 8000a88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a8c:	e7cc      	b.n	8000a28 <__aeabi_d2f+0x14>
 8000a8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a92:	d107      	bne.n	8000aa4 <__aeabi_d2f+0x90>
 8000a94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a98:	bf1e      	ittt	ne
 8000a9a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a9e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aa2:	4770      	bxne	lr
 8000aa4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_frsub>:
 8000ab4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ab8:	e002      	b.n	8000ac0 <__addsf3>
 8000aba:	bf00      	nop

08000abc <__aeabi_fsub>:
 8000abc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ac0 <__addsf3>:
 8000ac0:	0042      	lsls	r2, r0, #1
 8000ac2:	bf1f      	itttt	ne
 8000ac4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ac8:	ea92 0f03 	teqne	r2, r3
 8000acc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ad0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad4:	d06a      	beq.n	8000bac <__addsf3+0xec>
 8000ad6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ada:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ade:	bfc1      	itttt	gt
 8000ae0:	18d2      	addgt	r2, r2, r3
 8000ae2:	4041      	eorgt	r1, r0
 8000ae4:	4048      	eorgt	r0, r1
 8000ae6:	4041      	eorgt	r1, r0
 8000ae8:	bfb8      	it	lt
 8000aea:	425b      	neglt	r3, r3
 8000aec:	2b19      	cmp	r3, #25
 8000aee:	bf88      	it	hi
 8000af0:	4770      	bxhi	lr
 8000af2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000af6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000afa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b06:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b0e:	bf18      	it	ne
 8000b10:	4249      	negne	r1, r1
 8000b12:	ea92 0f03 	teq	r2, r3
 8000b16:	d03f      	beq.n	8000b98 <__addsf3+0xd8>
 8000b18:	f1a2 0201 	sub.w	r2, r2, #1
 8000b1c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b20:	eb10 000c 	adds.w	r0, r0, ip
 8000b24:	f1c3 0320 	rsb	r3, r3, #32
 8000b28:	fa01 f103 	lsl.w	r1, r1, r3
 8000b2c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b30:	d502      	bpl.n	8000b38 <__addsf3+0x78>
 8000b32:	4249      	negs	r1, r1
 8000b34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b38:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b3c:	d313      	bcc.n	8000b66 <__addsf3+0xa6>
 8000b3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b42:	d306      	bcc.n	8000b52 <__addsf3+0x92>
 8000b44:	0840      	lsrs	r0, r0, #1
 8000b46:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b4a:	f102 0201 	add.w	r2, r2, #1
 8000b4e:	2afe      	cmp	r2, #254	; 0xfe
 8000b50:	d251      	bcs.n	8000bf6 <__addsf3+0x136>
 8000b52:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b5a:	bf08      	it	eq
 8000b5c:	f020 0001 	biceq.w	r0, r0, #1
 8000b60:	ea40 0003 	orr.w	r0, r0, r3
 8000b64:	4770      	bx	lr
 8000b66:	0049      	lsls	r1, r1, #1
 8000b68:	eb40 0000 	adc.w	r0, r0, r0
 8000b6c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b70:	f1a2 0201 	sub.w	r2, r2, #1
 8000b74:	d1ed      	bne.n	8000b52 <__addsf3+0x92>
 8000b76:	fab0 fc80 	clz	ip, r0
 8000b7a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b7e:	ebb2 020c 	subs.w	r2, r2, ip
 8000b82:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b86:	bfaa      	itet	ge
 8000b88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b8c:	4252      	neglt	r2, r2
 8000b8e:	4318      	orrge	r0, r3
 8000b90:	bfbc      	itt	lt
 8000b92:	40d0      	lsrlt	r0, r2
 8000b94:	4318      	orrlt	r0, r3
 8000b96:	4770      	bx	lr
 8000b98:	f092 0f00 	teq	r2, #0
 8000b9c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ba0:	bf06      	itte	eq
 8000ba2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ba6:	3201      	addeq	r2, #1
 8000ba8:	3b01      	subne	r3, #1
 8000baa:	e7b5      	b.n	8000b18 <__addsf3+0x58>
 8000bac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bb4:	bf18      	it	ne
 8000bb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bba:	d021      	beq.n	8000c00 <__addsf3+0x140>
 8000bbc:	ea92 0f03 	teq	r2, r3
 8000bc0:	d004      	beq.n	8000bcc <__addsf3+0x10c>
 8000bc2:	f092 0f00 	teq	r2, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	4608      	moveq	r0, r1
 8000bca:	4770      	bx	lr
 8000bcc:	ea90 0f01 	teq	r0, r1
 8000bd0:	bf1c      	itt	ne
 8000bd2:	2000      	movne	r0, #0
 8000bd4:	4770      	bxne	lr
 8000bd6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bda:	d104      	bne.n	8000be6 <__addsf3+0x126>
 8000bdc:	0040      	lsls	r0, r0, #1
 8000bde:	bf28      	it	cs
 8000be0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000be4:	4770      	bx	lr
 8000be6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bea:	bf3c      	itt	cc
 8000bec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bxcc	lr
 8000bf2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bf6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bfa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfe:	4770      	bx	lr
 8000c00:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c04:	bf16      	itet	ne
 8000c06:	4608      	movne	r0, r1
 8000c08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c0c:	4601      	movne	r1, r0
 8000c0e:	0242      	lsls	r2, r0, #9
 8000c10:	bf06      	itte	eq
 8000c12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c16:	ea90 0f01 	teqeq	r0, r1
 8000c1a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c1e:	4770      	bx	lr

08000c20 <__aeabi_ui2f>:
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e004      	b.n	8000c30 <__aeabi_i2f+0x8>
 8000c26:	bf00      	nop

08000c28 <__aeabi_i2f>:
 8000c28:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c2c:	bf48      	it	mi
 8000c2e:	4240      	negmi	r0, r0
 8000c30:	ea5f 0c00 	movs.w	ip, r0
 8000c34:	bf08      	it	eq
 8000c36:	4770      	bxeq	lr
 8000c38:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c3c:	4601      	mov	r1, r0
 8000c3e:	f04f 0000 	mov.w	r0, #0
 8000c42:	e01c      	b.n	8000c7e <__aeabi_l2f+0x2a>

08000c44 <__aeabi_ul2f>:
 8000c44:	ea50 0201 	orrs.w	r2, r0, r1
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	e00a      	b.n	8000c68 <__aeabi_l2f+0x14>
 8000c52:	bf00      	nop

08000c54 <__aeabi_l2f>:
 8000c54:	ea50 0201 	orrs.w	r2, r0, r1
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c60:	d502      	bpl.n	8000c68 <__aeabi_l2f+0x14>
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	ea5f 0c01 	movs.w	ip, r1
 8000c6c:	bf02      	ittt	eq
 8000c6e:	4684      	moveq	ip, r0
 8000c70:	4601      	moveq	r1, r0
 8000c72:	2000      	moveq	r0, #0
 8000c74:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c78:	bf08      	it	eq
 8000c7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c7e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c82:	fabc f28c 	clz	r2, ip
 8000c86:	3a08      	subs	r2, #8
 8000c88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c8c:	db10      	blt.n	8000cb0 <__aeabi_l2f+0x5c>
 8000c8e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c92:	4463      	add	r3, ip
 8000c94:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c98:	f1c2 0220 	rsb	r2, r2, #32
 8000c9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ca0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca4:	eb43 0002 	adc.w	r0, r3, r2
 8000ca8:	bf08      	it	eq
 8000caa:	f020 0001 	biceq.w	r0, r0, #1
 8000cae:	4770      	bx	lr
 8000cb0:	f102 0220 	add.w	r2, r2, #32
 8000cb4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb8:	f1c2 0220 	rsb	r2, r2, #32
 8000cbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cc0:	fa21 f202 	lsr.w	r2, r1, r2
 8000cc4:	eb43 0002 	adc.w	r0, r3, r2
 8000cc8:	bf08      	it	eq
 8000cca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cce:	4770      	bx	lr

08000cd0 <__aeabi_fmul>:
 8000cd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cd8:	bf1e      	ittt	ne
 8000cda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cde:	ea92 0f0c 	teqne	r2, ip
 8000ce2:	ea93 0f0c 	teqne	r3, ip
 8000ce6:	d06f      	beq.n	8000dc8 <__aeabi_fmul+0xf8>
 8000ce8:	441a      	add	r2, r3
 8000cea:	ea80 0c01 	eor.w	ip, r0, r1
 8000cee:	0240      	lsls	r0, r0, #9
 8000cf0:	bf18      	it	ne
 8000cf2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cf6:	d01e      	beq.n	8000d36 <__aeabi_fmul+0x66>
 8000cf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cfc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d00:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d04:	fba0 3101 	umull	r3, r1, r0, r1
 8000d08:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d0c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d10:	bf3e      	ittt	cc
 8000d12:	0049      	lslcc	r1, r1, #1
 8000d14:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d18:	005b      	lslcc	r3, r3, #1
 8000d1a:	ea40 0001 	orr.w	r0, r0, r1
 8000d1e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d22:	2afd      	cmp	r2, #253	; 0xfd
 8000d24:	d81d      	bhi.n	8000d62 <__aeabi_fmul+0x92>
 8000d26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d2e:	bf08      	it	eq
 8000d30:	f020 0001 	biceq.w	r0, r0, #1
 8000d34:	4770      	bx	lr
 8000d36:	f090 0f00 	teq	r0, #0
 8000d3a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d3e:	bf08      	it	eq
 8000d40:	0249      	lsleq	r1, r1, #9
 8000d42:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d46:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d4a:	3a7f      	subs	r2, #127	; 0x7f
 8000d4c:	bfc2      	ittt	gt
 8000d4e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d52:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d56:	4770      	bxgt	lr
 8000d58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	3a01      	subs	r2, #1
 8000d62:	dc5d      	bgt.n	8000e20 <__aeabi_fmul+0x150>
 8000d64:	f112 0f19 	cmn.w	r2, #25
 8000d68:	bfdc      	itt	le
 8000d6a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d6e:	4770      	bxle	lr
 8000d70:	f1c2 0200 	rsb	r2, r2, #0
 8000d74:	0041      	lsls	r1, r0, #1
 8000d76:	fa21 f102 	lsr.w	r1, r1, r2
 8000d7a:	f1c2 0220 	rsb	r2, r2, #32
 8000d7e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d82:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d86:	f140 0000 	adc.w	r0, r0, #0
 8000d8a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d8e:	bf08      	it	eq
 8000d90:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d94:	4770      	bx	lr
 8000d96:	f092 0f00 	teq	r2, #0
 8000d9a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d9e:	bf02      	ittt	eq
 8000da0:	0040      	lsleq	r0, r0, #1
 8000da2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000da6:	3a01      	subeq	r2, #1
 8000da8:	d0f9      	beq.n	8000d9e <__aeabi_fmul+0xce>
 8000daa:	ea40 000c 	orr.w	r0, r0, ip
 8000dae:	f093 0f00 	teq	r3, #0
 8000db2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	bf02      	ittt	eq
 8000db8:	0049      	lsleq	r1, r1, #1
 8000dba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dbe:	3b01      	subeq	r3, #1
 8000dc0:	d0f9      	beq.n	8000db6 <__aeabi_fmul+0xe6>
 8000dc2:	ea41 010c 	orr.w	r1, r1, ip
 8000dc6:	e78f      	b.n	8000ce8 <__aeabi_fmul+0x18>
 8000dc8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000dcc:	ea92 0f0c 	teq	r2, ip
 8000dd0:	bf18      	it	ne
 8000dd2:	ea93 0f0c 	teqne	r3, ip
 8000dd6:	d00a      	beq.n	8000dee <__aeabi_fmul+0x11e>
 8000dd8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ddc:	bf18      	it	ne
 8000dde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000de2:	d1d8      	bne.n	8000d96 <__aeabi_fmul+0xc6>
 8000de4:	ea80 0001 	eor.w	r0, r0, r1
 8000de8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dec:	4770      	bx	lr
 8000dee:	f090 0f00 	teq	r0, #0
 8000df2:	bf17      	itett	ne
 8000df4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000df8:	4608      	moveq	r0, r1
 8000dfa:	f091 0f00 	teqne	r1, #0
 8000dfe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e02:	d014      	beq.n	8000e2e <__aeabi_fmul+0x15e>
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	d101      	bne.n	8000e0e <__aeabi_fmul+0x13e>
 8000e0a:	0242      	lsls	r2, r0, #9
 8000e0c:	d10f      	bne.n	8000e2e <__aeabi_fmul+0x15e>
 8000e0e:	ea93 0f0c 	teq	r3, ip
 8000e12:	d103      	bne.n	8000e1c <__aeabi_fmul+0x14c>
 8000e14:	024b      	lsls	r3, r1, #9
 8000e16:	bf18      	it	ne
 8000e18:	4608      	movne	r0, r1
 8000e1a:	d108      	bne.n	8000e2e <__aeabi_fmul+0x15e>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e28:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e2c:	4770      	bx	lr
 8000e2e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e32:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e36:	4770      	bx	lr

08000e38 <__aeabi_fdiv>:
 8000e38:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e3c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e40:	bf1e      	ittt	ne
 8000e42:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e46:	ea92 0f0c 	teqne	r2, ip
 8000e4a:	ea93 0f0c 	teqne	r3, ip
 8000e4e:	d069      	beq.n	8000f24 <__aeabi_fdiv+0xec>
 8000e50:	eba2 0203 	sub.w	r2, r2, r3
 8000e54:	ea80 0c01 	eor.w	ip, r0, r1
 8000e58:	0249      	lsls	r1, r1, #9
 8000e5a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e5e:	d037      	beq.n	8000ed0 <__aeabi_fdiv+0x98>
 8000e60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e64:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e68:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e70:	428b      	cmp	r3, r1
 8000e72:	bf38      	it	cc
 8000e74:	005b      	lslcc	r3, r3, #1
 8000e76:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e7a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e7e:	428b      	cmp	r3, r1
 8000e80:	bf24      	itt	cs
 8000e82:	1a5b      	subcs	r3, r3, r1
 8000e84:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e88:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e8c:	bf24      	itt	cs
 8000e8e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e92:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e96:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e9a:	bf24      	itt	cs
 8000e9c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ea0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ea4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ea8:	bf24      	itt	cs
 8000eaa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000eae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eb2:	011b      	lsls	r3, r3, #4
 8000eb4:	bf18      	it	ne
 8000eb6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000eba:	d1e0      	bne.n	8000e7e <__aeabi_fdiv+0x46>
 8000ebc:	2afd      	cmp	r2, #253	; 0xfd
 8000ebe:	f63f af50 	bhi.w	8000d62 <__aeabi_fmul+0x92>
 8000ec2:	428b      	cmp	r3, r1
 8000ec4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000ec8:	bf08      	it	eq
 8000eca:	f020 0001 	biceq.w	r0, r0, #1
 8000ece:	4770      	bx	lr
 8000ed0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ed4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000ed8:	327f      	adds	r2, #127	; 0x7f
 8000eda:	bfc2      	ittt	gt
 8000edc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ee0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ee4:	4770      	bxgt	lr
 8000ee6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eea:	f04f 0300 	mov.w	r3, #0
 8000eee:	3a01      	subs	r2, #1
 8000ef0:	e737      	b.n	8000d62 <__aeabi_fmul+0x92>
 8000ef2:	f092 0f00 	teq	r2, #0
 8000ef6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000efa:	bf02      	ittt	eq
 8000efc:	0040      	lsleq	r0, r0, #1
 8000efe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f02:	3a01      	subeq	r2, #1
 8000f04:	d0f9      	beq.n	8000efa <__aeabi_fdiv+0xc2>
 8000f06:	ea40 000c 	orr.w	r0, r0, ip
 8000f0a:	f093 0f00 	teq	r3, #0
 8000f0e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f12:	bf02      	ittt	eq
 8000f14:	0049      	lsleq	r1, r1, #1
 8000f16:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f1a:	3b01      	subeq	r3, #1
 8000f1c:	d0f9      	beq.n	8000f12 <__aeabi_fdiv+0xda>
 8000f1e:	ea41 010c 	orr.w	r1, r1, ip
 8000f22:	e795      	b.n	8000e50 <__aeabi_fdiv+0x18>
 8000f24:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f28:	ea92 0f0c 	teq	r2, ip
 8000f2c:	d108      	bne.n	8000f40 <__aeabi_fdiv+0x108>
 8000f2e:	0242      	lsls	r2, r0, #9
 8000f30:	f47f af7d 	bne.w	8000e2e <__aeabi_fmul+0x15e>
 8000f34:	ea93 0f0c 	teq	r3, ip
 8000f38:	f47f af70 	bne.w	8000e1c <__aeabi_fmul+0x14c>
 8000f3c:	4608      	mov	r0, r1
 8000f3e:	e776      	b.n	8000e2e <__aeabi_fmul+0x15e>
 8000f40:	ea93 0f0c 	teq	r3, ip
 8000f44:	d104      	bne.n	8000f50 <__aeabi_fdiv+0x118>
 8000f46:	024b      	lsls	r3, r1, #9
 8000f48:	f43f af4c 	beq.w	8000de4 <__aeabi_fmul+0x114>
 8000f4c:	4608      	mov	r0, r1
 8000f4e:	e76e      	b.n	8000e2e <__aeabi_fmul+0x15e>
 8000f50:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f54:	bf18      	it	ne
 8000f56:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f5a:	d1ca      	bne.n	8000ef2 <__aeabi_fdiv+0xba>
 8000f5c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f60:	f47f af5c 	bne.w	8000e1c <__aeabi_fmul+0x14c>
 8000f64:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f68:	f47f af3c 	bne.w	8000de4 <__aeabi_fmul+0x114>
 8000f6c:	e75f      	b.n	8000e2e <__aeabi_fmul+0x15e>
 8000f6e:	bf00      	nop

08000f70 <__aeabi_f2uiz>:
 8000f70:	0042      	lsls	r2, r0, #1
 8000f72:	d20e      	bcs.n	8000f92 <__aeabi_f2uiz+0x22>
 8000f74:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f78:	d30b      	bcc.n	8000f92 <__aeabi_f2uiz+0x22>
 8000f7a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f7e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f82:	d409      	bmi.n	8000f98 <__aeabi_f2uiz+0x28>
 8000f84:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f88:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f8c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f90:	4770      	bx	lr
 8000f92:	f04f 0000 	mov.w	r0, #0
 8000f96:	4770      	bx	lr
 8000f98:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f9c:	d101      	bne.n	8000fa2 <__aeabi_f2uiz+0x32>
 8000f9e:	0242      	lsls	r2, r0, #9
 8000fa0:	d102      	bne.n	8000fa8 <__aeabi_f2uiz+0x38>
 8000fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa6:	4770      	bx	lr
 8000fa8:	f04f 0000 	mov.w	r0, #0
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop

08000fb0 <LCD_WR_REG>:
_lcd_dev lcddev;

//写寄存器函数
//regval:寄存器值
void LCD_WR_REG(vu16 regval)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	80fb      	strh	r3, [r7, #6]
	//regval=regval;		//使用-O2优化的时候,必须插入的延时
	LCD->LCD_REG=regval;//写入要写的寄存器序号
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <LCD_WR_REG+0x1c>)
 8000fbc:	88fa      	ldrh	r2, [r7, #6]
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	801a      	strh	r2, [r3, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	6c0007fe 	.word	0x6c0007fe

08000fd0 <LCD_WR_DATA>:
//写LCD数据
//data:要写入的值
void LCD_WR_DATA(vu16 data)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
	//data=data;			//使用-O2优化的时候,必须插入的延时
	LCD->LCD_RAM=data;
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <LCD_WR_DATA+0x1c>)
 8000fdc:	88fa      	ldrh	r2, [r7, #6]
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	805a      	strh	r2, [r3, #2]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	6c0007fe 	.word	0x6c0007fe

08000ff0 <LCD_RD_DATA>:
//读LCD数据
//返回值:读到的值
u16 LCD_RD_DATA(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
	vu16 ram;			//防止被优化
	ram=LCD->LCD_RAM;
 8000ff6:	4b05      	ldr	r3, [pc, #20]	; (800100c <LCD_RD_DATA+0x1c>)
 8000ff8:	885b      	ldrh	r3, [r3, #2]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	b29b      	uxth	r3, r3
}
 8001002:	4618      	mov	r0, r3
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	6c0007fe 	.word	0x6c0007fe

08001010 <LCD_WriteReg>:
//写寄存器
//LCD_Reg:寄存器地址
//LCD_RegValue:要写入的数据
void LCD_WriteReg(u16 LCD_Reg,u16 LCD_RegValue)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	460a      	mov	r2, r1
 800101a:	80fb      	strh	r3, [r7, #6]
 800101c:	4613      	mov	r3, r2
 800101e:	80bb      	strh	r3, [r7, #4]
	LCD->LCD_REG = LCD_Reg;		//写入要写的寄存器序号
 8001020:	4a05      	ldr	r2, [pc, #20]	; (8001038 <LCD_WriteReg+0x28>)
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	8013      	strh	r3, [r2, #0]
	LCD->LCD_RAM = LCD_RegValue;//写入数据
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <LCD_WriteReg+0x28>)
 8001028:	88bb      	ldrh	r3, [r7, #4]
 800102a:	8053      	strh	r3, [r2, #2]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	6c0007fe 	.word	0x6c0007fe

0800103c <LCD_WriteRAM_Prepare>:
	HAL_Delay(5);
	return LCD_RD_DATA();		//返回读到的值
}
//开始写GRAM
void LCD_WriteRAM_Prepare(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
 	LCD->LCD_REG=lcddev.wramcmd;
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <LCD_WriteRAM_Prepare+0x14>)
 8001042:	4a04      	ldr	r2, [pc, #16]	; (8001054 <LCD_WriteRAM_Prepare+0x18>)
 8001044:	8912      	ldrh	r2, [r2, #8]
 8001046:	801a      	strh	r2, [r3, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr
 8001050:	6c0007fe 	.word	0x6c0007fe
 8001054:	20000080 	.word	0x20000080

08001058 <LCD_SetCursor>:
}
//设置光标位置(对RGB屏无效)
//Xpos:横坐标
//Ypos:纵坐标
void LCD_SetCursor(u16 Xpos, u16 Ypos)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	80fb      	strh	r3, [r7, #6]
 8001064:	4613      	mov	r3, r2
 8001066:	80bb      	strh	r3, [r7, #4]
 	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001068:	4b6b      	ldr	r3, [pc, #428]	; (8001218 <LCD_SetCursor+0x1c0>)
 800106a:	889b      	ldrh	r3, [r3, #4]
 800106c:	f249 3241 	movw	r2, #37697	; 0x9341
 8001070:	4293      	cmp	r3, r2
 8001072:	d005      	beq.n	8001080 <LCD_SetCursor+0x28>
 8001074:	4b68      	ldr	r3, [pc, #416]	; (8001218 <LCD_SetCursor+0x1c0>)
 8001076:	889b      	ldrh	r3, [r3, #4]
 8001078:	f245 3210 	movw	r2, #21264	; 0x5310
 800107c:	4293      	cmp	r3, r2
 800107e:	d122      	bne.n	80010c6 <LCD_SetCursor+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 8001080:	4b65      	ldr	r3, [pc, #404]	; (8001218 <LCD_SetCursor+0x1c0>)
 8001082:	895b      	ldrh	r3, [r3, #10]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff93 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 800108a:	88fb      	ldrh	r3, [r7, #6]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	b29b      	uxth	r3, r3
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff9d 	bl	8000fd0 <LCD_WR_DATA>
 8001096:	88fb      	ldrh	r3, [r7, #6]
 8001098:	b2db      	uxtb	r3, r3
 800109a:	b29b      	uxth	r3, r3
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff97 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 80010a2:	4b5d      	ldr	r3, [pc, #372]	; (8001218 <LCD_SetCursor+0x1c0>)
 80010a4:	899b      	ldrh	r3, [r3, #12]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff ff82 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 80010ac:	88bb      	ldrh	r3, [r7, #4]
 80010ae:	0a1b      	lsrs	r3, r3, #8
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff8c 	bl	8000fd0 <LCD_WR_DATA>
 80010b8:	88bb      	ldrh	r3, [r7, #4]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	b29b      	uxth	r3, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ff86 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
	}
}
 80010c4:	e0a3      	b.n	800120e <LCD_SetCursor+0x1b6>
	}else if(lcddev.id==0X1963)
 80010c6:	4b54      	ldr	r3, [pc, #336]	; (8001218 <LCD_SetCursor+0x1c0>)
 80010c8:	889b      	ldrh	r3, [r3, #4]
 80010ca:	f641 1263 	movw	r2, #6499	; 0x1963
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d167      	bne.n	80011a2 <LCD_SetCursor+0x14a>
		if(lcddev.dir==0)//x坐标需要变换
 80010d2:	4b51      	ldr	r3, [pc, #324]	; (8001218 <LCD_SetCursor+0x1c0>)
 80010d4:	799b      	ldrb	r3, [r3, #6]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d11e      	bne.n	8001118 <LCD_SetCursor+0xc0>
			Xpos=lcddev.width-1-Xpos;
 80010da:	4b4f      	ldr	r3, [pc, #316]	; (8001218 <LCD_SetCursor+0x1c0>)
 80010dc:	881a      	ldrh	r2, [r3, #0]
 80010de:	88fb      	ldrh	r3, [r7, #6]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	3b01      	subs	r3, #1
 80010e6:	80fb      	strh	r3, [r7, #6]
			LCD_WR_REG(lcddev.setxcmd);
 80010e8:	4b4b      	ldr	r3, [pc, #300]	; (8001218 <LCD_SetCursor+0x1c0>)
 80010ea:	895b      	ldrh	r3, [r3, #10]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff5f 	bl	8000fb0 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80010f2:	2000      	movs	r0, #0
 80010f4:	f7ff ff6c 	bl	8000fd0 <LCD_WR_DATA>
 80010f8:	2000      	movs	r0, #0
 80010fa:	f7ff ff69 	bl	8000fd0 <LCD_WR_DATA>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	b29b      	uxth	r3, r3
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff63 	bl	8000fd0 <LCD_WR_DATA>
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	b29b      	uxth	r3, r3
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff5d 	bl	8000fd0 <LCD_WR_DATA>
 8001116:	e021      	b.n	800115c <LCD_SetCursor+0x104>
			LCD_WR_REG(lcddev.setxcmd);
 8001118:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <LCD_SetCursor+0x1c0>)
 800111a:	895b      	ldrh	r3, [r3, #10]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff47 	bl	8000fb0 <LCD_WR_REG>
			LCD_WR_DATA(Xpos>>8);LCD_WR_DATA(Xpos&0XFF);
 8001122:	88fb      	ldrh	r3, [r7, #6]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	b29b      	uxth	r3, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff51 	bl	8000fd0 <LCD_WR_DATA>
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	b29b      	uxth	r3, r3
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff4b 	bl	8000fd0 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 800113a:	4b37      	ldr	r3, [pc, #220]	; (8001218 <LCD_SetCursor+0x1c0>)
 800113c:	881b      	ldrh	r3, [r3, #0]
 800113e:	3b01      	subs	r3, #1
 8001140:	121b      	asrs	r3, r3, #8
 8001142:	b29b      	uxth	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff43 	bl	8000fd0 <LCD_WR_DATA>
 800114a:	4b33      	ldr	r3, [pc, #204]	; (8001218 <LCD_SetCursor+0x1c0>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	3b01      	subs	r3, #1
 8001150:	b29b      	uxth	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	b29b      	uxth	r3, r3
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff3a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800115c:	4b2e      	ldr	r3, [pc, #184]	; (8001218 <LCD_SetCursor+0x1c0>)
 800115e:	899b      	ldrh	r3, [r3, #12]
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff ff25 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(Ypos>>8);LCD_WR_DATA(Ypos&0XFF);
 8001166:	88bb      	ldrh	r3, [r7, #4]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	b29b      	uxth	r3, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff2f 	bl	8000fd0 <LCD_WR_DATA>
 8001172:	88bb      	ldrh	r3, [r7, #4]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	b29b      	uxth	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff29 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <LCD_SetCursor+0x1c0>)
 8001180:	885b      	ldrh	r3, [r3, #2]
 8001182:	3b01      	subs	r3, #1
 8001184:	121b      	asrs	r3, r3, #8
 8001186:	b29b      	uxth	r3, r3
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff ff21 	bl	8000fd0 <LCD_WR_DATA>
 800118e:	4b22      	ldr	r3, [pc, #136]	; (8001218 <LCD_SetCursor+0x1c0>)
 8001190:	885b      	ldrh	r3, [r3, #2]
 8001192:	3b01      	subs	r3, #1
 8001194:	b29b      	uxth	r3, r3
 8001196:	b2db      	uxtb	r3, r3
 8001198:	b29b      	uxth	r3, r3
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff18 	bl	8000fd0 <LCD_WR_DATA>
}
 80011a0:	e035      	b.n	800120e <LCD_SetCursor+0x1b6>
	}else if(lcddev.id==0X5510)
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <LCD_SetCursor+0x1c0>)
 80011a4:	889b      	ldrh	r3, [r3, #4]
 80011a6:	f245 5210 	movw	r2, #21776	; 0x5510
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d12f      	bne.n	800120e <LCD_SetCursor+0x1b6>
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(Xpos>>8);
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <LCD_SetCursor+0x1c0>)
 80011b0:	895b      	ldrh	r3, [r3, #10]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fefc 	bl	8000fb0 <LCD_WR_REG>
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	0a1b      	lsrs	r3, r3, #8
 80011bc:	b29b      	uxth	r3, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff06 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(Xpos&0XFF);
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <LCD_SetCursor+0x1c0>)
 80011c6:	895b      	ldrh	r3, [r3, #10]
 80011c8:	3301      	adds	r3, #1
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff feef 	bl	8000fb0 <LCD_WR_REG>
 80011d2:	88fb      	ldrh	r3, [r7, #6]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff fef9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(Ypos>>8);
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <LCD_SetCursor+0x1c0>)
 80011e0:	899b      	ldrh	r3, [r3, #12]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff fee4 	bl	8000fb0 <LCD_WR_REG>
 80011e8:	88bb      	ldrh	r3, [r7, #4]
 80011ea:	0a1b      	lsrs	r3, r3, #8
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff feee 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(Ypos&0XFF);
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <LCD_SetCursor+0x1c0>)
 80011f6:	899b      	ldrh	r3, [r3, #12]
 80011f8:	3301      	adds	r3, #1
 80011fa:	b29b      	uxth	r3, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fed7 	bl	8000fb0 <LCD_WR_REG>
 8001202:	88bb      	ldrh	r3, [r7, #4]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	b29b      	uxth	r3, r3
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fee1 	bl	8000fd0 <LCD_WR_DATA>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000080 	.word	0x20000080

0800121c <LCD_Scan_Dir>:
//注意:其他函数可能会受到此函数设置的影响(尤其是9341),
//所以,一般设置为L2R_U2D即可,如果设置为其他扫描方式,可能导致显示不正常.
//dir:0~7,代表8个方向(具体定义见lcd.h)
//9341/5310/5510/1963等IC已经实际测试
void LCD_Scan_Dir(u8 dir)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b084      	sub	sp, #16
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
	u16 regval=0;
 8001226:	2300      	movs	r3, #0
 8001228:	81fb      	strh	r3, [r7, #14]
	u16 dirreg=0;
 800122a:	2300      	movs	r3, #0
 800122c:	81bb      	strh	r3, [r7, #12]
	u16 temp;
	if((lcddev.dir==1&&lcddev.id!=0X1963)||(lcddev.dir==0&&lcddev.id==0X1963))//横屏时，对1963不改变扫描方向！竖屏时1963改变方向
 800122e:	4ba9      	ldr	r3, [pc, #676]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 8001230:	799b      	ldrb	r3, [r3, #6]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d105      	bne.n	8001242 <LCD_Scan_Dir+0x26>
 8001236:	4ba7      	ldr	r3, [pc, #668]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 8001238:	889b      	ldrh	r3, [r3, #4]
 800123a:	f641 1263 	movw	r2, #6499	; 0x1963
 800123e:	4293      	cmp	r3, r2
 8001240:	d109      	bne.n	8001256 <LCD_Scan_Dir+0x3a>
 8001242:	4ba4      	ldr	r3, [pc, #656]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 8001244:	799b      	ldrb	r3, [r3, #6]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d134      	bne.n	80012b4 <LCD_Scan_Dir+0x98>
 800124a:	4ba2      	ldr	r3, [pc, #648]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 800124c:	889b      	ldrh	r3, [r3, #4]
 800124e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001252:	4293      	cmp	r3, r2
 8001254:	d12e      	bne.n	80012b4 <LCD_Scan_Dir+0x98>
	{
		switch(dir)//方向转换
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	2b07      	cmp	r3, #7
 800125a:	d82b      	bhi.n	80012b4 <LCD_Scan_Dir+0x98>
 800125c:	a201      	add	r2, pc, #4	; (adr r2, 8001264 <LCD_Scan_Dir+0x48>)
 800125e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001262:	bf00      	nop
 8001264:	08001285 	.word	0x08001285
 8001268:	0800128b 	.word	0x0800128b
 800126c:	08001291 	.word	0x08001291
 8001270:	08001297 	.word	0x08001297
 8001274:	0800129d 	.word	0x0800129d
 8001278:	080012a3 	.word	0x080012a3
 800127c:	080012a9 	.word	0x080012a9
 8001280:	080012af 	.word	0x080012af
		{
			case 0:dir=6;break;
 8001284:	2306      	movs	r3, #6
 8001286:	71fb      	strb	r3, [r7, #7]
 8001288:	e014      	b.n	80012b4 <LCD_Scan_Dir+0x98>
			case 1:dir=7;break;
 800128a:	2307      	movs	r3, #7
 800128c:	71fb      	strb	r3, [r7, #7]
 800128e:	e011      	b.n	80012b4 <LCD_Scan_Dir+0x98>
			case 2:dir=4;break;
 8001290:	2304      	movs	r3, #4
 8001292:	71fb      	strb	r3, [r7, #7]
 8001294:	e00e      	b.n	80012b4 <LCD_Scan_Dir+0x98>
			case 3:dir=5;break;
 8001296:	2305      	movs	r3, #5
 8001298:	71fb      	strb	r3, [r7, #7]
 800129a:	e00b      	b.n	80012b4 <LCD_Scan_Dir+0x98>
			case 4:dir=1;break;
 800129c:	2301      	movs	r3, #1
 800129e:	71fb      	strb	r3, [r7, #7]
 80012a0:	e008      	b.n	80012b4 <LCD_Scan_Dir+0x98>
			case 5:dir=0;break;
 80012a2:	2300      	movs	r3, #0
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	e005      	b.n	80012b4 <LCD_Scan_Dir+0x98>
			case 6:dir=3;break;
 80012a8:	2303      	movs	r3, #3
 80012aa:	71fb      	strb	r3, [r7, #7]
 80012ac:	e002      	b.n	80012b4 <LCD_Scan_Dir+0x98>
			case 7:dir=2;break;
 80012ae:	2302      	movs	r3, #2
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	bf00      	nop
		}
	}
	if(lcddev.id==0x9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//9341/5310/5510/1963,特殊处理
 80012b4:	4b87      	ldr	r3, [pc, #540]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80012b6:	889b      	ldrh	r3, [r3, #4]
 80012b8:	f249 3241 	movw	r2, #37697	; 0x9341
 80012bc:	4293      	cmp	r3, r2
 80012be:	d012      	beq.n	80012e6 <LCD_Scan_Dir+0xca>
 80012c0:	4b84      	ldr	r3, [pc, #528]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80012c2:	889b      	ldrh	r3, [r3, #4]
 80012c4:	f245 3210 	movw	r2, #21264	; 0x5310
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d00c      	beq.n	80012e6 <LCD_Scan_Dir+0xca>
 80012cc:	4b81      	ldr	r3, [pc, #516]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80012ce:	889b      	ldrh	r3, [r3, #4]
 80012d0:	f245 5210 	movw	r2, #21776	; 0x5510
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d006      	beq.n	80012e6 <LCD_Scan_Dir+0xca>
 80012d8:	4b7e      	ldr	r3, [pc, #504]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80012da:	889b      	ldrh	r3, [r3, #4]
 80012dc:	f641 1263 	movw	r2, #6499	; 0x1963
 80012e0:	4293      	cmp	r3, r2
 80012e2:	f040 8131 	bne.w	8001548 <LCD_Scan_Dir+0x32c>
	{
		switch(dir)
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2b07      	cmp	r3, #7
 80012ea:	d836      	bhi.n	800135a <LCD_Scan_Dir+0x13e>
 80012ec:	a201      	add	r2, pc, #4	; (adr r2, 80012f4 <LCD_Scan_Dir+0xd8>)
 80012ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f2:	bf00      	nop
 80012f4:	0800135b 	.word	0x0800135b
 80012f8:	08001315 	.word	0x08001315
 80012fc:	0800131f 	.word	0x0800131f
 8001300:	08001329 	.word	0x08001329
 8001304:	08001333 	.word	0x08001333
 8001308:	0800133d 	.word	0x0800133d
 800130c:	08001347 	.word	0x08001347
 8001310:	08001351 	.word	0x08001351
		{
			case L2R_U2D://从左到右,从上到下
				regval|=(0<<7)|(0<<6)|(0<<5);
				break;
			case L2R_D2U://从左到右,从下到上
				regval|=(1<<7)|(0<<6)|(0<<5);
 8001314:	89fb      	ldrh	r3, [r7, #14]
 8001316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800131a:	81fb      	strh	r3, [r7, #14]
				break;
 800131c:	e01d      	b.n	800135a <LCD_Scan_Dir+0x13e>
			case R2L_U2D://从右到左,从上到下
				regval|=(0<<7)|(1<<6)|(0<<5);
 800131e:	89fb      	ldrh	r3, [r7, #14]
 8001320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001324:	81fb      	strh	r3, [r7, #14]
				break;
 8001326:	e018      	b.n	800135a <LCD_Scan_Dir+0x13e>
			case R2L_D2U://从右到左,从下到上
				regval|=(1<<7)|(1<<6)|(0<<5);
 8001328:	89fb      	ldrh	r3, [r7, #14]
 800132a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800132e:	81fb      	strh	r3, [r7, #14]
				break;
 8001330:	e013      	b.n	800135a <LCD_Scan_Dir+0x13e>
			case U2D_L2R://从上到下,从左到右
				regval|=(0<<7)|(0<<6)|(1<<5);
 8001332:	89fb      	ldrh	r3, [r7, #14]
 8001334:	f043 0320 	orr.w	r3, r3, #32
 8001338:	81fb      	strh	r3, [r7, #14]
				break;
 800133a:	e00e      	b.n	800135a <LCD_Scan_Dir+0x13e>
			case U2D_R2L://从上到下,从右到左
				regval|=(0<<7)|(1<<6)|(1<<5);
 800133c:	89fb      	ldrh	r3, [r7, #14]
 800133e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001342:	81fb      	strh	r3, [r7, #14]
				break;
 8001344:	e009      	b.n	800135a <LCD_Scan_Dir+0x13e>
			case D2U_L2R://从下到上,从左到右
				regval|=(1<<7)|(0<<6)|(1<<5);
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800134c:	81fb      	strh	r3, [r7, #14]
				break;
 800134e:	e004      	b.n	800135a <LCD_Scan_Dir+0x13e>
			case D2U_R2L://从下到上,从右到左
				regval|=(1<<7)|(1<<6)|(1<<5);
 8001350:	89fb      	ldrh	r3, [r7, #14]
 8001352:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8001356:	81fb      	strh	r3, [r7, #14]
				break;
 8001358:	bf00      	nop
		}
		if(lcddev.id==0X5510)dirreg=0X3600;
 800135a:	4b5e      	ldr	r3, [pc, #376]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 800135c:	889b      	ldrh	r3, [r3, #4]
 800135e:	f245 5210 	movw	r2, #21776	; 0x5510
 8001362:	4293      	cmp	r3, r2
 8001364:	d103      	bne.n	800136e <LCD_Scan_Dir+0x152>
 8001366:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 800136a:	81bb      	strh	r3, [r7, #12]
 800136c:	e001      	b.n	8001372 <LCD_Scan_Dir+0x156>
		else dirreg=0X36;
 800136e:	2336      	movs	r3, #54	; 0x36
 8001370:	81bb      	strh	r3, [r7, #12]
 		if((lcddev.id!=0X5310)&&(lcddev.id!=0X5510)&&(lcddev.id!=0X1963))regval|=0X08;//5310/5510/1963不需要BGR
 8001372:	4b58      	ldr	r3, [pc, #352]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 8001374:	889b      	ldrh	r3, [r3, #4]
 8001376:	f245 3210 	movw	r2, #21264	; 0x5310
 800137a:	4293      	cmp	r3, r2
 800137c:	d00f      	beq.n	800139e <LCD_Scan_Dir+0x182>
 800137e:	4b55      	ldr	r3, [pc, #340]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 8001380:	889b      	ldrh	r3, [r3, #4]
 8001382:	f245 5210 	movw	r2, #21776	; 0x5510
 8001386:	4293      	cmp	r3, r2
 8001388:	d009      	beq.n	800139e <LCD_Scan_Dir+0x182>
 800138a:	4b52      	ldr	r3, [pc, #328]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 800138c:	889b      	ldrh	r3, [r3, #4]
 800138e:	f641 1263 	movw	r2, #6499	; 0x1963
 8001392:	4293      	cmp	r3, r2
 8001394:	d003      	beq.n	800139e <LCD_Scan_Dir+0x182>
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	f043 0308 	orr.w	r3, r3, #8
 800139c:	81fb      	strh	r3, [r7, #14]
 		LCD_WriteReg(dirreg,regval);
 800139e:	89fa      	ldrh	r2, [r7, #14]
 80013a0:	89bb      	ldrh	r3, [r7, #12]
 80013a2:	4611      	mov	r1, r2
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff fe33 	bl	8001010 <LCD_WriteReg>
		if(lcddev.id!=0X1963)//1963不做坐标处理
 80013aa:	4b4a      	ldr	r3, [pc, #296]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80013ac:	889b      	ldrh	r3, [r3, #4]
 80013ae:	f641 1263 	movw	r2, #6499	; 0x1963
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d025      	beq.n	8001402 <LCD_Scan_Dir+0x1e6>
		{
			if(regval&0X20)
 80013b6:	89fb      	ldrh	r3, [r7, #14]
 80013b8:	f003 0320 	and.w	r3, r3, #32
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d010      	beq.n	80013e2 <LCD_Scan_Dir+0x1c6>
			{
				if(lcddev.width<lcddev.height)//交换X,Y
 80013c0:	4b44      	ldr	r3, [pc, #272]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80013c2:	881a      	ldrh	r2, [r3, #0]
 80013c4:	4b43      	ldr	r3, [pc, #268]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80013c6:	885b      	ldrh	r3, [r3, #2]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d21a      	bcs.n	8001402 <LCD_Scan_Dir+0x1e6>
				{
					temp=lcddev.width;
 80013cc:	4b41      	ldr	r3, [pc, #260]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 80013d2:	4b40      	ldr	r3, [pc, #256]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80013d4:	885a      	ldrh	r2, [r3, #2]
 80013d6:	4b3f      	ldr	r3, [pc, #252]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80013d8:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80013da:	4a3e      	ldr	r2, [pc, #248]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80013dc:	897b      	ldrh	r3, [r7, #10]
 80013de:	8053      	strh	r3, [r2, #2]
 80013e0:	e00f      	b.n	8001402 <LCD_Scan_Dir+0x1e6>
				}
			}else
			{
				if(lcddev.width>lcddev.height)//交换X,Y
 80013e2:	4b3c      	ldr	r3, [pc, #240]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80013e4:	881a      	ldrh	r2, [r3, #0]
 80013e6:	4b3b      	ldr	r3, [pc, #236]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80013e8:	885b      	ldrh	r3, [r3, #2]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d909      	bls.n	8001402 <LCD_Scan_Dir+0x1e6>
				{
					temp=lcddev.width;
 80013ee:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	817b      	strh	r3, [r7, #10]
					lcddev.width=lcddev.height;
 80013f4:	4b37      	ldr	r3, [pc, #220]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80013f6:	885a      	ldrh	r2, [r3, #2]
 80013f8:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80013fa:	801a      	strh	r2, [r3, #0]
					lcddev.height=temp;
 80013fc:	4a35      	ldr	r2, [pc, #212]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80013fe:	897b      	ldrh	r3, [r7, #10]
 8001400:	8053      	strh	r3, [r2, #2]
				}
			}
		}
		if(lcddev.id==0X5510)
 8001402:	4b34      	ldr	r3, [pc, #208]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 8001404:	889b      	ldrh	r3, [r3, #4]
 8001406:	f245 5210 	movw	r2, #21776	; 0x5510
 800140a:	4293      	cmp	r3, r2
 800140c:	d164      	bne.n	80014d8 <LCD_Scan_Dir+0x2bc>
		{
			LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(0);
 800140e:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 8001410:	895b      	ldrh	r3, [r3, #10]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fdcc 	bl	8000fb0 <LCD_WR_REG>
 8001418:	2000      	movs	r0, #0
 800141a:	f7ff fdd9 	bl	8000fd0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(0);
 800141e:	4b2d      	ldr	r3, [pc, #180]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 8001420:	895b      	ldrh	r3, [r3, #10]
 8001422:	3301      	adds	r3, #1
 8001424:	b29b      	uxth	r3, r3
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff fdc2 	bl	8000fb0 <LCD_WR_REG>
 800142c:	2000      	movs	r0, #0
 800142e:	f7ff fdcf 	bl	8000fd0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+2);LCD_WR_DATA((lcddev.width-1)>>8);
 8001432:	4b28      	ldr	r3, [pc, #160]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 8001434:	895b      	ldrh	r3, [r3, #10]
 8001436:	3302      	adds	r3, #2
 8001438:	b29b      	uxth	r3, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fdb8 	bl	8000fb0 <LCD_WR_REG>
 8001440:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 8001442:	881b      	ldrh	r3, [r3, #0]
 8001444:	3b01      	subs	r3, #1
 8001446:	121b      	asrs	r3, r3, #8
 8001448:	b29b      	uxth	r3, r3
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fdc0 	bl	8000fd0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setxcmd+3);LCD_WR_DATA((lcddev.width-1)&0XFF);
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 8001452:	895b      	ldrh	r3, [r3, #10]
 8001454:	3303      	adds	r3, #3
 8001456:	b29b      	uxth	r3, r3
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fda9 	bl	8000fb0 <LCD_WR_REG>
 800145e:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	3b01      	subs	r3, #1
 8001464:	b29b      	uxth	r3, r3
 8001466:	b2db      	uxtb	r3, r3
 8001468:	b29b      	uxth	r3, r3
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fdb0 	bl	8000fd0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(0);
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 8001472:	899b      	ldrh	r3, [r3, #12]
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fd9b 	bl	8000fb0 <LCD_WR_REG>
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff fda8 	bl	8000fd0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(0);
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 8001482:	899b      	ldrh	r3, [r3, #12]
 8001484:	3301      	adds	r3, #1
 8001486:	b29b      	uxth	r3, r3
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fd91 	bl	8000fb0 <LCD_WR_REG>
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff fd9e 	bl	8000fd0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+2);LCD_WR_DATA((lcddev.height-1)>>8);
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 8001496:	899b      	ldrh	r3, [r3, #12]
 8001498:	3302      	adds	r3, #2
 800149a:	b29b      	uxth	r3, r3
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fd87 	bl	8000fb0 <LCD_WR_REG>
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80014a4:	885b      	ldrh	r3, [r3, #2]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	121b      	asrs	r3, r3, #8
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fd8f 	bl	8000fd0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd+3);LCD_WR_DATA((lcddev.height-1)&0XFF);
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80014b4:	899b      	ldrh	r3, [r3, #12]
 80014b6:	3303      	adds	r3, #3
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff fd78 	bl	8000fb0 <LCD_WR_REG>
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <LCD_Scan_Dir+0x2b8>)
 80014c2:	885b      	ldrh	r3, [r3, #2]
 80014c4:	3b01      	subs	r3, #1
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fd7f 	bl	8000fd0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
			LCD_WR_DATA(0);LCD_WR_DATA(0);
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
		}
  	}
}
 80014d2:	e039      	b.n	8001548 <LCD_Scan_Dir+0x32c>
 80014d4:	20000080 	.word	0x20000080
			LCD_WR_REG(lcddev.setxcmd);
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <LCD_Scan_Dir+0x334>)
 80014da:	895b      	ldrh	r3, [r3, #10]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fd67 	bl	8000fb0 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 80014e2:	2000      	movs	r0, #0
 80014e4:	f7ff fd74 	bl	8000fd0 <LCD_WR_DATA>
 80014e8:	2000      	movs	r0, #0
 80014ea:	f7ff fd71 	bl	8000fd0 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.width-1)>>8);LCD_WR_DATA((lcddev.width-1)&0XFF);
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <LCD_Scan_Dir+0x334>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	121b      	asrs	r3, r3, #8
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fd69 	bl	8000fd0 <LCD_WR_DATA>
 80014fe:	4b14      	ldr	r3, [pc, #80]	; (8001550 <LCD_Scan_Dir+0x334>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	3b01      	subs	r3, #1
 8001504:	b29b      	uxth	r3, r3
 8001506:	b2db      	uxtb	r3, r3
 8001508:	b29b      	uxth	r3, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fd60 	bl	8000fd0 <LCD_WR_DATA>
			LCD_WR_REG(lcddev.setycmd);
 8001510:	4b0f      	ldr	r3, [pc, #60]	; (8001550 <LCD_Scan_Dir+0x334>)
 8001512:	899b      	ldrh	r3, [r3, #12]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff fd4b 	bl	8000fb0 <LCD_WR_REG>
			LCD_WR_DATA(0);LCD_WR_DATA(0);
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff fd58 	bl	8000fd0 <LCD_WR_DATA>
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff fd55 	bl	8000fd0 <LCD_WR_DATA>
			LCD_WR_DATA((lcddev.height-1)>>8);LCD_WR_DATA((lcddev.height-1)&0XFF);
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <LCD_Scan_Dir+0x334>)
 8001528:	885b      	ldrh	r3, [r3, #2]
 800152a:	3b01      	subs	r3, #1
 800152c:	121b      	asrs	r3, r3, #8
 800152e:	b29b      	uxth	r3, r3
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fd4d 	bl	8000fd0 <LCD_WR_DATA>
 8001536:	4b06      	ldr	r3, [pc, #24]	; (8001550 <LCD_Scan_Dir+0x334>)
 8001538:	885b      	ldrh	r3, [r3, #2]
 800153a:	3b01      	subs	r3, #1
 800153c:	b29b      	uxth	r3, r3
 800153e:	b2db      	uxtb	r3, r3
 8001540:	b29b      	uxth	r3, r3
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fd44 	bl	8000fd0 <LCD_WR_DATA>
}
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000080 	.word	0x20000080

08001554 <LCD_Fast_DrawPoint>:
}
//快速画点
//x,y:坐标
//color:颜色
void LCD_Fast_DrawPoint(u16 x,u16 y,u32 color)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	603a      	str	r2, [r7, #0]
 800155e:	80fb      	strh	r3, [r7, #6]
 8001560:	460b      	mov	r3, r1
 8001562:	80bb      	strh	r3, [r7, #4]
	if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001564:	4b5e      	ldr	r3, [pc, #376]	; (80016e0 <LCD_Fast_DrawPoint+0x18c>)
 8001566:	889b      	ldrh	r3, [r3, #4]
 8001568:	f249 3241 	movw	r2, #37697	; 0x9341
 800156c:	4293      	cmp	r3, r2
 800156e:	d005      	beq.n	800157c <LCD_Fast_DrawPoint+0x28>
 8001570:	4b5b      	ldr	r3, [pc, #364]	; (80016e0 <LCD_Fast_DrawPoint+0x18c>)
 8001572:	889b      	ldrh	r3, [r3, #4]
 8001574:	f245 3210 	movw	r2, #21264	; 0x5310
 8001578:	4293      	cmp	r3, r2
 800157a:	d122      	bne.n	80015c2 <LCD_Fast_DrawPoint+0x6e>
	{
		LCD_WR_REG(lcddev.setxcmd);
 800157c:	4b58      	ldr	r3, [pc, #352]	; (80016e0 <LCD_Fast_DrawPoint+0x18c>)
 800157e:	895b      	ldrh	r3, [r3, #10]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fd15 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	0a1b      	lsrs	r3, r3, #8
 800158a:	b29b      	uxth	r3, r3
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff fd1f 	bl	8000fd0 <LCD_WR_DATA>
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	b2db      	uxtb	r3, r3
 8001596:	b29b      	uxth	r3, r3
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff fd19 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800159e:	4b50      	ldr	r3, [pc, #320]	; (80016e0 <LCD_Fast_DrawPoint+0x18c>)
 80015a0:	899b      	ldrh	r3, [r3, #12]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7ff fd04 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80015a8:	88bb      	ldrh	r3, [r7, #4]
 80015aa:	0a1b      	lsrs	r3, r3, #8
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff fd0e 	bl	8000fd0 <LCD_WR_DATA>
 80015b4:	88bb      	ldrh	r3, [r7, #4]
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7ff fd08 	bl	8000fd0 <LCD_WR_DATA>
 80015c0:	e081      	b.n	80016c6 <LCD_Fast_DrawPoint+0x172>
	}else if(lcddev.id==0X5510)
 80015c2:	4b47      	ldr	r3, [pc, #284]	; (80016e0 <LCD_Fast_DrawPoint+0x18c>)
 80015c4:	889b      	ldrh	r3, [r3, #4]
 80015c6:	f245 5210 	movw	r2, #21776	; 0x5510
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d130      	bne.n	8001630 <LCD_Fast_DrawPoint+0xdc>
	{
		LCD_WR_REG(lcddev.setxcmd);LCD_WR_DATA(x>>8);
 80015ce:	4b44      	ldr	r3, [pc, #272]	; (80016e0 <LCD_Fast_DrawPoint+0x18c>)
 80015d0:	895b      	ldrh	r3, [r3, #10]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fcec 	bl	8000fb0 <LCD_WR_REG>
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	0a1b      	lsrs	r3, r3, #8
 80015dc:	b29b      	uxth	r3, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff fcf6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setxcmd+1);LCD_WR_DATA(x&0XFF);
 80015e4:	4b3e      	ldr	r3, [pc, #248]	; (80016e0 <LCD_Fast_DrawPoint+0x18c>)
 80015e6:	895b      	ldrh	r3, [r3, #10]
 80015e8:	3301      	adds	r3, #1
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fcdf 	bl	8000fb0 <LCD_WR_REG>
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fce9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);LCD_WR_DATA(y>>8);
 80015fe:	4b38      	ldr	r3, [pc, #224]	; (80016e0 <LCD_Fast_DrawPoint+0x18c>)
 8001600:	899b      	ldrh	r3, [r3, #12]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fcd4 	bl	8000fb0 <LCD_WR_REG>
 8001608:	88bb      	ldrh	r3, [r7, #4]
 800160a:	0a1b      	lsrs	r3, r3, #8
 800160c:	b29b      	uxth	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff fcde 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd+1);LCD_WR_DATA(y&0XFF);
 8001614:	4b32      	ldr	r3, [pc, #200]	; (80016e0 <LCD_Fast_DrawPoint+0x18c>)
 8001616:	899b      	ldrh	r3, [r3, #12]
 8001618:	3301      	adds	r3, #1
 800161a:	b29b      	uxth	r3, r3
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fcc7 	bl	8000fb0 <LCD_WR_REG>
 8001622:	88bb      	ldrh	r3, [r7, #4]
 8001624:	b2db      	uxtb	r3, r3
 8001626:	b29b      	uxth	r3, r3
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fcd1 	bl	8000fd0 <LCD_WR_DATA>
 800162e:	e04a      	b.n	80016c6 <LCD_Fast_DrawPoint+0x172>
	}else if(lcddev.id==0X1963)
 8001630:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <LCD_Fast_DrawPoint+0x18c>)
 8001632:	889b      	ldrh	r3, [r3, #4]
 8001634:	f641 1263 	movw	r2, #6499	; 0x1963
 8001638:	4293      	cmp	r3, r2
 800163a:	d144      	bne.n	80016c6 <LCD_Fast_DrawPoint+0x172>
	{
		if(lcddev.dir==0)x=lcddev.width-1-x;
 800163c:	4b28      	ldr	r3, [pc, #160]	; (80016e0 <LCD_Fast_DrawPoint+0x18c>)
 800163e:	799b      	ldrb	r3, [r3, #6]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d106      	bne.n	8001652 <LCD_Fast_DrawPoint+0xfe>
 8001644:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <LCD_Fast_DrawPoint+0x18c>)
 8001646:	881a      	ldrh	r2, [r3, #0]
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	b29b      	uxth	r3, r3
 800164e:	3b01      	subs	r3, #1
 8001650:	80fb      	strh	r3, [r7, #6]
		LCD_WR_REG(lcddev.setxcmd);
 8001652:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <LCD_Fast_DrawPoint+0x18c>)
 8001654:	895b      	ldrh	r3, [r3, #10]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff fcaa 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	0a1b      	lsrs	r3, r3, #8
 8001660:	b29b      	uxth	r3, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fcb4 	bl	8000fd0 <LCD_WR_DATA>
 8001668:	88fb      	ldrh	r3, [r7, #6]
 800166a:	b2db      	uxtb	r3, r3
 800166c:	b29b      	uxth	r3, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff fcae 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(x>>8);LCD_WR_DATA(x&0XFF);
 8001674:	88fb      	ldrh	r3, [r7, #6]
 8001676:	0a1b      	lsrs	r3, r3, #8
 8001678:	b29b      	uxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fca8 	bl	8000fd0 <LCD_WR_DATA>
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	b2db      	uxtb	r3, r3
 8001684:	b29b      	uxth	r3, r3
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fca2 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(lcddev.setycmd);
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <LCD_Fast_DrawPoint+0x18c>)
 800168e:	899b      	ldrh	r3, [r3, #12]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fc8d 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 8001696:	88bb      	ldrh	r3, [r7, #4]
 8001698:	0a1b      	lsrs	r3, r3, #8
 800169a:	b29b      	uxth	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fc97 	bl	8000fd0 <LCD_WR_DATA>
 80016a2:	88bb      	ldrh	r3, [r7, #4]
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fc91 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(y>>8);LCD_WR_DATA(y&0XFF);
 80016ae:	88bb      	ldrh	r3, [r7, #4]
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff fc8b 	bl	8000fd0 <LCD_WR_DATA>
 80016ba:	88bb      	ldrh	r3, [r7, #4]
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fc85 	bl	8000fd0 <LCD_WR_DATA>
	}
	LCD->LCD_REG=lcddev.wramcmd;
 80016c6:	4b07      	ldr	r3, [pc, #28]	; (80016e4 <LCD_Fast_DrawPoint+0x190>)
 80016c8:	4a05      	ldr	r2, [pc, #20]	; (80016e0 <LCD_Fast_DrawPoint+0x18c>)
 80016ca:	8912      	ldrh	r2, [r2, #8]
 80016cc:	801a      	strh	r2, [r3, #0]
	LCD->LCD_RAM=color;
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <LCD_Fast_DrawPoint+0x190>)
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	b292      	uxth	r2, r2
 80016d4:	805a      	strh	r2, [r3, #2]
}
 80016d6:	bf00      	nop
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000080 	.word	0x20000080
 80016e4:	6c0007fe 	.word	0x6c0007fe

080016e8 <LCD_SSD_BackLightSet>:
//SSD1963 背光设置
//pwm:背光等级,0~100.越大越亮.
void LCD_SSD_BackLightSet(u8 pwm)
{
 80016e8:	b590      	push	{r4, r7, lr}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
	LCD_WR_REG(0xBE);	//配置PWM输出
 80016f2:	20be      	movs	r0, #190	; 0xbe
 80016f4:	f7ff fc5c 	bl	8000fb0 <LCD_WR_REG>
	LCD_WR_DATA(0x05);	//1设置PWM频率
 80016f8:	2005      	movs	r0, #5
 80016fa:	f7ff fc69 	bl	8000fd0 <LCD_WR_DATA>
	LCD_WR_DATA(pwm*2.55);//2设置PWM占空比
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe feeb 	bl	80004dc <__aeabi_i2d>
 8001706:	a310      	add	r3, pc, #64	; (adr r3, 8001748 <LCD_SSD_BackLightSet+0x60>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7fe ff50 	bl	80005b0 <__aeabi_dmul>
 8001710:	4603      	mov	r3, r0
 8001712:	460c      	mov	r4, r1
 8001714:	4618      	mov	r0, r3
 8001716:	4621      	mov	r1, r4
 8001718:	f7ff f95c 	bl	80009d4 <__aeabi_d2uiz>
 800171c:	4603      	mov	r3, r0
 800171e:	b29b      	uxth	r3, r3
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff fc55 	bl	8000fd0 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);	//3设置C
 8001726:	2001      	movs	r0, #1
 8001728:	f7ff fc52 	bl	8000fd0 <LCD_WR_DATA>
	LCD_WR_DATA(0xFF);	//4设置D
 800172c:	20ff      	movs	r0, #255	; 0xff
 800172e:	f7ff fc4f 	bl	8000fd0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//5设置E
 8001732:	2000      	movs	r0, #0
 8001734:	f7ff fc4c 	bl	8000fd0 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);	//6设置F
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff fc49 	bl	8000fd0 <LCD_WR_DATA>
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	bd90      	pop	{r4, r7, pc}
 8001746:	bf00      	nop
 8001748:	66666666 	.word	0x66666666
 800174c:	40046666 	.word	0x40046666

08001750 <LCD_Display_Dir>:

//设置LCD显示方向
//dir:0,竖屏；1,横屏
void LCD_Display_Dir(u8 dir)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	71fb      	strb	r3, [r7, #7]
	lcddev.dir=dir;		//竖屏/横屏
 800175a:	4a64      	ldr	r2, [pc, #400]	; (80018ec <LCD_Display_Dir+0x19c>)
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	7193      	strb	r3, [r2, #6]
	if(dir==0)			//竖屏
 8001760:	79fb      	ldrb	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d15e      	bne.n	8001824 <LCD_Display_Dir+0xd4>
	{
		lcddev.width=240;
 8001766:	4b61      	ldr	r3, [pc, #388]	; (80018ec <LCD_Display_Dir+0x19c>)
 8001768:	22f0      	movs	r2, #240	; 0xf0
 800176a:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 800176c:	4b5f      	ldr	r3, [pc, #380]	; (80018ec <LCD_Display_Dir+0x19c>)
 800176e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001772:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001774:	4b5d      	ldr	r3, [pc, #372]	; (80018ec <LCD_Display_Dir+0x19c>)
 8001776:	889b      	ldrh	r3, [r3, #4]
 8001778:	f249 3241 	movw	r2, #37697	; 0x9341
 800177c:	4293      	cmp	r3, r2
 800177e:	d005      	beq.n	800178c <LCD_Display_Dir+0x3c>
 8001780:	4b5a      	ldr	r3, [pc, #360]	; (80018ec <LCD_Display_Dir+0x19c>)
 8001782:	889b      	ldrh	r3, [r3, #4]
 8001784:	f245 3210 	movw	r2, #21264	; 0x5310
 8001788:	4293      	cmp	r3, r2
 800178a:	d118      	bne.n	80017be <LCD_Display_Dir+0x6e>
		{
			lcddev.wramcmd=0X2C;
 800178c:	4b57      	ldr	r3, [pc, #348]	; (80018ec <LCD_Display_Dir+0x19c>)
 800178e:	222c      	movs	r2, #44	; 0x2c
 8001790:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001792:	4b56      	ldr	r3, [pc, #344]	; (80018ec <LCD_Display_Dir+0x19c>)
 8001794:	222a      	movs	r2, #42	; 0x2a
 8001796:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001798:	4b54      	ldr	r3, [pc, #336]	; (80018ec <LCD_Display_Dir+0x19c>)
 800179a:	222b      	movs	r2, #43	; 0x2b
 800179c:	819a      	strh	r2, [r3, #12]
			if(lcddev.id==0X5310)
 800179e:	4b53      	ldr	r3, [pc, #332]	; (80018ec <LCD_Display_Dir+0x19c>)
 80017a0:	889b      	ldrh	r3, [r3, #4]
 80017a2:	f245 3210 	movw	r2, #21264	; 0x5310
 80017a6:	4293      	cmp	r3, r2
 80017a8:	f040 8099 	bne.w	80018de <LCD_Display_Dir+0x18e>
			{
				lcddev.width=320;
 80017ac:	4b4f      	ldr	r3, [pc, #316]	; (80018ec <LCD_Display_Dir+0x19c>)
 80017ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80017b2:	801a      	strh	r2, [r3, #0]
				lcddev.height=480;
 80017b4:	4b4d      	ldr	r3, [pc, #308]	; (80018ec <LCD_Display_Dir+0x19c>)
 80017b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80017ba:	805a      	strh	r2, [r3, #2]
			if(lcddev.id==0X5310)
 80017bc:	e08f      	b.n	80018de <LCD_Display_Dir+0x18e>
			}
		}else if(lcddev.id==0x5510)
 80017be:	4b4b      	ldr	r3, [pc, #300]	; (80018ec <LCD_Display_Dir+0x19c>)
 80017c0:	889b      	ldrh	r3, [r3, #4]
 80017c2:	f245 5210 	movw	r2, #21776	; 0x5510
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d114      	bne.n	80017f4 <LCD_Display_Dir+0xa4>
		{
			lcddev.wramcmd=0X2C00;
 80017ca:	4b48      	ldr	r3, [pc, #288]	; (80018ec <LCD_Display_Dir+0x19c>)
 80017cc:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 80017d0:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 80017d2:	4b46      	ldr	r3, [pc, #280]	; (80018ec <LCD_Display_Dir+0x19c>)
 80017d4:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 80017d8:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 80017da:	4b44      	ldr	r3, [pc, #272]	; (80018ec <LCD_Display_Dir+0x19c>)
 80017dc:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 80017e0:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;
 80017e2:	4b42      	ldr	r3, [pc, #264]	; (80018ec <LCD_Display_Dir+0x19c>)
 80017e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80017e8:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;
 80017ea:	4b40      	ldr	r3, [pc, #256]	; (80018ec <LCD_Display_Dir+0x19c>)
 80017ec:	f44f 7248 	mov.w	r2, #800	; 0x320
 80017f0:	805a      	strh	r2, [r3, #2]
 80017f2:	e074      	b.n	80018de <LCD_Display_Dir+0x18e>
		}else if(lcddev.id==0X1963)
 80017f4:	4b3d      	ldr	r3, [pc, #244]	; (80018ec <LCD_Display_Dir+0x19c>)
 80017f6:	889b      	ldrh	r3, [r3, #4]
 80017f8:	f641 1263 	movw	r2, #6499	; 0x1963
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d16e      	bne.n	80018de <LCD_Display_Dir+0x18e>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 8001800:	4b3a      	ldr	r3, [pc, #232]	; (80018ec <LCD_Display_Dir+0x19c>)
 8001802:	222c      	movs	r2, #44	; 0x2c
 8001804:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2B;	//设置写X坐标指令
 8001806:	4b39      	ldr	r3, [pc, #228]	; (80018ec <LCD_Display_Dir+0x19c>)
 8001808:	222b      	movs	r2, #43	; 0x2b
 800180a:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2A;	//设置写Y坐标指令
 800180c:	4b37      	ldr	r3, [pc, #220]	; (80018ec <LCD_Display_Dir+0x19c>)
 800180e:	222a      	movs	r2, #42	; 0x2a
 8001810:	819a      	strh	r2, [r3, #12]
			lcddev.width=480;		//设置宽度480
 8001812:	4b36      	ldr	r3, [pc, #216]	; (80018ec <LCD_Display_Dir+0x19c>)
 8001814:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001818:	801a      	strh	r2, [r3, #0]
			lcddev.height=800;		//设置高度800
 800181a:	4b34      	ldr	r3, [pc, #208]	; (80018ec <LCD_Display_Dir+0x19c>)
 800181c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001820:	805a      	strh	r2, [r3, #2]
 8001822:	e05c      	b.n	80018de <LCD_Display_Dir+0x18e>
		}
	}else 				//横屏
	{
		lcddev.width=320;
 8001824:	4b31      	ldr	r3, [pc, #196]	; (80018ec <LCD_Display_Dir+0x19c>)
 8001826:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800182a:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 800182c:	4b2f      	ldr	r3, [pc, #188]	; (80018ec <LCD_Display_Dir+0x19c>)
 800182e:	22f0      	movs	r2, #240	; 0xf0
 8001830:	805a      	strh	r2, [r3, #2]
		if(lcddev.id==0X9341||lcddev.id==0X5310)
 8001832:	4b2e      	ldr	r3, [pc, #184]	; (80018ec <LCD_Display_Dir+0x19c>)
 8001834:	889b      	ldrh	r3, [r3, #4]
 8001836:	f249 3241 	movw	r2, #37697	; 0x9341
 800183a:	4293      	cmp	r3, r2
 800183c:	d005      	beq.n	800184a <LCD_Display_Dir+0xfa>
 800183e:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <LCD_Display_Dir+0x19c>)
 8001840:	889b      	ldrh	r3, [r3, #4]
 8001842:	f245 3210 	movw	r2, #21264	; 0x5310
 8001846:	4293      	cmp	r3, r2
 8001848:	d109      	bne.n	800185e <LCD_Display_Dir+0x10e>
		{
			lcddev.wramcmd=0X2C;
 800184a:	4b28      	ldr	r3, [pc, #160]	; (80018ec <LCD_Display_Dir+0x19c>)
 800184c:	222c      	movs	r2, #44	; 0x2c
 800184e:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A;
 8001850:	4b26      	ldr	r3, [pc, #152]	; (80018ec <LCD_Display_Dir+0x19c>)
 8001852:	222a      	movs	r2, #42	; 0x2a
 8001854:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;
 8001856:	4b25      	ldr	r3, [pc, #148]	; (80018ec <LCD_Display_Dir+0x19c>)
 8001858:	222b      	movs	r2, #43	; 0x2b
 800185a:	819a      	strh	r2, [r3, #12]
 800185c:	e031      	b.n	80018c2 <LCD_Display_Dir+0x172>
		}else if(lcddev.id==0x5510)
 800185e:	4b23      	ldr	r3, [pc, #140]	; (80018ec <LCD_Display_Dir+0x19c>)
 8001860:	889b      	ldrh	r3, [r3, #4]
 8001862:	f245 5210 	movw	r2, #21776	; 0x5510
 8001866:	4293      	cmp	r3, r2
 8001868:	d114      	bne.n	8001894 <LCD_Display_Dir+0x144>
		{
			lcddev.wramcmd=0X2C00;
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <LCD_Display_Dir+0x19c>)
 800186c:	f44f 5230 	mov.w	r2, #11264	; 0x2c00
 8001870:	811a      	strh	r2, [r3, #8]
	 		lcddev.setxcmd=0X2A00;
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <LCD_Display_Dir+0x19c>)
 8001874:	f44f 5228 	mov.w	r2, #10752	; 0x2a00
 8001878:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B00;
 800187a:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <LCD_Display_Dir+0x19c>)
 800187c:	f44f 522c 	mov.w	r2, #11008	; 0x2b00
 8001880:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <LCD_Display_Dir+0x19c>)
 8001884:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001888:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <LCD_Display_Dir+0x19c>)
 800188c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001890:	805a      	strh	r2, [r3, #2]
 8001892:	e016      	b.n	80018c2 <LCD_Display_Dir+0x172>
		}else if(lcddev.id==0X1963)
 8001894:	4b15      	ldr	r3, [pc, #84]	; (80018ec <LCD_Display_Dir+0x19c>)
 8001896:	889b      	ldrh	r3, [r3, #4]
 8001898:	f641 1263 	movw	r2, #6499	; 0x1963
 800189c:	4293      	cmp	r3, r2
 800189e:	d110      	bne.n	80018c2 <LCD_Display_Dir+0x172>
		{
			lcddev.wramcmd=0X2C;	//设置写入GRAM的指令
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <LCD_Display_Dir+0x19c>)
 80018a2:	222c      	movs	r2, #44	; 0x2c
 80018a4:	811a      	strh	r2, [r3, #8]
			lcddev.setxcmd=0X2A;	//设置写X坐标指令
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <LCD_Display_Dir+0x19c>)
 80018a8:	222a      	movs	r2, #42	; 0x2a
 80018aa:	815a      	strh	r2, [r3, #10]
			lcddev.setycmd=0X2B;	//设置写Y坐标指令
 80018ac:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <LCD_Display_Dir+0x19c>)
 80018ae:	222b      	movs	r2, #43	; 0x2b
 80018b0:	819a      	strh	r2, [r3, #12]
			lcddev.width=800;		//设置宽度800
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <LCD_Display_Dir+0x19c>)
 80018b4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80018b8:	801a      	strh	r2, [r3, #0]
			lcddev.height=480;		//设置高度480
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <LCD_Display_Dir+0x19c>)
 80018bc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018c0:	805a      	strh	r2, [r3, #2]
		}
		if(lcddev.id==0X5310)
 80018c2:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <LCD_Display_Dir+0x19c>)
 80018c4:	889b      	ldrh	r3, [r3, #4]
 80018c6:	f245 3210 	movw	r2, #21264	; 0x5310
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d107      	bne.n	80018de <LCD_Display_Dir+0x18e>
		{
			lcddev.width=480;
 80018ce:	4b07      	ldr	r3, [pc, #28]	; (80018ec <LCD_Display_Dir+0x19c>)
 80018d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80018d4:	801a      	strh	r2, [r3, #0]
			lcddev.height=320;
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <LCD_Display_Dir+0x19c>)
 80018d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80018dc:	805a      	strh	r2, [r3, #2]
		}
	}
	LCD_Scan_Dir(DFT_SCAN_DIR);	//默认扫描方向
 80018de:	2000      	movs	r0, #0
 80018e0:	f7ff fc9c 	bl	800121c <LCD_Scan_Dir>
}
 80018e4:	bf00      	nop
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20000080 	.word	0x20000080

080018f0 <LCD_Init>:


//初始化lcd
//该初始化函数可以初始化各种型号的LCD(详见本.c文件最前面的描述)
void LCD_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	HAL_SRAM_Init(&TFTSRAM_Handler,&FSMC_ReadWriteTim,&FSMC_WriteTim);

	delay_ms(50); // delay 50 ms
*/
	//尝试9341 ID的读取
	LCD_WR_REG(0XD3);
 80018f4:	20d3      	movs	r0, #211	; 0xd3
 80018f6:	f7ff fb5b 	bl	8000fb0 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80018fa:	f7ff fb79 	bl	8000ff0 <LCD_RD_DATA>
 80018fe:	4603      	mov	r3, r0
 8001900:	461a      	mov	r2, r3
 8001902:	4b5c      	ldr	r3, [pc, #368]	; (8001a74 <LCD_Init+0x184>)
 8001904:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();	//读到0X00
 8001906:	f7ff fb73 	bl	8000ff0 <LCD_RD_DATA>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	4b59      	ldr	r3, [pc, #356]	; (8001a74 <LCD_Init+0x184>)
 8001910:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();   	//读取93
 8001912:	f7ff fb6d 	bl	8000ff0 <LCD_RD_DATA>
 8001916:	4603      	mov	r3, r0
 8001918:	461a      	mov	r2, r3
 800191a:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <LCD_Init+0x184>)
 800191c:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 800191e:	4b55      	ldr	r3, [pc, #340]	; (8001a74 <LCD_Init+0x184>)
 8001920:	889b      	ldrh	r3, [r3, #4]
 8001922:	021b      	lsls	r3, r3, #8
 8001924:	b29a      	uxth	r2, r3
 8001926:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <LCD_Init+0x184>)
 8001928:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();  	//读取41
 800192a:	f7ff fb61 	bl	8000ff0 <LCD_RD_DATA>
 800192e:	4603      	mov	r3, r0
 8001930:	461a      	mov	r2, r3
 8001932:	4b50      	ldr	r3, [pc, #320]	; (8001a74 <LCD_Init+0x184>)
 8001934:	889b      	ldrh	r3, [r3, #4]
 8001936:	4313      	orrs	r3, r2
 8001938:	b29a      	uxth	r2, r3
 800193a:	4b4e      	ldr	r3, [pc, #312]	; (8001a74 <LCD_Init+0x184>)
 800193c:	809a      	strh	r2, [r3, #4]
	if(lcddev.id!=0X9341)		//非9341,尝试看看是不是NT35310
 800193e:	4b4d      	ldr	r3, [pc, #308]	; (8001a74 <LCD_Init+0x184>)
 8001940:	889b      	ldrh	r3, [r3, #4]
 8001942:	f249 3241 	movw	r2, #37697	; 0x9341
 8001946:	4293      	cmp	r3, r2
 8001948:	f000 808b 	beq.w	8001a62 <LCD_Init+0x172>
	{
		LCD_WR_REG(0XD4);
 800194c:	20d4      	movs	r0, #212	; 0xd4
 800194e:	f7ff fb2f 	bl	8000fb0 <LCD_WR_REG>
		lcddev.id=LCD_RD_DATA();//dummy read
 8001952:	f7ff fb4d 	bl	8000ff0 <LCD_RD_DATA>
 8001956:	4603      	mov	r3, r0
 8001958:	461a      	mov	r2, r3
 800195a:	4b46      	ldr	r3, [pc, #280]	; (8001a74 <LCD_Init+0x184>)
 800195c:	809a      	strh	r2, [r3, #4]
		lcddev.id=LCD_RD_DATA();//读回0X01
 800195e:	f7ff fb47 	bl	8000ff0 <LCD_RD_DATA>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	4b43      	ldr	r3, [pc, #268]	; (8001a74 <LCD_Init+0x184>)
 8001968:	809a      	strh	r2, [r3, #4]
		lcddev.id=LCD_RD_DATA();//读回0X53
 800196a:	f7ff fb41 	bl	8000ff0 <LCD_RD_DATA>
 800196e:	4603      	mov	r3, r0
 8001970:	461a      	mov	r2, r3
 8001972:	4b40      	ldr	r3, [pc, #256]	; (8001a74 <LCD_Init+0x184>)
 8001974:	809a      	strh	r2, [r3, #4]
		lcddev.id<<=8;
 8001976:	4b3f      	ldr	r3, [pc, #252]	; (8001a74 <LCD_Init+0x184>)
 8001978:	889b      	ldrh	r3, [r3, #4]
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b3d      	ldr	r3, [pc, #244]	; (8001a74 <LCD_Init+0x184>)
 8001980:	809a      	strh	r2, [r3, #4]
		lcddev.id|=LCD_RD_DATA();	//这里读回0X10
 8001982:	f7ff fb35 	bl	8000ff0 <LCD_RD_DATA>
 8001986:	4603      	mov	r3, r0
 8001988:	461a      	mov	r2, r3
 800198a:	4b3a      	ldr	r3, [pc, #232]	; (8001a74 <LCD_Init+0x184>)
 800198c:	889b      	ldrh	r3, [r3, #4]
 800198e:	4313      	orrs	r3, r2
 8001990:	b29a      	uxth	r2, r3
 8001992:	4b38      	ldr	r3, [pc, #224]	; (8001a74 <LCD_Init+0x184>)
 8001994:	809a      	strh	r2, [r3, #4]
		if(lcddev.id!=0X5310)		//也不是NT35310,尝试看看是不是NT35510
 8001996:	4b37      	ldr	r3, [pc, #220]	; (8001a74 <LCD_Init+0x184>)
 8001998:	889b      	ldrh	r3, [r3, #4]
 800199a:	f245 3210 	movw	r2, #21264	; 0x5310
 800199e:	4293      	cmp	r3, r2
 80019a0:	d05f      	beq.n	8001a62 <LCD_Init+0x172>
		{
			LCD_WR_REG(0XDA00);
 80019a2:	f44f 405a 	mov.w	r0, #55808	; 0xda00
 80019a6:	f7ff fb03 	bl	8000fb0 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();		//读回0X00
 80019aa:	f7ff fb21 	bl	8000ff0 <LCD_RD_DATA>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461a      	mov	r2, r3
 80019b2:	4b30      	ldr	r3, [pc, #192]	; (8001a74 <LCD_Init+0x184>)
 80019b4:	809a      	strh	r2, [r3, #4]
			LCD_WR_REG(0XDB00);
 80019b6:	f44f 405b 	mov.w	r0, #56064	; 0xdb00
 80019ba:	f7ff faf9 	bl	8000fb0 <LCD_WR_REG>
			lcddev.id=LCD_RD_DATA();		//读回0X80
 80019be:	f7ff fb17 	bl	8000ff0 <LCD_RD_DATA>
 80019c2:	4603      	mov	r3, r0
 80019c4:	461a      	mov	r2, r3
 80019c6:	4b2b      	ldr	r3, [pc, #172]	; (8001a74 <LCD_Init+0x184>)
 80019c8:	809a      	strh	r2, [r3, #4]
			lcddev.id<<=8;
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <LCD_Init+0x184>)
 80019cc:	889b      	ldrh	r3, [r3, #4]
 80019ce:	021b      	lsls	r3, r3, #8
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <LCD_Init+0x184>)
 80019d4:	809a      	strh	r2, [r3, #4]
			LCD_WR_REG(0XDC00);
 80019d6:	f44f 405c 	mov.w	r0, #56320	; 0xdc00
 80019da:	f7ff fae9 	bl	8000fb0 <LCD_WR_REG>
			lcddev.id|=LCD_RD_DATA();		//读回0X00
 80019de:	f7ff fb07 	bl	8000ff0 <LCD_RD_DATA>
 80019e2:	4603      	mov	r3, r0
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <LCD_Init+0x184>)
 80019e8:	889b      	ldrh	r3, [r3, #4]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	4b21      	ldr	r3, [pc, #132]	; (8001a74 <LCD_Init+0x184>)
 80019f0:	809a      	strh	r2, [r3, #4]
			if(lcddev.id==0x8000)lcddev.id=0x5510;//NT35510读回的ID是8000H,为方便区分,我们强制设置为5510
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <LCD_Init+0x184>)
 80019f4:	889b      	ldrh	r3, [r3, #4]
 80019f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019fa:	d103      	bne.n	8001a04 <LCD_Init+0x114>
 80019fc:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <LCD_Init+0x184>)
 80019fe:	f245 5210 	movw	r2, #21776	; 0x5510
 8001a02:	809a      	strh	r2, [r3, #4]
			if(lcddev.id!=0X5510)			//也不是NT5510,尝试看看是不是SSD1963
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <LCD_Init+0x184>)
 8001a06:	889b      	ldrh	r3, [r3, #4]
 8001a08:	f245 5210 	movw	r2, #21776	; 0x5510
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d028      	beq.n	8001a62 <LCD_Init+0x172>
			{
				LCD_WR_REG(0XA1);
 8001a10:	20a1      	movs	r0, #161	; 0xa1
 8001a12:	f7ff facd 	bl	8000fb0 <LCD_WR_REG>
				lcddev.id=LCD_RD_DATA();
 8001a16:	f7ff faeb 	bl	8000ff0 <LCD_RD_DATA>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <LCD_Init+0x184>)
 8001a20:	809a      	strh	r2, [r3, #4]
				lcddev.id=LCD_RD_DATA();	//读回0X57
 8001a22:	f7ff fae5 	bl	8000ff0 <LCD_RD_DATA>
 8001a26:	4603      	mov	r3, r0
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <LCD_Init+0x184>)
 8001a2c:	809a      	strh	r2, [r3, #4]
				lcddev.id<<=8;
 8001a2e:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <LCD_Init+0x184>)
 8001a30:	889b      	ldrh	r3, [r3, #4]
 8001a32:	021b      	lsls	r3, r3, #8
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <LCD_Init+0x184>)
 8001a38:	809a      	strh	r2, [r3, #4]
				lcddev.id|=LCD_RD_DATA();	//读回0X61
 8001a3a:	f7ff fad9 	bl	8000ff0 <LCD_RD_DATA>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <LCD_Init+0x184>)
 8001a44:	889b      	ldrh	r3, [r3, #4]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <LCD_Init+0x184>)
 8001a4c:	809a      	strh	r2, [r3, #4]
				if(lcddev.id==0X5761)lcddev.id=0X1963;//SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <LCD_Init+0x184>)
 8001a50:	889b      	ldrh	r3, [r3, #4]
 8001a52:	f245 7261 	movw	r2, #22369	; 0x5761
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d103      	bne.n	8001a62 <LCD_Init+0x172>
 8001a5a:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <LCD_Init+0x184>)
 8001a5c:	f641 1263 	movw	r2, #6499	; 0x1963
 8001a60:	809a      	strh	r2, [r3, #4]
				//else lcddev.id=0x5510;
			}
		}
	}

	if(lcddev.id==0X9341)	//9341初始化
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <LCD_Init+0x184>)
 8001a64:	889b      	ldrh	r3, [r3, #4]
 8001a66:	f249 3241 	movw	r2, #37697	; 0x9341
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	f040 811a 	bne.w	8001ca4 <LCD_Init+0x3b4>
 8001a70:	e002      	b.n	8001a78 <LCD_Init+0x188>
 8001a72:	bf00      	nop
 8001a74:	20000080 	.word	0x20000080
	{
		LCD_WR_REG(0xCF);
 8001a78:	20cf      	movs	r0, #207	; 0xcf
 8001a7a:	f7ff fa99 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001a7e:	2000      	movs	r0, #0
 8001a80:	f7ff faa6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC1);
 8001a84:	20c1      	movs	r0, #193	; 0xc1
 8001a86:	f7ff faa3 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0X30);
 8001a8a:	2030      	movs	r0, #48	; 0x30
 8001a8c:	f7ff faa0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xED);
 8001a90:	20ed      	movs	r0, #237	; 0xed
 8001a92:	f7ff fa8d 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x64);
 8001a96:	2064      	movs	r0, #100	; 0x64
 8001a98:	f7ff fa9a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001a9c:	2003      	movs	r0, #3
 8001a9e:	f7ff fa97 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0X12);
 8001aa2:	2012      	movs	r0, #18
 8001aa4:	f7ff fa94 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0X81);
 8001aa8:	2081      	movs	r0, #129	; 0x81
 8001aaa:	f7ff fa91 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xE8);
 8001aae:	20e8      	movs	r0, #232	; 0xe8
 8001ab0:	f7ff fa7e 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x85);
 8001ab4:	2085      	movs	r0, #133	; 0x85
 8001ab6:	f7ff fa8b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8001aba:	2010      	movs	r0, #16
 8001abc:	f7ff fa88 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8001ac0:	207a      	movs	r0, #122	; 0x7a
 8001ac2:	f7ff fa85 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xCB);
 8001ac6:	20cb      	movs	r0, #203	; 0xcb
 8001ac8:	f7ff fa72 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x39);
 8001acc:	2039      	movs	r0, #57	; 0x39
 8001ace:	f7ff fa7f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8001ad2:	202c      	movs	r0, #44	; 0x2c
 8001ad4:	f7ff fa7c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7ff fa79 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 8001ade:	2034      	movs	r0, #52	; 0x34
 8001ae0:	f7ff fa76 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	f7ff fa73 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xF7);
 8001aea:	20f7      	movs	r0, #247	; 0xf7
 8001aec:	f7ff fa60 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8001af0:	2020      	movs	r0, #32
 8001af2:	f7ff fa6d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xEA);
 8001af6:	20ea      	movs	r0, #234	; 0xea
 8001af8:	f7ff fa5a 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001afc:	2000      	movs	r0, #0
 8001afe:	f7ff fa67 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001b02:	2000      	movs	r0, #0
 8001b04:	f7ff fa64 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xC0);    //Power control
 8001b08:	20c0      	movs	r0, #192	; 0xc0
 8001b0a:	f7ff fa51 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001b0e:	201b      	movs	r0, #27
 8001b10:	f7ff fa5e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xC1);    //Power control
 8001b14:	20c1      	movs	r0, #193	; 0xc1
 8001b16:	f7ff fa4b 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f7ff fa58 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xC5);    //VCM control
 8001b20:	20c5      	movs	r0, #197	; 0xc5
 8001b22:	f7ff fa45 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x30); 	 //3F
 8001b26:	2030      	movs	r0, #48	; 0x30
 8001b28:	f7ff fa52 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x30); 	 //3C
 8001b2c:	2030      	movs	r0, #48	; 0x30
 8001b2e:	f7ff fa4f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xC7);    //VCM control2
 8001b32:	20c7      	movs	r0, #199	; 0xc7
 8001b34:	f7ff fa3c 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0XB7);
 8001b38:	20b7      	movs	r0, #183	; 0xb7
 8001b3a:	f7ff fa49 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0x36);    // Memory Access Control
 8001b3e:	2036      	movs	r0, #54	; 0x36
 8001b40:	f7ff fa36 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x48);
 8001b44:	2048      	movs	r0, #72	; 0x48
 8001b46:	f7ff fa43 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0x3A);
 8001b4a:	203a      	movs	r0, #58	; 0x3a
 8001b4c:	f7ff fa30 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x55);
 8001b50:	2055      	movs	r0, #85	; 0x55
 8001b52:	f7ff fa3d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xB1);
 8001b56:	20b1      	movs	r0, #177	; 0xb1
 8001b58:	f7ff fa2a 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f7ff fa37 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x1A);
 8001b62:	201a      	movs	r0, #26
 8001b64:	f7ff fa34 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);    // Display Function Control
 8001b68:	20b6      	movs	r0, #182	; 0xb6
 8001b6a:	f7ff fa21 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8001b6e:	200a      	movs	r0, #10
 8001b70:	f7ff fa2e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 8001b74:	20a2      	movs	r0, #162	; 0xa2
 8001b76:	f7ff fa2b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001b7a:	20f2      	movs	r0, #242	; 0xf2
 8001b7c:	f7ff fa18 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff fa25 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0x26);    //Gamma curve selected
 8001b86:	2026      	movs	r0, #38	; 0x26
 8001b88:	f7ff fa12 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8001b8c:	2001      	movs	r0, #1
 8001b8e:	f7ff fa1f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xE0);    //Set Gamma
 8001b92:	20e0      	movs	r0, #224	; 0xe0
 8001b94:	f7ff fa0c 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x0F);
 8001b98:	200f      	movs	r0, #15
 8001b9a:	f7ff fa19 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 8001b9e:	202a      	movs	r0, #42	; 0x2a
 8001ba0:	f7ff fa16 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x28);
 8001ba4:	2028      	movs	r0, #40	; 0x28
 8001ba6:	f7ff fa13 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8001baa:	2008      	movs	r0, #8
 8001bac:	f7ff fa10 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x0E);
 8001bb0:	200e      	movs	r0, #14
 8001bb2:	f7ff fa0d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x08);
 8001bb6:	2008      	movs	r0, #8
 8001bb8:	f7ff fa0a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8001bbc:	2054      	movs	r0, #84	; 0x54
 8001bbe:	f7ff fa07 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0XA9);
 8001bc2:	20a9      	movs	r0, #169	; 0xa9
 8001bc4:	f7ff fa04 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 8001bc8:	2043      	movs	r0, #67	; 0x43
 8001bca:	f7ff fa01 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x0A);
 8001bce:	200a      	movs	r0, #10
 8001bd0:	f7ff f9fe 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001bd4:	200f      	movs	r0, #15
 8001bd6:	f7ff f9fb 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f7ff f9f8 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001be0:	2000      	movs	r0, #0
 8001be2:	f7ff f9f5 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001be6:	2000      	movs	r0, #0
 8001be8:	f7ff f9f2 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001bec:	2000      	movs	r0, #0
 8001bee:	f7ff f9ef 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0XE1);    //Set Gamma
 8001bf2:	20e1      	movs	r0, #225	; 0xe1
 8001bf4:	f7ff f9dc 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	f7ff f9e9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x15);
 8001bfe:	2015      	movs	r0, #21
 8001c00:	f7ff f9e6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 8001c04:	2017      	movs	r0, #23
 8001c06:	f7ff f9e3 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x07);
 8001c0a:	2007      	movs	r0, #7
 8001c0c:	f7ff f9e0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8001c10:	2011      	movs	r0, #17
 8001c12:	f7ff f9dd 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x06);
 8001c16:	2006      	movs	r0, #6
 8001c18:	f7ff f9da 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2B);
 8001c1c:	202b      	movs	r0, #43	; 0x2b
 8001c1e:	f7ff f9d7 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8001c22:	2056      	movs	r0, #86	; 0x56
 8001c24:	f7ff f9d4 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8001c28:	203c      	movs	r0, #60	; 0x3c
 8001c2a:	f7ff f9d1 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 8001c2e:	2005      	movs	r0, #5
 8001c30:	f7ff f9ce 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8001c34:	2010      	movs	r0, #16
 8001c36:	f7ff f9cb 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001c3a:	200f      	movs	r0, #15
 8001c3c:	f7ff f9c8 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8001c40:	203f      	movs	r0, #63	; 0x3f
 8001c42:	f7ff f9c5 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8001c46:	203f      	movs	r0, #63	; 0x3f
 8001c48:	f7ff f9c2 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x0F);
 8001c4c:	200f      	movs	r0, #15
 8001c4e:	f7ff f9bf 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0x2B);
 8001c52:	202b      	movs	r0, #43	; 0x2b
 8001c54:	f7ff f9ac 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f7ff f9b9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff f9b6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7ff f9b3 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3f);
 8001c6a:	203f      	movs	r0, #63	; 0x3f
 8001c6c:	f7ff f9b0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0x2A);
 8001c70:	202a      	movs	r0, #42	; 0x2a
 8001c72:	f7ff f99d 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001c76:	2000      	movs	r0, #0
 8001c78:	f7ff f9aa 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f7ff f9a7 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001c82:	2000      	movs	r0, #0
 8001c84:	f7ff f9a4 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xef);
 8001c88:	20ef      	movs	r0, #239	; 0xef
 8001c8a:	f7ff f9a1 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0x11); //Exit Sleep
 8001c8e:	2011      	movs	r0, #17
 8001c90:	f7ff f98e 	bl	8000fb0 <LCD_WR_REG>
		HAL_Delay(120);
 8001c94:	2078      	movs	r0, #120	; 0x78
 8001c96:	f003 f981 	bl	8004f9c <HAL_Delay>
		//delay_ms(120);
		LCD_WR_REG(0x29); //display on
 8001c9a:	2029      	movs	r0, #41	; 0x29
 8001c9c:	f7ff f988 	bl	8000fb0 <LCD_WR_REG>
 8001ca0:	f001 bfc7 	b.w	8003c32 <LCD_Init+0x2342>
	}else if(lcddev.id==0x5310)
 8001ca4:	4b03      	ldr	r3, [pc, #12]	; (8001cb4 <LCD_Init+0x3c4>)
 8001ca6:	889b      	ldrh	r3, [r3, #4]
 8001ca8:	f245 3210 	movw	r2, #21264	; 0x5310
 8001cac:	4293      	cmp	r3, r2
 8001cae:	f040 877c 	bne.w	8002baa <LCD_Init+0x12ba>
 8001cb2:	e001      	b.n	8001cb8 <LCD_Init+0x3c8>
 8001cb4:	20000080 	.word	0x20000080
	{
		LCD_WR_REG(0xED);
 8001cb8:	20ed      	movs	r0, #237	; 0xed
 8001cba:	f7ff f979 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f7ff f986 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);
 8001cc4:	20fe      	movs	r0, #254	; 0xfe
 8001cc6:	f7ff f983 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xEE);
 8001cca:	20ee      	movs	r0, #238	; 0xee
 8001ccc:	f7ff f970 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0xDE);
 8001cd0:	20de      	movs	r0, #222	; 0xde
 8001cd2:	f7ff f97d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8001cd6:	2021      	movs	r0, #33	; 0x21
 8001cd8:	f7ff f97a 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xF1);
 8001cdc:	20f1      	movs	r0, #241	; 0xf1
 8001cde:	f7ff f967 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8001ce2:	2001      	movs	r0, #1
 8001ce4:	f7ff f974 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xDF);
 8001ce8:	20df      	movs	r0, #223	; 0xdf
 8001cea:	f7ff f961 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x10);
 8001cee:	2010      	movs	r0, #16
 8001cf0:	f7ff f96e 	bl	8000fd0 <LCD_WR_DATA>

		//VCOMvoltage//
		LCD_WR_REG(0xC4);
 8001cf4:	20c4      	movs	r0, #196	; 0xc4
 8001cf6:	f7ff f95b 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x8F);	  //5f
 8001cfa:	208f      	movs	r0, #143	; 0x8f
 8001cfc:	f7ff f968 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 8001d00:	20c6      	movs	r0, #198	; 0xc6
 8001d02:	f7ff f955 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff f962 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8001d0c:	20e2      	movs	r0, #226	; 0xe2
 8001d0e:	f7ff f95f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8001d12:	20e2      	movs	r0, #226	; 0xe2
 8001d14:	f7ff f95c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xE2);
 8001d18:	20e2      	movs	r0, #226	; 0xe2
 8001d1a:	f7ff f959 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xBF);
 8001d1e:	20bf      	movs	r0, #191	; 0xbf
 8001d20:	f7ff f946 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8001d24:	20aa      	movs	r0, #170	; 0xaa
 8001d26:	f7ff f953 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);
 8001d2a:	20b0      	movs	r0, #176	; 0xb0
 8001d2c:	f7ff f940 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x0D);
 8001d30:	200d      	movs	r0, #13
 8001d32:	f7ff f94d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff f94a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x0D);
 8001d3c:	200d      	movs	r0, #13
 8001d3e:	f7ff f947 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d42:	2000      	movs	r0, #0
 8001d44:	f7ff f944 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x11);
 8001d48:	2011      	movs	r0, #17
 8001d4a:	f7ff f941 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d4e:	2000      	movs	r0, #0
 8001d50:	f7ff f93e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x19);
 8001d54:	2019      	movs	r0, #25
 8001d56:	f7ff f93b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d5a:	2000      	movs	r0, #0
 8001d5c:	f7ff f938 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8001d60:	2021      	movs	r0, #33	; 0x21
 8001d62:	f7ff f935 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d66:	2000      	movs	r0, #0
 8001d68:	f7ff f932 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2D);
 8001d6c:	202d      	movs	r0, #45	; 0x2d
 8001d6e:	f7ff f92f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff f92c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3D);
 8001d78:	203d      	movs	r0, #61	; 0x3d
 8001d7a:	f7ff f929 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f7ff f926 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8001d84:	205d      	movs	r0, #93	; 0x5d
 8001d86:	f7ff f923 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff f920 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 8001d90:	205d      	movs	r0, #93	; 0x5d
 8001d92:	f7ff f91d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f7ff f91a 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xB1);
 8001d9c:	20b1      	movs	r0, #177	; 0xb1
 8001d9e:	f7ff f907 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x80);
 8001da2:	2080      	movs	r0, #128	; 0x80
 8001da4:	f7ff f914 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001da8:	2000      	movs	r0, #0
 8001daa:	f7ff f911 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 8001dae:	208b      	movs	r0, #139	; 0x8b
 8001db0:	f7ff f90e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff f90b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8001dba:	2096      	movs	r0, #150	; 0x96
 8001dbc:	f7ff f908 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7ff f905 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xB2);
 8001dc6:	20b2      	movs	r0, #178	; 0xb2
 8001dc8:	f7ff f8f2 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f7ff f8ff 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff f8fc 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 8001dd8:	2002      	movs	r0, #2
 8001dda:	f7ff f8f9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff f8f6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001de4:	2003      	movs	r0, #3
 8001de6:	f7ff f8f3 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f7ff f8f0 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xB3);
 8001df0:	20b3      	movs	r0, #179	; 0xb3
 8001df2:	f7ff f8dd 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001df6:	2000      	movs	r0, #0
 8001df8:	f7ff f8ea 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f7ff f8e7 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff f8e4 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e08:	2000      	movs	r0, #0
 8001e0a:	f7ff f8e1 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff f8de 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e14:	2000      	movs	r0, #0
 8001e16:	f7ff f8db 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e1a:	2000      	movs	r0, #0
 8001e1c:	f7ff f8d8 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e20:	2000      	movs	r0, #0
 8001e22:	f7ff f8d5 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7ff f8d2 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f7ff f8cf 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff f8cc 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e38:	2000      	movs	r0, #0
 8001e3a:	f7ff f8c9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7ff f8c6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e44:	2000      	movs	r0, #0
 8001e46:	f7ff f8c3 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	f7ff f8c0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f7ff f8bd 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff f8ba 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f7ff f8b7 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e62:	2000      	movs	r0, #0
 8001e64:	f7ff f8b4 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff f8b1 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7ff f8ae 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff f8ab 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff f8a8 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7ff f8a5 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);
 8001e86:	20b4      	movs	r0, #180	; 0xb4
 8001e88:	f7ff f892 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x8B);
 8001e8c:	208b      	movs	r0, #139	; 0x8b
 8001e8e:	f7ff f89f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e92:	2000      	movs	r0, #0
 8001e94:	f7ff f89c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x96);
 8001e98:	2096      	movs	r0, #150	; 0x96
 8001e9a:	f7ff f899 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff f896 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA1);
 8001ea4:	20a1      	movs	r0, #161	; 0xa1
 8001ea6:	f7ff f893 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f7ff f890 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xB5);
 8001eb0:	20b5      	movs	r0, #181	; 0xb5
 8001eb2:	f7ff f87d 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x02);
 8001eb6:	2002      	movs	r0, #2
 8001eb8:	f7ff f88a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7ff f887 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x03);
 8001ec2:	2003      	movs	r0, #3
 8001ec4:	f7ff f884 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7ff f881 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8001ece:	2004      	movs	r0, #4
 8001ed0:	f7ff f87e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff f87b 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xB6);
 8001eda:	20b6      	movs	r0, #182	; 0xb6
 8001edc:	f7ff f868 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001ee0:	2000      	movs	r0, #0
 8001ee2:	f7ff f875 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f7ff f872 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xB7);
 8001eec:	20b7      	movs	r0, #183	; 0xb7
 8001eee:	f7ff f85f 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001ef2:	2000      	movs	r0, #0
 8001ef4:	f7ff f86c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff f869 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3F);
 8001efe:	203f      	movs	r0, #63	; 0x3f
 8001f00:	f7ff f866 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f04:	2000      	movs	r0, #0
 8001f06:	f7ff f863 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x5E);
 8001f0a:	205e      	movs	r0, #94	; 0x5e
 8001f0c:	f7ff f860 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7ff f85d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8001f16:	2064      	movs	r0, #100	; 0x64
 8001f18:	f7ff f85a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7ff f857 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x8C);
 8001f22:	208c      	movs	r0, #140	; 0x8c
 8001f24:	f7ff f854 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f7ff f851 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xAC);
 8001f2e:	20ac      	movs	r0, #172	; 0xac
 8001f30:	f7ff f84e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f34:	2000      	movs	r0, #0
 8001f36:	f7ff f84b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8001f3a:	20dc      	movs	r0, #220	; 0xdc
 8001f3c:	f7ff f848 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff f845 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x70);
 8001f46:	2070      	movs	r0, #112	; 0x70
 8001f48:	f7ff f842 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f4c:	2000      	movs	r0, #0
 8001f4e:	f7ff f83f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x90);
 8001f52:	2090      	movs	r0, #144	; 0x90
 8001f54:	f7ff f83c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f58:	2000      	movs	r0, #0
 8001f5a:	f7ff f839 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xEB);
 8001f5e:	20eb      	movs	r0, #235	; 0xeb
 8001f60:	f7ff f836 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f64:	2000      	movs	r0, #0
 8001f66:	f7ff f833 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8001f6a:	20dc      	movs	r0, #220	; 0xdc
 8001f6c:	f7ff f830 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f70:	2000      	movs	r0, #0
 8001f72:	f7ff f82d 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);
 8001f76:	20b8      	movs	r0, #184	; 0xb8
 8001f78:	f7ff f81a 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff f827 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f82:	2000      	movs	r0, #0
 8001f84:	f7ff f824 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff f821 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f7ff f81e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f94:	2000      	movs	r0, #0
 8001f96:	f7ff f81b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	f7ff f818 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	f7ff f815 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f7ff f812 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xBA);
 8001fac:	20ba      	movs	r0, #186	; 0xba
 8001fae:	f7fe ffff 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x24);
 8001fb2:	2024      	movs	r0, #36	; 0x24
 8001fb4:	f7ff f80c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fb8:	2000      	movs	r0, #0
 8001fba:	f7ff f809 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f7ff f806 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fc4:	2000      	movs	r0, #0
 8001fc6:	f7ff f803 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xC1);
 8001fca:	20c1      	movs	r0, #193	; 0xc1
 8001fcc:	f7fe fff0 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8001fd0:	2020      	movs	r0, #32
 8001fd2:	f7fe fffd 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fd6:	2000      	movs	r0, #0
 8001fd8:	f7fe fffa 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x54);
 8001fdc:	2054      	movs	r0, #84	; 0x54
 8001fde:	f7fe fff7 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f7fe fff4 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8001fe8:	20ff      	movs	r0, #255	; 0xff
 8001fea:	f7fe fff1 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f7fe ffee 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xC2);
 8001ff4:	20c2      	movs	r0, #194	; 0xc2
 8001ff6:	f7fe ffdb 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x0A);
 8001ffa:	200a      	movs	r0, #10
 8001ffc:	f7fe ffe8 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002000:	2000      	movs	r0, #0
 8002002:	f7fe ffe5 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);
 8002006:	2004      	movs	r0, #4
 8002008:	f7fe ffe2 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800200c:	2000      	movs	r0, #0
 800200e:	f7fe ffdf 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xC3);
 8002012:	20c3      	movs	r0, #195	; 0xc3
 8002014:	f7fe ffcc 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x3C);
 8002018:	203c      	movs	r0, #60	; 0x3c
 800201a:	f7fe ffd9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800201e:	2000      	movs	r0, #0
 8002020:	f7fe ffd6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3A);
 8002024:	203a      	movs	r0, #58	; 0x3a
 8002026:	f7fe ffd3 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800202a:	2000      	movs	r0, #0
 800202c:	f7fe ffd0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x39);
 8002030:	2039      	movs	r0, #57	; 0x39
 8002032:	f7fe ffcd 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002036:	2000      	movs	r0, #0
 8002038:	f7fe ffca 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x37);
 800203c:	2037      	movs	r0, #55	; 0x37
 800203e:	f7fe ffc7 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002042:	2000      	movs	r0, #0
 8002044:	f7fe ffc4 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002048:	203c      	movs	r0, #60	; 0x3c
 800204a:	f7fe ffc1 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800204e:	2000      	movs	r0, #0
 8002050:	f7fe ffbe 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002054:	2036      	movs	r0, #54	; 0x36
 8002056:	f7fe ffbb 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800205a:	2000      	movs	r0, #0
 800205c:	f7fe ffb8 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 8002060:	2032      	movs	r0, #50	; 0x32
 8002062:	f7fe ffb5 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002066:	2000      	movs	r0, #0
 8002068:	f7fe ffb2 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 800206c:	202f      	movs	r0, #47	; 0x2f
 800206e:	f7fe ffaf 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002072:	2000      	movs	r0, #0
 8002074:	f7fe ffac 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 8002078:	202c      	movs	r0, #44	; 0x2c
 800207a:	f7fe ffa9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800207e:	2000      	movs	r0, #0
 8002080:	f7fe ffa6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002084:	2029      	movs	r0, #41	; 0x29
 8002086:	f7fe ffa3 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800208a:	2000      	movs	r0, #0
 800208c:	f7fe ffa0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8002090:	2026      	movs	r0, #38	; 0x26
 8002092:	f7fe ff9d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002096:	2000      	movs	r0, #0
 8002098:	f7fe ff9a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 800209c:	2024      	movs	r0, #36	; 0x24
 800209e:	f7fe ff97 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020a2:	2000      	movs	r0, #0
 80020a4:	f7fe ff94 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 80020a8:	2024      	movs	r0, #36	; 0x24
 80020aa:	f7fe ff91 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020ae:	2000      	movs	r0, #0
 80020b0:	f7fe ff8e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 80020b4:	2023      	movs	r0, #35	; 0x23
 80020b6:	f7fe ff8b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020ba:	2000      	movs	r0, #0
 80020bc:	f7fe ff88 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 80020c0:	203c      	movs	r0, #60	; 0x3c
 80020c2:	f7fe ff85 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020c6:	2000      	movs	r0, #0
 80020c8:	f7fe ff82 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80020cc:	2036      	movs	r0, #54	; 0x36
 80020ce:	f7fe ff7f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020d2:	2000      	movs	r0, #0
 80020d4:	f7fe ff7c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x32);
 80020d8:	2032      	movs	r0, #50	; 0x32
 80020da:	f7fe ff79 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020de:	2000      	movs	r0, #0
 80020e0:	f7fe ff76 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2F);
 80020e4:	202f      	movs	r0, #47	; 0x2f
 80020e6:	f7fe ff73 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020ea:	2000      	movs	r0, #0
 80020ec:	f7fe ff70 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2C);
 80020f0:	202c      	movs	r0, #44	; 0x2c
 80020f2:	f7fe ff6d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80020f6:	2000      	movs	r0, #0
 80020f8:	f7fe ff6a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 80020fc:	2029      	movs	r0, #41	; 0x29
 80020fe:	f7fe ff67 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002102:	2000      	movs	r0, #0
 8002104:	f7fe ff64 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x26);
 8002108:	2026      	movs	r0, #38	; 0x26
 800210a:	f7fe ff61 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800210e:	2000      	movs	r0, #0
 8002110:	f7fe ff5e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002114:	2024      	movs	r0, #36	; 0x24
 8002116:	f7fe ff5b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800211a:	2000      	movs	r0, #0
 800211c:	f7fe ff58 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x24);
 8002120:	2024      	movs	r0, #36	; 0x24
 8002122:	f7fe ff55 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002126:	2000      	movs	r0, #0
 8002128:	f7fe ff52 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 800212c:	2023      	movs	r0, #35	; 0x23
 800212e:	f7fe ff4f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002132:	2000      	movs	r0, #0
 8002134:	f7fe ff4c 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xC4);
 8002138:	20c4      	movs	r0, #196	; 0xc4
 800213a:	f7fe ff39 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x62);
 800213e:	2062      	movs	r0, #98	; 0x62
 8002140:	f7fe ff46 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002144:	2000      	movs	r0, #0
 8002146:	f7fe ff43 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x05);
 800214a:	2005      	movs	r0, #5
 800214c:	f7fe ff40 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002150:	2000      	movs	r0, #0
 8002152:	f7fe ff3d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 8002156:	2084      	movs	r0, #132	; 0x84
 8002158:	f7fe ff3a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800215c:	2000      	movs	r0, #0
 800215e:	f7fe ff37 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xF0);
 8002162:	20f0      	movs	r0, #240	; 0xf0
 8002164:	f7fe ff34 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002168:	2000      	movs	r0, #0
 800216a:	f7fe ff31 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 800216e:	2018      	movs	r0, #24
 8002170:	f7fe ff2e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002174:	2000      	movs	r0, #0
 8002176:	f7fe ff2b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA4);
 800217a:	20a4      	movs	r0, #164	; 0xa4
 800217c:	f7fe ff28 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002180:	2000      	movs	r0, #0
 8002182:	f7fe ff25 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x18);
 8002186:	2018      	movs	r0, #24
 8002188:	f7fe ff22 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800218c:	2000      	movs	r0, #0
 800218e:	f7fe ff1f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002192:	2050      	movs	r0, #80	; 0x50
 8002194:	f7fe ff1c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002198:	2000      	movs	r0, #0
 800219a:	f7fe ff19 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x0C);
 800219e:	200c      	movs	r0, #12
 80021a0:	f7fe ff16 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021a4:	2000      	movs	r0, #0
 80021a6:	f7fe ff13 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 80021aa:	2017      	movs	r0, #23
 80021ac:	f7fe ff10 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7fe ff0d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x95);
 80021b6:	2095      	movs	r0, #149	; 0x95
 80021b8:	f7fe ff0a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021bc:	2000      	movs	r0, #0
 80021be:	f7fe ff07 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80021c2:	20f3      	movs	r0, #243	; 0xf3
 80021c4:	f7fe ff04 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021c8:	2000      	movs	r0, #0
 80021ca:	f7fe ff01 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xE6);
 80021ce:	20e6      	movs	r0, #230	; 0xe6
 80021d0:	f7fe fefe 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021d4:	2000      	movs	r0, #0
 80021d6:	f7fe fefb 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xC5);
 80021da:	20c5      	movs	r0, #197	; 0xc5
 80021dc:	f7fe fee8 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 80021e0:	2032      	movs	r0, #50	; 0x32
 80021e2:	f7fe fef5 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7fe fef2 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80021ec:	2044      	movs	r0, #68	; 0x44
 80021ee:	f7fe feef 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021f2:	2000      	movs	r0, #0
 80021f4:	f7fe feec 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x65);
 80021f8:	2065      	movs	r0, #101	; 0x65
 80021fa:	f7fe fee9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80021fe:	2000      	movs	r0, #0
 8002200:	f7fe fee6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002204:	2076      	movs	r0, #118	; 0x76
 8002206:	f7fe fee3 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800220a:	2000      	movs	r0, #0
 800220c:	f7fe fee0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 8002210:	2088      	movs	r0, #136	; 0x88
 8002212:	f7fe fedd 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002216:	2000      	movs	r0, #0
 8002218:	f7fe feda 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xC6);
 800221c:	20c6      	movs	r0, #198	; 0xc6
 800221e:	f7fe fec7 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x20);
 8002222:	2020      	movs	r0, #32
 8002224:	f7fe fed4 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002228:	2000      	movs	r0, #0
 800222a:	f7fe fed1 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x17);
 800222e:	2017      	movs	r0, #23
 8002230:	f7fe fece 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002234:	2000      	movs	r0, #0
 8002236:	f7fe fecb 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 800223a:	2001      	movs	r0, #1
 800223c:	f7fe fec8 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002240:	2000      	movs	r0, #0
 8002242:	f7fe fec5 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xC7);
 8002246:	20c7      	movs	r0, #199	; 0xc7
 8002248:	f7fe feb2 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800224c:	2000      	movs	r0, #0
 800224e:	f7fe febf 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002252:	2000      	movs	r0, #0
 8002254:	f7fe febc 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002258:	2000      	movs	r0, #0
 800225a:	f7fe feb9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800225e:	2000      	movs	r0, #0
 8002260:	f7fe feb6 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xC8);
 8002264:	20c8      	movs	r0, #200	; 0xc8
 8002266:	f7fe fea3 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 800226a:	2000      	movs	r0, #0
 800226c:	f7fe feb0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002270:	2000      	movs	r0, #0
 8002272:	f7fe fead 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002276:	2000      	movs	r0, #0
 8002278:	f7fe feaa 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800227c:	2000      	movs	r0, #0
 800227e:	f7fe fea7 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xC9);
 8002282:	20c9      	movs	r0, #201	; 0xc9
 8002284:	f7fe fe94 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002288:	2000      	movs	r0, #0
 800228a:	f7fe fea1 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800228e:	2000      	movs	r0, #0
 8002290:	f7fe fe9e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002294:	2000      	movs	r0, #0
 8002296:	f7fe fe9b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800229a:	2000      	movs	r0, #0
 800229c:	f7fe fe98 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022a0:	2000      	movs	r0, #0
 80022a2:	f7fe fe95 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022a6:	2000      	movs	r0, #0
 80022a8:	f7fe fe92 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ac:	2000      	movs	r0, #0
 80022ae:	f7fe fe8f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022b2:	2000      	movs	r0, #0
 80022b4:	f7fe fe8c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022b8:	2000      	movs	r0, #0
 80022ba:	f7fe fe89 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022be:	2000      	movs	r0, #0
 80022c0:	f7fe fe86 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7fe fe83 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022ca:	2000      	movs	r0, #0
 80022cc:	f7fe fe80 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022d0:	2000      	movs	r0, #0
 80022d2:	f7fe fe7d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022d6:	2000      	movs	r0, #0
 80022d8:	f7fe fe7a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022dc:	2000      	movs	r0, #0
 80022de:	f7fe fe77 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022e2:	2000      	movs	r0, #0
 80022e4:	f7fe fe74 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xE0);
 80022e8:	20e0      	movs	r0, #224	; 0xe0
 80022ea:	f7fe fe61 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80022ee:	2016      	movs	r0, #22
 80022f0:	f7fe fe6e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7fe fe6b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80022fa:	201c      	movs	r0, #28
 80022fc:	f7fe fe68 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002300:	2000      	movs	r0, #0
 8002302:	f7fe fe65 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x21);
 8002306:	2021      	movs	r0, #33	; 0x21
 8002308:	f7fe fe62 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800230c:	2000      	movs	r0, #0
 800230e:	f7fe fe5f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 8002312:	2036      	movs	r0, #54	; 0x36
 8002314:	f7fe fe5c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002318:	2000      	movs	r0, #0
 800231a:	f7fe fe59 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x46);
 800231e:	2046      	movs	r0, #70	; 0x46
 8002320:	f7fe fe56 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002324:	2000      	movs	r0, #0
 8002326:	f7fe fe53 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 800232a:	2052      	movs	r0, #82	; 0x52
 800232c:	f7fe fe50 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002330:	2000      	movs	r0, #0
 8002332:	f7fe fe4d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002336:	2064      	movs	r0, #100	; 0x64
 8002338:	f7fe fe4a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800233c:	2000      	movs	r0, #0
 800233e:	f7fe fe47 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8002342:	207a      	movs	r0, #122	; 0x7a
 8002344:	f7fe fe44 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002348:	2000      	movs	r0, #0
 800234a:	f7fe fe41 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 800234e:	208b      	movs	r0, #139	; 0x8b
 8002350:	f7fe fe3e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002354:	2000      	movs	r0, #0
 8002356:	f7fe fe3b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800235a:	2099      	movs	r0, #153	; 0x99
 800235c:	f7fe fe38 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002360:	2000      	movs	r0, #0
 8002362:	f7fe fe35 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002366:	20a8      	movs	r0, #168	; 0xa8
 8002368:	f7fe fe32 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800236c:	2000      	movs	r0, #0
 800236e:	f7fe fe2f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8002372:	20b9      	movs	r0, #185	; 0xb9
 8002374:	f7fe fe2c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002378:	2000      	movs	r0, #0
 800237a:	f7fe fe29 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800237e:	20c4      	movs	r0, #196	; 0xc4
 8002380:	f7fe fe26 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002384:	2000      	movs	r0, #0
 8002386:	f7fe fe23 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 800238a:	20ca      	movs	r0, #202	; 0xca
 800238c:	f7fe fe20 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002390:	2000      	movs	r0, #0
 8002392:	f7fe fe1d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002396:	20d2      	movs	r0, #210	; 0xd2
 8002398:	f7fe fe1a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800239c:	2000      	movs	r0, #0
 800239e:	f7fe fe17 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD9);
 80023a2:	20d9      	movs	r0, #217	; 0xd9
 80023a4:	f7fe fe14 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023a8:	2000      	movs	r0, #0
 80023aa:	f7fe fe11 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 80023ae:	20e0      	movs	r0, #224	; 0xe0
 80023b0:	f7fe fe0e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023b4:	2000      	movs	r0, #0
 80023b6:	f7fe fe0b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 80023ba:	20f3      	movs	r0, #243	; 0xf3
 80023bc:	f7fe fe08 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023c0:	2000      	movs	r0, #0
 80023c2:	f7fe fe05 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xE1);
 80023c6:	20e1      	movs	r0, #225	; 0xe1
 80023c8:	f7fe fdf2 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x16);
 80023cc:	2016      	movs	r0, #22
 80023ce:	f7fe fdff 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023d2:	2000      	movs	r0, #0
 80023d4:	f7fe fdfc 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80023d8:	201c      	movs	r0, #28
 80023da:	f7fe fdf9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023de:	2000      	movs	r0, #0
 80023e0:	f7fe fdf6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x22);
 80023e4:	2022      	movs	r0, #34	; 0x22
 80023e6:	f7fe fdf3 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023ea:	2000      	movs	r0, #0
 80023ec:	f7fe fdf0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x36);
 80023f0:	2036      	movs	r0, #54	; 0x36
 80023f2:	f7fe fded 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80023f6:	2000      	movs	r0, #0
 80023f8:	f7fe fdea 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80023fc:	2045      	movs	r0, #69	; 0x45
 80023fe:	f7fe fde7 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002402:	2000      	movs	r0, #0
 8002404:	f7fe fde4 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x52);
 8002408:	2052      	movs	r0, #82	; 0x52
 800240a:	f7fe fde1 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800240e:	2000      	movs	r0, #0
 8002410:	f7fe fdde 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x64);
 8002414:	2064      	movs	r0, #100	; 0x64
 8002416:	f7fe fddb 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800241a:	2000      	movs	r0, #0
 800241c:	f7fe fdd8 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x7A);
 8002420:	207a      	movs	r0, #122	; 0x7a
 8002422:	f7fe fdd5 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002426:	2000      	movs	r0, #0
 8002428:	f7fe fdd2 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x8B);
 800242c:	208b      	movs	r0, #139	; 0x8b
 800242e:	f7fe fdcf 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002432:	2000      	movs	r0, #0
 8002434:	f7fe fdcc 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002438:	2099      	movs	r0, #153	; 0x99
 800243a:	f7fe fdc9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800243e:	2000      	movs	r0, #0
 8002440:	f7fe fdc6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA8);
 8002444:	20a8      	movs	r0, #168	; 0xa8
 8002446:	f7fe fdc3 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800244a:	2000      	movs	r0, #0
 800244c:	f7fe fdc0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xB9);
 8002450:	20b9      	movs	r0, #185	; 0xb9
 8002452:	f7fe fdbd 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002456:	2000      	movs	r0, #0
 8002458:	f7fe fdba 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 800245c:	20c4      	movs	r0, #196	; 0xc4
 800245e:	f7fe fdb7 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002462:	2000      	movs	r0, #0
 8002464:	f7fe fdb4 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xCA);
 8002468:	20ca      	movs	r0, #202	; 0xca
 800246a:	f7fe fdb1 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800246e:	2000      	movs	r0, #0
 8002470:	f7fe fdae 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD2);
 8002474:	20d2      	movs	r0, #210	; 0xd2
 8002476:	f7fe fdab 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800247a:	2000      	movs	r0, #0
 800247c:	f7fe fda8 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD8);
 8002480:	20d8      	movs	r0, #216	; 0xd8
 8002482:	f7fe fda5 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002486:	2000      	movs	r0, #0
 8002488:	f7fe fda2 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xE0);
 800248c:	20e0      	movs	r0, #224	; 0xe0
 800248e:	f7fe fd9f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002492:	2000      	movs	r0, #0
 8002494:	f7fe fd9c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002498:	20f3      	movs	r0, #243	; 0xf3
 800249a:	f7fe fd99 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800249e:	2000      	movs	r0, #0
 80024a0:	f7fe fd96 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xE2);
 80024a4:	20e2      	movs	r0, #226	; 0xe2
 80024a6:	f7fe fd83 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 80024aa:	2005      	movs	r0, #5
 80024ac:	f7fe fd90 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7fe fd8d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x0B);
 80024b6:	200b      	movs	r0, #11
 80024b8:	f7fe fd8a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024bc:	2000      	movs	r0, #0
 80024be:	f7fe fd87 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x1B);
 80024c2:	201b      	movs	r0, #27
 80024c4:	f7fe fd84 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024c8:	2000      	movs	r0, #0
 80024ca:	f7fe fd81 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 80024ce:	2034      	movs	r0, #52	; 0x34
 80024d0:	f7fe fd7e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024d4:	2000      	movs	r0, #0
 80024d6:	f7fe fd7b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80024da:	2044      	movs	r0, #68	; 0x44
 80024dc:	f7fe fd78 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024e0:	2000      	movs	r0, #0
 80024e2:	f7fe fd75 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x4F);
 80024e6:	204f      	movs	r0, #79	; 0x4f
 80024e8:	f7fe fd72 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7fe fd6f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x61);
 80024f2:	2061      	movs	r0, #97	; 0x61
 80024f4:	f7fe fd6c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7fe fd69 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x79);
 80024fe:	2079      	movs	r0, #121	; 0x79
 8002500:	f7fe fd66 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002504:	2000      	movs	r0, #0
 8002506:	f7fe fd63 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 800250a:	2088      	movs	r0, #136	; 0x88
 800250c:	f7fe fd60 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002510:	2000      	movs	r0, #0
 8002512:	f7fe fd5d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 8002516:	2097      	movs	r0, #151	; 0x97
 8002518:	f7fe fd5a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800251c:	2000      	movs	r0, #0
 800251e:	f7fe fd57 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8002522:	20a6      	movs	r0, #166	; 0xa6
 8002524:	f7fe fd54 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002528:	2000      	movs	r0, #0
 800252a:	f7fe fd51 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 800252e:	20b7      	movs	r0, #183	; 0xb7
 8002530:	f7fe fd4e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002534:	2000      	movs	r0, #0
 8002536:	f7fe fd4b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 800253a:	20c2      	movs	r0, #194	; 0xc2
 800253c:	f7fe fd48 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002540:	2000      	movs	r0, #0
 8002542:	f7fe fd45 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8002546:	20c7      	movs	r0, #199	; 0xc7
 8002548:	f7fe fd42 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800254c:	2000      	movs	r0, #0
 800254e:	f7fe fd3f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8002552:	20d1      	movs	r0, #209	; 0xd1
 8002554:	f7fe fd3c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002558:	2000      	movs	r0, #0
 800255a:	f7fe fd39 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD6);
 800255e:	20d6      	movs	r0, #214	; 0xd6
 8002560:	f7fe fd36 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002564:	2000      	movs	r0, #0
 8002566:	f7fe fd33 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 800256a:	20dd      	movs	r0, #221	; 0xdd
 800256c:	f7fe fd30 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002570:	2000      	movs	r0, #0
 8002572:	f7fe fd2d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002576:	20f3      	movs	r0, #243	; 0xf3
 8002578:	f7fe fd2a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800257c:	2000      	movs	r0, #0
 800257e:	f7fe fd27 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xE3);
 8002582:	20e3      	movs	r0, #227	; 0xe3
 8002584:	f7fe fd14 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x05);
 8002588:	2005      	movs	r0, #5
 800258a:	f7fe fd21 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800258e:	2000      	movs	r0, #0
 8002590:	f7fe fd1e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA);
 8002594:	200a      	movs	r0, #10
 8002596:	f7fe fd1b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800259a:	2000      	movs	r0, #0
 800259c:	f7fe fd18 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x1C);
 80025a0:	201c      	movs	r0, #28
 80025a2:	f7fe fd15 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025a6:	2000      	movs	r0, #0
 80025a8:	f7fe fd12 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 80025ac:	2033      	movs	r0, #51	; 0x33
 80025ae:	f7fe fd0f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025b2:	2000      	movs	r0, #0
 80025b4:	f7fe fd0c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80025b8:	2044      	movs	r0, #68	; 0x44
 80025ba:	f7fe fd09 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025be:	2000      	movs	r0, #0
 80025c0:	f7fe fd06 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 80025c4:	2050      	movs	r0, #80	; 0x50
 80025c6:	f7fe fd03 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7fe fd00 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x62);
 80025d0:	2062      	movs	r0, #98	; 0x62
 80025d2:	f7fe fcfd 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7fe fcfa 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x78);
 80025dc:	2078      	movs	r0, #120	; 0x78
 80025de:	f7fe fcf7 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025e2:	2000      	movs	r0, #0
 80025e4:	f7fe fcf4 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80025e8:	2088      	movs	r0, #136	; 0x88
 80025ea:	f7fe fcf1 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025ee:	2000      	movs	r0, #0
 80025f0:	f7fe fcee 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x97);
 80025f4:	2097      	movs	r0, #151	; 0x97
 80025f6:	f7fe fceb 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80025fa:	2000      	movs	r0, #0
 80025fc:	f7fe fce8 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA6);
 8002600:	20a6      	movs	r0, #166	; 0xa6
 8002602:	f7fe fce5 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002606:	2000      	movs	r0, #0
 8002608:	f7fe fce2 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xB7);
 800260c:	20b7      	movs	r0, #183	; 0xb7
 800260e:	f7fe fcdf 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002612:	2000      	movs	r0, #0
 8002614:	f7fe fcdc 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC2);
 8002618:	20c2      	movs	r0, #194	; 0xc2
 800261a:	f7fe fcd9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800261e:	2000      	movs	r0, #0
 8002620:	f7fe fcd6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC7);
 8002624:	20c7      	movs	r0, #199	; 0xc7
 8002626:	f7fe fcd3 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800262a:	2000      	movs	r0, #0
 800262c:	f7fe fcd0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD1);
 8002630:	20d1      	movs	r0, #209	; 0xd1
 8002632:	f7fe fccd 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002636:	2000      	movs	r0, #0
 8002638:	f7fe fcca 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD5);
 800263c:	20d5      	movs	r0, #213	; 0xd5
 800263e:	f7fe fcc7 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002642:	2000      	movs	r0, #0
 8002644:	f7fe fcc4 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002648:	20dd      	movs	r0, #221	; 0xdd
 800264a:	f7fe fcc1 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800264e:	2000      	movs	r0, #0
 8002650:	f7fe fcbe 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002654:	20f3      	movs	r0, #243	; 0xf3
 8002656:	f7fe fcbb 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800265a:	2000      	movs	r0, #0
 800265c:	f7fe fcb8 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xE4);
 8002660:	20e4      	movs	r0, #228	; 0xe4
 8002662:	f7fe fca5 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);
 8002666:	2001      	movs	r0, #1
 8002668:	f7fe fcb2 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800266c:	2000      	movs	r0, #0
 800266e:	f7fe fcaf 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);
 8002672:	2001      	movs	r0, #1
 8002674:	f7fe fcac 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002678:	2000      	movs	r0, #0
 800267a:	f7fe fca9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800267e:	2002      	movs	r0, #2
 8002680:	f7fe fca6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002684:	2000      	movs	r0, #0
 8002686:	f7fe fca3 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x2A);
 800268a:	202a      	movs	r0, #42	; 0x2a
 800268c:	f7fe fca0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002690:	2000      	movs	r0, #0
 8002692:	f7fe fc9d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002696:	203c      	movs	r0, #60	; 0x3c
 8002698:	f7fe fc9a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800269c:	2000      	movs	r0, #0
 800269e:	f7fe fc97 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 80026a2:	204b      	movs	r0, #75	; 0x4b
 80026a4:	f7fe fc94 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026a8:	2000      	movs	r0, #0
 80026aa:	f7fe fc91 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 80026ae:	205d      	movs	r0, #93	; 0x5d
 80026b0:	f7fe fc8e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026b4:	2000      	movs	r0, #0
 80026b6:	f7fe fc8b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 80026ba:	2074      	movs	r0, #116	; 0x74
 80026bc:	f7fe fc88 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe fc85 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 80026c6:	2084      	movs	r0, #132	; 0x84
 80026c8:	f7fe fc82 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7fe fc7f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 80026d2:	2093      	movs	r0, #147	; 0x93
 80026d4:	f7fe fc7c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026d8:	2000      	movs	r0, #0
 80026da:	f7fe fc79 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80026de:	20a2      	movs	r0, #162	; 0xa2
 80026e0:	f7fe fc76 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026e4:	2000      	movs	r0, #0
 80026e6:	f7fe fc73 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 80026ea:	20b3      	movs	r0, #179	; 0xb3
 80026ec:	f7fe fc70 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026f0:	2000      	movs	r0, #0
 80026f2:	f7fe fc6d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 80026f6:	20be      	movs	r0, #190	; 0xbe
 80026f8:	f7fe fc6a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80026fc:	2000      	movs	r0, #0
 80026fe:	f7fe fc67 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 8002702:	20c4      	movs	r0, #196	; 0xc4
 8002704:	f7fe fc64 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002708:	2000      	movs	r0, #0
 800270a:	f7fe fc61 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 800270e:	20cd      	movs	r0, #205	; 0xcd
 8002710:	f7fe fc5e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002714:	2000      	movs	r0, #0
 8002716:	f7fe fc5b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 800271a:	20d3      	movs	r0, #211	; 0xd3
 800271c:	f7fe fc58 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002720:	2000      	movs	r0, #0
 8002722:	f7fe fc55 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xDD);
 8002726:	20dd      	movs	r0, #221	; 0xdd
 8002728:	f7fe fc52 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800272c:	2000      	movs	r0, #0
 800272e:	f7fe fc4f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002732:	20f3      	movs	r0, #243	; 0xf3
 8002734:	f7fe fc4c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002738:	2000      	movs	r0, #0
 800273a:	f7fe fc49 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xE5);
 800273e:	20e5      	movs	r0, #229	; 0xe5
 8002740:	f7fe fc36 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002744:	2000      	movs	r0, #0
 8002746:	f7fe fc43 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800274a:	2000      	movs	r0, #0
 800274c:	f7fe fc40 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002750:	2000      	movs	r0, #0
 8002752:	f7fe fc3d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002756:	2000      	movs	r0, #0
 8002758:	f7fe fc3a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);
 800275c:	2002      	movs	r0, #2
 800275e:	f7fe fc37 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002762:	2000      	movs	r0, #0
 8002764:	f7fe fc34 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002768:	2029      	movs	r0, #41	; 0x29
 800276a:	f7fe fc31 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800276e:	2000      	movs	r0, #0
 8002770:	f7fe fc2e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x3C);
 8002774:	203c      	movs	r0, #60	; 0x3c
 8002776:	f7fe fc2b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800277a:	2000      	movs	r0, #0
 800277c:	f7fe fc28 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x4B);
 8002780:	204b      	movs	r0, #75	; 0x4b
 8002782:	f7fe fc25 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002786:	2000      	movs	r0, #0
 8002788:	f7fe fc22 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x5D);
 800278c:	205d      	movs	r0, #93	; 0x5d
 800278e:	f7fe fc1f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002792:	2000      	movs	r0, #0
 8002794:	f7fe fc1c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x74);
 8002798:	2074      	movs	r0, #116	; 0x74
 800279a:	f7fe fc19 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800279e:	2000      	movs	r0, #0
 80027a0:	f7fe fc16 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x84);
 80027a4:	2084      	movs	r0, #132	; 0x84
 80027a6:	f7fe fc13 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027aa:	2000      	movs	r0, #0
 80027ac:	f7fe fc10 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x93);
 80027b0:	2093      	movs	r0, #147	; 0x93
 80027b2:	f7fe fc0d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027b6:	2000      	movs	r0, #0
 80027b8:	f7fe fc0a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xA2);
 80027bc:	20a2      	movs	r0, #162	; 0xa2
 80027be:	f7fe fc07 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027c2:	2000      	movs	r0, #0
 80027c4:	f7fe fc04 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xB3);
 80027c8:	20b3      	movs	r0, #179	; 0xb3
 80027ca:	f7fe fc01 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7fe fbfe 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xBE);
 80027d4:	20be      	movs	r0, #190	; 0xbe
 80027d6:	f7fe fbfb 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027da:	2000      	movs	r0, #0
 80027dc:	f7fe fbf8 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xC4);
 80027e0:	20c4      	movs	r0, #196	; 0xc4
 80027e2:	f7fe fbf5 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027e6:	2000      	movs	r0, #0
 80027e8:	f7fe fbf2 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xCD);
 80027ec:	20cd      	movs	r0, #205	; 0xcd
 80027ee:	f7fe fbef 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027f2:	2000      	movs	r0, #0
 80027f4:	f7fe fbec 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xD3);
 80027f8:	20d3      	movs	r0, #211	; 0xd3
 80027fa:	f7fe fbe9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80027fe:	2000      	movs	r0, #0
 8002800:	f7fe fbe6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xDC);
 8002804:	20dc      	movs	r0, #220	; 0xdc
 8002806:	f7fe fbe3 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800280a:	2000      	movs	r0, #0
 800280c:	f7fe fbe0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xF3);
 8002810:	20f3      	movs	r0, #243	; 0xf3
 8002812:	f7fe fbdd 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002816:	2000      	movs	r0, #0
 8002818:	f7fe fbda 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xE6);
 800281c:	20e6      	movs	r0, #230	; 0xe6
 800281e:	f7fe fbc7 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x11);
 8002822:	2011      	movs	r0, #17
 8002824:	f7fe fbd4 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002828:	2000      	movs	r0, #0
 800282a:	f7fe fbd1 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x34);
 800282e:	2034      	movs	r0, #52	; 0x34
 8002830:	f7fe fbce 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002834:	2000      	movs	r0, #0
 8002836:	f7fe fbcb 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 800283a:	2056      	movs	r0, #86	; 0x56
 800283c:	f7fe fbc8 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002840:	2000      	movs	r0, #0
 8002842:	f7fe fbc5 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002846:	2076      	movs	r0, #118	; 0x76
 8002848:	f7fe fbc2 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800284c:	2000      	movs	r0, #0
 800284e:	f7fe fbbf 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002852:	2077      	movs	r0, #119	; 0x77
 8002854:	f7fe fbbc 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002858:	2000      	movs	r0, #0
 800285a:	f7fe fbb9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800285e:	2066      	movs	r0, #102	; 0x66
 8002860:	f7fe fbb6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002864:	2000      	movs	r0, #0
 8002866:	f7fe fbb3 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 800286a:	2088      	movs	r0, #136	; 0x88
 800286c:	f7fe fbb0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002870:	2000      	movs	r0, #0
 8002872:	f7fe fbad 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002876:	2099      	movs	r0, #153	; 0x99
 8002878:	f7fe fbaa 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800287c:	2000      	movs	r0, #0
 800287e:	f7fe fba7 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002882:	20bb      	movs	r0, #187	; 0xbb
 8002884:	f7fe fba4 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002888:	2000      	movs	r0, #0
 800288a:	f7fe fba1 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800288e:	2099      	movs	r0, #153	; 0x99
 8002890:	f7fe fb9e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002894:	2000      	movs	r0, #0
 8002896:	f7fe fb9b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800289a:	2066      	movs	r0, #102	; 0x66
 800289c:	f7fe fb98 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7fe fb95 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80028a6:	2055      	movs	r0, #85	; 0x55
 80028a8:	f7fe fb92 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ac:	2000      	movs	r0, #0
 80028ae:	f7fe fb8f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80028b2:	2055      	movs	r0, #85	; 0x55
 80028b4:	f7fe fb8c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028b8:	2000      	movs	r0, #0
 80028ba:	f7fe fb89 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 80028be:	2045      	movs	r0, #69	; 0x45
 80028c0:	f7fe fb86 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028c4:	2000      	movs	r0, #0
 80028c6:	f7fe fb83 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x43);
 80028ca:	2043      	movs	r0, #67	; 0x43
 80028cc:	f7fe fb80 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028d0:	2000      	movs	r0, #0
 80028d2:	f7fe fb7d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 80028d6:	2044      	movs	r0, #68	; 0x44
 80028d8:	f7fe fb7a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028dc:	2000      	movs	r0, #0
 80028de:	f7fe fb77 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xE7);
 80028e2:	20e7      	movs	r0, #231	; 0xe7
 80028e4:	f7fe fb64 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x32);
 80028e8:	2032      	movs	r0, #50	; 0x32
 80028ea:	f7fe fb71 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028ee:	2000      	movs	r0, #0
 80028f0:	f7fe fb6e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 80028f4:	2055      	movs	r0, #85	; 0x55
 80028f6:	f7fe fb6b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f7fe fb68 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x76);
 8002900:	2076      	movs	r0, #118	; 0x76
 8002902:	f7fe fb65 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002906:	2000      	movs	r0, #0
 8002908:	f7fe fb62 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 800290c:	2066      	movs	r0, #102	; 0x66
 800290e:	f7fe fb5f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002912:	2000      	movs	r0, #0
 8002914:	f7fe fb5c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8002918:	2067      	movs	r0, #103	; 0x67
 800291a:	f7fe fb59 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800291e:	2000      	movs	r0, #0
 8002920:	f7fe fb56 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x67);
 8002924:	2067      	movs	r0, #103	; 0x67
 8002926:	f7fe fb53 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800292a:	2000      	movs	r0, #0
 800292c:	f7fe fb50 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 8002930:	2087      	movs	r0, #135	; 0x87
 8002932:	f7fe fb4d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002936:	2000      	movs	r0, #0
 8002938:	f7fe fb4a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 800293c:	2099      	movs	r0, #153	; 0x99
 800293e:	f7fe fb47 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002942:	2000      	movs	r0, #0
 8002944:	f7fe fb44 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002948:	20bb      	movs	r0, #187	; 0xbb
 800294a:	f7fe fb41 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800294e:	2000      	movs	r0, #0
 8002950:	f7fe fb3e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002954:	2099      	movs	r0, #153	; 0x99
 8002956:	f7fe fb3b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800295a:	2000      	movs	r0, #0
 800295c:	f7fe fb38 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 8002960:	2077      	movs	r0, #119	; 0x77
 8002962:	f7fe fb35 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002966:	2000      	movs	r0, #0
 8002968:	f7fe fb32 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 800296c:	2044      	movs	r0, #68	; 0x44
 800296e:	f7fe fb2f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002972:	2000      	movs	r0, #0
 8002974:	f7fe fb2c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x56);
 8002978:	2056      	movs	r0, #86	; 0x56
 800297a:	f7fe fb29 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800297e:	2000      	movs	r0, #0
 8002980:	f7fe fb26 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x23);
 8002984:	2023      	movs	r0, #35	; 0x23
 8002986:	f7fe fb23 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 800298a:	2000      	movs	r0, #0
 800298c:	f7fe fb20 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x33);
 8002990:	2033      	movs	r0, #51	; 0x33
 8002992:	f7fe fb1d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002996:	2000      	movs	r0, #0
 8002998:	f7fe fb1a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x45);
 800299c:	2045      	movs	r0, #69	; 0x45
 800299e:	f7fe fb17 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7fe fb14 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xE8);
 80029a8:	20e8      	movs	r0, #232	; 0xe8
 80029aa:	f7fe fb01 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 80029ae:	2000      	movs	r0, #0
 80029b0:	f7fe fb0e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029b4:	2000      	movs	r0, #0
 80029b6:	f7fe fb0b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 80029ba:	2099      	movs	r0, #153	; 0x99
 80029bc:	f7fe fb08 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029c0:	2000      	movs	r0, #0
 80029c2:	f7fe fb05 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x87);
 80029c6:	2087      	movs	r0, #135	; 0x87
 80029c8:	f7fe fb02 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7fe faff 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80029d2:	2088      	movs	r0, #136	; 0x88
 80029d4:	f7fe fafc 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029d8:	2000      	movs	r0, #0
 80029da:	f7fe faf9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x77);
 80029de:	2077      	movs	r0, #119	; 0x77
 80029e0:	f7fe faf6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029e4:	2000      	movs	r0, #0
 80029e6:	f7fe faf3 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 80029ea:	2066      	movs	r0, #102	; 0x66
 80029ec:	f7fe faf0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029f0:	2000      	movs	r0, #0
 80029f2:	f7fe faed 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x88);
 80029f6:	2088      	movs	r0, #136	; 0x88
 80029f8:	f7fe faea 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 80029fc:	2000      	movs	r0, #0
 80029fe:	f7fe fae7 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xAA);
 8002a02:	20aa      	movs	r0, #170	; 0xaa
 8002a04:	f7fe fae4 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a08:	2000      	movs	r0, #0
 8002a0a:	f7fe fae1 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xBB);
 8002a0e:	20bb      	movs	r0, #187	; 0xbb
 8002a10:	f7fe fade 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a14:	2000      	movs	r0, #0
 8002a16:	f7fe fadb 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x99);
 8002a1a:	2099      	movs	r0, #153	; 0x99
 8002a1c:	f7fe fad8 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a20:	2000      	movs	r0, #0
 8002a22:	f7fe fad5 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x66);
 8002a26:	2066      	movs	r0, #102	; 0x66
 8002a28:	f7fe fad2 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7fe facf 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002a32:	2055      	movs	r0, #85	; 0x55
 8002a34:	f7fe facc 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a38:	2000      	movs	r0, #0
 8002a3a:	f7fe fac9 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002a3e:	2055      	movs	r0, #85	; 0x55
 8002a40:	f7fe fac6 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a44:	2000      	movs	r0, #0
 8002a46:	f7fe fac3 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002a4a:	2044      	movs	r0, #68	; 0x44
 8002a4c:	f7fe fac0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a50:	2000      	movs	r0, #0
 8002a52:	f7fe fabd 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x44);
 8002a56:	2044      	movs	r0, #68	; 0x44
 8002a58:	f7fe faba 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f7fe fab7 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x55);
 8002a62:	2055      	movs	r0, #85	; 0x55
 8002a64:	f7fe fab4 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a68:	2000      	movs	r0, #0
 8002a6a:	f7fe fab1 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xE9);
 8002a6e:	20e9      	movs	r0, #233	; 0xe9
 8002a70:	f7fe fa9e 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002a74:	20aa      	movs	r0, #170	; 0xaa
 8002a76:	f7fe faab 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	f7fe faa8 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a80:	2000      	movs	r0, #0
 8002a82:	f7fe faa5 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002a86:	2000      	movs	r0, #0
 8002a88:	f7fe faa2 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0x00);
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f7fe fa8f 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0xAA);
 8002a92:	20aa      	movs	r0, #170	; 0xaa
 8002a94:	f7fe fa9c 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xCF);
 8002a98:	20cf      	movs	r0, #207	; 0xcf
 8002a9a:	f7fe fa89 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f7fe fa96 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f7fe fa93 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aaa:	2000      	movs	r0, #0
 8002aac:	f7fe fa90 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ab0:	2000      	movs	r0, #0
 8002ab2:	f7fe fa8d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7fe fa8a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002abc:	2000      	movs	r0, #0
 8002abe:	f7fe fa87 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	f7fe fa84 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f7fe fa81 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ace:	2000      	movs	r0, #0
 8002ad0:	f7fe fa7e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	f7fe fa7b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ada:	2000      	movs	r0, #0
 8002adc:	f7fe fa78 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f7fe fa75 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7fe fa72 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002aec:	2000      	movs	r0, #0
 8002aee:	f7fe fa6f 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002af2:	2000      	movs	r0, #0
 8002af4:	f7fe fa6c 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7fe fa69 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7fe fa66 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);
 8002b04:	20f0      	movs	r0, #240	; 0xf0
 8002b06:	f7fe fa53 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f7fe fa60 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x50);
 8002b10:	2050      	movs	r0, #80	; 0x50
 8002b12:	f7fe fa5d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b16:	2000      	movs	r0, #0
 8002b18:	f7fe fa5a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b1c:	2000      	movs	r0, #0
 8002b1e:	f7fe fa57 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b22:	2000      	movs	r0, #0
 8002b24:	f7fe fa54 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xF3);
 8002b28:	20f3      	movs	r0, #243	; 0xf3
 8002b2a:	f7fe fa41 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7fe fa4e 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xF9);
 8002b34:	20f9      	movs	r0, #249	; 0xf9
 8002b36:	f7fe fa3b 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x06);
 8002b3a:	2006      	movs	r0, #6
 8002b3c:	f7fe fa48 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x10);
 8002b40:	2010      	movs	r0, #16
 8002b42:	f7fe fa45 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x29);
 8002b46:	2029      	movs	r0, #41	; 0x29
 8002b48:	f7fe fa42 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f7fe fa3f 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0x3A);
 8002b52:	203a      	movs	r0, #58	; 0x3a
 8002b54:	f7fe fa2c 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x55);	//66
 8002b58:	2055      	movs	r0, #85	; 0x55
 8002b5a:	f7fe fa39 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0x11);
 8002b5e:	2011      	movs	r0, #17
 8002b60:	f7fe fa26 	bl	8000fb0 <LCD_WR_REG>
		HAL_Delay(100);
 8002b64:	2064      	movs	r0, #100	; 0x64
 8002b66:	f002 fa19 	bl	8004f9c <HAL_Delay>
		//delay_ms(100);
		LCD_WR_REG(0x29);
 8002b6a:	2029      	movs	r0, #41	; 0x29
 8002b6c:	f7fe fa20 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_REG(0x35);
 8002b70:	2035      	movs	r0, #53	; 0x35
 8002b72:	f7fe fa1d 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);
 8002b76:	2000      	movs	r0, #0
 8002b78:	f7fe fa2a 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0x51);
 8002b7c:	2051      	movs	r0, #81	; 0x51
 8002b7e:	f7fe fa17 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0xFF);
 8002b82:	20ff      	movs	r0, #255	; 0xff
 8002b84:	f7fe fa24 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0x53);
 8002b88:	2053      	movs	r0, #83	; 0x53
 8002b8a:	f7fe fa11 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x2C);
 8002b8e:	202c      	movs	r0, #44	; 0x2c
 8002b90:	f7fe fa1e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0x55);
 8002b94:	2055      	movs	r0, #85	; 0x55
 8002b96:	f7fe fa0b 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x82);
 8002b9a:	2082      	movs	r0, #130	; 0x82
 8002b9c:	f7fe fa18 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8002ba0:	202c      	movs	r0, #44	; 0x2c
 8002ba2:	f7fe fa05 	bl	8000fb0 <LCD_WR_REG>
 8002ba6:	f001 b844 	b.w	8003c32 <LCD_Init+0x2342>
	}else if(lcddev.id==0x5510)
 8002baa:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <LCD_Init+0x12cc>)
 8002bac:	889b      	ldrh	r3, [r3, #4]
 8002bae:	f245 5210 	movw	r2, #21776	; 0x5510
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	f040 877e 	bne.w	8003ab4 <LCD_Init+0x21c4>
 8002bb8:	e002      	b.n	8002bc0 <LCD_Init+0x12d0>
 8002bba:	bf00      	nop
 8002bbc:	20000080 	.word	0x20000080
	{
		LCD_WriteReg(0xF000,0x55);
 8002bc0:	2155      	movs	r1, #85	; 0x55
 8002bc2:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 8002bc6:	f7fe fa23 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 8002bca:	21aa      	movs	r1, #170	; 0xaa
 8002bcc:	f24f 0001 	movw	r0, #61441	; 0xf001
 8002bd0:	f7fe fa1e 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 8002bd4:	2152      	movs	r1, #82	; 0x52
 8002bd6:	f24f 0002 	movw	r0, #61442	; 0xf002
 8002bda:	f7fe fa19 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 8002bde:	2108      	movs	r1, #8
 8002be0:	f24f 0003 	movw	r0, #61443	; 0xf003
 8002be4:	f7fe fa14 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x01);
 8002be8:	2101      	movs	r1, #1
 8002bea:	f24f 0004 	movw	r0, #61444	; 0xf004
 8002bee:	f7fe fa0f 	bl	8001010 <LCD_WriteReg>
		//AVDD Set AVDD 5.2V
		LCD_WriteReg(0xB000,0x0D);
 8002bf2:	210d      	movs	r1, #13
 8002bf4:	f44f 4030 	mov.w	r0, #45056	; 0xb000
 8002bf8:	f7fe fa0a 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB001,0x0D);
 8002bfc:	210d      	movs	r1, #13
 8002bfe:	f24b 0001 	movw	r0, #45057	; 0xb001
 8002c02:	f7fe fa05 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB002,0x0D);
 8002c06:	210d      	movs	r1, #13
 8002c08:	f24b 0002 	movw	r0, #45058	; 0xb002
 8002c0c:	f7fe fa00 	bl	8001010 <LCD_WriteReg>
		//AVDD ratio
		LCD_WriteReg(0xB600,0x34);
 8002c10:	2134      	movs	r1, #52	; 0x34
 8002c12:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 8002c16:	f7fe f9fb 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB601,0x34);
 8002c1a:	2134      	movs	r1, #52	; 0x34
 8002c1c:	f24b 6001 	movw	r0, #46593	; 0xb601
 8002c20:	f7fe f9f6 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB602,0x34);
 8002c24:	2134      	movs	r1, #52	; 0x34
 8002c26:	f24b 6002 	movw	r0, #46594	; 0xb602
 8002c2a:	f7fe f9f1 	bl	8001010 <LCD_WriteReg>
		//AVEE -5.2V
		LCD_WriteReg(0xB100,0x0D);
 8002c2e:	210d      	movs	r1, #13
 8002c30:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 8002c34:	f7fe f9ec 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB101,0x0D);
 8002c38:	210d      	movs	r1, #13
 8002c3a:	f24b 1001 	movw	r0, #45313	; 0xb101
 8002c3e:	f7fe f9e7 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB102,0x0D);
 8002c42:	210d      	movs	r1, #13
 8002c44:	f24b 1002 	movw	r0, #45314	; 0xb102
 8002c48:	f7fe f9e2 	bl	8001010 <LCD_WriteReg>
		//AVEE ratio
		LCD_WriteReg(0xB700,0x34);
 8002c4c:	2134      	movs	r1, #52	; 0x34
 8002c4e:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8002c52:	f7fe f9dd 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x34);
 8002c56:	2134      	movs	r1, #52	; 0x34
 8002c58:	f24b 7001 	movw	r0, #46849	; 0xb701
 8002c5c:	f7fe f9d8 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB702,0x34);
 8002c60:	2134      	movs	r1, #52	; 0x34
 8002c62:	f24b 7002 	movw	r0, #46850	; 0xb702
 8002c66:	f7fe f9d3 	bl	8001010 <LCD_WriteReg>
		//VCL -2.5V
		LCD_WriteReg(0xB200,0x00);
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	f44f 4032 	mov.w	r0, #45568	; 0xb200
 8002c70:	f7fe f9ce 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB201,0x00);
 8002c74:	2100      	movs	r1, #0
 8002c76:	f24b 2001 	movw	r0, #45569	; 0xb201
 8002c7a:	f7fe f9c9 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB202,0x00);
 8002c7e:	2100      	movs	r1, #0
 8002c80:	f24b 2002 	movw	r0, #45570	; 0xb202
 8002c84:	f7fe f9c4 	bl	8001010 <LCD_WriteReg>
		//VCL ratio
		LCD_WriteReg(0xB800,0x24);
 8002c88:	2124      	movs	r1, #36	; 0x24
 8002c8a:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8002c8e:	f7fe f9bf 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x24);
 8002c92:	2124      	movs	r1, #36	; 0x24
 8002c94:	f64b 0001 	movw	r0, #47105	; 0xb801
 8002c98:	f7fe f9ba 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x24);
 8002c9c:	2124      	movs	r1, #36	; 0x24
 8002c9e:	f64b 0002 	movw	r0, #47106	; 0xb802
 8002ca2:	f7fe f9b5 	bl	8001010 <LCD_WriteReg>
		//VGH 15V (Free pump)
		LCD_WriteReg(0xBF00,0x01);
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	f44f 403f 	mov.w	r0, #48896	; 0xbf00
 8002cac:	f7fe f9b0 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB300,0x0F);
 8002cb0:	210f      	movs	r1, #15
 8002cb2:	f44f 4033 	mov.w	r0, #45824	; 0xb300
 8002cb6:	f7fe f9ab 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB301,0x0F);
 8002cba:	210f      	movs	r1, #15
 8002cbc:	f24b 3001 	movw	r0, #45825	; 0xb301
 8002cc0:	f7fe f9a6 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB302,0x0F);
 8002cc4:	210f      	movs	r1, #15
 8002cc6:	f24b 3002 	movw	r0, #45826	; 0xb302
 8002cca:	f7fe f9a1 	bl	8001010 <LCD_WriteReg>
		//VGH ratio
		LCD_WriteReg(0xB900,0x34);
 8002cce:	2134      	movs	r1, #52	; 0x34
 8002cd0:	f44f 4039 	mov.w	r0, #47360	; 0xb900
 8002cd4:	f7fe f99c 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB901,0x34);
 8002cd8:	2134      	movs	r1, #52	; 0x34
 8002cda:	f64b 1001 	movw	r0, #47361	; 0xb901
 8002cde:	f7fe f997 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB902,0x34);
 8002ce2:	2134      	movs	r1, #52	; 0x34
 8002ce4:	f64b 1002 	movw	r0, #47362	; 0xb902
 8002ce8:	f7fe f992 	bl	8001010 <LCD_WriteReg>
		//VGL_REG -10V
		LCD_WriteReg(0xB500,0x08);
 8002cec:	2108      	movs	r1, #8
 8002cee:	f44f 4035 	mov.w	r0, #46336	; 0xb500
 8002cf2:	f7fe f98d 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB501,0x08);
 8002cf6:	2108      	movs	r1, #8
 8002cf8:	f24b 5001 	movw	r0, #46337	; 0xb501
 8002cfc:	f7fe f988 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB502,0x08);
 8002d00:	2108      	movs	r1, #8
 8002d02:	f24b 5002 	movw	r0, #46338	; 0xb502
 8002d06:	f7fe f983 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xC200,0x03);
 8002d0a:	2103      	movs	r1, #3
 8002d0c:	f44f 4042 	mov.w	r0, #49664	; 0xc200
 8002d10:	f7fe f97e 	bl	8001010 <LCD_WriteReg>
		//VGLX ratio
		LCD_WriteReg(0xBA00,0x24);
 8002d14:	2124      	movs	r1, #36	; 0x24
 8002d16:	f44f 403a 	mov.w	r0, #47616	; 0xba00
 8002d1a:	f7fe f979 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xBA01,0x24);
 8002d1e:	2124      	movs	r1, #36	; 0x24
 8002d20:	f64b 2001 	movw	r0, #47617	; 0xba01
 8002d24:	f7fe f974 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xBA02,0x24);
 8002d28:	2124      	movs	r1, #36	; 0x24
 8002d2a:	f64b 2002 	movw	r0, #47618	; 0xba02
 8002d2e:	f7fe f96f 	bl	8001010 <LCD_WriteReg>
		//VGMP/VGSP 4.5V/0V
		LCD_WriteReg(0xBC00,0x00);
 8002d32:	2100      	movs	r1, #0
 8002d34:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8002d38:	f7fe f96a 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x78);
 8002d3c:	2178      	movs	r1, #120	; 0x78
 8002d3e:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8002d42:	f7fe f965 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8002d46:	2100      	movs	r1, #0
 8002d48:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8002d4c:	f7fe f960 	bl	8001010 <LCD_WriteReg>
		//VGMN/VGSN -4.5V/0V
		LCD_WriteReg(0xBD00,0x00);
 8002d50:	2100      	movs	r1, #0
 8002d52:	f44f 403d 	mov.w	r0, #48384	; 0xbd00
 8002d56:	f7fe f95b 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xBD01,0x78);
 8002d5a:	2178      	movs	r1, #120	; 0x78
 8002d5c:	f64b 5001 	movw	r0, #48385	; 0xbd01
 8002d60:	f7fe f956 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xBD02,0x00);
 8002d64:	2100      	movs	r1, #0
 8002d66:	f64b 5002 	movw	r0, #48386	; 0xbd02
 8002d6a:	f7fe f951 	bl	8001010 <LCD_WriteReg>
		//VCOM
		LCD_WriteReg(0xBE00,0x00);
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f44f 403e 	mov.w	r0, #48640	; 0xbe00
 8002d74:	f7fe f94c 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xBE01,0x64);
 8002d78:	2164      	movs	r1, #100	; 0x64
 8002d7a:	f64b 6001 	movw	r0, #48641	; 0xbe01
 8002d7e:	f7fe f947 	bl	8001010 <LCD_WriteReg>
		//Gamma Setting
		LCD_WriteReg(0xD100,0x00);
 8002d82:	2100      	movs	r1, #0
 8002d84:	f44f 4051 	mov.w	r0, #53504	; 0xd100
 8002d88:	f7fe f942 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD101,0x33);
 8002d8c:	2133      	movs	r1, #51	; 0x33
 8002d8e:	f24d 1001 	movw	r0, #53505	; 0xd101
 8002d92:	f7fe f93d 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD102,0x00);
 8002d96:	2100      	movs	r1, #0
 8002d98:	f24d 1002 	movw	r0, #53506	; 0xd102
 8002d9c:	f7fe f938 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD103,0x34);
 8002da0:	2134      	movs	r1, #52	; 0x34
 8002da2:	f24d 1003 	movw	r0, #53507	; 0xd103
 8002da6:	f7fe f933 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD104,0x00);
 8002daa:	2100      	movs	r1, #0
 8002dac:	f24d 1004 	movw	r0, #53508	; 0xd104
 8002db0:	f7fe f92e 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD105,0x3A);
 8002db4:	213a      	movs	r1, #58	; 0x3a
 8002db6:	f24d 1005 	movw	r0, #53509	; 0xd105
 8002dba:	f7fe f929 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD106,0x00);
 8002dbe:	2100      	movs	r1, #0
 8002dc0:	f24d 1006 	movw	r0, #53510	; 0xd106
 8002dc4:	f7fe f924 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD107,0x4A);
 8002dc8:	214a      	movs	r1, #74	; 0x4a
 8002dca:	f24d 1007 	movw	r0, #53511	; 0xd107
 8002dce:	f7fe f91f 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD108,0x00);
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	f24d 1008 	movw	r0, #53512	; 0xd108
 8002dd8:	f7fe f91a 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD109,0x5C);
 8002ddc:	215c      	movs	r1, #92	; 0x5c
 8002dde:	f24d 1009 	movw	r0, #53513	; 0xd109
 8002de2:	f7fe f915 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD10A,0x00);
 8002de6:	2100      	movs	r1, #0
 8002de8:	f24d 100a 	movw	r0, #53514	; 0xd10a
 8002dec:	f7fe f910 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD10B,0x81);
 8002df0:	2181      	movs	r1, #129	; 0x81
 8002df2:	f24d 100b 	movw	r0, #53515	; 0xd10b
 8002df6:	f7fe f90b 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD10C,0x00);
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	f24d 100c 	movw	r0, #53516	; 0xd10c
 8002e00:	f7fe f906 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD10D,0xA6);
 8002e04:	21a6      	movs	r1, #166	; 0xa6
 8002e06:	f24d 100d 	movw	r0, #53517	; 0xd10d
 8002e0a:	f7fe f901 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD10E,0x00);
 8002e0e:	2100      	movs	r1, #0
 8002e10:	f24d 100e 	movw	r0, #53518	; 0xd10e
 8002e14:	f7fe f8fc 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD10F,0xE5);
 8002e18:	21e5      	movs	r1, #229	; 0xe5
 8002e1a:	f24d 100f 	movw	r0, #53519	; 0xd10f
 8002e1e:	f7fe f8f7 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD110,0x01);
 8002e22:	2101      	movs	r1, #1
 8002e24:	f24d 1010 	movw	r0, #53520	; 0xd110
 8002e28:	f7fe f8f2 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD111,0x13);
 8002e2c:	2113      	movs	r1, #19
 8002e2e:	f24d 1011 	movw	r0, #53521	; 0xd111
 8002e32:	f7fe f8ed 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD112,0x01);
 8002e36:	2101      	movs	r1, #1
 8002e38:	f24d 1012 	movw	r0, #53522	; 0xd112
 8002e3c:	f7fe f8e8 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD113,0x54);
 8002e40:	2154      	movs	r1, #84	; 0x54
 8002e42:	f24d 1013 	movw	r0, #53523	; 0xd113
 8002e46:	f7fe f8e3 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD114,0x01);
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	f24d 1014 	movw	r0, #53524	; 0xd114
 8002e50:	f7fe f8de 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD115,0x82);
 8002e54:	2182      	movs	r1, #130	; 0x82
 8002e56:	f24d 1015 	movw	r0, #53525	; 0xd115
 8002e5a:	f7fe f8d9 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD116,0x01);
 8002e5e:	2101      	movs	r1, #1
 8002e60:	f24d 1016 	movw	r0, #53526	; 0xd116
 8002e64:	f7fe f8d4 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD117,0xCA);
 8002e68:	21ca      	movs	r1, #202	; 0xca
 8002e6a:	f24d 1017 	movw	r0, #53527	; 0xd117
 8002e6e:	f7fe f8cf 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD118,0x02);
 8002e72:	2102      	movs	r1, #2
 8002e74:	f24d 1018 	movw	r0, #53528	; 0xd118
 8002e78:	f7fe f8ca 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD119,0x00);
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	f24d 1019 	movw	r0, #53529	; 0xd119
 8002e82:	f7fe f8c5 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD11A,0x02);
 8002e86:	2102      	movs	r1, #2
 8002e88:	f24d 101a 	movw	r0, #53530	; 0xd11a
 8002e8c:	f7fe f8c0 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD11B,0x01);
 8002e90:	2101      	movs	r1, #1
 8002e92:	f24d 101b 	movw	r0, #53531	; 0xd11b
 8002e96:	f7fe f8bb 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD11C,0x02);
 8002e9a:	2102      	movs	r1, #2
 8002e9c:	f24d 101c 	movw	r0, #53532	; 0xd11c
 8002ea0:	f7fe f8b6 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD11D,0x34);
 8002ea4:	2134      	movs	r1, #52	; 0x34
 8002ea6:	f24d 101d 	movw	r0, #53533	; 0xd11d
 8002eaa:	f7fe f8b1 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD11E,0x02);
 8002eae:	2102      	movs	r1, #2
 8002eb0:	f24d 101e 	movw	r0, #53534	; 0xd11e
 8002eb4:	f7fe f8ac 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD11F,0x67);
 8002eb8:	2167      	movs	r1, #103	; 0x67
 8002eba:	f24d 101f 	movw	r0, #53535	; 0xd11f
 8002ebe:	f7fe f8a7 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD120,0x02);
 8002ec2:	2102      	movs	r1, #2
 8002ec4:	f24d 1020 	movw	r0, #53536	; 0xd120
 8002ec8:	f7fe f8a2 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD121,0x84);
 8002ecc:	2184      	movs	r1, #132	; 0x84
 8002ece:	f24d 1021 	movw	r0, #53537	; 0xd121
 8002ed2:	f7fe f89d 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD122,0x02);
 8002ed6:	2102      	movs	r1, #2
 8002ed8:	f24d 1022 	movw	r0, #53538	; 0xd122
 8002edc:	f7fe f898 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD123,0xA4);
 8002ee0:	21a4      	movs	r1, #164	; 0xa4
 8002ee2:	f24d 1023 	movw	r0, #53539	; 0xd123
 8002ee6:	f7fe f893 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD124,0x02);
 8002eea:	2102      	movs	r1, #2
 8002eec:	f24d 1024 	movw	r0, #53540	; 0xd124
 8002ef0:	f7fe f88e 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD125,0xB7);
 8002ef4:	21b7      	movs	r1, #183	; 0xb7
 8002ef6:	f24d 1025 	movw	r0, #53541	; 0xd125
 8002efa:	f7fe f889 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD126,0x02);
 8002efe:	2102      	movs	r1, #2
 8002f00:	f24d 1026 	movw	r0, #53542	; 0xd126
 8002f04:	f7fe f884 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD127,0xCF);
 8002f08:	21cf      	movs	r1, #207	; 0xcf
 8002f0a:	f24d 1027 	movw	r0, #53543	; 0xd127
 8002f0e:	f7fe f87f 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD128,0x02);
 8002f12:	2102      	movs	r1, #2
 8002f14:	f24d 1028 	movw	r0, #53544	; 0xd128
 8002f18:	f7fe f87a 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD129,0xDE);
 8002f1c:	21de      	movs	r1, #222	; 0xde
 8002f1e:	f24d 1029 	movw	r0, #53545	; 0xd129
 8002f22:	f7fe f875 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD12A,0x02);
 8002f26:	2102      	movs	r1, #2
 8002f28:	f24d 102a 	movw	r0, #53546	; 0xd12a
 8002f2c:	f7fe f870 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD12B,0xF2);
 8002f30:	21f2      	movs	r1, #242	; 0xf2
 8002f32:	f24d 102b 	movw	r0, #53547	; 0xd12b
 8002f36:	f7fe f86b 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD12C,0x02);
 8002f3a:	2102      	movs	r1, #2
 8002f3c:	f24d 102c 	movw	r0, #53548	; 0xd12c
 8002f40:	f7fe f866 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD12D,0xFE);
 8002f44:	21fe      	movs	r1, #254	; 0xfe
 8002f46:	f24d 102d 	movw	r0, #53549	; 0xd12d
 8002f4a:	f7fe f861 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD12E,0x03);
 8002f4e:	2103      	movs	r1, #3
 8002f50:	f24d 102e 	movw	r0, #53550	; 0xd12e
 8002f54:	f7fe f85c 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD12F,0x10);
 8002f58:	2110      	movs	r1, #16
 8002f5a:	f24d 102f 	movw	r0, #53551	; 0xd12f
 8002f5e:	f7fe f857 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD130,0x03);
 8002f62:	2103      	movs	r1, #3
 8002f64:	f24d 1030 	movw	r0, #53552	; 0xd130
 8002f68:	f7fe f852 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD131,0x33);
 8002f6c:	2133      	movs	r1, #51	; 0x33
 8002f6e:	f24d 1031 	movw	r0, #53553	; 0xd131
 8002f72:	f7fe f84d 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD132,0x03);
 8002f76:	2103      	movs	r1, #3
 8002f78:	f24d 1032 	movw	r0, #53554	; 0xd132
 8002f7c:	f7fe f848 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD133,0x6D);
 8002f80:	216d      	movs	r1, #109	; 0x6d
 8002f82:	f24d 1033 	movw	r0, #53555	; 0xd133
 8002f86:	f7fe f843 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD200,0x00);
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	f44f 4052 	mov.w	r0, #53760	; 0xd200
 8002f90:	f7fe f83e 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD201,0x33);
 8002f94:	2133      	movs	r1, #51	; 0x33
 8002f96:	f24d 2001 	movw	r0, #53761	; 0xd201
 8002f9a:	f7fe f839 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD202,0x00);
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	f24d 2002 	movw	r0, #53762	; 0xd202
 8002fa4:	f7fe f834 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD203,0x34);
 8002fa8:	2134      	movs	r1, #52	; 0x34
 8002faa:	f24d 2003 	movw	r0, #53763	; 0xd203
 8002fae:	f7fe f82f 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD204,0x00);
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	f24d 2004 	movw	r0, #53764	; 0xd204
 8002fb8:	f7fe f82a 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD205,0x3A);
 8002fbc:	213a      	movs	r1, #58	; 0x3a
 8002fbe:	f24d 2005 	movw	r0, #53765	; 0xd205
 8002fc2:	f7fe f825 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD206,0x00);
 8002fc6:	2100      	movs	r1, #0
 8002fc8:	f24d 2006 	movw	r0, #53766	; 0xd206
 8002fcc:	f7fe f820 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD207,0x4A);
 8002fd0:	214a      	movs	r1, #74	; 0x4a
 8002fd2:	f24d 2007 	movw	r0, #53767	; 0xd207
 8002fd6:	f7fe f81b 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD208,0x00);
 8002fda:	2100      	movs	r1, #0
 8002fdc:	f24d 2008 	movw	r0, #53768	; 0xd208
 8002fe0:	f7fe f816 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD209,0x5C);
 8002fe4:	215c      	movs	r1, #92	; 0x5c
 8002fe6:	f24d 2009 	movw	r0, #53769	; 0xd209
 8002fea:	f7fe f811 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD20A,0x00);
 8002fee:	2100      	movs	r1, #0
 8002ff0:	f24d 200a 	movw	r0, #53770	; 0xd20a
 8002ff4:	f7fe f80c 	bl	8001010 <LCD_WriteReg>

		LCD_WriteReg(0xD20B,0x81);
 8002ff8:	2181      	movs	r1, #129	; 0x81
 8002ffa:	f24d 200b 	movw	r0, #53771	; 0xd20b
 8002ffe:	f7fe f807 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD20C,0x00);
 8003002:	2100      	movs	r1, #0
 8003004:	f24d 200c 	movw	r0, #53772	; 0xd20c
 8003008:	f7fe f802 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD20D,0xA6);
 800300c:	21a6      	movs	r1, #166	; 0xa6
 800300e:	f24d 200d 	movw	r0, #53773	; 0xd20d
 8003012:	f7fd fffd 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD20E,0x00);
 8003016:	2100      	movs	r1, #0
 8003018:	f24d 200e 	movw	r0, #53774	; 0xd20e
 800301c:	f7fd fff8 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD20F,0xE5);
 8003020:	21e5      	movs	r1, #229	; 0xe5
 8003022:	f24d 200f 	movw	r0, #53775	; 0xd20f
 8003026:	f7fd fff3 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD210,0x01);
 800302a:	2101      	movs	r1, #1
 800302c:	f24d 2010 	movw	r0, #53776	; 0xd210
 8003030:	f7fd ffee 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD211,0x13);
 8003034:	2113      	movs	r1, #19
 8003036:	f24d 2011 	movw	r0, #53777	; 0xd211
 800303a:	f7fd ffe9 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD212,0x01);
 800303e:	2101      	movs	r1, #1
 8003040:	f24d 2012 	movw	r0, #53778	; 0xd212
 8003044:	f7fd ffe4 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD213,0x54);
 8003048:	2154      	movs	r1, #84	; 0x54
 800304a:	f24d 2013 	movw	r0, #53779	; 0xd213
 800304e:	f7fd ffdf 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD214,0x01);
 8003052:	2101      	movs	r1, #1
 8003054:	f24d 2014 	movw	r0, #53780	; 0xd214
 8003058:	f7fd ffda 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD215,0x82);
 800305c:	2182      	movs	r1, #130	; 0x82
 800305e:	f24d 2015 	movw	r0, #53781	; 0xd215
 8003062:	f7fd ffd5 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD216,0x01);
 8003066:	2101      	movs	r1, #1
 8003068:	f24d 2016 	movw	r0, #53782	; 0xd216
 800306c:	f7fd ffd0 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD217,0xCA);
 8003070:	21ca      	movs	r1, #202	; 0xca
 8003072:	f24d 2017 	movw	r0, #53783	; 0xd217
 8003076:	f7fd ffcb 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD218,0x02);
 800307a:	2102      	movs	r1, #2
 800307c:	f24d 2018 	movw	r0, #53784	; 0xd218
 8003080:	f7fd ffc6 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD219,0x00);
 8003084:	2100      	movs	r1, #0
 8003086:	f24d 2019 	movw	r0, #53785	; 0xd219
 800308a:	f7fd ffc1 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD21A,0x02);
 800308e:	2102      	movs	r1, #2
 8003090:	f24d 201a 	movw	r0, #53786	; 0xd21a
 8003094:	f7fd ffbc 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD21B,0x01);
 8003098:	2101      	movs	r1, #1
 800309a:	f24d 201b 	movw	r0, #53787	; 0xd21b
 800309e:	f7fd ffb7 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD21C,0x02);
 80030a2:	2102      	movs	r1, #2
 80030a4:	f24d 201c 	movw	r0, #53788	; 0xd21c
 80030a8:	f7fd ffb2 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD21D,0x34);
 80030ac:	2134      	movs	r1, #52	; 0x34
 80030ae:	f24d 201d 	movw	r0, #53789	; 0xd21d
 80030b2:	f7fd ffad 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD21E,0x02);
 80030b6:	2102      	movs	r1, #2
 80030b8:	f24d 201e 	movw	r0, #53790	; 0xd21e
 80030bc:	f7fd ffa8 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD21F,0x67);
 80030c0:	2167      	movs	r1, #103	; 0x67
 80030c2:	f24d 201f 	movw	r0, #53791	; 0xd21f
 80030c6:	f7fd ffa3 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD220,0x02);
 80030ca:	2102      	movs	r1, #2
 80030cc:	f24d 2020 	movw	r0, #53792	; 0xd220
 80030d0:	f7fd ff9e 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD221,0x84);
 80030d4:	2184      	movs	r1, #132	; 0x84
 80030d6:	f24d 2021 	movw	r0, #53793	; 0xd221
 80030da:	f7fd ff99 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD222,0x02);
 80030de:	2102      	movs	r1, #2
 80030e0:	f24d 2022 	movw	r0, #53794	; 0xd222
 80030e4:	f7fd ff94 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD223,0xA4);
 80030e8:	21a4      	movs	r1, #164	; 0xa4
 80030ea:	f24d 2023 	movw	r0, #53795	; 0xd223
 80030ee:	f7fd ff8f 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD224,0x02);
 80030f2:	2102      	movs	r1, #2
 80030f4:	f24d 2024 	movw	r0, #53796	; 0xd224
 80030f8:	f7fd ff8a 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD225,0xB7);
 80030fc:	21b7      	movs	r1, #183	; 0xb7
 80030fe:	f24d 2025 	movw	r0, #53797	; 0xd225
 8003102:	f7fd ff85 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD226,0x02);
 8003106:	2102      	movs	r1, #2
 8003108:	f24d 2026 	movw	r0, #53798	; 0xd226
 800310c:	f7fd ff80 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD227,0xCF);
 8003110:	21cf      	movs	r1, #207	; 0xcf
 8003112:	f24d 2027 	movw	r0, #53799	; 0xd227
 8003116:	f7fd ff7b 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD228,0x02);
 800311a:	2102      	movs	r1, #2
 800311c:	f24d 2028 	movw	r0, #53800	; 0xd228
 8003120:	f7fd ff76 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD229,0xDE);
 8003124:	21de      	movs	r1, #222	; 0xde
 8003126:	f24d 2029 	movw	r0, #53801	; 0xd229
 800312a:	f7fd ff71 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD22A,0x02);
 800312e:	2102      	movs	r1, #2
 8003130:	f24d 202a 	movw	r0, #53802	; 0xd22a
 8003134:	f7fd ff6c 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD22B,0xF2);
 8003138:	21f2      	movs	r1, #242	; 0xf2
 800313a:	f24d 202b 	movw	r0, #53803	; 0xd22b
 800313e:	f7fd ff67 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD22C,0x02);
 8003142:	2102      	movs	r1, #2
 8003144:	f24d 202c 	movw	r0, #53804	; 0xd22c
 8003148:	f7fd ff62 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD22D,0xFE);
 800314c:	21fe      	movs	r1, #254	; 0xfe
 800314e:	f24d 202d 	movw	r0, #53805	; 0xd22d
 8003152:	f7fd ff5d 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD22E,0x03);
 8003156:	2103      	movs	r1, #3
 8003158:	f24d 202e 	movw	r0, #53806	; 0xd22e
 800315c:	f7fd ff58 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD22F,0x10);
 8003160:	2110      	movs	r1, #16
 8003162:	f24d 202f 	movw	r0, #53807	; 0xd22f
 8003166:	f7fd ff53 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD230,0x03);
 800316a:	2103      	movs	r1, #3
 800316c:	f24d 2030 	movw	r0, #53808	; 0xd230
 8003170:	f7fd ff4e 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD231,0x33);
 8003174:	2133      	movs	r1, #51	; 0x33
 8003176:	f24d 2031 	movw	r0, #53809	; 0xd231
 800317a:	f7fd ff49 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD232,0x03);
 800317e:	2103      	movs	r1, #3
 8003180:	f24d 2032 	movw	r0, #53810	; 0xd232
 8003184:	f7fd ff44 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD233,0x6D);
 8003188:	216d      	movs	r1, #109	; 0x6d
 800318a:	f24d 2033 	movw	r0, #53811	; 0xd233
 800318e:	f7fd ff3f 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD300,0x00);
 8003192:	2100      	movs	r1, #0
 8003194:	f44f 4053 	mov.w	r0, #54016	; 0xd300
 8003198:	f7fd ff3a 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD301,0x33);
 800319c:	2133      	movs	r1, #51	; 0x33
 800319e:	f24d 3001 	movw	r0, #54017	; 0xd301
 80031a2:	f7fd ff35 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD302,0x00);
 80031a6:	2100      	movs	r1, #0
 80031a8:	f24d 3002 	movw	r0, #54018	; 0xd302
 80031ac:	f7fd ff30 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD303,0x34);
 80031b0:	2134      	movs	r1, #52	; 0x34
 80031b2:	f24d 3003 	movw	r0, #54019	; 0xd303
 80031b6:	f7fd ff2b 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD304,0x00);
 80031ba:	2100      	movs	r1, #0
 80031bc:	f24d 3004 	movw	r0, #54020	; 0xd304
 80031c0:	f7fd ff26 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD305,0x3A);
 80031c4:	213a      	movs	r1, #58	; 0x3a
 80031c6:	f24d 3005 	movw	r0, #54021	; 0xd305
 80031ca:	f7fd ff21 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD306,0x00);
 80031ce:	2100      	movs	r1, #0
 80031d0:	f24d 3006 	movw	r0, #54022	; 0xd306
 80031d4:	f7fd ff1c 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD307,0x4A);
 80031d8:	214a      	movs	r1, #74	; 0x4a
 80031da:	f24d 3007 	movw	r0, #54023	; 0xd307
 80031de:	f7fd ff17 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD308,0x00);
 80031e2:	2100      	movs	r1, #0
 80031e4:	f24d 3008 	movw	r0, #54024	; 0xd308
 80031e8:	f7fd ff12 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD309,0x5C);
 80031ec:	215c      	movs	r1, #92	; 0x5c
 80031ee:	f24d 3009 	movw	r0, #54025	; 0xd309
 80031f2:	f7fd ff0d 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD30A,0x00);
 80031f6:	2100      	movs	r1, #0
 80031f8:	f24d 300a 	movw	r0, #54026	; 0xd30a
 80031fc:	f7fd ff08 	bl	8001010 <LCD_WriteReg>

		LCD_WriteReg(0xD30B,0x81);
 8003200:	2181      	movs	r1, #129	; 0x81
 8003202:	f24d 300b 	movw	r0, #54027	; 0xd30b
 8003206:	f7fd ff03 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD30C,0x00);
 800320a:	2100      	movs	r1, #0
 800320c:	f24d 300c 	movw	r0, #54028	; 0xd30c
 8003210:	f7fd fefe 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD30D,0xA6);
 8003214:	21a6      	movs	r1, #166	; 0xa6
 8003216:	f24d 300d 	movw	r0, #54029	; 0xd30d
 800321a:	f7fd fef9 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD30E,0x00);
 800321e:	2100      	movs	r1, #0
 8003220:	f24d 300e 	movw	r0, #54030	; 0xd30e
 8003224:	f7fd fef4 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD30F,0xE5);
 8003228:	21e5      	movs	r1, #229	; 0xe5
 800322a:	f24d 300f 	movw	r0, #54031	; 0xd30f
 800322e:	f7fd feef 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD310,0x01);
 8003232:	2101      	movs	r1, #1
 8003234:	f24d 3010 	movw	r0, #54032	; 0xd310
 8003238:	f7fd feea 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD311,0x13);
 800323c:	2113      	movs	r1, #19
 800323e:	f24d 3011 	movw	r0, #54033	; 0xd311
 8003242:	f7fd fee5 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD312,0x01);
 8003246:	2101      	movs	r1, #1
 8003248:	f24d 3012 	movw	r0, #54034	; 0xd312
 800324c:	f7fd fee0 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD313,0x54);
 8003250:	2154      	movs	r1, #84	; 0x54
 8003252:	f24d 3013 	movw	r0, #54035	; 0xd313
 8003256:	f7fd fedb 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD314,0x01);
 800325a:	2101      	movs	r1, #1
 800325c:	f24d 3014 	movw	r0, #54036	; 0xd314
 8003260:	f7fd fed6 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD315,0x82);
 8003264:	2182      	movs	r1, #130	; 0x82
 8003266:	f24d 3015 	movw	r0, #54037	; 0xd315
 800326a:	f7fd fed1 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD316,0x01);
 800326e:	2101      	movs	r1, #1
 8003270:	f24d 3016 	movw	r0, #54038	; 0xd316
 8003274:	f7fd fecc 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD317,0xCA);
 8003278:	21ca      	movs	r1, #202	; 0xca
 800327a:	f24d 3017 	movw	r0, #54039	; 0xd317
 800327e:	f7fd fec7 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD318,0x02);
 8003282:	2102      	movs	r1, #2
 8003284:	f24d 3018 	movw	r0, #54040	; 0xd318
 8003288:	f7fd fec2 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD319,0x00);
 800328c:	2100      	movs	r1, #0
 800328e:	f24d 3019 	movw	r0, #54041	; 0xd319
 8003292:	f7fd febd 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD31A,0x02);
 8003296:	2102      	movs	r1, #2
 8003298:	f24d 301a 	movw	r0, #54042	; 0xd31a
 800329c:	f7fd feb8 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD31B,0x01);
 80032a0:	2101      	movs	r1, #1
 80032a2:	f24d 301b 	movw	r0, #54043	; 0xd31b
 80032a6:	f7fd feb3 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD31C,0x02);
 80032aa:	2102      	movs	r1, #2
 80032ac:	f24d 301c 	movw	r0, #54044	; 0xd31c
 80032b0:	f7fd feae 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD31D,0x34);
 80032b4:	2134      	movs	r1, #52	; 0x34
 80032b6:	f24d 301d 	movw	r0, #54045	; 0xd31d
 80032ba:	f7fd fea9 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD31E,0x02);
 80032be:	2102      	movs	r1, #2
 80032c0:	f24d 301e 	movw	r0, #54046	; 0xd31e
 80032c4:	f7fd fea4 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD31F,0x67);
 80032c8:	2167      	movs	r1, #103	; 0x67
 80032ca:	f24d 301f 	movw	r0, #54047	; 0xd31f
 80032ce:	f7fd fe9f 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD320,0x02);
 80032d2:	2102      	movs	r1, #2
 80032d4:	f24d 3020 	movw	r0, #54048	; 0xd320
 80032d8:	f7fd fe9a 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD321,0x84);
 80032dc:	2184      	movs	r1, #132	; 0x84
 80032de:	f24d 3021 	movw	r0, #54049	; 0xd321
 80032e2:	f7fd fe95 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD322,0x02);
 80032e6:	2102      	movs	r1, #2
 80032e8:	f24d 3022 	movw	r0, #54050	; 0xd322
 80032ec:	f7fd fe90 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD323,0xA4);
 80032f0:	21a4      	movs	r1, #164	; 0xa4
 80032f2:	f24d 3023 	movw	r0, #54051	; 0xd323
 80032f6:	f7fd fe8b 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD324,0x02);
 80032fa:	2102      	movs	r1, #2
 80032fc:	f24d 3024 	movw	r0, #54052	; 0xd324
 8003300:	f7fd fe86 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD325,0xB7);
 8003304:	21b7      	movs	r1, #183	; 0xb7
 8003306:	f24d 3025 	movw	r0, #54053	; 0xd325
 800330a:	f7fd fe81 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD326,0x02);
 800330e:	2102      	movs	r1, #2
 8003310:	f24d 3026 	movw	r0, #54054	; 0xd326
 8003314:	f7fd fe7c 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD327,0xCF);
 8003318:	21cf      	movs	r1, #207	; 0xcf
 800331a:	f24d 3027 	movw	r0, #54055	; 0xd327
 800331e:	f7fd fe77 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD328,0x02);
 8003322:	2102      	movs	r1, #2
 8003324:	f24d 3028 	movw	r0, #54056	; 0xd328
 8003328:	f7fd fe72 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD329,0xDE);
 800332c:	21de      	movs	r1, #222	; 0xde
 800332e:	f24d 3029 	movw	r0, #54057	; 0xd329
 8003332:	f7fd fe6d 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD32A,0x02);
 8003336:	2102      	movs	r1, #2
 8003338:	f24d 302a 	movw	r0, #54058	; 0xd32a
 800333c:	f7fd fe68 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD32B,0xF2);
 8003340:	21f2      	movs	r1, #242	; 0xf2
 8003342:	f24d 302b 	movw	r0, #54059	; 0xd32b
 8003346:	f7fd fe63 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD32C,0x02);
 800334a:	2102      	movs	r1, #2
 800334c:	f24d 302c 	movw	r0, #54060	; 0xd32c
 8003350:	f7fd fe5e 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD32D,0xFE);
 8003354:	21fe      	movs	r1, #254	; 0xfe
 8003356:	f24d 302d 	movw	r0, #54061	; 0xd32d
 800335a:	f7fd fe59 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD32E,0x03);
 800335e:	2103      	movs	r1, #3
 8003360:	f24d 302e 	movw	r0, #54062	; 0xd32e
 8003364:	f7fd fe54 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD32F,0x10);
 8003368:	2110      	movs	r1, #16
 800336a:	f24d 302f 	movw	r0, #54063	; 0xd32f
 800336e:	f7fd fe4f 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD330,0x03);
 8003372:	2103      	movs	r1, #3
 8003374:	f24d 3030 	movw	r0, #54064	; 0xd330
 8003378:	f7fd fe4a 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD331,0x33);
 800337c:	2133      	movs	r1, #51	; 0x33
 800337e:	f24d 3031 	movw	r0, #54065	; 0xd331
 8003382:	f7fd fe45 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD332,0x03);
 8003386:	2103      	movs	r1, #3
 8003388:	f24d 3032 	movw	r0, #54066	; 0xd332
 800338c:	f7fd fe40 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD333,0x6D);
 8003390:	216d      	movs	r1, #109	; 0x6d
 8003392:	f24d 3033 	movw	r0, #54067	; 0xd333
 8003396:	f7fd fe3b 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD400,0x00);
 800339a:	2100      	movs	r1, #0
 800339c:	f44f 4054 	mov.w	r0, #54272	; 0xd400
 80033a0:	f7fd fe36 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD401,0x33);
 80033a4:	2133      	movs	r1, #51	; 0x33
 80033a6:	f24d 4001 	movw	r0, #54273	; 0xd401
 80033aa:	f7fd fe31 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD402,0x00);
 80033ae:	2100      	movs	r1, #0
 80033b0:	f24d 4002 	movw	r0, #54274	; 0xd402
 80033b4:	f7fd fe2c 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD403,0x34);
 80033b8:	2134      	movs	r1, #52	; 0x34
 80033ba:	f24d 4003 	movw	r0, #54275	; 0xd403
 80033be:	f7fd fe27 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD404,0x00);
 80033c2:	2100      	movs	r1, #0
 80033c4:	f24d 4004 	movw	r0, #54276	; 0xd404
 80033c8:	f7fd fe22 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD405,0x3A);
 80033cc:	213a      	movs	r1, #58	; 0x3a
 80033ce:	f24d 4005 	movw	r0, #54277	; 0xd405
 80033d2:	f7fd fe1d 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD406,0x00);
 80033d6:	2100      	movs	r1, #0
 80033d8:	f24d 4006 	movw	r0, #54278	; 0xd406
 80033dc:	f7fd fe18 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD407,0x4A);
 80033e0:	214a      	movs	r1, #74	; 0x4a
 80033e2:	f24d 4007 	movw	r0, #54279	; 0xd407
 80033e6:	f7fd fe13 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD408,0x00);
 80033ea:	2100      	movs	r1, #0
 80033ec:	f24d 4008 	movw	r0, #54280	; 0xd408
 80033f0:	f7fd fe0e 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD409,0x5C);
 80033f4:	215c      	movs	r1, #92	; 0x5c
 80033f6:	f24d 4009 	movw	r0, #54281	; 0xd409
 80033fa:	f7fd fe09 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD40A,0x00);
 80033fe:	2100      	movs	r1, #0
 8003400:	f24d 400a 	movw	r0, #54282	; 0xd40a
 8003404:	f7fd fe04 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD40B,0x81);
 8003408:	2181      	movs	r1, #129	; 0x81
 800340a:	f24d 400b 	movw	r0, #54283	; 0xd40b
 800340e:	f7fd fdff 	bl	8001010 <LCD_WriteReg>

		LCD_WriteReg(0xD40C,0x00);
 8003412:	2100      	movs	r1, #0
 8003414:	f24d 400c 	movw	r0, #54284	; 0xd40c
 8003418:	f7fd fdfa 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD40D,0xA6);
 800341c:	21a6      	movs	r1, #166	; 0xa6
 800341e:	f24d 400d 	movw	r0, #54285	; 0xd40d
 8003422:	f7fd fdf5 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD40E,0x00);
 8003426:	2100      	movs	r1, #0
 8003428:	f24d 400e 	movw	r0, #54286	; 0xd40e
 800342c:	f7fd fdf0 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD40F,0xE5);
 8003430:	21e5      	movs	r1, #229	; 0xe5
 8003432:	f24d 400f 	movw	r0, #54287	; 0xd40f
 8003436:	f7fd fdeb 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD410,0x01);
 800343a:	2101      	movs	r1, #1
 800343c:	f24d 4010 	movw	r0, #54288	; 0xd410
 8003440:	f7fd fde6 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD411,0x13);
 8003444:	2113      	movs	r1, #19
 8003446:	f24d 4011 	movw	r0, #54289	; 0xd411
 800344a:	f7fd fde1 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD412,0x01);
 800344e:	2101      	movs	r1, #1
 8003450:	f24d 4012 	movw	r0, #54290	; 0xd412
 8003454:	f7fd fddc 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD413,0x54);
 8003458:	2154      	movs	r1, #84	; 0x54
 800345a:	f24d 4013 	movw	r0, #54291	; 0xd413
 800345e:	f7fd fdd7 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD414,0x01);
 8003462:	2101      	movs	r1, #1
 8003464:	f24d 4014 	movw	r0, #54292	; 0xd414
 8003468:	f7fd fdd2 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD415,0x82);
 800346c:	2182      	movs	r1, #130	; 0x82
 800346e:	f24d 4015 	movw	r0, #54293	; 0xd415
 8003472:	f7fd fdcd 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD416,0x01);
 8003476:	2101      	movs	r1, #1
 8003478:	f24d 4016 	movw	r0, #54294	; 0xd416
 800347c:	f7fd fdc8 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD417,0xCA);
 8003480:	21ca      	movs	r1, #202	; 0xca
 8003482:	f24d 4017 	movw	r0, #54295	; 0xd417
 8003486:	f7fd fdc3 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD418,0x02);
 800348a:	2102      	movs	r1, #2
 800348c:	f24d 4018 	movw	r0, #54296	; 0xd418
 8003490:	f7fd fdbe 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD419,0x00);
 8003494:	2100      	movs	r1, #0
 8003496:	f24d 4019 	movw	r0, #54297	; 0xd419
 800349a:	f7fd fdb9 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD41A,0x02);
 800349e:	2102      	movs	r1, #2
 80034a0:	f24d 401a 	movw	r0, #54298	; 0xd41a
 80034a4:	f7fd fdb4 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD41B,0x01);
 80034a8:	2101      	movs	r1, #1
 80034aa:	f24d 401b 	movw	r0, #54299	; 0xd41b
 80034ae:	f7fd fdaf 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD41C,0x02);
 80034b2:	2102      	movs	r1, #2
 80034b4:	f24d 401c 	movw	r0, #54300	; 0xd41c
 80034b8:	f7fd fdaa 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD41D,0x34);
 80034bc:	2134      	movs	r1, #52	; 0x34
 80034be:	f24d 401d 	movw	r0, #54301	; 0xd41d
 80034c2:	f7fd fda5 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD41E,0x02);
 80034c6:	2102      	movs	r1, #2
 80034c8:	f24d 401e 	movw	r0, #54302	; 0xd41e
 80034cc:	f7fd fda0 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD41F,0x67);
 80034d0:	2167      	movs	r1, #103	; 0x67
 80034d2:	f24d 401f 	movw	r0, #54303	; 0xd41f
 80034d6:	f7fd fd9b 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD420,0x02);
 80034da:	2102      	movs	r1, #2
 80034dc:	f24d 4020 	movw	r0, #54304	; 0xd420
 80034e0:	f7fd fd96 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD421,0x84);
 80034e4:	2184      	movs	r1, #132	; 0x84
 80034e6:	f24d 4021 	movw	r0, #54305	; 0xd421
 80034ea:	f7fd fd91 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD422,0x02);
 80034ee:	2102      	movs	r1, #2
 80034f0:	f24d 4022 	movw	r0, #54306	; 0xd422
 80034f4:	f7fd fd8c 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD423,0xA4);
 80034f8:	21a4      	movs	r1, #164	; 0xa4
 80034fa:	f24d 4023 	movw	r0, #54307	; 0xd423
 80034fe:	f7fd fd87 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD424,0x02);
 8003502:	2102      	movs	r1, #2
 8003504:	f24d 4024 	movw	r0, #54308	; 0xd424
 8003508:	f7fd fd82 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD425,0xB7);
 800350c:	21b7      	movs	r1, #183	; 0xb7
 800350e:	f24d 4025 	movw	r0, #54309	; 0xd425
 8003512:	f7fd fd7d 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD426,0x02);
 8003516:	2102      	movs	r1, #2
 8003518:	f24d 4026 	movw	r0, #54310	; 0xd426
 800351c:	f7fd fd78 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD427,0xCF);
 8003520:	21cf      	movs	r1, #207	; 0xcf
 8003522:	f24d 4027 	movw	r0, #54311	; 0xd427
 8003526:	f7fd fd73 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD428,0x02);
 800352a:	2102      	movs	r1, #2
 800352c:	f24d 4028 	movw	r0, #54312	; 0xd428
 8003530:	f7fd fd6e 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD429,0xDE);
 8003534:	21de      	movs	r1, #222	; 0xde
 8003536:	f24d 4029 	movw	r0, #54313	; 0xd429
 800353a:	f7fd fd69 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD42A,0x02);
 800353e:	2102      	movs	r1, #2
 8003540:	f24d 402a 	movw	r0, #54314	; 0xd42a
 8003544:	f7fd fd64 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD42B,0xF2);
 8003548:	21f2      	movs	r1, #242	; 0xf2
 800354a:	f24d 402b 	movw	r0, #54315	; 0xd42b
 800354e:	f7fd fd5f 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD42C,0x02);
 8003552:	2102      	movs	r1, #2
 8003554:	f24d 402c 	movw	r0, #54316	; 0xd42c
 8003558:	f7fd fd5a 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD42D,0xFE);
 800355c:	21fe      	movs	r1, #254	; 0xfe
 800355e:	f24d 402d 	movw	r0, #54317	; 0xd42d
 8003562:	f7fd fd55 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD42E,0x03);
 8003566:	2103      	movs	r1, #3
 8003568:	f24d 402e 	movw	r0, #54318	; 0xd42e
 800356c:	f7fd fd50 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD42F,0x10);
 8003570:	2110      	movs	r1, #16
 8003572:	f24d 402f 	movw	r0, #54319	; 0xd42f
 8003576:	f7fd fd4b 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD430,0x03);
 800357a:	2103      	movs	r1, #3
 800357c:	f24d 4030 	movw	r0, #54320	; 0xd430
 8003580:	f7fd fd46 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD431,0x33);
 8003584:	2133      	movs	r1, #51	; 0x33
 8003586:	f24d 4031 	movw	r0, #54321	; 0xd431
 800358a:	f7fd fd41 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD432,0x03);
 800358e:	2103      	movs	r1, #3
 8003590:	f24d 4032 	movw	r0, #54322	; 0xd432
 8003594:	f7fd fd3c 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD433,0x6D);
 8003598:	216d      	movs	r1, #109	; 0x6d
 800359a:	f24d 4033 	movw	r0, #54323	; 0xd433
 800359e:	f7fd fd37 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD500,0x00);
 80035a2:	2100      	movs	r1, #0
 80035a4:	f44f 4055 	mov.w	r0, #54528	; 0xd500
 80035a8:	f7fd fd32 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD501,0x33);
 80035ac:	2133      	movs	r1, #51	; 0x33
 80035ae:	f24d 5001 	movw	r0, #54529	; 0xd501
 80035b2:	f7fd fd2d 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD502,0x00);
 80035b6:	2100      	movs	r1, #0
 80035b8:	f24d 5002 	movw	r0, #54530	; 0xd502
 80035bc:	f7fd fd28 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD503,0x34);
 80035c0:	2134      	movs	r1, #52	; 0x34
 80035c2:	f24d 5003 	movw	r0, #54531	; 0xd503
 80035c6:	f7fd fd23 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD504,0x00);
 80035ca:	2100      	movs	r1, #0
 80035cc:	f24d 5004 	movw	r0, #54532	; 0xd504
 80035d0:	f7fd fd1e 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD505,0x3A);
 80035d4:	213a      	movs	r1, #58	; 0x3a
 80035d6:	f24d 5005 	movw	r0, #54533	; 0xd505
 80035da:	f7fd fd19 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD506,0x00);
 80035de:	2100      	movs	r1, #0
 80035e0:	f24d 5006 	movw	r0, #54534	; 0xd506
 80035e4:	f7fd fd14 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD507,0x4A);
 80035e8:	214a      	movs	r1, #74	; 0x4a
 80035ea:	f24d 5007 	movw	r0, #54535	; 0xd507
 80035ee:	f7fd fd0f 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD508,0x00);
 80035f2:	2100      	movs	r1, #0
 80035f4:	f24d 5008 	movw	r0, #54536	; 0xd508
 80035f8:	f7fd fd0a 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD509,0x5C);
 80035fc:	215c      	movs	r1, #92	; 0x5c
 80035fe:	f24d 5009 	movw	r0, #54537	; 0xd509
 8003602:	f7fd fd05 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD50A,0x00);
 8003606:	2100      	movs	r1, #0
 8003608:	f24d 500a 	movw	r0, #54538	; 0xd50a
 800360c:	f7fd fd00 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD50B,0x81);
 8003610:	2181      	movs	r1, #129	; 0x81
 8003612:	f24d 500b 	movw	r0, #54539	; 0xd50b
 8003616:	f7fd fcfb 	bl	8001010 <LCD_WriteReg>

		LCD_WriteReg(0xD50C,0x00);
 800361a:	2100      	movs	r1, #0
 800361c:	f24d 500c 	movw	r0, #54540	; 0xd50c
 8003620:	f7fd fcf6 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD50D,0xA6);
 8003624:	21a6      	movs	r1, #166	; 0xa6
 8003626:	f24d 500d 	movw	r0, #54541	; 0xd50d
 800362a:	f7fd fcf1 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD50E,0x00);
 800362e:	2100      	movs	r1, #0
 8003630:	f24d 500e 	movw	r0, #54542	; 0xd50e
 8003634:	f7fd fcec 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD50F,0xE5);
 8003638:	21e5      	movs	r1, #229	; 0xe5
 800363a:	f24d 500f 	movw	r0, #54543	; 0xd50f
 800363e:	f7fd fce7 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD510,0x01);
 8003642:	2101      	movs	r1, #1
 8003644:	f24d 5010 	movw	r0, #54544	; 0xd510
 8003648:	f7fd fce2 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD511,0x13);
 800364c:	2113      	movs	r1, #19
 800364e:	f24d 5011 	movw	r0, #54545	; 0xd511
 8003652:	f7fd fcdd 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD512,0x01);
 8003656:	2101      	movs	r1, #1
 8003658:	f24d 5012 	movw	r0, #54546	; 0xd512
 800365c:	f7fd fcd8 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD513,0x54);
 8003660:	2154      	movs	r1, #84	; 0x54
 8003662:	f24d 5013 	movw	r0, #54547	; 0xd513
 8003666:	f7fd fcd3 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD514,0x01);
 800366a:	2101      	movs	r1, #1
 800366c:	f24d 5014 	movw	r0, #54548	; 0xd514
 8003670:	f7fd fcce 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD515,0x82);
 8003674:	2182      	movs	r1, #130	; 0x82
 8003676:	f24d 5015 	movw	r0, #54549	; 0xd515
 800367a:	f7fd fcc9 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD516,0x01);
 800367e:	2101      	movs	r1, #1
 8003680:	f24d 5016 	movw	r0, #54550	; 0xd516
 8003684:	f7fd fcc4 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD517,0xCA);
 8003688:	21ca      	movs	r1, #202	; 0xca
 800368a:	f24d 5017 	movw	r0, #54551	; 0xd517
 800368e:	f7fd fcbf 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD518,0x02);
 8003692:	2102      	movs	r1, #2
 8003694:	f24d 5018 	movw	r0, #54552	; 0xd518
 8003698:	f7fd fcba 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD519,0x00);
 800369c:	2100      	movs	r1, #0
 800369e:	f24d 5019 	movw	r0, #54553	; 0xd519
 80036a2:	f7fd fcb5 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD51A,0x02);
 80036a6:	2102      	movs	r1, #2
 80036a8:	f24d 501a 	movw	r0, #54554	; 0xd51a
 80036ac:	f7fd fcb0 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD51B,0x01);
 80036b0:	2101      	movs	r1, #1
 80036b2:	f24d 501b 	movw	r0, #54555	; 0xd51b
 80036b6:	f7fd fcab 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD51C,0x02);
 80036ba:	2102      	movs	r1, #2
 80036bc:	f24d 501c 	movw	r0, #54556	; 0xd51c
 80036c0:	f7fd fca6 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD51D,0x34);
 80036c4:	2134      	movs	r1, #52	; 0x34
 80036c6:	f24d 501d 	movw	r0, #54557	; 0xd51d
 80036ca:	f7fd fca1 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD51E,0x02);
 80036ce:	2102      	movs	r1, #2
 80036d0:	f24d 501e 	movw	r0, #54558	; 0xd51e
 80036d4:	f7fd fc9c 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD51F,0x67);
 80036d8:	2167      	movs	r1, #103	; 0x67
 80036da:	f24d 501f 	movw	r0, #54559	; 0xd51f
 80036de:	f7fd fc97 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD520,0x02);
 80036e2:	2102      	movs	r1, #2
 80036e4:	f24d 5020 	movw	r0, #54560	; 0xd520
 80036e8:	f7fd fc92 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD521,0x84);
 80036ec:	2184      	movs	r1, #132	; 0x84
 80036ee:	f24d 5021 	movw	r0, #54561	; 0xd521
 80036f2:	f7fd fc8d 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD522,0x02);
 80036f6:	2102      	movs	r1, #2
 80036f8:	f24d 5022 	movw	r0, #54562	; 0xd522
 80036fc:	f7fd fc88 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD523,0xA4);
 8003700:	21a4      	movs	r1, #164	; 0xa4
 8003702:	f24d 5023 	movw	r0, #54563	; 0xd523
 8003706:	f7fd fc83 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD524,0x02);
 800370a:	2102      	movs	r1, #2
 800370c:	f24d 5024 	movw	r0, #54564	; 0xd524
 8003710:	f7fd fc7e 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD525,0xB7);
 8003714:	21b7      	movs	r1, #183	; 0xb7
 8003716:	f24d 5025 	movw	r0, #54565	; 0xd525
 800371a:	f7fd fc79 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD526,0x02);
 800371e:	2102      	movs	r1, #2
 8003720:	f24d 5026 	movw	r0, #54566	; 0xd526
 8003724:	f7fd fc74 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD527,0xCF);
 8003728:	21cf      	movs	r1, #207	; 0xcf
 800372a:	f24d 5027 	movw	r0, #54567	; 0xd527
 800372e:	f7fd fc6f 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD528,0x02);
 8003732:	2102      	movs	r1, #2
 8003734:	f24d 5028 	movw	r0, #54568	; 0xd528
 8003738:	f7fd fc6a 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD529,0xDE);
 800373c:	21de      	movs	r1, #222	; 0xde
 800373e:	f24d 5029 	movw	r0, #54569	; 0xd529
 8003742:	f7fd fc65 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD52A,0x02);
 8003746:	2102      	movs	r1, #2
 8003748:	f24d 502a 	movw	r0, #54570	; 0xd52a
 800374c:	f7fd fc60 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD52B,0xF2);
 8003750:	21f2      	movs	r1, #242	; 0xf2
 8003752:	f24d 502b 	movw	r0, #54571	; 0xd52b
 8003756:	f7fd fc5b 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD52C,0x02);
 800375a:	2102      	movs	r1, #2
 800375c:	f24d 502c 	movw	r0, #54572	; 0xd52c
 8003760:	f7fd fc56 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD52D,0xFE);
 8003764:	21fe      	movs	r1, #254	; 0xfe
 8003766:	f24d 502d 	movw	r0, #54573	; 0xd52d
 800376a:	f7fd fc51 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD52E,0x03);
 800376e:	2103      	movs	r1, #3
 8003770:	f24d 502e 	movw	r0, #54574	; 0xd52e
 8003774:	f7fd fc4c 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD52F,0x10);
 8003778:	2110      	movs	r1, #16
 800377a:	f24d 502f 	movw	r0, #54575	; 0xd52f
 800377e:	f7fd fc47 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD530,0x03);
 8003782:	2103      	movs	r1, #3
 8003784:	f24d 5030 	movw	r0, #54576	; 0xd530
 8003788:	f7fd fc42 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD531,0x33);
 800378c:	2133      	movs	r1, #51	; 0x33
 800378e:	f24d 5031 	movw	r0, #54577	; 0xd531
 8003792:	f7fd fc3d 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD532,0x03);
 8003796:	2103      	movs	r1, #3
 8003798:	f24d 5032 	movw	r0, #54578	; 0xd532
 800379c:	f7fd fc38 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD533,0x6D);
 80037a0:	216d      	movs	r1, #109	; 0x6d
 80037a2:	f24d 5033 	movw	r0, #54579	; 0xd533
 80037a6:	f7fd fc33 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD600,0x00);
 80037aa:	2100      	movs	r1, #0
 80037ac:	f44f 4056 	mov.w	r0, #54784	; 0xd600
 80037b0:	f7fd fc2e 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD601,0x33);
 80037b4:	2133      	movs	r1, #51	; 0x33
 80037b6:	f24d 6001 	movw	r0, #54785	; 0xd601
 80037ba:	f7fd fc29 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD602,0x00);
 80037be:	2100      	movs	r1, #0
 80037c0:	f24d 6002 	movw	r0, #54786	; 0xd602
 80037c4:	f7fd fc24 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD603,0x34);
 80037c8:	2134      	movs	r1, #52	; 0x34
 80037ca:	f24d 6003 	movw	r0, #54787	; 0xd603
 80037ce:	f7fd fc1f 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD604,0x00);
 80037d2:	2100      	movs	r1, #0
 80037d4:	f24d 6004 	movw	r0, #54788	; 0xd604
 80037d8:	f7fd fc1a 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD605,0x3A);
 80037dc:	213a      	movs	r1, #58	; 0x3a
 80037de:	f24d 6005 	movw	r0, #54789	; 0xd605
 80037e2:	f7fd fc15 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD606,0x00);
 80037e6:	2100      	movs	r1, #0
 80037e8:	f24d 6006 	movw	r0, #54790	; 0xd606
 80037ec:	f7fd fc10 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD607,0x4A);
 80037f0:	214a      	movs	r1, #74	; 0x4a
 80037f2:	f24d 6007 	movw	r0, #54791	; 0xd607
 80037f6:	f7fd fc0b 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD608,0x00);
 80037fa:	2100      	movs	r1, #0
 80037fc:	f24d 6008 	movw	r0, #54792	; 0xd608
 8003800:	f7fd fc06 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD609,0x5C);
 8003804:	215c      	movs	r1, #92	; 0x5c
 8003806:	f24d 6009 	movw	r0, #54793	; 0xd609
 800380a:	f7fd fc01 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD60A,0x00);
 800380e:	2100      	movs	r1, #0
 8003810:	f24d 600a 	movw	r0, #54794	; 0xd60a
 8003814:	f7fd fbfc 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD60B,0x81);
 8003818:	2181      	movs	r1, #129	; 0x81
 800381a:	f24d 600b 	movw	r0, #54795	; 0xd60b
 800381e:	f7fd fbf7 	bl	8001010 <LCD_WriteReg>

		LCD_WriteReg(0xD60C,0x00);
 8003822:	2100      	movs	r1, #0
 8003824:	f24d 600c 	movw	r0, #54796	; 0xd60c
 8003828:	f7fd fbf2 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD60D,0xA6);
 800382c:	21a6      	movs	r1, #166	; 0xa6
 800382e:	f24d 600d 	movw	r0, #54797	; 0xd60d
 8003832:	f7fd fbed 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD60E,0x00);
 8003836:	2100      	movs	r1, #0
 8003838:	f24d 600e 	movw	r0, #54798	; 0xd60e
 800383c:	f7fd fbe8 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD60F,0xE5);
 8003840:	21e5      	movs	r1, #229	; 0xe5
 8003842:	f24d 600f 	movw	r0, #54799	; 0xd60f
 8003846:	f7fd fbe3 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD610,0x01);
 800384a:	2101      	movs	r1, #1
 800384c:	f24d 6010 	movw	r0, #54800	; 0xd610
 8003850:	f7fd fbde 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD611,0x13);
 8003854:	2113      	movs	r1, #19
 8003856:	f24d 6011 	movw	r0, #54801	; 0xd611
 800385a:	f7fd fbd9 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD612,0x01);
 800385e:	2101      	movs	r1, #1
 8003860:	f24d 6012 	movw	r0, #54802	; 0xd612
 8003864:	f7fd fbd4 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD613,0x54);
 8003868:	2154      	movs	r1, #84	; 0x54
 800386a:	f24d 6013 	movw	r0, #54803	; 0xd613
 800386e:	f7fd fbcf 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD614,0x01);
 8003872:	2101      	movs	r1, #1
 8003874:	f24d 6014 	movw	r0, #54804	; 0xd614
 8003878:	f7fd fbca 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD615,0x82);
 800387c:	2182      	movs	r1, #130	; 0x82
 800387e:	f24d 6015 	movw	r0, #54805	; 0xd615
 8003882:	f7fd fbc5 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD616,0x01);
 8003886:	2101      	movs	r1, #1
 8003888:	f24d 6016 	movw	r0, #54806	; 0xd616
 800388c:	f7fd fbc0 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD617,0xCA);
 8003890:	21ca      	movs	r1, #202	; 0xca
 8003892:	f24d 6017 	movw	r0, #54807	; 0xd617
 8003896:	f7fd fbbb 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD618,0x02);
 800389a:	2102      	movs	r1, #2
 800389c:	f24d 6018 	movw	r0, #54808	; 0xd618
 80038a0:	f7fd fbb6 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD619,0x00);
 80038a4:	2100      	movs	r1, #0
 80038a6:	f24d 6019 	movw	r0, #54809	; 0xd619
 80038aa:	f7fd fbb1 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD61A,0x02);
 80038ae:	2102      	movs	r1, #2
 80038b0:	f24d 601a 	movw	r0, #54810	; 0xd61a
 80038b4:	f7fd fbac 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD61B,0x01);
 80038b8:	2101      	movs	r1, #1
 80038ba:	f24d 601b 	movw	r0, #54811	; 0xd61b
 80038be:	f7fd fba7 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD61C,0x02);
 80038c2:	2102      	movs	r1, #2
 80038c4:	f24d 601c 	movw	r0, #54812	; 0xd61c
 80038c8:	f7fd fba2 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD61D,0x34);
 80038cc:	2134      	movs	r1, #52	; 0x34
 80038ce:	f24d 601d 	movw	r0, #54813	; 0xd61d
 80038d2:	f7fd fb9d 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD61E,0x02);
 80038d6:	2102      	movs	r1, #2
 80038d8:	f24d 601e 	movw	r0, #54814	; 0xd61e
 80038dc:	f7fd fb98 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD61F,0x67);
 80038e0:	2167      	movs	r1, #103	; 0x67
 80038e2:	f24d 601f 	movw	r0, #54815	; 0xd61f
 80038e6:	f7fd fb93 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD620,0x02);
 80038ea:	2102      	movs	r1, #2
 80038ec:	f24d 6020 	movw	r0, #54816	; 0xd620
 80038f0:	f7fd fb8e 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD621,0x84);
 80038f4:	2184      	movs	r1, #132	; 0x84
 80038f6:	f24d 6021 	movw	r0, #54817	; 0xd621
 80038fa:	f7fd fb89 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD622,0x02);
 80038fe:	2102      	movs	r1, #2
 8003900:	f24d 6022 	movw	r0, #54818	; 0xd622
 8003904:	f7fd fb84 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD623,0xA4);
 8003908:	21a4      	movs	r1, #164	; 0xa4
 800390a:	f24d 6023 	movw	r0, #54819	; 0xd623
 800390e:	f7fd fb7f 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD624,0x02);
 8003912:	2102      	movs	r1, #2
 8003914:	f24d 6024 	movw	r0, #54820	; 0xd624
 8003918:	f7fd fb7a 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD625,0xB7);
 800391c:	21b7      	movs	r1, #183	; 0xb7
 800391e:	f24d 6025 	movw	r0, #54821	; 0xd625
 8003922:	f7fd fb75 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD626,0x02);
 8003926:	2102      	movs	r1, #2
 8003928:	f24d 6026 	movw	r0, #54822	; 0xd626
 800392c:	f7fd fb70 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD627,0xCF);
 8003930:	21cf      	movs	r1, #207	; 0xcf
 8003932:	f24d 6027 	movw	r0, #54823	; 0xd627
 8003936:	f7fd fb6b 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD628,0x02);
 800393a:	2102      	movs	r1, #2
 800393c:	f24d 6028 	movw	r0, #54824	; 0xd628
 8003940:	f7fd fb66 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD629,0xDE);
 8003944:	21de      	movs	r1, #222	; 0xde
 8003946:	f24d 6029 	movw	r0, #54825	; 0xd629
 800394a:	f7fd fb61 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD62A,0x02);
 800394e:	2102      	movs	r1, #2
 8003950:	f24d 602a 	movw	r0, #54826	; 0xd62a
 8003954:	f7fd fb5c 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD62B,0xF2);
 8003958:	21f2      	movs	r1, #242	; 0xf2
 800395a:	f24d 602b 	movw	r0, #54827	; 0xd62b
 800395e:	f7fd fb57 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD62C,0x02);
 8003962:	2102      	movs	r1, #2
 8003964:	f24d 602c 	movw	r0, #54828	; 0xd62c
 8003968:	f7fd fb52 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD62D,0xFE);
 800396c:	21fe      	movs	r1, #254	; 0xfe
 800396e:	f24d 602d 	movw	r0, #54829	; 0xd62d
 8003972:	f7fd fb4d 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD62E,0x03);
 8003976:	2103      	movs	r1, #3
 8003978:	f24d 602e 	movw	r0, #54830	; 0xd62e
 800397c:	f7fd fb48 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD62F,0x10);
 8003980:	2110      	movs	r1, #16
 8003982:	f24d 602f 	movw	r0, #54831	; 0xd62f
 8003986:	f7fd fb43 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD630,0x03);
 800398a:	2103      	movs	r1, #3
 800398c:	f24d 6030 	movw	r0, #54832	; 0xd630
 8003990:	f7fd fb3e 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD631,0x33);
 8003994:	2133      	movs	r1, #51	; 0x33
 8003996:	f24d 6031 	movw	r0, #54833	; 0xd631
 800399a:	f7fd fb39 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD632,0x03);
 800399e:	2103      	movs	r1, #3
 80039a0:	f24d 6032 	movw	r0, #54834	; 0xd632
 80039a4:	f7fd fb34 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xD633,0x6D);
 80039a8:	216d      	movs	r1, #109	; 0x6d
 80039aa:	f24d 6033 	movw	r0, #54835	; 0xd633
 80039ae:	f7fd fb2f 	bl	8001010 <LCD_WriteReg>
		//LV2 Page 0 enable
		LCD_WriteReg(0xF000,0x55);
 80039b2:	2155      	movs	r1, #85	; 0x55
 80039b4:	f44f 4070 	mov.w	r0, #61440	; 0xf000
 80039b8:	f7fd fb2a 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xF001,0xAA);
 80039bc:	21aa      	movs	r1, #170	; 0xaa
 80039be:	f24f 0001 	movw	r0, #61441	; 0xf001
 80039c2:	f7fd fb25 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xF002,0x52);
 80039c6:	2152      	movs	r1, #82	; 0x52
 80039c8:	f24f 0002 	movw	r0, #61442	; 0xf002
 80039cc:	f7fd fb20 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xF003,0x08);
 80039d0:	2108      	movs	r1, #8
 80039d2:	f24f 0003 	movw	r0, #61443	; 0xf003
 80039d6:	f7fd fb1b 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xF004,0x00);
 80039da:	2100      	movs	r1, #0
 80039dc:	f24f 0004 	movw	r0, #61444	; 0xf004
 80039e0:	f7fd fb16 	bl	8001010 <LCD_WriteReg>
		//Display control
		LCD_WriteReg(0xB100, 0xCC);
 80039e4:	21cc      	movs	r1, #204	; 0xcc
 80039e6:	f44f 4031 	mov.w	r0, #45312	; 0xb100
 80039ea:	f7fd fb11 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB101, 0x00);
 80039ee:	2100      	movs	r1, #0
 80039f0:	f24b 1001 	movw	r0, #45313	; 0xb101
 80039f4:	f7fd fb0c 	bl	8001010 <LCD_WriteReg>
		//Source hold time
		LCD_WriteReg(0xB600,0x05);
 80039f8:	2105      	movs	r1, #5
 80039fa:	f44f 4036 	mov.w	r0, #46592	; 0xb600
 80039fe:	f7fd fb07 	bl	8001010 <LCD_WriteReg>
		//Gate EQ control
		LCD_WriteReg(0xB700,0x70);
 8003a02:	2170      	movs	r1, #112	; 0x70
 8003a04:	f44f 4037 	mov.w	r0, #46848	; 0xb700
 8003a08:	f7fd fb02 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB701,0x70);
 8003a0c:	2170      	movs	r1, #112	; 0x70
 8003a0e:	f24b 7001 	movw	r0, #46849	; 0xb701
 8003a12:	f7fd fafd 	bl	8001010 <LCD_WriteReg>
		//Source EQ control (Mode 2)
		LCD_WriteReg(0xB800,0x01);
 8003a16:	2101      	movs	r1, #1
 8003a18:	f44f 4038 	mov.w	r0, #47104	; 0xb800
 8003a1c:	f7fd faf8 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB801,0x03);
 8003a20:	2103      	movs	r1, #3
 8003a22:	f64b 0001 	movw	r0, #47105	; 0xb801
 8003a26:	f7fd faf3 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB802,0x03);
 8003a2a:	2103      	movs	r1, #3
 8003a2c:	f64b 0002 	movw	r0, #47106	; 0xb802
 8003a30:	f7fd faee 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xB803,0x03);
 8003a34:	2103      	movs	r1, #3
 8003a36:	f64b 0003 	movw	r0, #47107	; 0xb803
 8003a3a:	f7fd fae9 	bl	8001010 <LCD_WriteReg>
		//Inversion mode (2-dot)
		LCD_WriteReg(0xBC00,0x02);
 8003a3e:	2102      	movs	r1, #2
 8003a40:	f44f 403c 	mov.w	r0, #48128	; 0xbc00
 8003a44:	f7fd fae4 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xBC01,0x00);
 8003a48:	2100      	movs	r1, #0
 8003a4a:	f64b 4001 	movw	r0, #48129	; 0xbc01
 8003a4e:	f7fd fadf 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xBC02,0x00);
 8003a52:	2100      	movs	r1, #0
 8003a54:	f64b 4002 	movw	r0, #48130	; 0xbc02
 8003a58:	f7fd fada 	bl	8001010 <LCD_WriteReg>
		//Timing control 4H w/ 4-delay
		LCD_WriteReg(0xC900,0xD0);
 8003a5c:	21d0      	movs	r1, #208	; 0xd0
 8003a5e:	f44f 4049 	mov.w	r0, #51456	; 0xc900
 8003a62:	f7fd fad5 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xC901,0x02);
 8003a66:	2102      	movs	r1, #2
 8003a68:	f64c 1001 	movw	r0, #51457	; 0xc901
 8003a6c:	f7fd fad0 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xC902,0x50);
 8003a70:	2150      	movs	r1, #80	; 0x50
 8003a72:	f64c 1002 	movw	r0, #51458	; 0xc902
 8003a76:	f7fd facb 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xC903,0x50);
 8003a7a:	2150      	movs	r1, #80	; 0x50
 8003a7c:	f64c 1003 	movw	r0, #51459	; 0xc903
 8003a80:	f7fd fac6 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0xC904,0x50);
 8003a84:	2150      	movs	r1, #80	; 0x50
 8003a86:	f64c 1004 	movw	r0, #51460	; 0xc904
 8003a8a:	f7fd fac1 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0x3500,0x00);
 8003a8e:	2100      	movs	r1, #0
 8003a90:	f44f 5054 	mov.w	r0, #13568	; 0x3500
 8003a94:	f7fd fabc 	bl	8001010 <LCD_WriteReg>
		LCD_WriteReg(0x3A00,0x55);  //16-bit/pixel
 8003a98:	2155      	movs	r1, #85	; 0x55
 8003a9a:	f44f 5068 	mov.w	r0, #14848	; 0x3a00
 8003a9e:	f7fd fab7 	bl	8001010 <LCD_WriteReg>
		LCD_WR_REG(0x1100);
 8003aa2:	f44f 5088 	mov.w	r0, #4352	; 0x1100
 8003aa6:	f7fd fa83 	bl	8000fb0 <LCD_WR_REG>
		//HAL_Delay(120);
		//delay_us(120);
		LCD_WR_REG(0x2900);
 8003aaa:	f44f 5024 	mov.w	r0, #10496	; 0x2900
 8003aae:	f7fd fa7f 	bl	8000fb0 <LCD_WR_REG>
 8003ab2:	e0be      	b.n	8003c32 <LCD_Init+0x2342>
	}else if(lcddev.id==0X1963)
 8003ab4:	4b7d      	ldr	r3, [pc, #500]	; (8003cac <LCD_Init+0x23bc>)
 8003ab6:	889b      	ldrh	r3, [r3, #4]
 8003ab8:	f641 1263 	movw	r2, #6499	; 0x1963
 8003abc:	4293      	cmp	r3, r2
 8003abe:	f040 80b8 	bne.w	8003c32 <LCD_Init+0x2342>
	{
		LCD_WR_REG(0xE2);		//Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz
 8003ac2:	20e2      	movs	r0, #226	; 0xe2
 8003ac4:	f7fd fa74 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x1D);		//参数1
 8003ac8:	201d      	movs	r0, #29
 8003aca:	f7fd fa81 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x02);		//参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz
 8003ace:	2002      	movs	r0, #2
 8003ad0:	f7fd fa7e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x04);		//参数3 Validate M and N values
 8003ad4:	2004      	movs	r0, #4
 8003ad6:	f7fd fa7b 	bl	8000fd0 <LCD_WR_DATA>
		HAL_Delay(100);
 8003ada:	2064      	movs	r0, #100	; 0x64
 8003adc:	f001 fa5e 	bl	8004f9c <HAL_Delay>
		//delay_us(100);
		LCD_WR_REG(0xE0);		// Start PLL command
 8003ae0:	20e0      	movs	r0, #224	; 0xe0
 8003ae2:	f7fd fa65 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x01);		// enable PLL
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	f7fd fa72 	bl	8000fd0 <LCD_WR_DATA>
		HAL_Delay(10);
 8003aec:	200a      	movs	r0, #10
 8003aee:	f001 fa55 	bl	8004f9c <HAL_Delay>
		//delay_ms(10);
		LCD_WR_REG(0xE0);		// Start PLL command again
 8003af2:	20e0      	movs	r0, #224	; 0xe0
 8003af4:	f7fd fa5c 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);		// now, use PLL output as system clock
 8003af8:	2003      	movs	r0, #3
 8003afa:	f7fd fa69 	bl	8000fd0 <LCD_WR_DATA>
		HAL_Delay(12);
 8003afe:	200c      	movs	r0, #12
 8003b00:	f001 fa4c 	bl	8004f9c <HAL_Delay>
		//delay_ms(12);
		LCD_WR_REG(0x01);		//软复位
 8003b04:	2001      	movs	r0, #1
 8003b06:	f7fd fa53 	bl	8000fb0 <LCD_WR_REG>
		HAL_Delay(10);
 8003b0a:	200a      	movs	r0, #10
 8003b0c:	f001 fa46 	bl	8004f9c <HAL_Delay>
		//delay_ms(10);

		LCD_WR_REG(0xE6);		//设置像素频率,33Mhz
 8003b10:	20e6      	movs	r0, #230	; 0xe6
 8003b12:	f7fd fa4d 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x2F);
 8003b16:	202f      	movs	r0, #47	; 0x2f
 8003b18:	f7fd fa5a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8003b1c:	20ff      	movs	r0, #255	; 0xff
 8003b1e:	f7fd fa57 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xFF);
 8003b22:	20ff      	movs	r0, #255	; 0xff
 8003b24:	f7fd fa54 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xB0);		//设置LCD模式
 8003b28:	20b0      	movs	r0, #176	; 0xb0
 8003b2a:	f7fd fa41 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x20);		//24位模式
 8003b2e:	2020      	movs	r0, #32
 8003b30:	f7fd fa4e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//TFT 模式
 8003b34:	2000      	movs	r0, #0
 8003b36:	f7fd fa4b 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_DATA((SSD_HOR_RESOLUTION-1)>>8);//设置LCD水平像素
 8003b3a:	2003      	movs	r0, #3
 8003b3c:	f7fd fa48 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_RESOLUTION-1);
 8003b40:	f240 301f 	movw	r0, #799	; 0x31f
 8003b44:	f7fd fa44 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA((SSD_VER_RESOLUTION-1)>>8);//设置LCD垂直像素
 8003b48:	2001      	movs	r0, #1
 8003b4a:	f7fd fa41 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_RESOLUTION-1);
 8003b4e:	f240 10df 	movw	r0, #479	; 0x1df
 8003b52:	f7fd fa3d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);		//RGB序列
 8003b56:	2000      	movs	r0, #0
 8003b58:	f7fd fa3a 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xB4);		//Set horizontal period
 8003b5c:	20b4      	movs	r0, #180	; 0xb4
 8003b5e:	f7fd fa27 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA((SSD_HT-1)>>8);
 8003b62:	2004      	movs	r0, #4
 8003b64:	f7fd fa34 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HT-1);
 8003b68:	f240 401f 	movw	r0, #1055	; 0x41f
 8003b6c:	f7fd fa30 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS>>8);
 8003b70:	2000      	movs	r0, #0
 8003b72:	f7fd fa2d 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HPS);
 8003b76:	202e      	movs	r0, #46	; 0x2e
 8003b78:	f7fd fa2a 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_HOR_PULSE_WIDTH-1);
 8003b7c:	2000      	movs	r0, #0
 8003b7e:	f7fd fa27 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b82:	2000      	movs	r0, #0
 8003b84:	f7fd fa24 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b88:	2000      	movs	r0, #0
 8003b8a:	f7fd fa21 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003b8e:	2000      	movs	r0, #0
 8003b90:	f7fd fa1e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xB6);		//Set vertical period
 8003b94:	20b6      	movs	r0, #182	; 0xb6
 8003b96:	f7fd fa0b 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA((SSD_VT-1)>>8);
 8003b9a:	2002      	movs	r0, #2
 8003b9c:	f7fd fa18 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VT-1);
 8003ba0:	f44f 7003 	mov.w	r0, #524	; 0x20c
 8003ba4:	f7fd fa14 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS>>8);
 8003ba8:	2000      	movs	r0, #0
 8003baa:	f7fd fa11 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VPS);
 8003bae:	2017      	movs	r0, #23
 8003bb0:	f7fd fa0e 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(SSD_VER_FRONT_PORCH-1);
 8003bb4:	2015      	movs	r0, #21
 8003bb6:	f7fd fa0b 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bba:	2000      	movs	r0, #0
 8003bbc:	f7fd fa08 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);
 8003bc0:	2000      	movs	r0, #0
 8003bc2:	f7fd fa05 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xF0);	//设置SSD1963与CPU接口为16bit
 8003bc6:	20f0      	movs	r0, #240	; 0xf0
 8003bc8:	f7fd f9f2 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//16-bit(565 format) data for 16bpp
 8003bcc:	2003      	movs	r0, #3
 8003bce:	f7fd f9ff 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0x29);	//开启显示
 8003bd2:	2029      	movs	r0, #41	; 0x29
 8003bd4:	f7fd f9ec 	bl	8000fb0 <LCD_WR_REG>
		//设置PWM输出  背光通过占空比可调
		LCD_WR_REG(0xD0);	//设置自动白平衡DBC
 8003bd8:	20d0      	movs	r0, #208	; 0xd0
 8003bda:	f7fd f9e9 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x00);	//disable
 8003bde:	2000      	movs	r0, #0
 8003be0:	f7fd f9f6 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xBE);	//配置PWM输出
 8003be4:	20be      	movs	r0, #190	; 0xbe
 8003be6:	f7fd f9e3 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x05);	//1设置PWM频率
 8003bea:	2005      	movs	r0, #5
 8003bec:	f7fd f9f0 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0xFE);	//2设置PWM占空比
 8003bf0:	20fe      	movs	r0, #254	; 0xfe
 8003bf2:	f7fd f9ed 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//3设置C
 8003bf6:	2001      	movs	r0, #1
 8003bf8:	f7fd f9ea 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//4设置D
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	f7fd f9e7 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//5设置E
 8003c02:	2000      	movs	r0, #0
 8003c04:	f7fd f9e4 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x00);	//6设置F
 8003c08:	2000      	movs	r0, #0
 8003c0a:	f7fd f9e1 	bl	8000fd0 <LCD_WR_DATA>

		LCD_WR_REG(0xB8);	//设置GPIO配置
 8003c0e:	20b8      	movs	r0, #184	; 0xb8
 8003c10:	f7fd f9ce 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0x03);	//2个IO口设置成输出
 8003c14:	2003      	movs	r0, #3
 8003c16:	f7fd f9db 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_DATA(0x01);	//GPIO使用正常的IO功能
 8003c1a:	2001      	movs	r0, #1
 8003c1c:	f7fd f9d8 	bl	8000fd0 <LCD_WR_DATA>
		LCD_WR_REG(0xBA);
 8003c20:	20ba      	movs	r0, #186	; 0xba
 8003c22:	f7fd f9c5 	bl	8000fb0 <LCD_WR_REG>
		LCD_WR_DATA(0X01);	//GPIO[1:0]=01,控制LCD方向
 8003c26:	2001      	movs	r0, #1
 8003c28:	f7fd f9d2 	bl	8000fd0 <LCD_WR_DATA>

		LCD_SSD_BackLightSet(100);//背光设置为最亮
 8003c2c:	2064      	movs	r0, #100	; 0x64
 8003c2e:	f7fd fd5b 	bl	80016e8 <LCD_SSD_BackLightSet>
	}
	//初始化完成以后,提速
	if(lcddev.id==0X9341||lcddev.id==0X5310||lcddev.id==0X5510||lcddev.id==0X1963)//如果是这几个IC,则设置WR时序为最快
 8003c32:	4b1e      	ldr	r3, [pc, #120]	; (8003cac <LCD_Init+0x23bc>)
 8003c34:	889b      	ldrh	r3, [r3, #4]
 8003c36:	f249 3241 	movw	r2, #37697	; 0x9341
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d011      	beq.n	8003c62 <LCD_Init+0x2372>
 8003c3e:	4b1b      	ldr	r3, [pc, #108]	; (8003cac <LCD_Init+0x23bc>)
 8003c40:	889b      	ldrh	r3, [r3, #4]
 8003c42:	f245 3210 	movw	r2, #21264	; 0x5310
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d00b      	beq.n	8003c62 <LCD_Init+0x2372>
 8003c4a:	4b18      	ldr	r3, [pc, #96]	; (8003cac <LCD_Init+0x23bc>)
 8003c4c:	889b      	ldrh	r3, [r3, #4]
 8003c4e:	f245 5210 	movw	r2, #21776	; 0x5510
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d005      	beq.n	8003c62 <LCD_Init+0x2372>
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <LCD_Init+0x23bc>)
 8003c58:	889b      	ldrh	r3, [r3, #4]
 8003c5a:	f641 1263 	movw	r2, #6499	; 0x1963
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d117      	bne.n	8003c92 <LCD_Init+0x23a2>
	{
		//重新配置写时序控制寄存器的时序
		FSMC_Bank1E->BWTR[6]&=~(0XF<<0);//地址建立时间(ADDSET)清零
 8003c62:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <LCD_Init+0x23c0>)
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	4a12      	ldr	r2, [pc, #72]	; (8003cb0 <LCD_Init+0x23c0>)
 8003c68:	f023 030f 	bic.w	r3, r3, #15
 8003c6c:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]&=~(0XF<<8);//数据保存时间清零
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <LCD_Init+0x23c0>)
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	4a0f      	ldr	r2, [pc, #60]	; (8003cb0 <LCD_Init+0x23c0>)
 8003c74:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c78:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=1<<0;		//地址建立时间(ADDSET)为2个HCLK =28ns
 8003c7a:	4b0d      	ldr	r3, [pc, #52]	; (8003cb0 <LCD_Init+0x23c0>)
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	4a0c      	ldr	r2, [pc, #48]	; (8003cb0 <LCD_Init+0x23c0>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	6193      	str	r3, [r2, #24]
		FSMC_Bank1E->BWTR[6]|=1<<8; 	//数据保存时间(DATAST)为13.8ns*2个HCLK=28ns
 8003c86:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <LCD_Init+0x23c0>)
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	4a09      	ldr	r2, [pc, #36]	; (8003cb0 <LCD_Init+0x23c0>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c90:	6193      	str	r3, [r2, #24]
	}
	LCD_Display_Dir(0);		//默认为竖屏
 8003c92:	2000      	movs	r0, #0
 8003c94:	f7fd fd5c 	bl	8001750 <LCD_Display_Dir>
	LCD_LED=1;				//点亮背光
 8003c98:	4b06      	ldr	r3, [pc, #24]	; (8003cb4 <LCD_Init+0x23c4>)
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	601a      	str	r2, [r3, #0]
	LCD_Clear(WHITE);
 8003c9e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8003ca2:	f000 f809 	bl	8003cb8 <LCD_Clear>
}
 8003ca6:	bf00      	nop
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000080 	.word	0x20000080
 8003cb0:	a0000104 	.word	0xa0000104
 8003cb4:	42218180 	.word	0x42218180

08003cb8 <LCD_Clear>:
//清屏函数
//color:要清屏的填充色
void LCD_Clear(u32 color)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
	u32 index=0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
	u32 totalpoint=lcddev.width;
 8003cc4:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <LCD_Clear+0x50>)
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	60bb      	str	r3, [r7, #8]
	totalpoint*=lcddev.height; 			//得到总点数
 8003cca:	4b0f      	ldr	r3, [pc, #60]	; (8003d08 <LCD_Clear+0x50>)
 8003ccc:	885b      	ldrh	r3, [r3, #2]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	fb02 f303 	mul.w	r3, r2, r3
 8003cd6:	60bb      	str	r3, [r7, #8]
	LCD_SetCursor(0x00,0x0000);			//设置光标位置
 8003cd8:	2100      	movs	r1, #0
 8003cda:	2000      	movs	r0, #0
 8003cdc:	f7fd f9bc 	bl	8001058 <LCD_SetCursor>
	LCD_WriteRAM_Prepare();     		//开始写入GRAM
 8003ce0:	f7fd f9ac 	bl	800103c <LCD_WriteRAM_Prepare>
	for(index=0;index<totalpoint;index++)
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	e006      	b.n	8003cf8 <LCD_Clear+0x40>
	{
		LCD->LCD_RAM=color;
 8003cea:	4b08      	ldr	r3, [pc, #32]	; (8003d0c <LCD_Clear+0x54>)
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	b292      	uxth	r2, r2
 8003cf0:	805a      	strh	r2, [r3, #2]
	for(index=0;index<totalpoint;index++)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d3f4      	bcc.n	8003cea <LCD_Clear+0x32>
	}
}
 8003d00:	bf00      	nop
 8003d02:	3710      	adds	r7, #16
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000080 	.word	0x20000080
 8003d0c:	6c0007fe 	.word	0x6c0007fe

08003d10 <LCD_ShowChar>:
//x,y:起始坐标
//num:要显示的字符:" "--->"~"
//size:字体大小 12/16/24/32
//mode:叠加方式(1)还是非叠加方式(0)
void LCD_ShowChar(u16 x,u16 y,u8 num,u8 size,u8 mode)
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b085      	sub	sp, #20
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4604      	mov	r4, r0
 8003d18:	4608      	mov	r0, r1
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	4623      	mov	r3, r4
 8003d20:	80fb      	strh	r3, [r7, #6]
 8003d22:	4603      	mov	r3, r0
 8003d24:	80bb      	strh	r3, [r7, #4]
 8003d26:	460b      	mov	r3, r1
 8003d28:	70fb      	strb	r3, [r7, #3]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	70bb      	strb	r3, [r7, #2]
    u8 temp,t1,t;
	u16 y0=y;
 8003d2e:	88bb      	ldrh	r3, [r7, #4]
 8003d30:	817b      	strh	r3, [r7, #10]
	u8 csize=(size/8+((size%8)?1:0))*(size/2);		//得到字体一个字符对应点阵集所占的字节数
 8003d32:	78bb      	ldrb	r3, [r7, #2]
 8003d34:	08db      	lsrs	r3, r3, #3
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	461a      	mov	r2, r3
 8003d3a:	78bb      	ldrb	r3, [r7, #2]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	bf14      	ite	ne
 8003d46:	2301      	movne	r3, #1
 8003d48:	2300      	moveq	r3, #0
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	4413      	add	r3, r2
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	78ba      	ldrb	r2, [r7, #2]
 8003d52:	0852      	lsrs	r2, r2, #1
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	fb02 f303 	mul.w	r3, r2, r3
 8003d5a:	727b      	strb	r3, [r7, #9]
 	num=num-' ';//得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库）
 8003d5c:	78fb      	ldrb	r3, [r7, #3]
 8003d5e:	3b20      	subs	r3, #32
 8003d60:	70fb      	strb	r3, [r7, #3]
	for(t=0;t<csize;t++)
 8003d62:	2300      	movs	r3, #0
 8003d64:	737b      	strb	r3, [r7, #13]
 8003d66:	e075      	b.n	8003e54 <LCD_ShowChar+0x144>
	{
		if(size==12)temp=asc2_1206[num][t]; 	 	//调用1206字体
 8003d68:	78bb      	ldrb	r3, [r7, #2]
 8003d6a:	2b0c      	cmp	r3, #12
 8003d6c:	d10b      	bne.n	8003d86 <LCD_ShowChar+0x76>
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	7b79      	ldrb	r1, [r7, #13]
 8003d72:	483e      	ldr	r0, [pc, #248]	; (8003e6c <LCD_ShowChar+0x15c>)
 8003d74:	4613      	mov	r3, r2
 8003d76:	005b      	lsls	r3, r3, #1
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4403      	add	r3, r0
 8003d7e:	440b      	add	r3, r1
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	73fb      	strb	r3, [r7, #15]
 8003d84:	e025      	b.n	8003dd2 <LCD_ShowChar+0xc2>
		else if(size==16)temp=asc2_1608[num][t];	//调用1608字体
 8003d86:	78bb      	ldrb	r3, [r7, #2]
 8003d88:	2b10      	cmp	r3, #16
 8003d8a:	d108      	bne.n	8003d9e <LCD_ShowChar+0x8e>
 8003d8c:	78fa      	ldrb	r2, [r7, #3]
 8003d8e:	7b7b      	ldrb	r3, [r7, #13]
 8003d90:	4937      	ldr	r1, [pc, #220]	; (8003e70 <LCD_ShowChar+0x160>)
 8003d92:	0112      	lsls	r2, r2, #4
 8003d94:	440a      	add	r2, r1
 8003d96:	4413      	add	r3, r2
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	73fb      	strb	r3, [r7, #15]
 8003d9c:	e019      	b.n	8003dd2 <LCD_ShowChar+0xc2>
		else if(size==24)temp=asc2_2412[num][t];	//调用2412字体
 8003d9e:	78bb      	ldrb	r3, [r7, #2]
 8003da0:	2b18      	cmp	r3, #24
 8003da2:	d10b      	bne.n	8003dbc <LCD_ShowChar+0xac>
 8003da4:	78fa      	ldrb	r2, [r7, #3]
 8003da6:	7b79      	ldrb	r1, [r7, #13]
 8003da8:	4832      	ldr	r0, [pc, #200]	; (8003e74 <LCD_ShowChar+0x164>)
 8003daa:	4613      	mov	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	4413      	add	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4403      	add	r3, r0
 8003db4:	440b      	add	r3, r1
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	73fb      	strb	r3, [r7, #15]
 8003dba:	e00a      	b.n	8003dd2 <LCD_ShowChar+0xc2>
		else if(size==32)temp=asc2_3216[num][t];	//调用3216字体
 8003dbc:	78bb      	ldrb	r3, [r7, #2]
 8003dbe:	2b20      	cmp	r3, #32
 8003dc0:	d14d      	bne.n	8003e5e <LCD_ShowChar+0x14e>
 8003dc2:	78fa      	ldrb	r2, [r7, #3]
 8003dc4:	7b7b      	ldrb	r3, [r7, #13]
 8003dc6:	492c      	ldr	r1, [pc, #176]	; (8003e78 <LCD_ShowChar+0x168>)
 8003dc8:	01d2      	lsls	r2, r2, #7
 8003dca:	440a      	add	r2, r1
 8003dcc:	4413      	add	r3, r2
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	73fb      	strb	r3, [r7, #15]
		else return;								//没有的字库
		for(t1=0;t1<8;t1++)
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73bb      	strb	r3, [r7, #14]
 8003dd6:	e035      	b.n	8003e44 <LCD_ShowChar+0x134>
		{
			if(temp&0x80)LCD_Fast_DrawPoint(x,y,POINT_COLOR);
 8003dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	da07      	bge.n	8003df0 <LCD_ShowChar+0xe0>
 8003de0:	4b26      	ldr	r3, [pc, #152]	; (8003e7c <LCD_ShowChar+0x16c>)
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	88b9      	ldrh	r1, [r7, #4]
 8003de6:	88fb      	ldrh	r3, [r7, #6]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fd fbb3 	bl	8001554 <LCD_Fast_DrawPoint>
 8003dee:	e00a      	b.n	8003e06 <LCD_ShowChar+0xf6>
			else if(mode==0)LCD_Fast_DrawPoint(x,y,BACK_COLOR);
 8003df0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d106      	bne.n	8003e06 <LCD_ShowChar+0xf6>
 8003df8:	4b21      	ldr	r3, [pc, #132]	; (8003e80 <LCD_ShowChar+0x170>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	88b9      	ldrh	r1, [r7, #4]
 8003dfe:	88fb      	ldrh	r3, [r7, #6]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fd fba7 	bl	8001554 <LCD_Fast_DrawPoint>
			temp<<=1;
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	005b      	lsls	r3, r3, #1
 8003e0a:	73fb      	strb	r3, [r7, #15]
			y++;
 8003e0c:	88bb      	ldrh	r3, [r7, #4]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	80bb      	strh	r3, [r7, #4]
			if(y>=lcddev.height)return;		//超区域了
 8003e12:	4b1c      	ldr	r3, [pc, #112]	; (8003e84 <LCD_ShowChar+0x174>)
 8003e14:	885b      	ldrh	r3, [r3, #2]
 8003e16:	88ba      	ldrh	r2, [r7, #4]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d222      	bcs.n	8003e62 <LCD_ShowChar+0x152>
			if((y-y0)==size)
 8003e1c:	88ba      	ldrh	r2, [r7, #4]
 8003e1e:	897b      	ldrh	r3, [r7, #10]
 8003e20:	1ad2      	subs	r2, r2, r3
 8003e22:	78bb      	ldrb	r3, [r7, #2]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d10a      	bne.n	8003e3e <LCD_ShowChar+0x12e>
			{
				y=y0;
 8003e28:	897b      	ldrh	r3, [r7, #10]
 8003e2a:	80bb      	strh	r3, [r7, #4]
				x++;
 8003e2c:	88fb      	ldrh	r3, [r7, #6]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	80fb      	strh	r3, [r7, #6]
				if(x>=lcddev.width)return;	//超区域了
 8003e32:	4b14      	ldr	r3, [pc, #80]	; (8003e84 <LCD_ShowChar+0x174>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	88fa      	ldrh	r2, [r7, #6]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d307      	bcc.n	8003e4c <LCD_ShowChar+0x13c>
 8003e3c:	e012      	b.n	8003e64 <LCD_ShowChar+0x154>
		for(t1=0;t1<8;t1++)
 8003e3e:	7bbb      	ldrb	r3, [r7, #14]
 8003e40:	3301      	adds	r3, #1
 8003e42:	73bb      	strb	r3, [r7, #14]
 8003e44:	7bbb      	ldrb	r3, [r7, #14]
 8003e46:	2b07      	cmp	r3, #7
 8003e48:	d9c6      	bls.n	8003dd8 <LCD_ShowChar+0xc8>
 8003e4a:	e000      	b.n	8003e4e <LCD_ShowChar+0x13e>
				break;
 8003e4c:	bf00      	nop
	for(t=0;t<csize;t++)
 8003e4e:	7b7b      	ldrb	r3, [r7, #13]
 8003e50:	3301      	adds	r3, #1
 8003e52:	737b      	strb	r3, [r7, #13]
 8003e54:	7b7a      	ldrb	r2, [r7, #13]
 8003e56:	7a7b      	ldrb	r3, [r7, #9]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d385      	bcc.n	8003d68 <LCD_ShowChar+0x58>
 8003e5c:	e002      	b.n	8003e64 <LCD_ShowChar+0x154>
		else return;								//没有的字库
 8003e5e:	bf00      	nop
 8003e60:	e000      	b.n	8003e64 <LCD_ShowChar+0x154>
			if(y>=lcddev.height)return;		//超区域了
 8003e62:	bf00      	nop
			}
		}
	}
}
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd90      	pop	{r4, r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	080076b4 	.word	0x080076b4
 8003e70:	08007b28 	.word	0x08007b28
 8003e74:	08008118 	.word	0x08008118
 8003e78:	08008e74 	.word	0x08008e74
 8003e7c:	20000000 	.word	0x20000000
 8003e80:	20000004 	.word	0x20000004
 8003e84:	20000080 	.word	0x20000080

08003e88 <LCD_Pow>:
//m^n函数
//返回值:m^n次方.
u32 LCD_Pow(u8 m,u8 n)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b085      	sub	sp, #20
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	4603      	mov	r3, r0
 8003e90:	460a      	mov	r2, r1
 8003e92:	71fb      	strb	r3, [r7, #7]
 8003e94:	4613      	mov	r3, r2
 8003e96:	71bb      	strb	r3, [r7, #6]
	u32 result=1;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8003e9c:	e004      	b.n	8003ea8 <LCD_Pow+0x20>
 8003e9e:	79fa      	ldrb	r2, [r7, #7]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	fb02 f303 	mul.w	r3, r2, r3
 8003ea6:	60fb      	str	r3, [r7, #12]
 8003ea8:	79bb      	ldrb	r3, [r7, #6]
 8003eaa:	1e5a      	subs	r2, r3, #1
 8003eac:	71ba      	strb	r2, [r7, #6]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f5      	bne.n	8003e9e <LCD_Pow+0x16>
	return result;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr
	...

08003ec0 <LCD_ShowxNum>:
//mode:
//[7]:0,不填充;1,填充0.
//[6:1]:保留
//[0]:0,非叠加显示;1,叠加显示.
void LCD_ShowxNum(u16 x,u16 y,u32 num,u8 len,u8 size,u8 mode)
{
 8003ec0:	b590      	push	{r4, r7, lr}
 8003ec2:	b089      	sub	sp, #36	; 0x24
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60ba      	str	r2, [r7, #8]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	4603      	mov	r3, r0
 8003ecc:	81fb      	strh	r3, [r7, #14]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	81bb      	strh	r3, [r7, #12]
 8003ed2:	4613      	mov	r3, r2
 8003ed4:	71fb      	strb	r3, [r7, #7]
	u8 t,temp;
	u8 enshow=0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	75bb      	strb	r3, [r7, #22]
	for(t=0;t<len;t++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	75fb      	strb	r3, [r7, #23]
 8003ede:	e07e      	b.n	8003fde <LCD_ShowxNum+0x11e>
	{
		temp=(num/LCD_Pow(10,len-t-1))%10;
 8003ee0:	79fa      	ldrb	r2, [r7, #7]
 8003ee2:	7dfb      	ldrb	r3, [r7, #23]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	4619      	mov	r1, r3
 8003eee:	200a      	movs	r0, #10
 8003ef0:	f7ff ffca 	bl	8003e88 <LCD_Pow>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003efc:	4b3c      	ldr	r3, [pc, #240]	; (8003ff0 <LCD_ShowxNum+0x130>)
 8003efe:	fba3 2301 	umull	r2, r3, r3, r1
 8003f02:	08da      	lsrs	r2, r3, #3
 8003f04:	4613      	mov	r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	1aca      	subs	r2, r1, r3
 8003f0e:	4613      	mov	r3, r2
 8003f10:	757b      	strb	r3, [r7, #21]
		if(enshow==0&&t<(len-1))
 8003f12:	7dbb      	ldrb	r3, [r7, #22]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d143      	bne.n	8003fa0 <LCD_ShowxNum+0xe0>
 8003f18:	7dfa      	ldrb	r2, [r7, #23]
 8003f1a:	79fb      	ldrb	r3, [r7, #7]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	da3e      	bge.n	8003fa0 <LCD_ShowxNum+0xe0>
		{
			if(temp==0)
 8003f22:	7d7b      	ldrb	r3, [r7, #21]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d139      	bne.n	8003f9c <LCD_ShowxNum+0xdc>
			{
				if(mode&0X80)LCD_ShowChar(x+(size/2)*t,y,'0',size,mode&0X01);
 8003f28:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	da1a      	bge.n	8003f66 <LCD_ShowxNum+0xa6>
 8003f30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	b2db      	uxtb	r3, r3
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	7dfa      	ldrb	r2, [r7, #23]
 8003f3c:	b292      	uxth	r2, r2
 8003f3e:	fb02 f303 	mul.w	r3, r2, r3
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	89fb      	ldrh	r3, [r7, #14]
 8003f46:	4413      	add	r3, r2
 8003f48:	b298      	uxth	r0, r3
 8003f4a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003f58:	89b9      	ldrh	r1, [r7, #12]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	2230      	movs	r2, #48	; 0x30
 8003f60:	f7ff fed6 	bl	8003d10 <LCD_ShowChar>
				else LCD_ShowChar(x+(size/2)*t,y,' ',size,mode&0X01);
 				continue;
 8003f64:	e038      	b.n	8003fd8 <LCD_ShowxNum+0x118>
				else LCD_ShowChar(x+(size/2)*t,y,' ',size,mode&0X01);
 8003f66:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	7dfa      	ldrb	r2, [r7, #23]
 8003f72:	b292      	uxth	r2, r2
 8003f74:	fb02 f303 	mul.w	r3, r2, r3
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	89fb      	ldrh	r3, [r7, #14]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	b298      	uxth	r0, r3
 8003f80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003f8e:	89b9      	ldrh	r1, [r7, #12]
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	4613      	mov	r3, r2
 8003f94:	2220      	movs	r2, #32
 8003f96:	f7ff febb 	bl	8003d10 <LCD_ShowChar>
 				continue;
 8003f9a:	e01d      	b.n	8003fd8 <LCD_ShowxNum+0x118>
			}else enshow=1;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	75bb      	strb	r3, [r7, #22]

		}
	 	LCD_ShowChar(x+(size/2)*t,y,temp+'0',size,mode&0X01);
 8003fa0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003fa4:	085b      	lsrs	r3, r3, #1
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	7dfa      	ldrb	r2, [r7, #23]
 8003fac:	b292      	uxth	r2, r2
 8003fae:	fb02 f303 	mul.w	r3, r2, r3
 8003fb2:	b29a      	uxth	r2, r3
 8003fb4:	89fb      	ldrh	r3, [r7, #14]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	b298      	uxth	r0, r3
 8003fba:	7d7b      	ldrb	r3, [r7, #21]
 8003fbc:	3330      	adds	r3, #48	; 0x30
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	f897 4028 	ldrb.w	r4, [r7, #40]	; 0x28
 8003fce:	89b9      	ldrh	r1, [r7, #12]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	4623      	mov	r3, r4
 8003fd4:	f7ff fe9c 	bl	8003d10 <LCD_ShowChar>
	for(t=0;t<len;t++)
 8003fd8:	7dfb      	ldrb	r3, [r7, #23]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	75fb      	strb	r3, [r7, #23]
 8003fde:	7dfa      	ldrb	r2, [r7, #23]
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	f4ff af7c 	bcc.w	8003ee0 <LCD_ShowxNum+0x20>
	}
}
 8003fe8:	bf00      	nop
 8003fea:	371c      	adds	r7, #28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd90      	pop	{r4, r7, pc}
 8003ff0:	cccccccd 	.word	0xcccccccd

08003ff4 <LCD_ShowString>:
//x,y:起点坐标
//width,height:区域大小
//size:字体大小
//*p:字符串起始地址
void LCD_ShowString(u16 x,u16 y,u16 width,u16 height,u8 size,u8 *p)
{
 8003ff4:	b590      	push	{r4, r7, lr}
 8003ff6:	b087      	sub	sp, #28
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	4608      	mov	r0, r1
 8003ffe:	4611      	mov	r1, r2
 8004000:	461a      	mov	r2, r3
 8004002:	4623      	mov	r3, r4
 8004004:	80fb      	strh	r3, [r7, #6]
 8004006:	4603      	mov	r3, r0
 8004008:	80bb      	strh	r3, [r7, #4]
 800400a:	460b      	mov	r3, r1
 800400c:	807b      	strh	r3, [r7, #2]
 800400e:	4613      	mov	r3, r2
 8004010:	803b      	strh	r3, [r7, #0]
	u8 x0=x;
 8004012:	88fb      	ldrh	r3, [r7, #6]
 8004014:	73fb      	strb	r3, [r7, #15]
	width+=x;
 8004016:	887a      	ldrh	r2, [r7, #2]
 8004018:	88fb      	ldrh	r3, [r7, #6]
 800401a:	4413      	add	r3, r2
 800401c:	807b      	strh	r3, [r7, #2]
	height+=y;
 800401e:	883a      	ldrh	r2, [r7, #0]
 8004020:	88bb      	ldrh	r3, [r7, #4]
 8004022:	4413      	add	r3, r2
 8004024:	803b      	strh	r3, [r7, #0]
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8004026:	e025      	b.n	8004074 <LCD_ShowString+0x80>
    {
        if(x>=width){x=x0;y+=size;}
 8004028:	88fa      	ldrh	r2, [r7, #6]
 800402a:	887b      	ldrh	r3, [r7, #2]
 800402c:	429a      	cmp	r2, r3
 800402e:	d307      	bcc.n	8004040 <LCD_ShowString+0x4c>
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	80fb      	strh	r3, [r7, #6]
 8004034:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004038:	b29a      	uxth	r2, r3
 800403a:	88bb      	ldrh	r3, [r7, #4]
 800403c:	4413      	add	r3, r2
 800403e:	80bb      	strh	r3, [r7, #4]
        if(y>=height)break;//退出
 8004040:	88ba      	ldrh	r2, [r7, #4]
 8004042:	883b      	ldrh	r3, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d21e      	bcs.n	8004086 <LCD_ShowString+0x92>
        LCD_ShowChar(x,y,*p,size,0);
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	781a      	ldrb	r2, [r3, #0]
 800404c:	f897 4020 	ldrb.w	r4, [r7, #32]
 8004050:	88b9      	ldrh	r1, [r7, #4]
 8004052:	88f8      	ldrh	r0, [r7, #6]
 8004054:	2300      	movs	r3, #0
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	4623      	mov	r3, r4
 800405a:	f7ff fe59 	bl	8003d10 <LCD_ShowChar>
        x+=size/2;
 800405e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004062:	085b      	lsrs	r3, r3, #1
 8004064:	b2db      	uxtb	r3, r3
 8004066:	b29a      	uxth	r2, r3
 8004068:	88fb      	ldrh	r3, [r7, #6]
 800406a:	4413      	add	r3, r2
 800406c:	80fb      	strh	r3, [r7, #6]
        p++;
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	3301      	adds	r3, #1
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
    while((*p<='~')&&(*p>=' '))//判断是不是非法字符!
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b7e      	cmp	r3, #126	; 0x7e
 800407a:	d805      	bhi.n	8004088 <LCD_ShowString+0x94>
 800407c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b1f      	cmp	r3, #31
 8004082:	d8d1      	bhi.n	8004028 <LCD_ShowString+0x34>
    }
}
 8004084:	e000      	b.n	8004088 <LCD_ShowString+0x94>
        if(y>=height)break;//退出
 8004086:	bf00      	nop
}
 8004088:	bf00      	nop
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	bd90      	pop	{r4, r7, pc}

08004090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004090:	b590      	push	{r4, r7, lr}
 8004092:	b08d      	sub	sp, #52	; 0x34
 8004094:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004096:	f000 ff1f 	bl	8004ed8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800409a:	f000 fab1 	bl	8004600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800409e:	f000 fbc1 	bl	8004824 <MX_GPIO_Init>
  MX_TIM3_Init();
 80040a2:	f000 fb49 	bl	8004738 <MX_TIM3_Init>
  MX_FSMC_Init();
 80040a6:	f000 fc87 	bl	80049b8 <MX_FSMC_Init>
  MX_ADC1_Init();
 80040aa:	f000 fb07 	bl	80046bc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(1);
 80040ae:	2001      	movs	r0, #1
 80040b0:	f000 ff74 	bl	8004f9c <HAL_Delay>


	LCD_Init();
 80040b4:	f7fd fc1c 	bl	80018f0 <LCD_Init>
	POINT_COLOR=RED;
 80040b8:	4bb6      	ldr	r3, [pc, #728]	; (8004394 <main+0x304>)
 80040ba:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80040be:	601a      	str	r2, [r3, #0]



  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80040c0:	2104      	movs	r1, #4
 80040c2:	48b5      	ldr	r0, [pc, #724]	; (8004398 <main+0x308>)
 80040c4:	f002 fc7a 	bl	80069bc <HAL_TIM_PWM_Start>
  uint16_t dutyCycle=500;
 80040c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80040cc:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t pwmmax=900;
 80040ce:	f44f 7361 	mov.w	r3, #900	; 0x384
 80040d2:	83fb      	strh	r3, [r7, #30]
  uint16_t pwmmin=100;
 80040d4:	2364      	movs	r3, #100	; 0x64
 80040d6:	83bb      	strh	r3, [r7, #28]
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,dutyCycle);
 80040d8:	4baf      	ldr	r3, [pc, #700]	; (8004398 <main+0x308>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80040de:	639a      	str	r2, [r3, #56]	; 0x38

  uint16_t prs=72-1;
 80040e0:	2347      	movs	r3, #71	; 0x47
 80040e2:	837b      	strh	r3, [r7, #26]
  uint16_t freq=50;
 80040e4:	2332      	movs	r3, #50	; 0x32
 80040e6:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint16_t freqmax=100;
 80040e8:	2364      	movs	r3, #100	; 0x64
 80040ea:	833b      	strh	r3, [r7, #24]
  uint16_t freqmin=1;
 80040ec:	2301      	movs	r3, #1
 80040ee:	82fb      	strh	r3, [r7, #22]


	  //参数�?????????????
	  u8 key0p[5];
	  u8 key0f[5];
	  u8 fir=0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	 //选项参数
	  u8 p=1;
 80040f6:	2301      	movs	r3, #1
 80040f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  u8 f=0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_SET);
 8004102:	2201      	movs	r2, #1
 8004104:	2120      	movs	r1, #32
 8004106:	48a5      	ldr	r0, [pc, #660]	; (800439c <main+0x30c>)
 8004108:	f001 fdf1 	bl	8005cee <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);
 800410c:	2201      	movs	r2, #1
 800410e:	2120      	movs	r1, #32
 8004110:	48a3      	ldr	r0, [pc, #652]	; (80043a0 <main+0x310>)
 8004112:	f001 fdec 	bl	8005cee <HAL_GPIO_WritePin>
  /* USER CODE END 2 */
	  POINT_COLOR=BLACK;
 8004116:	4b9f      	ldr	r3, [pc, #636]	; (8004394 <main+0x304>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
	  	LCD_ShowString(30,350,50,32,32,"Vol:");
 800411c:	4ba1      	ldr	r3, [pc, #644]	; (80043a4 <main+0x314>)
 800411e:	9301      	str	r3, [sp, #4]
 8004120:	2320      	movs	r3, #32
 8004122:	9300      	str	r3, [sp, #0]
 8004124:	2320      	movs	r3, #32
 8004126:	2232      	movs	r2, #50	; 0x32
 8004128:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800412c:	201e      	movs	r0, #30
 800412e:	f7ff ff61 	bl	8003ff4 <LCD_ShowString>
	  	LCD_ShowString(160,350,200,32,32,"mV");
 8004132:	4b9d      	ldr	r3, [pc, #628]	; (80043a8 <main+0x318>)
 8004134:	9301      	str	r3, [sp, #4]
 8004136:	2320      	movs	r3, #32
 8004138:	9300      	str	r3, [sp, #0]
 800413a:	2320      	movs	r3, #32
 800413c:	22c8      	movs	r2, #200	; 0xc8
 800413e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8004142:	20a0      	movs	r0, #160	; 0xa0
 8004144:	f7ff ff56 	bl	8003ff4 <LCD_ShowString>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* USER CODE END WHILE */
	 	  if (fir==0){
 8004148:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800414c:	2b00      	cmp	r3, #0
 800414e:	f040 8092 	bne.w	8004276 <main+0x1e6>
	 	  	  	itoa(dutyCycle/10, key0p, 10);
 8004152:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004154:	4a95      	ldr	r2, [pc, #596]	; (80043ac <main+0x31c>)
 8004156:	fba2 2303 	umull	r2, r3, r2, r3
 800415a:	08db      	lsrs	r3, r3, #3
 800415c:	b29b      	uxth	r3, r3
 800415e:	4618      	mov	r0, r3
 8004160:	f107 0308 	add.w	r3, r7, #8
 8004164:	220a      	movs	r2, #10
 8004166:	4619      	mov	r1, r3
 8004168:	f003 fa08 	bl	800757c <itoa>
	 	  	  	strcat(key0p,"%");
 800416c:	f107 0308 	add.w	r3, r7, #8
 8004170:	4618      	mov	r0, r3
 8004172:	f7fc f859 	bl	8000228 <strlen>
 8004176:	4603      	mov	r3, r0
 8004178:	461a      	mov	r2, r3
 800417a:	f107 0308 	add.w	r3, r7, #8
 800417e:	4413      	add	r3, r2
 8004180:	498b      	ldr	r1, [pc, #556]	; (80043b0 <main+0x320>)
 8004182:	461a      	mov	r2, r3
 8004184:	460b      	mov	r3, r1
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	8013      	strh	r3, [r2, #0]
	 	  	  	itoa(freq, key0f, 10);
 800418a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800418c:	4639      	mov	r1, r7
 800418e:	220a      	movs	r2, #10
 8004190:	4618      	mov	r0, r3
 8004192:	f003 f9f3 	bl	800757c <itoa>
	 	  	  	strcat(key0f,"KMz ");
 8004196:	463b      	mov	r3, r7
 8004198:	4618      	mov	r0, r3
 800419a:	f7fc f845 	bl	8000228 <strlen>
 800419e:	4603      	mov	r3, r0
 80041a0:	461a      	mov	r2, r3
 80041a2:	463b      	mov	r3, r7
 80041a4:	4413      	add	r3, r2
 80041a6:	4a83      	ldr	r2, [pc, #524]	; (80043b4 <main+0x324>)
 80041a8:	6810      	ldr	r0, [r2, #0]
 80041aa:	6018      	str	r0, [r3, #0]
 80041ac:	7912      	ldrb	r2, [r2, #4]
 80041ae:	711a      	strb	r2, [r3, #4]
	 	  	 	POINT_COLOR=RED;
 80041b0:	4b78      	ldr	r3, [pc, #480]	; (8004394 <main+0x304>)
 80041b2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80041b6:	601a      	str	r2, [r3, #0]
	 	  	 	LCD_ShowString(30,140,200,32,32,"PWM");
 80041b8:	4b7f      	ldr	r3, [pc, #508]	; (80043b8 <main+0x328>)
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	2320      	movs	r3, #32
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	2320      	movs	r3, #32
 80041c2:	22c8      	movs	r2, #200	; 0xc8
 80041c4:	218c      	movs	r1, #140	; 0x8c
 80041c6:	201e      	movs	r0, #30
 80041c8:	f7ff ff14 	bl	8003ff4 <LCD_ShowString>
	 	  	 	POINT_COLOR=BLACK;
 80041cc:	4b71      	ldr	r3, [pc, #452]	; (8004394 <main+0x304>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
	 	  	 	LCD_ShowString(100,140,200,32,32,"FREQ");
 80041d2:	4b7a      	ldr	r3, [pc, #488]	; (80043bc <main+0x32c>)
 80041d4:	9301      	str	r3, [sp, #4]
 80041d6:	2320      	movs	r3, #32
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	2320      	movs	r3, #32
 80041dc:	22c8      	movs	r2, #200	; 0xc8
 80041de:	218c      	movs	r1, #140	; 0x8c
 80041e0:	2064      	movs	r0, #100	; 0x64
 80041e2:	f7ff ff07 	bl	8003ff4 <LCD_ShowString>

	 	  	  	POINT_COLOR=BLACK;
 80041e6:	4b6b      	ldr	r3, [pc, #428]	; (8004394 <main+0x304>)
 80041e8:	2200      	movs	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
	 	  		LCD_ShowString(30,40,210,24,24,"Present By ZXD");
 80041ec:	4b74      	ldr	r3, [pc, #464]	; (80043c0 <main+0x330>)
 80041ee:	9301      	str	r3, [sp, #4]
 80041f0:	2318      	movs	r3, #24
 80041f2:	9300      	str	r3, [sp, #0]
 80041f4:	2318      	movs	r3, #24
 80041f6:	22d2      	movs	r2, #210	; 0xd2
 80041f8:	2128      	movs	r1, #40	; 0x28
 80041fa:	201e      	movs	r0, #30
 80041fc:	f7ff fefa 	bl	8003ff4 <LCD_ShowString>
	 	   		LCD_ShowString(30,100,260,24,24,"Press key_up to switch");
 8004200:	4b70      	ldr	r3, [pc, #448]	; (80043c4 <main+0x334>)
 8004202:	9301      	str	r3, [sp, #4]
 8004204:	2318      	movs	r3, #24
 8004206:	9300      	str	r3, [sp, #0]
 8004208:	2318      	movs	r3, #24
 800420a:	f44f 7282 	mov.w	r2, #260	; 0x104
 800420e:	2164      	movs	r1, #100	; 0x64
 8004210:	201e      	movs	r0, #30
 8004212:	f7ff feef 	bl	8003ff4 <LCD_ShowString>
	 	   		LCD_ShowString(200,270,200,32,32,key0p);
 8004216:	f107 0308 	add.w	r3, r7, #8
 800421a:	9301      	str	r3, [sp, #4]
 800421c:	2320      	movs	r3, #32
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	2320      	movs	r3, #32
 8004222:	22c8      	movs	r2, #200	; 0xc8
 8004224:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004228:	20c8      	movs	r0, #200	; 0xc8
 800422a:	f7ff fee3 	bl	8003ff4 <LCD_ShowString>
	 	   		LCD_ShowString(30,270,200,32,32,"DutyCycle:");
 800422e:	4b66      	ldr	r3, [pc, #408]	; (80043c8 <main+0x338>)
 8004230:	9301      	str	r3, [sp, #4]
 8004232:	2320      	movs	r3, #32
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	2320      	movs	r3, #32
 8004238:	22c8      	movs	r2, #200	; 0xc8
 800423a:	f44f 7187 	mov.w	r1, #270	; 0x10e
 800423e:	201e      	movs	r0, #30
 8004240:	f7ff fed8 	bl	8003ff4 <LCD_ShowString>
	 	   		LCD_ShowString(150,310,200,32,32,key0f);
 8004244:	463b      	mov	r3, r7
 8004246:	9301      	str	r3, [sp, #4]
 8004248:	2320      	movs	r3, #32
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	2320      	movs	r3, #32
 800424e:	22c8      	movs	r2, #200	; 0xc8
 8004250:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004254:	2096      	movs	r0, #150	; 0x96
 8004256:	f7ff fecd 	bl	8003ff4 <LCD_ShowString>
	 	   		LCD_ShowString(30,310,200,32,32,"Freq:");
 800425a:	4b5c      	ldr	r3, [pc, #368]	; (80043cc <main+0x33c>)
 800425c:	9301      	str	r3, [sp, #4]
 800425e:	2320      	movs	r3, #32
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	2320      	movs	r3, #32
 8004264:	22c8      	movs	r2, #200	; 0xc8
 8004266:	f44f 719b 	mov.w	r1, #310	; 0x136
 800426a:	201e      	movs	r0, #30
 800426c:	f7ff fec2 	bl	8003ff4 <LCD_ShowString>
	 	   		fir=1;
 8004270:	2301      	movs	r3, #1
 8004272:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	 	  }

	 	   		//按键扫描
	 	  switch(KEY_Scan(1)){
 8004276:	2001      	movs	r0, #1
 8004278:	f000 fc1c 	bl	8004ab4 <KEY_Scan>
 800427c:	4603      	mov	r3, r0
 800427e:	2b03      	cmp	r3, #3
 8004280:	d85c      	bhi.n	800433c <main+0x2ac>
 8004282:	a201      	add	r2, pc, #4	; (adr r2, 8004288 <main+0x1f8>)
 8004284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004288:	0800433d 	.word	0x0800433d
 800428c:	0800433d 	.word	0x0800433d
 8004290:	0800433d 	.word	0x0800433d
 8004294:	08004299 	.word	0x08004299
	 	  	  break;
	 	  case 2:

	 	  	  break;
	 	  case 3:
	 	  	HAL_Delay(100);
 8004298:	2064      	movs	r0, #100	; 0x64
 800429a:	f000 fe7f 	bl	8004f9c <HAL_Delay>
	 	  	if (f==1){
 800429e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d121      	bne.n	80042ea <main+0x25a>
	 	  		  p=1;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	 	  		  f=0;
 80042ac:	2300      	movs	r3, #0
 80042ae:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	 	  		 	POINT_COLOR=RED;
 80042b2:	4b38      	ldr	r3, [pc, #224]	; (8004394 <main+0x304>)
 80042b4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80042b8:	601a      	str	r2, [r3, #0]
	 	  		 	LCD_ShowString(30,140,200,32,32,"PWM");
 80042ba:	4b3f      	ldr	r3, [pc, #252]	; (80043b8 <main+0x328>)
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	2320      	movs	r3, #32
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	2320      	movs	r3, #32
 80042c4:	22c8      	movs	r2, #200	; 0xc8
 80042c6:	218c      	movs	r1, #140	; 0x8c
 80042c8:	201e      	movs	r0, #30
 80042ca:	f7ff fe93 	bl	8003ff4 <LCD_ShowString>
	 	  		  	POINT_COLOR=BLACK;
 80042ce:	4b31      	ldr	r3, [pc, #196]	; (8004394 <main+0x304>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
	 	  		 	LCD_ShowString(100,140,200,32,32,"FREQ");
 80042d4:	4b39      	ldr	r3, [pc, #228]	; (80043bc <main+0x32c>)
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	2320      	movs	r3, #32
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	2320      	movs	r3, #32
 80042de:	22c8      	movs	r2, #200	; 0xc8
 80042e0:	218c      	movs	r1, #140	; 0x8c
 80042e2:	2064      	movs	r0, #100	; 0x64
 80042e4:	f7ff fe86 	bl	8003ff4 <LCD_ShowString>
	 	  	   		LCD_ShowString(30,140,200,32,32,"PWM");
	 	  	   		POINT_COLOR=RED;
	 	  	   		LCD_ShowString(100,140,200,32,32,"FREQ");
	 	  	   		POINT_COLOR=BLACK;
	 	  	  }
	 	  	  break;
 80042e8:	e027      	b.n	800433a <main+0x2aa>
	 	  	  else if(p==1)
 80042ea:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d123      	bne.n	800433a <main+0x2aa>
	 	  		  p=0;
 80042f2:	2300      	movs	r3, #0
 80042f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	 	  		  f=1;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	 	  	   		POINT_COLOR=BLACK;
 80042fe:	4b25      	ldr	r3, [pc, #148]	; (8004394 <main+0x304>)
 8004300:	2200      	movs	r2, #0
 8004302:	601a      	str	r2, [r3, #0]
	 	  	   		LCD_ShowString(30,140,200,32,32,"PWM");
 8004304:	4b2c      	ldr	r3, [pc, #176]	; (80043b8 <main+0x328>)
 8004306:	9301      	str	r3, [sp, #4]
 8004308:	2320      	movs	r3, #32
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	2320      	movs	r3, #32
 800430e:	22c8      	movs	r2, #200	; 0xc8
 8004310:	218c      	movs	r1, #140	; 0x8c
 8004312:	201e      	movs	r0, #30
 8004314:	f7ff fe6e 	bl	8003ff4 <LCD_ShowString>
	 	  	   		POINT_COLOR=RED;
 8004318:	4b1e      	ldr	r3, [pc, #120]	; (8004394 <main+0x304>)
 800431a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800431e:	601a      	str	r2, [r3, #0]
	 	  	   		LCD_ShowString(100,140,200,32,32,"FREQ");
 8004320:	4b26      	ldr	r3, [pc, #152]	; (80043bc <main+0x32c>)
 8004322:	9301      	str	r3, [sp, #4]
 8004324:	2320      	movs	r3, #32
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	2320      	movs	r3, #32
 800432a:	22c8      	movs	r2, #200	; 0xc8
 800432c:	218c      	movs	r1, #140	; 0x8c
 800432e:	2064      	movs	r0, #100	; 0x64
 8004330:	f7ff fe60 	bl	8003ff4 <LCD_ShowString>
	 	  	   		POINT_COLOR=BLACK;
 8004334:	4b17      	ldr	r3, [pc, #92]	; (8004394 <main+0x304>)
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
	 	  	  break;
 800433a:	bf00      	nop
	 	  else HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_SET);*/



	 	  //控制pwm和freq/vol
	 	  if(p==1&&(KEY_Scan(1)==2||KEY_Scan(1)==1))
 800433c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8004340:	2b01      	cmp	r3, #1
 8004342:	f040 8084 	bne.w	800444e <main+0x3be>
 8004346:	2001      	movs	r0, #1
 8004348:	f000 fbb4 	bl	8004ab4 <KEY_Scan>
 800434c:	4603      	mov	r3, r0
 800434e:	2b02      	cmp	r3, #2
 8004350:	d005      	beq.n	800435e <main+0x2ce>
 8004352:	2001      	movs	r0, #1
 8004354:	f000 fbae 	bl	8004ab4 <KEY_Scan>
 8004358:	4603      	mov	r3, r0
 800435a:	2b01      	cmp	r3, #1
 800435c:	d177      	bne.n	800444e <main+0x3be>
	 	  {

	 	  	if(KEY_Scan(1)==2)
 800435e:	2001      	movs	r0, #1
 8004360:	f000 fba8 	bl	8004ab4 <KEY_Scan>
 8004364:	4603      	mov	r3, r0
 8004366:	2b02      	cmp	r3, #2
 8004368:	d103      	bne.n	8004372 <main+0x2e2>
	 	  	  {
	 	  		dutyCycle+=50;
 800436a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800436c:	3332      	adds	r3, #50	; 0x32
 800436e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004370:	e008      	b.n	8004384 <main+0x2f4>
	 	  	  }
	 	  	else if(KEY_Scan(1)==1)
 8004372:	2001      	movs	r0, #1
 8004374:	f000 fb9e 	bl	8004ab4 <KEY_Scan>
 8004378:	4603      	mov	r3, r0
 800437a:	2b01      	cmp	r3, #1
 800437c:	d102      	bne.n	8004384 <main+0x2f4>
	 	  	{
	 	  		dutyCycle+=100;
 800437e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004380:	3364      	adds	r3, #100	; 0x64
 8004382:	84fb      	strh	r3, [r7, #38]	; 0x26
	 	  	}
	 	  	else{

	 	  	}
	 	  	if(dutyCycle>pwmmax){dutyCycle=100;}
 8004384:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004386:	8bfb      	ldrh	r3, [r7, #30]
 8004388:	429a      	cmp	r2, r3
 800438a:	d921      	bls.n	80043d0 <main+0x340>
 800438c:	2364      	movs	r3, #100	; 0x64
 800438e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004390:	e025      	b.n	80043de <main+0x34e>
 8004392:	bf00      	nop
 8004394:	20000000 	.word	0x20000000
 8004398:	200000d8 	.word	0x200000d8
 800439c:	40010c00 	.word	0x40010c00
 80043a0:	40011800 	.word	0x40011800
 80043a4:	08007624 	.word	0x08007624
 80043a8:	0800762c 	.word	0x0800762c
 80043ac:	cccccccd 	.word	0xcccccccd
 80043b0:	08007630 	.word	0x08007630
 80043b4:	08007634 	.word	0x08007634
 80043b8:	0800763c 	.word	0x0800763c
 80043bc:	08007640 	.word	0x08007640
 80043c0:	08007648 	.word	0x08007648
 80043c4:	08007658 	.word	0x08007658
 80043c8:	08007670 	.word	0x08007670
 80043cc:	0800767c 	.word	0x0800767c
	 	  	else if(dutyCycle<pwmmin){dutyCycle=900;}
 80043d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80043d2:	8bbb      	ldrh	r3, [r7, #28]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d202      	bcs.n	80043de <main+0x34e>
 80043d8:	f44f 7361 	mov.w	r3, #900	; 0x384
 80043dc:	84fb      	strh	r3, [r7, #38]	; 0x26
	 	  	else{}
	 	  	 __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,dutyCycle);
 80043de:	4b7e      	ldr	r3, [pc, #504]	; (80045d8 <main+0x548>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80043e4:	639a      	str	r2, [r3, #56]	; 0x38
	 	  	  	itoa(dutyCycle/10, key0p, 10);
 80043e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043e8:	4a7c      	ldr	r2, [pc, #496]	; (80045dc <main+0x54c>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	08db      	lsrs	r3, r3, #3
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	4618      	mov	r0, r3
 80043f4:	f107 0308 	add.w	r3, r7, #8
 80043f8:	220a      	movs	r2, #10
 80043fa:	4619      	mov	r1, r3
 80043fc:	f003 f8be 	bl	800757c <itoa>
	 	  	  	strcat(key0p,"%");
 8004400:	f107 0308 	add.w	r3, r7, #8
 8004404:	4618      	mov	r0, r3
 8004406:	f7fb ff0f 	bl	8000228 <strlen>
 800440a:	4603      	mov	r3, r0
 800440c:	461a      	mov	r2, r3
 800440e:	f107 0308 	add.w	r3, r7, #8
 8004412:	4413      	add	r3, r2
 8004414:	4972      	ldr	r1, [pc, #456]	; (80045e0 <main+0x550>)
 8004416:	461a      	mov	r2, r3
 8004418:	460b      	mov	r3, r1
 800441a:	881b      	ldrh	r3, [r3, #0]
 800441c:	8013      	strh	r3, [r2, #0]
	 	  	LCD_ShowString(200,270,200,32,32,key0p);
 800441e:	f107 0308 	add.w	r3, r7, #8
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	2320      	movs	r3, #32
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	2320      	movs	r3, #32
 800442a:	22c8      	movs	r2, #200	; 0xc8
 800442c:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004430:	20c8      	movs	r0, #200	; 0xc8
 8004432:	f7ff fddf 	bl	8003ff4 <LCD_ShowString>
	 	  	LCD_ShowString(30,270,200,32,32,"DutyCycle:");
 8004436:	4b6b      	ldr	r3, [pc, #428]	; (80045e4 <main+0x554>)
 8004438:	9301      	str	r3, [sp, #4]
 800443a:	2320      	movs	r3, #32
 800443c:	9300      	str	r3, [sp, #0]
 800443e:	2320      	movs	r3, #32
 8004440:	22c8      	movs	r2, #200	; 0xc8
 8004442:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8004446:	201e      	movs	r0, #30
 8004448:	f7ff fdd4 	bl	8003ff4 <LCD_ShowString>
 800444c:	e0bc      	b.n	80045c8 <main+0x538>


	 	  }

	 	  else if (f==1&&(KEY_Scan(1)==2||KEY_Scan(1)==1))
 800444e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8004452:	2b01      	cmp	r3, #1
 8004454:	d162      	bne.n	800451c <main+0x48c>
 8004456:	2001      	movs	r0, #1
 8004458:	f000 fb2c 	bl	8004ab4 <KEY_Scan>
 800445c:	4603      	mov	r3, r0
 800445e:	2b02      	cmp	r3, #2
 8004460:	d005      	beq.n	800446e <main+0x3de>
 8004462:	2001      	movs	r0, #1
 8004464:	f000 fb26 	bl	8004ab4 <KEY_Scan>
 8004468:	4603      	mov	r3, r0
 800446a:	2b01      	cmp	r3, #1
 800446c:	d156      	bne.n	800451c <main+0x48c>
	 	  {
	 	  	  if(KEY_Scan(1)==1)
 800446e:	2001      	movs	r0, #1
 8004470:	f000 fb20 	bl	8004ab4 <KEY_Scan>
 8004474:	4603      	mov	r3, r0
 8004476:	2b01      	cmp	r3, #1
 8004478:	d103      	bne.n	8004482 <main+0x3f2>
	 	  {
	 	  		  freq=freq+10;
 800447a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800447c:	330a      	adds	r3, #10
 800447e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004480:	e008      	b.n	8004494 <main+0x404>
	 	  }
	 	  	  else if(KEY_Scan(1)==2)
 8004482:	2001      	movs	r0, #1
 8004484:	f000 fb16 	bl	8004ab4 <KEY_Scan>
 8004488:	4603      	mov	r3, r0
 800448a:	2b02      	cmp	r3, #2
 800448c:	d102      	bne.n	8004494 <main+0x404>
	 	  	  {
	 	  		  freq=freq+1;
 800448e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004490:	3301      	adds	r3, #1
 8004492:	84bb      	strh	r3, [r7, #36]	; 0x24
	 	  	  }
	 	  	  else{}
	 	  		if(freq>freqmax){freq=freq-100;}
 8004494:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004496:	8b3b      	ldrh	r3, [r7, #24]
 8004498:	429a      	cmp	r2, r3
 800449a:	d903      	bls.n	80044a4 <main+0x414>
 800449c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800449e:	3b64      	subs	r3, #100	; 0x64
 80044a0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80044a2:	e005      	b.n	80044b0 <main+0x420>
	 	  		else if(freq<freqmin){freq=1;}
 80044a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044a6:	8afb      	ldrh	r3, [r7, #22]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d201      	bcs.n	80044b0 <main+0x420>
 80044ac:	2301      	movs	r3, #1
 80044ae:	84bb      	strh	r3, [r7, #36]	; 0x24
	 	  		else{}
	 	  	  prs=72000000/(1000*freq*1000);
 80044b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044b2:	4a4d      	ldr	r2, [pc, #308]	; (80045e8 <main+0x558>)
 80044b4:	fb02 f303 	mul.w	r3, r2, r3
 80044b8:	4a4c      	ldr	r2, [pc, #304]	; (80045ec <main+0x55c>)
 80044ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80044be:	837b      	strh	r3, [r7, #26]
	 	  	 __HAL_TIM_SET_PRESCALER(&htim3,prs);
 80044c0:	4b45      	ldr	r3, [pc, #276]	; (80045d8 <main+0x548>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	8b7a      	ldrh	r2, [r7, #26]
 80044c6:	629a      	str	r2, [r3, #40]	; 0x28
	 	  	  	itoa(freq, key0f, 10);
 80044c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044ca:	4639      	mov	r1, r7
 80044cc:	220a      	movs	r2, #10
 80044ce:	4618      	mov	r0, r3
 80044d0:	f003 f854 	bl	800757c <itoa>
	 	  	  	strcat(key0f,"KMz  ");
 80044d4:	463b      	mov	r3, r7
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fb fea6 	bl	8000228 <strlen>
 80044dc:	4603      	mov	r3, r0
 80044de:	461a      	mov	r2, r3
 80044e0:	463b      	mov	r3, r7
 80044e2:	4413      	add	r3, r2
 80044e4:	4a42      	ldr	r2, [pc, #264]	; (80045f0 <main+0x560>)
 80044e6:	6810      	ldr	r0, [r2, #0]
 80044e8:	6018      	str	r0, [r3, #0]
 80044ea:	8892      	ldrh	r2, [r2, #4]
 80044ec:	809a      	strh	r2, [r3, #4]
	 	  	LCD_ShowString(150,310,200,32,32,key0f);
 80044ee:	463b      	mov	r3, r7
 80044f0:	9301      	str	r3, [sp, #4]
 80044f2:	2320      	movs	r3, #32
 80044f4:	9300      	str	r3, [sp, #0]
 80044f6:	2320      	movs	r3, #32
 80044f8:	22c8      	movs	r2, #200	; 0xc8
 80044fa:	f44f 719b 	mov.w	r1, #310	; 0x136
 80044fe:	2096      	movs	r0, #150	; 0x96
 8004500:	f7ff fd78 	bl	8003ff4 <LCD_ShowString>
	 	  	LCD_ShowString(30,310,200,32,32,"Freq:");
 8004504:	4b3b      	ldr	r3, [pc, #236]	; (80045f4 <main+0x564>)
 8004506:	9301      	str	r3, [sp, #4]
 8004508:	2320      	movs	r3, #32
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	2320      	movs	r3, #32
 800450e:	22c8      	movs	r2, #200	; 0xc8
 8004510:	f44f 719b 	mov.w	r1, #310	; 0x136
 8004514:	201e      	movs	r0, #30
 8004516:	f7ff fd6d 	bl	8003ff4 <LCD_ShowString>
 800451a:	e055      	b.n	80045c8 <main+0x538>
	 	  }

	 	  else
	 	  {
	 	 	  	HAL_ADC_Start(&hadc1);
 800451c:	4836      	ldr	r0, [pc, #216]	; (80045f8 <main+0x568>)
 800451e:	f000 fe49 	bl	80051b4 <HAL_ADC_Start>
	 	 	  	HAL_ADC_PollForConversion(&hadc1, 10);
 8004522:	210a      	movs	r1, #10
 8004524:	4834      	ldr	r0, [pc, #208]	; (80045f8 <main+0x568>)
 8004526:	f000 fef3 	bl	8005310 <HAL_ADC_PollForConversion>
	 	 	  	adcx = HAL_ADC_GetValue(&hadc1);
 800452a:	4833      	ldr	r0, [pc, #204]	; (80045f8 <main+0x568>)
 800452c:	f000 ffea 	bl	8005504 <HAL_ADC_GetValue>
 8004530:	4603      	mov	r3, r0
 8004532:	82bb      	strh	r3, [r7, #20]
	 	 	  	temp=(float)adcx*(3.3/4096);			//得到ADC电压值
 8004534:	8abb      	ldrh	r3, [r7, #20]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fc fb72 	bl	8000c20 <__aeabi_ui2f>
 800453c:	4603      	mov	r3, r0
 800453e:	4618      	mov	r0, r3
 8004540:	f7fb ffde 	bl	8000500 <__aeabi_f2d>
 8004544:	a322      	add	r3, pc, #136	; (adr r3, 80045d0 <main+0x540>)
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	f7fc f831 	bl	80005b0 <__aeabi_dmul>
 800454e:	4603      	mov	r3, r0
 8004550:	460c      	mov	r4, r1
 8004552:	4618      	mov	r0, r3
 8004554:	4621      	mov	r1, r4
 8004556:	f7fc fa5d 	bl	8000a14 <__aeabi_d2f>
 800455a:	4603      	mov	r3, r0
 800455c:	613b      	str	r3, [r7, #16]
	 	 	  	adcx=temp;
 800455e:	6938      	ldr	r0, [r7, #16]
 8004560:	f7fc fd06 	bl	8000f70 <__aeabi_f2uiz>
 8004564:	4603      	mov	r3, r0
 8004566:	82bb      	strh	r3, [r7, #20]
	 	 	  	LCD_ShowxNum(94,350,temp,1,32,0);     	//显示电压值整数部分
 8004568:	6938      	ldr	r0, [r7, #16]
 800456a:	f7fc fd01 	bl	8000f70 <__aeabi_f2uiz>
 800456e:	4602      	mov	r2, r0
 8004570:	2300      	movs	r3, #0
 8004572:	9301      	str	r3, [sp, #4]
 8004574:	2320      	movs	r3, #32
 8004576:	9300      	str	r3, [sp, #0]
 8004578:	2301      	movs	r3, #1
 800457a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800457e:	205e      	movs	r0, #94	; 0x5e
 8004580:	f7ff fc9e 	bl	8003ec0 <LCD_ShowxNum>
	 	 	  	temp-=adcx;
 8004584:	8abb      	ldrh	r3, [r7, #20]
 8004586:	4618      	mov	r0, r3
 8004588:	f7fc fb4e 	bl	8000c28 <__aeabi_i2f>
 800458c:	4603      	mov	r3, r0
 800458e:	4619      	mov	r1, r3
 8004590:	6938      	ldr	r0, [r7, #16]
 8004592:	f7fc fa93 	bl	8000abc <__aeabi_fsub>
 8004596:	4603      	mov	r3, r0
 8004598:	613b      	str	r3, [r7, #16]
	 	 	  	temp*=1000;
 800459a:	4918      	ldr	r1, [pc, #96]	; (80045fc <main+0x56c>)
 800459c:	6938      	ldr	r0, [r7, #16]
 800459e:	f7fc fb97 	bl	8000cd0 <__aeabi_fmul>
 80045a2:	4603      	mov	r3, r0
 80045a4:	613b      	str	r3, [r7, #16]
	 	 	  	LCD_ShowxNum(110,350,temp,3,32,0x80); 	//显示电压值的小数部分
 80045a6:	6938      	ldr	r0, [r7, #16]
 80045a8:	f7fc fce2 	bl	8000f70 <__aeabi_f2uiz>
 80045ac:	4602      	mov	r2, r0
 80045ae:	2380      	movs	r3, #128	; 0x80
 80045b0:	9301      	str	r3, [sp, #4]
 80045b2:	2320      	movs	r3, #32
 80045b4:	9300      	str	r3, [sp, #0]
 80045b6:	2303      	movs	r3, #3
 80045b8:	f44f 71af 	mov.w	r1, #350	; 0x15e
 80045bc:	206e      	movs	r0, #110	; 0x6e
 80045be:	f7ff fc7f 	bl	8003ec0 <LCD_ShowxNum>
	 	 	  	HAL_Delay(20);
 80045c2:	2014      	movs	r0, #20
 80045c4:	f000 fcea 	bl	8004f9c <HAL_Delay>
	 	  if (fir==0){
 80045c8:	e5be      	b.n	8004148 <main+0xb8>
 80045ca:	bf00      	nop
 80045cc:	f3af 8000 	nop.w
 80045d0:	66666666 	.word	0x66666666
 80045d4:	3f4a6666 	.word	0x3f4a6666
 80045d8:	200000d8 	.word	0x200000d8
 80045dc:	cccccccd 	.word	0xcccccccd
 80045e0:	08007630 	.word	0x08007630
 80045e4:	08007670 	.word	0x08007670
 80045e8:	000f4240 	.word	0x000f4240
 80045ec:	044aa200 	.word	0x044aa200
 80045f0:	08007684 	.word	0x08007684
 80045f4:	0800767c 	.word	0x0800767c
 80045f8:	20000118 	.word	0x20000118
 80045fc:	447a0000 	.word	0x447a0000

08004600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b096      	sub	sp, #88	; 0x58
 8004604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004606:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800460a:	2228      	movs	r2, #40	; 0x28
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f002 ffb6 	bl	8007580 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004614:	f107 031c 	add.w	r3, r7, #28
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	605a      	str	r2, [r3, #4]
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	60da      	str	r2, [r3, #12]
 8004622:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004624:	1d3b      	adds	r3, r7, #4
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	605a      	str	r2, [r3, #4]
 800462c:	609a      	str	r2, [r3, #8]
 800462e:	60da      	str	r2, [r3, #12]
 8004630:	611a      	str	r2, [r3, #16]
 8004632:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004634:	2301      	movs	r3, #1
 8004636:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800463c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800463e:	2300      	movs	r3, #0
 8004640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004642:	2301      	movs	r3, #1
 8004644:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004646:	2302      	movs	r3, #2
 8004648:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800464a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800464e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004650:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8004654:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004656:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800465a:	4618      	mov	r0, r3
 800465c:	f001 fb60 	bl	8005d20 <HAL_RCC_OscConfig>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8004666:	f000 fa8f 	bl	8004b88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800466a:	230f      	movs	r3, #15
 800466c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800466e:	2302      	movs	r3, #2
 8004670:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004672:	2300      	movs	r3, #0
 8004674:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800467a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800467c:	2300      	movs	r3, #0
 800467e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004680:	f107 031c 	add.w	r3, r7, #28
 8004684:	2102      	movs	r1, #2
 8004686:	4618      	mov	r0, r3
 8004688:	f001 fdca 	bl	8006220 <HAL_RCC_ClockConfig>
 800468c:	4603      	mov	r3, r0
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004692:	f000 fa79 	bl	8004b88 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004696:	2302      	movs	r3, #2
 8004698:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800469a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800469e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80046a0:	1d3b      	adds	r3, r7, #4
 80046a2:	4618      	mov	r0, r3
 80046a4:	f001 ff44 	bl	8006530 <HAL_RCCEx_PeriphCLKConfig>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80046ae:	f000 fa6b 	bl	8004b88 <Error_Handler>
  }
}
 80046b2:	bf00      	nop
 80046b4:	3758      	adds	r7, #88	; 0x58
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80046c2:	1d3b      	adds	r3, r7, #4
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	605a      	str	r2, [r3, #4]
 80046ca:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80046cc:	4b18      	ldr	r3, [pc, #96]	; (8004730 <MX_ADC1_Init+0x74>)
 80046ce:	4a19      	ldr	r2, [pc, #100]	; (8004734 <MX_ADC1_Init+0x78>)
 80046d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80046d2:	4b17      	ldr	r3, [pc, #92]	; (8004730 <MX_ADC1_Init+0x74>)
 80046d4:	2200      	movs	r2, #0
 80046d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80046d8:	4b15      	ldr	r3, [pc, #84]	; (8004730 <MX_ADC1_Init+0x74>)
 80046da:	2200      	movs	r2, #0
 80046dc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80046de:	4b14      	ldr	r3, [pc, #80]	; (8004730 <MX_ADC1_Init+0x74>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80046e4:	4b12      	ldr	r3, [pc, #72]	; (8004730 <MX_ADC1_Init+0x74>)
 80046e6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80046ea:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80046ec:	4b10      	ldr	r3, [pc, #64]	; (8004730 <MX_ADC1_Init+0x74>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80046f2:	4b0f      	ldr	r3, [pc, #60]	; (8004730 <MX_ADC1_Init+0x74>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80046f8:	480d      	ldr	r0, [pc, #52]	; (8004730 <MX_ADC1_Init+0x74>)
 80046fa:	f000 fc71 	bl	8004fe0 <HAL_ADC_Init>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d001      	beq.n	8004708 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8004704:	f000 fa40 	bl	8004b88 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004708:	2301      	movs	r3, #1
 800470a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800470c:	2301      	movs	r3, #1
 800470e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004714:	1d3b      	adds	r3, r7, #4
 8004716:	4619      	mov	r1, r3
 8004718:	4805      	ldr	r0, [pc, #20]	; (8004730 <MX_ADC1_Init+0x74>)
 800471a:	f000 feff 	bl	800551c <HAL_ADC_ConfigChannel>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8004724:	f000 fa30 	bl	8004b88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	20000118 	.word	0x20000118
 8004734:	40012400 	.word	0x40012400

08004738 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08e      	sub	sp, #56	; 0x38
 800473c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800473e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004742:	2200      	movs	r2, #0
 8004744:	601a      	str	r2, [r3, #0]
 8004746:	605a      	str	r2, [r3, #4]
 8004748:	609a      	str	r2, [r3, #8]
 800474a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800474c:	f107 0320 	add.w	r3, r7, #32
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004756:	1d3b      	adds	r3, r7, #4
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
 800475c:	605a      	str	r2, [r3, #4]
 800475e:	609a      	str	r2, [r3, #8]
 8004760:	60da      	str	r2, [r3, #12]
 8004762:	611a      	str	r2, [r3, #16]
 8004764:	615a      	str	r2, [r3, #20]
 8004766:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004768:	4b2c      	ldr	r3, [pc, #176]	; (800481c <MX_TIM3_Init+0xe4>)
 800476a:	4a2d      	ldr	r2, [pc, #180]	; (8004820 <MX_TIM3_Init+0xe8>)
 800476c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 800476e:	4b2b      	ldr	r3, [pc, #172]	; (800481c <MX_TIM3_Init+0xe4>)
 8004770:	2247      	movs	r2, #71	; 0x47
 8004772:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004774:	4b29      	ldr	r3, [pc, #164]	; (800481c <MX_TIM3_Init+0xe4>)
 8004776:	2200      	movs	r2, #0
 8004778:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800477a:	4b28      	ldr	r3, [pc, #160]	; (800481c <MX_TIM3_Init+0xe4>)
 800477c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004780:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004782:	4b26      	ldr	r3, [pc, #152]	; (800481c <MX_TIM3_Init+0xe4>)
 8004784:	2200      	movs	r2, #0
 8004786:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004788:	4b24      	ldr	r3, [pc, #144]	; (800481c <MX_TIM3_Init+0xe4>)
 800478a:	2200      	movs	r2, #0
 800478c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800478e:	4823      	ldr	r0, [pc, #140]	; (800481c <MX_TIM3_Init+0xe4>)
 8004790:	f002 f8b4 	bl	80068fc <HAL_TIM_Base_Init>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800479a:	f000 f9f5 	bl	8004b88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800479e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80047a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047a8:	4619      	mov	r1, r3
 80047aa:	481c      	ldr	r0, [pc, #112]	; (800481c <MX_TIM3_Init+0xe4>)
 80047ac:	f002 fa0a 	bl	8006bc4 <HAL_TIM_ConfigClockSource>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80047b6:	f000 f9e7 	bl	8004b88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80047ba:	4818      	ldr	r0, [pc, #96]	; (800481c <MX_TIM3_Init+0xe4>)
 80047bc:	f002 f8c9 	bl	8006952 <HAL_TIM_PWM_Init>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80047c6:	f000 f9df 	bl	8004b88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047ca:	2300      	movs	r3, #0
 80047cc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047ce:	2300      	movs	r3, #0
 80047d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80047d2:	f107 0320 	add.w	r3, r7, #32
 80047d6:	4619      	mov	r1, r3
 80047d8:	4810      	ldr	r0, [pc, #64]	; (800481c <MX_TIM3_Init+0xe4>)
 80047da:	f002 fd8b 	bl	80072f4 <HAL_TIMEx_MasterConfigSynchronization>
 80047de:	4603      	mov	r3, r0
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d001      	beq.n	80047e8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80047e4:	f000 f9d0 	bl	8004b88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047e8:	2360      	movs	r3, #96	; 0x60
 80047ea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047f0:	2300      	movs	r3, #0
 80047f2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80047f8:	1d3b      	adds	r3, r7, #4
 80047fa:	2204      	movs	r2, #4
 80047fc:	4619      	mov	r1, r3
 80047fe:	4807      	ldr	r0, [pc, #28]	; (800481c <MX_TIM3_Init+0xe4>)
 8004800:	f002 f91a 	bl	8006a38 <HAL_TIM_PWM_ConfigChannel>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800480a:	f000 f9bd 	bl	8004b88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800480e:	4803      	ldr	r0, [pc, #12]	; (800481c <MX_TIM3_Init+0xe4>)
 8004810:	f000 fa4e 	bl	8004cb0 <HAL_TIM_MspPostInit>

}
 8004814:	bf00      	nop
 8004816:	3738      	adds	r7, #56	; 0x38
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}
 800481c:	200000d8 	.word	0x200000d8
 8004820:	40000400 	.word	0x40000400

08004824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b08a      	sub	sp, #40	; 0x28
 8004828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800482a:	f107 0318 	add.w	r3, r7, #24
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
 8004832:	605a      	str	r2, [r3, #4]
 8004834:	609a      	str	r2, [r3, #8]
 8004836:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004838:	4b5a      	ldr	r3, [pc, #360]	; (80049a4 <MX_GPIO_Init+0x180>)
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	4a59      	ldr	r2, [pc, #356]	; (80049a4 <MX_GPIO_Init+0x180>)
 800483e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004842:	6193      	str	r3, [r2, #24]
 8004844:	4b57      	ldr	r3, [pc, #348]	; (80049a4 <MX_GPIO_Init+0x180>)
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004850:	4b54      	ldr	r3, [pc, #336]	; (80049a4 <MX_GPIO_Init+0x180>)
 8004852:	699b      	ldr	r3, [r3, #24]
 8004854:	4a53      	ldr	r2, [pc, #332]	; (80049a4 <MX_GPIO_Init+0x180>)
 8004856:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800485a:	6193      	str	r3, [r2, #24]
 800485c:	4b51      	ldr	r3, [pc, #324]	; (80049a4 <MX_GPIO_Init+0x180>)
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004868:	4b4e      	ldr	r3, [pc, #312]	; (80049a4 <MX_GPIO_Init+0x180>)
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	4a4d      	ldr	r2, [pc, #308]	; (80049a4 <MX_GPIO_Init+0x180>)
 800486e:	f043 0304 	orr.w	r3, r3, #4
 8004872:	6193      	str	r3, [r2, #24]
 8004874:	4b4b      	ldr	r3, [pc, #300]	; (80049a4 <MX_GPIO_Init+0x180>)
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004880:	4b48      	ldr	r3, [pc, #288]	; (80049a4 <MX_GPIO_Init+0x180>)
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	4a47      	ldr	r2, [pc, #284]	; (80049a4 <MX_GPIO_Init+0x180>)
 8004886:	f043 0308 	orr.w	r3, r3, #8
 800488a:	6193      	str	r3, [r2, #24]
 800488c:	4b45      	ldr	r3, [pc, #276]	; (80049a4 <MX_GPIO_Init+0x180>)
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	60bb      	str	r3, [r7, #8]
 8004896:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004898:	4b42      	ldr	r3, [pc, #264]	; (80049a4 <MX_GPIO_Init+0x180>)
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	4a41      	ldr	r2, [pc, #260]	; (80049a4 <MX_GPIO_Init+0x180>)
 800489e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a2:	6193      	str	r3, [r2, #24]
 80048a4:	4b3f      	ldr	r3, [pc, #252]	; (80049a4 <MX_GPIO_Init+0x180>)
 80048a6:	699b      	ldr	r3, [r3, #24]
 80048a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ac:	607b      	str	r3, [r7, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80048b0:	4b3c      	ldr	r3, [pc, #240]	; (80049a4 <MX_GPIO_Init+0x180>)
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	4a3b      	ldr	r2, [pc, #236]	; (80049a4 <MX_GPIO_Init+0x180>)
 80048b6:	f043 0320 	orr.w	r3, r3, #32
 80048ba:	6193      	str	r3, [r2, #24]
 80048bc:	4b39      	ldr	r3, [pc, #228]	; (80049a4 <MX_GPIO_Init+0x180>)
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	f003 0320 	and.w	r3, r3, #32
 80048c4:	603b      	str	r3, [r7, #0]
 80048c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, GPIO_PIN_RESET);
 80048c8:	2200      	movs	r2, #0
 80048ca:	2120      	movs	r1, #32
 80048cc:	4836      	ldr	r0, [pc, #216]	; (80049a8 <MX_GPIO_Init+0x184>)
 80048ce:	f001 fa0e 	bl	8005cee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 80048d2:	2201      	movs	r2, #1
 80048d4:	2101      	movs	r1, #1
 80048d6:	4835      	ldr	r0, [pc, #212]	; (80049ac <MX_GPIO_Init+0x188>)
 80048d8:	f001 fa09 	bl	8005cee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, GPIO_PIN_RESET);
 80048dc:	2200      	movs	r2, #0
 80048de:	2120      	movs	r1, #32
 80048e0:	4832      	ldr	r0, [pc, #200]	; (80049ac <MX_GPIO_Init+0x188>)
 80048e2:	f001 fa04 	bl	8005cee <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80048e6:	2318      	movs	r3, #24
 80048e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80048ea:	2300      	movs	r3, #0
 80048ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80048ee:	2301      	movs	r3, #1
 80048f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048f2:	f107 0318 	add.w	r3, r7, #24
 80048f6:	4619      	mov	r1, r3
 80048f8:	482b      	ldr	r0, [pc, #172]	; (80049a8 <MX_GPIO_Init+0x184>)
 80048fa:	f001 f877 	bl	80059ec <HAL_GPIO_Init>

  /*Configure GPIO pin : led2_Pin */
  GPIO_InitStruct.Pin = led2_Pin;
 80048fe:	2320      	movs	r3, #32
 8004900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004902:	2301      	movs	r3, #1
 8004904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004906:	2302      	movs	r3, #2
 8004908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800490a:	2303      	movs	r3, #3
 800490c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(led2_GPIO_Port, &GPIO_InitStruct);
 800490e:	f107 0318 	add.w	r3, r7, #24
 8004912:	4619      	mov	r1, r3
 8004914:	4824      	ldr	r0, [pc, #144]	; (80049a8 <MX_GPIO_Init+0x184>)
 8004916:	f001 f869 	bl	80059ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PF9 PF10 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 800491a:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 800491e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004920:	2300      	movs	r3, #0
 8004922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004924:	2300      	movs	r3, #0
 8004926:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004928:	f107 0318 	add.w	r3, r7, #24
 800492c:	4619      	mov	r1, r3
 800492e:	4820      	ldr	r0, [pc, #128]	; (80049b0 <MX_GPIO_Init+0x18c>)
 8004930:	f001 f85c 	bl	80059ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004934:	2301      	movs	r3, #1
 8004936:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004938:	2300      	movs	r3, #0
 800493a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800493c:	2302      	movs	r3, #2
 800493e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004940:	f107 0318 	add.w	r3, r7, #24
 8004944:	4619      	mov	r1, r3
 8004946:	481b      	ldr	r0, [pc, #108]	; (80049b4 <MX_GPIO_Init+0x190>)
 8004948:	f001 f850 	bl	80059ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800494c:	2301      	movs	r3, #1
 800494e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004950:	2301      	movs	r3, #1
 8004952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004954:	2301      	movs	r3, #1
 8004956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004958:	2303      	movs	r3, #3
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800495c:	f107 0318 	add.w	r3, r7, #24
 8004960:	4619      	mov	r1, r3
 8004962:	4812      	ldr	r0, [pc, #72]	; (80049ac <MX_GPIO_Init+0x188>)
 8004964:	f001 f842 	bl	80059ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8004968:	2306      	movs	r3, #6
 800496a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800496c:	2300      	movs	r3, #0
 800496e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004970:	2300      	movs	r3, #0
 8004972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004974:	f107 0318 	add.w	r3, r7, #24
 8004978:	4619      	mov	r1, r3
 800497a:	480c      	ldr	r0, [pc, #48]	; (80049ac <MX_GPIO_Init+0x188>)
 800497c:	f001 f836 	bl	80059ec <HAL_GPIO_Init>

  /*Configure GPIO pin : led1_Pin */
  GPIO_InitStruct.Pin = led1_Pin;
 8004980:	2320      	movs	r3, #32
 8004982:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004984:	2301      	movs	r3, #1
 8004986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004988:	2302      	movs	r3, #2
 800498a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800498c:	2303      	movs	r3, #3
 800498e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(led1_GPIO_Port, &GPIO_InitStruct);
 8004990:	f107 0318 	add.w	r3, r7, #24
 8004994:	4619      	mov	r1, r3
 8004996:	4805      	ldr	r0, [pc, #20]	; (80049ac <MX_GPIO_Init+0x188>)
 8004998:	f001 f828 	bl	80059ec <HAL_GPIO_Init>

}
 800499c:	bf00      	nop
 800499e:	3728      	adds	r7, #40	; 0x28
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40021000 	.word	0x40021000
 80049a8:	40011800 	.word	0x40011800
 80049ac:	40010c00 	.word	0x40010c00
 80049b0:	40011c00 	.word	0x40011c00
 80049b4:	40010800 	.word	0x40010800

080049b8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b08e      	sub	sp, #56	; 0x38
 80049bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80049be:	f107 031c 	add.w	r3, r7, #28
 80049c2:	2200      	movs	r2, #0
 80049c4:	601a      	str	r2, [r3, #0]
 80049c6:	605a      	str	r2, [r3, #4]
 80049c8:	609a      	str	r2, [r3, #8]
 80049ca:	60da      	str	r2, [r3, #12]
 80049cc:	611a      	str	r2, [r3, #16]
 80049ce:	615a      	str	r2, [r3, #20]
 80049d0:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80049d2:	463b      	mov	r3, r7
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
 80049d8:	605a      	str	r2, [r3, #4]
 80049da:	609a      	str	r2, [r3, #8]
 80049dc:	60da      	str	r2, [r3, #12]
 80049de:	611a      	str	r2, [r3, #16]
 80049e0:	615a      	str	r2, [r3, #20]
 80049e2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80049e4:	4b30      	ldr	r3, [pc, #192]	; (8004aa8 <MX_FSMC_Init+0xf0>)
 80049e6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80049ea:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80049ec:	4b2e      	ldr	r3, [pc, #184]	; (8004aa8 <MX_FSMC_Init+0xf0>)
 80049ee:	4a2f      	ldr	r2, [pc, #188]	; (8004aac <MX_FSMC_Init+0xf4>)
 80049f0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK4;
 80049f2:	4b2d      	ldr	r3, [pc, #180]	; (8004aa8 <MX_FSMC_Init+0xf0>)
 80049f4:	2206      	movs	r2, #6
 80049f6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80049f8:	4b2b      	ldr	r3, [pc, #172]	; (8004aa8 <MX_FSMC_Init+0xf0>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80049fe:	4b2a      	ldr	r3, [pc, #168]	; (8004aa8 <MX_FSMC_Init+0xf0>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8004a04:	4b28      	ldr	r3, [pc, #160]	; (8004aa8 <MX_FSMC_Init+0xf0>)
 8004a06:	2210      	movs	r2, #16
 8004a08:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8004a0a:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <MX_FSMC_Init+0xf0>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8004a10:	4b25      	ldr	r3, [pc, #148]	; (8004aa8 <MX_FSMC_Init+0xf0>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8004a16:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <MX_FSMC_Init+0xf0>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8004a1c:	4b22      	ldr	r3, [pc, #136]	; (8004aa8 <MX_FSMC_Init+0xf0>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8004a22:	4b21      	ldr	r3, [pc, #132]	; (8004aa8 <MX_FSMC_Init+0xf0>)
 8004a24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a28:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8004a2a:	4b1f      	ldr	r3, [pc, #124]	; (8004aa8 <MX_FSMC_Init+0xf0>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 8004a30:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <MX_FSMC_Init+0xf0>)
 8004a32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004a36:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8004a38:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <MX_FSMC_Init+0xf0>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8004a3e:	4b1a      	ldr	r3, [pc, #104]	; (8004aa8 <MX_FSMC_Init+0xf0>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 6;
 8004a44:	2306      	movs	r3, #6
 8004a46:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8004a48:	230f      	movs	r3, #15
 8004a4a:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 26;
 8004a4c:	231a      	movs	r3, #26
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 8004a50:	2300      	movs	r3, #0
 8004a52:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8004a54:	2310      	movs	r3, #16
 8004a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8004a58:	2311      	movs	r3, #17
 8004a5a:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 3;
 8004a60:	2303      	movs	r3, #3
 8004a62:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8004a64:	230f      	movs	r3, #15
 8004a66:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 6;
 8004a68:	2306      	movs	r3, #6
 8004a6a:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8004a70:	2310      	movs	r3, #16
 8004a72:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8004a74:	2311      	movs	r3, #17
 8004a76:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8004a7c:	463a      	mov	r2, r7
 8004a7e:	f107 031c 	add.w	r3, r7, #28
 8004a82:	4619      	mov	r1, r3
 8004a84:	4808      	ldr	r0, [pc, #32]	; (8004aa8 <MX_FSMC_Init+0xf0>)
 8004a86:	f001 fef1 	bl	800686c <HAL_SRAM_Init>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <MX_FSMC_Init+0xdc>
  {
    Error_Handler( );
 8004a90:	f000 f87a 	bl	8004b88 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8004a94:	4b06      	ldr	r3, [pc, #24]	; (8004ab0 <MX_FSMC_Init+0xf8>)
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	4a05      	ldr	r2, [pc, #20]	; (8004ab0 <MX_FSMC_Init+0xf8>)
 8004a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a9e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8004aa0:	bf00      	nop
 8004aa2:	3738      	adds	r7, #56	; 0x38
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	20000090 	.word	0x20000090
 8004aac:	a0000104 	.word	0xa0000104
 8004ab0:	40010000 	.word	0x40010000

08004ab4 <KEY_Scan>:

/* USER CODE BEGIN 4 */

u8 KEY_Scan(uint8_t mode)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	4603      	mov	r3, r0
 8004abc:	71fb      	strb	r3, [r7, #7]
    static u8 key_up=1;     //按键松开标志
    if(mode==1)key_up=1;    //支持连按
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	d102      	bne.n	8004aca <KEY_Scan+0x16>
 8004ac4:	4b2d      	ldr	r3, [pc, #180]	; (8004b7c <KEY_Scan+0xc8>)
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	701a      	strb	r2, [r3, #0]
    if(key_up&&(KEY0==0||KEY1==0||WK_UP==1))
 8004aca:	4b2c      	ldr	r3, [pc, #176]	; (8004b7c <KEY_Scan+0xc8>)
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d035      	beq.n	8004b3e <KEY_Scan+0x8a>
 8004ad2:	2110      	movs	r1, #16
 8004ad4:	482a      	ldr	r0, [pc, #168]	; (8004b80 <KEY_Scan+0xcc>)
 8004ad6:	f001 f8f3 	bl	8005cc0 <HAL_GPIO_ReadPin>
 8004ada:	4603      	mov	r3, r0
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00d      	beq.n	8004afc <KEY_Scan+0x48>
 8004ae0:	2108      	movs	r1, #8
 8004ae2:	4827      	ldr	r0, [pc, #156]	; (8004b80 <KEY_Scan+0xcc>)
 8004ae4:	f001 f8ec 	bl	8005cc0 <HAL_GPIO_ReadPin>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d006      	beq.n	8004afc <KEY_Scan+0x48>
 8004aee:	2101      	movs	r1, #1
 8004af0:	4824      	ldr	r0, [pc, #144]	; (8004b84 <KEY_Scan+0xd0>)
 8004af2:	f001 f8e5 	bl	8005cc0 <HAL_GPIO_ReadPin>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d120      	bne.n	8004b3e <KEY_Scan+0x8a>
    {
        HAL_Delay(10);
 8004afc:	200a      	movs	r0, #10
 8004afe:	f000 fa4d 	bl	8004f9c <HAL_Delay>
        key_up=0;
 8004b02:	4b1e      	ldr	r3, [pc, #120]	; (8004b7c <KEY_Scan+0xc8>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	701a      	strb	r2, [r3, #0]
        if(KEY0==0)       return KEY0_PRES;
 8004b08:	2110      	movs	r1, #16
 8004b0a:	481d      	ldr	r0, [pc, #116]	; (8004b80 <KEY_Scan+0xcc>)
 8004b0c:	f001 f8d8 	bl	8005cc0 <HAL_GPIO_ReadPin>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <KEY_Scan+0x66>
 8004b16:	2301      	movs	r3, #1
 8004b18:	e02c      	b.n	8004b74 <KEY_Scan+0xc0>
        else if(KEY1==0)  return KEY1_PRES;
 8004b1a:	2108      	movs	r1, #8
 8004b1c:	4818      	ldr	r0, [pc, #96]	; (8004b80 <KEY_Scan+0xcc>)
 8004b1e:	f001 f8cf 	bl	8005cc0 <HAL_GPIO_ReadPin>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <KEY_Scan+0x78>
 8004b28:	2302      	movs	r3, #2
 8004b2a:	e023      	b.n	8004b74 <KEY_Scan+0xc0>
        else if(WK_UP==1) return WKUP_PRES;
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	4815      	ldr	r0, [pc, #84]	; (8004b84 <KEY_Scan+0xd0>)
 8004b30:	f001 f8c6 	bl	8005cc0 <HAL_GPIO_ReadPin>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d11a      	bne.n	8004b70 <KEY_Scan+0xbc>
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e01a      	b.n	8004b74 <KEY_Scan+0xc0>
    }else if(KEY0==1&&KEY1==1&&WK_UP==0)key_up=1;
 8004b3e:	2110      	movs	r1, #16
 8004b40:	480f      	ldr	r0, [pc, #60]	; (8004b80 <KEY_Scan+0xcc>)
 8004b42:	f001 f8bd 	bl	8005cc0 <HAL_GPIO_ReadPin>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d112      	bne.n	8004b72 <KEY_Scan+0xbe>
 8004b4c:	2108      	movs	r1, #8
 8004b4e:	480c      	ldr	r0, [pc, #48]	; (8004b80 <KEY_Scan+0xcc>)
 8004b50:	f001 f8b6 	bl	8005cc0 <HAL_GPIO_ReadPin>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d10b      	bne.n	8004b72 <KEY_Scan+0xbe>
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	4809      	ldr	r0, [pc, #36]	; (8004b84 <KEY_Scan+0xd0>)
 8004b5e:	f001 f8af 	bl	8005cc0 <HAL_GPIO_ReadPin>
 8004b62:	4603      	mov	r3, r0
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d104      	bne.n	8004b72 <KEY_Scan+0xbe>
 8004b68:	4b04      	ldr	r3, [pc, #16]	; (8004b7c <KEY_Scan+0xc8>)
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	701a      	strb	r2, [r3, #0]
 8004b6e:	e000      	b.n	8004b72 <KEY_Scan+0xbe>
        if(KEY0==0)       return KEY0_PRES;
 8004b70:	bf00      	nop
    return 0;   //无按键按�???????
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	20000008 	.word	0x20000008
 8004b80:	40011800 	.word	0x40011800
 8004b84:	40010800 	.word	0x40010800

08004b88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004b8c:	bf00      	nop
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bc80      	pop	{r7}
 8004b92:	4770      	bx	lr

08004b94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004b9a:	4b16      	ldr	r3, [pc, #88]	; (8004bf4 <HAL_MspInit+0x60>)
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	4a15      	ldr	r2, [pc, #84]	; (8004bf4 <HAL_MspInit+0x60>)
 8004ba0:	f043 0301 	orr.w	r3, r3, #1
 8004ba4:	6193      	str	r3, [r2, #24]
 8004ba6:	4b13      	ldr	r3, [pc, #76]	; (8004bf4 <HAL_MspInit+0x60>)
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	60bb      	str	r3, [r7, #8]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004bb2:	4b10      	ldr	r3, [pc, #64]	; (8004bf4 <HAL_MspInit+0x60>)
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	4a0f      	ldr	r2, [pc, #60]	; (8004bf4 <HAL_MspInit+0x60>)
 8004bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	61d3      	str	r3, [r2, #28]
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	; (8004bf4 <HAL_MspInit+0x60>)
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc6:	607b      	str	r3, [r7, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004bca:	2004      	movs	r0, #4
 8004bcc:	f000 feda 	bl	8005984 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004bd0:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <HAL_MspInit+0x64>)
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8004bdc:	60fb      	str	r3, [r7, #12]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <HAL_MspInit+0x64>)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40021000 	.word	0x40021000
 8004bf8:	40010000 	.word	0x40010000

08004bfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c04:	f107 0310 	add.w	r3, r7, #16
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
 8004c0c:	605a      	str	r2, [r3, #4]
 8004c0e:	609a      	str	r2, [r3, #8]
 8004c10:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a14      	ldr	r2, [pc, #80]	; (8004c68 <HAL_ADC_MspInit+0x6c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d121      	bne.n	8004c60 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004c1c:	4b13      	ldr	r3, [pc, #76]	; (8004c6c <HAL_ADC_MspInit+0x70>)
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	4a12      	ldr	r2, [pc, #72]	; (8004c6c <HAL_ADC_MspInit+0x70>)
 8004c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c26:	6193      	str	r3, [r2, #24]
 8004c28:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <HAL_ADC_MspInit+0x70>)
 8004c2a:	699b      	ldr	r3, [r3, #24]
 8004c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c34:	4b0d      	ldr	r3, [pc, #52]	; (8004c6c <HAL_ADC_MspInit+0x70>)
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	4a0c      	ldr	r2, [pc, #48]	; (8004c6c <HAL_ADC_MspInit+0x70>)
 8004c3a:	f043 0304 	orr.w	r3, r3, #4
 8004c3e:	6193      	str	r3, [r2, #24]
 8004c40:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <HAL_ADC_MspInit+0x70>)
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	60bb      	str	r3, [r7, #8]
 8004c4a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c50:	2303      	movs	r3, #3
 8004c52:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c54:	f107 0310 	add.w	r3, r7, #16
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4805      	ldr	r0, [pc, #20]	; (8004c70 <HAL_ADC_MspInit+0x74>)
 8004c5c:	f000 fec6 	bl	80059ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004c60:	bf00      	nop
 8004c62:	3720      	adds	r7, #32
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	40012400 	.word	0x40012400
 8004c6c:	40021000 	.word	0x40021000
 8004c70:	40010800 	.word	0x40010800

08004c74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a09      	ldr	r2, [pc, #36]	; (8004ca8 <HAL_TIM_Base_MspInit+0x34>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d10b      	bne.n	8004c9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004c86:	4b09      	ldr	r3, [pc, #36]	; (8004cac <HAL_TIM_Base_MspInit+0x38>)
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	4a08      	ldr	r2, [pc, #32]	; (8004cac <HAL_TIM_Base_MspInit+0x38>)
 8004c8c:	f043 0302 	orr.w	r3, r3, #2
 8004c90:	61d3      	str	r3, [r2, #28]
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <HAL_TIM_Base_MspInit+0x38>)
 8004c94:	69db      	ldr	r3, [r3, #28]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004c9e:	bf00      	nop
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bc80      	pop	{r7}
 8004ca6:	4770      	bx	lr
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	40021000 	.word	0x40021000

08004cb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b088      	sub	sp, #32
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cb8:	f107 0310 	add.w	r3, r7, #16
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	601a      	str	r2, [r3, #0]
 8004cc0:	605a      	str	r2, [r3, #4]
 8004cc2:	609a      	str	r2, [r3, #8]
 8004cc4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a0f      	ldr	r2, [pc, #60]	; (8004d08 <HAL_TIM_MspPostInit+0x58>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d117      	bne.n	8004d00 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cd0:	4b0e      	ldr	r3, [pc, #56]	; (8004d0c <HAL_TIM_MspPostInit+0x5c>)
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	4a0d      	ldr	r2, [pc, #52]	; (8004d0c <HAL_TIM_MspPostInit+0x5c>)
 8004cd6:	f043 0304 	orr.w	r3, r3, #4
 8004cda:	6193      	str	r3, [r2, #24]
 8004cdc:	4b0b      	ldr	r3, [pc, #44]	; (8004d0c <HAL_TIM_MspPostInit+0x5c>)
 8004cde:	699b      	ldr	r3, [r3, #24]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	60fb      	str	r3, [r7, #12]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004ce8:	2380      	movs	r3, #128	; 0x80
 8004cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cec:	2302      	movs	r3, #2
 8004cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf4:	f107 0310 	add.w	r3, r7, #16
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	4805      	ldr	r0, [pc, #20]	; (8004d10 <HAL_TIM_MspPostInit+0x60>)
 8004cfc:	f000 fe76 	bl	80059ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004d00:	bf00      	nop
 8004d02:	3720      	adds	r7, #32
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40000400 	.word	0x40000400
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	40010800 	.word	0x40010800

08004d14 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004d1a:	f107 0308 	add.w	r3, r7, #8
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
 8004d22:	605a      	str	r2, [r3, #4]
 8004d24:	609a      	str	r2, [r3, #8]
 8004d26:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8004d28:	4b1f      	ldr	r3, [pc, #124]	; (8004da8 <HAL_FSMC_MspInit+0x94>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d136      	bne.n	8004d9e <HAL_FSMC_MspInit+0x8a>
    return;
  }
  FSMC_Initialized = 1;
 8004d30:	4b1d      	ldr	r3, [pc, #116]	; (8004da8 <HAL_FSMC_MspInit+0x94>)
 8004d32:	2201      	movs	r2, #1
 8004d34:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8004d36:	4b1d      	ldr	r3, [pc, #116]	; (8004dac <HAL_FSMC_MspInit+0x98>)
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <HAL_FSMC_MspInit+0x98>)
 8004d3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d40:	6153      	str	r3, [r2, #20]
 8004d42:	4b1a      	ldr	r3, [pc, #104]	; (8004dac <HAL_FSMC_MspInit+0x98>)
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4a:	607b      	str	r3, [r7, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PG12   ------> FSMC_NE4
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_12;
 8004d4e:	f241 0301 	movw	r3, #4097	; 0x1001
 8004d52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d54:	2302      	movs	r3, #2
 8004d56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004d5c:	f107 0308 	add.w	r3, r7, #8
 8004d60:	4619      	mov	r1, r3
 8004d62:	4813      	ldr	r0, [pc, #76]	; (8004db0 <HAL_FSMC_MspInit+0x9c>)
 8004d64:	f000 fe42 	bl	80059ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8004d68:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004d6c:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d6e:	2302      	movs	r3, #2
 8004d70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d72:	2303      	movs	r3, #3
 8004d74:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004d76:	f107 0308 	add.w	r3, r7, #8
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	480d      	ldr	r0, [pc, #52]	; (8004db4 <HAL_FSMC_MspInit+0xa0>)
 8004d7e:	f000 fe35 	bl	80059ec <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8004d82:	f24c 7333 	movw	r3, #50995	; 0xc733
 8004d86:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d90:	f107 0308 	add.w	r3, r7, #8
 8004d94:	4619      	mov	r1, r3
 8004d96:	4808      	ldr	r0, [pc, #32]	; (8004db8 <HAL_FSMC_MspInit+0xa4>)
 8004d98:	f000 fe28 	bl	80059ec <HAL_GPIO_Init>
 8004d9c:	e000      	b.n	8004da0 <HAL_FSMC_MspInit+0x8c>
    return;
 8004d9e:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8004da0:	3718      	adds	r7, #24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000034 	.word	0x20000034
 8004dac:	40021000 	.word	0x40021000
 8004db0:	40012000 	.word	0x40012000
 8004db4:	40011800 	.word	0x40011800
 8004db8:	40011400 	.word	0x40011400

08004dbc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8004dc4:	f7ff ffa6 	bl	8004d14 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004dd4:	bf00      	nop
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bc80      	pop	{r7}
 8004dda:	4770      	bx	lr

08004ddc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004de0:	e7fe      	b.n	8004de0 <HardFault_Handler+0x4>

08004de2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004de2:	b480      	push	{r7}
 8004de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004de6:	e7fe      	b.n	8004de6 <MemManage_Handler+0x4>

08004de8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dec:	e7fe      	b.n	8004dec <BusFault_Handler+0x4>

08004dee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dee:	b480      	push	{r7}
 8004df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004df2:	e7fe      	b.n	8004df2 <UsageFault_Handler+0x4>

08004df4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004df8:	bf00      	nop
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bc80      	pop	{r7}
 8004dfe:	4770      	bx	lr

08004e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e00:	b480      	push	{r7}
 8004e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e04:	bf00      	nop
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bc80      	pop	{r7}
 8004e0a:	4770      	bx	lr

08004e0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e10:	bf00      	nop
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e1c:	f000 f8a2 	bl	8004f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e20:	bf00      	nop
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004e28:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <SystemInit+0x5c>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a14      	ldr	r2, [pc, #80]	; (8004e80 <SystemInit+0x5c>)
 8004e2e:	f043 0301 	orr.w	r3, r3, #1
 8004e32:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004e34:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <SystemInit+0x5c>)
 8004e36:	685a      	ldr	r2, [r3, #4]
 8004e38:	4911      	ldr	r1, [pc, #68]	; (8004e80 <SystemInit+0x5c>)
 8004e3a:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <SystemInit+0x60>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004e40:	4b0f      	ldr	r3, [pc, #60]	; (8004e80 <SystemInit+0x5c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a0e      	ldr	r2, [pc, #56]	; (8004e80 <SystemInit+0x5c>)
 8004e46:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e4e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004e50:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <SystemInit+0x5c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a0a      	ldr	r2, [pc, #40]	; (8004e80 <SystemInit+0x5c>)
 8004e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e5a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004e5c:	4b08      	ldr	r3, [pc, #32]	; (8004e80 <SystemInit+0x5c>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	4a07      	ldr	r2, [pc, #28]	; (8004e80 <SystemInit+0x5c>)
 8004e62:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8004e66:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8004e68:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <SystemInit+0x5c>)
 8004e6a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8004e6e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004e70:	4b05      	ldr	r3, [pc, #20]	; (8004e88 <SystemInit+0x64>)
 8004e72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e76:	609a      	str	r2, [r3, #8]
#endif 
}
 8004e78:	bf00      	nop
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bc80      	pop	{r7}
 8004e7e:	4770      	bx	lr
 8004e80:	40021000 	.word	0x40021000
 8004e84:	f8ff0000 	.word	0xf8ff0000
 8004e88:	e000ed00 	.word	0xe000ed00

08004e8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8004e8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8004e8e:	e003      	b.n	8004e98 <LoopCopyDataInit>

08004e90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8004e90:	4b0b      	ldr	r3, [pc, #44]	; (8004ec0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8004e92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8004e94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8004e96:	3104      	adds	r1, #4

08004e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8004e98:	480a      	ldr	r0, [pc, #40]	; (8004ec4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8004e9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8004e9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004ea0:	d3f6      	bcc.n	8004e90 <CopyDataInit>
  ldr r2, =_sbss
 8004ea2:	4a0a      	ldr	r2, [pc, #40]	; (8004ecc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004ea4:	e002      	b.n	8004eac <LoopFillZerobss>

08004ea6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004ea6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004ea8:	f842 3b04 	str.w	r3, [r2], #4

08004eac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8004eac:	4b08      	ldr	r3, [pc, #32]	; (8004ed0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8004eae:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004eb0:	d3f9      	bcc.n	8004ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004eb2:	f7ff ffb7 	bl	8004e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004eb6:	f002 fb25 	bl	8007504 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004eba:	f7ff f8e9 	bl	8004090 <main>
  bx lr
 8004ebe:	4770      	bx	lr
  ldr r3, =_sidata
 8004ec0:	0800be3c 	.word	0x0800be3c
  ldr r0, =_sdata
 8004ec4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004ec8:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8004ecc:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8004ed0:	2000014c 	.word	0x2000014c

08004ed4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004ed4:	e7fe      	b.n	8004ed4 <ADC1_2_IRQHandler>
	...

08004ed8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004edc:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <HAL_Init+0x28>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a07      	ldr	r2, [pc, #28]	; (8004f00 <HAL_Init+0x28>)
 8004ee2:	f043 0310 	orr.w	r3, r3, #16
 8004ee6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ee8:	2003      	movs	r0, #3
 8004eea:	f000 fd4b 	bl	8005984 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004eee:	2000      	movs	r0, #0
 8004ef0:	f000 f808 	bl	8004f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ef4:	f7ff fe4e 	bl	8004b94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40022000 	.word	0x40022000

08004f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004f0c:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <HAL_InitTick+0x54>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <HAL_InitTick+0x58>)
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	4619      	mov	r1, r3
 8004f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f22:	4618      	mov	r0, r3
 8004f24:	f000 fd55 	bl	80059d2 <HAL_SYSTICK_Config>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d001      	beq.n	8004f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e00e      	b.n	8004f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b0f      	cmp	r3, #15
 8004f36:	d80a      	bhi.n	8004f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004f38:	2200      	movs	r2, #0
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f40:	f000 fd2b 	bl	800599a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004f44:	4a06      	ldr	r2, [pc, #24]	; (8004f60 <HAL_InitTick+0x5c>)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e000      	b.n	8004f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	2000000c 	.word	0x2000000c
 8004f5c:	20000014 	.word	0x20000014
 8004f60:	20000010 	.word	0x20000010

08004f64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f64:	b480      	push	{r7}
 8004f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004f68:	4b05      	ldr	r3, [pc, #20]	; (8004f80 <HAL_IncTick+0x1c>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	4b05      	ldr	r3, [pc, #20]	; (8004f84 <HAL_IncTick+0x20>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4413      	add	r3, r2
 8004f74:	4a03      	ldr	r2, [pc, #12]	; (8004f84 <HAL_IncTick+0x20>)
 8004f76:	6013      	str	r3, [r2, #0]
}
 8004f78:	bf00      	nop
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bc80      	pop	{r7}
 8004f7e:	4770      	bx	lr
 8004f80:	20000014 	.word	0x20000014
 8004f84:	20000148 	.word	0x20000148

08004f88 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8004f8c:	4b02      	ldr	r3, [pc, #8]	; (8004f98 <HAL_GetTick+0x10>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bc80      	pop	{r7}
 8004f96:	4770      	bx	lr
 8004f98:	20000148 	.word	0x20000148

08004f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004fa4:	f7ff fff0 	bl	8004f88 <HAL_GetTick>
 8004fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb4:	d005      	beq.n	8004fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004fb6:	4b09      	ldr	r3, [pc, #36]	; (8004fdc <HAL_Delay+0x40>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4413      	add	r3, r2
 8004fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004fc2:	bf00      	nop
 8004fc4:	f7ff ffe0 	bl	8004f88 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d8f7      	bhi.n	8004fc4 <HAL_Delay+0x28>
  {
  }
}
 8004fd4:	bf00      	nop
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	20000014 	.word	0x20000014

08004fe0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e0ce      	b.n	80051a0 <HAL_ADC_Init+0x1c0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500c:	2b00      	cmp	r3, #0
 800500e:	d109      	bne.n	8005024 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f7ff fdec 	bl	8004bfc <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 fbc3 	bl	80057b0 <ADC_ConversionStop_Disable>
 800502a:	4603      	mov	r3, r0
 800502c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	f003 0310 	and.w	r3, r3, #16
 8005036:	2b00      	cmp	r3, #0
 8005038:	f040 80a9 	bne.w	800518e <HAL_ADC_Init+0x1ae>
 800503c:	7dfb      	ldrb	r3, [r7, #23]
 800503e:	2b00      	cmp	r3, #0
 8005040:	f040 80a5 	bne.w	800518e <HAL_ADC_Init+0x1ae>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005048:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800504c:	f023 0302 	bic.w	r3, r3, #2
 8005050:	f043 0202 	orr.w	r2, r3, #2
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4951      	ldr	r1, [pc, #324]	; (80051a8 <HAL_ADC_Init+0x1c8>)
 8005062:	428b      	cmp	r3, r1
 8005064:	d10a      	bne.n	800507c <HAL_ADC_Init+0x9c>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800506e:	d002      	beq.n	8005076 <HAL_ADC_Init+0x96>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	69db      	ldr	r3, [r3, #28]
 8005074:	e004      	b.n	8005080 <HAL_ADC_Init+0xa0>
 8005076:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800507a:	e001      	b.n	8005080 <HAL_ADC_Init+0xa0>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8005080:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	7b1b      	ldrb	r3, [r3, #12]
 8005086:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8005088:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	4313      	orrs	r3, r2
 800508e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005098:	d003      	beq.n	80050a2 <HAL_ADC_Init+0xc2>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d102      	bne.n	80050a8 <HAL_ADC_Init+0xc8>
 80050a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050a6:	e000      	b.n	80050aa <HAL_ADC_Init+0xca>
 80050a8:	2300      	movs	r3, #0
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	7d1b      	ldrb	r3, [r3, #20]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d119      	bne.n	80050ec <HAL_ADC_Init+0x10c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	7b1b      	ldrb	r3, [r3, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d109      	bne.n	80050d4 <HAL_ADC_Init+0xf4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	035a      	lsls	r2, r3, #13
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050d0:	613b      	str	r3, [r7, #16]
 80050d2:	e00b      	b.n	80050ec <HAL_ADC_Init+0x10c>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	f043 0220 	orr.w	r2, r3, #32
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e4:	f043 0201 	orr.w	r2, r3, #1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	430a      	orrs	r2, r1
 80050fe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	4b29      	ldr	r3, [pc, #164]	; (80051ac <HAL_ADC_Init+0x1cc>)
 8005108:	4013      	ands	r3, r2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6812      	ldr	r2, [r2, #0]
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	430b      	orrs	r3, r1
 8005112:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511c:	d003      	beq.n	8005126 <HAL_ADC_Init+0x146>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d104      	bne.n	8005130 <HAL_ADC_Init+0x150>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	3b01      	subs	r3, #1
 800512c:	051b      	lsls	r3, r3, #20
 800512e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005136:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	430a      	orrs	r2, r1
 8005142:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	689a      	ldr	r2, [r3, #8]
 800514a:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_ADC_Init+0x1d0>)
 800514c:	4013      	ands	r3, r2
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	429a      	cmp	r2, r3
 8005152:	d10b      	bne.n	800516c <HAL_ADC_Init+0x18c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	f023 0303 	bic.w	r3, r3, #3
 8005162:	f043 0201 	orr.w	r2, r3, #1
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800516a:	e018      	b.n	800519e <HAL_ADC_Init+0x1be>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005170:	f023 0312 	bic.w	r3, r3, #18
 8005174:	f043 0210 	orr.w	r2, r3, #16
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	f043 0201 	orr.w	r2, r3, #1
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800518c:	e007      	b.n	800519e <HAL_ADC_Init+0x1be>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005192:	f043 0210 	orr.w	r2, r3, #16
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800519e:	7dfb      	ldrb	r3, [r7, #23]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3718      	adds	r7, #24
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	40013c00 	.word	0x40013c00
 80051ac:	ffe1f7fd 	.word	0xffe1f7fd
 80051b0:	ff1f0efe 	.word	0xff1f0efe

080051b4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d101      	bne.n	80051ce <HAL_ADC_Start+0x1a>
 80051ca:	2302      	movs	r3, #2
 80051cc:	e098      	b.n	8005300 <HAL_ADC_Start+0x14c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fa98 	bl	800570c <ADC_Enable>
 80051dc:	4603      	mov	r3, r0
 80051de:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f040 8087 	bne.w	80052f6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f0:	f023 0301 	bic.w	r3, r3, #1
 80051f4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a41      	ldr	r2, [pc, #260]	; (8005308 <HAL_ADC_Start+0x154>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d105      	bne.n	8005212 <HAL_ADC_Start+0x5e>
 8005206:	4b41      	ldr	r3, [pc, #260]	; (800530c <HAL_ADC_Start+0x158>)
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d115      	bne.n	800523e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005216:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005228:	2b00      	cmp	r3, #0
 800522a:	d026      	beq.n	800527a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005230:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005234:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800523c:	e01d      	b.n	800527a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005242:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a2f      	ldr	r2, [pc, #188]	; (800530c <HAL_ADC_Start+0x158>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d004      	beq.n	800525e <HAL_ADC_Start+0xaa>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a2b      	ldr	r2, [pc, #172]	; (8005308 <HAL_ADC_Start+0x154>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d10d      	bne.n	800527a <HAL_ADC_Start+0xc6>
 800525e:	4b2b      	ldr	r3, [pc, #172]	; (800530c <HAL_ADC_Start+0x158>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005266:	2b00      	cmp	r3, #0
 8005268:	d007      	beq.n	800527a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005272:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800527e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d006      	beq.n	8005294 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	f023 0206 	bic.w	r2, r3, #6
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	62da      	str	r2, [r3, #44]	; 0x2c
 8005292:	e002      	b.n	800529a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f06f 0202 	mvn.w	r2, #2
 80052aa:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80052b6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80052ba:	d113      	bne.n	80052e4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80052c0:	4a11      	ldr	r2, [pc, #68]	; (8005308 <HAL_ADC_Start+0x154>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d105      	bne.n	80052d2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80052c6:	4b11      	ldr	r3, [pc, #68]	; (800530c <HAL_ADC_Start+0x158>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d108      	bne.n	80052e4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80052e0:	609a      	str	r2, [r3, #8]
 80052e2:	e00c      	b.n	80052fe <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	689a      	ldr	r2, [r3, #8]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80052f2:	609a      	str	r2, [r3, #8]
 80052f4:	e003      	b.n	80052fe <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}
 8005308:	40012800 	.word	0x40012800
 800530c:	40012400 	.word	0x40012400

08005310 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b087      	sub	sp, #28
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800531a:	2300      	movs	r3, #0
 800531c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8005322:	2300      	movs	r3, #0
 8005324:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8005326:	f7ff fe2f 	bl	8004f88 <HAL_GetTick>
 800532a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00b      	beq.n	8005352 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800533e:	f043 0220 	orr.w	r2, r3, #32
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e0c8      	b.n	80054e4 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d12a      	bne.n	80053b6 <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800536a:	2b00      	cmp	r3, #0
 800536c:	d123      	bne.n	80053b6 <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800536e:	e01a      	b.n	80053a6 <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005376:	d016      	beq.n	80053a6 <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d007      	beq.n	800538e <HAL_ADC_PollForConversion+0x7e>
 800537e:	f7ff fe03 	bl	8004f88 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d20b      	bcs.n	80053a6 <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	f043 0204 	orr.w	r2, r3, #4
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e09e      	b.n	80054e4 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0302 	and.w	r3, r3, #2
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d0dd      	beq.n	8005370 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80053b4:	e06c      	b.n	8005490 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80053b6:	4b4d      	ldr	r3, [pc, #308]	; (80054ec <HAL_ADC_PollForConversion+0x1dc>)
 80053b8:	681c      	ldr	r4, [r3, #0]
 80053ba:	2002      	movs	r0, #2
 80053bc:	f001 f96e 	bl	800669c <HAL_RCCEx_GetPeriphCLKFreq>
 80053c0:	4603      	mov	r3, r0
 80053c2:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6919      	ldr	r1, [r3, #16]
 80053cc:	4b48      	ldr	r3, [pc, #288]	; (80054f0 <HAL_ADC_PollForConversion+0x1e0>)
 80053ce:	400b      	ands	r3, r1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d118      	bne.n	8005406 <HAL_ADC_PollForConversion+0xf6>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68d9      	ldr	r1, [r3, #12]
 80053da:	4b46      	ldr	r3, [pc, #280]	; (80054f4 <HAL_ADC_PollForConversion+0x1e4>)
 80053dc:	400b      	ands	r3, r1
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d111      	bne.n	8005406 <HAL_ADC_PollForConversion+0xf6>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	6919      	ldr	r1, [r3, #16]
 80053e8:	4b43      	ldr	r3, [pc, #268]	; (80054f8 <HAL_ADC_PollForConversion+0x1e8>)
 80053ea:	400b      	ands	r3, r1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d108      	bne.n	8005402 <HAL_ADC_PollForConversion+0xf2>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68d9      	ldr	r1, [r3, #12]
 80053f6:	4b41      	ldr	r3, [pc, #260]	; (80054fc <HAL_ADC_PollForConversion+0x1ec>)
 80053f8:	400b      	ands	r3, r1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_ADC_PollForConversion+0xf2>
 80053fe:	2314      	movs	r3, #20
 8005400:	e020      	b.n	8005444 <HAL_ADC_PollForConversion+0x134>
 8005402:	2329      	movs	r3, #41	; 0x29
 8005404:	e01e      	b.n	8005444 <HAL_ADC_PollForConversion+0x134>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	6919      	ldr	r1, [r3, #16]
 800540c:	4b3a      	ldr	r3, [pc, #232]	; (80054f8 <HAL_ADC_PollForConversion+0x1e8>)
 800540e:	400b      	ands	r3, r1
 8005410:	2b00      	cmp	r3, #0
 8005412:	d106      	bne.n	8005422 <HAL_ADC_PollForConversion+0x112>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68d9      	ldr	r1, [r3, #12]
 800541a:	4b38      	ldr	r3, [pc, #224]	; (80054fc <HAL_ADC_PollForConversion+0x1ec>)
 800541c:	400b      	ands	r3, r1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00d      	beq.n	800543e <HAL_ADC_PollForConversion+0x12e>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6919      	ldr	r1, [r3, #16]
 8005428:	4b35      	ldr	r3, [pc, #212]	; (8005500 <HAL_ADC_PollForConversion+0x1f0>)
 800542a:	400b      	ands	r3, r1
 800542c:	2b00      	cmp	r3, #0
 800542e:	d108      	bne.n	8005442 <HAL_ADC_PollForConversion+0x132>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68d9      	ldr	r1, [r3, #12]
 8005436:	4b32      	ldr	r3, [pc, #200]	; (8005500 <HAL_ADC_PollForConversion+0x1f0>)
 8005438:	400b      	ands	r3, r1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <HAL_ADC_PollForConversion+0x132>
 800543e:	2354      	movs	r3, #84	; 0x54
 8005440:	e000      	b.n	8005444 <HAL_ADC_PollForConversion+0x134>
 8005442:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8005444:	fb02 f303 	mul.w	r3, r2, r3
 8005448:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800544a:	e01d      	b.n	8005488 <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005452:	d016      	beq.n	8005482 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d007      	beq.n	800546a <HAL_ADC_PollForConversion+0x15a>
 800545a:	f7ff fd95 	bl	8004f88 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d20b      	bcs.n	8005482 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800546e:	f043 0204 	orr.w	r2, r3, #4
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e030      	b.n	80054e4 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3301      	adds	r3, #1
 8005486:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	429a      	cmp	r2, r3
 800548e:	d8dd      	bhi.n	800544c <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f06f 0212 	mvn.w	r2, #18
 8005498:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80054b0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80054b4:	d115      	bne.n	80054e2 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d111      	bne.n	80054e2 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d105      	bne.n	80054e2 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054da:	f043 0201 	orr.w	r2, r3, #1
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	371c      	adds	r7, #28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd90      	pop	{r4, r7, pc}
 80054ec:	2000000c 	.word	0x2000000c
 80054f0:	24924924 	.word	0x24924924
 80054f4:	00924924 	.word	0x00924924
 80054f8:	12492492 	.word	0x12492492
 80054fc:	00492492 	.word	0x00492492
 8005500:	00249249 	.word	0x00249249

08005504 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	bc80      	pop	{r7}
 800551a:	4770      	bx	lr

0800551c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005526:	2300      	movs	r3, #0
 8005528:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800552a:	2300      	movs	r3, #0
 800552c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_ADC_ConfigChannel+0x20>
 8005538:	2302      	movs	r3, #2
 800553a:	e0dc      	b.n	80056f6 <HAL_ADC_ConfigChannel+0x1da>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b06      	cmp	r3, #6
 800554a:	d81c      	bhi.n	8005586 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	3b05      	subs	r3, #5
 800555e:	221f      	movs	r2, #31
 8005560:	fa02 f303 	lsl.w	r3, r2, r3
 8005564:	43db      	mvns	r3, r3
 8005566:	4019      	ands	r1, r3
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	6818      	ldr	r0, [r3, #0]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	3b05      	subs	r3, #5
 8005578:	fa00 f203 	lsl.w	r2, r0, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	635a      	str	r2, [r3, #52]	; 0x34
 8005584:	e03c      	b.n	8005600 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b0c      	cmp	r3, #12
 800558c:	d81c      	bhi.n	80055c8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	3b23      	subs	r3, #35	; 0x23
 80055a0:	221f      	movs	r2, #31
 80055a2:	fa02 f303 	lsl.w	r3, r2, r3
 80055a6:	43db      	mvns	r3, r3
 80055a8:	4019      	ands	r1, r3
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685a      	ldr	r2, [r3, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	3b23      	subs	r3, #35	; 0x23
 80055ba:	fa00 f203 	lsl.w	r2, r0, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	631a      	str	r2, [r3, #48]	; 0x30
 80055c6:	e01b      	b.n	8005600 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	4413      	add	r3, r2
 80055d8:	3b41      	subs	r3, #65	; 0x41
 80055da:	221f      	movs	r2, #31
 80055dc:	fa02 f303 	lsl.w	r3, r2, r3
 80055e0:	43db      	mvns	r3, r3
 80055e2:	4019      	ands	r1, r3
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6818      	ldr	r0, [r3, #0]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	4613      	mov	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	3b41      	subs	r3, #65	; 0x41
 80055f4:	fa00 f203 	lsl.w	r2, r0, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b09      	cmp	r3, #9
 8005606:	d91c      	bls.n	8005642 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68d9      	ldr	r1, [r3, #12]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	4613      	mov	r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4413      	add	r3, r2
 8005618:	3b1e      	subs	r3, #30
 800561a:	2207      	movs	r2, #7
 800561c:	fa02 f303 	lsl.w	r3, r2, r3
 8005620:	43db      	mvns	r3, r3
 8005622:	4019      	ands	r1, r3
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	6898      	ldr	r0, [r3, #8]
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	4613      	mov	r3, r2
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	4413      	add	r3, r2
 8005632:	3b1e      	subs	r3, #30
 8005634:	fa00 f203 	lsl.w	r2, r0, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	60da      	str	r2, [r3, #12]
 8005640:	e019      	b.n	8005676 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6919      	ldr	r1, [r3, #16]
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	4613      	mov	r3, r2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	4413      	add	r3, r2
 8005652:	2207      	movs	r2, #7
 8005654:	fa02 f303 	lsl.w	r3, r2, r3
 8005658:	43db      	mvns	r3, r3
 800565a:	4019      	ands	r1, r3
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	6898      	ldr	r0, [r3, #8]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4613      	mov	r3, r2
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	4413      	add	r3, r2
 800566a:	fa00 f203 	lsl.w	r2, r0, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	2b10      	cmp	r3, #16
 800567c:	d003      	beq.n	8005686 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8005682:	2b11      	cmp	r3, #17
 8005684:	d132      	bne.n	80056ec <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a1d      	ldr	r2, [pc, #116]	; (8005700 <HAL_ADC_ConfigChannel+0x1e4>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d125      	bne.n	80056dc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d126      	bne.n	80056ec <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80056ac:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b10      	cmp	r3, #16
 80056b4:	d11a      	bne.n	80056ec <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80056b6:	4b13      	ldr	r3, [pc, #76]	; (8005704 <HAL_ADC_ConfigChannel+0x1e8>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a13      	ldr	r2, [pc, #76]	; (8005708 <HAL_ADC_ConfigChannel+0x1ec>)
 80056bc:	fba2 2303 	umull	r2, r3, r2, r3
 80056c0:	0c9a      	lsrs	r2, r3, #18
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	005b      	lsls	r3, r3, #1
 80056ca:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80056cc:	e002      	b.n	80056d4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	3b01      	subs	r3, #1
 80056d2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1f9      	bne.n	80056ce <HAL_ADC_ConfigChannel+0x1b2>
 80056da:	e007      	b.n	80056ec <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e0:	f043 0220 	orr.w	r2, r3, #32
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3714      	adds	r7, #20
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bc80      	pop	{r7}
 80056fe:	4770      	bx	lr
 8005700:	40012400 	.word	0x40012400
 8005704:	2000000c 	.word	0x2000000c
 8005708:	431bde83 	.word	0x431bde83

0800570c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b01      	cmp	r3, #1
 8005728:	d039      	beq.n	800579e <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f042 0201 	orr.w	r2, r2, #1
 8005738:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800573a:	4b1b      	ldr	r3, [pc, #108]	; (80057a8 <ADC_Enable+0x9c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <ADC_Enable+0xa0>)
 8005740:	fba2 2303 	umull	r2, r3, r2, r3
 8005744:	0c9b      	lsrs	r3, r3, #18
 8005746:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005748:	e002      	b.n	8005750 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	3b01      	subs	r3, #1
 800574e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1f9      	bne.n	800574a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005756:	f7ff fc17 	bl	8004f88 <HAL_GetTick>
 800575a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800575c:	e018      	b.n	8005790 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800575e:	f7ff fc13 	bl	8004f88 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	2b02      	cmp	r3, #2
 800576a:	d911      	bls.n	8005790 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005770:	f043 0210 	orr.w	r2, r3, #16
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	f043 0201 	orr.w	r2, r3, #1
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	e007      	b.n	80057a0 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b01      	cmp	r3, #1
 800579c:	d1df      	bne.n	800575e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}
 80057a8:	2000000c 	.word	0x2000000c
 80057ac:	431bde83 	.word	0x431bde83

080057b0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d127      	bne.n	800581a <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0201 	bic.w	r2, r2, #1
 80057d8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80057da:	f7ff fbd5 	bl	8004f88 <HAL_GetTick>
 80057de:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80057e0:	e014      	b.n	800580c <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80057e2:	f7ff fbd1 	bl	8004f88 <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d90d      	bls.n	800580c <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	f043 0210 	orr.w	r2, r3, #16
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005800:	f043 0201 	orr.w	r2, r3, #1
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e007      	b.n	800581c <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	f003 0301 	and.w	r3, r3, #1
 8005816:	2b01      	cmp	r3, #1
 8005818:	d0e3      	beq.n	80057e2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005834:	4b0c      	ldr	r3, [pc, #48]	; (8005868 <__NVIC_SetPriorityGrouping+0x44>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800583a:	68ba      	ldr	r2, [r7, #8]
 800583c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005840:	4013      	ands	r3, r2
 8005842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800584c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005856:	4a04      	ldr	r2, [pc, #16]	; (8005868 <__NVIC_SetPriorityGrouping+0x44>)
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	60d3      	str	r3, [r2, #12]
}
 800585c:	bf00      	nop
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	bc80      	pop	{r7}
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	e000ed00 	.word	0xe000ed00

0800586c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005870:	4b04      	ldr	r3, [pc, #16]	; (8005884 <__NVIC_GetPriorityGrouping+0x18>)
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	0a1b      	lsrs	r3, r3, #8
 8005876:	f003 0307 	and.w	r3, r3, #7
}
 800587a:	4618      	mov	r0, r3
 800587c:	46bd      	mov	sp, r7
 800587e:	bc80      	pop	{r7}
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	e000ed00 	.word	0xe000ed00

08005888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	4603      	mov	r3, r0
 8005890:	6039      	str	r1, [r7, #0]
 8005892:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005898:	2b00      	cmp	r3, #0
 800589a:	db0a      	blt.n	80058b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	b2da      	uxtb	r2, r3
 80058a0:	490c      	ldr	r1, [pc, #48]	; (80058d4 <__NVIC_SetPriority+0x4c>)
 80058a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058a6:	0112      	lsls	r2, r2, #4
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	440b      	add	r3, r1
 80058ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058b0:	e00a      	b.n	80058c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	4908      	ldr	r1, [pc, #32]	; (80058d8 <__NVIC_SetPriority+0x50>)
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	3b04      	subs	r3, #4
 80058c0:	0112      	lsls	r2, r2, #4
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	440b      	add	r3, r1
 80058c6:	761a      	strb	r2, [r3, #24]
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bc80      	pop	{r7}
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	e000e100 	.word	0xe000e100
 80058d8:	e000ed00 	.word	0xe000ed00

080058dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80058dc:	b480      	push	{r7}
 80058de:	b089      	sub	sp, #36	; 0x24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	f1c3 0307 	rsb	r3, r3, #7
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	bf28      	it	cs
 80058fa:	2304      	movcs	r3, #4
 80058fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	3304      	adds	r3, #4
 8005902:	2b06      	cmp	r3, #6
 8005904:	d902      	bls.n	800590c <NVIC_EncodePriority+0x30>
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	3b03      	subs	r3, #3
 800590a:	e000      	b.n	800590e <NVIC_EncodePriority+0x32>
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005910:	f04f 32ff 	mov.w	r2, #4294967295
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	fa02 f303 	lsl.w	r3, r2, r3
 800591a:	43da      	mvns	r2, r3
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	401a      	ands	r2, r3
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005924:	f04f 31ff 	mov.w	r1, #4294967295
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	fa01 f303 	lsl.w	r3, r1, r3
 800592e:	43d9      	mvns	r1, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005934:	4313      	orrs	r3, r2
         );
}
 8005936:	4618      	mov	r0, r3
 8005938:	3724      	adds	r7, #36	; 0x24
 800593a:	46bd      	mov	sp, r7
 800593c:	bc80      	pop	{r7}
 800593e:	4770      	bx	lr

08005940 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3b01      	subs	r3, #1
 800594c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005950:	d301      	bcc.n	8005956 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005952:	2301      	movs	r3, #1
 8005954:	e00f      	b.n	8005976 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005956:	4a0a      	ldr	r2, [pc, #40]	; (8005980 <SysTick_Config+0x40>)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3b01      	subs	r3, #1
 800595c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800595e:	210f      	movs	r1, #15
 8005960:	f04f 30ff 	mov.w	r0, #4294967295
 8005964:	f7ff ff90 	bl	8005888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005968:	4b05      	ldr	r3, [pc, #20]	; (8005980 <SysTick_Config+0x40>)
 800596a:	2200      	movs	r2, #0
 800596c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800596e:	4b04      	ldr	r3, [pc, #16]	; (8005980 <SysTick_Config+0x40>)
 8005970:	2207      	movs	r2, #7
 8005972:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	e000e010 	.word	0xe000e010

08005984 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff ff49 	bl	8005824 <__NVIC_SetPriorityGrouping>
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800599a:	b580      	push	{r7, lr}
 800599c:	b086      	sub	sp, #24
 800599e:	af00      	add	r7, sp, #0
 80059a0:	4603      	mov	r3, r0
 80059a2:	60b9      	str	r1, [r7, #8]
 80059a4:	607a      	str	r2, [r7, #4]
 80059a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059ac:	f7ff ff5e 	bl	800586c <__NVIC_GetPriorityGrouping>
 80059b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	6978      	ldr	r0, [r7, #20]
 80059b8:	f7ff ff90 	bl	80058dc <NVIC_EncodePriority>
 80059bc:	4602      	mov	r2, r0
 80059be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059c2:	4611      	mov	r1, r2
 80059c4:	4618      	mov	r0, r3
 80059c6:	f7ff ff5f 	bl	8005888 <__NVIC_SetPriority>
}
 80059ca:	bf00      	nop
 80059cc:	3718      	adds	r7, #24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80059d2:	b580      	push	{r7, lr}
 80059d4:	b082      	sub	sp, #8
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7ff ffb0 	bl	8005940 <SysTick_Config>
 80059e0:	4603      	mov	r3, r0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
	...

080059ec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b08b      	sub	sp, #44	; 0x2c
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80059f6:	2300      	movs	r3, #0
 80059f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80059fa:	2300      	movs	r3, #0
 80059fc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80059fe:	e133      	b.n	8005c68 <HAL_GPIO_Init+0x27c>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005a00:	2201      	movs	r2, #1
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	fa02 f303 	lsl.w	r3, r2, r3
 8005a08:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69fa      	ldr	r2, [r7, #28]
 8005a10:	4013      	ands	r3, r2
 8005a12:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005a14:	69ba      	ldr	r2, [r7, #24]
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	f040 8122 	bne.w	8005c62 <HAL_GPIO_Init+0x276>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	2b12      	cmp	r3, #18
 8005a24:	d034      	beq.n	8005a90 <HAL_GPIO_Init+0xa4>
 8005a26:	2b12      	cmp	r3, #18
 8005a28:	d80d      	bhi.n	8005a46 <HAL_GPIO_Init+0x5a>
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d02b      	beq.n	8005a86 <HAL_GPIO_Init+0x9a>
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d804      	bhi.n	8005a3c <HAL_GPIO_Init+0x50>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d031      	beq.n	8005a9a <HAL_GPIO_Init+0xae>
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d01c      	beq.n	8005a74 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005a3a:	e048      	b.n	8005ace <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d043      	beq.n	8005ac8 <HAL_GPIO_Init+0xdc>
 8005a40:	2b11      	cmp	r3, #17
 8005a42:	d01b      	beq.n	8005a7c <HAL_GPIO_Init+0x90>
          break;
 8005a44:	e043      	b.n	8005ace <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005a46:	4a8f      	ldr	r2, [pc, #572]	; (8005c84 <HAL_GPIO_Init+0x298>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d026      	beq.n	8005a9a <HAL_GPIO_Init+0xae>
 8005a4c:	4a8d      	ldr	r2, [pc, #564]	; (8005c84 <HAL_GPIO_Init+0x298>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d806      	bhi.n	8005a60 <HAL_GPIO_Init+0x74>
 8005a52:	4a8d      	ldr	r2, [pc, #564]	; (8005c88 <HAL_GPIO_Init+0x29c>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d020      	beq.n	8005a9a <HAL_GPIO_Init+0xae>
 8005a58:	4a8c      	ldr	r2, [pc, #560]	; (8005c8c <HAL_GPIO_Init+0x2a0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d01d      	beq.n	8005a9a <HAL_GPIO_Init+0xae>
          break;
 8005a5e:	e036      	b.n	8005ace <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005a60:	4a8b      	ldr	r2, [pc, #556]	; (8005c90 <HAL_GPIO_Init+0x2a4>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d019      	beq.n	8005a9a <HAL_GPIO_Init+0xae>
 8005a66:	4a8b      	ldr	r2, [pc, #556]	; (8005c94 <HAL_GPIO_Init+0x2a8>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d016      	beq.n	8005a9a <HAL_GPIO_Init+0xae>
 8005a6c:	4a8a      	ldr	r2, [pc, #552]	; (8005c98 <HAL_GPIO_Init+0x2ac>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d013      	beq.n	8005a9a <HAL_GPIO_Init+0xae>
          break;
 8005a72:	e02c      	b.n	8005ace <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	623b      	str	r3, [r7, #32]
          break;
 8005a7a:	e028      	b.n	8005ace <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	3304      	adds	r3, #4
 8005a82:	623b      	str	r3, [r7, #32]
          break;
 8005a84:	e023      	b.n	8005ace <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	623b      	str	r3, [r7, #32]
          break;
 8005a8e:	e01e      	b.n	8005ace <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	330c      	adds	r3, #12
 8005a96:	623b      	str	r3, [r7, #32]
          break;
 8005a98:	e019      	b.n	8005ace <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d102      	bne.n	8005aa8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005aa2:	2304      	movs	r3, #4
 8005aa4:	623b      	str	r3, [r7, #32]
          break;
 8005aa6:	e012      	b.n	8005ace <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	d105      	bne.n	8005abc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	69fa      	ldr	r2, [r7, #28]
 8005ab8:	611a      	str	r2, [r3, #16]
          break;
 8005aba:	e008      	b.n	8005ace <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005abc:	2308      	movs	r3, #8
 8005abe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69fa      	ldr	r2, [r7, #28]
 8005ac4:	615a      	str	r2, [r3, #20]
          break;
 8005ac6:	e002      	b.n	8005ace <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	623b      	str	r3, [r7, #32]
          break;
 8005acc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2bff      	cmp	r3, #255	; 0xff
 8005ad2:	d801      	bhi.n	8005ad8 <HAL_GPIO_Init+0xec>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	e001      	b.n	8005adc <HAL_GPIO_Init+0xf0>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3304      	adds	r3, #4
 8005adc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	2bff      	cmp	r3, #255	; 0xff
 8005ae2:	d802      	bhi.n	8005aea <HAL_GPIO_Init+0xfe>
 8005ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	e002      	b.n	8005af0 <HAL_GPIO_Init+0x104>
 8005aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aec:	3b08      	subs	r3, #8
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	210f      	movs	r1, #15
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	fa01 f303 	lsl.w	r3, r1, r3
 8005afe:	43db      	mvns	r3, r3
 8005b00:	401a      	ands	r2, r3
 8005b02:	6a39      	ldr	r1, [r7, #32]
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80a2 	beq.w	8005c62 <HAL_GPIO_Init+0x276>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005b1e:	4b5f      	ldr	r3, [pc, #380]	; (8005c9c <HAL_GPIO_Init+0x2b0>)
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	4a5e      	ldr	r2, [pc, #376]	; (8005c9c <HAL_GPIO_Init+0x2b0>)
 8005b24:	f043 0301 	orr.w	r3, r3, #1
 8005b28:	6193      	str	r3, [r2, #24]
 8005b2a:	4b5c      	ldr	r3, [pc, #368]	; (8005c9c <HAL_GPIO_Init+0x2b0>)
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	60bb      	str	r3, [r7, #8]
 8005b34:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005b36:	4a5a      	ldr	r2, [pc, #360]	; (8005ca0 <HAL_GPIO_Init+0x2b4>)
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	089b      	lsrs	r3, r3, #2
 8005b3c:	3302      	adds	r3, #2
 8005b3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b42:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	f003 0303 	and.w	r3, r3, #3
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	220f      	movs	r2, #15
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	43db      	mvns	r3, r3
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4013      	ands	r3, r2
 8005b58:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	4a51      	ldr	r2, [pc, #324]	; (8005ca4 <HAL_GPIO_Init+0x2b8>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d01f      	beq.n	8005ba2 <HAL_GPIO_Init+0x1b6>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a50      	ldr	r2, [pc, #320]	; (8005ca8 <HAL_GPIO_Init+0x2bc>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d019      	beq.n	8005b9e <HAL_GPIO_Init+0x1b2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	4a4f      	ldr	r2, [pc, #316]	; (8005cac <HAL_GPIO_Init+0x2c0>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d013      	beq.n	8005b9a <HAL_GPIO_Init+0x1ae>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a4e      	ldr	r2, [pc, #312]	; (8005cb0 <HAL_GPIO_Init+0x2c4>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d00d      	beq.n	8005b96 <HAL_GPIO_Init+0x1aa>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a4d      	ldr	r2, [pc, #308]	; (8005cb4 <HAL_GPIO_Init+0x2c8>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d007      	beq.n	8005b92 <HAL_GPIO_Init+0x1a6>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a4c      	ldr	r2, [pc, #304]	; (8005cb8 <HAL_GPIO_Init+0x2cc>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d101      	bne.n	8005b8e <HAL_GPIO_Init+0x1a2>
 8005b8a:	2305      	movs	r3, #5
 8005b8c:	e00a      	b.n	8005ba4 <HAL_GPIO_Init+0x1b8>
 8005b8e:	2306      	movs	r3, #6
 8005b90:	e008      	b.n	8005ba4 <HAL_GPIO_Init+0x1b8>
 8005b92:	2304      	movs	r3, #4
 8005b94:	e006      	b.n	8005ba4 <HAL_GPIO_Init+0x1b8>
 8005b96:	2303      	movs	r3, #3
 8005b98:	e004      	b.n	8005ba4 <HAL_GPIO_Init+0x1b8>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e002      	b.n	8005ba4 <HAL_GPIO_Init+0x1b8>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <HAL_GPIO_Init+0x1b8>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba6:	f002 0203 	and.w	r2, r2, #3
 8005baa:	0092      	lsls	r2, r2, #2
 8005bac:	4093      	lsls	r3, r2
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005bb4:	493a      	ldr	r1, [pc, #232]	; (8005ca0 <HAL_GPIO_Init+0x2b4>)
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	089b      	lsrs	r3, r3, #2
 8005bba:	3302      	adds	r3, #2
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d006      	beq.n	8005bdc <HAL_GPIO_Init+0x1f0>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005bce:	4b3b      	ldr	r3, [pc, #236]	; (8005cbc <HAL_GPIO_Init+0x2d0>)
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	493a      	ldr	r1, [pc, #232]	; (8005cbc <HAL_GPIO_Init+0x2d0>)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	600b      	str	r3, [r1, #0]
 8005bda:	e006      	b.n	8005bea <HAL_GPIO_Init+0x1fe>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005bdc:	4b37      	ldr	r3, [pc, #220]	; (8005cbc <HAL_GPIO_Init+0x2d0>)
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	43db      	mvns	r3, r3
 8005be4:	4935      	ldr	r1, [pc, #212]	; (8005cbc <HAL_GPIO_Init+0x2d0>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d006      	beq.n	8005c04 <HAL_GPIO_Init+0x218>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005bf6:	4b31      	ldr	r3, [pc, #196]	; (8005cbc <HAL_GPIO_Init+0x2d0>)
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	4930      	ldr	r1, [pc, #192]	; (8005cbc <HAL_GPIO_Init+0x2d0>)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	604b      	str	r3, [r1, #4]
 8005c02:	e006      	b.n	8005c12 <HAL_GPIO_Init+0x226>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005c04:	4b2d      	ldr	r3, [pc, #180]	; (8005cbc <HAL_GPIO_Init+0x2d0>)
 8005c06:	685a      	ldr	r2, [r3, #4]
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	43db      	mvns	r3, r3
 8005c0c:	492b      	ldr	r1, [pc, #172]	; (8005cbc <HAL_GPIO_Init+0x2d0>)
 8005c0e:	4013      	ands	r3, r2
 8005c10:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d006      	beq.n	8005c2c <HAL_GPIO_Init+0x240>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005c1e:	4b27      	ldr	r3, [pc, #156]	; (8005cbc <HAL_GPIO_Init+0x2d0>)
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	4926      	ldr	r1, [pc, #152]	; (8005cbc <HAL_GPIO_Init+0x2d0>)
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	608b      	str	r3, [r1, #8]
 8005c2a:	e006      	b.n	8005c3a <HAL_GPIO_Init+0x24e>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005c2c:	4b23      	ldr	r3, [pc, #140]	; (8005cbc <HAL_GPIO_Init+0x2d0>)
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	43db      	mvns	r3, r3
 8005c34:	4921      	ldr	r1, [pc, #132]	; (8005cbc <HAL_GPIO_Init+0x2d0>)
 8005c36:	4013      	ands	r3, r2
 8005c38:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d006      	beq.n	8005c54 <HAL_GPIO_Init+0x268>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005c46:	4b1d      	ldr	r3, [pc, #116]	; (8005cbc <HAL_GPIO_Init+0x2d0>)
 8005c48:	68da      	ldr	r2, [r3, #12]
 8005c4a:	491c      	ldr	r1, [pc, #112]	; (8005cbc <HAL_GPIO_Init+0x2d0>)
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60cb      	str	r3, [r1, #12]
 8005c52:	e006      	b.n	8005c62 <HAL_GPIO_Init+0x276>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005c54:	4b19      	ldr	r3, [pc, #100]	; (8005cbc <HAL_GPIO_Init+0x2d0>)
 8005c56:	68da      	ldr	r2, [r3, #12]
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	43db      	mvns	r3, r3
 8005c5c:	4917      	ldr	r1, [pc, #92]	; (8005cbc <HAL_GPIO_Init+0x2d0>)
 8005c5e:	4013      	ands	r3, r2
 8005c60:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	3301      	adds	r3, #1
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f47f aec4 	bne.w	8005a00 <HAL_GPIO_Init+0x14>
  }
}
 8005c78:	bf00      	nop
 8005c7a:	372c      	adds	r7, #44	; 0x2c
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bc80      	pop	{r7}
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	10210000 	.word	0x10210000
 8005c88:	10110000 	.word	0x10110000
 8005c8c:	10120000 	.word	0x10120000
 8005c90:	10310000 	.word	0x10310000
 8005c94:	10320000 	.word	0x10320000
 8005c98:	10220000 	.word	0x10220000
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	40010000 	.word	0x40010000
 8005ca4:	40010800 	.word	0x40010800
 8005ca8:	40010c00 	.word	0x40010c00
 8005cac:	40011000 	.word	0x40011000
 8005cb0:	40011400 	.word	0x40011400
 8005cb4:	40011800 	.word	0x40011800
 8005cb8:	40011c00 	.word	0x40011c00
 8005cbc:	40010400 	.word	0x40010400

08005cc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	460b      	mov	r3, r1
 8005cca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	887b      	ldrh	r3, [r7, #2]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	73fb      	strb	r3, [r7, #15]
 8005cdc:	e001      	b.n	8005ce2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bc80      	pop	{r7}
 8005cec:	4770      	bx	lr

08005cee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	807b      	strh	r3, [r7, #2]
 8005cfa:	4613      	mov	r3, r2
 8005cfc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005cfe:	787b      	ldrb	r3, [r7, #1]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d04:	887a      	ldrh	r2, [r7, #2]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005d0a:	e003      	b.n	8005d14 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005d0c:	887b      	ldrh	r3, [r7, #2]
 8005d0e:	041a      	lsls	r2, r3, #16
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	611a      	str	r2, [r3, #16]
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bc80      	pop	{r7}
 8005d1c:	4770      	bx	lr
	...

08005d20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e26c      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 8087 	beq.w	8005e4e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d40:	4b92      	ldr	r3, [pc, #584]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	f003 030c 	and.w	r3, r3, #12
 8005d48:	2b04      	cmp	r3, #4
 8005d4a:	d00c      	beq.n	8005d66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005d4c:	4b8f      	ldr	r3, [pc, #572]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	f003 030c 	and.w	r3, r3, #12
 8005d54:	2b08      	cmp	r3, #8
 8005d56:	d112      	bne.n	8005d7e <HAL_RCC_OscConfig+0x5e>
 8005d58:	4b8c      	ldr	r3, [pc, #560]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d64:	d10b      	bne.n	8005d7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d66:	4b89      	ldr	r3, [pc, #548]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d06c      	beq.n	8005e4c <HAL_RCC_OscConfig+0x12c>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d168      	bne.n	8005e4c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e246      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d86:	d106      	bne.n	8005d96 <HAL_RCC_OscConfig+0x76>
 8005d88:	4b80      	ldr	r3, [pc, #512]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a7f      	ldr	r2, [pc, #508]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d92:	6013      	str	r3, [r2, #0]
 8005d94:	e02e      	b.n	8005df4 <HAL_RCC_OscConfig+0xd4>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10c      	bne.n	8005db8 <HAL_RCC_OscConfig+0x98>
 8005d9e:	4b7b      	ldr	r3, [pc, #492]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a7a      	ldr	r2, [pc, #488]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	4b78      	ldr	r3, [pc, #480]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a77      	ldr	r2, [pc, #476]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	e01d      	b.n	8005df4 <HAL_RCC_OscConfig+0xd4>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005dc0:	d10c      	bne.n	8005ddc <HAL_RCC_OscConfig+0xbc>
 8005dc2:	4b72      	ldr	r3, [pc, #456]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a71      	ldr	r2, [pc, #452]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005dcc:	6013      	str	r3, [r2, #0]
 8005dce:	4b6f      	ldr	r3, [pc, #444]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a6e      	ldr	r2, [pc, #440]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd8:	6013      	str	r3, [r2, #0]
 8005dda:	e00b      	b.n	8005df4 <HAL_RCC_OscConfig+0xd4>
 8005ddc:	4b6b      	ldr	r3, [pc, #428]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a6a      	ldr	r2, [pc, #424]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de6:	6013      	str	r3, [r2, #0]
 8005de8:	4b68      	ldr	r3, [pc, #416]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a67      	ldr	r2, [pc, #412]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005df2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d013      	beq.n	8005e24 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dfc:	f7ff f8c4 	bl	8004f88 <HAL_GetTick>
 8005e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e02:	e008      	b.n	8005e16 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e04:	f7ff f8c0 	bl	8004f88 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	2b64      	cmp	r3, #100	; 0x64
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e1fa      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005e16:	4b5d      	ldr	r3, [pc, #372]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0f0      	beq.n	8005e04 <HAL_RCC_OscConfig+0xe4>
 8005e22:	e014      	b.n	8005e4e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e24:	f7ff f8b0 	bl	8004f88 <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e2a:	e008      	b.n	8005e3e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e2c:	f7ff f8ac 	bl	8004f88 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b64      	cmp	r3, #100	; 0x64
 8005e38:	d901      	bls.n	8005e3e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005e3a:	2303      	movs	r3, #3
 8005e3c:	e1e6      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005e3e:	4b53      	ldr	r3, [pc, #332]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d1f0      	bne.n	8005e2c <HAL_RCC_OscConfig+0x10c>
 8005e4a:	e000      	b.n	8005e4e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f003 0302 	and.w	r3, r3, #2
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d063      	beq.n	8005f22 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e5a:	4b4c      	ldr	r3, [pc, #304]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f003 030c 	and.w	r3, r3, #12
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00b      	beq.n	8005e7e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005e66:	4b49      	ldr	r3, [pc, #292]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
 8005e6e:	2b08      	cmp	r3, #8
 8005e70:	d11c      	bne.n	8005eac <HAL_RCC_OscConfig+0x18c>
 8005e72:	4b46      	ldr	r3, [pc, #280]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d116      	bne.n	8005eac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e7e:	4b43      	ldr	r3, [pc, #268]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0302 	and.w	r3, r3, #2
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d005      	beq.n	8005e96 <HAL_RCC_OscConfig+0x176>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d001      	beq.n	8005e96 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e1ba      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e96:	4b3d      	ldr	r3, [pc, #244]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	00db      	lsls	r3, r3, #3
 8005ea4:	4939      	ldr	r1, [pc, #228]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005eaa:	e03a      	b.n	8005f22 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d020      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005eb4:	4b36      	ldr	r3, [pc, #216]	; (8005f90 <HAL_RCC_OscConfig+0x270>)
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eba:	f7ff f865 	bl	8004f88 <HAL_GetTick>
 8005ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ec2:	f7ff f861 	bl	8004f88 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e19b      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ed4:	4b2d      	ldr	r3, [pc, #180]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0302 	and.w	r3, r3, #2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0f0      	beq.n	8005ec2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ee0:	4b2a      	ldr	r3, [pc, #168]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	695b      	ldr	r3, [r3, #20]
 8005eec:	00db      	lsls	r3, r3, #3
 8005eee:	4927      	ldr	r1, [pc, #156]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	600b      	str	r3, [r1, #0]
 8005ef4:	e015      	b.n	8005f22 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ef6:	4b26      	ldr	r3, [pc, #152]	; (8005f90 <HAL_RCC_OscConfig+0x270>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005efc:	f7ff f844 	bl	8004f88 <HAL_GetTick>
 8005f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f02:	e008      	b.n	8005f16 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f04:	f7ff f840 	bl	8004f88 <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d901      	bls.n	8005f16 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e17a      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005f16:	4b1d      	ldr	r3, [pc, #116]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0302 	and.w	r3, r3, #2
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f0      	bne.n	8005f04 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d03a      	beq.n	8005fa4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d019      	beq.n	8005f6a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005f36:	4b17      	ldr	r3, [pc, #92]	; (8005f94 <HAL_RCC_OscConfig+0x274>)
 8005f38:	2201      	movs	r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f3c:	f7ff f824 	bl	8004f88 <HAL_GetTick>
 8005f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f42:	e008      	b.n	8005f56 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f44:	f7ff f820 	bl	8004f88 <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d901      	bls.n	8005f56 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005f52:	2303      	movs	r3, #3
 8005f54:	e15a      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f56:	4b0d      	ldr	r3, [pc, #52]	; (8005f8c <HAL_RCC_OscConfig+0x26c>)
 8005f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d0f0      	beq.n	8005f44 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005f62:	2001      	movs	r0, #1
 8005f64:	f000 fac6 	bl	80064f4 <RCC_Delay>
 8005f68:	e01c      	b.n	8005fa4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f6a:	4b0a      	ldr	r3, [pc, #40]	; (8005f94 <HAL_RCC_OscConfig+0x274>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f70:	f7ff f80a 	bl	8004f88 <HAL_GetTick>
 8005f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f76:	e00f      	b.n	8005f98 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f78:	f7ff f806 	bl	8004f88 <HAL_GetTick>
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d908      	bls.n	8005f98 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005f86:	2303      	movs	r3, #3
 8005f88:	e140      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>
 8005f8a:	bf00      	nop
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	42420000 	.word	0x42420000
 8005f94:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f98:	4b9e      	ldr	r3, [pc, #632]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e9      	bne.n	8005f78 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	f000 80a6 	beq.w	80060fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fb6:	4b97      	ldr	r3, [pc, #604]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10d      	bne.n	8005fde <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fc2:	4b94      	ldr	r3, [pc, #592]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	4a93      	ldr	r2, [pc, #588]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 8005fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	61d3      	str	r3, [r2, #28]
 8005fce:	4b91      	ldr	r3, [pc, #580]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fd6:	60bb      	str	r3, [r7, #8]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fde:	4b8e      	ldr	r3, [pc, #568]	; (8006218 <HAL_RCC_OscConfig+0x4f8>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d118      	bne.n	800601c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fea:	4b8b      	ldr	r3, [pc, #556]	; (8006218 <HAL_RCC_OscConfig+0x4f8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a8a      	ldr	r2, [pc, #552]	; (8006218 <HAL_RCC_OscConfig+0x4f8>)
 8005ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ff6:	f7fe ffc7 	bl	8004f88 <HAL_GetTick>
 8005ffa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ffc:	e008      	b.n	8006010 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ffe:	f7fe ffc3 	bl	8004f88 <HAL_GetTick>
 8006002:	4602      	mov	r2, r0
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	2b64      	cmp	r3, #100	; 0x64
 800600a:	d901      	bls.n	8006010 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800600c:	2303      	movs	r3, #3
 800600e:	e0fd      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006010:	4b81      	ldr	r3, [pc, #516]	; (8006218 <HAL_RCC_OscConfig+0x4f8>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006018:	2b00      	cmp	r3, #0
 800601a:	d0f0      	beq.n	8005ffe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d106      	bne.n	8006032 <HAL_RCC_OscConfig+0x312>
 8006024:	4b7b      	ldr	r3, [pc, #492]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 8006026:	6a1b      	ldr	r3, [r3, #32]
 8006028:	4a7a      	ldr	r2, [pc, #488]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 800602a:	f043 0301 	orr.w	r3, r3, #1
 800602e:	6213      	str	r3, [r2, #32]
 8006030:	e02d      	b.n	800608e <HAL_RCC_OscConfig+0x36e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	68db      	ldr	r3, [r3, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10c      	bne.n	8006054 <HAL_RCC_OscConfig+0x334>
 800603a:	4b76      	ldr	r3, [pc, #472]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	4a75      	ldr	r2, [pc, #468]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 8006040:	f023 0301 	bic.w	r3, r3, #1
 8006044:	6213      	str	r3, [r2, #32]
 8006046:	4b73      	ldr	r3, [pc, #460]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	4a72      	ldr	r2, [pc, #456]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 800604c:	f023 0304 	bic.w	r3, r3, #4
 8006050:	6213      	str	r3, [r2, #32]
 8006052:	e01c      	b.n	800608e <HAL_RCC_OscConfig+0x36e>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	2b05      	cmp	r3, #5
 800605a:	d10c      	bne.n	8006076 <HAL_RCC_OscConfig+0x356>
 800605c:	4b6d      	ldr	r3, [pc, #436]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 800605e:	6a1b      	ldr	r3, [r3, #32]
 8006060:	4a6c      	ldr	r2, [pc, #432]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 8006062:	f043 0304 	orr.w	r3, r3, #4
 8006066:	6213      	str	r3, [r2, #32]
 8006068:	4b6a      	ldr	r3, [pc, #424]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	4a69      	ldr	r2, [pc, #420]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 800606e:	f043 0301 	orr.w	r3, r3, #1
 8006072:	6213      	str	r3, [r2, #32]
 8006074:	e00b      	b.n	800608e <HAL_RCC_OscConfig+0x36e>
 8006076:	4b67      	ldr	r3, [pc, #412]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	4a66      	ldr	r2, [pc, #408]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 800607c:	f023 0301 	bic.w	r3, r3, #1
 8006080:	6213      	str	r3, [r2, #32]
 8006082:	4b64      	ldr	r3, [pc, #400]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	4a63      	ldr	r2, [pc, #396]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 8006088:	f023 0304 	bic.w	r3, r3, #4
 800608c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d015      	beq.n	80060c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006096:	f7fe ff77 	bl	8004f88 <HAL_GetTick>
 800609a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800609c:	e00a      	b.n	80060b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800609e:	f7fe ff73 	bl	8004f88 <HAL_GetTick>
 80060a2:	4602      	mov	r2, r0
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	1ad3      	subs	r3, r2, r3
 80060a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d901      	bls.n	80060b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80060b0:	2303      	movs	r3, #3
 80060b2:	e0ab      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80060b4:	4b57      	ldr	r3, [pc, #348]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	f003 0302 	and.w	r3, r3, #2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d0ee      	beq.n	800609e <HAL_RCC_OscConfig+0x37e>
 80060c0:	e014      	b.n	80060ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060c2:	f7fe ff61 	bl	8004f88 <HAL_GetTick>
 80060c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060c8:	e00a      	b.n	80060e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060ca:	f7fe ff5d 	bl	8004f88 <HAL_GetTick>
 80060ce:	4602      	mov	r2, r0
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	1ad3      	subs	r3, r2, r3
 80060d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80060d8:	4293      	cmp	r3, r2
 80060da:	d901      	bls.n	80060e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e095      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060e0:	4b4c      	ldr	r3, [pc, #304]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 80060e2:	6a1b      	ldr	r3, [r3, #32]
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1ee      	bne.n	80060ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80060ec:	7dfb      	ldrb	r3, [r7, #23]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d105      	bne.n	80060fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060f2:	4b48      	ldr	r3, [pc, #288]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	4a47      	ldr	r2, [pc, #284]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 80060f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 8081 	beq.w	800620a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006108:	4b42      	ldr	r3, [pc, #264]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	f003 030c 	and.w	r3, r3, #12
 8006110:	2b08      	cmp	r3, #8
 8006112:	d061      	beq.n	80061d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69db      	ldr	r3, [r3, #28]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d146      	bne.n	80061aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800611c:	4b3f      	ldr	r3, [pc, #252]	; (800621c <HAL_RCC_OscConfig+0x4fc>)
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006122:	f7fe ff31 	bl	8004f88 <HAL_GetTick>
 8006126:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006128:	e008      	b.n	800613c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800612a:	f7fe ff2d 	bl	8004f88 <HAL_GetTick>
 800612e:	4602      	mov	r2, r0
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	1ad3      	subs	r3, r2, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	d901      	bls.n	800613c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8006138:	2303      	movs	r3, #3
 800613a:	e067      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800613c:	4b35      	ldr	r3, [pc, #212]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1f0      	bne.n	800612a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006150:	d108      	bne.n	8006164 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006152:	4b30      	ldr	r3, [pc, #192]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	492d      	ldr	r1, [pc, #180]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 8006160:	4313      	orrs	r3, r2
 8006162:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006164:	4b2b      	ldr	r3, [pc, #172]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a19      	ldr	r1, [r3, #32]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	430b      	orrs	r3, r1
 8006176:	4927      	ldr	r1, [pc, #156]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 8006178:	4313      	orrs	r3, r2
 800617a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800617c:	4b27      	ldr	r3, [pc, #156]	; (800621c <HAL_RCC_OscConfig+0x4fc>)
 800617e:	2201      	movs	r2, #1
 8006180:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006182:	f7fe ff01 	bl	8004f88 <HAL_GetTick>
 8006186:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006188:	e008      	b.n	800619c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800618a:	f7fe fefd 	bl	8004f88 <HAL_GetTick>
 800618e:	4602      	mov	r2, r0
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	1ad3      	subs	r3, r2, r3
 8006194:	2b02      	cmp	r3, #2
 8006196:	d901      	bls.n	800619c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e037      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800619c:	4b1d      	ldr	r3, [pc, #116]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d0f0      	beq.n	800618a <HAL_RCC_OscConfig+0x46a>
 80061a8:	e02f      	b.n	800620a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061aa:	4b1c      	ldr	r3, [pc, #112]	; (800621c <HAL_RCC_OscConfig+0x4fc>)
 80061ac:	2200      	movs	r2, #0
 80061ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061b0:	f7fe feea 	bl	8004f88 <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b8:	f7fe fee6 	bl	8004f88 <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e020      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80061ca:	4b12      	ldr	r3, [pc, #72]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCC_OscConfig+0x498>
 80061d6:	e018      	b.n	800620a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d101      	bne.n	80061e4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e013      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80061e4:	4b0b      	ldr	r3, [pc, #44]	; (8006214 <HAL_RCC_OscConfig+0x4f4>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d106      	bne.n	8006206 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006202:	429a      	cmp	r2, r3
 8006204:	d001      	beq.n	800620a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e000      	b.n	800620c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	40021000 	.word	0x40021000
 8006218:	40007000 	.word	0x40007000
 800621c:	42420060 	.word	0x42420060

08006220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d101      	bne.n	8006234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	e0d0      	b.n	80063d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006234:	4b6a      	ldr	r3, [pc, #424]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f003 0307 	and.w	r3, r3, #7
 800623c:	683a      	ldr	r2, [r7, #0]
 800623e:	429a      	cmp	r2, r3
 8006240:	d910      	bls.n	8006264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006242:	4b67      	ldr	r3, [pc, #412]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f023 0207 	bic.w	r2, r3, #7
 800624a:	4965      	ldr	r1, [pc, #404]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	4313      	orrs	r3, r2
 8006250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006252:	4b63      	ldr	r3, [pc, #396]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0307 	and.w	r3, r3, #7
 800625a:	683a      	ldr	r2, [r7, #0]
 800625c:	429a      	cmp	r2, r3
 800625e:	d001      	beq.n	8006264 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e0b8      	b.n	80063d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d020      	beq.n	80062b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d005      	beq.n	8006288 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800627c:	4b59      	ldr	r3, [pc, #356]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	4a58      	ldr	r2, [pc, #352]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006282:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006286:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f003 0308 	and.w	r3, r3, #8
 8006290:	2b00      	cmp	r3, #0
 8006292:	d005      	beq.n	80062a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006294:	4b53      	ldr	r3, [pc, #332]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	4a52      	ldr	r2, [pc, #328]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 800629a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800629e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062a0:	4b50      	ldr	r3, [pc, #320]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	494d      	ldr	r1, [pc, #308]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d040      	beq.n	8006340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d107      	bne.n	80062d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062c6:	4b47      	ldr	r3, [pc, #284]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d115      	bne.n	80062fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e07f      	b.n	80063d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	2b02      	cmp	r3, #2
 80062dc:	d107      	bne.n	80062ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062de:	4b41      	ldr	r3, [pc, #260]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d109      	bne.n	80062fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	e073      	b.n	80063d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062ee:	4b3d      	ldr	r3, [pc, #244]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d101      	bne.n	80062fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e06b      	b.n	80063d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062fe:	4b39      	ldr	r3, [pc, #228]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f023 0203 	bic.w	r2, r3, #3
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	4936      	ldr	r1, [pc, #216]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 800630c:	4313      	orrs	r3, r2
 800630e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006310:	f7fe fe3a 	bl	8004f88 <HAL_GetTick>
 8006314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006316:	e00a      	b.n	800632e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006318:	f7fe fe36 	bl	8004f88 <HAL_GetTick>
 800631c:	4602      	mov	r2, r0
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	1ad3      	subs	r3, r2, r3
 8006322:	f241 3288 	movw	r2, #5000	; 0x1388
 8006326:	4293      	cmp	r3, r2
 8006328:	d901      	bls.n	800632e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800632a:	2303      	movs	r3, #3
 800632c:	e053      	b.n	80063d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800632e:	4b2d      	ldr	r3, [pc, #180]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f003 020c 	and.w	r2, r3, #12
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	429a      	cmp	r2, r3
 800633e:	d1eb      	bne.n	8006318 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006340:	4b27      	ldr	r3, [pc, #156]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0307 	and.w	r3, r3, #7
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d210      	bcs.n	8006370 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800634e:	4b24      	ldr	r3, [pc, #144]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f023 0207 	bic.w	r2, r3, #7
 8006356:	4922      	ldr	r1, [pc, #136]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	4313      	orrs	r3, r2
 800635c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800635e:	4b20      	ldr	r3, [pc, #128]	; (80063e0 <HAL_RCC_ClockConfig+0x1c0>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f003 0307 	and.w	r3, r3, #7
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	429a      	cmp	r2, r3
 800636a:	d001      	beq.n	8006370 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e032      	b.n	80063d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d008      	beq.n	800638e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800637c:	4b19      	ldr	r3, [pc, #100]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	4916      	ldr	r1, [pc, #88]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 800638a:	4313      	orrs	r3, r2
 800638c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0308 	and.w	r3, r3, #8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d009      	beq.n	80063ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800639a:	4b12      	ldr	r3, [pc, #72]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	490e      	ldr	r1, [pc, #56]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 80063aa:	4313      	orrs	r3, r2
 80063ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063ae:	f000 f821 	bl	80063f4 <HAL_RCC_GetSysClockFreq>
 80063b2:	4601      	mov	r1, r0
 80063b4:	4b0b      	ldr	r3, [pc, #44]	; (80063e4 <HAL_RCC_ClockConfig+0x1c4>)
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	091b      	lsrs	r3, r3, #4
 80063ba:	f003 030f 	and.w	r3, r3, #15
 80063be:	4a0a      	ldr	r2, [pc, #40]	; (80063e8 <HAL_RCC_ClockConfig+0x1c8>)
 80063c0:	5cd3      	ldrb	r3, [r2, r3]
 80063c2:	fa21 f303 	lsr.w	r3, r1, r3
 80063c6:	4a09      	ldr	r2, [pc, #36]	; (80063ec <HAL_RCC_ClockConfig+0x1cc>)
 80063c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80063ca:	4b09      	ldr	r3, [pc, #36]	; (80063f0 <HAL_RCC_ClockConfig+0x1d0>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4618      	mov	r0, r3
 80063d0:	f7fe fd98 	bl	8004f04 <HAL_InitTick>

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	40022000 	.word	0x40022000
 80063e4:	40021000 	.word	0x40021000
 80063e8:	0800bdf4 	.word	0x0800bdf4
 80063ec:	2000000c 	.word	0x2000000c
 80063f0:	20000010 	.word	0x20000010

080063f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063f4:	b490      	push	{r4, r7}
 80063f6:	b08a      	sub	sp, #40	; 0x28
 80063f8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80063fa:	4b2a      	ldr	r3, [pc, #168]	; (80064a4 <HAL_RCC_GetSysClockFreq+0xb0>)
 80063fc:	1d3c      	adds	r4, r7, #4
 80063fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006404:	4b28      	ldr	r3, [pc, #160]	; (80064a8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006406:	881b      	ldrh	r3, [r3, #0]
 8006408:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	61fb      	str	r3, [r7, #28]
 800640e:	2300      	movs	r3, #0
 8006410:	61bb      	str	r3, [r7, #24]
 8006412:	2300      	movs	r3, #0
 8006414:	627b      	str	r3, [r7, #36]	; 0x24
 8006416:	2300      	movs	r3, #0
 8006418:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800641a:	2300      	movs	r3, #0
 800641c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800641e:	4b23      	ldr	r3, [pc, #140]	; (80064ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	f003 030c 	and.w	r3, r3, #12
 800642a:	2b04      	cmp	r3, #4
 800642c:	d002      	beq.n	8006434 <HAL_RCC_GetSysClockFreq+0x40>
 800642e:	2b08      	cmp	r3, #8
 8006430:	d003      	beq.n	800643a <HAL_RCC_GetSysClockFreq+0x46>
 8006432:	e02d      	b.n	8006490 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006434:	4b1e      	ldr	r3, [pc, #120]	; (80064b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006436:	623b      	str	r3, [r7, #32]
      break;
 8006438:	e02d      	b.n	8006496 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	0c9b      	lsrs	r3, r3, #18
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006446:	4413      	add	r3, r2
 8006448:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800644c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d013      	beq.n	8006480 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006458:	4b14      	ldr	r3, [pc, #80]	; (80064ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	0c5b      	lsrs	r3, r3, #17
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006466:	4413      	add	r3, r2
 8006468:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800646c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	4a0f      	ldr	r2, [pc, #60]	; (80064b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006472:	fb02 f203 	mul.w	r2, r2, r3
 8006476:	69bb      	ldr	r3, [r7, #24]
 8006478:	fbb2 f3f3 	udiv	r3, r2, r3
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
 800647e:	e004      	b.n	800648a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	4a0c      	ldr	r2, [pc, #48]	; (80064b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006484:	fb02 f303 	mul.w	r3, r2, r3
 8006488:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	623b      	str	r3, [r7, #32]
      break;
 800648e:	e002      	b.n	8006496 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006490:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006492:	623b      	str	r3, [r7, #32]
      break;
 8006494:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006496:	6a3b      	ldr	r3, [r7, #32]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3728      	adds	r7, #40	; 0x28
 800649c:	46bd      	mov	sp, r7
 800649e:	bc90      	pop	{r4, r7}
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop
 80064a4:	0800768c 	.word	0x0800768c
 80064a8:	0800769c 	.word	0x0800769c
 80064ac:	40021000 	.word	0x40021000
 80064b0:	007a1200 	.word	0x007a1200
 80064b4:	003d0900 	.word	0x003d0900

080064b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064b8:	b480      	push	{r7}
 80064ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064bc:	4b02      	ldr	r3, [pc, #8]	; (80064c8 <HAL_RCC_GetHCLKFreq+0x10>)
 80064be:	681b      	ldr	r3, [r3, #0]
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bc80      	pop	{r7}
 80064c6:	4770      	bx	lr
 80064c8:	2000000c 	.word	0x2000000c

080064cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80064d0:	f7ff fff2 	bl	80064b8 <HAL_RCC_GetHCLKFreq>
 80064d4:	4601      	mov	r1, r0
 80064d6:	4b05      	ldr	r3, [pc, #20]	; (80064ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	0adb      	lsrs	r3, r3, #11
 80064dc:	f003 0307 	and.w	r3, r3, #7
 80064e0:	4a03      	ldr	r2, [pc, #12]	; (80064f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80064e2:	5cd3      	ldrb	r3, [r2, r3]
 80064e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	40021000 	.word	0x40021000
 80064f0:	0800be04 	.word	0x0800be04

080064f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80064fc:	4b0a      	ldr	r3, [pc, #40]	; (8006528 <RCC_Delay+0x34>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a0a      	ldr	r2, [pc, #40]	; (800652c <RCC_Delay+0x38>)
 8006502:	fba2 2303 	umull	r2, r3, r2, r3
 8006506:	0a5b      	lsrs	r3, r3, #9
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	fb02 f303 	mul.w	r3, r2, r3
 800650e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006510:	bf00      	nop
  }
  while (Delay --);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	1e5a      	subs	r2, r3, #1
 8006516:	60fa      	str	r2, [r7, #12]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1f9      	bne.n	8006510 <RCC_Delay+0x1c>
}
 800651c:	bf00      	nop
 800651e:	3714      	adds	r7, #20
 8006520:	46bd      	mov	sp, r7
 8006522:	bc80      	pop	{r7}
 8006524:	4770      	bx	lr
 8006526:	bf00      	nop
 8006528:	2000000c 	.word	0x2000000c
 800652c:	10624dd3 	.word	0x10624dd3

08006530 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b086      	sub	sp, #24
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	2b00      	cmp	r3, #0
 800654a:	d07d      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800654c:	2300      	movs	r3, #0
 800654e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006550:	4b4f      	ldr	r3, [pc, #316]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10d      	bne.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800655c:	4b4c      	ldr	r3, [pc, #304]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	4a4b      	ldr	r2, [pc, #300]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006566:	61d3      	str	r3, [r2, #28]
 8006568:	4b49      	ldr	r3, [pc, #292]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006570:	60bb      	str	r3, [r7, #8]
 8006572:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006574:	2301      	movs	r3, #1
 8006576:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006578:	4b46      	ldr	r3, [pc, #280]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006580:	2b00      	cmp	r3, #0
 8006582:	d118      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006584:	4b43      	ldr	r3, [pc, #268]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a42      	ldr	r2, [pc, #264]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800658a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800658e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006590:	f7fe fcfa 	bl	8004f88 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006596:	e008      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006598:	f7fe fcf6 	bl	8004f88 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	2b64      	cmp	r3, #100	; 0x64
 80065a4:	d901      	bls.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e06d      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065aa:	4b3a      	ldr	r3, [pc, #232]	; (8006694 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d0f0      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80065b6:	4b36      	ldr	r3, [pc, #216]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065b8:	6a1b      	ldr	r3, [r3, #32]
 80065ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065be:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d02e      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d027      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80065d4:	4b2e      	ldr	r3, [pc, #184]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065dc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80065de:	4b2e      	ldr	r3, [pc, #184]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80065e0:	2201      	movs	r2, #1
 80065e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80065e4:	4b2c      	ldr	r3, [pc, #176]	; (8006698 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80065e6:	2200      	movs	r2, #0
 80065e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80065ea:	4a29      	ldr	r2, [pc, #164]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f003 0301 	and.w	r3, r3, #1
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d014      	beq.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065fa:	f7fe fcc5 	bl	8004f88 <HAL_GetTick>
 80065fe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006600:	e00a      	b.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006602:	f7fe fcc1 	bl	8004f88 <HAL_GetTick>
 8006606:	4602      	mov	r2, r0
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	1ad3      	subs	r3, r2, r3
 800660c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006610:	4293      	cmp	r3, r2
 8006612:	d901      	bls.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e036      	b.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006618:	4b1d      	ldr	r3, [pc, #116]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800661a:	6a1b      	ldr	r3, [r3, #32]
 800661c:	f003 0302 	and.w	r3, r3, #2
 8006620:	2b00      	cmp	r3, #0
 8006622:	d0ee      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006624:	4b1a      	ldr	r3, [pc, #104]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006626:	6a1b      	ldr	r3, [r3, #32]
 8006628:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	4917      	ldr	r1, [pc, #92]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006632:	4313      	orrs	r3, r2
 8006634:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006636:	7dfb      	ldrb	r3, [r7, #23]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d105      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800663c:	4b14      	ldr	r3, [pc, #80]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800663e:	69db      	ldr	r3, [r3, #28]
 8006640:	4a13      	ldr	r2, [pc, #76]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006642:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006646:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d008      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006654:	4b0e      	ldr	r3, [pc, #56]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	490b      	ldr	r1, [pc, #44]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006662:	4313      	orrs	r3, r2
 8006664:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0310 	and.w	r3, r3, #16
 800666e:	2b00      	cmp	r3, #0
 8006670:	d008      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006672:	4b07      	ldr	r3, [pc, #28]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	4904      	ldr	r1, [pc, #16]	; (8006690 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006680:	4313      	orrs	r3, r2
 8006682:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	40021000 	.word	0x40021000
 8006694:	40007000 	.word	0x40007000
 8006698:	42420440 	.word	0x42420440

0800669c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800669c:	b590      	push	{r4, r7, lr}
 800669e:	b08d      	sub	sp, #52	; 0x34
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80066a4:	4b6b      	ldr	r3, [pc, #428]	; (8006854 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>)
 80066a6:	f107 040c 	add.w	r4, r7, #12
 80066aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80066ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80066b0:	4b69      	ldr	r3, [pc, #420]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>)
 80066b2:	881b      	ldrh	r3, [r3, #0]
 80066b4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
 80066ba:	2300      	movs	r3, #0
 80066bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066be:	2300      	movs	r3, #0
 80066c0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80066c2:	2300      	movs	r3, #0
 80066c4:	61fb      	str	r3, [r7, #28]
 80066c6:	2300      	movs	r3, #0
 80066c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	2b0f      	cmp	r3, #15
 80066d0:	f200 80b6 	bhi.w	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 80066d4:	a201      	add	r2, pc, #4	; (adr r2, 80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x40>)
 80066d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066da:	bf00      	nop
 80066dc:	080067bf 	.word	0x080067bf
 80066e0:	08006825 	.word	0x08006825
 80066e4:	08006841 	.word	0x08006841
 80066e8:	080067af 	.word	0x080067af
 80066ec:	08006841 	.word	0x08006841
 80066f0:	08006841 	.word	0x08006841
 80066f4:	08006841 	.word	0x08006841
 80066f8:	080067b7 	.word	0x080067b7
 80066fc:	08006841 	.word	0x08006841
 8006700:	08006841 	.word	0x08006841
 8006704:	08006841 	.word	0x08006841
 8006708:	08006841 	.word	0x08006841
 800670c:	08006841 	.word	0x08006841
 8006710:	08006841 	.word	0x08006841
 8006714:	08006841 	.word	0x08006841
 8006718:	0800671d 	.word	0x0800671d
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_USB:
    {
      /* Get RCC configuration ------------------------------------------------------*/
      temp_reg = RCC->CFGR;
 800671c:	4b4f      	ldr	r3, [pc, #316]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	61fb      	str	r3, [r7, #28]

      /* Check if PLL is enabled */
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006722:	4b4e      	ldr	r3, [pc, #312]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 808a 	beq.w	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
      {
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006730:	69fb      	ldr	r3, [r7, #28]
 8006732:	0c9b      	lsrs	r3, r3, #18
 8006734:	f003 030f 	and.w	r3, r3, #15
 8006738:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800673c:	4413      	add	r3, r2
 800673e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006742:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006744:	69fb      	ldr	r3, [r7, #28]
 8006746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800674a:	2b00      	cmp	r3, #0
 800674c:	d018      	beq.n	8006780 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
        {
#if defined(STM32F105xC) || defined(STM32F107xC) || defined(STM32F100xB)\
 || defined(STM32F100xE)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800674e:	4b43      	ldr	r3, [pc, #268]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	0c5b      	lsrs	r3, r3, #17
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800675c:	4413      	add	r3, r2
 800675e:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006762:	627b      	str	r3, [r7, #36]	; 0x24
          if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
          {
            pllclk = pllclk / 2;
          }
#else
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00d      	beq.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          {
            /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800676e:	4a3c      	ldr	r2, [pc, #240]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>)
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	fbb2 f2f3 	udiv	r2, r2, r3
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	fb02 f303 	mul.w	r3, r2, r3
 800677c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800677e:	e004      	b.n	800678a <HAL_RCCEx_GetPeriphCLKFreq+0xee>
#endif /* STM32F105xC || STM32F107xC */
        }
        else
        {
          /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	4a38      	ldr	r2, [pc, #224]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0x1c8>)
 8006784:	fb02 f303 	mul.w	r3, r2, r3
 8006788:	62fb      	str	r3, [r7, #44]	; 0x2c
          /* Prescaler of 3 selected for USB */
          frequency = (2 * pllclk) / 3;
        }
#else
        /* USBCLK = PLLCLK / USB prescaler */
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800678a:	4b34      	ldr	r3, [pc, #208]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006796:	d102      	bne.n	800679e <HAL_RCCEx_GetPeriphCLKFreq+0x102>
        {
          /* No prescaler selected for USB */
          frequency = pllclk;
 8006798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679a:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Prescaler of 1.5 selected for USB */
          frequency = (pllclk * 2) / 3;
        }
#endif
      }
      break;
 800679c:	e052      	b.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          frequency = (pllclk * 2) / 3;
 800679e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067a0:	005b      	lsls	r3, r3, #1
 80067a2:	4a31      	ldr	r2, [pc, #196]	; (8006868 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>)
 80067a4:	fba2 2303 	umull	r2, r3, r2, r3
 80067a8:	085b      	lsrs	r3, r3, #1
 80067aa:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80067ac:	e04a      	b.n	8006844 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
#if defined(STM32F103xE) || defined(STM32F103xG) || defined(STM32F105xC) || defined(STM32F107xC)
    case RCC_PERIPHCLK_I2S2:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S2 */
      frequency = HAL_RCC_GetSysClockFreq();
 80067ae:	f7ff fe21 	bl	80063f4 <HAL_RCC_GetSysClockFreq>
 80067b2:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80067b4:	e049      	b.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    case RCC_PERIPHCLK_I2S3:
    {
#if defined(STM32F103xE) || defined(STM32F103xG)
      /* SYSCLK used as source clock for I2S3 */
      frequency = HAL_RCC_GetSysClockFreq();
 80067b6:	f7ff fe1d 	bl	80063f4 <HAL_RCC_GetSysClockFreq>
 80067ba:	62b8      	str	r0, [r7, #40]	; 0x28
          pll3mul = ((RCC->CFGR2 & RCC_CFGR2_PLL3MUL) >> RCC_CFGR2_PLL3MUL_Pos) + 2;
          frequency = (uint32_t)(2 * ((HSE_VALUE / prediv2) * pll3mul));
        }
      }
#endif /* STM32F103xE || STM32F103xG */
      break;
 80067bc:	e045      	b.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
#endif /* STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */
    case RCC_PERIPHCLK_RTC:
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;
 80067be:	4b27      	ldr	r3, [pc, #156]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	61fb      	str	r3, [r7, #28]

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80067c4:	69fb      	ldr	r3, [r7, #28]
 80067c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ce:	d108      	bne.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      {
        frequency = LSE_VALUE;
 80067da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067de:	62bb      	str	r3, [r7, #40]	; 0x28
 80067e0:	e01f      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ec:	d109      	bne.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80067ee:	4b1b      	ldr	r3, [pc, #108]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 80067f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067f2:	f003 0302 	and.w	r3, r3, #2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d003      	beq.n	8006802 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      {
        frequency = LSI_VALUE;
 80067fa:	f649 4340 	movw	r3, #40000	; 0x9c40
 80067fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8006800:	e00f      	b.n	8006822 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800680c:	d11c      	bne.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 800680e:	4b13      	ldr	r3, [pc, #76]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d016      	beq.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
      {
        frequency = HSE_VALUE / 128U;
 800681a:	f24f 4324 	movw	r3, #62500	; 0xf424
 800681e:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Clock not enabled for RTC*/
      else
      {
        /* nothing to do: frequency already initialized to 0U */
      }
      break;
 8006820:	e012      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8006822:	e011      	b.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
    }
    case RCC_PERIPHCLK_ADC:
    {
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8006824:	f7ff fe52 	bl	80064cc <HAL_RCC_GetPCLK2Freq>
 8006828:	4602      	mov	r2, r0
 800682a:	4b0c      	ldr	r3, [pc, #48]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>)
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	0b9b      	lsrs	r3, r3, #14
 8006830:	f003 0303 	and.w	r3, r3, #3
 8006834:	3301      	adds	r3, #1
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	fbb2 f3f3 	udiv	r3, r2, r3
 800683c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800683e:	e004      	b.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
    }
    default:
    {
      break;
 8006840:	bf00      	nop
 8006842:	e002      	b.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8006844:	bf00      	nop
 8006846:	e000      	b.n	800684a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
      break;
 8006848:	bf00      	nop
    }
  }
  return (frequency);
 800684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800684c:	4618      	mov	r0, r3
 800684e:	3734      	adds	r7, #52	; 0x34
 8006850:	46bd      	mov	sp, r7
 8006852:	bd90      	pop	{r4, r7, pc}
 8006854:	080076a0 	.word	0x080076a0
 8006858:	080076b0 	.word	0x080076b0
 800685c:	40021000 	.word	0x40021000
 8006860:	007a1200 	.word	0x007a1200
 8006864:	003d0900 	.word	0x003d0900
 8006868:	aaaaaaab 	.word	0xaaaaaaab

0800686c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing, FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e038      	b.n	80068f4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f7fe fa90 	bl	8004dbc <HAL_SRAM_MspInit>
#endif
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	3308      	adds	r3, #8
 80068a4:	4619      	mov	r1, r3
 80068a6:	4610      	mov	r0, r2
 80068a8:	f000 fd68 	bl	800737c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6818      	ldr	r0, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	461a      	mov	r2, r3
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	f000 fdb8 	bl	800742c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6858      	ldr	r0, [r3, #4]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689a      	ldr	r2, [r3, #8]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c8:	6879      	ldr	r1, [r7, #4]
 80068ca:	f000 fde3 	bl	8007494 <FSMC_NORSRAM_Extended_Timing_Init>

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	6892      	ldr	r2, [r2, #8]
 80068d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	6892      	ldr	r2, [r2, #8]
 80068e2:	f041 0101 	orr.w	r1, r1, #1
 80068e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80068f2:	2300      	movs	r3, #0
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d101      	bne.n	800690e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e01d      	b.n	800694a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006914:	b2db      	uxtb	r3, r3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d106      	bne.n	8006928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fe f9a6 	bl	8004c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3304      	adds	r3, #4
 8006938:	4619      	mov	r1, r3
 800693a:	4610      	mov	r0, r2
 800693c:	f000 f9fa 	bl	8006d34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2201      	movs	r2, #1
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006952:	b580      	push	{r7, lr}
 8006954:	b082      	sub	sp, #8
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d101      	bne.n	8006964 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e01d      	b.n	80069a0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d106      	bne.n	800697e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f815 	bl	80069a8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2202      	movs	r2, #2
 8006982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	3304      	adds	r3, #4
 800698e:	4619      	mov	r1, r3
 8006990:	4610      	mov	r0, r2
 8006992:	f000 f9cf 	bl	8006d34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bc80      	pop	{r7}
 80069b8:	4770      	bx	lr
	...

080069bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2201      	movs	r2, #1
 80069cc:	6839      	ldr	r1, [r7, #0]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 fc6c 	bl	80072ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <HAL_TIM_PWM_Start+0x74>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d004      	beq.n	80069e8 <HAL_TIM_PWM_Start+0x2c>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a14      	ldr	r2, [pc, #80]	; (8006a34 <HAL_TIM_PWM_Start+0x78>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d101      	bne.n	80069ec <HAL_TIM_PWM_Start+0x30>
 80069e8:	2301      	movs	r3, #1
 80069ea:	e000      	b.n	80069ee <HAL_TIM_PWM_Start+0x32>
 80069ec:	2300      	movs	r3, #0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d007      	beq.n	8006a02 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	f003 0307 	and.w	r3, r3, #7
 8006a0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2b06      	cmp	r3, #6
 8006a12:	d007      	beq.n	8006a24 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40012c00 	.word	0x40012c00
 8006a34:	40013400 	.word	0x40013400

08006a38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e0b4      	b.n	8006bbc <HAL_TIM_PWM_ConfigChannel+0x184>
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2202      	movs	r2, #2
 8006a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b0c      	cmp	r3, #12
 8006a66:	f200 809f 	bhi.w	8006ba8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006a6a:	a201      	add	r2, pc, #4	; (adr r2, 8006a70 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a70:	08006aa5 	.word	0x08006aa5
 8006a74:	08006ba9 	.word	0x08006ba9
 8006a78:	08006ba9 	.word	0x08006ba9
 8006a7c:	08006ba9 	.word	0x08006ba9
 8006a80:	08006ae5 	.word	0x08006ae5
 8006a84:	08006ba9 	.word	0x08006ba9
 8006a88:	08006ba9 	.word	0x08006ba9
 8006a8c:	08006ba9 	.word	0x08006ba9
 8006a90:	08006b27 	.word	0x08006b27
 8006a94:	08006ba9 	.word	0x08006ba9
 8006a98:	08006ba9 	.word	0x08006ba9
 8006a9c:	08006ba9 	.word	0x08006ba9
 8006aa0:	08006b67 	.word	0x08006b67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68b9      	ldr	r1, [r7, #8]
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f000 f9bc 	bl	8006e28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	699a      	ldr	r2, [r3, #24]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0208 	orr.w	r2, r2, #8
 8006abe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699a      	ldr	r2, [r3, #24]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f022 0204 	bic.w	r2, r2, #4
 8006ace:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	6999      	ldr	r1, [r3, #24]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	691a      	ldr	r2, [r3, #16]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	619a      	str	r2, [r3, #24]
      break;
 8006ae2:	e062      	b.n	8006baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	68b9      	ldr	r1, [r7, #8]
 8006aea:	4618      	mov	r0, r3
 8006aec:	f000 fa0c 	bl	8006f08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699a      	ldr	r2, [r3, #24]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699a      	ldr	r2, [r3, #24]
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	6999      	ldr	r1, [r3, #24]
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	021a      	lsls	r2, r3, #8
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	430a      	orrs	r2, r1
 8006b22:	619a      	str	r2, [r3, #24]
      break;
 8006b24:	e041      	b.n	8006baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f000 fa5f 	bl	8006ff0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	69da      	ldr	r2, [r3, #28]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f042 0208 	orr.w	r2, r2, #8
 8006b40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	69da      	ldr	r2, [r3, #28]
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0204 	bic.w	r2, r2, #4
 8006b50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69d9      	ldr	r1, [r3, #28]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	691a      	ldr	r2, [r3, #16]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	61da      	str	r2, [r3, #28]
      break;
 8006b64:	e021      	b.n	8006baa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68b9      	ldr	r1, [r7, #8]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f000 fab3 	bl	80070d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	69da      	ldr	r2, [r3, #28]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	69da      	ldr	r2, [r3, #28]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	69d9      	ldr	r1, [r3, #28]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	691b      	ldr	r3, [r3, #16]
 8006b9c:	021a      	lsls	r2, r3, #8
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	61da      	str	r2, [r3, #28]
      break;
 8006ba6:	e000      	b.n	8006baa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006ba8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <HAL_TIM_ConfigClockSource+0x18>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e0a6      	b.n	8006d2a <HAL_TIM_ConfigClockSource+0x166>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689b      	ldr	r3, [r3, #8]
 8006bf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b40      	cmp	r3, #64	; 0x40
 8006c12:	d067      	beq.n	8006ce4 <HAL_TIM_ConfigClockSource+0x120>
 8006c14:	2b40      	cmp	r3, #64	; 0x40
 8006c16:	d80b      	bhi.n	8006c30 <HAL_TIM_ConfigClockSource+0x6c>
 8006c18:	2b10      	cmp	r3, #16
 8006c1a:	d073      	beq.n	8006d04 <HAL_TIM_ConfigClockSource+0x140>
 8006c1c:	2b10      	cmp	r3, #16
 8006c1e:	d802      	bhi.n	8006c26 <HAL_TIM_ConfigClockSource+0x62>
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d06f      	beq.n	8006d04 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006c24:	e078      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	d06c      	beq.n	8006d04 <HAL_TIM_ConfigClockSource+0x140>
 8006c2a:	2b30      	cmp	r3, #48	; 0x30
 8006c2c:	d06a      	beq.n	8006d04 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006c2e:	e073      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006c30:	2b70      	cmp	r3, #112	; 0x70
 8006c32:	d00d      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0x8c>
 8006c34:	2b70      	cmp	r3, #112	; 0x70
 8006c36:	d804      	bhi.n	8006c42 <HAL_TIM_ConfigClockSource+0x7e>
 8006c38:	2b50      	cmp	r3, #80	; 0x50
 8006c3a:	d033      	beq.n	8006ca4 <HAL_TIM_ConfigClockSource+0xe0>
 8006c3c:	2b60      	cmp	r3, #96	; 0x60
 8006c3e:	d041      	beq.n	8006cc4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006c40:	e06a      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c46:	d066      	beq.n	8006d16 <HAL_TIM_ConfigClockSource+0x152>
 8006c48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c4c:	d017      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006c4e:	e063      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6818      	ldr	r0, [r3, #0]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	6899      	ldr	r1, [r3, #8]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	68db      	ldr	r3, [r3, #12]
 8006c60:	f000 fb05 	bl	800726e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c72:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	609a      	str	r2, [r3, #8]
      break;
 8006c7c:	e04c      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6818      	ldr	r0, [r3, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	6899      	ldr	r1, [r3, #8]
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	68db      	ldr	r3, [r3, #12]
 8006c8e:	f000 faee 	bl	800726e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ca0:	609a      	str	r2, [r3, #8]
      break;
 8006ca2:	e039      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6818      	ldr	r0, [r3, #0]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	6859      	ldr	r1, [r3, #4]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	f000 fa65 	bl	8007180 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2150      	movs	r1, #80	; 0x50
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fabc 	bl	800723a <TIM_ITRx_SetConfig>
      break;
 8006cc2:	e029      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6818      	ldr	r0, [r3, #0]
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	6859      	ldr	r1, [r3, #4]
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	f000 fa83 	bl	80071dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	2160      	movs	r1, #96	; 0x60
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 faac 	bl	800723a <TIM_ITRx_SetConfig>
      break;
 8006ce2:	e019      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6818      	ldr	r0, [r3, #0]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	6859      	ldr	r1, [r3, #4]
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	f000 fa45 	bl	8007180 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2140      	movs	r1, #64	; 0x40
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fa9c 	bl	800723a <TIM_ITRx_SetConfig>
      break;
 8006d02:	e009      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4610      	mov	r0, r2
 8006d10:	f000 fa93 	bl	800723a <TIM_ITRx_SetConfig>
      break;
 8006d14:	e000      	b.n	8006d18 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006d16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
	...

08006d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a33      	ldr	r2, [pc, #204]	; (8006e14 <TIM_Base_SetConfig+0xe0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d013      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a32      	ldr	r2, [pc, #200]	; (8006e18 <TIM_Base_SetConfig+0xe4>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00f      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d5a:	d00b      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a2f      	ldr	r2, [pc, #188]	; (8006e1c <TIM_Base_SetConfig+0xe8>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d007      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a2e      	ldr	r2, [pc, #184]	; (8006e20 <TIM_Base_SetConfig+0xec>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d003      	beq.n	8006d74 <TIM_Base_SetConfig+0x40>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a2d      	ldr	r2, [pc, #180]	; (8006e24 <TIM_Base_SetConfig+0xf0>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d108      	bne.n	8006d86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a22      	ldr	r2, [pc, #136]	; (8006e14 <TIM_Base_SetConfig+0xe0>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d013      	beq.n	8006db6 <TIM_Base_SetConfig+0x82>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a21      	ldr	r2, [pc, #132]	; (8006e18 <TIM_Base_SetConfig+0xe4>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00f      	beq.n	8006db6 <TIM_Base_SetConfig+0x82>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d9c:	d00b      	beq.n	8006db6 <TIM_Base_SetConfig+0x82>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a1e      	ldr	r2, [pc, #120]	; (8006e1c <TIM_Base_SetConfig+0xe8>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d007      	beq.n	8006db6 <TIM_Base_SetConfig+0x82>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a1d      	ldr	r2, [pc, #116]	; (8006e20 <TIM_Base_SetConfig+0xec>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d003      	beq.n	8006db6 <TIM_Base_SetConfig+0x82>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a1c      	ldr	r2, [pc, #112]	; (8006e24 <TIM_Base_SetConfig+0xf0>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d108      	bne.n	8006dc8 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a09      	ldr	r2, [pc, #36]	; (8006e14 <TIM_Base_SetConfig+0xe0>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d003      	beq.n	8006dfc <TIM_Base_SetConfig+0xc8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a08      	ldr	r2, [pc, #32]	; (8006e18 <TIM_Base_SetConfig+0xe4>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d103      	bne.n	8006e04 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	615a      	str	r2, [r3, #20]
}
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bc80      	pop	{r7}
 8006e12:	4770      	bx	lr
 8006e14:	40012c00 	.word	0x40012c00
 8006e18:	40013400 	.word	0x40013400
 8006e1c:	40000400 	.word	0x40000400
 8006e20:	40000800 	.word	0x40000800
 8006e24:	40000c00 	.word	0x40000c00

08006e28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	f023 0201 	bic.w	r2, r3, #1
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0303 	bic.w	r3, r3, #3
 8006e5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f023 0302 	bic.w	r3, r3, #2
 8006e70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a20      	ldr	r2, [pc, #128]	; (8006f00 <TIM_OC1_SetConfig+0xd8>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d003      	beq.n	8006e8c <TIM_OC1_SetConfig+0x64>
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a1f      	ldr	r2, [pc, #124]	; (8006f04 <TIM_OC1_SetConfig+0xdc>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d10c      	bne.n	8006ea6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f023 0308 	bic.w	r3, r3, #8
 8006e92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	68db      	ldr	r3, [r3, #12]
 8006e98:	697a      	ldr	r2, [r7, #20]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f023 0304 	bic.w	r3, r3, #4
 8006ea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a15      	ldr	r2, [pc, #84]	; (8006f00 <TIM_OC1_SetConfig+0xd8>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d003      	beq.n	8006eb6 <TIM_OC1_SetConfig+0x8e>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a14      	ldr	r2, [pc, #80]	; (8006f04 <TIM_OC1_SetConfig+0xdc>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d111      	bne.n	8006eda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ebc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	695b      	ldr	r3, [r3, #20]
 8006eca:	693a      	ldr	r2, [r7, #16]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	697a      	ldr	r2, [r7, #20]
 8006ef2:	621a      	str	r2, [r3, #32]
}
 8006ef4:	bf00      	nop
 8006ef6:	371c      	adds	r7, #28
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bc80      	pop	{r7}
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	40012c00 	.word	0x40012c00
 8006f04:	40013400 	.word	0x40013400

08006f08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b087      	sub	sp, #28
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a1b      	ldr	r3, [r3, #32]
 8006f16:	f023 0210 	bic.w	r2, r3, #16
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	021b      	lsls	r3, r3, #8
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	f023 0320 	bic.w	r3, r3, #32
 8006f52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	011b      	lsls	r3, r3, #4
 8006f5a:	697a      	ldr	r2, [r7, #20]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a21      	ldr	r2, [pc, #132]	; (8006fe8 <TIM_OC2_SetConfig+0xe0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d003      	beq.n	8006f70 <TIM_OC2_SetConfig+0x68>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a20      	ldr	r2, [pc, #128]	; (8006fec <TIM_OC2_SetConfig+0xe4>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d10d      	bne.n	8006f8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	68db      	ldr	r3, [r3, #12]
 8006f7c:	011b      	lsls	r3, r3, #4
 8006f7e:	697a      	ldr	r2, [r7, #20]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a16      	ldr	r2, [pc, #88]	; (8006fe8 <TIM_OC2_SetConfig+0xe0>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d003      	beq.n	8006f9c <TIM_OC2_SetConfig+0x94>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a15      	ldr	r2, [pc, #84]	; (8006fec <TIM_OC2_SetConfig+0xe4>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d113      	bne.n	8006fc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006faa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	009b      	lsls	r3, r3, #2
 8006fb2:	693a      	ldr	r2, [r7, #16]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	685a      	ldr	r2, [r3, #4]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	621a      	str	r2, [r3, #32]
}
 8006fde:	bf00      	nop
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bc80      	pop	{r7}
 8006fe6:	4770      	bx	lr
 8006fe8:	40012c00 	.word	0x40012c00
 8006fec:	40013400 	.word	0x40013400

08006ff0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800701e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 0303 	bic.w	r3, r3, #3
 8007026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007038:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	021b      	lsls	r3, r3, #8
 8007040:	697a      	ldr	r2, [r7, #20]
 8007042:	4313      	orrs	r3, r2
 8007044:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a21      	ldr	r2, [pc, #132]	; (80070d0 <TIM_OC3_SetConfig+0xe0>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d003      	beq.n	8007056 <TIM_OC3_SetConfig+0x66>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a20      	ldr	r2, [pc, #128]	; (80070d4 <TIM_OC3_SetConfig+0xe4>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d10d      	bne.n	8007072 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800705c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	697a      	ldr	r2, [r7, #20]
 8007066:	4313      	orrs	r3, r2
 8007068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a16      	ldr	r2, [pc, #88]	; (80070d0 <TIM_OC3_SetConfig+0xe0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d003      	beq.n	8007082 <TIM_OC3_SetConfig+0x92>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a15      	ldr	r2, [pc, #84]	; (80070d4 <TIM_OC3_SetConfig+0xe4>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d113      	bne.n	80070aa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007088:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007090:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	011b      	lsls	r3, r3, #4
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	699b      	ldr	r3, [r3, #24]
 80070a2:	011b      	lsls	r3, r3, #4
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	685a      	ldr	r2, [r3, #4]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	697a      	ldr	r2, [r7, #20]
 80070c2:	621a      	str	r2, [r3, #32]
}
 80070c4:	bf00      	nop
 80070c6:	371c      	adds	r7, #28
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bc80      	pop	{r7}
 80070cc:	4770      	bx	lr
 80070ce:	bf00      	nop
 80070d0:	40012c00 	.word	0x40012c00
 80070d4:	40013400 	.word	0x40013400

080070d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070d8:	b480      	push	{r7}
 80070da:	b087      	sub	sp, #28
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	69db      	ldr	r3, [r3, #28]
 80070fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800710e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	021b      	lsls	r3, r3, #8
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	4313      	orrs	r3, r2
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007122:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	031b      	lsls	r3, r3, #12
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a11      	ldr	r2, [pc, #68]	; (8007178 <TIM_OC4_SetConfig+0xa0>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d003      	beq.n	8007140 <TIM_OC4_SetConfig+0x68>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a10      	ldr	r2, [pc, #64]	; (800717c <TIM_OC4_SetConfig+0xa4>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d109      	bne.n	8007154 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007146:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	019b      	lsls	r3, r3, #6
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	4313      	orrs	r3, r2
 8007152:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	697a      	ldr	r2, [r7, #20]
 8007158:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	693a      	ldr	r2, [r7, #16]
 800716c:	621a      	str	r2, [r3, #32]
}
 800716e:	bf00      	nop
 8007170:	371c      	adds	r7, #28
 8007172:	46bd      	mov	sp, r7
 8007174:	bc80      	pop	{r7}
 8007176:	4770      	bx	lr
 8007178:	40012c00 	.word	0x40012c00
 800717c:	40013400 	.word	0x40013400

08007180 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007180:	b480      	push	{r7}
 8007182:	b087      	sub	sp, #28
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6a1b      	ldr	r3, [r3, #32]
 8007190:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6a1b      	ldr	r3, [r3, #32]
 8007196:	f023 0201 	bic.w	r2, r3, #1
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f023 030a 	bic.w	r3, r3, #10
 80071bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071be:	697a      	ldr	r2, [r7, #20]
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	4313      	orrs	r3, r2
 80071c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	693a      	ldr	r2, [r7, #16]
 80071ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	697a      	ldr	r2, [r7, #20]
 80071d0:	621a      	str	r2, [r3, #32]
}
 80071d2:	bf00      	nop
 80071d4:	371c      	adds	r7, #28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bc80      	pop	{r7}
 80071da:	4770      	bx	lr

080071dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	f023 0210 	bic.w	r2, r3, #16
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6a1b      	ldr	r3, [r3, #32]
 80071fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007206:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	031b      	lsls	r3, r3, #12
 800720c:	697a      	ldr	r2, [r7, #20]
 800720e:	4313      	orrs	r3, r2
 8007210:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007218:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	011b      	lsls	r3, r3, #4
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4313      	orrs	r3, r2
 8007222:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	621a      	str	r2, [r3, #32]
}
 8007230:	bf00      	nop
 8007232:	371c      	adds	r7, #28
 8007234:	46bd      	mov	sp, r7
 8007236:	bc80      	pop	{r7}
 8007238:	4770      	bx	lr

0800723a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800723a:	b480      	push	{r7}
 800723c:	b085      	sub	sp, #20
 800723e:	af00      	add	r7, sp, #0
 8007240:	6078      	str	r0, [r7, #4]
 8007242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	4313      	orrs	r3, r2
 8007258:	f043 0307 	orr.w	r3, r3, #7
 800725c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	68fa      	ldr	r2, [r7, #12]
 8007262:	609a      	str	r2, [r3, #8]
}
 8007264:	bf00      	nop
 8007266:	3714      	adds	r7, #20
 8007268:	46bd      	mov	sp, r7
 800726a:	bc80      	pop	{r7}
 800726c:	4770      	bx	lr

0800726e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800726e:	b480      	push	{r7}
 8007270:	b087      	sub	sp, #28
 8007272:	af00      	add	r7, sp, #0
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	607a      	str	r2, [r7, #4]
 800727a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007288:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	021a      	lsls	r2, r3, #8
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	431a      	orrs	r2, r3
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	4313      	orrs	r3, r2
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	4313      	orrs	r3, r2
 800729a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	609a      	str	r2, [r3, #8]
}
 80072a2:	bf00      	nop
 80072a4:	371c      	adds	r7, #28
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bc80      	pop	{r7}
 80072aa:	4770      	bx	lr

080072ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	60b9      	str	r1, [r7, #8]
 80072b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	f003 031f 	and.w	r3, r3, #31
 80072be:	2201      	movs	r2, #1
 80072c0:	fa02 f303 	lsl.w	r3, r2, r3
 80072c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6a1a      	ldr	r2, [r3, #32]
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	43db      	mvns	r3, r3
 80072ce:	401a      	ands	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6a1a      	ldr	r2, [r3, #32]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f003 031f 	and.w	r3, r3, #31
 80072de:	6879      	ldr	r1, [r7, #4]
 80072e0:	fa01 f303 	lsl.w	r3, r1, r3
 80072e4:	431a      	orrs	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	621a      	str	r2, [r3, #32]
}
 80072ea:	bf00      	nop
 80072ec:	371c      	adds	r7, #28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bc80      	pop	{r7}
 80072f2:	4770      	bx	lr

080072f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007304:	2b01      	cmp	r3, #1
 8007306:	d101      	bne.n	800730c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007308:	2302      	movs	r3, #2
 800730a:	e032      	b.n	8007372 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007332:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	4313      	orrs	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007344:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	68ba      	ldr	r2, [r7, #8]
 800734c:	4313      	orrs	r3, r2
 800734e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68ba      	ldr	r2, [r7, #8]
 800735e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3714      	adds	r7, #20
 8007376:	46bd      	mov	sp, r7
 8007378:	bc80      	pop	{r7}
 800737a:	4770      	bx	lr

0800737c <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef *Init)
{
 800737c:	b480      	push	{r7}
 800737e:	b085      	sub	sp, #20
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	6812      	ldr	r2, [r2, #0]
 8007394:	f023 0101 	bic.w	r1, r3, #1
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	2b08      	cmp	r3, #8
 80073a4:	d102      	bne.n	80073ac <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80073a6:	2340      	movs	r3, #64	; 0x40
 80073a8:	60fb      	str	r3, [r7, #12]
 80073aa:	e001      	b.n	80073b0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(Device->BTCR[Init->NSBank],
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80073ba:	4b1b      	ldr	r3, [pc, #108]	; (8007428 <FSMC_NORSRAM_Init+0xac>)
 80073bc:	4013      	ands	r3, r2
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	6851      	ldr	r1, [r2, #4]
 80073c2:	68fa      	ldr	r2, [r7, #12]
 80073c4:	4311      	orrs	r1, r2
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	6892      	ldr	r2, [r2, #8]
 80073ca:	4311      	orrs	r1, r2
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	68d2      	ldr	r2, [r2, #12]
 80073d0:	4311      	orrs	r1, r2
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	6912      	ldr	r2, [r2, #16]
 80073d6:	4311      	orrs	r1, r2
 80073d8:	683a      	ldr	r2, [r7, #0]
 80073da:	6952      	ldr	r2, [r2, #20]
 80073dc:	4311      	orrs	r1, r2
 80073de:	683a      	ldr	r2, [r7, #0]
 80073e0:	6992      	ldr	r2, [r2, #24]
 80073e2:	4311      	orrs	r1, r2
 80073e4:	683a      	ldr	r2, [r7, #0]
 80073e6:	69d2      	ldr	r2, [r2, #28]
 80073e8:	4311      	orrs	r1, r2
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	6a12      	ldr	r2, [r2, #32]
 80073ee:	4311      	orrs	r1, r2
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073f4:	4311      	orrs	r1, r2
 80073f6:	683a      	ldr	r2, [r7, #0]
 80073f8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80073fa:	4311      	orrs	r1, r2
 80073fc:	683a      	ldr	r2, [r7, #0]
 80073fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007400:	4311      	orrs	r1, r2
 8007402:	683a      	ldr	r2, [r7, #0]
 8007404:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007406:	4311      	orrs	r1, r2
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800740c:	4311      	orrs	r1, r2
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	6812      	ldr	r2, [r2, #0]
 8007412:	4319      	orrs	r1, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
              Init->AsynchronousWait        |
              Init->WriteBurst              |
              Init->PageSize));


  return HAL_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3714      	adds	r7, #20
 8007420:	46bd      	mov	sp, r7
 8007422:	bc80      	pop	{r7}
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	fff00080 	.word	0xfff00080

0800742c <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007442:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	011b      	lsls	r3, r3, #4
 8007450:	431a      	orrs	r2, r3
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	021b      	lsls	r3, r3, #8
 8007458:	431a      	orrs	r2, r3
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	041b      	lsls	r3, r3, #16
 8007460:	431a      	orrs	r2, r3
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	691b      	ldr	r3, [r3, #16]
 8007466:	3b01      	subs	r3, #1
 8007468:	051b      	lsls	r3, r3, #20
 800746a:	431a      	orrs	r2, r3
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	3b02      	subs	r3, #2
 8007472:	061b      	lsls	r3, r3, #24
 8007474:	431a      	orrs	r2, r3
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	4313      	orrs	r3, r2
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	3201      	adds	r2, #1
 8007480:	4319      	orrs	r1, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                      ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                      (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                      (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                      (Timing->AccessMode)));

  return HAL_OK;
 8007488:	2300      	movs	r3, #0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	bc80      	pop	{r7}
 8007492:	4770      	bx	lr

08007494 <FSMC_NORSRAM_Extended_Timing_Init>:
  *            @arg FSMC_EXTENDED_MODE_DISABLE
  *            @arg FSMC_EXTENDED_MODE_ENABLE
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	60f8      	str	r0, [r7, #12]
 800749c:	60b9      	str	r1, [r7, #8]
 800749e:	607a      	str	r2, [r7, #4]
 80074a0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80074a8:	d11d      	bne.n	80074e6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(STM32F101xE) || defined(STM32F103xE) || defined(STM32F101xG) || defined(STM32F103xG)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80074b2:	4b13      	ldr	r3, [pc, #76]	; (8007500 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80074b4:	4013      	ands	r3, r2
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	6811      	ldr	r1, [r2, #0]
 80074ba:	68ba      	ldr	r2, [r7, #8]
 80074bc:	6852      	ldr	r2, [r2, #4]
 80074be:	0112      	lsls	r2, r2, #4
 80074c0:	4311      	orrs	r1, r2
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	6892      	ldr	r2, [r2, #8]
 80074c6:	0212      	lsls	r2, r2, #8
 80074c8:	4311      	orrs	r1, r2
 80074ca:	68ba      	ldr	r2, [r7, #8]
 80074cc:	6992      	ldr	r2, [r2, #24]
 80074ce:	4311      	orrs	r1, r2
 80074d0:	68ba      	ldr	r2, [r7, #8]
 80074d2:	68d2      	ldr	r2, [r2, #12]
 80074d4:	0412      	lsls	r2, r2, #16
 80074d6:	430a      	orrs	r2, r1
 80074d8:	ea43 0102 	orr.w	r1, r3, r2
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80074e4:	e005      	b.n	80074f2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* STM32F101xE || STM32F103xE || STM32F101xG || STM32F103xG */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80074ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bc80      	pop	{r7}
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	cff00000 	.word	0xcff00000

08007504 <__libc_init_array>:
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	2500      	movs	r5, #0
 8007508:	4e0c      	ldr	r6, [pc, #48]	; (800753c <__libc_init_array+0x38>)
 800750a:	4c0d      	ldr	r4, [pc, #52]	; (8007540 <__libc_init_array+0x3c>)
 800750c:	1ba4      	subs	r4, r4, r6
 800750e:	10a4      	asrs	r4, r4, #2
 8007510:	42a5      	cmp	r5, r4
 8007512:	d109      	bne.n	8007528 <__libc_init_array+0x24>
 8007514:	f000 f87a 	bl	800760c <_init>
 8007518:	2500      	movs	r5, #0
 800751a:	4e0a      	ldr	r6, [pc, #40]	; (8007544 <__libc_init_array+0x40>)
 800751c:	4c0a      	ldr	r4, [pc, #40]	; (8007548 <__libc_init_array+0x44>)
 800751e:	1ba4      	subs	r4, r4, r6
 8007520:	10a4      	asrs	r4, r4, #2
 8007522:	42a5      	cmp	r5, r4
 8007524:	d105      	bne.n	8007532 <__libc_init_array+0x2e>
 8007526:	bd70      	pop	{r4, r5, r6, pc}
 8007528:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800752c:	4798      	blx	r3
 800752e:	3501      	adds	r5, #1
 8007530:	e7ee      	b.n	8007510 <__libc_init_array+0xc>
 8007532:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007536:	4798      	blx	r3
 8007538:	3501      	adds	r5, #1
 800753a:	e7f2      	b.n	8007522 <__libc_init_array+0x1e>
 800753c:	0800be34 	.word	0x0800be34
 8007540:	0800be34 	.word	0x0800be34
 8007544:	0800be34 	.word	0x0800be34
 8007548:	0800be38 	.word	0x0800be38

0800754c <__itoa>:
 800754c:	1e93      	subs	r3, r2, #2
 800754e:	2b22      	cmp	r3, #34	; 0x22
 8007550:	b510      	push	{r4, lr}
 8007552:	460c      	mov	r4, r1
 8007554:	d904      	bls.n	8007560 <__itoa+0x14>
 8007556:	2300      	movs	r3, #0
 8007558:	461c      	mov	r4, r3
 800755a:	700b      	strb	r3, [r1, #0]
 800755c:	4620      	mov	r0, r4
 800755e:	bd10      	pop	{r4, pc}
 8007560:	2a0a      	cmp	r2, #10
 8007562:	d109      	bne.n	8007578 <__itoa+0x2c>
 8007564:	2800      	cmp	r0, #0
 8007566:	da07      	bge.n	8007578 <__itoa+0x2c>
 8007568:	232d      	movs	r3, #45	; 0x2d
 800756a:	700b      	strb	r3, [r1, #0]
 800756c:	2101      	movs	r1, #1
 800756e:	4240      	negs	r0, r0
 8007570:	4421      	add	r1, r4
 8007572:	f000 f80d 	bl	8007590 <__utoa>
 8007576:	e7f1      	b.n	800755c <__itoa+0x10>
 8007578:	2100      	movs	r1, #0
 800757a:	e7f9      	b.n	8007570 <__itoa+0x24>

0800757c <itoa>:
 800757c:	f7ff bfe6 	b.w	800754c <__itoa>

08007580 <memset>:
 8007580:	4603      	mov	r3, r0
 8007582:	4402      	add	r2, r0
 8007584:	4293      	cmp	r3, r2
 8007586:	d100      	bne.n	800758a <memset+0xa>
 8007588:	4770      	bx	lr
 800758a:	f803 1b01 	strb.w	r1, [r3], #1
 800758e:	e7f9      	b.n	8007584 <memset+0x4>

08007590 <__utoa>:
 8007590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007592:	b08b      	sub	sp, #44	; 0x2c
 8007594:	4605      	mov	r5, r0
 8007596:	460c      	mov	r4, r1
 8007598:	466e      	mov	r6, sp
 800759a:	4b1b      	ldr	r3, [pc, #108]	; (8007608 <__utoa+0x78>)
 800759c:	f103 0c20 	add.w	ip, r3, #32
 80075a0:	4637      	mov	r7, r6
 80075a2:	6818      	ldr	r0, [r3, #0]
 80075a4:	6859      	ldr	r1, [r3, #4]
 80075a6:	3308      	adds	r3, #8
 80075a8:	c703      	stmia	r7!, {r0, r1}
 80075aa:	4563      	cmp	r3, ip
 80075ac:	463e      	mov	r6, r7
 80075ae:	d1f7      	bne.n	80075a0 <__utoa+0x10>
 80075b0:	6818      	ldr	r0, [r3, #0]
 80075b2:	791b      	ldrb	r3, [r3, #4]
 80075b4:	6038      	str	r0, [r7, #0]
 80075b6:	713b      	strb	r3, [r7, #4]
 80075b8:	1e93      	subs	r3, r2, #2
 80075ba:	2b22      	cmp	r3, #34	; 0x22
 80075bc:	f04f 0300 	mov.w	r3, #0
 80075c0:	d904      	bls.n	80075cc <__utoa+0x3c>
 80075c2:	7023      	strb	r3, [r4, #0]
 80075c4:	461c      	mov	r4, r3
 80075c6:	4620      	mov	r0, r4
 80075c8:	b00b      	add	sp, #44	; 0x2c
 80075ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075cc:	1e66      	subs	r6, r4, #1
 80075ce:	fbb5 f0f2 	udiv	r0, r5, r2
 80075d2:	fb02 5510 	mls	r5, r2, r0, r5
 80075d6:	af0a      	add	r7, sp, #40	; 0x28
 80075d8:	443d      	add	r5, r7
 80075da:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80075de:	1c59      	adds	r1, r3, #1
 80075e0:	f806 5f01 	strb.w	r5, [r6, #1]!
 80075e4:	4605      	mov	r5, r0
 80075e6:	b968      	cbnz	r0, 8007604 <__utoa+0x74>
 80075e8:	4622      	mov	r2, r4
 80075ea:	5460      	strb	r0, [r4, r1]
 80075ec:	4423      	add	r3, r4
 80075ee:	1b19      	subs	r1, r3, r4
 80075f0:	1b10      	subs	r0, r2, r4
 80075f2:	4281      	cmp	r1, r0
 80075f4:	dde7      	ble.n	80075c6 <__utoa+0x36>
 80075f6:	7811      	ldrb	r1, [r2, #0]
 80075f8:	7818      	ldrb	r0, [r3, #0]
 80075fa:	f802 0b01 	strb.w	r0, [r2], #1
 80075fe:	f803 1901 	strb.w	r1, [r3], #-1
 8007602:	e7f4      	b.n	80075ee <__utoa+0x5e>
 8007604:	460b      	mov	r3, r1
 8007606:	e7e2      	b.n	80075ce <__utoa+0x3e>
 8007608:	0800be0c 	.word	0x0800be0c

0800760c <_init>:
 800760c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760e:	bf00      	nop
 8007610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007612:	bc08      	pop	{r3}
 8007614:	469e      	mov	lr, r3
 8007616:	4770      	bx	lr

08007618 <_fini>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	bf00      	nop
 800761c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761e:	bc08      	pop	{r3}
 8007620:	469e      	mov	lr, r3
 8007622:	4770      	bx	lr
